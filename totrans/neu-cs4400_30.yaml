- en: Using Higher-Order & Anonymous FunctionsTuesday, January 31st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用高阶和匿名函数
- en: 'Say that we have a function for estimating derivatives of a function at a specific
    point:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个用于估计函数在特定点上的导数的函数：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And say that we want to try out various functions given some `plot` function
    that draws graphs of numeric functions, for example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要尝试各种函数，给定一些绘制数值函数图形的`plot`函数，例如：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The problem is that `plot` expects a single `(Number -> Number)` function —
    if we want to try it with a derivative, we can do this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于`plot`期望一个单一的`(Number -> Number)`函数——如果我们想要尝试使用导数，我们可以这样做：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But this will get very tedious very fast — it is much simpler to use an anonymous
    function:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这将非常快速变得非常乏味——使用匿名函数要简单得多：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: we can even verify that our derivative is correct by comparing a known function
    to its derivative
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以通过将一个已知函数与其导数进行比较来验证我们的导数是否正确
- en: '[PRE4]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'But it’s still not completely natural to do these things — you need to explicitly
    combine functions, which is not too convenient. Instead of doing this, we can
    write H.O. functions that will work with functional inputs and outputs. For example,
    we can write a function to subtract functions:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这仍然不完全自然地做这些事情——您需要明确地组合函数，这并不太方便。 而不是这样做，我们可以编写将使用功能输入和输出的 H.O. 函数。 例如，我们可以编写一个函数来减去函数：
- en: '[PRE5]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'and the same for the derivative:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 导数也是如此：
- en: '[PRE6]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we can try the same in a much easier way:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以以更简单的方式尝试相同的内容：
- en: '[PRE7]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'More than that — our `fderiv` could be created from `deriv` automatically:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是——我们的`fderiv`可以自动从`deriv`创建：
- en: '[PRE8]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Same principle with `fsub`: we can write a function that converts a binary
    arithmetical function into a function that operates on unary numeric function.
    But to make things more readable we can define new types for unary and binary
    numeric functions:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与`fsub`相同的原则：我们可以编写一个将二进制算术函数转换为对一元数值函数进行操作的函数。 但是为了使事情更易于阅读，我们可以为一元和二元数值函数定义新类型：
- en: '[PRE9]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can do this with anything — developing a rich library of functions and functionals
    (functions over functions) is extremely easy… Here’s a pretty extensive yet very
    short library of functions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用任何东西来做这件事——开发一个丰富的函数和函数式（对函数的函数）库非常容易... 这是一个相当广泛但非常简短的函数库：
- en: '[PRE10]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is written in the “untyped dialect” of the class language, but it should
    be easy now to add the types.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用类语言的“无类型方言”编写的，但现在应该很容易添加类型。
- en: 'Examples:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE11]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Side-note: “Point-Free” combinatorsTuesday, January 31st'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旁注：“点无关”组合器
- en: Forming functions without using `lambda` (or an implicit `lambda` using a `define`
    syntactic sugar) is called *point-free style*. It’s especially popular in Haskell,
    where it is easier to form functions this way because of implicit currying and
    a large number of higher level function combinators. If used too much, it can
    easily lead to obfuscated code.
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在不使用`lambda`（或使用`define`语法糖隐式使用`lambda`）的情况下形成函数称为*点无关样式*。 它在Haskell中特别受欢迎，因为由于隐式柯里化和大量的高阶函数组合器，以这种方式形成函数更容易。
    如果过度使用，它很容易导致代码混淆。
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'All of this is similar to run-time code generation, but not really. The only
    thing that `fderiv` does is take a function and store it somewhere in the returned
    function, then when that function receives a number, it uses the stored function
    and send it to deriv with the number. We could simply write deriv as what `fderiv`
    is — which is the *real* derivative function:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都类似于运行时代码生成，但实际上并不是。 `fderiv`唯一要做的就是取一个函数并将其存储在返回的函数中，然后当该函数接收一个数字时，它使用存储的函数并将其发送给deriv以进行计算。
    我们可以简单地将deriv写成`fderiv`所表示的——这才是*真正的*导数函数：
- en: '[PRE12]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'but again, this is not faster or slower than the plain `deriv`. However, there
    are some situations where we can do some of the computation on the first-stage
    argument, saving work from the second stage. Here is a cooked-to-exaggeration
    example — we want a function that receives two inputs `x`, `y` and returns `fib(x)*y`,
    but we must use a stupid `fib`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但是再次注意，这与普通的`deriv`既不更快也不更慢。 但是，在某些情况下，我们可以在第一阶段参数上执行一些计算，从而节省第二阶段的工作。 这是一个夸张的例子——我们想要一个函数，它接收两个输入`x`、`y`并返回`fib(x)*y`，但我们必须使用一个愚蠢的`fib`：
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The function we want is:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要的函数是：
- en: '[PRE14]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we currify it as usual (or just use `currify`), we get:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们像往常一样柯里化它（或者只是使用`currify`），我们会得到：
- en: '[PRE15]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And try this several times:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 并多次尝试此操作：
- en: '[PRE16]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'But in the definition of `bogus`, notice that `(fib x)` does not depend on
    `y` — so we can rewrite it a little differently:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在`bogus`的定义中，请注意`(fib x)`不依赖于`y`——所以我们可以稍微以不同的方式重写它：
- en: '[PRE17]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'and trying the above again is much faster now:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次尝试上述方法会快得多：
- en: '[PRE18]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
