- en: Racket-1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Racket-1
- en: Getting Started
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门指南
- en: 'Copy the source code for the Racket-1 interpreter into your current directory
    by typing the following into your terminal:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中输入以下内容，将 Racket-1 解释器的源代码复制到当前目录：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Alternatively, you can download the code [here](http://inst.eecs.berkeley.edu/~cs61as/library/racket1.rkt).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以在此处下载代码 [here](http://inst.eecs.berkeley.edu/~cs61as/library/racket1.rkt)。
- en: 'To start Racket-1, type the following in Racket:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 Racket-1，在 Racket 中输入以下内容：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Familiarize yourself with Racket-1 by evaluating some expressions. Try typing
    regular Racket expressions and see what happens!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉 Racket-1，通过评估一些表达式来了解它。尝试输入常规的 Racket 表达式，看看会发生什么！
- en: 'You might notice that you can''t do everything in Racket-1 that you can do
    in normal Racket:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，在 Racket-1 中，你不能做到在正常的 Racket 中可以做的一切：
- en: You have all the Racket primitives for arithmetic and list manipulation.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有所有用于算术和列表操作的 Racket 原语。
- en: You have `lambda` but not higher-order functions.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有`lambda`，但没有高阶函数。
- en: You don't have `define`.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你没有`define`。
- en: To stop the Racket-1 interpreter and return to Racket, just evaluate an illegal
    expression, such as `()`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止 Racket-1 解释器并返回 Racket，只需评估一个非法表达式，如`()`。
- en: What Is an Interpreter?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释器是什么？
- en: In order to run a program on a computer, something in the computer must understand
    the intentions of the code, perform the necessary computations, and then return
    the results. This thing acts as a mediator between the programmer's ideas and
    the hardware that computes them. One such mediator is an **interpreter**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在计算机上运行程序，计算机中的某些东西必须理解代码的意图，执行必要的计算，然后返回结果。这个东西充当了程序员思想和计算机硬件之间的中介。其中一种中介是**解释器**。
- en: '`racket` is an interpreter for Racket. It translates Racket source code into
    instructions that the computer, then tells the computer to execute them. It has
    the ability to read input and display output.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`racket` 是 Racket 的解释器。它将 Racket 源代码转换为计算机指令，然后告诉计算机执行它们。它具有读取输入和显示输出的功能。'
- en: Racket-1 is also an interpreter. It works for a purely functional subset of
    Racket. The fact that Racket-1 is written *in* Racket is interesting but unimportant.
    We could also write Racket-1 in another language, like Python, but what really
    matters to us as users is what the interpreter *does*, not what its source code
    looks like.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Racket-1 也是一个解释器。它适用于 Racket 的纯函数子集。Racket-1 是用 Racket 编写的这个事实很有趣但并不重要。我们也可以用其他语言（比如
    Python）编写 Racket-1，但对我们作为用户真正重要的是解释器*做*什么，而不是它的源代码是什么样子。
- en: We'll talk more about interpreters in just a few lessons. For now, let's discuss
    how Racket-1 works.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的几堂课中更多地讨论解释器。现在，让我们讨论一下 Racket-1 的工作原理。
- en: How Does Racket-1 Work?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Racket-1 是如何工作的？
- en: '**racket-1**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**racket-1**'
- en: 'racket-1 follows these rules:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: racket-1 遵循以下规则：
- en: 'To evaluate a combination:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要评估一个组合：
- en: Evaluate the subexpressions of the combination
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估组合的子表达式
- en: Apply the procedure that is the value of the leftmost subexpression (the operator)
    to the arguments that are the values of the other subexpressions (the operands).
    To apply a compound procedure to arguments, evaluate the body of the procedure
    with each formal parameter replaced by the corresponding argument.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最左边子表达式（运算符）的值应用于其他子表达式（操作数）的值。要将复合过程应用于参数，用每个形式参数替换对应的参数来评估过程的主体。
- en: '(SICP: [1.1.3](http://mitpress.mit.edu/sicp/full- text/book/book-Z-H-10.html#%_sec_1.1.3),
    [1.1.5](http://mitpress.mit.edu/sicp /full-text/book/book-Z-H-10.html#%_sec_1.1.5))'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '(SICP: [1.1.3](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.3)，[1.1.5](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.5))'
- en: 'Example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What happens here? Given the rules, walk through the evaluation by hand.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？根据规则，手动逐步评估。
- en: '**Read-Eval-Print Loop**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**读-求值-打印循环**'
- en: An interpreter needs a loop that allows it to do all the things it does. Every
    time you type a command, racket-1 parses and executes your input, returns the
    output, and then waits for another command. This is called a Read-Eval-Print loop
    (REPL).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器需要一个循环，允许它执行它所做的所有事情。每次键入命令时，racket-1 解析和执行您的输入，返回输出，然后等待另一个命令。这称为读取-求值-打印循环（REPL）。
- en: 'Here is all of racket-1:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是全部的 racket-1：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first three lines simply print the prompt "Racket-1: ". The fourth line
    is the important one. Here, input is read, parsed and sent to eval-1 to be evaluated.
    After eval-1 takes care of executing the code, its result is printed. Finally,
    racket-1 calls itself to restart the process, to display another "Racket-1: "
    and take another command.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '前三行简单地打印提示符“Racket-1: ”。第四行是重要的一行。在这里，输入被读取、解析并发送到 eval-1 进行评估。在 eval-1 处理执行代码后，打印其结果。最后，racket-1
    调用自身重新启动该过程，显示另一个“Racket-1: ”并接受另一个命令。'
- en: '**Eval-1**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**Eval-1**'
- en: Eval-1 is in charge of returning the result of whatever computation it was passed
    as exp. It is composed of a cond, with a clause for everything it can interpret
    and compute. Note that it is in Eval-1 where special forms are caught and handled.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Eval-1 负责返回作为 exp 传递的任何计算的结果。它由一个 cond 组成，其中包含它可以解释和计算的每个子句。请注意，特殊形式是在 Eval-1
    中捕获和处理的。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Apply-1**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**Apply-1**'
- en: 'Apply-1 is called by eval-1 when it is time to apply a procedure to its arguments.
    Apply-1 takes care of two cases:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要将一个过程应用于其参数时，eval-1 会调用 apply-1。Apply-1 处理两种情况：
- en: racket-1 primatives. In this context, a primative is a non-user-defined procedures.
    All Racket procedures are Racket-1 primatives.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: racket-1 原语。在这个上下文中，原语是指非用户定义的过程。所有 Racket 过程都是 racket-1 原语。
- en: Lambda functions, or user defined procedures.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda 函数，或用户定义的过程。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Mutual Recursion (in racket-1)**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**互递归（在 racket-1 中）**'
- en: '![eval](/static/eval.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![eval](/static/eval.png)'
- en: Practice with Racket-1
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 Racket-1 练习
- en: Okay, so even though you just finished staring at the code, you probably don't
    completely understand all of it yet. Let's go through a few exercises to better
    acquaint you with the program.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，即使你刚刚完成盯着代码看了一会儿，你可能还没有完全理解其中的所有内容。让我们通过一些练习来更好地了解这个程序。
- en: 'Manually trace through (in detail) how racket-1 handles the following procedure
    call:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 手动详细跟踪 racket-1 如何处理以下过程调用：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In particular, walk through all of the functions that racket-1 must call to
    evaluate this expression.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，逐步跟踪 racket-1 必须调用的所有函数来评估此表达式。
- en: 'Try inventing higher-order procedures; since you don''t have define you''ll
    have to use the Y-combinator trick, like this:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试发明高阶过程；由于没有 define，你将不得不使用 Y-组合器技巧，就像这样：
- en: '[PRE7]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Since all the Racket primitives are automatically available in racket-1, you
    might think you could use Racket''s primitive map function. Try these examples:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于所有的 Racket 原语在 racket-1 中都是自动可用的，你可能会认为你可以使用 Racket 的原始 map 函数。尝试这些例子：
- en: '[PRE8]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Explain the results.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 解释结果。
- en: Modify the interpreter to add the `and` special form. Test your work. Be sure
    that as soon as a false value is computed, your `and` returns `#f` without evaluating
    any further arguments.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改解释器以添加 `and` 特殊形式。测试你的工作。确保一旦计算出一个 false 值，你的 `and` 就会返回 `#f`，而不会继续评估任何其他参数。
