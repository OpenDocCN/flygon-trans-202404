- en: 'Recitation 17: Verification Example, Review of Logic'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17节：验证示例，逻辑复习
- en: In the previous lecture, we saw an example of verification. Today we'll look
    at another example.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节讲座中，我们看到了一个验证的例子。今天我们将看另一个例子。
- en: 'Consider the following recursive implementation of a function `lmax` that computes
    the maximum element of a nonempty list:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下递归实现一个函数`lmax`，它计算非空列表的最大元素：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'How do we handle recursive functions? We''ll use the approach of assuming that
    a recursive function satisfies its spec whenever it is called recursively. A proof
    of correctness will then ensure the **partial correctness** of the function''s
    implementation, which we can distinguish from **total correctness**:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何处理递归函数？我们将使用一种假设的方法，即递归调用时递归函数满足其规格。然后，正确性的证明将确保函数实现的**部分正确性**，我们可以将其与**完全正确性**区分开：
- en: '**Partial correctness**: whenever the function is applied with the precondition
    satisfied, and it terminates, it produces results satisfying the postcondition.'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**部分正确性**：每当函数在满足前置条件并终止时被应用，它产生满足后置条件的结果。'
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Total correctness**: the function has partial correctness, and in addition,
    it always terminates when the function is applied.'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**完全正确性**：函数具有部分正确性，并且在应用函数时总是终止。'
- en: The nice thing about this approach is that we can separate the problem of proving
    that a function computes the right answer from the problem of proving that the
    function terminates.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的好处是，我们可以将证明函数计算正确答案的问题与证明函数终止的问题分开。
- en: Partial Correctness
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部分正确性
- en: 'Let''s prove partial correctness. First of all, we need to understand our postcondition
    a little more precisely. What are the elements of a list? We can define a function
    that gives us the elements by induction on the list:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们证明部分正确性。首先，我们需要更加准确地了解我们的后置条件。列表的元素是什么？我们可以定义一个函数，通过对列表进行归纳，给出我们的元素：
- en: elements(`[]`) = ∅
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: elements(`[]`) = ∅
- en: elements(h `::` t) = {h} ∪ elements(t)
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: elements(h `::` t) = {h} ∪ elements(t)
- en: Like an abstraction function, this function maps from the concrete domain of
    OCaml lists to a more abstract mathematical domain, that of sets.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 就像一个抽象函数一样，这个函数将从OCaml列表的具体域映射到更抽象的数学域，即集合的域。
- en: '| Expression | Assumptions | Justification |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 表达式 | 假设 | 正当化 |'
- en: '| `lmax xs` | xs ≠ [] | Consider an arbitrary call satisfying the precondition.
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `lmax xs` | xs ≠ [] | 考虑满足前置条件的任意调用。 |'
- en: '| `match xs with []-> ...` | xs ≠ [] | Expand the function body. Now we need
    to create cases to know which way the `match` will go. Here are three exhaustive
    cases: xs = [], xs = [x], xs = x :: t. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `match xs with []-> ...` | xs ≠ [] | 展开函数体。现在我们需要创建情况来知道`match`会走哪个路线。这里有三种穷举情况：xs
    = []，xs = [x]，xs = x :: t。 |'
- en: '| Case xs = [] |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 情况 xs = [] |'
- en: '| `raise (Failure ...)` | xs ≠ [] | This case can''t happen according to our
    assumptions. The postcondition is vacuously satisfied. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `raise (Failure ...)` | xs ≠ [] | 根据我们的假设，这种情况不可能发生。后置条件被空泛地满足。 |'
- en: '| Case xs = [x] = x :: [] |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 情况 xs = [x] = x :: [] |'
- en: '| `x` | xs = [x] | The result is the only element in `xs`, so elements(xs)
    = {x}, and therefore x is the maximum element in elements(xs). |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `x` | xs = [x] | 结果是`xs`中唯一的元素，因此`elements(xs) = {x}`，因此`x`是`elements(xs)`中的最大元素。
    |'
- en: '| Case xs = x::t and t ≠ [] |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 情况 xs = x::t 且 t ≠ [] |'
- en: '| `max x (lmax t)` | xs = x::t t ≠ [] | Now `lmax` can be applied to t; crucially,
    t is not the empty list, so the precondition of `lmax` is satisfied. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `max x (lmax t)` | xs = x::t t ≠ [] | 现在可以将`lmax`应用于`t`；关键是，`t`不是空列表，因此`lmax`的前置条件得到满足。
    |'
- en: '| `max x n1` | xs = x::t t ≠ []'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '| `max x n1` | xs = x::t t ≠ []'
- en: n1 = maximum of elements(t) | Now we can apply the function `max`, using *its*
    spec, obtaining some value n2 that satisfies the postcondition of `max`. |
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: n1 = elements(t)的最大值 | 现在我们可以应用函数`max`，使用*它*的规格，得到满足`max`后置条件的一些值n2。 |
- en: '| `n2` | xs = x::t t ≠ []'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '| `n2` | xs = x::t t ≠ []'
- en: n1 = maximum of elements(t)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: n1 = elements(t)的最大值
- en: (n2 = x or
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: (n2 = x 或
- en: n2 = n1)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: n2 = n1）
- en: n2 ≥ x
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: n2 ≥ x
- en: n2 ≥ n1 | From the mathematical definition of the maximum element of a set,
    the value n1 must be an element of t and must be at least as large as any element
    of t. The specification says that n2 must be an element of xs and at least as
    large as any element of xs. We know from the definition of elements that elements(xs)
    = {x}∪elements(t). So n2 must be an element of xs because it's either x or it's
    n1, which is an element of t. Further, n2 must be at least as large as x (n2 ≥
    x). And it must be at least as large as elements(t), since it's at least as large
    as n1, which is at least as large as any element of t. Therefore n2 is the maximum
    element of xs in this case. |
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: n2 ≥ n1 | 根据集合最大元素的数学定义，值 n1 必须是 t 的一个元素，并且必须至少与 t 的任何元素一样大。规范指出 n2 必须是 xs 的一个元素，并且至少与
    xs 的任何元素一样大。我们从元素的定义知道，elements(xs) = {x}∪elements(t)。因此 n2 必须是 xs 的一个元素，因为它要么是
    x，要么是 n1，而 n1 是 t 的一个元素。此外，n2 必须至少与 x 一样大（n2 ≥ x）。并且它必须至少与 elements(t) 一样大，因为它至少与
    n1 一样大，而 n1 至少与 t 的任何元素一样大。因此在这种情况下，n2 是 xs 的最大元素。 |
- en: '| QED |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| QED |'
- en: Total Correctness
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总正确性
- en: 'The key to proving total correctness is to prove that recursion cannot go on
    forever. We need to be able to map the function arguments onto a set that has
    a least element. Typically we do this by giving a **decrementing function** d(x)
    that maps the function argument x onto the natural numbers. The decrementing function
    d has two properties:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 证明总正确性的关键是证明递归不能永远进行。我们需要能够将函数参数映射到具有最小元素的集合上。通常，我们通过给出一个**减函数** d(x)，将函数参数
    x 映射到自然数上来实现这一点。减函数 d 具有两个属性：
- en: 'It maps any function arguments that satisfy the precondition to a natural number
    (≥ 0):'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将任何满足前置条件的函数参数映射到一个自然数（≥ 0）上：
- en: PRE ⇒ 0 ≤ d(x)
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PRE ⇒ 0 ≤ d(x)
- en: 'Whenever there is a recursive call, the decrementing function applied to the
    arguments x'' of the recursive call is strictly smaller:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当有递归调用时，减函数应用于递归调用的参数 x' 时都会严格变小：
- en: 0 ≤ d(x') < d(x).
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0 ≤ d(x') < d(x).
- en: This means that when the decrementing function is zero, there is no recursive
    call.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当减函数为零时，意味着没有递归调用。
- en: These conditions ensure that the decrementing function keeps getting smaller
    on every recursive call, but cannot get smaller forever.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些条件确保减函数在每次递归调用时都变得更小，但不能永远变小。
- en: 'For example, in `lmax` an appropriate decrementing function is: d(x) = `List.length`(x)
    − 1\. It must be nonnegative; when it is zero, the function terminates; and the
    recursive call to `lmax` is on a shorter list `t`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 `lmax` 中，一个适当的减函数是：d(x) = `List.length`(x) − 1\. 它必须是非负的；当它为零时，函数终止；而且对
    `lmax` 的递归调用是在一个更短的列表 `t` 上进行的。
- en: A review of propositional logic
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命题逻辑回顾
- en: 'Recall from CS 2800 that **propositional logic** is a logic built up from simple
    symbols representing propositions about some world. For our example, we will use
    the letters A, B, C, ... as propositional symbols. For example, these symbols
    might stand for various propositions:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请回顾 CS 2800 中*命题*逻辑是由表示有关某个世界命题的简单符号构建的逻辑。对于我们的例子，我们将使用字母 A、B、C，... 作为命题符号。例如，这些符号可能代表各种命题：
- en: A = "got 90% on the final"
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A = "期末考试得了 90%"
- en: B = "attended class every time"
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: B = "每次上课都有参加"
- en: C = "got an A in the class"
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C = "在课程中得了 A"
- en: D = "x + 1 ≤ y"
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D = "x + 1 ≤ y"
- en: E = "e ∈ s"
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: E = "e ∈ s"
- en: It is not the job of *propositional* logic to assign meanings to these symbols.
    However, we use statements to the meanings of D and E to talk about the correctness
    of programs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*命题*逻辑的工作不是为这些符号分配含义。但是，我们使用关于 D 和 E 的含义的语句来讨论程序的正确性。'
- en: 'We define a grammar for **propositions** built up from these symbols. We use
    the letters P, Q, R to represent propositions (or **formulas**):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为从这些符号构建的**命题**定义了一个语法。我们使用字母 P、Q、R 来表示命题（或**公式**）：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note: On some browsers, on some operating systems, in some fonts, the symbol
    for conjunction (and) is rendered incorrectly as a small circle. It should look
    like an upside-down ∨. In these course notes, it will appear variously as `∧`,
    ∧, or ∧.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在某些浏览器、某些操作系统、某些字体上，合取（并且）的符号被错误地渲染为一个小圆圈。它应该看起来像一个倒置的∨。在这些课程笔记中，它将以 `∧`，∧，或∧
    的形式出现。
- en: The precedence of these forms decreases as we go down the list, so P ∧ Q ⇒ R
    is the same as (P ∧ Q) ⇒ R. One thing to watch out for is that ⇒ is right-associative
    (like →), so P ⇒ Q ⇒ R is the same as P ⇒ (Q ⇒ R). We will introduce parentheses
    as needed for clarity. We will use the notation for logical negation, but it is
    really just syntactic sugar for the implication P ⇒ ⊥. We also write P ⇔ Q as
    syntactic sugar for (P ⇒ Q) ∧ (Q ⇒ P), meaning that P and Q are logically equivalent.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们往下看，这些形式的优先级会降低，因此 P ∧ Q ⇒ R 和 (P ∧ Q) ⇒ R 是一样的。需要注意的一点是，⇒ 是右结合的（就像 → 一样），所以
    P ⇒ Q ⇒ R 和 P ⇒ (Q ⇒ R) 是一样的。我们会根据需要引入括号以保持清晰。我们会使用逻辑否定的符号，但实际上它只是蕴含 P ⇒ ⊥ 的一种语法糖。我们也将
    P ⇔ Q 写成 (P ⇒ Q) ∧ (Q ⇒ P) 的语法糖，意思是 P 和 Q 在逻辑上是等价的。
- en: 'This grammar defines the language of propositions. With suitable propositional
    symbols, we can express various interesting statements, for example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语法定义了命题的语言。通过合适的命题符号，我们可以表达各种有趣的陈述，例如：
- en: A ∧ B ⇒ C
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: A ∧ B ⇒ C
- en: '"If I got a 90% on the final and I attended class, I will get an A"'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '"如果我期末考试得了 90 分，并且我上了课，那我就会得到 A"'
- en: ¬C ⇒ (¬A ∨ ¬B)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ¬C ⇒ (¬A ∨ ¬B)
- en: '"If I didn''t get an A in the class, then either I didn''t get a 90% on the
    final or I didn''t attend class"'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '"如果我在课堂上没有得到 A，那么要么我期末考试没得到 90 分，要么我没有上课"'
- en: C ∨ ¬A ∨ ¬B
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: C ∨ ¬A ∨ ¬B
- en: '"Either I got an A in the class, or I didn''t get a 90% on the final or I didn''t
    attend class"'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '"要么我在课堂上得到了 A，要么我期末考试没有得到 90 分，要么我没有上课"'
- en: In fact, all three of these propositions are logically equivalent, which we
    can determine without knowing about what finals and attendance mean.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这三个命题都是逻辑等价的，我们可以在不知道期末考试和上课意味着什么的情况下确定这一点。
