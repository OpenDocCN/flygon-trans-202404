- en: Bower
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bower all the things
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unless you live in a hole, you are well aware that the JavaScript revolution
    is all around us. Many of the amazing concepts I discovered in the Rails ecosystem
    are now bursting out into the JavaScript space allowing for a greater distribution
    of awesome. The three pillars are; Yeoman, Bower and Grunt.
  prefs: []
  type: TYPE_NORMAL
- en: The problem I need to solve is; what is the best way to get some library code
    up on Github and make it easily accessible to users without having to clone the
    project? Because, that's pretty lame, right?
  prefs: []
  type: TYPE_NORMAL
- en: Yeoman generators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Initially I came across [generator-sass-boilerplate](https://github.com/srsgores/generator-sass-boilerplate),
    a 'Yeoman generator for quickly scaffolding out Sass styles'. This is a very interesting
    approach for creating a complex library and allowing the user to customize the
    install. But for a simpler library of code, maybe just some functions and mixins,
    this is way to much overhead.
  prefs: []
  type: TYPE_NORMAL
- en: Bower is the answer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fast forward to now. I recently came across new posts that really break down
    what Bower is and what it is best at. And it hit me, this IS the answer!
  prefs: []
  type: TYPE_NORMAL
- en: For those not in the know, Bower is an extremely simple solution for front-end
    package management.
  prefs: []
  type: TYPE_NORMAL
- en: It offers a generic, unopinionated solution to the problem of front-end package
    management, while exposing the package dependency model via an API that can be
    consumed by a more opinionated build stack.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The beauty of Bower is held within it's simplicity. Bower has a registry, but
    it's not 100% necessary. The common command is `bower install <package>` where
    `<package>` can refer to a [large number of options](http://bower.io/#using-a-different-name-and-a-specific-version-of-a-package),
    thus making it dirt simple to just share some code. NICE!
  prefs: []
  type: TYPE_NORMAL
- en: Sticking with the 'dirt simple' theme, you can use Bower to easily pull a repo
    into your project without having to clone it. Even if it doesn't have a `bower.json`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: For example Stipe, a Compass Extension library I wrote, is not Bower aware at
    all.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Run that command in any folder and you will pull in the entire repo with no
    Github history. This alone is pretty interesting.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Bower
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, it''s simple really. Assuming that Node and npm is installed
    on your local box, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Install Bower package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I won''t go into exhaustive detail here, but 99% of the time you simply need
    to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As stated above, there are alternate install options, but the primary solution
    is to have a `bower.json` file in the repo and have it registered with Bower.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a `bower.json` file in your project, explained in the next section,
    you can add the `--save` flag with the install and this will add the library as
    a dependency in your project. Sweet.
  prefs: []
  type: TYPE_NORMAL
- en: When you distribute the project, a user who clones it only has to run `$ bower
    install` and it will pull in all the external resources. Nice!
  prefs: []
  type: TYPE_NORMAL
- en: Commit or not to commit!?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This new system of creating and distributing resources raises an interesting
    question; do you commit all your bower packages or not? In the Ruby world, Gems
    are not actually part of the project, but dependencies of the project, and never
    committed to the project's version control. In this new JavaScript world, Node
    and Bower package dependencies are referenced via a manifest, much like the Gemfile
    in Ruby, but are actually installed into the root of the project directory.
  prefs: []
  type: TYPE_NORMAL
- en: There is a [whole discussion](http://addyosmani.com/blog/checking-in-front-end-dependencies/)
    on this topic. I look at it this way, when you install a Bower library, are you
    leaving this as a dependency or are you making modifications?
  prefs: []
  type: TYPE_NORMAL
- en: The choice is up to you, the arguments are strong on either side. In a situation
    where you are actually forking the code you installed, then the answer is pretty
    clear, it should be committed to the project or you need to fork the dependency.
  prefs: []
  type: TYPE_NORMAL
- en: Generate new Bower package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a new Bower package is again, really simple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the CLI, this will initiate a series of questions, the answers of which
    will be plugged into the new `bower.json` file it creates. Put as much in as you
    want, but all you really need is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And that's it really. You have just created your first Bower resource library.
    Now go forth and build! Build out your resources, documentation, etc ... your
    package is ready to go at any time.
  prefs: []
  type: TYPE_NORMAL
- en: For easy testing, remember the `$ bower install git://github.com/ ...` trick?
    Run this against a new repo and see how it installs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Be mindful of this step and what the package contains. In my opinion, I see
    Bower as a great way to distribute smaller, specific libraries of code. When I
    pull in your Bower package, do I really want all your documentation, tests, demonstration
    resources, etc ... As an example, I am going to pick on the Bourbon kids here,
    run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this installer, you will get the whole repo. I don''t want the whole
    repo, all I really want is what is in the `dist/` dir. To solve this, another
    developer forked Bourbon and created a new repo called [bower-bourbon](https://github.com/hmps/bourbon):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Running this install you actually only get what is in the `dist/` dir. But are
    these forks reliable? Ohh open source, you are a wild one.
  prefs: []
  type: TYPE_NORMAL
- en: '**UPDATE:** It''s been brought to my attention that using the Bower install
    of Bourbon pulls in it''s 3.2 Beta and appears not to be fully functional. This
    section was not intended to say "bad Bourbon" but to simply illustrate that in
    some cases, using Bower, you will get more of the library then you really want.'
  prefs: []
  type: TYPE_NORMAL
- en: Bower registration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you are ready for release, [register it with Bower](http://bower.io/#registering-packages).
    The criteria is pretty simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure your repo has the `bower.json` file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must use [semantic versioning](http://semver.org/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your package must be available at a Git endpoint, e.g. Github
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have all of that, run this command with your new package name and
    the Git endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Registration is painless. Once you get the green light on everything, give it
    a test and do a `$ bower install <my-package-name>`
  prefs: []
  type: TYPE_NORMAL
- en: Bower and Sass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bower and Sass libraries are an amazing pairing. There are small repos all over
    Github where the complexity of making them a Ruby Gem/Compass Extension was just
    to much overhead. You are required to either fork, clone, or god forbid, copy
    and paste code into your project. What? Are we not civilized?
  prefs: []
  type: TYPE_NORMAL
- en: In the Ruby world, developers are used to having Gems and Compass Extensions
    installed in a safe, *untouchable location. The new Gem is added to the Gemfile
    and we simply reference the library in the project.
  prefs: []
  type: TYPE_NORMAL
- en: '*Untouchable is a frustration with many developers. Importing Sass libraries
    that they did not have control over, or were unable to modify, that actually output
    CSS can be very frustrating.'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In the new JavaScipt world, the library is added to the `bower.json` manifest
    or simply installed, but instead of it being in a obscured location, it is installed
    into the root of the project. This keeps things simple from an install perspective,
    but this means our Sass imports are in relative directories. Not a big deal, but
    different from what we are used to.
  prefs: []
  type: TYPE_NORMAL
- en: So, what does a Sass Bower package look like? Let's take a simple project I
    created called, [sass-icon-fonts](https://github.com/anotheruiguy/sass-icon-fonts).
    This package is simply a couple of mixins, one that allows the developer to easily
    create a `@font-face` set of rules and another is the ability to quickly generate
    a series of icon-font rules. The mini library comes with instructions and a very
    simple API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s imagine you are building a Node project and you want to use this
    package as a resource, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This installs the package and adds the dependency to your `bower.json` file.
    Located at the root level of the project is your `sass/` directory, within that
    is your `application.scss` file. At your root is the `bower_components` directory.
    For your `application.scss` file to access the new library, you will need to import
    a relative path to the library, as illustrated in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: While the previous example works, while I found this acceptable, I didn't really
    find it awesome. Digging more into the Grint-Sass API I discovered the [includePaths](https://github.com/sindresorhus/grunt-sass#includepaths)
    function. This allows you to set an import path to include.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have this in your Grunt file, you can simply reference the library''s
    main manifest file with a simply Sass import, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Bower in your npm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the things that I find slightly annoying about using Bower is that I
    have to run separate commands when initialing a new project. I already have to
    use npm, can't I just bind these things together?
  prefs: []
  type: TYPE_NORMAL
- en: Yes, yes you can. In your `package.json` file, simply extend the `scripts` object
    and pass in the the `bower install` command. This is why I really LOVE this stuff!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, when you run `npm install` this will not only install all your Node packages,
    but install your Bower packages as well. NICE!
  prefs: []
  type: TYPE_NORMAL
- en: Bower behind the firewall
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you find yourself behind a firewall that does not allow for the `git://[repo]`
    protocol, there is a fix for this. First, I suggest maually doing a clone using
    the `https://[repo]` protocol to make sure that this is really the issue. If the
    `https://[repo]` protocol works, then you may want to make the following update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Thank you [Stack Overflow](http://stackoverflow.com/questions/15669091/bower-install-using-only-https)!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When I say I want to Bower all the things, I mean just that. Now understanding
    Bower, I am looking at simple package management in a whole new light and I hope
    that you do to.
  prefs: []
  type: TYPE_NORMAL
- en: No more forking, cloning, deleting `.git/` directories just to include a library
    into a project. I am looking at creating Sass modules in a whole new light as
    well. Not that Compass extensions were difficult, but Bower frees me of multiple
    dependencies. Something that has been a real issue on many projects.
  prefs: []
  type: TYPE_NORMAL
- en: Bower + Grunt + Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bower - Grunt - Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know the powers of Bower to easily manage our front-end development
    dependencies, what do we need to do to add a Bower package of Sass code to our
    project?
  prefs: []
  type: TYPE_NORMAL
- en: Bower install
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First off, let''s install a simple Bower package for illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There, we now have the library of code in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Update Gruntfile.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next we want to update the `Gruntfile.js` so that we can easily include the
    library into our Sass files. Without this step, we would need to write fill paths
    in our Sass file to this and that's simply lame.
  prefs: []
  type: TYPE_NORMAL
- en: In the Grunt-Sass API we have options and the one we need to use is `includePaths`.
    Here we can pass in a string that is the full path from root to the Bower package
    into an array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Update style.scss
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make use of this new Bower package library, we simply need to use a Sass
    convention to import the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To test that this is working, let's add a little bit of code that references
    the Bower library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Back in the CLI, run `grunt` and we should see green lights all day long!
  prefs: []
  type: TYPE_NORMAL
