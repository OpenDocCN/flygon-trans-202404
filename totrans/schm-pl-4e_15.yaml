- en: Formal Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The formal grammars and accompanying text appearing here describe the written
    syntax of Scheme data values, or *datums*. The grammars also effectively cover
    the written syntax of Scheme syntactic forms, since every Scheme syntactic form
    has a representation as a Scheme datum. In particular, parenthesized syntactic
    forms are written as lists, and identifiers (e.g., keywords and variables) are
    written as symbols. The high-level structure of each syntactic form is described
    in detail by the entries marked "syntax" in Chapters [4](binding.html#g88) through [11](exceptions.html#g147),
    and the syntactic forms are summarized in the Summary of Forms.
  prefs: []
  type: TYPE_NORMAL
- en: The written representation of a datum involves tokens, whitespace, and comments.
    *Tokens* are sequences of one or more characters representing atomic datums or
    serving as punctuation marks. The tokens that represent atomic datums are symbols,
    numbers, strings, booleans, and characters, while the tokens serving as punctuation
    marks are open and close parentheses, open and close brackets, the open vector
    parenthesis `#(`, the open bytevector parenthesis `#vu8(`, the dotted pair marker
    `.` (dot), the quotation marks `'` and [PRE0] <datum> &#124; `,` <datum> &#124;
    `,@` <datum> |
  prefs: []
  type: TYPE_NORMAL
- en: '|  | &#124; | `#''` <datum> &#124; `#`` <datum> &#124; `#,` <datum> &#124;
    `#,@` <datum> |'
  prefs: []
  type: TYPE_TB
- en: If no dotted-pair marker appears in a list enclosed in parentheses or brackets,
    it is a proper list, and the datums are the elements of the list, in the order
    given. If a dotted-pair marker appears, the initial elements of the list are those
    before the marker, and the datum that follows the marker is the tail of the list.
    The dotted-pair marker is typically used only when the datum that follows the
    marker is not itself a list. While any proper list may be written without a dotted-pair
    marker, a proper list can be written in dotted-pair notation by placing a list
    after the dotted-pair marker.
  prefs: []
  type: TYPE_NORMAL
- en: The abbreviations are equivalent to the corresponding two-element lists shown
    below. Once an abbreviation has been read, the result is indistinguishable from
    its nonabbreviated form.
  prefs: []
  type: TYPE_NORMAL
- en: '`''<datum> ![<graphic>](gra_9.gif) (quote <datum>)'
  prefs: []
  type: TYPE_NORMAL
- en: '`<datum> ![<graphic>](gra_9.gif) (quasiquote <datum>)'
  prefs: []
  type: TYPE_NORMAL
- en: ',<datum> ![<graphic>](gra_9.gif) (unquote <datum>)'
  prefs: []
  type: TYPE_NORMAL
- en: ',@<datum> ![<graphic>](gra_9.gif) (unquote-splicing <datum>)'
  prefs: []
  type: TYPE_NORMAL
- en: '#''<datum> ![<graphic>](gra_9.gif) (syntax <datum>)'
  prefs: []
  type: TYPE_NORMAL
- en: '#`<datum> ![<graphic>](gra_9.gif) (quasisyntax <datum>)'
  prefs: []
  type: TYPE_NORMAL
- en: '#,<datum> ![<graphic>](gra_9.gif) (unsyntax <datum>)'
  prefs: []
  type: TYPE_NORMAL
- en: '#,@<datum> ![<graphic>](gra_9.gif) (unsyntax-splicing <datum>)`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vectors.**  Vectors are compound datums formed from groups of tokens and
    possibly involving other datums, including other vectors. A vector is written
    as an open vector parenthesis followed by a sequence of datums and a close parenthesis.'
  prefs: []
  type: TYPE_NORMAL
- en: '| <vector> | ![<graphic>](gra_8.gif) | `#(`<datum>*`)` |'
  prefs: []
  type: TYPE_TB
- en: '**Bytevectors.**  Bytevectors are compound datums formed from groups of tokens,
    but the syntax does not permit them to contain arbitrary nested datums. A bytevector
    is written as an open bytevector parenthesis followed by a sequence of octets
    (unsigned 8-bit exact integers) and a close parenthesis.'
  prefs: []
  type: TYPE_NORMAL
- en: '| <bytevector> | ![<graphic>](gra_8.gif) | `#vu8(`<octet>*`)` |'
  prefs: []
  type: TYPE_TB
- en: '| <octet> | ![<graphic>](gra_8.gif) | <any <number> representing an exact integer
    `*n*`, 0 ≤ *n* ≤ 255> |'
  prefs: []
  type: TYPE_TB
