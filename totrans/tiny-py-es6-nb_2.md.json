["```\n'use strict';\n\n```", "```\nconst PI = 3.14\n\n//PI = 3.1459 // TypeError\n\nfunction add(x, y) {\n  result = x + y  // Implicit global\n  return result\n}\n\nadd(3, 4)\nconsole.log(result)   // prints 7!\n\nfunction sub(x, y) {\n  let val = x + y\n  return val\n}\n\nsub(42, 2)\n//console.log(val)  // ReferenceError\n\n```", "```\nfunction scopetest() {\n  //console.log(1, x) //ReferenceError\n  let x\n  console.log(2, x)\n  x = 42\n  console.log(3, x)\n  if (true) {\n    //console.log(4, x) // ReferenceError\n    let x\n    console.log(5, x)\n    x = 17\n    console.log(6, x)\n  }\n  console.log(7, x)\n}\n\n```", "```\n2 undefined\n3 42\n5 undefined\n6 17\n7 42\n\n```", "```\nfunction varscopetest() {\n  console.log(1, x)\n  var x\n  console.log(2, x)\n  x = 42\n  console.log(3, x)\n  if (true) {\n    console.log(4, x)\n    var x\n    console.log(5, x)\n    x = 17\n    console.log(6, x)\n  }\n  console.log(7, x)\n}\n\n```", "```\n1 undefined\n2 undefined\n3 42\n4 42\n5 42\n6 17\n7 17\n\n```", "```\nlet paul = ['Paul', 1942, 'Bass']\nlet [name, ,instrument] = paul\n\n```", "```\nlet [name, ,instrument='guitar'] = ['Paul', 1942]\n\n```", "```\nlet p2 = [...paul]\n\n```", "```\nlet paul = {name: 'Paul', year: 1942};\n\nlet {name, inst, year} = paul;\n\n// inst is undefined\n\n```", "```\nlet paul = {name: 'Paul', year: 1942};\n\nlet {name = 'Joe', inst = 'Guitar', year} = paul;\n\n```", "```\nlet paul = {name: 'Paul', year: 1942};\n\nlet {name: firstname, inst: instrument, year} = paul;\n\n```", "```\nlet paul = {name: 'Paul', year: 1942};\n\nlet {name: firstname = 'Joe', inst: instrument = 'Guitar', year} = paul;\n\n```", "```\nlet count = null\ntypeof count === \"object\"\n\n```", "```\nlet x  // x is undefined\n\n```", "```\ntypeof(x) === 'undefined'  // true\n\n```", "```\nundefined == null   // true - loose\nundefined === null  // false - strict\n\n```", "```\n\"\" == false    // true\n\"\" === false   // false\n!!\"\" == false  // true\n!!\"\" === false // true\n\n```", "```\nconst name = 'Paul'\nconst person = { name }  // like name: 'Paul'\n\n```", "```\nconst p2 = { ...person, copy: true }\n\n```", "```\nconst inst = 'Guitar'\nconst person = {\n  // like playsGuitar: true\n  ['plays' + inst]: true\n}\n\n```", "```\nconst account = {\n   amount: 100,\n   // old style\n   add: function(amt) {\n      this.amount += amt\n   },\n   // shorthand, no function\n   remove(amt) {\n    this.amount -= amt\n   }\n}\n\n```", "```\nfunction getAccount(amount) {\n  return {\n     amount,\n     add(amt) {\n        this.amount += amt\n     },\n     // shorthand, no function\n     remove(amt) {\n      this.amount -= amt\n     }\n  }\n}\n\n```", "```\nfunction getAccount(amount) {\n  return {\n     _amount: amount,\n     get amount() {\n       return this._amount\n     },\n     set amount(val) {\n       this._amount = val\n     }\n  }\n}\n\n```", "```\n{\n  configurable: false, // default\n  enumerable: false,   // default\n  get: getFunc, // function to get prop, default undefined\n  set: setFunc, // function to set prop, default undefined\n}\n\n```", "```\n{\n  configurable: false, // default\n  enumerable: false,   // default\n  value: val           // default undefined\n  writeable: false,    // default\n}\n\n```", "```\nfunction Person(fname) {\n  let name = fname;\n  Object.defineProperty(this, 'name', {\n    get: function() {\n      // if you say this.name here\n      // you will blow the stack\n      if (name === 'Richard') {\n        return 'Ringo';\n      }\n      return name;\n  },\n    set: function(n) {\n      name = n\n    }\n  });\n}\n\nlet p = new Person('Richard');\n\nconsole.log(p.name);  // writes 'Ringo'\np.name = 'Fred';\nconsole.log(p.name);  // writes 'Fred'\n\n```", "```\nclass Person {\n  constructor(name) {\n    this.name = name;\n    Object.defineProperty(this, 'name', {\n      get: function() {\n        // if you say this.name here\n        // you will blow the stack\n        if (name === 'Richard') {\n          return 'Ringo';\n        }\n        return name;\n      },\n      set: function(n) {\n        name = n\n      }\n    });\n  }\n}\n\n```", "```\nlet n1 = 'Paul'\nlet n2 = \"John\"\n\n```", "```\nlet longLine = \"Lorum ipsum \\\nfooish bar \\\nthe end\"\n\n```", "```\nlet longLine = \"Lorum ipsum \" +\n\"fooish bar \" +\n\"the end\"\n\n```", "```\nlet name = 'Paul';\nlet instrument = 'bass';\n\nvar `Name: ${name} plays: ${instrument}`\n\n```", "```\n`Starts here\nand ends here`\n\n```", "```\nString.raw `This is a backslash: \\\nand this is the newline character: \\n`\n\n```", "```\nlet people = ['Paul', 'John', 'George']\npeople.push('Ringo')\n\n```", "```\npeople[6] = 'Billy'\n\nconsole.log(people)\n//[\"Paul\", \"John\", \"George\", \"Ringo\", 6: \"Billy\"]\n\n```", "```\npeople.includes('Yoko')   // true\n\n```", "```\nfor (let [i, name] of people.entries()) {\n  console.log(`${i} - ${name}`);\n}\n\n// Output\n// 0 - Paul\n// 1 - John\n// 2 - George\n// 3 - Ringo\n// 4 - undefined\n// 5 - undefined\n// 6 - Billy\n\n```", "```\nlet paul = people[0];\n\n```", "```\npeople[-1]; // undefined, not Billy\n\n```", "```\nclass PostiveArray extends Array {\n  push(val) {\n    if (val >  0) {\n      super(val);\n    }\n  }\n}\n\n```", "```\npeople.slice(1, 2)  // ['John']\npeople.slice(-1)    // ['Billy']\npeople.slice(3)     // [\"Ringo\", undefined \u00d7 2, \"Billy\"]\n\n```", "```\nlet ab = new ArrayBuffer(3)\nlet year = new Uint16Array(ab, 0, 1)\nlet age = new Uint8Array(ab, 2, 1)\nyear[0] = 1942\nage[0] = 42\n\n```", "```\nlet size = 3;\nlet primes = new Int8Array(size);\nprimes[0] = 2;\nprimes[1] = 3;\nprimes[2] = 5;  // size now 3\nprimes[3] = 7;  // full! ignored\nconsole.log(primes) // Int8Array [ 2, 3, 5 ]\n\n```", "```\nlet normal = [...primes]\n\n```", "```\nlet buf = new ArrayBuffer(2)\nlet dv = new DataView(buf)\nlet littleEndian = true;\nlet offset = 0\ndv.setInt16(offset, 512, littleEndian)\n\nlet le = dv.getInt16(offset, littleEndian) //512\n\nlet be = dv.getInt16(offset) // Big endian 2\n\n```", "```\nnew DataView(buffer, [offset, [length]])\n\n```", "```\nlet now = new Date();\n\n```", "```\nlet msPast1970 = 1\nlet groovyTime = new Date(msPast1970)\n\n// Wed Dec 31 1969 17:00:00 GMT-0700 (MST)\n\n```", "```\nlet modern = new Date(\"Tue, 14 Mar 2017 14:59:59 GMT\")\n\n```", "```\nlet piDay = new Date(2017, 3, 14)\n\n```", "```\n\"Tue, 14 Mar 2017 14:59:59 GMT\"\n\n```", "```\nYYYY-MM-DDTHH:mm:ss.sssZ\n\n```", "```\nlet instruments = new Map([['Paul', 'Bass'],\n   ['John', 'Guitar']]);\ninstruments.set('George', 'Guitar');\n\ninstruments.has(\"Ringo\");  // false\nfor (let [name, inst] of instruments) {\n  console.log(`${name} - ${inst}`);\n}\n\n```", "```\nlet digits = new Set([0, 1, 1, 2, 3, 4, 5, 6,\n  7, 8 , 9]);\n\ndigits.has(9);  // true\n\nlet odd = new Set([1, 3, 5, 7, 9]);\nlet prime = new Set([2, 3, 5, 7]);\n\n```", "```\nSet.prototype.difference = function(other) {\n  let result = new Set(this);\n  for (let val of other) {\n    result.delete(val);\n  }\n  return result;\n}\n\nlet even = digits.difference(odd);\nconsole.log(even);  // Set { 0, 2, 4, 6, 8 }\n\n```", "```\nconst handler = {\n  set: function(obj, prop, value) {\n    if (prop === 'month') {\n      if (value < 1 || value > 12) {\n        throw RangeError(\"Month must be between 1 & 12\")\n      }\n    }\n    obj[prop] = value\n    // need to return true if successful\n    return true\n  }\n}\n\nconst cal = new Proxy({}, handler)\n\ncal.month = 12\nconsole.log(cal.month)  // 12\ncal.month = 0  // RangeError\n\n```", "```\nSymbol('name') == Symbol('name')   // false\nSymbol('name') === Symbol('name')  // false\n\n```", "```\nlet xSq = 'x\u00b2';\n\n```", "```\nlet xSq2 = 'x\\u{b2}';\n\n```", "```\nlet xSq3 = 'x\\u00b2';\n\n```", "```\n'x\\u{b2}'.codePointAt(1)   // 178\n\n```", "```\nString.fromCodePoint(178)  // \"\u00b2\"\n\n```", "```\nfunction add(x, y) {\n  return x + y\n}\n\nlet six = add(10, -4)\n\n```", "```\nfunction add2() {\n  let res = 0\n  for (let i of arguments) {\n    res += i\n  }\n  return res\n}\n\nlet five = add2(2, 3)\n\n```", "```\nfunction addN(x, n=42) {\n  return x + n;\n}\n\nlet forty = addN(-2)\nlet seven = addN(3, 4)\n\n```", "```\nfunction add_many(...args) {\n  // args is an Array\n  let result = 0;\n  for (const val of args) {\n    result += val;\n  }\n  return result;\n}\n\n```", "```\nfunction add_many() {\n  let result = 0;\n  for (const val of arguments) {\n    result += val;\n  }\n  return result;\n}\n\n```", "```\nadd_many(...[1, 42., 7])\n\n```", "```\nfunction mul(a, b) { return a * b }\n\nlet double = mul.bind( undefined, 2 )\nlet triple = mul.bind( undefined, 3 )\n\nconsole.log(triple(2))   // 6\n\n```", "```\nfunction add2(val) {\n  return val + 2\n}\n\n```", "```\nlet add2 = (val) => (val + 2)\n\n```", "```\nlet vals = [1, 2, 3]\nconsole.log(vals.map(v=>v*2))\n\n```", "```\nfunction add(x, y) {\n  let res = x + y\n  return res\n}\n\n```", "```\nlet add = (x,y) => {\n  let res = x + y\n  return res\n}\n\n```", "```\nfunction fib(n){\n  if (n == 0) {\n    return 0;\n  }\n  return n + fib(n-1);\n}\n\n```", "```\nclass Bike {\n  constructor(wheelSize, gearRatio) {\n    this._size = wheelSize;\n    this.ratio = gearRatio;\n  }\n\n  get size() { return this._size }\n  set size(val) { this._size = val }\n\n  gearInches() {\n    return this.ratio * this.size;\n  }\n}\n\n```", "```\nlet bike = new Bike(26, 34/13)\nbike.gearInches()\n\n```", "```\nfunction Bike2(wheelSize, gearRatio) {\n  this.size = wheelSize;\n  this.ratio = gearRatio;\n}\n\nBike2.prototype.gearInches = function() {\n  return this.ratio * this.size\n}\n\nlet b = new Bike2(27, 33/11);\nconsole.log(b.gearInches());\n\n```", "```\nclass Tandem extends Bike {\n  constructor(wheelSize, rings, cogs) {\n    let ratio = rings[0] / cogs;\n    super(wheelSize, ratio);\n    this.cogs = cogs;\n    this.rings = rings;\n\n  }\n\n  shift(ringIdx, cogIdx) {\n    this.ratio = this.rings[ringIdx] /\n      this.cogs[cogIdx];\n  }\n}\n\nlet tan = new Tandem(26, [42, 36], [24, 20, 15, 11])\ntan.shift(1, 2)\nconsole.log(tan.gearInches())\n\n```", "```\nclass Recumbent extends Bike {\n  static isFast() {\n    return true;\n  }\n}\n\nRecumbent.isFast();  // true\n\nrec = new Recumbent(20, 4);\nrec.isFast();  // TypeError\n\n```", "```\n let size = 20;\n let gearRatio = 2;\n\n let bike = {\n   __proto__: protoObj,\n   ['__proto__']: otherObj,\n   size, // same as `size: size`\n   ratio: gearRatio,\n   gearInches() {\n     return this.size * this.ratio;\n   }\n  // dynamic properties\n  [ 'prop_' + (() => \"foo\")() ]: \"foo\"\n}\n\n```", "```\nlet grade = 72;\n\nfunction letter_grade(grade) {\n  if (grade > 90) {\n    return 'A';\n  }\n  else if (grade > 80) {\n    return 'B';\n  }\n  else if (grade > 70) {\n    return 'C';\n  }\n  else {\n    return 'D';\n  }\n}\n\nletter_grade(grade);  // 'C'\n\n```", "```\n'3' == 3  // true\n\n```", "```\n'3' === 3  // false\n\n```", "```\n0 && 1/0  // 0\n\n```", "```\n1 || 1/0  // 1\n\n```", "```\nlet last\nif (band == 'Beatles') {\n  last = 'Lennon'\n}\nelse {\n  last = 'Jones'\n}\n\n```", "```\nlet last = (band == 'Beatles) ? 'Lennon' : 'Jones';\n\n```", "```\nfunction strings(inst) {\n  switch(inst) {\n    case 'guitar':\n      return 6;\n    case 'violin':\n      return 4;\n    default:\n      return 1;\n  }\n}\n\nstrings('violin');  // 4\n\n```", "```\nlet num = 3\nwhile (num > 0) {\n  console.log(num)\n  num -= 1\n}\nconsole.log('Blastoff!')\n\n```", "```\nlet num = 3\ndo {\n  console.log(num)\n  num -= 1\n} while (num > 0)\nconsole.log('Blastoff!')\n\n```", "```\nclass Fib {\n  constructor() {\n    this.val1 = 1;\n    this.val2 = 1;\n  }\n\n  [Symbol.iterator]() {\n    return this;  // something with next\n  }\n\n  next() {\n    [this.val1, this.val2] = [this.val2, this.val1 + this.val2];\n    return {done: false, value: this.val1};\n  }\n}\n\n```", "```\nfor (var val of new Fib()) {\n  console.log(val);\n  if (val > 5) {\n    break;\n  }\n}\n\n```", "```\nlet fib = {\n  [Symbol.iterator]() {\n    let val1 = 1;\n    let val2 = 1;\n    return {\n      next() {\n        [val1, val2] = [val2, val1 + val2];\n        return { value: val1, done: false}\n      }\n    }\n  }\n}\n\n```", "```\nfor (var val of fib) {\n  console.log(val);\n  if (val > 5) {\n    break;\n  }\n}\n\n```", "```\ntry {\n   // code missing\n}\ncatch(e) {\n  // handle any exception\n}\n\n```", "```\ntry {\n  // code missing\n}\ncatch(e) {\n  // handle any exception\n}\nfinally {\n  // run after either block\n}\n\n```", "```\nthrow new Error(\"Some error\");\n\n```", "```\nlet fibGen = {\n  [Symbol.iterator]: function*() {\n    let val1 = 1;\n    let val2 = 2;\n    while (true) {\n      yield val1;\n      [val1, val2] = [val2, val1 + val2];\n    }\n  }\n}\n\n```", "```\nfor (var val of fibGen) {\n    console.log(val);\n    if (val > 5) {\n        break;\n    }\n}\n\n```", "```\n// js/fib.js\n\nexport let fibGen = {\n  [Symbol.iterator]: function*() {\n    let val1 = 1;\n    let val2 = 2;\n    while (true) {\n      yield val1;\n      [val1, val2] = [val2, val1 + val2];\n    }\n  }\n}\n\nexport let takeN = {\n  [Symbol.iterator]: function*(seq, n) {\n    let count = 0;\n    for (let val of seq ) {\n      if (count >= n) {\n        break;\n      }\n      yield val;\n      count += 1;\n    }\n  }\n}\n\n```", "```\n// js/other.js\n\nimport {fibGen, takeN} from \"fib.js\";\n\nconsole.log(sum(takeN(fibGen(), 5)));\n\n```", "```\n$ npm install --save-dev babel-cli babel-preset-env\n\n```", "```\nasyncFunction()\n.then(function (result) {\n  // handle result\n  // Fulfilled\n})\n.catch(function (error) {\n  // handle error\n  // Rejected\n})\n\n```", "```\nlet names = 'Paul, George, Ringo, and John'\n\nlet re = /(Ringo|Richard)/g;\n\n```", "```\nnames.match(re);  //[ 'Ringo', 'Ringo' ]\n\n```", "```\nre.exec(names)  // [ 'Ringo', 'Ringo' ]\n\n```", "```\nlet re2 = RegExp('Ringo|Richard', 'g')\n\n```"]