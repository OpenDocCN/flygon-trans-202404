- en: JavaScriptとは
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript简介
- en: 原文：[https://jsprimer.net/basic/introduction/](https://jsprimer.net/basic/introduction/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/basic/introduction/](https://jsprimer.net/basic/introduction/)
- en: JavaScriptを学びはじめる前に、まずJavaScriptとはどのようなプログラミング言語なのかを紹介します。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始学习JavaScript之前，首先介绍一下JavaScript是什么编程语言。
- en: JavaScriptは主にウェブブラウザの中で動くプログラミング言語です。 ウェブサイトで操作をしたら表示が書き換わったり、ウェブサイトのサーバーと通信してデータを取得したりと現在のウェブサイトには欠かせないプログラミング言語です。
    このようなJavaScriptを活用してアプリケーションのように操作できるウェブサイトをウェブアプリとも言います。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript主要是一种在网页浏览器中运行的编程语言。当在网站上进行操作时，可以更改显示内容，与网站服务器通信并获取数据，因此它是当前网站不可或缺的编程语言。利用这样的JavaScript，可以实现类似应用程序的操作，这种网站也称为Web应用程序。
- en: JavaScriptはウェブブラウザだけではなく、Node.jsというサーバー側のアプリケーションを作る仕組みでも利用されています。 また、デスクトップアプリやスマートフォンアプリ、IoT（Internet
    of Things）デバイスでもJavaScriptを使って動かせるものがあります。 このように、JavaScriptはかなり幅広い環境で動いているプログラミング言語で、さまざまな種類のアプリケーションを作成できます。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript不仅用于网页浏览器，还用于创建服务器端应用程序的Node.js。此外，还可以在桌面应用程序、智能手机应用程序和物联网（Internet
    of Things）设备中使用JavaScript。因此，JavaScript是一种在广泛的环境中运行的编程语言，可以创建各种类型的应用程序。
- en: '[](#javascript-ecmascript)*JavaScriptとECMAScript*'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#javascript-ecmascript)*JavaScript与ECMAScript*'
- en: '*JavaScriptという言語は[ECMAScript](../ecmascript/)という仕様によって動作が決められています。 [ECMAScript](../ecmascript/)という仕様では、どの実行環境でも共通な動作のみが定義されているため、基本的にどの実行環境でも同じ動作をします。'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScript语言的行为由[ECMAScript](../ecmascript/)规范决定。 [ECMAScript](../ecmascript/)规范仅定义了所有执行环境共有的行为，因此基本上在任何执行环境中都会有相同的行为。'
- en: 一方で、実行環境によって異なる部分もあります。 たとえば、ブラウザではUI（ユーザーインターフェース）を操作するためのJavaScriptの機能が定義されていますが、サーバー側の処理を書くNode.jsではそれらの機能は不要です。
    このように、実行環境によって必要な機能は異なるため、それらの機能は実行環境ごとに定義（実装）されています。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，不同的执行环境可能会有所不同。例如，浏览器定义了操作用户界面的JavaScript功能，但在编写服务器端处理的Node.js中，这些功能是不需要的。因此，由于不同的执行环境需要不同的功能，这些功能在每个执行环境中都被定义（实现）。
- en: そのため、「ECMAScript」はどの実行環境でも共通の部分、「JavaScript」はECMAScriptと実行環境の固有機能も含んだ範囲というのがイメージしやすいでしょう。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，“ECMAScript”是所有执行环境共有的部分，“JavaScript”是包含ECMAScript和执行环境特定功能的范围的形象。
- en: '![JavaScriptとECMAScriptの範囲](../Images/deee3f8865e1e41c0cf2946c07cc31ab.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript与ECMAScript的范围](../Images/deee3f8865e1e41c0cf2946c07cc31ab.png)'
- en: ECMAScriptの仕様で定義されている機能を学ぶことで、どの実行環境でも対応できる基本的な部分を学べます。 この書籍では、この違いを明確に区別する必要がある場合は「ECMAScript」と「JavaScript」という単語を使い分けます。
    そうでない場合、「JavaScript」という単語を使います。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过学习ECMAScript规范定义的功能，可以学习到在任何执行环境下都可以使用的基本部分。在本书中，当需要明确区分这些差异时，将使用“ECMAScript”和“JavaScript”这两个词。否则，将使用“JavaScript”一词。
- en: また、このECMAScriptという仕様（共通の部分）も毎年アップデートされ、新しい文法や機能が追加されています。 そのため、実行環境によっては古いバージョンのECMAScriptを実装したものとなっている場合があります。
    ECMAScriptは2015年にECMAScript 2015（ES2015）として大きくアップデートされた仕様が公開されました。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，ECMAScript规范（共同部分）每年都会更新，添加新的语法和功能。因此，执行环境可能会实现旧版本的ECMAScript规范。ECMAScript在2015年作为ECMAScript
    2015（ES2015）大幅更新的规范发布。
- en: 今からJavaScriptを学ぶなら、ES2015以降を基本にしたほうがわかりやすいため、この書籍はES2015に基づいた内容となっています。 また、既存のコードはES2015より前のバージョンを元にしたものも多いため、それらのコードに関しても解説しています。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要开始学习JavaScript，请以ES2015为基础，因为这样更容易理解。此书还解释了基于ES2015之前版本的现有代码。
- en: まずは、JavaScript（ECMAScript）とはどのような言語なのかを大まかに見ていきます。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们大致了解一下JavaScript（ECMAScript）是什么语言。
- en: '[](#about-javascript)*JavaScriptってどのような言語？*'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#about-javascript)*JavaScript是什么语言？*'
- en: '*JavaScriptは、元々Netscape Navigatorというブラウザのために開発されたプログラミング言語です。 C、Java、Self、Schemeなどのプログラミング言語の影響を受けて作られました。'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScript最初是为Netscape Navigator浏览器开发的编程语言。它受到了C、Java、Self、Scheme等编程语言的影响。'
- en: JavaScriptは、大部分がオブジェクト（値や処理を1つにまとめたものと考えてください）であり、そのオブジェクト同士のコミュニケーションによって成り立っています。
    オブジェクトには、ECMAScriptの仕様として定められたオブジェクト、 実行環境が定義したオブジェクト、ユーザー（つまりあなたです）の定義したオブジェクトが存在します。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript主要由对象（将值和处理组合在一起）组成，并通过这些对象之间的通信实现。对象包括ECMAScript规范定义的对象、执行环境定义的对象和用户（即您）定义的对象。
- en: 'この書籍の「[第一部: 基本文法](../)」ではECMAScriptの定義する構文やオブジェクトを学んでいきます。 「[第二部: 応用編（ユースケース）](../../use-case/)」ではブラウザやNode.jsといった実行環境が定義するオブジェクトを学びながら、小さなアプリケーションを作成していきます。
    ユーザーの定義したオブジェクトは、コードを書いていくと自然と登場するため、適宜見ていきます。'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的“[第一部：基本语法](../)”中，我们将学习ECMAScript定义的语法和对象。在“[第二部：应用（用例）](../../use-case/)”中，我们将学习浏览器和Node.js等执行环境定义的对象，并创建一些小型应用程序。用户定义的对象会在编写代码时自然而然地出现，因此我们将在适当的时候介
- en: 次に、JavaScriptの言語的な特徴を簡単に紹介していきます。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将简要介绍JavaScript的语言特性。
- en: '[](#case-sensitive)*大文字と小文字を区別する*'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#case-sensitive)*区分大小写*'
- en: '*まず、JavaScriptは大文字小文字を区別します。 たとえば、次のように`name`という変数を大文字と小文字で書いた場合に、 それぞれは別々の`name`と`NAME`という名前の変数として認識されます。'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，JavaScript区分大小写。例如，如果以`name`和`NAME`的大小写编写`name`变量，则会分别将它们识别为不同的`name`和`NAME`变量。'
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: また、大文字で開始しなければならないといった命名規則が意味を持つケースはありません。 そのため、あくまで別々の名前として認識されるというだけになっています
    （変数についての詳細は「[変数と宣言](../variables/)」の章で解説します）。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，起始字母必须大写的命名规则并没有意义。因此，它们仅被视为不同的名称（有关变量的详细信息，请参阅“[变量和声明](../variables/)”章节）。
- en: '[](#reserved-keyword)*予約語を持つ*'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#reserved-keyword)*具有保留字*'
- en: '*JavaScriptには特別な意味を持つキーワードがあり、これらは予約語とも呼ばれます。 このキーワードと同じ名前の変数や関数は宣言できません。 先ほどの、変数を宣言する`const`も予約語のひとつとなっています。
    そのため、`const`という名前の変数名は宣言できません。'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScript有一些具有特殊含义的关键字，这些关键字也被称为保留字。不能声明与这些关键字相同名称的变量或函数。刚才提到的声明变量的`const`也是其中之一。因此，不能声明名为`const`的变量名。'
- en: '[](#statement-semicolon)*文はセミコロンで区切られる*'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#statement-semicolon)*语句用分号分隔*'
- en: '*JavaScriptは、文（Statement）ごとに処理していき、文はセミコロン（`;`）によって区切られます。 特殊なルールに基づき、セミコロンがない文も、行末に自動でセミコロンが挿入されるという仕組みも持っています。^([1](#fn_1))
    しかし、暗黙的なものへ頼ると意図しない挙動が発生するため、セミコロンは常に書くようにします （詳細は「[文と式](../statement-expression/)」の章で解説します）。'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScript逐句处理，并以分号（`;`）分隔语句。根据特定规则，即使没有分号，语句末尾也会自动插入分号。^([1](#fn_1)) 但是，依赖隐式规则会导致意外行为，因此应始终写上分号（详细信息请参见“[语句和表达式](../statement-expression/)”章节）。'
- en: また、スペース、タブ文字などは空白文字（ホワイトスペース）と呼ばれます。 これらの空白文字を文にいくつ置いても挙動に違いはありません。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，空格、制表符等称为空白字符（空格）。这些空白字符可以放置在语句中的任意位置，不会影响其行为。
- en: たとえば、次の`1`足す`1`を行う2つの文は、`+`の前後の空白文字の個数に違いはありますが、動作としてはまったく同じ意味となります。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面两个执行`1`加`1`的语句，虽然`+`前后的空白字符数量不同，但其实际意义完全相同。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '空白文字の置き方は人によって好みが異なるため、書き方も異なる場合があります。 複数人で開発する場合は、これらの空白文字の置き方を決めたコーディングスタイルを決めるとよいでしょう。
    コーディングスタイルの統一については「[付録: 参考リンク集](../../appendix/links/)」を参照してください。'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '由于空格的使用方式因人而异，因此写法可能会有所不同。在多人开发的情况下，最好制定一套关于空格使用的编码风格。有关统一编码风格，请参考"[附录: 参考链接集](../../appendix/links/)"。'
- en: '[](#strict-mode)*strict mode*'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#strict-mode)*严格模式*'
- en: '*JavaScriptには**strict mode**という実行モードが存在しています。 名前のとおり厳格な実行モードで、古く安全でない構文や機能が一部禁止されています。'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScript有一个名为**strict mode**的执行模式。正如其名称所示，这是一种严格的执行模式，禁止了部分过时且不安全的语法和功能。'
- en: '`"use strict"`という文字列をファイルまたは関数の先頭に書くことで、そのスコープにあるコードはstrict modeで実行されます。 また、後述する"Module"の実行コンテキストでは、このstrict
    modeがデフォルトとなっています。'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件或函数的开头写上`"use strict"`这个字符串，可以使该作用域内的代码以严格模式执行。此外，在后文提到的"Module"的执行上下文中，严格模式是默认的。
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: strict modeでは、`eval`や`with`といったレガシーな機能や構文を禁止します。 また、明らかな問題を含んだコードに対しては早期的に例外を投げることで、開発者が間違いに気づきやすくしてくれます。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式禁止使用`eval`和`with`等旧功能和语法。此外，对于明显存在问题的代码，通过提前抛出异常，使开发者更容易发现错误。
- en: たとえば、次のような`const`などのキーワードを含まずに変数を宣言しようとした場合に、strict modeでは例外が発生します。 strict modeでない場合は、例外が発生せずにグローバル変数が作られます。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果尝试声明不包含像`const`这样的关键字的变量，严格模式将引发异常。在非严格模式下，将创建全局变量而不会引发异常。
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: このように、strict modeでは開発者が安全にコードを書けるように、JavaScriptの落とし穴を一部ふさいでくれます。 そのため、常にstrict
    modeで実行できるコードを書くことが、より安全なコードにつながります。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式可以帮助开发者安全地编写代码，部分地堵住了JavaScript的陷阱。因此，编写始终可以在严格模式下执行的代码将导致更安全的代码。
- en: 本書では、明示的に「strict modeではない」ことを宣言した場合を除き、 すべてstrict modeとして実行できるコードを扱います。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将处理所有可以作为严格模式执行的代码，除非明确声明"不是严格模式"。
- en: '[](#script-module)*実行コンテキスト: ScriptとModule*'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#script-module)*执行上下文: Script和Module*'
- en: '*JavaScriptの実行コンテキストとして"Script"と"Module"があります。 コードを書く場合には、この2つの実行コンテキストの違いを意識することは多くありません。'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScript有两种执行上下文，即"Script"和"Module"。在编写代码时，很少会意识到这两种执行上下文之间的区别。'
- en: '"Script"の実行コンテキストは、多くの実行環境ではデフォルトの実行コンテキストです。 "Script"の実行コンテキストでは、デフォルトはstrict
    modeではありません。'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '"Script"的执行上下文在许多执行环境中是默认的执行上下文。在"Script"的执行上下文中，默认不是严格模式。'
- en: '"Module"の実行コンテキストは、JavaScriptをモジュールとして実行するために、ECMAScript 2015で導入されたものです。 "Module"の実行コンテキストでは、デフォルトがstrict
    modeとなり、古く安全でない構文や機能は一部禁止されています。 また、モジュールの機能は"Module"の実行コンテキストでしか利用できません。モジュールについての詳細は「[ECMAScriptモジュール](../module/)」の章で解説します。'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '"Module"的执行上下文是为了在ECMAScript 2015中以模块的形式执行JavaScript而引入的。 "Module"的执行上下文默认为严格模式，部分过时且不安全的语法和功能被禁止。此外，模块的功能只能在"Module"的执行上下文中使用。有关模块的详细信息，请参阅"[ECMAScript模块](../module/)"章节。'
- en: '[](#ecmascript-updates)*JavaScriptの仕様は毎年更新される*'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#ecmascript-updates)*JavaScript的规范每年都在更新*'
- en: '*最後に、JavaScriptの仕様であるECMAScriptは毎年更新され、JavaScriptには新しい構文や機能が増え続けています。 そのため、この書籍で学んだ後もまだまだ知らなかったことが出てくるはずです。'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*最后，ECMAScript作为JavaScript的规范每年都在更新，JavaScript也在不断增加新的语法和功能。因此，学完本书后仍会有更多未知的内容。'
- en: 一方で、ECMAScriptは後方互換性が慎重に考慮されているため、過去に書いたJavaScriptのコードが動かなくなる変更はほとんど入りません。 そのため、この書籍で学んだことのすべてが無駄になることはありません。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，由于ECMAScript考虑到向后兼容性，几乎不会对以前编写的JavaScript代码进行使其无法运行的更改。因此，本书学到的知识不会变得无用。
- en: ECMAScriptの仕様がどのように策定されているかについては「[ECMAScript](../ecmascript/)」の章で解説します。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有关ECMAScript规范的制定方式，请参阅"[ECMAScript](../ecmascript/)"章节。
- en: ¹. Automatic Semicolon Insertionと呼ばれる仕組みです。 [↩](#reffn_1 "Jump back to footnote
    [1] in the text.")********
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. 这被称为自动分号插入机制。 [↩](#reffn_1 "跳回到文本中的脚注 [1]")********
