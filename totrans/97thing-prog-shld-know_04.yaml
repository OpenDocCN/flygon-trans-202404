- en: Automate Your Coding Standard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automate Your Coding Standard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've probably been there too. At the beginning of a project, everybody has
    lots of good intentions — call them "new project's resolutions." Quite often,
    many of these resolutions are written down in documents. The ones about code end
    up in the project's coding standard. During the kick-off meeting, the lead developer
    goes through the document and, in the best case, everybody agrees that they will
    try to follow them. Once the project gets underway, though, these good intentions
    are abandoned, one at a time. When the project is finally delivered the code looks
    like a mess, and nobody seems to know how it came to be this way.
  prefs: []
  type: TYPE_NORMAL
- en: When did things go wrong? Probably already at the kick-off meeting. Some of
    the project members didn't pay attention. Others didn't understand the point.
    Worse, some disagreed and were already planning their coding standard rebellion.
    Finally, some got the point and agreed but, when the pressure in the project got
    too high, they had to let something go. Well-formatted code doesn't earn you points
    with a customer that wants more functionality. Furthermore, following a coding
    standard can be quite a boring task if it isn't automated. Just try to indent
    a messy class by hand to find out for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: But if it's such a problem, why is that we want to have a coding standard in
    the first place? One reason to format the code in a uniform way is so that nobody
    can "own" a piece of code just by formatting it in his or her private way. We
    may want to prevent developers using certain anti-patterns, in order to avoid
    some common bugs. In all, a coding standard should make it easier to work in the
    project, and maintain development speed from the beginning to the end. It follows
    then that everybody should agree on the coding standard too — it does not help
    if one developer uses three spaces to indent code, and another one four.
  prefs: []
  type: TYPE_NORMAL
- en: 'There exists a wealth of tools that can be used to produce code quality reports
    and to document and maintain the coding standard, but that isn''t the whole solution.
    It should be automated and enforced where possible. Here are a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure code formatting is part of the build process, so that everybody runs
    it automatically every time they compile the code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use static code analysis tools to scan the code for unwanted anti-patterns.
    If any are found, break the build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn to configure those tools so that you can scan for your own, project-specific
    anti-patterns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not only measure test coverage, but automatically check the results too.
    Again, break the build if test coverage is too low.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to do this for everything that you consider important. You won't be able
    to automate everything you really care about. As for the things that you can't
    automatically flag or fix, consider them to be a set of guidelines supplementary
    to the coding standard that is automated, but accept that you and your colleagues
    may not follow them as diligently.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the coding standard should be dynamic rather than static. As the project
    evolves, the needs of the project change, and what may have seemed smart in the
    beginning, isn't necessarily smart a few months later.
  prefs: []
  type: TYPE_NORMAL
- en: By [Filip van Laenen](http://programmer.97things.oreilly.com/wiki/index.php/Filip_van_Laenen)
  prefs: []
  type: TYPE_NORMAL
