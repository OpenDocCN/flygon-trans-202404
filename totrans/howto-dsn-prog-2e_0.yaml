- en: How to Design Programs, Second Edition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From: [How to Design Programs, Second Edition](http://www.ccs.neu.edu/home/matthias/HtDP2e/)'
  prefs: []
  type: TYPE_NORMAL
- en: Please send reports about mistakes to matthias @ ccs.neu.edu after double-checking
    in the [the current draft](./Draft/index.html)
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Matthias Felleisen, Robert Bruce Findler, Matthew Flatt, Shriram Krishnamurthi
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| © 1 August 2014 [MIT Press](http://mitpress.mit.edu) This material is copyrighted
    and provided under the Creative Commons [CC BY-NC-ND](http://creativecommons.org/licenses/by-nc-nd/2.0/legalcode)
    license [[interpretation](http://creativecommons.org/licenses/by-nc-nd/2.0/)].
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Stable Release |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This document is the current, stable release of HtDP/2e. It is updated in sync
    with semester breaks (summer, new years). It is thus well-suited for courses.
    In contrast, [the current draft](./Draft/index.html) changes on a frequent basis;
    it should be consulted when people discover problems and/or errors in this document.
    If such flaws exist in both documents, please report them to the first author.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Released on Tuesday, March 7th, 2017 2:23:38pm |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Preface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many professions require some form of programming. Accountants program spreadsheets;
    musicians program synthesizers; authors program word processors; and web designers
    program style sheets. When we wrote these words for the first edition of the book
    (1995–2000), people considered them futuristic; by now, programming has become
    a required skill and numerous outlets—<wbr>books, on-line courses, K-12 curricula—<wbr>cater
    to this need, always with the goal of enhancing people’s job prospects.
  prefs: []
  type: TYPE_NORMAL
- en: The typical course on programming teaches a “tinker until it works” approach.
    When it works, students exclaim “It works!” and move on. Sadly, this phrase is
    also the shortest lie in computing, and it has cost many people many hours of
    their lives. In contrast, this book focuses on habits of good programming, addressing
    both professional and vocational programmers.
  prefs: []
  type: TYPE_NORMAL
- en: With “good programming,” we mean an approach to the creation of software that
    relies on systematic thought, planning, and understanding from the very beginning,
    at every stage and for every step. To emphasize the point, we speak of systematic
    program design and systematically designed programs. Critically, the latter articulates
    the rationale of the desired functionality. Good programming also satisfies an
    aesthetic sense of accomplishment; the elegance of a good program is comparable
    to time-tested poems or the black-and-white photographs of a bygone era. In short,
    programming differs from good programming like crayon sketches in a diner from
    oil paintings in a museum.
  prefs: []
  type: TYPE_NORMAL
- en: No, this book won’t turn anyone into a master painter. But, we would not have
    spent fifteen years writing this edition if we didn’t believe that
  prefs: []
  type: TYPE_NORMAL
- en: everyone can design programs
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: everyone can experience the satisfaction that comes with creative design.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Indeed, we go even further and argue that
  prefs: []
  type: TYPE_NORMAL
- en: program design—<wbr>but not programming—<wbr>deserves the same role in a liberal-arts
    education as mathematics and language skills.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A student of design who never touches a program again will still pick up universally
    useful problem-solving skills, experience a deeply creative activity, and learn
    to appreciate a new form of aesthetic. The rest of this preface explains in detail
    what we mean with “systematic design,” who benefits in what manner, and how we
    go about teaching it all.
  prefs: []
  type: TYPE_NORMAL
- en: Systematic Program Design
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A program interacts with people, dubbed users, and each other, in which case
    we often speak of server and client components. Hence any reasonably complete
    program consists of many building blocks: some deal with input, some create output,
    some bridge the gap between those two. We choose to use functions as fundamental
    building blocks, because everyone encounters functions in pre-algebra and because
    the simplest programs are just such functions. The key is to discover which functions
    are needed, how to connect them, and how to build them from basic ingredients.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this context, “systematic program design” refers to a mix of two concepts:
    design recipes and iterative refinement.We drew inspiration from Michael Jackson’s
    method for creating COBOL programs plus conversations with Daniel Friedman on
    recursion, Robert Harper on type theory, and Daniel Jackson on software design.
    The design recipes are a creation of the authors; and here, they enable the use
    of the latter.'
  prefs: []
  type: TYPE_NORMAL
- en: From Problem Analysis to Data Definitions
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Identify the information that must be represented and how it is represented
    in the chosen programming language. Formulate data definitions and illustrate
    them with examples.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Signature, Purpose Statement, Header
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: State which data the desired function consumes and produces. Articulate what
    the function computes as a concise one-line statement. Define a stub that lives
    up to the signature.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Functional Examples
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Work through examples that illustrate the function’s purpose.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Function Template
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Translate the data definitions into an outline of the function.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Function Definition
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Fill in the gaps in the function template. Exploit the purpose statement and
    the examples.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Articulate the examples as tests and ensure that the function passes all. Doing
    so discovers mistakes and also helps others read and understand the definition
    when the need arises—<wbr>and it will arise for any serious program.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 1: The basic steps of a function design recipe'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Design Recipes apply to both complete programs and individual functions. This
    book deals with just two recipes for complete programs: one for programs with
    graphical user interface (GUI) and one for batch programs. In contrast, design
    recipes for functions come in a wide variety of flavors: for atomic forms of data
    such as numbers; for enumerations of different kinds of data; for data that compounds
    other data in a fixed manner; for finite but arbitrarily large data; and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: The function-level design recipes share a common design process. [Figure 1](#%28counter._%28figure._fig~3athe-design-recipe%29%29)
    displays its six essential steps. The title of each step specifies the expected
    outcome(s); the “commands” suggest the key activities. Examples play a central
    role at almost every stage.Instructors Have students copy [figure 1](#%28counter._%28figure._fig~3athe-design-recipe%29%29)
    on one side of an index card. When students are stuck, ask them to produce their
    card and point them to the step where they are stuck. For the chosen data representation
    in step 1, writing down examples proves how real-world information is encoded
    as data and how data is interpreted as information. Step 3 says that a problem-solver
    must work through concrete scenarios to gain an understanding of what the desired
    function is expected to compute for specific examples. This understanding is exploited
    in step 5, when it is time to define the function. Finally, step 6 demands that
    examples are turned into automated test code, which ensures that the function
    works properly for some cases. Running the function on real-world data may reveal
    other discrepancies between expectations and results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each step of the design process comes with pointed questions. For certain steps—<wbr>say,
    the creation of the functional examples or the template—<wbr>the questions may
    appeal to the data definition. The answers almost automatically create an intermediate
    product.Instructors The most important questions are those for steps 4 and 5\.
    Ask students to write down these questions in their own words on the back of their
    index card. This scaffolding pays off when it comes time to take the one creative
    step in the process: the completion of the function definition. And even then,
    help is available in almost all cases.'
  prefs: []
  type: TYPE_NORMAL
- en: The novelty of this approach is the creation of intermediate products for beginner-level
    programs. When a novice is stuck, an expert or an instructor can inspect the existing
    intermediate products. The inspection is likely to use the generic questions from
    the design process and thus drive the novice to correct himself or herself. And
    this self-empowering process is the key difference between programming and program
    design.
  prefs: []
  type: TYPE_NORMAL
- en: Iterative Refinement addresses the issue that problems are complex and multi-faceted.
    Getting everything right at once is nearly impossible. Instead, computer scientists
    borrow iterative refinement from the physical sciences to tackle this design problem.
    In essence, iterative refinement recommends stripping away all inessential details
    at first and finding a solution for the remaining core problem. A refinement step
    adds in one of these omitted details and re-solves the expanded problem, using
    the existing solution as much as possible. A repetition, also called an iteration,
    of these refinement steps eventually leads to a complete solution.
  prefs: []
  type: TYPE_NORMAL
- en: In this sense a programmer is a mini-scientist. Scientists create approximate
    models for some idealized version of the world to make predictions about it. As
    long as the model’s predictions come true, everything is fine; when the predicted
    events differ from the actual ones, scientists revise their models to reduce the
    discrepancy. In a similar vein, when programmers are given a task, they create
    a first design, turn it into code, evaluate it with actual users, and iteratively
    refine the design until the program’s behavior closely matches the desired product.
  prefs: []
  type: TYPE_NORMAL
- en: This book introduces iterative refinement in two different ways. Since designing
    via refinement becomes useful as the design of programs becomes complex, the book
    introduces the technique explicitly in the fourth part, once the problems acquire
    a certain degree of difficulty. Furthermore, we use iterative refinement to state
    increasingly complex variants of the same problem over the course of the first
    three parts of the book. That is, we pick a core problem, deal with it in one
    chapter, and then pose a similar problem in a subsequent chapter—<wbr>with details
    matching the newly introduced concepts.
  prefs: []
  type: TYPE_NORMAL
- en: DrRacket and the Teaching Languages
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Learning to design programs calls for repeated hands-on practice. Just as nobody
    becomes a piano player without playing the piano, nobody becomes a program designer
    without creating actual programs and getting them to work properly. Hence, our
    book comes with a modicum of software support: a language in which to write down
    programs and a program development environment with which programs are edited
    like word documents and run on concrete inputs.'
  prefs: []
  type: TYPE_NORMAL
- en: People often tell us they wish they knew how to program and then ask which programming
    language they should learn. Given the press that some programming languages get,
    this question is not surprising. But it is also wholly inappropriate.Instructors
    For courses not aimed at beginners, it may be possible to use an off-the-shelf
    language with the design recipes. Learning to program in a currently fashionable
    programming language often sets up students for failure. Fashion in this world
    is extremely short lived. A typical “quick programming in X” book or course fails
    to teach principles that transfer to the next fashion language. Worse, the language
    itself often distracts from the acquisition of transferable skills, both at the
    level of expressing solutions as well as dealing with programming mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, learning to design programs is primarily about the study of principles
    and the acquisition of transferable skills. The ideal programming language must
    support these two goals, but no off-the-shelf industrial language does so. The
    crucial problem is that beginners make mistakes before they know much of the language,
    yet programming languages always diagnose these errors as if the programmer already
    knew the whole language. As a result, diagnosis reports often stump beginners.
  prefs: []
  type: TYPE_NORMAL
- en: Our solution is to start with our own, tailor-made teaching language, dubbed
    “Beginning Student Language” or *SL. The language is essentially the “foreign”
    language that students acquire in pre-algebra courses. It includes notation for
    function definitions, function applications, and conditional expressions. Also,
    expressions can beInstructors You may wish to explain that BSL and friends are
    pre-algebra with additional forms of data and a host of pre-defined functions
    on those. nested. Put differently, this language is so small that a diagnosis
    report in terms of the whole language is still accessible to readers with nothing
    but pre-algebra under their belt.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to programming environments, we face an equally bad choice as
    the one for languages. A programming environment for professionals is analogous
    to the cockpit of a jumbo jet. It has numerous controls and displays, overwhelming
    anyone who first launches such a software application. Novice programmers need
    the equivalent of a two-seat, single-engine propeller aircraft with which they
    can practice basic skills. We have therefore created DrRacket, a programming environment
    for novices.
  prefs: []
  type: TYPE_NORMAL
- en: 'DrRacket supports highly playful, feedback-oriented learning with just two
    simple interactive panes: a definitions area, which contains function definitions,
    and an interactions area, which allows a programmer to ask for the evaluation
    of expressions that may refer to the definitions. In this context, it is as easy
    to explore “what if” scenarios as in a spreadsheet application. Experimentation
    can start on first contact, using conventional calculator-style examples and quickly
    proceeding to calculations with images, words, and other forms of data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An interactive program development environment such as DrRacket simplifies
    the learning process in two ways. First, it enables novice programmers to manipulate
    data directly. Because no facilities for reading input information from files
    or devices are needed, novices don’t need to spend valuable time on figuring out
    how these work. Second, the arrangement strictly separates data and data manipulation
    from input and output of information from the “real world.”. Nowadays this separation
    is considered so fundamental to the systematic design of software that it has
    its own name: model-view-controller architecture. By working in DrRacket, new
    programmers are exposed to this fundamental software engineering idea in a natural
    way from the get-go.'
  prefs: []
  type: TYPE_NORMAL
- en: Skills that Transfer
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The skills acquired from learning to design programs systematically transfer
    in two directions. Naturally, they apply to programming in general and programming
    spreadsheets, synthesizers, style sheets, and even word processors. Our observations
    suggest that the design process from [figure 1](#%28counter._%28figure._fig~3athe-design-recipe%29%29)
    carries over to almost any programming language, and it works for 10-line programs
    as well as for 10,000-line programs. It takes some reflection to adopt the design
    process across the spectrum of languages and scale of programming problems; but
    once the process becomes second nature, its use pays off in many ways.
  prefs: []
  type: TYPE_NORMAL
- en: Learning to design programs also means acquiring two kinds of universally useful
    skills. Program design certainly teaches the same analytical skills as mathematics,
    especially (pre)algebra and geometry. But, unlike mathematics, working with programs
    is an active approach to learning. Creating software provides immediate feedback
    and thus leads to exploration, experimentation, and self-evaluation. The results
    tend to be interactive products, which vastly increases the sense of accomplishment
    when compared to drill exercises in text books.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to enhancing a student’s mathematical skills, program design teaches
    analytical reading and writing skills. Even the smallest design tasks are formulated
    as word problems. Without solid reading skills, it is impossible to design programs
    that solve a reasonably complex problem. Conversely, program design methods force
    a creator to articulate his or her thoughts in proper and precise language. Indeed,
    if students truly absorb the design recipe, they enhance articulation skills more
    than anything else.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this point, first take a look back at [figure 1](#%28counter._%28figure._fig~3athe-design-recipe%29%29).
    According to this process description, a designer must:'
  prefs: []
  type: TYPE_NORMAL
- en: analyze a problem statement, typically stated as a word problem;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: extract and express its essence, abstractly and with examples;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: make outlines and plans based on this analysis;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: evaluate results with respect to expected outcomes; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: revise the product in light of failed checks and tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each step requires analysis, precision, description, focus, and attention to
    details. Any experienced entrepreneur, engineer, journalist, lawyer, scientist,
    or any other professional can explain how many of these skills are necessary for
    his or her daily work. Practicing program design—<wbr>on paper and in DrRacket—<wbr>is
    a joyful way to acquire these skills.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, refining designs is not restricted to computer science and program
    creation. Architects, composers, writers, and other professionals do it, too.
    They start with ideas in their head and somehow articulate their essence. They
    refine these ideas on paper until their product reflects their mental image as
    much as possible. As they bring their ideas to paper, they employ skills analogous
    to fully absorbed design recipes: drawing, writing, or piano playing to express
    certain style elements of a building, describe a person’s character, or formulate
    portions of a melody. What makes them productive with an iterative development
    process is that they have absorbed their basic design recipes and learned how
    to choose which one to use for the current situation.'
  prefs: []
  type: TYPE_NORMAL
- en: This Book and its Parts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The purpose of this book is to introduce readers without prior experience to
    the systematic design of programs. In tandem, it presents a symbolic view of computation,
    a method that explains how the application of a program to data works. Roughly
    speaking, this method generalizes what students learn in elementary school arithmetic
    and middle school algebra. But have no fear; DrRacket comes with a mechanism—<wbr>the
    algebraic stepper—<wbr>that can illustrate these step-by-step calculations.
  prefs: []
  type: TYPE_NORMAL
- en: The book consists of six parts separated by five intermezzos and bookended by
    a Prologue and an Epilogue. While the major parts focus on program design, the
    intermezzos introduce supplementary concepts concerning programming mechanics
    and computing.
  prefs: []
  type: TYPE_NORMAL
- en: '[Prologue: How to Program](part_prologue.html) is a quick introduction to plain
    programming. It explains how to write a simple animation in *SL. Once finished,
    any beginner is bound to feel simultaneously empowered and overwhelmed. The final
    note therefore explains why plain programming is wrong and how a systematic, gradual
    approach to program design also eliminates this sense of dread that every beginning
    programmer usually experiences. Now the stage is set for the core of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Fixed-Size Data](part_one.html) explains the most fundamental concepts of
    systematic design using simple examples. The central idea is that designers typically
    have a rough idea of what data the program is supposed to consume and produce.
    A systematic approach to design must therefore extract as many hints as possible
    from the description of the data that flows into and out of a program. To keep
    things simple, this part starts with atomic data—<wbr>numbers, images and so on—<wbr>and
    then gradually introduces new ways of describing data: intervals, enumerations,
    itemizations, structures, and combinations of these.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Intermezzo: BSL](part_one.html#%28part._i1-2%29) describes the teaching language
    in complete detail: its vocabulary, its grammar, and its meaning. Computer scientists
    refer to these as syntax and semantics. Program designers use this model of computation
    to predict what their creations compute when run or to analyze error diagnostics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Arbitrarily Large Data](part_two.html) extends [Fixed-Size Data](part_one.html)
    with the means to describe the most interesting and useful forms of data: arbitrarily
    large compound data. While a programmer may nest the kinds of data from [Fixed-Size
    Data](part_one.html) to represent information, the nesting is always of a fixed
    depth and breadth. This part shows how a subtle generalization gets us from there
    to data of arbitrary size. The focus then switches to the systematic design of
    programs that process this kind of data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Intermezzo: Quote, Unquote](part_two.html#%28part._i2-3%29) introduces a concise
    and powerful notation for writing down large pieces of data: quotation and anti-quotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Abstraction](part_three.html) acknowledges that many of the functions from
    [Arbitrarily Large Data](part_two.html) look alike. No programming language should
    force programmers to create pieces of code that are so similar to each other.
    Conversely, every good programming language comes with ways to eliminate such
    similarities. Computer scientists call both the step of eliminating similarities
    and its result abstraction, and they know that abstractions greatly increase a
    programmer’s productivity. Hence, this part introduces design recipes for creating
    and using abstractions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Intermezzo: Scope and Abstraction](part_three.html#%28part._i3-4%29) plays
    two roles. On one hand, it injects the concept of lexical scope, the idea that
    a programming language ties every occurrence of a name to a definition that a
    programmer can find with an inspection of the code. Second, it explains a library
    with additional mechanisms for abstraction, including so-called for loops.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Intertwined Data](part_four.html) generalizes [Arbitrarily Large Data](part_two.html)
    and explicitly introduces the idea of iterative refinement into the catalog of
    design concepts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Intermezzo: The Nature of Numbers](part_four.html#%28part._i4-5%29) explains
    why decimal numbers work in such strange ways in all programming languages. Every
    budding programmer ought to know these basic facts; and in the context of this
    book, the ideas are easy to discuss and illustrate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Generative Recursion](part_five.html) injects a completely new design concept.
    While structural design and abstraction suffice for most problems that programmers
    encounter, they occasionally lead to insufficiently “performant” programs. In
    other words, structurally designed programs might need too much time or memory
    or energy to compute the desired answers. Computer scientists therefore replace
    structurally designed programs with programs that benefit from ad hoc insights
    into the problem domain. This part of the book shows how to design a large class
    of just such programs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Intermezzo: The Cost of Computation](part_five.html#%28part._i5-6%29) uses
    examples from [Generative Recursion](part_five.html) to illustrate how computer
    scientists think about performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Accumulators](part_six.html) adds one final trick to the tool box of designers:
    accumulators. Roughly speaking, an accumulator adds “memory” to a function. The
    addition of memory greatly improves the performance of structurally designed functions
    from the first four parts of the book. For the ad hoc programs from [Generative
    Recursion](part_five.html), accumulators can make the difference between finding
    an answer at all and never finding one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Epilogue: Moving On](part_epilogue.html) is both an assessment and a look
    ahead to what’s next.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/867f53947362dadc094b8109e925f5af.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 2: The dependencies among parts and intermezzos (draft)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Independent readers ought to work through the entire book, from the first page
    to the last. We say “work” because we really mean that a reader ought to solve
    all exercises or at least know how to solve them.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, instructors ought to cover as many elements as possible, starting
    from the Prologue all the way through the Epilogue. Our teaching experience suggests
    that this is doable. Typically, we organize our courses so that our readers create
    a sizable and entertaining program over the course of the semester. We understand,
    however, that some circumstances call for significant cuts and that some instructors’
    tastes call for slightly different ways to use the book.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 2](#%28counter._%28figure._fig~3adependence%29%29) is a navigation
    chart for those who wish to pick and choose from the elements of the book. The
    figure is a dependency graph. A solid arrow from one element to another suggests
    a mandatory ordering; for example, Part II requires an understanding of Part I.
    In contrast, a dotted arrow is mostly a suggestion; for example, understanding
    the Prologue is unnecessary to get through the rest of the book.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on this chart, here are three feasible paths through the book:'
  prefs: []
  type: TYPE_NORMAL
- en: A high-school instructor may want to cover (as much as possible of) parts I
    and II, including a small project such as a game.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A college instructor in a quarter system may wish to focus on [Fixed-Size Data](part_one.html),
    [Arbitrarily Large Data](part_two.html), [Abstraction](part_three.html), and [Generative
    Recursion](part_five.html), plus the intermezzos on *SL and scope.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A college instructor in a semester system may prefer to discuss performance
    trade-offs in designs as early as possible. In this case, it is best to cover
    [Fixed-Size Data](part_one.html) and [Arbitrarily Large Data](part_two.html) and
    then the accumulator material from [Accumulators](part_six.html) that does not
    depend on [Generative Recursion](part_five.html). At that point, it is possible
    to discuss [Intermezzo: The Cost of Computation](part_five.html#%28part._i5-6%29)
    and to study the rest of the book from this angle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iteration of Sample Topics The book revisits certain exercise and sample topics
    time and again. For example, virtual pets are found all over [Fixed-Size Data](part_one.html)
    and even show up in [Arbitrarily Large Data](part_two.html). Similarly, both [Fixed-Size
    Data](part_one.html) and [Arbitrarily Large Data](part_two.html) cover alternative
    approaches to implementing an interactive text editor. Graphs appear in [Generative
    Recursion](part_five.html) and immediately again in [Accumulators](part_six.html).
    The purpose of these iterations is to motivate iterative refinement and to introduce
    it through the backdoor. We urge instructors to assign these themed sequences
    of exercises or to create their own such sequences.
  prefs: []
  type: TYPE_NORMAL
- en: The Differences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This second edition of “How to Design Programs” differs from the first one
    in several major aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second edition explicitly acknowledges the difference between designing
    a whole program and the functions that make up a program. Specifically, this edition
    focuses on two kinds of programs: event-driven (mostly GUI, but also networking)
    programs and batch programs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The design of a program proceeds in a top-down planning phase followed by a
    bottom-up construction phase. We explicitly show how the interface to libraries
    dictates the shape of certain program elements. In particular, the very first
    phase of a program design yields a wish list of functions. While the concept of
    a wish list exists in the first edition, the second edition treats it as an explicit
    design element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fulfilling an entry from the wish list relies on the function design recipe,
    which is the subject of the six major parts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A key element of structural design is the definition of functions that compose
    others. This design-by-composition is especially useful for the world of batch
    programs. Like generative recursion,We thank Kathi Fisler for calling our attention
    to this point. it requires a eureka!, specifically a recognition that the creation
    of intermediate data by one function and processing this intermediate result by
    a second function simplifies the overall design. This approach also needs a wish
    list, but formulating these wishes calls for an insightful development of an intermediate
    data definition. This edition of the book weaves in a number of explicit exercises
    on design-by-composition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While testing has always been a part of our design philosophy, the teaching
    languages and DrRacket started supporting it properly only in 2002, just after
    we had released the first edition. This new edition heavily relies on this testing
    support.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This edition of the book drops the design of imperative programs. The old chapters
    remain available on-line. An adaptation of this material will appear in the second
    volume of this series, “How to Design Components.”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The book’s examples and exercises employ new teachpacks. The preferred style
    is to link in these libraries via [require](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._require%29%29),
    but it is still possible to add teachpacks via a menu in DrRacket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, this second edition differs from the first in bits of terminology
    and notation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Second Edition |  | First Edition |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| signature |  | contract |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| itemization |  | union |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ''() |  | [empty](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |  | [true](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._%28%28lib._lang%2Fhtdp-beginner..rkt%29._true%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |  | [false](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._%28%28lib._lang%2Fhtdp-beginner..rkt%29._false%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The last three differences greatly improve quotation for lists.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Acknowledgments from the First Edition
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Four people deserve special thanks: Robert “Corky” Cartwright, who co-developed
    a predecessor of Rice’s introductory course with the first author; Daniel P. Friedman,
    for asking the first author to rewrite The Little LISPer (also MIT Press) in 1984,
    because it started this project; John Clements, who designed, implemented, and
    maintains DrRacket’s stepper; and Paul Steckler, who faithfully supported the
    team with contributions to our suite of programming tools.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The development of the book benefited from many other friends and colleagues
    who used it in courses and/or gave detailed comments on early drafts. We are grateful
    to them for their help and patience: Ian Barland, John Clements, Bruce Duba, Mike
    Ernst, Kathi Fisler, Daniel P. Friedman, John Greiner, John Stone, Géraldine Morin,
    and Valdemar Tamez.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A dozen generations of Comp 210 students at Rice University used early drafts
    of the text and contributed improvements in various ways. In addition, numerous
    attendees of our TeachScheme! workshops used early drafts in their classrooms.
    Many sent in comments and suggestions. As representative of these we mention the
    following active contributors: Ms. Barbara Adler, Dr. Stephen Bloch, Mr. Jack
    Clay, Dr. Richard Clemens, Mr. Kyle Gillette, Ms. Karen Buras, Mr. Marvin Hernandez,
    Mr. Michael Hunt, Ms. Karen North, Mr. Jamie Raymond, and Mr. Robert Reid. Christopher
    Felleisen patiently worked through the first few parts of the book with his father
    and provided direct insight into the views of a young student. Hrvoje Blazevic
    (sailing, at the time, as Master of the LPG/C Harriette), Joe Zachary (University
    of Utah) and Daniel P. Friedman (Indiana University) discovered numerous typos
    in the first printing, which we have now fixed. Thank you to everyone.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Matthias expresses his gratitude to Helga for her many years of patience
    and for creating a home for an absent-minded husband and father. Robby is grateful
    to Hsing-Huei Huang for her support and encouragement; without her, he would not
    have gotten anything done. Matthew thanks Wen Yuan for her constant support and
    enduring music. Shriram is indebted to Kathi Fisler for support, patience and
    puns, and for her participation in this project.
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As in 2001, we are grateful to John Clements for designing, validating, implementing,
    and maintaining DrRacket’s algebraic stepper. He has done so for nearly 20 years
    now, and the stepper has become an indispensable tool of explanation and instruction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the past few years, several colleagues have made significant comments
    on the various drafts and what kind of improvements they would like to see in
    a second one. We gratefully acknowledge the thoughtful conversations and exchanges
    with these individuals:'
  prefs: []
  type: TYPE_NORMAL
- en: Kathi Fisler, Gregor Kiczales, Prabhakar Ragde, and Norman Ramsey.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thousands of teachers and instructors attended our various workshops over the
    years, and many provided valuable feedback. But Dan Anderson, Stephen Bloch, Jack
    Clay, Nadeem Abdul Hamid, and Viera Proulx stand out, and we wish to call out
    their role in the crafting of this edition.
  prefs: []
  type: TYPE_NORMAL
- en: Celeste Hollenbeck is the most amazing reader ever. She never tired of pushing
    back until she understood the prose. She never stopped until a section supported
    its thesis, its organization matched, and its sentences connected. Thank you very
    much for your incredible efforts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also thank the following: Ennas Abdussalam, Anisa Anuar, Saad Bashir, Suzanne
    Becker, Steven Belknap, Stephen Bloch, Elijah Botkin, Joseph Bogart, William Brown,
    Tomas Cabrera, Xuyuqun C, Colin Caine, Anthony Carrico, Rodolfo Carvalho, Estevo
    Castro, Maria Chacon, Stephen Chang, Tung Cheng, Nelson Chiu, Jack Clay, Richard
    Cleis, John Clements, Scott Crymble, Pierce Darragh, Jonas Decraecker, Qu Dongfang,
    Mark Engelberg, Andrew Fallows, Christopher Felleisen, Sebastian Felleisen, Vladimir
    Gajić, Adrian German, Jack Gitelson, Kyle Gillette, Scott Greene, Ben Greenman,
    Ryan Golbeck, Josh Grams, Jane Griscti, Tyler Hammond, Nan Halberg, Li Junsong,
    Nadeem Abdul Hamid, Jeremy Hanlon, Craig Holbrook, Connor Hetzler, Wayne Iba,
    John Jackaman, Jordan Johnson, Blake Johnson, Erwin Junge, Marc Kaufmann, Gregor
    Kiczales, Eugene Kohlbecker, Caitlin Kramer, Jackson Lawler, Devon LePage, Ben
    Lerner, Shicheng Li, Chen Lj, Ed Maphis, YuSheng Mei, Andres Meza, Saad Mhmood,
    Jay Martin, Jay McCarthy, Mike McHugh, Wade McReynolds, Elena Machkasova, David
    Moses, Ann E. Moskol, Scott Newson, Paul Ojanen, Prof. Robert Ordóñez, Laurent
    Orseau, Klaus Ostermann, S. Pehlivanoglu, Eric Parker, Nick Pleatsikas, Prathyush
    Pramod, Norman Ramsey, Krishnan Ravikumar, Jacob Rubin, Luis Sanjuán, Brian Schack,
    Ryan “Havvy” Scheel, Lisa Scheuing, Willi Schiegel, Vinit Shah, Nick Shelley,
    Tubo Shi, Matthew Singer, Stephen Siegel, Milton Silva, Kartik Singhal, Joe Snikeris,
    Marc Smith, Dave Smylie, Vincent St-Amour, Reed Stevens, Kevin Sullivan, Asumu
    Takikawa, Éric Tanter, Sam Tobin-Hochstadt, Thanos Tsouanas, Aaron Tsay, Mariska
    Twaalfhoven, Yuwang Yin, Manuel del Valle, David Van Horn, Andre Venter, Jan Vitek,
    Marco Villotta, Mitch Wand, Michael Wijaya, G. Clifford Williams, Ewan Whittaker-Walker,
    Julia Wlochowski, Roelof Wobben, Mardin Yadegar, Huang Yichao, Andrew Zipperer
    for comments on drafts of this second edition.'
  prefs: []
  type: TYPE_NORMAL
- en: The HTML layout is due to Matthew Butterick who created these styles for the
    Racket documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we are grateful to Ada Brunstein and Marie Lufkin Lee, our editors
    at MIT Press, who gave us permission to develop this second edition of "How to
    Design Programs" on the web.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prologue: How to Program'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you were a small child, your parents taught you to count andConsider a
    quick look at [On Teaching Part I](../notes/notes/note_teaching.html). perform
    simple calculations with your fingers: “1 + 1 is 2”; “1 + 2 is 3”; and so on.
    Then they would ask “what’s 3 + 2” and you would count off the fingers of one
    hand. They programmed, and you computed. And in some way, that’s really all there
    is to programming and computing.'
  prefs: []
  type: TYPE_NORMAL
- en: Download DrRacket from [its web site](http://download.racket-lang.org/).
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now it is time to switch roles. Start DrRacket and select “Choose language”
    from the “Language” menu. This brings up a dialog listing “Teaching Languages”
    for “How to Design Programs.” Choose “Beginning Student” (the Beginning Student
    Language, or BSL) and click OK to set up DrRacket. With this task completed, you
    can program, and the DrRacket becomes the child. Start with the simplest of all
    calculations. You type
  prefs: []
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: into the top part of DrRacket, click RUN, and a 2 shows up in the bottom part.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fb5fa972b08fce41ea3d70c03ea6e3e6.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 3: Meet DrRacket'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'That’s how simple programming is. You ask questions as if DrRacket were a child,
    and DrRacket computes for you. You can also ask DrRacket to process several requests
    at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 2 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 3 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 4 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 6 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'After you click RUN, you see 4  9  2  3 in the bottom half of DrRacket, which
    are the expected results.Let’s slow down for a moment and introduce some words:'
  prefs: []
  type: TYPE_NORMAL
- en: The top-half of DrRacket is called the definitions area. In this area, you create
    the programs, which is called editing. As soon as you add a word or change something
    in the definitions area, the SAVE button shows up in the top-left corner. When
    you click SAVE for the first time, DrRacket asks you for the name of a file so
    that it can store your program for good. Once your definitions area is associated
    with a file, clicking SAVE ensures that the content of the definitions area is
    stored safely in the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programs consist of expressions. You have seen expressions in mathematics. For
    now, an expression is either a plain number or something that starts with a left
    parenthesis “(” and ends in a matching right parenthesis “)”—<wbr>which DrRacket
    rewards by shading the area between the pair of parentheses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you click RUN, DrRacket evaluates the expressions in the definitions area
    and shows their result in the interactions area. Then, DrRacket, your faithful
    servant, awaits your commands at the prompt (>). The appearance of the prompt
    signals that DrRacket is waiting for you to enter additional expressions, which
    it then evaluates like those in the definitions area:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 2 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'Enter an expression at the prompt, hit the “return” or “enter” key on your
    keyboard, and watch how DrRacket responds with the result. You can do so as often
    as you wish:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 2 2)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 4 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 3 3)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 9 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 4 2)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 2 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 6 2)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 3 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([sqr](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqr%29%29) 3)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 9 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([expt](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._expt%29%29) 2 3)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 8 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([sin](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sin%29%29) 0)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 0 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([cos](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cos%29%29) [pi](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._pi%29%29))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #i-1.0 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'Take a close look at the last number. Its “#i” prefix is short for “I don’t
    really know the precise number so take that for now” or inexact number. Unlike
    your calculator or other programming systems, DrRacket is honest. When it doesn’t
    know the exact number, it warns you with this special prefix. Later, we shall
    show you really strange facts about “computer numbers,” and you will then truly
    appreciate that DrRacket issues such warnings.By now you might be wondering whether
    DrRacket can add more than two numbers at once, and yes, it can! As a matter of
    fact, it can do it in two different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 2 ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 3 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 9 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 2 3 4)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 9 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The first one is nested arithmetic, as you know it from school. The second one
    is BSL arithmetic; and it is natural, if you always use parentheses to group operations
    and numbers together.
  prefs: []
  type: TYPE_NORMAL
- en: This book does not teach you Racket, even if the software is called DrRacket.
    Instead, it uses a series of teaching languages created for learning design principles.
    Once you have mastered these languages, you can quickly learn to program in all
    kinds of programming languages, including Racket, but also JavaScript, Python,
    Ruby, and others.
  prefs: []
  type: TYPE_NORMAL
- en: In BSL, every time you want to use a “calculator operation,” you write down
    an opening parenthesis, the operation you wish to perform, say [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29),
    the numbers on which the operation should work (separated by spaces or even line
    breaks), and, finally, a closing parenthesis. The items following the operation
    are called the operands. Nested arithmetic means that you can use an expression
    for an operand, which is why
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 2 ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 3 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 9 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'is a fine program. You can do this as often as you wish:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 2 ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 3 3) 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 15 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 2 ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 3 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 12 4)) 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 15 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 5 5) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 3 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 12 4)) 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 38 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: There are no limits to nesting, except for your patience.
  prefs: []
  type: TYPE_NORMAL
- en: Naturally, when DrRacket calculates for you, it uses the rules that you know
    and love from math. Like you, it can determine the result of an addition only
    when all the operands are plain numbers. If an operand is a parenthesized operator
    expression—<wbr>something that starts with a “(” and an operation—<wbr>it determines
    the result of that nested expression first. Unlike you, it never needs to ponder
    which expression to calculate first—<wbr>because this first rule is the only rule
    there is to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The price for DrRacket’s convenience is that parentheses have meaning. You,
    the programmer, must enter all these parentheses, and you may not enter too many.
    For example, while extra parentheses are acceptable to your math teacher, this
    is not the case for BSL. The expression ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  (1)  (2))
    contains way too many parentheses, and DrRacket lets you know in no uncertain
    terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (1) (2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| function call: expected a function after the open parenthesis, found a number
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Once you get used to BSL programming, though, you will see that it isn’t a
    price at all. First, you get to use operations on several operands at once, if
    it is natural to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 2 3 4 5 6 7 8 9 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 45 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 1 2 3 4 5 6 7 8 9 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If you don’t know what an operation does for several operands, enter an example
    into the interactions area and hit "return"; DrRacket lets you know whether and
    how it works. Or use HelpDesk to read the documentation.As you may have noticed,
    the names of operations in the on-line text are linked to the documentation in
    HelpDesk. Second, when you will read programs that others write, you will never
    have to wonder which expressions are evaluated first. The parentheses and the
    nesting will immediately tell you so.
  prefs: []
  type: TYPE_NORMAL
- en: In this context, to program is to write down comprehensible, arithmetic expressions,
    and to compute is to determine their value. With DrRacket, it is easy to explore
    this kind of programming and computing.
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic and Arithmetic
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If programming were just about numbers and arithmetic, it would be as boring
    as mathematics.Just kidding: mathematics is a fascinating subject, but you won’t
    need much of it for now. Fortunately, there is much more to programming than numbers:
    text, truths, images, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you need to know is that in BSL, text is any sequence of keyboard
    characters enclosed in double-quotes ("). We call it a string. Thus, "hello world"
    is a perfectly fine string; and when DrRacket evaluates this string, it just echoes
    it back in the interactions area, just like a number:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > "hello world" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "hello world" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Indeed, many people’s first program is one that displays just this string.Otherwise,
    you need to know that in addition to an arithmetic of numbers, DrRacket also knows
    about an arithmetic of strings. So here are two interactions that illustrate this
    form of arithmetic:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "hello" "world")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "helloworld" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "hello
    " "world") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "hello world" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Just like [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29),
    [string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)
    is an operation; it makes a string by adding the second to the end of the first.
    As the first interaction shows, it does this literally, without adding anything
    between the two strings: no blank space, no comma, nothing. Thus, if you want
    to see the phrase "hello world", you really need to add a space to one of these
    words somewhere; that’s what the second interaction shows. Of course, the most
    natural way to create this phrase from the two words is to enter'
  prefs: []
  type: TYPE_NORMAL
- en: ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "hello" "
    " "world")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: because [string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29),
    like [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29),
    can handle as many operands as desired.
  prefs: []
  type: TYPE_NORMAL
- en: You can do more with strings than append them. You can extract pieces from a
    string; reverse them; render all letters uppercase (or lowercase); strip blank
    spaces from the left and right; and so on. And best of all, you don’t have to
    memorize any of that. If you need to know what you can do with strings, look it
    up in HelpDesk.Use F1 or the drop-down menu on the right to open HelpDesk. Look
    at the manuals for BSL and its section on pre-defined operations, especially those
    for strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you looked up the primitive operations of BSL, you saw that primitive (sometimes
    called pre-defined or built-in) operations can consume strings and produce numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) "hello
    world") 20) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 31 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([number->string](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number-~3estring%29%29) 42)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "42" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'There is also an operation that converts strings into numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([string->number](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3enumber%29%29) "42")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 42 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If you expected “forty-two” or something clever along those lines, sorry, that’s
    really not what you want from a string calculator.The last expression raises a
    question, though. What if someone uses [string->number](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3enumber%29%29)
    with a string that is not a number wrapped in string quotes? In that case, the
    operation produces a totally different kind of result:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([string->number](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3enumber%29%29) "hello
    world") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This is neither a number nor a string; it is a Boolean. Unlike numbers and
    strings, Boolean values come in only two varieties: #true and #false. The first
    is truth, the second falsehood. Even so, DrRacket has several operations for combining
    Boolean values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) #true #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) #true #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) #true #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) #false #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'and you get the results that the name of the operation suggests. (Don’t know
    what [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29),
    [or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29),
    and [not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29)
    compute? Easy: ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)  x  y)
    is true if x and y are true; ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)  x  y)
    is true if either x or y or both are true; and ([not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29)  x)
    results in #true precisely when x is #false.)Although it isn’t possible to convert
    one number into a Boolean, it is certainly useful to “convert” two numbers into
    a Boolean:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) 10 9)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) -1 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 42 9)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Try these: ([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29)  10  10),
    ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29)  -1  0),
    and ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29)  "design"  "tinker").
    This last one is totally different again; but don’t worry, you can do it.With
    all these new kinds of data—<wbr>yes, numbers, strings, and Boolean values are
    data—<wbr>and operations floating around, it is easy to forget some basics, like
    nested arithmetic:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) "hello
    world") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([string->number](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3enumber%29%29) "11"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "hello
    world" "good morning")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) "hello
    world") 60) 80)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'What is the result of this expression? How did you figure it out? All by yourself?
    Or did you just type it into DrRacket’s interactions area and hit the "return"
    key? If you did the latter, do you think you would know how to do this on your
    own? After all, if you can’t predict what DrRacket does for small expressions,
    you may not want to trust it when you submit larger tasks than that for evaluation.Before
    we show you how to do some “real” programming, let’s discuss one more kind of
    data to spice things up: images.To insert images such as this rocket into DrRacket,
    use the Insert menu. Or, copy and paste the image from your browser into DrRacket.
    When you insert an image into the interactions area and hit return like this'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: DrRacket replies with the image. In contrast to many other programming languages,
    BSL understands images, and it supports an arithmetic of images just as it supports
    an arithmetic of numbers or strings. In short, your programs can calculate with
    images, and you can do so in the interactions area. Furthermore, BSL programmers—<wbr>like
    the programmers for other programming languages—<wbr>create libraries that others
    may find helpful. Using such libraries is just like expanding your vocabularies
    with new words or your programming vocabulary with new primitives. We dub such
    libraries teachpacks because they are helpful with teaching.
  prefs: []
  type: TYPE_NORMAL
- en: Add ([require](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._require%29%29)  2htdp/image)
    to the definitions area, or select Add Teachpack from the Language menu and choose
    image from the Preinstalled HtDP/2e Teachpack menu.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'One important library—<wbr>the 2htdp/image library—<wbr>supports operations
    for computing the width and height of an image:'
  prefs: []
  type: TYPE_NORMAL
- en: ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) ([image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg)) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Once you have added the library to your program, clicking RUN gives you 1176
    because that’s the area of a 28 by 42 image.You don’t have to use Google to find
    images and insert them in your DrRacket programs with the “Insert” menu. You can
    also instruct DrRacket to create simple images from scratch:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 10 "solid" "red")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/c6a1270166e269b8fd813191e071a900.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 30 20 "outline" "blue")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/3a04969bb9d0d7682093c21bf5dfdde0.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'DrRacket draws results when they are images. But a BSL program deals with images
    as data that is just like numbers. In particular, BSL has operations for combining
    images just like it has operations for adding numbers or appending strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29) ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 5 "solid" "red")
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;            ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 20 20 "solid" "blue"))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ![image](../Images/cb1e590387a6ea4aa5ce45b694ba3526.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Overlaying these images in the opposite order produces a solid blue square:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29) ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 20 20 "solid" "blue")
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;            ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 5 "solid" "red"))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ![image](../Images/3bc5b086f4935702edeaf1ff5c16af8e.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop and reflect on this last result for a moment.As you can see, [overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29)
    is more like [string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)
    than [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29),
    but it does “add” images just like [string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)
    “adds” strings and [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)
    adds numbers. Here is another illustration of the idea:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29) ([square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) 10 "solid" "red"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 10 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29) ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 20 20 "solid" "blue")
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;              ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 5 "solid" "red")))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| 20 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'These interactions with DrRacket don’t draw anything at all; they really just
    measure their width.Two more operations matter: [empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29)
    and [place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29).
    The first creates a scene, a special kind of rectangle. The second places an image
    into such a scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 5 "solid" "green")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              50 80 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 100))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: and you get this:Not quite. The image comes without a grid. We superimpose the
    grid on the empty scene so that you can see where exactly the green dot is placed.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/76932fff601c123ed901970c91b2c326.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'As you can see from this image, the origin (or (0,0)) is in the upper-left
    corner. Unlike in mathematics, the y-coordinate is measured downwards, not upwards.
    Otherwise, the image shows what you should have expected: a solid green disk at
    the coordinates (50,80) in a 100 by 100 empty rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s summarize again. To program is to write down an arithmetic expression,
    but you’re no longer restricted to boring numbers. In BSL, arithmetic is the arithmetic
    of numbers, strings, Booleans, and even images. To compute, though, still means
    to determine the value of an expression—<wbr>except that this value can be a string,
    a number, a Boolean, or an image.
  prefs: []
  type: TYPE_NORMAL
- en: And now you’re ready to write programs that make rockets fly.
  prefs: []
  type: TYPE_NORMAL
- en: Inputs and Output
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The programs you have written so far are pretty boring. You write down an expression
    or several expressions; you click RUN; you see some results. If you click RUN
    again, you see the exact same results. As a matter of fact, you can click RUN
    as often as you want, and the same results show up. In short, your programs really
    are like calculations on a pocket calculator, except that DrRacket calculates
    with all kinds of data not just numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s good news and bad news. It is good because programming and computing
    ought to be a natural generalization of using a calculator. It is bad because
    the purpose of programming is to deal with lots of data and to get lots of different
    results, with more or less the same calculations. (It should also compute these
    results quickly, at least faster than we can.) That is, you need to learn more
    still before you know how to program. No need to worry though: with all your knowledge
    about arithmetic of numbers, strings, Boolean values, and images, you’re almost
    ready to write a program that creates movies, not just some silly program for
    displaying “hello world” somewhere. And that’s what we’re going to do next.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Just in case you didn’t know, a movie is a sequence of images that are rapidly
    displayed in order. If your algebra teachers had known about the “arithmetic of
    images” that you saw in the preceding section, you could have produced movies
    in algebra instead of boring number sequences. Well, here is one more such table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| x = |  | 1 |  | 2 |  | 3 |  | 4 |  | 5 |  | 6 |  | 7 |  | 8 |  | 9 |  | 10
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| y = |  | 1 |  | 4 |  | 9 |  | 16 |  | 25 |  | 36 |  | 49 |  | 64 |  | 81
    |  | ? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Your teachers would now ask you to fill in the blank, that is, replace the “?”
    mark with a number.
  prefs: []
  type: TYPE_NORMAL
- en: 'It turns out that making a movie is no more complicated than completing a table
    of numbers like that. Indeed, it is all about such tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '| x = |  | 1 |  | 2 |  | 3 |  | 4 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| y = |  | ![image](../Images/bab484c34190dff6db55dd9ae90b1d92.jpg) |  | ![image](../Images/aef9512f64a3357a08066d00aef539a7.jpg)
    |  | ![image](../Images/b5d5c5f23a96e329a812ee613aacc3ce.jpg) |  | ? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'To be concrete, your teacher should ask you here to draw the fourth image,
    the fifth, and the 1273rd one because a movie is just a lot of images, some 20
    or 30 of them per second. So you need some 1200 to 1800 of them to make one minute’s
    worth of it.You may also recall that your teacher not only asked for the fourth
    or fifth number in some sequence but also for an expression that determines any
    element of the sequence from a given x. In the numeric example, the teacher wants
    to see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/5e9765cb843749abc244c0e645d2ba53.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: If you plug in 1, 2, 3, and so on for x, you get 1, 4, 9, and so on for y—<wbr>just
    as the table says. For the sequence of images, you could say something like
  prefs: []
  type: TYPE_NORMAL
- en: y = the image that contains a dot x2 pixels below the top.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The key is that these one-liners are not just expressions but functions.At
    first glance, functions are like expressions, always with a y on the left, followed
    by an = sign, and an expression. They aren’t expressions, however. And the notation
    you often see in school for functions is utterly misleading. In DrRacket, you
    therefore write functions a bit differently:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (y x) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) x x))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)
    says “consider y a function”, which like an expression, computes a value. A function’s
    value, though, depends on the value of something called the input, which we express
    with (y  x). Since we don’t know what this input is, we use a name to represent
    the input. Following the mathematical tradition, we use x here to stand in for
    the unknown input; but pretty soon, we shall use all kinds of names.
  prefs: []
  type: TYPE_NORMAL
- en: This second part means you must supply one number—<wbr>for x—<wbr>to determine
    a specific value for y. When you do, DrRacket plugs in the value for x into the
    expression associated with the function. Here the expression is ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29)  x  x).
    Once x is replaced with a value, say 1, DrRacket can compute the result of the
    expressions, which is also called the output of the function.
  prefs: []
  type: TYPE_NORMAL
- en: Click RUN and watch nothing happen. Nothing shows up in the interactions area.
    Nothing seems to change anywhere else in DrRacket. It is as if you hadn’t accomplished
    anything. But you did. You actually defined a function and informed DrRacket about
    its existence. As a matter of fact, the latter is now ready for you to use the
    function. Enter
  prefs: []
  type: TYPE_NORMAL
- en: (y 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: at the prompt in the interactions area and watch a 1 appear in response. The
    (y  1) is called a function application in DrRacket.Mathematics also calls y(1)
    a function application, but your teachers forgot to tell you. Try
  prefs: []
  type: TYPE_NORMAL
- en: (y 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and see a 4 pop out. Of course, you can also enter all these expressions in
    the definitions area and click RUN:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (y x) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) x x))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (y 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (y 2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (y 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (y 4) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (y 5) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In response, DrRacket displays: 1  4  9  16  25, which are the numbers from
    the table. Now determine the missing entry.What all this means for you is that
    functions provide a rather economic way of computing lots of interesting values
    with a single expression. Indeed, programs are functions; and once you understand
    functions well, you know almost everything there is about programming. Given their
    importance, let’s recap what we know about functions so far:'
  prefs: []
  type: TYPE_NORMAL
- en: First,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (FunctionName  InputName)  BodyExpression)
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'is a function definition. You recognize it as such, because it starts with
    the “[define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)”
    keyword. It essentially consists of three pieces: two names and an expression.
    The first name is the name of the function; you need it to apply the function
    as often as you wish. The second name–called a parameter—<wbr>represents the input
    of the function, which is unknown until you apply the function. The expression,
    dubbed body, computes the output of the function for a specific input.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Second,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (FunctionName  ArgumentExpression)
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: is a function application. The first part tells DrRacket which function you
    wish to use. The second part is the input to which you want to apply the function.
    If you were reading a Windows or a Mac manual, it might tell you that this expression
    “launches” the “application” called FunctionName and that it is going to process
    ArgumentExpression as the input. Like all expressions, the latter is possibly
    a plain piece of data or a deeply nested expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Functions can input more than numbers, and they can output all kinds of data,
    too. Our next task is to create a function that simulates the second table—<wbr>the
    one with images of a colored dot—<wbr>just like the first function simulated the
    numeric table. Since the creation of images from expressions isn’t something you
    know from high school, let’s start simply. Do you remember [empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29)?
    We quickly mentioned it at the end of the previous section. When you type it into
    the interactions area, like that:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 60)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/861206f5c005d316460b46e703d877a5.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'DrRacket produces an empty rectangle, also called a scene. You can add images
    to a scene with [place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg) 50 0 ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 60))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/dc82a1c0ea30b811bf7c827962249ae0.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Think of the rocket as an object that is like the dot in the above table from
    your mathematics class. The difference is that a rocket is interesting.Next, you
    should make the rocket descend, just like the dot in the above table. From the
    preceding section, you know how to achieve this effect by increasing the y-coordinate
    that is supplied to [place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg) 50 10 ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 60))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/9e43d73a585e94e1fb5a1c633ce85fee.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg) 50 20 ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 60))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/de806ed403303acc021276023a465fa6.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg) 50 30 ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 60))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/779f3b49646b23cb8829f76c5bc0b453.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: All that’s needed now is to produce lots of these scenes easily and to display
    all of them in rapid order.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (picture-of-rocket height)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg) 50 height ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 60)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 4: Landing a rocket (version 1)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The first goal can be achieved with a function, of course; see [figure 4](#%28counter._%28figure._fig~3apicture-of-rocket..v1%29%29).In
    BSL, you can use all kinds of characters in names, including “-” and “.”. Yes,
    this is a function definition. Instead of y, it uses the name picture-of-rocket,
    a name that immediately tells you what the function outputs: a scene with a rocket.
    Instead of x, the function definition uses height for the name of its parameter,
    a name that suggests that it is a number and that it tells the function where
    to place the rocket. The body expression of the function is just like the series
    of expressions with which we just experimented, except that it uses height in
    place of a number. And we can easily create all of those images with this one
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (picture-of-rocket 0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (picture-of-rocket 10) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (picture-of-rocket 20) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (picture-of-rocket 30) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Try this out in the definitions area or the interactions area; both create
    the expected scenes.The second goalDon’t forget to add the 2htdp/universe library
    to your definitions area. requires knowledge about one additional primitive operation
    from the 2htdp/universe library: [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29).
    So, click RUN and enter the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: ([animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29) picture-of-rocket)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stop and note that the argument expression is a function. Don’t worry for now
    about using functions as arguments; it works well with [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29),
    but don’t try to define functions like [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29)
    at home just yet.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you hit the “return” key, DrRacket evaluates the expression; but
    it does not display a result, not even a prompt. It opens another window—<wbr>a
    canvas—<wbr>and starts a clock that ticks 28 times per second. Every time the
    clock ticks, DrRacket applies picture-of-rocket to the number of ticks passed
    since this function call. The results of these function calls are displayed in
    the canvas, and it produces the effect of an animated movie. The simulation runs
    until you close the window. At that point, [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29)
    returns the number of ticks that have passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The question is where the images on the window come from. The short explanation
    is that [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29)
    runs its operand on the numbers 0, 1, 2, etc.[Exercise 298](part_three.html#%28counter._%28exercise._ex~3aanimate%29%29)
    explains how to design [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29).
    and displays the resulting images. The long explanation is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29)
    starts a clock and counts the number of ticks;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the clock ticks 28 times per second;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: every time the clock ticks, [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29)
    applies the function picture-of-rocket to the current clock tick; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the scene that this application creates is displayed on the canvas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that the rocket first appears at height 0, then 1, then 2, etc.,
    which explains why the rocket descends from the top of the canvas to the bottom.
    That is, our three-line program creates some 100 pictures in about 3.5 seconds,
    and displaying these pictures rapidly creates the effect of a rocket descending
    to the ground.
  prefs: []
  type: TYPE_NORMAL
- en: So here is what you learned in this section. Functions are useful because they
    can process lots of data in a short time. You can launch a function by hand on
    a few select inputs to ensure it produces the proper outputs. This is called testing
    a function. Or, DrRacket can launch a function on lots of inputs with the help
    of some libraries; when you do that, you are running the function. Naturally,
    DrRacket can launch functions when you press a key on your keyboard or when you
    manipulate the mouse of your computer. To find out how, keep reading. Whatever
    triggers a function application isn’t important, but do keep in mind that (simple)
    programs are just functions.
  prefs: []
  type: TYPE_NORMAL
- en: Many Ways to Compute
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you evaluate ([animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29)  picture-of-rocket),
    the rocket eventually disappears in the ground. That’s plain silly. Rockets in
    old science fiction movies don’t sink into the ground; they gracefully land on
    their bottoms, and the movie should end right there.
  prefs: []
  type: TYPE_NORMAL
- en: This idea suggests that computations should proceed differently, depending on
    the situation. In our example, the picture-of-rocket program should work “as is”
    while the rocket is in flight. When the rocket’s bottom touches the bottom of
    the canvas, however, it should stop the rocket from descending any farther.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a sense, the idea shouldn’t be new to you. Even your mathematics teachers
    define functions that distinguish various situations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/323e2891bb440ea448a3de74431c2e69.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'This sign function distinguishes three kinds of inputs: those numbers that
    are larger than 0, those equal to 0, and those smaller than 0. Depending on the
    input, the result of the function is +1, 0, or -1.You can define this function
    in DrRacket without much ado using a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)itional
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sign x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) x 0) 1]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) x 0) 0]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) x 0) -1]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: After you click RUN, you can interact with sign like any other function:Open
    a new tab in DrRacket and start with a clean slate.
  prefs: []
  type: TYPE_NORMAL
- en: '| > (sign 10) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (sign -5) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| -1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (sign 0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This is a good time to explore what the STEP button does. Add (sign  -5) to
    the definitions area and click STEP for the above sign program. When the new window
    comes up, click the right and left arrows there.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: In general, a conditional expression has the shape
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [ConditionExpression1 ResultExpression1] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [ConditionExpression2 ResultExpression2] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [ConditionExpressionN ResultExpressionN]) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'That is, a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)itional
    expression consists of as many conditional lines as needed. Each line contains
    two expressions: the left one is often called condition, and the right one is
    called result; occasionally we also use question and answer. To evaluate a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression, DrRacket evaluates the first condition expression, ConditionExpression1.
    If this yields #true, DrRacket replaces the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression with ResultExpression1, evaluates it, and uses the value as the result
    of the entire [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression. If the evaluation of ConditionExpression1 yields #false, DrRacket
    drops the first line and starts over. In case all condition expressions evaluate
    to #false, DrRacket signals an error.'
  prefs: []
  type: TYPE_NORMAL
- en: With this knowledge, you can now change the course of the simulation. The goal
    is to not let the rocket descend below the ground level of a 100-by-60 scene.
    Since the picture-of-rocket function consumes the height where it should place
    the rocket in the scene, a simple test comparing the given height to the maximum
    height appears to suffice.
  prefs: []
  type: TYPE_NORMAL
- en: 'See [figure 5](#%28counter._%28figure._fig~3apicture-of-rocket..v2%29%29) for
    the revised function definition. The definition uses the name picture-of-rocket.v2
    to distinguish the two versions. Using distinct names also allows us to use both
    functions in the interactions area and to compare the results. Here is how the
    original version works:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (picture-of-rocket 5555) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/0d74d8612829adb1dd9880156d55773c.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'And here is the second one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (picture-of-rocket.v2 5555) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/7264c7148446e08ccf7f06a4b65d8c85.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: No matter what number you give to picture-of-rocket.v2, if it is over 100, you
    get the same scene. In particular, when you run
  prefs: []
  type: TYPE_NORMAL
- en: ([animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29) picture-of-rocket.v2)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: the rocket descends and sinks halfway into the ground before it stops.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (picture-of-rocket.v2 height)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) height 60)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg) 50 height
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 60))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) height 60)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg) 50 60
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 60))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 5: Landing a rocket (version 2)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Landing the rocket this far down is ugly. Then again, you know how to fix this
    aspect of the program. As you have seen, BSL knows an arithmetic of images. When
    [place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29)
    adds an image to a scene, it uses its center point as if it were the whole image,
    even though the image has a real height and a real width. As you may recall, you
    can measure the height of an image with the operation [image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29).
    This function comes in handy here because you really want to fly the rocket only
    until its bottom touches the ground.
  prefs: []
  type: TYPE_NORMAL
- en: Putting one and one together you can now figure out that
  prefs: []
  type: TYPE_NORMAL
- en: ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 60 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg)) 2))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'is the point at which you want the rocket to stop its descent. You could figure
    this out by playing with the program directly, or you can experiment in the interactions
    area with your image arithmetic.Here is a first attempt:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg) 50 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 60 ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 60))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Now replace the third argument in the above application with
  prefs: []
  type: TYPE_NORMAL
- en: ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 60 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg)) 2))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stop! Conduct the experiments. Which result do you like better?
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (picture-of-rocket.v3 height)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) height ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 60 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg)) 2)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg) 50 height
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 60))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) height ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 60 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg)) 2)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg) 50 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 60 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg)) 2))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 60))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 6: Landing a rocket (version 3)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When you think and experiment along these lines, you eventually get to the program
    in [figure 6](#%28counter._%28figure._fig~3apicture-of-rocket..v3%29%29). Given
    some number, which represents the height of the rocket, it first tests whether
    the rocket’s bottom is above the ground. If it is, it places the rocket into the
    scene as before. If it isn’t, it places the rocket’s image so that its bottom
    touches the ground.
  prefs: []
  type: TYPE_NORMAL
- en: One Program, Many Definitions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now suppose your friends watch the animation but don’t like the size of your
    canvas. They might request a version that uses 200-by-400 scenes. This simple
    request forces you to replace 100 with 400 in five places in the program and 60
    with 200 in two other places—<wbr>not to speak of the occurrences of 50, which
    really means “middle of the canvas.”
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Before you read on, try to do just that so that you get an idea of how
    difficult it is to execute this request for a five-line program. As you read on,
    keep in mind that real programs consists of 50,000 or 500,000 or 5,000,000 lines
    of program code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the ideal program, a small request, such as changing the sizes of the canvas,
    should require an equally small change. The tool to achieve this simplicity with
    BSL is [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29).
    In addition to defining functions, you can also introduce constant definitions,
    which assign some name to a constant. The general shape of a constant definition
    is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  Name  Expression)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thus, for example, if you write down
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT 60)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: in your program, you are saying that HEIGHT always represents the number 60.
    The meaning of such a definition is what you expect. Whenever DrRacket encounters
    HEIGHT during its calculations, it uses 60 instead.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (picture-of-rocket.v4 h)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) h ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ROCKET) 2)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 50 h ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) h ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ROCKET) 2)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   50 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ROCKET) 2))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH 100)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT 60)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ROCKET ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 7: Landing a rocket (version 4)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now take a look at the code in [figure 7](#%28counter._%28figure._fig~3apicture-of-rocket..v4%29%29),
    which implements this simple change and also names the image of the rocket. Copy
    the program into DrRacket; and after clicking RUN, evaluate the following interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: ([animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29) picture-of-rocket.v4)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Confirm that the program still functions as before.
  prefs: []
  type: TYPE_NORMAL
- en: 'The program in [figure 7](#%28counter._%28figure._fig~3apicture-of-rocket..v4%29%29)
    consists of four definitions: one function definition and three constant definitions.
    The numbers 100 and 60 occur only twice—<wbr>once the value of WIDTH and once
    as the value of HEIGHT. You may also have noticed that it uses h instead of height
    for the function parameter of picture-of-rocket.v4. Strictly speaking, this change
    isn’t necessary because DrRacket doesn’t confuse height with HEIGHT, but we did
    it to avoid confusing you.'
  prefs: []
  type: TYPE_NORMAL
- en: When DrRacket evaluates ([animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29)  picture-of-rocket.v4),
    it replaces HEIGHT with 60, WIDTH with 100, and ROCKET with the image every time
    it encounters these names. To experience the joys of real programmers, change
    the 60 next to HEIGHT into a 400 and click RUN. You see a rocket descending and
    landing in a 100 by 400 scene. One small change did it all.
  prefs: []
  type: TYPE_NORMAL
- en: 'In modern parlance, you have just experienced your first program refactoring.
    Every time you re-organize your program to prepare yourself for likely future
    change requests, you refactor your program. Put it on your resume. It sounds good,
    and your future employer probably enjoys reading such buzzwords, even if it doesn’t
    make you a good programmer. What a good programmer would never live with, however,
    is that the program contains the same expression three times:'
  prefs: []
  type: TYPE_NORMAL
- en: ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ROCKET) 2))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Every time your friends and colleagues read this program, they need to understand
    what this expression computes, namely, the distance between the top of the canvas
    and the center point of a rocket resting on the ground. Every time DrRacket computes
    the value of the expressions, it has to perform three steps: (1) determine the
    height of the image; (2) divide it by 2; and (3) subtract the result from HEIGHT.
    And, every time, it comes up with the same number.This observation calls for the
    introduction of one more definition to your program:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ROCKET-CENTER-TO-TOP
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ROCKET) 2)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Now substitute ROCKET-CENTER-TO-TOP for the expression ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29)  HEIGHT  ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29)  ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29)  ROCKET)  2))
    in the rest of the program. You may be wondering whether this definition should
    be placed above or below the definition for HEIGHT. More generally, you should
    be wondering whether the ordering of definitions matters. The answer is that for
    constant definitions, the order matters; and for function definitions, it doesn’t.
    As soon as DrRacket encounters a constant definition, it determines the value
    of the expression and then associates the name with this value. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 2 CENTER))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) CENTER 100)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: causes DrRacket to complain that “CENTER is used before its definition,” when
    it encounters the definition for HEIGHT. In contrast,
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) CENTER 100)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 2 CENTER))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: works as expected. First, DrRacket associates CENTER with 100. Second, it evaluates
    ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29)  2  CENTER),
    which yields 200. Finally, DrRacket associates 200 with HEIGHT.
  prefs: []
  type: TYPE_NORMAL
- en: While the order of constant definitions matters, it does not matter where you
    place constant definitions relative to function definitions. Indeed, if your program
    consists of many function definitions, their order doesn’t matter either, though,
    it is good to introduce all constant definitions first, followed by the definitions
    of functions in decreasing order of importance. When you start writing your own
    multi-definition programs, you will see why this ordering matters.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; constants |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH  100)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT  60)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MTSCN  ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ROCKET ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ROCKET-CENTER-TO-TOP
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ROCKET) 2)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; functions |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (picture-of-rocket.v5 h)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) h ROCKET-CENTER-TO-TOP)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 50 h MTSCN)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) h ROCKET-CENTER-TO-TOP)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 50 ROCKET-CENTER-TO-TOP MTSCN)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 8: Landing a rocket (version 5)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The program also contains two line comments, introduced with semi-colons (“;”).
    While DrRacket ignores such comments, people who read programs should not because
    comments are intended for human readers. It is a “back channel” of communication
    between the author of the program and all of its future readers to convey information
    about the program.
  prefs: []
  type: TYPE_NORMAL
- en: Once you eliminate all repeated expressions, you get the program in [figure 8](#%28counter._%28figure._fig~3apicture-of-rocket..v5%29%29).
    It consists of one function definition and five constant definitions. Beyond the
    placement of the rocket’s center, these constant definitions also factor out the
    image itself as well as the creation of the empty scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you read on, ponder the following changes to your program:'
  prefs: []
  type: TYPE_NORMAL
- en: How would you change the program to create a 200-by-400 scene?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How would you change the program so that it depicts the landing of a green
    UFO (unidentified flying object)? Drawing the UFO is easy:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ([overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29) ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 10 "solid" "green")
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 40 4 "solid" "green"))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: How would you change the program so that the background is always blue?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How would you change the program so that the rocket lands on a flat rock bed
    that is 10 pixels higher than the bottom of the scene? Don’t forget to change
    the scenery, too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better than pondering is doing. It’s the only way to learn. So don’t let us
    stop you. Just do it.
  prefs: []
  type: TYPE_NORMAL
- en: Magic Numbers Take another look at picture-of-rocket.v5. As we eliminated all
    repeated expressions, all but one number disappeared from this function definition.
    In the world of programming, these numbers are called magic numbers, and nobody
    likes them. Before you know it, you forget what role the number plays and what
    changes are legitimate. It is best to name such numbers in a definition.
  prefs: []
  type: TYPE_NORMAL
- en: Here we actually know that 50 is our choice for an x-coordinate for the rocket.
    Even though 50 doesn’t look like much of an expression, it really is a repeated
    expression, too. Thus, we have two reasons to eliminate 50 from the function definition,
    and we leave it to you to do so.
  prefs: []
  type: TYPE_NORMAL
- en: One More Definition
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Danger ahead! This section introduces one piece of knowledge from physics. If
    physics scares you, skip this section on a first reading; programming doesn’t
    require physics knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29)
    actually applies its functions to the number of clock ticks that have passed since
    it was first called. That is, the argument to picture-of-rocket isn’t a height
    but a time. Our previous definitions of picture-of-rocket use the wrong name for
    the argument of the function; instead of h—<wbr>short for height—<wbr>it ought
    to use t for time:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (picture-of-rocket t)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) t ROCKET-CENTER-TO-TOP)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET X t MTSCN)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) t ROCKET-CENTER-TO-TOP)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET X ROCKET-CENTER-TO-TOP
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                   MTSCN)])) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: And this small change to the definition immediately clarifies that this program
    uses time as if it were a distance. What a bad idea.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you have never taken a physics course, you know that a time is not a
    distance. So somehow our program worked by accident. Don’t worry, though; it is
    all easy to fix. All you need to know is a bit of rocket science, which people
    like us call physics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Physics?!? Well, perhaps you have already forgotten what you learned in that
    course. Or perhaps you have never taken a course on physics because you are way
    too young or gentle. No worries. This happens to the best programmers all the
    time, because they need to help people with problems in music, economics, photography,
    physics, nursing, and all kinds of other disciplines. Obviously, not even programmers
    know everything. So they look up what they need to know. Or they talk to the right
    kind of people. And if you talk to a physicist, you will find out that the distance
    traveled is proportional to the time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/41e091aee90b955133aac8ee1377e239.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'That is, if the velocity of an object is v, then the object travels d miles
    (or meters or pixels or whatever) in t seconds.Of course, a teacher ought to show
    you a proper function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/48a6d942e92e716dfc1e5d20942933d0.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'because this tells everyone immediately that the computation of d depends on
    t and that v is a constant. A programmer goes even further and uses meaningful
    names for these one-letter abbreviations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) V 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (distance t)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) V t))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This program fragment consists of two definitions: a function distance that
    computes the distance traveled by an object traveling at a constant velocity,
    and a constant V that describes the velocity.'
  prefs: []
  type: TYPE_NORMAL
- en: You might wonder why V is 3 here. There is no special reason. We consider 3
    pixels per clock tick a good velocity. You may not. Play with this number and
    see what happens with the animation.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; properties of the “world” and the descending rocket |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH  100)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT  60)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) V 3)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) X 50)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; graphical constants |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MTSCN  ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ROCKET ![](../Images/b7588499fc0d7bd5e30dfe68faf3274a.jpg))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ROCKET-CENTER-TO-TOP
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ROCKET) 2)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; functions |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (picture-of-rocket.v6 t)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) (distance t) ROCKET-CENTER-TO-TOP)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET X (distance t) MTSCN)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) (distance t) ROCKET-CENTER-TO-TOP)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET X ROCKET-CENTER-TO-TOP MTSCN)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (distance t)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) V t))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 9: Landing a rocket (version 6)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now we can fix picture-of-rocket again. Instead of comparing t with a height,
    the function can use (distance  t) to calculate how far down the rocket is. The
    final program is displayed in [figure 9](#%28counter._%28figure._fig~3apicture-of-rocket..v6%29%29).
    It consists of two function definitions: picture-of-rocket.v6 and distance. The
    remaining constant definitions make the function definitions readable and modifiable.
    As always, you can run this program with [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: ([animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29) picture-of-rocket.v6)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: In comparison to the previous versions of picture-of-rocket, this one shows
    that a program may consist of several function definitions that refer to each
    other. Then again, even the first version used [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)
    and [/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29)—<wbr>it’s
    just that you think of those as built into BSL.
  prefs: []
  type: TYPE_NORMAL
- en: As you become a true blue programmer, you will find out that programs consist
    of many function definitions and many constant definitions. You will also see
    that functions refer to each other all the time. What you really need to practice,
    is to organize them so that you can read them easily, even months after completion.
    After all, an older version of you—<wbr>or someone else—<wbr>will want to make
    changes to these programs; and if you cannot understand the program’s organization,
    you will have a difficult time with even the smallest task. Otherwise, you mostly
    know what there is to know.
  prefs: []
  type: TYPE_NORMAL
- en: You Are a Programmer Now
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The claim that you are a programmer may have come as a surprise to you at the
    end of the preceding section, but it is true. You know all the mechanics that
    there are to know to BSL. You know that programming is about the arithmetic of
    numbers, strings, images, and whatever other data your chosen programming languages
    support. You know that programs consist of function and constant definitions.
    You know, because we have told you, that in the end, it’s all about organizing
    these definitions properly. Last but not least, you know that DrRacket and the
    teachpacks support lots of other functions and that DrRacket HelpDesk explains
    what these functions do.
  prefs: []
  type: TYPE_NORMAL
- en: You might think that you still don’t know enough to write programs that react
    to keystrokes, mouse clicks, and so on. As it turns out, you do. In addition to
    the [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29)
    function, the 2htdp/universe library provides other functions that hook up your
    programs to the keyboard, the mouse, the clock and other moving parts in your
    computer. Indeed, it even supports writing programs that connect your computer
    with anybody else’s computer around the world. So this isn’t really a problem.
  prefs: []
  type: TYPE_NORMAL
- en: In short, you have seen almost all the mechanics of putting together programs.
    If you read up on all the functions that are available, you can write programs
    that play interesting computer games, run simulations, or keep track of business
    accounts. The question is whether this really means you are a programmer. Are
    you?
  prefs: []
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Stop! Think! Don’t turn the page yet. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Not!
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you look at the “programming” book shelves in a random book store, you
    will see loads of books that promise to turn you into a programmer on the spot.
    Now that you have worked your way through some first examples, however, you probably
    realize that this cannot be true.
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring the mechanical skills of programming—<wbr>learning to write expressions
    that the computer understands, getting to know what functions and libraries are
    available, and similar activities—<wbr>aren’t helping you much with real programming.
    To make such claims is like saying that memorizing a thousand words from the dictionary
    and a few grammar rules teaches you a foreign language.
  prefs: []
  type: TYPE_NORMAL
- en: Good programming is far more than the mechanics of acquiring a language. Most
    importantly, it is about keeping in mind that programmers create programs for
    other people to read them in the future. A good program reflects the problem statements
    and its important concepts. It comes up with a concise description of what it
    computes. Examples illustrate its purpose and how it relates to the problem. The
    examples make sure that the future reader knows how and why your code works. In
    short, good programming is about solving problems systematically and conveying
    the ideas within the code. Best of all, this approach to programming actually
    makes programming accessible to everyone—<wbr>so it serves two masters at once.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of this book is all about these things; very little of the book’s content
    is about the mechanics of DrRacket, BSL, or libraries. The book shows you how
    good programmers think about problems. And, you will even learn that this way
    of solving problems applies to other situations in life, e.g., the work of doctors,
    journalists, lawyers, and engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Oh, and by the way, the rest of the book uses a tone that is more appropriate
    for a serious text than this Prologue. Enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: 'Note on What this Book Is Not About Many introductory books on programming
    contain a lot of material about the authors’ favorite application discipline for
    programming: puzzles, mathematics, physics, music, and so on. To some extent,
    including such material is natural, because programming is obviously useful in
    all these areas. Then again, this kind of material distracts from proper programming
    and usually fails to tease apart the incidental from the essential. Hence this
    book focuses on programming and problem solving and what computer science can
    teach you in this regard. We have made every attempt to minimize the use of knowledge
    from other areas; for those few occasions when we went too far, we apologize.'
  prefs: []
  type: TYPE_NORMAL
- en: IFixed-Size Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every programming language comes with a language of data and a language of operations
    on data. The first language always provides some forms of atomic data; to represent
    the variety of information in the real world as data, a programmer must learn
    to compose basic data and to describe such compositions. Similarly, the second
    language provides some basic operations on atomic data; it is the programmer’s
    task to compose these operations into programs that perform the desired computations.
    We use arithmetic for the combination of these two parts of a programming language
    because it generalizes what you know from grade school.
  prefs: []
  type: TYPE_NORMAL
- en: This first part of the book (I) introduces the arithmetic of BSL, the programming
    language used in the Prologue. From arithmetic, it is a short step to your first
    simple programs, which you may know as functions from mathematics. Before you
    know it, though, the process of writing programs looks confusing, and you will
    long for a way to organize your thoughts. We equate “organizing thoughts” with
    design, and this first part of the book introduces you to a systematic way of
    designing programs.
  prefs: []
  type: TYPE_NORMAL
- en: 1Arithmetic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'From [Prologue: How to Program](part_prologue.html), you know how to write
    down the kind of expression you know from first grade in BSL notation:'
  prefs: []
  type: TYPE_NORMAL
- en: write "(",Scan this first chapter quickly, skip ahead to the second one, and
    return here, when you encounter “arithmetic” that you don’t recognize.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: write down the name of a primitive operation op,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: write down the arguments, separated by some space, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: write down ")".
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Just as a reminder, here is a primitive expression:'
  prefs: []
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'It uses [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29),
    the operation for adding two numbers, followed by two arguments, which are plain
    numbers. But here is another example:'
  prefs: []
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1) 2) 3 4 5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This second example exploits two points in the above description that are open
    to interpretation. First, primitive operations may consume more than two arguments.
    Second, the arguments don’t have to be numbers per se; they can be expressions,
    too.Evaluating expressions is also straightforward. First, BSL evaluates all the
    arguments of a primitive operation. Second, it “feeds” the resulting pieces of
    data to the operation, which produces a result. Thus,
  prefs: []
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 3 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: We use == to mean “is equal to according to the laws of computation.” and
  prefs: []
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1) 2) 3 ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 2 2) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 2 2) 3 4 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 5 3 4 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 18 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: These calculations should look familiar, because they are the same kind of calculations
    that you performed in mathematics classes. You may have written down the steps
    in a different way; you may have never been taught how to write down a sequence
    of calculation steps. Yet, BSL performs calculations just like you do, and this
    should be a relief. It guarantees that you understand what it does with primitive
    operations and primitive data, so there is some hope that you can predict what
    your programs will compute. Generally speaking, it is critical for a programmer
    to know how the chosen language calculates, because otherwise a program’s computation
    may harm the people who use them or on whose behalf the programs calculate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of this chapter introduces four forms of atomic data of BSL: numbers,
    strings, images, and Boolean values.The next volume, How to Design Components,
    will explain how to design atomic data. We use the word “atomic” here in analogy
    to physics. You cannot peek inside atomic pieces of data, but you do have functions
    that combine several pieces of atomic pieces of data into another one, retrieve
    “properties” of them, also in terms of atomic data, and so on. The sections of
    this chapter introduce some of these functions, also called primitive operations
    or pre-defined operations. You can find others in the documentation of BSL that
    comes with DrRacket.'
  prefs: []
  type: TYPE_NORMAL
- en: 1.1The Arithmetic of Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Most people think “numbers” and “operations on numbers” when they hear “arithmetic.”
    “Operations on numbers” means adding two numbers to yield a third; subtracting
    one number from another; determining the greatest common divisor of two numbers;
    and many more such things. If we don’t take arithmetic too literally, we may even
    include the sine of an angle, rounding a real number to the closest integer, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The BSL language supports Numbers and arithmetic on them. As discussed in the
    Prologue, an arithmetic operation such as [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)
    is used like this:'
  prefs: []
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 3 4)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'that is, in prefix notation form. Here are some of the operations on numbers
    that our language provides: [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29),
    [-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29),
    [*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29),
    [/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29),
    [abs](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._abs%29%29),
    [add1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._add1%29%29),
    [ceiling](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._ceiling%29%29),
    [denominator](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._denominator%29%29),
    [exact->inexact](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._exact-~3einexact%29%29),
    [expt](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._expt%29%29),
    [floor](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._floor%29%29),
    [gcd](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._gcd%29%29),
    [log](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._log%29%29),
    [max](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._max%29%29),
    [numerator](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._numerator%29%29),
    [quotient](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._quotient%29%29),
    [random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29),
    [remainder](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._remainder%29%29),
    [sqr](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqr%29%29),
    and [tan](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._tan%29%29).
    We picked our way through the alphabet, just to show the variety of operations.
    Explore what they compute, and then find out how many more there are.If you need
    an operation on numbers that you know from your mathematics courses, chances are
    that BSL knows about it, too. Guess its name and experiment in the interaction
    area. Say you need to compute the sin of some angle; try'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([sin](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sin%29%29) 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: and use it happily ever after. Or look in the HelpDesk.You might know [e](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._e%29%29)
    from calculus. It’s a real number, close to 2.718, called “Euler’s constant.”
    You will find there that in addition to operations, BSL also recognizes the names
    of some widely used numbers, for example, [pi](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._pi%29%29)
    and [e](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._e%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to numbers, BSL programs may use natural numbers, integers, rational
    numbers, real numbers, and complex numbers. We assume that you have heard of all
    but the last one. The last one may have been mentioned in your high school. If
    not, don’t worry; while complex numbers are useful for all kinds of calculations,
    a novice doesn’t have to know about them.
  prefs: []
  type: TYPE_NORMAL
- en: A truly important distinction concerns the precision of numbers. For now, it
    is important to understand that BSL distinguishes exact numbers and inexact numbers.
    When it calculates with exact numbers, BSL preserves this precision whenever possible.
    For example, ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29)  4  6)
    produces the precise fraction 2/3, which DrRacket can render as a proper fraction,
    an improper fraction, or as a mixed decimal. Play with your computer’s mouse to
    find the menu that changes the fraction into decimal expansion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of BSL’s numeric operations cannot produce an exact result. For example,
    using the [sqrt](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqrt%29%29)
    operation on 2 produces an irrational number that cannot be described with a finite
    number of digits. Because computers are of finite size and BSL must somehow fit
    such numbers into the computer, it chooses a approximation: 1.4142135623730951.
    As mentioned in the Prologue, the #i prefix warns novice programmers of this lack
    of precision. While most programming languages choose to reduce precision in this
    manner, few advertise it and fewer even warn programmers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note on Numbers The word [Number](#%28tech._number%29) refers to a wide variety
    of numbers, including counting numbers, integers, rational numbers, real numbers,
    and even complex numbers. For most uses, you can safely equate [Number](#%28tech._number%29)
    with the number line from elementary school, though on occasion this translation
    is too imprecise. If we wish to be precise, we use appropriate words: Integer,
    Rational, and so on. We may even refine these notions using such standard terms
    as PositiveInteger, NonnegativeNumber, NegativeNumber, and so on. End'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1\. Add the following definitions for x and y to DrRacket’s definitions
    area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) x 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) y 4)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Now imagine that x and y are the coordinates of a Cartesian point. Write down
    an expression that computes the distance of this point to the origin, that is,
    a point with the coordinates (0,0).
  prefs: []
  type: TYPE_NORMAL
- en: The expected result for these values is 5 but your expression should produce
    the correct result even after you change these definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Just in case you have not taken geometry courses or in case you forgot the formula
    that you encountered there, the point (x,y) has the distance
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/46f7ea72043c411b4fda6ed7c6650017.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'from the origin. After all, we are teaching you how to design programs not
    how to be a geometer.To develop the desired expression, it is best to hit RUN
    and to experiment in the interactions area. The RUN action tells DrRacket what
    the current values of x and y are so that you can experiment with expressions
    that involve x and y:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > x |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 3 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > y |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 4 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) x 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 13 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) x y)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 12 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Once you have the expression that produces the correct result, copy it from
    the interactions area to the definitions area.
  prefs: []
  type: TYPE_NORMAL
- en: To confirm that the expression works properly, change x to 12 and y to 5, then
    click RUN. The result should be 13.
  prefs: []
  type: TYPE_NORMAL
- en: Your mathematics teacher would say that you computed the distance formula. To
    use the formula on alternative inputs, you need to open DrRacket, edit the definitions
    of x and y so they represent the desired coordinates, and click RUN. But this
    way of reusing the distance formula is cumbersome and naive. We will soon show
    you a way to define functions, which makes re-using formulas straightforward.
    For now, we use this kind of exercise to call attention to the idea of functions
    and to prepare you for programming with them. [![image](../Images/242892ec3ec4e21180e8938aadaec5ec.jpg)](#%28counter._%28exercise._arith-n%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 1.2The Arithmetic of Strings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A wide-spread prejudice about computers concerns their innards. Many believe
    that it is all about bits and bytes—<wbr>whatever those are—<wbr>and possibly
    numbers, because everyone knows that computers can calculate. While it is true
    that electrical engineers must understand and study the computer as just such
    an object, beginning programmers and everyone else need never (ever) succumb to
    this thinking.
  prefs: []
  type: TYPE_NORMAL
- en: Programming languages are about computing with information, and information
    comes in all shapes and forms. For example, a program may deal with colors, names,
    business letters, or conversations between people. Even though we could encode
    this kind of information as numbers, it would be a horrible idea. Just imagine
    remembering large tables of codes, such as 0 means “red” and 1 means “hello,”
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead most programming languages provide at least one kind of data that deals
    with such symbolic information. For now, we use BSL’s strings. Generally speaking,
    a String is a sequence of the characters that you can enter on the keyboard enclosed
    in double quotes, plus a few others, about which we aren’t concerned just yet.
    In [Prologue: How to Program](part_prologue.html), we have seen a number of BSL
    strings: "hello", "world", "blue", "red", etc. The first two are words that may
    show up in a conversation or in a letter; the others are names of colors that
    we may wish to use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note We use 1String to refer to the keyboard characters that make up a [String](#%28tech._string%29).
    For example, "red" consists of three such [1String](#%28tech._1string%29)s: "r",
    "e", "d". As it turns out, there is a bit more to the definition of [1String](#%28tech._1string%29)
    but for now, thinking of them as [String](#%28tech._string%29)s of length 1 is
    fine. End'
  prefs: []
  type: TYPE_NORMAL
- en: 'BSL includes only one operation that exclusively consumes and produces strings:
    [string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29),
    which, as we have seen in [Prologue: How to Program](part_prologue.html) concatenates
    two given strings into one. Think of [string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)
    as an operation that is just like [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29).
    While the latter consumes two (or more) numbers and produces a new number, the
    former consumes two or more strings and produces a new string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "what
    a " "lovely " "day" " 4 BSL") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "what a lovely day 4 BSL" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Nothing about the given numbers changes when [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)
    adds them up; and nothing about the given strings changes when [string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)
    concatenates them into one big string. If you wish to evaluate such expressions,
    you just need to think that the obvious laws hold for [string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29),
    similar to those for [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  1)  ==  2
    |  | ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)  "a"  "b")  ==  "ab"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  2)  ==  3
    |  | ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)  "ab"  "c")  ==  "abc"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  2  2)  ==  4
    |  | ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)  "a"  "
    ")  ==  "a " |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| .... |  | .... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Exercise 2\. Add the following two lines to the definitions area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) prefix "hello")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) suffix "world")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Then use string primitives to create an expression that concatenates prefix
    and suffix and adds "_" between them. When you run this program, you will see
    "hello_world" in the interactions area.
  prefs: []
  type: TYPE_NORMAL
- en: See [exercise 1](#%28counter._%28exercise._arith-n%29%29) for how to create
    expressions using DrRacket. [![image](../Images/a36256ade1229756b94461f98f2ec876.jpg)](#%28counter._%28exercise._arith-s0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 1.3Mixing It Up
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'All other operations (in BSL) concerning strings consume or produce data other
    than strings. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29)
    consumes a string and produces a number;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[string-ith](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-ith%29%29)
    consumes a string s together with a number i and extracts the [1String](#%28tech._1string%29)
    located at the ith position (counting from 0); and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[number->string](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number-~3estring%29%29)
    consumes a number and produces a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also look up [substring](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._substring%29%29)
    and find out what it does.If the documentation in HelpDesk appears confusing,
    experiment with the functions in the interaction area. Give them appropriate arguments,
    find out what they compute. Also use inappropriate arguments for some operations
    just to find out how BSL reacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) 42)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| string-length: expects a string, given 42 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As you can see, BSL reports an error. The first part “string-length” informs
    you about the operation that is misapplied; the second half states what is wrong
    with the arguments. In this specific example, [string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29)
    is supposed to be applied to a string but is given a number, specifically 42.Naturally,
    it is possible to nest operations that consume and produce different kinds of
    data as long as you keep track of what is proper and what is not. Consider this
    expression from the Prologue:'
  prefs: []
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) "hello
    world") 20)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The inner expression applies [string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29)
    to "hello world", our favorite string. The outer expression has [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)
    consume the result of the inner expression and 20.Let us determine the result
    of this expression in a step-by-step fashion:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) "hello
    world") 20) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 11 20)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 31 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Not surprisingly, computing with such nested expressions that deal with a mix
    of data is no different from computing with numeric expressions. Here is another
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) ([number->string](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number-~3estring%29%29) 42)) 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) "42") 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 2 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 4 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Before you go on, construct some nested expressions that mix data in the wrong
    way, say,
  prefs: []
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) 42) 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Run them in DrRacket. Study the red error message but also watch what DrRacket
    highlights in the definitions area.Exercise 3\. Add the following two lines to
    the definitions area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) str "helloworld")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) i 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Then create an expression using string primitives that adds "_" at position
    i. In general this means the resulting string is longer than the original one;
    here the expected result is "hello_world".Position means i characters from the
    left of the string, but programmers start counting at 0. Thus, the 5th letter
    in this example is "w", because the 0th letter is "h". Hint When you encounter
    such “counting problems” you may wish to add a string of digits below str to help
    with counting:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) str "helloworld")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ind "0123456789")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) i 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: See [exercise 1](#%28counter._%28exercise._arith-n%29%29) for how to create
    expressions in DrRacket. [![image](../Images/85eab540bc75c1274a3dc9114f37c207.jpg)](#%28counter._%28exercise._arith-s1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4\. Use the same setup as in [exercise 3](#%28counter._%28exercise._arith-s1%29%29)
    to create an expression that deletes the ith position from str. Clearly this expression
    creates a shorter string than the given one. Which values for i are legitimate?
    [![image](../Images/3266b2488ce3544690edb45fe3605862.jpg)](#%28counter._%28exercise._arith-s2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 1.4The Arithmetic of Images
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Images represent symbolic data somewhat like strings. Like strings, you use
    DrRacketRequire the 2htdp/image library. to insert images wherever you would insert
    an expression into your code, because images are values just like numbers and
    strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your programs can also manipulate images with primitive operations. These primitive
    operations come in three flavors. The first kind concerns the creation of basic
    images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29)
    produces a circle image from a radius, a mode string, and a color string;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ellipse](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._ellipse%29%29)
    produces an ellipse from two radii, a mode string, and a color string;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._line%29%29)
    produces a line from two points and a color string;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29)
    produces a rectangle from a width, a height, a mode string, and a color string;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29)
    produces a text image from a string, a font size, and a color string; and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[triangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._triangle%29%29)
    produces an upward-pointing equilateral triangle from a size, a mode string, and
    a color string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The names of these operations mostly explain what kind of image they create.
    All you need to know is that mode strings means either "solid" or "outline" and
    color strings are strings such as "orange", "black", etc.Play with these operations
    in the interactions window:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 10 "solid" "red")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/b0ce002a29faadcf5762de727886c98e.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 10 20 "solid" "blue")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/b4c5dbd30a8cd174ff280ea4254edf8f.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([star](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._star%29%29) 12 "solid" "green")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/7e7dd29ed305cddf4f27e690c04ac071.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! The above uses a previously-unmentioned operation. Look up its documentation
    and find out how many more such operations the 2htdp/image library comes with.
    Experiment with the operations you find.The second kind of functions on images
    concern image properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29)
    determines the width of an image in terms of pixels;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29)
    determines the height of an image;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'They extract the kind of values from images that you expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29) ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 10 "solid" "red"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 20 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 10 20 "solid" "blue"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 20 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Explain how DrRacket determines the value of this expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29) ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 10 "solid" "red"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 10 20 "solid" "blue")))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'A proper understanding of the third kind of image-composing primitives requires
    the introduction of one new idea: the anchor point. An image isn’t just a single
    pixel; it consists of many pixels. Specifically, each image is like a photograph,
    that is, a rectangle of pixels. One of these pixels is an implicit anchor point.
    When you use an image primitive to compose two images, the composition happens
    with respect to the anchor points, unless you specify some other point explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29)
    places all the images to which it is applied on top of each other, using the center
    as anchor point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[overlay/xy](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%2Fxy%29%29)
    is like [overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29)
    but accepts two numbers—<wbr>x and y—<wbr>between two image arguments. It shifts
    the second image by x pixels to the right and y pixels down—<wbr>all with respect
    to the first image’s top-left corner; unsurprisingly, a negative x shifts the
    image to the left and a negative y up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[overlay/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%2Falign%29%29)
    is like [overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29)
    but accepts two strings that shift the anchor point(s) to other parts of the rectangles.
    There are nine different positions overall; experiment with all possibilities!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The 2htdp/image library comes with many other primitive functions for combining
    images. As you get familiar with image processing, you will want to read up on
    those. For now, we introduce three more because they are important for creating
    animated scenes and images for games:'
  prefs: []
  type: TYPE_NORMAL
- en: '[empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29)
    creates a rectangle of some given width and height;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29)
    places an image into a scene at a specified position. If the image doesn’t fit
    into the given scene, it is appropriately cropped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    consumes a scene, four numbers, and a color to draw a line into the given image.
    Experiment with it to see how it works.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  1)  ==  2
    |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29) ([square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) 4 "solid" "orange")
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 6 "solid" "yellow"))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ![image](../Images/b82ccb348e1b44c1ed9f79f270a78934.jpg) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  2)  ==  3
    |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([underlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._underlay%29%29) ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 6 "solid" "yellow")
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           ([square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) 4 "solid" "orange"))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ![image](../Images/25c84cf7dc5576c66db91a6100568d5c.jpg) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  2  2)  ==  4
    |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 6 "solid" "yellow")
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;              10 10 &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;              ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 20 20))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ![image](../Images/563aba8ebaa84e4739264eb85786265c.jpg) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| .... |  | .... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 10: Laws of image creation'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The laws of arithmetic for images are analogous to those for numbers; see [figure 10](#%28counter._%28figure._fig~3alaws-of-images%29%29)
    for some examples and a comparison with numeric arithmetic. Again, no image gets
    destroyed or changed. Like [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29),
    these primitives just make up new images that combine the given ones in some manner.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5\. Use the image primitives to create the image of a simple
  prefs: []
  type: TYPE_NORMAL
- en: automobile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure you can easily change the scale of the entire image. [![image](../Images/7de33070ab0f3f57f0110b74e2de0e87.jpg)](#%28counter._%28exercise._arith-i2%29%29)Exercise 6\.
    Add the following line to the definitions area:Copy and paste the image into your
    DrRacket.
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) cat ![](../Images/7f672dabcc1a02ee83dd63968b35fb97.jpg))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Create an expression that counts the number of pixels in the image. [![image](../Images/624be3fdeff9fa6e583643bad5dc2867.jpg)](#%28counter._%28exercise._arith-i1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 1.5The Arithmetic of Booleans
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We need one last kind of primitive data before we can design programs: Boolean
    values. There are only two kinds of Boolean values: #true and #false. Programs
    use Boolean values for representing decisions or the status of switches.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Computing with Boolean values is simple, too. In particular, BSL programs get
    away with three operations: [or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29),
    [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29),
    and [not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29).
    These operations are kind of like addition, multiplication, and negation for numbers.
    Of course, because there are only two Boolean values, it is actually possible
    to demonstrate how these functions work in all possible situations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)
    checks whether any of the given Boolean values is #true:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| > ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) #true #true)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) #true #false)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) #false #true)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) #false #false)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '[and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    checks whether all of the given Boolean values are #true:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| > ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) #true #true)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) #true #false)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) #false #true)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) #false #false)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'and [not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29)
    always picks the Boolean that isn’t given:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| > ([not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29) #true)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Unsurprisingly, [or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)
    and [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    may be used with more than two expressions. Finally, there is more to [or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)
    and [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    than these explanations suggest but to explain the extra bit, requires a second
    look at nested expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7\. Boolean expressions can express some everyday problems. Suppose
    you want to decide whether today is an appropriate day to go to the mall. You
    go to the mall if it is either not sunny or ifNadeem Hamid suggested this formulation
    of the exercise. today is Friday (because that is when stores post new sales items).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how you could go about it using your new knowledge about Booleans.
    First add these two lines to the definitions area of DrRacket:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) sunny #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) friday #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Now create an expression that computes whether sunny is false or friday is
    true. So in this particular case, the answer is #false. (Why?)'
  prefs: []
  type: TYPE_NORMAL
- en: See [exercise 1](#%28counter._%28exercise._arith-n%29%29) for how to create
    expressions in DrRacket. How many combinations of Booleans can you associate with
    sunny and friday? [![image](../Images/da57248b0a7756681f455ac0acb44b8d.jpg)](#%28counter._%28exercise._arith-b1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 1.6Mixing It Up with Booleans
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One important use of Boolean values concerns calculations with different kinds
    of data. We know from the Prologue that BSL programs may name values via definitions.
    For example, we could start a program with
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) x 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and then compute its inverse:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) inverse-of-x ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 x))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This works fine, as long as we don’t edit the program and change x to 0.This
    is where Boolean values come in, in particular conditional calculations. First,
    the primitive function [=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29)
    determines whether two (or more) numbers are equal. If so, it produces #true,
    otherwise #false. Second, there is a kind of BSL expression that we haven’t mentioned
    so far: the [if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)
    expression. It uses the word “if” as if it were a primitive function; it isn’t.
    The word “if” is followed by three expressions, separated by blank spaces (that
    includes tabs, line breaks, etc). Naturally the entire expression is enclosed
    in parentheses. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) x 0) 0 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 x))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This [if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)
    expression contains ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29)  x  0),
    0, and ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29)  1  x),
    three so-called sub-expressions. The evaluation of this expression proceeds in
    two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first expression is always evaluated. Its result must be a Boolean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the result of the first expression is #true, then the second expression
    is evaluated; otherwise the third one. Whatever their results are, they are also
    the result of the entire [if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)
    expression.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the result and choose a different representation.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Given the definition of x above, you can experiment with [if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)
    expressions in the interactions area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) x 0) 0 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 x))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 0.5 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Using the laws of arithmetic, you can figure out the result yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) x 0) 0 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 x))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; because x stands for 2 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 2 0) 0 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; 2 is not equal to 0, ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29)  2  0)
    is #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) #false 0 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 x))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; normalize this to its decimal representation |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 0.5 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In other words, DrRacket knows that x stands for 2 and that the latter is not
    equal to 0. Hence, ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29)  x  0)
    produces the result #false, meaning [if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)
    picks its third sub-expression to be evaluated.Stop! Imagine you edit the definition
    so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) x 0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What do you think
  prefs: []
  type: TYPE_NORMAL
- en: ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) x 0) 0 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 x))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: evaluates to in this context? Why? Show your calculation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to [=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29),
    BSL provides a host of other comparison primitives. Explain what the following
    four comparison primitives determine about numbers: [<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29),
    [<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29),
    [>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29),
    [>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29).'
  prefs: []
  type: TYPE_NORMAL
- en: Strings aren’t compared with [=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29)
    and its relatives. Instead, you must use [string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29)
    or [string<=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3c~3d~3f%29%29)
    or [string>=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3e~3d~3f%29%29)
    if you ever need to compare strings. While it is obvious that [string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29)
    checks whether the two given strings are equal, the other two primitives are open
    to interpretation. Look up their documentation. Or, experiment, guess a general
    law, and then check in the documentation whether you guessed right.
  prefs: []
  type: TYPE_NORMAL
- en: You may wonder why it is ever necessary to compare strings with each other.
    So imagine a program that deals with traffic lights. It may use the strings "green",
    "yellow", and "red". This kind of program may contain a fragment such as this:The
    dots here aren’t a part of the program of course. Replace them with a string that
    refers to a color.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) current-color [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) next-color
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "green" current-color) "yellow" [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It should be easy to imagine that this fragment deals with the computation that
    determines which light bulb is to be turned on next and which one should be turned
    off.
  prefs: []
  type: TYPE_NORMAL
- en: The next few chapters introduce better expressions than [if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)
    to express conditional computations and, most importantly, systematic ways for
    designing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8\. Add the following line to the definitions area:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) cat ![](../Images/7f672dabcc1a02ee83dd63968b35fb97.jpg))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Create a conditional expression that computes whether the image is tall or wide.
    An image should be labeled "tall" if its height is larger or equal to its width;
    otherwise it is "wide". See [exercise 1](#%28counter._%28exercise._arith-n%29%29)
    for how to create expressions in DrRacket; as you experiment, replace the image
    of the cat with rectangles of your choice to ensure you know the expected answer.
  prefs: []
  type: TYPE_NORMAL
- en: Now try the following modification. Create an expression that computes whether
    a picture is "tall", "wide", or "square". [![image](../Images/6b440aae5f23dcb93856472cea206f9f.jpg)](#%28counter._%28exercise._arith-b2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '1.7Predicates: Know thy Data'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Remember the expression ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29)  42)
    and its result. Actually, the expression doesn’t have a result; it signals an
    error. DrRacket lets you know about errors via red text in the interactions area
    and high-lighting of the expression. This way of marking errors is particularly
    helpful when you use this expression (or its relatives) deeply nested within some
    other expression:'
  prefs: []
  type: TYPE_NORMAL
- en: ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) 42) 1) [pi](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._pi%29%29))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Experiment with this expression by entering it into both DrRacket’s interactions
    area and in the definitions area (plus clicking on RUN).Of course, you really
    don’t want such error-signaling expressions in your program. And usually, you
    don’t make such obvious mistakes as using 42 as a string. It is quite common,
    however, that programs deal with variables that may stand for either a number
    or a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) in [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) in)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'A variable such as in can be a place holder for any value, including a number,
    and this value then shows up in the [string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29)
    expression.One way to prevent such accidents is to use a predicate, which is a
    function that consumes a value and determines whether or not it belongs to some
    class of data. For example, the predicate [number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29)
    determines whether the given value is a number or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29) 4)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29) [pi](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._pi%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29) "fortytwo")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As you see, the predicates produce Boolean values. Hence, when predicates are
    combined with conditional expressions, programs can protect expressions from misuse:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) in [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) in) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) in) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Every class of data that we introduced in this chapter comes with a predicate:
    [string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29),
    [image?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._image~3f%29%29),
    and [boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29).
    Experiment with them to ensure you understand how they work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to predicates that distinguish different forms of data, programming
    languages also come with predicates that distinguish different kinds of numbers.
    In BSL, numbers are classified in two ways: by construction and by their exactness.
    Construction refers to the familiar sets of numbers: [integer?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._integer~3f%29%29),
    [rational?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rational~3f%29%29),
    [real?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._real~3f%29%29),
    and [complex?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._complex~3f%29%29).Put
    ([sqrt](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqrt%29%29)  -1)
    at the prompt in the interactions area and hit the “enter” key. Take a close look
    at the result. The result you see is the first so-called complex number anyone
    encounters. While your teacher may have told you that one doesn’t compute the
    square root of negative numbers, truth is that mathematicians and some programmers
    find it acceptable and useful to do so anyway. But don’t worry: understanding
    complex numbers is not essential to being a program designer. But many programming
    languages, including BSL, choose to use finite approximations to well-known constants,
    which leads to somewhat surprising results with the [rational?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rational~3f%29%29)
    predicate:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([rational?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rational~3f%29%29) [pi](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._pi%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As for exactness, we have mentioned the idea before. For now, experiment with
    [exact?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._exact~3f%29%29)
    and [inexact?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._inexact~3f%29%29)
    to make sure they perform the checks that their names suggest. Later we are going
    to discuss the nature of numbers in some detail.Exercise 9\. Add the following
    line to the definitions area of DrRacket:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) in "hello")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Then create an expression that converts whatever in represents to a number.
    For a string, it determines how long the string is; for an image, it uses the
    area; for a number, it decrements the number, unless it is already 0 or negative;
    for #true it uses 10 and for #false 20.'
  prefs: []
  type: TYPE_NORMAL
- en: See [exercise 1](#%28counter._%28exercise._arith-n%29%29) for how to create
    expressions in DrRacket. [![image](../Images/e64770783f99be48815eaab14d064dd7.jpg)](#%28counter._%28exercise._arith-p1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 10\. Now relax, eat, sleep, and then tackle the next chapter. [![image](../Images/adce493546bfa83981a28dc95defccdc.jpg)](#%28counter._%28exercise._arith-p2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 2Functions and Programs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As far as programming is concerned, “arithmetic” is half the game; the other
    half is “algebra.” Of course, “algebra” relates to the school notion of algebra
    as little/much as the notion of “arithmetic” from the preceding chapter relates
    to arithmetic taught in grade-school arithmetic. Specifically, the algebra notions
    needed are: variable, function definition, function application, and function
    composition. This chapter re-acquaints you with these notions in a fun and accessible
    manner.'
  prefs: []
  type: TYPE_NORMAL
- en: 2.1Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Programs are functions. Like functions, programs consume inputs and produce
    outputs. Unlike the functions you may know, programs work with a variety of data:
    numbers, strings, images, mixtures of all these, and so on. Furthermore, programs
    are triggered by events in the real world, and the outputs of programs affect
    the real world. For example, a spreadsheet program may react to an accountant’s
    key presses by filling some cells with numbers, or the calendar program on a computer
    may launch a monthly payroll program on the last day of every month. Lastly, a
    program may not consume all of its input data at once; instead it may decide to
    process data in an incremental manner.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Definitions While many programming languages obscure the relationship between
    programs and functions, BSL brings it to the fore. Every BSL program consists
    of several definitions, usually followed by an expression that involves those
    definitions. There are two kinds of definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: constant definitions, of the shape ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  Variable  Expression),
    which we encountered in the preceding chapter; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function definitions, which come in many flavors, one of which we used in the
    Prologue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Like expressions, function definitions in BSL come in a uniform shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (FunctionName Variable [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) Variable)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   Expression) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: That is, to define a function, we write down
  prefs: []
  type: TYPE_NORMAL
- en: “([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)
    (”,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the name of the function,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: followed by several variables, separated space and ending in “)”,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and an expression followed by “)”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And that is all there is to it. Here are some small examples:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (f  x)  1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (g  x  y)  ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  1))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (h  x  y  z)  ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29)  2  2)  3))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we explain why these examples are silly, we need to explain what function
    definitions mean. Roughly speaking, a function definition introduces a new operation
    on data; put differently, it adds an operation to our vocabulary if we think of
    the primitive operations as the ones that are always available. Like a primitive
    function, a defined function consumes inputs. The number of variables determines
    how many inputs—<wbr>also called arguments or parameters—<wbr>a function consumes.
    Thus, f is a one-argument function, sometimes called a unary function. In contrast,
    g is a two-argument function, also dubbed binary, and h is a ternary or three-argument
    function. The expression—<wbr>often referred to as the function body—<wbr>determines
    the output.
  prefs: []
  type: TYPE_NORMAL
- en: The examples are silly because the expressions inside the functions do not involve
    the variables. Since variables are about inputs, not mentioning them in the expressions
    means that the function’s output is independent of its input and therefore always
    the same. We don’t need to write functions or programs if the output is always
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: Variables aren’t data; they represent data. For example, a constant definition
    such as
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) x 3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'says that x always stands for 3. The variables in a function header, i.e.,
    the variables that follow the function name, are placeholders for unknown pieces
    of data, the inputs of the function. Mentioning a variable in the function body
    is the way to use these pieces of data when the function is applied and the values
    of the variables become known.Consider the following fragment of a definition:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (ff a) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Its function header is (ff  a), meaning ff consumes one piece of input, and
    the variable a is a placeholder for this input. Of course, at the time we define
    a function, we don’t know what its input(s) will be. Indeed, the whole point of
    defining a function is that we can use the function many times on many different
    inputs.Useful function bodies refer to the function parameters. A reference to
    a function parameter is really a reference to the piece of data that is the input
    to the function. If we complete the definition of ff like this
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (ff a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 10 a))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: we are saying that the output of a function is ten times its input. Presumably
    this function is going to be supplied with numbers as inputs, because it makes
    no sense to multiply images or Boolean values or strings by 10.
  prefs: []
  type: TYPE_NORMAL
- en: For now, the only remaining question is how a function obtains its inputs. And
    to this end, we turn to the notion of applying a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Applications A function application puts [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)d
    functions to work and it looks just like the applications of a pre-defined operation:'
  prefs: []
  type: TYPE_NORMAL
- en: write “(”,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: write down the name of a defined function f,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: write down as many arguments as f consumes, separated by space,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and add “)” at the end.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this bit of explanation, you can now experiment with functions in the
    interactions area just as we suggested you experiment with primitives to find
    out what they compute. The following three experiments, for example, confirm that
    f from above produces the same value no matter what input it is applied to:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (f 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (f "hello world") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (f #true) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'What does (f  ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29)  3  "solid"  "red"))
    yield?Remember to add ([require](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._require%29%29)  2htdp/image)
    to the definitions area.See, even images as inputs don’t change f’s behavior.
    But here is what happens when the function is applied to too few or too many arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (f) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| f: expects 1 argument, found none |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (f 1 2 3 4 5) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| f: expects only 1 argument, found 5 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'DrRacket signals an error that is just like those you see when you apply a
    primitive to the wrong number of arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| +: expects at least 2 arguments, found none |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Functions don’t have to be applied at the prompt in the interactions area.
    It is perfectly acceptable to use function applications nested within other function
    applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (ff 3) 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 32 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) (ff 4) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (ff 3) 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 1280 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (ff (ff 1)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 100 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 11\. Define a function that consumes two numbers, x and y, and that
    computes the distance of point (x,y) to the origin.
  prefs: []
  type: TYPE_NORMAL
- en: In [exercise 1](#%28counter._%28exercise._arith-n%29%29) you developed the right-hand
    side for this function for concrete values of x and y. Now all you really need
    to do is add a header. [![image](../Images/7893e940369fd1cd3262914ef24186d5.jpg)](#%28counter._%28exercise._fun0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12\. Define the function cvolume, which accepts the length of a side
    of an equilateral cube and computes its volume. If you have time, consider defining
    csurface, too.
  prefs: []
  type: TYPE_NORMAL
- en: Hint An equilateral cube is a three-dimensional container bounded by six squares.
    You can determine the surface of a cube if you know that the square’s area is
    its length multiplied by itself. Its volume is the length multiplied with the
    area of one of its squares. (Why?) [![image](../Images/31a2b33c76e5d79cdff27765906e0270.jpg)](#%28counter._%28exercise._fun1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 13\. Define the function string-first, which extracts the first [1String](#%28tech._1string%29)
    from a non-empty string. Don’t worry about empty strings. [![image](../Images/a5c20690a267e6ddc99325cce212603e.jpg)](#%28counter._%28exercise._fun2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14\. Define the function string-last, which extracts the last [1String](#%28tech._1string%29)
    from a non-empty string. Don’t worry about empty strings. [![image](../Images/e76eddf43c7dd4a8ea98b700553db559.jpg)](#%28counter._%28exercise._fun3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15\. Define ==>. The function consumes two Boolean values, call them
    sunny and friday. Its answer is #true if sunny is false or friday is true. Note
    Logicians call this Boolean operation implication, and they use the notation sunny
    => friday for this purpose. [![image](../Images/d7b236d4787c280c7847461725341ba4.jpg)](#%28counter._%28exercise._fun4%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16\. Define the function image-area, which counts the number of pixels
    in a given image. See [exercise 6](#%28counter._%28exercise._arith-i1%29%29) for
    ideas. [![image](../Images/0c658d5fe4ab909e325df005fada3157.jpg)](#%28counter._%28exercise._fun5%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17\. Define the function image-classify, which consumes an image and
    conditionally produces "tall" if the image is taller than wide, "wide" if it is
    wider than tall, or "square" if its width and height are the same. See [exercise 8](#%28counter._%28exercise._arith-b2%29%29)
    for ideas. [![image](../Images/0844fbc7795ad7bf03b3466d9525a430.jpg)](#%28counter._%28exercise._fun10%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 18\. Define the function string-join, which consumes two strings and
    appends them with "_" in between. See [exercise 2](#%28counter._%28exercise._arith-s0%29%29)
    for ideas. [![image](../Images/ebcbf08138a4aa62adc0b4cd3381a182.jpg)](#%28counter._%28exercise._fun10a%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 19\. Define the function string-insert, which consumes a string str
    plus a number i and inserts "_" at the ith position of str. Assume i is a number
    between 0 and the length of the given string (inclusive). See [exercise 3](#%28counter._%28exercise._arith-s1%29%29)
    for ideas. Ponder how string-insert copes with "". [![image](../Images/0a86d85983b29cbaf13c87b55cd12235.jpg)](#%28counter._%28exercise._fun10b%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 20\. Define the function string-delete, which consumes a string plus
    a number i and deletes the ith position from str. Assume i is a number between
    0 (inclusive) and the length of the given string (exclusive). See [exercise 4](#%28counter._%28exercise._arith-s2%29%29)
    for ideas. Can string-delete deal with empty strings? [![image](../Images/4898f7febd71000ae445badd4d4a4323.jpg)](#%28counter._%28exercise._fun10c%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 2.2Computing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Function definitions and applications work in tandem. If you want to design
    programs, you must understand this collaboration, because you need to imagine
    how DrRacket runs your programs and because you need to figure out what goes wrong
    when things go wrong—<wbr>and they will go wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'While you may have seen this idea in an algebra course, we prefer to explain
    it our way. So here we go. Evaluating a function application proceeds in three
    steps: DrRacket determines the values of the argument expressions; it checks that
    the number of arguments and the number of function parameters are the same; if
    so, DrRacket computes the value of the body of the function, with all parameters
    replaced by the corresponding argument values. This last value is the value of
    the function application. This is a mouthful, so we need examples.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample calculation for f:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (f ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket knows that ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  1)  ==  2
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (f 2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket replaced all occurrences of x with 2 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'That last equation is weird, because x does not occur in the body of f. Therefore,
    replacing the occurrences of x with 2 in the function body produces 1, which is
    the function body itself.For ff, whose parameter is a and whose body is ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29)  10  a),
    DrRacket performs a different kind of computation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (ff ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket again knows that ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  1)  ==  2
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (ff 2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket replaces a with 2 in ff''s body |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 10 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; and from here, DrRacket uses plain arithmetic |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 20 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The best point is that when you combine these laws of computation with those
    of arithmetic, you can pretty much predict the outcome of any program in BSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (ff ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 2)) 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket knows that ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  2)  ==  3
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (ff 3) 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket replaces a with 3 in ff''s body |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 10 3) 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; now DrRacket uses the laws of arithmetic |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 30 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 32 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Naturally, we can reuse the result of this computation in others:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) (ff 4) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (ff 3) 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket substitutes 4 for a in ff''s body |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 10 4) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (ff 3) 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket knows that ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29)  10  4)  ==  40
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 40 ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (ff 3) 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; now it uses the result of the above calculation |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 40 32)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 1280 ; because it is really just math |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In sum, DrRacket is basically just an incredibly fast algebra student; it knows
    all the laws of arithmetic and it is great at substitution. Even better, DrRacket
    cannot only determine the value of an expression; it can also show you how it
    does it. That is, it can show you step by step how to solve these algebra problems
    that ask you to determine the value of an expression.
  prefs: []
  type: TYPE_NORMAL
- en: Take a second look at the buttons that come with DrRacket. One of them looks
    like an “advance to next track” buttons on an audio player. If you click this
    button, the stepper window pops up and you can step through the evaluation of
    the program in the definitions area.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the definition of ff into the definitions area. Add (ff  ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  1))
    at the bottom. Now click the STEP. The stepper window will show up; [figure 11](#%28counter._%28figure._fig~3astepper%29%29)
    shows what it looks like in version 6.2 of the software. At this point, you can
    use the forward and backward arrows to see all the computation steps that DrRacket
    uses to determine the value of an expression. Watch how the stepper performs the
    same calculations as we do.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Yes, you could have used DrRacket to solve some of your algebra homework.
    Experiment with the various options that the stepper offers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/81f22b91880498eceeb6ff65efe91aee.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 11: The DrRacket stepper'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 21\. Use DrRacket’s stepper to evaluate (ff  (ff  1)) step by step.
    Also try ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  (ff  1)  (ff  1)).
    Does DrRacket’s stepper reuse the results of computations? [![image](../Images/6914259ead037688a1458bb727229ccd.jpg)](#%28counter._%28exercise._ex~3astepper1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you might think that you are back in an algebra course with all
    these computations involving uninteresting functions and numbers. Fortunately,
    this approach generalizes to all programs, including the interesting ones, in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by looking at functions that process strings. Recall some of the
    laws of string arithmetic:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "hello" "
    " "world") == "hello world" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "bye" ",
    " "world") == "bye, world" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Now suppose we define a function that creates the opening of a letter:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (opening first-name last-name)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "Dear
    " first-name ",")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'When you apply this function to two strings, you get a letter opening:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (opening "Matthew" "Fisler") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Dear Matthew," |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'More importantly, though, the laws of computing explain how DrRacket determines
    this result and how you can anticipate what DrRacket does:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (opening "Matthew" "Fisler") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ==  ; DrRacket substitutes "Matthew" for first-name |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "Dear
    " "Matthew" ",") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Dear Matthew," |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Since last-name does not occur in the definition of opening, replacing it with
    "Fisler" has no effect.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the book introduces more forms of data and operations on data.Eventually
    you will encounter imperative operations, which do not combine or extract values
    but modify them. To calculate with such operations, you will need to add some
    laws to those of arithmetic and substitution. In principle, though, the laws of
    arithmetic suffice to explain most of the programs in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 22\. Use DrRacket’s stepper on this program fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (distance-to-origin x y)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([sqrt](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqrt%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([sqr](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqr%29%29) x) ([sqr](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqr%29%29) y))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (distance-to-origin 3 4) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Does the explanation match your intuition? [![image](../Images/8dab6555abdbcdf9bcd737a1017827c2.jpg)](#%28counter._%28exercise._dr-step0%29%29)Exercise 23\.
    The first [1String](#%28tech._1string%29) in "hello world" is "h". How does the
    following function compute this result?
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (string-first s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([substring](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._substring%29%29) s 0 1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Use the stepper to confirm your ideas. [![image](../Images/3c3c8311f5483470ce75b23b6a33f893.jpg)](#%28counter._%28exercise._dr-step2%29%29)Exercise 24\.
    Here is the definition of ==>:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (==> x y)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) ([not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29) x) y))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Use the stepper to determine the value of (==>  #true  #false). [![image](../Images/22029e85ba3ed5ebd0cf8b2dad9e1c45.jpg)](#%28counter._%28exercise._dr-step4%29%29)Exercise 25\.
    Take a look at this attempt to solve [exercise 17](#%28counter._%28exercise._fun10%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (image-classify img)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) img) ([image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29) img))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      "tall"] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) img) ([image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29) img))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      "square"] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) img) ([image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29) img))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      "wide"])) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (image-classify ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 3 "solid" "red"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Does the stepping suggest how to fix this attempt? [![image](../Images/0423d0e6d7828e57947338ac88654367.jpg)](#%28counter._%28exercise._dr-step10%29%29)Exercise 26\.
    What do you expect as value of the following program:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (string-insert s i)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) ([substring](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._substring%29%29) s 0 i)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  "_" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([substring](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._substring%29%29) s i)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (string-insert "helloworld" 6) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Confirm your expectation with DrRacket and its stepper. [![image](../Images/ab0290a1c7afcf64397be409e7bf8d15.jpg)](#%28counter._%28exercise._dr-step10b%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 2.3Composing Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A program rarely consists of a single function definition. Typically, programs
    consist of a main definition and several other functions and turns the result
    of one function application into the input for another. In analogy to algebra,
    we call this way of defining functions composition, and we call these additional
    functions auxiliary functions or helper functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this program for filling in letter templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([require](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._require%29%29) 2htdp/batch-io)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (letter fst lst signature-name)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (opening fst) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     "\n\n" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (body fst lst) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     "\n\n" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (closing signature-name))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (opening fst)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "Dear
    " fst ",")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (body fst lst)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    "We have discovered that all people with the" "\n" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    "last name " lst " have won our lottery. So, " "\n" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    fst ", " "hurry and pick up your prize.")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (closing signature-name)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    "Sincerely," |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    "\n\n" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    signature-name |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    "\n")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It consists of four functions. The first one is the main function, which produces
    a complete letter from the first and last name of the addressee plus a signature.
    The main function refers to three auxiliary functions to produce the three pieces
    of the letter—<wbr>the opening, body, and signature—<wbr>and composes the results
    in the correct order with [string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29).Stop!
    Enter these definitions into DrRacket’s definitions area, click on RUN, and evaluate
    these expressions in the interactions area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (letter "Matthew" "Fisler" "Felleisen") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Dear Matthew,\n\nWe have discovered that ...\n" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (letter "Kathi" "Felleisen" "Findler") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Dear Kathi,\n\nWe have discovered that ...\n" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Note how the result is a long string that contains occurrences of "\n". These
    substrings represent the newline character within a string.If we were to print
    this string—<wbr>render it as text in a file or a console—<wbr>the lines would
    be broken at these places:Think of 'stdout as a [String](#%28tech._string%29)
    for now.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29) ''stdout
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (letter "Matthew" "Fisler" "Felleisen")) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Dear Matthew, &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; We have discovered that all people with the &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; last name Fisler have won our lottery. So, &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Matthew, hurry and pick up your prize. &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Sincerely, &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Felleisen &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ''stdout |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The [require](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._require%29%29)
    brings in [write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29),
    a function that can print a string to a file or console. [Programs](#%28part._sec~3aprogs%29)
    explains this concept in some more depth.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, when a problem refers to distinct tasks of computation, a program
    should consist of one function per task and a main function that puts it all together.
    We formulate this idea as a simple slogan:'
  prefs: []
  type: TYPE_NORMAL
- en: Define one function per task.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The advantage of following this slogan is that you get reasonably small functions,
    each of which is easy to comprehend, and whose composition is easy to understand.
    Once you learn to design functions, you will recognize that getting small functions
    to work correctly is much easier than doing so with large ones. Better yet, if
    you ever need to change a part of the program due to some change to the problem
    statement, it tends to be much easier to find the relevant parts when it is organized
    as a collection of small functions as opposed to a large, monolithic block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a small illustration of this point with a sample problem:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem The owner of a monopolistic movie theater in a small town has
    complete freedom in setting ticket prices. The more he charges, the fewer people
    can afford tickets. The less he charges, the more it costs to run a show because
    attendance goes up. In a recent experiment the owner determined a relationship
    between the price of a ticket and average attendance.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'At a price of $5.00 per ticket, 120 people attend a performance. For each 10-cent
    change in the ticket price, the average attendance changes by 15 people. That
    is, if the owner charges $5.10, some 105 people attend on the average; if the
    price goes down to $4.90, average attendance increases to 135\. Let us translate
    this idea into a mathematical formula:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![image](../Images/e79aca9560da581c26c6230bb5af9b67.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stop! Explain the minus sign before you proceed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unfortunately, the increased attendance also comes at an increased cost. Every
    performance comes at a fixed cost of $180 to the owner plus a variable cost of
    $0.04 per attendee.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The owner would like to know the exact relationship between profit and ticket
    price so that he can maximize his profit.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'While the task is clear, how to go about it is not. All we can say at this
    point is that several quantities depend on each other.When we are confronted with
    such a situation, it is best to tease out the various dependencies, one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem statement specifies how the number of attendees depends on the
    ticket price. Computing this number is clearly a separate task and thus deserves
    its own function definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (attendees ticket-price)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 120 ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) ticket-price 5.0) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 15 0.1))))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'The revenue is exclusively generated by the sale of tickets, meaning it is
    exactly the product of ticket price and number of attendees:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (revenue ticket-price)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) ticket-price (attendees ticket-price)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'The costs consist of two parts: a fixed part ($180) and a variable part that
    depends on the number of attendees. Given that the number of attendees is a function
    of the ticket price, a function for computing the cost of a show must also consume
    the ticket price so that it can re-use the attendees function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (cost ticket-price)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 180 ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 0.04 (attendees ticket-price))))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'Finally, profit is the difference between revenue and costs for some given
    ticket price:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (profit ticket-price)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) (revenue ticket-price)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      (cost ticket-price))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The BSL definition of profit directly follows the suggestion of the informal
    problem description.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These four functions are all there is to the computation of the profit, and
    we can now use the profit function to determine a good ticket price.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 27\. Our solution to the sample problem contains several constants
    in the middle of functions. As [One Program, Many Definitions](part_prologue.html#%28part._pro-many-def%29)
    already points out, it is best to give names to such constants so that future
    readers understand where these numbers come from. Collect all definitions in DrRacket’s
    definitions area and change them so that all magic numbers are refactored into
    constant definitions. [![image](../Images/84bfc0e0a58e85b73b22d13506618db1.jpg)](#%28counter._%28exercise._fun6-constant%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 28\. Determine the potential profit for these ticket prices: $1, $2,
    $3, $4, and $5\. Which price should the owner of the movie theater choose to maximize
    his profits? Determine the best ticket price to a dime. [![image](../Images/d94130b6c15b6913a26dab12ae9eb4cd.jpg)](#%28counter._%28exercise._fun6%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an alternative version of the same program, given as a single function
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (profit price)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 120
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 15 0.1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 5.0 price)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         price) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 180
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 0.04
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 120
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 15 0.1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 5.0 price)))))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Enter this definition into DrRacket and ensure that it produces the same results
    as the original version for $1, $2, $3, $4, and $5\. A single look should suffice
    to show how much more difficult it is to comprehend this one function compared
    to the above four.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 29\. After studying the costs of a show, the owner discovered several
    ways of lowering the cost. As a result of his improvements, he no longer has a
    fixed cost. He now simply pays $1.50 per attendee.
  prefs: []
  type: TYPE_NORMAL
- en: Modify both programs to reflect this change. When the programs are modified,
    test them again with ticket prices of $3, $4, and $5 and compare the results.
    [![image](../Images/8b00f11aaa3671e39705a3b5261d9d23.jpg)](#%28counter._%28exercise._fun7%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 2.4Global Constants
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As the Prologue already says, functions such as profit benefit from the use
    of global constants. Every programming language allows programmers to define constants.
    In BSL, such a definition has the following shape:'
  prefs: []
  type: TYPE_NORMAL
- en: write “([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)
    ”,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: write down the name,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: followed by a space and an expression, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: write down “)”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The name of a constant is a global variable while the definition is called
    a constant definition. We tend to call the expression in a constant definition
    (the) right-hand side (of the definition).Constant definitions introduce names
    for all forms of data: numbers, images, strings, and so on. Here are some simple
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; the current price of a movie ticket |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) CURRENT-PRICE 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; useful to compute the area of a disk: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ALMOST-PI 3.14)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; a blank line: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) NL "\n")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; an empty scene: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MT ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 100))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first two are numeric constants, the last two are a string and an image.
    By convention, we use upper-case letters for global constants, because it ensures
    that no matter how large the program is, the readers of our programs can easily
    distinguish such variables from others.All functions in a program may refer to
    these global variables. A reference to a variable is just like using the corresponding
    constants. The advantage of using variable names instead of constants is that
    a single edit of a constant definition affects all uses. For example, we may wish
    to add digits to ALMOST-PI or enlarge an empty scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ALMOST-PI 3.14159)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; an empty scene: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MT ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 200 800))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Most of our sample definitions employ literal constants on the right hand side,
    but the last one uses an expression. And indeed, a programmer can use arbitrary
    expressions to compute constants. Suppose a program needs to deal with an image
    of some size and its center:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH 100)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT 200)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MID-WIDTH ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) WIDTH 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MID-HEIGHT ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) HEIGHT 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It can use two definitions with literal constants on the right-hand side and
    two computed constants, that is, variables whose values are not just literal constants
    but the results of computing the value of an expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we state an imperative slogan:'
  prefs: []
  type: TYPE_NORMAL
- en: For every constant mentioned in a problem statement, introduce one constant
    definition.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 30\. Define constants for the price optimization program so that the
    price sensitivity of attendance (15 people for every 10 cents) becomes a computed
    constant. [![image](../Images/9a0cb5998942bd3fbb786dbd41814797.jpg)](#%28counter._%28exercise._constant1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 2.5Programs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You are ready to create simple programs. From a coding perspective, a program
    is just a bunch of function and constant definitions. Usually one function is
    singled out as the “main” function, and this main function tends to compose others.
    From the perspective of launching a program, however, there are two distinct kinds:'
  prefs: []
  type: TYPE_NORMAL
- en: a batch program consumes all of its inputs at once and computes its result.
    Its main function is the composition of auxiliary functions, which may refer to
    additional auxiliary functions, and so on. When we launch a batch program, the
    operating system calls the main function on its inputs and waits for the program’s
    output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an interactive program consumes some of its inputs, computes, produces some
    output, consumes more input, and so on. When an input shows up, we speak of an
    event, and we create interactive programs as event-driven programs. The main function
    of such an event-driven program uses an expression to describe which functions
    to call for which kinds of events. These functions are called event handlers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we launch an interactive program, the main function informs the operating
    system of this description. As soon as input events happen, the operating system
    calls the matching event handler. Similarly, the operating system knows from the
    description when and how to present the results of these function calls as output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This book focuses mostly on programs that interact via graphical user interfaces
    (GUI); there are other kinds of interactive programs, and you will get to know
    those as you continue to study computer science.
  prefs: []
  type: TYPE_NORMAL
- en: Batch Programs As mentioned, a batch program consumes all of its inputs at once
    and computes the result from these inputs. Its main function may expect the arguments
    themselves or the names of files from which to retrieve the inputs; similarly,
    it may just return the output or it may place it in a file.
  prefs: []
  type: TYPE_NORMAL
- en: Once programs are created, we want to use them. In DrRacket, we launch batch
    programs in the interactions area so that we can watch the program at work.
  prefs: []
  type: TYPE_NORMAL
- en: Programs are even more useful if they can retrieve the input from some file
    and deliver the output to some other file. The name batch program originated from
    the early days of computing when a program read an entire file (or a batch of
    several files) and placed the result in some other file(s), without any intervention
    after the launch. Conceptually, a batch program reads an entire file at once and
    produces the result file(s) all at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create such file-based batch programs with the 2htdp/batch-io library, which
    adds two functions to our vocabulary (among others):'
  prefs: []
  type: TYPE_NORMAL
- en: '[read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29),
    which reads the content of an entire file as a string, and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29),
    which creates a file from a given string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These functionsBefore you evaluate these expressions, save the definitions
    area in a file. write strings to files and read strings from them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29) "sample.dat" "212")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "sample.dat" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29) "sample.dat")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "212" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: After the first interaction the file named "sample.dat" contains
  prefs: []
  type: TYPE_NORMAL
- en: '|         212 |'
  prefs: []
  type: TYPE_TB
- en: The result of [write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29)
    is an acknowledgment that it has placed the string in the file. If the file already
    exists, it replaces its content with the given string; otherwise, it creates a
    file and makes the given string its content. The second interaction, ([read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29)  "sample.dat"),
    produces "212" because it turns the content of "sample.dat" into a [String](#%28tech._string%29).
  prefs: []
  type: TYPE_NORMAL
- en: The names 'stdout and 'stdin are short for standard output device and standard
    input device, respectively.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For historical and pragmatic reasons, [write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29)
    also accepts ''stdout, a special kind of token, as the first argument. It then
    displays the resulting file content in the current interactions area, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29) ''stdout "212\n")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 212 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ''stdout |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: By analogy, [read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29)
    accepts 'stdin in lieu of a file name and then reads input from the current interactions
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us illustrate the creation of a batch program with a simple example. Suppose
    we wish to create a program that convertsThis book is not about memorizing facts,
    but we do expect you to know where to find them. Do you know where to find out
    how temperatures are converted? a temperature measured on a Fahrenheit thermometer
    into a Celsius temperature. Don’t worry, this question isn’t a test about your
    physics knowledge; here is the conversion formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/9ab820869338e7440d9e566761feb55b.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Naturally in this formula f is the Fahrenheit temperature and C is the Celsius
    temperature. While this formula might be good enough for a pre-algebra text book,
    a mathematician or a programmer would write C(f) on the left side of the equation
    to remind readers that f is a given value and C is computed from f.
  prefs: []
  type: TYPE_NORMAL
- en: 'Translating this formula into BSL is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (C f)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 5/9 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) f 32)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Recall that 5/9 is a number, a rational fraction to be precise, and that C
    depends on the given f, which is what the function notation expresses.Launching
    this batch program in the interactions area works as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (C 32) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (C 212) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 100 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (C -40) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| -40 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'But suppose we wish to use this function as part of a program that reads the
    Fahrenheit temperature from a file, converts this number into a Celsius temperature,
    and then creates another file that contains the result.Once we have the conversion
    formula in BSL, creating the main function means composing C with existing primitive
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (convert in out)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29) out
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([number->string](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number-~3estring%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         (C |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([string->number](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3enumber%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29) in))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       "\n"))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We call the main function convert. It consumes two filenames: in for the file
    where the Fahrenheit temperature is found and out for where we want the Celsius
    result. A composition of five functions computes convert’s result. Let us step
    through convert’s body carefully:'
  prefs: []
  type: TYPE_NORMAL
- en: ([read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29)  in)
    retrieves the content of the named file as a string;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[string->number](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3enumber%29%29)
    turns this string into a number;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C interprets the number as a Fahrenheit temperature and converts it into a Celsius
    temperature;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[number->string](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number-~3estring%29%29)
    consumes this Celsius temperature and turns it into a string; and'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29)  out  [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    places this string into the file named out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This long list of steps might look overwhelming, and it doesn’t even include
    the [string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)
    part. Stop! Explain
  prefs: []
  type: TYPE_NORMAL
- en: ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) "\n")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In contrast, the average function composition in a pre-algebra course involves
    two functions, possibly three. Keep in mind, though, that programs accomplish
    a real-world purpose while exercises in algebra merely illustrate the idea of
    function composition.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we can experiment with convert. To start with, we use [write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29)
    to create an input file for convert:You can also create "sample.dat" with a file
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29) "sample.dat" "212")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "sample.dat" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (convert "sample.dat" ''stdout) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 100 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ''stdout |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (convert "sample.dat" "out.dat") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "out.dat" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29) "out.dat")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "100" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: For the first interaction, we use 'stdout so that we can view what convert outputs
    in DrRacket’s interactions area. For the second one, convert is given the name
    "out.dat". As expected, the call to convert returns this string; from the description
    of [write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29)
    we also know that it deposited a Fahrenheit temperature in the file. Here we read
    the content of this file with [read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29),
    but you could also view it with a text editor.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to running the batch program, it is also instructive to step through
    the computation. Make sure that the file "sample.dat" exists and contains just
    a number, then click the STEP button in DrRacket. Doing so opens another window
    in which you can peruse the computational process that the call to the main function
    of a batch program triggers. You will see that the process follows the above outline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 31\. Recall the letter program from [Composing Functions](#%28part._sec~3acomposing%29).
    Here is how to launch the program and have it write its output to the interactions
    area:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    ''stdout &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    (letter "Matthew" "Fisler" "Felleisen")) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Dear Matthew, &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; We have discovered that all people with the &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; last name Fisler have won our lottery. So, &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Matthew, hurry and pick up your prize. &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Sincerely, &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Felleisen &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ''stdout |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Of course, programs are useful because you can launch them for many different
    inputs. Run letter on three inputs of your choice.Here is a letter-writing batch
    program that reads names from three files and writes a letter to one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main in-fst in-lst in-signature out)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29) out
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               (letter ([read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29) in-fst)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                       ([read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29) in-lst)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                       ([read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29) in-signature))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The function consumes four strings: the first three are the names of input
    files and the last one serves as output file. It uses the first three to read
    one string each from the three named files, hands these strings to letter, and
    eventually writes the result of this function call into the file named by out,
    the fourth argument to main.'
  prefs: []
  type: TYPE_NORMAL
- en: Create appropriate files, launch main, and check whether it delivers the expected
    letter in given file. [![image](../Images/5e2b3a9b3e30f3017c9005bcb92e3c6c.jpg)](#%28counter._%28exercise._letter-writing%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Interactive Programs Batch programs are a staple of business uses of computers
    but the programs people encounter now are interactive. In this day and age, people
    mostly interact with desktop applications via a keyboard and a mouse. Furthermore,
    interactive programs can also react to computer-generated events, for example,
    clock ticks or the arrival of a message from some other computer.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 32\. Most people no longer use desktop computers to run applications
    but cell phones, tablets, and their cars’ information control screen. Soon people
    will use wearable computers in the form of intelligent glasses, clothes, and sports
    gear. In the somewhat more distant future, people may come with built-in bio computers
    that directly interact with body functions. Think of ten different forms of events
    that software applications on such computers will have to deal with. [![image](../Images/4ca264d76f48ff9bae22c492d8a24274.jpg)](#%28counter._%28exercise._cell%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this section is to introduce the mechanics of writing interactive
    BSL programs. Because many of the project-style examples in this book are interactive
    programs, we introduce the ideas slowly and carefully. You may wish to return
    to this section when you tackle some of the interactive programming projects;
    a second or third reading may clarify some of the advanced aspects of the mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: By itself, a raw computer is a useless piece of physical equipment. It is called
    hardware because you can touch it. This equipment becomes useful once you install
    software, that is, a suite of programs. Usually the first piece of software to
    be installed on a computer is an operating system. It has the task of managing
    the computer for you, including connected devices such as the monitor, the keyboard,
    the mouse, the speakers, and so on. The way it works is that when a user presses
    a key on the keyboard, the operating system runs a function that processes key
    strokes. We say that the key stroke is a key event, and the function is an event
    handler. In the same vein, the operating system runs an event handler for clock
    ticks, for mouse actions, and so on. Conversely, after an event handler is done
    with its work, the operating system may have to change the image on the screen,
    ring a bell, print a document, or perform a similar action. To accomplish these
    tasks, it also runs functions that translate the operating system’s data into
    sounds, images, actions on the printer, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Naturally, different programs have different needs. One program may interpret
    key strokes as signals to control a nuclear reactor; another passes them to a
    word processor. To make a general-purpose computer work on these radically different
    tasks, different programs install different event handlers. That is, a rocket
    launching program uses one kind of function to deal with clock ticks while an
    oven’s software uses a different kind.
  prefs: []
  type: TYPE_NORMAL
- en: Designing an interactive program requires a way to designate some function as
    the one that takes care of keyboard events, another function for dealing with
    clock ticks, a third one for presenting some data as an image, and so forth. It
    is the task of an interactive program’s main function to communicate these designations
    to the operating system, that is, the software platform on which the program is
    launched.
  prefs: []
  type: TYPE_NORMAL
- en: DrRacket is a small operating system, and BSL is one of its programming languages.
    The latter comes with the 2htdp/universe library, which provides [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29),
    a mechanism for telling the operating system which function deals with which event.
    In addition, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    keeps track of the state of the program. To this end, it comes with one required
    sub-expression, whose value becomes the initial state of the program. Otherwise
    [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    consists of one required clause and many optional clauses. The required [to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29)
    clause tells DrRacket how to render the state of the program, including the initial
    one. Each of the other, optional clauses tells the operating system that a certain
    function takes care of a certain event. Taking care of an event in BSL means that
    the function consumes the state of the program and a description of the event,
    and that it produces the next state of the program. We therefore speak of the
    current state of the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Terminology In a sense, a [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression describes how a program connects with a small segment of the world.
    This world might be a game that the program’s users play, an animation that the
    user watches, or a text editor that the user employs to manipulate some notes.
    Programming language researchers therefore often say that [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    is a description of a small world: its initial state, how states are transformed,
    how states are rendered, and how [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    may determine other attributes of the current state. In this spirit, we also speak
    of the state of the world and even call [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    programs world programs. End'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us study this idea step-by-step, starting with this definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (number->square s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) s "solid" "red"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The function consumes a positive number and produces solid red square of that
    size. After clicking RUN, experiment with the function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (number->square 5) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/0c5076a650c2bf5b9ea2ebd3125ac9b7.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (number->square 10) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/b3bc4ad76c2a391beda14cf8c43b074f.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (number->square 20) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/306fda547bf8e220fb6c12fbdb9617ce.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It behaves like a batch program, consuming a number and producing an image,
    which DrRacket renders for you.Now try the following [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression in the interactions area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) 100 [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) number->square])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'A separate window appears, and it displays a 100 x 100 red square. In addition,
    the DrRacket interactions area does not display another prompt; it is as if the
    program keeps running, and this is indeed the case. To stop the program, click
    on DrRacket’s STOP button or the window’s CLOSE button:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) 100 [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) number->square])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 100 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'When DrRacket stops the evaluation of a [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression, it returns the current state, which in this case is just the initial
    state: 100.Here is a more interesting [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) 100
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) number->square]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) [sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29) [zero?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._zero~3f%29%29)])
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression adds two optional clauses to the previous one: the [on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29)
    clause tells DrRacket how to deal with clock ticks and the [stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29)
    clause says when to stop the program. We read it as follows, starting with 100
    as the initial state:'
  prefs: []
  type: TYPE_NORMAL
- en: every time the clock ticks, subtract 1 from the current state;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: then check whether [zero?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._zero~3f%29%29)
    is true of the new state and if so, stop; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: every time an event handler returns a value, use number->square to render it
    as an image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now hit the return key and observe what happens. Eventually the evaluation
    of the expressions terminates and DrRacket displays 0.The [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression keeps track of the current state. Initially this state is 100. Every
    time the clock ticks, it calls the clock tick handler and gets a new state. Hence,
    the state of [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    changes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 100, 99, 98, ..., 2, 1, 0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When the state’s value becomes 0, the evaluation is done. For every other state—<wbr>from
    100 to 1—<wbr>[big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    translates the state into an image, using number->square as the [to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29)
    clause tells it to. Hence, the window displays a red square that shrinks from
    100 x 100 pixels to 1 x 1 pixel over 100 clock ticks.Let’s add a clause for dealing
    with key events. First, we need a function that consumes the current state and
    a string that describes the key event and that returns a new state:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (reset s ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   100) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This function throws away its arguments and returns 100, which is the initial
    state of the [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression we wish to modify. Second, we add an [on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29)
    clause to the [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) 100
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) number->square]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) [sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29) [zero?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._zero~3f%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) reset])
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stop! Explain what happens when you hit RETURN, count to 10, and finally press
    "a".
  prefs: []
  type: TYPE_NORMAL
- en: What you will see is that the red square shrinks at the rate of one pixel per
    clock tick. As soon as you press the "a" key though, the red square re-inflates
    to full size, because reset is called on the current length of the square and
    "a" and returns 100. This number becomes [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)’s
    new state and number->square renders it as a full-sized red square.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to understand the evaluation of [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expressions in general, let us look at a schematic one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) cw0
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) tock]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) ke-h]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[on-mouse](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-mouse%29%29) me-h]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) render]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29) end?]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression specifies three event handlers: tock, ke-h, and me-h. The last one
    is a mouse event handler, which consumes four inputs—<wbr>the current state, two
    coordinates, and a string, which represents the kind of mouse event—<wbr>and returns
    a new state.'
  prefs: []
  type: TYPE_NORMAL
- en: The evaluation of this [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression starts with cw0, which is usually an expression. DrRacket, our operating
    system, installs the value of cw0 as the current state. It uses render to translate
    the current state into an image, which is then displayed in a separate window.
    Indeed, render is the only means for a [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression to present data to the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how events are processed:'
  prefs: []
  type: TYPE_NORMAL
- en: Every time the clock ticks, DrRacket applies tock to [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)’s
    current state and receives a value in response; [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    treats this return value as the next current state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every time a key is pressed, DrRacket applies ke-h to [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)’s
    current state and a string that represents the key; for example, pressing the
    “a” key is represented with "a" and the left arrow key with "left". When ke-h
    returns a value, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    treats it as the next current state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every time a mouse enters the window, leaves it, moves, or is pressed, DrRacket
    applies me-h to [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)’s
    current state, the event’s x- and y-coordinates, and a string that represents
    the kind of mouse event that happened; for example, pressing a mouse’s button
    is represented with "button-down". When me-h returns a value, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    treats it as the next current state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All events are processed in order; if two events seem to happen at the same
    time, DrRacket acts as a tie-breaker and arranges them in some order.After an
    event is processed, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    uses both end? and render to check the current state:'
  prefs: []
  type: TYPE_NORMAL
- en: '(end?  cw) produces a Boolean value. If it is ##true, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    stops the computation immediately. Otherwise it proceeds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (render  cw) is expected to produce an image and [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    displays this image in a separate window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| current state |  | cw0 |  | cw1 |  | ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| event |  | e0 |  | e1 |  | ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| on clock tick |  | (tock  cw0) |  | (tock  cw1) |  | ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| on key stroke |  | (ke-h  cw0 e0) |  | (ke-h  cw1 e1) |  | ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| on mouse event |  | (me-h  cw0 e0 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |  | (me-h  cw1 e1 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |  | ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| its image |  | (render  cw0) |  | (render  cw1) |  | ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 12: How [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    works'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The table in [figure 12](#%28counter._%28figure._world-process%29%29) concisely
    summarizes this process. In the first row, it lists names for the current states.
    The second row enumerates names for the events that DrRacket encounters them:
    e0, e1, and so on. Each ei might be a clock tick, a key press, or a mouse event.
    The next three rows specify the result of dealing with the event:'
  prefs: []
  type: TYPE_NORMAL
- en: If e0 is a clock tick, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    evaluates (tock  cw0) to produce cw1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If e0 is a key event, (ke-h  cw0 e0) is evaluated and yields cw1. The handler
    must be applied to the event itself because, in general, programs are going to
    react to each key differently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If e0 is a mouse event, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    runs (me-h  cw0 e0 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    to get cw1. The call is a sketch because a mouse event e0 is really associated
    with several pieces of data—<wbr>its nature and its coordinates—<wbr>and we just
    wish to indicate that much.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, render turns the current state into an image, which is indicated by
    the last row. DrRacket displays these images in the separate window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The column below cw1 shows how cw2 is generated, depending what kind event
    e1 takes place.Let us interpret this table with the specific sequence of events:
    the user presses the “a” key, then the clock ticks, and finally the user presses
    uses the mouse to trigger a “button down” event at position (90,100). Then, in
    Racket notation,'
  prefs: []
  type: TYPE_NORMAL
- en: cw1 is the result of (ke-h  cw0  "a");
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: cw2 is the result of (tock  cw1); and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: cw3 is the result of (me-h  cw2  90  100  "button-down").
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can actually express these three steps as a sequence of three definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) cw1 (ke-h cw0 "a"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) cw2 (tock cw1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) cw3 (me-h cw2 "button-down" 90 100))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! How does [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    display each of these three states?Now let’s consider a sequence of three clock
    ticks. In that case,
  prefs: []
  type: TYPE_NORMAL
- en: cw1 is the result of (tock  cw0);
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: cw2 is the result of (tock  cw1); and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: cw3 is the result of (tock  cw2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Or, reformulated in BSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) cw1 (tock cw0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) cw2 (tock cw1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) cw3 (tock cw2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Indeed, we can also determine cw3 via a single expression:'
  prefs: []
  type: TYPE_NORMAL
- en: (tock (tock (tock cw0)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: to find out how [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    computes the state of the world after three clock ticks. Stop! Reformulate the
    first sequence of events as an expression.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) BACKGROUND ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 100))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) DOT ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 3 "solid" "red"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main y)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) y
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) [sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29) [zero?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._zero~3f%29%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) place-dot-at]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) stop]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (place-dot-at y)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) DOT 50 y BACKGROUND))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (stop y ke)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   0) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 13: A first interactive program'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In short, the sequence of events determines in which order [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    conceptually traverses the above table of possible states to arrive at the current
    state for each time slot. Of course, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    does not touch the current state; it merely safeguards it and passes it to event
    handlers and other functions when needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, it is straightforward to define a first interactive program. See
    [figure 13](#%28counter._%28figure._fig~3ainteractive%29%29). The program consists
    of two constant definitions followed by three function definitions: a main function
    launches a [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    interactive program; place-dot-at translates the current state into an image;
    and stop throws away its inputs and produces 0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking RUN, we can ask DrRacket to evaluate applications of these handler
    functions. This is one way to confirm their workings:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (place-dot-at 89) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/15a00a64aeed34637708e0d1939b3370.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (stop 89 "q") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Try now to understand how main reacts when you press a key.One way to
    find out whether your conjecture is correct, is to launch the main function on
    some reasonable number:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (main 90) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Take a deep breath. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: By now, you may feel that these first two chapters are overwhelming. They introduced
    so many new concepts, including a new language, its vocabulary, its meaning, its
    idioms, a tool for writing down texts in this vocabulary, running these so-called
    “programs,” and the inevitable question of how to create them when presented with
    a problem statement. To overcome this feeling, the next chapter takes a step back
    and explains how to design programs systematically from scratch, especially interactive
    programs. So take a breather and continue when ready.
  prefs: []
  type: TYPE_NORMAL
- en: 3How to Design Programs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first few chapters of this book show that learning to program requires some
    mastery of many concepts. On one hand, programming needs a language, a notation
    for communicating what we wish to compute. The languages for formulating programs
    are artificial constructions, though acquiring a programming language shares some
    elements with acquiring a natural language. Both come with vocabulary, grammar,
    and an understanding of what "phrases" mean.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, it is critical to learn how to get from a problem statement
    to a program. We need to determine what is relevant in the problem statement and
    what can be ignored. We need to tease out what the program consumes, what it produces,
    and how it relates inputs to outputs. We have to know, or find out, whether the
    chosen language and its libraries provide certain basic operations for the data
    that our program is to process. If not, we might have to develop auxiliary functions
    that implement these operations. Finally, once we have a program, we must check
    whether it actually performs the intended computation. And this might reveal all
    kinds of errors, which we need to be able to understand and fix.
  prefs: []
  type: TYPE_NORMAL
- en: All this sounds rather complex and you might wonder why we don’t just muddle
    our way through, experimenting here and there, leaving well enough alone when
    the results look decent. This approach to programming, often dubbed “garage programming,”
    is common and succeeds on many occasions; sometimes it is the launching pad for
    a start-up company. Nevertheless, the start-up cannot sell the results of the
    “garage effort” because only the original programmers and their friends can use
    them.
  prefs: []
  type: TYPE_NORMAL
- en: A good program comes with a short write-up that explains what it does, what
    inputs it expects, and what it produces. Ideally, it also comes with some assurance
    that it actually works. In the best circumstances, the program’s connection to
    the problem statement is evident so that a small change to the problem statement
    is easy to translate into a small change to the program. Software engineers call
    this a “programming product.”
  prefs: []
  type: TYPE_NORMAL
- en: All this extra work is necessary because programmers don’t create programs for
    themselves. Programmers write programs for other programmers to read, and on occasion,
    people run these programs to get work done.The word “other” also includes older
    versions of the programmer who usually cannot recall all the thinking that the
    younger version put into the production of the program. Most programs are large,
    complex collections of collaborating functions, and nobody can write all these
    functions in a day. Programmers join projects, write code, leave projects; others
    take over their programs and work on them. Another difficulty is that the programmer’s
    clients tend to change their mind about what problem they really want solved.
    They usually have it almost right, but more often than not, they get some details
    wrong. Worse, complex logical constructions such as programs almost always suffer
    from human errors; in short, programmers make mistakes. Eventually someone discovers
    these errors and programmers must fix them. They need to re-read the programs
    from a month ago, a year ago, or twenty years ago and change them.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 33\. Research the “year 2000” problem and what it meant for software
    developers. [![image](../Images/7089e25576e787c824f8e1464dab157d.jpg)](#%28counter._%28exercise._y2k%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we present a design recipe that integrates a step-by-step process
    with a way of organizing programs around problem data. For the readers who don’t
    like to stare at blank screens for a long time, this design recipe offers a way
    to make progress in a systematic manner. For those of you who teach others to
    design programs, the recipe is a device for diagnosing a novice’s difficulties.
    For others, our recipe might be something that they can apply to other areas,
    say medicine, journalism, or engineering. For those who wish to become real programmers,
    the design recipe also offers a way to understand and work on existing programs—<wbr>though
    not all programmers use a method like this design recipe to come up with programs.
    The rest of this chapter is dedicated to the first baby steps into the world of
    the design recipe; the following chapters and parts refine and expand the recipe
    in one way or another.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1Designing Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Information and Data The purpose of a program is to describe a computational
    process of working through information and producing new information. In this
    sense, a program is like the instructions a mathematics teacher gives to grade
    school students. Unlike a student, however, a program works with more than numbers;
    it calculates with navigation information, looks up a person’s address, turns
    on switches, or inspects the state of a video game. All this information comes
    from a part of the real world—<wbr>often called the program’s domain—<wbr>and
    the results of a program’s computation represents more information in this domain.
  prefs: []
  type: TYPE_NORMAL
- en: Information plays a central role in our description. Think of information as
    facts about the program’s domain. For a program that deals with a furniture catalog,
    a “table with five legs” or a “square table of two by two meters” are pieces of
    information. A game program deals with a different kind of domain, where “five”
    might refer to the number of pixels per clock tick that some objects travels on
    its way from one part of the canvas to another. Or, a payroll program is likely
    to deal with “five deductions.”
  prefs: []
  type: TYPE_NORMAL
- en: For a program to process information, it must turn it into some form of data
    in the programming language; then it processes the data; and once it is finished,
    it turns the resulting data into information again. An interactive program may
    even intermingle these steps, acquiring more information from the world as needed
    and delivering information in between.
  prefs: []
  type: TYPE_NORMAL
- en: We use BSL and DrRacket so that you do not have to worry about the translation
    of information into data. In DrRacket’s BSL you can apply a function directly
    to data and observe what it produces. As a result, we avoid the serious chicken-and-egg
    problem of writing functions that convert information into data and vice versa.
    For simple kinds of information, designing such program pieces is trivial; for
    anything other than simple information, you need to know about parsing, for example,
    and that immediately requires a lot of expertise in program design.
  prefs: []
  type: TYPE_NORMAL
- en: Software engineers use the slogan model-view-controller (MVC) for the way BSL
    and DrRacket separate data processing from parsing information into data and turning
    data into information. Indeed, it is now accepted wisdom that well-engineered
    software systems enforce this separation, even though most introductory books
    still co-mingle them. Thus, working with BSL and DrRacket allows you to focus
    on the design of the core of programs and, when you have enough experience with
    that, you can learn to design the information-data translation parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we use two pre-installed teachpacks to demonstrate the separation
    of data processing from parsing: 2htdp/batch-io and and 2htdp/universe. Starting
    with this chapter, we develop design recipes for batch and interactive programs
    to give you an idea of how complete programs are designed. Do keep in mind that
    the libraries of full-fledged programming languages offer many more contexts for
    complete programs, and that you will need to adapt the design recipes appropriately'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/862acca207963f3fdc0c2d96e7136f86.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 14: From information to data, and back'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Given the central role of information and data, program design must start with
    the connection between them. Specifically, we, the programmers, -must decide how
    to use our chosen programming language to represent the relevant pieces of information
    as data and how we should interpret data as information. [Figure 14](#%28counter._%28figure._fig~3adata-info%29%29)
    explains this idea with an abstract diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this idea concrete, let’s work through some examples. Suppose you are
    designing a program that consumes and produces information in the form of numbers.
    While choosing a representation is easy, an interpretation requires explaining
    what a number such as 42 denotes in the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: 42 may refer to the number of pixels from the top margin in the domain of images;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 42 may denote the number of pixels per clock tick that a simulation or game
    object moves;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 42 may mean a temperature, on the Fahrenheit, Celsius, or Kelvin scale for the
    domain of physics;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 42 may specify the size of some table if the domain of the program is a furniture
    catalog; or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 42 could just count the number of characters in a string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key is to know how to go from numbers as information to numbers as data
    and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Computing scientists use “class” to mean something like a “mathematical set.”
  prefs: []
  type: TYPE_NORMAL
- en: Since this knowledge is so important for everyone who reads the program, we
    often write it down in the form of comments, which we call data definitions. A
    data definition serves two purposes. First, it names a collection of data—<wbr>a
    class—<wbr>using a meaningful word. Second, it informs readers how to create elements
    of this class and how to decide whether some arbitrary piece of data belongs to
    the collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a data definition for one of the above examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Temperature is a [Number](#%28tech._number%29). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation represents Celsius degrees |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The first line introduces the name of the data collection, [Temperature](#%28tech._temperature%29),
    and tells us that the class consists of all [Number](#%28tech._number%29)s. So,
    for example, if we ask whether 102 is a temperature, you can respond with “yes”
    because 102 is a number and all numbers are temperatures. Similarly, if we ask
    whether "cold" is a [Temperature](#%28tech._temperature%29), you will say “no”
    because no string belongs to [Temperature](#%28tech._temperature%29). And, if
    we asked you to make up a sample [Temperature](#%28tech._temperature%29), you
    might come up with something like -400.
  prefs: []
  type: TYPE_NORMAL
- en: If you happen to know that the lowest possible temperature is approximately
    -274C, you may wonder whether it is possible to express this knowledge in a data
    definition. Since our data definitions are really just English descriptions of
    classes, you may indeed define the class of temperatures in a much more accurate
    manner than shown here. In this book, we use a stylized form of English for such
    data definitions, and the next chapter introduces the style for imposing constraints
    such as “larger than -274.”
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, you have encountered the names of four classes of data: [Number](#%28tech._number%29),
    [String](#%28tech._string%29), [Image](#%28tech._image%29), and [Boolean](#%28tech._boolean%29).
    With that, formulating a new data definition means nothing more than introducing
    a new name for an existing form of data, say, “temperature” for numbers. Even
    this limited knowledge, though, suffices to explain the outline of our design
    process.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Process Once you understand how to represent input information as data
    and to interpret output data as information, the design of an individual function
    proceeds according to a straightforward process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Express how you wish to represent information as data. A one-line comment suffices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ; We use numbers to represent centimeters.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Formulate data definitions, like the one for [Temperature](#%28tech._temperature%29)
    above for the classes of data you consider critical for the success of your program.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write down a signature, a purpose statement, and a function header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A function signature is a comment that tells the readers of your design how
    many inputs your function consumes, from what classes they are drawn, and what
    kind of data it produces. Here are three examples for functions that respectively
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'consume one [String](#%28tech._string%29) and produce a [Number](#%28tech._number%29):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ; [String](#%28tech._string%29) -> [Number](#%28tech._number%29)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'consume a [Temperature](#%28tech._temperature%29) and produce a [String](#%28tech._string%29):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ; [Temperature](#%28tech._temperature%29) -> [String](#%28tech._string%29)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: As this signature points out, introducing a data definition as an alias for
    an existing form of data makes it easy to read the intention behind signatures.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Nevertheless, we recommend to stay away from aliasing data definitions for now.
    A proliferation of such names can cause quite some confusion. It takes practice
    to balance the need for new names and the readability of programs, and there are
    more important ideas to understand for now.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'consume a [Number](#%28tech._number%29), a [String](#%28tech._string%29), and
    an [Image](#%28tech._image%29):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ; [Number](#%28tech._number%29)  [String](#%28tech._string%29)  [Image](#%28tech._image%29)
    -> [Image](#%28tech._image%29)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stop! What does this function produce?
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: A purpose statement is a BSL comment that summarizes the purpose of the function
    in a single line. If you are ever in doubt about a purpose statement, write down
    the shortest possible answer to the question
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: what does the function compute?
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Every reader of your program should understand what your functions compute without
    having to read the function itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A multi-function program should also come with a purpose statement. Indeed,
    good programmers write two purpose statements: one for the reader who may have
    to modify the code and another one for the person who wishes to use the program
    but not read it.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, a header is a simplistic function definition, also called a stub.
    Pick one parameter for each input data class in the signature; the body of the
    function can be any piece of data from the output class. The following three function
    headers match the above three signatures:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (f  a-string)  0)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (g  n)  "a")
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (h  num  str  img)  ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29)  100  100))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Our parameter names reflect what kind of data the parameter represents. Sometimes,
    you may wish to use names that suggest the purpose of the parameter.When you formulate
    a purpose statement, it is often useful to employ the parameter names to clarify
    what is computed. For example,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; [Number](#%28tech._number%29)  [String](#%28tech._string%29)  [Image](#%28tech._image%29)
    -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds s to img, |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; y pixels from the top and 10 from the left |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (add-image y s img)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 100))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: At this point, you can click the RUN button and experiment with the function.
    Of course, the result is always the same value, which makes these experiments
    quite boring.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Illustrate the signature and the purpose statement with some functional examples.
    To construct a functional example, pick one piece of data from each input class
    from the signature and determine what you expect back.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Suppose you are designing a function that computes the area of a square. Clearly
    this function consumes the length of the square’s side, and that is best represented
    with a (positive) number. Assuming you have done the first process step according
    to the recipe, you add the examples between the purpose statement and the header
    and get this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; [Number](#%28tech._number%29) -> [Number](#%28tech._number%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the area of a square with side len |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; given: 2, expect: 4 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; given: 7, expect: 49 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (area-of-square len) 0)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The next step is to take inventory, to understand what are the givens and what
    we need to compute.We owe the term “inventory” to Stephen Bloch. For the simple
    functions we are considering right now, we know that they are given data via parameters.
    While parameters are placeholders for values that we don’t know yet, we do know
    that it is from this unknown data that the function must compute its result. To
    remind ourselves of this fact, we replace the function’s body with a template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For now, the template contains just the parameters, so that the preceding example
    looks like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (area-of-square len)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) len [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The dots remind you that this isn’t a complete function, but a template, a suggestion
    for an organization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The templates of this section look boring. As soon as we introduce new forms
    of data, templates become interesting, too.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is now time to code. In general, to code means to program, though often in
    the narrowest possible way, namely, to write executable expressions and function
    definitions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To us, coding means to replace the body of the function with an expression
    that attempts to compute from the pieces in the template what the purpose statement
    promises. Here is the complete definition for area-of-square:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; [Number](#%28tech._number%29) -> [Number](#%28tech._number%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the area of a square with side len |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; given: 2, expect: 4 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; given: 7, expect: 49 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (area-of-square len)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([sqr](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqr%29%29) len))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Number](#%28tech._number%29)  [String](#%28tech._string%29)  [Image](#%28tech._image%29)
    -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds s to img, y pixels from top, 10 pixels to the left |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; given: |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;    5 for y, |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;    "hello" for s, and |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;    ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29)  100  100)
    for img |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; expected: |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;    ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29)  ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29)  "hello"  10  "red")  10  5  [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;    where ... is ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29)  100  100)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (add-image y s img)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) s 10 "red") 10 y img))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 15: The completion of design step 5'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To complete the add-image function takes a bit more work than that: see [figure 15](#%28counter._%28figure._fig~3adesign1%29%29).
    In particular, the function needs to turn the given string s into an image, which
    is then placed into the given scene.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last step of a proper design is to test the function on the examples that
    you worked out before. For now, testing works like this. Click the RUN button
    and enter function applications that match the examples in the interactions area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| > (area-of-square 2) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 4 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > (area-of-square 7) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 49 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'The results must match the output that you expect; you must inspect each result
    and make sure it is equal to what is written down in the example portion of the
    design. If the result doesn’t match the expected output, consider the following
    three possibilities:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You miscalculated and determined the wrong expected output for some of the examples.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, the function definition computes the wrong result. When this
    is the case, you have a logical error in your program, also known as a bug.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both the examples and the function definition are wrong.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When you do encounter a mismatch between expected results and actual values,
    we recommend that you first re-assure yourself that the expected results are correct.
    If so, assume that the mistake is in the function definition. Otherwise, fix the
    example and then run the tests again. If you are still encountering problems,
    you may have encountered the third, somewhat rare situation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.2Finger Exercises: Functions'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The first few of the following exercises are almost copies of those in [Functions](#%28part._sec~3afuncs%29),
    though where the latter use the word “define” the exercises below use the word
    “design.” What this difference means is that you should work through the design
    recipe to create these functions and your solutions should include all relevant
    pieces.
  prefs: []
  type: TYPE_NORMAL
- en: As the title of the section suggests, these exercises are practice exercises
    to help you internalize the process. Until the steps become second nature, never
    skip one, because doing so leads to easily avoidable errors. There is plenty of
    room left in programming for complicated errors; we have no need to waste our
    time on silly ones.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 34\. Design the function string-first, which extracts the first character
    from a non-empty string. Don’t worry about empty strings. [![image](../Images/6792fefb3df706efc4e014382283d0ef.jpg)](#%28counter._%28exercise._design1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 35\. Design the function string-last, which extracts the last character
    from a non-empty string. [![image](../Images/cf2967744c8b4f106de446d335aefa3a.jpg)](#%28counter._%28exercise._design2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 36\. Design the function image-area, which counts the number of pixels
    in a given image. [![image](../Images/dcde2d2e23ebce202c07439dd207a509.jpg)](#%28counter._%28exercise._design3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 37\. Design the function string-rest, which produces a string like
    the given one with the first character removed. [![image](../Images/e6bf9dd09848930e4a2d2066b33c642c.jpg)](#%28counter._%28exercise._design4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 38\. Design the function string-remove-last, which produces a string
    like the given one with the last character removed. [![image](../Images/0ca2b1a9c2d3581dccaf355b5fad3d1d.jpg)](#%28counter._%28exercise._design5%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 3.3Domain Knowledge
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It is natural to wonder what knowledge it takes to code up the body of a function.
    A little bit of reflection tells you that this step demands an appropriate grasp
    of the domain of the program. Indeed, there are two forms of such domain knowledge:'
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge from external domains such as mathematics, music, biology, civil engineering,
    art, etc. Because programmers cannot know all of the application domains of computing,
    they must be prepared to understand the language of a variety of application areas
    so that they can discuss problems with domain experts. This language is often
    that of mathematics, but in some cases, the programmers must learn a language
    as they work through problems with domain experts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Knowledge about the library functions in the chosen programming language. When
    your task is to translate a mathematical formula involving the tangent function,
    you need to know or guess that your chosen language comes with a function such
    as BSL’s [tan](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._tan%29%29).
    When your task involves graphics, you will benefit from understanding the possibilities
    of the 2htdp/image library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since you can never predict the area you will be working in, or which programming
    language you will have to use, it is imperative that you have a solid understanding
    of the full possibilities of whatever computer languages are around and suitable.
    Otherwise some domain expert with half-baked programming knowledge will take over
    your job.
  prefs: []
  type: TYPE_NORMAL
- en: You can recognize problems that demand domain knowledge from the data definitions
    that you work out. As long as the data definitions use classes that exist in the
    chosen programming language, the definition of the function body (and program)
    mostly relies on expertise in the domain. Later, when we introduce complex forms
    of data, the design of functions demands computer science knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: 3.4From Functions to Programs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Not all programs consist of a single function definition. Some require several
    functions, many also use constant definitions. No matter what, it is always important
    to design every function systematically, though global constants as well as auxiliary
    functions change the design process a bit.
  prefs: []
  type: TYPE_NORMAL
- en: When you have defined global constants, your functions may use them to compute
    results. To remind yourself of their existence, you may wish to add these constants
    to your templates; after all, they belong to the inventory of things that may
    contribute to the function definition.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-function programs come about because interactive programs automatically
    need functions that handle key and mouse events, functions that render the state
    as music, and possibly more. Even batch programs may require several different
    functions because they perform several separate tasks. Sometimes the problem statement
    itself suggests these tasks; other times you will discover the need for auxiliary
    functions as you are in the middle of designing some function.
  prefs: []
  type: TYPE_NORMAL
- en: 'For these reasons, we recommend keeping around a list of needed functions or
    a wish list.We owe the term “wish list” to John Stone. Each entry on a wish list
    should consist of three things: a meaningful name for the function, a signature,
    and a purpose statement. For the design of a batch program, put the main function
    on the wish list and start designing it. For the design of an interactive program,
    you can put the event handlers, the [stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29)
    function, and the scene-rendering function on the list. As long as the list isn’t
    empty, pick a wish and design the function. If you discover during the design
    that you need another function, put it on the list. When the list is empty, you
    are done.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.5On Testing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Testing quickly becomes a labor-intensive chore. While it is easy to run small
    programs in the interactions area, doing so requires a lot of mechanical labor
    and intricate inspections. As programmers grow their systems, they wish to conduct
    many tests. Soon this labor becomes overwhelming, and programmers start to neglect
    it. At the same time, testing is the first tool for discovering and preventing
    basic flaws. Sloppy testing quickly leads to buggy functions—<wbr>that is, functions
    with hidden problems—<wbr>and buggy functions retard projects, often in multiple
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, it is critical to mechanize tests instead of performing them manually.
    Like many programming languages, BSL includes a testing facility, and DrRacket
    is aware of this facility. To introduce this testing facility, we take a second
    look at the function that converts temperatures in Fahrenheit to Celsius temperatures
    from [Programs](#%28part._sec~3aprogs%29). Here is the definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](#%28tech._number%29) -> [Number](#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; converts Fahrenheit temperatures to Celsius |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; given 32, expect 0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; given 212, expect 100 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; given -40, expect -40 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (f2c f)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 5/9 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) f 32)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Testing the function’s examples calls for three computations and three comparisons
    between two numbers each. You can formulate these tests and add them to the definitions
    area in DrRacket:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (f2c -40) -40)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (f2c 32) 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (f2c 212) 100)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: When you now click the RUN button, you see a report from BSL that the program
    passed all three tests—<wbr>and you had nothing else to do.In addition to getting
    tests to run automatically, the [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    forms show another advantage when tests fail. To see how this works, change one
    of the above tests so that the result is wrong, for example
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (f2c -40) 40)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When you now click the RUN button, an additional window pops up. The window’s
    text explains that one of three tests failed. For the failed test, the window
    displays three pieces: the computed value, the result of the function call (-40);
    the expected value (40); and a hyperlink to the text of the failed test case.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](#%28tech._number%29) -> [Number](#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; converts Fahrenheit temperatures to Celsius temperatures |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (f2c -40) -40)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (f2c 32) 0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (f2c 212) 100)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (f2c f)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 5/9 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) f 32)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 16: Testing in BSL'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can place [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    specifications above or below the function definitions that they test. When you
    click RUN, DrRacket collects all [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    specifications and evaluates them after all function definitions have been added
    to the “vocabulary” of operations. The above figure shows how to exploit this
    freedom to combine the example and test step. Instead of writing down the examples
    as comments, you can translate them directly into tests. When you’re all done
    with the design of the function, clicking RUN performs the test. And if you ever
    change the function for some reason, the next click re-tests the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    also works for images. That is, you can test image-producing functions. Say you
    wish to design the function render, which places the image of a car, dubbed CAR,
    into a background scene, named BACKGROUND. For the design of this function, you
    may formulate the tests such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (render 50)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ![image](../Images/e34db3bd02e1b25abc185376eeb0933e.jpg)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (render 200)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ![image](../Images/7631a9e168bc8df66a82e7dab3343f1b.jpg)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Alternatively, you could write them like this:For additional ways of formulating
    tests, see [BSL Tests](#%28part._sec~3a1-2testing%29).
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (render 50)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) CAR 50 Y-CAR BACKGROUND))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (render 200)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) CAR 200 Y-CAR BACKGROUND))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This alternative approach helps you figure out how to express the function body
    and is therefore preferable. One way to develop such expressions is to experiment
    in the interactions area.
  prefs: []
  type: TYPE_NORMAL
- en: Because it is so useful to have DrRacket conduct the tests and not to check
    everything yourself manually, we immediately switch to this style of testing for
    the rest of the book. This form of testing is dubbed unit testing, and BSL’s unit
    testing framework is especially tuned for novice programmers. One day you will
    switch to some other programming language; one of your first tasks will be to
    figure out its unit testing framework.
  prefs: []
  type: TYPE_NORMAL
- en: 3.6Designing World Programs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While the previous chapter introduces the 2htdp/universe library in an ad hoc
    way, this section demonstrates how the design recipe also helps you create world
    programs systematically. It starts with a brief summary of the 2htdp/universe
    library based on data definitions and function signatures. Then it spells out
    the design recipe for world programs.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 17](#%28counter._.D.K._%28figure._fig~3aworld-signatures%29%29) presents
    the 2htdp/universe library in a schematic and simplified way. The teachpack expects
    that a programmer develops a data definition that represents the state of the
    world and a function render that knows how to create an image for every possible
    state of the world. Depending on the needs of the program, the programmer must
    then design functions that respond to clock ticks, key strokes, and mouse events.
    Finally, an interactive program may need to stop when its current world belongs
    to a sub-class of states; end? recognizes these final states.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; WorldState: a data definition for a class of data that |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; represents the state of the world (cw) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; render: WorldState -> Image |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; when needed, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    obtains the image of the current |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; state of the world by evaluating (render  cw) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; clock-tick-handler: WorldState -> WorldState |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; for each tick of the clock, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    obtains the next |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; state of the world from (clock-tick-handler  cw) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; key-stroke-handler: WorldState  String -> WorldState |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; for each key stroke, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    obtains the next state |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; from (key-stroke-handler  cw  ke) where ke is the key |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; stroke to obtain the new world state |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; mouse-event-handler: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   WorldState  Number  Number  String -> WorldState |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; for each mouse gesture, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    obtains the next state |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; from (mouse-event-handler  cw  x  y  me) where x and y are |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; the coordinates of the event and me is its description |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; end?: WorldState -> Boolean |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; when needed, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    evaluates (end?  cw) to determine |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; whether the program should stop |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 17: Signatures for interaction functions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Assuming that you have a rudimentary understanding of the workings of [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29),
    you can focus on the truly important problem of designing world programs. Let’s
    construct a concrete example for the following design recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a program that moves a car from left to right on the world
    canvas, three pixels per clock tick.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For this problem statement, it is easy to imagine scenes for the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/17111e8278c9a0e159565ee130bd3a9b.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '![image](../Images/cc80514f5d1943369af0aab419058aa8.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '![image](../Images/546ea9c5906105b41898670219eb80ba.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'In this book, we often refer to the domain of an interactive [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    program as a “world,” and we speak of designing “world programs.”The design recipe
    for world programs, like the one for functions, is a tool for systematically moving
    from a problem statement to a working program. It consists of three big steps
    and one small one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For all those properties of the world that remain the same over time and are
    needed to render it as an [Image](#%28tech._image%29), introduce constants. In
    BSL, we specify such constants via definitions. For the purpose of world programs,
    we distinguish between two kinds of constants:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: “Physical” constants describe general attributes of objects in the world, such
    as the speed or velocity of an object, its color, its height, its width, its radius,
    and so forth. Of course these constants don’t really refer to physical facts,
    but many are analogous to physical aspects of the real world.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the context of our sample problem, the radius of the car’s wheels and the
    distance between the wheels are such “physical” constants:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH-OF-WORLD 200)
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WHEEL-RADIUS 5)
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WHEEL-DISTANCE ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) WHEEL-RADIUS 5))
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Note how the second constant is computed from the first.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Graphical constants are images of objects in the world. The program composes
    them into images that represent the complete state of the world.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here are graphical constants for wheel images of our sample car:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WHEEL
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) WHEEL-RADIUS "solid" "black"))
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| We suggest you experiment in DrRacket’s interaction area to develop such
    graphical constants. |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) SPACE
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) WHEEL-RADIUS [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) "white"))
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) BOTH-WHEELS
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) WHEEL SPACE WHEEL))
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Graphical constants are usually computed, and the computations tend to involve
    physical constants and other images.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: It is good practice to annotate constant definitions with a comment that explains
    what they mean.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Those properties that change over time—<wbr>in reaction to clock ticks, key
    strokes, or mouse actions—<wbr>give rise to the current state of the world. Your
    task is to develop a data representation for all possible states of the world.
    The development results in a data definition, which comes with a comment that
    tells readers how to represent world information as data and how to interpret
    data as information about the world.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose simple forms of data to represent the state of the world.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For the running example, it is the car’s distance to the left margin that changes
    over time. While the distance to the right margin changes, too, it is obvious
    that we need only one or the other to create an image. A distance is measured
    in numbers, so the following is an adequate data definition:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; A WorldState is a [Number](#%28tech._number%29). |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation the number of pixels between |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; the left border of the scene and the car |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: An alternative is to count the number of clock ticks that have passed and to
    use this number as the state of the world. We leave this design variant as an
    exercise.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have a data representation for the state of the world, you need to
    design a number of functions so that you can form a valid [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To start with, you need a function that maps any given state into an image
    so that [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    can render the sequence of states as images:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ; render
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Next you need to decide which kind of events should change which aspects of
    the world state. Depending on your decisions, you need to design some or all of
    the following three functions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; clock-tick-handler |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; key-stroke-handler |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; mouse-event-handler |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Finally, if the problem statement suggests that the program should stop if the
    world has certain properties, you must design
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ; end?
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: For the generic signatures and purpose statements of these functions, see [figure 17](#%28counter._.D.K._%28figure._fig~3aworld-signatures%29%29).
    Adapt these generic purpose statements to the particular problems you solve, so
    that readers know what they compute.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In short, the desire to design an interactive program automatically creates
    several initial entries for your wish list. Work them off one by one and you get
    a complete world program.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let us work through this step for the sample program. While [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    dictates that we must design a rendering function, we still need to figure out
    whether we want any event handling functions. Since the car is supposed to move
    from left to right, we definitely need a function that deals with clock ticks.
    Thus, we get this wish list:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._.D.K._worldstate%29) -> [Image](#%28tech._image%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; places the image of the car x pixels from |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; the left margin of the BACKGROUND image |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render x)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   BACKGROUND) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [WorldState](#%28tech._.D.K._worldstate%29) -> [WorldState](#%28tech._.D.K._worldstate%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds 3 to x to move the car right |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (tock x)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   x) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Note how we tailored the purpose statements to the problem at hand, with an
    understanding of how [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    will use these functions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, you need a main function. Unlike all other functions, a main function
    for world programs doesn’t demand design or testing. Its sole reason for existing
    is that you can launch your world program conveniently from DrRacket’s interaction
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The one decision you must make concerns main’s arguments. For our sample problem,
    we opt to for one argument, the initial state of the world:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._.D.K._worldstate%29) -> [WorldState](#%28tech._.D.K._worldstate%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; launches the program from some initial state |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main ws)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) ws
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) tock]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) render]))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Hence, you can launch this interactive program with
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| > (main 13) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: to watch the car start at 13 pixels from the left margin. It will stop when
    you close [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)’s
    window. Remember that [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    returns the current state of the world when the evaluation stops.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Naturally, you don’t have to use the name “WorldState” for the class of data
    that represents the states of the world. Any name will do as long as you use it
    consistently for the signatures of the event handling functions. Also, you don’t
    have to use the names tock, render, or end?. You may name these functions whatever
    you like, as long as you use the same names when you write down the clauses of
    the [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression. Lastly, you may have noticed that you may list the clauses of a [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression in any order as long as you list the initial state first.
  prefs: []
  type: TYPE_NORMAL
- en: Let us now work through the rest of the program design process, using the design
    recipe for functions and other design concepts spelled out so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 39\. Good programmers ensure that an image such as CAR can be enlarged
    or reduced via a single change to a constant definition.Good programmers establish
    a single point of control for all aspects of their programs, not just the graphical
    constants. Several chapters deal with this issue. We started the development of
    our car image with a single plain definition:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WHEEL-RADIUS 5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The definition of WHEEL-DISTANCE is based on the wheel’s radius. Hence, changing
    WHEEL-RADIUS from 5 to 10 doubles of the car image. This kind of program organization
    is dubbed single point of control, and good design employs single point of control
    as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Develop your favorite image of an automobile so that WHEEL-RADIUS remains the
    single point of control. [![image](../Images/118b1b33184fa58ee1dace685e38b811.jpg)](#%28counter._.D.K._%28exercise._design6%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'The next entry on the wish list is the clock tick handling function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._.D.K._worldstate%29) -> [WorldState](#%28tech._.D.K._worldstate%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; moves the car by 3 pixels for every clock  tick |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (tock ws) ws)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Since the state of the world represents the distance between the left margin
    of the canvas and the car, and since the car moves at three pixels per clock tick,
    a concise purpose statement combines these two facts into one. This makes it also
    easy to create examples and to define the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._.D.K._worldstate%29) -> [WorldState](#%28tech._.D.K._worldstate%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; moves the car by 3 pixels for every clock  tick |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; examples: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   given: 20, expect 23 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   given: 78, expect 81 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (tock ws)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ws 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The last design step calls for tests to confirm that the examples work as expected.
    So we click the RUN button and test:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (tock 20) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 23 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (tock 78) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 81 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Since the results are as expected, the design of tock is finished.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 40\. Formulate the examples as BSL tests. [![image](../Images/a3a2ff872a1319e44823a5fadf61eaf3.jpg)](#%28counter._.D.K._%28exercise._car-test%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ws |  | its image |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| 50 |  | ![image](../Images/d002d161396557cc1279a289eb0c6fa1.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| 100 |  | ![image](../Images/1bab4fea342e1b2b45367fa1ab3de8fb.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| 150 |  | ![image](../Images/4b9a36cfb5151638bd29cd9b73eaa32f.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| 200 |  | ![image](../Images/3711b0deac414694b6259dc74344b1b4.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ws |  | an expression |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| 50 |  | ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) CAR 50 Y-CAR BACKGROUND)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| 100 |  | ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) CAR 100 Y-CAR BACKGROUND)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| 150 |  | ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) CAR 150 Y-CAR BACKGROUND)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| 200 |  | ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) CAR 200 Y-CAR BACKGROUND)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 18: Examples for a moving car program'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Our second entry on the wish list specifies a function that translates the
    state of the world into an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._.D.K._worldstate%29) -> [Image](#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; places the car into the BACKGROUND scene, |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; according to the given world state |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render ws)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   BACKGROUND) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: To make examples for a rendering function, we suggest arranging a table like
    the upper half of [figure 18](#%28counter._.D.K._%28figure._fig~3amoving-car%29%29).
    It lists the given world states and the desired scenes. For your first few rendering
    functions, you may just wish to draw these images by hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though this kind of image table is intuitive and explains what the running
    function is going to display—<wbr>a moving car—<wbr>it does not explain how the
    function creates this result. To get from here to there, we recommend writing
    down expressions that create the images in the table in the lower half of [figure 18](#%28counter._.D.K._%28figure._fig~3amoving-car%29%29).
    The capitalized names refer to the obvious constants: the image of a car, its
    fixed y-coordinate, and the background scene, which is currently empty.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This extended table suggests a pattern for the formula that goes into the body
    of the render function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._.D.K._worldstate%29) -> [Image](#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; places the car into the BACKGROUND scene, |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; according to the given world state |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render ws)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) CAR ws Y-CAR BACKGROUND))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: And that is mostly all there is to designing a simple world program.Exercise 41\.
    Finish the sample problem and get the program to run. That is, assuming that you
    have solved [exercise 39](#%28counter._.D.K._%28exercise._design6%29%29), define
    the constants BACKGROUND and Y-CAR. Then assemble all the function definitions,
    including their tests. When your program runs to your satisfaction, add a tree
    to the scenery. We used
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) tree
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([underlay/xy](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._underlay%2Fxy%29%29) ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 10 "solid" "green")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                9 15 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 2 20 "solid" "brown")))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: to create a tree-like shape. Also add a clause to the [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression that stops the animation when the car has disappeared on the right
    side. [![image](../Images/39104dc3e367199413998974945916ea.jpg)](#%28counter._.D.K._%28exercise._design8%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: After settling on a first data representation for world states, a careful programmer
    may have to revisit this fundamental design decision during the rest of the design
    process. For example, the data definition for the sample problem represents the
    car as a point. But (the image of) the car isn’t just a mathematical point without
    width and height. Hence, the interpretation statement—<wbr>the number of pixels
    from the left margin—<wbr>is an ambiguous statement. Does this statement measure
    the distance between the left margin and the left end of the car? Its center point?
    Or even its right end? We ignored this issue here and leave it to BSL’s image
    primitives to make the decision for us. If you don’t like the result, revisit
    the data definition above and modify it or its interpretation statement to adjust
    to your taste.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 42\. Modify the interpretation of the sample data definition so that
    a state denotes the x-coordinate of the right-most edge of the car. [![image](../Images/f47d4e1c7bae90bc16d91e824098bc0a.jpg)](#%28counter._.D.K._%28exercise._design9a%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 43\. Let’s work through the same problem statement with a time-based
    data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An AnimationState is a [Number](#%28tech._number%29). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation the number of clock ticks |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; since the animation started |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Like the original data definition, this one also equates the states of the world
    with the class of numbers. Its interpretation, however, explains that the number
    means something entirely different.
  prefs: []
  type: TYPE_NORMAL
- en: Design functions tock and render and develop a [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression so that you get once again an animation of a car traveling from left
    to right across the world’s canvas.
  prefs: []
  type: TYPE_NORMAL
- en: 'How do you think this program relates to [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29)
    from [Prologue: How to Program](part_prologue.html)?'
  prefs: []
  type: TYPE_NORMAL
- en: Use the data definition to design a program that moves the car according to
    a sine wave. Don’t try to drive like that. [![image](../Images/df0b805b65349d487c8bf7d6abe94d04.jpg)](#%28counter._.D.K._%28exercise._design9%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: We end the section with an illustration of mouse event handling, which also
    illustrates the advantages that a separation of view and model provide.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with mouse movements is occasionally tricky because it isn’t exactly
    what it seems to be. For a first idea of why that is, read [On Mice and Keys](../notes/notes/note_mice-and-chars.html).
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Suppose we wish to allow people to move the car through “hyperspace:”
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a program that moves a car across the world canvas, from
    left to right, at the rate of three pixels per clock tick. If the mouse is clicked
    anywhere on the canvas, the car is placed at the x-coordinate of that point.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The bold part is the addition to the sample problem from above.When we are
    confronted with a modified problem, we use the design process to guide us to the
    necessary changes. If used properly, this process naturally determines what we
    need to add to our existing program to cope with the addition to the problem statement.
    So here we go:'
  prefs: []
  type: TYPE_NORMAL
- en: There are no new properties, meaning we do not need new constants.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The program is still concerned with just one property that changes over time,
    the x-coordinate of the car. Hence the data representation suffices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The revised problem statement calls for a mouse event handler, without giving
    up on the clock-based movement of the car. Hence, we state an appropriate wish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._.D.K._worldstate%29)  [Number](#%28tech._number%29)  [Number](#%28tech._number%29)  [String](#%28tech._string%29)
    -> [WorldState](#%28tech._.D.K._worldstate%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; places the car at the x-coordinate |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if the given me is "button-down" |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (hyper x-coordinate x-mouse y-mouse me)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   x-coordinate) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'Lastly, we need to modify main to take care of mouse events. All this requires
    is the addition of an [on-mouse](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-mouse%29%29)
    clause that defers to the new entry on our wish list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main ws)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) ws
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) tock]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      [[on-mouse](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-mouse%29%29) hyper]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) render]))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: After all, the modified problem calls for dealing with mouse clicks and everything
    else remains the same.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The rest is a mere matter of designing one more function, and for that we use
    the design recipe for functions.An entry on the wish list covers the first two
    steps of the design recipe for functions. Hence, our next step is to develop some
    functional examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._.D.K._worldstate%29)  [Number](#%28tech._number%29)  [Number](#%28tech._number%29)  [String](#%28tech._string%29)
    -> [WorldState](#%28tech._.D.K._worldstate%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; places the car at the x-coordinate |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if the given me is "button-down" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; given: 21  10  20  "enter" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; wanted: 21 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; given: 42  10  20  "button-down" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; wanted: 10 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; given: 42  10  20  "move" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; wanted: 42 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (hyper x-coordinate x-mouse y-mouse me)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   x-coordinate) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The examples say that if the string argument is equal to "button-down", the
    function returns x-mouse; otherwise it returns x-position-of-car.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 44\. Formulate the examples as BSL tests. Click RUN and watch them
    fail. [![image](../Images/d453a96f4df47a88b8e095f7f03df2c2.jpg)](#%28counter._.D.K._%28exercise._car-test-again%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete the function definition, we must appeal to your fond memories from
    [Prologue: How to Program](part_prologue.html),In the next chapter, we explain
    designing with [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    in detail. specifically memories about the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)itional
    form. Using [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29),
    hyper is a two-line definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._.D.K._worldstate%29)  [Number](#%28tech._number%29)  [Number](#%28tech._number%29)  [String](#%28tech._string%29)
    -> [WorldState](#%28tech._.D.K._worldstate%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; places the car at the x-coordinate |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if the given me is "button-down" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (hyper x-position-of-car x-mouse y-mouse me)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "button-down" me) x-mouse]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) x-position-of-car]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If you solved [exercise 44](#%28counter._.D.K._%28exercise._car-test-again%29%29),
    re-run the program and watch all tests succeed. Assuming the tests do succeed,
    evaluate
  prefs: []
  type: TYPE_NORMAL
- en: (main 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: in DrRacket’s interactions area and transport your car through hyperspace.
  prefs: []
  type: TYPE_NORMAL
- en: You may wonder why this program modification is so straightforward. There are
    really two reasons. First, this book and its software strictly separate the data
    that a program tracks—<wbr>the model—<wbr>and the image that it shows—<wbr>the
    view. In particular, functions that deal with events have nothing to do with how
    the state is rendered. If we wish to modify how a state is rendered, we can focus
    on the function specified in a [to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29)
    clause. Second, the design recipes for programs and functions organize programs
    in the right way. If anything changes in a problem statement, following the design
    recipe a second time naturally points out where the original problem solution
    has to change. While this may look obvious for the simple kind of problems we
    are dealing with now, it is critical for the kind of problems that programmers
    encounter in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: 3.7Virtual Pet Worlds
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This exercise section introduces the first two elements of a virtual pet game.
    It starts with just a display of a cat that keeps walking across the canvas. Of
    course, all the walking makes the cat unhappy and its unhappiness shows. Like
    all pets, you can try petting, which helps some, or you can try feeding, which
    helps a lot more.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let’s start with an image of our favorite cat:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) cat1 ![](../Images/7f672dabcc1a02ee83dd63968b35fb97.jpg))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Copy the cat image and paste it into DrRacket, then give the image a name with
    [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29),
    just like above.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 45\. Design a “virtual cat” world program that continuously moves the
    cat from left to right. Let’s call it cat-prog and let’s assume it consumes the
    starting position of the cat. Furthermore, make the cat move three pixels per
    clock tick. Whenever the cat disappears on the right, it re-appears on the left.
    You may wish to read up on the [modulo](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._modulo%29%29)
    function. [![image](../Images/3d1b71b530f0d99b1e09b246bf5aa8b8.jpg)](#%28counter._%28exercise._design12%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 46\. Improve the cat animation with a slightly different image:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) cat2 ![](../Images/204744e28442bfe704d4efaa88ffa74a.jpg))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Adjust the rendering function from [exercise 45](#%28counter._%28exercise._design12%29%29)
    so that it uses one cat image or the other based on whether x-coordinate is odd.
    Read up on [odd?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._odd~3f%29%29)
    in the help desk, and use a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression to select cat images. [![image](../Images/c932ad5c3a17ceb15b6a8af1f3005099.jpg)](#%28counter._%28exercise._design13%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 47\. Design a world program that maintains and displays a “happiness
    gauge.” Let’s call it gauge-prog, and let’s agree that the program consumes the
    maximum level of happiness. The gauge display starts with the maximum score, and
    with each clock tick, happiness decreases by -0.1; it never falls below 0, the
    minimum happiness score. Every time the down arrow key is pressed, happiness increases
    by 1/5; every time the up arrow is pressed, happiness jumps by 1/3.
  prefs: []
  type: TYPE_NORMAL
- en: To show the level of happiness, we use a scene with a solid, red rectangle with
    a black frame. For a happiness level of 0, the red bar should be gone; for the
    maximum happiness level of 100, the bar should go all the way across the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Note When you know enough, we will explain how to combine the gauge program
    with the solution of [exercise 45](#%28counter._%28exercise._design12%29%29).
    Then we will be able to help the cat because as long as you ignore it, it becomes
    less happy. If you pet the cat, it becomes happier. If you feed the cat, it becomes
    much, much happier. So you can see why you want to know a lot more about designing
    world programs than these first three chapters can tell you. [![image](../Images/6cdb90ec59c344cb2b8c6044c3da3ed9.jpg)](#%28counter._%28exercise._design14%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 4Intervals, Enumerations, Itemizations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the moment, you have four choices to represent information as data: numbers,
    strings, images, and Boolean values. For many problems this is enough, but there
    are many more for which these four collections of data in BSL (or other programming
    languages) don’t suffice. Real designers need additional ways of representing
    information as data.'
  prefs: []
  type: TYPE_NORMAL
- en: At a minimum, good programmers must learn to design programs with restrictions
    on these built-in collections. One way to restrict is to enumerate a bunch of
    elements from a collection and to say that these are the only ones that are going
    to be used for some problem. Enumerating elements works only when there is a finite
    number of them. To accommodate collections with “infinitely” many elements, we
    introduce intervals, which are collections of elements that satisfy a specific
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Infinite may just mean “so large that enumerating the elements is entirely impractical.”
  prefs: []
  type: TYPE_NORMAL
- en: Defining enumerations and intervals means distinguishing among different kinds
    of elements. To distinguish in code requires conditional functions, that is, functions
    that choose different ways of computing results depending on the value of some
    argument. Both [Many Ways to Compute](part_prologue.html#%28part._pro-cond%29)
    and [Mixing It Up with Booleans](#%28part._sec~3aboolean-if%29) illustrate with
    examples how to write such functions. Neither section uses design, however. Both
    just present some new construct in your favorite programming language (that’s
    BSL), and some examples on how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we introduce enumerations and intervals and discuss a general
    design strategy for these forms of input data. We start with a second look at
    the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression. Then we go through three different kinds of data descriptions: enumerations,
    intervals, and itemizations. An enumeration lists every single piece of data that
    belongs to it, while an interval specifies a range of data in one statement. The
    last one, itemizations, mixes the clauses of the first two, specifying ranges
    in one clause of its definition, and specific pieces of data in another. The chapter
    ends with a section on the general design strategy for such situations.'
  prefs: []
  type: TYPE_NORMAL
- en: 4.1Programming with Conditionals
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Recall the brief introduction to conditional expressions in [Prologue: How
    to Program](part_prologue.html). Since [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    is the most complicated expression form in this book, let us take a close look
    at its general shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [ConditionExpression1 ResultExpression1] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [ConditionExpression2 ResultExpression2] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [....](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._........%29%29) Brackets
    make [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    lines stand out. It is fine to use ( ... ) in place of [ ... ]. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [ConditionExpressionN ResultExpressionN]) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'A [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression starts with (cond, its keyword, and ends in ). Following the keyword,
    a programmer writes as many [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    lines as needed; each [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line consists of two expressions, enclosed in opening and closing brackets: [
    and ].'
  prefs: []
  type: TYPE_NORMAL
- en: A [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line is also known as a cond clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a function definition that uses a conditional expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (next traffic-light-state)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "red" traffic-light-state) "green"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "green" traffic-light-state) "yellow"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "yellow" traffic-light-state) "red"]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Like the mathematical example in [Prologue: How to Program](part_prologue.html),
    this example illustrates the convenience of using [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expressions. In many problem contexts, a function must distinguish several different
    situations. With a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression, you can use one line per possibility and thus remind the reader of
    the code of the different situations from the problem statement.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A note on pragmatics: Contrast [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expressions with [if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)
    expressions from [Mixing It Up with Booleans](#%28part._sec~3aboolean-if%29).
    The latter distinguish one situation from all others. As such, [if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)
    expressions are much less suited for multi-situation contexts; they are best used
    when all we wish to say is “one or the other.” We therefore always use [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    for situations when we wish to remind the reader of our code that some distinct
    situations come directly from data definitions. For other pieces of code, we use
    whatever construct is most convenient.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the conditions get too complex in a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression, you occasionally wish to say something like "in all other cases."
    For these kinds of problems, [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expressions permit the use of the [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    keyword for the very last [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [ConditionExpression1 ResultExpression1] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [ConditionExpression2 ResultExpression2] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [....](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._........%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) DefaultResultExpression])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If you make the mistake of using [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    in some other [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line, BSL in DrRacket signals an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) x 0) 10]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) 20]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) x 10) 30])
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| cond: found an else clause that isn''t the last clause in its cond expression
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'That is, BSL rejects grammatically incorrect phrases because it makes no sense
    to figure out what such a phrase might mean.Imagine designing a function that,
    as part of a game-playing program, computes some award at the end of the game.
    Here is its header:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A PositiveNumber is a [Number](#%28tech._number%29) greater or equal to
    0. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [PositiveNumber](#%28tech._positivenumber%29) -> [String](#%28tech._string%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the reward level from the given score s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'And here are two variants for a side-by-side comparison:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (reward s)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 s 10)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      "bronze"] &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 10 s)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) s 20))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      "silver"] &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 20 s)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      "gold"])) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (reward s)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 s 10)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      "bronze"] &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 10 s)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) s 20))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      "silver"] &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      "gold"])) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The variant on the left uses a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    with three full-fledged conditions; on the right, the function comes with an [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    clause. To formulate the last condition for the function on the left, you must
    calculate that ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29)  20  s)
    holds because
  prefs: []
  type: TYPE_NORMAL
- en: s is in [PositiveNumber](#%28tech._positivenumber%29) and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29)  0  s  10)
    is #false'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)  ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29)  10  s)  ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29)  s  20))
    evaluates to #false as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the calculation looks simple in this case, it is easy to make small mistakes
    and to introduce bugs into your program. It is therefore better to formulate the
    function definition as shown on the right, if you know that you want the exact
    opposite—<wbr>called the complement—<wbr>of all previous conditions in a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: 4.2Computing Conditionally
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'From reading the [Many Ways to Compute](part_prologue.html#%28part._pro-cond%29)
    and [Mixing It Up with Booleans](#%28part._sec~3aboolean-if%29), you roughly know
    how DrRacket evaluates conditional expressions. Let us go over the idea a bit
    more precisely for [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expressions. Take another look at this definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (reward s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 s 10) "bronze"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 10 s) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) s 20)) "silver"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This function consumes a numeric score—<wbr>a positive number—<wbr>and produces
    a color.
  prefs: []
  type: TYPE_NORMAL
- en: Just looking at the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression you cannot predict which of the three [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses is going to be used. And that is the point of a function. The function
    deals with many different inputs, for example, 2, 3, 7, 18, 29. For each of these
    inputs, it may have to proceed in a different manner. Differentiating among the
    different classes of inputs is the purpose of the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: Take for example
  prefs: []
  type: TYPE_NORMAL
- en: (reward 3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You know that DrRacket replaces function applications with the function’s body
    after substituting the argument for the parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 3 10) "bronze"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 10 3) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 3 20)) "silver"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'At this point, DrRacket evaluates one condition at a time. For the first one
    to evaluate to #true, it continues with the result expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (reward 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 3 10) "bronze"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 10 3) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 3 20)) "silver"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#true "bronze"] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 10 3) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 3 20)) "silver"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "bronze" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In this specific example, the first condition evaluates to #true because 0
    is less than 3 and 3 is less than 10.Here is a second example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (reward 21) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 21 10) "bronze"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 10 21) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 21 20)) "silver"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#false "bronze"] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 10 21) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 21 20)) "silver"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 10 21) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 21 20)) "silver"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note how the first condition evaluated to #false this time, and as mentioned
    in [Many Ways to Compute](part_prologue.html#%28part._pro-cond%29) the entire
    [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause is dropped. The rest of the calculation proceeds as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 10 21) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 21 20)) "silver"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) #true ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 21 20)) "silver"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) #true #false) "silver"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#false "silver"] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) "gold"])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == "gold" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Like the first condition, the second one also evaluates to #false and thus
    the calculation proceeds to the third [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line. The [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    tells DrRacket to replace the entire [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression with the answer from this clause.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 48\. Enter the definition of reward followed by (reward  18) into the
    definitions area of DrRacket and use the stepper to find out how DrRacket evaluates
    applications of the function. [![image](../Images/b92bbeaa995985abfa5a64f3e9849ee9.jpg)](#%28counter._%28exercise._cond1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 49\. A [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression is really just an expression and may therefore show up in the middle
    of another expression:'
  prefs: []
  type: TYPE_NORMAL
- en: ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 200 ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29) [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) y 200) 0] [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) y]))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use the stepper to evaluate the expression for y as 100 and 210.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH  100)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT  60)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MTSCN  ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ROCKET ![](../Images/d5b6d184e67a4958fea022ec2ddb1b4e.jpg))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ROCKET-CENTER-TO-TOP
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ROCKET) 2)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (create-rocket-scene.v5 h)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) h ROCKET-CENTER-TO-TOP)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 50 h MTSCN)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) h ROCKET-CENTER-TO-TOP)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 50 ROCKET-CENTER-TO-TOP MTSCN)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 19: Recall from [One Program, Many Definitions](part_prologue.html#%28part._pro-many-def%29)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Nesting [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expressions can eliminate common expressions. Consider the function for launching
    a rocket, repeated in [figure 19](#%28counter._%28figure._fig~3av5-from-prologue%29%29).
    As you can see, both branches of the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression have the shape
  prefs: []
  type: TYPE_NORMAL
- en: ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET X [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) MTSCN)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: with [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    indicating where they differ.
  prefs: []
  type: TYPE_NORMAL
- en: Reformulate create-rocket-scene.v5 to use a nested expression; the resulting
    function mentions [place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29)
    only once. [![image](../Images/25c45000bd2af1d1e16e3b0436133286.jpg)](#%28counter._%28exercise._cond1-nested%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 4.3Enumerations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Not all strings represent mouse events. If you looked in HelpDesk when the
    last section introduced the [on-mouse](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-mouse%29%29)
    clause for [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29),
    you found out that only six strings are used to notify programs of mouse events:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A MouseEvt is one of these [String](#%28tech._string%29)s: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "button-down" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "button-up" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "drag" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "move" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "enter" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "leave" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The interpretation of these strings is quite obvious. One of the first two
    strings shows up when the computer user clicks the mouse button or releases it.
    In contrast, the third and fourth are about moving the mouse and possibly holding
    down the mouse button at the same time. Finally, the last two strings represent
    the events of a mouse moving over the edge of the canvas: either going into the
    canvas from the outside or exiting the canvas.More importantly, the data definition
    for representing mouse events as strings looks quite different from the data definitions
    we have seen so far. It is called an enumeration, and it is a data representation
    in which every possibility is listed. It should not come as a surprise that enumerations
    are common. Here is a simple one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A TrafficLight is one of the following [String](#%28tech._string%29)s:
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "red" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "green" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "yellow" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation the three strings represent the three |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; possible states that a traffic light may assume |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It is a simplisticWe call it “simplistic” because it does not include the "off"
    state, the "blinking red" state, or the "blinking yellow" state. representation
    of the states that a traffic light can take on. Unlike others, this data definition
    also uses a slightly different phrase to explain what the term [TrafficLight](#%28tech._trafficlight%29)
    means but this is an inessential difference.Programming with enumerations is mostly
    straightforward. When a function’s input is a class of data whose description
    spells out its elements on a case-by-case basis, the function should distinguish
    just those cases and compute the result on a per-case basis. For example, if you
    wanted to define a function that computes the next state of a traffic light, given
    the current state as an element of [TrafficLight](#%28tech._trafficlight%29),
    you would come up with a definition like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [TrafficLight](#%28tech._trafficlight%29) -> [TrafficLight](#%28tech._trafficlight%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; yields the next state given current state s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (traffic-light-next "red") "green")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (traffic-light-next s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "red" s) "green"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "green" s) "yellow"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "yellow" s) "red"]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Because the data definition for [TrafficLight](#%28tech._trafficlight%29) consists
    of three distinct elements, the traffic-light-next function naturally distinguishes
    between three different cases. For each case, the result expression is just another
    string, the one that corresponds to the next case.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 50\. If you copy and paste the above function definition into the definitions
    area of DrRacket and click RUN, DrRacket highlights two of the three [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    lines. This coloring tells you that your test cases do not cover the full [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)itional.
    Add enough tests to make DrRacket happy. [![image](../Images/6fffda10f66605116407dfbbe844fa05.jpg)](#%28counter._%28exercise._cond2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 51\. Design a [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    program that simulates a traffic light for a given duration. The program renders
    the state of a traffic light as a solid circle of the appropriate color, and it
    changes state on every clock tick. What is the most appropriate initial state?
    Ask your engineering friends. [![image](../Images/0d140ff218624b17a1646ba446b24719.jpg)](#%28counter._%28exercise._cond3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: The main idea of an enumeration is that it defines a collection of data as a
    finite number of pieces of data. Each item explicitly spells out which piece of
    data belongs to the class of data that we are defining. Usually, the piece of
    data is just shown as is; on some occasions, the item of an enumeration is an
    English sentence that describes a finite number of elements of pieces of data
    with a single phrase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an important example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A 1String is a [String](#%28tech._string%29) of length 1, |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; including |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "\\" (the backslash), |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  " " (the space bar), |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "\t" (tab), |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "\r" (return), and |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "\b" (backspace). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation represents keys on the keyboard |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: You know that such a data definition is proper if you can describe all of its
    elements with a BSL test. In the case of [1String](#%28tech._1string%29), you
    can find out whether some string s belongs to the collection with
  prefs: []
  type: TYPE_NORMAL
- en: ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) s) 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'An alternative way to check that you have succeeded is to enumerate all the
    members of the collection of data that you wish to describe:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A 1String is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "q" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "w" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "e" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "r" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "t" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "y" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "\t" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "\r" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "\b" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If you look at your keyboard, you find ←, ↑, and similar labels. Our chosen
    programming language, BSL uses its own data definition to represent this information.
    Here is an excerpt:You know where to find the full definition.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A KeyEvent is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [1String](#%28tech._1string%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "left" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "right" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "up" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "down" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first item in this enumeration describes the same bunch of strings that
    [1String](#%28tech._1string%29) describes. The clauses that follow enumerate strings
    for special key events, such as pressing one of the four arrow keys or releasing
    a key.At this point, we can actually design a key event handler systematically.
    Here is a sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._worldstate%29)  [KeyEvent](#%28tech._keyevent%29)
    -> ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (handle-key-events w ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) ke) 1) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "left" ke) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "right" ke) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "up" ke) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "down" ke) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This event handling function uses a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression, and for each line in the enumeration of the data definition, there
    is one [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line. The condition in the first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line identifies the [KeyEvent](#%28tech._keyevent%29)s identified in the first
    line of the enumeration, the second [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause corresponds to the second data enumeration line, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Position is a [Number](#%28tech._number%29). |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation distance between the left margin and the ball |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Position](#%28tech._position%29)  [KeyEvent](#%28tech._keyevent%29) ->
    [Position](#%28tech._position%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the next location of the ball |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (keh 13 "left") 8)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (keh 13 "right") 18)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (keh 13 "a") 13)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (keh p k)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) k) 1)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      p] &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "left" k)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) p 5)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "right" k)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) p 5)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) p]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (keh p k)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "left" k)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) p 5)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "right" k)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) p 5)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) p]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 20: Conditional functions and special enumerations'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When programs rely on data definitions that are defined by a programming language
    (such as BSL) or its libraries (such as the 2htdp/universe library), it is common
    that they use only a part of the enumeration. To illustrate this point, let us
    look at a representative problem.
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a key-event handler that moves a red dot left or right
    on a horizontal line in response to pressing the left and right arrow keys.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 20](#%28counter._%28figure._fig~3acond-enum%29%29) presents two solutions
    to this problem. The function on the left is organized according to the basic
    idea of using one [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause per line in the data definition of the input, [KeyEvent](#%28tech._keyevent%29).
    In contrast, the right-hand side displays a version that uses the three essential
    lines: two for the keys that matter and one for everything else. The re-ordering
    is appropriate because only two of the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)-lines
    are relevant, and they can be cleanly separated from other lines. Naturally, this
    kind of re-arrangement is done after the function is designed properly.'
  prefs: []
  type: TYPE_NORMAL
- en: 4.4Intervals
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Imagine yourself responding to the following sample design task:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a program that simulates the descent of a UFO.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: After a bit of thinking, you could come up with something like [figure 21](#%28counter._%28figure._fig~3aufo%29%29).
    Stop! Study the definitions and replace the dots before you read on.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A WorldState is a [Number](#%28tech._number%29). |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation number of pixels between the top and the UFO |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH 300) ; distances
    in terms of pixels |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT 100)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) CLOSE ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) HEIGHT 3))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MTSCN ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) UFO ([overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29) ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 10 "solid" "green") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [WorldState](#%28tech._worldstate%29) -> [WorldState](#%28tech._worldstate%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main y0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) y0
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) nxt]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) render]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [WorldState](#%28tech._worldstate%29) -> [WorldState](#%28tech._worldstate%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes next location of UFO |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (nxt 11) 14)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (nxt y)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) y 3))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [WorldState](#%28tech._worldstate%29) -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; place UFO at given height into the center of MTSCN |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (render 11) ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) UFO [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) 11 MTSCN))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render y)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) UFO [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) y MT))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 21: UFO, descending'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Before you release this "game" program, however, you may wish to add the display
    of status line to the canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Add a status line. It says "descending" when the UFO’s height
    is above one third of the height of the canvas. It switches to "closing in" below
    that. And finally, when the UFO has reached the bottom of the canvas, the status
    notifies the player that the UFO has "landed."
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You are free to use appropriate colors for the status line.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we don’t have a finite enumeration of distinct elements or distinct
    sub-classes of data. After all conceptually the interval between 0 and HEIGHT
    (for some number greater than 0) contains an infinite number of numbers and a
    large number of integers. Therefore we use intervals to superimpose some organization
    on the generic data definition, which just uses "numbers" to describe the class
    of coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: 'An interval is a description of a class of numbers via boundaries. The simplest
    interval has two boundaries: left and right. If the left boundary is to be included
    in the interval, we say it is a closed on the left. Similarly, a right-closed
    interval includes its right boundary. Finally, if an interval does not include
    a boundary, it is said to be open at that boundary.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pictures of, and notations for, intervals use brackets for closed boundaries
    and parentheses for open boundaries. Here are four such intervals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[3,5] is a closed interval:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](../Images/4175e9433d279c905d20c2d046ba171d.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '(3,5] is a left-open interval:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](../Images/9f9fbe765ae127101ed23784d561f3a0.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[3,5) is a right-open interval:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](../Images/a788415dcf7580bd45f937852ee811ed.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'and (3,5) is an open interval:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](../Images/3c77841acc5734f434f548548b9db4a2.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Exercise 52\. Which integers are contained in the four intervals above? [![image](../Images/96462e80d34706462040f398b02036d7.jpg)](#%28counter._%28exercise._cond4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'The interval concept helps us formulate a data definition that captures the
    revised problem statement better than the "numbers" based definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A WorldState falls into one of three intervals: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – between 0 and CLOSE |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – between CLOSE and HEIGHT |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – below HEIGHT |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Specifically, there are three intervals, which we may picture as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/ae54fd034096af1455806240bd5b1399.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'What you see is the standard number line, turned vertical and broken into intervals.
    Each interval starts with an angular downward-pointing bracket (![image](../Images/3be324f71f94aaf087b7be409ce377f8.jpg))
    and ends with an upward-pointing bracket (![image](../Images/c1383633f4e70b1750c772fb3f9a348e.jpg)).
    The picture identifies three intervals in this manner:'
  prefs: []
  type: TYPE_NORMAL
- en: the upper interval goes from 0 to CLOSE;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the middle one starts at CLOSE and reaches HEIGHT;On a plain number line, the
    last interval starts at HEIGHT and goes on forever. and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the lower, invisible interval is just a single line at HEIGHT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing the data definition in this manner helps with the design of functions
    in two ways. First, it immediately suggests how to pick examples. Clearly we want
    the function to work inside of all the intervals and we want the function to work
    properly at the ends of each interval. Second, the image tell us that we need
    to formulate a condition that determines whether or not some "point" is within
    one of the intervals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting the two together also raises a question, namely, how exactly the function
    deals with the end points. In the context of our example, two points on the number
    line belong to two intervals: CLOSE belongs to both the upper interval and the
    middle one, while HEIGHT seems to fall into both the middle one and the lowest
    one. Such overlaps usually cause problems for programs, and they ought to be avoided.'
  prefs: []
  type: TYPE_NORMAL
- en: 'BSL functions avoid them naturally due to the way [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expressions are evaluated. Consider this natural organization of a function that
    consumes elements of WorldState:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._worldstate%29) -> [WorldState](#%28tech._worldstate%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (f y)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 y CLOSE) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) CLOSE y HEIGHT) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) y HEIGHT) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The three [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    lines correspond to the three intervals. Each condition identifies those values
    of y that are in between the limits of the intervals. Due to the way [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    lines are checked one by one, however, a y value of CLOSE makes BSL pick the first
    [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line, and a y value of HEIGHT triggers the evaluation of the second ResultExpression.If
    we wanted to make this choice obvious and immediate for every reader of our code,
    we would use different conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._worldstate%29) -> [WorldState](#%28tech._worldstate%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (g y)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 y CLOSE) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) CLOSE y) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) y HEIGHT)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) y HEIGHT) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Note how the second [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line uses [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    to combine a strictly-less check with a less-than-or-equal check instead of f’s
    [<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29)
    with three arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._worldstate%29) -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds a status line to the scene created by render   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (render/status 10)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "descending" 11 "green")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                            10 10 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                            (render 10))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render/status y)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 y CLOSE)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "descending" 11 "green")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   10 10 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   (render y))] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) CLOSE y) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) y HEIGHT))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "closing
    in" 11 "orange") |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   10 10 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   (render y))] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) y HEIGHT)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "landed" 11 "red")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   10 10 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   (render y))])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 22: Rendering with a status line'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Given all that, we can complete the definition of the function that adds the
    requested status line to our UFO animation; see [figure 22](#%28counter._%28figure._fig~3arender-status%29%29)
    for the complete definition. The function uses a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression to distinguish the three intervals. In each [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause, the ResultExpression uses render (from [figure 21](#%28counter._%28figure._fig~3aufo%29%29))
    to create the image with the descending UFO and then places an appropriate text
    at position (10,10) with [place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: 'To run this version, you need to change main from [figure 21](#%28counter._%28figure._fig~3aufo%29%29)
    a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._worldstate%29) -> [WorldState](#%28tech._worldstate%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main y0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) y0
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) nxt]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) render/status]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'One aspect of this function definition might disturb you, and to clarify why,
    let us refine the sample problem from above just a tiny bit:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Add a status line, positioned at (20,20), that says "descending"
    when the UFO’s height is above one third of the height ...
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This could be the response of a client who has watched your animation for a
    first time.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [WorldState](#%28tech._worldstate%29) -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds a status line to the scene create by render   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (render/status 42)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "closing
    in" 11 "orange") |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                            20 20 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                            (render 42))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render/status y)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 y CLOSE)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "descending" 11 "green")]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) CLOSE y) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) y HEIGHT))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "closing
    in" 11 "orange")] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) y HEIGHT)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "landed" 11 "red")])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     20 20 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (render y))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 23: Rendering with a status line, revised'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'At this point, you have no choice but to change the function render/status
    at six distinct places because you have three copies of one external piece of
    information: the location of the status line. To avoid multiple changes for a
    single element, programmers try to avoid copies. You have two choices to fix this
    problem here. The first one is to use constant definitions, which you might recall
    from early chapters. The second one is to think of the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression as an expression that may appear anywhere in a function, including
    in the middle of some other expression; see [figure 23](#%28counter._%28figure._fig~3arender-status2%29%29)
    and compare with [figure 22](#%28counter._%28figure._fig~3arender-status%29%29).
    In this revised definition of render/status, the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression is the first argument to [place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29).
    As you can see, its result is always a [text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29)
    image that is placed at position (20,20) into the image created by (render  y).'
  prefs: []
  type: TYPE_NORMAL
- en: 4.5Itemizations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An interval distinguishes different sub-classes of numbers, which in principle,
    is an infinitely large class. An enumeration spells out item for item the useful
    elements of an existing class of data. Some data definitions need to include elements
    from both. They use itemizations, which generalize intervals and enumerations.
    They allow the combination of any already-defined data classes with each other
    and with individual pieces of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example, a rewrite of an important data definition from[Enumerations](#%28part._sec~3aenums%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A KeyEvent is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [1String](#%28tech._1string%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "left" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "right" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "up" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "down" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In this case, the KeyEvent data definition refers to the [1String](#%28tech._1string%29)
    data definition. Since functions that deal with [KeyEvent](#%28tech._itemization._keyevent%29)s
    often deal with [1String](#%28tech._1string%29)s separately from the rest and
    do so with auxiliary functions, we now have a convenient way to express signatures
    for these functions, too.The description of the [string->number](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3enumber%29%29)
    primitive employs the idea of an itemization in a sophisticated way. Its signature
    is
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [String](#%28tech._string%29) -> [NorF](#%28tech._itemization._norf%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; converts the given string into a number; |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces #false if impossible |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ([string->number](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3enumber%29%29) s) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) s [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'meaning that the result signature names a simple class of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A NorF is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – a [Number](#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This itemization combines one piece of data (#false) with a large, and distinct,
    class of data (Number).Now imagine a function that consumes the result of [string->number](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3enumber%29%29)
    and adds 3, dealing with #false as if it were 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [NorF](#%28tech._itemization._norf%29) -> [Number](#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds 3 to the given number; 3 otherwise |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (add3 #false) 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (add3 0.12) 3.12)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (add3 x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([false?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._false~3f%29%29) x) 3]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) x 3)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As above, the function’s body consists of a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression with as many clauses as there are items in the enumeration of the data
    definition. The first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause recognizes when the function is applied to #false; the corresponding result
    is 3 as requested. The second clause is about numbers and adds 3 as required.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s study a somewhat more purposeful design task:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a program that launches a rocket when the user of your
    program presses the space bar. The program first displays the rocket sitting at
    the bottom of the canvas. Once launched, it moves upward at three pixels per clock
    tick.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This revised version suggests a representation with two classes of states:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A LR (short for launching rocket) is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "resting" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [NonnegativeNumber](#%28tech._nonnegativenumber%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  "resting" represents a grounded rocket |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; a number denotes the height of a rocket in flight |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'While the interpretation of "resting" is obvious, the interpretation of numbers
    is ambiguous in its notion of height:'
  prefs: []
  type: TYPE_NORMAL
- en: the word “height” could refer to the distance between the ground and the rocket’s
    point of reference, say, its center; or
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: it could mean the distance between the top of the canvas and the reference point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either one works fine. The second one uses the conventional computer meaning
    of the word “height.” It is thus slightly more convenient for functions that translate
    the state of the world into an image, and we therefore choose to interpret the
    number in that spirit.
  prefs: []
  type: TYPE_NORMAL
- en: To drive home this choice, [exercise 57](#%28counter._itemization._%28exercise._interpret-height%29%29)
    below asks you to solve the exercises of this section using the first interpretation
    of height.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 53\. The design recipe for world programs demands that you translate
    information into data and vice versa to ensure a complete understanding of the
    data definition. In some way it is best to draw some world scenarios and to represent
    them with data and, conversely, to pick some data examples and to draw pictures
    that match them. Do so for the [LR](#%28tech._itemization._lr%29) definition,
    including at least HEIGHT and 0 as examples. [![image](../Images/20844a7ed88fc2f6a217ee2f79dbf367.jpg)](#%28counter._itemization._%28exercise._cond5%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'In reality, rocket launches come with count-downs:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a program that launches a rocket when the user presses
    the space bar. At that point, the simulation starts a count-down for three ticks,
    before it displays the scenery of a rising rocket. The rocket should move upward
    at a rate of three pixels per clock tick.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Following the design recipe for world programs from [Designing World Programs](#%28part._.D.K._sec~3adesign-world%29),
    we first collect constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT 300) ; distances
    in pixels |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH  100)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) YDELTA 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) BACKG  ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ROCKET ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 5 30 "solid" "red"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) CENTER ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) ROCKET) 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'While WIDTH and HEIGHT describe the dimensions of the canvas and the background
    scene, YDELTA describes how fast the rocket moves along the y-axis, as specified
    in the problem statement. The CENTER constant is the computed center of the rocket.Next
    we turn to the development of a data definition. This revision of the problem
    clearly calls for three distinct sub-classes of states:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A LRCD (for launching rocket count down) is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "resting" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – a [Number](#%28tech._number%29) between -3 and -1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – a [NonnegativeNumber](#%28tech._nonnegativenumber%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation a grounded rocket, in count-down mode, |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; a number denotes the number of pixels between the |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; top of the canvas and the rocket (its height) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The second, new sub-class of data—<wbr>three negative numbers—<wbr>represents
    the world after the user pressed the space bar and before the rocket lifts off.At
    this point, we write down our wish list for a function that renders states as
    images and for any event-handling functions that we may need:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [LRCD](#%28tech._itemization._lrcd%29) -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders the state as a resting or flying rocket |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (show x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   BACKG) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [LRCD](#%28tech._itemization._lrcd%29)  [KeyEvent](#%28tech._itemization._keyevent%29)
    -> [LRCD](#%28tech._itemization._lrcd%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; starts the count-down when space bar is pressed, |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if the rocket is still resting |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (launch x ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   x) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [LRCD](#%28tech._itemization._lrcd%29) -> [LRCD](#%28tech._itemization._lrcd%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; raises the rocket by YDELTA, |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;  if it is moving already |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (fly x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   x) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Remember that the design recipe for world programs dictates these signatures,
    though the choice of names for the data collection and the event handlers are
    ours. Also, we have specialized the purpose statements to fit our problem statement.From
    here, we use the design recipe for functions to create complete definitions for
    all three of them, starting with examples for the first one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  (show "resting") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 10 CENTER BACKG))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  (show -2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "-2" 20 "red")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               10 ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 3/4 WIDTH)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 10 CENTER BACKG)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  (show 53) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 10 53 BACKG))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: As before in this chapter, we make one test per sub-class in the data definition.
    The first example shows the resting state, the second the middle of a count down,
    and the last one the rocket in flight. Furthermore, we express the expected values
    as expressions that draw appropriate images. We used DrRacket’s interaction area
    to create these images; what would you do?
  prefs: []
  type: TYPE_NORMAL
- en: A close look at the examples reveals that making examples also means making
    choices. Nothing in the problem statement actually demands how exactly the rocket
    is displayed before it is launched but doing so is natural. Similarly, nothing
    says to display a number during the count down, but it adds a nice touch. Lastly,
    if you solved [exercise 53](#%28counter._itemization._%28exercise._cond5%29%29)
    you also know that 0 and HEIGHT are special points for the third clause of the
    data definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, intervals deserve special attention when you make up examples,
    that is, they deserve at least three kinds of examples: one from each end and
    another one from inside. Since the second sub-class of [LRCD](#%28tech._itemization._lrcd%29)
    is a (finite) interval and the third one is a half-open interval, let us take
    a look at their end points:'
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, (show  -3) and (show  -1) must produce images like the one for (show  -2).
    After all, the rocket still rests on the ground, even if the count down numbers
    differ.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The case for (show  HEIGHT) is different. According to our agreement, the value
    HEIGHT represents the state when the rocket has just been launched. Pictorially
    this means the rocket is still resting on the ground. Based on the last test case
    above, here is the test case that expresses this insight:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|  (show HEIGHT) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 10 HEIGHT BACKG))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'Except that if you evaluate the “expected value” expression by itself in DrRacket’s
    interaction area, you see that the rocket is half-way underground. This shouldn’t
    be the case of course, meaning we need to adjust this test case and the above:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|  (show HEIGHT) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 10 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT CENTER) BACKG))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|  (show 53) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 10 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 53 CENTER) BACKG))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Finally, determine the result you now expect from (show  0). It is a simple
    but revealing exercise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Following the precedents in this chapter, show uses a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression to deal with the three clauses of the data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (show x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) x) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) -3 x -1) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) x 0) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Each clause identifies the corresponding sub-class with a precise condition:
    ([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29)  x)
    picks the first sub-class, which consists of just one element, the string "resting";
    ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29)  -3  x  -1)
    completely describes the second sub-class of data; and ([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29)  x  0)
    is a test for all non-negative numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 54\. Why is ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29)  "resting"  x)
    incorrect as the first condition in show? Conversely, formulate a completely accurate
    condition, that is, a [Boolean](#%28tech._boolean%29) expression that evaluates
    to #true precisely when x belongs to the first sub-class of [LRCD](#%28tech._itemization._lrcd%29).
    [![image](../Images/7da9e96c9784ad3feb7452dee611f238.jpg)](#%28counter._itemization._%28exercise._cond6%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Combining the examples and the above skeleton of the show function yields a
    complete definition in a reasonably straightforward manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (show x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 10 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT CENTER) BACKG)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) -3 x -1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) ([number->string](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number-~3estring%29%29) x) 20 "red")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                   10 ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 3/4 WIDTH)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                                10 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT CENTER)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                                BACKG))] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) x 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 10 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) x CENTER) BACKG)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Indeed, this way of defining functions is highly effective and is an essential
    element of the full-fledged design approach in this book.Exercise 55\. Take another
    look at show. It contains three instances of an expression with the approximate
    shape:'
  prefs: []
  type: TYPE_NORMAL
- en: ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ROCKET 10 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) CENTER) BACKG)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'appears three different times in the function: twice to draw a resting rocket
    and once to draw a flying rocket. Define an auxiliary function that performs this
    work and thus shorten show. Why is this a good idea? You may wish to re-read [Prologue:
    How to Program](part_prologue.html). [![image](../Images/f945e25dc2af2a2c6c4f16a3c5d71871.jpg)](#%28counter._itemization._%28exercise._cond-draw-rocket%29%29)Let
    us move on to the second function, which deals with the key event to launch the
    rocket. We have its header material, so we formulate examples as tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (launch "resting" "
    ") -3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (launch "resting" "a") "resting")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (launch -3 "
    ") -3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (launch -1 "
    ") -1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (launch 33 "
    ") 33) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (launch 33 "a") 33)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'An inspection of these six examples shows that the first two are about the
    first sub-class of [LRCD](#%28tech._itemization._lrcd%29), the third and fourth
    concern the count-down, and the last two are about key events when the rocket
    is already in the air.Since writing down the sketch of a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression worked well for the design of the show function, we do it again:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (launch x ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) x) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) -3 x -1) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) x 0) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Looking back at the examples suggests that nothing changes when the world is
    in a state that is represented by the second or third sub-class of data. Meaning,
    launch should produce x when this happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (launch x ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) x) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) -3 x -1) x]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) x 0) x]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Finally, the first example identifies the exact case when the launch function
    produces a new world state:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (launch x ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) x) ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "
    " ke) -3 x)] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) -3 x -1) x]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) x 0) x]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Specifically, when the state of the world is "resting" and the user presses
    the space bar, the function starts the count-down with -3.Copy the code into the
    definitions area of DrRacket and ensure that the above definitions work. At that
    point, you may wish to add a function for running the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [LRCD](#%28tech._itemization._lrcd%29) -> [LRCD](#%28tech._itemization._lrcd%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main1 s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) s
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) show]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) launch]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This function does not specify what to do when the clock ticks; after all, we
    haven’t designed fly yet. Still, with main1 it is possible to run this incomplete
    version of the program and to check that you can start the count-down. What would
    you provide as the argument in a call to main1?
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [LRCD](#%28tech._itemization._lrcd%29) -> [LRCD](#%28tech._itemization._lrcd%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; raises the rocket by YDELTA if it is moving already |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (fly "resting") "resting")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (fly -3) -2)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (fly -2) -1)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (fly -1) HEIGHT)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (fly 10) ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 10 YDELTA))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (fly 22) ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 22 YDELTA))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (fly x)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) x) x]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) -3 x -1) ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) x -1) HEIGHT ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) x 1))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) x 0) ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) x YDELTA)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 24: Launching a count-down and a lift-off'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The design of fly—<wbr>the clock-tick handler—<wbr>proceeds just like the design
    of the preceding two functions, and the above figure displays the result of the
    design process. Once again the key is to cover the space of possible input data
    with a good bunch of examples, especially for the two intervals. These examples
    ensure that the count-down and the transition from the count-down to the lift-off
    work properly.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 56\. Define main2 so that you can launch the rocket and watch it lift
    off. Read up on the [on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29)
    clause to determine the length of one tick and how to change it.
  prefs: []
  type: TYPE_NORMAL
- en: If you watch the entire launch, you will notice that once the rocket reaches
    the top, something curious happens. Explain. Add a [stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29)
    clause to main2 so that the simulation of the lift-off stops gracefully when the
    rocket is out of sight. [![image](../Images/70c1fc6e0812b2d13b07f5f10e561ec1.jpg)](#%28counter._itemization._%28exercise._cond7%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: The solution of [exercise 56](#%28counter._itemization._%28exercise._cond7%29%29)
    yields a complete, working program but one that behaves a bit strangely. Experienced
    programmers tell you that using negative numbers to represent the count-down phase
    is too “brittle.” The next chapter introduces the means to provide a good data
    definition for this problem. Before we go there, however, the next section spells
    out in detail how to design programs that consume data described by itemizations.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 57\. Recall that the word “height” forced us to choose one of two possible
    interpretation. Now that you have solved the exercises in this section, solve
    them again using the first interpretation of the word. Compare and contrast the
    solutions. [![image](../Images/7954c2b4086fcb639e792946a9d255be.jpg)](#%28counter._itemization._%28exercise._interpret-height%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 4.6Designing with Itemizations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: What the preceding three sections have clarified is that the design of functions
    can and must exploit the organization of the data definition. Specifically, if
    a data definition singles out certain pieces of data or specifies ranges of data,
    then the creation of examples and the organization of the function reflects these
    cases and ranges.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we refine the design recipe of [From Functions to Programs](#%28part._sec~3adesign%29)
    so that you can proceed in a systematic manner when you encounter problems concerning
    functions that consume itemizations, including enumerations and intervals. To
    keep the explanation grounded, we illustrate the six design steps with the following,
    somewhat simplistic example:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem The state of Tax Land has created a three-stage sales tax to
    cope with its budget deficit. Inexpensive items, those costing less than $1,000,
    are not taxed. Luxury items, with a price of more than $10,000, are taxed at the
    rate of eight percent (8.00%). Everything in between comes with a five percent
    (5%) mark up.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Design a function for a cash register that given the price of an item, computes
    the sales tax.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Keep this problem in mind as we revise the steps of the design recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: When the problem statement distinguishes different classes of input information,
    you need carefully formulated data definitions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A data definition must use distinct clauses for each sub-classes of data or
    in some cases just individual pieces of data. Each clause specifies a data representation
    for a particular sub-class of information. The key is that each sub-class of data
    is distinct from every other class so that our function can proceed by analyzing
    disjoint cases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our sample problem deals with prices and taxes, which are usually positive
    numbers. It also clearly distinguishes three ranges:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; A Price falls into one of three intervals: |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  0 through 1000 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  1000 through 10000 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  10000 and above. |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation the price of an item   |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Do you understand how these ranges relate to the original problem?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As far as the signature, purpose statement, and function header are concerned,
    you proceed as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the material for our running example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; [Price](#%28tech._price%29) -> [Number](#%28tech._number%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the amount of tax charged for p |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sales-tax p) 0)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: For functional examples, however, it is imperative that you pick at least one
    example from each sub-class in the data definition. Also, if a sub-class is a
    finite range, be sure to pick examples from the boundaries of the range and from
    its interior.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since our sample data definition involves three distinct intervals, let us
    pick all boundary examples and one price from inside each interval and determine
    the amount of tax for each: 0, 537, 1000, 1282, 10000, and 12017.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stop! Try to calculate the tax for each of these prices.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here is our first attempt, with rounded tax amounts:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| 0 |  | 537 |  | 1000 |  | 1282 |  | 10000 |  | 12017 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 0 |  | 0 |  | ???? |  | 64 |  | ????? |  | 961 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: The question marks point out that the problem statement uses the somewhat vague
    phrase “those costing less than $1,000” and “more than $10,000” to specify the
    tax table. While a programmer may immediately jump to the conclusion that these
    words mean “strictly less” or “strictly more,” the lawmakers may have meant to
    say “less or equal” or “more or equal,” respectively. Being skeptical, we decide
    here that Tax Land legislators always want more money to spend, so the tax rate
    for $1,000 is 5% and the rate for $10,000 is 8%. A programmer at a tax company
    would have to ask a tax-law specialist.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have figured out how the boundaries are to be interpreted in the
    domain, we could refine the data definition. We trust you can do this on your
    own.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Before we go, let us turn some of the examples into test cases:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (sales-tax 537) 0)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (sales-tax 1000) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 0.05 1000))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (sales-tax 12017) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 0.08 12017))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Take a close look. Instead of just writing down the expected result, we write
    down how to compute the expected result. This makes it easier later to formulate
    the function definition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stop! Write down the remaining test cases. Think about why you may need more
    test cases than sub-classes in the data definition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The biggest novelty is the conditional template. In general,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the template mirrors the organization of sub-classes with a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29).
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This slogan means two concrete things. First, the function’s body must be a
    conditional expression with as many clauses as there are distinct sub-classes
    in the data definition. If the data definition mentions three distinct sub-classes
    of input data, you need three [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses; if it has seventeen sub-classes, the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression contains seventeen clauses. Second, you must formulate one condition
    expression per [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause. Each expression involves the function parameter and identifies one of
    the sub-classes of data in the data definition:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sales-tax p)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 p) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) p 1000)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 1000 p) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) p 10000)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) p 10000) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: When you have finished the template, you are ready to define the function. Given
    that the function body already contains a schematic [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression, it is natural to start from the various [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    lines. For each [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line, you may assume that the input parameter meets the condition and you exploit
    the corresponding test cases. To formulate the corresponding result expression,
    you write down the computation for this example as an expression that involves
    the function parameter. Ignore all other possible kinds of input data when you
    work on one line; the other [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses take care of those.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sales-tax p)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 p) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) p 1000)) 0]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 1000 p) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) p 10000)) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 0.05 p)]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) p 10000) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 0.08 p)]))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Finally, run the tests and ensure that they cover all [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do you do when one of your test cases fails? Review at the end of [Designing
    Functions](#%28part._sec~3adesign-func%29) concerning test failures.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Exercise 58\. Introduce constant definitions that separate the intervals for
    low prices and luxury prices from the others so that the legislator in Tax Land
    can easily raise the taxes even more. [![image](../Images/46f9923b13af9e1fa47b9daa11d1dd06.jpg)](#%28counter._%28exercise._cond9%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 4.7Finite State Worlds
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With the design knowledge in this chapter, you can develop a complete simulation
    of American traffic lights. When such a light is green and it is time to stop
    the traffic, the light turns yellow and, after that, it turns red. When the light
    is red and it is time to get the traffic going, the light simply switches to green.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/140e184ee2b77e08a0f48708f7c53f17.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 25: How a traffic light functions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 25](#%28counter._%28figure._fig~3atraffic-light%29%29) summarizes this
    description as a state transition diagram. Such a diagram consists of states and
    arrows that connect these states. Each state depicts a traffic light in one particular
    configuration: red, yellow, or green. Each arrow shows how the world can change,
    from which state it can transition to another state. Our sample diagram contains
    three arrows, because there are three possible ways in which the traffic light
    can change. Labels on the arrows indicate the reason for changes; a traffic light
    transitions from one state to another as time passes.'
  prefs: []
  type: TYPE_NORMAL
- en: In many situations, state transition diagrams have only a finite number of states
    and arrows. Computer scientists call such diagrams finite state machines (FSM)
    also known as finite state automata (FSA). Despite their simplicity, FSMs/FSAs
    play an important role in computer science.
  prefs: []
  type: TYPE_NORMAL
- en: To create a world program for an FSA, we must first pick a data representation
    for the possible “states of the world,” which, according to [Designing World Programs](#%28part._.D.K._sec~3adesign-world%29),
    represents those aspects of the world that may change in some ways as opposed
    to those that remain the same. In the case of our traffic light, what changes
    is the color of the light, that is, which bulb is turned on. The size of the bulbs,
    their arrangement (horizontal or vertical), and other aspects don’t change. Since
    there are only three states, we re-use the string-based data definition of [TrafficLight](#%28tech._trafficlight%29)
    from above.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/c92dad06310ef4832e52afcd86c98fa8.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 26: How to represent a traffic light'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 26](#%28counter._%28figure._fig~3atraffi-rep%29%29) is a diagrammatic
    interpretation of the [TrafficLight](#%28tech._trafficlight%29) data definition.
    Like the diagram in [figure 25](#%28counter._%28figure._fig~3atraffic-light%29%29),
    it consists of three states, arranged in such a way that it is easy to view each
    data element as a representation of a concrete configuration. Also, the arrows
    are now labeled with tick to suggest that our world program uses the passing of
    time as the trigger that changes the state of the traffic light. If we wanted
    to simulate a manually operated light, we might choose transitions based on key
    strokes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know how to represent the states of our world, how to go from one
    to the next, and that the state changes at every tick of the clock, we can write
    down the signature, a purpose statement, and a stub for the two functions we must
    design:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [TrafficLight](#%28tech._trafficlight%29) -> [TrafficLight](#%28tech._trafficlight%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; yields the next state given current state cs |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (tl-next cs) cs)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [TrafficLight](#%28tech._trafficlight%29) -> [Image](#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders the current state cs as an image |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (tl-render current-state)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 90 30))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Preceding sections use the names render and next to name the functions that
    translate a state of the world into an image and that deal with clock ticks. Here
    we prefix these names with some syllable that suggests to which world the functions
    belong. Because the specific functions have appeared before, we leave them as
    exercises.Exercise 59\. Finish the design of a world program that simulates the
    traffic light FSA. Here is the main function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [TrafficLight](#%28tech._trafficlight%29) -> [TrafficLight](#%28tech._trafficlight%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; simulates a clock-based American traffic light |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (traffic-light-simulation initial-state)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) initial-state
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) tl-render]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) tl-next 1]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The function’s argument is the initial state for the [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression, which tells DrRacket to re-draw the state of the world with tl-render
    and to handle clock ticks with tl-next. Also note it informs the computer that
    the clock should tick once per second.
  prefs: []
  type: TYPE_NORMAL
- en: Complete the design of tl-render and tl-next. Start with copying [TrafficLight](#%28tech._trafficlight%29),
    tl-next, and tl-render into DrRacket’s definition area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some test cases for the design of the latter:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (tl-render "red") ![image](../Images/229de110faac3ccc29e4ead68c6cdcdb.jpg))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (tl-render "yellow") ![image](../Images/f4f97bd19d1b0a96aca634440299b8c9.jpg))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Your function may use these images directly. If you decide to create images
    with the functions from the 2htdp/image library, design an auxiliary function
    for creating the image of a one-color bulb. Then read up on the [place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29)
    function, which can place bulbs into a background scene. [![image](../Images/3842ba6d722b27e91c2a74af33b168d8.jpg)](#%28counter._%28exercise._cond11%29%29)Exercise 60\.
    An alternative data representation for a traffic light program may use numbers
    instead of strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A N-TrafficLight is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  0  interpretation the traffic light shows red |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  1  interpretation the traffic light shows green |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  2  interpretation the traffic light shows yellow |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It greatly simplifies the definition of tl-next:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N-TrafficLight](#%28tech._n._trafficlight%29) -> [N-TrafficLight](#%28tech._n._trafficlight%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; yields the next state given current state cs |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (tl-next-numeric cs) ([modulo](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._modulo%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) cs 1) 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Re-formulate the test cases for tl-next for tl-next-numeric.
  prefs: []
  type: TYPE_NORMAL
- en: Does the tl-next function convey its intention more clearly than the tl-next-numeric
    function? If so, why? If not, why not? [![image](../Images/b2fa69b035542e1a6913dfb6204e4ecd.jpg)](#%28counter._%28exercise._ex~3aalternative-data-design%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 61\. As [From Functions to Programs](#%28part._sec~3adesign%29) says,
    programs must define constants and use names instead of actual constants. In this
    spirit, a data definition for traffic lights introduces must use constants, too:This
    form of data definition is what a seasoned designer would use.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) RED 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) GREEN 1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) YELLOW 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A S-TrafficLight is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  RED |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  GREEN |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  YELLOW |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If the names are chosen properly, the data definition does not need an interpretation
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [S-TrafficLight](#%28tech._s._trafficlight%29) -> [S-TrafficLight](#%28tech._s._trafficlight%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; yields the next state given current state cs &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (tl-next- ... RED) YELLOW)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (tl-next- ... YELLOW) GREEN)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (tl-next-numeric cs)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([modulo](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._modulo%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) cs 1) 3))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (tl-next-symbolic cs)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([equal?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._equal~3f%29%29) cs RED) GREEN]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([equal?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._equal~3f%29%29) cs GREEN) YELLOW]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([equal?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._equal~3f%29%29) cs YELLOW) RED]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 27: A symbolic traffic light'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [equal?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._equal~3f%29%29)
    function compares two arbitrary values, regardless of what these values are. Equality
    is a complicated topic in the world of programming.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 27](#%28counter._%28figure._fig~3aex~3aalternative%29%29) displays
    two different functions that switch the state of a traffic light in a simulation
    program. Which of the two is properly designed using the recipe for itemization?
    Which of the two continues to work if you change the constants to'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) RED "red")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) GREEN "green")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) YELLOW "yellow")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Does this help you answer the questions? [![image](../Images/b6c0eca5b387271464fb39bbd69fcb76.jpg)](#%28counter._%28exercise._ex~3aalternative-data-design2%29%29)Here
    is another finite state problem that introduces a few additional complications:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a world program that simulates the working of a door with
    an automatic door closer. If this kind of door is locked, you can unlock it with
    a key. An unlocked door is closed but someone pushing at the door opens it. Once
    the person has passed through the door and lets go, the automatic door takes over
    and closes the door again. When a door is closed, it can be locked again.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To tease out the essential elements, we again draw a transition diagram; see
    the left-hand side of the figure. Like the traffic light, the door has three distinct
    states: locked, closed, and open. Locking and unlocking are the activities that
    cause the door to transition from the locked to the closed state and vice versa.
    As for opening an unlocked door, we say that one needs to push the door open.
    The remaining transition is unlike the others, because it doesn’t require any
    activities by anyone or anything else. Instead, the door closes automatically
    over time. The corresponding transition arrow is labeled with *time* to emphasize
    this.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/c400bc295d7629a4b80e8519298e7534.jpg)            ![image](../Images/81a1d348d2378f2efd4c12bb020b13d3.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 28: A transition diagram for a door with an automatic closer'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Following our recipe, we start with a translation of the three real-world states
    into BSL data:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) LOCKED "locked")
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) CLOSED "closed")
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) OPEN "open")
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; A DoorState is one of: &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  LOCKED &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  CLOSED &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  OPEN &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We also keep in mind the lesson of [exercise 61](#%28counter._%28exercise._ex~3aalternative-data-design2%29%29),
    namely, that it is best to define symbolic constants and formulate data definitions
    in terms of such constants.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step of a world design demands that we translate the chosen actions
    in our domain—<wbr>the arrows in the left-hand diagram—<wbr>into interactions
    with the computer that the 2htdp/universe library can deal with. Our pictorial
    representation of the door’s states and transitions, specifically the arrow from
    open to closed, suggests the use of clock ticks. For the other arrows, we could
    use either key presses or mouse clicks. Let us use three keystrokes: "u" for unlocking
    the door, "l" for locking it, and the space bar " " for pushing it open. The right-hand
    side diagram of [figure 28](#%28counter._%28figure._fig~3adoor-closer%29%29) expresses
    these choices graphically; it translates the state-machine diagram from the world
    of information into the world of data in BSL.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have decided to use the passing of time for one action and key presses
    for the others, we must design functions that transform the current state of the
    world—<wbr>represented as [DoorState](#%28tech._doorstate%29)—<wbr>into the next
    state of the world. Put differently, we have just created a wish list with two
    handler functions that have the following signature and purpose statements:'
  prefs: []
  type: TYPE_NORMAL
- en: door-closer, which closes the door during one tick;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: door-actions, which manipulates the door in response to pressing a key; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: door-render, which translates the current state into an image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We start with door-closer. Since door-closer acts as the [on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29)
    handler, we get its signature from our choice of [DoorState](#%28tech._doorstate%29)
    as the collection of world states:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [DoorState](#%28tech._doorstate%29) -> [DoorState](#%28tech._doorstate%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; closes an open door over the period of one tick |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (door-closer state-of-door) state-of-door)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Making up examples is trivial when the world can only be in one of three states.
    Here we use a table to express the basic idea, just like in some of the mathematical
    examples before:'
  prefs: []
  type: TYPE_NORMAL
- en: '| given state |  | desired state |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| LOCKED |  | LOCKED |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| CLOSED |  | CLOSED |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| OPEN |  | CLOSED |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Express these examples as BSL tests.The template step demands a conditional
    with three clauses:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (door-closer state-of-door)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) LOCKED state-of-door) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) CLOSED state-of-door) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) OPEN state-of-door) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'and the process of turning this template into a function definition is dictated
    by the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (door-closer state-of-door)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) LOCKED state-of-door) LOCKED]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) CLOSED state-of-door) CLOSED]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) OPEN state-of-door) CLOSED]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Don’t forget to run your tests.The second function, door-actions, takes care
    of the remaining three arrows of the diagram. Functions that deal with keyboard
    events consume both a world and a key event, meaning the signature is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [DoorState](#%28tech._doorstate%29)  [KeyEvent](#%28tech._keyevent%29)
    -> [DoorState](#%28tech._doorstate%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; turn key event k into an action on state s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (door-actions s k)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   s) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We once again present the examples in tabular form:'
  prefs: []
  type: TYPE_NORMAL
- en: '| given state |  | given key event |  | desired state |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| LOCKED |  | "u" |  | CLOSED |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| CLOSED |  | "l" |  | LOCKED |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| CLOSED |  | " " |  | OPEN |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| OPEN |  | —<wbr> |  | OPEN |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The examples combine information from our drawing with the choices we made
    about mapping actions to keyboard events. Unlike the table of examples for traffic
    light, this table is incomplete. Think of some other examples; then consider why
    our table suffices.From here, it is straightforward to create a complete design:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (door-actions LOCKED "u") CLOSED)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (door-actions CLOSED "l") LOCKED)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (door-actions CLOSED "
    ") OPEN) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (door-actions OPEN "a") OPEN)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (door-actions CLOSED "a") CLOSED)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (door-actions s k)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) LOCKED s) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "u" k))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      CLOSED] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) CLOSED s) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "l" k))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      LOCKED] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) CLOSED s) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "
    " k)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      OPEN] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) s]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note the use of [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    to combine two conditions: one concerning the current state of the door and the
    other concerning the given key event.Lastly we need to render the state of the
    world as a scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [DoorState](#%28tech._doorstate%29) -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; translates the state s into a large text image |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (door-render CLOSED)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) CLOSED 40 "red"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (door-render s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) s 40 "red"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This simplistic function just uses large text. Here is how we run it all:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [DoorState](#%28tech._doorstate%29) -> [DoorState](#%28tech._doorstate%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; simulates a door with an automatic door closer |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (door-simulation initial-state)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) initial-state
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) door-closer]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) door-actions]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) door-render]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Now it is time for you to collect the pieces and run them in DrRacket to see
    whether it all works.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 62\. During a door simulation the “open” state is barely visible. Modify
    door-simulation so that the clock ticks once every three seconds. Re-run the simulation.
    [![image](../Images/16d0442219fb35630ceb2fa46be98746.jpg)](#%28counter._%28exercise._cond12%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 5Adding Structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose you want to design a world program that simulates a ball bouncing back
    and forth on a straight vertical line between the floor and ceiling of some imaginary,
    perfect room. Assume that it always moves two pixels per clock tick. If you follow
    the design recipe, your first goal is to develop a data representation for what
    changes over time. Here, the ball’s location and its direction change over time,
    but that’s two values while [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    keeps track of just one. Thus the question arises how one piece of data can represent
    two changing quantities of information.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematicians know tricks that “merge” two numbers into a single number such
    that it is possible to retrieve the original ones. Programmers consider these
    kinds of tricks evil, because they obscure a program’s true intentions.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here is another scenario that raises the same question. Your cell phone is mostly
    a few million lines of code wrapped in plastic. Among other things, it administrates
    your contacts. Each contact comes with a name, a phone number, an email address,
    and perhaps some other information. When you have lots of contacts, each single
    contact is best represented as a single piece of data; otherwise the various pieces
    could get mixed up by accident.
  prefs: []
  type: TYPE_NORMAL
- en: Because of such programming problems, every programming language provides some
    mechanism for combining several pieces of data into a single piece of compound
    data and ways to retrieve the constituent values when needed. This chapter introduces
    BSL’s mechanics, so-called structure type definitions, and how to design programs
    that work on compound data.
  prefs: []
  type: TYPE_NORMAL
- en: 5.1posn Structures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A location on a world canvas is uniquely identified by two pieces of data:
    the distance from the left margin and the distance from the top margin. The first
    is called an x-coordinate and the second one is the y-coordinate.'
  prefs: []
  type: TYPE_NORMAL
- en: DrRacket, which is basically a BSL program, represents such locations with posn
    structures. A posn structure combines two numbers into a single value. We can
    create a posn structure with the operation [make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29),
    which consumes two numbers and makes a posn. For example,
  prefs: []
  type: TYPE_NORMAL
- en: ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 3 4)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'is an expression that creates a posn structure whose x-coordinate is 3 and
    whose y-coordinate is 4.A posn structure has the same status as a number or a
    Boolean or a string. In particular, both primitive operations and functions may
    consume and produce structures. Also, a program can name a posn structure:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) one-posn ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 8 6))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stop! Describe one-posn in terms of coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Before doing anything else, let’s take a look at the laws of computation for
    posn structures. That way, we can both create functions that process posn structures
    and predict what they compute.
  prefs: []
  type: TYPE_NORMAL
- en: 5.2Computing with posns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While functions and the laws of functions are completely familiar from pre-algebra,
    posn structures appear to be a new idea. Then again, the concept of a posn ought
    to look like the Cartesian points or positions in the plane you may have encountered
    before.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/e45480721d189ede3f366b0aa7027d75.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 29: A Cartesian point'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Selecting a Cartesian point’s pieces is also a familiar process. For example,
    when a teacher says “take a look at the graph of [figure 29](#%28counter._%28figure._fig~3acartesian-point%29%29)
    and tell me what px and py are,” you are likely to answer 31 and 26, respectively,
    because you know that you need to read off the values where the vertical and horizontal
    lines that radiate out from p hit the axes.
  prefs: []
  type: TYPE_NORMAL
- en: We can express this idea in BSL. Assume you add
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) p ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 31 26))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'to the definitions area, click RUN, and perform these interactions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 31 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 26 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Defining p is like marking the point in a Cartesian plane; using [posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29)
    and [posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29)
    is like subscripting p with indexes: px and py.Computationally speaking, posn
    structures come with two equations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29)  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  x0  y0))
    |  | == |  | x0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29)  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  x0  y0))
    |  | == |  | y0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'DrRacket uses these equations during computations. Here is an example of a
    computation involving posn structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket replaces p with ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  31  26)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 31 26))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket uses the law for [posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 31 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Confirm the second interaction above with your own computation. Also use
    DrRacket’s stepper to double-check.
  prefs: []
  type: TYPE_NORMAL
- en: 5.3Programming with posn
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now consider designing a function that computes the distance of some location
    to the origin of the canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/3510eeabf714d59efe9f4124169cb216.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'The picture clarifies that “distance” means the length of the most direct path—<wbr>“as
    the crow flies”—<wbr>from the designated point to the top-left corner of the canvas.Here
    are the purpose statement and the header:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; computes the distance of ap to the origin |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (distance-to-0 ap)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The key is that distance-to-0 consumes a single value, some posn. It produces
    a single value, the distance of the location to the origin.In order to make up
    examples, we need to know how to compute this distance. For points with 0 as one
    of the coordinates, the result is the other coordinate:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (distance-to-0 ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 0 5)) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (distance-to-0 ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 7 0)) 7)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'For the general case, we could try to figure out the formula on our own, or
    we may recall the formula from your geometry courses. As you know, this is domain
    knowledge that you might have but in case you don’t, we supply it; after all,
    this domain knowledge isn’t computer science. So, here is the distance formula
    for (x,y) again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/8aba25705732ee783b94949db57a4b9c.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Given this formula, we can easily make up some more functional examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (distance-to-0 ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 3 4)) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (distance-to-0 ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 8 6)) 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (distance-to-0 ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 5 12)) 13)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Just in case you’re wondering, we rigged the examples so that the results would
    be easy to figure out. This isn’t the case for all posn structures.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Plug the x- and y-coordinates from the examples into the formula. Confirm
    the expected results for all five examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we can turn our attention to the definition of the function. The examples
    imply that the design of distance-to-0 does not need to distinguish between different
    situations; it always just computes the distance from the x- and y-coordinates
    inside the given posn structure. But the function must select these coordinates
    from the given posn structure. And for that, it uses the [posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29)
    and [posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29)
    primitives. Specifically, the function needs to compute ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29)  ap)
    and ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29)  ap)
    because ap is the name of the given, unknown posn structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (distance-to-0 ap)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) ap) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) ap) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Using this template and the examples, the rest is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (distance-to-0 ap)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([sqrt](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqrt%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([sqr](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqr%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) ap))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([sqr](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqr%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) ap)))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The function squares ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29)  ap)
    and ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29)  ap),
    which represent the x- and y-coordinates, sums up the results, and takes the square
    root. With DrRacket, we can also quickly check that our new function produces
    the proper results for our examples.Exercise 63\. Evaluate the following expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: (distance-to-0  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  3  4))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (distance-to-0  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  6  ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29)  2  4)))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  (distance-to-0  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  12  5))  10)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'by hand. Show all steps. Assume that [sqr](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqr%29%29)
    performs its computation in a single step. Check the results with DrRacket’s stepper.
    [![image](../Images/034f67ec828eba303bfb1e660addfa60.jpg)](#%28counter._%28exercise._struct1%29%29)Exercise 64\.
    The Manhattan distance of a point to the origin considers a path that follows
    the rectangular grid of streets found in Manhattan. Here are two examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/67f28be985600cb31710245c93d33a7b.jpg)            ![image](../Images/b62b4058b139635c4d412c493c970e73.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The left one shows a “direct” strategy, going as far left as needed, followed
    by as many upwards steps as needed. In comparison, the right one shows a “random
    walk” strategy, going some blocks leftwards, some upwards, and so on until the
    destination—<wbr>here, the origin—<wbr>is reached.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Does it matter which strategy you follow?
  prefs: []
  type: TYPE_NORMAL
- en: Design the function manhattan-distance, which measures the Manhattan distance
    of the given posn to the origin. [![image](../Images/2281ad8d6808f0ff450ad34683a0d9c4.jpg)](#%28counter._%28exercise._struct2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 5.4Defining Structure Types
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Unlike numbers or Boolean values, structures such as posn usually don’t come
    with a programming language. Only the mechanism to define structure types is provided;
    the rest is left up to the programmer. This is also true for BSL.
  prefs: []
  type: TYPE_NORMAL
- en: 'A structure type definition is another form of definition, distinct from constant
    and function definitions. Here is how the creator of DrRacket defined the posn
    structure type in BSL:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) posn [x y])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In general, a structure type definition has this shape:The use of brackets in
    a structure type definition is a convention, not a necessity. It makes the field
    names stand out. Replacing brackets with parentheses is perfectly acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) StructureName [FieldName [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The keyword [define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)
    signals the introduction of a new structure type. It is followed by the name of
    the structure. The third part of a structure type definition is a sequence of
    names enclosed in brackets; these names are the fields.A structure type definition
    actually defines functions. But, unlike an ordinary function definition, a structure
    type definition defines many functions simultaneously. Specifically, it defines
    three kinds of functions:'
  prefs: []
  type: TYPE_NORMAL
- en: one constructor, a function that creates structure instances. It takes as many
    values as there are fields; as mentioned, structure is short for structure instance.
    The phrase structure type is a generic name for the collection of all possible
    instances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a selector per field, which extracts the value of the field from a structure
    instance;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and one structure predicate, which, like ordinary predicates, distinguishes
    instances from all other kinds of values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A program can use these as if they were functions or built-in primitives.
  prefs: []
  type: TYPE_NORMAL
- en: Curiously, a structure type definition makes up names for the various new operations
    it creates. For the name of the constructor, it prefixes the structure name with
    “make-” and for the names of the selectors it postfixes the structure name with
    the field names. Finally, the predicate is just the structure name with “?” added,
    pronounced “huh” when read aloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'This naming convention looks complicated and perhaps even confusing. But, with
    a little bit of practice, you get the hang of it. It also explains the functions
    that come with posn structures: [make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)
    is the constructor, [posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29)
    and [posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29)
    are selectors. While we haven’t encountered [posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29)
    yet, we now know that it exists; the next chapter explains the role of these predicates
    in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 65\. Take a look at following structure type definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  movie  [title  producer  year])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  person  [name  hair  eyes  phone])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  pet  [name  number])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  CD  [artist  title  price])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  sweater  [material  size  producer])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Write down the names of the functions (constructors, selectors, and predicates)
    that it introduces. [![image](../Images/67ef2f5a6767194ce557c82548fc63cd.jpg)](#%28counter._%28exercise._struct3%29%29)Enough
    with posn structures for a while. Let’s look at a structure type definition that
    we might use to keep track of contacts such as those in your cell phone:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) entry [name phone email])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here are the names of the functions that this definition introduces:'
  prefs: []
  type: TYPE_NORMAL
- en: make-entry, which consumes three values and constructs an instance of entry;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: entry-name, entry-phone, and entry-email, all of which consume one instance
    of entry and selects one of the three field values;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and entry?, the predicate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since each entry combines three values, the expression
  prefs: []
  type: TYPE_NORMAL
- en: (make-entry "Sara Lee" "666-7771" "lee@camlu.edu")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: creates an entry structure with "Sara Lee" in the name field, "666-7771" in
    the phone field, and "lee@camlu.edu" in the email field.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 66\. Revisit the structure type definitions of [exercise 65](#%28counter._%28exercise._struct3%29%29).
    Make sensible guesses as to what kind of values go with which fields. Then create
    at least one instance per structure type definition. [![image](../Images/3c6d0191e61939d01bdf83364455b13c.jpg)](#%28counter._%28exercise._struct3b%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Every structure type definition introduces a new kind of structure, distinct
    from all others. Programmers want this kind of expressive power because they wish
    to convey an intention with the structure name. Wherever a structure is created,
    selected, or tested, the text of the program explicitly reminds the reader of
    this intention. If it weren’t for these future readers of code, programmers could
    use one structure definition for structures with one field, another for structures
    with two fields, a third for structures with three, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this context, let’s study another programming problem:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Develop a structure type definition for a program that deals
    with “bouncing balls” , briefly mentioned at the very beginning of this chapter.
    The ball’s location is a single number, namely the distance of pixels from the
    top. Its constant speed is the number of pixels it moves per clock tick. Its velocity
    is the speed plus the direction in which it moves.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Since the ball moves along a straight, vertical line, a number is a perfectly
    adequate data representation for its velocity:'
  prefs: []
  type: TYPE_NORMAL
- en: A positive number means the ball moves down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A negative number means it moves up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use this domain knowledge to formulate a structure type definition:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) ball [location velocity])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Both fields are going to contain numbers, so (make-ball  10  -3) is a good data
    example. It represents a ball that is 10 pixels from the top and moves up at 3
    pixels per clock tick.
  prefs: []
  type: TYPE_NORMAL
- en: Notice how, in principle, a ball structure merely combines two numbers, just
    like a posn structure. When a program contains the expression (ball-velocity  a-ball),
    it immediately conveys that this programs deals with the representation of a ball
    and its velocity. In contrast, if the program used posn structures instead, ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29)  a-ball)
    might mislead a reader that the expression is about a y-coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 67\. Here is another way to represent bouncing balls:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) SPEED 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) balld [location direction])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (make-balld 10 "up") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Interpret this code fragment and create other instances of balld. [![image](../Images/f6939ebc191adc2c2d00e402388919be.jpg)](#%28counter._%28exercise._struct4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Since structures are values just like numbers or Booleans or strings, it makes
    sense that one instance of a structure occurs inside another instance. Consider
    game objects. Unlike bouncing balls, such objects don’t always move along vertical
    lines. Instead, they move in some “oblique” manner across the canvas. Describing
    both the location and the velocity of a ball moving across a 2-dimensional world
    canvas demands two numbers: one per direction.It is physics that tells you to
    add an object’s velocity to its location to obtain its next location. Developers
    need to learn who to ask about which domain. For the location part, the two numbers
    represent the x- and y-coordinates. Velocity describes the changes in the horizontal
    and vertical direction; in other words, these “change numbers” must be added to
    the respective coordinates to find out where the object is next.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clearly, posn structures can represent locations. For the velocities, we define
    the vel structure type:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) vel [deltax deltay])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'It comes with two fields: deltax and deltay. The word “delta” is commonly used
    to speak of change when it comes to simulations of physical activities, and the
    x and y parts indicate which axis is concerned.Now we can use instances of ball
    to combine a posn structure with a vel structure to represent balls that move
    in straight lines but not necessarily along only vertical (or horizontal) lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ball1
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-ball ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 30 40) (make-vel -10 5)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: One way to interpret this instance is to think of a ball that is 30 pixels from
    the left, 40 pixels from the top. It moves 10 pixels toward the left per clock
    tick, because subtracting 10 pixels from the x-coordinate brings it closer to
    the left. As for the vertical direction the ball drops at 5 pixels per clock tick,
    because adding positive numbers to a y-coordinate increases the distance from
    the top.Exercise 68\. An alternative to the nested data representation of balls
    uses four fields to keep track of the four properties:Yet another alternative
    is to use complex numbers. If you know about them, contemplate a data representation
    that uses them for both location and velocity. For example, in BSL, 4-3i is a
    complex number and could be used to represent the location or velocity (4,-3).
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) ballf [x y deltax deltay])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Programmers call this a flat representation. Create an instance of ballf that
    has the same interpretation as ball1. [![image](../Images/c4bb86f9d8822f6833b19ce2c3ee2d8c.jpg)](#%28counter._%28exercise._struct5%29%29)For
    a second example of nested structures, let us briefly look at the example of contact
    lists. Many cell phones support contact lists that allow several phone numbers
    per name: one for a home line, one for the office, and one for a cell phone number.
    For phone numbers, we wish to include both the area code and the local number.
    Since this nests the information, it’s best to create a nested data representation,
    too:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) centry [name home office cell])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) phone [area number])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (make-centry "Shriram Fisler" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              (make-phone 207 "363-2421") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              (make-phone 101 "776-1099") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              (make-phone 208 "112-9981")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The intention here is that an entry on a contact list has four fields: a name
    and three phone records. The latter are represented with instance of phone, which
    separates the area code from the local phone number.'
  prefs: []
  type: TYPE_NORMAL
- en: In sum, nesting information is natural. The best way to represent such information
    with data is to mirror the nesting with nested structure instances. Doing so makes
    it easy to interpret the data in the application domain of the program, and it
    is also straightforward to go from examples of information to data. Of course,
    it is really the task of data definitions to specify how to go back and forth
    between information and data. Before we study data definitions for structure type
    definitions, however, we first take a systematic look at computing with, and thinking
    about, structures.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5Computing with Structures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Structure types generalizes Cartesian points in two ways. First, a structure
    type may specify an arbitrary number of fields: zero, one, two, three, and so
    forth. Second, structure types name fields, they don’t number them.Most programming
    languages also support structure-like data that use numeric field names. Programmers
    often want to bundle several pieces of information into one, and it is much easier
    to remember that a family name is available in a field called last-name than in
    the 7th field.'
  prefs: []
  type: TYPE_NORMAL
- en: In the same spirit, computing with structure instances generalizes the manipulation
    of Cartesian points. To appreciate this idea, let us first look at a diagrammatic
    way to think about structure instances as lock boxes with as many compartments
    as there are fields. Here is a representation of
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) pl
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-entry "Sara Lee" "666-7771" "lee@camlu.edu")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'as such a diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/135ff27e050d3ab1e596c1a0aefb41a8.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The box itself carries an italicized label, identifying it as an instance of
    a specific structure type definition. Each compartment is labeled, too. The other
    instance of entry from the preceding section,
  prefs: []
  type: TYPE_NORMAL
- en: (make-entry "Tara Harp" "666-7770" "th@smlu.edu")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'corresponds to a similar box diagram, though the content differs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f4e9c831d2725975a8d55731e1d51afa.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Not surprisingly, nested structures instances have a diagram of boxes nested
    in boxes. Thus, ball1 from above is equivalent to this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/de9cfc91c439741866134f5a74656e8b.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: In this case, the outer box contains two boxes, one per field. Generally speaking,
    structure instances and their boxes can be nested arbitrarily deep. The next part
    of this book is going to study examples of this kind.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 69\. Draw box representations for the solution of [exercise 65](#%28counter._%28exercise._struct3%29%29).
    [![image](../Images/57b12026cdb35c8c2fe47283ead9fc9e.jpg)](#%28counter._%28exercise._struct3a%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'In the context of this imagery, a selector is like a key. It opens a specific
    compartment for a certain kind of box and thus enables the holder to extract its
    content. Hence, applying entry-name to pl from above yields a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (entry-name pl) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Sara Lee" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'But entry-name applied to a posn structure signals an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (entry-name ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 42 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| entry-name: expects an entry, given (posn 42 5) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If a compartment contains a box, it might be necessary to use two selectors
    in a row to get to the desired number:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (ball-velocity ball1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (make-vel -10 5) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Applying ball-velocity to ball1 extracts the value of the velocity field, which
    is an instance of vel. To get to the velocity along the x axis, we apply a selector
    to the result of the first selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (vel-deltax (ball-velocity ball1)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| -10 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Since the inner expression extracts the velocity from ball1, the outer expression
    extracts the value of the deltax field, which in this case is -10.The interactions
    also show that structure instances are values. DrRacket prints them exactly as
    entered, just like for plain values such as numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (make-vel -10 5) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (make-vel -10 5) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (make-entry "Tara Harp" "666-7770" "th@smlu.edu") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (make-entry "Tara Harp" "666-7770" "th@smlu.edu") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > (make-centry &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     "Shriram Fisler" &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (make-phone 207 "363-2421") &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (make-phone 101 "776-1099") &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (make-phone 208 "112-9981")) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| (make-centry ...) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Try this last interaction at home, so you see the proper result.
  prefs: []
  type: TYPE_NORMAL
- en: Generally speaking, each structure type definition creates not only new functions
    and new ways to create values, but it also adds new laws of computation to DrRacket’s
    knowledge. These laws generalize those for subscripting posn structures in [Computing
    with posns](#%28part._sec~3aeval-posns%29), and they are most easily understood
    by example.
  prefs: []
  type: TYPE_NORMAL
- en: When DrRacket encounters a structure type definition with two fields,
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) ball [location velocity])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'it introduces two laws, one per selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (ball-location  (make-ball  l0  v0)) |  | == |  | l0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (ball-velocity  (make-ball  l0  v0)) |  | == |  | v0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: For different structure type definitions, it introduces analogous laws. Thus,
    if a program contains the definition
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) vel [deltax deltay])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'DrRacket uses these two laws:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (vel-deltax  (make-vel  dx0  dy0)) |  | == |  | dx0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (vel-deltay  (make-vel  dx0  dy0)) |  | == |  | dy0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Using these laws, we can now explain the interaction from above:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (vel-deltax (ball-velocity ball1)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket replaces ball1 with its value |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (vel-deltax |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (ball-velocity |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (make-ball ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 30 40) (make-vel -10 5))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket uses the law for ball-velocity |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (vel-deltax (make-vel -10 5)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; DrRacket uses the law for vel-deltax |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| -10 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Exercise 70\. Spell out the laws for these structure type definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) centry [name home office cell])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) phone [area number])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Use these laws to explain how DrRacket finds 101 as the value of
  prefs: []
  type: TYPE_NORMAL
- en: '| (phone-area |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  (centry-office |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-centry |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     "Shriram Fisler" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (make-phone 207 "363-2421") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (make-phone 101 "776-1099") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (make-phone 208 "112-9981")))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Show every step of the computation. Confirm them with the stepper. [![image](../Images/965707828ec7435da8bb55321efbe208.jpg)](#%28counter._%28exercise._ex~3acompute-struct1%29%29)Predicates
    are the last idea that we must discuss to understand structure type definitions.
    As mentioned, every structure type definition introduces one new predicate. DrRacket
    uses these predicates to discover whether a selector is applied to the proper
    kind of value; the next chapter explains this idea in detail. Here we just want
    to bring across that these predicates are just like the predicates from “arithmetic.”
    While [number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29)
    recognizes numbers and [string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29)
    recognizes strings, predicates such as [posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29)
    and entry? recognize posn structures and entry structures. We can confirm our
    ideas of how they work with experiments in the interactions area. Assume that
    the definitions area contains these definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ap ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 7 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) pl
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-entry "Sara Lee" "666-7771" "lee@camlu.edu")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If [posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29)
    is a predicate that distinguishes posns from all other values, we should expect
    that it yields #false for numbers and #true for ap:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) ap)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) 42)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 3 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Similarly, entry? distinguishes entry structures from all other values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (entry? pl) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (entry? 42) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (entry? #true) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In general, a predicate recognizes exactly those values constructed with a
    constructor of the same name. [Intermezzo: BSL](#%28part._i1-2%29) explains this
    law in detail, and it also collects the laws of computing for BSL in one place.Exercise 71\.
    Place the following into DrRacket’s definition area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; distances in terms of pixels: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT 200)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MIDDLE ([quotient](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._quotient%29%29) HEIGHT 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH  400)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) CENTER ([quotient](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._quotient%29%29) WIDTH 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) game [left-player right-player ball])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) game0
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-game MIDDLE MIDDLE ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) CENTER CENTER)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Click RUN and evaluate the following expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (game-ball game0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) (game-ball game0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (game-left-player game0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Explain the results with step-by-step computations. Double-check your computations
    with DrRacket’s stepper. [![image](../Images/4e16b66e08c3fffa97ef281263586103.jpg)](#%28counter._%28exercise._ex~3acompute-struct2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 5.6Programming with Structures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Proper programming calls for data definitions. With the introduction of structure
    type definitions, data definitions become interesting. Remember that a data definition
    provides a way of representing information into data and interpreting data as
    information. For structure types, this calls for a description of what kind of
    data goes into which field. For some structure type definitions formulating such
    descriptions is easy and obvious:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) posn [x y])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Posn is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  [Number](#%28tech._number%29)  [Number](#%28tech._number%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation a point x pixels from left, y from top |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It doesn’t make any sense to use other kinds of data to create a posn. Similarly,
    all instances of entry—<wbr>our structure type definition for entries on a contact
    list—<wbr>are clearly supposed to be strings according to our usage in the preceding
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) entry [name phone email])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Entry is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-entry  [String](#%28tech._string%29)  [String](#%28tech._string%29)  [String](#%28tech._string%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation a contact''s name, phone#, and email |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'For both of them, it is also straightforward to describe how a reader is to
    interpret instances of these structures in the application domain.Contrast this
    simplicity with the structure type definition for ball, which obviously allows
    at least two distinct interpretations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) ball [location velocity])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Ball-1d is a structure:   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-ball  [Number](#%28tech._number%29)  [Number](#%28tech._number%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation 1 distance to top and velocity |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation 2 distance to left and velocity |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Whichever one we use in a program, we must stick to it consistently. As [Defining
    Structure Types](#%28part._sec~3astructures%29) shows, however, it is also possible
    to use ball structures in an entirely different manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Ball-2d is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-ball  [Posn](#%28tech._posn%29)  [Vel](#%28tech._vel%29)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation a 2-dimensional position and velocity |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) vel [deltax deltay])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Vel is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-vel  [Number](#%28tech._number%29)  [Number](#%28tech._number%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  (make-vel  dx  dy) means a velocity of |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; dx pixels [per tick] along the horizontal and |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; dy pixels [per tick] along the vertical direction |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Here we name a second collection of data, [Ball-2d](#%28tech._ball._2d%29),
    distinct from [Ball-1d](#%28tech._ball._1d%29), to describe data representations
    for balls that move in straight lines across a world canvas. In short, it is possible
    to use one and the same structure type in two different ways. Of course, within
    one program, it is best to stick to one and only one use; otherwise you are setting
    yourself up for problems.
  prefs: []
  type: TYPE_NORMAL
- en: Also [Ball-2d](#%28tech._ball._2d%29) refers to another one of our data definitions,
    namely, the one for [Vel](#%28tech._vel%29). While all other data definitions
    have thus far referred to built-in data collections ([Number](#%28tech._number%29),
    [Boolean](#%28tech._boolean%29), [String](#%28tech._string%29)), it is perfectly
    acceptable, and indeed common, that one of your data definition refers to another.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 72\. Formulate a data definition for the above phone structure type
    definition that accommodates the given examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next formulate a data definition for phone numbers using this structure type
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) phone# [area switch num])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Historically, the first three digits make up the area code, the next three the
    code for the phone switch (exchange) of your neighborhood, and the last four represent
    the phone with respect to the neighborhood. Describe the content of the three
    fields as precisely as possible with intervals. [![image](../Images/ecbd9ace7e99b606d99c3124a1608c0d.jpg)](#%28counter._%28exercise._struct6%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you might be wondering what data definitions really mean. This
    question, and its answer, is the topic of the next section. For now, we indicate
    how to use data definitions for program design.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a problem statement to set up some context:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample Problem Your team is designing an interactive game program that moves
    a red dot across a 100 x 100 canvas and allows players to use the mouse to reset
    the dot. Here is how far you got together:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MTS ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 100))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) DOT ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 3 "solid" "red"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A [Posn](#%28tech._posn%29) represents the state of the world. |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Posn](#%28tech._posn%29) -> [Posn](#%28tech._posn%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main p0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) p0
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) x+]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-mouse](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-mouse%29%29) reset-dot]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) scene+dot]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your task is to design scene+dot, the function that adds a red dot to the empty
    canvas at the specified position.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The problem context dictates the signature of your function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Posn](#%28tech._posn%29) -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds a red spot to MTS at p |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (scene+dot p) MTS)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Adding a purpose statement is straightforward. As [Designing Functions](#%28part._sec~3adesign-func%29)
    mentions, it uses the function’s parameter to express what the function computes.Next
    we work out a couple of examples and formulate them as tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (scene+dot ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 10 20))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) DOT 10 20 MTS))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (scene+dot ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 88 73))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) DOT 88 73 MTS))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Given that the function consumes a [Posn](#%28tech._posn%29), we know that
    the function can extract the values of the x and y fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (scene+dot p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Once we see these additional pieces in the body of the function, the rest of
    the definition is straightforward. Using [place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29),
    the function puts DOT into MTS at the coordinates contained in p:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (scene+dot p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) DOT ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) p) MTS))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'A function may produce structures. Let’s resume our sample problem from above
    because it includes just such a task:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem A colleague is asked to define x+, a function that consumes a
    [Posn](#%28tech._posn%29) and increases the x-coordinate by 3.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Recall that the x+ function handles clock ticks.We can adapt the first few
    steps of the design of scene+dot:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Posn](#%28tech._posn%29) -> [Posn](#%28tech._posn%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; increases the x-coordinate of p by 3 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (x+ ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 10 0)) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 13 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (x+ p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The signature, the purpose, and the example all come out of the problem statement.
    Instead of a header—<wbr>a function with a default result—<wbr>our sketch contains
    the two selector expressions for [Posn](#%28tech._posn%29)s. After all, the information
    for the result must come from the inputs, and the input is a structure that contains
    two values.Finishing the definition is a small step now. Since the desired result
    is a [Posn](#%28tech._posn%29), which are created with [make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29),
    the function can use it to combine the pieces in the skeleton:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (x+ p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p) 3) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) p)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 73\. Design the function posn-up-x, which consumes a [Posn](#%28tech._posn%29)
    p and a Number n. It produces a [Posn](#%28tech._posn%29) like p with n in the
    x field.
  prefs: []
  type: TYPE_NORMAL
- en: 'A neat observation is that we can define x+ using posn-up-x:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (x+ p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (posn-up-x p ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p) 3)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note Functions such as posn-up-x are often called updaters or functional setters.
    They are extremely useful when you write large programs. [![image](../Images/d8db57b0699165888ad0eb8e11d435b4.jpg)](#%28counter._%28exercise._ex~3aupdater1%29%29)A
    function may also produce instances from atomic data. While [make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)
    is a built-in primitive that does so, our running problem provides another fitting
    illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Another colleague is tasked to design reset-dot, a function that
    resets the dot when the mouse is clicked.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To tackle this problem, you need to recall from [Designing World Programs](#%28part._.D.K._sec~3adesign-world%29)
    that mouse-event handlers consume four values: the current state of the world,
    the x- and y-coordinate of the mouse click, and a [MouseEvt](#%28tech._mouseevt%29).By
    combining the knowledge from the sample problem with the general world-design
    recipe, we get a preliminary definition, including a signature and a purpose statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Posn](#%28tech._posn%29)  [Number](#%28tech._number%29)  [Number](#%28tech._number%29)  [MouseEvt](#%28tech._mouseevt%29)
    -> [Posn](#%28tech._posn%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; for mouse clicks, ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  x  y);
    otherwise p |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (reset-dot p x y me)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   p) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In BSL, it is possible to make up examples for functions that deal with mouse
    events. We need a [Posn](#%28tech._posn%29), two numbers, and a [MouseEvt](#%28tech._mouseevt%29),
    which is just a special kind of [String](#%28tech._string%29). A mouse click,
    for example, is represented with two strings: "button-down" and "button-up". The
    first one signals that a user pressed the mouse button, the latter signals the
    release of the button. With this in mind, here are two examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (reset-dot ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 10 20) 29 31 "button-down")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 29 31))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (reset-dot ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 10 20) 29 31 "button-up")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 10 20))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Interpret the two examples.Although the function consumes only atomic
    forms of data, its purpose statement and the examples suggest that it differentiates
    between two kinds of [MouseEvt](#%28tech._mouseevt%29)s: "button-down" and all
    others. Such a case split suggests a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (reset-dot p x y me)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([mouse=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._mouse~3d~3f%29%29) "button-down" me) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) p [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) x y [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) p [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) x y [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Following the design recipe, this skeleton mentions the parameters to remind
    you of what data is available.The rest is straightforward again because the purpose
    statement itself dictates what the function computes in each of the two cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (reset-dot p x y me)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([mouse=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._mouse~3d~3f%29%29) me "button-down") ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) x y)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) p]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: As above, we could have mentioned that [make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)
    creates instances of [Posn](#%28tech._posn%29) but you know this, and we don’t
    need to remind you constantly.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 74\. Copy all relevant constant and function definitions to DrRacket’s
    definition area. Add the tests and make sure they pass. Then run the program and
    use the mouse to place the red dot. [![image](../Images/6d01c35b8069c4dc3b8c5747255b2efd.jpg)](#%28counter._%28exercise._ex~3arun-mouse-program%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Many programs deal with nested structures. We illustrate this point with another
    small excerpt from a world program:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Your team is designing a game program that keeps track of an
    object that moves across the canvas at changing speed. The chosen data representation
    requires two data definitions:Remember it’s about physics.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) ufo [loc vel])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A UFO is a structure: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-ufo  [Posn](#%28tech._posn%29)  [Vel](#%28tech._vel%29)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  (make-ufo  p  v) is at location |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; p moving at velocity v. |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is your task to develop ufo-move-1. The function computes the location of
    a given [UFO](#%28tech._ufo%29) after one clock tick passes.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The order of these definitions matters. See [Intermezzo: BSL](#%28part._i1-2%29).'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let us start with some examples that explore the data definitions a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) v1 (make-vel 8 -3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) v2 (make-vel -5 -3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) p1 ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 22 80))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) p2 ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 30 77))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) u1 (make-ufo p1 v1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) u2 (make-ufo p1 v2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) u3 (make-ufo p2 v1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) u4 (make-ufo p2 v2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first four are elements of [Vel](#%28tech._vel%29) and [Posn](#%28tech._posn%29).
    The last four combine the first four in all possible combinations.Next we write
    down a signature, a purpose, some examples and a function header:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [UFO](#%28tech._ufo%29) -> [UFO](#%28tech._ufo%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines where u moves in one clock tick; |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; leaves the velocity as is |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (ufo-move-1 u1) u3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (ufo-move-1 u2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               (make-ufo ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 17 77) v2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (ufo-move-1 u) u)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'For the function examples, we use the data examples and our domain knowledge
    of positions and velocities. Specifically, we know that a vehicle that is moving
    north at 60 miles per hour and west at 10 miles per hour is going to end up 60
    miles north from its starting point and 10 miles west, after one hour of driving.
    After two hours, it will be 120 miles north from the starting point and 20 miles
    to its west.As always a function that consumes a structure instance can (and probably
    must) extract information from the structure to compute its result. So once again
    we add selector expressions to the function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (ufo-move-1 u)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (ufo-loc u) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (ufo-vel u) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note The selector expressions raise the question whether we need to refine
    this sketch even more. After all, the two expressions extract instances of [Posn](#%28tech._posn%29)
    and [Vel](#%28tech._vel%29), respectively. These two are also structure instances,
    and we could extract values from them in turn. Here is what the resulting skeleton
    would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [UFO](#%28tech._ufo%29) -> [UFO](#%28tech._ufo%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (ufo-move-1 u)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) (ufo-loc u)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) (ufo-loc u)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (vel-deltax (ufo-vel u)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (vel-deltay (ufo-vel u)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Doing so obviously makes the sketch look quite complex, however. For truly realistic
    programs, following this idea to its logical end would create incredibly complex
    program outlines. More generally,
  prefs: []
  type: TYPE_NORMAL
- en: If a function deals with nested structures, develop one function per level of
    nesting.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In the second part of the book, this guideline becomes even more important
    and we refine it a bit. EndHere we focus on how to combine the given [Posn](#%28tech._posn%29)
    and the given [Vel](#%28tech._vel%29) in order to obtain the next location of
    the [UFO](#%28tech._ufo%29)—<wbr>because that’s what our physics knowledge tells
    us. Specifically, it says to “add” the two together, where “adding” can’t mean
    the operation we usually apply to numbers. So let us imagine that we have a function
    for adding a [Vel](#%28tech._vel%29) to a [Posn](#%28tech._posn%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Posn](#%28tech._posn%29)  [Vel](#%28tech._vel%29) -> [Posn](#%28tech._posn%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds v to p |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (posn+ p v) p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Writing down the signature, purpose, and header like this is a legitimate way
    of programming. It is called “making a wish” and is a part of “making a wish list”
    as described in [From Functions to Programs](#%28part._sec~3adesign%29).The key
    is to make wishes in such a way that we can complete the function that we are
    working on. In this manner, we can split difficult programming tasks into different
    tasks, a technique that helps us solve problems in reasonably small steps. For
    the sample problem, we get a complete definition for ufo-move-1:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (ufo-move-1 u)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-ufo (posn+ (ufo-loc u) (ufo-vel u)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (ufo-vel u))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Because ufo-move-1 and posn+ are complete definitions, we can even click RUN,
    which checks that DrRacket doesn’t complain about grammatical problems with our
    work so far. Naturally, the tests fail because posn+ is just a wish, not the function
    we need.Now it is time to focus on posn+. We have completed the first two steps
    of the design (data definitions, signature/purpose/header), so we must create
    examples. One easy way to create functional examples for a “wish” is to use the
    examples for the original function and to turn them into examples for the new
    function:In geometry, the operation corresponding to posn+ is called a translation.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (posn+ p1 v1) p2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (posn+ p1 v2) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 17 77))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'For this problem, we know that (ufo-move-1  (make-ufo  p1  v1)) is to produce
    p2. At the same time, we know that ufo-move-1 applies posn+ to p1 and v1, implying
    that posn+ must produce p2 for these inputs. Stop! Check our manual calculations
    to insure you are following what we are doing.We are now able to add selector
    expressions to our design sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (posn+ p v)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (vel-deltax v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (vel-deltay v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Because posn+ consumes instances of [Posn](#%28tech._posn%29) and [Vel](#%28tech._vel%29)
    and because each piece of data is an instance of a two-field structure, we get
    four expressions. In contrast to the nested selector expressions from above, these
    are simple applications of a selector to a parameter.If we remind ourselves what
    these four expressions represent, or if we recall how we computed the desired
    results from the two structures, our completion of the definition of posn+ is
    straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (posn+ p v)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p) (vel-deltax v))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) p) (vel-deltay v))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The first step is to add the velocity in the horizontal direction to the x-coordinate
    and the velocity in the vertical direction to the y-coordinate. This yields two
    expressions, one per new coordinate. With [make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)
    we can combine them into a single [Posn](#%28tech._posn%29) again.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 75\. Enter these definitions and their test cases into the definitions
    area of DrRacket and make sure they work. It is the first time that we made a
    “wish” and you need to make sure you understand how the two functions work together.
    [![image](../Images/88f36bde5257a6b76bdcd77b503970d4.jpg)](#%28counter._%28exercise._ex~3atry-it-out%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 5.7The Universe of Data
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Every language comes with a universe of data. This data represents information
    from and about the external world; it is what programs manipulate. This universe
    of data is a collection that containsRemember that mathematicians call data collections
    or data classes sets. all built-in data but any piece of data that any program
    may ever create.
  prefs: []
  type: TYPE_NORMAL
- en: The left side of [figure 30](#%28counter._data-uni._%28figure._fig~3auniverse%29%29)
    shows one way to imagine the universe of BSL. Since there are an infinitely many
    numbers and strings, the collection of all data is infinite. We indicate “infinity”
    in the figure with “...” but a real definition would have to avoid this imprecision.
  prefs: []
  type: TYPE_NORMAL
- en: Neither programs nor individual functions in programs deal with the entire universe
    of data. It is the purpose of a data definition to describe parts of this universe
    and to name these parts so that we can refer to them concisely. Put differently,
    a named data definition is a description of a collection of data, and that name
    is usable in other data definitions and in function signatures. In a function
    signature, the name specifies what data a function will deal with and, implicitly,
    which part of the universe of data it won’t deal with.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/d835d3edd470c47045983a45b47e2fe8.jpg)            ![image](../Images/15ca1d373bba63eb6b5236e9d497c85a.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 30: The universe of data'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Practically the data definitions of the first four chapters restrict built-in
    collections of data. They do so via an explicit or implicit itemization of all
    included values. For example, the region shaded with gray stripes on the right
    side in [figure 30](#%28counter._data-uni._%28figure._fig~3auniverse%29%29) depicts
    the following data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A BS is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  "hello", |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  "world", or |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  [pi](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._pi%29%29).
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: While this particular data definition looks silly, note the stylized mix of
    English and BSL that is used. Its meaning is precise and unambiguous, clarifying
    exactly which elements belong to [BS](#%28tech._data-uni._b%29) and which don’t.
  prefs: []
  type: TYPE_NORMAL
- en: The definition of structure types completely revised the picture. When a programmer
    defines a structure type, the universe expands with all possible structure instances.
    For example, the addition of posn means that instances of posn with all possible
    values in the two fields appear. The middle bubble in [figure 31](#%28counter._data-uni._%28figure._fig~3auni-struct%29%29)
    depicts the addition of these values, including such seeming nonsense as ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  "hello"  0)
    and ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  0  1)  2).
    And yes, some of these instances of posn make no sense to us. But, a BSL program
    may construct any of them.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/b9087a6180401a4addd73b81df6fae63.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 31: Adding structure to a universe'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Adding yet another structure type definition mixes and matches everything again.
    Say we add the definition for ball, also with two fields. As the third bubble
    in [figure 31](#%28counter._data-uni._%28figure._fig~3auni-struct%29%29) shows,
    this addition creates instances of ball that contain numbers, posn structures,
    and so on as well as instances of posn that contain instances of ball. Try it
    out in DrRacket! Add
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) ball [location velocity])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: to the definitions area, hit RUN, and create some structure instances.As far
    as the pragmatics of data definitions is concerned, a data definition for structure
    types describes large collections of data via combinations of existing data definitions
    with instances. When we write
  prefs: []
  type: TYPE_NORMAL
- en: ; Posn is ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  [Number](#%28tech._number%29)  [Number](#%28tech._number%29))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'we are describing an infinite number of possible instances of posn. Like above,
    the data definitions use combinations of natural language, data collections defined
    elsewhere and data constructors. Nothing else should show up in a data definition
    at the moment.A data definition for structures specifies a new collection of data
    made up of those instances to be used by our functions. For example, the data
    definition for [Posn](#%28tech._posn%29)s identifies the region shaded with gray
    stripes in the centered bubble of the universe in [figure 31](#%28counter._data-uni._%28figure._fig~3auni-struct%29%29),
    which includes all those posn structures whose two fields contain numbers. At
    the same time, it is perfectly possible to construct an instance of posn that
    doesn’t satisfy the requirement that both fields contain numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 1 1) "hello")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'this structure contains a posn in the x field and a string in the y field.Exercise 76\.
    Formulate data definitions for the following structure type definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  movie  [title  producer  year])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  person  [name  hair  eyes  phone])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  pet  [name  number])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  CD  [artist  title  price])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  sweater  [material  size  producer])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sensible assumptions as to what kind of values go into each field. [![image](../Images/2168928c253200ea74fe413aa902592e.jpg)](#%28counter._data-uni._%28exercise._struct7%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 77\. Provide a structure type definition and a data definition for
    representing points in time since midnight. A point in time consists of three
    numbers: hours, minutes, and seconds. [![image](../Images/0df706b0bf1e0609c87c6d8f97443f75.jpg)](#%28counter._data-uni._%28exercise._ex~3atime-structure%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 78\. Provide a structure type definition and a data definition for
    representing three-letter words. A word consists of lower-case letters, represented
    with the one-letter strings "a" through "z" plus #false. Note This exercise is
    a part of the design of a Hangman game; see [exercise 396](part_four.html#%28counter._%28exercise._ex~3ahangman-list%29%29).
    [![image](../Images/6e278842766dd12be70b3b61ae5187f2.jpg)](#%28counter._data-uni._%28exercise._struct9%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Programmers not only write data definitions, they also read them in order to
    understand programs, to expand the kind of data they can deal with, to eliminate
    errors, and so on. We read a data definition to understand how to create data
    that belongs to the designated collection and to determine whether some piece
    of data belongs to some specified class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since data definitions play such a central and important role in the design
    process, it is often best to illustrate data definitions with examples just like
    we illustrate the behavior of functions with examples. And indeed, creating data
    examples from a data definition is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: for a built-in collection of data (number, string, Boolean, images), choose
    your favorite examples;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note On occasion, people use descriptive names to qualify built-in data collections,
    such as NegativeNumber or OneLetterString. They are no replacement for a well-written
    data definition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for an enumeration, use several of the items of the enumeration;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for intervals, use the end points (if they are included) and at least one interior
    point;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for itemizations, deal with each part separately; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for data definitions for structures, follow the natural language description,
    that is, use the constructor and pick an example from the data collection named
    for each field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That’s all there is to constructing examples from data definitions for most
    of this book, though data definitions are going to become much more complex than
    what you have seen so far.Exercise 79\. Create examples for the following data
    definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Color is one of: |'
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  "white" |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  "yellow" |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  "orange" |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  "green" |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  "red" |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  "blue" |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  "black" |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Note DrRacket recognizes many more strings as colors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; H is a [Number](#%28tech._number%29) between 0 and 100. |'
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation represents a “happiness value” |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) person [fstname lstname male?])
    |'
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Person is a structure: |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-person  [String](#%28tech._string%29)  [String](#%28tech._string%29)  [Boolean](#%28tech._boolean%29))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Is it a good idea to use a field name that looks like the name of a predicate?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) dog [owner name age happiness])
    |'
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Dog is a structure: |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-dog  [Person](#%28tech._data-uni._person%29)  [String](#%28tech._string%29)  [PositiveInteger](#%28tech._positiveinteger%29)  [H](#%28tech._data-uni._h%29))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Add an interpretation to this data definition, too.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; A Weapon is one of: |'
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  #false |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; —<wbr>  [Posn](#%28tech._posn%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  #false means the missile hasn''t |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; been fired yet; a [Posn](#%28tech._posn%29) means it is in flight |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The last definition is an unusual itemization, combining built-in data with
    a structure type. The next chapter deals with such definitions in depth. [![image](../Images/86d66117c44e55900e2c86092ae27e36.jpg)](#%28counter._data-uni._%28exercise._struct10%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 5.8Designing with Structures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The introduction of structure types reinforces the need for all six steps in
    the design recipe. It no longer suffices to rely on built-in data collections
    to represent information; it is now clear that programmers must create data definitions
    for all but the simplest problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section revises the design recipe illustrating it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a function that computes the distance of objects in a
    3-dimensional space to the origin.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here we go:'
  prefs: []
  type: TYPE_NORMAL
- en: When a problem calls for the representation of pieces of information that belong
    together or describe a natural whole, you need a structure type definition. It
    requires as many fields as there are relevant properties. An instance of this
    structure type corresponds to the whole, and the values in the fields to its attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A data definition for a structure type introduces a name for the collection
    of instances that are legitimate. Furthermore it must describe which kind of data
    goes with which field. Use only names of built-in data collections or previously
    defined data definitions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the end, we (and others) must be able to use the data definition to create
    sample structure instances. Otherwise, something is wrong with our data definition.
    To ensure that we can create instances, our data definitions should come with
    data examples.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here is how we apply this idea to the sample problem:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) r3 [x y z])
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A R3 is a structure: |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-r3  [Number](#%28tech._number%29)  [Number](#%28tech._number%29)  [Number](#%28tech._number%29))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ex1 (make-r3 1 2 13))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ex2 (make-r3 -1 0 3))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The structure type definition introduces a new kind of structure, r3, and the
    data definition introduces [R3](#%28tech._r3%29) as the name for all instances
    of r3 that contain only numbers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You still need a signature, a purpose statement, and a function header but they
    remain the same. Stop! Do it for the sample problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the examples from the first step to create functional examples. For each
    field associated with intervals or enumerations, make sure to pick end points
    and intermediate points to create functional examples. We expect you to continue
    working on the sample problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A function that consumes structures usually—<wbr>though not always—<wbr>extracts
    the values from the various fields in the structure. To remind yourself of this
    possibility, add a selector for each field to the templates for such functions.
    Furthermore, you may want to write down next to each selector expression what
    kind of data it extracts from the given structure; this information is found in
    the data definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is what we have for the sample problem:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; [R3](#%28tech._r3%29) -> [Number](#%28tech._number%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines the distance of p to the origin |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (r3-distance-to-0 p)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (r3-x p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (r3-y p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (r3-z p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Write down next to each selector expression what kind of data it extracts
    from p.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the selector expressions from the template when you define the function.
    Keep in mind that you may not need some of them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test. Test as soon as the function header is written. Test until all expressions
    have been covered. Test again when you make changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finish the sample problem. If you cannot remember the distance of a 3-dimensional
    point to the origin, look it up in a geometry book.There you will find a formula
    such as ![image](../Images/b6861ea338218b6698f7f44ebedf992a.jpg).Exercise 80\.
    Create templates for functions that consume instances of the following structure
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  movie  [title  director  year])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  person  [name  hair  eyes  phone])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  pet  [name  number])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  CD  [artist  title  price])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  sweater  [material  size  [color](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._color%29%29)])
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No, you do not need data definitions for this task. [![image](../Images/bbaedd58a2a287c22a3512be2b9ea9ba.jpg)](#%28counter._%28exercise._struct11%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 81\. Design the function time->seconds, which consumes instances of
    [time structures](#%28counter._data-uni._%28exercise._ex~3atime-structure%29%29)
    and produces the number of seconds that have passed since midnight. For example,
    if you are representing 12 hours, 30 minutes, and 2 seconds with one of these
    structures and if you then apply time->seconds to this instance, the correct result
    is 45002. [![image](../Images/11e86b3732319162ee629fe3b00a7608.jpg)](#%28counter._%28exercise._struct11a%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 82\. Design the function compare-word. The function consumes two ([representations
    of](#%28counter._data-uni._%28exercise._struct9%29%29)) three-letter words. It
    produces a word that indicates where the given ones agree and disagree. The function
    retains the content of the structure fields if the two agree; otherwise it places
    #false in the field of the resulting word. Hint The exercises mentions two tasks:
    the comparison of words and the comparison of “letters.” [![image](../Images/aacb422a0ee0327999ddaeff0932cb2e.jpg)](#%28counter._%28exercise._struct11b%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 5.9Structure in the World
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When a world program must track two independent pieces of information, we must
    use a collection of structures to represent the world state data. One field keeps
    track of one piece of information and the other field the second piece of information.
    Naturally, if the domain world contains more than two independent pieces of information,
    the structure type definition must specify as many fields as there are distinct
    pieces of information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a space invader game that consists of a UFO and a Tank. The UFO descends
    along a straight vertical line and some tank moves horizontally at the bottom
    of a scene. If both objects move at known constant speeds, all that’s needed to
    describe these two objects is one piece of information per object: the y-coordinate
    for the UFO and the x-coordinate for the tank. Putting those together requires
    a structure with two fields:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) space-game [ufo tank])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We leave it to you to formulate an adequate data definition for this structure
    type definition including an interpretation. Ponder the hyphen in the name of
    the structure. BSL really allows the use of all kinds of characters in the names
    of variables, functions, structures, and field names. What are the selector names
    for this structure, the name of the predicate?
  prefs: []
  type: TYPE_NORMAL
- en: Every time we say “piece of information,” we don’t necessarily mean a single
    number or a single word. A piece of information may itself combine several components.
    Thus, creating a data representation that consist of several complex pieces of
    information naturally leads to nested structures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add a modicum of spice to our imaginary space invader game. A UFO that
    descends only along a vertical line is boring. To turn this idea into an interesting
    game where the tank attacks the UFO with some weapon, the UFO must be able to
    descend in non-trivial lines, perhaps jumping randomly. An implementation of this
    idea means that we need two coordinates to describe the location of the UFO, so
    that our revised data definition for the space game becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A SpaceGame is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-space-game  [Posn](#%28tech._posn%29)  [Number](#%28tech._number%29)).
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  (make-space-game  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  ux  uy)  tx)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; describes a configuration where the UFO is |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; at (ux,uy) and the tank''s x-coordinate is tx |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Understanding what kind of data representations is needed for world programs
    takes practice. The following two sections introduce several reasonably complex
    problem statements. Solve them before moving on to the kind of games that you
    might like to design on your own.
  prefs: []
  type: TYPE_NORMAL
- en: 5.10A Graphical Editor
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To program in BSL, you open DrRacket, type on the keyboard, and watch text appear.
    Pressing the left arrow on the keyboard moves the cursor to the left; pressing
    the backspace (or delete) key erases a single letter to the left of the cursor—<wbr>if
    there is a letter to start with.
  prefs: []
  type: TYPE_NORMAL
- en: This process is called “editing” though its precise name should be “text editing
    of programs” because we will use “editing” for a more demanding task than typing
    on a keyboard. When you write and revise other kinds of documents, say, an English
    assignment, you are likely to use other software applications, called word processors,
    though computer scientists dub all of them editor or even graphical editor.
  prefs: []
  type: TYPE_NORMAL
- en: You are now in a position to design a world program that acts as a one-line
    editor for plain text. Editing here includes entering letters and somehow changing
    the already existing text, including the deletion and the insertion of letters.
    This implies some notion of position within the text. People call this position
    a cursor; most graphical editors display it in such a way that it can easily be
    spotted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following editor configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/0df315a6e6bf14449d65eef393a35cd3.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Someone might have entered the text “helloworld” and hit the left arrow key
    five times, causing the cursor to move from the end of the text to the position
    between “o” and “w.” Pressing the space bar would now cause the editor to change
    its display as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/b9e950b46c63445049958260d9b7521f.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'In short, the action inserts “ ” and places the cursor between it and “w.”Given
    this much, an editor must track two pieces of information:'
  prefs: []
  type: TYPE_NORMAL
- en: the text entered so far
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the current location of the cursor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And this suggests a structure type with two fields.We can imagine several different
    ways of going from the information to data and back. For example, one field in
    the structure may contain the entire text entered and the other the number of
    characters between the first character (counting from the left) and the cursor.
    Another data representation is to use two strings in the two fields: the part
    of the text to the left of the cursor and the part of the text to its right. Here
    is our preferred approach to representing the state of an editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) editor [pre post])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Editor is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-editor  [String](#%28tech._string%29)  [String](#%28tech._string%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  (make-editor  s  t) describes an editor |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; whose visible text is ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29)  s  t)
    with |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; the cursor displayed between s and t |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Solve the next few exercises based on this data representation.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 83\. Design the function render, which consumes an [Editor](#%28tech._editor%29)
    and produces an image.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the function is to render the text within an empty scene of 200
    x 20 pixels. For the cursor, use a 1 x 20 red rectangle and for the strings, black
    text of size 16.
  prefs: []
  type: TYPE_NORMAL
- en: 'Develop the image for a sample string in DrRacket’s interaction area. We started
    with this expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([overlay/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%2Falign%29%29) "left" "center"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "hello
    world" 11 "black") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 200 20))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: You may wish to read up on [beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29),
    [above](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%29%29),
    and such functions. When you are happy with the looks of the image, use the expression
    as a test and as a guide to the design of render. [![image](../Images/5a7c13aa42e3c8a152b923257c47ce24.jpg)](#%28counter._%28exercise._struct-edit0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 84\. Design edit. The function consumes two inputs, an editor ed and
    a [KeyEvent](#%28tech._keyevent%29) ke, and it produces another editor. Its task
    is to add a single-character [KeyEvent](#%28tech._keyevent%29) ke to the end of
    the pre field of ed, unless ke denotes the backspace ("\b") key. In that case,
    it deletes the character immediately to the left of the cursor (if there are any).
    The function ignores the tab key ("\t") and the return key ("\r").
  prefs: []
  type: TYPE_NORMAL
- en: 'The function pays attention to only two [KeyEvent](#%28tech._keyevent%29)s
    longer than one letter: "left" and "right". The left arrow moves the cursor one
    character to the left (if any), and the right arrow moves it one character to
    the right (if any). All other such [KeyEvent](#%28tech._keyevent%29)s are ignored.'
  prefs: []
  type: TYPE_NORMAL
- en: Develop a good number of examples for edit, paying attention to special cases.
    When we solved this exercise, we created 20 examples and turned all of them into
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: Hint Think of this function as consuming [KeyEvent](#%28tech._keyevent%29)s,
    a collection that is specified as an enumeration. It uses auxiliary functions
    to deal with the [Editor](#%28tech._editor%29) structure. Keep a wish list handy;
    you will need to design additional functions for most of these auxiliary functions,
    such as string-first, string-rest, string-last, and string-remove-last. If you
    haven’t done so, solve the exercises in [Functions](#%28part._sec~3afuncs%29).
    [![image](../Images/b01f5f7558d2cc56474bfedd44f520ab.jpg)](#%28counter._%28exercise._struct-edit1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 85\. Define the function run. It consumes a string, the pre field of
    an editor, and launches an interactive editor, using render and edit from the
    preceding two exercises for the [to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29)
    and [on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29)
    clauses. [![image](../Images/0e343450c86b16a700bbb07a43e6a966.jpg)](#%28counter._%28exercise._struct-edit2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 86\. Notice that if you type a lot, your editor program does not display
    all of the text. Instead the text is cut off at the right margin. Modify your
    function edit from [exercise 84](#%28counter._%28exercise._struct-edit1%29%29)
    so that it ignores a keystroke if adding it to the end of the pre field would
    mean the rendered text is too wide for your canvas. [![image](../Images/956076831476f1da27a8a109acdefe7d.jpg)](#%28counter._%28exercise._struct-edit3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 87\. Develop a data representation for an editor based on our first
    idea, using a string and an index. Then solve the preceding exercises again. Re-trace
    the design recipe. Hint if you haven’t done so, solve the exercises in [Functions](#%28part._sec~3afuncs%29).
  prefs: []
  type: TYPE_NORMAL
- en: Note on Design Choices The exercise is a first study of making design choices.
    It shows that the very first design choice concerns the data representation. Making
    the right choice requires planning ahead and weighing the complexity of each.
    Of course, getting good at this is a question of gaining experience. [![image](../Images/6fc83ba77bd280949653fe4408afaa20.jpg)](#%28counter._%28exercise._struct-edit4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 5.11More Virtual Pets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this section we continue our virtual zoo project from [Virtual Pet Worlds](#%28part._sec~3azoo1%29).
    Specifically, the goal of the exercise is to combine the cat world program with
    the program for managing its happiness gauge. When the combined program runs,
    you see the cat walking across the canvas and, with each step, its happiness goes
    down. The only way to make the cat happy is to feed it (down arrow) or to pet
    it (up arrow). Finally, the goal of the last exercise is create another virtual,
    happy pet.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 88\. Define a structure type that keeps track of the cat’s x-coordinate
    and its happiness. Then formulate a data definition for cats, dubbed VCat, including
    an interpretation. [![image](../Images/2ed008310b30bdb5eed4b3e6275d92e8.jpg)](#%28counter._%28exercise._struct12%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 89\. Design the happy-cat world program, which manages a walking cat
    and its happiness level. Let’s assume that the cat starts out with perfect happiness.
  prefs: []
  type: TYPE_NORMAL
- en: Hints (1) Reuse the functions from the world programs in [Virtual Pet Worlds](#%28part._sec~3azoo1%29).
    (2) Use structure type from the preceding exercise to represent the state of the
    world. [![image](../Images/1af3c4ee7781a9d251676a274d42358c.jpg)](#%28counter._%28exercise._struct13%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 90\. Modify the happy-cat program from the preceding exercises so that
    it stops when the cat’s happiness ever falls to 0. [![image](../Images/0b884823b478df4fed4e4e08534a1217.jpg)](#%28counter._%28exercise._struct14%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 91\. Extend your structure type definition and data definition from
    [exercise 88](#%28counter._%28exercise._struct12%29%29) to include a direction
    field. Adjust your happy-cat program so that the cat moves in the specified direction.
    The program should move the cat in the current direction, and it should turn the
    cat around when it reaches either end of the scene. [![image](../Images/00862007c1beaa1e489f0d33c1b7d458.jpg)](#%28counter._%28exercise._struct15%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) cham ![](../Images/24e1a62869ba11021622d6184afb4fe1.jpg))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The above drawing of a chameleon is a transparent image. To insert it into DrRacket,
    insert it with the “Insert Image” menu item. Using this instruction preserves
    the transparency of the drawing’s pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a partly transparent image is combined with a colored shape, say a rectangle,
    the image takes on the underlying color. In the chameleon drawing, it is actually
    the inside of the animal that is transparent; the area outside is solid white.
    Try out this expression in your DrRacket:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) background
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) ([image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29) cham)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              ([image-height](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-height%29%29) cham)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              "solid" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              "red")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29) cham background)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 92\. Design the cham program, which has the chameleon continuously
    walking across the canvas, from left to right. When it reaches the right end of
    the canvas, it disappears and immediately reappears on the left. Like the cat,
    the chameleon gets hungry from all the walking and, as time passes by, this hunger
    expresses itself as unhappiness.
  prefs: []
  type: TYPE_NORMAL
- en: 'For managing the chameleon’s happiness gauge, you may reuse the happiness gauge
    from the virtual cat. To make the chameleon happy, you feed it (down arrow, two
    points only); petting isn’t allowed. Of course, like all chameleons, ours can
    change color, too: "r" turns it red, "b" blue, and "g" green. Add the chameleon
    world program to the virtual cat game and reuse functions from the latter when
    possible.'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a data definition, VCham, for representing chameleons. [![image](../Images/006b8a57fa4e5372249cf629237e8eac.jpg)](#%28counter._%28exercise._struct16%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 93\. Copy your solution to [exercise 92](#%28counter._%28exercise._struct16%29%29)
    and modify the copy so that the chameleon walks across a tricolor background.
    Our solution uses these colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) BACKGROUND
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT "green") Have
    some Italian pizza when you’re done. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT "white")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT "red")))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: but you may use any colors. Observe how the chameleon changes colors to blend
    in as it crosses the border between two colors.
  prefs: []
  type: TYPE_NORMAL
- en: Note When you watch the animation carefully, you see the chameleon riding on
    a white rectangle. If you know how to use image editing software, modify the picture
    so that the white rectangle is invisible. Then the chameleon will really blend
    in. [![image](../Images/0ef69b8a7d1c6daa2506132f27277a23.jpg)](#%28counter._%28exercise._struct16-copy%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 6Itemizations and Structures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding two chapters introduce two ways of formulating a data definitions.
    Those that employ itemization (enumeration and intervals) are used to create small
    collections from large ones. Those that use structures combine multiple collections.
    Since the development of data representations is the starting point for proper
    program design, it cannot surprise you that programmers frequently want to itemize
    data definitions that involve structures or use structures to combine itemized
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall the imaginary space invader game from [Structure in the World](#%28part._sec~3aworld-structs%29)
    in the preceding chapter. Thus far, it involves one UFO, descending from space,
    and one tank on the ground, moving horizontally. Our data representation uses
    a structure with two fields: one for the data representation of the UFO and another
    one for the data representation of the tank. Naturally players will want a tank
    that can fire off a missile. All of a sudden, we can think of a second kind of
    state that contains three independently moving objects: the UFO, the tank, and
    the missile. Thus we have two distinct structures: one for representing two independently
    moving objects and another one for the third. Since a world state may now be one
    of these two structures, it is natural to use an itemization to describe all possible
    states:'
  prefs: []
  type: TYPE_NORMAL
- en: the state of the world is a structure with two fields, or
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the state of the world is a structure with three fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As far as our domain isNo worries, the next part of the book is about firing
    as many missiles as you want, without reloading. concerned—<wbr>the actual game—<wbr>the
    first kind of state represents the time before the tank has launched its sole
    missile and the second one after the missile has been fired.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces the basic idea of itemizing data definitions that involve
    structures. Because we have all the other ingredients we need, we start straight
    with itemizing structures, After that, we discuss some examples, including world
    programs that benefit from our new power. The last section is about errors in
    programming.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1Designing with Itemizations, Again
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let us start with a refined problem statement for our space invader game from
    [Programming with Structures](#%28part._sec~3aprogstructs%29).
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a game program using the 2htdp/universe library for playing
    a simple space invader game. The player is in control of a tank (a small rectangle)
    that must defend our planet (the bottom of the canvas) from a UFO (see [Intervals](#%28part._sec~3aintervals%29)
    for one possibility) that descends from the top of the canvas to the bottom. In
    order to stop the UFO from landing, the player may fire a single missile (a triangle
    smaller than the tank) by hitting the space bar. In response, the missile emerges
    from the tank. If the UFO collides with the missile, the player wins; otherwise
    the UFO lands and the player loses.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here are some details concerning the three game objects and their movements.
    First, the tank moves a constant speed along the bottom of the canvas though the
    player may use the left arrow key and the right arrow key to change directions.
    Second, the UFO descends at a constant velocity but makes small random jumps to
    the left or right. Third, once fired the missile ascends along a straight vertical
    line at a constant speed at least twice as fast as the UFO descends. Finally,
    the UFO and the missile collide if their reference points are close enough, for
    whatever you think “close enough” means.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The following two subsections use this sample problem as a running example,
    so study it well and solve the following exercise before you continue. Doing so
    will help you understand the problem in enough depth.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 94\. Draw some sketches of what the game scenery looks like at various
    stages. Use the sketches to determine the constant and the variable pieces of
    the game. For the former, develop physical and graphical constants that describe
    the dimensions of the world (canvas) and its objects. Also develop some background
    scenery. Finally, create your initial scene from the constants for the tank, the
    UFO, and the background. [![image](../Images/8df96484e0daf43984943c1c2def10ff.jpg)](#%28counter._mix._%28exercise._mix1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Defining Itemizations The first step in our design recipe calls for the development
    of data definitions. One purpose of a data definition is to describe the construction
    of data that represent the state of the world; another is to describe all possible
    pieces of data that the functions of the world program may consume. Since we haven’t
    seen itemizations that include structures, this first subsection introduces the
    basic idea via example. While this is straightforward and probably won’t surprise
    you, pay close attention.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this space invader game, we could get away with one structure type definition
    of three fields where the third field contains #false until the missile is fired
    and a Posn for the missile’s coordinates thereafter. See below.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As argued in the introduction to this chapter, the space invader game with
    a missile-firing tank requires a data representation for two different kinds of
    game states. We choose two structure type definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) aim [ufo tank])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) fired [ufo tank missile])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first one is for the time period when the player is trying to get the tank
    in position for a shot, and the second one is for representing states after the
    missile is fired. Before we can formulate a data definition for the complete game
    state, however, we need data representations for the tank, the UFO, and the missile.Assuming
    constant definitions for such physical constants as WIDTH and HEIGHT, which are
    the subject of [exercise 94](#%28counter._mix._%28exercise._mix1%29%29), we formulate
    the data definitions like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A UFO is a [Posn](#%28tech._posn%29). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  x  y)
    is the UFO''s location |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; (using the top-down, left-to-right convention) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) tank [loc vel])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Tank is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-tank  [Number](#%28tech._number%29)  [Number](#%28tech._number%29)).
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  (make-tank  x  dx) specifies the position: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; (x, HEIGHT) and the tank''s speed: dx pixels/tick |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Missile is a [Posn](#%28tech._posn%29). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  x  y)
    is the missile''s place |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Each of these data definitions describes nothing but a structure, either a
    newly defined one, tank, or a built-in data collection, [Posn](#%28tech._posn%29).
    Concerning the latter, it may surprise you a little bit that [Posn](#%28tech._posn%29)s
    are used to represent two distinct aspects of the world. Then again we have used
    numbers (and strings and Boolean values) to represent many different kinds of
    information in the real world, so reusing a collection of structures such as Posn
    isn’t a big deal.Now we are in a position to formulate the data definitions for
    the state of the space invader game:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A SIGS is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-aim  [UFO](#%28tech._mix._ufo%29)  [Tank](#%28tech._mix._tank%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-fired  [UFO](#%28tech._mix._ufo%29)  [Tank](#%28tech._mix._tank%29)  [Missile](#%28tech._mix._missile%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation represents the complete state of a |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; space invader game |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The shape of the data definition is that of an itemization. Each clause, however,
    describes the content of a structure type, just like the data definition for structure
    types we have seen so far. Still, this data definition shows that not every data
    definition comes with exactly one structure type definition; here one data definition
    involves two distinct structure type definitions.The meaning of such a data definition
    is also straightforward. It introduces the name [SIGS](#%28tech._mix._sig%29)
    for the collection of all those structure instances that you can create according
    to the definition. So let us create some:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an instance that describes the tank maneuvering into position to fire
    the missile:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (make-aim ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 20 10) (make-tank 28 -3))
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This one is just like the previous one but the missile has been fired:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| (make-fired ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 20 10)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|             (make-tank 28 -3) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 28 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT TANK-HEIGHT)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Of course the capitalized names refer to the physical constants that you defined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, here is one where the missile is about to collide with the UFO:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| (make-fired ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 20 100)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|             (make-tank 100 3) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 22 103))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: This example assumes that the canvas is more than 100 pixels tall.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice that the first instance of [SIGS](#%28tech._mix._sig%29) is generated
    according to the first clause of the data definition, and the second and third
    follow the second clause. Naturally the numbers in each field depend on your choices
    for global game constants.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 95\. Explain why the three instances are generated according to the
    first or second clause of the data definition. [![image](../Images/105bc722942afddc92a2cce57cfb985b.jpg)](#%28counter._mix._%28exercise._mix2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 96\. Sketch how each of the three game states could be rendered assuming
    a 200 by 200 canvas. [![image](../Images/444c077a22cb999f457c988d0f9dd666.jpg)](#%28counter._mix._%28exercise._mix3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'The Design Recipe With a new way of formulating data definitions comes an inspection
    of the design recipe. This chapter introduces a way to combine two or more means
    of describing data, and the revised design recipe reflects this, especially the
    first step:'
  prefs: []
  type: TYPE_NORMAL
- en: When do you need this new way of defining data? You already know that the need
    for itemizations is due to distinctions among different classes of information
    in the problem statement. Similarly, the need for structure-based data definitions
    is due to the demand to group several different pieces of information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An itemization of different forms of data—<wbr>including collections of structures—<wbr>is
    required when your problem statement distinguishes different kinds of information
    and when at least some of these pieces of information consist of several different
    pieces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: One thing to keep in mind is that data definitions may refer to other data definitions.
    Hence, if a particular clause in a data definition looks overly complex, it is
    acceptable to write down a separate data definition for this clause and refer
    to this auxiliary definition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: And, as always, formulate data examples using the data definitions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The second step remains the same. Formulate a function signature that mentions
    only the names of defined or built-in data collections, add a purpose statement,
    and create a function header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nothing changes for the third step. You still need to formulate functional examples
    that illustrate the purpose statement from the second step, and you still need
    one example per item in the itemization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The development of the template now exploits two different dimensions: the
    itemization itself and the use of structures in its clauses.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By the first, the body of the template consists of a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression that has as many [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses as the itemizations has items. Furthermore, you must add a condition to
    each [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause that identifies the sub-class of data in the corresponding item.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By the second, if an item deals with a structure, the template contains the
    selector expressions—<wbr>in the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause that deals with the sub-class of data described in the item.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you choose to describe the data with a separate data definition, however,
    you do not add selector expressions. Instead, you create a template for the separate
    data definition to the task at hand and refer to that template with a function
    call. The latter indicates that this sub-class of data is being processed separately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Before going through the work of developing a template, briefly reflect on the
    nature of the function. If the problem statement suggests that there are several
    tasks to be performed, it is likely that a composition of several, separately
    designed functions is needed instead of a template. In that case, skip the template
    step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fill the gaps in the template. The more complex you make your data definitions,
    the more complex this step becomes. The good news is that this design recipe can
    help in many situations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are stuck, fill the easy cases first and use default values for the others.
    While this makes some of the test cases fail, you are making progress and you
    can visualize this progress.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you are stuck on some cases of the itemization, analyze the examples that
    correspond to those cases. Determine what the pieces of the template compute from
    the given inputs. Then consider how to combine these pieces (plus some constants)
    to compute the desired output. Keep in mind that you might need an auxiliary function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also if your template “calls” another template because the data definitions
    refer to each other, assume that the other function delivers what its purpose
    statement and its examples promise—<wbr>even if this other function’s definition
    isn’t finished yet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Test. If tests fail, determine what’s wrong: the function, the tests, or both.
    Go back to the appropriate step.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to [Designing Functions](#%28part._sec~3adesign-func%29), re-read the
    description of the simple design recipe, and compare it to this revision.
  prefs: []
  type: TYPE_NORMAL
- en: Let us illustrate the design recipe with the design of a rendering function
    for the sample problem at the beginning of this section. Recall that a [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression needs such a rendering function to turn the state of the world into
    an image after every clock tick, mouse click, or key stroke.
  prefs: []
  type: TYPE_NORMAL
- en: 'The signature of this rendering function says that it maps an element of the
    state-of-the-world class to the class of [Image](#%28tech._image%29)s:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [SIGS](#%28tech._mix._sig%29) -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds TANK, UFO, and possibly MISSILE to |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; the BACKGROUND scene |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (si-render s) BACKGROUND)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Here TANK, UFO, MISSILE and BACKGROUND are the requested image constants from
    [exercise 94](#%28counter._mix._%28exercise._mix1%29%29). Recall that this signature
    is just an instance of the general signature for rendering functions, which always
    consume the collections of world states and produce some image.
  prefs: []
  type: TYPE_NORMAL
- en: '| s |  | (si-render  s) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (make-aim &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 10 20)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (make-tank 28 -3)) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | ![image](../Images/1dea31bee495e87ac16ef2a3bbe878db.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (make-fired &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 20 100)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (make-tank 100 3) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 22 103))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | ![image](../Images/69836fdae4d23d20b50ccc491012982a.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (make-fired &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 10 20)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (make-tank 28 -3) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 32 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT TANK-HEIGHT 10)))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | ![image](../Images/4cca75c38ab16e04e002085aac007d81.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 32: Rendering space invader game states, by example'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since the itemization in the data definition consists of two items, let us make
    three examples, using the data examples from above. See [figure 32](#%28counter._mix._%28figure._fig~3asigs-examples%29%29).
    Unlike the function tables found in mathematics books, this table is rendered
    vertically. The left column contains sample inputs for our desired function, the
    right column lists the corresponding desired results. As you can see, we used
    the data examples from the first step of the design recipe, and they cover both
    items of the itemization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we turn to the development of the template, the most important step of
    the design process. First, we know that the body of si-render must be a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression with two [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses. Following the design recipe, the two conditions are (aim?  s) and (fired?  s),
    and they distinguish the two possible kinds of data that si-render may consume:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (si-render s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(aim? s) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(fired? s) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Second, we add selector expressions to every [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses that deals with structures. In this case, both clauses concern the processing
    of structures: aim and fired. The former comes with two fields and thus requires
    two selector expressions for the first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause, and the latter kind of structures consists of three values and thus demands
    three selector expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (si-render s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(aim? s) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (aim-tank s) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (aim-ufo s) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(fired? s) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (fired-tank s) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (fired-ufo s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (fired-missile s) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The template contains nearly everything we need to finish our task. To complete
    the definition, we figure out for each [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line how to combine the values we have to compute the expected result. Beyond
    the pieces of the input, we may also use globally defined constants, for example,
    BACKGROUND, which is obviously of help here; primitive or built-in operations;
    and, if all else fails, wish-list functions, that is, we describe functions we
    wish we had.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause, where we have a data representation of a tank, that is, (aim-tank  s),
    and the data representation of a UFO, that is, (aim-ufo  s). From the first example
    in [figure 32](#%28counter._mix._%28figure._fig~3asigs-examples%29%29), we know
    that we need to add the two objects to the background scenery. In addition, the
    design recipe suggests that if these pieces of data come with their own data definition,
    we are to consider defining helper (auxiliary) functions and to use those to compute
    the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (tank-render (aim-tank s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (ufo-render (aim-ufo s) BACKGROUND)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here tank-render and ufo-render are wish-list functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Tank](#%28tech._mix._tank%29)  [Image](#%28tech._image%29) -> [Image](#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds t to the given image im |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (tank-render t im) im)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [UFO](#%28tech._mix._ufo%29)  [Image](#%28tech._image%29) -> [Image](#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds u to the given image im |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (ufo-render u im) im)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [SIGS](#%28tech._mix._sig%29) -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders the given game state on top of BACKGROUND |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; for examples see [figure 32](#%28counter._mix._%28figure._fig~3asigs-examples%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (si-render s)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(aim? s) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      (tank-render (aim-tank s) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   (ufo-render (aim-ufo s) BACKGROUND))] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(fired? s) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      (tank-render |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        (fired-tank s) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        (ufo-render (fired-ufo s) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                    (missile-render (fired-missile s) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                                    BACKGROUND)))])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 33: The complete rendering function'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'With a bit of analogy, we can deal with the second [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause in the same way. [Figure 33](#%28counter._mix._%28figure._fig~3asi-render%29%29)
    shows the complete definition. Best of all, we can immediately re-use our wish
    list functions, tank-render and ufo-render, and all we need to add is a function
    for including a missile in the scene. The appropriate wish list entry is:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Missile](#%28tech._mix._missile%29)  [Image](#%28tech._image%29) -> [Image](#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds m to the given image im |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (missile-render m im) im)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: As above, the comment describes in sufficient detail what we want.Exercise 97\.
    Design the functions tank-render, ufo-render, and missile-render. Is the result
    of this expression
  prefs: []
  type: TYPE_NORMAL
- en: '| (tank-render |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (fired-tank s) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (ufo-render (fired-ufo s) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               (missile-render (fired-missile s) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                               BACKGROUND))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: the same as the result of
  prefs: []
  type: TYPE_NORMAL
- en: '| (ufo-render |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (fired-ufo s) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (tank-render (fired-tank s) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                (missile-render (fired-missile s) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                                BACKGROUND))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: When do the two expressions produce the same result? [![image](../Images/93e27518dad7734ecfdfdb80d630f568.jpg)](#%28counter._mix._%28exercise._mix-ufo-render%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 98\. Design the function si-game-over? for use as the [stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29)
    handler. The game stops if the UFO lands or if the missile hits the UFO. For both
    conditions, we recommend that you check for proximity of one object to another.
  prefs: []
  type: TYPE_NORMAL
- en: The [stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29)
    clause allows for an optional second sub-expression, namely a function that renders
    the final state of the game. Design si-render-final and use it as the second part
    for your [stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29)
    clause in the main function of [exercise 100](#%28counter._mix._%28exercise._mix-ufo-fire%29%29).
    [![image](../Images/9b8a1cfac5dd90b145b73202a743407a.jpg)](#%28counter._mix._%28exercise._mix-ufo-stop%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 99\. Design si-move. This function is called for every clock tick to
    determine to which position the objects move now. Accordingly it consumes an element
    of [SIGS](#%28tech._mix._sig%29) and produces another one.
  prefs: []
  type: TYPE_NORMAL
- en: Moving the tank and the missile (if any) is relatively straightforward. They
    move in straight lines at a constant speed. Moving the UFO calls for small random
    jumps to the left or the right. Since you have never with functions that create
    random numbers, the rest of this exercise is a longish hint on how to deal with
    this issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'BSL comes with a function that creates random numbers. Introducing this function
    illustrates why the signatures and purpose statements play such an important role
    during the design. Here is the relevant material for the function you need:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](#%28tech._number%29) -> [Number](#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a number in the interval [0,n), |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; possibly a different one each time it is called |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) n) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Since the signature and purpose statement precisely describe what a function
    computes, you can now experiment with [random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29)
    in DrRacket’s interactions area. Stop! Do so!If [random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29)
    produces different numbers (almost) every time it is called, testing functions
    that use random is difficult. To start with, separate si-move and its proper functionality
    into two parts:The idea that you must use [random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29)
    is BSL knowledge, not a part of the design skills you must acquire, which is why
    we provide this hint. Also, [random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29)
    is the first and only BSL primitive that is not a mathematical function. Functions
    in programming are inspired by mathematical functions, but they are not identical
    concepts.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (si-move w)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (si-move-proper w ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [SIGS](#%28tech._mix._sig%29) Number -> [SIGS](#%28tech._mix._sig%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; move the space-invader objects predictably by delta |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (si-move-proper w delta)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   w) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: With this definition you separate the creation of a random number from the act
    of moving the game objects. While [random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29)
    may produce different results every time it is called, si-move-proper can be tested
    on specific numeric inputs and is thus guaranteed to return the same result when
    given the same inputs. In short, most of the code remains testable.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of calling [random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29)
    directly, you may wish to design a function that creates a random x-coordinate
    for the UFO. Consider using [check-random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-random%29%29)
    from BSL’s testing framework to test such a function. [![image](../Images/9f5076970080ef99b11c23dcbbd7b7eb.jpg)](#%28counter._mix._%28exercise._mix-ufo-move%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 100\. Design the function si-control, which plays the role of the
    key event handler. As such, it consumes a game state and a [KeyEvent](#%28tech._keyevent%29)
    and produces a new game state. It reacts to three different keys:'
  prefs: []
  type: TYPE_NORMAL
- en: pressing the left arrow ensures that the tank moves left;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pressing the right arrow ensures that the tank moves right; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pressing the space bar fires the missile if it hasn’t been launched yet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have this function, you can define the si-main function, which uses
    [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    to spawn the game-playing window. Enjoy! [![image](../Images/d6225752b2c1a96aaece2df2f688ad9f.jpg)](#%28counter._mix._%28exercise._mix-ufo-fire%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [SIGS.v2](#%28tech._mix._sigs..v2%29) -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders the given game state on top of BACKGROUND |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (si-render.v2 s)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (tank-render |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (sigs-tank s) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (ufo-render (sigs-ufo s) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                 (missile-render.v2 (sigs-missile s) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                                    BACKGROUND)))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 34: Rendering game states again'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Data representations are rarely unique. For example, we could use a single
    structure type to represent the states of a space invader game—<wbr>if we are
    willing to change the representations of missiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) sigs [ufo tank missile])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A SIGS.v2 (short for SIGS version 2) is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-sigs  [UFO](#%28tech._mix._ufo%29)  [Tank](#%28tech._mix._tank%29)  [MissileOrNot](#%28tech._mix._missileornot%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation represents the complete state of a |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; space invader game |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A MissileOrNot is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Posn](#%28tech._posn%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation#false means the missile is in the tank; |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Posn](#%28tech._posn%29) says the missile is at that location. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Unlike the first data representation for game states, this second version does
    not distinguish between before and after the missile launch. Instead, each state
    contains some data about the missile though this piece of data may just be #false,
    indicating that the missile hasn’t been fired yet.'
  prefs: []
  type: TYPE_NORMAL
- en: As a result, the functions for this second data representation of states differ
    from the functions for the first one. In particular, functions that consume an
    element of [SIGS.v2](#%28tech._mix._sigs..v2%29) do not use a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression, because there is only one kind of element in the collection. In terms
    of design approach, the design recipe for structures from [Designing with Structures](#%28part._sec~3adesignstructs%29)
    suffices. [Figure 34](#%28counter._mix._%28figure._fig~3amix-ufo2%29%29) shows
    the result of designing the rendering function for this data representation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In contrast, the design of functions using [MissileOrNot](#%28tech._mix._missileornot%29)
    requires the recipe from this section. Let’s look at the design of missile-render.v2,
    whose job it is to add a missile to an image. Here is the header material:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [MissileOrNot](#%28tech._mix._missileornot%29)  [Image](#%28tech._image%29)
    -> [Image](#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds an image of missile m to scene s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (missile-render.v2 m s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   s) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As for examples, we must consider at least two cases: one when m is #false
    and another one when m is a [Posn](#%28tech._posn%29). In the first case, the
    missile hasn’t been fired, which means that no image of a missile is to be added
    to the given scene. In the second case, the missile’s position is specified and
    that is where the image of the missile must show up. Assuming the given scene
    is the same in both cases, say'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/2d14974e34f4a98f5336b05de7751606.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'here is a table that demonstrates the workings of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| m |  | (missile-render.v2  m  s) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [false](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._%28%28lib._lang%2Fhtdp-beginner..rkt%29._false%29%29)
    |  | ![image](../Images/9e3c50b4937605cf47ff7ef4d9ab1822.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   32 &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      TANK-HEIGHT &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      10)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | ![image](../Images/00ac8ab55c532c80e4e91c343b3c3d07.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 101\. Turn the examples into test cases. [![image](../Images/75b0902625742a9cdecaaff717d64e29.jpg)](#%28counter._mix._%28exercise._mix-ufo2-test%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are ready to develop the template. Because of the data definition for
    the major argument (m) is an itemization with two items, the function body is
    likely to consist of a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression with two clauses:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (missile-render.v2 m s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) m) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) m) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Following again the data definition, the first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause checks whether m is a [Boolean](#%28tech._boolean%29) value and the second
    one checks whether it is an element of [Posn](#%28tech._posn%29). And, if someone
    were to accidentally apply missile-render.v2 to #true and some image, the function
    would use the first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause to compute the result. We have more to say on such errors below.The second
    template step requests selector expressions in all those [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses that deal with structures. In our example, this is true for the second
    clause and the selector expressions extract the x- and y-coordinates from the
    given [Posn](#%28tech._posn%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (missile-render.v2 m s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) m) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) m) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) m) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) m) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Compare this template with the one for si-render above. The data definition
    for the latter deals with two distinct structure types, and therefore the function
    template for si-render contains selector expressions in both [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses. The data definition for [MissileOrNot](#%28tech._mix._missileornot%29),
    however, mixes items that are plain values with items that describe structures.
    Both kinds of definitions are perfectly fine; the key for you is to follow the
    recipe and to find a code organization that matches the data definition.Here is
    the complete function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (missile-render.v2 m s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) m) s]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) m)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) MISSILE ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) m) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) m) s)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Doing this step by step, you first work on the easy clauses, in this function
    that’s the first one. Since it says the missile hasn’t been fired, the function
    returns the given s. For the second clause, you need to remember that ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29)  m)
    and ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29)  m)
    select the coordinates for the image of the missile. This function must add MISSILE
    to s, so you have to figure out the best combination of primitive operations and
    your own functions to combine the four values. The choice of this combining operation
    is precisely where your creative insight as a programmer comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 102\. Design all other functions that are needed to complete the game
    for this second data definition. [![image](../Images/00d9f25fceee73e0d0e0aef60c0e3f20.jpg)](#%28counter._mix._%28exercise._mix-ufo2-finish%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 103\. Develop a data representation for the following four kinds of
    zoo animals:'
  prefs: []
  type: TYPE_NORMAL
- en: spiders, whose relevant attributes are the number of remaining legs (we assume
    that spiders can lose legs in accidents) and the space they need in case of transport;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: elephants, whose only attributes are the space they need in case of transport;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boa constrictor, whose attributes include length and girth; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: armadillo, for whom you must determine appropriate attributes, including one
    that determine the space needed for transportation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop a template for functions that consume zoo animals.
  prefs: []
  type: TYPE_NORMAL
- en: Design fits?. The function consumes a zoo animal and the volume of a cage. It
    determines whether the cage is large enough for the animal. [![image](../Images/a3e50dba356014fcaa223ffcceefa676.jpg)](#%28counter._mix._%28exercise._mix-zoo%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 104\. Your home town manages a fleet of vehicles: automobiles, vans,
    buses, SUVs, and trucks. Develop a data representation for vehicles. The representation
    of each vehicle must describe the number of passengers that it can comfortably
    accommodate, its license plate, and its fuel consumption (miles per gallon).'
  prefs: []
  type: TYPE_NORMAL
- en: Develop a template for functions that consume vehicles. [![image](../Images/2840ff44119272357c683f3cae7b621e.jpg)](#%28counter._mix._%28exercise._mix-vehicle%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 105\. Some program contains the following data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Coordinate is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – a [NegativeNumber](#%28tech._negativenumber%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation on the y axis, distance from top |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – a [PositiveNumber](#%28tech._positivenumber%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation on the x axis, distance from left |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – a [Posn](#%28tech._posn%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation an ordinary Cartesian point |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Make up at least two data examples per clause in the data definition. For each
    of the examples, explain its meaning with a sketch of a canvas. [![image](../Images/d588cfaa69eb89c1d82346cde75ad292.jpg)](#%28counter._mix._%28exercise._mix-coordinates%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 6.2Mixing up Worlds
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This section suggests several design problems for world program, starting with
    simple extension exercises concerning our virtual pets.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 106\. In [More Virtual Pets](#%28part._sec~3azoo2%29) we discuss the
    creation of virtual pets that come with happiness gauges. One of the virtual pets
    is a cat, the other one is a chameleon. Each program is dedicated to a single
    pet, however.
  prefs: []
  type: TYPE_NORMAL
- en: 'Design the cat-cham world program. Given both a location and an animal, it
    walks the latter across the canvas, starting from the given location. Here is
    the chosen data representation for animals:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A VAnimal is either |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – a VCat |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – a VCham |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: where VCat and VCham are your data definitions from [exercises 88](#%28counter._%28exercise._struct12%29%29)
    [and 92](#%28counter._%28exercise._struct16%29%29).Given that [VAnimal](#%28tech._vanimal%29)
    is the collection of world states, you need to design
  prefs: []
  type: TYPE_NORMAL
- en: a rendering function from [VAnimal](#%28tech._vanimal%29) to [Image](#%28tech._image%29);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function for handling clock ticks, from [VAnimal](#%28tech._vanimal%29) to
    [VAnimal](#%28tech._vanimal%29);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and a function for dealing with key events so that you can feed and pet and
    colorize your pet—<wbr>as applicable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It remains impossible to change the color of a cat or to pet a chameleon. [![image](../Images/276744eb10e884ff08068c1cb1f15095.jpg)](#%28counter._%28exercise._zoo3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 107\. Design the cham-and-cat program, which deals with both a virtual
    cat and a virtual chameleon. You need a data definition for a “zoo” containing
    both animals and functions for dealing with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem statement leaves open how keys manipulate the two animals. Here
    are two possible interpretations:'
  prefs: []
  type: TYPE_NORMAL
- en: Each key event goes to both animals.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each key event applies to only one of the two animals.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this alternative, you need a data representation that specifies a focus
    animal, that is, the animal that can currently be manipulated. To switch focus,
    have the key-handling function interpret "k" for “kitty” and "l" for lizard. Once
    a player hits "k", the following keystrokes apply to the cat only—<wbr>until the
    player hits "l".
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose one of the alternatives and design the appropriate program. [![image](../Images/6485ac6a739b67d3cfbc1c74926acc68.jpg)](#%28counter._%28exercise._zoo4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 108\. In its default state, a pedestrian crossing light shows an orange
    person standing on a red background. When it is time to allow pedestrian to cross
    the street, the light receives a signal and switches to a green, walking person.
    This phase lasts for 10 seconds. After that the light displays the digits 9, 8,
    ..., 0 with odd numbers colored orange and even numbers colored green. When the
    count-down reaches 0, the light switches back to its default state.
  prefs: []
  type: TYPE_NORMAL
- en: Design a world program that implements such a pedestrian traffic light. The
    light switches from its default state when you press the space bar on your keyboard.
    All other transitions must be reactions to clock ticks. You may wish to use the
    following images
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3d9ea17b25a206a0908ac059f860b6f6.jpg) ![](../Images/761d794c7c2c9259b85e4abdfca5d825.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: or you can make up your own stick figures with the image library. [![image](../Images/1627c831e6db5610701a4f50174eeb07.jpg)](#%28counter._%28exercise._pedestrian%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 109\. Design a world program that recognizes a pattern in a sequence
    of [KeyEvent](#%28tech._keyevent%29)s. Initially the program shows a 100 by 100
    white rectangle. Once your program has encountered the first desired letter, it
    displays a yellow rectangle of the same size. After encountering the final letter,
    the color of the rectangle turns green. If any “bad” key event occurs, the program
    displays a red rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: '| conventional |  | defined abbreviations |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; ExpectsToSee.v1 is one of: &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  "start, expect an ''a''" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  "expect ''b'', ''c'', or ''d''" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  "finished" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  "error, illegal key" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; ExpectsToSee.v2 is one of: &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  AA &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  BB &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  DD &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ER &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) AA "start,
    ...") &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) BB "expect
    ...") &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) DD "finished")
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ER "error,
    ...") &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 35: Two ways of writing a data definition for FSMs'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The specific sequences that your program looks for start with "a", followed
    by an arbitrarily long mix of "b" and "c", and ended by a "d". Clearly, "acbd"
    is one example of an acceptable string; two others are "ad" and "abcbbbcd". Of
    course, "da", "aa", or "d" do not match.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/e44becf3de98211df3a378fa2ffb89c1.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 36: A finite state machine as a diagram'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hint Your solution implements a finite state machine (FSM), an idea introduced
    in [Finite State Worlds](#%28part._sec~3aworlds-more%29) as one design principle
    behind world programs. As the name says, a FSM program may be in one of a finite
    number of states. The first state is called an initial state. Each key event causes
    the machine to re-consider its current state; it may transition to the same state
    or to another one. When your program recognizes a proper sequence of key events,
    it transitions to a final state.
  prefs: []
  type: TYPE_NORMAL
- en: For a sequence-recognition problem, states typically represent the letters that
    the machine expects to see next; see [figure 35](#%28counter._%28figure._fig~3afsm-dd%29%29)
    for a data definition.The data definition on the right uses the naming technique
    introduced in [exercise 61](#%28counter._%28exercise._ex~3aalternative-data-design2%29%29).
    Take a look at the last state, which says an illegal input has been encountered.
    [Figure 36](#%28counter._%28figure._fig~3afsm-a-b-or-c%2A-d%29%29) shows how to
    think of these states and their relationships in a diagrammatic manner. Each node
    corresponds to one of the four finite states; each arrow specifies which [KeyEvent](#%28tech._keyevent%29)
    causes the program to transition from one state to another.
  prefs: []
  type: TYPE_NORMAL
- en: History In the 1950s, Stephen C. Kleene, whom we would call a computer scientist,
    invented regular expressions as a notation for the problem of recognizing text
    patterns. For the above problem, Kleene would write
  prefs: []
  type: TYPE_NORMAL
- en: a (b|c)* d
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: which really just means a followed by either b or c arbitrarily often until
    d is encountered. [![image](../Images/133c9db37893d4ff771dd90e3e9a534a.jpg)](#%28counter._%28exercise._ex~3afsm%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 6.3Input Errors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One central point of this chapter concerns the role of predicates. They are
    critical when you must design functions that process distinct kinds of data, mixes
    of data. Such mixes come up naturally when your problem statement mentions many
    different kinds of information, but they also come up when you hand your functions
    and programs to others. After all, you know and respect your data definitions
    and function signatures. You never know, however, what your friends and colleagues
    do and youIt is a form of self-delusion to expect that we always respect our own
    function signatures. Calling a function on the wrong kind of data happens to the
    best of us. While many languages are like BSL and expect programmers to check
    signatures on their own, others do so automatically at the cost of some additional
    complexity. especially don’t know how someone without knowledge of BSL and programming
    uses your programs. This section therefore presents one way of protecting programs
    from inappropriate inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us demonstrate this point with a simple program, a function for computing
    the area of a disk:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](#%28tech._number%29) -> [Number](#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the area of a disk with radius r |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (area-of-disk r)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 3.14 ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) r r)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Our friends may wish to use this function for their geometry homework. Unfortunately,
    when our friends use this function, they may accidentally apply it to a string
    rather than a number. When that happens, the function stops the program execution
    with a mysterious error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (area-of-disk "my-disk") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| *: expects a number as 1st argument, given "my-disk" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: With predicates, you can prevent this kind of cryptic error message and signal
    an informative error of your own choice.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; Any  BSL value is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Number](#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Boolean](#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [String](#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Image](#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  [Any](#%28tech._any%29)  [Any](#%28tech._any%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-tank  [Any](#%28tech._any%29)  [Any](#%28tech._any%29)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 37: The universe of BSL data'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Specifically, we can define checked versions of our functions, when we wish
    to hand them to our friends. Because our friends may not know BSL or may ignore
    our data definitions and signatures, we must expect that they apply this checked
    function to arbitrary BSL values: numbers, Boolean values, strings, images, [Posn](#%28tech._posn%29)s,
    and so on. Although we cannot anticipate which structure types will be defined
    in BSL, we know the rough shape of the data definition for the collection of all
    BSL values. [Figure 37](#%28counter._%28figure._fig~3absl-universe%29%29) displays
    this shape of this data definition. As discussed in [The Universe of Data](#%28part._data-uni._sec~3adata-uni%29),
    the data definition for [Any](#%28tech._any%29) must be open-ended because every
    structure type definitions adds instances that may contain an arbitrary BSL value
    in each of its fields. The second aspect implies that the sketch of the data definition
    of [Any](#%28tech._any%29) must refer to itself; but don’t worry about such self-references
    yet. For now, understand that the data definition is a mixed itemization.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on this itemization, the template for a checked function has the following
    rough shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Any](#%28tech._any%29) -> ??? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (checked-f v)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29) v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([image?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._image~3f%29%29) v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) v) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ; which selectors are needed in the next clause? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(tank? v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Of course, nobody can list all clauses of this definition; fortunately, that’s
    not necessary. What we do know is that for all those values in the class of values
    for which the original function is defined, the checked version must produce the
    same results; for all others, it must signal an error.Concretely, our sample function
    checked-area-of-disk consumes an arbitrary BSL value and uses area-of-disk to
    compute the area of a disk if the input is a number. It must stop with with an
    error message otherwise; in BSL we use the function [error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29)
    to accomplish this. The error function consumes a string and stops the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) "area-of-disk:
    number expected")'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Hence the rough definition of checked-area-of-disk looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MESSAGE "area-of-disk:
    number expected") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (checked-area-of-disk v)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29) v) (area-of-disk v)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) v) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) MESSAGE)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) v) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) MESSAGE)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([image?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._image~3f%29%29) v) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) MESSAGE)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) v) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) MESSAGE)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(tank? v) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) MESSAGE)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The use of [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    helps us finish this definition in the natural way:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Any](#%28tech._any%29) -> [Number](#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the area of a disk with radius v, |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if v is a number |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (checked-area-of-disk v)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29) v) (area-of-disk v)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) "area-of-disk:
    number expected")])) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'And just to make sure we get what we want, let’s experiment:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (checked-area-of-disk "my-disk") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| area-of-disk: number expected |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Writing checked functions is important if we distribute our programs for others
    to use. Designing programs that work properly, however, is far more important.
    This book focuses on the design process for program proper design and, to do this
    without distraction, we agree that we always adhere to data definitions and signatures.
    At least, we almost always do so, and on rare occasions we may ask you to design
    checked versions of a function or a program.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 110\. A checked version of area-of-disk can also enforce that the arguments
    to the function are positive numbers, not just arbitrary numbers. Modify checked-area-of-disk
    in this way. [![image](../Images/f1add6452f1856eb9aa28c55952c4379.jpg)](#%28counter._%28exercise._ex~3achecked2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 111\. Take a look at these definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) vec [x y])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A vec is |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-vec  PositiveNumber  PositiveNumber) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation represents a velocity vector |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Develop the function checked-make-vec, which is to be understood as a checked
    version of the primitive operation make-vec. It ensures that the arguments to
    make-vec are positive numbers. In other words, checked-make-vec enforces our informal
    data definition. [![image](../Images/7a8fa1870931918438c08302b46a4b61.jpg)](#%28counter._%28exercise._ex~3achecked3%29%29)Predicates
    You might wonder how you can design your own predicates. After all, checked functions
    really seem to have this general shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Any](#%28tech._any%29) -> ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; checks that a is a proper input for function g |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (checked-g a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(XYZ? a) (g a)] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) "g:
    bad input")])) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'where g itself is defined like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [XYZ](#%28tech._xyz%29) -> ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (g some-x) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We assume that there is a data definition labeled XYZ, and that (XYZ?  a) produces
    #true when a is an element of [XYZ](#%28tech._xyz%29) and #false otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: For area-of-disk, which consumes [Number](#%28tech._number%29)s, the appropriate
    predicate is clearly [number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29).
    In contrast, for some functions like missile-render from above, we clearly need
    to define our own predicate because [MissileOrNot](#%28tech._mix._missileornot%29)
    is a made-up, not a built-in data collection. So let us design a predicate for
    [MissileOrNot](#%28tech._mix._missileornot%29).
  prefs: []
  type: TYPE_NORMAL
- en: 'We recall the signature for predicates:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Any](#%28tech._any%29) -> [Boolean](#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is a an element of the [MissileOrNot](#%28tech._mix._missileornot%29) collection
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (missile-or-not? a) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It is a good practice to use questions as purpose statements for predicates,
    because applying a predicate is like asking a question about a value. The question
    mark “?” at the end of the name also reinforces this idea; some people may tack
    on “huh” to pronounce the name of such functions.Making up examples is also straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (missile-or-not? #false) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (missile-or-not? ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 9 2)) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (missile-or-not? "yellow") #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first two examples recall that every element of [MissileOrNot](#%28tech._mix._missileornot%29)
    is either #false or some [Posn](#%28tech._posn%29). The third test says that strings
    aren’t elements of the collection. Here are three more tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (missile-or-not? #true) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (missile-or-not? 10) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (missile-or-not? [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29)) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Explain the expected answers!
  prefs: []
  type: TYPE_NORMAL
- en: Since predicates consume all possible BSL values, their templates are just like
    the templates for checked-f. Stop! Find the template and take a second look before
    you read on.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with checked functions, a predicate doesn’t need all possible [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    lines. Only those that might produce #true are required:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (missile-or-not? v)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) v) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) v) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) #false]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'All other cases are summarized via an [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    line that produces #false.Given the template, the definition of missile-or-not?
    is a simple matter of thinking through each case:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (missile-or-not? v)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) v) ([boolean=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3d~3f%29%29) #false v)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) v) #true]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) #false]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Only #false is a legitimate [MissileOrNot](#%28tech._mix._missileornot%29),
    #true isn’t. We express this idea with ([boolean=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3d~3f%29%29)  #false  v),
    but ([false?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._false~3f%29%29)  v)
    would also do:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (missile-or-not? v)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([false?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._false~3f%29%29) v) #true]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([posn?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn~3f%29%29) v) #true]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) #false]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Naturally all elements of Posn are also members of [MissileOrNot](#%28tech._mix._missileornot%29),
    which explains the #true in the second line.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 112\. Reformulate the predicate now using an [or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)
    expression. [![image](../Images/8d4249aa1914077f536cf4f9e693ee62.jpg)](#%28counter._%28exercise._ex~3amissile-or-not-or%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 113\. Design predicates for the following data definitions from the
    preceding section: [SIGS](#%28tech._mix._sig%29), [Coordinate](#%28tech._mix._coordinate%29)
    ([exercise 105](#%28counter._mix._%28exercise._mix-coordinates%29%29)), and [VAnimal](#%28tech._vanimal%29).
    [![image](../Images/6682ad56baef50abf9d996bd1eae77e2.jpg)](#%28counter._%28exercise._predicate1%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To wrap up this section, let us mention two important predicates that you may
    wish to use in your world programs: [key-event?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key-event~3f%29%29)
    and [mouse-event?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._mouse-event~3f%29%29).
    They check the expected property, but check out their documentation to make sure
    you understand what they compute.'
  prefs: []
  type: TYPE_NORMAL
- en: 6.4Checking the World
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In a world program, many things can go wrong. Although we just agreed to trust
    that our functions are always applied to the proper kind of data, in a world program
    we may juggle too many things at once to place that much trust in ourselves. When
    we design a world program that takes care of clock ticks, mouse clicks, key strokes,
    and rendering, it is just too easy to get one of those interplays wrong. Of course,
    going wrong doesn’t mean that BSL recognizes the mistake immediately. For example,
    one of our functions may produce a result that isn’t quite an element of your
    data representation for world states. At the same time, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    accepts this piece of data and holds on to it, until the next event takes place.
    It is only when the next event handler receives this inappropriate piece of data,
    that the program may fail. But it may get worse, because even the second and third
    and fourth event handling step may actually cope with inappropriate state values,
    and it all blows up much later in the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help with this kind of problem, [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    comes with an optional [check-with](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._check-with%29%29)
    clause which accepts a predicate for world states. If, for example, we chose to
    represent all world states with [Number](#%28tech._number%29), we could express
    this fact easily like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main s0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) s0 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) [[check-with](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._check-with%29%29) [number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29)] [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As soon as any event handling function produces something other than a number,
    the world stops with an appropriate error message.A [check-with](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._check-with%29%29)
    clause is even more useful when the data definition is not just a class of data
    with a built-in predicate like [number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29)
    but something subtle such as this interval definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A UnitWorld is a number |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   between 0 (inclusive) and 1 (exclusive). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In that case you want to formulate a predicate for this interval:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Any](#%28tech._any%29) -> [Boolean](#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is x between 0 (inclusive) and 1 (exclusive) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (between-0-and-1? "a") #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (between-0-and-1? 1.2) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (between-0-and-1? 0.2) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (between-0-and-1? 0.0) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (between-0-and-1? 1.0) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (between-0-and-1? x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29) x) ([<=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c~3d%29%29) 0 x) ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) x 1)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'With this predicate you can now monitor every single transition in your world
    program:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main s0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) s0
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             [[check-with](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._check-with%29%29) between-0-and-1?]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If any of the world-producing handlers creates a number outside of the interval,
    or worse, a non-numeric-value, our program discovers this mistake immediately
    and gives us a chance to fix the mistake.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 114\. Use the predicates from [exercise 113](#%28counter._%28exercise._predicate1%29%29)
    to check the space invader world program, the virtual pet program ([exercise 106](#%28counter._%28exercise._zoo3%29%29)),
    and the editor program ([A Graphical Editor](#%28part._sec~3aedit1%29)). [![image](../Images/8994289b809baa5b7154abe4d94bd748.jpg)](#%28counter._%28exercise._predicate2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 6.5Equality Predicates
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'An equality predicate is a function that compares two elements of the same
    collection of data. Recall the definition of [TrafficLight](#%28tech._trafficlight%29),
    which is the collection of three strings: "red", "green", and "yellow". Here is
    one way to define light=?'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [TrafficLight](#%28tech._trafficlight%29)  [TrafficLight](#%28tech._trafficlight%29)
    -> [Boolean](#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; are the two (states of) traffic lights equal |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (light=? "red" "red") #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (light=? "red" "green") #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (light=? "green" "green") #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (light=? "yellow" "yellow") #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (light=? a-value another-value)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) a-value another-value))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'When we click RUN, all tests succeed but unfortunately other interactions reveal
    conflicts with our intentions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (light=? "salad" "greens") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (light=? "beans" 10) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| string=?: expects a string as 1st argument, given 10 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Compare these interactions with other, built-in equality predicates:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([boolean=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3d~3f%29%29) "#true" 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| boolean=?: expects a boolean as 1st argument, given "#true" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Try ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29)  10  #true)
    and ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29)  20  "help")
    on your own. All of them signal an error about being applied to the wrong kind
    of argument.A checked version of light=? enforces that both arguments belong to
    [TrafficLight](#%28tech._trafficlight%29); if not, it signals an error like those
    that built-in equality predicates issue. Adding this checks in turn demands a
    predicate for TrafficLight, whose name we abbreviate to light? for simplicity:Keep
    in mind that "red" is different from "Red" or "RED". The case of characters in
    strings matter.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Any](#%28tech._any%29) -> [Boolean](#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is the given value an element of [TrafficLight](#%28tech._trafficlight%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (light? x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) x) ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "red" x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                      ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "green" x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                      ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "yellow" x))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) #false]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Now we can wrap up the revision of light=? by just following our original analysis.
    First, the function determines that the two inputs are elements of [TrafficLight](#%28tech._trafficlight%29);
    if not it uses [error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29)
    to signal the mistake:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MESSAGE
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   "traffic light expected, given: some other value") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Any](#%28tech._any%29)  [Any](#%28tech._any%29) -> [Boolean](#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; are the two values elements of [TrafficLight](#%28tech._trafficlight%29)
    and, |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if so, are they equal |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (light=? "red" "red") #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (light=? "red" "green") #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (light=? "green" "green") #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (light=? "yellow" "yellow") #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (light=? a-value another-value)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) (light? a-value) (light? another-value))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) a-value another-value)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) MESSAGE)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 115\. Revise light=? so that the error message specifies which of the
    two arguments aren’t elements of [TrafficLight](#%28tech._trafficlight%29). [![image](../Images/bef2bb593b68dc0a6a4108586baeddd1.jpg)](#%28counter._%28exercise._cond10%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: While it is unlikely that your programs will use light=?, they ought to use
    [key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29)
    and [mouse=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._mouse~3d~3f%29%29),
    two equality predicates that we briefly mentioned at the end of the last subsection.
    Naturally, [key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29)
    is an operation for comparing two [KeyEvent](#%28tech._keyevent%29)s; similarly,
    [mouse=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._mouse~3d~3f%29%29)
    compares two [MouseEvt](#%28tech._mouseevt%29)s. While both kinds of events are
    represented as strings, it is important to realize that not all strings represent
    key events or mouse events.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend using [key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29)
    in key event handlers and [mouse=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._mouse~3d~3f%29%29)
    in mouse event handlers from now on. The use of [key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29)
    in a key event handler ensures that the function really compares strings that
    represent key events and not arbitrary strings. As soon as, say, the function
    is accidentally applied to "hello\n world", [key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29)
    signals an error and thus informs us that something is wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 7Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this first part of the book, you learned a bunch of simple but important
    lessons. Here is a summary:'
  prefs: []
  type: TYPE_NORMAL
- en: A good programmer designs programs. A bad programmer tinkers until the program
    seems to work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The design recipe has two dimensions. One concerns the process of design, that
    is, the sequence of steps to be taken. The other explains how the chosen data
    representation influences the design process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Every well-designed program consists of many constant definitions, structure
    type definitions, data definitions, and function definitions. For batch programs,
    one function is the “main” function, and it typically composes several other functions
    to perform its computation. For interactive programs, the [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    function plays the role of the main function; it specifies the initial state of
    the program, an image-producing output function, and at most three event handlers:
    one for clock ticks, one for mouse clicks, one for key events. In both kinds of
    programs, function definitions are presented “top down,” starting with the main
    function, followed by those functions mentioned in the main function, and so on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Like all programming languages, Beginning Student language comes with a vocabulary
    and a grammar. Programmers must be able to determine the meaning of each sentence
    in a language so that they can anticipate how the program performs its computation
    when given an input. The following intermezzo explains this idea in detail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Programming languages, including BSL, come with a rich set of libraries so that
    programmers don’t have to re-invent the wheel all the time. A programmer should
    become comfortable with the functions that a library provides, especially their
    signatures and purposes statements. Doing so simplifies life.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A programmer must get to know the “tools” that a chosen programming language
    offers. These tools are either part of the language—<wbr>such as [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    or [max](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._max%29%29)—<wbr>or
    they are “imported” from a library. In this spirit, make sure you understand the
    following terms: structure type definition; function definition; constant definition;
    structure instance; data definition; [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29),
    and event handling function.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Intermezzo: BSL'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed-Size Data deals with BSL as if it were a natural language. It introduces
    the “basic words” of the language, suggests how to compose “words” into “sentences,”
    and appeals to your knowledge of algebra for an intuitive understanding of these
    “sentences.” While this kind of introduction works to some extent, truly effective
    communication requires some formal study.
  prefs: []
  type: TYPE_NORMAL
- en: In many ways, the analogy of Fixed-Size Data is correct. A programming language
    does have a vocabulary and a grammar, though programmers use the word syntax for
    these elements. A sentence in BSL is an expression or a definition. The grammar
    of BSL dictates how to form these phrases. But not all grammatical sentences are
    meaningful—<wbr>neither in English nor in a programming language. For example,
    the English sentence “the cat is round” is a meaningful sentence, but “the brick
    is a car” makes no sense even though it is completely grammatical. To determine
    whether a sentence is meaningful, we must know the meaning of a language; programmers
    call this semantics.
  prefs: []
  type: TYPE_NORMAL
- en: This intermezzo presents BSL as if it were an extension of the familiar language
    of arithmetic and algebra in middle school. After all, computation starts with
    this form of simple mathematics, and we should understand the connection between
    this mathematics and computing. The first three sections present the syntax and
    semantics of a good portion ofProgrammers must eventually understand these principles
    of computation but they are complementary to the principles of design. BSL. Based
    on this new understanding of BSL, the fourth resumes our discussion of errors.
    The remaining sections expand this understanding to the complete language; the
    last one expands the tools for expressing tests.
  prefs: []
  type: TYPE_NORMAL
- en: BSL Vocabulary
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Figure 38](#%28counter._%28figure._fig~3alex-beginner%29%29) introduces and
    defines BSL’s basic vocabulary. It consists of literal constants, such as numbers
    or Boolean values; names that have meaning according to BSL, for example, [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    or [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29);
    and names to which programs can give meaning via [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)
    or function parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A name or a variable is a sequence of characters not including a space or one
    of the following: " , '' ` ( ) [ ] { } | ; #:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: A primitive is a name to which BSL assigns meaning, for example, [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)
    or [sqrt](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqrt%29%29).
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A variable is a name without preassigned meaning.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A value is one of:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A number is one of: 1, -1, 3/5, 1.22, #i1.22, 0+1i, and so on. The syntax for
    BSL numbers is complicated because it accommodates a range of formats: positive
    and negative numbers, fractions and decimal numbers, exact and inexact numbers,
    real and complex numbers, numbers in bases other than 10, and more. Understanding
    the precise notation for numbers requires a thorough understanding of grammars
    and parsing, which is out of scope for this intermezzo.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A boolean is one of: #true or #false.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A string is one of: "", "he says \"hello world\" to you", "doll", and so on.
    In general, it is a sequence of characters enclosed by a pair of ".'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: An image is a png, jpg, tiff, and various other formats. We intentionally omit
    a precise definition.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: We use v, v-1, v-2 and the like when we wish to say “any possible value.”
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 38: BSL core vocabulary'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Each of the explanations defines a set via a suggestive itemization of its elements.
    Although it is possible to specify these collections in their entirety, we consider
    this superfluous here and trust your intuition. Just keep in mind that each of
    these sets may come with some extra elements.
  prefs: []
  type: TYPE_NORMAL
- en: BSL Grammar
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Figure 39](#%28counter._%28figure._fig~3asyn-beginner%29%29) shows a large
    part of the BSL grammar, which—<wbr>in comparison to other languages—<wbr>is extremely
    simple. As to BSL’s expressive power, don’t let the looks deceive you. The first
    action item, though, is to discuss how to read such grammars. Each lineReading
    a grammar aloud makes it sound like a data definition. One could indeed use grammars
    to write down many of our data definitions. with a = introduces a syntactic category;
    the best way to pronounce = as “is one of” and | as “or.” Wherever you see three
    dots, imagine as many repetitions of what precedes the dots as you wish. This
    means, for example, that a program is either nothing or a single occurrence of
    def-expr or a sequence of two of them, or three, four, five, or however many.
    Since this example is not particularly illuminating, let us look at the second
    syntactic category. It says that def is either'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (variable variable) expr)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: because “as many as you wish” includes zero, or
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (variable variable variable) expr)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: which is one repetition, or
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (variable variable variable variable) expr)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: which uses two.
  prefs: []
  type: TYPE_NORMAL
- en: '|   program |   | = |   | def-expr ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   |   |   |   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   def-expr |   | = |   | def |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | expr |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   |   |   |   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   def |   | = |   | ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (variable variable variable ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   |   |   |   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   expr |   | = |   | variable |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | value |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | (primitive expr expr ...) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | (variable expr expr ...) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29) [expr expr] ... [expr expr])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29) [expr expr] ... [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) expr])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 39: BSL core grammar'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The final point about grammars concerns the three “words” that come in a distinct
    font: [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29),
    [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29),
    and [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29).
    According to the definition of BSL vocabulary, these three words are names. What
    the vocabulary definition does not tell us is that these names have a pre-defined
    meaning. In BSL, these words serve as markers that differentiate some compound
    sentences from others, and in acknowledgment of their role, such words are called
    keywords.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are ready to state the purpose of a grammar. The grammar of a programming
    language dictates how to form sentences from the vocabulary of the grammar. Some
    sentences are just elements of vocabulary. For example, according to [figure 39](#%28counter._%28figure._fig~3asyn-beginner%29%29)
    42 is a sentence of BSL:'
  prefs: []
  type: TYPE_NORMAL
- en: The first syntactic category says that a program is a def-expr. Expressions
    may refer to the definitions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second one tells us that a def-expr is either a def or an expr.In DrRacket,
    a program really consists of two distinct parts: the definitions area and the
    expressions in the interactions area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last definition lists all ways of forming an expr, and the second one is
    value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we know from [figure 38](#%28counter._%28figure._fig~3alex-beginner%29%29)
    that 42 is a value, we have confirmation.
  prefs: []
  type: TYPE_NORMAL
- en: The interesting parts of the grammar show how to form compound sentences, those
    built from other sentences. For example, the def part tells us that a function
    definition is formed by using “(”, followed by the keyword [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29),
    followed by another “(”, followed by a sequence of at least two variables, followed
    by “)”, followed by an expr, and closed by a right parenthesis “)” that matches
    the very first one. Note how the leading keyword [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)
    distinguishes definitions from expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Expressions (expr) come in six flavors: variables, constants, primitive applications,
    (function) applications, and two varieties of [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)itionals.
    While the first two are atomic sentences, the last four are compound sentences.
    Like [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29),
    the keyword [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    distinguishes conditional expressions from applications.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are three examples of expressions: "all", x, and (f  x). The first one
    belongs to the class of strings and is therefore an expression. The second is
    a variable, and every variable is an expression. The third is a function application,
    because f and x are variables.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In contrast, these parenthesized sentences are not legal expressions: (f  [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)),
    ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)  x),
    and ((f  2)  10). The first one partially matches the shape of a function application
    but it uses [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)
    as if it were a variable. The second one fails to be a correct [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression because it contains a variable as the second item and not a pair of
    expressions surrounded by parentheses. The last one is neither a conditional nor
    an application because the first part is an expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you may notice that the grammar does not mention white space: blank
    spaces, tabs, and newlines. BSL is a permissive language. As long as there is
    some white space between the elements of any sequence in a program, DrRacket can
    understand your BSL programs. Good programmers,Keep in mind that two kinds of
    readers study your BSL programs: people and DrRacket. however, may not like what
    you write. These programmers use white space to make their programs easily readable.
    Most importantly, they adopt a style that favors human readers over the software
    applications that process programs (such as DrRacket). They pick up this style
    from careful reading code examples in books, paying attention to how it is formatted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 116\. Take a look at the following sentences:'
  prefs: []
  type: TYPE_NORMAL
- en: x
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29)  y  z)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29)  ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29)  y  z)  0)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explain why they are syntactically legal expressions [![image](../Images/4dc6b9471920ccfb15e04e8cc4e4d381.jpg)](#%28counter._%28exercise._ex~3alegal-ex1%29%29)Exercise 117\.
    Consider the following sentences:'
  prefs: []
  type: TYPE_NORMAL
- en: (3  [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  4)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (x)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explain why they are syntactically illegal. [![image](../Images/c5950610cbb1c131f767a339d0a644e4.jpg)](#%28counter._%28exercise._ex~3aillegal-ex1%29%29)Exercise 118\.
    Take a look at the following sentences:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (f  x)  x)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (f  x)  y)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (f  x  y)  3)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explain why they are syntactically legal definitions [![image](../Images/dc409d2a76127f145b51989cb37d6cfe.jpg)](#%28counter._%28exercise._ex~3alegal-def1%29%29)Exercise 119\.
    Consider the following sentences:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (f  "x")  x)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)  (f  x  y  z)  (x))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explain why they are syntactically illegal. [![image](../Images/25a910b54baed100fcf1b72bb0580afb.jpg)](#%28counter._%28exercise._ex~3alegal-def1a%29%29)Exercise 120\.
    Discriminate the legal from the illegal sentences:'
  prefs: []
  type: TYPE_NORMAL
- en: (x)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  ([not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29)  x))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  2  3)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain why the sentences are legal or illegal. Determine whether the legal
    ones belong to the category expr or def. [![image](../Images/42546707f41546d4dc7b04be4c71875c.jpg)](#%28counter._%28exercise._ex~3aillegal-exp1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Note on Grammatical Terminology The components of compound sentences have names.
    We have introduced some of these names on an informal basis. [Figure 40](#%28counter._%28figure._fig~3aterminology%29%29)
    provides a summary of the conventions.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; function application: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| (function argument [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) argument)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; function definition: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (function-name parameter [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) parameter)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   function-body) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; conditional expression: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   cond-clause |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   cond-clause) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| [condition answer] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 40: Syntactic naming conventions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In addition to the terminology of [figure 40](#%28counter._%28figure._fig~3aterminology%29%29),
    we say function header for second component of a definition. Accordingly, the
    expression component is called function body. People who consider programming
    languages as a form of mathematics use left-hand side for a header and right-hand
    side for the body. On occasion, you also hear or read the term actual arguments
    for the arguments in a function application.
  prefs: []
  type: TYPE_NORMAL
- en: BSL Meaning
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you hit the return key on your keyboard and ask DrRacket to evaluate an
    expression, it uses the laws of arithmetic and algebra to obtain a value. For
    the variant of BSL treated so far, [figure 38](#%28counter._%28figure._fig~3alex-beginner%29%29)
    defines grammatically what a value is—<wbr>the set of values is just a subset
    of all expressions. The set includes [Boolean](#%28tech._boolean%29)s, [String](#%28tech._string%29),
    and [Image](#%28tech._image%29)s.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rules of evaluation come in two categories. An infinite number of rules,
    like those of arithmetic, explain how to determine the value of an application
    of a primitive operation to values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1) == 2
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 2 1) == 1
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Remember == says that two expressions are equal according to the laws of computation
    in BSL. But BSL arithmetic is more general than just number crunching. It also
    includes rules for dealing with Boolean values, strings, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29) #true)        == #false
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "a" "a") == #true
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: And, like in algebra, you can always replace equals with equals; see [figure 41](#%28counter._%28figure._fig~3aequals-for-equals%29%29)
    for a sample calculation.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "h" "w"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 3)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "h" "w")) 4))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) "hw") 4))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 2 4))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([boolean?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._boolean~3f%29%29) #false)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == #true |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 41: Replacing equals by equals'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Second, we need a rule from algebra to understand the application of a functions
    to arguments. Suppose the program contains the definition
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (f x-1 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) x-n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   f-body) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Then an application of a function is governed by the law:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (f v-1 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) v-n) == f-body
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; with all occurrences of x-1  [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)  x-n
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; replaced with v-1  ...  v-n, respectively |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Due to the history of languages such as BSL, we refer to this rule as the beta
    orSee [Computing with lambda](part_three.html#%28part._sec~3alambda-technical%29)
    for more on this rule. beta-value rule.This rule is formulated as generally as
    possible, so it is best to look at a concrete example. Say the definition is
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (poly x y)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([expt](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._expt%29%29) 2 x) y))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'and DrRacket is given the expression (poly  3  5). Then the first step in an
    evaluation of the expression uses the beta rule:'
  prefs: []
  type: TYPE_NORMAL
- en: (poly 3 5) == ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([expt](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._expt%29%29) 2 3) 5) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) == ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 8 5) == 13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In addition to beta, we need rules that determine the value of [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expressions. These rules are algebraic even if they are not explicitly taught
    as part of the standard curriculum. When the first condition is #false, the first
    [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)-line
    disappears, leaving the rest of the lines intact:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)                    == ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#false [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]               ; first
    line removed |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [condition2 answer2]       [condition2 answer2] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))                       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This rule has the name [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)false.
    Here is [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)true:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)                    == answer-1
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#true answer-1] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [condition2 answer2] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The rule also applies when the first condition is [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29).Consider
    the following evaluation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([zero?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._zero~3f%29%29) 3) 1]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 3 3) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) 3])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; by plain arithmetic and “equals for equals” |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#false 1] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 3 3) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) 3])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; by rule [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)false
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 3 3) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) 3])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; by plain arithmetic and “equals for equals” |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#true ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) 3])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ; by rule [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)true
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The calculation illustrates the rules of plain arithmetic, the replacement
    of equals by equals, and both [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    rules.Exercise 121\. Evaluate the following expressions step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 12 8) 2/3)
    |'
  prefs:
  - PREF_OL
  type: TYPE_TB
- en: '|    ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 20 ([sqrt](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sqrt%29%29) 4)))
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_OL
  type: TYPE_TB
- en: '|   [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 0 0) #false]
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|   [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) 0 1) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "a" "a")]
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29)  1 0) 9)])
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_OL
  type: TYPE_TB
- en: '|   [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 2 0) #false]
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|   [([>](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e%29%29) 2 1) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "a" "a")]
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29)  1 2) 9)])
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Use DrRacket’s stepper to confirm your computations. [![image](../Images/6ced5172e19e8bb3e92a5f65e1910f46.jpg)](#%28counter._%28exercise._ex~3aeval1%29%29)Exercise 122\.
    Suppose the program contains these definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (f x y)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 3 x) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) y y)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Show how DrRacket evaluates the following expressions, step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (f 1 2) (f 2 1))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (f 1 ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 2 3))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (f (f 1 ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 2 3)) 19)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use DrRacket’s stepper to confirm your computations. [![image](../Images/4e4c4c38792c504a4d72b3b6a1f06e4f.jpg)](#%28counter._%28exercise._ex~3aeval%2Bdef1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Meaning and Computing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The stepper tool in DrRacket mimics a student in a pre-algebra course. In a
    sense, the stepper is like a mechanized student from a pre-algebra course, and
    it is extremely good at, and also extremely fast, applying the laws ofA scientist
    calls the stepper a model of DrRacket’s evaluation mechanism. [Refining Interpreters](part_four.html#%28part._ch~3aevaluator%29)
    presents another model, an interpreter. arithmetic and algebra as spelled out
    here.
  prefs: []
  type: TYPE_NORMAL
- en: You can, and you ought to, use the stepper when you don’t understand how a new
    language construct works. The sections on Computing suggest exercises for this
    purpose, but you can make up your own examples, run them through the stepper,
    and ponder why it takes certain steps.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you may also wish to use the stepper when you are surprised by the
    result that a program computes. Using the stepper effectively in this way requires
    practice. For example, it often means copying the program and pruning unnecessary
    pieces. But once you understand how to use the stepper well this way, you will
    find that this procedure clearly explains run-time errors and logical mistakes
    in your programs.
  prefs: []
  type: TYPE_NORMAL
- en: BSL Errors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When DrRacket discovers that some parenthesized phrase does not belong to BSL,
    it signals a syntax error. To determine whether aFor a nearly full list of error
    messages, see the last section of this intermezzo. fully-parenthesized program
    is syntactically legal, DrRacket uses the grammar in [figure 39](#%28counter._%28figure._fig~3asyn-beginner%29%29)
    and reasons along the lines explained above. Not all syntactically legal programs
    have meaning, however.
  prefs: []
  type: TYPE_NORMAL
- en: 'When DrRacket evaluates a syntactically legal program and discovers that some
    operation is used on the wrong kind of value, it raises a run-time error. Consider
    the syntactically legal expression ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29)  1  0),
    which as you know from mathematics, 1/0 has no value. Since BSL’s calculations
    must be consistent with mathematics, DrRacket signals an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| /: division by zero |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Naturally it also signals an error when an expression such as ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29)  1  0)
    is nested deeply inside of an another expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 20 2) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 10 10)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| /: division by zero |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'DrRacket’s behavior translates into our calculations as follows. When we find
    an expression that is not a value and when the evaluation rules allow no further
    simplification, we say the computation is stuck. This notion of stuck corresponds
    to a run-time error. For example, computing the value of the above expression
    leads to a stuck state:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 20 2) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) 10 10)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 20 2) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 40 ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'What this calculation also shows is that DrRacket eliminates the context of
    a stuck expression as it signals an error. In this concrete example, it eliminates
    the addition of 40 to the stuck expression ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29)  1  0).Not
    all nested stuck expressions end up signaling errors. Suppose a program contains
    this definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (my-divide n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) n 0) "inf"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 n)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If you now apply my-divide to 0, DrRacket calculates as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (my-divide 0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 0 0) "inf"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 0)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It would obviously be wrong to say that the function signals the division-by-zero
    error now, even though an evaluation of the shaded sub-expression may suggest
    it. The reason is that ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29)  0  0)
    evaluates to #true and therefore the second [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause does not play any role:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (my-divide 0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 0 0) "inf"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 0)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#true "inf"] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 0)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == "inf" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Fortunately, our laws of evaluation take care of these situations automatically.
    We just need to remember when they apply. For example, in
  prefs: []
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 20 2) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 20 2))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the addition cannot take place before the multiplication or division. Similarly,
    the shaded division in
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 0 0) "inf"]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 0)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'cannot be substituted for the complete [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression until the corresponding line is the first condition in the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29).As
    a rule of thumb, it is best to keep the following in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Always choose the outermost and left-most nested expression that is ready for
    evaluation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'While this guideline may look simplistic, it always explains BSL’s results.In
    some cases, programmers also want to define functions that raise errors. Recall
    the checked version of area-of-disk from [Input Errors](#%28part._sec~3ainput-errors%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (checked-area-of-disk v)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29) v) (area-of-disk v)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) "number
    expected")])) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Now imagine applying checked-area-of-disk to a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) (checked-area-of-disk "a")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    (checked-area-of-disk 10)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      [([number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29) "a") (area-of-disk "a")]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) "number
    expected")]) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    (checked-area-of-disk 10)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      [#false (area-of-disk "a")] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) "number
    expected")]) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (checked-area-of-disk 10)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) "number
    expected") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    (checked-area-of-disk 10)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: At this point you might try to evaluate the second expression, but even if you
    do find out that its result is roughly 314, your calculation must eventually deal
    with the [error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29)
    expression, which is just like a stuck expression. In short, the calculation ends
    in
  prefs: []
  type: TYPE_NORMAL
- en: ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) "number
    expected")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Boolean Expressions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Our current definition of BSL omits [or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)
    and [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    expressions. Adding them provides a case study of how to study new language constructs.
    We must first understand their syntax and then their semantics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the revised grammar of expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   expr |   | = |   | ... |'
  prefs: []
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) expr expr)
    |'
  prefs: []
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) expr expr)
    |'
  prefs: []
  type: TYPE_TB
- en: The grammar says that [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    and [or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)
    are keywords, each followed by two expressions. They are not function applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand why [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    and [or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)
    are not BSL-defined functions, we must look at their pragmatics first. Suppose
    we need to formulate a condition that determines whether ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29)  1  n)
    is r:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (check n r)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) n 0)) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 n) r)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We formulate the condition as an [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    combination because we don’t wish to divide by 0 accidentally. Now let us apply
    check to 0 and 1/5:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (check 0 1/5) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) 0 0)) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 0) 1/5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    were an ordinary operation, we would have to evaluate both sub-expressions, and
    doing so would trigger an error. Instead [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    simply does not evaluate the second expression when the first one is #false, meaning,
    [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    short-circuits evaluation.It would be easy to formulate evaluation rules for [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    and [or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29).
    Another way to explain their meaning is to translate them into other expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) exp-1 exp-2)
    |  | is short for |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   [exp-1 exp-2] &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) #false])
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'andTo make sure expr-2 evaluates to a Boolean value, these abbreviations should
    use ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)  expr-2  #true  #false)
    instead of just expr-2. We gloss over this detail here.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) exp-1 exp-2)
    |  | is short for |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   [exp-1 #true] &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) exp-2])
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So if you are ever in doubt about how to evaluate an [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    or [or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)
    expressions, use the above equivalences to calculate. But we trust that you understand
    these operations intuitively, and that is almost always enough.Exercise 123\.
    The use of [if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)
    may have surprised you in another way because this intermezzo does not mention
    this form elsewhere. In short, the intermezzo appears to explain [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    with a form that has no explanation either. At this point, we are relying on your
    intuitive understanding of [if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)
    as a short-hand for [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29).
    Write down a rule that shows how to reformulate
  prefs: []
  type: TYPE_NORMAL
- en: ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) exp-test exp-then exp-else)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: as a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression. [![image](../Images/2c3215f804d4f44b312f946fd5adf4fd.jpg)](#%28counter._%28exercise._ex~3aif-cond%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Constant Definitions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Programs consist not only of function definitions but also constant definitions,
    but these weren’t included in our first grammar. So here is an extended grammar
    that includes constant definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   definition |   | = |   | ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) name expr)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The shape of a constant definition is similar to that of a function definition.
    While the keyword [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)
    distinguishes constant definitions from expressions, it does not differentiate
    from functionAs it turns out DrRacket has another way of dealing with function
    definitions; see [Nameless Functions](part_three.html#%28part._ch~3a3lambda%29).
    definitions. For that, a human reader must look at the second component of the
    definition.Next we must understand what a constant definition means. For a constant
    definition with a literal constant on the right hand side, such as
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) RADIUS 5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the variable is just a short hand for the value. Wherever DrRacket encounters
    RADIUS during an evaluation, it replaces it with 5.For a definition with a proper
    expression on the right-hand side, say,
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) DIAMETER ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 2 RADIUS))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: we must immediately determine the value of the expression. This process makes
    use whatever definitions precede this constant definition. Hence,
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) RADIUS 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) DIAMETER ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 2 RADIUS))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: is equivalent to
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) RADIUS 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) DIAMETER 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This recipe even works when function definitions are involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) RADIUS 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) DIAMETER ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 2 RADIUS))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (area r) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 3.14 ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) r r)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) AREA-OF-RADIUS (area RADIUS))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As DrRacket steps through this sequence of definitions, it first determines
    that RADIUS stands for 10, DIAMETER for 20, and area is the name of a function.
    Finally, it evaluates (area  RADIUS) to 314 and associates AREA-OF-RADIUS with
    that value.Mixing constant and function definitions gives rise to a new kind of
    run-time error, too. Take a look at this program:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) RADIUS 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) DIAMETER ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 2 RADIUS))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) AREA-OF-RADIUS (area RADIUS))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (area r) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 3.14 ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) r r)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It is like the one above with the last two definitions swapped. For the first
    two definitions, evaluation proceeds as before. For the third one, however, evaluation
    goes wrong. The recipe calls for the evaluation of (area  RADIUS). While the definition
    of RADIUS precedes this expression, the definition of area has not yet been encountered.
    If you were to evaluate the program with DrRacket, you would therefore get an
    error, explaining that ``this function is not defined.'''' So be carefully about
    using functions in constant definitions only when you know they are defined.Exercise 124\.
    Evaluate the following program, step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) PRICE 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) SALES-TAX ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 0.08 PRICE))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) TOTAL ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) PRICE SALES-TAX))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Does the evaluation of the following program signal an error?
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) COLD-F 32)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) COLD-C (fahrenheit->celsius COLD-F))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (fahrenheit->celsius f)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 5/9 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) f 32)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: How about the next one?
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) LEFT -100)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) RIGHT 100)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (f x) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 5 ([expt](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._expt%29%29) x 2)) 10))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) f@LEFT (f LEFT))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) f@RIGHT (f RIGHT))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Check your computations with DrRacket’s stepper. [![image](../Images/da5be6b9af809ae5f77de1dc30242e05.jpg)](#%28counter._%28exercise._ex~3adef-var-sem3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Structure Type Definitions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As you can imagine, [define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)
    is the most complex BSL construct. We have therefore saved its explanation for
    last. Here is the grammar:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   definition |   | = |   | ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) name [name ...])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'A structure type definition is a third form of definition. The keyword distinguishes
    it from both function and constant definitions.Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) point [x y z])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since point, x, y, and z are variables and the parentheses are placed according
    to the grammatical pattern, it is a proper definition of a structure type. In
    contrast, these two parenthesized sentences
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) [point x y z])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) point x y z)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'are illegal definitions, because [define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)
    is not followed by a single variable name and a sequence of variables in parentheses.While
    the syntax of [define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)
    is straightforward, its meaning is difficult to spell out with evaluation rules.
    As mentioned several times, a [define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)
    definition defines several functions at once: a constructor, several selectors,
    and a predicate. Thus the evaluation of'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) c [s-1 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) s-n])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'introduces into the following functions into the program:'
  prefs: []
  type: TYPE_NORMAL
- en: 'make-c: a constructor;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'c-s-1...  c-s-n: a series of selectors; and'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'c?: a predicate.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These functions have the same status as [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29),
    [-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29),
    or [*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29).
    Before we can understand the rules that govern these new functions, however, we
    must return to the definition of values. After all, one purpose of a [define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)
    is to introduce a class of values that is distinct from all existing values.Simply
    put, the use of [define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)
    extends the universe of values. To start with, it now also contains structures,
    which compound several values into one. When a program contains a [define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)
    definition, its evaluation modifies the definition of values:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A value is one of: a number, a boolean, a string, an image,'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'or a structure value:'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '| (make-c _value-1 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) _value-n)
    |'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: assuming a structure type c is defined.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For example, the definition of point adds values of this shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (make-point 1 2 -1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (make-point "one" "hello" "world") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (make-point 1 "one" (make-point 1 2 -1)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Now we are in a position to understand the evaluation rules of the new functions.
    If c-s-1 is applied to a c structure, it returns the first component of the value.
    Similarly, the second selector extracts the second component, the third selector
    the third component, and so on. The relationship between the new data constructor
    and the selectors is best characterized with n equations added to BSL’s rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (c-s-1 (make-c V-1 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) V-n)) == V-1
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (c-s-n (make-c V-1 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) V-n)) == V-n
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: For our running example, we get the specific equations
  prefs: []
  type: TYPE_NORMAL
- en: '| (point-x (make-point V U W)) == V |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (point-y (make-point V U W)) == U |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (point-z (make-point V U W)) == W |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'When DrRacket sees (point-y  (make-point  3  4  5)), it replaces the expression
    with 4 while (point-x  (make-point  (make-point  1  2  3)  4  5)) evaluates to
    (make-point  1  2  3).The predicate c? can be applied to any value. It returns
    #true if the value is of kind c and #false otherwise. We can translate both parts
    into two equations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (c? (make-c V-1 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) V-n)) == #true
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (c? V)                    == #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'if V is a value not constructed with make-c. Again, the equations are best
    understood in terms of our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (point? (make-point U V W)) == #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (point? X)                  == #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'if X is a value but not a point structure.Exercise 125\. Discriminate the legal
    from the illegal sentences:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  oops  [])
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  child  [parents  dob  date])
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)  (child  person)  [dob  date])
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explain why the sentences are legal or illegal. [![image](../Images/06296ec6cd7ea788af13a06df0708d86.jpg)](#%28counter._%28exercise._ex~3adefine-struct-syn%29%29)Exercise 126\.
    Identify the values among the following expressions, assuming the definitions
    area contains these structure type definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) point [x y z])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) none  [])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: (make-point  1  2  3)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (make-point  (make-point  1  2  3)  4  5)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (make-point  ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  2)  3  4)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (make-none)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (make-point  (point-x  (make-point  1  2  3))  4  5)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain why the expressions are values or not. [![image](../Images/f61de290a2364b3356a548c562fd8233.jpg)](#%28counter._%28exercise._ex~3adefine-struct-value%29%29)Exercise 127\.
    Suppose the program contains
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) ball [x y speed-x speed-y])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Predict the results of evaluating the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: ([number?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number~3f%29%29)  (make-ball  1  2  3  4))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (ball-speed-y  (make-ball  ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  2)  ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  3  3)  2  3))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (ball-y  (make-ball  ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  1  2)  ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  3  3)  2  3))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (ball-x  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  1  2))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (ball-speed-y  5)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check your predictions in the interactions area and with the stepper. [![image](../Images/011d2083180a9a59ea5c66dd423eac2a.jpg)](#%28counter._%28exercise._ex~3adefine-struct2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: BSL Tests
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Figure 42](#%28counter._%28figure._fig~3afull-grammar%29%29) presents all
    of BSL plus these testing forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29),The
    actual grammar of BSL is even a bit larger; see the Help Desk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[check-within](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-within%29%29),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[check-member-of](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-member-of%29%29),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[check-range](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-range%29%29),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[check-error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-error%29%29),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[check-random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-random%29%29),
    and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|   def-expr |   | = |   | definition |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | expr |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | test-case |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   |   |   |   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   definition |   | = |   | ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (name variable variable ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) name expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) name [name ...])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   |   |   |   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   expr |   | = |   | (name expr expr ...) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29) [expr expr] ... [expr expr])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29) [expr expr] ... [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) expr])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) expr expr expr ...)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) expr expr expr ...)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | name |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | number |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | string |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | image |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   |   |   |   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   test-case |   | = |   | ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) expr expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([check-within](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-within%29%29) expr expr expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([check-member-of](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-member-of%29%29) expr expr ...)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([check-range](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-range%29%29) expr expr expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([check-error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-error%29%29) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([check-random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-random%29%29) expr expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29) expr name)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 42: BSL, Full Grammar'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The general meaning of testing expressions is easy to explain. When you click
    the RUN button, DrRacket collects all testing expressions and moves them to the
    end of the program, retaining the order in which they appear. It then evaluates
    the content of the definitions area. Each test evaluates its pieces and then compares
    them with the expected outcome via some predicate. Beyond that, tests communicate
    with DrRacket to collect some statistics and information on how to display test
    failures.
  prefs: []
  type: TYPE_NORMAL
- en: 'For details, read the documentation on these test forms. Here are some illustrative
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    compares the outcome and the expected value with [equal?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._equal~3f%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) 3 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [check-member-of](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-member-of%29%29)
    compares the outcome and the expected values with [equal?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._equal~3f%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if one of them yields #true, the test succeeds |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-member-of](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-member-of%29%29) "green" "red" "yellow" "green")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [check-within](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-within%29%29)
    compares the outcome and the expected value with a predicate |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;  like [equal?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._equal~3f%29%29)
    but allows for a tolerance of epsilon for each inexact number |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-within](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-within%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) #i1.0 #i1.1) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) #i0.9 #i1.2) 0.2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [check-range](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-range%29%29)
    is like [check-within](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-within%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; but allows for a specification of an interval |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-range](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-range%29%29) 0.9 #i0.6 #i1.0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [check-error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-error%29%29)
    checks whether an expression signals (any) error |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-error%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [check-random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-random%29%29)
    evaluates the sequences of calls to [random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29)
    in the |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; two expressions such that they yield the same number |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-random%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) 3) ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) 9))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) 3) ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) 9)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29)
    determines whether a predicate produces #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; when applied to the outcome, that is, whether outcome has a certain property
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29) 4 [even?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._even~3f%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'All of the above tests succeed. The remainig parts of the book re-introduce
    these test forms as needed.Exercise 128\. Copy the following tests into DrRacket’s
    definitions area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) 3 4)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-member-of](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-member-of%29%29) "green" "red" "yellow" "grey")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-within](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-within%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) #i1.0 #i1.1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) #i0.9 #i1.2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               0.01) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-range](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-range%29%29) #i0.9 #i0.6 #i0.8)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-error%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-random%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) 3) ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) 9))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) 9) ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) 3)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29) 4 [odd?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._odd~3f%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Validate that all of them fail and explain why. [![image](../Images/85df87fecd666f169876494960796c33.jpg)](#%28counter._%28exercise._ex~3atest-fails%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: BSL Error Messages
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A BSL program may signal many kinds of syntax errors. While we have developed
    BSL and its error reporting system specifically for novices who, by definition
    make mistakes, error messages need some getting used to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below we sample the kinds of error messages that you may encounter. Each entry
    in one of the listings consist of three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: the code fragments that signal the error message;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the error message; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an explanation with a suggestion on how to fix the mistake.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example, which is the worst possible error message you
    may ever see:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (absolute n)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;     [[<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) 0 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) n)]
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) n]))
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; <: expected a function call, but there is no open parenthesis before
    this function &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| A [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expressions consists of the keyword followed by an arbitrarily long sequence of
    [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses. In turn, every clause consists of two parts: a condition and an answer,
    both of which are expressions. In this definition of absolute, the first clause
    starts with [<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29),
    which is supposed to be a condition but isn''t even an expression according to
    our definition. This confuses BSL so much that it doesn''t ``see'''' the open
    parenthesis to the left of [<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29).
    The fix is to use ([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29)  n  0)
    as the condition. |'
  prefs: []
  type: TYPE_TB
- en: The highlighting of [<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29)
    in the function definition points to the error. Below the definition, you can
    see the error message that DrRacket presents in the interactions window if you
    click RUN. Study the explanation of the error on the right to understand how to
    address this somewhat self-contradictory message. And now rest assured that no
    other error message is even remotely as opaque as this one.
  prefs: []
  type: TYPE_NORMAL
- en: So, when an error shows up and you need help, find the appropriate figure, search
    the entries for a match, and then study the complete entry.
  prefs: []
  type: TYPE_NORMAL
- en: Error Messages about Function Applications in BSL
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Assume that the definition area contains the following and nothing else:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](#%28tech._number%29)  [Number](#%28tech._number%29) -> [Number](#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; find the average of x and y |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (average x y)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) x y)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      2)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Hit the RUN button. Now you may encounter the error messages below.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; (f 1) &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; f: this function is not defined &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| The application names f as the function, and f is not defined in the definitions
    area. Define the function, or make sure that the variable name is spelled correctly.
    |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; (1 3 "three" #true) &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; function call: expected a function after the open parenthesis, but found
    a number &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| An open parenthesis must always followed by a keyword or the name of a function,
    and 1 is neither. A function name is either defined by BSL, say [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29),
    or in the definitions area, say average. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; (average 7) &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; average: expects 2 arguments, but found only 1 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| This function call applies average to one argument, 7, even though its definition
    calls for two numbers. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; (average 1 2 3) &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; average: expects 2 arguments, but found 3 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| Here average is applied to three numbers instead of two. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 1)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; make-posn: expects 2 arguments, but found only 1 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| Functions defined by BSL must also be applied to the correct number of arguments.
    For example, [make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)
    must be applied to two arguments. |'
  prefs: []
  type: TYPE_TB
- en: Error Messages about Wrong Data in BSL
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The error scenarios below again assume that the definition area contains the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](#%28tech._number%29)  [Number](#%28tech._number%29) -> [Number](#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; find the average of x and y |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (average x y) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Remember that posn is a pre-defined structure type.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) #true)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; posn-x: expects a posn, given #true &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| A function must be applied to the arguments it expects. For example, [posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29)
    expects an instance of posn. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; (average "one" "two") &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; +: expects a number as 1st argument, given "one" &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| A function defined to consume two [Number](#%28tech._number%29)s must be
    applied to two [Number](#%28tech._number%29)s; here average is applied to [String](#%28tech._string%29)s.
    The error message is triggered only when average applies [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)
    to these [String](#%28tech._string%29)s. Like all primitive operations, [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)
    is a checked function. |'
  prefs: []
  type: TYPE_TB
- en: Error Messages about Conditionals in BSL
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'This time we expect the a constant definition in the definitions area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29) in [0,1,...10) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) 0-to-9 ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) 10))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;   [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) 0-to-9 5)])
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; cond: expected a clause with a question and an answer, but found a clause
    with only one part &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| Every [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause must consist of exactly two parts: a condition and an answer. Here ([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29)  0-to-9  5)
    is apparently intended as the condition; the answer is missing. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;   [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) 0-to-9 5)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;    "head" &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;    "tail"]) &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; cond: expected a clause with a question and an answer, but found a clause
    with 3 parts &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| In this case, the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause consists of three parts, which also violates the grammar. While ([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29)  0-to-9  5)
    is clearly intended to be the condition, the clause comes with two answers: "head"
    and "tail". Pick one or create a single value from the two strings. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29))
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; cond: expected a clause after cond, but nothing’s there &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| A conditional must come with at least one [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause and usually it comes with at least two. |'
  prefs: []
  type: TYPE_TB
- en: Error Messages about Function Definitions in BSL
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: All of the following error scenarios assume that you have placed the code snippet
    into the definitions area and hit RUN.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) f(x) x)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; define: expected only one expression after the variable name f, but
    found 1 extra part &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| A definition consist of three parts: the [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29)
    keyword, a sequence of variable names enclosed in parentheses, and an expression.
    This definition consists of four parts; this definition is an attempt to use the
    standard notation from algebra courses for the header f  (x) instead of (f  x).
    |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (f x x) x)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; define: found a variable that is used more than once: x &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| The sequence of parameters in a function definition must not contain duplicate
    variables. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (g) x)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; define: expected at least one variable after the function name, but
    found none &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| In BSL a function header must contain at least two names. The first one is
    the name of the function; the remaining variable names are the parameters, and
    they are missing here. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (f x x) x)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; define: found a variable that is used more than once: x &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| The sequence of parameters in a function definition must not contain duplicate
    variable names. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (f (x)) x)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; define: expected a variable, but found a part &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| The function header contains (x), which is not a variable name. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (h x y) x y)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; define: expected only one expression for the function body, but found
    1 extra part &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| This function definition comes with two expressions following the header:
    x and y. |'
  prefs: []
  type: TYPE_TB
- en: Error Messages about Structure Type Definitions in BSL
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now you need to place the structure type definitions into the definitions area
    and hit RUN to experiment with the following errors.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) [x])
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) [x y])
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; define-struct: expected the structure name after define-struct, but
    found a part &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| A structure type definition consists of three parts: the [define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29)
    keyword, the structure''s name, and a sequence of names in parentheses. Here the
    structure''s name is missing. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) x
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;   [y y]) &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; define-struct: found a field name that is used more than once: y &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| The sequence of field names in a structure type definition must not contain
    duplicate names. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) x y)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) x y z)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; define-struct: expected at least one field name (in parentheses) after
    the structure name, but found something else &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| These structure type definitions lack the sequence of field names, enclosed
    in parentheses. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) x
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;   [(y) z]) &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; define-struct: expected a field name, but found a part &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '| Here the sequence of field names contains (z), which is not just a name but
    a name inside of parentheses. |'
  prefs: []
  type: TYPE_TB
- en: IIArbitrarily Large Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every data definition in [Fixed-Size Data](part_one.html) describes data of
    a fixed size. To us, Boolean values, numbers, strings, and images are atomic;
    computer scientists say they have a size of one unit. With a structure, you compose
    a fixed number of pieces of data. Even if you use the language of data definitions
    to create deeply nested structures, you always know the exact number of atomic
    pieces of data in any specific instance. Many programming problems, however, deal
    with an undetermined number of pieces of information that must be processed as
    one piece of data. For example, one program may have to compute the average of
    a bunch of numbers and another may have to keep track of an arbitrary number of
    objects in an interactive game. Regardless, it is impossible with your knowledge
    to formulate a data definition that can represent this kind of information as
    data.
  prefs: []
  type: TYPE_NORMAL
- en: This part revises the language of data definitions so that it becomes possible
    to describe data of (finite but) arbitrary size. For a concrete illustration,
    the first half of this part deals with lists, a form of data that appears in most
    modern programming languages. In parallel to the extended language of data definitions,
    this part also revises the design recipe to cope with such data definitions. The
    latter chapters demonstrate how these data definitions and the revised design
    recipe work in a variety of contexts.
  prefs: []
  type: TYPE_NORMAL
- en: 8Lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have probably not encountered self-referential definitions before. Your
    English teachers certainly stay away from these, and many mathematics courses
    are vague when it comes to such definitions. Programmers cannot afford to be vague.
    Their work requires precision. While a definition may in general contain several
    references to itself, this chapter presents useful examples that need just one,
    staring with the one for lists.
  prefs: []
  type: TYPE_NORMAL
- en: The introduction of lists also spices up the kind of applications we can study.
    While this chapter carefully builds up your intuition with examples, it also motivates
    the revision of the design recipe in the next chapter, which explains how to systematically
    create functions that deal with self-referential data definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 8.1Creating Lists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All of us make lists all the time. Before we go grocery shopping, we write down
    a list of items we wish to purchase. Some people write down a to-do list every
    morning. During December, many children prepare Christmas wish lists. To plan
    a party, we make a list of invitees. Arranging information in the form of lists
    is a ubiquitous part of our life.
  prefs: []
  type: TYPE_NORMAL
- en: Given that information comes in the shape of lists, we must clearly learn how
    to represent such lists as BSL data. Indeed, because lists are so important BSL
    comes with built-in support for creating and manipulating lists, similar to the
    support for Cartesian points (posn). In contrast to points, the data definition
    for lists is always left to you. But first things first. We start with the creation
    of lists.
  prefs: []
  type: TYPE_NORMAL
- en: When we form a list, we always start out with the empty list. In BSL, we represent
    the empty list with
  prefs: []
  type: TYPE_NORMAL
- en: '''()'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'which is pronounced “empty,” short for “empty list.” Like #true or 5, ''()
    is just a constant. When we add something to a list, we construct another list;
    in BSL, the [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    operation serves this purpose. For example,'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Mercury" '())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'constructs a list from the ''() list and the string "Mercury". [Figure 43](#%28counter._%28figure._fig~3abuild-a-list%29%29)
    presents this list in the same pictorial manner we used for structures. The box
    for [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    has two fields: [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)
    and [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29).
    In this specific example the [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)
    field contains "Mercury" and the [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    field contains ''().'
  prefs: []
  type: TYPE_NORMAL
- en: '| list |  | diagram |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Mercury"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''()) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | ![image](../Images/a7fae9cf0da3334fa0afdb04f276bc89.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Venus"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Mercury"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ''())) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | ![image](../Images/be5e13804475402c58f143e818a4dc6f.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Earth"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Venus"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Mercury"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       ''()))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | ![image](../Images/c93882ceb029d59dafa439bb538c626c.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 43: Building a list'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Once we have a list with one item in it, we can construct lists with two items
    by using [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    again. Here is one:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Venus" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Mercury" '()))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'And here is another:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Earth" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Mercury" '()))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The middle row of [figure 43](#%28counter._%28figure._fig~3abuild-a-list%29%29)
    shows how you can imagine lists that contain two items. It is also a box of two
    fields, but this time the [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    field contains a box. Indeed, it contains the box from the top row of the same
    figure.Finally, we construct a list with three items:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Earth" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Venus" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Mercury" '())))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last row of [figure 43](#%28counter._%28figure._fig~3abuild-a-list%29%29)
    illustrates the list with three items. Its [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    field contains a box that contains a box again. So, as we create lists we put
    boxes into boxes into boxes, etc. While this may appear strange at first glance,
    it is just like a set of Chinese gift boxes or a set of nested drinking cups,
    which we sometimes get for birthdays. The only difference is that BSL programs
    can nest lists much deeper than any artist could nest physical boxes.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Earth"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Venus"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Mercury"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       ''()))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ![image](../Images/20763aa24b7d16816ebba4c62082a9ac.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  | ![image](../Images/38313a26b797f2dbb287690256bf8fc5.jpg) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 44: Drawing a list'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Because even good artists would have problems with drawing deeply nested structures,
    computer scientists resort to box-and-arrow diagrams instead. [Figure 44](#%28counter._%28figure._fig~3alist-box%29%29)
    illustrates how to re-arrange the last row of [figure 43](#%28counter._%28figure._fig~3abuild-a-list%29%29).
    Each [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    structure becomes a separate box. If the rest field is too complex to be drawn
    inside of the box, we draw a bullet instead and a line with an arrow to the box
    that it contains. Depending on how the boxes are arranged you get two kinds of
    diagrams. The first, displayed in the top row of [figure 44](#%28counter._%28figure._fig~3alist-box%29%29),
    lists the boxes in the order in which they are created. The second, displayed
    in the bottom row, lists the boxes in the order in which they are [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)ed
    together. Hence the second diagram immediately tells you what [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)
    would produced when applied to the list, no matter how long the list is. For this
    reason, people tend to prefer the second arrangement.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 129\. Create BSL lists that represent
  prefs: []
  type: TYPE_NORMAL
- en: a list of celestial bodies, say, at least all the planets in our solar system;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a list of items for a meal, for example, steak, French fries, beans, bread,
    water, brie cheese, and ice cream; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a list of colors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sketch box representations of these lists, similar to those in [figure 43](#%28counter._%28figure._fig~3abuild-a-list%29%29)
    and [figure 44](#%28counter._%28figure._fig~3alist-box%29%29). Which of the sketches
    do you like better? [![image](../Images/0627b14f476844a3543e56dd71942a4e.jpg)](#%28counter._%28exercise._ex~3alist1%29%29)You
    can also make lists of numbers. Here is a list with the 10 digits:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 0
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 4
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 5
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 6
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 7
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 8
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 9 ''()))))))))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: To build this list requires 10 list constructions and one '(). For a list of
    three arbitrary numbers, for example,
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) [pi](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._pi%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) e
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) -22.3 ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'we need three [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)es.In
    general a list does not have to contain values of one kind, but may contain arbitrary
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Robbie
    Round" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) #true
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ''()))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The firstThen again, if this list is supposed to represent a record with a
    fixed number of pieces, use a structure type instead. item of this list is a string,
    the second one is a number, and the last one a Boolean. You may consider this
    list as the representation of a personnel record with three pieces of data: the
    name of the employee, the number of years spent at the company, and whether the
    employee has health insurance through the company. Or, you could think of it as
    representing a virtual player in some game. Without a data definition, you just
    can’t know what data is all about.Here is a first data definition that involves
    [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A 3LON is a list of three numbers: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Number](part_one.html#%28tech._number%29)  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Number](part_one.html#%28tech._number%29)  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Number](part_one.html#%28tech._number%29)  ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation a point in 3-dimensional space |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Of course, this data definition uses [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    like others use constructors for structure instances, and in a sense, [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    is just a special constructor. What this data definition fails to demonstrate
    is how to form lists of arbitrary length: lists that contain nothing, one item,
    two items, ten items, or perhaps 1,438,901 items.So let’s try again:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A List-of-names is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [String](part_one.html#%28tech._string%29)  [List-of-names](#%28tech._list._of._name%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation a list of invitees, by last name |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Take a deep breath, read it again. This data definition is one of the most
    unusual definitions you have ever encountered—<wbr>you have never before seen
    a definition that refers to itself. It isn’t even clear whether it makes sense.
    After all, if you had told your English teacher that “a table is a table” defines
    the word “table,” the most likely response would have been “Nonsense!” because
    a self-referential definition doesn’t explain what a word means.In computer science
    and in programming, though, self-referential definitions play a central role,
    and with some care, such definitions actually do make sense. Here “making sense”
    means that we can use the data definition for what it is intended for, namely,
    to generate examples of data that belong to the class that is being defined or
    to check whether some given piece of data belongs to the defined class of data.
    From this perspective, the definition of [List-of-names](#%28tech._list._of._name%29)
    makes complete sense. At a minimum, we can generate ''() as one example, using
    the first clause in the itemization. Given ''() as an element of [List-of-names](#%28tech._list._of._name%29),
    it is easy to make a second one:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Findler" '())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here we are using a [String](part_one.html#%28tech._string%29) and the only
    list from [List-of-names](#%28tech._list._of._name%29) to generate a piece of
    data according to the second clause in the itemization. With the same rule, we
    can generate many more lists of this kind:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Felleisen" ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Krishnamurthi" ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'And while these lists all contain one name (represented as a [String](part_one.html#%28tech._string%29)),
    it is actually possible to use the second line of the data definition to create
    lists with more names in them:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Felleisen" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Findler" '()))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This piece of data belongs to [List-of-names](#%28tech._list._of._name%29) because
    "Felleisen" is a [String](part_one.html#%28tech._string%29) and ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "Findler"  '())
    is a confirmed [List-of-names](#%28tech._list._of._name%29).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 130\. Create an element of [List-of-names](#%28tech._list._of._name%29)
    that contains five [String](part_one.html#%28tech._string%29)s. Sketch a box representation
    of the list similar to those found in [figure 43](#%28counter._%28figure._fig~3abuild-a-list%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Explain why
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "1" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "2" '()))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: is an element of [List-of-names](#%28tech._list._of._name%29) and why ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  2  '())
    isn’t. [![image](../Images/936bfaa051a08f330b68435590862a4b.jpg)](#%28counter._%28exercise._ex~3alists%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 131\. Provide a data definition for representing lists of [Boolean](part_one.html#%28tech._boolean%29)
    values. The class contains all arbitrarily long lists of [Boolean](part_one.html#%28tech._boolean%29)s.
    [![image](../Images/a55be7c8cc317c264f2cb4f70118b454.jpg)](#%28counter._%28exercise._ex~3alist7%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 8.2What Is '(), What Is [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s step back for a moment and take a close look at ''() and [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29).
    As mentioned, ''() is just a constant. When compared to constants such as 5 or
    "this is a string", it looks more like a function name or a variable; but when
    compared with #true and #false, it should be easy to see that it really is just
    BSL’s representation for empty lists.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As for our evaluation rules, ''() is a new kind of atomic value, distinct from
    any other kind: numbers, Booleans, strings, and so on. It also isn’t a compound
    value, like [Posn](part_one.html#%28tech._posn%29)s. Indeed, ''() is so unique,
    it belongs into a class of values all by itself. As such, this class of values
    comes with a predicate that recognizes only ''() and nothing else:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Any](part_one.html#%28tech._any%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is the given value ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) x) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Like all predicates, [empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29)
    can be applied to any value from the universe of BSL values. It produces #true
    precisely when it is applied to ''():'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) "hello
    world") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 0 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Next we turn to [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29).
    Everything we have seen so far suggests that [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    is a constructor just like those introduced by structure type definitions. More
    precisely, [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    appears to be the constructor for a two-field structure: the first one for any
    kind of value and the second one for an list-like value. The following definitions
    translate this idea into BSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) pair [[left](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._left%29%29) [right](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._right%29%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A ConsPair is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-pair  [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)).
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)
    -> [ConsPair](#%28tech._conspair%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (our-cons a-value a-list)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-pair a-value a-list)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The only catch is that our-cons accepts all possible BSL values for its second
    argument and [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    doesn’t, as the following experiment validates:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| cons: second argument must be a list, but received 1 and 2 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Put differently, [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    is really a checked function, the kind discussed in [Itemizations and Structures](part_one.html#%28part._ch~3amix%29),
    which suggests the following refinement:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A ConsOrEmpty is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Any](part_one.html#%28tech._any%29)  [ConsOrEmpty](#%28tech._consorempty%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  [ConsOrEmpty](#%28tech._consorempty%29) is the class of
    all lists |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Any](part_one.html#%28tech._any%29)  [ConsOrEmpty](#%28tech._consorempty%29)
    -> [ConsOrEmpty](#%28tech._consorempty%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (our-cons a-value a-list)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) a-list) (make-pair a-value a-list)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(pair? a-list) (make-pair a-value a-list)] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) "cons:
    second argument ...")])) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    is a checked constructor function, you may be wondering how to extract the pieces
    from the resulting structure. After all, [Adding Structure](part_one.html#%28part._ch~3astructure%29)
    says that programming with structures requires selectors. Since a [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    structure has two fields, there are two selectors: [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)
    and [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29).
    They are also easily defined in terms of our pair structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [ConsOrEmpty](#%28tech._consorempty%29) -> [Any](part_one.html#%28tech._any%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts the [left](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._left%29%29)
    part of the given pair |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (our-first a-list)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) a-list)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._error%29%29) ''our-first "...")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       (pair-left a-list))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Define our-rest.
  prefs: []
  type: TYPE_NORMAL
- en: If your program can access the structure type definition for pair, it is easy
    to create pairs that don’t contain '() or another pair in the [right](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._right%29%29)
    field. Whether such bad instances are created intentionally or accidentally, they
    tend to break functions and programs in strange ways. BSL therefore hides the
    actual structure type definition for [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    to avoid these problems. [Local Definitions](part_three.html#%28part._sec~3alocal-definitions%29)
    demonstrates one way how your programs can hide such definitions, too, but for
    now, you don’t need this power.
  prefs: []
  type: TYPE_NORMAL
- en: '| ''() |  | a special value, mostly to represent the empty list |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| [empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29)
    |  | a predicate to recognize ''() and nothing else |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    |  | a checked constructor to create two-field instances |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)
    |  | the selector to extract the last item added |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    |  | the selector to extract the extended list |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| [cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29)
    |  | a predicate to recognizes instances of [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 45: List primitives'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 45](#%28counter._%28figure._fig~3acons%29%29) summarizes this section.
    The key insight is that ''() is a unique value and that [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    is a checked constructor that produces list values. Furthermore, [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29),
    [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29),
    and [cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29)
    are merely distinct names for the usual predicate and selectors. What this chapter
    teaches then is not a new way of creating data but a new way of formulating data
    definitions.'
  prefs: []
  type: TYPE_NORMAL
- en: 8.3Programming with Lists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Say you’re keeping track of your friends with some list, and say the list has
    grown so large that you need a program to determine whether someHere we use the
    word “friend” in the sense of social networks, not the real world. name is on
    the list. To make this idea concrete, let us state it as an exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem You are working on the contact list for some new cell phone.
    The phone’s owner updates and consults this list on various occasions. For now,
    you are assigned the task of designing a function that consumes this list of contacts
    and determines whether it contains the name “Flatt.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Once we have a solution to this sample problem, we will generalize it to a
    function that finds any name on a list.The data definition for [List-of-names](#%28tech._list._of._name%29)
    from the preceding is appropriate for representing the list of names that the
    function is to search. Next we turn to the header material:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-names](#%28tech._list._of._name%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines whether "Flatt" is on a-list-of-names |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (contains-flatt? a-list-of-names)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'While a-list-of-names is a good name for the list of names that the function
    consumes, it is a mouthful and we therefore shorten it to alon.Following the general
    design recipe, we next make up some examples that illustrate the purpose of contains-flatt?.
    First, we determine the output for the simplest input: ''(). Since this list does
    not contain any strings, it certainly does not contain "Flatt":'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (contains-flatt? '()) #false)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Then we consider lists with a single item. Here are two examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (contains-flatt? ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Find" ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (contains-flatt? ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               #true) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In the first case, the answer is #false because the single item on the list
    is not "Flatt"; in the second case, the single item is "Flatt", so the answer
    is #true. Finally, here is a more general example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (contains-flatt? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "A" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #true) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Again, the answer case must be #true because the list contains "Flatt". Stop!
    Make a general example for which the answer must be #false.'
  prefs: []
  type: TYPE_NORMAL
- en: Take a breath. Run the program. The header is a “dummy” definition for the function;
    you have some examples; they have been turned into tests; and best of all, some
    of them actually succeed. They succeed for the wrong reason but succeed they do.
    If things make sense now, read on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fourth step is to design a function template that matches the data definition.
    Since the data definition for lists of strings has two clauses, the function’s
    body must be a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression with two clauses. The two conditions determine which of the two kinds
    of lists the function received:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (contains-flatt? alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alon) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) alon) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Instead of ([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29)  alon),
    we could use [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    in the second clause.We can add one more hint to the template by studying each
    clause of the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression in turn. Specifically, recall that the design recipe suggests annotating
    each clause with selector expressions if the corresponding class of inputs consists
    of compounds. In our case, we know that ''() does not have compounds, so there
    are no components. Otherwise the list is constructed from a string and another
    list of strings, and we remind ourselves of this fact by adding ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alon)
    and ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon)
    to the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (contains-flatt? alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alon) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alon) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alon) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Now it is time to switch to the programming task proper, the fifth step of
    our design recipe. It starts from template and deals with each [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)-clause
    separately. If ([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29)  alon)
    is true, the input is the empty list, in which case the function must produce
    the result #false. In the second case, ([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29)  alon)
    is true. The annotations in the template remind us that there is a first string
    and the rest of the list. So let us consider an example that falls into this category:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "A"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The function, like a person, must compare the first item with "Flatt". In this
    example, the first one is "A" and not "Flatt", so the comparison yields #false.
    If we had considered some other example instead, say,'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'the function would determine that the first item on the input is "Flatt", and
    would therefore respond with #true. This implies that the second line in the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression should contain an expression that compares the first name on the list
    with "Flatt":'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (contains-flatt? alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alon) #false]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alon) "Flatt")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alon) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Furthermore, if the comparison yields #true, the function must produce #true.
    If the comparison yields #false, we are left with another list of strings: ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon).
    Clearly, the function can’t know the final answer in this case, because the answer
    depends on what “...” represents. Put differently, if the first item is not "Flatt",
    we need some way to check whether the rest of the list contains "Flatt".'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, we have such a function: contains-flatt?. According to its purpose
    statement, it determines whether a list contains "Flatt". The statement implies
    that, (contains-flatt?  l) tells us whether the list of strings l contains "Flatt".
    And, in the same vein, (contains-flatt?  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon))
    determines whether "Flatt" is a member of ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon),
    which is precisely what we need to know.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In short, the last line should be (contains-flatt?  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon)):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-names](#%28tech._list._of._name%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (contains-flatt? alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alon) #false]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alon) "Flatt") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (contains-flatt? ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alon)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The trick is now to combine the values of the two expressions in the appropriate
    manner. As mentioned, if the first expression yields #true, there is no need to
    search the rest of the list; if it is #false, though, the second expression may
    still yield #true, meaning the name "Flatt" is on the rest of the list. All of
    this suggests that the result of (contains-flatt?  alon) is #true if either the
    first expression in the last line or the second expression yields #true.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-names](#%28tech._list._of._name%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines whether "Flatt" occurs on alon |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (contains-flatt? ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "X" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Y"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Z" ''()))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (contains-flatt? ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "A" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''()))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   #true) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (contains-flatt? alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alon) #false]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alon) "Flatt")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|          (contains-flatt? ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alon)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 46: Searching a list'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 46](#%28counter._%28figure._fig~3acontains-flatt~3f%29%29) then shows
    the complete definition. Overall it doesn’t look too different from the definitions
    in the first chapter of the book. It consists of a signature, a purpose statement,
    two examples, and a definition. The only way in which this function definition
    differs from anything you have seen before is the self-reference, that is, the
    reference to contains-flatt? in the body of the [define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29).
    Then again, the data definition is self-referential, too, so in some sense the
    self-reference in the function shouldn’t be be too surprising.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 132\. Use DrRacket to run contains-flatt? in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Fagan"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Findler"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Fisler"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flanagan"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Felleisen"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Friedman" ''())))))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'What answer do you expect? [![image](../Images/f521e8ce8d3c68575ae8933b31bcfd0b.jpg)](#%28counter._%28exercise._contains-flatt01%29%29)Exercise 133\.
    Here is another way of formulating the second [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause in contains-flatt?:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alon) "Flatt") #true]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) (contains-flatt? ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alon))]) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Explain why this expression produces the same answers as the [or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)
    expression in the version of [figure 46](#%28counter._%28figure._fig~3acontains-flatt~3f%29%29).
    Which version is better? Explain. [![image](../Images/562114355047a1265b2d3bed5e541bef.jpg)](#%28counter._%28exercise._contains-flatt02%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 134\. Develop the function contains?. It determines whether some given
    string occurs on a given list of strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note BSL actually comes with [member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29),
    a function that consumes two values and checks whether the first occurs in the
    second, a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Don’t use [member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29)
    to define the contains? function. [![image](../Images/ef3c9643f3e45450a91dbb3703ae244d.jpg)](#%28counter._%28exercise._contains-flatt03%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 8.4Computing with Lists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Since we are still using BSL, the rules of algebra—<wbr>see the first intermezzo—<wbr>tell
    us how to determine the value of expressions such as
  prefs: []
  type: TYPE_NORMAL
- en: (contains-flatt? ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" '())))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'without DrRacket. Programmers must have an intuitive understanding of how this
    kind of calculation works, so we step through the one for this simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''()))) #false]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())) "Flatt")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (contains-flatt? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))))])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first step uses the usual substitution rule—<wbr>or the beta rule as the
    first intermezzo calls it—<wbr>to determine the value of an application. The result
    is a conditional expression, because, as an algebra teacher would say, the function
    is defined in a step-wise fashion. So here is how it continues:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#false #false] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())) "Flatt")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        (contains-flatt? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))))])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())) "Flatt")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        (contains-flatt? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))))])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          "Flatt") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        (contains-flatt? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))))])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               "Flatt") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (contains-flatt? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'To find the correct clause of the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression, we must determine the value of the conditions, one by one. Since a
    [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)ed
    list isn’t empty, the first condition’s result is #false and we therefore eliminate
    the first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause. Finally the condition in the second clause evaluates to #true because
    [cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29)
    of a [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)ed
    list holds. From here, it is just three more steps of arithmetic to get the final
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29) "Flatt" "Flatt")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (contains-flatt? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) #true
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (contains-flatt? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''())))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'First, ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "Flatt"  [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    evaluates to "Flatt" due to the laws for [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29).
    Second, "Flatt" is a string and equal to "Flatt". Third, ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29)  #true  X)
    is #true regardless of what X is.Exercise 135\. Use DrRacket’s stepper to check
    the calculation for'
  prefs: []
  type: TYPE_NORMAL
- en: (contains-flatt? ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" '())))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Also use the stepper to determine the value of
  prefs: []
  type: TYPE_NORMAL
- en: '| (contains-flatt? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "A" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Flatt" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "C" ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: What happens when "Flatt" is replaced with "B"? [![image](../Images/f42137528acefb798ca1909cba65b671.jpg)](#%28counter._%28exercise._ex~3acontains-step%29%29)Exercise 136\.
    Validate with DrRacket’s stepper
  prefs: []
  type: TYPE_NORMAL
- en: '| (our-first (our-cons "a" ''())) == "a" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (our-rest (our-cons "a" ''())) == "a" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: See [What Is '(), What Is cons](#%28part._sec~3alists-cons%29) for the definitions
    of these functions. [![image](../Images/3c918dee85aabcfa3a591c2e3030187f.jpg)](#%28counter._%28exercise._ex~3amy-cons-step%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 9Designing with Self-Referential Data Definitions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| ![image](../Images/63c23b4f8bf284b2d21bbd04efa33287.jpg) |  | ![image](../Images/350109c0283971148708e3e84b1ceba5.jpg)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 47: Arrows for self-references in data definitions and templates'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'At first glance, self-referential data definitions seem to be far more complex
    than those for mixed data. But, as the example of contains-flatt? shows, the six
    steps of the design recipe still work. Nevertheless, in this section we generalize
    the design recipe so that it works even better for self-referential data definitions.
    The new parts concern the process of discovering when a self-referential data
    definition is needed, deriving a template, and defining the function body:'
  prefs: []
  type: TYPE_NORMAL
- en: If a problem statement is about information of arbitrary size, you need a self-referential
    data definition to represent it. At this point, you have seen only one such class,
    [List-of-names](#%28tech._list._of._name%29). The left side of [figure 47](#%28counter._%28figure._fig~3adata-def-arrows%29%29)
    shows how to define List-of-strings in the same way. Other lists of atomic data
    work the same way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Numbers also seem to be arbitrarily large. For inexact numbers, this is an illusion.
    For precise integers, this is indeed the case. Dealing with integers is therefore
    a part of this chapter.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: For a self-referential data definition to be valid, it must satisfy two conditions.
    First, it must contain at least two clauses. Second, at least one of the clauses
    must not refer back to the class of data that is being defined. It is good practice
    to identify the self-references explicitly with arrows from the references in
    the data definition back to the term being defined; see [figure 47](#%28counter._%28figure._fig~3adata-def-arrows%29%29)
    for an example of such an annotation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You must check the validity of self-referential data definitions with the creation
    of examples. Start with the clause that does not refer to the data definition;
    continue with the other one, using the first example where the clause refers to
    the definition itself. For the data definition in [figure 47](#%28counter._%28figure._fig~3adata-def-arrows%29%29),
    you thus get lists like the following three:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ''() |  | by the first clause |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a" ''())
    |  | by the second clause, previous example |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b"
    &#124;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a"
    &#124;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '&#124;     ''())) &#124;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '|  | by the second clause, previous example |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: If it is impossible to generate examples from the data definition, it is invalid.
    If you can generate examples but you can’t see how to generate increasingly larger
    examples, the definition may not live up to its interpretation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Nothing changes about the header material: the signature, the purpose statement,
    and the dummy definition. When you do formulate the purpose statement, focus on
    what the function computes not how it goes about it, especially not how it goes
    through instances of the given data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is an example to make this design recipe concrete:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; [List-of-strings](#%28tech._list._of._string%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; count how many strings alos contains |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (how-many alos)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   0) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The purpose statement clearly states that the function just counts the strings
    on the given input; there is no need to think ahead about how you might formulate
    this idea as a BSL function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When it comes to functional examples, be sure to work through inputs that use
    the self-referential clause of the data definition several times. It is the best
    way to formulate tests that cover the entire function definition later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For our running example, the purpose statement almost generates functional
    examples by itself from the data examples:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| given |  | wanted |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ''() |  | 0 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "a"  ''())
    |  | 1 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "b"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "a"  ''()))
    |  | 2 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The first row is about the empty list, and we know that empty list contains
    nothing. The second row is a list of one string, so 1 is the desired answer. The
    last row is about a list of two strings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the core, a self-referential data definition looks like a data definition
    for mixed data. The development of the template can therefore proceed according
    to the recipe in [Itemizations and Structures](part_one.html#%28part._ch~3amix%29).
    Specifically, we formulate a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression with as many [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses as there are clauses in the data definition, match each recognizing condition
    to the corresponding clause in the data definition, and write down appropriate
    selector expressions in all [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    lines that process compound values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Question |  | Answer |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| Does the data definition distinguish among different sub-classes of data?
    |  | Your template needs as many [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses as sub-classes that the data definition distinguishes. |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| How do the sub-classes differ from each other? |  | Use the differences to
    formulate a condition per clause. |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| Do any of the clauses deal with structured values? |  | If so, add appropriate
    selector expressions to the clause. |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| Does the data definition use self-references? |  | Formulate “natural recursions”
    for the template to represent the self-references of the data definition. |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| If the data definition refers to some other data definition, where is this
    cross-reference to another data definition? |  | Specialize the template for the
    other data definition. Refer to this template. See [Designing with Itemizations,
    Again](part_one.html#%28part._mix._sec~3aitemization-design2%29), steps 4 and
    5 of the design recipe. |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 48: How to translate a data definition into a template'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 48](#%28counter._%28figure._fig~3atemplate-q%29%29) expresses this
    idea as a question-and-answer game. In the left column it states questions about
    the data definition for the argument, and in the right column it explains what
    the answer means for the construction of the template.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you ignore the last row and apply the first three questions to any function
    that consumes a [List-of-strings](#%28tech._list._of._string%29), you arrive at
    this shape:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (fun-for-los alos)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alos) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alos) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alos) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Recall, though, that the purpose of a template is to express the data definition
    as a function layout. That is, a template expresses as code what the data definition
    for the input expresses as a mix of English and BSL. Hence all important pieces
    of the data definition must find a counterpart in the template, and this guideline
    should also hold when a data definition is self-referential—<wbr>contains an arrow
    from inside the definition to the term being defined. In particular, when a data
    definition is self-referential in the ith clause and the kth field of the structure
    mentioned there, the template should be self-referential in the ith [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause and the selector expression for the kth field. For each such selector expression,
    add an arrow back to the function parameter. At the end, your template must have
    as many arrows as we have in the data definition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Figure 47](#%28counter._%28figure._fig~3adata-def-arrows%29%29) illustrates
    this idea with the template for functions that consume [List-of-strings](#%28tech._list._of._string%29)
    shown side by side with the data definition. Both contain one arrow that originates
    in the second clause—<wbr>the [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    field and selector, respectively—<wbr>and points back to the top of the respective
    definitions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Since BSL and most programming languages are text-oriented, you must use an
    alternative to the arrow, namely, a self-applications of the function to the appropriate
    selector expression:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (fun-for-los alos)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alos) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alos) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|        [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (fun-for-los ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alos)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: We refer to a self-use of a function as recursion and in the first four parts
    of the book as natural recursion.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For the function body we start with thoseFor the curious among our readers,
    the design recipe for arbitrarily large data corresponds to so-called “proofs
    by induction” in mathematics and the “leap of faith” represents the use of the
    induction hypothesis for the inductive step of such a proof. Logic proves the
    validity of this proof technique with an Induction Theorem. [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    lines without recursive function calls, known as base cases.The corresponding
    answers are typically easy to formulate or already given as examples.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we deal with the self-referential cases. We start by reminding ourselves
    what each of the expressions in the template line computes. For the natural recursion
    we assume that the function already works as specified in our purpose statement.
    This last step is a leap of faith, but as you will see, it always works.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The rest is then a matter of combining the various values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| Question |  | Answer |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| What are the answers for the non-recursive [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses? |  | The examples should tell you which values you need here. If not,
    formulate appropriate examples and tests. |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| What do the selector expressions in the recursive clauses compute? |  | The
    data definitions tell you what kind of data these expressions extract and the
    interpretations of the data definitions tell you what this data represents. |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| What do the natural recursions compute? |  | Use the purpose statement of
    the function to determine what the value of the recursion means not how it computes
    this answer. If the purpose statement doesn’t tell you the answer, improve the
    purpose statement. |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| How can the function combine these values to get the desired answer? |  |
    Find a function in BSL that combines the values. Or, if that doesn’t work, make
    a wish for a helper function. For many functions, this last step is straightforward.
    The purpose, the examples, and the template together tell you which function or
    expression “combines” the available values into the proper result. We refer to
    this function or expression as combinator, slightly abusing existing terminology.
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 49: How to turn a template into a function definition'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Question |  | Answer |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| So, if you are stuck here, ... |  | ... arrange the examples from the third
    step in a table. Place the given input in the first column and the desired output
    in the last column. In the intermediate columns enter the values of the selector
    expressions and the natural recursion(s). Add examples until you see a pattern
    emerge that suggests a combinator. |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| If the template refers to some other template, what does the auxiliary function
    compute? |  | Consult the other function’s purpose statement and examples to determine
    what it computes and assume you may use the result even if you haven’t finished
    the design of this helper function. |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 50: Turning a template into a function, the table method'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 49](#%28counter._%28figure._fig~3adefinition-q%29%29) formulates the
    first four questions and answers for this step. Let’s use this game to complete
    the definition of how-many. Renaming the fun-for-los template to how-many gives
    us this much:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; [List-of-strings](#%28tech._list._of._string%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines how many strings are on alos |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (how-many alos)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alos) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alos) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (how-many ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alos)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'As the functional examples already suggest, the answer for the base case is
    0. The two expressions in the second clause compute the [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)
    item and the number of strings in ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alos).
    To compute how many strings there are on all of alos, the function just needs
    to add 1 to the value of the latter expression:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (how-many alos)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alos) 0]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (how-many ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alos)) 1)]))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Felix Klock suggested this table-based approach to guessing the combinator.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Finding the correct way to combine the values into the desired answer isn’t
    always as easy. Novice programmers often get stuck with this step. As [figure 50](#%28counter._%28figure._fig~3adefinition-qb%29%29)
    suggests, it is a good idea to arrange the functional examples into a table that
    also spells out the values of the expressions in the template. [Figure 51](#%28counter._%28figure._fig~3afelix-table1%29%29)
    shows what this table looks like for our how-many example. The leftmost column
    lists the sample inputs, while the rightmost column contains the desired answers
    for these inputs. The three columns in between show the values of the template
    expressions: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alos),
    ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alos),
    and (how-many  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alos)),
    which is the natural recursion. If you stare at this table long enough, you recognize
    that the result column is always one more than the values in the natural recursion
    column. You may thus guess that'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (how-many ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alos)) 1)
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: is the expression that computes the desired result. Since DrRacket is fast at
    checking these kinds of guesses, plug it in and click RUN. If the examples-turned-into-tests
    pass, think through the expression to convince yourself it works for all lists;
    otherwise add more example rows to the table until you have a different idea.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The table also points out that some selector expressions in the template are
    possibly irrelevant for the actual definition. Here ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alos)
    is not needed to compute the final answer—<wbr>which is quite a contrast to contains-flatt?,
    which uses both expressions from the template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you work your way through the rest of this book, keep in mind that, in many
    cases, the combination step can be expressed with BSL’s primitives, say, [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29),
    [and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29),
    or [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29).
    In some cases, though, you may have to make a wish, that is, design an auxiliary
    function. Finally, in yet other cases, you may need nested conditions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, make sure to turn all examples into tests, that these tests pass, and
    that running them covers all the pieces of the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here are our examples for how-many turned into tests:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (how-many ''()) 0)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (how-many ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a" ''())) 1)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   (how-many ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a" ''()))) 2)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Remember it is best to formulate examples directly as tests and BSL allows this.
    Doing so also helps if you need to resort to the table-based guessing approach
    of the preceding step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| alos |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   alos) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   alos) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (how-many &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alos))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (how-many &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   alos) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''()) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | "a" |  | ''() |  | 0 |  | 1 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ''())) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | "b" |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''()) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | 1 |  | 2 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "x"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       ''()))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | "x" |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ''())) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | 2 |  | 3 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 51: Tabulating arguments, intermediate values, and results'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 52](#%28counter._%28figure._fig~3adesign5%29%29) summarizes the design
    recipe of this section in a tabular format.The first column names the steps of
    the design recipe, the second the expectedYou may want to copy [figure 52](#%28counter._%28figure._fig~3adesign5%29%29)
    onto one side of an index card and write down your favorite versions of the questions
    and answers for this design recipe onto the back of it. Then carry it with you
    for future reference. results of each step. In the third column, we describe the
    activities that get you there. The figure is tailored to the kind of self-referential
    list definitions we use in this chapter. As always, practice helps you master
    the process, so we strongly recommend that you tackle the following exercises,
    which ask you to apply the recipe to several kinds of examples.'
  prefs: []
  type: TYPE_NORMAL
- en: '| steps |  | outcome |  | activity |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| problem analysis |  | data definition |  | develop a data representation
    for the information; create examples for specific items of information and interpret
    data as information; identify self-references |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| header |  | signature; purpose; dummy definition |  | write down a signature
    using defined names; formulate a concise purpose statement; create a dummy function
    that produces a constant value from the specified range |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| examples |  | examples and tests |  | work through several examples, at least
    one per clause in the data definition |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| template |  | function template |  | translate the data definition into a
    template: one [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses per data clause; selectors where the condition identifies a structure;
    one natural recursion per self-reference |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| definition |  | full-fledged definition |  | find a function that combines
    the values of the expressions in the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses into the expected answer |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| test |  | validated tests |  | turn them into [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    tests and run them |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 52: Designing a function for self-referential data'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '9.1Finger Exercises: Lists'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 137\. Compare the template for contains-flatt? with the one for how-many.
    Ignoring the function name, they are the same. Explain the similarity. [![image](../Images/7df35a9a5c90b9de487c03305332ca10.jpg)](#%28counter._%28exercise._list0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 138\. Here is a data definition for representing sequences of amounts
    of money:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A List-of-amounts is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [PositiveNumber](part_one.html#%28tech._positivenumber%29)  [List-of-amounts](#%28tech._list._of._amount%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Create some examples to make sure you understand the data definition. Also add
    an arrow for the self-reference.
  prefs: []
  type: TYPE_NORMAL
- en: Design the sum function, which consumes a [List-of-amounts](#%28tech._list._of._amount%29)
    and computes the sum of the amounts. Use DrRacket’s stepper to see how (sum  l)
    works for a short list l in [List-of-amounts](#%28tech._list._of._amount%29).
    [![image](../Images/c237b15f5fcbc3e37b571daaa4ccc8a1.jpg)](#%28counter._%28exercise._list-sum1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 139\. Now take a look at this data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A List-of-numbers is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Number](part_one.html#%28tech._number%29)  [List-of-numbers](#%28tech._list._of._number%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Some elements of this class of data are appropriate inputs for sum from [exercise 138](#%28counter._%28exercise._list-sum1%29%29)
    and some aren’t.
  prefs: []
  type: TYPE_NORMAL
- en: 'Design the function pos?, which consumes a [List-of-numbers](#%28tech._list._of._number%29)
    and determines whether all numbers are positive numbers. In other words, if (pos?  l)
    yields #true, then l is an element of [List-of-amounts](#%28tech._list._of._amount%29).
    Use DrRacket’s stepper to understand how pos? works for ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  5  ''())
    and ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  -1  ''()).'
  prefs: []
  type: TYPE_NORMAL
- en: Also design checked-sum. The function consumes a [List-of-numbers](#%28tech._list._of._number%29).
    It produces their sum if the input also belongs to [List-of-amounts](#%28tech._list._of._amount%29);
    otherwise it signals an error. Hint Recall to use check-error.
  prefs: []
  type: TYPE_NORMAL
- en: What does sum compute for an element of [List-of-numbers](#%28tech._list._of._number%29)?
    [![image](../Images/e26eb3726effaa55ab4f2c2d65b24387.jpg)](#%28counter._%28exercise._list-sum2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 140\. Design the function all-true, which consumes a list of [Boolean](part_one.html#%28tech._boolean%29)
    values and determines whether all of them are #true. In other words, if there
    is any #false on the list, the function produces #false.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now design one-true, a function that consumes a list of Boolean values and
    determines whether at least one item on the list is #true. [![image](../Images/89316afa3a29d3c39253f406627af41e.jpg)](#%28counter._%28exercise._list-and%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Employ the table-based approach to coding. It may help with the base case.
    Use DrRacket’s stepper to see how these functions process the lists ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  #true  ''()),
    ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  #false  ''()),
    and ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  #true  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  #false  ''())).}'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 141\. If you are asked to design the function cat, which consumes
    a list of strings and appends them all into one long string, you are guaranteed
    to end up with this partial definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-string](#%28tech._list._of._string%29) -> [String](part_one.html#%28tech._string%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; concatenate all strings in l into one long string |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (cat ''()) "")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (cat ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b" ''()))) "ab")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (cat ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "ab" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "cd" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "ef" ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   "abcdef") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (cat l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) l) ""]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (cat ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| l |  | ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) l)
    |  | ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l)
    |  | (cat ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l))
    |  | (cat l) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''())) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | ??? |  | ??? |  | ??? |  | "ab" |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  "ab" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "cd"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "ef"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ''()))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | ??? |  | ??? |  | ??? |  | "abcdef" |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 53: A table for cat'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Fill in the table in [figure 53](#%28counter._%28figure._fig~3aex~3atable%29%29).
    Guess a function that can create the desired result from the values computed by
    the sub-expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Use DrRacket’s stepper to evaluate (cat  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "a"  '())).
    [![image](../Images/08f04faa6750f301439c1ba9b383907b.jpg)](#%28counter._%28exercise._list-string%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 142\. Design ill-sized?. The function consumes a list of images loi
    and a positive number n. It produces the first image on loi that is not an n by
    n square; if it cannot find such an image, it produces #false.'
  prefs: []
  type: TYPE_NORMAL
- en: Hint Use
  prefs: []
  type: TYPE_NORMAL
- en: '| ; ImageOrFalse is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – Image |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: for the result part of the signature. [![image](../Images/ebf5092b4291425cbdd27abfd0b65f88.jpg)](#%28counter._%28exercise._ex~3alist-image%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 9.2Non-empty Lists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you know enough to use [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    and to create data definitions for lists. If you solved (some of) the exercises
    at the end of the preceding section, you can deal with lists of various flavors
    of numbers, lists of Boolean values, lists of images, and so on. In this section
    we continue to explore what lists are and how to process them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with the simple-looking problem of computing the average of a list
    of temperatures. To simplify, we provide the data definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A List-of-temperatures is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [CTemperature](#%28tech._ctemperature%29)  [List-of-temperatures](#%28tech._list._of._temperature%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A CTemperature is a [Number](part_one.html#%28tech._number%29) greater
    than -273. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'For our intentions, you should think of temperatures as plain numbers, but
    the second data definition reminds you that in reality not all numbers are temperatures
    and you should keep this in mind.The header material is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-temperatures](#%28tech._list._of._temperature%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the average temperature |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (average alot) 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Making up examples for this problem is also easy, and so we just formulate
    one test:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (average ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3 ''())))) 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The expected result is of course the sum of the temperatures divided by the
    number of temperatures.A moment’s thought tells you that the template for average
    should be similar to the ones we have seen so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (average alot)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alot) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) alot)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alot) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (average ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alot)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The two [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses mirror the two clauses of the data definition; the questions distinguish
    empty lists from non-empty lists; and the natural recursion is needed because
    of the self-reference in the data definition.
  prefs: []
  type: TYPE_NORMAL
- en: It is way too difficult, however, to turn this template into a working function
    definition. The first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause needs a number that represents the average of an empty collection of temperatures,
    but there is no such number. Even if we ignore this problem for a moment, the
    second clause demands a function that combines a temperature and an average for
    many other temperatures into another average. Although it is isn’t impossible
    to compute this average, it is not what you learned to do and it isn’t natural.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we compute the average of a bunch of temperatures, we divide their sum
    by the number of temperatures. We said so when we formulated our trivial little
    example. This sentence, however, suggests that average is a function of three
    tasks: division, summing, and counting. Our guideline from [Fixed-Size Data](part_one.html)
    tells us to write one function per task and if we do so, the design of average
    is obvious:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-temperatures](#%28tech._list._of._temperature%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the average temperature |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (average alot)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) (sum alot) (how-many alot)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [List-of-temperatures](#%28tech._list._of._temperature%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds up the temperatures on the given list |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sum alot) 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [List-of-temperatures](#%28tech._list._of._temperature%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; counts the temperatures on the given list |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (how-many alot) 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The last two function definitions are wishes of course for which we need to
    design complete definitions. Doing so is fortunately easy because how-many from
    above works for [List-of-strings](#%28tech._list._of._string%29) and [List-of-temperatures](#%28tech._list._of._temperature%29)
    (why?) and because the design of sum follows the same old routine:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-temperatures](#%28tech._list._of._temperature%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds up the temperatures on the given list |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sum alot)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alot) 0]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alot) (sum ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alot)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Use the example for average to create one for sum and ensure that the
    test runs properly. Then run the tests for average.
  prefs: []
  type: TYPE_NORMAL
- en: When you read this definition of average now, it is obviously correct simply
    because it directly corresponds to what everyone learns about averaging in school.
    Still, programs run not just for us but for others. In particular, others should
    be able to read the signature and use the function and expect an informative answer.
    But, our definition of average does not work for empty lists of temperatures.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 143\. Determine how average behaves in DrRacket when applied to the
    empty list. Then design checked-average, a function that produces an informative
    error message when it is applied to '(). [![image](../Images/3076cc3748eebbd5b98995892396e7bc.jpg)](#%28counter._%28exercise._average-0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: In mathematics, we would say [exercise 143](#%28counter._%28exercise._average-0%29%29)
    shows that average is a partial function because it raises an error for '().
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'An alternative solution is to inform future readers through the signature that
    average doesn’t work for empty lists. For that, we need a data representation
    for lists that excludes ''(), something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A NEList-of-temperatures is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – ??? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [CTemperature](#%28tech._ctemperature%29)  [NEList-of-temperatures](#%28tech._nelist._of._temperature%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The questions is with what we should replace “???” so that the ''() list is
    excluded but all other lists of temperatures are still constructable. One hint
    is that while the empty list is the shortest list, any list of one temperature
    is the next shortest list. In turn, this suggests that the first clause should
    describe all possible lists of one temperature:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A NEList-of-temperatures is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [CTemperature](#%28tech._ctemperature%29)  ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [CTemperature](#%28tech._ctemperature%29)  [NEList-of-temperatures](#%28tech._nelist._of._temperature%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation non-empty lists of Celsius temperatures |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'While this definition differs from the preceding list definitions, it shares
    the critical elements: a self reference and a clause that does not use a self-reference.
    Strict adherence to the design recipe demands that you make up some examples of
    [NEList-of-temperatures](#%28tech._nelist._of._temperature%29) to ensure that
    the definition makes sense. As always, you should start with the base clause,
    meaning the example must look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) c '())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'where c stands for a CTemperature, like thus: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  -273  ''()).
    Also, it is clear that all non-empty elements of [List-of-temperatures](#%28tech._list._of._temperature%29)
    are also elements of the new class of data: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  1  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  2  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  3  ''())))
    fits the bill if ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  2  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  3  ''()))
    does, and ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  2  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  3  ''()))
    belongs to [NEList-of-temperatures](#%28tech._nelist._of._temperature%29) because
    ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  3  ''())
    is an element of [NEList-of-temperatures](#%28tech._nelist._of._temperature%29),
    as confirmed before. Check for yourself that there is no limit on the size of
    NEList-of-temperatures.Let us now return to the problem of designing average so
    that everyone knows it is for non-empty lists only. With the definition of [NEList-of-temperatures](#%28tech._nelist._of._temperature%29)
    we now have the means to say what we want in the signature:This alternative development
    explains that, in this case, we can narrow down the domain of average and create
    a total function.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [NEList-of-temperatures](#%28tech._nelist._of._temperature%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the average temperature |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (average ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3 ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (average ne-l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) (sum ne-l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (how-many ne-l))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Naturally the rest remains the same: the purpose statement, the example-test,
    and the function definition. After all, the very idea of computing the average
    assumes a non-empty collection of numbers, and that was the entire point of our
    discussion.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 144\. Will sum and how-many work for [NEList-of-temperatures](#%28tech._nelist._of._temperature%29)
    even though they are designed for inputs from [List-of-temperatures](#%28tech._list._of._temperature%29)?
    If you think they don’t work, provide counter-examples. If you think they would,
    explain why. [![image](../Images/711b3b160b0c1b6c8e66093b79676317.jpg)](#%28counter._%28exercise._nelist2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless the definition also raises the question how to design sum and
    how-many because they consume instances of [NEList-of-temperatures](#%28tech._nelist._of._temperature%29)
    now. Here is the obvious result of the first three steps of the design recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [NEList-of-temperatures](#%28tech._nelist._of._temperature%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the sum of the given temperatures |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (sum ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3 ''())))) 6)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sum ne-l) 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The example is adapted from the example for average; the dummy definition produces
    a number, but the wrong one for the given test.The fourth step is the most interesting
    part of the design of sum for NEList-of-temperatures. All preceding examples of
    design demand a template that distinguishes empty lists from non-empty, i.e.,
    [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)ed,
    lists because the data definitions have an appropriate shape. This is not true
    for NEList-of-temperatures. Here both clauses add [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)ed
    lists. The two clauses differ, however, in the [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    field of these lists. In particular, the first clause always uses ''() in the
    [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    field and the second one uses [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    instead. Hence the proper condition to distinguish data the first kind of data
    from the second extracts the [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    field and then uses [empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [NEList-of-temperatures](#%28tech._nelist._of._temperature%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sum ne-l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ne-l)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As always, [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    is just a replacement for ([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29)  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  ne-l))
    in the second clause.Next you should inspect both clauses and determine whether
    one or both of them deal with ne-l as if it were a structure. This is of course
    the case, which the unconditional use of [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    on ne-l demonstrates. Put differently, add appropriate selector expressions to
    the two clauses:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sum ne-l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ne-l)) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) ne-l) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) ne-l) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ne-l) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Before you read on, explain why the first clause does not contain the selector
    expression ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  ne-l).The
    final question of the template design concerns self-references in the data definition.
    As you know, NEList-of-temperatures contains one and therefore the template for
    sum demands one recursive use:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sum ne-l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ne-l)) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) ne-l) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) ne-l) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (sum ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ne-l)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Specifically, sumis called on ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  ne-l)
    in the second clause because the data definition is self-referential at the analogous
    point.For the fifth design step, let us understand how much we already have. Since
    the first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause looks significantly simpler than the second one with its recursive function
    call, you should start with that one. In this particular case, the condition says
    that sum is applied to a list with exactly one temperature, ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  ne-l).
    Clearly, this one temperature is the sum of all temperatures on the given list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sum ne-l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ne-l)) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) ne-l)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) ne-l) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (sum ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ne-l)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The second clause says that the list consists of a temperature and at least
    one more; ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  ne-l)
    extracts the first position and ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  ne-l)
    the remaining ones. Furthermore, the template suggests to use the result of (sum  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  ne-l)).
    But sum is the function that you are defining, and you can’t possibly know how
    it uses ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  ne-l).
    All you do know is what the purpose statement says, namely, that sum adds all
    the temperatures on the given list, which is ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  ne-l).
    If this statement is true, then (sum  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  ne-l))
    adds up all but one of the numbers of ne-l. To get the total, the function just
    has to add the first temperature:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sum ne-l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ne-l)) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) ne-l)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) ne-l) (sum ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ne-l)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If you now run the example/test for this function, you will see that the leap
    of faith is justified. Indeed, for reasons beyond this book, this leap of faith
    is always justified, which is why it is an inherent part of the design recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 145\. Design sorted>?. The function consumes a [NEList-of-temperatures](#%28tech._nelist._of._temperature%29).
    It produces #true if the temperatures are sorted in descending order, that is,
    if the second is smaller than the first, the third smaller than the second, and
    so on. Otherwise it produces #false.'
  prefs: []
  type: TYPE_NORMAL
- en: Hint This problem is another one where the table-based method for guessing the
    combinator works well. Here is a partial table for a number of examples in [figure 54](#%28counter._%28figure._fig~3asorted%29%29).
    Fill in the rest of the table. Then try to create an expression that computes
    the result from the pieces. [![image](../Images/45752b7e0aea940ba4c69b03663d221a.jpg)](#%28counter._%28exercise._nelist4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| l |  | ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) l)
    |  | ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l)
    |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (sorted>? &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (sorted>? &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  l) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ''())) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | 1 |  | ??? |  | #true |  | #false |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ''())) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | 3 |  | ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ''())
    |  | ??? |  | #true |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 0
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       ''()))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | 0 |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    ''())) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | ??? |  | ??? |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 54: A table for sorted>?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 146\. Design how-many for [NEList-of-temperatures](#%28tech._nelist._of._temperature%29).
    Doing so completes average, so ensure that average passes all of its tests, too.
    [![image](../Images/4b34fddeac96b834b5bfe2ace593440c.jpg)](#%28counter._%28exercise._nelist0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 147\. Develop a data definition for NEList-of-Booleans, a representation
    of non-empty lists of Boolean values. Then re-design the functions all-true and
    one-true from [exercise 140](#%28counter._%28exercise._list-and%29%29). [![image](../Images/b8a6f9b0e048f4d5a78f95cf96acadc3.jpg)](#%28counter._%28exercise._nelist1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 148\. Compare the function definitions from this section (sum, how-many,
    all-true, one-true) with the corresponding function definitions from the preceding
    sections. Is it better to work with data definitions that accommodate empty lists
    as opposed to definitions for non-empty lists? Why? Why not? [![image](../Images/27e6405030e34123484ff077d0dc777d.jpg)](#%28counter._%28exercise._nelist3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 9.3Natural Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The BSL programming language supplies many functions that consume lists and
    a few that produce them, too. Among those is [make-list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-list%29%29),
    which consumes a number n together with some other value v and produces a list
    that contains v n times. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([make-list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-list%29%29) 2 "hello")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (cons "hello" (cons "hello" ''())) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([make-list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-list%29%29) 3 #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (cons #true (cons #true (cons #true ''()))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([make-list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-list%29%29) 0 17)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In short, even though this function consumes atomic data, it produces arbitrarily
    large pieces of data. Your question should be how this is possible.Our answer
    is that [make-list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-list%29%29)’s
    input isn’t just a number, it is a special kind of number. In kindergarten you
    called these numbers “counting numbers,” i.e., these numbers are used to count
    objects. In computer science, these numbers are dubbed natural numbers. Unlike
    regular numbers, natural numbers come with a data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A N is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([add1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._add1%29%29)  [N](#%28tech._n%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation represents the counting numbers |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The first clause says that 0 is a natural number; it is of course used to say
    that there is no object to be counted. The second clause tells you that if n is
    a natural number, then n+1 is one too, because [add1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._add1%29%29)
    is a function that adds 1 to whatever number it is given. We could write this
    second clause as ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  n  1)
    but the use of [add1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._add1%29%29)
    is supposed to signal that this addition is special.
  prefs: []
  type: TYPE_NORMAL
- en: What is special about this use of [add1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._add1%29%29),
    is that it acts more like a constructor from some structure type definition than
    a regular function. For that reason, BSL also comes with the function [sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29),
    which is the “selector” corresponding to [add1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._add1%29%29).
    Given any natural number m not equal to 0, you can use [sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29)
    to find out the number that went into the construction of m. Put differently,
    [add1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._add1%29%29)
    is like [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    and [sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29)
    is like [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)
    and [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point you may wonder what the predicates are that distinguish 0 from
    those natural numbers that are not 0. There are two, just as for lists: [zero?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._zero~3f%29%29),
    which determines whether some given number is 0, and [positive?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._positive~3f%29%29),
    which determines whether some number is larger than 0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you are in a position to design functions on natural numbers, such as [make-list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-list%29%29),
    yourself. The data definition is already available, so let us add the header material:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](#%28tech._n%29)  [String](part_one.html#%28tech._string%29) -> [List-of-strings](#%28tech._list._of._string%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a list of n copies of s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (copier 0 "hello") ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (copier 2 "hello")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "hello" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "hello" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (copier n s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Developing the template is the next step. The questions for the template suggest
    that copier’s body is a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression with two clauses: one for 0 and one for positive numbers. Furthermore,
    0 is considered atomic and positive numbers are considered structured values,
    meaning the template needs a selector expression in the second clause. Last but
    not least, the data definition for [N](#%28tech._n%29) is self-referential in
    the second clause. Hence the template needs a recursive application to the correspond
    selector expression in the second clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (copier n s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([zero?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._zero~3f%29%29) n) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([positive?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._positive~3f%29%29) n) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (copier ([sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29) n) s) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [N](#%28tech._n%29)  [String](part_one.html#%28tech._string%29) -> [List-of-strings](#%28tech._list._of._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a list of n copies of s |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (copier 0 "hello") ''())
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (copier 2 "hello")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "hello" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "hello" ''())))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (copier n s)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([zero?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._zero~3f%29%29) n) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([positive?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._positive~3f%29%29) n) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) s (copier ([sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29) n) s))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 55: Creating a list of copies'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 55](#%28counter._%28figure._fig~3acopier%29%29) contains a complete
    definition of the copier function, as obtained from its template. Let us reconstruct
    this step carefully. As always, we start with the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause that has no recursive calls. Here the condition tells us that the (important)
    input is 0 and that means the function must produce a list with 0 items, that
    is, none. Of course, working through the second example has already clarified
    this case. Next we turn to the other [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause and remind ourselves what its expressions compute:'
  prefs: []
  type: TYPE_NORMAL
- en: ([sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29)  n)
    extracts the natural number that went into the construction of n, which we know
    is larger than 0;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (copier  ([sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29)  n)  s)
    produces a list of ([sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29)  n)
    strings s according to the purpose statement ofcopier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But the function is given n and must therefore produce a list with n strings
    s. Given a list with one too few strings, it is easy to see that the function
    must simply [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    one s onto the result of (copier  ([sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29)  n)  s).
    And that is precisely what the second clause specifies.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should run the tests to ensure that this function works at
    least for the two worked examples. In addition, you may wish to use the function
    on some additional inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 149\. Does copier function properly when you apply it to a natural
    number and a Boolean or an image? Or do you have to design another function? Read
    [Similarities Everywhere](part_three.html#%28part._ch~3add-similarities%29) for
    an answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative definition of copier might use [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (copier.v2 n s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([zero?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._zero~3f%29%29) n) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) s (copier.v2 ([sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29) n) s))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'How do copier and copier.v2 behave when you apply them to 0.1 and "x"? Explain.
    Use DrRacket’s stepper to confirm your explanation. [![image](../Images/a354c5b00d9074e2c843345da9ddf30d.jpg)](#%28counter._%28exercise._n1%29%29)Exercise 150\.
    Design the function add-to-pi. It consumes a natural number n and adds it to [pi](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._pi%29%29)
    without using the primitive [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)
    operation. Here is a start:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](#%28tech._n%29) -> [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  n  [pi](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._pi%29%29))
    without using [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-within](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-within%29%29) (add-to-pi 3) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 3 [pi](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._pi%29%29)) 0.001)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (add-to-pi n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [pi](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._pi%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Once you have a complete definition, generalize the function to add, which adds
    a natural number n to some arbitrary number x without using [+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29).
    Why does the skeleton use [check-within](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-within%29%29)?
    [![image](../Images/afb9e8fe0d8a7c56425d588ddf49a23e.jpg)](#%28counter._%28exercise._n2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 151\. Design the function multiply. It consumes a natural number n
    and multiplies it with a number x without using [*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Use DrRacket’s stepper to evaluate (multiply  3  x) for any x you like. How
    does multiply relate to what you know from grade school. [![image](../Images/de9767e4fe310f104549ae8c10c2958a.jpg)](#%28counter._%28exercise._n3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 152\. Design two functions: col and row.'
  prefs: []
  type: TYPE_NORMAL
- en: The function col consumes a natural number n and an image img. It produces a
    column—<wbr>a vertical arrangement—<wbr>of n copies of img.
  prefs: []
  type: TYPE_NORMAL
- en: The function row consumes a natural number n and an image img. It produces a
    row—<wbr>a horizontal arrangement—<wbr>of n copies of img. [![image](../Images/a9922ea9319ba4d762f64c5034ad2e38.jpg)](#%28counter._%28exercise._ex~3acol-row%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/b85dc09d0276a6ef158e81f838b8ce1e.jpg)       ![image](../Images/64054181f07bf3b0728462044c6b3d89.jpg)
          ![image](../Images/0a558104d801c695ef6212410c1c67d7.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 56: Random attacks'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 153\. The goal of this exercise is to visualizes the result of a 1968-style
    European student riot. Here is the rough idea. A small group of students meets
    to make paint-filled balloons, enters some lecture hall and randomly throws the
    balloons at the attendees. Your world program displays how the balloons color
    the seats in the lecture hall.
  prefs: []
  type: TYPE_NORMAL
- en: Use the two functions from [exercise 152](#%28counter._%28exercise._ex~3acol-row%29%29)
    to create a rectangle of 8 by 18 squares, each of which has size 10 by 10\. Place
    it in an [empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29)
    of the same size. This image is your lecture hall.
  prefs: []
  type: TYPE_NORMAL
- en: Design add-balloons. The function consumes a list of [Posn](part_one.html#%28tech._posn%29)
    whose coordinates fit into the dimensions of the lecture hall. It produces an
    image of the lecture hall with red dots added as specified by the [Posn](part_one.html#%28tech._posn%29)s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 56](#%28counter._%28figure._fig~3aex~3arandom1%29%29) shows the output
    of our solution when given some list of [Posn](part_one.html#%28tech._posn%29)s.
    The leftmost is the clean lecture hall, the second one is after two balloons have
    hit, and the last one is a highly unlikely distribution of 10 hits. Where is the
    10th? [![image](../Images/255fb8296b7af5352563ebb4ad09c60b.jpg)](#%28counter._%28exercise._ex~3arandom1%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 9.4Russian Dolls
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Wikipedia defines a Russian doll as “ a set of dolls of decreasing sizes placed
    one inside the other.” The paragraph is accompanied by an appropriate picture
    of dolls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f200fae54a9e7cfe36e1007b11dab467.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Of course, here the dolls are taken apart so that the viewer can see them all.
  prefs: []
  type: TYPE_NORMAL
- en: The problem may strike you as abstract or even absurd; it isn’t clear why you
    would want to represent Russian dolls or what you would do with such a representation.
    Just play along for now.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now consider the problem of representing such Russian dolls with BSL data. With
    a little bit of imagination, it is easy to see that an artist can create a nest
    of Russian dolls that consists of an arbitrary number of dolls. After all, it
    is always possible to wrap another layer around some given Russian doll. Then
    again, you also know that deep inside there is a solid doll without anything inside.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each layer of a Russian doll, we could care about many different things:
    its size, though it is related to the nesting level; its color; the image that
    is painted on the surface; and so on. Here we just pick one, namely the color
    of the doll, which we represent with a string. Given that, we know that each layer
    of the Russian doll has two properties: its color and the doll that is inside.
    To represent pieces of information with two properties, we always define a structure
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) layer [[color](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._color%29%29) doll])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'And then we add a data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An RD (short for Russian doll) is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-layer  [String](part_one.html#%28tech._string%29)  [RD](#%28tech._rd._rd%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Naturally, the first clause of this data definition represents the innermost
    doll or, to be precise, its color. The second clause is for adding a layer around
    some given Russian doll. We represent this with an instance of layer, which obviously
    contains the color of the doll and one other field: the doll that is nested immediately
    inside of this doll.Take a look at this doll:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/29c8f34f61963cbd60488fe986407d5d.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: It consists of three dolls. The red one is the innermost one, the green one
    sits in the middle, and the yellow is the current outermost wrapper. To represent
    this doll with an element of [RD](#%28tech._rd._rd%29), you start on either end.
    We proceed from the inside out. The red doll is easy to represent as an [RD](#%28tech._rd._rd%29).
    Since nothing is inside and since it is red, the string "red" will do fine. For
    the second layer, we use
  prefs: []
  type: TYPE_NORMAL
- en: (make-layer "green" "red")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'which says that a green (hollow) doll contains a the red doll. Finally, to
    get the outside we just wrap another layer around this last doll:'
  prefs: []
  type: TYPE_NORMAL
- en: (make-layer "yellow" (make-layer "green" "red"))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This process should give you a good idea how to go from any set of colored
    Russian dolls to a data representation. But keep in mind that a programmer must
    also be able to do the converse, that is, go from a piece of data to concrete
    information. In this spirit, draw a schematic Russian doll for the following element
    of [RD](#%28tech._rd._rd%29):'
  prefs: []
  type: TYPE_NORMAL
- en: (make-layer "pink" (make-layer "black" "white"))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You might even try this in BSL.Now that we have a data definition and understand
    how to represent actual dolls and how to interpret elements of [RD](#%28tech._rd._rd%29)
    as dolls, we are ready to design functions that consume [RD](#%28tech._rd._rd%29)s.
    Specifically, let us design the function that counts how many dolls a Russian
    doll set contains. This sentence is a fine purpose statement and determines the
    signature, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [RD](#%28tech._rd._rd%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; how many dolls are part of an-rd |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As for data examples, let us start with (make-layer  "yellow"  (make-layer  "green"  "red")).
    The image above tells us that 3 is the expected answer because there are three
    dolls: the red one, the green one, and the yellow one. Just working through this
    one example, also tells us that when the input is a representation of this doll'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/c02a2d92c6ecc501a835ce76eb51ed43.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'then the answer is 1.Step four demands the development of a template. Using
    the standard questions for this step produces this template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [RD](#%28tech._rd._rd%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; how many dolls are a part of an-rd |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (depth an-rd)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) an-rd) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(layer? an-rd) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (layer-color an-rd) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (depth (layer-doll an-rd)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The number of [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses is determined by the number of clauses in the definition of [RD](#%28tech._rd._rd%29).
    Each of the clauses specifically spells out what kind of data it is about, and
    that tells us which predicates to use: [string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29)
    and layer?. While strings aren’t compound data, instances of layer contain two
    values. If the function needs these values, it uses the selector expressions (layer-color  an-rd)
    and (layer-doll  an-rd). Finally, the second clause of the data definition contains
    a self-reference from the doll field of the layer structure to the definition
    itself. Hence we need a recursive function call for the second selector expression.The
    examples and the template almost dictate the function definition. For the non-recursive
    [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause, the answer is obviously 1. For the recursive clause, the template expressions
    compute the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: (layer-color  an-rd) extracts the string that describes the color of the current
    layer;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (layer-doll  an-rd) extracts the doll contained within the current layer; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (depth  (layer-doll  an-rd)) determines how many dolls are part of (layer-doll  an-rd),
    according to the purpose statement of depth.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This last number is almost the desired answer but not quite because the difference
    between an-rd and (layer-doll  an-rd) is one layer meaning one extra doll. Put
    differently, the function must add 1 to the recursive result to obtain the actual
    answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [RD](#%28tech._rd._rd%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; how many dolls are a part of an-rd |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (depth an-rd)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3f%29%29) an-rd) 1]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) (depth (layer-doll an-rd)) 1)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note how the function definition does not use (layer-color  an-rd) in the second
    clause. Once again, we see that the template is an organization schema for everything
    we know about the data definition but we may not need all of these pieces for
    the actual definition.Let’s finally translate the examples into tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (depth "red") 1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (depth |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    (make-layer "yellow" (make-layer "green" "red"))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If you run these in DrRacket, you will see that their evaluation touches all
    pieces of the definition of depth.Exercise 154\. Design the function colors. It
    consumes a Russian doll and produces a string of all colors, separate by a comma
    and a space. Thus our example should produce
  prefs: []
  type: TYPE_NORMAL
- en: '"yellow, green, red"'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[![image](../Images/576ffaf6b03ba1226e1b8648b2dc3bc7.jpg)](#%28counter._rd._%28exercise._rd1%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 155\. Design the function inner, which consumes an [RD](#%28tech._rd._rd%29)
    and produces the (color of the) innermost doll. Use DrRacket’s stepper to evaluate
    (inner  rd) for you favorite rd. [![image](../Images/ea336ba9463f8e2868df61686803ceea.jpg)](#%28counter._rd._%28exercise._rd2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 9.5Lists and World
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With lists and self-referential data definitions in general, you can design
    and run many more interesting world programs than with finite data. Just imagine
    you can now create a version of the space invader program from [Itemizations and
    Structures](part_one.html#%28part._ch~3amix%29) that allows the player to fire
    as many shots from the tank as desired. Let us start with a simplistic version
    of this problem:If you haven’t designed a world program in a while, re-read [Designing
    World Programs](part_one.html#%28part._.D.K._sec~3adesign-world%29).
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a world program that simulates firing shots. Every time
    the “player” hits the space bar, the program adds a shot to the bottom of the
    canvas. These shots rise vertically at the rate of one pixel per tick.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Designing a world program starts with a separation of information into constants
    and elements of the ever-changing state of the world. For the former we introduce
    physical and graphical constants; for the latter we need to develop a data representation
    for world states. While the sample problem is relatively vague about the specifics,
    it clearly assumes a rectangular scenery with shots painted along a vertical line.
    Obviously the locations of the shots change with every clock tick but the size
    of the scenery and x-coordinate of the line of shots remain the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT 80) ; distances
    in terms of pixels |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH 100)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) XSHOTS ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) WIDTH 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; graphical constants |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) BACKGROUND ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) SHOT ([triangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._triangle%29%29) 3 "solid" "red"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Nothing in the problem statement demands these particular choices, but as long
    as they are easy to change—<wbr>meaning changing by editing a single definition—<wbr>we
    have achieved our goal.As for those aspects of the “world” that change, the problem
    statement mentions two. First, hitting the space bar adds a shot. Second, all
    the shots move straight up by one pixel per clock tick. Given that we cannot predict
    how many shots the player will “fire,” we use a list to represent them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A List-of-shots is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Shot](#%28tech._shot%29)  [List-of-shots](#%28tech._list._of._shot%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation the collection of shots fired |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The one remaining question is how to represent each individual shot. We already
    know that all of them have the same x-coordinate and that this coordinate stays
    the same throughout. Furthermore, all shots look alike. Hence, their y-coordinates
    are the only property in which they differ from each other. It therefore suffices
    to represent each shot as a number:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Shot is a [Number](part_one.html#%28tech._number%29). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation represents the shot''s y-coordinate |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We could restrict the representation of shots to the interval of numbers below
    HEIGHT because we know that all shots are launched from the bottom of the canvas
    and that they then move up, meaning their y-coordinate continuously decreases.You
    can also use a data definition like this to represent this world:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A ShotWorld is [List-of-numbers](#%28tech._list._of._number%29). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation each number on such a list |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   represents the y-coordinate of a shot |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'After all, the above two definitions describe all list of numbers; we already
    have a definition for lists of numbers; and the name [ShotWorld](#%28tech._shotworld%29)
    tells everyone what this class of data is about.Once you have defined constants
    and developed a data representation for the states of the world, the key task
    is to pick which event handlers you wish to employ and to adapt their signatures
    to the given problem. The running example mentions clock ticks and the space bar,
    all of which translates into a wish list of three functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'the function that turns a world state into an image:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ; [ShotWorld](#%28tech._shotworld%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds the image of a shot for each  y on w |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; at (MID,y} to the background image |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (to-image w) BACKGROUND)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: because the problem demands a visual rendering;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'one for dealing with tick events:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ; [ShotWorld](#%28tech._shotworld%29) -> [ShotWorld](#%28tech._shotworld%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; moves each shot on w up by one pixel |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (tock w) w)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'and one function for dealing with key events:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ; [ShotWorld](#%28tech._shotworld%29)  [KeyEvent](part_one.html#%28tech._keyevent%29)
    -> [ShotWorld](#%28tech._shotworld%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds a shot to the world |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if the player pressed the space bar |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (keyh w ke) w)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'Don’t forget that in addition to the initial wish list, you also need to define
    a main function that actually sets up the world and installs the handlers. [Figure 57](#%28counter._%28figure._fig~3ashots%29%29)
    includes this one function that is not designed but defined as a modification
    of standard schema.Let us start with the design of to-image. We have its signature,
    purpose statement and header, so we need examples next. Since the data definition
    has two clauses, there should be at least two examples: ''() and a [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)ed
    list, say, ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  9  ''()).
    The expected result for ''() is obviously BACKGROUND; if there is a y-coordinate,
    though, the function must place the image of a shot at MID and the specified coordinate:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (to-image ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 9 ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) SHOT XSHOTS 9 BACKGROUND))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Before you read on, work through an example that applies to-image to a list
    of two [Shot](#%28tech._shot%29)s. Doing so helps understand how the function
    works.The fourth step is about translating the data definition into a template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [ShotWorld](#%28tech._shotworld%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (to-image w)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) w) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) w) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (to-image ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) w)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The template for data definitions for lists is so familiar now that it doesn’t
    need much explanation. If you have any doubts, read over the questions in [figure 48](#%28counter._%28figure._fig~3atemplate-q%29%29)
    and design the template on your own.From here it is straightforward to define
    the function. The key is to combine the examples with the template and to answer
    the questions from [figure 49](#%28counter._%28figure._fig~3adefinition-q%29%29).
    Following those, you start with the base case of an empty list of shots and, from
    the examples, you know that the expected answer is BACKGROUND. Next you formulate
    what the template expressions in the second [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    compute:'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  w)
    extracts the first coordinate from the list;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  w)
    is the rest of the coordinates; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (to-image  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  w))
    adds each shot on ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  w)
    to the background image, according to the purpose statement of to-image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In other words, (to-image  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  w))
    renders the rest of the list as an image and thus performs almost all the work.
    What is missing is the first shot, ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  w).
    If you now apply the purpose statement to these two expressions, you get the desired
    expression for the second [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) SHOT XSHOTS ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) w)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              (to-image ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) w)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The added icon is the standard image for a shot; the two coordinates are spelled
    out in the purpose statement; and the last argument to [place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29)
    is the image constructed from the rest of the list.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 57](#%28counter._%28figure._fig~3ashots%29%29) displays the complete
    function definition for to-image and indeed the rest of the program, too. The
    design of tock is just like the design of to-image and you should work through
    it for yourself. The signature of the keyh handler, though, poses one interesting
    question. It specifies that the handler consumes two inputs with non-trivial data
    definitions. On one hand, the [ShotWorld](#%28tech._shotworld%29) is self-referential
    data definition. On the other hand, the definition for [KeyEvent](part_one.html#%28tech._keyevent%29)s
    is a large enumeration. For now, we have you “guess” which of the two arguments
    should drive the development of the template; later we will study such cases in
    depth.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [ShotWorld](#%28tech._shotworld%29) -> [ShotWorld](#%28tech._shotworld%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main w0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) w0
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) tock]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) keyh]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) to-image]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [ShotWorld](#%28tech._shotworld%29) -> [ShotWorld](#%28tech._shotworld%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; moves each shot up by one pixel |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (tock w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) w) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([sub1](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._sub1%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) w)) (tock ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) w)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [ShotWorld](#%28tech._shotworld%29)  [KeyEvent](part_one.html#%28tech._keyevent%29)
    -> [ShotWorld](#%28tech._shotworld%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds a shot to the world if the space bar was hit |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (keyh w ke)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) ke "
    ") ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) HEIGHT w) w))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [ShotWorld](#%28tech._shotworld%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds each shot y on w at (XSHOTS,y} to BACKGROUND |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (to-image w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) w) BACKGROUND]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) SHOT XSHOTS ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                        (to-image ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) w)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 57: A list-based world program'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As far as a world program is concerned, a key handler such as keyh is about
    the key event that it consumes. Hence, we consider it the main argument and use
    its data definition to derive the template. Specifically, following the data definition
    for [KeyEvent](part_one.html#%28tech._keyevent%29) from [Enumerations](part_one.html#%28part._sec~3aenums%29)
    it dictates that the function needs a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression with numerous clauses like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (keyh w ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) ke "left") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) ke "right") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) ke "
    ") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) ke "a") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) ke "z") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Of course, just like for functions that consume all possible BSL values, a key
    handler usually does not need to inspect all possible cases. For our running problem,
    you specifically know that the key handler reacts only to the space bar and all
    others are ignored. So it is natural to collapse all of the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clauses into an [else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    clause except for the clause for " ".
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 156\. Equip the program in [figure 57](#%28counter._%28figure._fig~3ashots%29%29)
    with tests and make sure it passes those. Explain what main does. Then run the
    program via main. [![image](../Images/c21d3f113b01c0d2fd90ea2c9f070969.jpg)](#%28counter._%28exercise._shots1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 157\. Experiment whether the arbitrary decisions concerning constants
    are truly easy to change. For example, determine whether changing a single constant
    definition achieves the desired outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: change the height of the canvas to 220 pixels;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: change the width of the canvas to 30 pixels;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: change the x location of the line of shots to “somewhere to the left of the
    middle;”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: change the background to a green rectangle; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: change the rendering of shots to a red elongated rectangle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also check whether it is possible to double the size of the shot without changing
    anything else or change its color to black. [![image](../Images/bfe86c0238d814ecffce7897ef18aef0.jpg)](#%28counter._%28exercise._shots2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 158\. If you run main, press the space bar (fire a shot), and wait
    for a good amount of time, the shot disappears from the canvas. When you shut
    down the world canvas, however, the result is a world that still contains this
    invisible shot.
  prefs: []
  type: TYPE_NORMAL
- en: Design an alternative tock function, which not just moves shots one pixel per
    clock tick but also eliminates those whose coordinates places them above the canvas.
    Hint You may wish to consider the design of an auxiliary function for the recursive
    [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause. [![image](../Images/4ff6dbd51ad870170fe612e5314cf936.jpg)](#%28counter._%28exercise._shots3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 159\. Turn the exercise of [exercise 153](#%28counter._%28exercise._ex~3arandom1%29%29)
    into a world program. Its main function, dubbed riot, consumes how many balloons
    the students want to throw; its visualization shows one balloon dropping after
    another at a rate of one per second. The function produces the list of [Posn](part_one.html#%28tech._posn%29)s
    where the balloons hit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hints (1) Here is one possible data representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) pair [balloon# lob])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Pair is a structure (make-pair  [N](#%28tech._n%29)  [List-of-posns](#%28tech._list._of._posn%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A List-of-posns is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Posn](part_one.html#%28tech._posn%29)  [List-of-posns](#%28tech._list._of._posn%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  (make-pair  n  lob) means n balloons |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; must yet be thrown and added to lob |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: (2) A [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression is really just an expression. It is legitimate to nest it within another
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: (3) Recall that [random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29)
    creates random numbers. [![image](../Images/175dfce81b2c71a0a18cda30b6ef0de6.jpg)](#%28counter._%28exercise._riot2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 9.6A Note on Lists and Sets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This book relies on your intuitive understanding of sets as collections of BSL
    values. [The Universe of Data](part_one.html#%28part._data-uni._sec~3adata-uni%29)
    specifically says that a data definition introduces a name for a set of BSL values.
    There is one question that this book consistently asks about sets, and it is whether
    some element is in some given set. For example, 4 is in [Number](part_one.html#%28tech._number%29),
    while "four" is not. The book also shows how to use a data definition to check
    whether some value is a member of some named set and how to use some of the data
    definitions to generate sample elements of sets; but, these two procedures are
    about data definitions not sets per se.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, lists represent collections of values. Hence you might be
    wondering what the difference between a list and a set is or whether this is a
    needless distinction. If so, this section is for you.
  prefs: []
  type: TYPE_NORMAL
- en: Right now the primary difference between sets and lists is that the former is
    a concept we use to discuss steps in the design of code and the latter is one
    of many forms of data in BSL, our chosen programming language. The two ideas live
    at rather different levels in our conversations. However, given that a data definition
    introduces a data representation of actual information inside of BSL and given
    that sets are collections of information, you may now ask yourself how sets are
    represented inside of BSL as data.
  prefs: []
  type: TYPE_NORMAL
- en: Most full-fledged languages directly support data representations of both lists
    and sets.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: While lists have a special status in BSL, sets don’t, but at the same time sets
    somewhat resemble lists. The key difference is the kind of functions a program
    normally uses with either form of data. BSL provides several basic constants and
    functions for lists—<wbr>say, [empty](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty%29%29),
    [empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29),
    [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29),
    [cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29),
    [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29),
    [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)—<wbr>and
    some functions that you could define yourself—<wbr>for example, [member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29),
    [length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._length%29%29),
    [remove](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._remove%29%29),
    [reverse](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._reverse%29%29),
    and so on. Here is an example of a function you can define but does not come with
    BSL
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-string](#%28tech._list._of._string%29)  [String](part_one.html#%28tech._string%29)
    -> [N](#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determine how often s occurs in los |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (count los s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Finish the design of this function.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s proceed in straightforward and possibly naive manner and say sets are
    basically lists. And, to simplify further, let’s focus on lists of numbers in
    this section. If we now accept that it merely matters whether a number is a part
    of a set or not, it is almost immediately clear that we can use lists in two different
    ways to represent sets.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; A Son.L is one of: &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  [empty](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Number](part_one.html#%28tech._number%29)  [Son.L](#%28tech._son..l%29))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ;  &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; Son is used when it &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; applies to [Son.L](#%28tech._son..l%29) and [Son.R](#%28tech._son..r%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; A Son.R is one of: &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  [empty](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Number](part_one.html#%28tech._number%29)  [Son.R](#%28tech._son..r%29))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ;  &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; Constraint If s is a [Son.R](#%28tech._son..r%29), &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; no number occurs twice in s. &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 58: Two data representations for sets'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 58](#%28counter._%28figure._fig~3asets-vs-lists%29%29) displays the
    two data definitions. Both basically say that a set is represented as a list of
    numbers. The difference is that the definition on the right comes with the constraint
    that no number may occur more than once on the list. After all, the key question
    we ask about a set is whether some number is in the set or not, and whether it
    is in a set once, twice or three times makes no difference.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of which definition you choose, you can already define two important
    notions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Son](#%28tech._son%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) es ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Number](part_one.html#%28tech._number%29)  [Son](#%28tech._son%29) ->
    [Son](#%28tech._son%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is x in s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (in? x s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29) x s))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first one is the empty set, which in both cases is represented by the empty
    list. The second one is a membership test.One way to build larger sets is to use
    [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    and the above definitions. Say we wish to build a representation of the set that
    contains 1, 2, and 3. Here is one such representation:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3 '())))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And it works for both data representations. But, is
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3 '())))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: really not a representation of the same set? Or how about
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3 '()))))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The answer has to be affirmative as long as the primary concern is whether a
    number is in a set or not. Still, while the order of [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    cannot matter, the constraint in the right-hand data definition rules out the
    last list as a [Son.R](#%28tech._son..r%29) because it contains 1 twice.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Number](part_one.html#%28tech._number%29)  [Son.L](#%28tech._son..l%29)
    -> [Son.L](#%28tech._son..l%29) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; remove x from s &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) s1.L
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ''())))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (set-.L 1 s1.L) es) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (set-.L x s)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([remove-all](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._remove-all%29%29) x s))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Number](part_one.html#%28tech._number%29)  [Son.R](#%28tech._son..r%29)
    -> [Son.R](#%28tech._son..r%29) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; remove x from s &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) s1.R
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ''()))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (set-.R 1 s1.R) es) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (set-.R x s)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([remove](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._remove%29%29) x s))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 59: Functions for the two data representations of sets'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The difference between the two data definitions shows up when we design functions.
    Say we want a function that removes a number from a set. Here is a wish list entry
    that applies to both representations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29)  [Son](#%28tech._son%29) ->
    [Son](#%28tech._son%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; subtract x from s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (set- x s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   s) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The purpose statement uses the word “subtract” because this is what logicians
    and mathematicians use when they work with sets.[Figure 59](#%28counter._%28figure._fig~3asets-vs-lists-ops%29%29)
    shows the results. The two columns differ in two points:'
  prefs: []
  type: TYPE_NORMAL
- en: The test on the left uses a list that contains 1 twice, while the one on the
    right represents the same set with a single [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because of these differences, the set- on the left must use [remove-all](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._remove-all%29%29),
    while the one on the right gets away with [remove](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._remove%29%29).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Stop! Copy the code into the DrRacket definitions area and make sure the tests
    pass. Then read on and experiment with the code as you do.An unappealing aspect
    of [figure 59](#%28counter._%28figure._fig~3asets-vs-lists-ops%29%29) is that
    the tests use es, a plain list as the expected result. This problem may seem minor
    at first glance. Consider the following example, however:'
  prefs: []
  type: TYPE_NORMAL
- en: (set- 1 set123)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'where set123 represents the set containing 1, 2, and 3 in one of two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) set123-version1
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3 ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) set123-version2
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Regardless of which representation we choose, (set-  1  set123) evaluates to
    one of these two lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) set23-version1
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3 ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) set23-version2
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 3 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'But, we cannot predict which of those two set- produces.For the simple case
    of two alternatives, it is possible to use the [check-member-of](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-member-of%29%29)
    testing facility as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-member-of](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-member-of%29%29) (set-.v1 1 set123.v1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  set23-version1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  set23-version2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If the expected set contains three elements, there are six possible variations,
    not including representations with repetitions, which the left-hand data definition
    allows.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing this problem calls for the combination of two ideas. First, recall that
    set- is really about ensuring that the given element does not occur in the result.
    It is an idea that our way of turning the examples into tests does not bring across.
    Second, with BSL’s [check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29)
    testing facility, it is possible to state just this idea.
  prefs: []
  type: TYPE_NORMAL
- en: '[Intermezzo: BSL](part_one.html#%28part._i1-2%29) briefly mentions [check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29)
    but, in a nutshell, the facility determines whether an expression satisfies a
    certain property. A property is a function from values to [Boolean](part_one.html#%28tech._boolean%29).
    In our specific case, we wish to state that 1 is not a member of some set:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Son](#%28tech._son%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; #true if 1 a member of s;  #false otherwise |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (not-member-1? s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29) (in? 1 s)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Using not-member-1?, we can formulate the test case as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29) (set- 1 set123) not-member-1?)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and this variant clearly states what the function is supposed to accomplish.
    Better yet, this formulation simply does not depend on how the input or output
    set is represented.In sum, lists and sets are related in that both are about collections
    of values but they also differ strongly:'
  prefs: []
  type: TYPE_NORMAL
- en: '| property |  | lists |  | sets |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| membership |  | one among many |  | critical |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ordering |  | critical |  | irrelevant |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| # of occurrences |  | sensible |  | irrelevant |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| size |  | finite but arbitrary |  | finite or infinite |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The last row in this table presents a new idea, though an obvious one, too.
    Many of the sets mentioned in this book are infinitely large, for example, [Number](part_one.html#%28tech._number%29),
    [String](part_one.html#%28tech._string%29), and also [List-of-strings](#%28tech._list._of._string%29).
    In contrast, a list is always finite though it may contain an arbitrarily large
    number of items.
  prefs: []
  type: TYPE_NORMAL
- en: In sum, this section explains the essential differences between sets and lists
    and how to represent finite sets with finite lists in two different ways. BSL
    is not expressive enough to represent infinite sets; [exercise 299](part_three.html#%28counter._%28exercise._ex~3ainfinite-set%29%29)
    introduces a completely different representation of sets, a representation that
    can cope with infinite sets, too. The question of how actual programming languages
    represent sets is beyond the scope of this book, however.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 160\. Design the functions set+.L and set+.R, which create a set by
    adding a number x to some given set s for the left-hand and right-hand data definition,
    respectively. [![image](../Images/ba8a955e07fc2e85bb5aa4ae56aaa51a.jpg)](#%28counter._%28exercise._ex~3aset1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 10More on Lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lists are a versatile form of data that come with almost all languages now.
    Programmers have used them to build large applications, artificial intelligences,
    distributed systems, and more. This chapter illustrates some ideas from this world,
    including functions that create lists, data representations that call for structures
    inside of lists, and representing text files as lists.
  prefs: []
  type: TYPE_NORMAL
- en: 10.1Functions that Produce Lists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is a function for determining the wage of an hourly employee:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the wage for h hours of work |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage h)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 12 h))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It consumes the number of hours worked and produces the wage. A company that
    wishes to use payroll software isn’t interested in this function, however. It
    wants a function that computes the wages for all of employees.
  prefs: []
  type: TYPE_NORMAL
- en: Call this new function wage*. Its task is to process all employee work hours
    and to determine the wages due to each of them. For simplicity, let us assume
    that the input is a list of numbers, each representing the number of hours that
    one employee worked, and that the expected result is a list of the weekly wages
    earned, also represented with a list of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we already have a data definition for the inputs and outputs, we can
    immediately move to the second design step:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-numbers](#%28tech._list._of._number%29) -> [List-of-numbers](#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the weekly wages for the weekly hours |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage* whrs)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Next you need some examples of inputs and the corresponding outputs. So you
    make up some short lists of numbers that represent weekly hours:'
  prefs: []
  type: TYPE_NORMAL
- en: '| given |  | expected |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ''() |  | ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  28  ''())
    |  | ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  336  ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  4  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  2  ''()))
    |  | ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  48  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  24  ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In order to compute the output, you determine the weekly wage for each number
    on the given input list. For the first example, there are no numbers on the input
    list so the output is '(). Make sure you understand why the second and third expected
    output is what you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that wage* consumes the same kind of data as several other functions
    from [Lists](#%28part._ch~3alists1%29) and given that a template depends only
    on the shape of the data definition, you can reuse these template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage* whrs)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) whrs) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) whrs) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (wage* ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) whrs)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In case you want to practice the development of templates, use the questions
    from [figure 48](#%28counter._%28figure._fig~3atemplate-q%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: It is now time for the most creative design step. Following the design recipe,
    we consider each [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)-line
    of the template in isolation. For the non-recursive case, ([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29)  whrs)
    is true, meaning the input is '(). The examples from above specify the desired
    answer, '(), and so we are done.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the second case, the design questions tell us to state what each expression
    of the template computes:'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  whrs)
    yields the first number on whrs, which is the first number of hours worked;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  whrs)
    is the rest of the given list; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (wage*  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  whrs))
    says that the rest is processed by the very function we are defining. As always
    we use its signature and its purpose statement to figure out the result of this
    expression. The signature tells us that it is a list of numbers, and the purpose
    statement explains that this list represents the list of wages for its input,
    which is the rest of the list of hours.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The key is to rely on these facts when you formulate the expression that computes
    the result in this case, even if the function is not yet defined.Since we already
    have the list of wages for all but the first item of whrs, the function must perform
    two computations to produce the expected output for the entire whrs: compute the
    weekly wage for ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  whrs)
    and construct the list that represents all weekly wages for whrs. For the first
    part, we reuse wage. For the second, we [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    the two pieces of information together into one list:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) (wage ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) whrs)) (wage* ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) whrs)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'And with that, the definition is complete: see [figure 60](#%28counter._%28figure._fig~3awage%2A%29%29).'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-numbers](#%28tech._list._of._number%29) -> [List-of-numbers](#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the weekly wages for all given weekly hours |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage* whrs)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) whrs) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) (wage ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) whrs)) (wage* ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) whrs)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the wage for h hours of work |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage h)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 12 h))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 60: Computing the wages of all employees'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 161\. Translate the examples into tests and make sure they all succeed.
    Then change the function in [figure 60](#%28counter._%28figure._fig~3awage%2A%29%29)
    so that everyone gets $14 per hour. Now revise the entire program so that changing
    the wage for everyone is a single change to the entire program and not several.
    [![image](../Images/d31979dfc62011bad6fc9541ba9715e4.jpg)](#%28counter._%28exercise._raises%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 162\. No employee could possibly work more than 100 hours per week.
    To protect the company against fraud, the function should check that no item of
    the input list of wage* exceeds 100\. If one of them does, the function should
    immediately signal an error. How do we have to change the function in [figure 60](#%28counter._%28figure._fig~3awage%2A%29%29)
    if we want to perform this basic reality check? [![image](../Images/d3d1f1a9ceb571a1c4095ce401e520eb.jpg)](#%28counter._%28exercise._fraud%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Show the products of the various steps in the design recipe. If you are stuck,
    show someone how far you got according to the design recipe. The recipe isn’t
    just a design tool for you to use; it is also a diagnosis system so that others
    can help you help yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 163\. Design convertFC. The function converts a list of measurements
    in Fahrenheit to a list of Celsius measurements. [![image](../Images/cce19027d1ebd1b642f7fb6af3b9f906.jpg)](#%28counter._%28exercise._convert.F.C%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 164\. Design the function convert-euro, which converts a list of US$
    amounts into a list of € amounts. Look up the current exchange rate on the web.
  prefs: []
  type: TYPE_NORMAL
- en: Generalize convert-euro to the function convert-euro*, which consumes an exchange
    rate and a list of US$ amounts and converts the latter into a list of € amounts.
    [![image](../Images/017f895607b83318887e79db8d70a8c0.jpg)](#%28counter._%28exercise._convert.D.M%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 165\. Design the function subst-robot, which consumes a list of toy
    descriptions (one-word strings) and replaces all occurrences of "robot" with "r2d2";
    all other descriptions remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: Generalize subst-robot to substitute. The latter consumes two strings, called
    new and old, and a list of strings. It produces a new list of strings by substituting
    all occurrences of old with new. [![image](../Images/260a5043ea6c457e56cdbdcfcaad5199.jpg)](#%28counter._%28exercise._subst%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 10.2Structures in Lists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Representing a work week as a number is a bad choice because the printing of
    a paycheck requires more information than hours worked per week. Also, not all
    employees earn the same amount per hour. Fortunately a list may contain items
    other than atomic values; indeed, lists may contain whatever values we want, especially
    structures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our running example calls for just such a data representation. Instead of numbers,
    we use structures that represent employees plus their work hours and pay rates:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) work [employee rate hours])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A (piece of) Work is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-work  [String](part_one.html#%28tech._string%29)  [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  (make-work  n  r  h) combines the name |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; with the pay rate r and the number of hours h. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'While this representation is still simplistic, it is just enough of an additional
    challenge because it forces us to formulate a data definition for lists that contain
    structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; Low (short for list of works) is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  Work  Low)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation an instance of Low represents the |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; hours worked for a number of employees |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here are three elements of [Low](#%28tech._low%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) (make-work "Robby" 11.95 39)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) (make-work "Matthew" 12.95 45)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) (make-work "Robby" 11.95 39)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ''())) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Use the data definition to explain why these pieces of data belong to [Low](#%28tech._low%29).
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Also use the data definition to generate two more examples.
  prefs: []
  type: TYPE_NORMAL
- en: When you work on real-world projects, you won’t use such suffixes; instead you
    will use a tool for managing different versions of code.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now that you know that the definition of [Low](#%28tech._low%29) makes sense,
    it is time to re-design the function wage* so that it consumes elements of [Low](#%28tech._low%29)
    not just lists of numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Low](#%28tech._low%29) -> [List-of-numbers](#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the weekly wages for the given records |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage*.v2 an-low)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The suffix “.v2” at the end of the function name informs every reader of the
    code that this is a second, revised version of the function. In this case, the
    revision starts with a new signature and an adapted purpose statement. The header
    is the same as above.
  prefs: []
  type: TYPE_NORMAL
- en: The third step of the design recipe is to work through an example. Let us start
    with the second list above. It contains one work record, namely, (make-work  "Robby"  11.95  39).
    Its interpretation is that "Robby" worked for 39 hours and that he is paid at
    the rate of $11.95 per hour. Hence his wage for the week is $466.05, i.e., ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29)  11.95  39).
    The desired result for wage*.v2 is therefore ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  466.05  '()).
    Naturally, if the input list contained two work records, we would perform this
    kind of computation twice, and the result would be a list of two numbers. Before
    you read on, determine the expected result for the third data example above.
  prefs: []
  type: TYPE_NORMAL
- en: Note on Numbers Keep in mind that BSL—<wbr>unlike most other programming languages—<wbr>understands
    decimal numbers just like you do, namely, as exact fractions. A language such
    as Java, for example, would produce 466.04999999999995 for the expected wage of
    the first work record. Since you cannot predict when operations on decimal numbers
    behave in this strange way, you are better off writing down such examples as
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (wage*.v2 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) (make-work "Robby" 11.95 39) ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 11.95 39) ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'just to prepare yourself for other programming languages. Then again, writing
    down the example in this style also means you have really figured out how to compute
    the wage. EndFrom here we move on to the development of the template. If you use
    the template questions, you quickly get this much:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage*.v2 an-low)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) an-low) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) an-low)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) an-low) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (wage*.v2 ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) an-low)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'because the data definition consists of two clauses, because it introduces
    ''() in the first clause and [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)ed
    structures in the second, and so on. But, you also realize that you know even
    more about the input than this template expresses. For example, you know that
    ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  an-low)
    extracts a structure of three fields from the given list. This seems to suggest
    the addition of three more expressions to the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage*.v2 an-low)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) an-low) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) an-low)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) an-low) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (work-employee ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) an-low)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (work-rate ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) an-low)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (work-hours ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) an-low)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       (wage*.v2 ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) an-low)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This template lists all potentially interesting data.We use a different strategy
    here. Specifically, we suggest to create and to refer to a separate function template
    whenever you are developing a template for a data definition that refers to other
    data definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage*.v2 an-low)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) an-low) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) an-low)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (for-work ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) an-low))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (wage*.v2 ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) an-low)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Work](#%28tech._work%29) -> ??? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; a template for processing elements of [Work](#%28tech._work%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (for-work w)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (work-employee w) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (work-rate w) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (work-hours w) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Splitting the templates leads to a natural partition of work into functions
    and among functions; none of them grow too large, and all of them relate to a
    specific data definition.Finally, you are ready to program. As always you start
    with the simple-looking case, which is the first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line here. If wage*.v2 is applied to ''(), you expect ''() back and that settles
    it. Next you move on to the second line and remind yourself of what these expressions
    compute:'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  an-low)
    extracts the first work structure from the list;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (for-work  [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    says that you wish to design a function that processes work structures;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  an-low)
    extracts the rest of the given list; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (wage*.v2  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  an-low))
    determines the list of wages for all the work records other than the first one,
    according to the purpose statement of the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are stuck here, use the table method from [figure 50](#%28counter._%28figure._fig~3adefinition-qb%29%29).If
    you understand it all, you see that it is enough to [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    the two expressions together:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) (for-work ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) an-low))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           (wage*.v2 ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) an-low))) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'assuming that for-work computes the wage for the first work record. In short,
    you have finished the function by adding another entry to your wish list of functions.Since
    for-work is a name that just serves as a stand-in and since it is a bad name for
    this function, let us call the function wage.v2 and write down its complete wish
    list entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Work](#%28tech._work%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the wage for the given work record w |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage.v2 w)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This design of this kind of function is extensively covered in [Fixed-Size Data](part_one.html)
    and thus doesn’t need any additional explanation here. [Figure 61](#%28counter._%28figure._fig~3awage..v2%29%29)
    shows the final result of developing wage and wage*.v2.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Low](#%28tech._low%29) -> [List-of-numbers](#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the weekly wages for all given weekly work records |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (wage*.v2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) (make-work "Robby" 11.95 39) ''()))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) 11.95 39) ''()))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage*.v2 an-low)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) an-low) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) an-low) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) (wage.v2 ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) an-low))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                           (wage*.v2 ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) an-low)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Work](#%28tech._work%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the wage for the given work record w |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (wage.v2 w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) (work-rate w) (work-hours w)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 61: Computing the wages from work records'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 166\. The wage*.v2 function consumes a list of work records and produces
    a list of numbers. Of course, functions may also produce lists of structures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Develop a data representation for pay checks. Assume that a pay check contains
    two distinctive pieces of information: the employee’s name and an amount. Then
    design the function wage*.v3. It consumes a list of work records and computes
    a list of pay checks from it, one per record.'
  prefs: []
  type: TYPE_NORMAL
- en: In reality, a pay check also contains an employee number. Develop a data representation
    for employee information and change the data definition for work records so that
    it uses employee information and not just a string for the employee’s name. Also
    change your data representation of pay checks so that it contains an employee’s
    name and number, too. Finally, design wage*.v4, a function that maps lists of
    revised work records to lists of revised pay checks.
  prefs: []
  type: TYPE_NORMAL
- en: Note on Iterative Refinement This exercise demonstrates the iterative refinement
    of a task. Instead of using data representations that include all relevant information,
    we started from simplistic representation of pay checks and gradually made the
    representation realistic. For this simple program, refinement is overkill; later
    we will encounter situations where iterative refinement is not just an option
    but a necessity. [![image](../Images/1e78587dfc7796b02ef9290bdf46f518.jpg)](#%28counter._%28exercise._work1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 167\. Design the function sum, which consumes a list of Posns and produces
    the sum of all of its x-coordinates. [![image](../Images/296bca4069ff58a05886d6f9e224932f.jpg)](#%28counter._%28exercise._work1..5%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 168\. Design the function translate. It consumes and produces lists
    of [Posn](part_one.html#%28tech._posn%29)s. For each ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  x  y)
    in the former, the latter contains ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) x ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) y 1)).—<wbr>We
    borrow the word “translate” from geometry, where the movement of a point by a
    constant distance along a straight line is called a translation. [![image](../Images/e7ebfa648bed7c63c10eae19d040c93e.jpg)](#%28counter._%28exercise._work2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 169\. Design the function legal. Like translate from [exercise 168](#%28counter._%28exercise._work2%29%29)
    the function consumes and produces a list of [Posn](part_one.html#%28tech._posn%29)s.
    The result contains all those [Posn](part_one.html#%28tech._posn%29)s whose x-coordinates
    are between 0 and 100 and whose y-coordinates are between 0 and 200\. [![image](../Images/00fbb6398a0406be639959645d7e59de.jpg)](#%28counter._%28exercise._work3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 170\. Here is one way to represent a phone number:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) phone [area switch four])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Phone is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-phone  [Three](#%28tech._three%29)  [Three](#%28tech._three%29)  [Four](#%28tech._four%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Three is a [Number](part_one.html#%28tech._number%29) between 100 and
    999. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Four is a [Number](part_one.html#%28tech._number%29) between 1000 and
    9999. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Design the function replace. It consumes a list of [Phone](#%28tech._phone%29)s
    and produces one. It replaces all occurrence of area code 713 with 281. [![image](../Images/338934b5d3368b8fddd3a27715d6f634.jpg)](#%28counter._%28exercise._work4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 10.3Lists in Lists, Files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Functions and Programs](part_one.html#%28part._ch~3afuncs-progs%29) introduces
    [read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29),
    a function for readingAdd ([require](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._require%29%29)  2htdp/batch-io)
    to your definitions area. an entire text file as a string. In other words, the
    creator of [read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29)
    chose to represent text files as strings, and the function creates the data representation
    for specific files (specified by a name). Text files aren’t plain long texts or
    strings, however. They are organized into lines and words, rows and cells, and
    many other ways. In short, representing the content of a file as a plain string
    might work on rare occasions but is usually a bad choice.'
  prefs: []
  type: TYPE_NORMAL
- en: ttt.txt
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   TTT |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   Put up in a place |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   where it''s easy to see |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   the cryptic admonishment |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   T.T.T. |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   When you feel how depressingly |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   slowly you climb, |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   it''s well to remember that |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   Things Take Time. |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   Piet Hein |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 62: Things take time'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For concreteness, take a look at the sample file in [figure 62](#%28counter._%28figure._fig~3attt..txt%29%29).
    It contains a poem by Piet Hein, and it consists of many lines and words. When
    you use the program
  prefs: []
  type: TYPE_NORMAL
- en: ([read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29) "ttt.txt")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: to turn this file into a BSL string, you get this:The dots aren’t really a part
    of the result as you probably guessed.
  prefs: []
  type: TYPE_NORMAL
- en: '"TTT\n \nPut up in a place\nwhere ...."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'where the "\n" inside the string indicates line breaks.While it is indeed possible
    to break apart this string with primitive operations on strings, e.g., [explode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._explode%29%29),
    most programming languages—<wbr>including BSL—<wbr>support many different representations
    of files and functions that create such representations from existing files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to represent this file is as a list of lines, where each line is represented
    as one string:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "TTT"
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ""
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Put
    up in a place" |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|         ''())))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Here the second item of the list is the empty string because the file contains
    an empty line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Another way is to use a list of words, again each word represented as a string:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "TTT"
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Put"
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "up"
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "in"
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|           ''()))))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Note how the empty second line disappears with this representation. After all,
    there are no words on the empty line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'And a third representation relies on lists of list of words:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "TTT" ''())
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ''()
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "Put"
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "up"
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ''())))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|         ''())))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: This representation has an advantage over the second one in that it preserves
    the organization of the file, including the emptiness of the second line. The
    price is that all of a sudden lists contain lists.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While the idea of list-containing lists may sound frightening at first, you
    need not worry. The design recipe helps even with such complications.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [String](part_one.html#%28tech._string%29) -> [String](part_one.html#%28tech._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces the content of file f as a string |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ([read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29) f) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [String](part_one.html#%28tech._string%29) -> [List-of-string](#%28tech._list._of._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces the content of file f as a list of strings, |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; one per line |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ([read-lines](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-lines%29%29) f) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [String](part_one.html#%28tech._string%29) -> [List-of-string](#%28tech._list._of._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces the content of file f as a list of strings, |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; one per word |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ([read-words](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-words%29%29) f) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [String](part_one.html#%28tech._string%29) -> [List-of-list-of-string](#%28tech._list._of._list._of._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces the content of file f as a list of list of |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; strings, one list per line and one string per word |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ([read-words/line](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-words%2Fline%29%29) f) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; The above functions consume the name of a file as a [String](part_one.html#%28tech._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; argument. If the specified file does not exists in the |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; same folder as the program, they signal an error. |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 63: Reading files'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Before we get started, take a look at [figure 63](#%28counter._%28figure._fig~3aread%29%29).
    It introduces a number of useful file reading functions. They are not comprehensive
    and there are many other ways of dealing with text from files, and you will need
    to know a lot more to deal with all possible text files. For our purposes here—<wbr>teaching
    and learning the principles of systematic program design—<wbr>they suffice, and
    they empower you to design reasonably interesting programs.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 63](#%28counter._%28figure._fig~3aread%29%29) uses the names of two
    data definitions that do not exist yet, including one involving list-containing
    lists. As always, we start with a data definition, but this time, we leave this
    task to you. Hence, before you read on, solve the following exercises. The solutions
    are needed to make complete sense out of the figure, and without working through
    the solutions, you cannot really understand the rest of this section.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 171\. You know what the data definition for [List-of-strings](#%28tech._list._of._string%29)
    looks like. Spell it out. Make sure that you can represent Piet Hein’s poem as
    an instance of the definition where each line is a represented as a string and
    another one where each word is a string. Use [read-lines](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-lines%29%29)
    and [read-words](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-words%29%29)
    to confirm your representation choices.
  prefs: []
  type: TYPE_NORMAL
- en: Next develop the data definition for List-of-list-of-strings. Again, represent
    Piet Hein’s poem as an instance of the definition where each line is a represented
    as a list of strings, one per word, and the entire poem is a list of such line
    representations. You may use [read-words/line](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-words%2Fline%29%29)
    to confirm your choice. [![image](../Images/a514af1d6377a165bccd7467bdf15567.jpg)](#%28counter._%28exercise._read-dd%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: As you probably know, operating systems come with programs that measure files.
    One counts the number of lines, an others determines how many words appear per
    line. Let us start with the latter to illustrate how the design recipe helps with
    the design of complex functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to ensure that we have all the necessary data definitions.
    If you solved the above exercise, you have a data definition for all possible
    inputs of the desired function, and the preceding section defines [List-of-numbers](#%28tech._list._of._number%29),
    which describes all possible inputs. To keep things short, we use [LLS](#%28tech._ll%29)
    to refer to the class of lists of lists of strings, and use it to write down the
    header material for the desired function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [LLS](#%28tech._ll%29) -> [List-of-numbers](#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines the number of words on each line |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (words-on-line lls) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We name the functions words-on-line, because it is appropriate and captures
    the purpose statement in one phrase.What is really needed though is a set of data
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) line0 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "hello" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "world" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) line1 ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) lls0 ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) lls1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) line0 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) line1 ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first two definitions introduce two examples of lines: one contains two
    words, the other contains none. The last two definitions show how to construct
    instances of [LLS](#%28tech._ll%29) from these line examples. Determine what the
    expected result is when the function is given these two examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have data examples, it is easy to formulate functional examples; just
    imagine applying the function to each of the data example. When apply words-on-line
    to lls0, you should get the empty list back, because there are no lines. When
    you apply words-on-line to lls1, you should get a list of two numbers back, because
    there are two lines. The two numbers are 2 and 0, respectively, given that the
    two lines in lls1 contain two and no words each.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how you translate all this into test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (words-on-line lls0) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (words-on-line lls1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 0 ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'By doing it at the end of the second step, you have a complete program, though
    running it just fails some of the test cases.The development of the template is
    the interesting step for this sample problem. By answering the template questions
    from [figure 48](#%28counter._%28figure._fig~3atemplate-q%29%29), you get the
    usual list-processing template immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (words-on-line lls)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) lls) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) lls) ; a
    list of strings |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (words-on-line ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) lls)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As in the preceding section, we know that the expression ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  lls)
    extracts a [List-of-strings](#%28tech._list._of._string%29), which has a complex
    organization, too. The temptation is to insert a nested template to express this
    knowledge, but as you should recall, the better idea is to develop a second auxiliary
    template and to change the first line in the second condition so that it refers
    to this auxiliary template.Since this auxiliary template is for a function that
    consumes a list, the template looks nearly identical to the previous one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (line-processor ln)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) lls) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) ln) ; a
    string |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (line-processor ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ln)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The important differences are that ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  ln)
    extracts a string from the list, and we consider strings as atomic values. With
    this template in hand, we can change the first line of the second case in words-on-line
    to
  prefs: []
  type: TYPE_NORMAL
- en: '[...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (line-processor ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) lls)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'which reminds us for the fifth step that the definition for words-on-line may
    demand the design of an auxiliary function.Now it is time to program. As always,
    we use the questions from [figure 49](#%28counter._%28figure._fig~3adefinition-q%29%29)
    to guide this step. The first case, concerning empty lists of lines, is the easy
    case. Our examples tell us that the answer in this case is ''(), i.e., the empty
    list of numbers. The second case, concerning [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29),
    contains several expressions and we start with a reminder of what they compute:'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  lls)
    extracts the first line from the non-empty list of (represented) lines;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (line-processor  ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  lls))
    suggests that we may wish to design an auxiliary function to process this line;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  lls)
    is the rest of the list of line;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (words-on-line  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  lls))
    computes a list of words per line for the rest of the list. How do we know this?
    We promised just that with the signature and the purpose statement for words-on-line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Assuming we can design an auxiliary function that consumes a line and counts
    the words on one line—<wbr>let’s call it words#—<wbr>it is easy to complete the
    second condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) (words# ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) lls))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       (words-on-line ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) lls)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This expressions [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)es
    the number of words on the first line of lls onto a list of numbers that represents
    the number of words on the remainder of the lines of lls.It remains to design
    the words# function. Its template is dubbed line-processor and its purpose is
    to count the number of words on a line, which is just a list of strings. So here
    is the wish-list entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-strings](#%28tech._list._of._string%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; counts the number of words on los |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (words# los) 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: At this point, you may recall the example used to illustrate the design recipe
    for self-referential data in [Designing with Self-Referential Data Definitions](#%28part._ch~3adesign-lists%29).
    The function is called how-many, and it too counts the number of strings on a
    list of strings. Even though the inputs for how-many is supposed to represent
    a list of names, this difference simply doesn’t matter; as long as it correctly
    counts the number of strings on a list of strings, how-many solves our problem.Since
    it is good to reuse existing functions, you may define words# as
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (words# los)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (how-many los)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In reality, however, programming languages come with functions that solve such
    problems already. BSL calls this function [length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._length%29%29),
    and it counts the number of values on any list of values, no matter what the values
    are.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A LLS is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Los](part_three.html#%28tech._sim-dd._lo%29)  [LLS](#%28tech._ll%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation a list of lines, each is a list of [String](part_one.html#%28tech._string%29)s
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) line0 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "hello" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "world" ''())))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) line1 ''())
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) lls0 ''())
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) lls1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) line0 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) line1 ''())))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [LLS](#%28tech._ll%29) -> [List-of-numbers](#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines the number of words on each line |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (words-on-line lls0) ''())
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (words-on-line lls1) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 0 ''())))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (words-on-line lls)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) lls) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._length%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) lls))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                 (words-on-line ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) lls)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 64: Counting the words on a line'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You may wish to look over the list of functions that come with BSL. Some may
    look obscure but may become useful in one of the upcoming problems. Using such
    functions saves your time, not ours.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 64](#%28counter._%28figure._fig~3awords-on-line%29%29) summarizes the
    full design for our sample problem. The figure includes two test cases. Also,
    instead of using the separate function words#, the definition of words-on-line
    simply calls the [length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._length%29%29)
    function that comes with BSL. Experiment with the definition in DrRacket and make
    sure that the two test cases cover the entire function definition.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With one small step, you can now design your first file utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [String](part_one.html#%28tech._string%29) -> [List-of-numbers](#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; counts the words on each line in the given file |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (file-statistic file-name)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (words-on-line |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([read-words/line](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-words%2Fline%29%29) file-name)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It merely composes a library function with words-on-line. The former reads a
    file as a [List-of-list-of-strings](#%28tech._list._of._list._of._string%29) and
    hands this value to the latter.
  prefs: []
  type: TYPE_NORMAL
- en: This idea of composing a built-in function with a newly designed function is
    common. Naturally, people don’t design functions randomly and expect to find something
    in the chosen programming language to complement their design. Instead, program
    designers plan ahead and design the function to the output that available functions
    deliver. More generally still and as mentioned above, it is common to think about
    a solution as a composition of two computations and to develop an appropriate
    data collection with which to communicate the result of one computation to the
    second one, where each computation is each implemented with a function.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [1String](part_one.html#%28tech._1string%29) -> [String](part_one.html#%28tech._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; converts the given [1String](part_one.html#%28tech._1string%29) to a 3-letter
    numeric [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (encode-letter "z") (code1 "z"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (encode-letter "\t")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "00" (code1 "\t")))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (encode-letter "a")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "0" (code1 "a")))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (encode-letter s)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) ([string->int](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3eint%29%29) s) 100) (code1 s)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) ([string->int](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3eint%29%29) s) 10)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "00" (code1 s))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3c%29%29) ([string->int](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3eint%29%29) s) 100)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) "0" (code1 s))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [1String](part_one.html#%28tech._1string%29) -> [String](part_one.html#%28tech._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; convert the given [1String](part_one.html#%28tech._1string%29) into a [String](part_one.html#%28tech._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (code1 "z") "122")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (code1 c)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([number->string](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._number-~3estring%29%29) ([string->int](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-~3eint%29%29) c)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 65: Encoding strings'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 172\. Design the function collapse, which converts a list of lines
    into a string. The strings should be separated by blank spaces (" "). The lines
    should be separated with a newline ("\n").
  prefs: []
  type: TYPE_NORMAL
- en: 'Challenge When you are finished, use the program like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([write-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._write-file%29%29) "ttt.dat"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (collapse ([read-words/line](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-words%2Fline%29%29) "ttt.txt")))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: To make sure the two files "ttt.dat" and "ttt.txt" are identical, remove all
    extraneous white spaces in your version of the T.T.T. poem. [![image](../Images/ee7ba1cec401c3d6229910dab3fdc62f.jpg)](#%28counter._%28exercise._collapse%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 173\. Design a program that removes all articles from a text file.
    The program consumes the name n of a file, reads the file, removes the articles,
    and writes the result out to a file whose name is the result of concatenating
    "no-articles-" with n. For this exercise, an article is one of the following three
    words: "a", "an", and "the".'
  prefs: []
  type: TYPE_NORMAL
- en: Use [read-words/line](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-words%2Fline%29%29)
    so that the transformation retains the organization of the original text into
    lines and words. When the program is designed, run it on the Piet Hein poem. [![image](../Images/9528a5bdc1f490ce092e4a4878695c23.jpg)](#%28counter._%28exercise._no-articles%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 174\. Design a program that encodes text files numerically. Each letter
    in a word should be encoded as a numeric three-letter string with a value between
    0 and 256\. [Figure 65](#%28counter._%28figure._fig~3aex~3aencode%29%29) shows
    our encoding function for single letters. Before you start, explain these functions.
  prefs: []
  type: TYPE_NORMAL
- en: Hints (1) Use [read-words/line](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-words%2Fline%29%29)
    to preserve the organization of the file into lines and words. (2) Read up on
    [explode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._explode%29%29)
    again. [![image](../Images/13a16174f648ffaeeeb23b5efebc8a65.jpg)](#%28counter._%28exercise._encode%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 175\. Design a BSL program that simulates the Unix command wc. The
    purpose of the command is to count the number of [1String](part_one.html#%28tech._1string%29)s,
    words, and lines in a given file. That is, the command consumes the name of a
    file and produces a value that consists of three numbers. [![image](../Images/8d7d76cc6dfc7b6432ee903794ec8a5b.jpg)](#%28counter._%28exercise._wc%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Matrix](#%28tech._matrix%29) -> [Matrix](#%28tech._matrix%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; transpose the given matrix along the diagonal |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) wor1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 11 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 21 ''())))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) wor2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 12 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 22 ''())))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) tam1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) wor1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) wor2 ''())))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (transpose mat1) tam1)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (transpose lln)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) lln)) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) (first* lln) (transpose (rest* lln)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 66: Transpose a matrix'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Exercise 176\. Mathematics teachers may have introduced you to matrix calculations
    by now. In principle, matrix just means rectangle of numbers. Here is one possible
    data representation for matrices:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Matrix is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Row](#%28tech._row%29)  ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Row](#%28tech._row%29)  [Matrix](#%28tech._matrix%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; constraint all rows in matrix are of the same length |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Row is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Number](part_one.html#%28tech._number%29)  [Row](#%28tech._row%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note the constraints on matrices. Study the data definition and translate the
    two-by-two matrix consisting of the numbers 11, 12, 21, 22 into this data representation.
    Stop, don’t read on until you have figured out the data examples.Here is the solution
    for the five-second puzzle:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) row1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 11 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 12 ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) row2 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 21 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 22 ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) mat1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) row1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) row2 ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If you didn’t create it yourself, study it now.
  prefs: []
  type: TYPE_NORMAL
- en: The function in [figure 66](#%28counter._%28figure._fig~3aex~3atranspose%29%29)
    implements the important mathematical operation of transposing the entries in
    a matrix. To transpose means to mirror the entries along the diagonal, that is,
    the line from the top-left to the bottom-right.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Transpose mat1 by hand, then read [figure 66](#%28counter._%28figure._fig~3aex~3atranspose%29%29).
    Why does transpose ask ([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29)  ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  lln))?
  prefs: []
  type: TYPE_NORMAL
- en: 'The definition assumes two auxiliary functions:'
  prefs: []
  type: TYPE_NORMAL
- en: first*, which consumes a matrix and produces the first column as a list of numbers;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rest*, which consumes a matrix and removes the first column. The result is a
    matrix.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though you lack definitions for these functions, you should be able to
    understand how transpose works. You should also understand that you cannot design
    this function with the design recipes you have seen so far. Explain why.
  prefs: []
  type: TYPE_NORMAL
- en: Design the two “wish list” functions. Then complete the design of the transpose
    with some test cases. [![image](../Images/7e0b3f366cf89a4df6b916bbe8377d39.jpg)](#%28counter._%28exercise._ex~3atranspose%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 10.4A Graphical Editor, Revisited
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[A Graphical Editor](part_one.html#%28part._sec~3aedit1%29) is about the design
    of an interactive graphical one-line editor. It suggests two different ways to
    represent the state of the editor and urges you to explore both: a structure that
    contains pair of strings or a structure that combines a string with an index to
    a current position (see [exercise 87](part_one.html#%28counter._%28exercise._struct-edit4%29%29)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'A third alternative is to use structures that combine two lists of [1String](part_one.html#%28tech._1string%29)s:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) editor [pre post])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Editor is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-editor  [Lo1S](#%28tech._list-edit2._lo1%29)  [Lo1S](#%28tech._list-edit2._lo1%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Lo1S is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [1String](part_one.html#%28tech._1string%29)  [Lo1S](#%28tech._list-edit2._lo1%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Before you wonder why, let us make up two data examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) good
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "g" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "o" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "o" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "d" ''())))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) all
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "l" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "l" ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) lla
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "l" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "l" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a" ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; data example 1: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (make-editor all good) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; data example 2: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (make-editor lla good) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The two examples demonstrate how important it is to write down an interpretation.
    While the two fields of an editor clearly represent the letters to the left and
    right of the cursor, the two examples demonstrate that there are at least two
    ways to interpret the structure types:'
  prefs: []
  type: TYPE_NORMAL
- en: (make-editor  pre  post) could mean the letters in pre precede the cursor and
    those in post succeed it and that the combined text is
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) ([implode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._implode%29%29) pre) ([implode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._implode%29%29) post))
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Recall that [implode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._implode%29%29)
    turns a list of [1String](part_one.html#%28tech._1string%29)s into a [String](part_one.html#%28tech._string%29).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '(make-editor  pre  post) could equally well mean that the letters in pre precede
    the cursor in reverse order. If so, we obtain the text in the displayed editor
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ([string-append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-append%29%29) ([implode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._implode%29%29) (rev pre))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([implode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._implode%29%29) post))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The function rev must consume a list of [1String](part_one.html#%28tech._1string%29)s
    and reverse it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Even without a complete definition for rev you can imagine how it works. Use
    this understanding to make sure you understand that translating the first data
    example into information according to the first interpretation and treating the
    second data example according to the second interpretation yields the same editor
    display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/de30b8cc88b1ec18a08fd0d27fa1af6e.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Both interpretations are fine choices, but it turns out that using the second
    one greatly simplifies the design of the program. The rest of this section demonstrates
    this point, illustrating the use of lists inside of structures at the same time.
    To appreciate the lesson properly, you should have solved the exercises in [A
    Graphical Editor](part_one.html#%28part._sec~3aedit1%29).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with rev, because we clearly need this function to make sense out
    of the data definition. Its header material is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Lo1s](#%28tech._list-edit2._lo1%29) -> [Lo1s](#%28tech._list-edit2._lo1%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a reverse version of the given list |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (rev ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "c" ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "c" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a" ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (rev l) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'For good measure, we have added one “obvious” example as a test case. You may
    want to add some extra examples just to make sure you understand what is needed.The
    template for rev is the usual list template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (rev l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (rev ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'There are two cases, and the second case comes with several selector expressions
    and a self-referential one.Filling in the template is easy for the first clause:
    the reverse version of the empty list is the empty list. For the second clause,
    we once again use the coding questions:'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  l)
    is the first item on the list of [1String](part_one.html#%28tech._1string%29)s;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  l)
    is the rest of the list; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (rev  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  l))
    is the reverse of the rest of the list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stop! Try to finish the design of rev with these hints.
  prefs: []
  type: TYPE_NORMAL
- en: '| l |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   l) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   l) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (rev &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | (rev  l) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''()) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | "a" |  | ''() |  | ''() |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''()) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "c"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       ''()))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | "a" |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "c"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ''())) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "c"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ''())) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "c"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a"
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       ''()))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 67: Tabulating for rev'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If these hints leave you stuck, remember to create a table from the examples.
    [Figure 67](#%28counter._list-edit2._%28figure._fig~3afk-for-rev%29%29) shows
    the table for two examples: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "a"  ''())
    and ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "a"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "b"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "c"  ''()))).
    The second example is particularly illustrative. A look at the next to last column
    shows that (rev  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  l))
    accomplishes most of the work by producing ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "c"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "b"  ''())).
    Since the desired result is ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "c"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "b"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "a"  ''())))
    rev must somehow add "a" to the end of the result of the recursion. Indeed, because
    (rev  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  l))
    is always the reverse of the rest of the list, it clearly suffices to add ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  l)
    to its end. While we don’t have a function that adds items to the end of a list,
    we can wish for it and use it to complete the function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (rev l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) l) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) (add-at-end (rev ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l)) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) l))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here is the extended wish list entry for add-at-end:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Lo1s](#%28tech._list-edit2._lo1%29)  [1String](part_one.html#%28tech._1string%29)
    -> [Lo1s](#%28tech._list-edit2._lo1%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a new list by adding s to the end of l |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (add-at-end ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "c" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b" ''())) "a")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "c" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "b" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "a" ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (add-at-end l s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   l) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It is “extended” because it comes with an example formulated as a test case.
    The example is derived from the example for rev, and indeed, it is precisely the
    example that motivates the wish list entry. Make up an example where add-at-end
    consumes an empty list before you read on.Since add-at-end is also a list-processing
    function, the template is just a renaming of the one you know so well now:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (add-at-end l s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (add-at-end ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l) s) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: To complete it into a full function definition, we proceed according to the
    recipe questions for step 5\. Our first question is to formulate an answer for
    the “basic” case, i.e., the first case here. If you did worked through the suggested
    exercise, you know that the result of
  prefs: []
  type: TYPE_NORMAL
- en: (add-at-end '() s)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'is always ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  s  ''()).
    After all, the result must be a list and the list must contain the given 1String.The
    next two questions concern the “complex” or “self-referential” case. We know what
    the expressions in the second [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    line compute: the first expression extracts the first [1String](part_one.html#%28tech._1string%29)
    from the given list and the second expression “creates a new list by adding s
    to the end of ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  l).”
    That is, the purpose statement dictates what the function must produce here. From
    here, it is clear that the function must add ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  l)
    back to the result of the recursion:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (add-at-end l s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) l) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) s ''())]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) l) (add-at-end ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l) s))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Run the tests-as-examples to reassure yourself that this function works and
    that therefore rev works, too. Of course, you shouldn’t be surprised to find out
    that BSL already provides a function that reverses any given list, including lists
    of [1String](part_one.html#%28tech._1string%29)s. And naturally, it is called
    [reverse](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._reverse%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 177\. Design the function create-editor. The function consumes two
    strings and produces an [Editor](#%28tech._list-edit2._editor%29). The first string
    is the text to the left of the cursor and the second string is the text to the
    right of the cursor. The rest of the section relies on this function. [![image](../Images/da7751101b6d9248ecd69c7c4d6c7a8b.jpg)](#%28counter._list-edit2._%28exercise._create-editor%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you should have a complete understanding of our data representation
    for the graphical one-line editor. Following the design strategy for interactive
    programs from [Designing World Programs](part_one.html#%28part._.D.K._sec~3adesign-world%29),
    you should define physical constants—<wbr>the width and height of the editor,
    for example—<wbr>and graphical constants—<wbr>e.g., the cursor. Here are ours:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) HEIGHT 20) ; the
    height of the editor |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH 200) ; its
    width |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) FONT-SIZE 16) ; the
    font size |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) FONT-COLOR "black") ; the
    font color |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MT ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) WIDTH HEIGHT))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) CURSOR ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 1 HEIGHT "solid" "red"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The important point, however, is to write down the wish list for your event
    handler(s) and your function that draws the state of the editor. Recall that the
    2htdp/universe library dictates the header material for these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Editor](#%28tech._list-edit2._editor%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders an editor as an image of the two texts |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; separated by the cursor |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-render e) MT)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Editor](#%28tech._list-edit2._editor%29)  [KeyEvent](part_one.html#%28tech._keyevent%29)
    -> [Editor](#%28tech._list-edit2._editor%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; deals with a key event, given some editor |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-kh ed ke) ed)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In addition, [Designing World Programs](part_one.html#%28part._.D.K._sec~3adesign-world%29)
    demands that you write down a main function for your program:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; main : [String](part_one.html#%28tech._string%29) -> [Editor](#%28tech._list-edit2._editor%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; launches the editor given some initial string |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (main s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) (create-editor s "")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) editor-kh]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) editor-render]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Re-read [exercise 177](#%28counter._list-edit2._%28exercise._create-editor%29%29)
    to determine the initial editor for this program.While it does not matter which
    wish you tackle next, we choose to design editor-kh first and editor-render second.
    Since we have the header material, let us explain the functioning of the key event
    handler with two examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (editor-kh (create-editor "" "") "e")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               (create-editor "e" "")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (editor-kh (create-editor "cd" "fgh") "e") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (create-editor "cde" "fgh")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Both of these examples demonstrate what happens when you press the letter “e”
    on your keyboard. The computer runs the function editor-kh on the current state
    of the editor and "e". In the first example, the editor is empty, which means
    that the result is an editor with just the letter "e" in it followed by the cursor.
    In the second example, the cursor is between the strings "cd" and "fgh", and therefore
    the result is an editor with the cursor between "cde" and "fgh". In short, the
    function always inserts any normal letter at the cursor position.
  prefs: []
  type: TYPE_NORMAL
- en: Before you read on, you should make up examples that illustrate how editor-kh
    works when you press the backspace ("\b") key to delete some letter, the "left"
    and "right" arrow keys to move the cursor, or some other arrow keys. In all cases,
    consider what should happen when the editor is empty, when the cursor is at the
    left end or right end of the non-empty string in the editor, and when it is in
    the middle. Even though you are not working with intervals here, it is still a
    good idea to develop examples for the “extreme” cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have test cases, it is time to develop the template. In the case of
    editor-kh you are working with a function that consumes two complex forms of data:
    one is a structure containing lists, the other one is a large enumeration of strings.
    Generally speaking, this design case calls for an improved design recipe; but
    in cases like these, it is also clear that you should deal with one of the inputs
    first, namely, the keystroke.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Having said that, the template is just a large [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression for checking which [KeyEvent](part_one.html#%28tech._keyevent%29) the
    function received:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-kh ed k)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) k "left") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) k "right") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) k "\b") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) k "\t") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) k "\r") [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) k) 1) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression doesn’t quite match the data definition for [KeyEvent](part_one.html#%28tech._keyevent%29)
    because some [KeyEvent](part_one.html#%28tech._keyevent%29)s need special attention
    ("left", "\b", and so on); some need to be ignored because they are special ("\t"
    and "\r"); and some should be classified into one large group (ordinary keys).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 178\. Explain why the template for editor-kh deals with "\t" and "\r"
    before it checks for strings of length 1. [![image](../Images/bd920bc18a8daf0f321892990fbf0020.jpg)](#%28counter._list-edit2._%28exercise._editor-explain%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'For the fifth step—<wbr>the definition of the function—<wbr>we tackle each
    clause in the conditional separately. The first clause demands a result that moves
    the cursor and leaves the string content of the editor alone. So does the second
    clause. The third clause, however, demands the deletion of a letter from the editor’s
    content—<wbr>if there is a letter. Last but not least, the sixth [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause concerns the addition of letters at the cursor position. Following the
    first basic guideline, we make extensive use of a wish list and imagine one function
    per task:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-kh ed k)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) k "left") (editor-lft ed)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) k "right") (editor-rgt ed)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) k "\b") (editor-del ed)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) k "\t") ed]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([key=?](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29) k "\r") ed]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([string-length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string-length%29%29) k) 1) (editor-ins ed k)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ed]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As you can tell from the definition of editor-kh, three of the four wish list
    functions have the same signature:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [Editor](#%28tech._list-edit2._editor%29) -> [Editor](#%28tech._list-edit2._editor%29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The last one takes two arguments instead of one:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [Editor](#%28tech._list-edit2._editor%29)  [1String](part_one.html#%28tech._1string%29)
    -> [Editor](#%28tech._list-edit2._editor%29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We leave the proper formulation of wishes for the first three functions to
    you and focus on the fourth one.Let us start with a purpose statement and a function
    header:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; insert the [1String](part_one.html#%28tech._1string%29)  k between pre
    and post |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-ins ed k)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ed) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The purpose is straight out of the problem statement. For the construction
    of a function header, we need an instance of [Editor](#%28tech._list-edit2._editor%29).
    Since pre and post are the pieces of the current one, we just put them back together.Next
    we derive examples for editor-ins from those for editor-kh:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (editor-ins (make-editor ''() ''()) "e") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-editor ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "e" ''()) ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (editor-ins |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (make-editor ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "d" ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "f" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "g" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     "e") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-editor ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "e" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "d" ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "f" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "g" ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'You should work through these examples using the interpretation of [Editor](#%28tech._list-edit2._editor%29).
    That is, make sure you understand what the given editor means as information and
    what the function call is supposed to achieve in terms of information. In this
    particular case, it is best to draw the visual representation of the editor because
    it is the information of that we have in mind.The fourth step demands the development
    of the template. The first argument is guaranteed to be a structure, and the second
    one is a string, an atomic piece of data. In other words, the template just pulls
    out the pieces from the given editor representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-ins ed k)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ed [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) k [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (editor-pre ed) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (editor-post ed) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Remember a template lists parameters because they are available, too.From the
    template and the examples, it is relatively easy to conclude what editor-ins is
    supposed to create an editor from the given editor’s pre and post fields with
    k added to the front of the former:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-ins ed k)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-editor ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) k (editor-pre ed))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                (editor-post ed))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Even though both (editor-pre  ed) and (editor-post  ed) are list of [1String](part_one.html#%28tech._1string%29)s,
    there is no need to design auxiliary functions. To get the desired result, it
    suffices to use [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29),
    which creates lists.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should do two things. First, run the tests for this function.
    Second, use the interpretation of Editor and explain abstractly why this function
    performs the insertion. And if this isn’t enough, you may wish to compare this
    simple definition with the one from [exercise 84](part_one.html#%28counter._%28exercise._struct-edit1%29%29)
    and figure out why the other one needs an auxiliary function while our definition
    here doesn’t.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 179\. Design the functions
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Editor](#%28tech._list-edit2._editor%29) -> [Editor](#%28tech._list-edit2._editor%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; moves the cursor position one [1String](part_one.html#%28tech._1string%29)
    left, |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if possible |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-lft ed) ed)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Editor](#%28tech._list-edit2._editor%29) -> [Editor](#%28tech._list-edit2._editor%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; moves the cursor position one [1String](part_one.html#%28tech._1string%29)
    right, |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if possible |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-rgt ed) ed)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Editor](#%28tech._list-edit2._editor%29) -> [Editor](#%28tech._list-edit2._editor%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; deletes a [1String](part_one.html#%28tech._1string%29) to the left of the
    cursor |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if possible |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-del ed) ed)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Again, it is critical that you work through a good range of examples. [![image](../Images/8b6897a9e84791261b8570d6107b6710.jpg)](#%28counter._list-edit2._%28exercise._editor-list-rev-aux%29%29)Designing
    the rendering function for [Editor](#%28tech._list-edit2._editor%29)s poses some
    new but small challenges. The first one is to develop a sufficiently large number
    of test cases. On one hand, it demands coverage of the possible combinations:
    an empty string to the left of the cursor, an empty one on the right, and both
    strings empty. On the other hand, it also requires some experimenting with the
    functions that the image library provides. Specifically, it needs a way to compose
    the two pieces of strings rendered as text images; and it needs a way of placing
    the text image into the empty image frame (MT). Here is what we do to create an
    image for the result of (create-editor  "pre"  "post"):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([place-image/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%2Falign%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "pre" FONT-SIZE FONT-COLOR)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           CURSOR |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "post" FONT-SIZE FONT-COLOR))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   1 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   "left" "top" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   MT) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If you compare this with the editor image above, you notice some differences,
    which is fine because the exact layout isn’t essential to the purpose of this
    exercise, and because the revised layout doesn’t trivialize the problem. In any
    case, do experiment in the interactions area of DrRacket to find your favorite
    editor display.You are now ready to develop the template, and you should come
    up with this much:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-render e)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (editor-pre e) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (editor-post e)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The given argument is just a structure type with two fields. Their values,
    however, are lists of [1String](part_one.html#%28tech._1string%29)s, and you might
    be tempted to refine the template even more. Don’t! Instead, keep in mind that
    when one data definition refers to another complex data definition, you are better
    off using the wish list.If you have worked through a sufficient number of examples,
    you also know what you want on your wish list: one function that turns a string
    into a text of the right size and color. Let us call this function editor-text.
    Then the definition of editor-render just uses editor-text twice and then composes
    the result with [beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29)
    and [place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Editor](#%28tech._list-edit2._editor%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-render e)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([place-image/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%2Falign%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) (editor-text (editor-pre e))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             CURSOR |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (editor-text (editor-post e))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     1 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     "left" "top" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     MT)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Although this definition nests expressions three levels deep, the use of the
    imaginary editor-text function renders it quite readable.What remains is to design
    editor-text. From the design of editor-render, we know that editor-text consumes
    a list of [1String](part_one.html#%28tech._1string%29)s and produces a text image:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Lo1s](#%28tech._list-edit2._lo1%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders a list of [1String](part_one.html#%28tech._1string%29)s as a text
    image |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-text s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "" FONT-SIZE FONT-COLOR))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This dummy definition produces an empty text image.To demonstrate what editor-text
    is supposed to compute, we work through an example. The example input is
  prefs: []
  type: TYPE_NORMAL
- en: (create-editor "pre" "post")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: which was also used to explain editor-render and is equivalent to
  prefs: []
  type: TYPE_NORMAL
- en: '| (make-editor |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "e" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "r" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "p" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "p" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "o" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "s" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "t" ''())))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We pick the second list as our sample input for editor-text, and we know the
    expected result from the example for editor-render:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (editor-text |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "p" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "o" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "s" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "t" ''())))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "post" FONT-SIZE FONT-COLOR))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'You may wish to make up a second example before reading on.Given that editor-text
    consumes a list of [1String](part_one.html#%28tech._1string%29)s, we can write
    down the template without much ado:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-text s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) s) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (editor-text ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) s)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: After all, the template is dictated by the data definition that describes the
    function input. But you don’t need the template if you understand and keep in
    mind the interpretation for [Editor](#%28tech._list-edit2._editor%29). It uses
    [explode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._explode%29%29)
    to turn a string into a list of [1String](part_one.html#%28tech._1string%29)s.
    Naturally, there is a function [implode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._implode%29%29)
    that performs the inverse computation, i.e.,
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([implode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._implode%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "p" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "o" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "s" ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) "t" ''())))))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| "post" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Using this function, the definition of editor-text is just a small step from
    the example to the function body:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-text s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) ([implode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._implode%29%29) s) FONT-SIZE FONT-COLOR))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 180\. Design editor-text without using [implode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._implode%29%29).
    [![image](../Images/4d38fef7d0bb36364d8cf49d926a70db.jpg)](#%28counter._list-edit2._%28exercise._editor-implode-manually%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'The true surprise comes when you test the two functions. While our test for
    editor-text succeeds, the test for editor-render fails. An inspection of the failure
    shows that the string to the left of the cursor—<wbr> "pre"—<wbr>is type-set backwards.
    We forgot that this part of the editor’s state is represented in reverse. Fortunately,
    the unit tests for the two functions pinpoint which function is wrong and even
    tell us what is wrong with the function and suggests how to fix the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (editor-render ed)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([place-image/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%2Falign%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) (editor-text ([reverse](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._reverse%29%29) (editor-pre ed)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             CURSOR |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (editor-text (editor-post ed))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     1 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     "left" "top" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     MT)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It uses the [reverse](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._reverse%29%29)
    function on the pre field of ed.
  prefs: []
  type: TYPE_NORMAL
- en: Note Modern applications allow users to position the cursor with the mouse (or
    other gesture-based devices). While it is in principle possible to add this capability
    to your editor, we wait with doing so until [A Graphical Editor, with Mouse](part_six.html#%28part._accu-edit._sec~3aedit3%29).
  prefs: []
  type: TYPE_NORMAL
- en: 11Design by Composition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By now you know that programs are complex products and that their production
    requires the design of many collaborating functions. This collaboration works
    well if the designer knows when to design several functions and how to compose
    these functions into one program.
  prefs: []
  type: TYPE_NORMAL
- en: You have encountered this need to design interrelated functions several times.
    Sometimes a problem statement implies several different tasks, and each task is
    best realized with a function. At other times, a data definition may refer to
    another one, and in that case, a function processing the former kind of data relies
    on a function processing the latter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we present several scenarios that call for the design of programs
    that compose many functions. To support this kind of design, the chapter presents
    some informal guidelines on divvying up functions and composing them. Since these
    examples demand complex forms of lists, however, this chapter starts with a section
    on concise list notation.
  prefs: []
  type: TYPE_NORMAL
- en: 11.1The [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)
    Function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At this point, you should have tired of writing so many [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)es
    just to create a list, especially for lists that contain a bunch of values. Fortunately,
    we have an additional teaching language for you thatYou have graduated from BSL.
    It is time to use the “Language” menu and to select “Beginning Student with List
    Abbreviations” for your studies. provides mechanisms for simplifying this part
    of a programmer’s life. BSL+ does so, too.
  prefs: []
  type: TYPE_NORMAL
- en: The key innovation is [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29),
    which consumes an arbitrary number of values and creates a list. The simplest
    way to understand [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)
    is to think of it as an abbreviation. Specifically, every expression of the shape
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) exp-1 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) exp-n)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'stands for a series of n [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) exp-1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) exp-n '())))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Keep in mind that ''() is not an item of the list here, but the rest of the
    list. Here is a table with three examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| short-hand |  | long-hand |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "ABC")
    |  | ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "ABC"  ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  #false  #true)
    |  | ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  #false  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  #true  ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  1  2  3)
    |  | ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  1  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  2  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  3  ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'They introduce lists with one, two, and three items, respectively.Of course,
    we can apply [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)
    not only to values but also to expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 0 1) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 1 2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29) 1 0) ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29) 1 1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| /: division by zero |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Before the list is constructed, the expressions must be evaluated. If during
    the evaluation of an expression an error occurs, the list is never formed. In
    short, [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)
    behaves just like any other primitive operation that consumes an arbitrary number
    of arguments; its result just happens to be a list constructed with [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)es.The
    use of [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)
    greatly simplifies the notation for lists with many items and lists that contains
    lists or structures. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 0 1 2 3 4 5 6 7 8 9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This list contains 10 items and its formation with [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    would require 10 uses of [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    and one instance of '(). Similarly, the list
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "bob" 0 "a")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "carl" 1 "a")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "dana" 2 "b")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "erik" 3 "c")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "frank" 4 "a")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "grant" 5 "b")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "hank" 6 "c")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "ian" 8 "a")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "john" 7 "d")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "karel" 9 "e"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'requires 11 uses of [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29),
    which sharply contrasts with 40 [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    and 11 additional uses of ''().Exercise 181\. Use [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)
    to construct the equivalent of these lists:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "a"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "b"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "c"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "d"  '()))))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  1  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  2  '()))  '())
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "a"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  1  ''())  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  #false  ''())))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "a"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  2  '()))  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "hello"  '()))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also try your hands at this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 1 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 2 ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ''())) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Start by determining how many items each list and each nested list contains.
    Use [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    to express your answers; this ensures that your abbreviations are really the same
    as the long-hand. [![image](../Images/13545e1d3750ca9de6f6dc4d3fd8135d.jpg)](#%28counter._%28exercise._ex~3alist-cons3%29%29)Exercise 182\.
    Use [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    and ''() to form the equivalent of these lists:'
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  0  1  2  3  4  5)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "he"  0)  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "it"  1)  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "lui"  14))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  1  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  1  2)  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  1  2  3))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    to express your answers. [![image](../Images/21e6b8afd162a54682b0e122f47dc56d.jpg)](#%28counter._%28exercise._ex~3alist-cons2%29%29)Exercise 183\.
    On some occasions lists are formed with [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    and [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: '([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "a"  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  0  #false))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  1  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  13  '())))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  1  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  13  '()))  '())
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  '()  '()  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  1  '()))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  "a"  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  1)  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  #false  ''())))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reformulate each of the following expressions using only [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    or only [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29).
    Use [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    to check your answers. [![image](../Images/dd94240367909a28978b2c5a45f85005.jpg)](#%28counter._%28exercise._ex~3alist-cons4%29%29)Exercise 184\.
    Determine the values of the following expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  ([string=?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3d~3f%29%29)  "a"  "b")  #false)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  ([+](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2B%29%29)  10  20)  ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29)  10  20)  ([/](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2F%29%29)  10  20))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "dana"  "jane"  "mary"  "laura")
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    to express your answers. [![image](../Images/a97dd1a344be79c8b26412a760e7543d.jpg)](#%28counter._%28exercise._ex~3alist-cons1%29%29)Exercise 185\.
    You know about [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)
    and [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    from BSL, but BSL+ comes with even more selectors than that. Determine the values
    of the following expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  1  2  3))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  1  2  3))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29)  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  1  2  3))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find out from the documentation whether [third](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._third%29%29)
    and [fourth](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._fourth%29%29)
    exist. [![image](../Images/967afdb58916d5f275beea27382cc8fb.jpg)](#%28counter._%28exercise._ex~3alist-cons5%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 11.2Composing Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[How to Design Programs](part_one.html#%28part._ch~3ahtdp%29) explains that
    programs are collections of definitions: structure type definitions, data definitions,
    constant definitions, and function definitions.And don’t forget tests. To guide
    the division of labor among functions, the section also suggests a rough guideline:'
  prefs: []
  type: TYPE_NORMAL
- en: Design one function per task. Formulate auxiliary function definitions for every
    dependency between quantities in the problem.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This part of the book introduces another guideline on auxiliary functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Design one template per data definition. Formulate auxiliary function definitions
    when one data definition points to a second data definition.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this section, we take a look at one specific place in the design process
    that may call for additional auxiliary functions: the definition step, which creates
    a full-fledged definition from a template. Turning a template into a complete
    function definition means combining the values of the template’s sub-expressions
    into the final answer. As you do so, you might encounter several situations that
    suggest the need for auxiliary functions:'
  prefs: []
  type: TYPE_NORMAL
- en: If the composition of values requires knowledge of a particular domain of application—<wbr>for
    example, composing two (computer) images, accounting, music, or science—<wbr>design
    an auxiliary function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the composition of values requires a case analysis of the available values—<wbr>for
    example, is a number positive, zero, or negative—<wbr> use a [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression. If the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    looks complex, design an auxiliary function whose arguments are the template’s
    expressions and whose body is the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the composition of values must process an element from a self-referential
    data definition—<wbr>a list, a natural number, or something like those—<wbr>design
    an auxiliary function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything fails, you may need to design a more general function and define
    the main function as a specific use of the general function. This suggestion sounds
    counter-intuitive but it is called for in a remarkably large number of cases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last two criteria are situations that we haven’t discussed in any detail,
    though examples have come up before. The next two sections illustrate these principles
    with additional examples.
  prefs: []
  type: TYPE_NORMAL
- en: Before we continue, though, remember that the key to managing the design of
    programs is to maintain the often-mentioned
  prefs: []
  type: TYPE_NORMAL
- en: Wish List
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Maintain a list of function headers that must be designed to complete a program.
    Writing down complete function headers ensures that you can test those portions
    of the programs that you have finished, which is useful even though many tests
    will fail. Of course, when the wish list is empty, all tests should pass and all
    functions should be covered by tests.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Before you put a function on the wish list, you should check whether something
    like the function already exists in your language’s library or whether something
    similar is already on the wish list. BSL, BSL+, and indeed all programming languages
    provide many built-in operations and many library functions. You should explore
    your chosen language when you have time and when you have a need, so that you
    know what it provides.
  prefs: []
  type: TYPE_NORMAL
- en: 11.3Auxiliary Functions that Recur
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: People need to sort things all the time, and so do programs. Investment advisors
    sort portfolios by the profit each holding generates. Game programs sort lists
    of players according to scores. And mail programs sort messages according to date
    or sender or some other criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, you can sort a bunch of items if you can compare and order each
    pair of data items. Although not every kind of data comes with a comparison primitive,
    we all know one that does: numbers. Hence, we use a simplistic but highly representative
    sample problem in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a function that sorts a list of reals.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The exercises below clarify how to adapt this function to other data.Since
    the problem statement does not mention any other task and since sorting does not
    seem to suggest other tasks, we just follow the design recipe. Sorting means rearranging
    a bunch of numbers. This re-statement implies a natural data definition for the
    inputs and outputs of the function and thus its signature. Given that we have
    a definition for [List-of-numbers](#%28tech._list._of._number%29), the first step
    is easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-numbers](#%28tech._list._of._number%29) -> [List-of-numbers](#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a sorted version of alon |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sort> alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   alon) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Returning alon ensures that the result is appropriate as far as the function
    signature is concerned, but in general, the given list isn’t sorted and this result
    is wrong.When it comes to making up examples, it quickly becomes clear that the
    problem statement is quite imprecise. As before, we use the data definition of
    [List-of-numbers](#%28tech._list._of._number%29) to organize the development of
    examples. Since the data definition consists of two clauses, we need two examples.
    Clearly, when sort> is applied to '(), the result must be '(). The question is
    what the result for
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 12 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) 20 ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) -5 '())))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'should be. The list isn’t sorted, but there are two ways to sort it:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  20  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  12  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  -5  '()))),
    that is, a list with the numbers arranged in descending order; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  -5  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  12  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  20  '()))),
    that is, a list with the numbers arranged in ascending order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In a real-world situation, you would now have to ask the person who posed the
    problem for clarification. Here we go for the descending alternative; designing
    the ascending alternative doesn’t pose any different obstacles.The decision calls
    for a revision of the header material:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-numbers](#%28tech._list._of._number%29) -> [List-of-numbers](#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; rearrange alon in descending order |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (sort> ''()) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (sort> ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 3 2 1)) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 3 2 1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (sort> ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 1 2 3)) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 3 2 1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (sort> ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 12 20 -5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 20 12 -5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sort> alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   alon) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The header material now includes the examples reformulated as unit tests and
    using [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29).
    If the latter makes you uncomfortable, reformulate the test with [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    to exercise translating back and forth. As for the additional two examples, they
    demand that sort works on lists sorted in ascending and descending order.Next
    we must translate the data definition into a function template. We have dealt
    with lists of numbers before, so this step is easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sort> alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alon) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alon) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (sort> ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alon)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Using this template, we can finally turn to the interesting part of the program
    development. We consider each case of the [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    expression separately, starting with the simple case. If sort>’s input is ''(),
    the answer is ''(), as specified by the example. If sort>’s input is a [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)ed
    list, the template suggests two expressions that might help:'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alon)
    extracts the first number from the input;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (sort>  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon))
    re-arranges ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon)
    in descending order, according to the purpose statement of the function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To clarify these abstract answers, let us use the second example to explain
    these pieces in detail. When sort> consumes ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  12  20  -5),
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alon)
    is 12,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon)
    is ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  20  -5),
    and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (sort>  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon))
    produces ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  20  -5),
    because this list is already sorted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To produce the desired answer, sort> must insert 12 between the two numbers
    of the last list. More generally, we must find an expression that inserts ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alon)
    in its proper place into the result of (sort>  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon)).
    If we can do so, sorting is an easily solved problem.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a number into a sorted list clearly isn’t a simple task. It demands
    searching through the sorted list to find the proper place of the item. Searching
    through any list demands an auxiliary function, because lists are of arbitrary
    size and, by hint 3 of the preceding section, processing values of arbitrary size,
    calls for the design of an auxiliary function.
  prefs: []
  type: TYPE_NORMAL
- en: 'So here is the new wish list entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29)  [List-of-numbers](#%28tech._list._of._number%29)
    -> [List-of-numbers](#%28tech._list._of._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; inserts n into the sorted list of numbers alon |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (insert n alon) alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'That is, insert consumes a number and a list sorted in descending order and
    produces a sorted list by inserting the former into the latter.With insert, it
    is easy to complete the definition of sort>:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sort> alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alon) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (insert ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alon) (sort> ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alon)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In order to produce the final result, sort> extracts the first item of a non-empty
    list, computes the sorted version of the rest, and uses insert to produce the
    completely sorted list from the two pieces.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Test the program as is. Some test cases pass, and some fail. That’s progress.
    The next step in its design is the creation of functional examples. Since the
    first input of insert is any number, we use 5 and use the data definition for
    [List-of-numbers](#%28tech._list._of._number%29) to make up examples for the second
    input.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we consider what insert should produce when given a number and ''().
    According to insert’s purpose statement, the output must be a list, it must contain
    all numbers from the second input, and it must contain the first argument. This
    suggests the following:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (insert 5 '()) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 5))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Second, we use a non-empty list of just one item:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (insert 5 ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 6)) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 6 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (insert 5 ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 4)) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 5 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The reasoning of why these are the expected results is just like before. For
    one, the result must contain all numbers from the second list and the extra number.
    For two, the result must be sorted.Finally, let us create an example with a list
    that contains more than one item. Indeed, we can derive such an example from the
    examples for sort> and especially from our analysis of the second [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause. From there, we know that sort> works only if 12 is inserted into ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  20  -5)
    at its proper place:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (insert 12 ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 20 -5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 20 12 -5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: That is, insert is given a second list and it is sorted in descending order.
  prefs: []
  type: TYPE_NORMAL
- en: Note what the development of examples teaches us. The insert function has to
    find the first number that is smaller than the given n. When there is no such
    number, the function eventually reaches the end of the list and it must add n
    to the end. Now, before we move on to the template, you should work out some additional
    examples. To do so, you may wish to use the supplementary examples for sort>.
  prefs: []
  type: TYPE_NORMAL
- en: 'In contrast to sort>, the function insert consumes two inputs. Since we know
    that the first one is a number and atomic, we can focus on the second argument—<wbr>the
    list of numbers—<wbr>for the template development:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (insert n alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alon) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alon) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (insert n ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alon)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The only difference between this template and the one for sort> is that this
    one needs to take into account the additional argument n.
  prefs: []
  type: TYPE_NORMAL
- en: To fill the gaps in the template of insert, we again proceed on a case-by-case
    basis. The first case concerns the empty list. According to the first example,
    ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  n)
    is the expression needed in the first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause, because it constructs a sorted list from n and alon.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second case is more complicated than the first, and so we follow the questions
    from [figure 49](#%28counter._%28figure._fig~3adefinition-q%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alon)
    is the first number on alon, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon)
    is the rest of alon and, like alon, it is sorted in descending order;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (insert  n  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon))
    produces a sorted list from n and the numbers on ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The problem is how to combine these pieces of data to get the final answer.Let
    us work through some examples to make all this concrete:'
  prefs: []
  type: TYPE_NORMAL
- en: (insert 7 ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 6 5 4))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here n is 7 and larger than any of the numbers in the second input. We know
    so by just looking at the first item of the list. It is 6 but because the list
    is sorted, all other numbers on the list are even smaller than 6. Hence it suffices
    if we just [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    7 onto ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  6  5  4).In
    contrast, when the application is something like
  prefs: []
  type: TYPE_NORMAL
- en: (insert 0 ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) 6 2 1 -1))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'n must indeed be inserted into the rest of the list. More concretely, ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alon)
    is 6; ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon)
    is ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  2  1  -1);
    and (insert  n  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon))
    produces ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  2  1  0  -1)
    according to the purpose statement. By adding 6 back onto that last list, we get
    the desired answer for (insert  0  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  6  2  1  -1)).To
    get a complete function definition, we must generalize these examples. The case
    analysis suggests a nested conditional that determines whether n is larger than
    (or equal to) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alon):'
  prefs: []
  type: TYPE_NORMAL
- en: If so, all the items in alon are smaller than n because alon is already sorted.
    The answer in that case is ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  n  alon).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If, however, n is smaller than ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alon),
    then the function has not yet found the proper place to insert n into alon. The
    first item of the result must be ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alon)
    and that n must be inserted into ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  alon).
    The final result in this case is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alon) (insert n ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alon)))
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: because this list contains n and all items of alon in sorted order—<wbr>which
    is what we need.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The translation of this discussion into BSL+ calls for an [if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29)
    expression for such cases. The condition is ([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29)  n  ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  alon))
    and the expressions for the two branches have been formulated.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 68](#%28counter._%28figure._fig~3asort%29%29) contains the complete
    sort program. Copy it into the definition area of DrRacket, add the test cases
    back in, and test the program. All tests should pass now and they should cover
    all expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: Terminology This particular program for sorting is known as insertion sort in
    the programming literature. Later we will study alternative ways to sort lists,
    using an entirely different design strategy.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-numbers](#%28tech._list._of._number%29) -> [List-of-numbers](#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a sorted version of l |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sort> l)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) l) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons~3f%29%29) l) (insert ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) l) (sort> ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Number](part_one.html#%28tech._number%29)  [List-of-numbers](#%28tech._list._of._number%29)
    -> [List-of-numbers](#%28tech._list._of._number%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; inserts n into the sorted list of numbers l |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (insert n l)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) l) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) n ''())]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([>=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3e~3d%29%29) n ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) l))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) n l)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) l) (insert n ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) l))))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 68: Sorting lists of numbers'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Exercise 186\. Take a second look at [Intermezzo: BSL](part_one.html#%28part._i1-2%29),
    the intermezzo that presents BSL and its ways of formulating tests. One of the
    latter is [check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29),
    which determines whether an expression satisfies a certain property. Use sorted>?
    from [exercise 145](#%28counter._%28exercise._nelist4%29%29) to re-formulate the
    tests for sort> with [check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now consider this function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-numbers](#%28tech._list._of._number%29) -> [List-of-numbers](#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a sorted version of l |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (sort>/bad l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ''(9 8 7 6 5 4 3 2 1 0)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Can you formulate a test case that shows sort>/bad is not a sorting function?
    Can you use [check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29)
    to formulate this test case?
  prefs: []
  type: TYPE_NORMAL
- en: Notes (1) What may surprise you here is that we define a function to create
    a test. In the real world, this step is common and, on occasion, you really need
    to design functions for tests—<wbr>with their own tests and all. (2) Formulating
    tests with [check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29)
    is occasionally easier than using [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    (or other forms), and it is also a bit more general. When the predicate completely
    describes the relationship between all possible inputs and outputs of a function,
    computer scientists speak of a specification. [Specifying with lambda](part_three.html#%28part._sec~3aspecification%29)
    explains how to specify sort> completely. [![image](../Images/25b9c652906548f0adf8852a4aaf6add.jpg)](#%28counter._%28exercise._ex~3asort0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 187\. Design a program that sorts lists of game players by score:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) gp [name score])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A GamePlayer is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;    (make-gp  [String](part_one.html#%28tech._string%29)  [Number](part_one.html#%28tech._number%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  (make-gp  p  s) represents player p who |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; scored a maximum of s points |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Hint Formulate a function that compares two elements of [GamePlayer](#%28tech._gameplayer%29).
    [![image](../Images/486b3f5fb59dcc3852872e951e0d6ec7.jpg)](#%28counter._%28exercise._ex~3asort1-b%29%29)Exercise 188\.
    Design a program that sorts lists of emails by date:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) email [from date message])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Email Message is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-email  [String](part_one.html#%28tech._string%29)  [Number](part_one.html#%28tech._number%29)  [String](part_one.html#%28tech._string%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  (make-email  f  d  m) represents text m |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; sent by f, d seconds after the beginning of time |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Also develop a program that sorts lists of email messages by name. To compare
    two strings alphabetically, use the [string<?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._string~3c~3f%29%29)
    primitive. [![image](../Images/1fe5ca486d34d34df571ad9a65875395.jpg)](#%28counter._%28exercise._ex~3asort1%29%29)Exercise 189\.
    Here is the function search:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29)  [List-of-numbers](#%28tech._list._of._number%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (search n alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) alon) #false]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([or](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._or%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) alon) n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               (search n ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) alon)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It determines whether some number occurs in a list of numbers. The function
    may have to traverse the entire list to find out that the number of interest isn’t
    contained in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Develop the function search-sorted, which determines whether a number occurs
    in a sorted list of numbers. The function must take advantage of the fact that
    the list is sorted. [![image](../Images/9a45a91156238e8da8bc601bd94895f1.jpg)](#%28counter._%28exercise._ex~3asort2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 190\. Design the prefixes function, which consumes a list of [1String](part_one.html#%28tech._1string%29)s
    and produces the list of all prefixes. A list p is a prefix of l if p and l are
    the same up through all items in p. For example, ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "a"  "b"  "c")
    is a prefix of itself and ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "a"  "b"  "c"  "d").
  prefs: []
  type: TYPE_NORMAL
- en: Design the function suffixes, which consumes a list of [1String](part_one.html#%28tech._1string%29)s
    and produces all suffixes. A list s is a suffix of l if p and l are the same from
    the end, up through all items in s. For example, ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "b"  "c"  "d")
    is a suffix of itself and ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "a"  "b"  "c"  "d").
    [![image](../Images/2316d9f53098762a17ead198461d0e2a.jpg)](#%28counter._%28exercise._ex~3aprefix-bsl%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 11.4Auxiliary Functions that Generalize
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: On occasion an auxiliary function not just a small helper function but a solution
    to a more general problem. Such auxiliaries are needed when a problem statement
    is too narrow. As programmers work through the steps of the design recipe, they
    may discover that the “natural” solution is wrong. An analysis of this broken
    solution may suggest a slightly different, but more general problem statement,
    and a simple way of using the solution to the general problem for the original
    one.
  prefs: []
  type: TYPE_NORMAL
- en: We illustrate this idea with a solution to the following problem:Paul C. Fisher
    suggested this problem.
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a function that adds a polygon to a given scene.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Just in case you don’t recall your basic geometry (domain) knowledge, we add
    a (simplistic) definition of polygon:The statement should also say that the points
    are not on a line.
  prefs: []
  type: TYPE_NORMAL
- en: A polygon is a planar figure with at least three points connected by three straight
    sides.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One natural data representation for a polygon is thus a list of [Posn](part_one.html#%28tech._posn%29)s.
    For example, the following two definitions
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) triangle-p
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 20 10)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 20 20)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 30 20)))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) square-p
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 10 10)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 20 10)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 20 20)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 10 20)))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'introduce a triangle and a square, just as the names say. Now you may wonder
    how to interpret ''() or ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  30  40))
    as polygons, and the answer is that they do not describe polygons. Because a polygon
    consists of at least three three points, a good data representations of polygons
    is the collection of lists with at least three [Posn](part_one.html#%28tech._posn%29)s.Following
    the development of the data definition for non-empty lists of temperatures ([NEList-of-temperatures](#%28tech._nelist._of._temperature%29),
    in [Non-empty Lists](#%28part._sec~3alists~3ane%29)), formulating a data representation
    for polygons is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Polygon is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Posn](part_one.html#%28tech._posn%29)  [Polygon](#%28tech._polygon%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first clause says that a list of three [Posn](part_one.html#%28tech._posn%29)s
    is a [Polygon](#%28tech._polygon%29) and the second clause says that [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)ing
    a [Posn](part_one.html#%28tech._posn%29) onto some existing [Polygon](#%28tech._polygon%29)
    creates another one. Since this data definition is the very first to use [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)
    in one of its clauses, we spell it out with [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    just to make sure you see this conversion from an abbreviation to long hand in
    this context:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; a Polygon is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Posn](part_one.html#%28tech._posn%29)  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Posn](part_one.html#%28tech._posn%29)  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Posn](part_one.html#%28tech._posn%29)  ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Posn](part_one.html#%28tech._posn%29)  [Polygon](#%28tech._polygon%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The point is that a naively chosen data representation—<wbr>plain lists of [Posn](part_one.html#%28tech._posn%29)s—<wbr>may
    not properly represent the intended information. Revising the data definition
    during an initial exploration is normal; indeed, on occasion such revisions become
    necessary during the rest of the design process. As long as you stick to a systematic
    approach, though, changes to the data definition can naturally be propagated through
    the rest of the design.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second step calls for the signature, purpose statement, and header of the
    function. Since the problem statement mentions just one task and no other task
    is implied, we start with one function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; a plain background image |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) MT ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 50 50))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Image](part_one.html#%28tech._image%29)  [Polygon](#%28tech._polygon%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders the given polygon p into img |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render-poly img p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   img) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The additional definition of MT is called for, because it simplifies the formulation
    of examples.For the first example, we use the above-mentioned triangle. A quick
    look in the 2htdp/image library suggests [scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    is the function needed to render the three lines for a triangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (render-poly MT triangle-p) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29) MT 20 0 10 10 "red")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       10 10 30 10 "red") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     30 10 20 0 "red")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The innermostOf course, we experimented in DrRacket’s interaction area to get
    this expression right. [scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    renders the line from the first to the second [Posn](part_one.html#%28tech._posn%29);
    the middle one uses the second and third [Posn](part_one.html#%28tech._posn%29);
    and the outermost [scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    connects the third and the first [Posn](part_one.html#%28tech._posn%29).Given
    that the first and smallest polygon is a triangle, a rectangle or a square suggests
    itself as the second example. We use square-p:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (render-poly MT square-p) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29) MT 10 10 20 10 "red")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         20 10 20 20 "red") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       20 20 10 20 "red") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     10 20 10 10 "red")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'A square is just one more point than a triangle, and it is easy render. You
    may also wish to draw these shapes on a piece of graph paper.The construction
    of the template poses a challenge. Specifically, the first and the second question
    of [figure 48](#%28counter._%28figure._fig~3atemplate-q%29%29) ask whether the
    data definition differentiates distinct subsets and how to distinguish among them.
    While the data definition clearly sets apart triangles from all other polygons
    in the first clause, it is not immediately clear how to differentiate the two.
    Both clauses describe lists of [Posn](part_one.html#%28tech._posn%29)s. The first
    describes lists of three [Posn](part_one.html#%28tech._posn%29)s, the second one
    describes lists of [Posn](part_one.html#%28tech._posn%29)s that have at least
    four items. Thus one alternative is to ask whether the given polygon is three
    items long:'
  prefs: []
  type: TYPE_NORMAL
- en: ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._length%29%29) p) 3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using the long-hand version of the first clause, that is,
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) [Posn](part_one.html#%28tech._posn%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) [Posn](part_one.html#%28tech._posn%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) [Posn](part_one.html#%28tech._posn%29) '())))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'suggests a second way to formulate the first condition, namely, checking whether
    the given [Polygon](#%28tech._polygon%29) is empty after using three [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: ([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p))))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since all [Polygon](#%28tech._polygon%29)s consist of at least three [Posn](part_one.html#%28tech._posn%29)s,
    using [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    three times is legal. Unlike [length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._length%29%29),
    [rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)
    is a primitive, easy-to-understand operation with a clear operational meaning.
    It selects the second field in a [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    structure and that is all it does.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is truly better to formulate conditions in terms of built-in predicates
    and selectors than your own (recursive) functions. See [Intermezzo: The Cost of
    Computation](part_five.html#%28part._i5-6%29) for an explanation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the questions in [figure 48](#%28counter._%28figure._fig~3atemplate-q%29%29)
    have direct answers, and thus we get this template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render-poly img p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) img [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([third](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._third%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (render-poly img ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Because p describes a triangle in the first clause, it must consist of exactly
    three [Posn](part_one.html#%28tech._posn%29)s, which are extracted via [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29),
    [second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29),
    and [third](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._third%29%29).
    In the second clause, p consists of a [Posn](part_one.html#%28tech._posn%29) and
    a Polygon, justifying ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  p)
    and ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p).
    The former extracts a [Posn](part_one.html#%28tech._posn%29) from p, the latter
    a Polygon. We therefore add a self-referential function call around it; we must
    also keep in mind that dealing with ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  p)
    in this clause and the three [Posn](part_one.html#%28tech._posn%29)s in the first
    clause may demand the design of an auxiliary function.Now we are ready to focus
    on the function definition, dealing with one clause at a time. The first clause
    concerns triangles, which suggests a straightforward answer. Specifically, there
    are three [Posn](part_one.html#%28tech._posn%29)s and render-poly should connect
    the three in an empty scene of 50 by 50 pixels. Given [Posn](part_one.html#%28tech._posn%29)
    is a separate data definition, we get an obvious wish list entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Image](part_one.html#%28tech._image%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; draws a red line from [Posn](part_one.html#%28tech._posn%29)  p to [Posn](part_one.html#%28tech._posn%29)  q
    into im |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render-line im p q)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   im) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Using this function, the first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause in render-poly is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (render-line |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (render-line |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (render-line MT ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p) ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29) p))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29) p) ([third](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._third%29%29) p))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([third](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._third%29%29) p) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This expression obviously renders the given [Polygon](#%28tech._polygon%29)
    p as a triangle by drawing a line from the first to the second, the second to
    the third, and the third to the first [Posn](part_one.html#%28tech._posn%29).The
    second [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause is about [Polygon](#%28tech._polygon%29)s that have been extended with
    one [Posn](part_one.html#%28tech._posn%29). In the template, we find two expressions
    and, following [figure 49](#%28counter._%28figure._fig~3adefinition-q%29%29),
    we remind ourselves of what these expressions compute:'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  p)
    extracts the first [Posn](part_one.html#%28tech._posn%29);
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p)
    extracts the [Polygon](#%28tech._polygon%29) from p; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (render-polygon  img  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p))
    renders ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p),
    which is what the purpose statement of the function says.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The question is how to use these pieces to render the given [Polygon](#%28tech._polygon%29)
    p.One idea that may come to mind is that ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p)
    consists of at least three [Posn](part_one.html#%28tech._posn%29)s. It is therefore
    possible to extract at least one [Posn](part_one.html#%28tech._posn%29) from this
    embedded Polygon and to connect ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  p)
    with this additional point. Here is what this idea looks like with BSL+ code:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (render-line (render-poly MT ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p)) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29) p))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As mentioned, the highlighted sub-expression renders the embedded [Polygon](#%28tech._polygon%29)
    in an empty 50 by 50 scene. The use of render-line adds one line to this scene,
    from the first to the second [Posn](part_one.html#%28tech._posn%29) of p.Our analysis
    suggests a rather natural, complete function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render-poly img p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (render-line |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        (render-line |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (render-line MT ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p) ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29) p))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29) p) ([third](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._third%29%29) p))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([third](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._third%29%29) p) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (render-line (render-poly img ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29) p))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Designing render-line is the kind of problem that you solved in the first part
    of the book. Hence we just provide the final definition, so that you can test
    the above function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Image](part_one.html#%28tech._image%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders a line from p to q into img |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render-line img p q)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     img |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) p) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) q) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) q)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     "red")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Develop a test for render-line.
  prefs: []
  type: TYPE_NORMAL
- en: Sixth and last, we must test the functions. The tests for render-poly fail.
    On one hand, the test failure is fortunate because it is the purpose of tests
    to find problems before they affect regular consumers. On the other hand, the
    flaw is unfortunate because we followed the design recipe; we made fairly natural
    choices; and yet the function doesn’t work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop! Why do you think they fail? Draw an image of the pieces in the template
    of render-poly. Then draw the line that combines them. Alternatively, experiment
    in DrRacket’s interaction area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (render-poly MT square-p) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/ba50272d24a82ebdd7ccd76554b14da3.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The image shows that render-polygon connects the three dots of ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p)
    and then connects ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  p)
    to the first point of ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p),
    that is, ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29)  p).
    You can easily validate this claim with an interaction that uses ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  square-p)
    directly as input for render-poly:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (render-poly MT ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) square-p))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/9f0bed7f39f678c0bd0b9e492ddd2a49.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In addition, you may wonder what render-poly would draw if we added another
    point, say, ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29)  40  30),
    to the original square:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > (render-poly &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     MT &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 40 30) square-p))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ![image](../Images/e02c50a331469fcf3d32f39917acfcc5.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Instead of the desired pentagon, render-polygon always draws the triangle at
    the end of the given [Polygon](#%28tech._polygon%29) and otherwise connects the
    [Posn](part_one.html#%28tech._posn%29)s that precede the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: While the experiments confirm the problems of our design, they also suggest
    that the function is “almost correct..” It connects the successive dots specified
    by a list of [Posn](part_one.html#%28tech._posn%29)s, and then it draws a line
    from the first to the last [Posn](part_one.html#%28tech._posn%29) of the trailing
    triangle. If it skipped this last step, the function would just “connect the dots”
    and thus draw an “open” polygon. By connecting the first and the last point, it
    could then complete its task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put differently, the analysis of our failure suggests a two-step solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Solve a more general problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the solution to this general problem to solve the original one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We start with the statement for the general problem:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a function that draws connections between a given bunch
    of dots and into a given scene.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Although the design of render-poly almost solves this problem, we design this
    function mostly from scratch. First, we need a data definition. Connecting the
    dots makes no sense unless we have at least one dot or two. To make things simple,
    we go with the first alternative:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A NELoP is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Posn](part_one.html#%28tech._posn%29)  ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Posn](part_one.html#%28tech._posn%29)  [NELoP](#%28tech._nelop%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Second, we formulate a signature, a purpose statement, and a header for a “connect
    the dots” function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Image](part_one.html#%28tech._image%29)  [NELoP](#%28tech._nelop%29) ->
    [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; connects the dots in p by rendering lines in img |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (connect-dots img p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   MT) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Third, we adapt the examples for render-poly for this new function. As our
    failure analysis says, the function connects the first [Posn](part_one.html#%28tech._posn%29)
    on p to the second one, the second one to the third, the third to the fourth,
    and so on, all the way to the last one, which isn’t connected to anything. Here
    is the adaptation of the first example, a list of three [Posn](part_one.html#%28tech._posn%29)s:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (connect-dots MT triangle-p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29) MT 20 0 10 10 "red")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                10 10 30 10 "red")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The expected value is an image with two lines: one from the first [Posn](part_one.html#%28tech._posn%29)
    to the second one, and another one from the second to the third [Posn](part_one.html#%28tech._posn%29).'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 191\. Adapt the second example for the render-poly function to connect-dots.
    [![image](../Images/5724a696e9b1bc13af80d4ef9cfa3fb1.jpg)](#%28counter._%28exercise._connect-dots-ex%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Fourth, we use the template for functions the process non-empty lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (connect-dots img p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p)) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (connect-dots img ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The template has two clauses: one for lists of one [Posn](part_one.html#%28tech._posn%29)
    and the second one for lists with more than one. Since there is at least one [Posn](part_one.html#%28tech._posn%29)
    in both cases, the template contains ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  p)
    in both clauses; the second one also contains (connects-dots  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p))
    to remind us of the self-reference in the second clause of the data definition.The
    fifth and central step is to turn the template into a function definition. Since
    the first clause is the simplest one, we start with it. As we have already said,
    it is impossible to connect anything when the given list contains only one [Posn](part_one.html#%28tech._posn%29).
    Hence, the function just returns MT from the first [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause. For the second [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    clause, let us remind ourselves of what the template expressions compute:'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  p)
    extracts the first [Posn](part_one.html#%28tech._posn%29);
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p)
    extracts the [NELoP](#%28tech._nelop%29) from p; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (connect-dots  img  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p))
    connects the dots in ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p)
    by rendering lines in img.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From our first attempt to design render-poly, we know connect-dots needs to
    add one line to the result of (connect-dots  img  ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29)  p)),
    namely, from ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  p)
    to ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29)  p).
    We know that p contains a second [Posn](part_one.html#%28tech._posn%29), because
    otherwise the evaluation of [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    would have picked the first clause.Putting everything together, we get the following
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (connect-dots img p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p)) img]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (render-line |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        (connect-dots img ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29) p))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This definition looks simpler than the faulty version of render-poly, even though
    it copes with two more lists of [Posn](part_one.html#%28tech._posn%29)s than render-poly.This
    argument is informal. If you ever need a formal argument for such claims about
    the relationship between sets or functions, you will need to study logic. Indeed,
    this book’s design process is deeply informed by logic, and a course on logic
    in computation is a natural complement. In general, logic is to computing what
    analysis is to engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, we say that connect-dots generalizes render-poly. Every input for
    the latter is also an input for the former. Or in terms of data definitions, every
    [Polygon](#%28tech._polygon%29) is also a [NELoP](#%28tech._nelop%29). But, there
    are many [NELoP](#%28tech._nelop%29)s that are not [Polygon](#%28tech._polygon%29)s.
    To be precise, all lists of [Posn](part_one.html#%28tech._posn%29)s that contain
    two items or one belong to [NELoP](#%28tech._nelop%29) but not to [Polygon](#%28tech._polygon%29).
    The key insight for you is, however, that just because a function has to deal
    with more inputs than another function does not mean that the former is more complex
    than the latter; generalizations often simplify function definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'As spelled out above, render-polygon can use connect-dots to connect all successive
    [Posn](part_one.html#%28tech._posn%29)s of the given [Polygon](#%28tech._polygon%29);
    to complete its task, it must then add a line from the first to the last [Posn](part_one.html#%28tech._posn%29)
    of the given [Polygon](#%28tech._polygon%29). In terms of code, this just means
    composing two functions: connect-dots and render-line, but we also need a function
    to extract the last [Posn](part_one.html#%28tech._posn%29) from the [Polygon](#%28tech._polygon%29).
    Once we are granted this wish, the definition of render-poly is a one-liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Image](part_one.html#%28tech._image%29)  [Polygon](#%28tech._polygon%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds an image of p to img |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render-polygon img p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (render-line (connect-dots img p) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                (last p))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Formulating the wish list entry for last is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Polygon](#%28tech._polygon%29) -> [Posn](part_one.html#%28tech._posn%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts the last item from p |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Then again, it is clear that last could be a generally useful function and
    we might be better off designing it for inputs from [NELoP](#%28tech._nelop%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [NELoP](#%28tech._nelop%29) -> [Posn](part_one.html#%28tech._posn%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts the last item from p |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (last p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Why is it acceptable to use [first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)
    for the stub definition of last?Exercise 192\. Argue why it is acceptable to use
    last on [Polygon](#%28tech._polygon%29)s. Also argue why you may adapt the template
    for connect-dots to last:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (last p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p)) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (last ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Finally, develop examples for last, turn them into tests, and ensure that the
    definition of last in [figure 69](#%28counter._%28figure._fig~3adraw-poly%29%29)
    works on your examples. [![image](../Images/73f26d64f0f22aadc343d77ad9a63264.jpg)](#%28counter._%28exercise._render-poly-last%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Image](part_one.html#%28tech._image%29)  [Polygon](#%28tech._polygon%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds an image of p to MT |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render-polygon img p)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (render-line (connect-dots img p) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p) (last p)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Image](part_one.html#%28tech._image%29)  [NELoP](#%28tech._nelop%29) ->
    [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; connects the [Posn](part_one.html#%28tech._posn%29)s in p in an image |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (connect-dots img p)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p)) MT]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) (render-line (connect-dots img ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                        ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) p)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                        ([second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29) p))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Image](part_one.html#%28tech._image%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; draws a red line from [Posn](part_one.html#%28tech._posn%29)  p to [Posn](part_one.html#%28tech._posn%29)  q
    into im |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render-line im p q)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     im ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) p) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) q) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) q) "red"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Polygon](#%28tech._polygon%29) -> [Posn](part_one.html#%28tech._posn%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts the last item from p |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (last p)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p)))) ([third](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._third%29%29) p)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) (last ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) p))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 69: Drawing a polygon'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In summary, the development of render-poly naturally points us to consider the
    general problem of connecting a list of successive dots. We can then solve the
    original problem by defining a function that composes the general function with
    other auxiliary functions. The program therefore consists of a relatively straightforward
    main function—<wbr>render-poly—<wbr>and complex auxiliary functions that perform
    most of the work. You will see time and again that this kind of design approach
    is common and a good method for designing and organizing programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 193\. Here are two more ideas for defining render-poly:'
  prefs: []
  type: TYPE_NORMAL
- en: render-poly could [cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)
    the last item of p onto p and then call connect-dots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: render-poly could add the first item of p to the end of p via a version of add-at-end
    that works on [Polygon](#%28tech._polygon%29)s.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use both ideas to define render-poly; make sure both definitions pass the test
    cases. [![image](../Images/3c117b32b1ff93f0aa8bf3e0c8d4efd5.jpg)](#%28counter._%28exercise._ex~3adraw-poly0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 194\. Modify connect-dots so that it consumes an additional [Posn](part_one.html#%28tech._posn%29)
    to which the last [Posn](part_one.html#%28tech._posn%29) is connected. Then modify
    render-poly to use this new version of connect-dots. [![image](../Images/7491825792306a7965c06a66826ad91f.jpg)](#%28counter._%28exercise._ex~3adraw-poly1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Naturally, functions such as last are available in a full-fledged programming
    language, and something like render-poly is available in the 2htdp/image library.
    If you are wondering why we just designed these functions, consider the title
    of the book and this section. The goal is not (just) to design useful functions
    but to study how code is designed systematically. Specifically, this section is
    about the idea of generalization in the design process; for more on this idea
    see [Abstraction](part_three.html) and [Accumulators](part_six.html).
  prefs: []
  type: TYPE_NORMAL
- en: '12Projects: Lists'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This chapter presents several extended exercises, all of which aim to solidify
    your understanding of the elements of design: the design of batch'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter relies on the 2htp/batch-io library.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and interactive programs, design by composition, design wish lists, and the
    design recipe for functions. The first section covers problems involving real-world
    data: English dictionaries and iTunes libraries. A word-games problem requires
    two sections: one to illustrate design by composition, the other to tackle the
    heart of the problem. The remaining sections are about games and finite-state
    machines.'
  prefs: []
  type: TYPE_NORMAL
- en: '12.1Real-world Data: Dictionaries'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Information in the real world tends to come in large quantities, which is why
    it makes so much sense to use programs for processing it. For example, a dictionary
    does not just contain a dozen words, but hundreds of thousands. When you want
    to process such large pieces of information, you must carefully design the program
    using small examples. Once youFor performance concerns, see [Generative Recursion](part_five.html).
    From here to there, the focus is on designing programs systematically so that
    you can then explore performance problems properly. have convinced yourself that
    the programs work properly, you run them on the real-world data to get real results.
    If the program is too slow to process this large quantity of data, reflect on
    each function and how it works. Question whether you can eliminate any redundant
    computations.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; On OS X: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) DICTIONARY-LOCATION "/usr/share/dict/words")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; On LINUX: /usr/share/dict/words or /var/lib/dict/words |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; On WINDOWS: borrow the word file from your Linux friend |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Dictionary is a [List-of-strings](#%28tech._list._of._string%29). |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) DICTIONARY-AS-LIST ([read-lines](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-lines%29%29) DICTIONARY-LOCATION))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 70: Reading a dictionary'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 70](#%28counter._%28figure._fig~3areading-a-dictionary%29%29) displays
    the one line of code needed to read in an entire dictionary of the English language.
    To get an idea of how large such dictionaries are, adapt the code from the figure
    for your particular computer and use [length](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._length%29%29)
    to determine how many words are in your dictionary. There are 235,886 words in
    ours today, 8 August 2015.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following exercises, letters play an important role. You may wish to
    add the following to the top of your program in addition to your adaptation of
    [figure 70](#%28counter._%28figure._fig~3areading-a-dictionary%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Letter is one of the following [1String](part_one.html#%28tech._1string%29)s:
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "a" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "z" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; or, equivalently, a [member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29)
    of this list: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) LETTERS
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([explode](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._explode%29%29) "abcdefghijklmnopqrstuvwxyz"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Hint Use [list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)
    to formulate examples and tests for the exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 195\. Design the function starts-with#, which consumes a [Letter](#%28tech._letter%29)
    and [Dictionary](#%28tech._dictionary%29) and then counts how many words in the
    given [Dictionary](#%28tech._dictionary%29) start with the given [Letter](#%28tech._letter%29).
    Once you know that your function works, determine how many words start with "e"
    in your computer’s dictionary and how many with "z". [![image](../Images/c56dc56e16b66f736ea957e0dc6abef4.jpg)](#%28counter._%28exercise._ex~3adictionary1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 196\. Design count-by-letter. The function consumes a [Dictionary](#%28tech._dictionary%29)
    and counts how often each letter is used as the first one of a word in the given
    dictionary. Its result is a list of Letter-Counts, a piece of data that combines
    letters and counts.
  prefs: []
  type: TYPE_NORMAL
- en: Once your function is designed, determine how many words appear for all letters
    in your computer’s dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Note on Design Choices You can design this function using the design recipe
    you know.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative is to design an auxiliary function that consumes a list of letters
    and a dictionary and produces a list of [Letter-Count](#%28tech._letter._count%29)s
    that report how often the given letters occur as first ones in the dictionary.
    You may of course re-use your solution of [exercise 195](#%28counter._%28exercise._ex~3adictionary1%29%29).
    Hint If you design this variant, notice that the function consumes two lists,
    requiring a design problem that is covered in [Simultaneous Processing](part_four.html#%28part._ch~3asimu%29)
    in detail. Think of [Dictionary](#%28tech._dictionary%29) as an atomic piece of
    data that is along for the ride and is handed over to starts-with# as needed.
    [![image](../Images/0bc05062b8b5d4f3dc80315841b5d56f.jpg)](#%28counter._%28exercise._ex~3adictionary2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 197\. Design most-frequent. The function consumes a [Dictionary](#%28tech._dictionary%29).
    It produces the [Letter-Count](#%28tech._letter._count%29) for the letter that
    is occurs most often as the first one in the given [Dictionary](#%28tech._dictionary%29).
  prefs: []
  type: TYPE_NORMAL
- en: What is the most frequently used letter in your computer’s dictionary and how
    often is it used?
  prefs: []
  type: TYPE_NORMAL
- en: 'Note on Design Choices This exercise calls for the composition of the solution
    to the preceding exercise with a function that picks the correct pairing from
    a list of [Letter-Count](#%28tech._letter._count%29)s. There are two ways to design
    this latter function:'
  prefs: []
  type: TYPE_NORMAL
- en: Design a function that picks the pair with the maximum count.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design a function that selects the first from a sorted list of pairs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider designing both. Which one do you prefer? Why? [![image](../Images/ea79fda6f5a50b165eb621ee5824fff1.jpg)](#%28counter._%28exercise._ex~3adictionary3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 198\. Design words-by-first-letter. The function consumes a [Dictionary](#%28tech._dictionary%29)
    and produces a list of [Dictionary](#%28tech._dictionary%29)s, one per [Letter](#%28tech._letter%29).
  prefs: []
  type: TYPE_NORMAL
- en: 'Re-design most-frequent from [exercise 197](#%28counter._%28exercise._ex~3adictionary3%29%29)
    using this new function. Call the new function most-frequent.v2. Once you have
    completed the design, ensure that the two functions compute the same result on
    your computer’s dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (most-frequent DICTIONARY-AS-LIST) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (most-frequent.v2 DICTIONARY-AS-LIST)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note on Design Choices For words-by-first-letter you have a choice for dealing
    with the situation when the given dictionary does not contain any words for some
    letter:'
  prefs: []
  type: TYPE_NORMAL
- en: One alternative is to exclude the resulting empty dictionaries from the overall
    result. Doing so simplifies both the testing of the function and the design of
    most-frequent.v2, but it also requires the design of an auxiliary function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other one is to include '() as the result of looking for words of a certain
    letter, even if there aren’t any. This alternative avoids the auxiliary function
    needed for the first alternative but adds complexity to the design of most-frequent.v2.
    End
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note on Intermediate Data and Deforestation This second version of the word-counting
    function computes the desired result via the creation of a large intermediate
    data structure that serves no real purpose other than that its parts are counted.
    On occasion, the programming language eliminates them automatically by fusing
    the two functions into one, a transformation on programs that is also called deforestation.
    When you know that the language does not deforest programs, consider eliminating
    such data structures if the program does not process data fast enough. [![image](../Images/0c7bd1405ec96c01f35de6b3f2155a44.jpg)](#%28counter._%28exercise._ex~3adictionary4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '12.2Real-world Data: iTunes'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Apple’s iTunes software is widely used to collect music, videos, tv shows, and
    so on. You may wish to analyze the information that your iTunes application gathers.
    It is actually quite easy to extract its database. Select the application’s File
    menu, choose Library and then Export—<wbr>and voilà you can export a so-called
    XML representation of the iTunes information. Processing XML is covered in some
    depth by [The Commerce of XML](part_four.html#%28part._ch~3amoney-sexp%29); here
    we rely on the 2htdp/itunes library to get hold of the information. Specifically,
    the library enables you to retrieve the music tracks that your iTunes library
    contains.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the details vary, an iTunes library maintains some of the following kind
    of information for each music track:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Track ID, a unique identifier for the track with respect to your library, example:
    442'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name, the title of the track, Wild Child
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artist, the producing artists, Enya
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Album, the title of the album to which it belongs, A Day Without Rain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Genre, the music genre to which the track is assigned, New Age
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kind, the encoding of the music, MPEG audio file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Size, the size of the file, 4562044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total Time, the length of the track in milliseconds, 227996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track Number, the position of the track within the album, 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track Count, the number of tracks on the album, 11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Year, the year of release, 2000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date Added, when the track was added, 2002-7-17 3:55:14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play Count, how many times it was played, 20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play Date, when the track was last played, 3388484113 Unix seconds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play Date UTC, when it was last played, 2011-5-17 17:35:13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some tracks may come with less information, some with more.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the 2htp/batch-io library, this section relies on the 2htdp/itunes
    library.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As always, the first task is to choose a BSL data representation for this information.
    In this section, we use two representations for music tracks: a structure-based
    one and another based on lists. While the former records a fixed number of attributes
    per track and only if all information is available, the latter comes with whatever
    information is available represented as data. Each serves particular uses well;
    for some uses, both representations are useful.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; the 2htdp/itunes library documentation, part 1: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An LTracks is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Track](#%28tech._itunes-data._track%29)  [LTracks](#%28tech._itunes-data._ltrack%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) track
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   [name artist album time track# added play# played]) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Track is a structure: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-track  [String](part_one.html#%28tech._string%29)  [String](part_one.html#%28tech._string%29)  [String](part_one.html#%28tech._string%29)  [N](#%28tech._n%29)  [N](#%28tech._n%29)  [Date](#%28tech._itunes-data._date%29)  [N](#%28tech._n%29)  [Date](#%28tech._itunes-data._date%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation An instance records in order: the track''s |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; title, its producing artist, to which album it belongs, |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; its playing time in milliseconds, its position with the |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; album, the date it was added, how often it has been |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; played, and the date when it was last played |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) date [year month day hour minute [second](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._second%29%29)])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Date is a structure: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-date  [N](#%28tech._n%29)  [N](#%28tech._n%29)  [N](#%28tech._n%29)  [N](#%28tech._n%29)  [N](#%28tech._n%29)  [N](#%28tech._n%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation An instance records six pieces of information: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; the date''s year, month (between 1 and 12 inclusive), |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; day (between 1 and 31), hour (between 0 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; and 23), minute (between 0 and 59), and |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; second (also between 0 and 59). |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 71: Representing iTunes tracks as structures (the structures)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ; [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)
    -> [Track](#%28tech._itunes-data._track%29) or #false |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates an instance of [Track](#%28tech._itunes-data._track%29) for legitimate
    inputs |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; otherwise it produces #false. |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (create-track name artist album time
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                       track# added play# played) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)  [Any](part_one.html#%28tech._any%29)
    -> [Date](#%28tech._itunes-data._date%29) or #false |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates an instance of [Date](#%28tech._itunes-data._date%29) for legitimate
    inputs |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; otherwise it produces #false. |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (create-date y mo day h m s)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [String](part_one.html#%28tech._string%29) -> [LTracks](#%28tech._itunes-data._ltrack%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a “list of tracks” representation from the |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; text in file-name (an XML export from iTunes) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (read-itunes-as-tracks file-name)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 72: Representing iTunes tracks as structures (the functions)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 71](#%28counter._itunes-data._%28figure._fig~3aitunes-api-tracks%29%29)
    introduces the structure-based representation of tracks as implemented by the
    2htdp/itunes library. The track structure type comes with eight fields, each representing
    a particular property of the track. Most fields contain atomic kinds of data,
    such as [String](part_one.html#%28tech._string%29)s and [N](#%28tech._n%29)s;
    others contain [Date](#%28tech._itunes-data._date%29)s, which is a structure type
    with six fields. The 2htdp/itunes library exports all predicates and selectors
    for the track and date structure types, but in lieu of constructors it provides
    checked constructors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last element of the description of the 2htdp/itunes library is a function
    that reads an iTunes XML library description and delivers a list of tracks, [LTracks](#%28tech._itunes-data._ltrack%29).
    Once you have exported the XML library from some iTunes app, you can run the following
    code snippet to retrieve all the records:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; modify the following to use your chosen name |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ITUNES-LOCATION "itunes.xml")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [LTracks](#%28tech._itunes-data._ltrack%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) itunes-tracks
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (read-itunes-as-tracks ITUNES-LOCATION)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Save the snippet in the same folder as your iTunes XML export. Remember not
    to use itunes-tracks for examples; it is way too large for that. Indeed, it may
    be so large that reading the file every time you run your BSL program in DrRacket
    will take a lot of time. You may therefore wish to comment out this second line
    while you design functions. Uncomment it only when you wish to compute information
    about your iTunes collection.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 199\. While the important data definitions are already provided, the
    first step of the design recipe is still incomplete. Make up examples of [Date](#%28tech._itunes-data._date%29)s,
    [Track](#%28tech._itunes-data._track%29)s, and [LTracks](#%28tech._itunes-data._ltrack%29).
    These examples come in handy for the following exercises as inputs. [![image](../Images/1dd58660867b0b712628d9807da35fc3.jpg)](#%28counter._itunes-data._%28exercise._ex~3aitunes1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 200\. Design the function total-time, which consumes an element of
    [LTracks](#%28tech._itunes-data._ltrack%29) and produces the total amount of play
    time. Once the program is done, compute the total play time of your iTunes collection.
    [![image](../Images/036d53ee86d84c9800a1379d0ebaf8f8.jpg)](#%28counter._itunes-data._%28exercise._ex~3aitunes2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 201\. Design select-all-album-titles. The function consumes an [LTracks](#%28tech._itunes-data._ltrack%29)
    and produces the list of album titles as a [List-of-strings](#%28tech._list._of._string%29).
  prefs: []
  type: TYPE_NORMAL
- en: Also design the function create-set. It consumes a [List-of-strings](#%28tech._list._of._string%29)
    and constructs one that contains every [String](part_one.html#%28tech._string%29)
    from the given list exactly once. Hint If [String](part_one.html#%28tech._string%29)
    s is at the front of the given list and occurs in the rest of the list, too, create-set
    does not keep s.
  prefs: []
  type: TYPE_NORMAL
- en: Finally design select-album-titles/unique, which consumes an [LTracks](#%28tech._itunes-data._ltrack%29)
    and produces a list of unique album titles. Use this function to determine all
    album titles in your iTunes collection and also find out how many distinct albums
    it contains. [![image](../Images/7ddac222daade9c9d31258211e8484be.jpg)](#%28counter._itunes-data._%28exercise._ex~3aitunes3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 202\. Design select-album. The function consumes the title of an album
    and an [LTracks](#%28tech._itunes-data._ltrack%29). It extracts from the latter
    the list of tracks that belong to the given album. [![image](../Images/5790693f812293e91423e5c48df7c5c2.jpg)](#%28counter._itunes-data._%28exercise._ex~3aitunes4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 203\. Design select-album-date. The function consumes the title of
    an album, a date, and an [LTracks](#%28tech._itunes-data._ltrack%29). It extracts
    from the latter the list of tracks that belong to the given album and have been
    played after the given date. Hint You must design a function that consumes two
    [Date](#%28tech._itunes-data._date%29)s and determines whether the first occurs
    before the second. [![image](../Images/ca44fb1f006db1c7cf95baaa30e15720.jpg)](#%28counter._itunes-data._%28exercise._ex~3aitunes5%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 204\. Design select-albums. The function consumes an element of [LTracks](#%28tech._itunes-data._ltrack%29).
    It produce a list of LTracks, one per album. Each album is uniquely identified
    by its title and shows up in the result only once. Hints (1) You want to use some
    of the solutions of the preceding exercises. (2) The function that groups consumes
    two lists: the list of album titles and the list of tracks; it considers the latter
    as atomic until it is handed over to an auxiliary function. See [exercise 196](#%28counter._%28exercise._ex~3adictionary2%29%29).
    [![image](../Images/7bb7e24cd549683cb79c6da69b4b3dd0.jpg)](#%28counter._itunes-data._%28exercise._ex~3aitunes6%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Terminology The functions whose names starts with select- are representative
    of so-called database queries. See [Project: Database](part_four.html#%28part._db._sec~3aproj-db%29)
    for more concepts from this world. End'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; the 2htdp/itunes library documentation, part 2: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An LLists is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [LAssoc](#%28tech._itunes-data._lassoc%29)  [LLists](#%28tech._itunes-data._llist%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An LAssoc is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Association](#%28tech._itunes-data._association%29)  [LAssoc](#%28tech._itunes-data._lassoc%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Association is a list of two items: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [String](part_one.html#%28tech._string%29)  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [BSDN](#%28tech._itunes-data._bsdn%29)  ''()))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A BSDN is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Date](#%28tech._itunes-data._date%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [String](part_one.html#%28tech._string%29) -> [LLists](#%28tech._itunes-data._llist%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a list of lists representation for all tracks in |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; file-name, which must be an XML export from iTunes |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (read-itunes-as-lists file-name)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 73: Representing iTunes tracks as lists'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 73](#%28counter._itunes-data._%28figure._fig~3aitunes-api-lists%29%29)
    shows how the 2htdp/itunes library represents tracks with lists. An [LLists](#%28tech._itunes-data._llist%29)
    is a list of track representations, each of which is a list of lists pairing [String](part_one.html#%28tech._string%29)s
    with four kinds of values. The read-itunes-as-lists function reads an iTunes XML
    library and produces an element of [LLists](#%28tech._itunes-data._llist%29).
    Hence, you get access to all tracks as lists if you add the following definitions
    to your program and save it in the same folder where the iTunes library is stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; modify the following to use your chosen name |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) ITUNES-LOCATION "itunes.xml")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [LLists](#%28tech._itunes-data._llist%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) list-tracks
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (read-itunes-as-lists ITUNES-LOCATION)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 205\. Develop examples of [LAssoc](#%28tech._itunes-data._lassoc%29)
    and [LLists](#%28tech._itunes-data._llist%29), that is, the list representation
    of tracks and lists of such tracks. [![image](../Images/a5dc0788a53be1267f48f61171458306.jpg)](#%28counter._itunes-data._%28exercise._ex~3aitunes10%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 206\. Design the function find-association. It consumes three arguments:
    a [String](part_one.html#%28tech._string%29) called key; an [LAssoc](#%28tech._itunes-data._lassoc%29);
    and an element of [Any](part_one.html#%28tech._any%29) called default. It produces
    the first [Association](#%28tech._itunes-data._association%29) whose first item
    is equal to key or default if there is no such Association.'
  prefs: []
  type: TYPE_NORMAL
- en: Note Read up on [assoc](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._assoc%29%29)
    after you have designed this function. [![image](../Images/7a70a513a37e9b8c5bd61db0f4ea1118.jpg)](#%28counter._itunes-data._%28exercise._ex~3aitunes11%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 207\. Design total-time/list, which consumes an [LLists](#%28tech._itunes-data._llist%29)
    and produces the total amount of play time. Hint Solve [exercise 206](#%28counter._itunes-data._%28exercise._ex~3aitunes11%29%29)
    first.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have completed the design, compute the total play time of your iTunes
    collection. Compare this result with the time that the total-time function from
    [exercise 200](#%28counter._itunes-data._%28exercise._ex~3aitunes2%29%29) computes.
    Why is there a difference? [![image](../Images/958f8c08d2c24764509466457c4d0428.jpg)](#%28counter._itunes-data._%28exercise._ex~3aitunes12%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 208\. Design boolean-attributes. The function consumes an [LLists](#%28tech._itunes-data._llist%29)
    and produces the [String](part_one.html#%28tech._string%29)s that are associated
    with a [Boolean](part_one.html#%28tech._boolean%29) attribute. Hint Use create-set
    from [exercise 201](#%28counter._itunes-data._%28exercise._ex~3aitunes3%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Once you are done, determine how many Boolean-valued attributes your iTunes
    library employs for its tracks. Do they make sense? [![image](../Images/e98f8fc9b38e7969d648204f682d5719.jpg)](#%28counter._itunes-data._%28exercise._ex~3aitunes13%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Note A list-based representation is a bit less organized than a structure-based
    one. The word semi-structured is occasionally used in this context. Such list-representations
    accommodate properties that show up rarely and thus don’t fit the structure type.
    People often use such representations to explore unknown information and later
    introduce structures when the format is well-known. Design a function track-as-struct,
    which converts an [LAssoc](#%28tech._itunes-data._lassoc%29) to a [Track](#%28tech._itunes-data._track%29)
    when possible. End
  prefs: []
  type: TYPE_NORMAL
- en: 12.3Word Games, Composition Illustrated
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you solve word puzzles in newspapers, you are working on this
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Given a word, find all words that are made up from some letters.
    For example “cat” also spells “act.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s work through an example. Suppose you are given “dear.” There are twenty-four
    possible arrangements of the four letters:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ader |  | aedr |  | aerd |  | adre |  | arde |  | ared |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| daer |  | eadr |  | eard |  | dare |  | rade |  | raed |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| dear |  | edar |  | erad |  | drae |  | rdae |  | read |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| dera |  | edra |  | erda |  | drea |  | rdea |  | reda |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In this list, there are three legitimate words: “read,” “dear,” and “dare.”'
  prefs: []
  type: TYPE_NORMAL
- en: Note If a word contains the same letter twice, the collection of all re-arrangements
    may contain several copies of the same string. For our purposes, this is acceptable.
    For a realistic program, you may wish to avoid duplicate entries by using of sets
    instead of lists. See [A Note on Lists and Sets](#%28part._sec~3alist-set%29).
    End
  prefs: []
  type: TYPE_NORMAL
- en: 'A systematic enumeration of all possible arrangements is clearly a task for
    a program as is the search in an English-language dictionary.See [Real-world Data:
    Dictionaries](#%28part._sec~3adict%29) for dealing with real-world dictionaries.
    This section covers the design of the search function, leaving the solution of
    the other problem to the next section. By separating the two, this first section
    can focus on the high-level ideas of systematic program design.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s imagine for a moment how we might solve the problem by hand. If you had
    enough time, you might enumerate all possible arrangements of all letters in a
    given word and then just pick those variants that also occur in a dictionary.
    Clearly, a program can proceed in this way too, and this suggests a natural design
    by composition but, as always, we proceed systematically and start by choosing
    a data representation for our inputs and outputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'At least at first glance, it is natural to represent words as [String](part_one.html#%28tech._string%29)s
    and the result as a list of words or [List-of-strings](#%28tech._list._of._string%29).
    Based on this choice, we can formulate a signature and purpose statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [String](part_one.html#%28tech._string%29) -> [List-of-strings](#%28tech._list._of._string%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; find all words that use the same letters as s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (alternative-words s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Next, we need some examples. If the given word is “cat,” we are dealing with
    three letters: c, a, and t. Some playing around suggests six arrangements of these
    letters: cat, cta, tca, tac, act, and atc. Two of these are actual words: “cat”
    and “act.” Because alternative-words produces a list of [String](part_one.html#%28tech._string%29)s,
    there are two ways to represent the result: ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "act"  "cat")
    and ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "cat"  "act").
    Fortunately, BSL comes with a way to say the function returns one of two possible
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-member-of](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-member-of%29%29) (alternative-words "cat")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "act" "cat")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "cat" "act"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Read up on [check-member-of](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-member-of%29%29)
    in the documentation.Working through this example exposes two problems:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first one is about testing. Suppose we had used the word “rat” for which
    there are three alternatives: “rat,” “tar,” and “art.” In this case, we would
    have to formulate six lists, each of which might be the result of the function.
    For a word like “dear” with four possible alternatives, formulating a test would
    be even harder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second problem concerns the choice of word representation. Although [String](part_one.html#%28tech._string%29)
    looks natural at first, the examples clarify that some of our functions must view
    words as sequences of letters, with the possibility of re-arranging them at will.
    It is possible to rearrange the letters within a [String](part_one.html#%28tech._string%29),
    but lists of letters are obviously better suited for this purpose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s deal with these problems one at a time, starting with tests.
  prefs: []
  type: TYPE_NORMAL
- en: Assume we wish to formulate a test for alternative-words and "rat". From the
    above, we know that the result must contain "rat", "tar", and "art", but we cannot
    know in which order these words show up in the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this situation, [check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29)
    comes in handy.See [Intermezzo: BSL](part_one.html#%28part._i1-2%29). We can use
    it with a function that checks whether a list of [String](part_one.html#%28tech._string%29)s
    contains our three [String](part_one.html#%28tech._string%29)s:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-strings](#%28tech._list._of._string%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (all-words-from-rat? w)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29) "rat" w)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29) "art" w)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29) "tar" w)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'With this function, it is easy to formulate a test for alternative-words:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29) (alternative-words "rat")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  all-words-from-rat?) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Note on Data versus Design What this discussion suggests, is that the alternative-words
    function constructs a set, not a list. For a detailed discussion of the differences,
    see [A Note on Lists and Sets](#%28part._sec~3alist-set%29). Here it suffices
    to know that sets represents collections of values without regard to the ordering
    of the values or how often these values occur. When a language comes without support
    for data representations of sets, programmers tend to resort to a close alternative,
    such as the List-of-strings representation here. As programs grow, this choice
    may haunt programmers but addressing this kind of problem is subject of the second
    book. End
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [String](part_one.html#%28tech._string%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (all-words-from-rat? w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29) "rat" w) ([member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29) "art" w) ([member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29) "tar" w)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [String](part_one.html#%28tech._string%29) -> [List-of-strings](#%28tech._list._of._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; find all words that the letters of some given word spell |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-member-of](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-member-of%29%29) (alternative-words "cat")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "act" "cat")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "cat" "act"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29) (alternative-words "rat")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  all-words-from-rat?) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (alternative-words s)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (in-dictionary |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (words->strings (arrangements (string->word s))))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [List-of-words](#%28tech._list._of._word%29) -> [List-of-strings](#%28tech._list._of._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; turn all [Word](#%28tech._word%29)s in low into [String](part_one.html#%28tech._string%29)s
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (words->strings low) ''())
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [List-of-strings](#%28tech._list._of._string%29) -> [List-of-strings](#%28tech._list._of._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; pick out all those [String](part_one.html#%28tech._string%29)s that occur
    in the dictionary |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (in-dictionary los) ''())
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 74: Finding alternative words'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For the problem with a word representation, we punt to the next section. Specifically,
    we say that the next section introduces (1) a data representation for [Word](#%28tech._word%29)s
    suitable for re-arranging letters, (2) a data definition for [List-of-words](#%28tech._list._of._word%29)
    and (3) a function that maps a [Word](#%28tech._word%29) to a [List-of-words](#%28tech._list._of._word%29),
    meaning a list of all possible re-arrangements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Word is ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A List-of-words is ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Word](#%28tech._word%29) -> [List-of-words](#%28tech._list._of._word%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; find all re-arrangements of word |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (arrangements word)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) word))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Exercise 209\. The above leaves us with two additional “wishes:” a function
    that consumes a [String](part_one.html#%28tech._string%29) and produces its corresponding
    [Word](#%28tech._word%29) and a function for the opposite direction. Here are
    the wish-list entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [String](part_one.html#%28tech._string%29) -> [Word](#%28tech._word%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; convert s to the chosen word representation |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (string->word s) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Word](#%28tech._word%29) -> [String](part_one.html#%28tech._string%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; convert w to a string |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (word->string w) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Look up the data definition for [Word](#%28tech._word%29) in the next section
    and complete the definitions of string->word and word->string. Hint You may wish
    to look in the list of functions that BSL provides. [![image](../Images/f8dc2aa30187359f1c0b82b83f1f7ee2.jpg)](#%28counter._%28exercise._ex~3astring2word%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'With those two small problems out of the way, we return to the design of alternative-words.
    We now have: (1) a signature, (2) a purpose statement, (3) examples and test,
    (4) an insight concerning our choice of data representation, and (5) an idea of
    how to decompose the problem into two major steps.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, instead of creating a template, we write down the composition we have in
    mind:'
  prefs: []
  type: TYPE_NORMAL
- en: (in-dictionary (arrangements s))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The expression says that, given a word s, we use arrangements to create a list
    of all possible re-arrangements of the letters and in-dictionary to select those
    re-arrangements that also occur in a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Look up the signatures for the two functions to make sure the composition
    works out. What exactly do you need to check?
  prefs: []
  type: TYPE_NORMAL
- en: 'What this expression fails to capture is the fourth point, the decision not
    to use plain strings to re-arrange the letters. Before we hand s to arrangements,
    we need to convert it into a word. Fortunately, [exercise 209](#%28counter._%28exercise._ex~3astring2word%29%29)
    asks for just such a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (in-dictionary |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (arrangements (string->word s))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Similarly, we need to convert the resulting list of words to a list of strings.
    While [exercise 209](#%28counter._%28exercise._ex~3astring2word%29%29) asks for
    a function that converts a single word, here we need a function that deals with
    lists of them. Time to make another wish:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (in-dictionary |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (words->strings |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (arrangements (string->word s)))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! What is the signature for words->strings and what is its purpose?
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 74](#%28counter._%28figure._fig~3aalternative-words%29%29) collects
    all the pieces. The following exercises asks you to design the remaining functions.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 210\. Complete the design of the words->strings function specified
    in [figure 74](#%28counter._%28figure._fig~3aalternative-words%29%29). Hint Use
    your solution to [exercise 209](#%28counter._%28exercise._ex~3astring2word%29%29).
    [![image](../Images/e832570b7df49b35b7cfdbc61058c406.jpg)](#%28counter._%28exercise._ex~3awords2strings%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 211\. Complete the design of in-dictionary, specified in [figure 74](#%28counter._%28figure._fig~3aalternative-words%29%29).
    Hint See [Real-world Data: Dictionaries](#%28part._sec~3adict%29) for how to read
    a dictionary. [![image](../Images/8ab8cc89f8c296d534ae9401c6fb0086.jpg)](#%28counter._%28exercise._ex~3ain-dictionary%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 12.4Word Games, the Heart of the Problem
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The goal is to design arrangements, a function that consumes a [Word](#%28tech._word%29)
    and produces a list of the word’s letter-by-letter rearrangements.The mathematical
    term is permutations. This extended exercise reinforces the need for deep wish
    lists, that is, a list of desired functions that seems to grow with every function
    you finish.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned, [String](part_one.html#%28tech._string%29)s could serve as a
    representation of words, but a [String](part_one.html#%28tech._string%29) is atomic
    and the very fact that arrangements needs to rearrange its letters calls for a
    different representation. Our chosen data representation of a word is therefore
    a list of [1String](part_one.html#%28tech._1string%29)s where each item in the
    input represents a letter:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Word is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() or |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [1String](part_one.html#%28tech._1string%29)  [Word](#%28tech._word%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation a [String](part_one.html#%28tech._string%29) as a list of
    [1String](part_one.html#%28tech._1string%29)s (letters) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 212\. Write down the data definition for List-of-words. Make up examples
    of [Word](#%28tech._word%29)s and [List-of-words](#%28tech._list._of._word%29).
    Finally, formulate the functional example from above with [check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29).
    Instead of the full example, consider working with a word of just two letters,
    say "d" and "e". [![image](../Images/0e50b62e3953bc1283b53c15a24db01c.jpg)](#%28counter._%28exercise._ex~3apermutations1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'The template of arrangements is that of a list-processing function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Word](#%28tech._word%29) -> [List-of-words](#%28tech._list._of._word%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates all rearrangements of the letters in w |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (arrangements w)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) w) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) w) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (arrangements ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) w)) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In preparation of the fifth step, let’s look at template’s [cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)-lines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the input is ''(), there is only one possible rearrangement of the input:
    the ''() word. Hence the result is ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  ''()),
    the list that contains the empty list as the only item.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise there is a first letter in the word, and ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29)  w)
    is that letter and the recursion produces the list of all possible rearrangements
    for the rest of the word. For example, if the list is
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "d" "e" "r")
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: then the recursion is (arrangements  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "e"  "r")).
    It will produce the result
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "e" "r")
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "r" "e")
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     ''())) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: To obtain all possible rearrangements for the entire list, we must now insert
    the first item, "d" in our case, into all of these words between all possible
    letters and at the beginning and end.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our analysis suggests that we can complete arrangements if we can somehow insert
    one letter into all positions of many different words. The last aspect of this
    task description implicitly mentions lists and, following the advice of this chapter,
    calls for an auxiliary function. Let us call this function insert-everywhere/in-all-words
    and let us use it to complete the definition of arrangements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (arrangements w)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._empty~3f%29%29) w) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) ''())]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._else%29%29) (insert-everywhere/in-all-words ([first](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._first%29%29) w)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (arrangements ([rest](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._rest%29%29) w)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 213\. Design insert-everywhere/in-all-words. It consumes a [1String](part_one.html#%28tech._1string%29)
    and a list of words. The result is a list of words like its second argument, but
    with the first argument inserted at the beginning, between all letters, and at
    the end of all words of the given list.
  prefs: []
  type: TYPE_NORMAL
- en: Start with a complete wish list entry. Supplement it with tests for empty lists,
    a list with a one-letter word and another list with a two-letter word, etc. Before
    you continue, study the following three hints carefully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hints (1) Reconsider the example from above. It says that "d" needs to be inserted
    into the words ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "e"  "r")
    and ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  "r"  "e").
    The following application is therefore one natural candidate for an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (insert-everywhere/in-all-words "d" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "e" "r")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "r" "e")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ''()))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '(2) You want to use the BSL+ operation [append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._append%29%29),
    which consumes two lists and produces the concatenation of the two lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._append%29%29) ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "a" "b" "c") ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) "d" "e"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list "a" "b" "c" "d" "e") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The development of functions like [append](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._append%29%29)
    is the subject of [Simultaneous Processing](part_four.html#%28part._ch~3asimu%29).
  prefs: []
  type: TYPE_NORMAL
- en: (3) This solution of this exercise is a series of functions. Patiently stick
    to the design recipe and systematically work through your wish list. [![image](../Images/ffa15688e114883dac74deebcf41bcb3.jpg)](#%28counter._%28exercise._ex~3apermutations%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 214\. Integrate arrangements with the partial program from [Word Games,
    Composition Illustrated](#%28part._sec~3apermute-composition%29). After making
    sure that the entire suite of tests passes, run it on some of your favorite examples.
    [![image](../Images/f55641c0ee66e2ca0e710d5f80f6d864.jpg)](#%28counter._%28exercise._ex~3apermutations2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 12.5Feeding Worms
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Worm—<wbr>also known as Snake—<wbr>is one of the oldest computer games. When
    the game starts, a worm and a piece of food appear. The worm is moving toward
    a wall. Don’t let it run into the wall; otherwise the game is over. Instead, use
    the arrow keys to control the worm’s movements.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of the game is to have the worm eat as much food as possible. As the
    worm eats the food, it becomes longer; more and more segments appear. Once a piece
    of food is digested, another piece appears. The worm’s growth endangers the worm
    itself, though. As it grows large enough, it can run into itself and, if it does,
    the game is over, too.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/6dc5ec579b5b4e3ba1724b19a6262903.jpg)    ![image](../Images/5fe03a58b89c69a3f76a7298fdf78211.jpg)
       ![image](../Images/595287d0e0f7c4bf7aedfb48ace92f6f.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 75: Playing Worm'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 75](#%28counter._%28figure._fig~3aworm%29%29) displays a sequence of
    screen shots that illustrates how the game works in practice. On the left, you
    see the initial setting. The worm consists of a single red segment, its head.
    It is moving toward the food, which is displayed as a green disk. The screen shot
    in the center shows a situation when the worm is about to eat some food. In the
    right-most screen shot the worm has run into the right wall. The game is over;
    the player scored 11 points.'
  prefs: []
  type: TYPE_NORMAL
- en: The following exercises guide you through the design and implementation of a
    Worm game. Like [Structures in Lists](#%28part._sec~3asil%29), these exercises
    illustrate how to tackle a non-trivial problem via iterative refinement. That
    is, you don’t design the entire interactive program all at once but in several
    stages, called iterations. Each iteration adds details and refines the program—<wbr>until
    it satisfies you or your customer. If you aren’t satisfied with the outcome of
    the exercises, feel free to create variations.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 215\. Design a world program that continually moves a one-segment worm
    and enables a player to control the movement of the worm with the four cardinal
    arrow keys. Your program should use a red disk to render the one-and-only segment
    of the worm. For each clock tick, the worm should move a diameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hints (1) Re-read [Designing World Programs](part_one.html#%28part._.D.K._sec~3adesign-world%29)
    to recall how to design world programs. When you define the worm-main function,
    use the rate at which the clock ticks as its argument. See the documentation for
    [on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29)
    on how to describe the rate. (2) When you develop a data representation for the
    worm, contemplate the use of two different kinds of representations: a physical
    representation and a logical one. The physical representation keeps track of the
    actual physical position of the worm on the canvas; the logical one counts how
    many (widths of) segments the worm is from the left and the top. For which of
    the two is it easier to change the physical appearances (size of worm segment,
    size of game box) of the “game?” [![image](../Images/dc71b94b24967de912a3e8d1d8ff46be.jpg)](#%28counter._%28exercise._ex~3aworm1%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 216\. Modify your program from [exercise 215](#%28counter._%28exercise._ex~3aworm1%29%29)
    so that it stops if the worm has run into the walls of the world. When the program
    stops because of this condition, it should render the final scene with the text
    "worm hit border" in the lower left of the world scene. Hint You can use the [stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29)
    clause in [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    to render the last world in a special way. [![image](../Images/5244a581f9d9ce7278c35b9b6aefa6e3.jpg)](#%28counter._%28exercise._ex~3aworm2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 217\. Develop a data representation for worms with tails. A worm’s
    tail is a possibly empty sequence of “connected” segments. Here “connected” means
    that the coordinates of a segment differ from those of its predecessor in at most
    one direction. To keep things simple, treat all segments—<wbr>head and tail segments—<wbr>the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now modify your program from [exercise 215](#%28counter._%28exercise._ex~3aworm1%29%29)
    to accommodate a multi-segment worm. Keep things simple: (1) your program may
    render all worm segments as red disks and (2) ignore that the worm may run into
    the wall or itself. Hint One way to realize the worm’s movement is to add a segment
    in the direction in which it is moving and to delete the last one. [![image](../Images/f60a23e2d3c64e7bb1ad6ff186b6ea14.jpg)](#%28counter._%28exercise._ex~3aworm3%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 218\. Re-design your program from exercise [exercise 217](#%28counter._%28exercise._ex~3aworm3%29%29)
    so that it stops if the worm has run into the walls of the world or into itself.
    Display a message like the one in [exercise 216](#%28counter._%28exercise._ex~3aworm2%29%29)
    to explain whether the program stopped because the worm hit the wall or because
    it ran into itself.
  prefs: []
  type: TYPE_NORMAL
- en: Hints (1) To determine whether a worm is going to run into itself, check whether
    the position of the head would coincide with one of its old tail segments if it
    moved. (2) Read up on the BSL+ primitive [member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29).
    [![image](../Images/80a6c41f24b6ed91c52b78f7c8176a13.jpg)](#%28counter._%28exercise._ex~3aworm4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 219\. Equip your program from [exercise 218](#%28counter._%28exercise._ex~3aworm4%29%29)
    with food. At any point in time, the box should contain one piece of food. To
    keep things simple, a piece of food is of the same size as worm segment. When
    the worm’s head is located at the same position as the food, the worm eats the
    food, meaning the worm’s tail is extended by one segment. As the piece of food
    is eaten, another one shows up at a different location.
  prefs: []
  type: TYPE_NORMAL
- en: Adding food to the game requires changes to the data representation of world
    states. In addition to the worm, the states now also include a representation
    of the food, especially its current location. A change to the game representation
    suggests new functions for dealing with events, though these functions can reuse
    the functions for the worm (from [exercise 218](#%28counter._%28exercise._ex~3aworm4%29%29))
    and their test cases. It also means that the tick handler must not only move the
    worm; in addition it must manage the eating process and the creation of new food.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Posn](part_one.html#%28tech._posn%29) -> [Posn](part_one.html#%28tech._posn%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ??? |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-satisfied%29%29) (food-create ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) 1 1))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  not-equal-1-1?) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (food-create p)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (food-check-create |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      p ([make-posn](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._make-posn%29%29) ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) MAX) ([random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29) MAX))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)
    -> [Posn](part_one.html#%28tech._posn%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; generative recursion |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ??? |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (food-check-create p candidate)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([if](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._if%29%29) ([equal?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._equal~3f%29%29) p candidate) (food-create p) candidate))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Posn](part_one.html#%28tech._posn%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; use for testing only |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (not-equal-1-1? p)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([not](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._not%29%29) ([and](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-x%29%29) p) 1) ([=](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._~3d%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._posn-y%29%29) p) 1))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 76: Random placement of food'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your program should place the food randomly within the box. To do so properly,
    you need a design technique that you haven’t seen before—<wbr>so-called generative
    recursion, which is introduced in [Generative Recursion](part_five.html)—<wbr>so
    we provide these functions in [figure 76](#%28counter._%28figure._fig~3arandom~3aplacement%29%29).For
    the workings of [random](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._random%29%29),
    read the manual or [exercise 99](part_one.html#%28counter._mix._%28exercise._mix-ufo-move%29%29).
    Before you use them, however, explain how these functions work—<wbr>assuming MAX
    is greater than 1—<wbr>and then formulate purpose statements.
  prefs: []
  type: TYPE_NORMAL
- en: Hints (1) One way to interpret “eating” is to say that the head moves where
    the food used to be located and the tail grows by one segment, inserted where
    the head used to be. Why is this interpretation easy to design as a function?
    (2) We found it useful to add a second parameter to the worm-main function for
    this last step, a Boolean that determines whether [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    displays the current state of the world in a separate window; see the documentation
    for [state](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._state%29%29)
    on how to ask for this information. [![image](../Images/2e77178faff17e5595f91667734a8a90.jpg)](#%28counter._%28exercise._ex~3aworm5%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Once you have finished this last exercise, you now have a finished worm game.
    If you modify your worm-main function so that it returns the length of the final
    worm’s tail, you can use the “Create Executable” menu in DrRacket to turn your
    program into something that anybody can launch, not just someone that knows about
    BSL+ and programming.
  prefs: []
  type: TYPE_NORMAL
- en: You may also wish to add extra twists to the game, to make it really your game.
    We experimented with funny end-of-game messages; having several different pieces
    of food around; with extra obstacles in the room; and a few other ideas. What
    can you think of?
  prefs: []
  type: TYPE_NORMAL
- en: 12.6Simple Tetris
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Tetris is another game from the early days of software. Since the design of
    a full-fledged Tetris game demands a lot of labor with only marginal profit, this
    section focuses on a simplified version. If you feel ambitious, look up how Tetris
    really works and design a full-fledged version.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/5d0e23e1d8d8f7b09c05b9f69a389afb.jpg)     ![image](../Images/202a6e2d70f271353f0ccf869d8ce68f.jpg)
        ![image](../Images/a6944149ad97191a6010cfe466620fb2.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 77: Simple Tetris'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In our simplified version, the game starts with individual blocks dropping from
    the top of the scene. Once one of them lands on the ground, it comes to a rest
    and another block starts dropping down from some random place. A player can control
    the dropping block with the “left” and “right” arrow keys. Once a block lands
    on the floor of the canvas or on top of some already resting block, it comes to
    rest and becomes immovable. In a short time, the blocks stack up and, if a stack
    of blocks reaches the ceiling of the canvas, the game is over. Naturally the objective
    of this game is to land as many blocks as possible. See [figure 77](#%28counter._%28figure._fig~3atetris%29%29)
    for an illustration of the idea.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given this description, we can turn to the design guidelines for interactive
    programs from [Designing World Programs](part_one.html#%28part._.D.K._sec~3adesign-world%29).
    They call for separating constant properties from variable ones. The former can
    be written down as “physical” and graphical constants; the latter suggest the
    data that makes up all possible states of the simple Tetris game. So here are
    some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The width and the height of the game are fixed as are the blocks. In terms
    of BSL+, you want definitions like these:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) WIDTH 10) ; #
    of blocks, horizontally |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) SIZE 10) ; blocks
    are squares |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) SCENE-SIZE ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29) WIDTH SIZE))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) BLOCK ; red
    squares with black rims |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) SIZE 1) "solid" "red")
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) SIZE "outline" "black")))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Explain these definitions before you read on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The “landscapes” of blocks differ from game to game and from clock tick to clock
    tick. Let us make this more precise. The appearances of the blocks remains the
    same; their positions differ.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are now left with the central problem of designing a data representation
    for the dropping blocks and the landscapes of blocks on the ground. When it comes
    to the dropping block, there are againSee [exercise 215](#%28counter._%28exercise._ex~3aworm1%29%29)
    for a related design decision. two possibilities: one is to choose a “physical”
    representation, another would be a “logical” one. The physical representation
    keeps track of the actual physical position of the blocks on the canvas; the logical
    one counts how many block widths a block is from the left and the top. When it
    comes to the resting blocks, there are even more choices than for individual blocks:
    a list of physical positions, a list of logical positions, a list of stack heights,
    etc.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section we choose the data representation for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) tetris [block landscape])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) block [x y])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Tetris is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-tetris  [Block](#%28tech._block%29)  [Landscape](#%28tech._landscape%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Landscape is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Block](#%28tech._block%29)  [Landscape](#%28tech._landscape%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; Block is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-block  [N](#%28tech._n%29)  [N](#%28tech._n%29)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretations |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; (make-block  x  y) depicts a block whose left |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; corner is ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29)  x  SIZE)
    pixels from the left and |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ([*](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._%2A%29%29)  y  SIZE)
    pixels from the top; |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; (make-tetris  b0  ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29)  b1  b2  [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    means b0 is the |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; dropping block, while b1, b2, and ... are resting |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This is what we dubbed the logical representation, because the coordinates
    do not reflect the physical location of the blocks, just the number of block sizes
    they are from the origin. Our choice implies that x is always between 0 and WIDTH
    (exclusive) and that y is between 0 and HEIGHT (exclusive), but we ignore this
    knowledge.Exercise 220\. When you are presented with a complex data definition—<wbr>like
    the one for the state of a Tetris game—<wbr>you start by creating instances of
    the various data collections. Here are some suggestive names for examples you
    can later use for functional examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) landscape0 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) block-dropping [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) tetris0 [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) tetris0-drop [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) block-landed (make-block 0 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT 1)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) block-on-block (make-block 0 ([-](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._-%29%29) HEIGHT 2)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Design the program tetris-render, which turns a given instance of [Tetris](#%28tech._tetri%29)
    into an [Image](part_one.html#%28tech._image%29). Use DrRacket’s interaction area
    to develop the expression that renders some of your (extremely) simple data examples.
    Then formulate the functional examples as unit tests and the function itself.
    [![image](../Images/963e14528fe015dea2fcee74d75ca96a.jpg)](#%28counter._%28exercise._ex~3atetris0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 221\. Design the interactive program tetris-main, which displays blocks
    dropping in a straight line from the top of the canvas and landing on the floor
    or on blocks that are already resting. The input to tetris-main should determine
    the rate at which the clock ticks. See the documentation of [on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29)
    for how to specify the rate.
  prefs: []
  type: TYPE_NORMAL
- en: To discover whether a block landed, we suggest you drop it and check whether
    it is on the floor or it overlaps with one of the blocks on the list of resting
    block. Hint Read up on the BSL+ primitive [member?](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._member~3f%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: When a block lands, your program should immediately create another block that
    descends on the column to the right of the current one. If the current block is
    already in the right-most column, the next block should use the left-most one.
    Alternatively, define the function block-generate, which randomly selects a column
    different from the current one; see [exercise 219](#%28counter._%28exercise._ex~3aworm5%29%29)
    for inspiration. [![image](../Images/137a199e71a91409006c1e2713acc829.jpg)](#%28counter._%28exercise._ex~3atetris1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 222\. Modify the program from [exercise 221](#%28counter._%28exercise._ex~3atetris1%29%29)
    so that a player can control the horizontal movement of the dropping block. Each
    time the player presses the "left" arrow key, the dropping block should shift
    one column to the left unless it is in column 0 or there is already a stack of
    resting blocks to its left. Similarly, each time the player presses "right", the
    dropping block should move one column to the right if possible. [![image](../Images/17831b55a8e7410cf3f29d849a87270f.jpg)](#%28counter._%28exercise._ex~3atetris2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 223\. Equip the program from [exercise 222](#%28counter._%28exercise._ex~3atetris2%29%29)
    with a [stop-when](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29)
    clause. The game ends when one of the columns contains enough blocks to “touch”
    the top of the canvas. [![image](../Images/f1bc930f6c1313ac0c4079259776f1f6.jpg)](#%28counter._%28exercise._ex~3atetris3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Once you have solved [exercise 223](#%28counter._%28exercise._ex~3atetris3%29%29)
    you have a bare-bones Tetris game. You may wish to polish it a bit before you
    show it to your friends. For example, the final canvas could show a text that
    says how many blocks the player was able to stack up. Or every canvas could contain
    such a text. The choice is yours.
  prefs: []
  type: TYPE_NORMAL
- en: 12.7Full Space War
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Itemizations and Structures](part_one.html#%28part._ch~3amix%29) discusses
    a space invader game with little action; the player can merely move the ground
    force back and forth. [Lists and World](#%28part._sec~3alist-world%29) enables
    the player to fire as many shots as desired. This section poses the final exercises
    in this series. Specifically it is about making the shots interact with the UFO
    and more.'
  prefs: []
  type: TYPE_NORMAL
- en: As always, a UFO is trying to land on earth. The player’s task is to prevent
    the UFO from landing. To this end, the game comes with a tank that may fire an
    arbitrary number of shots. When one of these shots comes close enough to the UFO’s
    center of gravity, the game is over and the player won. If the UFO comes close
    enough to the ground, the player lost.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 224\. Use the lessons learned from the preceding two sections and
    design the game extension slowly, adding one feature of the game after another.
    Always use the design recipe and rely on the guidelines for auxiliary functions.
    If you like the game, add other features: show a running text; equip the UFO with
    charges that can eliminate the tank; create an entire fleet of attacking UFOs;
    and above all, use your imagination. [![image](../Images/5e8a73ae3d1b6984e112cb771086d85a.jpg)](#%28counter._%28exercise._ex~3aufo-complete%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t like UFOs and tanks shooting at each other, let’s use the same
    ideas to produce a similar, civilized game.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 225\. Design a fire-fighting game.
  prefs: []
  type: TYPE_NORMAL
- en: The game is set in the western states where fires rage through vast forests.
    It simulates an airborne fire-fighting effort. Specifically, the player acts as
    the pilot of an airplane that drops loads of water on fires on the ground. The
    player controls the plane’s horizontal movements and the release of water loads.
  prefs: []
  type: TYPE_NORMAL
- en: Your game software starts fires at random places on the ground. You may wish
    to limit the number of fires, making them a function of how many fires are currently
    burning or other factors. The purpose of the game is to extinguish all fires in
    a limited amount of time. Hint Use an iterative design approach as illustrated
    in this chapter to create this game. [![image](../Images/ef3bebc8b9fb0ffc39fa8fb5edf01bca.jpg)](#%28counter._%28exercise._ex~3afire-fighters%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 12.8Finite State Machines
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Finite state machines (FSMs) and regular expressions are ubiquitous elements
    of programming. As [Finite State Worlds](part_one.html#%28part._sec~3aworlds-more%29)
    explains, state machines are one way to think about world programs. Conversely,
    [exercise 109](part_one.html#%28counter._%28exercise._ex~3afsm%29%29) shows how
    to design world programs that implement a FSM and check whether a player presses
    a specific series of key strokes.
  prefs: []
  type: TYPE_NORMAL
- en: As you may also recall, a finite state machine is equivalent to a regular expression.
    Hence, computer scientists tend to say that a FSM accepts the key strokes that
    match a particular regular expression, like this one
  prefs: []
  type: TYPE_NORMAL
- en: a (b|c)* d
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: from [exercise 109](part_one.html#%28counter._%28exercise._ex~3afsm%29%29).
    If you wanted a program that recognizes a different pattern, say,
  prefs: []
  type: TYPE_NORMAL
- en: a (b|c)* a
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: you would just modify the existing program appropriately. The two programs would
    resemble each other, and if you were to repeat this exercise for several different
    regular expressions, you would end up with a whole bunch of similar-looking programs.
  prefs: []
  type: TYPE_NORMAL
- en: A natural idea is to look for a general solution, that is, a world program that
    consumes a data representation of a FSM and recognizes whether a player presses
    a matching sequence of keys. This section presents the design of just such a world
    program, though a greatly simplified one. In particular, the FSMs come without
    initial or final states and the matching ignores the actual key strokes; instead
    the transition from one state to another takes place whenever any key is pressed.
    Furthermore, we require that the states are color strings. That way, the FSM-interpreting
    program can simply display the current state as a color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note on Design Choices Here is another attempt to generalize:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample Problem Design a program that interprets a given FSM on a specific list
    of [KeyEvent](part_one.html#%28tech._keyevent%29)s. That is, the program consumes
    a data representation of a FSM and a string. Its result is #true if the string
    matches the regular expression that corresponds to the FSM; otherwise it is #false.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As it turns out, however, you cannot design this program with the principles
    of the first two parts. Indeed, solving this problem has to wait until [Algorithms
    that Backtrack](part_five.html#%28part._ch~3abacktrack%29); see [exercise 476](part_five.html#%28counter._fsm._%28exercise._ex~3afsm-match%29%29).
    End
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A FSM is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   –  ''() |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Transition](#%28tech._transition%29)  [FSM](#%28tech._fsm%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) transition [current next])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Transition is a structure: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-transition  [FSM-State](#%28tech._fsm._state%29)  [FSM-State](#%28tech._fsm._state%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; FSM-State is a [Color](part_one.html#%28tech._data-uni._color%29). |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation A [FSM](#%28tech._fsm%29) represents the transitions that
    a |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finite state machine can take from one state to another |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; in reaction to key strokes |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 78: Representing and interpreting finite state machines in general'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The simplified problem statement dictates a number of points, including the
    need for a data definition for the representation of FSMs, the nature of its states,
    and their appearance as an image. [Figure 78](#%28counter._%28figure._fig~3afsm1%29%29)
    collects this information. It starts with a data definition for [FSM](#%28tech._fsm%29)s.
    As you can see, a [FSM](#%28tech._fsm%29) is just a list of [Transition](#%28tech._transition%29)s.
    We must use a list because we want our world program to work with any FSM and
    that means a finite, but arbitrary large number of states. Each [Transition](#%28tech._transition%29)
    combines two states in a structure: the current state and the next state, that
    is, the one that the machine transitions to when the player presses a key. The
    final part of the data definition says that a state is just the name of a color.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 226\. Design state=?, an equality predicate for states. [![image](../Images/47293cd4dc0b1d82379b3fcd1c9b07c1.jpg)](#%28counter._%28exercise._ex~3afsm-state~3d%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this definition is complex, we follow the design recipe and create an
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) fsm-traffic
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._list%29%29) (make-transition "red" "green")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         (make-transition "green" "yellow") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         (make-transition "yellow" "red"))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: You probably guessed that this transition table describes a traffic light. Its
    first transition tells us that the traffic light jumps from "red" to "green",
    the second one represents the transition from "green" to "yellow", and the last
    one is for "yellow" to "red".
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 227\. The BW Machine is a FSM that flips from black to white and back
    to black for every key event. Formulate a data representation for the BW Machine.
    [![image](../Images/7d539a383c6d12a943d0e1a4649cbc2a.jpg)](#%28counter._%28exercise._ex~3afsm-design2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Clearly, the solution to our problem is a world program:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [FSM](#%28tech._fsm%29) -> ??? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; match the keys pressed with the given [FSM](#%28tech._fsm%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (simulate a-fsm)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It is supposed to consume a [FSM](#%28tech._fsm%29) but we have no clue what
    the program is to produce. We call the program simulate because it acts like the
    given [FSM](#%28tech._fsm%29) in response to a players key strokes.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s follow the design recipe for world programs anyway to see how far it takes
    us. It tells us to differentiate between those things in the “real world” that
    change and those that remain the same. While the simulate function consumes an
    instance of [FSM](#%28tech._fsm%29), we also know that this [FSM](#%28tech._fsm%29)
    does not change. What changes is the current state of the machine.
  prefs: []
  type: TYPE_NORMAL
- en: This analysis suggests the following data definition
  prefs: []
  type: TYPE_NORMAL
- en: ; A SimulationState.v1 is a [FSM-State](#%28tech._fsm._state%29).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: According to the design recipe for world programs, this data definition completes
    the main function:The [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29)
    constant represents an “invisible” image. It is a good default value for writing
    down the headers of rendering functions.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (simulate.v1 fsm0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) initial-state
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) render-state.v1]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) find-next-state.v1]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'and implies a wish list with two entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [SimulationState.v1](#%28tech._simulationstate..v1%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders a world state as an image |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render-state.v1 s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [SimulationState.v1](#%28tech._simulationstate..v1%29)  [KeyEvent](part_one.html#%28tech._keyevent%29)
    -> [SimulationState.v1](#%28tech._simulationstate..v1%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds the next state from ke and cs |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (find-next-state.v1 cs ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    cs) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The sketch raises two questions. First, there is the issue of how the very
    first [SimulationState.v1](#%28tech._simulationstate..v1%29) is determined. Currently,
    the chosen state, initial-state, is marked in red to warn you about the issue.
    Second, the second entry on the wish list must cause some consternation:'
  prefs: []
  type: TYPE_NORMAL
- en: How can find-next-state possibly find the next state when all it is given is
    the current state and a key stroke?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This question rings especially true because, according to the simplified problem
    statement, the exact nature of the key stroke is irrelevant; the FSM transitions
    to the next state regardless of which key is pressed.What this second issue exposes
    is a fundamental limitation of BSL+. To appreciate this limitation, we start with
    a work-around. Basically, the analysis demands that the find-next-state function
    receives not only the current state but also the [FSM](#%28tech._fsm%29) so that
    it can search the list of transitions and pick the next state. In other words,
    the state of the world must include bothAlonzo Church and Alan Turing, the first
    two computer scientists, proved in the 1930s that all programming languages can
    compute certain functions on numbers. Hence, they argued that all programming
    languages were equal. The first author of this book [disagrees](http://www.ccs.neu.edu/home/matthias/papers.html#scp91-felleisen).
    He distinguishes languages according to how they allow programmers to express
    solutions. the current state of the [FSM](#%28tech._fsm%29) and the [FSM](#%28tech._fsm%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) fs [fsm current])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A SimulationState.v2 is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-fs  [FSM](#%28tech._fsm%29)  [FSM-State](#%28tech._fsm._state%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'According to the world design recipe, this change also means that the key event
    handler must return this combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [SimulationState.v2](#%28tech._simulationstate..v2%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders a world state as an image |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (render-state.v2 s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [SimulationState.v2](#%28tech._simulationstate..v2%29)  [KeyEvent](part_one.html#%28tech._keyevent%29)
    -> [SimulationState.v2](#%28tech._simulationstate..v2%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds the next state from ke and cs |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (find-next-state.v2 cs ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    cs) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Finally, the main function must now consume two arguments: the [FSM](#%28tech._fsm%29)
    and its first state. After all, the various [FSM](#%28tech._fsm%29)s that simulate
    consumes come with all kinds of states; we cannot assume that all of them have
    the same initial state. Here is the revised function header:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [FSM](#%28tech._fsm%29)  [FSM-State](#%28tech._fsm._state%29) -> [SimulationState.v2](#%28tech._simulationstate..v2%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; match the keys pressed with the given [FSM](#%28tech._fsm%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (simulate.v2 a-fsm s0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) (make-fs a-fsm s0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) state-as-colored-square]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) find-next-state]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Let’s return to the example of the traffic-light [FSM](#%28tech._fsm%29). For
    this machine, it would be best to apply simulate to the machine and "red":'
  prefs: []
  type: TYPE_NORMAL
- en: (simulate.v2 fsm-traffic "red")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stop! Why do you think "red" is good for traffic lights?Engineers call "red"
    the safe state.
  prefs: []
  type: TYPE_NORMAL
- en: Note on Expressive Power Given the work-around, we can now explain the limitation
    of BSL. Even though the given [FSM](#%28tech._fsm%29) does not change during the
    course of the simulation, its description must become a part of the world’s state.
    Ideally, the program should express that the description of the [FSM](#%28tech._fsm%29)
    remains constant but instead the program must treat the [FSM](#%28tech._fsm%29)
    as part of the ever-changing state. The reader of a program cannot deduce this
    fact from the first piece of [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    alone.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next part of the book resolves this conundrum with the introduction of
    a new programming language and a specific linguistic construct: ISL and local
    definitions. For details, see [... Add Expressive Power](part_three.html#%28part._sec~3alocal-is-power%29).
    End'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we can turn to the wish list and work through its entries, one
    at a time. The first one, the design of state-as-colored-square is so straightforward
    that we simply provide the complete definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [SimulationState.v2](#%28tech._simulationstate..v2%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders current world state as a colored square |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (state-as-colored-square
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 (make-fs fsm-traffic "red")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) 100 "solid" "red"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (state-as-colored-square a-fs)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) 100 "solid" (fs-current a-fs)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In contrast, the design of the key event handler deserves some discussion.
    Recall the header material:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [SimulationState.v2](#%28tech._simulationstate..v2%29)  [KeyEvent](part_one.html#%28tech._keyevent%29)
    -> [SimulationState.v2](#%28tech._simulationstate..v2%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds the next state from ke and cs |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (find-next-state a-fs current)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   a-fs) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'According to the design recipe, the handler must consume a state of the world
    and a [KeyEvent](part_one.html#%28tech._keyevent%29), and it must produce the
    next state of the world. This articulation of the signature in plain words also
    guides the design of examples. Here are the first two:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (find-next-state (make-fs fsm-traffic "red") "n") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-fs fsm-traffic "green")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (find-next-state (make-fs fsm-traffic "red") "a") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-fs fsm-traffic "green")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It says that when the current state combines the fsm-traffic machine and its
    "red" state, the result combines the same [FSM](#%28tech._fsm%29) with "green",
    regardless of whether the player hit "n" or "a" on the keyboard. Here is one more
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (find-next-state (make-fs fsm-traffic "green") "q") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-fs fsm-traffic "yellow")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Interpret the example before reading on. Can you think of another one?Since
    the function consumes a structure, we write down a template for structures processing:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (find-next-state a-fs ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (fs-fsm a-fs) [..](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._....%29%29) (fs-current a-fs) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Furthermore, because the desired result is an [SimulationState.v2](#%28tech._simulationstate..v2%29),
    we can refine the template with the addition of an appropriate constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (find-next-state a-fs ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-fs |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (fs-fsm a-fs) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29) (fs-current a-fs) [...](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The examples suggest that the extracted [FSM](#%28tech._fsm%29) becomes the
    first component of the new [SimulationState.v2](#%28tech._simulationstate..v2%29)
    and that the function really just needs to compute the next state from the current
    one and the list of [Transition](#%28tech._transition%29)s that make up the given
    [FSM](#%28tech._fsm%29). Because the latter is arbitrarily long, we make up a
    wish—<wbr>a find function that traverses the list to look for a [Transition](#%28tech._transition%29)
    whose current state is (fs-current  a-fs)—<wbr>and finish the definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (find-next-state a-fs ke)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-fs |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (fs-fsm a-fs) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (find (fs-fsm a-fs) (fs-current a-fs)))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here is the formulation of the new wish:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [FSM](#%28tech._fsm%29)  [FSM-State](#%28tech._fsm._state%29) -> [FSM-State](#%28tech._fsm._state%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds the state representing current in transitions |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; and retrieve the next field |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (find fsm-traffic "red") "green")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-expect%29%29) (find fsm-traffic "green") "yellow")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-error](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._check-error%29%29) (find fsm-traffic "black")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              "not found: black") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define%29%29) (find transitions current)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   current) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The examples are derived from the examples for find-next-state.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Develop some additional examples, then tackle the exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 228\. Complete the design of find.
  prefs: []
  type: TYPE_NORMAL
- en: Once the auxiliary functions are tested, use simulate to play with fsm-traffic
    and the BW Machine from [exercise 227](#%28counter._%28exercise._ex~3afsm-design2%29%29).
    [![image](../Images/62a998ec4642cf585265d2a0de239ba9.jpg)](#%28counter._%28exercise._ex~3afsm0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Our simulation program is intentionally quite restrictive. In particular, you
    cannot use it to represent finite state machines that transition from one state
    to another depending on which key a player presses. Given the systematic design,
    though, you can extend the program with such capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 229\. Here is a revised data definition for [Transition](#%28tech._transition%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) ktransition [current key next])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Transition.v2 is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-ktransition  [FSM-State](#%28tech._fsm._state%29)  [KeyEvent](part_one.html#%28tech._keyevent%29)  [FSM-State](#%28tech._fsm._state%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Represent the FSM from [exercise 109](part_one.html#%28counter._%28exercise._ex~3afsm%29%29)
    using lists of [Transition.v2](#%28tech._transition..v2%29)s; ignore error and
    final states.
  prefs: []
  type: TYPE_NORMAL
- en: Modify the design of simulate so that it deals with key strokes in the appropriate
    manner now. Follow the design recipe, starting the adaptation of the data examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the revised program to simulate a run of the FSM from [exercise 109](part_one.html#%28counter._%28exercise._ex~3afsm%29%29)
    on the following sequence of key strokes: "a", "b", "b", "c", and "d". [![image](../Images/d3c38bcf3aaaec9ab684f9b228b9b576.jpg)](#%28counter._%28exercise._ex~3afsm-design3%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Finite state machines do come with initial and final states. When a program
    that “runs” a finite state machine reaches a final state, it should stop. The
    final exercise revises the data representation of [FSM](#%28tech._fsm%29)s one
    more time to introduce these ideas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 230\. Consider the following data representation for FSMs:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) fsm [initial transitions final])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/beginner.html#%28form._%28%28lib._lang%2Fhtdp-beginner..rkt%29._define-struct%29%29) transition [current key next])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An FSM.v2 is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-fsm  [FSM-State](#%28tech._fsm._state%29)  [LOT](#%28tech._lot%29)  [FSM-State](#%28tech._fsm._state%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A LOT is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/beginner.html#%28def._htdp-beginner._%28%28lib._lang%2Fhtdp-beginner..rkt%29._cons%29%29)  [Transition.v3](#%28tech._transition..v3%29)  [LOT](#%28tech._lot%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Transition.v3 is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-transition  [FSM-State](#%28tech._fsm._state%29)  [FSM-State](#%28tech._fsm._state%29)  [KeyEvent](part_one.html#%28tech._keyevent%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Represent the FSM from [exercise 109](part_one.html#%28counter._%28exercise._ex~3afsm%29%29)
    in this context.
  prefs: []
  type: TYPE_NORMAL
- en: Design the function fsm-simulate, which accepts a [FSM.v2](#%28tech._fsm..v2%29)
    and runs it on a player’s key strokes. If the sequence of key strokes force the
    [FSM.v2](#%28tech._fsm..v2%29) to reach a final state, fsm-simulate stops. Hint
    The function uses the initial field of the given fsm structure to track the current
    state. [![image](../Images/5dffa014716145c46a41382021526a0f.jpg)](#%28counter._%28exercise._ex~3afsm-list%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Note on Iterative Refinement These last two projects introduce the notion of
    “design by iterative refinement.” The basic idea is that the first program implements
    only a fraction of the desired behavior, the next one a bit more, and so on. Eventually
    you end up with a program that exhibits all of the desired behavior or at least
    enough of it to satisfy a customer. For more details, see [Incremental Refinement](part_four.html#%28part._ch~3afiles%29).
  prefs: []
  type: TYPE_NORMAL
- en: 13Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This second part of the book is about the design of programs that deal with
    arbitrarily large data. As you can easily imagine, software is particularly useful
    when it is used on information that comes without pre-specified size limits, meaning
    “arbitrarily large data” is a critical step on your way to becoming a real programmer.
    In this spirit, we suggest that you take away three lessons:'
  prefs: []
  type: TYPE_NORMAL
- en: This part refines the design recipe to deal with self-references and cross-references
    in data definitions. The occurrence of the former calls for the design of recursive
    functions, and the occurrence of the latter calls for auxiliary functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Complex problems call for a decomposition into separate problems. When you
    decompose a problem, you need two pieces: functions that solve the separate problems
    and data definitions that compose these separate solutions into a single one.
    To ensure the composition works after you have spent time on the separate programs,
    you need to formulate your “wishes” together with the required data definitions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A decomposition-composition design is especially useful when the problem statement
    implicitly or explicitly mentions auxiliary tasks; when the coding step for a
    function calls for a traversal of an(other) arbitrarily large piece of data; and—<wbr>perhaps
    surprisingly—<wbr>when a general problem is somewhat easier to solve than the
    specific one described in the problem statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Pragmatics matter. If you wish to design [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    programs, you need to understand its various clauses and what they accomplish.
    Or, if your task is to design programs that solve mathematical problems, you better
    make sure you know which mathematical operations the chosen language and its libraries
    offer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While this part mostly focuses on lists as a good example of arbitrarily large
    data—<wbr>because they are practically useful in languages such as Haskell, Lisp,
    ML, Racket, and Scheme—<wbr>the ideas apply to all kinds of such data: files,
    file folders, databases, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Intertwined Data](part_four.html) continues the exploration of “large” structured
    data and demonstrates how the design recipe scales to the most complex kind of
    data. In the meantime, the next part takes care of an important worry you should
    have at this point, namely, that a programmer’s work is all about creating the
    same kind of programs over and over and over again.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Intermezzo: Quote, Unquote'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lists play an important role in our book and in Racket, which spawned our teaching
    languages.Be sure to set your language level to BSL+ or up. For the design of
    programs, it is critical to understand how lists are constructed from first principles;
    it informs the organizations of the functions in our programs. Routine work with
    lists calls for a compact notation, however, like the [list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)
    function introduced in [The list Function](#%28part._sec~3aabbrev%29).
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the late 1950s Lisp-style languages have come with an even more powerful
    pair of list-creation tools: quotation and anti-quotation. Many programming languages
    support them now, and the PHP web page design language injected the idea into
    the commercial world.'
  prefs: []
  type: TYPE_NORMAL
- en: This intermezzo gives you a taste of this quotation mechanism. It also introduces
    symbols, a form of data that is intimately tied to quotation. While this introduction
    is informal and uses simplistic examples, the rest of the book illustrates the
    power of the idea with near-realistic variants. Come back to this intermezzo if
    any of these examples cause any trouble.
  prefs: []
  type: TYPE_NORMAL
- en: Quote
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Quotation is a short-hand mechanism for writing down a large list easily. Roughly
    speaking, a list constructed with the [list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)
    function can be constructed even more concisely by quoting lists. Conversely,
    a quoted list abbreviates a construction with [list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: 'Technically, [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29)
    is a keyword for a compound sentence in the spirit of [Intermezzo: BSL](part_one.html#%28part._i1-2%29)
    and it is used like this ([quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29) (1 2 3))
    DrRacket translates this expression to ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)  1  2  3).
    At this point, you may wonder why we call [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29)
    an abbreviation, because the [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29)d
    expressions looks more complicated than its translation. The key is that '' is
    a short-hand for [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29).
    Here are some short examples then:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ''(1 2 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 1 2 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ''("a" "b" "c") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list "a" "b" "c") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ''(#true "hello world" 42) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list #true "hello world" 42) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As you can see, the use of '' creates the promised lists. In case you forgot
    what ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)  1  2  3)
    means, re-read [The list Function](#%28part._sec~3aabbrev%29), which shows that
    this list is short for ([cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29)  1  ([cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29)  2  ([cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29)  3  ''()))).So
    far [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29)
    looks like a small improvement over [list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)
    but there is a lot more to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ''(("a" 1) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ("b" 2) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ("d" 4)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| (list (list "a" 1) (list "b" 2) (list "d" 4)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: With [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29)
    we cannot only construct lists but nested lists. The amazing point is that it
    does so with a single keystroke.To understand how [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29)
    works, imagine it as a function that traverses the shape it is given. When ' encounters
    a plain piece of data—<wbr>a number, a string, a Boolean, or an image—<wbr>it
    disappears. When it sits in front of an open parenthesis, (, it inserts [list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)
    to the right of the parenthesis and puts ' on all the items between ( and the
    closing ). For example,
  prefs: []
  type: TYPE_NORMAL
- en: '| ''(1 2 3) |  | is short for |  | ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) ''1 ''2 ''3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As you already know, '' disappears from numbers so the rest is easy. Here is
    an example that creates nested lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ''(("a" 1) 3) |  | is short for |  | ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) ''("a" 1) ''3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'To continue this example, we expand the abbreviation in the first position
    and drop the '' from 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) ''("a" 1) ''3)
    |  | is short for |  | ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) ''"a" ''1) 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We leave it to you to wrap up this example.Exercise 231\. Eliminate [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29)
    from the following expressions so that they use [list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '''(1  "a"  2  #false  3  "c")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '''()'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'and this table-like shape:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ''(("alan" 1000) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ("barb" 2000) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ("carl" 1500) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ("dawn" 2300)) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Now eliminate list in favor of [cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29)
    where needed. [![image](../Images/aec4e552960628c08ffa92526f2c1a30.jpg)](#%28counter._%28exercise._ex~3aquote-list%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Quasiquote and Unquote
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The preceding section should convince you of the advantages of ' and [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29).
    You may even wonder why the book introduces [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29)
    only now and not right from the start. It seems to greatly facilitate the formulation
    of test cases that involve lists as well as for keeping track of large collections
    of data. But all good things come with surprises, and that includes [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to program design, it is misleading for beginners to think of
    lists as [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29)d
    or even [list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)-constructed
    values. The construction of lists with [cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29)
    is far more illuminating for the step-wise creation of programs than short-hands
    such as [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29),
    which hide the underlying construction. So don’t forget to think of [cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29)
    whenever you are stuck during the design of a list-processing function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us move on then to the actual surprises hidden behind [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29).
    Suppose your definitions area contains one constant definition:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._define%29%29) x 42)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Imagine running this program and experimenting with
  prefs: []
  type: TYPE_NORMAL
- en: '''(40 41 x 43 44)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: in the interactions area. What result do you expect? Stop! Try to apply the
    above rules of ' for a moment.Here is the experiment
  prefs: []
  type: TYPE_NORMAL
- en: '| > ''(40 41 x 43 44) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 40 41 ''x 43 44) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'At this point it is important to remember that DrRacket displays values. Everything
    on the list is a value, including ''x. It is a value you have never seen before,
    namely, a Symbol. For our purposes, a symbol looks like a variable names except
    that it starts with '' and that a symbol is a value. Variables only stand for
    values; they are not values in and of themselves. Symbols play a role similar
    to those of strings; they are a great way to represent symbolic information as
    data. [Intertwined Data](part_four.html) illustrates how; for now, we just accept
    symbols as yet another form of data.To drive home the idea of symbols, consider
    a second example:'
  prefs: []
  type: TYPE_NORMAL
- en: '''(1 (+ 1 1) 3)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You might expect that this expression constructs ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)  1  2  3).
    If you use the rules for expanding ', however, you discover that
  prefs: []
  type: TYPE_NORMAL
- en: '| ''(1 (+ 1 1) 3) |  | is short for |  | ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) ''1 ''(+ 1 1) ''3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: And the ' on the second item in this list does not disappear. Instead, it abbreviates
    the construction of another list so that the entire example comes out as
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) 1 ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) '+ 1 1) 3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What this means is that '+ is a symbol just like 'x. Just as the latter is unrelated
    to the variable x, the former has no immediate relationship to the function [+](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._%2B%29%29)
    that comes with BSL+. Then again, you should be able to imagine that '+ could
    serve as an elegant data representation of the function [+](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._%2B%29%29)
    just as '(+  1  1) could serve as a data representation of ([+](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._%2B%29%29)  1  1).
    [Intertwined Data](part_four.html) picks up this idea.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some cases, you do not want to create a nested list. You actually want a
    true expression in a [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29)d
    list and you want to evaluate the expression during the construction of the list.
    For such cases, you want to use [quasiquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quasiquote%29%29),
    which like [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29),
    is just a keyword for a compound sentence: ([quasiquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quasiquote%29%29) (1 2 3)).
    And like [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29),
    [quasiquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quasiquote%29%29)
    comes with a shorthand, namely the ` character, which is the “other” single-quote
    key on your keyboard.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At first glance, ` acts just like '' in that it constructs lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > `(1 2 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 1 2 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > `("a" "b" "c") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list "a" "b" "c") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > `(#true "hello world" 42) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list #true "hello world" 42) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The best part about ` is that you can also unquote, that is, you can demand
    an escape back to the programming language proper inside of a [quasiquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quasiquote%29%29)d
    list. Let’s illustrate the idea with the above examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > `(40 41 ,x 43 44) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 40 41 42 43 44) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > `(1 ,([+](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._%2B%29%29) 1 1) 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 1 2 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As above, the first interaction assumes an definitions area that contains ([define](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._define%29%29)  x  42).
    The best way to understand this syntax is to see it with actual keywords instead
    of ` and , shorthands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([quasiquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quasiquote%29%29) (40 41 ([unquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._unquote%29%29) x) 43 44))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([quasiquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quasiquote%29%29) (1 ([unquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._unquote%29%29) ([+](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._%2B%29%29) 1 1)) 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The rules for expanding a [quasiquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quasiquote%29%29)d
    and an [unquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._unquote%29%29)d
    shape are those of [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29)
    supplemented with one rule. When ` appears in front of a parenthesis, it is distributed
    over all parts between it and the matching closing parenthesis. When it appears
    next to a basic piece of data, it disappears. When it is in front of some variable
    name, you get a symbol. And the new rule is that when ` is immediately followed
    by [unquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._unquote%29%29),
    both characters disappear:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `(1 ,([+](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._%2B%29%29) 1 1) 3)
    |  | is short for |  | ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) `1 `,([+](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._%2B%29%29) 1 1) `3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) `1 `,([+](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._%2B%29%29) 1 1) `3)
    |  | is short for |  | ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) 1 ([+](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._%2B%29%29) 1 1) 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: And this is how you get ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)  1  2  3)
    as seen above.
  prefs: []
  type: TYPE_NORMAL
- en: From here it is a short step to the production of web pages. Yes, you read correctly—<wbr>web
    pages. In principle, web pages are coded in the HTML and CSS programming languages.
    But nobody writes down HTML programs directly; instead people design programs
    that produce web pages. Not surprisingly, you can write such functions in BSL+,
    too, and there is a simplistic example in [figure 79](#%28counter._%28figure._fig~3asimplistic-html%29%29).
    As you can immediately see, this function consumes two strings and produces a
    deeply nested list—<wbr>a data representation of a web page.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [String](part_one.html#%28tech._string%29)  [String](part_one.html#%28tech._string%29)
    -> ... deeply nested list ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a web page with given author and title |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._define%29%29) (my-first-web-page author title)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   `(html |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      (head |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        (title ,title) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        (meta ((http-equiv "content-type") |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               (content "text-html")))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      (body |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        (h1 ,title) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        (p "I, " ,author ", made this page.")))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 79: A simplistic HTML generator'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A second look also shows that the title parameter shows up twice in the function
    body: once nested in a nested list labeled with ''head and once nested in the
    nested list labeled with ''body. The other parameter shows up only once. We consider
    the nested list a page template, and the parameters are holes in the template,
    to be filled by useful values. As you can imagine, this template-driven style
    of creating web pages is most useful when you wish to create many similar pages
    for a site.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Nested List Representation |  | Web Page Code (HTML) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ''(html &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (head &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    (title "Hello World") &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    (meta &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ((http-equiv "content-type") &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      (content "text-html")))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (body &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (h1 "Hello World") &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (p "I, " &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        "Matthias" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        ", made this page."))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; <html> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   <head> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     <title> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       Hello World &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     </title> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     <meta &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       http-equiv="content-type" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       content=="text-html" /> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   </head> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   <body> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     <h1> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       Hello World &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     </h1> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     <p> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       I, &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       Matthias, &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       made this page. &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     </p> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   </body> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; </html> &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 80: A data representation based on nested lists'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To understand how the function works, we experiment in DrRacket’s interaction
    area. Given your knowledge of [quasiquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quasiquote%29%29)
    and [unquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._unquote%29%29),
    you should be able to predict what the result of
  prefs: []
  type: TYPE_NORMAL
- en: (my-first-web-page "Matthias" "Hello World")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'is. Then again, DrRacket is so fast that it is better to show you the result:
    see the left column in [figure 80](#%28counter._%28figure._fig~3anested-list-rep%29%29).You
    can use show-in-browser from the web-io.rkt library to display the result in a
    web browser. The right column of the table contains the equivalent code in HTML.
    If you were to open this web page in a browser you would see something like this;'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f6994694a659bf8d98f518ff02da1aee.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Note that "Hello World" shows up twice again: once in the title bar of the
    web browser—<wbr>which is due to the <title> specification—<wbr>and once in the
    text of the web page.'
  prefs: []
  type: TYPE_NORMAL
- en: If this were 1993, you could now sell the above function as a Dot Com company
    that generates people’s first web page with a simple function call. Alas, in this
    day and age, it is only an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 232\. Eliminate [quasiquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quasiquote%29%29)
    and [unquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._unquote%29%29)
    from the following expressions so that they are written with [list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(1  "a"  2  #false  3  "c")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'this table-like shape:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| `(("alan" ,([*](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._%2A%29%29) 2 500))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ("barb" 2000) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   (,([string-append](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._string-append%29%29) "carl" "
    , the great") 1500) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ("dawn" 2300)) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'and this second web page:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| `(html |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|    (head |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      (title ,title)) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|    (body |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      (h1 ,title) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      (p "A second web page"))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: where ([define](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._define%29%29)  title  "ratings").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also write down the nested lists that the expressions produce. [![image](../Images/1ae00862367eb329897e070103e0e7e8.jpg)](#%28counter._%28exercise._ex~3aquasi-un%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Unquote Splice
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When [quasiquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quasiquote%29%29)
    meets [unquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._unquote%29%29)
    during the expansion of short-hands, the two annihilate each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; `(tr &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ,(make-row &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ''(3 4 5))) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | is short for |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) ''tr
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (make-row &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) 3 4 5)))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thus, whatever make-row produces becomes the second item of the list. In particular,
    if make-row produces a list, this list becomes the second item of a list. Say,
    make-row translates the given list of numbers into a list of strings, then the
    result is
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) 'tr ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) "3" "4" "5"))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In some cases, however, we may want to splice such a nested list into the outer
    one, so that for our running example we would get
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) 'tr "3" "4" "5")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'One way to solve this small problem is to fall back on [cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29).
    That is, to mix [cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29)
    with [quote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quote%29%29),
    [quasiquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._quasiquote%29%29),
    and [unquote](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._unquote%29%29).
    After all, all of these characters are just short-hands for [cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29)ed
    lists. Here is what is needed to get the desired result in our example:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29) 'tr (make-row '(3 4 5)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Convince yourself that the result is ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)  ''tr  "3"  "4"  "5").Since
    this situation occurs quite often in practice, BSL+ supports one more short-hand
    mechanism for list creation: ,@, also known as [unquote-splicing](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._unquote-splicing%29%29)
    in keyword form. With this form, it is straightforward to splice a nested list
    into a surrounding list. For example,'
  prefs: []
  type: TYPE_NORMAL
- en: '`(tr ,@(make-row ''(3 4 5)))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: translates into
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29) 'tr (make-row '(3 4 5)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'which is precisely what we need for our example.Now consider the problem of
    creating an HTML table in our nested-list representation. Here is a table of two
    rows with four cells each:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   ''(table ((border "1")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (tr (td "1")   (td "2")    (td "3")   (td "4")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (tr (td "2.8") (td "-1.1") (td "3.4") (td "1.3"))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first nested lists tells HTML to draw a thin border around each cell in
    the table; the other two nested lists represent a row each.In practice, you want
    to create such tables with arbitrarily wide rows and arbitrarily many rows. For
    now, we just deal with the first problem, which requires a function that translates
    lists of numbers into HTML rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-numbers](#%28tech._list._of._number%29) -> ... nested list ...
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a row for an HTML table from l |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._define%29%29) (make-row l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._empty~3f%29%29) l) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29) (make-cell ([first](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._first%29%29) l))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 (make-row ([rest](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._rest%29%29) l)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Number](part_one.html#%28tech._number%29) -> ... nested list ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a cell for an HTML table from a number |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._define%29%29) (make-cell n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   `(td ,([number->string](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._number-~3estring%29%29) n)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Instead of adding examples, we explore the behavior of these functions in DrRacket’s
    interaction area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (make-cell 2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list ''td "2") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (make-row ''(1 2)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list (list ''td "1") (list ''td "2")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'These interactions show the creation of lists that represent a cell and a row.To
    turn such row-lists into actual rows of an HTML table representation, we need
    to splice them into a list that starts with ''tr:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-numbers](#%28tech._list._of._number%29)  [List-of-numbers](#%28tech._list._of._number%29)
    -> ... nested list ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates an HTML table from two lists of numbers |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._define%29%29) (make-table row1 row2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   `(table ((border "1")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           (tr ,@(make-row row1)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           (tr ,@(make-row row2)))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This function consumes two lists of numbers and creates an HTML table representation.
    With make-row, it translates the lists into lists of cell representations. With
    ,@ these lists are spliced into the table template:The dots are not part of the
    output.
  prefs: []
  type: TYPE_NORMAL
- en: '| > (make-table ''(1 2 3 4 5) ''(3.5 2.8 -1.1 3.4 1.3)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list ''table (list (list ''border "1")) ''....) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This application of make-table suggests another reason why people write programs
    to create web pages rather than make them by hand.Exercise 233\. Develop alternatives
    to the following expressions that use only [list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29)
    and produce the same values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(0  ,@''(1  2  3)  4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'this table-like shape:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| `(("alan" ,([*](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._%2A%29%29) 2 500))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ("barb" 2000) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   (,@''("carl" " , the great")   1500) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ("dawn" 2300)) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'and this third web page:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| `(html |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|    (body |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      (table ((border "1")) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|        (tr ((width "200")) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|          ,@(make-row ''( 1  2))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|        (tr ((width "200")) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|          ,@(make-row ''(99 65)))))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: where make-row is the function from above.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use [check-expect](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._check-expect%29%29)
    to check your work. [![image](../Images/0df07a0a3631ccb277163a75e3d0a481.jpg)](#%28counter._%28exercise._ex~3aunquote-splicing%29%29)Exercise 234\.
    Create the function make-ranking, which consumes a list of ranked song titles
    and produces a list representation of an HTML table. Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._define%29%29) one-list
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''("Asia: Heat of the Moment" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     "U2: One" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     "The White Stripes: Seven Nation Army")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If you apply make-ranking to one-list and display the resulting web page in
    a browser, you see something like the screen shot in [figure 81](#%28counter._%28figure._fig~3amy-second-page%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/286164aad3a1260f30053538f5ab7350.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 81: A web page generated with BSL+'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Hint Although you could design a function that determines the rankings from
    a list of strings, we wish you to focus on the creation of tables instead. Thus
    we supply the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._define%29%29) (ranking los)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([reverse](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._reverse%29%29) (add-ranks ([reverse](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._reverse%29%29) los))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._define%29%29) (add-ranks los)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._empty~3f%29%29) los) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28form._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._list%29%29) ([length](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._length%29%29) los) ([first](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._first%29%29) los))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 (add-ranks ([rest](http://docs.racket-lang.org/htdp-langs/beginner-abbr.html#%28def._htdp-beginner-abbr._%28%28lib._lang%2Fhtdp-beginner-abbr..rkt%29._rest%29%29) los)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Before you use these functions, equip them with signatures and purpose statements.
    Then explore their workings with interactions in DrRacket. [Accumulators](part_six.html)
    expands the design recipe with a way to create simpler functions for computing
    rankings than ranking and add-ranks. [![image](../Images/544df598be288fdf6c0d6483b6a8c87f.jpg)](#%28counter._%28exercise._ex~3arankings-splicing%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: IIIAbstraction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many of our data definitions and function definitions look alike. For example,
    the definition for a list of [String](part_one.html#%28tech._string%29)s differs
    from that of a list of [Number](part_one.html#%28tech._number%29)s in only two
    places: the names of the classes of data and the words “String” and “Number.”
    Similarly, a function that looks for a specific string in a list of [String](part_one.html#%28tech._string%29)s
    is nearly indistinguishable from one that looks for a specific number in a list
    of [Number](part_one.html#%28tech._number%29)s.'
  prefs: []
  type: TYPE_NORMAL
- en: Experience shows that these kinds of similarities are problematic. The similarities
    come about because programmers—<wbr>physically or mentally—<wbr>copy code. When
    programmers are confronted with a problem that is roughly like another one, they
    copy the solution and modify the new copy to solve the new problem. You will find
    this behavior both in “real” programming contexts as well as in the world of spreadsheets
    and mathematical modeling. Copying code, however, means that programmers copy
    mistakes and the same fix may have to be applied to many copies. It also means
    that when the underlying data definition is revised or extended, all copies of
    code must be found and modified in a corresponding way. This process is both expensive
    and error-prone, imposing unnecessary costs on programming teams.
  prefs: []
  type: TYPE_NORMAL
- en: Good programmers try to eliminate similarities as much as the programming language
    allows.A program is like an essay. The first version is a draft, and drafts demand
    editing. “Eliminate” implies that programmers write down their first drafts of
    programs, spot similarities (and other problems), and get rid of them. For the
    last step, they either abstract or use existing (abstract) functions. It often
    takes several iterations of this process to get the program into satisfactory
    shape.
  prefs: []
  type: TYPE_NORMAL
- en: The first half of this part shows how to abstract over similarities in functions
    and data definitions. Programmers also refer to the result of this process as
    an abstraction, conflating the name of the process and its result. The second
    half is about the use of existing abstractions and new language elements to facilitate
    this process. While the examples in this part are taken from the realm of lists,
    the ideas are universally applicable.
  prefs: []
  type: TYPE_NORMAL
- en: 14Similarities Everywhere
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you solved (some of) the exercises in [Arbitrarily Large Data](part_two.html),
    you know that many solutions look alike. As a matter of fact, the similarities
    may tempt you to copy the solution of one problem to create the solution for the
    next. But thou shall not steal code, not even your own. Instead, you must abstract
    over similar pieces of code and this chapter teaches you how to abstract.
  prefs: []
  type: TYPE_NORMAL
- en: Our means of avoiding similarities are specific to “Intermediate Student” or
    ISL for short.In DrRacket, choose “Intermediate Student” from the “How to Design
    Programs” submenu in the “Language” menu. Almost all other programming languages
    provide similar means; in object-oriented languages you may find additional abstraction
    mechanisms. Regardless, these mechanisms share the basic characteristics spelled
    out in this chapter, and thus the design ideas explained here apply in other contexts,
    too.
  prefs: []
  type: TYPE_NORMAL
- en: 14.1Similarities in Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The design recipe determines a function’s basic organization because the template
    is created from the data definition without regard to the purpose of the function.
    Not surprisingly then, functions that consume the same kind of data look alike.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Los](#%28tech._sim-dd._lo%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; does l contain "dog" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (contains-dog? l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) #false]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        ([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                  "dog") &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (contains-dog? &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Los](#%28tech._sim-dd._lo%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; does l contain "cat" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (contains-cat? l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) #false]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        ([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                  "cat") &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (contains-cat? &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 82: Two similar functions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Consider the two functions in [figure 82](#%28counter._%28figure._fig~3acmp-dog-cat%29%29),
    which consume lists of strings and look for specific strings. The function on
    the left looks for "dog", the one on the right for "cat". The two functions are
    nearly indistinguishable. Each consumes lists of strings; each function body consists
    of a [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    expression with two clauses. Each produces #false if the input is ''(); each uses
    an [or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29)
    expressions to determine whether the first item is the desired item and, if not,
    uses recursion to look in the rest of the list. The only difference is the string
    that is used in the comparison of the nested [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    expressions: contains-dog? uses "dog" and contains-cat? uses "cat". To highlight
    the differences, the two strings are shaded.Good programmers are too lazy to define
    several closely related functions. Instead they define a single function that
    can look for both a "dog" and a "cat" in a list of strings. This general function
    consumes an additional piece of data—<wbr>the string to look for—<wbr>and is otherwise
    just like the two original functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [String](part_one.html#%28tech._string%29)  [Los](#%28tech._sim-dd._lo%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines whether l contains the string s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (contains? s l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) #false]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               (contains? s ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If you really needed a function such as contains-dog? now, you could define
    it as a one-line function, and the same is true for the contains-cat? function.
    [Figure 83](#%28counter._%28figure._fig~3acmp-dog-cat2%29%29) does just that,
    and you should briefly compare it with [figure 82](#%28counter._%28figure._fig~3acmp-dog-cat%29%29)
    to make sure you understand how we get from there to here. Best of all, though,
    with contains? it is now trivial to look for any string in a list of strings and
    there is no need to ever define a specialized function such as contains-dog? again.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Los](#%28tech._sim-dd._lo%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; does l contain "dog" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (contains-dog? l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (contains? "dog" l)) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Los](#%28tech._sim-dd._lo%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; does l contain "cat" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (contains-cat? l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (contains? "cat" l)) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 83: Two similar functions, revisited'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What you haveComputer scientists borrow the term “abstract” from mathematics.
    There, “6” is an abstract concept, because it represents all ways of enumerating
    six things. In contrast, “6 inches” or “6 eggs” are concrete uses. just witnessed
    is called abstraction or, more precisely, functional abstraction. Abstracting
    different versions of functions is one way to eliminate similarities from programs,
    and as you will see, removing similarities simplifies keeping a program intact
    over a long period.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 235\. Use the contains? function to define functions that search for
    "atom", "basic", and "zoo", respectively. [![image](../Images/a0230bc4382263e476aa0fc15bc2a286.jpg)](#%28counter._%28exercise._ex~3acontains-general%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 236\. Create test suites for the following two functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Lon](#%28tech._sim-dd._lon%29) -> [Lon](#%28tech._sim-dd._lon%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; add 1 to each item on l &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add1* l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        ([add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (add1* ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Lon](#%28tech._sim-dd._lon%29) -> [Lon](#%28tech._sim-dd._lon%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; adds 5 to each item on l &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (plus5 l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) 5)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (plus5 ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Then abstract over them. Define the above two functions in terms of the abstraction
    as one-liners and use the existing test suites to confirm that the revised definitions
    work properly. Finally, design a function that subtracts 2 from each number on
    a given list. [![image](../Images/227b6c5676185f17fee6ea487699b642.jpg)](#%28counter._%28exercise._ex~3acontains-general2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 14.2Different Similarities
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Abstraction looks easy in the case of contains-dog? and contains-cat?. It takes
    only a comparison of two function definitions, a replacement of a literal string
    with a function parameter, and a quick check that it is easy to define the old
    functions with the abstract function. This kind of abstraction is so natural that
    it showed up in the preceding two parts of the book without much ado.
  prefs: []
  type: TYPE_NORMAL
- en: This section illustrates how the very same principle yields a powerful form
    of abstraction. Take a look at [figure 84](#%28counter._%28figure._fig~3acmp-above-below%29%29).
    Both functions consume a list of numbers and a threshold. The left one produces
    a list of all those numbers that are below the threshold, while the one on the
    right produces all those that are above the threshold.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Lon](#%28tech._sim-dd._lon%29)  [Number](part_one.html#%28tech._number%29)
    -> [Lon](#%28tech._sim-dd._lon%29) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; select those numbers on l &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; that are below t &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (small l t)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) t)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;         ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           (small &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;             ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) t))]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;         (small &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) t)])]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Lon](#%28tech._sim-dd._lon%29)  [Number](part_one.html#%28tech._number%29)
    -> [Lon](#%28tech._sim-dd._lon%29) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; select those numbers on l &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; that are above t &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (large l t)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        [([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) t)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;         ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           (large &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;             ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) t))]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;         (large &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) t)])]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 84: Two more similar functions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The two functions differ in only one place: the comparison operator that determines
    whether a number from the given list should be a part of the result or not. The
    function on the left uses [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29),
    the right one [>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29).
    Other than that, the two functions look identical, not counting the function name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s follow the first example and abstract over the two functions with an
    additional parameter. This time the additional parameter represents a comparison
    operator rather than a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (extract R l t)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             [(R ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) t)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                    (extract R ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) t))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              (extract R ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) t)])]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'To apply this new function, we must supply three arguments: a function R that
    compares two numbers; a list l of numbers, and a threshold t. The function then
    extracts all those items i from l for which (R  i  t) evaluates to #true.'
  prefs: []
  type: TYPE_NORMAL
- en: Stop! At this point you should ask whether this definition makes any sense.
    Without further ado, we have created a function that consumes a function—<wbr>something
    that you probably have not seen before.If you have taken a calculus course, you
    have encountered the differential operator and the indefinite integral. Both of
    those are functions that consume and produce functions. But we do not assume that
    you have taken a calculus course It turns out, however, that your simple little
    teaching language ISL supports these kinds of functions, and that defining such
    functions is one of the most powerful tools of good programmers—<wbr>even in languages
    in which function-consuming functions do not seem to be available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing shows that (extract  [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)  l  t)
    computes the same result as (small  l  t):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ''() 5) (small ''() 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ''(3) 5) (small ''(3) 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ''(1 6 4) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               (small ''(1 6 4) 5)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Similarly, (extract  [>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29)  l  t)
    produces the same result as (large  l  t), which means that you can define the
    two original functions like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Lon](#%28tech._sim-dd._lon%29)  [Number](part_one.html#%28tech._number%29)
    -> [Lon](#%28tech._sim-dd._lon%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (small-1 l t)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) l t))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Lon](#%28tech._sim-dd._lon%29)  [Number](part_one.html#%28tech._number%29)
    -> [Lon](#%28tech._sim-dd._lon%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (large-1 l t)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (extract [>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) l t))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The important insight is not that small-1 and large-1 are one-line definitions.
    Once you have an abstract function such as extract, you can put it to good uses
    elsewhere:'
  prefs: []
  type: TYPE_NORMAL
- en: '(extract  [=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29)  l  t):
    This expression extracts all those numbers in l that are equal to t.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '(extract  [<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29)  l  t):
    This one produces the list of numbers in l that are less than or equal to t.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '(extract  [>=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e~3d%29%29)  l  t):
    This last expression computes the list of numbers that are greater than or equal
    to the threshold.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As a matter of fact, the first argument for extract need not be one of ISL’s
    predefined operations. Instead, you can use any function that consumes two arguments
    and produces a [Boolean](part_one.html#%28tech._boolean%29). Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is the area of a square with side x larger than c |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (squared>? x c)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x x) c))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'That is, squared>? checks whether the claim x2 > c holds, and it is usable
    with extract:'
  prefs: []
  type: TYPE_NORMAL
- en: (extract squared>? ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 4 5) 10)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This application extracts those numbers in ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  3  4  5)
    whose square is larger than 10.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 237\. Evaluate (squared>?  3  10) and (squared>?  4  10) in DrRacket.
    How about (squared>?  5  10)? [![image](../Images/68ac6ef055e5c3bd2e181fdf016412d6.jpg)](#%28counter._%28exercise._ex~3asquared%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'So far you have seen that abstracted function definitions can be more useful
    than the original functions. For example, contains? is more useful than contains-dog?
    and contains-cat?, and extract is more useful than small and large.These benefits
    of abstraction are available at all levels of programming: word documents, spread
    sheets, small apps, and large industrial projects. Creating abstractions for the
    latter drives research on programming languages and software engineering. Another
    important aspect of abstraction is that you now have a single point of control
    over all these functions. If it turns out that the abstract function contains
    a mistake, fixing its definition suffices to fix all other definitions. Similarly,
    if you figure out how to accelerate the computations of the abstract function
    or how to reduce its energy consumption, then all functions defined in terms of
    this function are improved without further ado. The following exercises indicate
    how these single-point-of-control improvements work.'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Nelon](#%28tech._nelon%29) -> [Number](part_one.html#%28tech._number%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; determines the smallest &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; number on l &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (inf l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;             (inf ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          (inf ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Nelon](#%28tech._nelon%29) -> [Number](part_one.html#%28tech._number%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; determines the largest &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; number on l &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sup l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;             (sup ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          (sup ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 85: Finding the inf and sup in a list of numbers'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Exercise 238\. Abstract the two functions in [figure 85](#%28counter._%28figure._fig~3aex-abs-min-max%29%29)
    into a single function: Both consume non-empty lists of numbers (Nelon) and produce
    a single number. The left one produces the smallest number in the list, the right
    one the largest.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define inf-1 and sup-1 in terms of the abstract function. Test them with these
    two lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 25 24 23 22 21 20 19 18 17 16 15 14 13
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       12 11 10 9 8 7 6 5 4 3 2 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       17 18 19 20 21 22 23 24 25) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Why are these functions slow on some of the long lists?
  prefs: []
  type: TYPE_NORMAL
- en: Modify the original functions with the use of [max](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._max%29%29),
    which picks the larger of two numbers, and [min](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._min%29%29),
    which picks the smaller one. Then abstract again, define inf-2 and sup-2, and
    test them with the same inputs again. Why are these versions so much faster?
  prefs: []
  type: TYPE_NORMAL
- en: For another answer to these questions, see [Local Definitions](#%28part._sec~3alocal-definitions%29).
    [![image](../Images/22bbb7b28bf4ec48d58415f32b63a285.jpg)](#%28counter._%28exercise._ex~3aabs-min-max%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 14.3Similarities in Data Definitions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now take a close look at the following two data definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; A Lon (List-of-numbers) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; is one of &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ''() &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Number](part_one.html#%28tech._number%29)  [Lon](#%28tech._sim-dd._lon%29))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; A Los (List-of-String) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; is one of: &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ''() &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [String](part_one.html#%28tech._string%29)  [Los](#%28tech._sim-dd._lo%29))  
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The one on the left introduces lists of numbers; the one on the right describes
    lists of strings. And the two data definitions are similar. Like similar functions,
    the two data definitions use two different names, but this is irrelevant because
    any name would do. The only real difference concerns the first position inside
    of [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    in the second clause, which specifies what kind of items the list contains.In
    order to abstract over this one difference, we proceed as if a data definition
    were a function. We introduce a parameter, which makes the data definition look
    like a function, and where there used to be different references, we use this
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A [List-of ITEM] is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  ITEM  [[List-of](#%28tech._sim-dd._list._of%29)  ITEM])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We call such abstract data definitions parametric data definitions because
    of the parameter. Roughly speaking, a parametric data definition abstracts from
    a reference to a particular collection of data in the same manner as a function
    abstracts from a particular value.The question is, of course, what these parameters
    range over. For a function, they stand for an unknown value; when the function
    is applied, the value becomes known. For a parametric data definition, a parameter
    stands for an entire class of values. The process of supplying the name of a data
    collection to a parametric data definition is called instantiation; here are some
    sample instantiations of the [List-of](#%28tech._sim-dd._list._of%29) abstraction:'
  prefs: []
  type: TYPE_NORMAL
- en: When we write [[List-of](#%28tech._sim-dd._list._of%29) [Number](part_one.html#%28tech._number%29)],
    we are saying that ITEM represents all numbers so it is just another name for
    [List-of-numbers](#%28tech._sim-dd._list._of._number%29);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, [[List-of](#%28tech._sim-dd._list._of%29) [String](part_one.html#%28tech._string%29)]
    defines the same class of data as [List-of-String](#%28tech._sim-dd._list._of._string%29);
    and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'if we had identified a class of inventory records, like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) ir [name price])
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An IR is a structure: |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-ir  String  Number) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: then [[List-of](#%28tech._sim-dd._list._of%29) [IR](#%28tech._sim-dd._ir%29)]
    would be a name for the lists of inventory records.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By convention, we use names with all capital letters for parameters of data
    definitions, while the arguments are spelled as needed.Our way to validate that
    these shorthands really mean what we say they mean is to substitute the actual
    name of a data definition, e.g., [Number](part_one.html#%28tech._number%29), for
    the parameter ITEM of the data definition and to use a plain name for the data
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A List-of-numbers-again is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Number](part_one.html#%28tech._number%29)  List-of-numbers-again)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Since the data definition is self-referential, we copied the entire data definition.
    The resulting definition looks exactly like the conventional one for lists of
    numbers and truly identifies the same class of data.Let us take a brief look at
    a second example, starting with a structure type definition:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) point [hori veri])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here are two different data definitions that use this structure type:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Pair-boolean-string is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-point  [Boolean](part_one.html#%28tech._boolean%29)  [String](part_one.html#%28tech._string%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Pair-number-image is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-point  [Number](part_one.html#%28tech._number%29)  [Image](part_one.html#%28tech._image%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In this case, the data definitions differ in two places—<wbr>both marked by
    highlighting. The differences in the hori fields correspond to each other, and
    so do the differences in the veri fields. It is thus necessary to introduce two
    parameters to create an abstract data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A [CP H V] is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-point  H  V) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Here H is the parameter for data collections for the hori field, and V stands
    for data collections that can show up in the veri field.
  prefs: []
  type: TYPE_NORMAL
- en: To instantiate a data definition with two parameters, you need two names of
    data collections. Using [Number](part_one.html#%28tech._number%29) and [Image](part_one.html#%28tech._image%29)
    for the parameters of [CP](#%28tech._sim-dd._cp%29), you get [[CP](#%28tech._sim-dd._cp%29)
    [Number](part_one.html#%28tech._number%29) [Image](part_one.html#%28tech._image%29)],
    which describes the collections of points that combine a number with an image.
    In contrast [[CP](#%28tech._sim-dd._cp%29) [Boolean](part_one.html#%28tech._boolean%29)
    [String](part_one.html#%28tech._string%29)] combines Boolean values with strings
    in a point structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 239\. A list of two items is another frequently used form of data
    in ISL programming. Here is data definition with two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A [List X Y] is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  X  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  Y  ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Instantiate this definition to describe the following classes of data:'
  prefs: []
  type: TYPE_NORMAL
- en: pairs of [Number](part_one.html#%28tech._number%29)s,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pairs of [Number](part_one.html#%28tech._number%29)s and [1String](part_one.html#%28tech._1string%29)s,
    and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pairs of [String](part_one.html#%28tech._string%29)s and [Boolean](part_one.html#%28tech._boolean%29)s.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also make one concrete example for each of these three data definitions. [![image](../Images/6fe1cec238bafb45edf2e5ac185405ec.jpg)](#%28counter._sim-dd._%28exercise._ex~3adef-list%29%29)Once
    you have parametric data definitions, you can mix and match them to great effect.
    Consider this one:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [[List-of](#%28tech._sim-dd._list._of%29) [[CP](#%28tech._sim-dd._cp%29)  [Boolean](part_one.html#%28tech._boolean%29)  [Image](part_one.html#%28tech._image%29)]]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The outermost notation is [[List-of](#%28tech._sim-dd._list._of%29) ...], which
    means that you are dealing with a list. Question is what kind of data the list
    contains, and to answer that question, you need to study the inside of the [List-of](#%28tech._sim-dd._list._of%29)
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [[CP](#%28tech._sim-dd._cp%29)  [Boolean](part_one.html#%28tech._boolean%29)  [Image](part_one.html#%28tech._image%29)]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This inner part combines [Boolean](part_one.html#%28tech._boolean%29) and [Image](part_one.html#%28tech._image%29)
    in a point. By implication,
  prefs: []
  type: TYPE_NORMAL
- en: ; [[List-of](#%28tech._sim-dd._list._of%29) [[CP](#%28tech._sim-dd._cp%29)  [Boolean](part_one.html#%28tech._boolean%29)  [Image](part_one.html#%28tech._image%29)]]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: is a list of points that combine [Boolean](part_one.html#%28tech._boolean%29)s
    and [Image](part_one.html#%28tech._image%29)s. Similarly,
  prefs: []
  type: TYPE_NORMAL
- en: ; [[CP](#%28tech._sim-dd._cp%29)  [Number](part_one.html#%28tech._number%29)
    [[List-of](#%28tech._sim-dd._list._of%29)  [Image](part_one.html#%28tech._image%29)]]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'is an instantiation of [CP](#%28tech._sim-dd._cp%29) that combines one [Number](part_one.html#%28tech._number%29)
    with a list of [Image](part_one.html#%28tech._image%29)s.Exercise 240\. Here are
    two strange but similar data definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; A LStr is one of: &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  [String](part_one.html#%28tech._string%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  (make-layer  [LStr](#%28tech._sim-dd._lstr%29)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; A LNum is one of: &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  [Number](part_one.html#%28tech._number%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  (make-layer  [LNum](#%28tech._sim-dd._lnum%29)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Both data definitions rely on this structure type definition:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) layer [stuff])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Both define nested forms of data: one is about numbers and the other about
    strings. Make examples for both. Abstract over the two. Then instantiate the abstract
    definition to get back the originals. [![image](../Images/2cba822c5d0ad9ce47e2c6a44cd4c790.jpg)](#%28counter._sim-dd._%28exercise._ex~3anested-dd%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 241\. Compare the definitions for [NEList-of-temperatures](part_two.html#%28tech._nelist._of._temperature%29)
    and [NEList-of-Booleans](part_two.html#%28tech._nelist._of._boolean%29). Then
    formulate an abstract data definition NEList-of. [![image](../Images/e034fea3b984a3d9389d32de8f814cdd.jpg)](#%28counter._sim-dd._%28exercise._ex~3anelist-of%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 242\. Here is one more parametric data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A [Maybe X] is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  X |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Interpret these data definitions: [[Maybe](#%28tech._sim-dd._maybe%29) [String](part_one.html#%28tech._string%29)],
    [[Maybe](#%28tech._sim-dd._maybe%29) [[List-of](#%28tech._sim-dd._list._of%29)
    [String](part_one.html#%28tech._string%29)]], and [[List-of](#%28tech._sim-dd._list._of%29)
    [[Maybe](#%28tech._sim-dd._maybe%29) [String](part_one.html#%28tech._string%29)]].What
    does the following function signature mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [String](part_one.html#%28tech._string%29) [[List-of](#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]
    -> [[Maybe](#%28tech._sim-dd._maybe%29) [[List-of](#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; returns the remainder of los starting with s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; #false otherwise |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (occurs "a" ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "b" "a" "d" "e"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "d" "e"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (occurs "a" ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "b" "c" "d")) #f)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (occurs s los)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   los) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Work through the remaining steps of the design recipe. [![image](../Images/6cc4f6ac60626ec42c00ba956304836d.jpg)](#%28counter._sim-dd._%28exercise._ex~3amaybe%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 14.4Functions Are Values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The functions of this part stretch our understanding of program evaluation.
    It is easy to understand how functions consume more than numbers, say strings
    or images. Structures and lists are a bit of a stretch, but they are finite “things”
    in the end. Function-consuming functions, however, are strange. Indeed, the very
    idea violate the first intermezzo in two ways: (1) the names of primitives and
    functions are used as arguments in applications and (2) parameters are used in
    the function position of applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Spelling out the problem tells you how the ISL grammar differs from BSL’s. First,
    our expression language should include the names of functions and primitive operations
    in the definition. Second, the first position in an application should allow things
    other than function names and primitive operations; at a minimum, it must allow
    variables and function parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The changes to the grammar seem to demand changes to the evaluation rules, but
    all that changes, is the set of values. Specifically, to accommodate functions
    as arguments of functions, the simplest change is to say that functions and primitive
    operations are values.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 243\. Assume the definitions area in DrRacket contains
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f x) x)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Identify the values among the following expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  f  '())
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (f  f)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  f  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  10  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  (f  10)  '())))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explain why they are (not) values. [![image](../Images/78eb03b09e61e00907bea6d5c338b863.jpg)](#%28counter._%28exercise._ex~3asem-funcs%29%29)Exercise 244\.
    Argue why the following sentences are now legal:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29)  (f  x)  (x  10))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29)  (f  x)  (x  f))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29)  (f  x  y)  (x  'a  y  'b))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain your reasoning. [![image](../Images/25dc041180c3c891ee5e4b408df14ab3.jpg)](#%28counter._%28exercise._ex~3asyn-funcs%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 245\. Develop function=at-1.2-3-and-5.775?. Given two functions from
    numbers to numbers, the function determines whether the two produce the same results
    for 1.2, 3, and -5.775.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematicians say that two functions are equal if they compute the same result
    when given the same input—<wbr>for all possible inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Can we hope to define function=?, which determines whether two functions from
    numbers to numbers are equal? If so, define the function. If not, explain why
    and consider the implication that you have encountered the first easily definable
    idea for which you cannot define a function. [![image](../Images/ee13564cd841b80524644b79194e91a3.jpg)](#%28counter._%28exercise._ex~3asem2-funcs%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 14.5Computing with Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The switch from BSL+ to ISL allows the use of functions as arguments and the
    use of names in the first position of an application. DrRacket deals with names
    in these positions like anywhere else, but naturally, it expects a function as
    a result. Surprisingly, a simple adaptation of the laws of algebra suffices to
    evaluate programs in ISL.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how this works for extract from [Different Similarities](#%28part._sec~3afunc-similarities%29).
    Obviously,
  prefs: []
  type: TYPE_NORMAL
- en: (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) '() 5) == '()
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'holds. We can use the law of substitution from [Intermezzo: BSL](part_one.html#%28part._i1-2%29)
    and continue computing with the body of the function. Like so many times, the
    parameters, R, l, and t, are replaced by their arguments, [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29),
    ''(), and 5, respectively. From here, it is plain arithmetic, starting with the
    conditionals:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ''()) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ''()) t)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ''()) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ''()) 5))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ''()) 5)])])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  [#true ''()] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ''()) t)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ''()) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ''()) 5))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ''()) 5)])])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Next we look at a one-item list:'
  prefs: []
  type: TYPE_NORMAL
- en: (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 '()) 5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The result should be ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  4  ''())
    because the only item of this list is 4 and ([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)  4  5)
    is true. Here is the first step of the evaluation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''()) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)])])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Again, all occurrences of R are replaced by [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29),
    l by ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  4  ''()),
    and t by 5. The rest is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)])])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#false ''()] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)])])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) 4 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This is the key step, with [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)
    used after being substituted into this position. And it continues with arithmetic:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ''() 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The last step is the equation from above, meaning we can apply the law of substituting
    equals for equals.Our final example is an application of extract to a list of
    two items:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 6 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''()) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ''() 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Step 1 is new. It deals with the case that extract eliminates the first item
    on the list if it is not below the threshold.Exercise 246\. Check step 1 of the
    last calculation
  prefs: []
  type: TYPE_NORMAL
- en: '| (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 6 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''())) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (extract [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 4 ''()) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: using DrRacket’s stepper. [![image](../Images/26b8fa0e439277c0ff0089098232bc8b.jpg)](#%28counter._%28exercise._ex~3afilter-eval1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 247\. valuate (extract  [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  8  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  4  '()))  5)
    with DrRacket’s stepper. [![image](../Images/0c59e61ae0a809cf23704f8fa4178cee.jpg)](#%28counter._%28exercise._ex~3afilter-eval2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 248\. Evaluate (squared>?  3  10) and (squared>?  4  10) in DrRacket’s
    stepper. [![image](../Images/13c8a05fea86e502635700c5c6f7c797.jpg)](#%28counter._%28exercise._ex~3asquared-eval%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (extract squared>? ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 4 5) 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 4 5) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here are the some steps as the stepper would show them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (extract  squared>?  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  3  4  5)  10)
    |  | (1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 4 5)) ''()]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       [(squared>? ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 4 5)) 10)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 4 5))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;              (extract squared>? &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                       ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 4 5))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                       10))] &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (extract squared>?
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                      ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 4 5))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                      10)])]) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | (2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ==
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   [(squared>? 3 10) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 4 5))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          (extract squared>? &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                   ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 4 5))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                   10))] &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (extract squared>?
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                  ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 4 5))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                  10)]) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | (3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Use the stepper to confirm the step from line (1) to (2). Continue the stepping
    to fill in the gaps between steps (2) and (3). Explain each step as the use of
    a law.Exercise 249\. Functions are values: arguments, results, items in lists.
    Place the following definitions and expressions into DrRacket’s definitions window
    and use the stepper to find out how running this program works:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f x) x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) f ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (f f) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) f ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 10 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) (f 10) ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Note The stepper displays functions as so-called [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expressions. [Nameless Functions](#%28part._ch~3a3lambda%29) explains them in
    detail. [![image](../Images/d365654d4087853bc64dfeeae0a00a04.jpg)](#%28counter._%28exercise._ex~3aeval-ho-lambda-shows-up%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 15Designing Abstractions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In essence, to abstract is to turn something concrete into a parameter. We have
    this several times in the preceding section. To abstract similar function definitions,
    you add parameters that replace concrete values in the definition. To abstract
    similar data definitions, you create parametric data definitions. When you will
    encounter other programming languages, you will see that their abstraction mechanisms
    also require the introduction of parameters, though they may not be function parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 15.1Abstractions from Examples
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you first learned to add, you worked with concrete examples. Your parents
    probably taught you to use your fingers to add two small numbers. Later on, you
    studied how to add two arbitrary numbers; you were introduced to your first kind
    of abstraction. Much later still, you learned to formulate expressions that convert
    temperatures from Celsius to Fahrenheit or calculate the distance that a car travels
    at a given speed and amount of time. In short, you went from very concrete examples
    to abstract relations.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [List-of-numbers](part_two.html#%28tech._list._of._number%29) -> [List-of-numbers](part_two.html#%28tech._list._of._number%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; converts a list of Celsius &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; temperatures to Fahrenheit &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (cf* l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (C2F ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (cf* ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Inventory](#%28tech._inventory%29) -> [List-of-strings](part_two.html#%28tech._list._of._string%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; extracts the names of &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; toys from an inventory &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (names i)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) i) ''()]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (IR-name ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) i))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (names ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) i)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; converts one Celsius &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; temperature to Fahrenheit &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (C2F c)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 9/5 c) 32))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) IR
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   [name price]) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; An IR is a structure: &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ;   (make-IR  [String](part_one.html#%28tech._string%29)  [Number](part_one.html#%28tech._number%29))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; An Inventory is one of: &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ''() &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [IR](#%28tech._ir%29)  [Inventory](#%28tech._inventory%29))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 86: A pair of similar functions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (cf* l g)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (g ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (cf* ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) g))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (names i g)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) i) ''()]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (g ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) i))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (names ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) i) g))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (map1 k g)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) k) ''()]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (g ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) k))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (map1 ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) k) g))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (map1 k g)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) k) ''()]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (g ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) k))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (map1 ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) k) g))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 87: The same two similar functions, abstracted'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This section introduces a design recipe for creating abstractions from examples.
    As the preceding section shows, creating abstractions is easy. We leave the difficult
    part to the next section where we show you how to find and use existing abstractions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall the essence of [Similarities Everywhere](#%28part._ch~3add-similarities%29).
    We start from two concrete definitions; we compare them; we mark the differences;
    and then we abstract. And that is mostly all there is to creating abstractions:'
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 is to compare two items for similarities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you find two function definitions that are almost the same except for their
    namesThe recipe requires a substantial modification for abstracting over non-values.
    and some values at analogous places, compare them, mark the differences. If the
    two definitions differ in more than one place, connect the corresponding differences
    with a line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Figure 86](#%28counter._%28figure._fig~3aabstract1%29%29) shows a pair of
    similar function definitions:. The two functions apply a function to each item
    in a list. They differ only as to which function they apply to each item. The
    two highlights emphasize this essential difference. They also differ in two inessential
    ways: the names of the function and the names of the parameters.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next we abstract. To abstract means to replace the contents of corresponding
    code highlights with new names and add these names to the parameter list. For
    our running example, we obtain the following pair of functions after replacing
    the differences with g; see [figure 87](#%28counter._%28figure._fig~3acf%2A-vs-names%29%29).
    This first change eliminates the essential difference. Now each function traverses
    a list and applies some given function to each item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The inessential differences—<wbr>the names of the functions and occasionally
    the names of some parameters—<wbr>are easy to eliminate. Indeed, if you have explored
    DrRacket, you know that check syntax allows you to do this systematically and
    easily; see bottom of [figure 87](#%28counter._%28figure._fig~3acf%2A-vs-names%29%29).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We choose to use map1 for the name of the function and k for the name of the
    list parameter. No matter which names you choose, the result is two identical
    function definitions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Our example is simple. In many cases, you will find that there is more than
    just one pair of differences. The key is to find pairs of differences. When you
    mark up the differences on paper and pencil, connect related boxes with a line.
    Then introduce one additional parameter per line. And don’t forget to change all
    recursive uses of the function so that the additional parameters go along for
    the ride.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we must validate that the new function is a correct abstraction of the original
    pair of functions. To validate means to test, which here means to define the two
    original functions in terms of the abstraction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thus suppose that one original function is called f-original and consumes one
    argument and that the abstract function is called abstract. If f-original differs
    from the other concrete function in the use of one value, say, val, the following
    function definition
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f-from-abstract x)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   (abstract x val)) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'introduces the function f-from-abstract, which should be equivalent to f-original.
    That is, (f-from-abstract  V) should produce the same answer as (f-original  V)
    for every proper value V. In particular, it must hold for all values that your
    tests for f-original use. So re-formulate and re-run those tests for f-from-abstract
    and make sure they succeed.Let us return to our running example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; [List-of-numbers](part_two.html#%28tech._list._of._number%29) -> [List-of-numbers](part_two.html#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (cf*-from-map1 l) (map1 l C2F))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Inventory](#%28tech._inventory%29) -> [List-of-strings](part_two.html#%28tech._list._of._string%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (names-from-map1 i) (map1 i IR-name))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'A complete example would include some tests, and thus we can assume that both
    cf* and names come with some tests:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (cf* ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 100 0 -40))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 212 32 -40))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (names
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|                   (make-IR "doll" 21.0) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|                   (make-IR "bear" 13.0))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "doll" "bear"))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'To ensure that the functions defined in terms of map1 work properly, you can
    copy the tests and change the function names appropriately:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   (cf*-from-map1 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 100 0 -40))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 212 32 -40))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   (names-from-map1 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|       (make-IR "doll" 21.0) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|       (make-IR "bear" 13.0))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "doll" "bear"))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: A new abstraction needs a signature. As [Using Abstractions](#%28part._ch~3a3use%29)
    explains, the reuse of abstractions starts with their signatures. Finding useful
    signatures is, however, a serious problem. For now we just use the running example
    to illustrate the problem. [Similarities in Signatures](#%28part._sec~3aabs-signatures%29)
    below resolves the issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider the problem of finding a signature for map1. On one hand, if you view
    map1 as an abstraction of cf*, you might think it is
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ; [List-of-numbers](part_two.html#%28tech._list._of._number%29) [[Number](part_one.html#%28tech._number%29)
    -> [Number](part_one.html#%28tech._number%29)] -> [List-of-numbers](part_two.html#%28tech._list._of._number%29)
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'that is, the original signature extended with one part for functions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ; [[Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)]
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Since the additional parameter for map1 is a function, the use of a function
    signature to describe it should not surprise you. This function signature is also
    quite simple; it is a “name” for all the functions from numbers to numbers. Here
    C2F is such a function, and so are [add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29),
    [sin](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sin%29%29),
    and [imag-part](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._imag-part%29%29).On
    the other hand, if you view map1 as an abstraction of names, the signature is
    quite different:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ; [Inventory](#%28tech._inventory%29) [[IR](#%28tech._ir%29) -> [String](part_one.html#%28tech._string%29)]
    -> [List-of-strings](part_two.html#%28tech._list._of._string%29)
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: This time the additional parameter is IR-name, which is a selector function
    that consumes [IR](#%28tech._ir%29)s and produces [String](part_one.html#%28tech._string%29)s.
    But clearly this second signature would be useless in the first case, and vice
    versa. To accommodate both cases, the signature for map1 must express that [Number](part_one.html#%28tech._number%29),
    [IR](#%28tech._ir%29), and [String](part_one.html#%28tech._string%29) are coincidental.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also concerning signatures, you are probably eager to use [List-of](#%28tech._sim-dd._list._of%29)
    by now. It is clearly easier to write [[List-of](#%28tech._sim-dd._list._of%29)
    [IR](#%28tech._ir%29)] than spelling out a data definition for [Inventory](#%28tech._inventory%29).
    So yes, as of now, we use [List-of](#%28tech._sim-dd._list._of%29) when it is
    all about lists and you should too.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you have abstracted two functions, you should check whether there are
    other uses for the abstract function. If so, the abstraction is truly useful.
    Consider map1 for example. It is easy to see how to use it to add 1 to each number
    on a list of numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-numbers](part_two.html#%28tech._list._of._number%29) -> [List-of-numbers](part_two.html#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add1-to-each l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (map1 l [add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Similarly, map1 can also be used to extract the price of each item in an inventory.
    When you can imagine many such uses for a new abstraction, add it to a library
    of useful functions to have around. Of course, it is quite likely that someone
    else has thought of it and the function is already a part of the language. For
    a function like map1, see [Using Abstractions](#%28part._ch~3a3use%29).
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Number](part_one.html#%28tech._number%29) -> [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; tabulates [sin](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sin%29%29)
    between n &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; and 0 (incl.) in a list &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (tab-sin n)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([sin](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sin%29%29) 0))]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       ([sin](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sin%29%29) n)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       (tab-sin ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Number](part_one.html#%28tech._number%29) -> [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; tabulates [sqrt](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqrt%29%29)
    between n &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; and 0 (incl.) in a list &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (tab-sqrt n)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([sqrt](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqrt%29%29) 0))]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       ([sqrt](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqrt%29%29) n)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       (tab-sqrt ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 88: The similar functions for [exercise 250](#%28counter._%28exercise._ex~3aabs-tabulate%29%29)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [Number](part_one.html#%28tech._number%29) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; computes the sum of &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; the numbers on l &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sum l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) 0]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;         (sum ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [Number](part_one.html#%28tech._number%29) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; computes the product of &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; the numbers on l &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (product l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) 1]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;         (product ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 89: The similar functions for [exercise 251](#%28counter._%28exercise._ex~3aabs-sum-prod%29%29)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 250\. Design tabulate, which is the abstraction of the two functions
    in [figure 88](#%28counter._%28figure._fig~3aex~3aabs-tabulate%29%29). When tabulate
    is properly designed, use it to define a tabulation function for [sqr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqr%29%29)
    and [tan](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._tan%29%29).
    [![image](../Images/54620d06e62217264b8f80bd1cfea7fb.jpg)](#%28counter._%28exercise._ex~3aabs-tabulate%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 251\. Design fold1, which is the abstraction of the two functions in
    [figure 89](#%28counter._%28figure._fig~3aex~3aabs-sum-prod%29%29). [![image](../Images/fe2da6a6133d7e44b49a016de60ec616.jpg)](#%28counter._%28exercise._ex~3aabs-sum-prod%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 252\. Design fold2, which is the abstraction of the two functions in
    [figure 90](#%28counter._%28figure._fig~3aex~3afold2%29%29). Compare this exercise
    with [exercise 251](#%28counter._%28exercise._ex~3aabs-sum-prod%29%29). Even though
    both involve the product function, this exercise poses an additional challenge
    because the second function, image*, consumes a list of [Posn](part_one.html#%28tech._posn%29)s
    and produces an [Image](part_one.html#%28tech._image%29). Still, the solution
    is within reach of the material in this section, and it is especially worth comparing
    the solution with the one to the preceding exercise. The comparison yields interesting
    insights into abstract signatures. [![image](../Images/ac985e10b831ff288335d2fcb5d09270.jpg)](#%28counter._%28exercise._ex~3afold2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [Number](part_one.html#%28tech._number%29) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (product l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) 1]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;         (product &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    -> [Image](part_one.html#%28tech._image%29) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (image* l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) emt]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      (place-dot &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       (image* ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [Posn](part_one.html#%28tech._posn%29)  [Image](part_one.html#%28tech._image%29)
    -> [Image](part_one.html#%28tech._image%29) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (place-dot p img)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      dot &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([posn-x](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-x%29%29) p) ([posn-y](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-y%29%29) p)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      img)) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; graphical constants:     &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) emt
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 100 100))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) dot
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 3 "solid" "red"))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 90: The similar functions for [exercise 252](#%28counter._%28exercise._ex~3afold2%29%29)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Lastly, when you are dealing with data definitions, the abstraction process
    proceed in an analogous manner. The extra parameters to data definitions stands
    for collections of values, and testing means spelling out a data definition for
    some concrete examples. All in all, abstracting over data definitions tends to
    be easier than abstracting over functions, and so we leave it to you to adapt
    the design recipe appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: 15.2Similarities in Signatures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As it turns out, a function’s signature is key to its reuse. Hence, you must
    learn to formulate signatures that describes abstracts in their most general terms
    possible. To understand how this works, we start with a second look at signatures
    and from the simple—<wbr>though possibly startling—<wbr>insight that signatures
    are basically data definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Both signatures and data definitions specify a class of data; the difference
    is that data definitions also name the class of data while signatures don’t. Nevertheless,
    when you write down
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29)  [Boolean](part_one.html#%28tech._boolean%29)
    -> [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f n b) "hello
    world") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: your first line describes an entire class of data, and your second one states
    that f belongs to that class. To be precise, the signature describes the class
    of all functions that consume a [Number](part_one.html#%28tech._number%29) and
    a [Boolean](part_one.html#%28tech._boolean%29) and yield a [String](part_one.html#%28tech._string%29).
  prefs: []
  type: TYPE_NORMAL
- en: In general, the arrow notation of signatures is like the [List-of](#%28tech._sim-dd._list._of%29)
    notation from [Similarities in Data Definitions](#%28part._sim-dd._sec~3add-similarities%29).
    The latter consumes (the name of) one class of data, say X, and describes all
    lists of X items—<wbr>without assigning it a name. The arrow notation consumes
    an arbitrary number of classes of data and describes collections of functions.
  prefs: []
  type: TYPE_NORMAL
- en: What this means is that the abstraction design recipe applies to signatures,
    too. You compare similar signatures; you highlight the differences; and then you
    replace those with parameters. But the process of abstracting signatures feels
    more complicated than the one for functions, partly because signature are already
    abstract pieces of the design recipe and partly because the arrow-based notation
    is much more complex than anything else we have encountered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us start with the signatures of cf* and names:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/686a654a081729392c8fd79eed648a8a.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'The diagram is the result of the compare-and-contrast step. Comparing the two
    signatures shows that they differ in two places: to the left of the arrow, we
    see [Number](part_one.html#%28tech._number%29) versus [IR](#%28tech._ir%29) and
    to its right, it is [Number](part_one.html#%28tech._number%29) versus [String](part_one.html#%28tech._string%29).If
    we replace the two differences with some kind of parameters, say X and Y, we get
    the same signature:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [X Y] [[List-of](#%28tech._sim-dd._list._of%29) X] -> [[List-of](#%28tech._sim-dd._list._of%29)
    Y]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The new signature starts with a sequence of variables, drawing an analogy to
    function definitions and the data definitions above. Roughly speaking, these variables
    are the parameters of the signature, like those of functions and data definitions.
    To make the latter concrete, the variable sequence is like ITEM in the definition
    of [List-of](#%28tech._sim-dd._list._of%29) or the X and Y in the definition of
    [CP](#%28tech._sim-dd._cp%29) from [Similarities in Data Definitions](#%28part._sim-dd._sec~3add-similarities%29).
    And just like those, X and Y range over classes of values.An instantiation of
    this parameter list is the rest of the signature with the parameters replaced
    by the data collections: either their names or other parameters or abbreviations
    such as [List-of](#%28tech._sim-dd._list._of%29) from above. Thus, if you replace
    both X and Y with [Number](part_one.html#%28tech._number%29), you get back the
    signature for cf*:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you choose [IR](#%28tech._ir%29) and [String](part_one.html#%28tech._string%29),
    you get back the signature for names:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [[List-of](#%28tech._sim-dd._list._of%29)  [IR](#%28tech._ir%29)] -> [[List-of](#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'And that explains why we may consider this parametrized signature as an abstraction
    of the original signatures for cf* and names.Once we add the extra function parameter
    to these two functions we get map1 and the signatures are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/a1c17435a05f471791063b77785eb939.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Again, the signatures are in pictorial form and with arrows connecting the corresponding
    differences. These mark-ups suggest that the differences in the second argument—<wbr>a
    function—<wbr>are related to the differences in the original signatures. Specifically,
    [Number](part_one.html#%28tech._number%29) and [IR](#%28tech._ir%29) on the left
    of the new arrow refer to items on the first argument—<wbr>a list—<wbr>and the
    [Number](part_one.html#%28tech._number%29) and [String](part_one.html#%28tech._string%29)
    on the right refer to the items on the result—<wbr>also a list.
  prefs: []
  type: TYPE_NORMAL
- en: Since listing the parameters of a signature is extra work for our purposes,
    we simply say that from now on all variables in signatures are parameters. Other
    programming languages, however, insist on explicitly listing the parameters of
    signatures, but in return you can articulate additional constraints in such signatures
    and the signatures are checked before you run the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s apply the same trick to get a signature for map1:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [X Y] [[List-of](#%28tech._sim-dd._list._of%29) X] [X -> Y] -> [[List-of](#%28tech._sim-dd._list._of%29)
    Y]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Concretely, map1 consumes a list of items, all of which belong to some (yet
    to be determined) collection of data called X. It also consumes a function that
    consumes elements of X and produces elements of a second unknown collection, called
    Y. The result of map1 are lists that contain items from Y.Abstracting over signatures
    takes practice. Here is a second pair:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]    ->
    [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'They are the signatures for product and image* in [exercise 252](#%28counter._%28exercise._ex~3afold2%29%29).
    While the two signatures have some common organization, the differences are distinct.
    Let us first spell out the common organization in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: both signatures describe one-argument functions;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: both argument descriptions employ the [List-of](#%28tech._sim-dd._list._of%29)
    construction;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In contrast to the first example, here one signature refers to [Number](part_one.html#%28tech._number%29)
    twice while the second one refers to [Posn](part_one.html#%28tech._posn%29)s and
    [Image](part_one.html#%28tech._image%29)s in analogous positions. A structural
    comparison shows that the first occurrence of [Number](part_one.html#%28tech._number%29)
    corresponds to [Posn](part_one.html#%28tech._posn%29) and the second one to [Image](part_one.html#%28tech._image%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/cbf785bdaebf82ef87fe44f9a1c00b13.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'To make progress on a signature for the abstraction of the two functions in
    [exercise 252](#%28counter._%28exercise._ex~3afold2%29%29), let’s take the first
    two steps of the design recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (pr* l bs jn)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) bs]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      (jn ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          (pr* ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;               bs &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;               jn))])) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (im* l bs jn)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) bs]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      (jn ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          (im* ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;               bs &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;               jn))])) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Since the two functions differ in two pairs of values, the revised versions
    consume two additional values: one is an atomic value, to be used in the base
    case, and the other one is a function that joins together the result of the natural
    recursion with the first item on the given list.The key is to translate this insight
    into two signatures for the two new functions. When you do so for pr*, you get'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29) [[Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Number](part_one.html#%28tech._number%29)] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; -> [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: because the result in the base case is a number and the function that combines
    the first item and the natural recursion is [+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)
    in the original function. Similarly, for im* the signature is
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    [Image](part_one.html#%28tech._image%29) [[Posn](part_one.html#%28tech._posn%29)  [Image](part_one.html#%28tech._image%29)
    -> [Image](part_one.html#%28tech._image%29)] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As you can see from the function definition for im*, the base case returns
    an image and the combination function is place-dot, which combines a [Posn](part_one.html#%28tech._posn%29)
    and an [Image](part_one.html#%28tech._image%29) into an [Image](part_one.html#%28tech._image%29).Now
    we take the diagram from above and extend it to the signatures with the additional
    inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/58950da29b375acdde3ed418f2938497.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'From this diagram, you can easily see that the two revised signatures share
    even more organization than the original two. Furthermore, the pieces that describe
    the base cases correspond to each other and so do the pieces of the sub-signature
    that describe the combination function. All in all there are six pairs of differences
    but they boil down to just two:'
  prefs: []
  type: TYPE_NORMAL
- en: some occurrences of [Number](part_one.html#%28tech._number%29) correspond to
    [Posn](part_one.html#%28tech._posn%29)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: and other occurrences of [Number](part_one.html#%28tech._number%29) correspond
    to [Image](part_one.html#%28tech._image%29).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So to abstract we need two variables, one per kind of correspondence.Here then
    is the signature for fold2, the abstraction from [exercise 252](#%28counter._%28exercise._ex~3afold2%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: ; [X Y] [[List-of](#%28tech._sim-dd._list._of%29) X] Y [X Y -> Y] -> Y
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Stop! Make sure that replacing both parameters of the signature, X and Y, with
    [Number](part_one.html#%28tech._number%29) yields the signature for pr* and that
    replacing the same variables with [Posn](part_one.html#%28tech._posn%29) and [Image](part_one.html#%28tech._image%29),
    respectively, yields the signature for im*.The two examples illustrate how to
    find general signatures. In principle the process is just like the one for abstracting
    functions. Due to the informal nature of signatures, however, it cannot be checked
    with running examples the way code is checked. Here is step-by-step formulation:'
  prefs: []
  type: TYPE_NORMAL
- en: Given two similar function definitions, f and g, compare their signatures for
    similarities and differences. The goal is to discover the organization of the
    signature and to mark the places where one signature differs from the other. Connect
    the differences as pairs just like you do when you analyze function bodies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Abstract f and g into f-abs and g-abs. That is, add parameters that eliminate
    the differences between f and g. Create signatures for f-abs and g-abs. Keep in
    mind what the new parameters originally stood for; this helps you figure out the
    new pieces of the signatures.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check whether the analysis of step 1 extends to the signatures of f-abs and
    g-abs. If so, replace the differences with variables that range over classes of
    data. Once the two signatures are the same you have a signature for the abstracted
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the abstract signature. First, ensure that suitable substitutions of the
    variables in the abstract signature yield the signatures of f-abs and g-abs. Second,
    check that the generalized signature is in sync with the code. For example, if
    p is a new parameter and its signature is
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ; ... [A B -> C] ....
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: then p must always be applied to two arguments, the first one from A and the
    second one from B. And the result of an application of p is going to be a C and
    should be used where elements of C are expected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As with abstracting functions, the key is to compare the concrete signatures
    of the examples and to determine the similarities and differences. With enough
    practice and intuition, you will soon be able to abstract signatures without much
    guidance.Exercise 253\. Each of these signatures describes a class of functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[Number](part_one.html#%28tech._number%29) -> [Boolean](part_one.html#%28tech._boolean%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[Boolean](part_one.html#%28tech._boolean%29)  [String](part_one.html#%28tech._string%29)
    -> [Boolean](part_one.html#%28tech._boolean%29)] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Number](part_one.html#%28tech._number%29)] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[Number](part_one.html#%28tech._number%29) -> [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [Boolean](part_one.html#%28tech._boolean%29)] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Describe these collections with at least one example from ISL. [![image](../Images/3779ffed725741c0a69a5d0d31062e8a.jpg)](#%28counter._%28exercise._ex~3aarrows-dd%29%29)Exercise 254\.
    Formulate signatures for the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: sort-n, which consumes a list of numbers and a function that consumes two numbers
    (from the list) and produces a [Boolean](part_one.html#%28tech._boolean%29); sort-n
    produces a sorted list of numbers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sort-s, which consumes a list of strings and a function that consumes two strings
    (from the list) and produces a [Boolean](part_one.html#%28tech._boolean%29); sort-s
    produces a sorted list of strings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then abstract over the two signatures, following the above steps. Also show
    that the generalized signature can be instantiated to describe the signature of
    a sort function for lists of [IR](#%28tech._ir%29)s. [![image](../Images/4f9a50d815e86229b21f156458bd16bd.jpg)](#%28counter._%28exercise._ex~3afancy-signatures1%29%29)Exercise 255\.
    Formulate signatures for the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: map-n, which consumes a list of numbers and a function from numbers to numbers
    to produce a list of numbers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: map-s, which consumes a list of strings and a function from strings to strings
    and produces a list of strings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then abstract over the two signatures, following the above steps. Also show
    that the generalized signature can be instantiated to describe the signature of
    the map-IR function above. [![image](../Images/b5acbf21a050dbdd6c86e81903808c79.jpg)](#%28counter._%28exercise._ex~3afancy-signatures2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 15.3Single Point of Control
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In general, programs are like drafts of papers. Editing drafts is important
    to correct typos, to fix grammatical mistakes, to make the document consistent,
    and to eliminate repetitions. Nobody wants to read papers that repeat themselves
    a lot, and nobody wants to read such programs either.
  prefs: []
  type: TYPE_NORMAL
- en: The elimination of similarities in favor of abstractions has many advantages.
    Creating an abstraction simplifies definitions. It may also uncover problems with
    existing functions, especially when similarities aren’t quite right. But, the
    single most important advantage is the creation of single points of control for
    some common functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Putting the definition for some functionality in one place makes it easy to
    maintain a program. When you discover a mistake, you have to go to just one place
    to fix it. When you discover that the code should deal with another form of data,
    you can add the code to just one place. When you figure out an improvement, one
    change improves all uses of the functionality. If you had made copies of the functions
    or code in general, you would have to find all copies and fix them; otherwise
    the mistake might live on or the only one of the functions would run faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'We therefore formulate this guideline:'
  prefs: []
  type: TYPE_NORMAL
- en: Form an abstraction instead of copying and modifying any code.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Our design recipe for abstracting functions is the most basic tool to create
    abstractions. To use it requires practice. As you practice, you expand your capabilities
    to read, organize, and maintain programs. The best programmers are those who actively
    edit their programs to build new abstractions so that they collect things related
    to a task at a single point. Here we use functional abstraction to study this
    practice; in other courses on programming, you will encounter other forms of abstraction,
    most importantly inheritance in class-based object-oriented languages.
  prefs: []
  type: TYPE_NORMAL
- en: 15.4Abstractions from Templates
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The first two chapters present many functions based on the same template. After
    all, the design recipe says to organize functions around the organization of the
    (major) input data definition. It is therefore not surprising that many function
    definitions look similar to each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Indeed, you should abstract from the templates directly, you should do so automatically,
    and some experimental programming languages do so. Even though this topic is still
    a subject of research, you are now in a position to understand the basic idea.
    Consider the template for lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (fun-for-l l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (fun-for-l ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It contains two gaps, one in each clause. When you use this template to define
    a list-processing function, you usually fill these gaps with a value in the first
    [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause and with a function combine in the second clause. The combine function
    consumes the first item of the list and the result of the natural recursion and
    creates the result from these two pieces of data.Now that you know how to create
    abstractions, you can complete the definition of the abstraction from this informal
    description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [X Y] [[List-of](#%28tech._sim-dd._list._of%29) X] Y [X Y -> Y] -> Y |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (reduce l base combine)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) base]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (combine ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                    (reduce ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) base combine))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It consumes two extra arguments: base, which is the value for the base case,
    and combine, which is the function that performs the value combination for the
    second clause.Using reduce you can define many plain list-processing functions
    as “one liners.” Here are definitions for sum and product, two functions used
    several times in the first few sections of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [Number](part_one.html#%28tech._number%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sum lon)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (reduce lon 0 [+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [Number](part_one.html#%28tech._number%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (product lon)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (reduce lon 1 [*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For sum, the base case always produces 0; adding the first item and the result
    of the natural recursion combines the values of the second clause. Analogous reasoning
    explains product. Other list-processing functions can be defined in a similar
    manner using reduce.
  prefs: []
  type: TYPE_NORMAL
- en: 16Using Abstractions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have abstractions, you should use them when possible. They create single
    points of control, and they are a work-saving device. More precisely, the use
    of an abstraction helps readers of your code to understand your intentions. If
    the abstraction is well-known and built into the language or comes with its standard
    libraries, it signals more clearly what your function does than custom-designed
    code.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is all about the reuse of existing ISL abstractions. It starts
    with a section on existing ISL abstractions, some of which you have seen under
    false names. The remaining sections are about re-using such abstractions. One
    key ingredient is a new syntactic construct, [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29),
    for defining functions and variables (and even structure types) locally within
    a function. An auxiliary ingredient, introduced in the last section, is the [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    construct for creating nameless functions; [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    is a convenience but inessential to the idea of re-using abstract functions.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [X] [N](part_two.html#%28tech._n%29) [[N](part_two.html#%28tech._n%29)
    -> X] -> [[List-of](#%28tech._sim-dd._list._of%29) X] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; constructs a list by applying f to 0, 1, ..., ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29)  n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29)  n  f)  ==  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  (f  0)  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  (f  ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  1)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29) n f) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [X] [X -> [Boolean](part_one.html#%28tech._boolean%29)] [[List-of](#%28tech._sim-dd._list._of%29)
    X] -> [[List-of](#%28tech._sim-dd._list._of%29) X] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a list from those items on lx for which p holds |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) p lx) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [X] [[List-of](#%28tech._sim-dd._list._of%29) X] [X X -> [Boolean](part_one.html#%28tech._boolean%29)]
    -> [[List-of](#%28tech._sim-dd._list._of%29) X] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a version of lx that is sorted according to cmp |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) lx cmp) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [X Y] [X -> Y] [[List-of](#%28tech._sim-dd._list._of%29) X] -> [[List-of](#%28tech._sim-dd._list._of%29)
    Y] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; constructs a list by applying f to each item on lx |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)  f  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  x-1  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  x-n))  ==  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  (f  x-1)  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  (f  x-n))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) f lx) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [X] [X -> [Boolean](part_one.html#%28tech._boolean%29)] [[List-of](#%28tech._sim-dd._list._of%29)
    X] -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines whether p holds for every item on lx |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)  p  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  x-1  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  x-n))  ==  ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)  (p  x-1)  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  (p  x-n))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29) p lx) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [X] [X -> [Boolean](part_one.html#%28tech._boolean%29)] [[List-of](#%28tech._sim-dd._list._of%29)
    X] -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines whether p holds for at least one item on lx |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ([ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)  p  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  x-1  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  x-n))  ==  ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29)  (p  x-1)  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  (p  x-n))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29) p lx) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 91: ISL''s abstract functions for list-processing (1)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 16.1Existing Abstractions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'ISL provides a number of abstract functions for processing natural numbers
    and lists. [Figure 91](#%28counter._%28figure._fig~3aisl-ho-list%29%29) collects
    the header material for the most important ones. The first one processes natural
    numbers and builds lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29) 3 [add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 1 2 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The next three process lists and produce lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) [odd?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._odd~3f%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3 4 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 1 3 5) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 2 1 4 5) [>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 5 4 3 2 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) [add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 2 3 3 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 2 3 3 4 4 4) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In contrast, [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    and [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    reduce lists to a [Boolean](part_one.html#%28tech._boolean%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29) [odd?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._odd~3f%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3 4 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29) [odd?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._odd~3f%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3 4 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Hence, this kind of computation is called a reduction.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [X Y] [X Y -> Y] Y [[List-of](#%28tech._sim-dd._list._of%29) X] -> Y |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; applies f from right to left to each item in lx and b |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)  f  b  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  x-1  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  x-n))  ==  (f  x-1  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  (f  x-n  b))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) f b lx) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) [+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 0 ''(1 2 3 4 5))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 1 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 2 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 3 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 4 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 5 0)))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 1 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 2 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 3 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 4 5))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 1 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 2 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 3 9)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 1 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 2 12))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 1 14)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [X Y] [X Y -> Y] Y [[List-of](#%28tech._sim-dd._list._of%29) X] -> Y |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; applies f from left to right to each item in lx and b |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ([foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)  f  b  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  x-1  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  x-n))  ==  (f  x-n  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  (f  x-1  b))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29) f b lx) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29) [+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 0 ''(1 2 3 4 5))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 5 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 4 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 3 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 2 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 1 0)))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 5 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 4 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 3 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 2 1))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 5 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 4 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 3 3)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 5 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 4 6))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 5 10)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 92: ISL''s abstract functions for list-processing (2)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The two functions in [figure 92](#%28counter._%28figure._fig~3aisl-ho-list2%29%29),
    [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    and [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29),
    are extremely powerful. Both reduce lists to values. The sample computations explain
    the abstract examples in the headers of [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    and [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)
    via an application of the functions to [+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29),
    0, and a short list. As you canMathematics calls functions associative if the
    order makes no difference. ISL’s [=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29)
    is associative on integers but not on inexacts. See below. see, [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    processes the list values from right to left and [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)
    from left to right. While for some functions the direction makes no difference,
    this isn’t true in general.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 256\. Explain the following abstract function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [X] [X -> [Number](part_one.html#%28tech._number%29)] [[NEList-of](#%28tech._sim-dd._nelist._of%29)
    X] -> X |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds the (first) item in lx that maximizes  f |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if ([argmax](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._argmax%29%29)  f  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  x-1  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  x-n))  ==  x-i,
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; then ([>=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e~3d%29%29)  (f  x-i)  (f  x-1)),
    ([>=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e~3d%29%29)  (f  x-i)  (f  x-2)),
    ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([argmax](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._argmax%29%29) f lx) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Use it on concrete examples in ISL. Can you articulate an analogous purpose
    statement for [argmin](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._argmin%29%29)?
    [![image](../Images/d356756c90fa6bcb88fc4283947116a4.jpg)](#%28counter._%28exercise._ex~3aarg-min-max%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) address [first-name last-name street])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Addr is a structure: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-address  [String](part_one.html#%28tech._string%29)  [String](part_one.html#%28tech._string%29)  [String](part_one.html#%28tech._string%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation associates an address with a person''s name |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Addr](#%28tech._addr%29)] ->
    [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a string from first names, |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; sorted in alphabetical order, |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; separated and surrounded by blank spaces |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (listing l)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) string-append-with-space "
    " |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) address-first-name l) [string<?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3c~3f%29%29))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [String](part_one.html#%28tech._string%29)  [String](part_one.html#%28tech._string%29)
    -> [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; appends two strings, prefixes with " " |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (string-append-with-space s t)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29) "
    " s t)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ex0
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) (make-address "Robert"   "Findler" "South")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         (make-address "Matthew"  "Flatt"   "Canyon") |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         (make-address "Shriram"  "Krishna" "Yellow"))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (listing ex0) "
    Matthew Robert Shriram ") |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 93: Creating program with abstractions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 93](#%28counter._%28figure._fig~3alist-of-names%29%29) illustrates
    the power of composing the functions from [figures 91](#%28counter._%28figure._fig~3aisl-ho-list%29%29)
    and [92](#%28counter._%28figure._fig~3aisl-ho-list2%29%29). Its main function
    is listing. The purpose is to create a string from a list of addresses. Its purpose
    statement suggests three tasks and thus the design of three functions:'
  prefs: []
  type: TYPE_NORMAL
- en: one that extracts the first names from the given list of Addr;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: one that sorts these names in alphabetical order; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: one that concatenates the strings from step 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before you read on, you may wish to execute this plan. That is, design all
    three functions and then compose them in the sense of [Composing Functions](part_two.html#%28part._sec~3acompounding2%29)
    to obtain your own version of listing.In the new world of abstractions, it is
    possible to design a single function that achieves the same goal. Take a close
    look at the innermost expression of listing in [figure 93](#%28counter._%28figure._fig~3alist-of-names%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) address-first-name l)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'By the purpose statement of [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29),
    it applies address-first-name to every single instance of address producing a
    list of first names as strings. Here is the immediately surrounding expression:'
  prefs: []
  type: TYPE_NORMAL
- en: ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29) [string<?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3c~3f%29%29))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The dots represent the result of the [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    expression. Since the latter supplies a list of strings, the [sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29)
    expression produces a sorted list of first names. And that leaves us with the
    outermost expression:'
  prefs: []
  type: TYPE_NORMAL
- en: ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) string-append-with-space "
    " [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This one reduces the sorted list of first names to a single string, using a
    function named string-append-with-space. With such a suggestive name, you can
    easily imagine now that this reduction concatenates all the strings in the desired
    way—<wbr>even if you do not quite understand how the combination of [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    and string-append-with-space works.Exercise 257\. You can design [build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29)
    and [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)
    with the design recipes that you know, but they are not going to be like the ones
    that ISL provides. For example, the design of your own [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)
    function requires a use of the list [reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29)
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [X Y] [X Y -> Y] Y [[List-of](#%28tech._sim-dd._list._of%29) X] -> Y |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; f*oldl works just like [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (f*oldl [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ''() ''(a b c))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29) [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ''() ''(a b c)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (f*oldl [/](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2F%29%29) 1 ''(6 3 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29) [/](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2F%29%29) 1 ''(6 3 2)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f*oldl f [e](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._e%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) f [e](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._e%29%29) ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29) l)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Design build-l*st, which works just like [build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29).
    Hint Recall the add-at-end function from [exercise 193](part_two.html#%28counter._%28exercise._ex~3adraw-poly0%29%29).
    Note on Design [Accumulators](part_six.html) covers the concepts needed to design
    these functions from scratch. [![image](../Images/9dceda4e8c5df00acc73f9516dbf9079.jpg)](#%28counter._%28exercise._ex~3adesigning-build-list%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 16.2Local Definitions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s take a second look at [figure 93](#%28counter._%28figure._fig~3alist-of-names%29%29).
    The string-append-with-space function clearly plays a subordinate role and has
    no use outside of this narrow context. Furthermore, the organization of the function
    body does not reflect the three tasks identified above.
  prefs: []
  type: TYPE_NORMAL
- en: Almost all programming languages support some way for stating these kinds of
    relationships as a part of a program. The idea is called a local definition, also
    called a private definition. In ISL, [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expressions introduce locally defined functions, variables, and structure types.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section introduces the mechanics of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29).
    In general, a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression has this shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (def [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ; —<wbr> IN —<wbr> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   body-expression) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The evaluation of such an expression proceeds like the evaluation of a complete
    program. First, the definitions are set up, which may involve the evaluation of
    the right-hand side of a constant definition. Just as with the top-level definitions
    that you know and love, the definitions in a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression may refer to each other. They may also refer to parameters of the surrounding
    function. Second, the body-expression is evaluated and it becomes the result of
    the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression. It is often helpful to separate the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    defs from the body-expression with a comment; as indicated, we may use —<wbr>
    IN —<wbr> because the word suggests that the definitions are available in a certain
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Addr](#%28tech._addr%29)] ->
    [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a string of first names, |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; sorted in alphabetical order, |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; separated and surrounded by blank spaces |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (listing.v2 l)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; 1\.
    extract names |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) names  ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) address-first-name l))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; 2\. sort the names |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) sorted ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) names [string<?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3c~3f%29%29)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; 3\. append them, add spaces |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [String](part_one.html#%28tech._string%29)  [String](part_one.html#%28tech._string%29)
    -> [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; appends two strings, prefix with " " |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (helper s t)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29) "
    " s t)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) concat+spaces
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) helper "
    " sorted))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     concat+spaces)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 94: Organizing a function with [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 94](#%28counter._%28figure._fig~3alisting2%29%29) shows a revision
    of [figure 93](#%28counter._%28figure._fig~3alist-of-names%29%29) using [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29).
    The body of the listing.v2 function is now a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression, which consists of two pieces: a sequence of definitions and a body
    expression. The sequence of local definitions looks exactly like a sequence in
    DrRacket’s definitions area.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the sequence of definitions consists of four pieces: three
    constant definitions and a single function definition. Each constant definition
    represents one of the three planning tasks. The function definition is a renamed
    versionSince the names are visible only within the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression, shortening the name is fine. of string-append-with-space; it is used
    with [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    to implement the third task. The body of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    is just the name of the third task.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The visually most appealing difference concerns the overall organization. It
    clearly brings across that the function achieves three tasks and in which order.
    As a matter of fact, this example demonstrates a general principle of readability:'
  prefs: []
  type: TYPE_NORMAL
- en: Use [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    to reformulate deeply nested expressions. Use well-chosen names to express what
    the expressions compute.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Future readers appreciate it because they can comprehend the code by looking
    at just the names and the body of the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression.Note on Organization A [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expressions is really just an expression. It may show up wherever a regular expression
    shows up. Hence it is possible to indicate precisely where an auxiliary function
    is needed. Consider this re-organization of the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression of listing2:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) names  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) sorted [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) concat+spaces
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [String](part_one.html#%28tech._string%29)  [String](part_one.html#%28tech._string%29)
    -> [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                       ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (helper s t)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                         ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29) "
    " s t))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) helper "
    " sorted)))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       concat+spaces) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It consists of exactly three definitions, suggesting it takes three computation
    steps. The third definition consists of a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression on the right-hand side, which expresses that helper is really just
    needed for the third step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether you want to express relationships among the pieces of a program with
    such precision, depends on two constraints: the programming language and how long
    the code is expected to live. Some languages cannot even express the idea that
    helper is useful for the third step only. Then again, you need to balance the
    time it takes to create the program and the expectation that you or someone needs
    to revisit it and comprehend the code again. The preference of the Racket team
    is to err on the side of future developers, because the team members know that
    no program is ever finished and all programs will need fixing. End'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    [[Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Boolean](part_one.html#%28tech._boolean%29)] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; -> [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a version of alon, sorted according to cmp |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sort-cmp alon0 cmp)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; produces the sorted version of alon |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (isort alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                (insert ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon) (isort ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Number](part_one.html#%28tech._number%29) [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; inserts n into the sorted list of numbers alon |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (insert n alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) n ''())]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) (cmp n ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                         ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) n alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                         ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                               (insert n ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon))))])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (isort alon0))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 95: Organizing interconnected function definitions with [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 95](#%28counter._%28figure._fig~3asort-local%29%29) presents a second
    example. The organization of this function definition informs the reader that
    sort-cmp calls on two auxiliary functions: isort and insert. By locality, it becomes
    obvious that the adjective “sorted” in the purpose statement of insert refers
    to isort. In other words, insert is useful in this context only; a programmer
    should not try to use it elsewhere, out of context. While this constraint is already
    important in the original definition of the sort-cmp function, a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression expresses it as part of the program.'
  prefs: []
  type: TYPE_NORMAL
- en: Another important aspect of this re-organization of sort-cmp’s definition concerns
    the visibility of cmp, the second function parameter. The locally defined functions
    can refer to cmp because it is defined in the context of the definitions. By not
    passing around cmp from isort to insert (or back), the reader can immediately
    infer that cmp remains the same throughout the sorting process.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 258\. Use a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression to organize the functions for drawing a polygon in [figure 69](part_two.html#%28counter._%28figure._fig~3adraw-poly%29%29).
    If a globally defined functions is widely useful, do not make it local. [![image](../Images/45e2a8e26e94a8e5b2824e302cd2a519.jpg)](#%28counter._%28exercise._ex~3adraw-poly-local%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 259\. Use a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression to organize the functions for rearranging words from [Word Games, the
    Heart of the Problem](part_two.html#%28part._sec~3apermute%29). [![image](../Images/b693b3c75a4aa8aaf29167da6be11022.jpg)](#%28counter._%28exercise._ex~3apermute-local%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Nelon](#%28tech._nelon%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines the smallest number on l |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (inf.v2 l)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) smallest-in-rest (inf.v2 ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) smallest-in-rest)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|            ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|            smallest-in-rest))])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 96: Using [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    may improve performance'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Our final example of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)’s
    usefulness concerns performance. Consider the definition of inf in [figure 85](#%28counter._%28figure._fig~3aex-abs-min-max%29%29).
    It contains two copies of
  prefs: []
  type: TYPE_NORMAL
- en: (inf ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the natural recursion in the second [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    line. Depending on the outcome of the question, the expression is evaluated twice.
    Using [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    to name this expression yields both an improvement to the function’s readability
    as well as its performance.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 96](#%28counter._%28figure._fig~3alocal-performance%29%29) displays
    the revised version. Here the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression shows up in the middle of a [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    expression. It defines a constant whose value is the result of a natural recursion.
    Now recall that the evaluation of a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression evaluates the definitions once before proceeding to the body, meaning
    (inf  ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  l))
    is evaluated once while the body of the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression refers to the result twice. Thus, [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    saves the re-evaluation of (inf  ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  l))
    at each stage in the computation.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 260\. Confirm the insight about the performance of inf.v2 by repeating
    the performance experiment of [exercise 238](#%28counter._%28exercise._ex~3aabs-min-max%29%29).
    [![image](../Images/9ca843e38bc15544b9c26c223b848970.jpg)](#%28counter._%28exercise._ex~3aabs-min-max-local%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Inventory](#%28tech._inventory%29) -> [Inventory](#%28tech._inventory%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates an [Inventory](#%28tech._inventory%29) from an-inv for all |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; those items that cost less than a dollar |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (extract1 an-inv)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) an-inv) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        [([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (ir-price ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) an-inv)) 1.0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) an-inv) (extract1 ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) an-inv)))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (extract1 ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) an-inv))])]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 97: A function on inventories, see [exercise 261](#%28counter._%28exercise._ex~3alocal-interm1%29%29)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 261\. Consider the function definition in [figure 97](#%28counter._%28figure._fig~3aex~3alocal-interm1%29%29).
    Both clauses in the nested [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    expression extract the first item from an-inv and both compute (extract1  ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  an-inv)).
    Use [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    to name this expression. Does this help increase the speed at which the function
    computes its result? Significantly? A little bit? Not at all? [![image](../Images/651f83f1cce7cf75d1c8af3e7b04004a.jpg)](#%28counter._%28exercise._ex~3alocal-interm1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 16.3... Add Expressive Power
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The third and last example illustrates how [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    adds expressive power to BSL and BSL+. [Finite State Machines](part_two.html#%28part._sec~3asec-fsm-list%29)
    presents the design of a world program that simulates how a finite state machine
    recognizes sequences of key strokes. While the data analysis leads in a natural
    manner to the data definitions in [figure 78](part_two.html#%28counter._%28figure._fig~3afsm1%29%29),
    an attempt to design the main function of the world program fails. Specifically,
    even though the given finite state machine remains the same over the course of
    the simulation, the state of the world must include it so that the program can
    transition from one state to the next when the player presses a key.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [FSM](part_two.html#%28tech._fsm%29)  [FSM-State](part_two.html#%28tech._fsm._state%29)
    -> [FSM-State](part_two.html#%28tech._fsm._state%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; match the keys pressed by a player with the given [FSM](part_two.html#%28tech._fsm%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (simulate fsm s0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; State
    of the World: [FSM-State](part_two.html#%28tech._fsm._state%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [FSM-State](part_two.html#%28tech._fsm._state%29)  [KeyEvent](part_one.html#%28tech._keyevent%29)
    -> [FSM-State](part_two.html#%28tech._fsm._state%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-next-state s key-event)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             (find fsm s))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) s0
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) state-as-colored-square]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) find-next-state])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [FSM-State](part_two.html#%28tech._fsm._state%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders current state as colored square |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (state-as-colored-square s)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) 100 "solid" s))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [FSM](part_two.html#%28tech._fsm%29)  [FSM-State](part_two.html#%28tech._fsm._state%29)
    -> [FSM-State](part_two.html#%28tech._fsm._state%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds the current state in fsm |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find transitions current)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) transitions) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) "not
    found")] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) s ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) transitions)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) (state=? (transition-current s) current)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             (transition-next s) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             (find ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) transitions) current)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 98: Power from local function definitions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 98](#%28counter._%28figure._fig~3alocal-is-power%29%29) shows an ISL
    solution to the problem. It uses [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    function definitions and can thus equate the state of the world with the current
    state of the finite state machine. Specifically, simulate locally defines the
    key event handler, which consumes only the current state of the world and the
    [KeyEvent](part_one.html#%28tech._keyevent%29) that represents the player’s key
    stroke. Because this locally defined function can refer to the given finite state
    machine fsm, it is possible to find the next state in the transition table—<wbr>even
    though the transition table is not an argument to this function.'
  prefs: []
  type: TYPE_NORMAL
- en: As the figure also shows, all other functions are defined in parallel to the
    main function. This includes the function find, which performs the actual search
    in the transition table. The key improvement over BSL is that a locally defined
    function can reference both parameters to the function and globally defined auxiliary
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: In short, this program organization signals to a future reader exactly the insights
    that the data analysis stage of the design recipe for world programs finds. First,
    the given representation of the finite state machine remains unchanged. Second,
    what changes over the course of the simulation is the current state of the finite
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: The lesson is that the chosen programming language affects a programmer’s ability
    to express solutions, and a future reader’s ability to recognize the design insight
    of the original creator.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 262\. Design the function identityM, which creates diagonal squares
    of 0s and 1s:Linear algebra calls these squares identity matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '| > (identityM 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list (list 1)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (identityM 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list (list 1 0 0) (list 0 1 0) (list 0 0 1)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Use the structural design recipe and exploit the power of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29).
    [![image](../Images/46e498ad1b55f0f77c7bbe78e7757e1c.jpg)](#%28counter._%28exercise._ex~3alocal-for-diagonal%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 16.4Computing with [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'ISL’s [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression calls for the first rule of calculation that is truly beyond pre-algebra
    knowledge. The rule is relatively simple but quite unusual. It’s best illustrated
    with some examples. We start with a second look at this definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (simulate fsm s0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-next-state s key-event)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (find fsm s))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) s0
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) state-as-colored-square]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) find-next-state])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Now suppose we wish to calculate what DrRacket might produce for
  prefs: []
  type: TYPE_NORMAL
- en: (simulate AN-FSM A-STATE)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'where AN-FSM and A-STATE are unknown values. Using the usual substitution rule,
    we proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-next-state s key-event)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           (find AN-FSM s))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) A-STATE
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) state-as-colored-square]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) find-next-state]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This is the body of simulate with all occurrences of fsm and s replaced by
    the argument values AN-FSM and A-STATE, respectively.At this point we are stuck
    because the expression is a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression, and we don’t know how to calculate with it. So here we go. To deal
    with a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression in a program evaluation, we proceed in two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We rename the locally defined constants and functions to use names that aren’t
    used elsewhere in the program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We lift the definitions in the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression to the top-level and evaluate the body of the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Stop! Don’t think. Accept the two steps for now.Let’s apply these two steps
    to our running example, one at a time:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-next-state-1 s key-event)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           (find an-fsm a-state))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) s0
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) state-as-colored-square]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) find-next-state-1]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Our choice is to append “-1” to the end of the function name. If this variant
    of the name already exists, we use “-2” instead, and so on. So here is the result
    of step 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-next-state-1 s key-event)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    (find an-fsm a-state)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/6ade5e3ea8360c17567cf337f5edf8aa.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| We use ![image](../Images/f07d57cbb6f90b1973f4d37813612f5e.jpg) to indicate
    the step produces two pieces. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) s0
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) state-as-colored-square]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29) find-next-state-1])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The result is an ordinary program: some globally defined constants and functions
    followed by an expression. The normal rules apply, and there is nothing else to
    say.At this point, it is time to rationalize the two steps. For the renaming step,
    we use a variant of the inf function from [figure 96](#%28counter._%28figure._fig~3alocal-performance%29%29).
    Clearly,'
  prefs: []
  type: TYPE_NORMAL
- en: (inf ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3)) == 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The question is whether you can show the calculations that DrRacket performs
    to determine this result.The first step is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (inf ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) smallest-in-rest
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              (inf ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3)))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3)) smallest-in-rest)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) smallest-in-rest]))])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We substitute ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  2  1  3)
    for l.Since the list clearly isn’t empty, we skip the steps for evaluating the
    conditional and focus on the next expression to be evaluated:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) smallest-in-rest
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           (inf ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3)))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3)) smallest-in-rest)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) smallest-in-rest]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Applying the two steps for the rule of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    yields two parts: the local definition lifted to the top and the body of the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression. Here is how we write this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) smallest-in-rest-1
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (inf ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/6d199f58ed64724fb3242c09816fc8fc.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3)) smallest-in-rest-1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) smallest-in-rest-1])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Curiously, the next expression we need to evaluate is the right-hand side of
    a constant definition in a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression. But the point of computing is that you can replace expressions with
    their equivalents wherever you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) smallest-in-rest-1
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 3))) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 3))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) smallest-in-rest
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                (inf ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 3)))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 3)) smallest-in-rest)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 3))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) smallest-in-rest]))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/72e09906d48a17a8673808aab9ce607f.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3)) smallest-in-rest-1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) smallest-in-rest-1])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Once again, we skip the conditional steps and focus on the [else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    clause, which is also a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression. Indeed it is another variant of the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression in the definition of inf, with a different list value substituted for
    the parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) smallest-in-rest-1
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) smallest-in-rest
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (inf ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 3)))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 3)) smallest-in-rest)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 3))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) smallest-in-rest])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/89c595265d807a7e2261408516749eb9.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3)) smallest-in-rest-3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) smallest-in-rest-3])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Because it originates from the same [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression in inf, it uses the same name for the constant, smallest-in-rest. If
    we didn’t rename local definitions before lifting them, we would introduce two
    conflicting definitions for the same name, and conflicting definitions are catastrophic
    for mathematical calculations.Here is how we continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) smallest-in-rest-2
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (inf ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 3))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/c14cce247f08d152e38aabbaed788228.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) smallest-in-rest-2
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 3)) smallest-in-rest-2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 3))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) smallest-in-rest-2]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/73f75fbde26c125a6ee1d102c0780f0e.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3)) smallest-in-rest-2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) smallest-in-rest-2])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The key is that we now have two definitions generated from one and the same
    [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression in the function definition. As a matter of fact we get one such definition
    per item in the given list (minus 1).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 263\. Use DrRacket’s stepper to study the steps of this calculation
    in detail. [![image](../Images/d6caa860f9279e12a5009284dd21b0de.jpg)](#%28counter._%28exercise._ex~3acalc-local1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 264\. Use DrRacket’s stepper to calculate out how it evaluates
  prefs: []
  type: TYPE_NORMAL
- en: (sup ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 3))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'where sup is the function from [figure 85](#%28counter._%28figure._fig~3aex-abs-min-max%29%29)
    equipped with [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29).
    [![image](../Images/11f1bfac0626901793c13b30200b37dc.jpg)](#%28counter._%28exercise._ex~3acalc-local2%29%29)For
    the explanation of the lifting step, we use a toy example that gets to the heart
    of the issue, namely, that functions are now values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 4 ([sqr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqr%29%29) x)) 3))) f)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Deep down we know that this is equivalent to (f  1) where
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 4 ([sqr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqr%29%29) x)) 3))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'but the rules of pre-algebra don’t apply. The key is that functions can be
    the result of expressions, including [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expressions. And the best way to think of this is to move such [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    definitions to the top and to deal with them like ordinary definitions. Doing
    so renders the definition visible for every step of the calculation. By now you
    also understand that the renaming step makes sure that the lifting of definitions
    does not accidentally conflate names or introduce conflicting definitions.Here
    are the first two steps of the calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 4 ([sqr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqr%29%29) x)) 3))) f)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f-1 x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 4 ([sqr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqr%29%29) x)) 3)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    f-1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f-1 x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 4 ([sqr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqr%29%29) x)) 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/e5a2cdb48e98bfd877d124b19c0607fd.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (f-1 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Remember that the second step of the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    rule replaces the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression with its body. In this case, the body is just the name of the function
    and its surrounding is an application to 1. The rest is arithmetic:'
  prefs: []
  type: TYPE_NORMAL
- en: (f-1 1) == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 4 ([sqr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqr%29%29) 1)) 3) == 7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 265\. Use DrRacket’s stepper to fill in any gaps above. [![image](../Images/da226ef5a9ec52b7c74ea90d6a3783f0.jpg)](#%28counter._%28exercise._ex~3acalc-local-3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 266\. Use DrRacket’s stepper to find out how ISL evaluates
  prefs: []
  type: TYPE_NORMAL
- en: '| (([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (g x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x 4)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([odd?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._odd~3f%29%29) (f (g 1)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        f |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        g)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: to 5. [![image](../Images/8d466cbc4f3aa1a4c28fdcf79a09d856.jpg)](#%28counter._%28exercise._ex~3acalc-local-4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 16.5Using Abstractions, by Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now that you understand [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29),
    you can easily use the abstractions from [figures 91](#%28counter._%28figure._fig~3aisl-ho-list%29%29)
    and [92](#%28counter._%28figure._fig~3aisl-ho-list2%29%29). Let’s look at examples,
    starting with this one:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design add-3-to-all. The function consumes a list of [Posn](part_one.html#%28tech._posn%29)s
    and adds 3 to the x-coordinates of each.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If we follow the design recipe and take the problem statement as a purpose
    statement, we can quickly step through the first three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    -> [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds 3 to each x-coordinate on the given list |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  (add-3-to-all |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 30 10) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 33 10) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 3 0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-3-to-all lop) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: While you can run the program, doing so signals a failure in the one test case
    because the function returns the default value '().
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we stop and ask what kind of function we are dealing with. Clearly,
    add-3-to-all is clearly a list-processing function. The question is whether it
    is like any of the functions in [figures 91](#%28counter._%28figure._fig~3aisl-ho-list%29%29)
    and [92](#%28counter._%28figure._fig~3aisl-ho-list2%29%29). The signature tells
    us that add-3-to-all is a list-processing function that consumes and produces
    a list. In the two figures, we have several functions with similar signatures:
    [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29),
    [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29),
    and [sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29).'
  prefs: []
  type: TYPE_NORMAL
- en: The purpose statement and example also tell you that add-3-to-all deals with
    each [Posn](part_one.html#%28tech._posn%29) separately and assembles the results
    into a single list. Some reflection says that also confirms that the resulting
    list contains as many items as the given list. All this thinking points to one
    function—<wbr>[map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)—<wbr>because
    the point of [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    is to drop items from the list and [sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29)
    has an extremely specific purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)’s
    signatures again:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [X Y] [X -> Y] [[List-of](#%28tech._sim-dd._list._of%29) X] -> [[List-of](#%28tech._sim-dd._list._of%29)
    Y]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'It tells us that [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    consumes a function from X to Y and a list of Xs. Given that add-3-to-all consumes
    a list of [Posn](part_one.html#%28tech._posn%29)s, we know that X stands for Posn.
    Similarly, add-3-to-all is to produce a list of [Posn](part_one.html#%28tech._posn%29)s,
    and this means we replace Y with [Posn](part_one.html#%28tech._posn%29).From the
    analysis of the signature we conclude that [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    can do the job of add-3-to-all when given the right function from [Posn](part_one.html#%28tech._posn%29)s
    to [Posn](part_one.html#%28tech._posn%29)s. With [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29),
    we can express this idea as a template for add-3-to-all:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-3-to-all lop)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Posn](part_one.html#%28tech._posn%29)
    -> [Posn](part_one.html#%28tech._posn%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (fp p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) p [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) fp lop)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Doing so reduces the problem to defining a function on [Posn](part_one.html#%28tech._posn%29)s.Given
    the example for add-3-to-all and the abstract example for [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29),
    you can actually imagine how the evaluation proceeds:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (add-3-to-all ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 30 10) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) fp ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 30 10) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) (fp ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 30 10)) (fp ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'And that shows how fp is applied to every single [Posn](part_one.html#%28tech._posn%29)
    on the given list, meaning it is its job to add 3 to the x-coordinate.From here,
    it is straightforward to wrap up the definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-3-to-all lop)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Posn](part_one.html#%28tech._posn%29)
    -> [Posn](part_one.html#%28tech._posn%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; adds 3 to the x-coordinate of p |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-3-to-1 p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-x%29%29) p) 3) ([posn-y](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-y%29%29) p))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) add-3-to-1 lop)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We chose add-3-to-1 as the name for the local function because the name tells
    you what it computes. It adds 3 to the x-coordinate of one [Posn](part_one.html#%28tech._posn%29).You
    may now think that using abstractions is hard. Keep in mind, though, that this
    first example spells out every single detail and that it does so because we wish
    to teach you how to pick the proper abstraction. Let us take a look at a second
    example a bit more quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a function that eliminates all [Posn](part_one.html#%28tech._posn%29)s
    from a list that have a y-coordinate of larger than 100.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The first two steps of the design recipe yield this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    -> [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; eliminates [Posn](part_one.html#%28tech._posn%29)s whose y-coordinate is
    [>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29)  100
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  (keep-good ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 110) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 60)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 60)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (keep-good lop) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'By now you may have guessed that this function is like [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    whose purpose is to separate the “good” from the “bad.”With [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    thrown in, the next step is also straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (keep-good lop)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Posn](part_one.html#%28tech._posn%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; should this [Posn](part_one.html#%28tech._posn%29) stay on the
    list |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (good? p) #true))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) good? lop)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    function definition introduces the helper function needed for [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    and the body of the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression applies [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    to this local function and the given list. The local function is called good?
    because [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    retains all those items of lop for which good? produces #true.'
  prefs: []
  type: TYPE_NORMAL
- en: Before you read on, analyze the signature of [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    and keep-good and determine why the helper function consumes individual [Posn](part_one.html#%28tech._posn%29)s
    and produces [Boolean](part_one.html#%28tech._boolean%29)s.
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting all of our ideas together yields this definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (keep-good lop)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Posn](part_one.html#%28tech._posn%29)
    -> [Posn](part_one.html#%28tech._posn%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; should this [Posn](part_one.html#%28tech._posn%29) stay on the
    list |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (good? p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([not](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._not%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-y%29%29) p) 100))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) good? lop)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Explain the definition of good? and simplify it.Before we spell out a design
    recipe, let us deal with one more example:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a function that determines whether any of a list of [Posn](part_one.html#%28tech._posn%29)s
    is close to some given position pt where “close” means a distance of at most 5
    pixels.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This problem clearly consists of two distinct parts: one concerns processing
    the list and another one calls for a function that determines whether the distance
    between a point and pt is “close.” Since this second part is unrelated to the
    reuse of abstractions for list traversals, we assume the existence of an appropriate
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)  [Number](part_one.html#%28tech._number%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is the distance between p and q less than d |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (close-to p q d) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'You should complete this definition on your own.As required by the problem
    statement, the function consumes two arguments: the list of [Posn](part_one.html#%28tech._posn%29)s
    and the “given” point pt. It produces a [Boolean](part_one.html#%28tech._boolean%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    [Posn](part_one.html#%28tech._posn%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is any [Posn](part_one.html#%28tech._posn%29) on lop close to pt |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  (close? ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 47 54) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 60))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 50 50))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  #true) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (close? lop pt) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The result signature differentiates this example from the preceding ones.
  prefs: []
  type: TYPE_NORMAL
- en: The [Boolean](part_one.html#%28tech._boolean%29) range also gives away a clue
    with respect to [figures 91](#%28counter._%28figure._fig~3aisl-ho-list%29%29)
    and [92](#%28counter._%28figure._fig~3aisl-ho-list2%29%29). Only two functions
    in this list produce [Boolean](part_one.html#%28tech._boolean%29) values—<wbr>[andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    and [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)—<wbr>and
    they must be primary candidates for defining close?’s body. While the explanation
    of [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    says that some property must hold for every item on the given list, the purpose
    statement for [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    tells us that it looks for only one such item. Given that close? just checks whether
    one of the [Posn](part_one.html#%28tech._posn%29)s is close to pt, we should try
    [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us apply our standard “trick” of adding a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    whose body uses the chosen abstraction on some locally defined function and the
    given list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (close? lop pt)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Posn](part_one.html#%28tech._posn%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (is-one-close? p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29) close-to? lop)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Following the description of [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29),
    the local function consumes one item of the list at a time. This accounts for
    the [Posn](part_one.html#%28tech._posn%29) part of its signature. Also, the local
    function is expected to produce #true or #false, and [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    checks these results until it finds #true.Here is a comparison of the signature
    of [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    and close?, starting with the former:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [X] [X -> Boolean] [[List-of](#%28tech._sim-dd._list._of%29) X] -> [Boolean](part_one.html#%28tech._boolean%29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In our case, the list argument is a list of [Posn](part_one.html#%28tech._posn%29)s.
    Hence X stands for [Posn](part_one.html#%28tech._posn%29), which explains what
    is-one-close? consumes. Furthermore, it determines that the result of the local
    function must be [Boolean](part_one.html#%28tech._boolean%29) so that it can work
    as the first argument to [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29).The
    rest of the work requires just a bit more thinking. While is-one-close? consumes
    one argument—<wbr>a [Posn](part_one.html#%28tech._posn%29)—<wbr>the close-to function
    consumes three: two [Posn](part_one.html#%28tech._posn%29)s and a “tolerance”
    value. While the argument of is-one-close? is one of the two [Posn](part_one.html#%28tech._posn%29)s,
    it is also obvious that the other one is pt, the argument of close? itself. Naturally
    the “tolerance” argument is 5, as stated in the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (close? lop pt)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Posn](part_one.html#%28tech._posn%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; is one shot close to pt |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (is-one-close? p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (close-to p pt CLOSENESS))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29) is-one-close? lop)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) CLOSENESS 5) ; in
    terms of pixels |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Note two properties of this definition. First, we stick to the rule that constants
    deserve definitions. Second, the reference to pt in is-one-close? signals that
    this [Posn](part_one.html#%28tech._posn%29) stays the same for the entire traversal
    of lop.
  prefs: []
  type: TYPE_NORMAL
- en: 16.6Designing with Abstractions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Three examples suffice for formulating a design recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 is to follow the design recipe for functions for three steps. Specifically,
    you should distill the problem statement into a signature, a purpose statement,
    an example, and a stub definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Consider the problem of defining a function that places small red circles on
    a 200 by 200 canvas for a given list of [Posn](part_one.html#%28tech._posn%29)s.
    The first three steps design recipe yield this much:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; adds the [Posn](part_one.html#%28tech._posn%29)s on lop to the empty scene
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (dots ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 12 31)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) DOT 12 31 MT-SCENE))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (dots lop)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   MT-SCENE) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Add definitions for the constants so DrRacket can run the code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next we exploit the signature and purpose statement to find a matching abstraction.
    To match means to pick an abstraction whose purpose is more general than the one
    for the function to be designed; it also means that the signatures are related.
    It is often best to start with the desired output and to find an abstraction that
    has the same or a more general output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For our running example, the desired output is an [Image](part_one.html#%28tech._image%29).
    While none of the available abstractions produces an image, two of them have a
    variable to the right of
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ; foldr : [X Y] [X Y -> Y] Y [[List-of](#%28tech._sim-dd._list._of%29) X]
    -> Y |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ; foldl : [X Y] [X Y -> Y] Y [[List-of](#%28tech._sim-dd._list._of%29) X]
    -> Y |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: meaning we can plug in any data collection we want. If we do use [Image](part_one.html#%28tech._image%29),
    the signature on the left of -> demands a helper function that consumes an X together
    with an [Image](part_one.html#%28tech._image%29) and produces an [Image](part_one.html#%28tech._image%29).
    Furthermore, since the given list contains [Posn](part_one.html#%28tech._posn%29)s,
    X does stand for the [Posn](part_one.html#%28tech._posn%29) collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Write down a template. For the reuse of abstractions a template uses [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    for two different purposes. The first one is to note which abstraction to use
    and how in the body of the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression. The second one is to write down a stub for the helper function: its
    signature, its purpose (optionally), and its header. Keep in mind that the signature
    comparison in the preceding step suggests most of the signature for the auxiliary
    function.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is what this template looks like for our running example if we choose
    the [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (dots lop)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Posn](part_one.html#%28tech._posn%29)  [Image](part_one.html#%28tech._image%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-one-dot p scene) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) add-one-dot MT-SCENE lop)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    description calls for a “base” Image value, to be used if or when the list is
    empty. In our case, we clearly want the empty canvas for this case. Otherwise,
    [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    uses a helper function and traverses the list of [Posn](part_one.html#%28tech._posn%29)s.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, it is time to define the auxiliary function inside [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29).
    In most cases, this function consumes relatively simple kinds of data, like those
    encountered in [Fixed-Size Data](part_one.html). You know how to design those
    in principle. The only difference is that now you may not only use the function’s
    arguments and global constants but also the arguments of the surrounding function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our running example, the purpose of the helper function is to add one dot
    to the given scene, which you can (1) guess or (2) derive from the example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (dots lop)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Posn](part_one.html#%28tech._posn%29)  [Image](part_one.html#%28tech._image%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; adds a DOT at p to scene |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-one-dot p scene)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) DOT
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|                          ([posn-x](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-x%29%29) p) ([posn-y](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-y%29%29) p)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|                          scene))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) add-one-dot MT-SCENE lop)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The last step is to test the definition in the usual manner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For abstract functions, it is occasionally possible to use the abstract example
    of their purpose statement to confirm their workings at a more general level.
    You may wish to use the abstract example for [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    to confirm that dots does add one dot after another to the background scene.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the third step, we picked [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    without further ado. Experiment with [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)
    to see how it would help complete this function. Functions like [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)
    and [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    are well-known and are spreading in usage in various forms. Becoming familiar
    with them is a good idea, and that’s the point of the next two sections.
  prefs: []
  type: TYPE_NORMAL
- en: '16.7Finger Exercises: Abstraction'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 267\. Use [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    to define the function convert-euro, which converts a list of US$ amounts into
    a list of € amounts based on an exchange rate of €1.22 per US$.
  prefs: []
  type: TYPE_NORMAL
- en: Also use [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    to define convertFC, which converts a list of Fahrenheit measurements to a list
    of Celsius measurements.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, try your hands at translate, a function that translates a list of [Posn](part_one.html#%28tech._posn%29)s
    into a list of list of pairs of numbers. [![image](../Images/55e777db9023fd47dc2d889cc9a58c7a.jpg)](#%28counter._%28exercise._ex~3ause-map%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 268\. An inventory record specifies the name of an item, a description,
    the acquisition price, and the recommended sales price.
  prefs: []
  type: TYPE_NORMAL
- en: Define a function that sorts a list of inventory records by the difference between
    the two prices. [![image](../Images/29bc778eca149f709e082bc88afcedba.jpg)](#%28counter._%28exercise._ex~3asort-abstract%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 269\. Define eliminate-expensive. The function consumes a number, ua
    and a list of inventory records, and it produces a list of all those structures
    whose sales price is below ua.
  prefs: []
  type: TYPE_NORMAL
- en: Then use [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    to define recall, which consumes the name of an inventory item, called ty, and
    a list of inventory records and which produces a list of inventory records that
    do not use the name ty.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, define selection, which consumes two lists of names and selects
    all those from the second one that are also on the first. [![image](../Images/5e7b792199d8b0288fa4545b439c9798.jpg)](#%28counter._%28exercise._ex~3ause-filter%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 270\. Use [build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29)
    to define a function that
  prefs: []
  type: TYPE_NORMAL
- en: creates the list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) n 1))
    for any natural number n;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates the list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) n)
    for any natural number n;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates the list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  1  1/2  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  1/n)
    for any natural number n;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates the list of the first n even numbers;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates a diagonal square of 0s and 1s; see [exercise 262](#%28counter._%28exercise._ex~3alocal-for-diagonal%29%29).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, define tabulate from [exercise 250](#%28counter._%28exercise._ex~3aabs-tabulate%29%29)
    using [build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29).
    [![image](../Images/c651052244656fe5382ce80655dbef7f.jpg)](#%28counter._%28exercise._ex~3abuild-list1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 271\. Use [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    to define find-name. The function consumes a name and a list of names. It determines
    whether any of the names on the latter are equal to or an extension of the former.
  prefs: []
  type: TYPE_NORMAL
- en: With [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    you can define a function that checks all names on a list of names start with
    the letter "a".
  prefs: []
  type: TYPE_NORMAL
- en: Should you use [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    or [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    to define a function that ensures that no name on some list exceeds some given
    width? [![image](../Images/155eb83e1afa31a88fcb47eb517a66cd.jpg)](#%28counter._%28exercise._ex~3aand-or-map%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 272\. Recall that the [append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29)
    function in ISL concatenates the items of two lists or, equivalently, replaces
    ''() at the end of the first list with the second list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29) ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 4 5 6 7 8))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3 4 5 6 7 8))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Use [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    to define append-from-fold. What happens if you replace [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    with [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)?
  prefs: []
  type: TYPE_NORMAL
- en: Now use one of the fold functions to define functions that compute the sum and
    the product, respectively, of a list of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: With one of the fold functions, you can define a function that horizontally
    composes a list of [Image](part_one.html#%28tech._image%29)s. Hints (1) Look up
    [beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29)
    and [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29).
    Can you use the other fold function? Also define a function that stacks a list
    of images vertically. (2) Check for [above](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%29%29)
    in the libraries. [![image](../Images/f9954b04491d35f8de4064c08073ab4e.jpg)](#%28counter._%28exercise._ex~3afold-append%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 273\. The fold functions are so powerful that you can define almost
    any list-processing functions with them. Use fold to define [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29).
    [![image](../Images/c7092da13b00336ed17300d56025e168.jpg)](#%28counter._%28exercise._ex~3afold-map%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 274\. Use existing abstractions to define the prefixes and suffixes
    functions from [exercise 190](part_two.html#%28counter._%28exercise._ex~3aprefix-bsl%29%29).
    Ensure that they pass the same tests as the original function. [![image](../Images/4c89d5b26f36feb61546d256b9ecb0b8.jpg)](#%28counter._%28exercise._ex~3aprefix-isl%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '16.8Projects: Abstraction'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you have some experience with the existing list-processing abstractions
    in ISL, it is time to tackle some of the small projects for which you already
    have programs. The challenge is to look for two kinds of improvements. First,
    inspect the programs for functions that traverse lists. For these functions, you
    already have signatures, purpose statements, tests, and working definitions that
    pass the tests. Change the definitions to use abstractions from [figures 91](#%28counter._%28figure._fig~3aisl-ho-list%29%29)
    and [92](#%28counter._%28figure._fig~3aisl-ho-list2%29%29). Second, also determine
    whether there are opportunities to create new abstractions. Indeed, you might
    be able to abstract across these classes of programs and provide generalized functions
    that help you write additional programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 275\. [Real-world Data: Dictionaries](part_two.html#%28part._sec~3adict%29)
    deals withYou may wish to tackle these exercises again after studying [Nameless
    Functions](#%28part._ch~3a3lambda%29). relatively simple tasks relating to English
    dictionaries. The design of two of them just call out for the use of existing
    abstractions:'
  prefs: []
  type: TYPE_NORMAL
- en: Design most-frequent. The function consumes a [Dictionary](part_two.html#%28tech._dictionary%29)
    and produces the [Letter-Count](part_two.html#%28tech._letter._count%29) for the
    letter that is most frequently used as the first one in the words of the given
    [Dictionary](part_two.html#%28tech._dictionary%29).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design words-by-first-letter. The function consumes a [Dictionary](part_two.html#%28tech._dictionary%29)
    and produces a list of [Dictionary](part_two.html#%28tech._dictionary%29)s, one
    per [Letter](part_two.html#%28tech._letter%29). Do not include '() if there are
    no words for some letter; ignore the empty grouping instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the data definitions, see [figure 70](part_two.html#%28counter._%28figure._fig~3areading-a-dictionary%29%29).
    [![image](../Images/9c8b08205f46a42672e34e00d11af7fd.jpg)](#%28counter._%28exercise._ex~3aabstraction-in-dictionaries%29%29)Exercise 276\.
    [Real-world Data: iTunes](part_two.html#%28part._itunes-data._sec~3aitunes%29)
    explains how to analyze the information in an iTunes XML library.'
  prefs: []
  type: TYPE_NORMAL
- en: Design select-album-date. The function consumes the title of an album, a date,
    and an [LTracks](part_two.html#%28tech._itunes-data._ltrack%29). It extracts from
    the latter the list of tracks from the given album that have been played after
    the date.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design select-albums. The function consumes an [LTracks](part_two.html#%28tech._itunes-data._ltrack%29).
    It produce a list of [LTracks](part_two.html#%28tech._itunes-data._ltrack%29),
    one per album. Each album is uniquely identified by its title and shows up in
    the result only once.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [figure 73](part_two.html#%28counter._itunes-data._%28figure._fig~3aitunes-api-lists%29%29)
    for the services provided by the 2htdp/itunes library. [![image](../Images/813f5caf88a717a3a700538c632b66d8.jpg)](#%28counter._%28exercise._ex~3aabstraction-in-itunes%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 277\. [Full Space War](part_two.html#%28part._sec~3aspace-war%29) spells
    out a game of space war. In the basic version, a UFO descends and a player defends
    with a tank. One additional suggestion is to equip the UFO with charges that it
    can drop at the tank; the tank is destroyed if a charge comes close enough.
  prefs: []
  type: TYPE_NORMAL
- en: Inspect the code of your project for places where it can benefit from existing
    abstraction, that is, processing lists of shots or charges.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have simplified the code with the use of existing abstractions look
    for opportunities to create abstractions. Consider moving lists of objects as
    one example where abstraction may pay off. [![image](../Images/41fd94166e6353407a23b1bffb97c402.jpg)](#%28counter._%28exercise._ex~3aabstractions-in-space-war%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 278\. [Feeding Worms](part_two.html#%28part._sec~3aworms%29) explains
    how another one of the oldest computer games work. The game features a worm that
    moves at a constant speed in a player-controlled direction. When it encounters
    food, it eats the food and grows. When it runs into the wall or into itself, the
    game is over.
  prefs: []
  type: TYPE_NORMAL
- en: This project can also benefit from the abstract list-processing in ISL. Look
    for places to use them and replace existing code one piece at a time, relying
    on the tests to ensure the program works. [![image](../Images/3e57dac0f409b423e383685f55b043f7.jpg)](#%28counter._%28exercise._ex~3aabstractions-in-snake%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 17Nameless Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using abstract functions needs functions as arguments. Occasionally these functions
    are existing primitive functions, library functions, or functions that you defined:'
  prefs: []
  type: TYPE_NORMAL
- en: ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29)  n  [add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29))
    creates ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  1  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  n);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)  [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  another-list  a-list)
    concatenates the items in a-list and another-list into a single list; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)  [above](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%29%29)  [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29)  a-list-of-images)
    stacks the given images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At other times, it requires the definition of a simple helper function, a definition
    that often consists of a single line. Consider this use of [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [IR](#%28tech._ir%29)] [Number](part_one.html#%28tech._number%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find l th)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [IR](#%28tech._ir%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (acceptable? ir)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (ir-price ir) th)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) acceptable? l)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It finds all items on an inventory list whose price is below th. The auxiliary
    function is nearly trivial yet its definition takes up three lines.This situation
    calls for an improvement to the language. Programmers should be able to create
    such small and insignificant functions without much effort.In DrRacket, choose
    “Intermediate Student with lambda” from the “How to Design Programs” submenu in
    the “Language” menu. The history of [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    is intimately involved with the early history of programming and programming language
    design. The next level in our hierarchy of teaching languages, “Intermediate Student
    Language with lambda” solves the problem with a new concept, nameless functions.
    This chapter introduces the concept: its syntax, its meaning, and its pragmatics.
    With [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29),
    the above definition is, conceptually speaking, a one-liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [IR](#%28tech._ir%29)] [Number](part_one.html#%28tech._number%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find l th)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (ir) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (ir-price ir) th)) l))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The first two sections focus the mechanics of [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29);
    the remaining ones use [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    for instantiating abstractions, for testing and specifying, and for representing
    infinite data.
  prefs: []
  type: TYPE_NORMAL
- en: 17.1Functions from [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The syntax of [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (variable-1 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) variable-N) expression)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Its distinguishing characteristic is the keyword [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29).
    The keyword is followed by a sequence of variables, enclosed in a pair of parentheses.
    The last piece is an arbitrary expression, and it computes the result of the function
    when it is given values for its parameters.Here are three simple examples, all
    of which consume one argument:'
  prefs: []
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)  (x)  ([expt](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._expt%29%29)  10  x)),
    which assumes that the argument is a number and computes the exponent of 10 to
    the number;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)  (n)  ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29)  "To
    "  n  ",")), which uses a given string to synthesize an address with [string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29);
    and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)  (ir)  ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29)  (ir-price  ir)  th)),
    which is a function on an IR struct that extracts the price and compares it with
    th.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One way to understand how [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    works, is to view it as an abbreviation for a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression. For example,
  prefs: []
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 10 x))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: is short forThis way of thinking about [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    shows one more time why the rule for computing with [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    is complicated.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) some-name ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 10 x))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    some-name) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This “trick” works in general as long as some-name does not appear in the body
    of the function. What this means is that [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    creates a function with a name that nobody knows. If nobody knows the name, it
    might as well be nameless.To use a function created from [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expression, you apply it to the correct number of arguments. It works as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) ([expt](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._expt%29%29) 10 x)) 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 100 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (name rst) ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29) name ",
    " rst)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    "Robby" &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    "etc.") &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| "Robby, etc." |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (ir) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (ir-price ir) th))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    (make-ir "bear" 10)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note how the second sample function requires two arguments and that the last
    example assumes a definition for th in the definitions window such as this one:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) th 20)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The result of the last example is #true because the price field of the inventory
    record contains 10 and 10 is less than 20.The important point is that these nameless
    functions can be used wherever a function is required, including with the abstractions
    from [figure 91](#%28counter._%28figure._fig~3aisl-ho-list%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) ([expt](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._expt%29%29) 10 x))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        ''(1 2 3)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| (list 10 100 1000) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (name rst)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;            ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29) name ",
    " rst)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          "etc." &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          ''("Matthew" "Robby")) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| "Robby, Matthew, etc." |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (ir) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (ir-price ir) th))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) (make-ir "bear" 10)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                 (make-ir "doll" 33))) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| (list (ir ...)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'OnceThe dots are not part of the output. again, the last example assumes a
    definition for th.Exercise 279\. Decide which of the following phrases are legal
    [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)  (x  y)  (x  y  y))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)  ()  10)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)  (x)  x)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)  (x  y)  x)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)  x  10)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explain why they are legal or illegal. If in doubt, experiment in the interactions
    area of DrRacket. [![image](../Images/8f8f85ebc0c32a9d8765e69fa0f21032.jpg)](#%28counter._%28exercise._ex~3alambda1%29%29)Exercise 280\.
    Calculate the result of the following expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x y) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x y)))
    |'
  prefs:
  - PREF_OL
  - PREF_BQ
  type: TYPE_TB
- en: '|  1 2) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x y)
    |'
  prefs:
  - PREF_OL
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) z ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) y y)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 z) ([/](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2F%29%29) 1 x)))))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|  1 2) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x y)
    |'
  prefs:
  - PREF_OL
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|       (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (z)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 z) ([/](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2F%29%29) 1 z)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) y y))))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|  1 2) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Check your results in DrRacket. [![image](../Images/6f3e8745d7b5824bb94c242d1fe2be1e.jpg)](#%28counter._%28exercise._ex~3alambda3%29%29)Exercise 281\.
    Write down a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expression that
  prefs: []
  type: TYPE_NORMAL
- en: consumes a number and decides whether it is less than 10;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: multiplies two given numbers and turns the result into a string;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: consumes two inventory records and compares them by price;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: consumes a natural number and produces 0 if it is even and 1 if odd;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: adds a red dot at a given [Posn](part_one.html#%28tech._posn%29) to a given
    [Image](part_one.html#%28tech._image%29).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Demonstrate how to use these functions in the interactions area. [![image](../Images/823522f10e0941b21069f62420313ce3.jpg)](#%28counter._%28exercise._ex~3alambda0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 17.2Computing with [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The insight that [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    abbreviates a certain kind of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    also connects constant definitions and function definitions. Instead of viewing
    function definitions as given, we canAlonzo Church, who invented [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    in the late 1920s, hoped to create a unifying theory of functions. From his work
    we know that from a theoretical perspective, a language does not need [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    once it has [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29).
    But the margin of this page is too small to explain this idea properly. If you
    are curious, read up on [the Y combinator](http://www.ccs.neu.edu/home/matthias/BTLS/sample.pdf).
    take [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)s
    as another fundamental concept and say that a function definition abbreviates
    a plain constant definition with a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expression on the right-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s best to look at some concrete examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f x)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 10 x))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | is short for |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) f
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 10 x)))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'What this line says, is that a function definition consists of two steps: the
    creation of the function and its naming. Here, the [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    on the right-hand side creates a function of one argument x that computes ![image](../Images/35658e83aacd221e3aac0415d5ddefe9.jpg);
    it is [define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29)
    that names the [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expression f. We do give names to functions for two distinct reasons. On one hand,
    a function is often called more than once from other functions, and we wouldn’t
    want to spell out the function with a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    each time it is called. On the other hand, functions are often recursive because
    they process recursive forms of data, and naming functions makes it easy to create
    recursive functions.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 282\. Experiment with the above definitions in DrRacket.
  prefs: []
  type: TYPE_NORMAL
- en: Also add
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (compare x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) (f-plain x) (f-lambda x)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: to the definitions area after renaming the left-hand f to f-plain and the right-hand
    one to f-lambda. Then run
  prefs: []
  type: TYPE_NORMAL
- en: (compare ([random](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._random%29%29) 100000))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'a few times to make sure the two functions agree on all kinds of inputs. [![image](../Images/8b86056bdcc0d94c1eac8003a403bf31.jpg)](#%28counter._%28exercise._ex~3alambda-technical0%29%29)If
    function definitions are just abbreviations for constant definitions, we can always
    just replace the function name by its [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (f (f 42)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 10 x)) (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 10 x)) 42))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Strangely though, this substitution appears to create an expression that violates
    the grammar as we know it. To be precise, it generates an application expressions
    whose function position is a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expression.The point is that ISL+’s grammar differs from ISL in two aspects: it
    obviously comes with [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expressions but it also allows arbitrary expressions to show up in the function
    position of an application. This means that you may need to evaluate the function
    position before you can proceed with an application, but you know how to evaluate
    most expressions. Of course, the real difference is that the evaluation of an
    expression may yield a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expression. Functions really are values. The following grammar revises the one
    from [Intermezzo: BSL](part_one.html#%28part._i1-2%29) to summarize these differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   expr |   | = |   | ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | (expr expr ...) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   |   |   |   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   value |   | = |   | ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (variable variable ...) expr)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'What you really need to know, is how to evaluate the application of a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expression to arguments, and that is surprisingly straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x-1 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) x-n) f-body) v-1 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) v-n) == f-body
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Church stated the beta axiom roughly like this. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; with all occurrences of x-1  ...  x-n |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; replaced with v-1  ...  v-n, respectively |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'That is, the application of a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expression proceeds just like that of an ordinary function. We replace the parameters
    of the function with the actual argument values and compute the value of the function
    body.Here is how to use this law on the first example in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 10 x)) 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 10 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 20 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The second one proceeds in an analogous manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (name rst) ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29) name ",
    " rst)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  "Robby" "etc.") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29) "Robby" ",
    " "etc.") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Robby, etc." |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Use your intuition to calculate the third example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (ir) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (ir-price ir) th))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  (make-ir "bear" 10)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Assume th is larger than or equal to 10.Exercise 283\. Confirm that DrRacket’s
    stepper can deal with [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29).
    Use it to step through the third example and also to determine how DrRacket evaluates
    the following expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 10 x))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ''(1 2 3)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (name rst)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29) name ",
    " rst)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        "etc." |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ''("Matthew" "Robby")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (ir) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (ir-price ir) th))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) (make-ir "bear" 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               (make-ir "doll" 33))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '[![image](../Images/f0f8e28e1a60dfa85d2b9cdf9d6e7797.jpg)](#%28counter._%28exercise._ex~3aeval-lambda1%29%29)Exercise 284\.
    Step through the evaluation of this expression:'
  prefs: []
  type: TYPE_NORMAL
- en: (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) x) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) x))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now step through this one:'
  prefs: []
  type: TYPE_NORMAL
- en: (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) (x x)) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) x))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stop! What do you think we should try next?Yes, try to evaluate
  prefs: []
  type: TYPE_NORMAL
- en: (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) (x x)) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) (x x)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Be ready to hit STOP. [![image](../Images/547af6bea46d67a1fe2604cd5980797d.jpg)](#%28counter._%28exercise._ex~3aeval-lambda3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 17.3Abstracting with [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Although it may take you a bit to get used to [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    notation, you will soon notice that [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    makes short functions much more readable than [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    definitions. Indeed, you will find that you can adapt step 4 of the design recipe
    from [Designing with Abstractions](#%28part._sec~3adesigning-with-abstraction%29)
    to use [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    instead of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29).
    Consider the running example from that section. Its template based on [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (dots lop)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Posn](part_one.html#%28tech._posn%29)  [Image](part_one.html#%28tech._image%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-one-dot p scene) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) add-one-dot BACKGROUND lop)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If you spell out the parameters so that their names include signatures, you
    can easily pack all the information from [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    into a single [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (dots lop)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (a-posn scene) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)) BACKGROUND lop))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'From here, you should be able to complete the definition as well as from the
    original template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (dots lop)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (a-posn scene)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) DOT
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                         ([posn-x](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-x%29%29) a-posn)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                         ([posn-y](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-y%29%29) a-posn)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                         scene)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          BACKGROUND lop)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Let us illustrate [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    with some more examples from [Using Abstractions, by Example](#%28part._sec~3ausage-examples%29):'
  prefs: []
  type: TYPE_NORMAL
- en: 'the purpose of the first function is to add 3 to each x-coordinate on a given
    list of [Posn](part_one.html#%28tech._posn%29)s:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    -> [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-3-to-all lop)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (p)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-x%29%29) p) 3) ([posn-y](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-y%29%29) p)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|        lop)) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Because [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    expects a function of one argument, we clearly want ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)  (p)  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)).
    The function then deconstructs p, adds 3 to the x-coordinate, and repackages the
    data into a [Posn](part_one.html#%28tech._posn%29).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'the second one eliminates [Posn](part_one.html#%28tech._posn%29)s whose y-coordinate
    is above 100:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    -> [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (keep-good lop)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (p) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-y%29%29) p) 100)) lop))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Here we know that [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    needs a function of on one argument that produces a [Boolean](part_one.html#%28tech._boolean%29).
    First, the [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    function extracts the y-coordinate from the [Posn](part_one.html#%28tech._posn%29)
    to which [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    applies the function. Second, it checks whether it is less than or equal to 100,
    the desired limit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'and the third one determines whether any [Posn](part_one.html#%28tech._posn%29)
    on lop is close to some given point:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (close? lop pt)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (p) (close-to p pt CLOSENESS))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|          lop)) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'Like the preceding two examples, [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    is a function that expects a function of one argument and applies this functional
    argument to every item on the given list. If any result is #true, [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    returns #true, too; if all results are #false, [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    produces #false.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is best to compare the definitions from [Using Abstractions, by Example](#%28part._sec~3ausage-examples%29)
    and the definitions above side by side. When you do so, you should notice how
    easy the transition from [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    to [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    is and how concise the [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    version is in comparison to the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    version. Thus, if you are ever in doubt, design with [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    first and then convert this tested version into one that uses [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29).
    Keep in mind, however, that [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    is not a cure-all. The locally defined function comes with a name that explains
    its purpose and, if it is long, the use of an abstraction with a named function
    is much easier to understand than one with a large [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following exercises request that you solve the problems from [Finger Exercises:
    Abstraction](#%28part._sec~3aabstraction-exercises%29) with [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    in ISL+ .'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 285\. Use [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    to define the function convert-euro, which converts a list of US$ amounts into
    a list of € amounts based on an exchange rate of €1.22 per US$.
  prefs: []
  type: TYPE_NORMAL
- en: Also use [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    to define convertFC, which converts a list of Fahrenheit measurements to a list
    of Celsius measurements.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, try your hands at translate, a function that translates a list of [Posn](part_one.html#%28tech._posn%29)s
    into a list of list of pairs of numbers. [![image](../Images/e2b1b7dd072e3c904940d1d98b87e386.jpg)](#%28counter._%28exercise._ex~3a2use-map%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 286\. An inventory record specifies the name of an inventory item,
    a description, the acquisition price, and the recommended sales price.
  prefs: []
  type: TYPE_NORMAL
- en: Define a function that sorts a list of inventory records by the difference between
    the two prices. [![image](../Images/544ca38332a10cf530e3a4cfb481dee0.jpg)](#%28counter._%28exercise._ex~3a2sort-abstract%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 287\. Use [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    to define eliminate-exp. The function consumes a number, ua and a list of inventory
    records (containing name and price), and it produces a list of all those structures
    whose acquisition price is below ua.
  prefs: []
  type: TYPE_NORMAL
- en: Then use [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    to define recall, which consumes the name of an inventory item, called ty, and
    a list of inventory records and which produces a list of inventory records that
    do not use the name ty.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, define selection, which consumes two lists of names and selects
    all those from the second one that are also on the first. [![image](../Images/32e6a43b7047ba87b76c5c8a0c21a420.jpg)](#%28counter._%28exercise._ex~3a2use-filter%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 288\. Use [build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29)
    and [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    to define a function that
  prefs: []
  type: TYPE_NORMAL
- en: creates the list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) n 1))
    for any natural number n;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates the list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) n)
    for any natural number n;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates the list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  1  1/2  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  1/n)
    for any natural number n;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates the list of the first n even numbers;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates a diagonal square of 0s and 1s; see [exercise 262](#%28counter._%28exercise._ex~3alocal-for-diagonal%29%29).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also define tabulate with [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29).
    [![image](../Images/c5e15fbb70d4404d366826861ff073f9.jpg)](#%28counter._%28exercise._ex~3a2build-list1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 289\. Use [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    to define find-name. The function consumes a name and a list of names. It determines
    whether any of the names on the latter are equal to or an extension of the former.
  prefs: []
  type: TYPE_NORMAL
- en: With [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    you can define a function that checks all names on a list of names start with
    the letter "a".
  prefs: []
  type: TYPE_NORMAL
- en: Should you use [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29)
    or [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    to define a function that ensures that no name on some list exceeds some given
    width? [![image](../Images/0e1793ce286f3594409fe46f93bd4108.jpg)](#%28counter._%28exercise._ex~3a2and-or-map%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 290\. Recall that the [append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29)
    function in ISL concatenates the items of two lists or, equivalently, replaces
    ''() at the end of the first list with the second list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29) ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 4 5 6 7 8))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3 4 5 6 7 8))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Use [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    to define append-from-fold. What happens if you replace [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    with [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)?
  prefs: []
  type: TYPE_NORMAL
- en: Now use one of the fold functions to define functions that compute the sum and
    the product, respectively, of a list of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: With one of the fold functions, you can define a function that horizontally
    composes a list of [Image](part_one.html#%28tech._image%29)s. Hints (1) Look up
    [beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29)
    and [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29).
    Can you use the other fold function? Also define a function that stacks a list
    of images vertically. (2) Check for [above](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%29%29)
    in the libraries. [![image](../Images/56f766a9710056c42e27ab51fb0c4b60.jpg)](#%28counter._%28exercise._ex~3a2fold-append%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 291\. The fold functions are so powerful that you can define almost
    any list-processing functions with them. Use fold to define map-via-fold, which
    simulates [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29).
    [![image](../Images/d47dce84827004d30226f0c269d4aeb6.jpg)](#%28counter._%28exercise._ex~3a2fold-map%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 17.4Specifying with [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Figure 95](#%28counter._%28figure._fig~3asort-local%29%29) shows a generalized
    sorting function that consumes a list of values and a comparison function for
    such values. For convenience, [figure 99](#%28counter._%28figure._fig~3ageneral-sort%29%29)
    reproduces the essence of the definition. The body of sort-cmp introduces two
    [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    auxiliary functions: isort and insert. In addition, the figure also comes with
    two test cases that illustrate the workings of sort-cmp. One demonstrates how
    the function works on strings and the other one for numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [X] [[List-of](#%28tech._sim-dd._list._of%29) X] [X X -> [Boolean](part_one.html#%28tech._boolean%29)]
    -> [[List-of](#%28tech._sim-dd._list._of%29) X] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; sort alon0 according to cmp |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (sort-cmp ''("c" "b") [string<?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3c~3f%29%29)) ''("b" "c"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (sort-cmp ''(2 1 3 4 6 5) [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)) ''(1 2 3 4 5 6))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sort-cmp alon0 cmp)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [[List-of](#%28tech._sim-dd._list._of%29)
    X] -> [[List-of](#%28tech._sim-dd._list._of%29) X] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; produces a variant of alon sorted by cmp |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (isort alon) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; X [[List-of](#%28tech._sim-dd._list._of%29) X] -> [[List-of](#%28tech._sim-dd._list._of%29)
    X] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; inserts n into the sorted list of numbers alon |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (insert n alon) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (isort alon0))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 99: A general sorting function'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now take a quick look at [exercise 186](part_two.html#%28counter._%28exercise._ex~3asort0%29%29).
    It asks you to formulate [check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29)
    tests for sort> using sorted>?. The former is a function that sorts lists of numbers
    in descending order; the latter is a function that determines whether a list of
    numbers is sorted in descending order. Hence, the solution of this exercise is
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (sort> ''()) sorted>?)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (sort> ''(12 20 -5)) sorted>?)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (sort> ''(3 2 1)) sorted>?)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (sort> ''(1 2 3)) sorted>?)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The question is how to reformulate the tests for sort-cmp in analogously.Since
    sort-cmp consumes a comparison function together with a list, the generalized
    version of sorted>? must take one too. If so, the following test cases might look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (sort-cmp ''("c" "b") [string<?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3c~3f%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (sorted [string<?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3c~3f%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (sort-cmp ''(2 1 3 4 6 5) [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (sorted [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Both (sorted  [string<?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3c~3f%29%29))
    and (sorted  [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29))
    must produce predicates. The first one checks whether some list of strings is
    sorted according to [string<?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3c~3f%29%29),
    and the second one whether a list of numbers is sorted via [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29).We
    have thus worked out the desired signature and purpose of sorted:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [X X -> [Boolean](part_one.html#%28tech._boolean%29)] -> [ [[List-of](#%28tech._sim-dd._list._of%29)
    X] -> [Boolean](part_one.html#%28tech._boolean%29) ] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a function that determines whether |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; some list is sorted according to cmp |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sorted cmp)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'What we need to do now, is to go through the rest of the design process.Let’s
    first finish the header. Remember that the header produces a value that matches
    the signature and is likely to break most of the tests/examples. Here we need
    sorted to produce a function that consumes a list and produces a [Boolean](part_one.html#%28tech._boolean%29).
    With [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29),
    that’s actually straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sorted cmp)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     #true)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! This is your first function-producing function. Read the definition again.
    Can you explain this definition in your own words?Next we need examples. According
    to our above analysis, sorted consumes predicates such as [string<?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3c~3f%29%29)
    and [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29),
    but clearly, [>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29),
    [<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29),
    and your own comparison functions should be acceptable, too. At first glance,
    this suggests test cases of the shape
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (sorted [string<?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3c~3f%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (sorted [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'But, (sorted  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    produces a function and, according to [exercise 245](#%28counter._%28exercise._ex~3asem2-funcs%29%29)
    it impossible to compare functions.Hence, to formulate reasonable test cases,
    we need to apply the result of (sorted  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    to appropriate lists. And, based on this insight, the test cases almost formulate
    themselves, indeed, they can easily be derived from those for sort-cmp in [figure 99](#%28counter._%28figure._fig~3ageneral-sort%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) [(sorted [string<?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3c~3f%29%29)) ''("b" "c")] #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) [(sorted [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)) ''(1 2 3 4 5 6)] #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note Using square instead of parentheses highlights that the first expression
    produces a function, which is then applied to arguments.From this point on, the
    design is quite conventional. What we basically wish to design is a generalization
    of sorted>? from [Non-empty Lists](part_two.html#%28part._sec~3alists~3ane%29);
    let’s call this function sorted/l. What is unusual about sorted/l, is that it
    “lives” in the body of a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    inside of sorted:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sorted cmp)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (l0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sorted/l l) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note how sorted/l is defined locally yet refers to cmp.Exercise 292\. Design
    the function sorted?, which comes with the following signature and purpose statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [X X -> Boolean] [[NEList-of](#%28tech._sim-dd._nelist._of%29) X] -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determine whether l is sorted according to cmp |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (sorted? [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ''(1 2 3)) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (sorted? [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ''(2 1 3)) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sorted? cmp l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The wish list even includes examples. [![image](../Images/d1c8b5e89dfc10734fca0fb183c36f34.jpg)](#%28counter._%28exercise._ex~3asorted-curried%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 100](#%28counter._%28figure._fig~3ageneral-sorted%29%29) shows the
    result of the design process. The sorted function consumes a comparison function
    cmp and produces a predicate. The latter consumes a list l0 and uses a locally
    defined function to determine whether all the items in l0 are ordered via cmp.
    Specifically, the locally defined function checks a non-empty list; in the body
    of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29),
    sorted first checks whether l0 is empty, in which case it simply produces #true
    because the empty list is sorted.'
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Could you re-define sorted to use sorted? from [exercise 292](#%28counter._%28exercise._ex~3asorted-curried%29%29)?
    Explain why sorted/l does not consume cmp as an argument?
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [X X -> [Boolean](part_one.html#%28tech._boolean%29)] -> [[[List-of](#%28tech._sim-dd._list._of%29)
    X] -> [Boolean](part_one.html#%28tech._boolean%29)] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is the given list l0 sorted according to cmp |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sorted cmp)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (l0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [[NEList-of](#%28tech._sim-dd._nelist._of%29)
    X] -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ; is l sorted according to cmp |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sorted/l l)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                 [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)) #true]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                 [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) (cmp ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) ([second](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._second%29%29) l))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                            (sorted/l ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l0) #true (sorted/l l0)))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 100: A curried predicate for checking the ordering of a list'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sorted function in [figure 100](#%28counter._%28figure._fig~3ageneral-sorted%29%29)
    is a curried version of a function that consumes two arguments:The verb “curry”
    honors Haskell Curry, the second person to invent the idea. The first one was
    Mosses Schönfinkel. cmp and l0. Instead of consuming two arguments at once, a
    curried function consumes one argument and then returns a function that consumes
    the second one.
  prefs: []
  type: TYPE_NORMAL
- en: '[Exercise 186](part_two.html#%28counter._%28exercise._ex~3asort0%29%29) asks
    how to formulate a test case that exposes mistakes in sorting functions. Consider
    this definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [List-of-numbers](part_two.html#%28tech._list._of._number%29) -> [List-of-numbers](part_two.html#%28tech._list._of._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a sorted version of l |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sort-cmp/bad l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ''(9 8 7 6 5 4 3 2 1 0)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Formulating such a test case with [check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    is straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: To design a predicate that exposes sort-cmp/bad as flawed, we need to understand
    the purpose of sort-cmp or sorting in general. It clearly is unacceptable to throw
    away the given list and to produce some other list in its place. That’s why the
    purpose statement of isort says that the function “produces a variant of” the
    given list. “Variant” means that the function does not throw away any of the items
    on the given list.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these thoughts in mind, we can now say that we want a predicate that checks
    whether the result is sorted and contains all the items from the given list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29) X] [X X -> [Boolean](part_one.html#%28tech._boolean%29)]
    -> [[[List-of](#%28tech._sim-dd._list._of%29) X] -> [Boolean](part_one.html#%28tech._boolean%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is l0 sorted according to cmp |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; are all items in list k members of list l0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sorted-variant-of k cmp)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (l0) #false))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The two lines of the purpose statement suggest examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) [(sorted-variant-of ''(3 2) [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)) ''(2 3)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               #true) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) [(sorted-variant-of ''(3 2) [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)) ''(3)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Like sorted, sorted-variant-of consumes arguments and produces a function.
    For the first case, sorted-variant-of produces #true, because the ''(2  3) is
    sorted and it contains all numbers in ''(3  2). In contrast, the function produces
    #false in the second case, because ''(3) lacks 2 from the originally given list.A
    two-line purpose statement suggests two tasks, and two tasks means that the function
    itself is a combination of two functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sorted-variant-of k cmp)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (l0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) (sorted? cmp l0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (contains? l0 k)))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The body of the function is an [and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)
    expression that combines two function calls. With the call to the sorted? function
    from [exercise 292](#%28counter._%28exercise._ex~3asorted-curried%29%29), the
    function realizes the first line of the purpose statement. The second call, (contains?  k  l0),
    is an implicit wish for an auxiliary function.We immediately give the full definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29) X] [[List-of](#%28tech._sim-dd._list._of%29)
    X] -> Boolean |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; are all items in list k members of list l |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (contains? ''(1 2 3) ''(1 4 3)) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (contains? ''(1 2 3 4) ''(1 3)) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (contains? l k)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (in-k) ([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) in-k l)) k))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'On one hand, we have never explained how to systematically design a function
    that consumes two lists, and it actually needs its own chapter; see [Simultaneous
    Processing](part_four.html#%28part._ch~3asimu%29). On the other hand, the function
    definition clearly satisfies the purpose statement. The [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    expression checks that every item in k is a [member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29)
    of l, which is what the purpose statement promises.Sadly, sorted-variant-of fails
    to describe sorting functions properly. Consider this variant of a sorting function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a sorted version of l |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sort-cmp/worse l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) sorted (sort-cmp l [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) sorted) 1) sorted)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It is again easy to expose a flaw in this function with a [check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    test that it ought to pass but clearly fails:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (sort-cmp/worse '(1 2 3)) '(1 2 3))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Surprisingly, a [check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29)
    test based on sorted-variant-of succeeds:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (sort-cmp/worse ''(1 2 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (sorted-variant-of ''(1 2 3) [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Indeed, such a test succeeds for any list of numbers, not just ''(1  2  3),
    because the predicate generator merely checks that all the items on the original
    list are members of the resulting list; it fails to check whether all items on
    the resulting list are also members of the original list.The easiest way to add
    this third check to sorted-variant-of is to add a third sub-expression to the
    [and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sorted-variant-of.v2 k cmp)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (l0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) (sorted? cmp l0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (contains? l0 k) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (contains? k l0)))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We choose to re-use contains? but with its arguments flipped.At this point,
    you may wonder why we are bothering with the development of such a predicate when
    we can rule out bad sorting functions with plain [check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    tests. The difference is that [check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    checks only that our sorting functions work on specific lists. With a predicate
    such as sorted-variant-of.v2, we can articulate the claim that a sorting function
    works for all possible inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) a-list (build-list-of-random-numbers 500))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (sort-cmp a-list [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (sorted-variant-of.v2 a-list [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Let’s take a close look at these two lines. The first line generates a list
    of 500 numbers. Every time you ask DrRacket to evaluate this test, it is likely
    to generate a list never seen before. The second line is a test case that says
    sorting this generated list produces a list that (1) is sorted, (2) contains all
    the numbers on the generated list, and (3) contains nothing else. In other words,
    it is almost like saying that for all possible lists, sort-cmp produces outcomes
    that sorted-variant-of.v2 blesses.
  prefs: []
  type: TYPE_NORMAL
- en: Computer scientists call sorted-variant-of.v2 a specification of a sorting function.
    The idea that all lists of numbers pass the above test case is a theorem about
    the relationship between the specification of the sorting function and its implementation.
    If a programmer can prove this theorem with a mathematical argument, we say that
    the function is correct with respect to its specification. How to prove functions
    or programs correct is beyond the scope of this book, but a good computer science
    curriculum shows you in a follow-up course how to construct such proofs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 293\. Develop found?, a specification for the find function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; X [[List-of](#%28tech._sim-dd._list._of%29) X] -> [[Maybe](#%28tech._sim-dd._maybe%29)
    [[List-of](#%28tech._sim-dd._list._of%29) X]] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; returns the first sublist of l that starts |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; with x, #false otherwise |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find x l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) #false]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) x) l (find x ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Use found? to formulate a [check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29)
    test for find. [![image](../Images/f7bdd70132f93d9fc2f164890b16e703.jpg)](#%28counter._%28exercise._ex~3aspec1%29%29)Exercise 294\.
    Develop is-index?, a specification for index:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; X [[List-of](#%28tech._sim-dd._list._of%29) X] -> [[Maybe](#%28tech._sim-dd._maybe%29)  [N](part_two.html#%28tech._n%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determine the index of the first occurrence |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; of x in l, #false otherwise |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (index x l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) #false]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) i (index x ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([boolean?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._boolean~3f%29%29) i) i ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) i 1))))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Use is-index? to formulate a [check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29)
    test for index. [![image](../Images/ef8a2e1173c5fb1cac98005bb58ed8dc.jpg)](#%28counter._%28exercise._ex~3aspec2%29%29)Exercise 295\.
    Develop n-inside-playground?, a specification of the random-posns function below.
    The function generates a predicate that ensures that the length of the given list
    is some given count and that all [Posn](part_one.html#%28tech._posn%29)s in this
    list are within a WIDTH by HEIGHT rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; distances in terms of pixels |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) WIDTH 300)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) HEIGHT 300)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [N](part_two.html#%28tech._n%29) -> [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; generate n random [Posn](part_one.html#%28tech._posn%29)s in [0,WIDTH)
    by [0,HEIGHT) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (random-posns 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (n-inside-playground? 3)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (random-posns n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     n |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (i)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) ([random](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._random%29%29) WIDTH) ([random](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._random%29%29) HEIGHT)))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Define random-posns/bad that satisfies n-inside-playground? and does not live
    up to the expectations implied by the above purpose statement. Note This specification
    is incomplete. Although the word “partial” might come to mind, computer scientists
    reserve the phrase “partial specification” for a different purpose. [![image](../Images/bcde5df6d723e82ebf47d8dcef3243b2.jpg)](#%28counter._%28exercise._ex~3aspec0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 17.5Representing with [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Because functions are first-class values in ISL+, we may think of them as another
    form of data and use them for data representation. This section provides a taste
    of this idea; the next few chapters do not rely on it. Its title uses “abstracting”
    because people consider data representations that use functions as abstract.
  prefs: []
  type: TYPE_NORMAL
- en: 'As always, we start from a representative problem:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Navy strategists represent fleets ofThis problem is also solvable
    with a self-referential data representation that says a shape is either a circle,
    a rectangle, or a combination of two shapes. See the next part of the book for
    this design choice. ships as rectangles (the ships themselves) and circles (their
    weapons’ reach). The coverage of a fleet of ships is the combination of all these
    shapes. Design a data representation for rectangles, circles, and combinations
    of shapes. Then design a function that determines whether some point is within
    a shape.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The problem comes with all kinds of concrete interpretations, which we leave
    out here. A slightly more complex version was the subject of a programming competition
    in the mid-1990s run by Yale University on behalf of the US Department of Defense.One
    mathematical approach considers shapes as predicates on points. That is, a shape
    is a function that maps a Cartesian point to a Boolean value. Let’s translate
    these English words into a data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Shape is a function: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   [[Posn](part_one.html#%28tech._posn%29) -> [Boolean](part_one.html#%28tech._boolean%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation if s is a shape and p a [Posn](part_one.html#%28tech._posn%29),
    (s  p) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces #true if p is in of s, #false otherwise |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Its interpretation part is extensive because this data representation is so
    unusual. Such an unusual representation calls for an immediate exploration with
    examples. We delay this step for a moment, however, and instead define a function
    that checks whether a point is inside some shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Shape](#%28tech._shape%29)  [Posn](part_one.html#%28tech._posn%29) ->
    [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (inside? s p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (s p)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Doing so is straightforward because of the given interpretation. It also turns
    out that it is simpler than creating examples and, surprisingly, the function
    is helpful for formulating data examples.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Explain how and why inside? works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let us return to the problem of elements of [Shape](#%28tech._shape%29).
    Here is a simplistic element of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Posn](part_one.html#%28tech._posn%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (p) ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-x%29%29) p) 3) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-y%29%29) p) 4)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As required, it consumes a [Posn](part_one.html#%28tech._posn%29) p, and its
    body compares the coordinates of p to those of the point (3,4), meaning this function
    represents a single point. While the data representation of a point as a [Shape](#%28tech._shape%29)
    might seem silly, it suggests how we can define functions that create elements
    of [Shape](#%28tech._shape%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Shape](#%28tech._shape%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (mk-point x y) We
    use “mk” because this function is not an ordinary constructor. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) ([posn-x](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-x%29%29) p) x) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) ([posn-y](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-y%29%29) p) y))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) a-sample-shape (mk-point 3 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop again! Convince yourself that the last line creates a data representation
    of (3,4). Consider using DrRacket’s stepper.If we were to design such a function,
    we would formulate a purpose statement and provide some illustrative examples.
    For the purpose we could go with the obvious:'
  prefs: []
  type: TYPE_NORMAL
- en: ; creates a representation for a point at (x,y)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: or, more concisely and more appropriately,
  prefs: []
  type: TYPE_NORMAL
- en: ; represents a point at (x,y)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For the examples we want to go with the interpretation of [Shape](#%28tech._shape%29).
    To illustrate, (mk-point  3  4) is supposed to evaluate to a function that returns
    #true if, and only if, it is given ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29)  3  4).
    Using inside?, we can express this statement via tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (inside? (mk-point 3 4) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 3 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               #true) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (inside? (mk-point 3 4) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 3 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In short, to make a point representation, we define a constructor-like function
    that consumes the point’s two coordinates. Instead of a record, this function
    uses [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    to construct another function. The function that it creates consumes a [Posn](part_one.html#%28tech._posn%29)
    and determines whether its x and y fields are equal to the originally given coordinates.Next
    we generalize this idea from simple points to shapes, say circles. In your geometry
    courses, you learn that a circle is a collection of points that all have the same
    distance to the center of the circle—<wbr>the radius. For points inside the circle,
    the distance is smaller or equal to the radius. Hence, a function that creates
    a [Shape](#%28tech._shape%29) representation of a circle must consume three pieces:
    the two coordinates for its center and the radius:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Shape](#%28tech._shape%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a representation for a circle of radius r |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   located at (center-x, center-y) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (mk-circle center-x center-y r)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Like mk-point, it produces a function via a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29).
    The function that is returned determines whether some given [Posn](part_one.html#%28tech._posn%29)
    is inside the circle. Here are some examples, again formulated as tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (inside? (mk-circle 3 4 5) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 0)) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (inside? (mk-circle 3 4 5) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 9)) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (inside? (mk-circle 3 4 5) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) -1 3)) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The origin, ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29)  0  0),
    is exactly five steps away from (3,4) the center of the circle; see [Defining
    Structure Types](part_one.html#%28part._sec~3astructures%29). Stop! Explain the
    remaining examples.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 296\. Use compass-and-pencil drawings to check the tests. [![image](../Images/5473bbb10ee316cdd5c80b28ce5c587f.jpg)](#%28counter._%28exercise._ex~3adraw-shape1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Mathematically, we say that a [Posn](part_one.html#%28tech._posn%29) p is inside
    a circle if the distance between p and the circle’s center is smaller than the
    radius r. Let’s wish for the right kind of helper function and write down what
    we have.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (mk-circle center-x center-y r)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ; [[Posn](part_one.html#%28tech._posn%29) -> [Boolean](part_one.html#%28tech._boolean%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (distance-between center-x center-y p) r)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The distance-between function is a straightforward exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 297\. Design the function distance-between. It consumes two numbers
    and a [Posn](part_one.html#%28tech._posn%29): x, y, and p. The function computes
    the distance between the points (x, y) and p.'
  prefs: []
  type: TYPE_NORMAL
- en: Domain Knowledge The distance between ![image](../Images/538165a8256f0108a2ec388c05e82880.jpg)
    and ![image](../Images/2b6504fa58243a915600bb13fcba70d4.jpg) is
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/6657789cbe6acb2fe9ea7e01a93616ea.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'that is, the distance of ![image](../Images/608ccaf353250887b334dcdbf1b2ff51.jpg)
    to the origin. [![image](../Images/0afd1935935a5f631df285680653b802.jpg)](#%28counter._%28exercise._ex~3ashape-distance%29%29)The
    data representation of a rectangle is expressed in a similar manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Shape](#%28tech._shape%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; represent a width by height rectangle whose |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; upper-left corner is located at (ul-x, ul-y) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (inside? (mk-rect 0 0 10 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                        ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               #true) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (inside? (mk-rect 2 3 10 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                        ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 4 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               #true) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; Stop! Formulate a negative test case. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (mk-rect ul-x ul-y width height)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) ul-x ([posn-x](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-x%29%29) p) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ul-x width))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) ul-y ([posn-y](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._posn-y%29%29) p) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ul-y height)))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Its constructor receives four numbers: the coordinates of the upper-left corner,
    its width and height. The result is again a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expression. As for circles, this function consumes a [Posn](part_one.html#%28tech._posn%29)
    and produces a [Boolean](part_one.html#%28tech._boolean%29), checking whether
    the x and y fields of the [Posn](part_one.html#%28tech._posn%29) are in the proper
    intervals.At this point, we have only one task left, namely, the design of function
    that maps two [Shape](#%28tech._shape%29) representations to their combination.
    The signature and the header are easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Shape](#%28tech._shape%29)  [Shape](#%28tech._shape%29) -> [Shape](#%28tech._shape%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; combines two shapes into one |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (mk-combination s1 s2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ; [Posn](part_one.html#%28tech._posn%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     #false)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Indeed, even the default value is straightforward. We know that a shape is
    represented as a function from [Posn](part_one.html#%28tech._posn%29) to [Boolean](part_one.html#%28tech._boolean%29),
    so we write down a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    that consumes some [Posn](part_one.html#%28tech._posn%29) and produces #false,
    meaning it says no point is in the combination.So suppose we wish to combine the
    circle and the rectangle from above:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) circle1 (mk-circle 3 4 5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) rectangle1 (mk-rect 0 3 10 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) union1 (mk-combination circle1 rectangle1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Some points are inside and some outside of this combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (inside? union1 ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 0)) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (inside? union1 ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 9)) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (inside? union1 ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) -1 3)) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Since ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29)  0  0)
    is inside both, there is no question that is inside the combination of the two.
    In a similar vein, ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29)  0  -1)
    is in neither shape, and so it isn’t in the combination. Finally, ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29)  -1  3)
    is in circle1 but not in rectangle1. But the point must be in the combination
    of the two shapes because every point that is in one or the other shape is in
    their combination.This analysis of examples implies a revision of mk-combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Shape](#%28tech._shape%29)  [Shape](#%28tech._shape%29) -> [Shape](#%28tech._shape%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (mk-combination s1 s2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ; [Posn](part_one.html#%28tech._posn%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) (inside? s1 p) (inside? s2 p))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The [or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29)
    expression says that the result is #true if one of two expression produces #true:
    (inside?  s1  p) or (inside?  s2  p). The first expression determines whether
    p is in s1 and the second one whether p is in s2. And that is precisely a translation
    of our above explanation into ISL+ .Exercise 298\. Design my-animate. Recall that
    the [animate](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._animate%29%29)
    function consumes the representation of a stream of images, one per natural number.
    Since streams are infinitely long, ordinary compound data cannot represent them.
    Instead, we use functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An ImageStream is a function: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   [[N](part_two.html#%28tech._n%29) -> [Image](part_one.html#%28tech._image%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation a stream s denotes a series of images |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here is a data example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [ImageStream](#%28tech._imagestream%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (create-rocket-scene height)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([place-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._place-image%29%29) ![](../Images/b7645583b2b837e94719e506045143fc.jpg) 50 height ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 60 60)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: You may recognize this as one of the first pieces of code in the Prologue.
  prefs: []
  type: TYPE_NORMAL
- en: The job of (my-animate  s  n) is to show the images (s  0), (s  1), and so on
    at a rate of 30 images per second up to n images total. Its result is the number
    of clock ticks passed since launched.
  prefs: []
  type: TYPE_NORMAL
- en: Note This case is an example where it is possible to write down examples/test
    cases easily but these examples/tests per se do not inform the design process
    of this [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    function. Using functions as data representations calls for more design concepts
    than this book supplies. [![image](../Images/23d8d9c567831341eae7ccac8252d01a.jpg)](#%28counter._%28exercise._ex~3aanimate%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 299\. Design a data representation for finite and infinite sets so
    that you can represent the sets of all odd numbers, all even numbers, all numbers
    divisible by 10, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Design the functions add-element, which adds an element to a set; union, which
    combines the elements of two sets; and intersect, which collects all elements
    common to two sets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint Mathematicians deal with sets as functions that consume a potential element
    ed and produce #true only if ed belongs to the set. [![image](../Images/3a1df937ccdd713c3a11a92247339ca7.jpg)](#%28counter._%28exercise._ex~3ainfinite-set%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 18Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This third part of the book is about the role of abstraction in program design.
    Abstraction has two sides: creation and use. It is therefore natural if we summarize
    the chapter as two lessons:'
  prefs: []
  type: TYPE_NORMAL
- en: Repeated code patterns call for abstraction. To abstract means to factor out
    the repeated pieces of code—<wbr>the abstraction—<wbr>and to parameterize over
    the differences. With the design of proper abstractions, programmers save themselves
    future work and headaches because mistakes, inefficiencies, and other problems
    are all in one place. One fix to the abstraction thus eliminates any specific
    problem once and for all. In contrast, the duplication of code means that a programmer
    must find all copies and fix all of them when a problem is found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Most languages come with a large collection of abstractions. Some are contributions
    by the language design team; others are added by programmers who use the language.
    To enable effective reuse of these abstractions, their creators must supply the
    appropriate pieces of documentation—<wbr>a purpose statement, a signature, and
    good examples—<wbr>and programmers use them to apply abstractions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All programming languages come with the means to build abstractions though some
    means are better than others. All programmers must get to know the means of abstractions
    and the abstractions that a language provides. A discerning programmer will learn
    to distinguish programming languages along these axes.Beyond abstraction, this
    third part also introduces the idea that
  prefs: []
  type: TYPE_NORMAL
- en: functions are values, and they can represent information.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: While the idea is ancient for the Lisp family of programming languages (such
    as ISL+) and for specialists in programming language research, it has only recently
    gained acceptance in most modern mainstream languages—<wbr>C#, C++, Java, JavaScript,
    Perl, Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Intermezzo: Scope and Abstraction'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the preceding part gets away with explaining [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    and [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    in an informal manner, the introduction of such abstraction mechanisms really
    requires additional terminology to facilitate such discussions. In particular,
    these discussions need words to delineate regions within programs and to refer
    to specific uses of variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'This intermezzo starts with a section that defines the new terminology: scope,
    binding variables, and bound variables. It immediately uses this new capability
    to introduce two abstraction mechanisms often found in programming languages:
    for loops and pattern matching. The former is an alternative to functions such
    as [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29),
    [build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29),
    [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29),
    etc; the latter abstracts over the conditional in the functions of the first three
    parts of the book. Both require not only the definition of functions but the creation
    of entirely new language constructs, meaning they are not something programmers
    can usually design and add to their vocabulary.'
  prefs: []
  type: TYPE_NORMAL
- en: Scope
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Consider the following two definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x x) 25))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (g x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (f ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x 1)) (f ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) x 1))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Clearly, the occurrences of x in f are completely unrelated to the occurrences
    of x in the definition of g. We could systematically replace the shaded occurrences
    with y and the function would still compute the exact same result. In short, the
    shaded occurrences of x have meaning only inside the definition of f and nowhere
    else.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, the first occurrence of x in f is different from the others.
    When we evaluate (f  n), the occurrence of f completely disappears while those
    of x are replaced with n. To distinguish these two kinds of variable occurrences,
    we call the x in the function header a binding occurrence and those in the function’s
    body the bound occurrences. We also say that the binding occurrence of x binds
    all occurrences of x in the body of f. Indeed, people who study programming languages
    even have a name for the region where a binding occurrence works, namely, its
    lexical scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'The definitions of f and g bind two more names: f and g. Their scope is called
    top-level scope because we think of scopes as nested (see below).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The word free occurrence applies to a variable without any binding occurrence.
    It is a name without definition, i.e., neither the language nor its libraries
    nor the program associates it with some value. For example, if you were to put
    the above program into a definitions area by itself and run it, entering f, g,
    and x at the prompt of the interactions would show that the first two are defined
    and the last one is not:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > f |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| f |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > g |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| g |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > x |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| x: this variable is not defined |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The description of lexical scope suggests a pictorial representation of f’s
    definition:DrRacket’s “Check Syntax” functionality draws diagrams like these.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/e0b96a89eb82b452a07c098e0e73b293.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Here is an arrow diagram for top-level scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/b742be53e1cc48f734fb376a00e76e57.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Note that the scope of f includes all definitions above and below its definition.
    The bullet over the first occurrence indicates that it is a binding occurrence.
    The arrows from the binding occurrence to the bound occurrences suggest the flow
    of values. When the value of a binding occurrence becomes known, the bound occurrences
    receive their values from there.Along similar lines, these diagrams also explain
    how renaming works. If you wish to rename a function parameter, you search for
    all bound occurrences in scope and replace them. For example, renaming f’s x to
    y in the program above means
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x x) 25))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (g x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (f ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x 1)) (f ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) x 1))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'changes only two occurrences of x:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f y) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) y y) 25))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (g x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (f ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x 1)) (f ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) x 1))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Exercise 300\. Here is a simple ISL+ program:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (p1 x y)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x y)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 2 x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 2 y) 22))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (p2 x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 55 x) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x 11)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (p3 x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (p1 x 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (p1 x 1) (p2 x))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Draw arrows from p1’s x parameter to all its bound occurrences. Draw arrows
    from p1 to all bound occurrences of p1. Check the results with DrRacket “Check
    Syntax” functionality. [![image](../Images/f618053262299f843f32f71420c41ebd.jpg)](#%28counter._%28exercise._ex~3ascope1%29%29)In
    contrast to top-level function definitions, the scope of the definitions in a
    [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    is limited. Specifically, the scope of local definitions is the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression. Consider the definition of an auxiliary function f in a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression. It binds all occurrences within the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression but none that occur outside:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/6006ebe1da83f45d8f0fed41a4f1184d.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'The two occurrences outside of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    are not bound by the local definition of f. As always, the parameters of a function
    definition, local or not, are only bound in the function’s body.Since the scope
    of a function name or a function parameter is a textual region, people also draw
    box diagrams to indicate scope. More precisely, for parameters a box is drawn
    around the body of a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/db491bc2aa757eebd40ea8f3993da4d1.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'In the case of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29),
    the box is drawn around the entire expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/5f84e6a4ef774355c0b8bbd353ddbfe3.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'In this example, the box describes the scope of the definitions of f and g.Drawing
    a box around a scope, we can also easily understand what it means to reuse the
    name of function inside a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/3bd1207c7ec7b0a515df2ece8f9f1585.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'The gray box describes the scope of the inner definition of f; the white box
    is the scope of the outer definition of f. Accordingly, all occurrences of f in
    the gray box refer to the inner [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29);
    all those in the white box, minus the gray one, refer to the definition in the
    outer [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29).
    In other words, the gray box is a hole in the scope of the outer definition of
    f.Holes can also occur in the scope of a parameter definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/dbb4c5c83caee7b243b48fd2648b0b8a.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'In this function, the parameter x is used twice: for f and g; the scope of
    the latter is thus a hole in the scope of the former.'
  prefs: []
  type: TYPE_NORMAL
- en: In general, if the same name occurs more than once in a function, the boxes
    that describe the corresponding scopes never overlap. In some cases the boxes
    are nested within each other, which gives rise to holes. Still, the picture is
    always that of a hierarchy of smaller and smaller nested boxes.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (insertion-sort alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                (add ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon) ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add an alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) an)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  [([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) an ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon)) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) an alon)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                              (add an ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon)))])])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) alon)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 101: Drawing lexical scope contours for [exercise 301](#%28counter._%28exercise._ex~3ascope2%29%29)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 301\. Draw a box around the scope of each binding occurrence of [sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29)
    and alon in [figure 101](#%28counter._%28figure._fig~3aex~3ascope2%29%29). Then
    draw arrows from each occurrence of [sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29)
    to the appropriate binding occurrence. Now repeat the exercise for the variant
    in [figure 102](#%28counter._%28figure._fig~3aex~3ascope2-2%29%29). Do the two
    functions differ other than in name? [![image](../Images/e5d5f93b3796e3671da997dfd6f56e9f.jpg)](#%28counter._%28exercise._ex~3ascope2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                (add ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon) ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add an alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) an)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   [([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) an ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon)) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) an alon)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                               (add an ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon)))])])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) alon)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 102: Drawing lexical scope contours for [exercise 301](#%28counter._%28exercise._ex~3ascope2%29%29)
    (version 2)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Exercise 302\. Recall that each occurrence of a variable receives its value
    from its binding occurrence. Consider the following definition:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) x ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 1 x))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Where is the shaded occurrence of x bound? Since the definition is a constant
    definition and not a function definition, we need to evaluate the right-hand side
    immediately. What should be the value of the right-hand side according to our
    rules? [![image](../Images/47527921f17b2a9d2a071bd59247d33a.jpg)](#%28counter._%28exercise._ex~3ascope-meaning%29%29)As
    discussed in [Functions from lambda](#%28part._sec~3aint-lambda%29), a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expression is just a short-hand for a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression. That is, if a-new-name does not occur in [exp](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._exp%29%29),
  prefs: []
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x-1 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  x-n) [exp](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._exp%29%29))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: is short for
  prefs: []
  type: TYPE_NORMAL
- en: '| ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (a-new-name x-1 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) x-n) [exp](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._exp%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   a-new-name) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The short-hand explanation suggests that
  prefs: []
  type: TYPE_NORMAL
- en: ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x-1 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  x-n) [exp](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._exp%29%29))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'introduces x-1, ..., x-n as binding occurrences and that the scope of parameters
    is [exp](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._exp%29%29),
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/62e8d62870e1fd1d862f740604c56d95.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Of course, if [exp](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._exp%29%29)
    contains further binding constructs (say, a nested [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression), then the scope of the variables may have a hole.Exercise 303\. Draw
    arrows from the shaded occurrences of x to their binding occurrences in each of
    the following three [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x y)
    |'
  prefs:
  - PREF_OL
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x y)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x y)
    |'
  prefs:
  - PREF_OL
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) x ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) y y)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 x)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([/](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2F%29%29) 1 x)))))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x y)
    |'
  prefs:
  - PREF_OL
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      (([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 x)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|            ([/](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2F%29%29) 1 x)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) y y))))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Also draw a box for the scope of each shaded x and holes in the scope as necessary.
    [![image](../Images/2e11e4ced554002a3dc2d5f8d943c065.jpg)](#%28counter._%28exercise._ex~3alambda2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: ISL for Loops
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Even though it never mentions the word, Abstraction introduces loops. Abstractly,
    a loop traverses compound data, processingUse the 2htdp/abstraction library. Instructors
    who use it for the remainder of the book should explain how the principles of
    design apply to languages without for and match. one piece at a time. In the process,
    loops also synthesize data. For example, [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    traverses a list, applies a function to each item, and collects the results in
    a list. Similarly, [build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29)
    enumerates the sequence of predecessors of a natural number (from 0 to ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  1)),
    maps each of these to some value, and also gathers the results in a list.
  prefs: []
  type: TYPE_NORMAL
- en: The loops of ISL+ differ from those in conventional languages in two ways. First,
    a conventional loop does not directly create new data; in contrast, abstractions
    such as [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    and [build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29)
    are all about computing new data from traversals. Second, conventional languages
    often provide only a fixed number of loops; an ISL+ programmer defines new loops
    as needed. Put differently, conventional languages view loops as syntactic constructs
    akin to [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    or [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29),
    and their introduction requires a detailed explanation of their vocabulary, grammar,
    scope, and meaning.
  prefs: []
  type: TYPE_NORMAL
- en: Loops as syntactic constructs have two advantages over the functional loops
    of the preceding part. On one hand, their shape tends to signal intentions more
    directly than a composition of functions. On the other hand, language implementations
    typically translate syntactic loops into faster commands for computers than functional
    loops. It is therefore common that even functional programming languages—<wbr>with
    all their emphasis on functions and function compositions—<wbr>provide syntactic
    loops.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we introduce ISL+’s so-called for loops. The goal is to illustrate
    how to think about conventional loops as linguistic constructs and to indicate
    how programs built with abstractions may use loops instead. [Figure 103](#%28counter._%28figure._fig~3asyn-for-loops%29%29)
    spells out the grammar of our selected for loops as an extension of BSL’s grammar
    from [Intermezzo: BSL](part_one.html#%28part._i1-2%29). Every loop is an expression
    and, like all compound constructs, is marked with a keyword. The latter is followed
    by a parenthesized sequence of so-called comprehension clauses and a single expression.
    The clauses introduce so-called loop variables, and the expression at the end
    is the loop body.'
  prefs: []
  type: TYPE_NORMAL
- en: '|   expr |   | = |   | ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for/and](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Fand%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for*/and](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Fand%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for/or](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2For%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for*/or](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2For%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for/sum](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Fsum%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for*/sum](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Fsum%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for/product](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Fproduct%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for*/product](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Fproduct%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for/string](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Fstring%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([for*/string](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Fstring%29%29) (clause clause ...) expr)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   |   |   |   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   clause |   | = |   | [variable expr] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 103: ISL+ extended with for loops'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Even a cursory look at the grammar shows that the dozen looping constructs
    come in six pairs: a for and for* variant for each of list, and, or, sum, product,
    and string.Racket’s version of these loops come with more functionality than those
    presented here, and the language has many more loops than this. All for loops
    bind the variables of their clauses in the body; the for* variants also bind variables
    in the subsequent clauses. The following two, near-identical code snippets illustrate
    the difference between these two scoping rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ![image](../Images/12021813986b35e80b7c3b63fab5dd9f.jpg) |  | ![image](../Images/51f02980a6544e032def126c0f85c1dc.jpg)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The syntactic difference is that the left one uses [for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29)
    and the right one [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29).
    In terms of scope, the two strongly differ as the arrows indicate. While both
    pieces introduce the loop variables width and height, the left one uses an externally
    defined variable for height’s initial value and the right one uses the first loop
    variable.Semantically, a [for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29)
    expression evaluates the expressions in its clauses to generate sequences of values.
    If a clause expression evaluates to
  prefs: []
  type: TYPE_NORMAL
- en: a list, its items make up the sequence values;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a natural number n, the sequence consists of 0, 1, ..., ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  1);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a string, its one-character strings are the sequence items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, [for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29)
    evaluates the loop body with the loop variables successively bound to the values
    of the generated sequence(s). Finally, it collects the values of its body into
    a list. The evaluation of a [for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29)
    expression stops when the shortest sequence is exhausted.
  prefs: []
  type: TYPE_NORMAL
- en: Terminology Each evaluation of a loop body is called an iteration. Similarly,
    a loop is said to iterate over the values of its loop variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on this explanation, we can easily generate the list from 0 to 9:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29) ([i 10])
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     i) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| (list 0 1 2 3 4 5 6 7 8 9) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This is the equivalent a [build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29)
    loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29) 10 ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (i) i))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list 0 1 2 3 4 5 6 7 8 9) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The second example “zips” together two sequences:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29) ([i 2] [j ''(a b)])
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) i j))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| (list (list 0 ''a) (list 1 ''b)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'For comparison again, here is the same expression using plain ISL+:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) i-s ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29) 2 ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (i) i)))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) j-s ''(a b)))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) [list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) i-s j-s))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| (list (list 0 ''a) (list 1 ''b)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The final example emphasizes designing with [for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design enumerate. The function consumes a list and produces a
    list of the same items paired with their relative index.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Stop! Design this function systematically using ISL+’s abstractions.With [for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29),
    this problem has a straightforward solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29) X] -> [[List-of](#%28tech._sim-dd._list._of%29)
    [[List](#%28tech._sim-dd._list%29) N X]] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; pair each item in lx with its index |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (enumerate ''(a b c)) ''((1 a) (2 b) (3 c))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (enumerate lx)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29) ([x lx] [ith (length lx)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ith 1) x)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The function’s body uses [for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29)
    to iterate over the given list and a list of numbers from 0 to (length  lx) (minus
    1); the loop body combines the index (plus 1) with the list item.In semantic terms,
    [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29)
    iterates over the sequences in a nested fashion while [for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29)
    traverses them in parallel. That is, a [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29)
    expression basically unfolds into a nest of loops:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29) ([i 2] [j ''(a b)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: is short for
  prefs: []
  type: TYPE_NORMAL
- en: '| ([for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29) ([i 2])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29) ([j ''(a b)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In addition, [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29)
    collects the nested lists into a single list by concatenating them with [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)
    and [append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29).Exercise 304\.
    Evaluate
  prefs: []
  type: TYPE_NORMAL
- en: ([for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29) ([i 2] [j '(a b)]) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) i j))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: ([for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29) ([i 2] [j '(a b)]) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) i j))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'in the interactions area of DrRacket. [![image](../Images/e134c3e8b0cf4a41d588c2a8f991275b.jpg)](#%28counter._%28exercise._ex~3afor-star0%29%29)Let’s
    continue the exploration by turning the difference in scoping between [for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29)
    and [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29)
    into a semantic difference:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) width 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29) ([width 3][height width])
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) width height))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| (list (list 0 0) (list 1 1)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29) ([width 3][height width])
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) width height))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| (list (list 1 0) (list 2 0) (list 2 1)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: To understand the first interaction, remember that [for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29)
    traverses the two sequences in parallel and stops when the shorter one is exhausted.
    Here, the two sequences are
  prefs: []
  type: TYPE_NORMAL
- en: '| width |  | = |  | 0, 1, 2 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| height |  | = |  | 0, 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| body |  | = |  | ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  0  0)
    ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  1  1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first two rows show the values of the two loop variables, which change
    in tandem. The last row shows the result of each iteration, which explains the
    first result and the absence of a pair containing 2.Now contrast this situation
    with [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| width |  | = |  | 0 |  | 1 |  | 2 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| height |  | = |  |  |  | 0 |  | 0, 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| body |  | = |  |  |  | ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  1  0)
    |  | ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  2  0)
    ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  2  1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'While the first row is like the one for [for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29),
    the second one now displays sequences of numbers in its cells. The implicit nesting
    of [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29)
    means that each iteration recomputes height for a specific value of width and
    thus creates a distinct sequence of height values. This explains why the first
    cell of height values is empty; after all, there are no natural numbers between
    0 (inclusive) and 0 (exclusive). Finally, each nested for loop yields a sequences
    of pairs, which are collected into a single list of pairs.Here is a problem that
    illustrates this use of [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29)
    in context:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design cross. The function consumes two lists, l1 and l2, and
    produces pairs of all items from these lists.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Stop! Take a moment to design the function using existing abstractions.As you
    design cross, you work through a table such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '| cross |  | ''a |  | ''b |  | ''c |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 1 |  | ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  ''a  1)
    |  | ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  ''b  1)
    |  | ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  ''c  1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 2 |  | ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  ''a  2)
    |  | ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  ''b  2)
    |  | ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  ''c  2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first row displays l1 as given, while the left-most column shows l2. Each
    cell in the table corresponds to one of the pairs to be generated.Since the purpose
    of [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29)
    is an enumeration of all such pairs, defining cross via [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29)
    is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29) X] [[List-of](#%28tech._sim-dd._list._of%29)
    Y] -> [[List-of](#%28tech._sim-dd._list._of%29) [[List](#%28tech._sim-dd._list%29)
    X Y]] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; generate all pairs of items from l1 and l2 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (cross ''(a b c) ''(1 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (c) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) (length c) 6)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (cross l1 l2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29) ([x1 l1][x2 l2])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) x1 x2)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: We use [check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29)
    instead of [check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    because we do not wish to predict the exact order in which [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29)
    generates the pairs.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29) X] -> [[List-of](#%28tech._sim-dd._list._of%29)
    [[List-of](#%28tech._sim-dd._list._of%29) X]] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a list of all rearrangements of the items in w |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (arrangements w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) w) ''(())]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29) ([item w]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                       [arrangement-without-item |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                        (arrangements ([remove](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remove%29%29) item w))])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) item arrangement-without-item))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29) X] -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (all-words-from-rat? w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29) "rat") w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29) "art") w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29) "tar") w)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (arrangements ''("r" "a" "t"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  all-words-from-rat?) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 104: A compact definition of arrangements with [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note [Figure 104](#%28counter._%28figure._fig~3apermutation-for%29%29) shows
    another in-context use of [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29).
    It displays a compact solution of the extended design problem of creating all
    possible re-arrangements of the letters in a given list.
  prefs: []
  type: TYPE_NORMAL
- en: We thank Mark Engelberg for suggesting this exhibition of expressive power.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: While [Word Games, the Heart of the Problem](part_two.html#%28part._sec~3apermute%29)
    sketches the proper design of this complex program, [figure 104](#%28counter._%28figure._fig~3apermutation-for%29%29)
    uses the combined power of [for*/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2A%2Flist%29%29)
    and an unusual form of recursion to define the same program as a single, five-line
    function definition. The figure merely exhibits the power of these abstractions;
    for the underlying design, see especially [exercise 477](part_five.html#%28counter._fsm._%28exercise._ex~3apermutation-gen%29%29).
    End
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, .../list signals that the loop creates a list by collecting the results
    of the iterations. By analogy, for and for* loops for
  prefs: []
  type: TYPE_NORMAL
- en: '.../and apply an operation like [and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)
    to all of the generated values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| > ([for/and](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Fand%29%29) ([i 10]) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) 9 i) 0))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([for/and](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Fand%29%29) ([i 10]) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([>=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e~3d%29%29) i 0) i #false))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 9 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'For pragmatics, the loop returns the last generated value or #false.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '.../or apply an operation like [or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29)
    to all of the generated values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| > ([for/or](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2For%29%29) ([i 10]) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) 9 i) 0) i #false))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 9 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([for/or](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2For%29%29) ([i 10]) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) i 0) i #false))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'These loops return the first value that is not #false.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '.../sum add up the numbers that the iterations generate:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| > ([for/sum](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Fsum%29%29) ([c "abc"]) ([string->int](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-~3eint%29%29) c))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 294 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '.../product multiply the numbers that the iterations generate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| > ([for/product](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Fproduct%29%29) ([c "abc"]) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([string->int](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-~3eint%29%29) c) 1))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 970200 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '.../string create [String](part_one.html#%28tech._string%29)s from the [1String](part_one.html#%28tech._1string%29)
    sequence:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| > ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) a ([string->int](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-~3eint%29%29) "a"))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([for/string](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Fstring%29%29) ([j 10]) ([int->string](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._int-~3estring%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) a j)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| "abcdefghij" |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Imagine how a for/fold loop would work.
  prefs: []
  type: TYPE_NORMAL
- en: Stop again! It is an instructive exercise to re-formulate all of the above examples
    using the existing abstractions in ISL+. Doing so also indicates how to design
    functions with for loops instead of abstract functions. Hint Design and-map and
    or-map, which work like [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    and [ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29),
    respectively, but return the appropriate non-#false values.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29) -> sequence? |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; construct the infinite sequence of natural numbers, |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; starting from n |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([in-naturals](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28def._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._in-naturals%29%29) n) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [N](part_two.html#%28tech._n%29)  [N](part_two.html#%28tech._n%29)  [N](part_two.html#%28tech._n%29)
    -> sequence? |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; construct the following finite sequence of natural numbers: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   start |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  start  step)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  start  step  step)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;  until the number exceeds end |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([in-range](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28def._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._in-range%29%29) start end step) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 105: Constructing sequences of natural numbers'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Looping over numbers isn’t always a matter of enumerating 0 through ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  1).
    Often programs need to step through non-sequential sequences of numbers; other
    times, an unlimited supply of numbers is needed. To accommodate this form of programming,
    Racket comes with functions that generate sequences, and [figure 105](#%28counter._%28figure._fig~3asequence-makers%29%29)
    lists two that are provided in the abstraction library for ISL+.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the first one, we can simplify the enumerate function a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (enumerate.v2 lx)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([for/list](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Flist%29%29) ([item lx] [ith ([in-naturals](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28def._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._in-naturals%29%29) 1)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ith item)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here [in-naturals](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28def._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._in-naturals%29%29)
    is used to generate the infinite sequence of natural numbers starting at 1; the
    for loop stops when l is exhausted.With the second one, it is, for example, possible
    to step through the even numbers among the first n:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; add the even numbers between 0 and n (exclusive) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (sum-evens 2) 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (sum-evens 4) 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sum-evens n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([for/sum](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._for%2Fsum%29%29) ([i ([in-range](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28def._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._in-range%29%29) 0 n 2)]) i))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Although this use may appear trivial, many problems originating in mathematics
    call for just such loops, which is precisely why concepts such as [in-range](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28def._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._in-range%29%29)
    are found in many programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 305\. Use loops to define convert-euro. See [exercise 267](#%28counter._%28exercise._ex~3ause-map%29%29).
    [![image](../Images/3b78f9e00abec70dc519c5c3493dfa3d.jpg)](#%28counter._%28exercise._ex~3ause-map-for%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 306\. Use loops to define a function that
  prefs: []
  type: TYPE_NORMAL
- en: creates the list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) n 1))
    for any natural number n;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates the list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) n)
    for any natural number n;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates the list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  1  1/2  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  1/n)
    for any natural number n;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates the list of the first n even numbers;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: creates a diagonal square of 0s and 1s; see [exercise 262](#%28counter._%28exercise._ex~3alocal-for-diagonal%29%29).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, use loops to define tabulate from [exercise 250](#%28counter._%28exercise._ex~3aabs-tabulate%29%29).
    [![image](../Images/9029ae146039b6605531cc9cf1a610d7.jpg)](#%28counter._%28exercise._ex~3abuild-list1-for%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 307\. Define find-name. The function consumes a name and a list of
    names. It retrieves the first name on the latter that is equal to, or an extension
    of, the former.
  prefs: []
  type: TYPE_NORMAL
- en: Define a function that ensures that no name on some list of names exceeds some
    given width. Compare with [exercise 271](#%28counter._%28exercise._ex~3aand-or-map%29%29).
    [![image](../Images/607be91000f5e5ca8b7dd56ef2ebffe6.jpg)](#%28counter._%28exercise._ex~3aand-or-map-loop%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Pattern Matching
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When we design a function for a data definition with six clauses, we use a six-pronged
    [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    expression. When we formulate one of the [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clauses, we use a predicate toThe interested instructor may wish to study the
    facilities of the 2htdp/abstraction library to define algebraic data types. determine
    whether this clause should process the given value and, if so, selectors to deconstruct
    any compound values. The first three parts of this book explain this idea over
    and over again, and many of its code snippets exhibit just this pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Repeated patterns call for abstraction. While Abstraction explains how programmers
    can create some of these abstractions, the predicate-selector pattern can be addressed
    only by a language designer. In particular the designers of functional programming
    languages have recognized the need for abstracting the repetitive uses of predicates
    and selectors. These languages therefore provide pattern matching as a linguistic
    construct that combines and simplifies these [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clauses.
  prefs: []
  type: TYPE_NORMAL
- en: This section presents a simplification of Racket’s pattern matcher. [Figure 106](#%28counter._pm._%28figure._fig~3asyn-match%29%29)
    displays the grammatical extension for [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29).
    Clearly, [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    is a syntactically complex construct. While its basic outline resembles that of
    [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29),
    the conditions are replaced by patterns, which come with their own vocabulary
    and grammatical rule.
  prefs: []
  type: TYPE_NORMAL
- en: '|   expr |   | = |   | ... |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) expr [pattern expr] ...)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   |   |   |   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   pattern |   | = |   | variable |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | literal-constant |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | (cons pattern pattern) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | (structure-name pattern ...) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | (? predicate-name) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 106: ISL+ match expressions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Roughly speaking,
  prefs: []
  type: TYPE_NORMAL
- en: '| ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) expr
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [pattern1 expr1] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [pattern2 expr2] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'proceeds like a [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    expression in that it evaluates expr and sequentially tries to match its result
    with pattern1, pattern2, ... until it succeeds with patterni. At that point, it
    determines the value of expri, which is also the result of the entire [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    expression.The key difference is that [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29),
    unlike [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29),
    introduces a new scope, which is best illustrated with a screen shot from DrRacket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/fe7e58a7a722effef689d8771a36c2bc.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: As the image shows, each pattern clause of this function binds variables. Furthermore,
    the scope of a variable is the body of the clause, so even if two patterns introduce
    the same variable binding—<wbr>as it is the case in the above code snippet—<wbr>their
    bindings cannot interfere with each other.Syntactically, a pattern resembles nested,
    structural data whose leafs are literal constants, variables, or predicate patterns
    of the shape
  prefs: []
  type: TYPE_NORMAL
- en: (? predicate-name)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the latter, predicate-name must refer to a predicate function in scope, that
    is, a function that consumes one value and produces a [Boolean](part_one.html#%28tech._boolean%29).Semantically,
    a pattern is [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)ed
    to a value v. If the pattern is
  prefs: []
  type: TYPE_NORMAL
- en: a literal-constant, it matches only that literal constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) 4
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [''four  1] &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ["four" 2] &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [#true  3] &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [4      "hello world"]) &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| "hello world" |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: a variable, it matches any value, and it is associated with this value during
    the evaluation of the body of the corresponding [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    clause
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) 2
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [3 "one"] &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [x ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x 3)])
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| 5 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Since 2 does not equal the first pattern, which is the literal constant 3, [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    matches 2 with the second pattern, which is a plain variable and thus matches
    any value. Hence, [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    picks the second clause and evaluates its body, with x standing for 2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  pattern1
    pattern2), it matches only an instance of [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29),
    assuming its first field matches pattern1 and its rest field matches pattern2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 1 ''())
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 1 tail) tail]
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) head tail) head])
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ''() |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 2 ''())
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 1 tail) tail]
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) head tail) head])
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| 2 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: These interactions show how [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    first deconstructs [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    and then uses literal constants and variables for the leafs of the given list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (structure-name  pattern1 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  patternn),
    it matches only a structure-name structure, assuming its field values match pattern1,
    ..., patternn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| > ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) p ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 3 4))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) p
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [(posn x y) ([sqrt](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqrt%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([sqr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqr%29%29) x) ([sqr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqr%29%29) y)))])
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| 5 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'Obviously, matching an instance of posn with a pattern is just like matching
    a [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    pattern. Note though, how the pattern uses posn for the pattern, not the name
    of the constructor.Matching also works for our own structure type definitions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| > ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) phone [area switch four])
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) (make-phone 713 664 9993)
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [(phone x y z) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x y z)])
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| 11370 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: 'Again, the pattern uses the name of the structure, phone.Finally, matching
    also works across several layers of constructions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) (make-phone 713 664 9993) ''())
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) (phone area-code 664 9993) tail)
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      area-code]) &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| 713 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: This [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    expression extracts the area code from a phone number in a list if the switch
    code is 664 and the last four digits are 9993.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '(?  predicate-name), it matches when (predicate-name  v) produces #true'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 1 ''())
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) (? [symbol?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3f%29%29)) tail) tail]
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) head tail) head])
    &#124;'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| 1 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: This expression produces 1, the result of the second clause, because 1 is not
    a symbol.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Stop! Experiment with [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    before you read on.At this point, it is time to demonstrate the usefulness of
    [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample Problem Design the function last-item, which retrieves the last item
    on a non-empty list. Recall that non-empty lists are defined as follows:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ; A [Non-empty-list X] is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  X  ''())
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  X  [[Non-empty-list](#%28tech._pm._non._empty._list%29)  X])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! [Arbitrarily Large Data](part_two.html) deals with this problem. Look
    up the solution.With [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29),
    a designer can eliminate three selectors and two predicates from the solution
    using [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[Non-empty-list](#%28tech._pm._non._empty._list%29) X] -> X |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; retrieve the last item of ne-l |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (last-item ''(a b c)) ''c)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-error%29%29) (last-item ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (last-item ne-l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) ne-l
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) lst ''()) lst]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) fst rst) (last-item rst)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Instead of predicates and selectors, this solution uses patterns that are just
    like those found in the data definition. For each self-reference and occurrence
    of the set parameter in the data definition, the patterns use program-level variables.
    The bodies of the [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    clauses no longer extract the relevant parts from the list with selectors but
    simply refer to these names. As before, the function recurs on the [rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)
    field of the given [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    because the data definition refers to itself in this position. In the base case,
    the answer is lst, the variable that stands for the last item on the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at a second problem from [Arbitrarily Large Data](part_two.html):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample Problem Design the function depth, which measures the number of layers
    surrounding Russian doll. Recall the corresponding data definition:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) layer [[color](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._color%29%29) doll])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An RD (short for Russian doll) is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  "doll" |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-layer  [String](part_one.html#%28tech._string%29)  [RD](#%28tech._pm._rd%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Look up the solution and try to modify it to use [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29).Here
    is a definition of depth using [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [RD](#%28tech._pm._rd%29) -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; how many dolls are a part of an-rd |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (depth (make-layer "red" "doll")) 1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (depth a-doll)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) a-doll
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ["doll" 0] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(layer c inside) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (depth inside) 1)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'While the pattern in the function’s first [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    clause looks for the literal string "doll", the second one matches any layer structure,
    associating c with the value in the [color](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._color%29%29)
    field and inside with the value in the doll field. In short, [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    again simplifies the conditional expression needed by eliminating predicates and
    selectors.The final problem is an excerpt from the generalized UFO game:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Use [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    to design the move-right function. The latter consumes a list of [Posn](part_one.html#%28tech._posn%29)s,
    which represent the positions of objects on a canvas, plus a number. It adds the
    latter to each x-coordinate, which represents an rightward movement of these objects.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Our solution to the problem combines the abstract [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    function introduced in the preceding part of the book with [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    -> [[List-of](#%28tech._sim-dd._list._of%29)  [Posn](part_one.html#%28tech._posn%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; moves each object right by delta-x pixels |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (move-right |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 1 1) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 10 14)) 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 4 1) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 13 14)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (move-right lop delta-x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (p)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29) p
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [(posn x y) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x delta-x) y)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        lop)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: You may wish to define the version that uses [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    and the selectors and the one that uses [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    only—<wbr>both without using [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29).
    We leave it to you to judge which version is the most readable one.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 308\. Use [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29)
    to design the function replace, which substitutes the area code 713 with 281 in
    a list of phone records. For a structure type definition of phone records, see
    above. Formulate a suitable data definition first. If you are stuck, look up your
    solution for [exercise 170](part_two.html#%28counter._%28exercise._work4%29%29).
    [![image](../Images/ad7f0b0d108deee7f6dea9a5b6c30a33.jpg)](#%28counter._pm._%28exercise._ex~3awork4-again%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 309\. [Figure 64](part_two.html#%28counter._%28figure._fig~3awords-on-line%29%29)
    displays a function that determines the number of [String](part_one.html#%28tech._string%29)s
    per item in a list of list of strings. The function’s signature, purpose and header
    can be formulated like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](#%28tech._sim-dd._list._of%29) [[List-of](#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]]
    -> [[List-of](#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines the number of words on each line |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (words-on-line lls) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Define the function using [match](http://docs.racket-lang.org/teachpack/2htdpabstraction.html#%28form._x._%28%28lib._teachpack%2F2htdp%2Fabstraction..rkt%29._match%29%29).
    [![image](../Images/5aef4dc97f3c04b6631ad45b1d07d1c4.jpg)](#%28counter._pm._%28exercise._ex~3awords-on-line-match%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: IVIntertwined Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might think that the data definitions for lists and natural numbers are
    quite unusual. These data definitions refer to themselves, and in all likelihood,
    they are the first such definitions you have ever encountered. As it turns out,
    many classes of data require even more complex data definitions than these two.
    Common generalizations involve many self-references in one data definition or
    a bunch of data definitions that refer to each other. These forms of data have
    become ubiquitous and it is therefore critical for a programmer to learn to cope
    with any collection of data definitions. And that’s what the design recipe is
    all about.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part starts with a generalization of the design recipe so that it works
    for all forms of structural data definitions. Next, it introduces the concept
    of iterative refinement from [Projects: Lists](part_two.html#%28part._ch~3aproj-lists%29)
    on a rigorous basis because complex data definitions are not developed in one
    fell swoop but in several stages. Indeed, the use of iterative refinement is one
    of the reasons why all programmers are little scientists and why our discipline
    uses the word “science” in its American name. Two last chapters illustrate these
    ideas: one explains how to design an interpreter for BSL and another is about
    processing XML, a data exchange language for the Web. The last chapter expands
    the design recipe one more time, re-working it for functions that process two
    complex arguments at the same time.'
  prefs: []
  type: TYPE_NORMAL
- en: 19The Poetry of S-expressions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Programming resembles poetry. Like poets, programmers practice their skill on
    seemingly pointless ideas. They revise and edit all the time, as the preceding
    chapter explains. This chapter introduces increasingly complex forms of data—<wbr>seemingly
    without a real-world purpose. Even when we provide a motivational background,
    the chosen kinds of data are pure to an extreme, and it is unlikely that you will
    ever encounter them again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, this chapter shows the full power of the design recipe and introduces
    you to the kinds of data that real-world programs cope with. To connect this material
    with what you will encounter in your life as a programmer, we label each section
    with appropriate names: trees, forests, XML. The last one is a bit misleading,
    because it is really about S-expressions; the connection between S-expressions
    and XML is clarified in [The Commerce of XML](#%28part._ch~3amoney-sexp%29), which
    in contrast to this chapter, comes much closer to real-world uses of complex forms
    of data.'
  prefs: []
  type: TYPE_NORMAL
- en: 19.1Trees
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All of us have a family tree. One way to draw a family tree is to add an element
    every time a child is born and to connect the elements of the father and mother.
    For those people whose parents are unknown, there is no connection to draw. The
    result is an ancestor family tree because, given any person, the tree points to
    all of the person’s known ancestors.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/66e5ce9a8902aee43674bd987d5485c9.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 107: A family tree'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 107](#%28counter._%28figure._fig~3afamily-tree%29%29) displays a three-tier
    family tree. Gustav is the child of Eva and Fred, while Eva is the child of Carl
    and Bettina. In addition to people’s names and family relationships, the tree
    also records years of birth and eye colors. Based on this sketch, you can easily
    imagine a family tree reaching back many generations and one that records other
    kinds of information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a family tree is large, it makes sense to represent it as data and to
    design programs that process this kind of data. Given that a point in a family
    tree combines five pieces of information—<wbr>the father, the mother, the name,
    the birth date, and the eye color—<wbr>we should define a structure type:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) child [father mother name date eyes])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The structure type definition calls a data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Child is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-child  [Child](#%28tech._child%29)  [Child](#%28tech._child%29)  [String](part_one.html#%28tech._string%29)  [N](part_two.html#%28tech._n%29)  [String](part_one.html#%28tech._string%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: While this data definition looks straightforward, it is also useless. It refers
    to itself but, because it doesn’t have any clauses, there is no way to create
    a proper instance [Child](#%28tech._child%29). Roughly, we would have to write
  prefs: []
  type: TYPE_NORMAL
- en: (make-child (make-child (make-child [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'without end. To avoid such pointless data definitions, we demand that a self-referential
    data definition has several clauses and that at least one of them does not refer
    back to the data definition.Let’s postpone the data definition for a moment, and
    experiment instead. Suppose we are about to add a child to an existing family
    tree and that we already have representations for the parents. In that case, we
    can simply construct a new child structure. For example, to represent Adam in
    a program that already represents Carl and Bettina, it suffices to add the following
    child structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) Adam
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-child Carl Bettina "Adam" 1950 "hazel")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'assuming Carl and Bettina stand for representations of Adam’s parents.Then
    again, a person’s parents may be unknown, like Bettina’s in the family tree of
    [figure 107](#%28counter._%28figure._fig~3afamily-tree%29%29). Yet, even then,
    we must fill the corresponding parent field(s) in the child representation. Whatever
    data we choose, it must signal an absence of information. On one hand, we could
    use #false, "none", or ''() from the pool of existing values. On the other hand,
    we should really say that the information is missing from a family tree. We can
    achieve this objective best with the introduction of a structure type with an
    appropriate name:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) no-parent [])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, to construct a child structure for Bettina, we say
  prefs: []
  type: TYPE_NORMAL
- en: '| (make-child (make-no-parent) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (make-no-parent) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             "Bettina" 1926 "green") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Of course, if only one piece of information is missing, we fill just that field
    with this special value.Our experimentation suggests two insights. First, we are
    not looking for a data definition that describes how to generate instances of
    child structures but for a data definition that describes how to represent family
    trees. Second, the data definition consists of two clauses, one for the variant
    describing unknown family trees and another one for known family trees:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) no-parent [])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) child [father mother name date eyes])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A FT (short for family tree) is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-no-parent) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-child  [FT](#%28tech._ft%29)  [FT](#%28tech._ft%29)  [String](part_one.html#%28tech._string%29)  [N](part_two.html#%28tech._n%29)  [String](part_one.html#%28tech._string%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Since the “no parent” tree is going to show up a lot in our programs, we define
    NP as a short-hand and revise the data definition a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) NP (make-no-parent))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A FT is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  NP |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-child  [FT](#%28tech._ft%29)  [FT](#%28tech._ft%29)  [String](part_one.html#%28tech._string%29)  [N](part_two.html#%28tech._n%29)  [String](part_one.html#%28tech._string%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Following the design recipe from [Designing with Self-Referential Data Definitions](part_two.html#%28part._ch~3adesign-lists%29),
    we use the data definition to create examples of family trees. Specifically, we
    translate the family tree in [figure 107](#%28counter._%28figure._fig~3afamily-tree%29%29)
    into our data representation. The information for Carl is easy to translate into
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: (make-child NP NP "Carl" 1926 "green")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Bettina and Fred are represented with similar instances of child. The case
    for Adam calls for nested children, one for Carl and one for Bettina:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (make-child (make-child NP NP "Carl" 1926 "green") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (make-child NP NP "Bettina" 1926 "green") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             "Adam" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             1950 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             "hazel") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Since the records for Carl and Bettina are also needed to construct the records
    for Dave and Eva, it is better to introduce definitions that name specific instances
    of child and to use the variable names elsewhere. [Figure 108](#%28counter._%28figure._fig~3afamily.S%29%29)
    illustrates this approach for the complete data representation of the family tree
    from [figure 107](#%28counter._%28figure._fig~3afamily-tree%29%29). Take a close
    look; the tree serves as our running example for the following design exercise.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; Oldest Generation: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) Carl (make-child NP NP "Carl" 1926 "green"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) Bettina (make-child NP NP "Bettina" 1926 "green"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; Middle Generation: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) Adam (make-child Carl Bettina "Adam" 1950 "hazel"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) Dave (make-child Carl Bettina "Dave" 1955 "black"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) Eva (make-child Carl Bettina "Eva" 1965 "blue"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) Fred (make-child NP NP "Fred" 1966 "pink"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; Youngest Generation: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) Gustav (make-child Fred Eva "Gustav" 1988 "brown"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 108: A data representation of the sample family tree'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Instead of designing a concrete function on family trees, let us first look
    at the generic organization of such a function. That is, let us work through the
    design recipe as much as possible without having a concrete task in mind. We start
    with the header material, i.e., step 2 of the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [FT](#%28tech._ft%29) -> ??? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (fun-FT a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Even though we aren’t stating the purpose of the function, we do know that
    it consumes a family tree and that this form of data is the main input. The “???”
    in the signature says that we don’t know what kind of data the function produces;
    the “...” remind us that we don’t know its purpose.The lack of purpose means we
    cannot make up functional examples. Nevertheless, we can exploit the organization
    of the data definition for FT to design a template. Since it consists of two clauses,
    the template must consist of a [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    expression with two clauses:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (fun-FT a-ftree)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(no-parent? a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(child? a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In case the argument to fun-FT satisfies no-parent?, the structure contains
    no additional data, so the first clause is complete. For the second clause, the
    input contains five pieces of data, which we indicate with five selectors in the
    template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [FT](#%28tech._ft%29) -> ??? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (fun-FT a-ftree)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(no-parent? a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (child-father a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (child-mother a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (child-name a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (child-date a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (child-eyes a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The last addition to templates concerns self-references. If a data definition
    refers to itself, the function is likely to recur and templates indicate so with
    suggestive natural recursions. The definition for [FT](#%28tech._ft%29) has two
    self-references, and the template therefore needs two such recursions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [FT](#%28tech._ft%29) -> ??? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (fun-FT a-ftree)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(no-parent? a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (fun-FT (child-father a-ftree)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (fun-FT (child-mother a-ftree)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (child-name a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (child-date a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (child-eyes a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Specifically, fun-FT is applied to the data representation for fathers and mothers
    in the second [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause, because the second clause of the data definition contains corresponding
    self-references.Let us now turn to a concrete function, blue-eyed-child?. Its
    purpose is to determine whether any child structure in a given family tree has
    blue eyes. You may copy, paste, and rename fun-FT to get its template; we replace
    “???” with [Boolean](part_one.html#%28tech._boolean%29) and add a purpose statement;
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [FT](#%28tech._ft%29) -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; does a-ftree contain a child |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; structure with "blue" in the eyes field |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (blue-eyed-child? a-ftree)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(no-parent? a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (blue-eyed-child?
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (child-father a-ftree)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (blue-eyed-child?
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (child-mother a-ftree)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (child-name a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (child-date a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (child-eyes a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'When you work in this fashion, you must replace the template’s generic name
    with a specific one.Checking with our recipe, we realize that we need to backtrack
    and develop some examples before we move on to the definition step. If we start
    with Carl, the first person in the family tree, we see that Carl’s family tree
    does not contain a child with a "blue" eye color. Specifically, the child representing
    Carl says the eye color is "green" and, given that Carl’s ancestor trees are empty,
    they cannot possibly contain a child with "blue" eye color:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (blue-eyed-child? Carl) #false)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In contrast, Gustav contains a child for Eva who does have blue eyes:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (blue-eyed-child? Gustav) #true)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now we are ready to define the actual function. The function distinguishes
    between two cases: a no-parent and a child. For the first case, the answer should
    be obvious even though we haven’t made up any examples. Since the given family
    tree does not contain any child whatsoever, it cannot contain one with "blue"
    as eye color. Hence the result in the first [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause is #false.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the second [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause, the design requires a lot more work. Again following the design recipe,
    we first remind ourselves what the expressions in the template accomplish:'
  prefs: []
  type: TYPE_NORMAL
- en: according to the purpose statement for the function,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (blue-eyed-child? (child-father a-ftree))
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: determines whether some child in the father’s [FT](#%28tech._ft%29) has "blue"
    eyes;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: likewise, (blue-eyed-child?  (child-mother  a-ftree)) determines whether someone
    in the mother’s [FT](#%28tech._ft%29) has blue eyes; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the selector expressions (child-name  a-ftree), (child-date  a-ftree), and (child-eyes  a-ftree)
    extract the name, birth date, and eye color from the given child structure, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we just nee to figure out how to combine these expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clearly, if the child structure contains "blue" in the eyes field, the function’s
    answer is #true. Next, the expressions concerning names and birth dates are useless,
    which leaves us with the recursive calls. As stated, (blue-eyed-child?  (child-father  a-ftree))
    traverses the tree on the the father’s side, while the mother’s side of the family
    tree is processed with (blue-eyed-child?  (child-mother  a-ftree)). If either
    of these expressions returns #true, a-ftree contains a child with "blue" eyes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our analysis suggests that the result should be #true if one of the following
    three expressions is #true:'
  prefs: []
  type: TYPE_NORMAL
- en: ([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29)  (child-eyes  a-ftree)  "blue")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (blue-eyed-child?  (child-father  a-ftree))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (blue-eyed-child?  (child-mother  a-ftree))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'which, in turn, means we need to combine these expressions with [or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29) (child-eyes a-ftree) "blue")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (blue-eyed-child? (child-father a-ftree)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (blue-eyed-child? (child-mother a-ftree))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '[Figure 109](#%28counter._%28figure._fig~3ablue-eyes%29%29) pulls everything
    together in a single definition.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [FT](#%28tech._ft%29) -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; does a-ftree contain a child |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; structure with "blue" in the eyes field |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (blue-eyed-child? Carl) #false)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (blue-eyed-child? Gustav) #true)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (blue-eyed-child? a-ftree)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(no-parent? a-ftree) #false] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29) (child-eyes a-ftree) "blue")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               (blue-eyed-child? (child-father a-ftree)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               (blue-eyed-child? (child-mother a-ftree)))])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 109: Finding a blue-eyed child in an ancestor tree'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Since this function is the very first one to use two recursions, we simulate
    the stepper’s action for (blue-eyed-child?  Carl) to give you an impression of
    how it all works:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (blue-eyed-child? Carl) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (blue-eyed-child? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-child NP NP "Carl" 1926 "green")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Let’s act as if NP were a value and let’s use carl as an abbreviation for the
    instance of child:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [(no-parent? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (make-child NP NP "Carl" 1926 "green")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    #false] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29) (child-eyes carl) "blue")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (blue-eyed-child? (child-father carl)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             (blue-eyed-child? (child-mother carl)))]) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'After dropping the first [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    line, it’s time to replace carl with its value and to perform the three auxiliary
    calculations in [figure 110](#%28counter._%28figure._fig~3acalc-trees%29%29).
    Using these to replace equals with equals, the rest of the computation is explained
    easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29) "green" "blue")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (blue-eyed-child? (child-father carl)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (blue-eyed-child? (child-mother carl))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) #false #false #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: While we trust that you have seen such auxiliary calculations in your mathematics
    courses, you also need to understand that the stepper would not perform such calculations;
    instead it works out only those calculations that are absolutely needed.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; (1) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| (child-eyes (make-child NP NP "Carl" 1926 "green")) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| "green" |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; (2) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| (blue-eyed-child? |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (child-father |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (make-child NP NP "Carl" 1926 "green"))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| (blue-eyed-child? NP) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; (3) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| (blue-eyed-child? |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (child-mother |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (make-child NP NP "Carl" 1926 "green"))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| (blue-eyed-child? NP) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| #false |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 110: Calculating with trees'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 310\. Develop count-persons. The function consumes a family tree and
    counts the child structures in the tree. [![image](../Images/5db0b9e4becc60cfb5e545841101dad6.jpg)](#%28counter._%28exercise._ex~3acount-ft%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 311\. Develop the function average-age. It consumes a family tree and
    the current year. It produces the average age of all child structures in the family
    tree. [![image](../Images/261efb5170b5ce338fe3c2989d85be89.jpg)](#%28counter._%28exercise._ex~3aage-ft%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 312\. Develop the function eye-colors, which consumes a family tree
    and produces a list of all eye colors in the tree. An eye color may occur more
    than once in the resulting list. Hint Use [append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29)
    to concatenate the lists resulting from the recursive calls. [![image](../Images/1abc5d607bebad8e517f544ec7d805b0.jpg)](#%28counter._%28exercise._ex~3aec-ft%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 313\. Suppose we need the function blue-eyed-ancestor?, which is like
    blue-eyed-child? but responds with #true only when a proper ancestor, not the
    given child itself, has blue eyes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the goals clearly differ, the signatures are the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [FT](#%28tech._ft%29) -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (blue-eyed-ancestor? a-ftree) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Formulate a purpose statement for blue-eyed-ancestor?.To appreciate the
    difference, we take a look at Eva:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (blue-eyed-child? Eva) #true)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Eva is blue-eyed, but has no blue-eyed ancestor. Hence,
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (blue-eyed-ancestor? Eva) #false)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In contrast, Gustav is Eva’s son, he does have a blue-eyed ancestor:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (blue-eyed-ancestor? Gustav) #true)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now suppose a friend comes up with this solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (blue-eyed-ancestor? a-ftree)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(no-parent? a-ftree) #false] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        (blue-eyed-ancestor? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (child-father a-ftree)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        (blue-eyed-ancestor? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (child-mother a-ftree)))])) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Explain why this function fails one of its tests. What is the result of (blue-eyed-ancestor?  A)
    no matter which A you choose? Can you fix your friend’s solution? [![image](../Images/5a0888709feb9248d47fa9f20508adec.jpg)](#%28counter._%28exercise._ex~3aproper-bea%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 19.2Forests
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It is a short step from a family tree to a family forest:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A FF (short for family forest) is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [FT](#%28tech._ft%29)  [FF](#%28tech._ff%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation a family forest represents several |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; families (say a town) and their ancestor trees |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here are some trees excerpts from [figure 107](#%28counter._%28figure._fig~3afamily-tree%29%29)
    arranged as forests:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ff1 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) Carl Bettina))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ff2 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) Fred Eva))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ff3 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) Fred Eva Carl))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first two forests contain two unrelated families, and the third one illustrates
    that unlike in real forests, trees in family forests can overlap.Now consider
    this representative problem concerning family trees:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design the function blue-eyed-child-in-forest?, which determines
    whether a family forest contains a child with "blue" in the eyes field.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ; [FF](#%28tech._ff%29) -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; does the forest contain any child with "blue"  eyes |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (blue-eyed-child-in-forest? ff1) #false)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (blue-eyed-child-in-forest? ff2) #true)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (blue-eyed-child-in-forest? ff3) #true)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (blue-eyed-child-in-forest? a-forest)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) a-forest) #false]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) (blue-eyed-child? ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) a-forest))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|          (blue-eyed-child-in-forest? ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) a-forest)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 111: Finding a blue eyed child in a family forest'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The straightforward solution is displayed in [figure 111](#%28counter._%28figure._fig~3ablue-eyed-child%29%29).
    Study the signature, the purpose statement, and the examples on your own. We focus
    on the program organization. Concerning the template, the design may employ the
    list template because the function consumes a list. If each item on the list were
    a structure with an eyes field and nothing else, the function would iterate over
    those structures using the selector function for the eyes field and a string comparison.
    In this case, each item is a family tree but luckily, we already know how to process
    family trees.
  prefs: []
  type: TYPE_NORMAL
- en: Let us step back and inspect how we explained [figure 111](#%28counter._%28figure._fig~3ablue-eyed-child%29%29).
    The starting point is a pair of data definitions where the second refers to the
    first and both refer to themselves. The result is a pair of functions where the
    second refers to the first and both refer to themselves. In other words, the function
    definitions refer to each other the same way the data definitions refer to each
    other. Early chapters gloss over this kind of relationship, but now the situation
    is sufficiently complicated and deserves attention.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 314\. Reformulate the data definition for [FF](#%28tech._ff%29) with
    the [List-of](part_three.html#%28tech._sim-dd._list._of%29) abstraction. Now do
    the same for blue-eyed-child-in-forest?. Finally, define blue-eyed-child-in-forest?
    using one of the list abstractions from the preceding chapter. [![image](../Images/072b2b3bfd8de0fd6a3ef00d6228213f.jpg)](#%28counter._%28exercise._ex~3afamily-forest1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 315\. Design the function average-age. It consumes a family forest
    and a year ([N](part_two.html#%28tech._n%29)). From this data, it produces the
    average age of all child instances in the forest. Note If the trees in this forest
    overlap, the result isn’t a true average because some people contribute more than
    others. For this exercise, act as if the trees don’t overlap. [![image](../Images/e832630ce6b0c184e86291ff2895a9d2.jpg)](#%28counter._%28exercise._ex~3afamily-forest2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 19.3S-expressions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'While [Intermezzo: Quote, Unquote](part_two.html#%28part._i2-3%29) introduced
    S-expressions on an informal basis, it is possible to describe them with a combination
    of three data definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; An S-expr is one of: &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  [Atom](#%28tech._atom%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  [SL](#%28tech._sl%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; An SL is one of: &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ''() &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [S-expr](#%28tech._s._expr%29)  [SL](#%28tech._sl%29))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; An Atom is one of: &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  [Number](part_one.html#%28tech._number%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  [String](part_one.html#%28tech._string%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  [Symbol](part_two.html#%28tech._symbol%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Recall that [Symbol](part_two.html#%28tech._symbol%29)s look like strings with
    a single quote at the beginning and with no quote at the end.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea of S-expressions is due to John McCarthy and his Lispers, who created
    S-expressions in 1958 so that they could process Lisp programs with other Lisp
    programs. This seemingly circular reasoning may sound esoteric but as mentioned
    in [Intermezzo: Quote, Unquote](part_two.html#%28part._i2-3%29), S-expressions
    are a versatile form of data that is often rediscovered, most recently with applications
    to the world wide web. Working with S-expressions thus prepares a discussion of
    how to design functions for highly intertwined data definitions.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 316\. Define the atom? function. [![image](../Images/f0e02443f34a23d76bf5bda39520754b.jpg)](#%28counter._%28exercise._ex~3aatom%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Up to this point in this book, no data has required a data definition as complex
    as the one for S-expressions. And yet, with one extra hint, you can design functions
    that process S-expressions if you follow the design recipe. To demonstrate this
    point, let us work through a specific example:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design the function count, which determines how many times some
    symbol occurs in some S-expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'While the first step calls for data definitions and appears to have been completed,
    remember that it also calls for the creation of data examples, especially when
    the definition is complex.A data definition is supposed to be a prescription of
    how to create data, and its “test” is whether it is usable. One point that the
    data definition for [S-expr](#%28tech._s._expr%29) makes is that every [Atom](#%28tech._atom%29)
    is an element of [S-expr](#%28tech._s._expr%29), and you know that [Atom](#%28tech._atom%29)s
    are easy to fabricate:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ''hello |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 20.12 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "world" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In the same vein, every [SL](#%28tech._sl%29) is a list as well as an [S-expr](#%28tech._s._expr%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ''hello ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 20.12 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) "world" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ''hello ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 20.12 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) "world" ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first two are obvious, the third one deserves a second look. It repeats
    the second [S-expr](#%28tech._s._expr%29) but nested inside ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  ''()).
    What this means is that it is a list that contains a single item, namely, the
    second example. You can simplify the example with [list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ''hello ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 20.12 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) "world" ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; or |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ''hello 20.12 "world"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Indeed, with the quotation mechanism of [Intermezzo: Quote, Unquote](part_two.html#%28part._i2-3%29)
    it is even easier to write down S-expressions. Here are the last three:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ''(hello 20.12 "world") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list ''hello #i20.12 "world") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ''((hello 20.12 "world")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list (list ''hello #i20.12 "world")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'To help you out, we evaluate these examples in the interactions area of DrRacket
    so that you can see the result, which is closer to the above constructions than
    the [quote](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._quote%29%29)
    notation.With quote, it is quite easy to make up complex examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ''(define (f x) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      (+ x 55)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| (list ''define (list ''f ''x) (list ''+ ''x 55)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This example may strike you as odd because it looks like a definition in BSL
    but, as the interaction with DrRacket shows, it is just a piece of data. Here
    is another one:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ''((6 f) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (5 e) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (4 d)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| (list (list 6 ''f) (list 5 ''e) (list 4 ''d)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This piece of data looks like a table, associating letters with numbers. The
    last example is a piece of art:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ''(wing (wing body wing) wing) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list ''wing (list ''wing ''body ''wing) ''wing) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It is now time to write down the rather obvious header for count:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [S-expr](#%28tech._s._expr%29)  [Symbol](part_two.html#%28tech._symbol%29)
    -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; counts all occurrences of sy in sexp |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count sexp sy)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Since the header is obvious, we move on to functional examples. If the given
    [S-expr](#%28tech._s._expr%29) is ''world and the to-be-counted symbol is ''world,
    the answer is obviously 1. Here are some more examples, immediately formulated
    as tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (count ''world ''hello) 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (count ''(world hello) ''hello) 1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (count ''(((world) hello) hello) ''hello) 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'You can see how convenient quotation notation is for test cases. When it comes
    to templates, however, thinking in terms of [quote](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._quote%29%29)
    is disastrous.Before we move on to the template step, we need to give you one
    hint:'
  prefs: []
  type: TYPE_NORMAL
- en: For intertwined data definitions, create one template per data definition. Create
    them in parallel. Make sure they refer to each other in the same way the data
    definitions do.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This hint sounds more complicated than it is. For our problem, it means we
    need three templates:'
  prefs: []
  type: TYPE_NORMAL
- en: one for count, which counts occurrences of symbols in [S-expr](#%28tech._s._expr%29)s;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: one for a function that counts occurrences of symbols in [SL](#%28tech._sl%29)s;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: and one for a function that counts occurrences of symbols in [Atom](#%28tech._atom%29)s;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And here are three partial templates, with conditionals as suggested by the
    three data definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count sexp sy)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    [(atom? sexp) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count-sl sl sy)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) sl) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count-atom at sy)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([number?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._number~3f%29%29) at) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29) at) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([symbol?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3f%29%29) at) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The template for count contains a two-pronged conditional, because the data
    definition for [S-expr](#%28tech._s._expr%29) has two clauses. It uses the atom?
    function to distinguish the case for [Atom](#%28tech._atom%29)s from the case
    for [SL](#%28tech._sl%29)s. The template named count-sl consumes an element of
    [SL](#%28tech._sl%29) and a symbol, and because [SL](#%28tech._sl%29) is basically
    a list, count-sl also contains a two-pronged [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29).
    Finally, count-atom is supposed to work for [Atom](#%28tech._atom%29)s and [Symbol](part_two.html#%28tech._symbol%29)s.
    And this means that its template checks for the three distinct forms of data mentioned
    in the data definition of [Atom](#%28tech._atom%29).The next step is to take apart
    compound data in the relevant clauses:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count sexp sy)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    [(atom? sexp) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count-sl sl sy)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) sl) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) sl) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) sl))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count-atom at sy)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([number?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._number~3f%29%29) at) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29) at) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([symbol?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3f%29%29) at) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Why do we add just two selector expressions to count-sl?The last step in the
    template creation process calls for an inspection of self-references in the data
    definitions. In our context, this means self-references and references from one
    data definition to another and (possibly) back. Let us inspect the [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    lines in the three templates:'
  prefs: []
  type: TYPE_NORMAL
- en: The atom? line in count corresponds to the first line in the definition of [S-expr](#%28tech._s._expr%29).
    To indicate the cross-reference from here to [Atom](#%28tech._atom%29), we add
    (count-atom  sexp  sy), meaning we interpret sexp as an [Atom](#%28tech._atom%29)
    and let the appropriate function deal with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Following the same line of thought, the second [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    line in count calls for the addition of (count-sl  sexp  sy).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The [empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)
    line in count-sl corresponds to a line in the data definition that makes no reference
    to another data definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In contrast, the [else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    line contains two selector expressions, and each extracts a different kind of
    value. Specifically, ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29)  sl)
    is an element of [S-expr](#%28tech._s._expr%29), which means that we wrap it in
    (count  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)).
    After all, count is responsible for counting inside of arbitrary [S-expr](#%28tech._s._expr%29)s.
    Next, ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  sl)
    corresponds to a self-reference, and we know that we need to deal with those via
    recursive function calls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, all three cases in [Atom](#%28tech._atom%29) refer to atomic forms
    of data. Therefore the count-atom function does not need to change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count sexp sy)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    [(atom? sexp) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (count-atom sexp sy)] &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (count-sl sexp sy)])) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count-sl sl sy)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) sl) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       (count ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) sl) sy)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       (count-sl ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) sl) sy)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count-atom at sy)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([number?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._number~3f%29%29) at) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29) at) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([symbol?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3f%29%29) at) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 112: A template for S-expressions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ; [S-expr](#%28tech._s._expr%29)  [Symbol](part_two.html#%28tech._symbol%29)
    -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; counts all occurrences of sy in sexp |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count sexp sy)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|    [(atom? sexp) (count-atom sexp sy)] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|    [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (count-sl sexp sy)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [SL](#%28tech._sl%29)  [Symbol](part_two.html#%28tech._symbol%29) -> [N](part_two.html#%28tech._n%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; counts all occurrences of sy in sl |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count-sl sl sy)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) sl) 0]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (count ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) sl) sy) (count-sl ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) sl) sy))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Atom](#%28tech._atom%29)  [Symbol](part_two.html#%28tech._symbol%29) ->
    [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; counts all occurrences of sy in at |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (count-atom at sy)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([number?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._number~3f%29%29) at) 0]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29) at) 0]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([symbol?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3f%29%29) at) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([symbol=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3d~3f%29%29) at sy) 1 0)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 113: A program for S-expressions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 112](#%28counter._%28figure._fig~3asexp-template%29%29) presents the
    three complete templates. Filling in the blanks in these templates is straightforward
    as [figure 113](#%28counter._%28figure._fig~3asexp-function%29%29) shows. You
    ought to be able to explain any random line in the three definitions, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[(atom? sexp) (count-atom sexp sy)]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: determines whether sexp is an atom and, if so, interprets the [S-expr](#%28tech._s._expr%29)
    as an [Atom](#%28tech._atom%29) via count-atom.
  prefs: []
  type: TYPE_NORMAL
- en: '| [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (count ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) sl) sy) (count-sl ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) sl) sy))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'means the given list consists of two parts: an [S-expr](#%28tech._s._expr%29)
    and an [SL](#%28tech._sl%29). By using count and count-sl, the corresponding functions
    are used to count how often sy appears in each part, and the two numbers are added
    up—<wbr>yielding the total number of sys in all of sexp.'
  prefs: []
  type: TYPE_NORMAL
- en: '[([symbol?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3f%29%29) at) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([symbol=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3d~3f%29%29) at sy) 1 0)]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: tells us that if an [Atom](#%28tech._atom%29) is a [Symbol](part_two.html#%28tech._symbol%29),
    sy occurs once if it is equal to sexp and otherwise it does not occur at all.
    Since the two pieces of data are atomic, there is no other possibility.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 317\. A program that consists of three connected functions ought to
    express this relationship with a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: Copy and re-organize the program from [figure 113](#%28counter._%28figure._fig~3asexp-function%29%29)
    into a single function using [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29).
    Validate the revised code with the test suite for count.
  prefs: []
  type: TYPE_NORMAL
- en: The second argument to the local functions, sy, never changes. It is always
    the same as the original symbol. Hence you can eliminate it from the local function
    definitions to tell the reader that sy is a constant across the traversal process.
    [![image](../Images/55b7bb28deb407c010a8e699b5aac7e1.jpg)](#%28counter._%28exercise._ex~3acount-local%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 318\. Design depth. The function consumes an S-expression and determines
    its depth. An atom has a depth of 1. The depth of a list of S-expressions is the
    maximum depth of its items plus 1. [![image](../Images/109d76bf22abced3e71506ddcbdb42ad.jpg)](#%28counter._%28exercise._ex~3adepth%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 319\. Design substitute. It consumes an S-expression s and two symbols,
    old and new. The result is like s with all occurrences of old replaced by new.
    [![image](../Images/044b551ff0993c007bfc68b8efc7c3ff.jpg)](#%28counter._%28exercise._ex~3asubstitute%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 320\. Reformulate the data definition for [S-expr](#%28tech._s._expr%29)
    so that the first clause is expanded into the three clauses of [Atom](#%28tech._atom%29)
    and the second clause uses the [List-of](part_three.html#%28tech._sim-dd._list._of%29)
    abstraction. Re-design the count function for this data definition.
  prefs: []
  type: TYPE_NORMAL
- en: Now integrate the definition of [SL](#%28tech._sl%29) into the one for [S-expr](#%28tech._s._expr%29).
    Simplify count again. Consider using [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Note This kind of simplification is not always possible, but experienced programmers
    tend to recognize such opportunities. [![image](../Images/102d85346d7a30cc77ac46db30e43965.jpg)](#%28counter._%28exercise._ex~3asexpr-abstract1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 321\. Abstract the data definitions for [S-expr](#%28tech._s._expr%29)
    and [SL](#%28tech._sl%29) so that they abstract over the kinds of atoms that may
    appear. [![image](../Images/169226ea21f000e24b4d334f3de31135.jpg)](#%28counter._%28exercise._ex~3asexpr-abstract2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 19.4Designing with Intertwined Data
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The jump from self-referential data definitions to collections of data definitions
    with mutual references is far smaller than the one from data definitions for finite
    data to self-referential data definitions. Indeed, the design recipe for self-referential
    data definitions—<wbr>see [Designing with Self-Referential Data Definitions](part_two.html#%28part._ch~3adesign-lists%29)—<wbr>needs
    only minor adjustments to apply to this seemingly complex situation:'
  prefs: []
  type: TYPE_NORMAL
- en: The need for “nests” of mutually related data definitions is similar to the
    one for the need for self-referential data definitions. The problem statement
    deals with many distinct kinds of information, and one form of information refers
    to other kinds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before you proceed in such situations, draw arrows to connect references to
    definitions. Consider the left side of [figure 114](#%28counter._%28figure._fig~3adef-data-mutual-arrows%29%29).
    It displays the definition for [S-expr](#%28tech._s._expr%29), which contains
    references to [SL](#%28tech._sl%29) and [Atom](#%28tech._atom%29) and which are
    connected to their respective definitions via arrows. Similarly, the definition
    of [SL](#%28tech._sl%29) contains one self-reference and one reference back to
    [SL](#%28tech._sl%29); again, both are connected by appropriate arrows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Like self-referential data definitions, these nests of definitions also call
    for validation. At a minimum, you must be able to construct some examples for
    every individual definition. Start from clauses that do not refer to any of the
    other data definitions in the nest. Keep in mind that the definition may be invalid
    if it is impossible to generate examples from them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The key change is that you must design as many functions in parallel as there
    are data definitions. Each function specializes for one of the data definitions;
    all remaining arguments remain the same. Based on that, you start with a signature,
    a purpose statement, and a dummy definition for each function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be sure to work through functional examples that use all mutual references in
    the nest of data definitions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each function, design the template according to its primary data definition.
    Use [figure 48](part_two.html#%28counter._%28figure._fig~3atemplate-q%29%29) to
    guide the template creation up to the last step. The revised last step calls for
    a check for all self references and cross references. Use the data definitions
    annotated with arrows to guide this step. For each arrow in the data definitions,
    include an arrow in the templates. See the right side of [figure 114](#%28counter._%28figure._fig~3adef-data-mutual-arrows%29%29)
    for the arrow-annotated version of the templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ![image](../Images/9e52a9015c5913a0a35e124202fb50d1.jpg) |  | ![image](../Images/3d184dca0a653169f8a023da9d4a15d5.jpg)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 114: Arrows for nests of data definitions and templates'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now replace the arrows with actual function calls. As you gain experience, you
    will naturally skip the arrow-drawing step and use function calls directly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note Note how both nests—<wbr>the one for data definitions and the one for function
    templates—<wbr>contain four arrows, and note how pairs of arrows correspond to
    each other. Researchers call this correspondence a symmetry. It is evidence that
    the design recipe provides a natural way for going from problems to solutions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For the design of the body we start with those [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    lines that do not contain natural recursions or calls to other functions. They
    are called base cases. The corresponding answers are typically easy to formulate
    or are already given by the examples. After that, you deal with the self-referential
    cases and the cases of cross-function calls. Let the questions and answers of
    [figure 49](part_two.html#%28counter._%28figure._fig~3adefinition-q%29%29) guide
    you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests when all definitions are completed. If an auxiliary function is
    broken, you may get two error report, one for the main function and another one
    for the flawed auxiliary definition. A single fix should eliminate both. Do make
    sure that running the tests covers all the pieces of the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, if you are stuck in step 5, remember the table-based approach to guessing
    the combination function. In the case of intertwined data, you may need not only
    a table per case but a table per case and per function to work out the combination.
  prefs: []
  type: TYPE_NORMAL
- en: '19.5Project: BSTs'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Programmers often work with tree representations of data to improve the performance
    of their functions. A particularly well-known form of tree is the binary search
    tree because it is a good way to store and retrieve information quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be concrete, let’s discuss binary trees that manage information about people.
    Instead of the child structures in family trees, a binary tree contains nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) no-info [])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) NONE (make-no-info))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) node [ssn name [left](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._left%29%29) [right](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._right%29%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A BinaryTree (short for BT) is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  NONE |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-node  [Number](part_one.html#%28tech._number%29)  [Symbol](part_two.html#%28tech._symbol%29)  [BT](#%28tech._bt%29)  [BT](#%28tech._bt%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The corresponding data definition is like the one for family trees with NONE
    indicating a lack of information, and each node recording a social security number,
    a name, and two other binary trees. The latter are like the parents of family
    trees, though the relationship between a node and its [left](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._left%29%29)
    and [right](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._right%29%29)
    trees is not based on family relationships.Here are two binary trees:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (make-node &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   15 &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''d &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   NONE &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (make-node &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     24 ''i NONE NONE)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (make-node &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   15 &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''d &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (make-node &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     87 ''h NONE NONE) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   NONE) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 115](#%28counter._%28figure._fig~3abst%29%29) shows how we should think
    about such trees as drawings. The trees are drawn upside down, with the root at
    the top and the crown of the tree at the bottom. Each circle corresponds to a
    node, labeled with the ssn field of a corresponding node structure. The drawings
    omit NONE.'
  prefs: []
  type: TYPE_NORMAL
- en: '| tree A |  | tree B |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/e063c6a6e052591b5c5019e993ea48d5.jpg) |  | ![image](../Images/a3f92302db7e9d28cfb070acf7c39e75.jpg)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 115: A binary search tree and a binary tree'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 322\. Draw the above two trees in the manner of [figure 115](#%28counter._%28figure._fig~3abst%29%29).
    Then design contains-bt?, which determines whether a given number occurs in some
    given BT. [![image](../Images/d0f7b4854679c7663adb727572f8a34c.jpg)](#%28counter._%28exercise._ex~3abst1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 323\. Design search-bt. The function consumes a number n and a BT.
    If the tree contains a node structure whose ssn field is n, the function produces
    the value of the [name](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._name%29%29)
    field in that node. Otherwise, the function produces #false.'
  prefs: []
  type: TYPE_NORMAL
- en: Hint Consider using contains-bt? to check the entire tree first or [boolean?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._boolean~3f%29%29)
    to check the result of the natural recursion at each stage. [![image](../Images/29f22037bde1746c7a61667faf9cda5b.jpg)](#%28counter._%28exercise._ex~3abst1-search%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'If we read the numbers in the two trees in [figure 115](#%28counter._%28figure._fig~3abst%29%29)
    from left to right we obtain two different sequences:'
  prefs: []
  type: TYPE_NORMAL
- en: '| tree A |  | 10 |  | 15 |  | 24 |  | 29 |  | 63 |  | 77 |  | 89 |  | 95 |  |
    99 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| tree B |  | 87 |  | 15 |  | 24 |  | 29 |  | 63 |  | 33 |  | 89 |  | 95 |  |
    99 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The sequence for tree A is sorted in ascending order, the one for B is not.
    A binary tree of the first kind is a binary search tree. Every binary search tree
    is a binary tree, but not every binary tree is a binary search tree. More concretely,
    we formulate a condition—<wbr>or data invariant—<wbr>that distinguishes a binary
    search tree from a binary tree:'
  prefs: []
  type: TYPE_NORMAL
- en: The BST Invariant
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A BST (short for binary search tree) is a [BT](#%28tech._bt%29) according to
    the following conditions:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: NONE is always a [BST](#%28tech._bst%29).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (make-node  ssn0  name0  L  R) is a [BST](#%28tech._bst%29) if
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: L is a [BST](#%28tech._bst%29),
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: R is a [BST](#%28tech._bst%29),
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: all ssn fields in L are smaller than ssn0,
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: all ssn fields in R are larger than ssn0.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In other words, to check whether a [BT](#%28tech._bt%29) also belongs to [BST](#%28tech._bst%29),
    we must inspect all numbers in all subtrees and ensure that they are smaller or
    larger than some given number. This places an additional burden on the construction
    of data but as the following exercises show, it is well worth it.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 324\. Design the function inorder. It consumes a binary tree and produces
    the sequence of all the ssn numbers in the tree as they show up from left to right
    when looking at a tree drawing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint Use [append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29),
    which concatenates lists like thus:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 4) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 5 6 7))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3 4 5 6 7)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: What does inorder produce for a binary search tree? [![image](../Images/c3094e9f2ec01a0a8ac585d5c35c5639.jpg)](#%28counter._%28exercise._ex~3abst0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Looking for a node with a given ssn in a BST may exploit the [BST](#%28tech._bst%29)
    invariant. To find out whether a BT contains a node with a specific ssn, a function
    may have to look at every node of the tree. In contrast, to find out whether a
    binary search tree contains the same ssn, a function may eliminate one of two
    subtrees for every node it inspects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s illustrate the idea with this sample BST:'
  prefs: []
  type: TYPE_NORMAL
- en: (make-node 66 'a L R)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If we are looking for 66, we have found the node we are looking for. Now, if
    we are looking for a smaller number, say 63, we can focus the search on L because
    all nodes with ssn fields smaller than 66 are in L. Similarly, if we were to look
    for 99, we would ignore L and focus on R because all nodes with ssns larger than
    66 are in R.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 325\. Design search-bst. The function consumes a number n and a BST.
    If the tree contains a node whose ssn field is n, the function produces the value
    of the [name](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._name%29%29)
    field in that node. Otherwise, the function produces NONE. The function organization
    must exploit the BST invariant so that the function performs as few comparisons
    as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: See [exercise 189](part_two.html#%28counter._%28exercise._ex~3asort2%29%29)
    for searching in sorted lists. Compare! [![image](../Images/4240382a638b628179b45adb01cc82c4.jpg)](#%28counter._%28exercise._ex~3abst2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Building a binary tree is easy; building a binary search tree is complicated.
    Given any two [BT](#%28tech._bt%29)s, a number, and a name, we simply apply make-node
    to these values in the correct order, and voilà, we get a new [BT](#%28tech._bt%29).
    This same procedure fails for [BST](#%28tech._bst%29)s because the result would
    typically not be a BST. For example, if one [BST](#%28tech._bst%29) contains nodes
    with ssn fields 3 and 5 in the correct order, and the other one contains ssn fields
    2 and 6, simply combining the two trees with another social security number and
    a name does not produce a [BST](#%28tech._bst%29).
  prefs: []
  type: TYPE_NORMAL
- en: The remaining two exercises explain how to build a [BST](#%28tech._bst%29) from
    a list of numbers and names. Specifically, the first exercise calls for a function
    that inserts a given ssn0 and name0 into a [BST](#%28tech._bst%29); that is, it
    produces a [BST](#%28tech._bst%29) like the one it is given with one more node
    inserted containing ssn0, name0, and NONE subtrees. The second exercise then requests
    a function that can deal with a complete list of numbers and names.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 326\. Design the function create-bst. It consumes a BST B, a number
    N, and a symbol S. It produces a BST that is just like B and that in place of
    one NONE subtree contains the node structure
  prefs: []
  type: TYPE_NORMAL
- en: (make-node N S NONE NONE)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Once the design is completed, use the function on tree A from [figure 115](#%28counter._%28figure._fig~3abst%29%29).
    [![image](../Images/b835a780720fc322b373e46ee463b9b5.jpg)](#%28counter._%28exercise._ex~3abst3%29%29)Exercise 327\.
    Design the function create-bst-from-list. It consumes a list of numbers and names
    and produces a binary search tree by repeatedly applying create-bst. Here is the
    signature:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29) [[List](part_three.html#%28tech._sim-dd._list%29)
    Number Symbol]] -> [BST](#%28tech._bst%29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Use the complete function to create a [BST](#%28tech._bst%29) from this sample
    input:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ''((99 o) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (77 l) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (24 i) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (10 h) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (95 g) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (15 d) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (89 c) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (29 b) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (63 a)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The result is tree A in [figure 115](#%28counter._%28figure._fig~3abst%29%29)
    if you follow the structural design recipe. If you use an existing abstraction,
    you may still get this tree but you may also get an “inverted” one. Why? [![image](../Images/0cde9a26ab6955248bc4a9bf87b0c993.jpg)](#%28counter._%28exercise._ex~3abst4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 19.6Simplifying Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Exercise 317](#%28counter._%28exercise._ex~3acount-local%29%29) shows how
    to use [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    to organize a function that deals with an intertwined form of data. This organization
    also helps simplify functions once we know that the data definition is final.
    To demonstrate this point, we explain how to simplify the solution of [exercise 319](#%28counter._%28exercise._ex~3asubstitute%29%29).'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [S-expr](#%28tech._s._expr%29)  [Symbol](part_two.html#%28tech._symbol%29)  [Atom](#%28tech._atom%29)
    -> [S-expr](#%28tech._s._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; replaces all occurrences of old in sexp with new |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (substitute ''(((world) bye) bye) ''bye ''42)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ''(((world) 42) 42)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (substitute sexp old new)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [S-expr](#%28tech._s._expr%29)
    -> [S-expr](#%28tech._s._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (for-sexp sexp)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [(atom? sexp) (for-atom sexp)] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (for-sl sexp)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [SL](#%28tech._sl%29) -> [S-expr](#%28tech._s._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (for-sl sl)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) sl) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) (for-sexp ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) sl))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                           (for-sl ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) sl)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Atom](#%28tech._atom%29) -> [S-expr](#%28tech._s._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (for-atom at)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([number?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._number~3f%29%29) at) at]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29) at) at]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([symbol?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3f%29%29) at) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29) at old) new at)])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (for-sexp sexp))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 116: A program to be simplified'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 116](#%28counter._%28figure._fig~3asimplifying1%29%29) displays a complete
    definition of the substitute function. The definition uses [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    and three auxiliary functions as suggested by the data definition. The figure
    includes a test case so that you can re-test the function after each edit suggested
    below. Stop! Develop additional test cases; one is almost never enough.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 328\. Copy and paste [figure 116](#%28counter._%28figure._fig~3asimplifying1%29%29)
    into DrRacket; include your test suite. Validate the test suite. As you read along
    the remainder of this section, perform the edits and re-run the test suites to
    confirm the validity of our arguments. [![image](../Images/5993224ba124518583c36aaad3d431ae.jpg)](#%28counter._%28exercise._ex~3asimplify1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (substitute sexp old new)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [S-expr](#%28tech._s._expr%29)
    -> [S-expr](#%28tech._s._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (for-sexp sexp)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [(atom? sexp) (for-atom sexp)] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (for-sl sexp)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [SL](#%28tech._sl%29) -> [S-expr](#%28tech._s._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (for-sl sl)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) for-sexp sl))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Atom](#%28tech._atom%29) -> [S-expr](#%28tech._s._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (for-atom at)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([number?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._number~3f%29%29) at) at]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29) at) at]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([symbol?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3f%29%29) at) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29) at old) new at)])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (for-sexp sexp))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 117: Program simplification, step 1'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since we know that [SL](#%28tech._sl%29) describes lists of [S-expr](#%28tech._s._expr%29),
    we can use [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    to simplify for-sl. See [figure 117](#%28counter._%28figure._fig~3asimplifying2%29%29)
    for the result. While the original program says that for-sexp is applied to every
    item on sl; its revised definition expresses the same idea more succinctly with
    [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: For the second simplification step, we need to remind you that [equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29)
    compares two arbitrary values. With this in mind, the third [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    function becomes a one-liner. [Figure 118](#%28counter._%28figure._fig~3asimplifying3%29%29)
    displays this second simplification.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (substitute sexp old new)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [S-expr](#%28tech._s._expr%29)
    -> [S-expr](#%28tech._s._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (for-sexp sexp)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [(atom? sexp) (for-atom sexp)] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (for-sl sexp)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [SL](#%28tech._sl%29) -> [S-expr](#%28tech._s._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (for-sl sl) ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) for-sexp sl))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Atom](#%28tech._atom%29) -> [S-expr](#%28tech._s._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (for-atom at)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29) at old) new at)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (for-sexp sexp))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (substitute.v3 sexp old new)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [S-expr](#%28tech._s._expr%29)
    -> [S-expr](#%28tech._s._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (for-sexp sexp)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [(atom? sexp) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29) sexp old) new sexp)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) for-sexp sexp)])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (for-sexp sexp))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 118: Program simplification, steps 2 and 3'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At this point the last two [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    definitions consist of a single line. Furthermore, neither definition is recursive.
    Hence we can in-line the functions in for-sexp. In-lining means replacing (for-atom  sexp)
    with ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29)  ([equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29)  sexp  old)  new  sexp),
    that is, we replace theWhile sexp is also a parameter, this substitution is really
    acceptable because it, too, stands in for an actual value. parameter at with the
    actual argument sexp. Similarly, for (for-sl  sexp) we put in ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)  for-sexp  sexp);
    see the bottom half of [figure 117](#%28counter._%28figure._fig~3asimplifying2%29%29).
    All we are left with now is a function whose definition introduces one [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    function, which is called on the same major argument. If we systematically supplied
    the other two arguments, we would immediately see that the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    function can be used in lieu of the outer one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result of translating this last thought into code:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (substitute sexp old new)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(atom? sexp) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29) sexp old) new sexp)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (s) (substitute s old new)) sexp)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Explain why we had to use [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    for this last simplification.
  prefs: []
  type: TYPE_NORMAL
- en: 20Incremental Refinement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you develop real-world programs, you may confront complex forms of information
    and the problem of representing them with data. The best strategy to approach
    this task is to use iterative refinement, a well-known scientific process. A scientist’s
    problem is to represent a part of the real world using some form of mathematics.
    The result of the effort is called a model. The scientist then tests the model
    in many ways, in particular by predicting the outcome of experiments. If the discrepancies
    between the predictions and the measurements are too large, the model is refined
    with the goal of improving the predictions. This iterative process continues until
    the predictions are sufficiently accurate.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a physicist who wishes to predict a rocket’s flight path. While a “rocket
    as a point” representation is simple, it is also quite inaccurate, failing to
    account for air friction for example. In response, the physicist may add the rocket’s
    rough contour and introduce the necessary mathematics to represent friction. This
    second model is a refinement of the first model. In general, a scientist repeats—<wbr>or
    as programmers say, iterates—<wbr>this process until the model predicts the rocket’s
    flight path with sufficient accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: A programmer trained in a computer science department should proceed like this
    physicist. The key is to find an accurate data representation of the real-world
    information and functions that process them appropriately. Complicated situations
    call for a refinement process to get to a sufficient data representation combined
    with the proper functions. The process starts with the essential pieces of information
    and adds others as needed. Sometimes a programmer must refine a model after the
    program has been deployed because users request additional functionality.
  prefs: []
  type: TYPE_NORMAL
- en: So far we have used iterative refinement for you when it came to complex forms
    of data. This chapter illustrates iterative refinement as a principle of program
    development with an extended example, representing and processing (portions of)
    a computer’s file system. We start with a brief discussion of the file system
    and then iteratively develop three data representations. Along the way, we propose
    some programming exercises so that you see how the design recipe also helps modify
    existing programs.
  prefs: []
  type: TYPE_NORMAL
- en: 20.1Data Analysis
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before you turn off DrRacket, you want to make sure that all your work is safely
    stashed away somewhere. Otherwise you have to re-enter everythingA file is really
    a sequence of bytes. when you fire up DrRacket next. So you ask your computer
    to save programs and data in files. A file is roughly a string.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/ac5b626989267adcd06e5f44b6737e0c.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 119: A sample directory tree'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: On most computer systems, files are organized in directories or folders. Roughly
    speaking, a directory contains some files and some more directories. The latter
    are called sub-directories and may contain yet more sub-directories and files.
    Because of the hierarchy, we speak of directory trees.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 119](#%28counter._%28figure._fig~3aaccountant%29%29) contains a graphical
    sketch of a small directory tree, and the picture explains why computer scientists
    call them trees. Contrary to convention in computer science, the figure shows
    the tree growing upwards, with a root directory named TS. The root directory contains
    one file, called read!, and two sub-directories, called Text and Libs, respectively.
    The first sub-directory, Text, contains only three files; the latter, Libs, contains
    only two sub-directories, each of which contains at least one file. Finally each
    box has one of two annotations: a directory is annotated with DIR, and a file
    is annotated with a number, its size.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 329\. How many times does a file name read! occur in the directory
    tree TS? Can you describe the path from the root directory to the occurrences?
    What is the total size of all the files in the tree? What is the total size of
    the directory if each directory node has size 1? How many levels of directories
    does it contain? [![image](../Images/94c27cc6019c32896835fe80bdc1b6fa.jpg)](#%28counter._%28exercise._ex~3adir0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 20.2Refining Data Definitions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Exercise 329](#%28counter._%28exercise._ex~3adir0%29%29) lists some of the
    questions that users routinely ask about directories. To answer such questions,
    the computer’s operating system provides programs that can answer them. If you
    want to design such programs, you need to develop a data representation for directory
    trees.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we use iterative refinement to develop three such data representations.
    For each stage, we need to decide which attributes to include and which to ignore.
    Consider the directory tree in [figure 119](#%28counter._%28figure._fig~3aaccountant%29%29)
    and imagine how it is created. When a user first creates a directory, it is empty.
    As time goes by, the user adds files and directories. In general, a user refers
    to files by names but mostly thinks of directories as containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Model 1 Our thought experiment suggests that our first model should focus on
    files as atomic entities with a name and directories as containers. Here is a
    data definition that deals with directories as lists and files as strings, that
    is, their names:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Dir.v1 (short for directory) is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [File.v1](#%28tech._file..v1%29)  [Dir.v1](#%28tech._dir..v1%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Dir.v1](#%28tech._dir..v1%29)  [Dir.v1](#%28tech._dir..v1%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A File.v1 is a [String](part_one.html#%28tech._string%29). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The names have a .v1 suffix to distinguish them from future refinements.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 330\. Translate the directory tree in [figure 119](#%28counter._%28figure._fig~3aaccountant%29%29)
    into a data representation according to model 1\. [![image](../Images/82bd09f0072e4a315a58d0deb4c91555.jpg)](#%28counter._%28exercise._ex~3afile-example1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 331\. Design the function how-many, which determines how many files
    a given [Dir.v1](#%28tech._dir..v1%29) contains. Remember to follow the design
    recipe; [exercise 330](#%28counter._%28exercise._ex~3afile-example1%29%29) provides
    you with data examples. [![image](../Images/422413c00aadb88a9bda44de66eb6cef.jpg)](#%28counter._%28exercise._ex~3adir-how-many1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Model 2 If you solved [exercise 331](#%28counter._%28exercise._ex~3adir-how-many1%29%29),
    you know that this first data definition is still reasonably simple. But, it also
    obscures the nature of directories. With this first representation, we would not
    be able to list all the names of the sub-directories of some given directory.
    To model directories in a more faithful manner than containers, we must introduce
    a structure type that combines a name with a container:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) dir [name content])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This new structure type, in turn, suggests the following revision of the data
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Dir.v2 is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-dir  [String](part_one.html#%28tech._string%29)  [LOFD](#%28tech._lofd%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A LOFD (short for list of files and directories) is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [File.v2](#%28tech._file..v2%29)  LOFD)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Dir.v2](#%28tech._dir..v2%29)  [LOFD](#%28tech._lofd%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A File.v2 is a [String](part_one.html#%28tech._string%29). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Note how the data definition for [Dir.v2](#%28tech._dir..v2%29) refers to the
    definition for [LOFD](#%28tech._lofd%29)s and the one for [LOFD](#%28tech._lofd%29)s
    refers back to that of [Dir.v2](#%28tech._dir..v2%29). The two definitions are
    mutually recursive.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 332\. Translate the directory tree in [figure 119](#%28counter._%28figure._fig~3aaccountant%29%29)
    into a data representation according to model 2\. [![image](../Images/35f69a302bcdb377bae8fc077ef0b72d.jpg)](#%28counter._%28exercise._ex~3afile-example2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 333\. Design the function how-many, which determines how many files
    a given [Dir.v2](#%28tech._dir..v2%29) contains. [Exercise 332](#%28counter._%28exercise._ex~3afile-example2%29%29)
    provides you with data examples. Compare your result with that of [exercise 331](#%28counter._%28exercise._ex~3adir-how-many1%29%29).
    [![image](../Images/b2f5fcaab53b7c6eaaccbd540eca7b7c.jpg)](#%28counter._%28exercise._ex~3adir-how-many2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 334\. Show how to equip a directory with two more attributes: size
    and readability. The former measures how much space the directory itself (as opposed
    to its content) consumes; the latter specifies whether anyone else besides the
    user may browse the content of the directory. [![image](../Images/001cb7c17ee49207e4890500e763e460.jpg)](#%28counter._%28exercise._ex~3aalt-dir1%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Model 3 Like directories, files have attributes. To introduce these, we proceed
    just as above. First, we define a structure for files:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) file [name size content])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Second, we provide a data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A File.v3 is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-file  [String](part_one.html#%28tech._string%29)  [N](part_two.html#%28tech._n%29)  [String](part_one.html#%28tech._string%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As indicated by the field names, the string represents the name of the file,
    the natural number its size, and the string its content.Finally, let us split
    the content field of directories into two pieces: a list of files and a list of
    sub-directories. This change requires a revision of the structure type definition:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) dir.v3 [name dirs files])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here is the refined data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Dir.v3 is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-dir.v3  [String](part_one.html#%28tech._string%29)  [Dir*](#%28tech._dir%2A%29)  [File*](#%28tech._file%2A%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Dir* is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Dir.v3](#%28tech._dir..v3%29)  [Dir*](#%28tech._dir%2A%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A File* is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [File.v3](#%28tech._file..v3%29)  [File*](#%28tech._file%2A%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Following a convention in computer science, the use of [*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)
    as the ending of a name suggests “many” and is a marker distinguishing the name
    from similar ones: [File.v3](#%28tech._file..v3%29) and [Dir.v3](#%28tech._dir..v3%29).'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 335\. Translate the directory tree in [figure 119](#%28counter._%28figure._fig~3aaccountant%29%29)
    into a data representation according to model 3\. Use "" for the content of files.
    [![image](../Images/63b9e733cf3798fb45d7dc171e7a16bc.jpg)](#%28counter._%28exercise._ex~3afile-example3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 336\. Design the function how-many, which determines how many files
    a given [Dir.v3](#%28tech._dir..v3%29) contains. [Exercise 335](#%28counter._%28exercise._ex~3afile-example3%29%29)
    provides you with data examples. Compare your result with that of [exercise 333](#%28counter._%28exercise._ex~3adir-how-many2%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Given the complexity of the data definition, contemplate how anyone can design
    correct functions. Why are you confident that how-many produces correct results?
    [![image](../Images/329a1268fd372a2bfd0035fa58727689.jpg)](#%28counter._%28exercise._ex~3adir-how-many3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 337\. Use [List-of](part_three.html#%28tech._sim-dd._list._of%29) to
    simplify the data definition [Dir.v3](#%28tech._dir..v3%29). Then use ISL+’s list
    processing functions from [figures 91](part_three.html#%28counter._%28figure._fig~3aisl-ho-list%29%29)
    and [92](part_three.html#%28counter._%28figure._fig~3aisl-ho-list2%29%29) to simplify
    the function definition(s) for the solution of [exercise 336](#%28counter._%28exercise._ex~3adir-how-many3%29%29).
    [![image](../Images/0e8f07e1143387b25314856561b5ed70.jpg)](#%28counter._%28exercise._ex~3adir-how-many-map%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Starting with a simple representation of the first model and refining it step
    by step, we have developed a reasonably accurate data representation for directory
    trees. Indeed, this third data representation captures the nature of a directory
    tree much more faithfully than the first two. Based on this model, we can create
    a number of other functions that users expect from a computer’s operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 20.3Refining Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To make the following exercises somewhat realistic, DrRacket comes with([require](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._require%29%29)  htdp/dir)
    the dir.rkt library from the first edition of this book. This teachpack introduces
    the two structure type definitions from model 3, though without the .v3 suffix.
    Furthermore, the teachpack provides a function that creates representations of
    directory trees on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [String](part_one.html#%28tech._string%29) -> [Dir.v3](#%28tech._dir..v3%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a representation of the a-path directory |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (create-dir a-path) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'For example, if you open DrRacket and enter the following three lines into
    the definitions area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) O (create-dir "/Users/...")) ; on
    OS X |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) L (create-dir "/var/log/")) ; on
    Linux |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) W (create-dir "C:\\Users\\...")) ; on
    Windows |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: you get data representations of directories on your computer after you save
    and then run the program. Indeed, you could use create-dir to map the entire file
    system on your computer to an instance of [Dir.v3](#%28tech._dir..v3%29).
  prefs: []
  type: TYPE_NORMAL
- en: Warnings (1) For large directory trees, DrRacket may need a lot of time to build
    a representation. Use create-dir on small directory trees first. (2) Do not define
    your own dir structure type. The teachpack already defines them, and you must
    not define a structure type twice.
  prefs: []
  type: TYPE_NORMAL
- en: Although create-dir delivers only a representation of a directory tree, it is
    sufficiently realistic to give you a sense of what it is like to design programs
    at that level. The following exercises illustrate this point. They use Dir to
    refer to the generic idea of a data representation for directory trees. Use the
    simplest data definition of Dir that allow you to complete the respective exercise.
    Feel free to use the data definition from [exercise 337](#%28counter._%28exercise._ex~3adir-how-many-map%29%29)
    and the functions from [figures 91](part_three.html#%28counter._%28figure._fig~3aisl-ho-list%29%29)
    and [92](part_three.html#%28counter._%28figure._fig~3aisl-ho-list2%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 338\. Use create-dir to turn some of your directories into ISL+ data
    representations. Then use how-many from [exercise 336](#%28counter._%28exercise._ex~3adir-how-many3%29%29)
    to count how many files they contain. Why are you confident that how-many produces
    correct results for these directories? [![image](../Images/7fd11420a1aa13a7c7d4364040d4f9ee.jpg)](#%28counter._%28exercise._ex~3adir-how-many4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 339\. Design find?. The function consumes a Dir and a file name and
    determines whether or not a file with this name occurs in the directory tree.
    [![image](../Images/6acf892c14ecfc8b1b9112929af6eb0f.jpg)](#%28counter._%28exercise._ex~3afile-find%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 340\. Design the function ls, which lists the names of all files and
    directories in a given Dir. [![image](../Images/5ee993a041b26ac2e4bf5b983cfee8b9.jpg)](#%28counter._%28exercise._ex~3afile-ls%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 341\. Design du, a function that consumes a Dir and computes the total
    size of all the files in the entire directory tree. Assume that storing a directory
    in a Dir structure costs 1 file storage unit. In the real world, a directory is
    basically a special file and its size depends on how large its associated directory
    is. [![image](../Images/dc1e228617db55d1bc73a5f66d86e0ae.jpg)](#%28counter._%28exercise._ex~3afile-du%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'The remaining exercises rely on the notion of a path, which for our purposes,
    is a list of names:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Path is [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)].
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation directions into in a directory tree |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Take a second look at [figure 119](#%28counter._%28figure._fig~3aaccountant%29%29).
    In that diagram, the path from TS to part1 is ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  "TS"  "Text"  "part1").
    Similarly, the path from TS to Code is ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  "TS"  "Libs"  "Code").
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 342\. Design find. The function consumes a directory d and a file
    name f. If (find?  d  f) is #true, find produces a path to a file with name f;
    otherwise it produces #false.'
  prefs: []
  type: TYPE_NORMAL
- en: Hint While it is tempting to first check whether the file name occurs in the
    directory tree, you have to do so for every single sub-directory. Hence it is
    better to combine the functionality of find? and find.
  prefs: []
  type: TYPE_NORMAL
- en: 'Challenge The find function discovers only one of the two files named read!
    file in [figure 119](#%28counter._%28figure._fig~3aaccountant%29%29). Design find-all,
    which is generalizes find and produces the list of all paths that lead to f in
    d. What should find-all produce when (find?  d  f) is #false? Is this part of
    the problem really a challenge compared to the basic problem? [![image](../Images/f8ad2beaa0a571033d077e9c241bd718.jpg)](#%28counter._%28exercise._ex~3afile-find-path%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 343\. Design the function ls-R, which lists the paths to all files
    contained in a given Dir. [![image](../Images/153dde7ef8ba04814dd1d7195f85eae6.jpg)](#%28counter._%28exercise._ex~3afile-ls-.R%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 344\. Re-design find-all from [exercise 342](#%28counter._%28exercise._ex~3afile-find-path%29%29)
    using ls-R from [exercise 343](#%28counter._%28exercise._ex~3afile-ls-.R%29%29).
    This is design by composition, and if you solved the challenge part of [exercise 342](#%28counter._%28exercise._ex~3afile-find-path%29%29)
    your new function can find directories, too. [![image](../Images/bfdc8a56afa5c89419dfda08e2f4e39d.jpg)](#%28counter._%28exercise._ex~3afile-find-path-compose%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 21Refining Interpreters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'DrRacket is a program. It is a complex program, dealing with many different
    kinds of data. Like most complex programs, DrRacket also consists of many functions:
    one that allows programmers to edit text; another one that acts like the interactions
    area; a third one checks whether definitions and expressions are grammatical;
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we show you how to design the function that implements the
    heart of the interactions area. Naturally, we use iterative refinement for this
    design project. As a matter of fact, the very idea of focusing on this aspect
    of DrRacket is another instance of refinement, namely, the obvious one of implementing
    only one piece of functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Simply put, the interactions area performs the task of determining the values
    of expressions that you enter. After you click RUN, the interactions area knows
    about all the definitions. It is then ready to accept an expression that may refer
    to these definitions, to determine the value of this expression, and to repeat
    this cycle as often as you wish. For this reason, many people also refer to the
    interactions area as the read-eval-print loop, where eval is short for evaluator,
    a function is also called an interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: Like this book, our refinement process starts with numeric BSL expressions.
    They are simple; they do not assume an understanding of definitions; and even
    your brother in fourth grade can determine their value. Once you understand this
    first step, you know the difference between a BSL expression and its representation.
    Next we move on to expressions with variables. The last step is to add definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 21.1Interpreting Expressions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Our first task is to agree on a data representation for BSL programs, that is,
    we must figure out how to represent a BSL expression as a piece of BSL data. This
    sounds strange and unusual, but it is not difficult. Suppose we just want to represent
    numbers, additions, and multiplications for a start. Clearly, numbers can stand
    for numbers. Additions and multiplications, however, call for a class of compound
    data because they consist of an operator and two pieces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the design recipes of this book, a straightforward way to represent
    additions and multiplications is to define two structure types: one for additions
    and another one for multiplications, each with two fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) add [[left](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._left%29%29) [right](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._right%29%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) mul [[left](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._left%29%29) [right](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._right%29%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The intention is that the [left](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._left%29%29)
    field contains one operand—<wbr>the one to the “left” of the operator—<wbr>and
    the [right](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._right%29%29)
    field contains the other operand. The following table shows three examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| BSL expression |  | representation of BSL expression |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 3 |  | 3 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 1 1)
    |  | (make-add 1 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 300001 100000)
    |  | (make-mul 300001 100000) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The next question concerns an expression with sub-expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 3) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 4 4))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The surprisingly simple answer is that fields may contain any value. In this
    particular case, [left](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._left%29%29)
    and [right](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._right%29%29)
    may contain representations of expressions; and you may nest this as deeply as
    you wish. See [figure 120](#%28counter._%28figure._fig~3arepresenting-bsl%29%29)
    for examples.
  prefs: []
  type: TYPE_NORMAL
- en: '| BSL expression |  | representation of BSL expression |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 1 1) 10)
    |  | (make-add (make-mul 1 1) 10) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 3)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 4 4))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (make-add (make-mul 3 3) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           (make-mul 4 4)) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 1 2) 3)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 1 1)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          2) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;       4)) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (make-add (make-mul (make-add 1 2) 3) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           (make-mul (make-mul &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                        (make-add 1 1) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                        2) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;                     4)) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 120: Representing BSL expressions in BSL'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 345\. Formulate a data definition for the representation of BSL expressions
    based on the structure type definitions of add and mul. Let us use BSL-expr in
    analogy for [S-expr](#%28tech._s._expr%29) for the new class of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Translate the following expressions into data:'
  prefs: []
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  10  -10)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)  20  3)  33)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)  3.14  ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)  2  3))  ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)  3.14  ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)  -1  -9)))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'InterpretHere “interpret” means “translate from data into information.” In
    contrast, “interpreter” in the title of this chapter refers to a program that
    consumes the representation of a program and produces its value. While the two
    ideas are related, they are not the same. the following data as expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: (make-add  -1  2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (make-add  (make-mul  -2  -3)  33)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (make-mul  (make-add  1  (make-mul  2  3))  3.14)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[![image](../Images/c2057dc410fd71d543cc938074ecb8e8.jpg)](#%28counter._%28exercise._ex~3absl-dd%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have a data representation for BSL programs, it is time to design
    an evaluator. This function consumes a representation of a BSL expression and
    produces its value. Again, this function is unlike any you have ever designed
    so it pays off to experiment with some examples. To this end, you can either use
    the rules of arithmetic to figure out what the value of an expression is or you
    can “play” in the interactions area of DrRacket. Take a look at the following
    table for our examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| BSL expression |  | its representation |  | its value |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 3 |  | 3 |  | 3 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 1 1)
    |  | (make-add 1 1) |  | 2 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 10)
    |  | (make-mul 3 10) |  | 30 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 1 1) 10)
    |  | (make-add (make-mul 1 1) 10) |  | 11 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 346\. Formulate a data definition for the class of values to which
    a representation of a BSL expression can evaluate. [![image](../Images/61f32c7367625627314f0c5f1ca17188.jpg)](#%28counter._%28exercise._ex~3absl-value%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 347\. Design eval-expression. The function consumes a representation
    of a BSL expression and computes its value. [![image](../Images/0af47b0e313896abb3aeea062da42d6f.jpg)](#%28counter._%28exercise._ex~3absl-eval%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 348\. Develop a data representation for [Boolean](part_one.html#%28tech._boolean%29)
    BSL expressions constructed from #true, #false, [and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29),
    [or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29),
    and [not](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._not%29%29).
    Then design eval-bool-expression, which consumes (representations of) [Boolean](part_one.html#%28tech._boolean%29)
    BSL expressions and computes their values. What kind of values do these [Boolean](part_one.html#%28tech._boolean%29)
    expression yield? [![image](../Images/16479fc5dc4cd1fb3a798c4211fa2b26.jpg)](#%28counter._%28exercise._ex~3absl-eval-bool%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Convenience and parsing S-expressions offer a much convenient way to represent
    BSL expressions in our programming language:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 1 1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 2 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ''(+ 1 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list ''+ 1 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 3) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 4 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 25 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ''(+ (* 3 3) (* 4 4)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list ''+ (list ''* 3 3) (list ''* 4 4)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: By simply putting a quote in front of an expression, we get ISL+ data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interpreting an S-expression representation is clumsy, mostly because not all
    S-expressions represent [BSL-expr](#%28tech._bsl._expr%29)s. For example, #true,
    "hello", and ''(+  x  1) are not representatives of BSL expressions. As a result,
    S-expressions are quite inconvenient for the designers of interpreters.'
  prefs: []
  type: TYPE_NORMAL
- en: People invented parsers to bridge the gap between convenience of use and implementation.
    A parser simultaneously checks whether some piece of data conforms to a data definition
    and, if it does, builds a matching element from the chosen class of data. The
    latter is called a parse tree. If the given data does not conform, a parser signals
    an error, much like the checked functions from [Input Errors](part_one.html#%28part._sec~3ainput-errors%29).
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 121](#%28counter._%28figure._fig~3aparse-bsl-expr%29%29) presents a
    BSL parser for S-expressions. Specifically, parse consumes an [S-expr](#%28tech._s._expr%29)
    and produces an BSL-expr—<wbr>if and only if the given S-expression is the result
    of quoting a BSL expression that has a BSL-expr representative.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 349\. Create tests for parse until DrRacket tells you that every element
    in the definitions area is covered during the test run. [![image](../Images/c89d2eea2980ed5f5c1c39cda239a450.jpg)](#%28counter._%28exercise._ex~3absl-parse%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 350\. What is unusual about the definition of this program with respect
    to the design recipe?
  prefs: []
  type: TYPE_NORMAL
- en: Note One unusual aspect is that parse uses length on the list argument. Real
    parsers avoid length because it slows the functions down. [![image](../Images/7f07d22de447558be517b534f3157832.jpg)](#%28counter._%28exercise._ex~3absl-parse2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 351\. Design interpreter-expr. The function accepts S-expressions.
    If parse recognizes them as [BSL-expr](#%28tech._bsl._expr%29), it produces their
    value. Otherwise, it signals the same error as parse. [![image](../Images/dd91fd4857b05ee9e1083ebc70777fe4.jpg)](#%28counter._%28exercise._ex~3absl-parse1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [S-expr](#%28tech._s._expr%29) -> [BSL-expr](#%28tech._bsl._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (parse s)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(atom? s) (parse-atom s)] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (parse-sl s)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [SL](#%28tech._sl%29) -> [BSL-expr](#%28tech._bsl._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (parse-sl s)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) L (length s)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       [([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) L 3) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) WRONG)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) L 3) ([symbol?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) s)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|          [([symbol=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) s) ''+)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           (make-add (parse ([second](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._second%29%29) s)) (parse ([third](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._third%29%29) s)))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|          [([symbol=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) s) ''*)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           (make-mul (parse ([second](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._second%29%29) s)) (parse ([third](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._third%29%29) s)))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|          [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) WRONG)])]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) WRONG)])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Atom](#%28tech._atom%29) -> [BSL-expr](#%28tech._bsl._expr%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (parse-atom s)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([number?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._number~3f%29%29) s) s]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29) s) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) WRONG)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([symbol?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3f%29%29) s) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) WRONG)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 121: From S-expr to BSL-expr'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 21.2Interpreting Variables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Since the first section ignores constant definitions, an expression does not
    have a value if it contains a variable. Indeed, unless we know what x stands for,
    it makes no sense to evaluate ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  3  x).
    Hence, one first refinement of the evaluator is to add variables to the expressions
    that we wish to evaluate. The assumption is that the definitions area contains
    a definition such as
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) x 5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and that people evaluate expressions containing x in the interactions area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > x |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 5 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 8 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 1/2 ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 7.5 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Indeed, you could imagine a second definition, say ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29)  y  3),
    and interactions that involve two variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x x)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) y y))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| 34 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The preceding section implicitly proposes symbols as representations for variables.
    After all, if you were to choose quoted S-expressions to represent expressions
    with variables, symbols would appear naturally:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ''x |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ''x |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ''(* 1/2 (* x 3)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (list ''* 0.5 (list ''* ''x 3)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'One obvious alternative is a string, so that "x" would represent x, but this
    book is not about designing interpreters, so we stick with symbols. From this
    decision, it follows how to modify the data definition from [exercise 345](#%28counter._%28exercise._ex~3absl-dd%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A BSL-var-expr is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Symbol](part_two.html#%28tech._symbol%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-add  [BSL-var-expr](#%28tech._bsl._var._expr%29)  [BSL-var-expr](#%28tech._bsl._var._expr%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-mul  [BSL-var-expr](#%28tech._bsl._var._expr%29)  [BSL-var-expr](#%28tech._bsl._var._expr%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We simply add one clause to the data definition.As for data examples, the following
    table shows some BSL expressions with variables and their [BSL-var-expr](#%28tech._bsl._var._expr%29)
    representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| BSL expression |  | representation of BSL expression |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| x |  | ''x |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) x 3)
    |  | (make-add ''x 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 1/2 ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x 3))
    |  | (make-mul 1/2 (make-mul ''x 3)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x x)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;    ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) y y))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (make-add (make-mul ''x ''x) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;           (make-mul ''y ''y)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: They are all taken from the interactions above, meaning you know the results
    when x is 5 and y 3.
  prefs: []
  type: TYPE_NORMAL
- en: One way to determine the value of variable expressions is to replace all variables
    with the values that they represent. This is the way you know from mathematics
    classes in school, and it is perfectly fine way.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 352\. Design subst. The function consumes a [BSL-var-expr](#%28tech._bsl._var._expr%29)
    ex, a [Symbol](part_two.html#%28tech._symbol%29) x, and a [Number](part_one.html#%28tech._number%29)
    v. It produces a [BSL-var-expr](#%28tech._bsl._var._expr%29) like ex with all
    occurrences of x replaced by v. [![image](../Images/613d3e70cafc3f249174778e7aed01fe.jpg)](#%28counter._%28exercise._ex~3absl-var-subst%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 353\. Design the function numeric?. It determines whether a [BSL-var-expr](#%28tech._bsl._var._expr%29)
    is also a [BSL-expr](#%28tech._bsl._expr%29). Here we assume that your solution
    to [exercise 345](#%28counter._%28exercise._ex~3absl-dd%29%29) is the definition
    for [BSL-var-expr](#%28tech._bsl._var._expr%29) without [Symbol](part_two.html#%28tech._symbol%29)s.
    [![image](../Images/c7e6b1c6ab5de0bf8cd61554bb9a2f25.jpg)](#%28counter._%28exercise._ex~3absl-var-numeric%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 354\. Design eval-variable. The checked function consumes a BSL-var-expr
    and determines its value if numeric? yields true for the input. Otherwise it signals
    an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, a program defines many constants in the definitions area and expressions
    contain more than one variable. To evaluate such expressions, we need a representation
    of the definition area when it contains a series of constant definitions. For
    this exercise we use association lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An AL (short for association list) is [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Association](#%28tech._association%29)].
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Association is a list of two items: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Symbol](part_two.html#%28tech._symbol%29)  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Number](part_one.html#%28tech._number%29)  ''())).
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Make up elements of [AL](#%28tech._al%29).
  prefs: []
  type: TYPE_NORMAL
- en: Design eval-variable*. The function consumes a [BSL-var-expr](#%28tech._bsl._var._expr%29)
    ex and an association list da. Starting from ex, it iteratively applies subst
    to all associations in da. If numeric? holds for the result, it determines its
    value; otherwise it signals the same error as eval-variable. Hint Think of the
    given [BSL-var-expr](#%28tech._bsl._var._expr%29) as an atomic value and traverse
    the given association list instead. We provide this hint because the creation
    of this function requires a little design knowledge from [Simultaneous Processing](#%28part._ch~3asimu%29).
    [![image](../Images/3433a6f92413872cc84cbaf417dbcb6a.jpg)](#%28counter._%28exercise._ex~3absl-var-eval%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: An environment model [Exercise 354](#%28counter._%28exercise._ex~3absl-var-eval%29%29)
    relies on the mathematical understanding of constant definitions. If a name is
    defined to stand for some value, all occurrences of the name can be replaced with
    the value. Substitution performs this replacement once and for all before the
    evaluation process even starts.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative approach, dubbed the environment model, is to look up the value
    of a variable when needed. The evaluator starts processing the expression immediately
    but also carries along the representation of the definitions area. Every time
    the evaluator encounters a variable, it looks in the definitions area for its
    value and uses it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 355\. Design eval-var-lookup. This function has the same signature
    as eval-variable*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [BSL-var-expr](#%28tech._bsl._var._expr%29)  [AL](#%28tech._al%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (eval-var-lookup [e](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._e%29%29) da) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Instead of using substitution, the function traverses the expression in the
    manner that the design recipe for [BSL-var-expr](#%28tech._bsl._var._expr%29)
    suggests. As it descends the expression, it “carries along” da. When it encounters
    a symbol x, it uses [assq](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._assq%29%29)
    to look up the value of x in the association list. If there is no value, eval-var-lookup
    signals an error. [![image](../Images/7f0ea183711e7cea18e4e5be606dc227.jpg)](#%28counter._%28exercise._ex~3absl-var-eval2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 21.3Interpreting Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At this point, you understand how to evaluate BSL programs that consist of constant
    definitions and variable expressions. Naturally you want to add function definitions
    so that you know—<wbr>at least in principle—<wbr>how to deal with a complete programming
    language such as BSL.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this section is to refine the evaluator of [Interpreting Variables](#%28part._sec~3ainterpreter-variables%29)
    so that it can cope with function applications, assuming a function definition
    is given. Put differently, we want to design an evaluator with you that simulates
    DrRacket when the definitions area contains a number of function definitions and
    a programmer enters an expression in the interactions area that contains applications
    of these functions.
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, let’s assume that all functions in the definitions area consume
    one argument and that there is only one such definition. The necessary domain
    knowledge dates back to school where you learned that if f(x) = e, function applications
    of the shape f(a) are evaluated by substituting a for x in e. As it turns out,
    the evaluation of function applications in a language such as BSL works like that,
    too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 356\. Extend the data representation of [Interpreting Variables](#%28part._sec~3ainterpreter-variables%29)
    to include the application of a programmer-defined function. Recall that a function
    application consists of two pieces: a name and an expression. The former is the
    name of the function that is applied; the latter is the argument.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your data definition to represent the following expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: (k  ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  1  1))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)  5  (k  ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  1  1)))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)  (i  5)  (k  ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  1  1)))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We refer to this newly defined class of data with BSL-fun-expr. [![image](../Images/4d07d0c918b0a36935e1ad1c99f08fa4.jpg)](#%28counter._%28exercise._ex~3absl-one-def%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 357\. Design eval-definition1. The function is given an expression
    (representation) in the extended data definition of [exercise 356](#%28counter._%28exercise._ex~3absl-one-def%29%29)
    and the one function definition that is assumed to exist in the definitions area.
    It evaluates the given expression and returns its value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specification, eval-definition1 consumes four arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: a [BSL-fun-expr](#%28tech._bsl._fun._expr%29) ex;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a symbol f, which represents a function name;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a symbol x, which represents the functions’s parameter; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a [BSL-fun-expr](#%28tech._bsl._fun._expr%29) b, which represents the function’s
    body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the terminology poses any difficulties, do re-read [BSL Grammar](part_one.html#%28part._sec~3asynsem~3agrammar%29).To
    determine the value of ex, the function proceeds as before. When it encounters
    an application of f to some argument,
  prefs: []
  type: TYPE_NORMAL
- en: eval-definition1 evaluates the argument,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: substitutes the value of the argument for x in b; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: finally evaluates the resulting expression with eval-definition1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is how to express the steps as code, assuming arg is the argument of the
    function application:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (eval-definition1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (subst b x (eval-definition1 arg f x b)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   f x b) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Notice that this line uses a form of recursion that has not been covered. The
    proper design of such functions is discussed in [Generative Recursion](part_five.html).
  prefs: []
  type: TYPE_NORMAL
- en: If eval-definition1 encounters a variable, it signals the same error as eval-variable
    from [exercise 354](#%28counter._%28exercise._ex~3absl-var-eval%29%29). It also
    signals an error for function applications that does not refer to f.
  prefs: []
  type: TYPE_NORMAL
- en: 'Warning The use of generative recursion introduces a new element into your
    computations: non-termination. That is, given some argument, a program may not
    deliver a result or signal an error but run forever. For fun, you may wish to
    construct an input for eval-definition1 that causes it to run forever. Use STOP
    to terminate the program. [![image](../Images/15976f621675319e80bdcdaef46db201.jpg)](#%28counter._%28exercise._ex~3absl-eval-def1%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: For an evaluator that mimics the interaction area, we need a representation
    of the definitions area. We assume that it is a list of definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 358\. Provide a structure type and a data definition for function
    definitions. Recall that such a definition has three essential attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: the function’s name,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the function’s parameter, which is also a name, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the function’s body, which is a variable expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We use BSL-fun-def to refer to this class of data.Use your data definition
    to represent these BSL function definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29)  (f  x)  ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  3  x))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29)  (g  y)  (f  ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)  2  y)))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29)  (h  v)  ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  (f  v)  (g  v)))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, define the class BSL-fun-def* to represent definitions area that consist
    of just one-argument function definitions. Translate the definitions area that
    defines f, g, and h into your data representation and name it da-fgh.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, work on the following wish:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [BSL-fun-def*](#%28tech._bsl._fun._def%2A%29)  [Symbol](part_two.html#%28tech._symbol%29)
    -> [BSL-fun-def](#%28tech._bsl._fun._def%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; retrieves the definition of f in da |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; signals an error if there is none |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (lookup-def da-fgh ''g) g)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (lookup-def da f) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Looking up a definition is needed for the evaluation of applications. [![image](../Images/c860b3b57aa31543d2042c0a7276df97.jpg)](#%28counter._%28exercise._ex~3absl-prog-dd%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 359\. Design eval-function*. The function consumes ex, a [BSL-fun-expr](#%28tech._bsl._fun._expr%29),
    and da, a [BSL-fun-def*](#%28tech._bsl._fun._def%2A%29) representation of a definitions
    area. It produces the result that DrRacket shows if you evaluate ex in the interactions
    area assuming the definitions area contains da.
  prefs: []
  type: TYPE_NORMAL
- en: The function works like eval-definition1 from [exercise 357](#%28counter._%28exercise._ex~3absl-eval-def1%29%29).
    For an application of some function f, it
  prefs: []
  type: TYPE_NORMAL
- en: evaluates the argument;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: looks up the definition of f in the [BSL-fun-def](#%28tech._bsl._fun._def%29)
    representation of da, which comes with a parameter and a body;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: substitutes the value of the argument for the function parameter in the function’s
    body; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: evaluates the new expression via recursion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Like DrRacket, eval-function* signals an error when it encounters a variable
    or function name without definition in the definitions area. [![image](../Images/a00a1e7708c9ada1309ee3df78a306e5.jpg)](#%28counter._%28exercise._ex~3absl-eval-def%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 21.4Interpreting Everything
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Take a look at the following BSL program:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) close-to-pi 3.14)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (area-of-circle r)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) close-to-pi ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) r r)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (volume-of-10-cylinder r)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 10 (area-of-circle r)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Think of these definitions as the definitions area in DrRacket. After you click
    RUN, you can evaluate expressions involving close-to-pi, area-of-circle, and volume-of-10-cylinder
    in the interactions area:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (area-of-circle 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #i3.14 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (volume-of-10-cylinder 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #i31.400000000000002 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 close-to-pi)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #i9.42 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The goal of this section is to refine your evaluator again so that it can mimic
    this much of DrRacket.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 360\. Formulate a data definition for the representation of DrRacket’s
    definition area. Concretely, the data representation should work for a sequence
    that freely mixes constant definitions and one-argument function definitions.
    Make sure you can represent the definitions area consisting of three definitions
    at the beginning of this section.—<wbr>We use BSL-da-all for this class of data.
  prefs: []
  type: TYPE_NORMAL
- en: Design the function lookup-con-def, It consumes a [BSL-da-all](#%28tech._bsl._da._all%29)
    da and a symbol x. It produces the representation of a constant definition whose
    name is x, if such a piece of data exists in da; otherwise the function signals
    an error saying that no such constant definition can be found.
  prefs: []
  type: TYPE_NORMAL
- en: Design the function lookup-fun-def, It consumes a [BSL-da-all](#%28tech._bsl._da._all%29)
    da and a symbol f. It produces the representation of a function definition whose
    name is f, if such a piece of data exists in da; otherwise the function signals
    an error saying that no such function definition can be found. [![image](../Images/cb5476f20eaf8500ad025f56beffc586.jpg)](#%28counter._%28exercise._ex~3absl-da-all%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 361\. Design eval-all. Like eval-function* from [exercise 359](#%28counter._%28exercise._ex~3absl-eval-def%29%29),
    this function consumes the representation of an expression and a definitions area.
    It produces the same value that DrRacket shows if the expression is entered at
    the prompt in the interactions area and the definitions area contains the appropriate
    definitions. Hint Your eval-all function should process variables in the given
    expression like eval-var-lookup in [exercise 355](#%28counter._%28exercise._ex~3absl-var-eval2%29%29).
    [![image](../Images/a9faa0d390b2dbb18268580697f01dab.jpg)](#%28counter._%28exercise._ex~3absl-eval-all%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 362\. It is cumbersome to enter the structure-based data representation
    of a BSL expressions and a definitions area. As the end of [Interpreting Expressions](#%28part._sec~3ainterpreter%29)
    demonstrates, it is much easier to quote expressions and (lists of) definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Design a function interpreter. It consumes an S-expr and an Sl. The former is
    supposed to represent an expression and the latter a list of definitions. The
    function parses both with the appropriate parsing functions and then uses eval-all
    from [exercise 361](#%28counter._%28exercise._ex~3absl-eval-all%29%29) to evaluate
    the expression. Hint You must adapt the ideas of [exercise 350](#%28counter._%28exercise._ex~3absl-parse2%29%29)
    to create a parser for definitions and lists of definitions.
  prefs: []
  type: TYPE_NORMAL
- en: You should know that eval-all-sexpr makes it straightforward to check whether
    it really mimics DrRacket’s evaluator. [![image](../Images/7532229f92d92e689d5d40305b5715f3.jpg)](#%28counter._%28exercise._ex~3absl-all-sexpr%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you know a lot about interpreting BSL. Here are some of the
    missing pieces: [Boolean](part_one.html#%28tech._boolean%29)s with [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    or [if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29);
    [String](part_one.html#%28tech._string%29)s and such operations [string-length](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-length%29%29)
    or [string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29);
    and lists with ''(), [empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29),
    [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29),
    [cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29),
    [first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29),
    [rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29);
    and so on. Once your evaluator can cope with all these, it is basically complete,
    because your evaluators already know how to interpret recursive functions. Now
    when we say “trust us, you know how to design these refinements,” we mean it.'
  prefs: []
  type: TYPE_NORMAL
- en: 22The Commerce of XML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: XML is a widely used data language. One use concerns message exchanges between
    programs running on different computers. For example, when you point your web
    browser at a web site, you are connecting a program on your computer to a program
    on another computer, and the latter sends XML data to the former. Once the browser
    receives the XML data, it renders it as an image on your computer’s monitor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following comparison illustrates this idea with a concrete example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| XML data |  | rendered in a browser |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; <ul> &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  <li> hello </li> &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  <li> <ul> &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      <li> one </li> &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      <li> two </li> &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     </ul> &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  </li> &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  <li> world </li> &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  <li> good bye </li> &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; </ul> &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | ![](../Images/c3eab40a9f4baa06a90b80e7f9d0ad0b.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: On the left, you see a piece of XML data that a web site may send to your web
    browser. On the right, you see how one popular browser renders this snippet graphically.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explains the basics of processing XML as another design exercise
    concerning intertwined data definitions and iterative refinement. [XML as S-expressions](#%28part._sec~3axml%29)
    starts with an informal comparison of S-expressions and XML data and uses it to
    formulate a full-fledged dataThis chapter is a project. If you think XML is too
    old-fashioned for 2017, feel free to re-do the exercise for JSON or some other
    modern data exchange format. The design principles remain the same. definition.
    The remaining sections explain with examples how to process an S-expression of
    XML data. [Rendering XML Enumerations](#%28part._sec~3aenum%29) explains how to
    render enumerations like the above; [Domain-Specific Languages](#%28part._sec~3aconfig%29)
    illustrates how to use XML files to create a small language for configuring programs,
    a common mechanism for modern applications.
  prefs: []
  type: TYPE_NORMAL
- en: 22.1XML as S-expressions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The most basic piece of XML data looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| <machine> </machine> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It is called an element and “machine” is the name of the element. The two parts
    of the elements are like parentheses that delimit the content of an element. When
    there is no content between the two parts—<wbr>other than white space—<wbr>XML
    allows a shorthand:'
  prefs: []
  type: TYPE_NORMAL
- en: '| <machine /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'But, as far as we are concerned here, this shorthand is equivalent to the explicitly
    bracketed version.From an S-expression perspective, an XML element is a named
    pair of parentheses that surround some content. And indeed, representing the aboveRacket’s
    xml library represents XML with structures as well as S-expressions. with an S-expression
    is quite natural:'
  prefs: []
  type: TYPE_NORMAL
- en: '''(machine)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This piece of data has the opening and closing parenthesis, and it comes with
    space to embed content.Here is a piece of XML data with content:'
  prefs: []
  type: TYPE_NORMAL
- en: '| <machine><action /></machine> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Remember that the <action /> part is a shorthand, meaning we are really looking
    at this piece of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '| <machine><action></action></machine> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In general, the content of an XML element is a series of XML elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| <machine><action /><action /><action /></machine> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Expand the shorthand for <action /> before you continue.The S-expression
    representation continues to look simple. Here is the first one:'
  prefs: []
  type: TYPE_NORMAL
- en: '''(machine (action))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'And this is the representation for the second one:'
  prefs: []
  type: TYPE_NORMAL
- en: '''(machine (action) (action) (action))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When you look at the piece of XML data with a sequence of three <action /> elements
    as its content, you realize that you may wish to distinguish such elements from
    each other. To this end, XML elements come with attributes. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '| <machine initial="red"></machine> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'is the “machine” element equipped with one attribute whose name is “initial”
    and whose value is “red” between string quotes. Here is complex XML element with
    nested elements that have attributes too:'
  prefs: []
  type: TYPE_NORMAL
- en: '| <machine initial="red"> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   <action state="red"    next="green" /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   <action state="green"  next="yellow" /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   <action state="yellow" next="red" /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| </machine> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: We use blanks, indentation, and line breaks to make the element readable but
    this white space has no meaning for our XML data here.Naturally, S-expressions
    for these “machine” elements look much like their XML cousins:XML is 40 years
    younger than S-expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '''(machine ((initial "red")))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To add attributes to an element, we use a list of lists where each of the latter
    contains two items: a symbol and a string. The symbol represents the name of the
    attribute and the string its value. This idea naturally applies to complex forms
    of XML data, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ''(machine ((initial "red")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (action ((state "red") (next "green"))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (action ((state "green") (next "yellow"))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (action ((state "yellow") (next "red")))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: For now note how the attributes are marked by two opening parentheses and the
    remaining list of (representations of) XML elements have one opening parenthesis.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may recall the idea from [Intermezzo: Quote, Unquote](part_two.html#%28part._i2-3%29),
    which uses S-expressions to represent XHTML, a special dialect of XML. In particular,
    the intermezzo shows how easily a programmer can write down non-trivial XML data
    and even templates of XML representations using backquote and [unquote](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._unquote%29%29).
    Of course, [Interpreting Expressions](#%28part._sec~3ainterpreter%29) points out
    that you need a parser to determine whether any given S-expression is a representation
    of XML data, and a parser is a complex and unusual kind of function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, we choose to go with a representation of XML based on S-expressions
    to demonstrate the usefulness of this old, poetic idea in practical terms. We
    proceed gradually to work out a data definition, putting iterative refinement
    to work. Here is a first attempt:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An Xexpr.v0 (short for X-expression) is a one-item list: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Symbol](part_two.html#%28tech._symbol%29)  ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This is the “named parentheses” idea from the beginning of this section. Equipping
    this element representation with content is easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An Xexpr.v1 is a list: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Symbol](part_two.html#%28tech._symbol%29)  [List-of  [Xexpr.v1](#%28tech._xexpr..v1%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The symbolic name becomes the first item on a list that otherwise consists
    of XML element representatives.The last refinement step is to add attributes.
    Since the attributes in an XML element are optional, the revised data definition
    has two clauses:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An Xexpr.v2 is a list: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Symbol](part_two.html#%28tech._symbol%29)  [XL](#%28tech._xl%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An XL is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [List-of  [Xexpr.v2](#%28tech._xexpr..v2%29)] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [List-of  [Attribute](#%28tech._attribute%29)]  [List-of  [Xexpr.v2](#%28tech._xexpr..v2%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Attribute is a list of two items: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Symbol](part_two.html#%28tech._symbol%29)  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [String](part_one.html#%28tech._string%29)  ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: To show how it [Xexpr.v1](#%28tech._xexpr..v1%29) from [Xexpr.v1](#%28tech._xexpr..v1%29),
    its definition is split into two parts. Our above exploration suggests this definition
    for [Attribute](#%28tech._attribute%29).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 363\. Eliminate the use of [List-of](part_three.html#%28tech._sim-dd._list._of%29)
    from [Xexpr.v2](#%28tech._xexpr..v2%29). [![image](../Images/5f085ba1bb142514d6b0554678a56834.jpg)](#%28counter._%28exercise._ex~3axml-no-list-of%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 364\. Represent these XML data as elements of [Xexpr.v2](#%28tech._xexpr..v2%29):'
  prefs: []
  type: TYPE_NORMAL
- en: <transition from="seen-e" to="seen-f" />
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <ul><li><word /><word /></li><li><word /></li></ul>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which one could be represented in [Xexpr.v0](#%28tech._xexpr..v0%29) or [Xexpr.v1](#%28tech._xexpr..v1%29)?
    [![image](../Images/89bdc5782172b0a263cc8ce84be6bd6b.jpg)](#%28counter._%28exercise._ex~3axml-represent%29%29)Exercise 365\.
    Interpret the following elements of [Xexpr.v2](#%28tech._xexpr..v2%29) as XML
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '''(server  ((name  "example.org")))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '''(carcas  (board  (grass))  (player  ((name  "sam"))))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '''(start)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which ones are elements of [Xexpr.v0](#%28tech._xexpr..v0%29) or [Xexpr.v1](#%28tech._xexpr..v1%29)?
    [![image](../Images/bc735ec9103410bae0172187d4442bab.jpg)](#%28counter._%28exercise._ex~3axml-interpret%29%29)Roughly
    speaking, X-expressions simulate structures via lists. The simulation is convenient
    for programmers; it asks for the least amount of keyboard typing. For example,
    if an X-expression does not come with an attribute list, it is simply omitted.
    This choice of data representation represents a trade-off between authoring such
    expressions manually and processing them automatically. The best way to deal with
    the latter problem is to provide functions that make X-expressions look like structures,
    especially functions that access the quasi-fields:'
  prefs: []
  type: TYPE_NORMAL
- en: xexpr-name, which extracts the tag of the element representation;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: xexpr-attr, which extracts the list of attributes;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: xexpr-content, which extracts the list of content elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once we have these functions, we can use lists to represent XML yet act as
    if they were instances of a structure type.These functions parse S-expressions,
    and parsers are tricky to design. So let us design them carefully, starting with
    some data examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) a0 ''((initial "X")))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) e0 ''(machine))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) e1 `(machine ,a0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) e2 ''(machine (action)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) e3 ''(machine () (action)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) e4 `(machine ,a0 (action) (action)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first definition introduces a list of attributes, which is reused twice
    in the construction of X-expressions. The definition of e0 reminds us that an
    X-expression may not come with either attributes or content. You should be able
    to explain why e2 and e3 are basically equivalent.Next we formulate a signature,
    a purpose statement, and a header:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Xexpr.v2](#%28tech._xexpr..v2%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Attribute](#%28tech._attribute%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; retrieves the list of attributes of xe |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (xexpr-attr xe) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here we focus on xexpr-attr; we leave the other two as exercises.Making up
    functional examples requires a decision concerning the extract of attributes from
    X-expressions without any. While our chosen representation completely omits missing
    attributes, we must supply ''() for the structure-based representation of XML.
    The function therefore produces ''() for such X-expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (xexpr-attr e0) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (xexpr-attr e1) ''((initial "X")))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (xexpr-attr e2) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (xexpr-attr e3) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (xexpr-attr e4) ''((initial "X")))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It is time to develop the template. Since the data definition for [Xexpr.v2](#%28tech._xexpr..v2%29)
    is complex, we proceed slowly, step by step. First, while the data definition
    distinguishes two kinds of X-expressions, both clauses describe data constructed
    by [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)ing
    a symbol onto a list. Second, what differentiates the two clauses is the rest
    of the list and especially the optional presence of a list of attributes. Let
    us translate these two insights into a template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (xexpr-attr xe)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) optional-loa+content ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) xe)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) optional-loa+content) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The local definition chops off the name of the X-expression and leaves the
    remainder of the list, which may or may not start with a list of attributes. The
    key is that it is just a list, and the two [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clauses indicate so. Third, this list is not defined via a self-reference but
    as the optional [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    of some attributes onto a possibly empty list of X-expressions. In other words,
    we still need to distinguish the two usual cases and extract the usual pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (xexpr-attr xe)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) optional-loa+content ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) xe)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) optional-loa+content) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) optional-loa+content)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) optional-loa+content) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'At this point, we can already see that recursion is not needed for the task
    at hand. So, we switch to the fifth step of the design recipe. Clearly, there
    are no attributes if the given X-expression comes with nothing but a name. In
    the second clause, the question is whether the first item on the list is a list
    of attributes or just an [Xexpr.v2](#%28tech._xexpr..v2%29). Because this sounds
    complicated, we make a wish:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Attribute](#%28tech._attribute%29)]
    or [Xexpr.v2](#%28tech._xexpr..v2%29) -> ??? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determine whether x is an element of [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Attribute](#%28tech._attribute%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; #false otherwise |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (list-of-attributes? x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'With this function, it is straightforward to finish xexpr-attr:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (xexpr-attr xe)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) optional-loa+content ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) xe)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) optional-loa+content) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) loa-or-x
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) optional-loa+content)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) (list-of-attributes? loa-or-x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              loa-or-x |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              ''()))]))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If the first item is a list of attributes, the function produces it; otherwise
    there are no attributes.For the design of list-of-attributes?, we proceed in the
    same manner and get this definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Attribute](#%28tech._attribute%29)]
    or [Xexpr.v2](#%28tech._xexpr..v2%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is the given value a list of attributes |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (list-of-attributes? x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) x) #true]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) possible-attribute ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) x)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) possible-attribute))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: We skip the details of the design process because they are unremarkable. What
    is remarkable is the signature of this function. Instead of specifying a single
    data definition as possible... and in the currently popular scripting languages
    inputs, the signatures combines two data definitions separated with the English
    word “or.” In ISL+ such an informal signature with a definite meaning is acceptable
    on occasion.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 366\. Design xexpr-name and xexpr-content. [![image](../Images/8aad47780c91c41c7dda779b1013e05f.jpg)](#%28counter._%28exercise._ex~3axml-accessors%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 367\. The design recipe calls for a self-reference in the template
    for xexpr-attr. Add this self-reference to the template and then explain why the
    finished parsing function does not contain it. [![image](../Images/e3588217d3a9510f80186eb6b58ec594.jpg)](#%28counter._%28exercise._ex~3axml-odd-recursion%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 368\. Formulate a data definition that replaces the informal “or” signature
    for the definition of the list-of-attributes? function. [![image](../Images/e4c10d5325d8839491462d59c8602f14.jpg)](#%28counter._%28exercise._ex~3axml-dd%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 369\. Design find-attr. The function consumes a list of attributes
    and a symbol. If the attributes list associates the symbol with a string, the
    function retrieves this string; otherwise it returns #false.—<wbr>Consider using
    [assq](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._assq%29%29)
    to define the function. [![image](../Images/78ccf43b0a8d81ec31d14a854b6c9c53.jpg)](#%28counter._%28exercise._ex~3alookup-attribute%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: For the remainder of this chapter, Xexpr refers to [Xexpr.v2](#%28tech._xexpr..v2%29).
    Also, we assume xexpr-name, xexpr-attr, and xexpr-content are defined. Finally,
    we use find-attr from [exercise 369](#%28counter._%28exercise._ex~3alookup-attribute%29%29)
    to retrieve attribute values.
  prefs: []
  type: TYPE_NORMAL
- en: 22.2Rendering XML Enumerations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: XML is really a family of languages. People define dialects for specific channels
    of communication. For example, XHTML is the language for sending web content in
    XML format. In this section, we illustrate how to design a rendering function
    for a small snippet of XHTML, specifically the enumerations from the beginning
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The ul tag surrounds a so-called unordered HTML list. Each item of this list
    is tagged with li, which tends to contain words but also other elements, even
    enumerations. With “unordered” HTML means that each item is to be rendered with
    a leading bullet instead of a number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since [Xexpr](#%28tech._xexpr%29) does not come with plain strings, it is not
    immediately obvious how to represent XHTML enumerations in a subset. One option
    is to refine the data representation one more time, so that an [Xexpr](#%28tech._xexpr%29)
    could be a [String](part_one.html#%28tech._string%29). Another option is to introduce
    a representation for text:'
  prefs: []
  type: TYPE_NORMAL
- en: ; An XWord is '(word  ((text  [String](part_one.html#%28tech._string%29)))).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here, we use this second option; Racket, the language from which the teaching
    languages are derived, offers libraries that include [String](part_one.html#%28tech._string%29)
    in [Xexpr](#%28tech._xexpr%29).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 370\. Make up three examples for [XWord](#%28tech._xword%29)s. Design
    word?, which checks whether some ISL+ value is in [XWord](#%28tech._xword%29),
    and word-text, which extracts the value of the only attribute of an instance of
    [XWord](#%28tech._xword%29). [![image](../Images/816271bbecc51a5f8f712e2d5da84ba4.jpg)](#%28counter._%28exercise._ex~3axml-words%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 371\. Refine the definition of [Xexpr](#%28tech._xexpr%29) so that
    an you can represent XML elements, including enumerations, that are plain strings.
    [![image](../Images/086ff4040662674e30c79bb08553ca47.jpg)](#%28counter._%28exercise._ex~3axml%2Bstring%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the representation of words, representing an XHTML-style enumeration
    of words is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An XEnum.v1 is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  ''ul  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [XItem.v1](#%28tech._xitem..v1%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  ''ul  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  Attributes  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [XItem.v1](#%28tech._xitem..v1%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An XItem.v1 is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  ''li  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [XWord](#%28tech._xword%29)  ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  ''li  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  Attributes  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [XWord](#%28tech._xword%29)  ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: For completeness, the data definition includes attribute lists, even though
    they do not affect rendering.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Argue that every element of [XEnum.v1](#%28tech._xenum..v1%29) is also
    in [XExpr](#%28tech._xexpr%29).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample element of [XEnum.v1](#%28tech._xenum..v1%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) e0
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''(ul |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (li (word ((text "one")))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (li (word ((text "two")))))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It corresponds to the inner enumeration of the example from the beginning of
    the chapter. Rendering it with help from the 2htdp/image library should yield
    an image like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/35e05a70fa874549e801bbab0e78c50f.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The radius of the bullet and the distance between the bullet and the text are
    matters of aesthetic; here the idea matters.To create this kind image, you might
    use this ISL+ program:We developed these expressions in the interactions area.
    What would you do?
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) e0-rendered
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([above/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%2Falign%29%29) ''left
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([beside/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%2Falign%29%29) ''center BULLET
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                              ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "one" 12 ''black))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([beside/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%2Falign%29%29) ''center BULLET
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                              ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "two" 12 ''black))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: assuming BULLET is a rendering of a bullet.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s design the function carefully. Since the data representation requires
    two data definitions, the design recipe tells you that you must design two functions
    in parallel. A second look reveals, however, that in this particular case the
    second data definition is disconnected from the first one, meaning we can deal
    with it separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, the definition for [XItem.v1](#%28tech._xitem..v1%29) consists
    of two clauses, meaning the function itself should consist of a [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    with two clauses. The point of viewing [XItem.v1](#%28tech._xitem..v1%29) as a
    sub-language of [Xexpr](#%28tech._xexpr%29), however, is to think of these two
    clauses in terms of [Xexpr](#%28tech._xexpr%29) selector functions, in particular,
    xexpr-content. With this function we can extract the textual part of an item,
    regardless of whether it comes with attributes or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [XItem.v1](#%28tech._xitem..v1%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders an item as a "word" prefixed by a bullet |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (render-item1 i)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (xexpr-content i) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In general, xexpr-content extracts a list of [Xexpr](#%28tech._xexpr%29); in
    this specific case, the list contains exactly one [XWord](#%28tech._xword%29),
    and this word contains one text:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (render-item1 i)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) content (xexpr-content i))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) element ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) content))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) a-word (word-text element)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) a-word [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'From here, it is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (render-item1 i)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) content (xexpr-content i))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) element ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) content))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) a-word (word-text element))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) item ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) a-word 12 ''black)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([beside/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%2Falign%29%29) ''center BULLET item)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: After extracting the text to be rendered in the item, it is simply a question
    of rendering it as text and equipping it with a leading bullet; see the examples
    above for how you might discover this last step.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 372\. Before you read on, equip the definition of render-item1 with
    a test. Make sure to formulate them so that they don’t depend on the nature of
    BULLET. Then explain how the function works; keep in mind that the purpose statement
    explains only what it does. [![image](../Images/f3933ee8fb400a14776d56d4a3bab5fe.jpg)](#%28counter._%28exercise._ex~3axml-item1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can focus on the design of a function that renders an enumeration. Using
    the example from above, the first two design steps are easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [XEnum.v1](#%28tech._xenum..v1%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders a simple enumeration as an image |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (render-enum1 e0) e0-rendered)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (render-enum1 xe) [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The key step is the development of a template. According to the data definition,
    an element of [XEnum.v1](#%28tech._xenum..v1%29) contains one interesting piece
    of data, namely, the (representation of the) XML elements. The first item is always
    ''ul, so there is no need to extract it, and the second, optional item is a list
    of attributes, which we ignore. With this in mind, the first template draft looks
    just like the one for render-item1:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (render-enum1 xe)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (xexpr-content xe) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))) ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [XItem.v1](#%28tech._xitem..v1%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The data-oriented design recipe tells you that you should design a separate
    function whenever you encounter a complex form of data, such as this list of items.
    The abstraction-based design recipe from [Abstraction](part_three.html) tells
    you to reuse an existing abstraction, say a list-processing function from [figures 91](part_three.html#%28counter._%28figure._fig~3aisl-ho-list%29%29)
    and [92](part_three.html#%28counter._%28figure._fig~3aisl-ho-list2%29%29), when
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that render-enum1 is supposed to process a list and create a single image
    from it, the only two list-processing abstractions whose signatures fit the bill
    are [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    and [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29).
    If you also study their purpose statements, you see a pattern that is like the
    e0-rendered example above, especially for [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29).
    Let’s try to use it, following the re-use design recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (render-enum1 xe)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) content (xexpr-content xe))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            ; [XItem.v1](#%28tech._xitem..v1%29)  [Image](part_one.html#%28tech._image%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (deal-with-one item so-far)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) deal-with-one [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29) content)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'From the type matching, you also know that:'
  prefs: []
  type: TYPE_NORMAL
- en: the first argument to [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    must be a two-argument function, which consumes one item at a time and the image
    built up so far;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the second argument must be an image;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the last argument is the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We consider [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29)
    the correct starting point because nothing is known about the image; naturally,
    the XML content is the list of elements to be processed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This design-by–reuse focuses our attention on one function definition, the
    function to be “folded” over the list. It turns one item and the image that [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    has created so far into another image. The signature for deal-with-one articulates
    this insight. Since the first argument is an instance of [XItem.v1](#%28tech._xitem..v1%29),
    render-item1 is the function that renders it. This yields two images that must
    be combined: the image of the first item and the image of the rest of the items.
    Clearly, deal-with-one must stack them on top of each other, which is precisely
    what [above](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%29%29)
    accomplishes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (render-enum1 xe)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) content (xexpr-content xe))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [XItem.v1](#%28tech._xitem..v1%29)  [Image](part_one.html#%28tech._image%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (deal-with-one item so-far)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([above/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%2Falign%29%29) ''left
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                           (render-item1 item) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                           so-far))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) deal-with-one [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29) content)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The example suggests the use of [above/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%2Falign%29%29)
    and 'left.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An XItem.v2 is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  ''li  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [XWord](#%28tech._xword%29)  ''()))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  ''li  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Attribute](#%28tech._attribute%29)]  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  [XWord](#%28tech._xword%29))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  ''li  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [XEnum.v2](#%28tech._xenum..v2%29)  ''()))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  ''li  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Attribute](#%28tech._attribute%29)]  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  [XEnum.v2](#%28tech._xenum..v2%29))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An XEnum.v2 is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  ''ul  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [XItem.v2](#%28tech._xitem..v2%29)])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  ''ul  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Attribute](#%28tech._attribute%29)]  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [XItem.v2](#%28tech._xitem..v2%29)]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 122: A realistic data representation of XML enumerations'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Flat enumerations are common but they are also a simple approximation of the
    full-fledged case. In the real world, web browsers must cope with arbitrarily
    nested enumerations that arrive over the web. In XML and its web browser dialect
    XHTML, nesting is straightforward. Any element may show up as the content of any
    other element. To represent thisAre you wondering whether arbitrary nesting is
    the correct way to think about this problem? If so, develop a data definition
    that allows only three levels of nesting and use it. relationship in our limited
    XHTML representation, we say that an item is either a word or another enumeration.
    [Figure 122](#%28counter._%28figure._fig~3axenum%29%29) displays the second revision
    of the data definition. It includes a revision of the data definition for enumerations
    so that the first definition refers to the correct form of item.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) SIZE 12) ; font
    size |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) COLOR "black") ; font
    color |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) BULLET ; a
    graphical constant |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) ([circle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29) 1 ''solid ''black) ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "
    " SIZE COLOR))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Image](part_one.html#%28tech._image%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; marks item with bullet   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (bulletize item)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([beside/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%2Falign%29%29) ''center BULLET item))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [XEnum.v2](#%28tech._xenum..v2%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders an [XEnum.v2](#%28tech._xenum..v2%29) as an image |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (render-enum xe)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) content (xexpr-content xe))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [XItem.v2](#%28tech._xitem..v2%29)  [Image](part_one.html#%28tech._image%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (deal-with-one item so-far)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([above/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%2Falign%29%29) ''left (render-item item) so-far)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) deal-with-one [empty-image](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-image%29%29) content)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [XItem.v2](#%28tech._xitem..v2%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; renders one [XItem.v2](#%28tech._xitem..v2%29) as an image |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (render-item an-item)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) content ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) (xexpr-content an-item))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([beside/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%2Falign%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ''center BULLET |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        [(word? content) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) (word-text content) SIZE ''black)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (render-enum content)]))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 123: Refining functions to match refinements of data definitions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The next question is how this change to the data definition affects the rendering
    functions. Put differently, we need to revise render-enum1 and render-item1 so
    that they can cope with [XEnum.v2](#%28tech._xenum..v2%29) and [XItem.v2](#%28tech._xitem..v2%29),
    respectively. Software engineers face these kinds of questions all the time, and
    it is another situation where the design recipe shines.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 123](#%28counter._%28figure._fig~3aenum%29%29) shows the complete answer.
    Since the change is confined to the data definitions for [XItem.v2](#%28tech._xitem..v2%29),
    it should not come as a surprise that the change to the rendering program shows
    up in the function for rendering items. While render-item1 does not need to distinguish
    between different forms of [XItem.v1](#%28tech._xitem..v1%29), render-item is
    forced to use a [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    because [XItem.v2](#%28tech._xitem..v2%29) lists two different kinds of items.
    Given that this data definition is close to one from the real world, the distinguishing
    characteristic is not something simple—<wbr>like ''() vs [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)—<wbr>but
    a specific piece of the given item. If the item’s content is a [Word](part_two.html#%28tech._word%29),
    the rendering function proceeds as before. Otherwise, the item contains an enumeration,
    in which case render-item uses render-enum to deal with the data, because the
    data definition for [XItem.v2](#%28tech._xitem..v2%29) refers back to [XEnum.v2](#%28tech._xenum..v2%29)
    precisely at this point.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 373\. [Figure 123](#%28counter._%28figure._fig~3aenum%29%29) is missing
    test cases. Develop test cases for all the functions. [![image](../Images/916df6269616d8c2c12f40a3791bc5c1.jpg)](#%28counter._%28exercise._ex~3aenum2-test%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 374\. The data definitions in [figure 122](#%28counter._%28figure._fig~3axenum%29%29)
    use [list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29).
    Rewrite them so they use [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29).
    Then use the recipe to design the rendering functions for [XEnum.v2](#%28tech._xenum..v2%29)
    and [XItem.v2](#%28tech._xitem..v2%29) from scratch. You should come up with the
    same definitions as in [figure 123](#%28counter._%28figure._fig~3aenum%29%29).
    [![image](../Images/e5a9ab73e0ffe97edfacfa3b0b81b5c5.jpg)](#%28counter._%28exercise._ex~3aenum2-design%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 375\. The wrapping of [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    with
  prefs: []
  type: TYPE_NORMAL
- en: ([beside/align](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%2Falign%29%29) 'center BULLET [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: may surprise you. Edit the function definition so that the wrap-around appears
    once in each clause. Why are you confident that your change works? Which version
    do you prefer? [![image](../Images/241e2414aac8e7bd09eb635e80816c07.jpg)](#%28counter._%28exercise._ex~3aenum-refactor%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 376\. Design a program that counts all "hello"s in an instance of [XEnum.v2](#%28tech._xenum..v2%29).
    [![image](../Images/16844c686c16d251a6f7e44cb7dc193d.jpg)](#%28counter._%28exercise._ex~3aenum-count%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 377\. Design a program that replaces all "hello"s with "bye" in an
    enumeration. [![image](../Images/644834669949eab0408f3121fde332e8.jpg)](#%28counter._%28exercise._ex~3aenum-subst%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 22.3Domain-Specific Languages
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Engineers routinely build large software systems that require a configuration
    for specific contexts before they can be run. This configuration task tends to
    fall to systems administrators who must deal with many different software systems.
    The word “configuration” refers to the data that the main function needs when
    the program is launched. In a sense a configuration is just an addition argument,
    though it is usually so complex that program designers prefer a different mechanism
    for handing it over.
  prefs: []
  type: TYPE_NORMAL
- en: Since software engineers cannot assume that systems administrators know every
    programming language, they tend to devise simple, special-purpose configuration
    languages. These special languages are also known as a domain-specific languages
    (DSL).Because configurations abstract a program over various pieces of data, Paul
    Hudak argued in the 1990s that DSLs are the ultimate abstractions, that is, that
    they generalize the ideas of [Abstraction](part_three.html) to perfection. Developing
    these DSLs around a common core, say the well-known XML syntax, simplifies life
    for systems administrators. They can write small XML “programs” and thus configure
    the systems they must launch.
  prefs: []
  type: TYPE_NORMAL
- en: While the construction of a DSL is often considered a task for an advanced programmer,
    you are actually in a position to understand, appreciate, and implement a reasonably
    complex DSL already. This section explains how it all works. It first re-acquaints
    you with finite state machines (FSMs). Then it shows how to design, implement,
    and program a DSL for configuring a system that simulates arbitrary FSMs.
  prefs: []
  type: TYPE_NORMAL
- en: Finite State Machines Remembered The theme of finite state machine is an important
    one in computing, and this book has presented it several times already. Here we
    reuse the example from [Finite State Machines](part_two.html#%28part._sec~3asec-fsm-list%29)
    as the component for which we wish to design and implement a configuration DSL.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A FSM is a [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1Transition](#%28tech._1transition%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A 1Transition is a list of two items: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [FSM-State](part_two.html#%28tech._fsm._state%29)  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [FSM-State](part_two.html#%28tech._fsm._state%29)  ''()))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A FSM-State is a [String](part_one.html#%28tech._string%29) that specifies
    a color |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; data examples |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) fsm-traffic
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''(("red" "green") ("green" "yellow") ("yellow" "red"))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [FSM](part_two.html#%28tech._fsm%29)  [FSM-State](part_two.html#%28tech._fsm._state%29)
    -> [FSM-State](part_two.html#%28tech._fsm._state%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; match the keys pressed by a player with the given [FSM](part_two.html#%28tech._fsm%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (simulate state0 transitions)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) state0 ; [FSM-State](part_two.html#%28tech._fsm._state%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (current)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) 100 "solid" current))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (current key-event)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         (find transitions current))])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [X Y] [[List-of](part_three.html#%28tech._sim-dd._list._of%29) [[List](part_three.html#%28tech._sim-dd._list%29)  X  Y]]
    X -> Y |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds the matching Y for the given X in alist |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find alist x)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) fm ([assoc](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._assoc%29%29) x alist)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) fm) ([second](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._second%29%29) fm) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) "not
    found")))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 124: Finite state machines, revisited'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For convenience, [figure 124](#%28counter._%28figure._fig~3afsm-again%29%29)
    presents the entire code again, though reformulated using just lists and using
    the full power of ISL+. The program consists of two data definitions, one data
    example, and two function definitions: simulate and find. Unlike the related programs
    in preceding chapters, this one represents a transition as a list of two items:
    the current state and the next one.'
  prefs: []
  type: TYPE_NORMAL
- en: The main function, simulate, consumes a transition table and an initial state;
    it then evaluates a [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    expression, which reacts to each key event with a state transition. The states
    are displayed as colored squares. The [to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29)
    and [on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29)
    clauses are specified with [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    expressions that consume the current state, plus the actual key event, and that
    produce an image or the next state, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: As its signature shows, the auxiliary find function is completely independent
    of the FSM application. It consumes a list of two-item lists and an item but the
    actual nature of the items is specified via parameters. In the context of this
    program, X and Y represent [FSM-State](part_two.html#%28tech._fsm._state%29)s,
    meaning find consumes a transition table together with a state and produces a
    state. The function body uses the built-in [assoc](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._assoc%29%29)
    function to perform most of the work. Look up the documentation for [assoc](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._assoc%29%29)
    so that you understand why the body of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    uses an [if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29)
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 378\. Modify the rendering function so that it overlays the name of
    the state onto the colored square. [![image](../Images/789c9eecb11d96f3094ee36f418fc0ca.jpg)](#%28counter._%28exercise._ex~3afsm-reacquaint1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 379\. Formulate test cases for find. [![image](../Images/0d35e3f7e34043ea55cd82f187783400.jpg)](#%28counter._%28exercise._ex~3afsm-reacquaint2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 380\. Reformulate the data definition for [1Transition](#%28tech._1transition%29)
    so that it is possible to restrict transitions to certain key strokes. Try to
    formulate the change so that find continues to work without change. What else
    do you need to change to get the complete program to work? Which part of the design
    recipe provides the answer(s)? See [exercise 229](part_two.html#%28counter._%28exercise._ex~3afsm-design3%29%29)
    for the original exercise statement. [![image](../Images/89e93ced2e3f6171ea3f80d14ae5bf86.jpg)](#%28counter._%28exercise._ex~3afsm-reacquaint3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Configurations The FSM simulation function uses two arguments, which jointly
    describe a machine. Rather than teach a potential “customer” how to open a ISL+
    program in DrRacket and launch a function of two arguments, the “seller” of simulate
    may wish to supplement this product with a configuration component.
  prefs: []
  type: TYPE_NORMAL
- en: 'A configuration component consists of two parts. The first one is a widely
    used simple language that customers use to formulate the initial arguments for
    a component’s main function(s). The second one is a function that translates what
    customers say into a function call for the main function. For the FSM simulator,
    we must agree on how we represent finite state machines in XML. By judicious planning,
    [XML as S-expressions](#%28part._sec~3axml%29) presents a series of machine examples
    that look just right for the task. Recall the final machine example in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '| <machine initial="red"> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   <action state="red"    next="green" /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   <action state="green"  next="yellow" /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   <action state="yellow" next="red" /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| </machine> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Compare it to the transition table fsm-traffic from [figure 124](#%28counter._%28figure._fig~3afsm-again%29%29).
    Also recall the agreed-upon [Xexpr](#%28tech._xexpr%29) representation of this
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) xm0
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''(machine ((initial "red")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (action ((state "red") (next "green"))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (action ((state "green") (next "yellow"))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (action ((state "yellow") (next "red"))))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'What we are still lacking is a general data definition that describes all possible
    [Xexpr](#%28tech._xexpr%29) representations of finite state machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An XMachine is a nested list of this shape: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; `(machine  ((initial  ,[FSM-State](part_two.html#%28tech._fsm._state%29)))  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [X1T](#%28tech._x1t%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An X1T is a nested list of this shape: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; `(action  ((state  ,[FSM-State](part_two.html#%28tech._fsm._state%29))  (next  ,[FSM-State](part_two.html#%28tech._fsm._state%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Like [XEnum.v2](#%28tech._xenum..v2%29), [XMachine](#%28tech._xmachine%29) describes
    a subset of all [Xexpr](#%28tech._xexpr%29). Thus, when we design functions that
    process this new form of data, we may continue to use the generic [Xexpr](#%28tech._xexpr%29)
    functions to access pieces.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 381\. The definitions of [XMachine](#%28tech._xmachine%29) and [X1T](#%28tech._x1t%29)
    use quote, which is highly inappropriate for novice program designers. Rewrite
    them first to use [list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)
    and then [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29).
    [![image](../Images/4a8293caa13bff48d5613a4ad326f69e.jpg)](#%28counter._%28exercise._ex~3axmachine-data0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 382\. Formulate an XML configuration for the BW machine, which switches
    from white to black and back for every key event. Translate the XML configuration
    into an [XMachine](#%28tech._xmachine%29) representation. See [exercise 227](part_two.html#%28counter._%28exercise._ex~3afsm-design2%29%29)
    for an implementation of the machine as a program. [![image](../Images/f4372924f57145072e75e08c27ea2c7a.jpg)](#%28counter._%28exercise._ex~3axmachine-data1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we dive into the translation part of the configuration problem, let’s
    spell it out:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design a program that uses an [XMachine](#%28tech._xmachine%29)
    configuration to run simulate.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'While this problem is specific to our case, it is easy to imagine a generalization
    for similar systems and we encourage you to do so.The problem statement suggests
    a complete outline:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [XMachine](#%28tech._xmachine%29) -> [FSM-State](part_two.html#%28tech._fsm._state%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; simulates an FSM via the given configuration |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (simulate-xmachine xm)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (simulate [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Following the problem statement, our function calls simulate with two to-be-determined
    arguments. What we need to complete the definition are two pieces: an initial
    state and a transition table. These two pieces are part of xm and we are best
    off wishing for appropriate functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'xm-state0 extracts the initial state from the given [XMachine](#%28tech._xmachine%29):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (xm-state0 xm0) "red")
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'xm->transitions translates the embedded list of [X1T](#%28tech._x1t%29)s into
    a list of [1Transition](#%28tech._1transition%29)s:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (xm->transitions xm0) fsm-traffic)
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ; [XMachine](#%28tech._xmachine%29) -> [FSM-State](part_two.html#%28tech._fsm._state%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interprets the given configuration as a state machine |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (simulate-xmachine xm)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (simulate (xm-state0 xm) (xm->transitions xm))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [XMachine](#%28tech._xmachine%29) -> [FSM-State](part_two.html#%28tech._fsm._state%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts and translates the transition table from xm0 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (xm-state0 xm0) "red")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (xm-state0 xm0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (find-attr (xexpr-attr xm0) ''initial)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [XMachine](#%28tech._xmachine%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1Transition](#%28tech._1transition%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts the transition table from xm |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (xm->transitions xm0) fsm-traffic)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (xm->transitions xm)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [X1T](#%28tech._x1t%29)
    -> [1Transition](#%28tech._1transition%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (xaction->action xa)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) (find-attr (xexpr-attr xa) ''state)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   (find-attr (xexpr-attr xa) ''next)))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) xaction->action (xexpr-content xm))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 125: Interpreting a DSL program'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since [XMachine](#%28tech._xmachine%29) is a subset of Xexpr, defining xm-state0
    is straightforward. Given that the initial state is specified as an attribute,
    xm-state0 extracts the list of attributes using xexpr-attr and then retrieves
    the value of the 'initial attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us then turn to xm->transitions, which translates the transitions inside
    of an XMachine configuration into a transition table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [XMachine](#%28tech._xmachine%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1Transition](#%28tech._1transition%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts & translates the transition table from xm |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (xm->transitions xm)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The name of the function prescribes the signature and suggests a purpose statement.
    Our purpose statement describes a two-step process: (1) extract the Xexpr representation
    of the transitions and (2) translate them into an instance of [[List-of](part_three.html#%28tech._sim-dd._list._of%29)
    [1Transition](#%28tech._1transition%29)].While the extraction part obviously uses
    xexpr-content to get the list, the translation part calls for some more analysis.
    If you look back to the data definition of [XMachine](#%28tech._xmachine%29),
    you see that the content of the [Xexpr](#%28tech._xexpr%29) is a list of [X1T](#%28tech._x1t%29)s.
    The signature tells us that the transition table is a list of [1Transition](#%28tech._1transition%29)s.
    Indeed, it is quite obvious that each item in the former list is translated into
    one item of the latter, which suggests a use of [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (xm->transitions xm)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [X1T](#%28tech._x1t%29)
    -> [1Transition](#%28tech._1transition%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (xaction->action xa)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) xaction->action (xexpr-content xm))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: As you can see, we follow the design ideas of [Using Abstractions, by Example](part_three.html#%28part._sec~3ausage-examples%29)
    and formulate the function as a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    whose body uses [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29).
    Defining xaction->action is again just a matter of extracting the appropriate
    values from an [Xexpr](#%28tech._xexpr%29).
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 125](#%28counter._%28figure._fig~3adsl%29%29) displays the complete
    solution. Here the translation from the DSL to a proper function call is as large
    as the original component. This is not the case for real-world systems; the DSL
    component tends to be a small fraction of the overall product, which is why the
    approach is so popular.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 383\. Run the code in [figure 125](#%28counter._%28figure._fig~3adsl%29%29)
    with the BW Machine configuration from [exercise 382](#%28counter._%28exercise._ex~3axmachine-data1%29%29).
    [![image](../Images/765152dcddd5ea9761648c0f5e257155.jpg)](#%28counter._%28exercise._ex~3axmachine-data2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: machine-configuration.xml
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   <machine initial="red"> |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|    <action state="red"    next="green" /> |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|    <action state="green"  next="yellow" /> |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|    <action state="yellow" next="red" /> |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   </machine> |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 126: A file with a machine configuration'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 22.4Reading XML
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Systems administrators expect that sophisticated applications read configuration
    programs from a file or possibly from some place on the web. In ISL+ your programs
    can retrieve (some) XML informationThis section uses the 2htdp/batch-io library,
    the 2htdp/universe library, and the 2htdp/image library. from files and the web
    with the help of the 2htdp/batch-io library.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 127](#%28counter._%28figure._fig~3axexpr-tp%29%29) shows the relevant
    excerpt from teachpack. For consistency, the figure uses the suffix .v3 for its
    XML representation including those data definitions for which there is no version
    2:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An Xexpr.v3 is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   –  [Symbol](part_two.html#%28tech._symbol%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   –  [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   –  [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Symbol](part_two.html#%28tech._symbol%29)  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Attribute*.v3](#%28tech._attribute%2A..v3%29)  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Xexpr.v3](#%28tech._xexpr..v3%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Symbol](part_two.html#%28tech._symbol%29)  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Xexpr.v3](#%28tech._xexpr..v3%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Attribute*.v3 is a [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Attribute.v3](#%28tech._attribute..v3%29)].
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Attribute.v3 is a list of two items: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  [Symbol](part_two.html#%28tech._symbol%29)  [String](part_one.html#%28tech._string%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Any](part_one.html#%28tech._any%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is the given value an [Xexpr.v3](#%28tech._xexpr..v3%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; effect display bad piece if x is not an [Xexpr.v3](#%28tech._xexpr..v3%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([xexpr?](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._xexpr~3f%29%29) x) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [String](part_one.html#%28tech._string%29) -> [Xexpr.v3](#%28tech._xexpr..v3%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces the first XML element in file f |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([read-xexpr](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-xexpr%29%29) f) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [String](part_one.html#%28tech._string%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; #false, if this url returns a ''404''; #true otherwise |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([url-exists?](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._url-exists~3f%29%29) u) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [String](part_one.html#%28tech._string%29) -> [[Maybe](part_three.html#%28tech._sim-dd._maybe%29)  [Xexpr.v3](#%28tech._xexpr..v3%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; retrieves the first XML (HTML) element from URL u |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; #false if ([not](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._not%29%29)  ([url-exists?](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._url-exists~3f%29%29)  u))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([read-plain-xexpr/web](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-plain-xexpr%2Fweb%29%29) u) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 127: Reading X-expressions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Assume we have the file in [figure 126](#%28counter._%28figure._fig~3amachine-configuration..xml%29%29).
    If the 2htdp/batch-io library is required, a program can read the element with
    [read-plain-xexpr](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-plain-xexpr%29%29).
    The function retrieves the XML element in a format that matches the [XMachine](#%28tech._xmachine%29)
    data definition. A function for retrieving XML elements from the web is also available
    in the teachpack. Try this in DrRacket:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([read-plain-xexpr/web](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-plain-xexpr%2Fweb%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        "http://www.ccs.neu.edu/" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        "home/matthias/" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        "HtDP2e/Files/machine-configuration.xml")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If your computer is connected to the web, this expression retrieves our standard
    machine configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reading files or web pages introduces an entirely novel idea into our computational
    model. As [Intermezzo: BSL](part_one.html#%28part._i1-2%29) explains, a BSL program
    is evaluated in the same manner in which you evaluate variable expressions in
    algebra. Function definitions are also treated just like in algebra. Indeed, most
    algebra courses introduce conditional function definition, meaning [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    does not pose any challenges either. Finally, while ISL+ introduces functions
    as values, the evaluation model remains fundamentally the same.'
  prefs: []
  type: TYPE_NORMAL
- en: One essential property of this computational model is that no matter how often
    you call a function f on some argument(s) a  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: (f a [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the answer remains the same. The introduction of [read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29),
    [read-xexpr](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-xexpr%29%29),
    and their relatives destroys this property, however. The problem is that files
    and web sites may change over time so that every time a program reads files or
    web sites it may get a new result.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the idea of looking up the stock price of a company. Point your browser
    to google.com/finance or any other such financial web site and enter the name
    of your favorite company, say, Ford. In response, the site will display the current
    price of the company’s stock and other information, for example, how much the
    price has changed since the last time it was posted, the current time, and many
    other facts and ads. The important point is that as you reload this page over
    the course of a day or a week, some of the information on this web page will change.
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative to looking up such company information manually is to write
    a small program that retrieves such information on a regular basis, say, every
    15 seconds. With ISL you can write a world program that performs this task. You
    would launch it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (stock-alert "Ford") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'to see a world window that displays an image like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/aadb122a11640c9ddfc747c9050c4f02.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'To develop such a program requires skills beyond normal program design. First,
    you need to investigate how the web site formats its information. In the case
    of Google’s financial service page, an inspection of the web source code shows
    the following pattern near the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   <meta content="17.09" itemprop="price" /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   <meta content="+0.07" itemprop="priceChange" /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   <meta content="0.41" itemprop="priceChangePercent" /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   <meta content="2013-08-12T16:59:06Z" itemprop="quoteTime" /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   <meta content="NYSE real-time data" itemprop="dataSource" /> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If we had a function that could search an [Xexpr.v3](#%28tech._xexpr..v3%29)
    and extract (the representation of XML) meta elements with the attribute value
    "price" and "priceChange", the rest of stock-alert would be straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) PREFIX "https://www.google.com/finance?q=")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) SUFFIX "&btnG=Search")
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) SIZE 22) ; font
    size |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) data [price delta])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A StockWorld is a structure: (make-data  [String](part_one.html#%28tech._string%29)  [String](part_one.html#%28tech._string%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [String](part_one.html#%28tech._string%29) -> [StockWorld](#%28tech._stockworld%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; retrieves the stock price of co and its change every 15s |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (stock-alert co)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) url ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29) PREFIX co SUFFIX))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [[StockWorld](#%28tech._stockworld%29) -> [StockWorld](#%28tech._stockworld%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (retrieve-stock-data __w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) x ([read-xexpr/web](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-xexpr%2Fweb%29%29) url)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               (make-data (get x "price") |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                          (get x "priceChange")))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [StockWorld](#%28tech._stockworld%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (render-stock-data w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [[StockWorld](#%28tech._stockworld%29)
    -> [String](part_one.html#%28tech._string%29)] -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                     ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (word sel col)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                       ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) (sel w) SIZE col)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29) ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) (word data-price ''black)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                                ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) "  " SIZE ''white)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                                (word data-delta ''red)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                        ([rectangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rectangle%29%29) 300 35 ''solid ''white)))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) (retrieve-stock-data ''no-use)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) retrieve-stock-data 15]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) render-stock-data])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 128: Web data as an event'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 128](#%28counter._%28figure._fig~3areal-time%29%29) displays the core
    of the program. The design of get is left to the exercises, because its workings
    are all about intertwined data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As the figure shows, the main function defines two local ones: a clock tick
    handler and a rendering function. The [big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29)
    specification requests that the clock tick every 15 seconds. When the clock ticks,
    ISL+ applies retrieve-stock-data to the current world and the function ignores
    it. Instead of using its argument, the function visits the web site via [read-xexpr/web](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-xexpr%2Fweb%29%29)
    and then extracts the appropriate information with get. In other words, the new
    world is created from newly available information on the web not some locally
    available data.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 384\. [Figure 128](#%28counter._%28figure._fig~3areal-time%29%29) is
    missing several important pieces, in particular, the interpretation of data and
    purpose statements for all the locally defined functions. Formulate the missing
    pieces so that you get to understand the program. [![image](../Images/7b4de54af9bae59a21f9b866ae094136.jpg)](#%28counter._%28exercise._ex~3aweb-data0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 385\. Look up the current stock price for your favorite company at
    Google’s financial service page. If you don’t favor a company, pick Ford. Then
    save the source code of the page as a file in your working directory. Use [read-xexpr](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-xexpr%29%29)
    in DrRacket to view the source as an [Xexpr.v3](#%28tech._xexpr..v3%29). [![image](../Images/f3c7f4faa2f8e88c5964944bcd94906c.jpg)](#%28counter._%28exercise._ex~3aweb-data1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 386\. Here is the get function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Xexpr.v3](#%28tech._xexpr..v3%29)  [String](part_one.html#%28tech._string%29)
    -> [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; retrieves the value of the "content" attribute |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; from a ''meta element that has attribute "itemprop" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; with value s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (get ''(meta ((content "+1") (itemprop "F"))) "F") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   "+1") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (get x s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) result (get-xexpr x s)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29) result)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         result |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) "not
    found")))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It assumes the existence of get-xexpr, a function that searches an arbitrary
    [Xexpr.v3](#%28tech._xexpr..v3%29) for the desired attribute and produces [[Maybe](part_three.html#%28tech._sim-dd._maybe%29)
    [String](part_one.html#%28tech._string%29)].
  prefs: []
  type: TYPE_NORMAL
- en: Formulate test cases that look for other values than "F" and that force get
    to signal an error.
  prefs: []
  type: TYPE_NORMAL
- en: Design get-xexpr. Derive functional examples for this function from those for
    get. Generalize these examples so that you are confident get-xexpr can traverse
    an arbitrary [Xexpr.v3](#%28tech._xexpr..v3%29). Finally, formulate a test that
    uses the web data saved in [exercise 385](#%28counter._%28exercise._ex~3aweb-data1%29%29).
    [![image](../Images/3f9962d03e4bd42efac6fe1ca5906b22.jpg)](#%28counter._%28exercise._ex~3aweb-data2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 23Simultaneous Processing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some functions have to consume two arguments that belong to classes with non-trivial
    data definitions. How to design such functions depends on the relationship between
    the arguments. First, one of the arguments may have to be treated as if it were
    atomic. Second, it is possible that the function must process the two arguments
    in lockstep. Finally, the function may process the given data in accordance to
    all possible cases. This chapter illustrates the three cases with examples and
    provides an augmented design recipe. The last section discusses the equality of
    compound data.
  prefs: []
  type: TYPE_NORMAL
- en: '23.1Processing Two Lists Simultaneously: Case 1'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Consider the following signature, purpose statement, and header:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; replace the final ''() in front with end |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (replace-eol-with front end)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   front) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The signature says that the function consumes two lists. Let’s see how the
    design recipe works in this case.We start by working through examples. If the
    first argument is ''(), replace-eol-with must produce the second one, no matter
    what it is:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (replace-eol-with '() '(a b)) '(a b))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In contrast, if the first argument is not ''(), the purpose statement requires
    that we replace ''() at the end of front with end:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (replace-eol-with ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 1 ''()) ''(a))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 1 ''(a)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (replace-eol-with
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 1 ''())) ''(a))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 2 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 1 ''(a))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The purpose statement and the examples suggest that as long as the second argument
    is a list, the function does not need to know anything about it. By implication,
    its template should be that of a list-processing function with respect to the
    first argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (replace-eol-with front end)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) front) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) front) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (replace-eol-with ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) front) end) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Let’s fill the gaps in the template following the fifth step of the design
    recipe. If front is ''(), replace-eol-with produces end. If front is not ''(),
    we must recall what the template expressions compute:'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29)  front)
    evaluates to the first item on the list, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (replace-eol-with  ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  front)  end)
    replaces the final '() in ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  front)
    with end.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stop! Use the table method to understand what these bullets mean for the running
    example.From here it is a small step to the complete definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (replace-eol-with front end)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) front) end]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) front)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            (replace-eol-with ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) front) end))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 387\. Design cross. The function consumes a list of symbols and a list
    of numbers and produces all possible ordered pairs of symbols and numbers. That
    is, when given '(a  b  c) and '(1  2), the expected result is '((a  1)  (a  2)  (b  1)  (b  2)  (c  1)  (c  2)).
    [![image](../Images/51e425850bdf7869f73be6ac42f8d9d0.jpg)](#%28counter._%28exercise._ex~3across%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '23.2Processing Two Lists Simultaneously: Case 2'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Functions that Produce Lists](part_two.html#%28part._sec~3alist-produce%29)
    presents the function wages*, which computes the weekly wages of a some workers
    given their work hours. It consumes a list of numbers—<wbr>representing the hours
    worked per week—<wbr>and produces a list of numbers—<wbr>the corresponding weekly
    wages. While the problem assumes that all employees received the same pay rate,
    even a small company pays its workers differentiated wages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we look at a slightly more realistic version. The function now consumes
    two lists: the list of hours worked and the list of corresponding hourly wages.
    We translate this revised problem into a revised header:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; multiplies the corresponding items on |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; hours and wages/h |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; assume the two lists are of equal length |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (wages*.v2 hours wages/h)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Making up examples is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (wages*.v2 ''() ''()) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (wages*.v2 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 5.65) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 40))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 226.0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (wages*.v2 ''(5.65 8.75) ''(40.0 30.0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ''(226.0 262.5)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As required, all three examples use lists of equal length.The assumption concerning
    the inputs can also be exploited for the development of the template. More concretely,
    the condition says that ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)  hours)
    is true when ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)  wages/h)
    is true, and furthermore, ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29)  hours)
    is true when ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29)  wages/h)
    is true. It is thus acceptable to use a template for one of the two lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (wages*.v2 hours wages/h)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) hours) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) hours)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) wages/h) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (wages*.v2 ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) hours) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) wages/h)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In the first [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause, both hours and wages/h are '(). Hence no selector expressions are needed.
    In the second clause, both hours and wages/h are constructed lists, which means
    we need four selector expressions. Finally, because the last two are lists of
    equal length, they make up a natural candidate for the natural recursion of wages*.v2.
  prefs: []
  type: TYPE_NORMAL
- en: The only unusual aspect of this template is that the recursive application consists
    of two expressions, both selector expressions for the two arguments. But, this
    idea directly follows from the assumption.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, it is a short step to a complete function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (wages*.v2 hours wages/h)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) hours) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        (weekly-wage ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) hours) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) wages/h))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        (wages*.v2 ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) hours) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) wages/h)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first example implies that the answer for the first [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause is ''(). In the second one, we have three values available:'
  prefs: []
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29)  hours),
    which represents the first number of weekly hours;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29)  wages/h),
    which is the first pay rate; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (wages*.v2  ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  hours)  ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  wages/h)),
    which according to the purpose statement, computes the list of weekly wages for
    the remainders of the two lists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we just need to combine these values to get the final answer. As suggested
    by the examples, we must compute the weekly wage for the first employee and construct
    a list from that wage and the rest of the wages:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) (weekly-wage ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) hours) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) wages/h))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       (wages*.v2 ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) hours) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) wages/h)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The auxiliary function weekly-wage uses the number of hours worked and the
    pay rate to compute the weekly wage for one worker:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the weekly wage from pay-rate and hours |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (weekly-wage pay-rate hours)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) pay-rate hours))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Which function do you need to use if you wish to compute the wages for
    one worker? Which function do you need to change if you wish to deal with income
    taxes?
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 388\. In the real world, wages*.v2 consumes lists of employee structures
    and lists of work records. An employee structure contains an employee’s name,
    social security number, and pay rate. A work record also contains an employee’s
    name and the number of hours worked in a week. The result is a list of structures
    that contain the name of the employee and the weekly wage.
  prefs: []
  type: TYPE_NORMAL
- en: Modify the program in this section so that it works on these realistic versions
    of data. Provide the necessary structure type definitions and data definitions.
    Use the design recipe to guide the modification process. [![image](../Images/8e9631fb9bd18f57f4c896841ab18db9.jpg)](#%28counter._%28exercise._ex~3aweekly-wage%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 389\. Design the zip function, which consumes a list of names, represented
    as strings, and a list phone numbers, also strings. It combines those equally
    long lists into a list of phone records:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) phone-record [name number])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A PhoneRecord is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-phone-record  [String](part_one.html#%28tech._string%29)  [String](part_one.html#%28tech._string%29)).
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Assume that the corresponding list items belong to the same person. [![image](../Images/7256dbbb0cf4566c1393ee2ea01920ab.jpg)](#%28counter._%28exercise._ex~3azip%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '23.3Processing Two Lists Simultaneously: Case 3'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is a third type of problem:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Given a list of symbols los and a natural number n, the function
    list-pick extracts the nth symbol from los; if there is no such symbol, it signals
    an error.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The question is how well the recipe works for the design of list-pick.While
    the data definition for a list of symbols is fairly familiar by now, recall the
    class of natural numbers from [Natural Numbers](part_two.html#%28part._sec~3anats%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; N is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29)  [N](part_two.html#%28tech._n%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Now we can proceed to the second step:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Symbol](part_two.html#%28tech._symbol%29)]
    [N](part_two.html#%28tech._n%29) -> [Symbol](part_two.html#%28tech._symbol%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts the nth symbol from l; |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; signals an error if there is no such symbol |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (list-pick l n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''a) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Both lists of symbols and natural numbers are classes with complex data definitions.
    This combination makes the problem non-standard, meaning we must pay attention
    to every detail for every step of the design recipe.At this point, we usually
    pick some input examples and figure out what the desired output is. We start with
    inputs for which the function has to work flawlessly: ''(a  b  c) and 2. For a
    list of three symbols and the index 2, list-pick must return a symbol. The question
    is whether it is ''b or ''c. In grade school, you would have counted 1, 2, and
    picked ''b without a first thought. But this is computer science, not grade school.
    Here people start counting from 0 meaning that ''c is an equally appropriate choice.
    And indeed, this is the choice we use:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (list-pick '(a b c) 2) 'c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that we have eliminated this fine point of list-pick, let’s look at the
    actual problem, the choice of inputs. The goal of the example step is to cover
    the input space as much as possible. We do so by picking one input per clause
    in the description of complex forms of data. Here this procedure suggests we pick
    at least two elements from each class because each data definition has two clauses.
    We choose '() and ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  'a  '())
    for the first argument, and 0 and 3 for the latter. Two choices per argument means
    four examples total; after all, there is no immediately obvious connection between
    the two arguments and no restriction in the signature.
  prefs: []
  type: TYPE_NORMAL
- en: 'As it turns out, only one of these pairings produces a proper result, the remaining
    ones choose a position that does not exist because the list doesn’t contain enough
    symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-error%29%29) (list-pick ''() 0) "list
    too short") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (list-pick ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ''a ''()) 0) ''a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-error%29%29) (list-pick ''() 3) "list
    too short") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The function is expected to signal an error, and we pick our favorite message
    here.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Put these fragments into DrRacket’s definition area and run the partial
    program.
  prefs: []
  type: TYPE_NORMAL
- en: 'The discussion on examples indicates that there are indeed four independent
    cases that we must inspect for the design of the function. One way to discover
    these cases is to arrange the conditions for each of the clauses into a two-dimensional
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  |  | ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)  l)
    |  | ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29)  l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29)  n  0)
    |  |  |  |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29)  n  0)
    |  |  |  |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The horizontal dimension of the table lists those questions that list-pick
    must ask about lists; the vertical dimension lists the questions about natural
    numbers. By this arrangement, we naturally get four squares, where each represents
    the case when both the condition on the horizontal and the vertical axis are true.Our
    table suggests that the [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    for the function template has four clauses. We can figure out the appropriate
    condition for each of these clauses by [and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)-ing
    the horizontal and vertical condition for each box in the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  |  | ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)  l)
    |  | ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29)  l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29)  n  0)
    |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29)  n  0)
    |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    outline of the template is merely a translation of this table into a conditional:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (list-pick l n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) l)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) l)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As always, the [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    expression allows us to distinguish the four possibilities and to focus on each
    individually as we add selector expressions to each [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (list-pick l n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) l))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)[...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) l))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first argument, l, is a list and we know that [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clauses for non-empty lists contain two selector expressions in a template. The
    second argument, n, is a natural number and the self-referential clause its data
    definition says that we need only one selector expression—<wbr>when ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29)  n  0).
    In those cases where either ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29)  n  0)
    or ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)  l)
    holds, the corresponding argument is atomic and there is no need for a selector
    expression.The final step of the template construction demands that we annotate
    the template with recursions where the results of selector expressions belong
    to the same class as the inputs. For this first example, we focus on the last
    [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause, which contains selector expressions for both arguments. It is, however,
    unclear how to form the natural recursions. If we disregard the purpose of the
    function, there are three possible recursions:'
  prefs: []
  type: TYPE_NORMAL
- en: (list-pick  ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  l)  ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29)  n))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (list-pick  l  ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29)  n))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (list-pick  ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  l)  n)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each one represents a feasible combination of the available expressions. Since
    we cannot know which one matters or whether all three matter, we move on to the
    next development stage.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Symbol](part_two.html#%28tech._symbol%29)]
    [N](part_two.html#%28tech._n%29) -> [Symbol](part_two.html#%28tech._symbol%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts the nth symbol from l; |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; signals an error if there is no such symbol |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (list-pick l n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) ''list-pick "list
    too short")] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) ''list-pick "list
    too short")] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) l)) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) l)) (list-pick ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 129: Indexing into a list'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Following the design recipe for the fifth step, let us analyze each [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause in the template and decide what a proper answer is:'
  prefs: []
  type: TYPE_NORMAL
- en: If ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)  ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29)  n  0)  ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)  l))
    holds, list-pick must pick the first symbol from an empty list, which is impossible.
    The answer must be an error signal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)  ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29)  n  0)  ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)  l))
    holds, list-pick is again asked to pick an symbol from an empty list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)  ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29)  n  0)  ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29)  l))
    holds, list-pick is supposed to produce the first symbol from l. The selector
    expression ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29)  l)
    is the answer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)  ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29)  n  0)  ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29)  l))
    holds, we must analyze what the available expressions compute. As we have seen,
    it is a good idea to work through an existing example for this step. We pick a
    shortened variant of the first example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (list-pick '(a b) 1) 'b)
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here is what the three natural recursions compute with these values:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (list-pick  '(b)  0) produces 'b;
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: (list-pick  '(a  b)  0) evaluates to 'a, the wrong answer;
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: and (list-pick  '(b)  1) signals an error.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: From this, we conclude that (list-pick  ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  l)  ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29)  n))
    computes the desired answer in the last [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Exercise 390\. Design the function tree-pick. The function consumes a tree
    of symbols and a list of directions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) branch [[left](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._left%29%29) [right](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._right%29%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A TOS is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Symbol](part_two.html#%28tech._symbol%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-branch  [TOS](#%28tech._to%29)  [TOS](#%28tech._to%29)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Direction is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [''](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._quote%29%29)[left](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._left%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [''](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._quote%29%29)[right](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._right%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A list of [Direction](#%28tech._direction%29)s is also called a path. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Clearly a [Direction](#%28tech._direction%29) tells the function whether to
    choose the left or the right branch in a non-symbolic tree. What is the result
    of the tree-pick function? Don’t forget to formulate a full signature. The function
    signals an error when given a symbol and a non-empty path. [![image](../Images/4c8267ac21fa87669c8fd6b4396890f8.jpg)](#%28counter._%28exercise._ex~3atree-pick%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 23.4Function Simplification
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The list-pick function in [figure 129](#%28counter._%28figure._fig~3alist-pick%29%29)
    is far more complicated than necessary. The first two [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clauses signal an error. That is, if either
  prefs: []
  type: TYPE_NORMAL
- en: ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alos))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alos))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'holds, the answer is an error. We can translate this observation into code:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (list-pick alos n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alos))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alos)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) ''list-pick "list
    too short")] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) alos)) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alos)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) alos))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (list-pick ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alos) ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: To simplify this function even more, we need to get acquainted with algebraic
    laws concerning Booleans:The equations, due to de Morgan, is called the law of
    distributivity.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) bexp1 a-bexp)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) bexp2 a-bexp))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  | == |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) bexp1 bexp2)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      a-bexp) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A similar law applies when the sub-expressions of the [and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)s
    are swapped. Applying these laws to list-pick yields this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (list-pick n alos)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0)) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alos))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) ''list-pick "list
    too short")] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) alos)) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alos)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) alos))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (list-pick ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alos) ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Now consider ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29)  ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29)  n  0)  ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29)  n  0)).
    It is always #true, because n belongs to [N](part_two.html#%28tech._n%29). Since
    ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)  #true  ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)  alos))
    is equivalent to ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)  alos),
    we can rewrite the function again:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (list-pick alos n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alos) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) ''list-pick "list
    too short")] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) alos)) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alos)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) alos))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (list-pick ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alos) ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This last definition is already significantly simpler than the definition in
    [figure 129](#%28counter._%28figure._fig~3alist-pick%29%29), but we can do even
    better than this. Compare the first condition in the latest version of list-pick
    with the second and third. Since the first [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause filters out all those cases when alos is empty, ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29)  alos)
    in the last two clauses is always going to evaluate to #true. If we replace the
    condition with #true and simplify the [and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)
    expressions again, we get a three-line version of list-pick'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; list-pick: [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Symbol](part_two.html#%28tech._symbol%29)]
    [N](part_two.html#%28tech._n%29)[>= 0] -> [Symbol](part_two.html#%28tech._symbol%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines the nth symbol from alos, counting from 0; |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; signals an error if there is no nth symbol |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (list-pick alos n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alos) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) ''list-pick "list
    too short")] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 0) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alos)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 0) (list-pick ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alos) ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 130: Indexing into a list, simplified'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 130](#%28counter._%28figure._fig~3alist-pick2%29%29) displays this
    simplified version of list-pick. While it is far simpler than the original, it
    is important to understand that we designed the original in a systematic manner
    and that we were able to transform the first into the second with well-established
    algebraic laws. We can therefore trust this simple version. If we try to find
    the simple versions of functions directly, we sooner or later fail to take care
    of a case in our analysis, and we are guaranteed to produce flawed programs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 391\. Design replace-eol-with using the strategy of [Processing Two
    Lists Simultaneously: Case 3](#%28part._sec~3atwo-inputs~3acase3%29). Start from
    the tests. Simplify the result systematically. [![image](../Images/15919e83e789e9e754c712db3adc2c03.jpg)](#%28counter._%28exercise._ex~3areplace-eol-simp%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 392\. Simplify the function tree-pick from [exercise 390](#%28counter._%28exercise._ex~3atree-pick%29%29).
    [![image](../Images/bea70961049e0c2c332d5c4163d57146.jpg)](#%28counter._%28exercise._ex~3atree-ref-simpl%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 23.5Designing Functions that Consume Two Complex Inputs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The proper approach to designing functions of two (or more) complex arguments
    is to follow the general recipe. You must conduct a data analysis and define the
    relevant classes of data. If the use of parametric definitions such as [List-of](part_three.html#%28tech._sim-dd._list._of%29)
    and short-hand examples such as ''(1  b  &) confuses you, expand them so that
    the constructors become explicit. Next you need a function signature and purpose.
    At this point, you can think ahead and decide which of the following three situations
    you are facing:'
  prefs: []
  type: TYPE_NORMAL
- en: If one of the parameters plays a dominant role, think of the other as an atomic
    piece of data as far as the function is concerned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In some cases the parameters range over the same class of values and must have
    the same size. For example, Two lists must have the same length, or two Web pages
    must have the same length and where one of them contains an embedded page, the
    other one does, too. If the two parameters have this equal status and the purpose
    suggests that they are processed in a synchronized manner, you choose one parameter,
    organize the function around it, and traverse the other in a parallel manner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there is no obvious connection between the two parameters, you must analyze
    all possible cases with examples. Then use this analysis to develop the template,
    especially the recursive parts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you decide that a function falls into the third category, develop a two-dimensional
    table to make sure that no case falls through the cracks. Let’s use a non-trivial
    pair of data definitions to explain this idea again:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; A LOD is one of: &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ''() &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [Direction](#%28tech._direction%29)  [LOD](#%28tech._lod%29))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; A TID is one of: &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  [Symbol](part_two.html#%28tech._symbol%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  (make-binary  [TID](#%28tech._tid%29)  [TID](#%28tech._tid%29))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ; –  (make-with  [TID](#%28tech._tid%29)  [Symbol](part_two.html#%28tech._symbol%29)  [TID](#%28tech._tid%29))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The left data definition is the usual list definition; the right one is a three-clause
    variant of [TOS](#%28tech._to%29). It uses two structure type definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) with [lft info rght])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) binary [lft rght])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Assuming the function consumes an [LOD](#%28tech._lod%29) and a [TID](#%28tech._tid%29),
    the table that you should come up with has this shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  |  | ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)  l)
    |  | ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29)  l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([symbol?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3f%29%29)  t)
    |  |  |  |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (binary?  t) |  |  |  |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (with?  t) |  |  |  |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Along the horizontal direction we enumerate the conditions that recognize the
    sub-classes for the first parameter, here [LOD](#%28tech._lod%29), and along the
    vertical direction we enumerate the conditions for the second parameter, [TID](#%28tech._tid%29).
  prefs: []
  type: TYPE_NORMAL
- en: The table guides the development of both the set of function examples and the
    function template. As explained, the examples must cover all possible cases, that
    is, there must be at least one example for each cell in the table. Similarly,
    the template must have one [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause per cell; its condition combines the horizontal and the vertical condition
    in an [and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29)
    expression. Each [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause, in turn, must contain all feasible selector expressions for both parameters.
    If one of the parameters is atomic, there is no need for a selector expression.
    Finally, you need to be aware of the feasible natural recursions. In general,
    all possible combinations of selector expressions (and optionally, atomic arguments)
    are candidates for a natural recursion. Because we can’t know which ones are necessary
    and which ones aren’t, we keep them in mind for the coding step.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, the design of multi-parameter functions is just a variation on the
    old design-recipe theme. The key idea is to translate the data definitions into
    a table that shows all feasible and interesting combinations. The development
    of function examples and the template exploit the table as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: '23.6Finger Exercises: Two Inputs'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 393\. [Figure 58](part_two.html#%28counter._%28figure._fig~3asets-vs-lists%29%29)
    presents two data definitions for finite sets. Design the union function for the
    representation of finite sets of your choice. It consumes two sets and produces
    one that contains the elements of both.
  prefs: []
  type: TYPE_NORMAL
- en: Design intersect for the same set representation. It consumes two sets and produces
    the set of exactly those elements that occur in both. [![image](../Images/c663430ab3e847f4f3fd7178d1be9077.jpg)](#%28counter._%28exercise._ex~3aset2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 394\. Design merge. The function consumes two lists of numbers, sorted
    in ascending order. It produces a single sorted list of numbers that contains
    all the numbers on both inputs lists. A number occurs in the output as many times
    as it occurs on the two input lists together. [![image](../Images/5da8e083f8974e12e3ac793f5d7785d2.jpg)](#%28counter._%28exercise._ex~3amerge%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 395\. Design take. It consumes a list l and a natural number n. It
    produces the first n items from l or all of l if it is too short.
  prefs: []
  type: TYPE_NORMAL
- en: Design drop. It consumes a list l and a natural number n. Its result is l with
    the first n items removed or just ’() if l is too short. [![image](../Images/9682c1b1baced75c2f4f21d44f8d6c64.jpg)](#%28counter._%28exercise._ex~3adrop-take%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A HM-Word is a [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Letter](part_two.html#%28tech._letter%29)
    or "_"] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  "_" represents a letter to be guessed |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [HM-Word](#%28tech._hm._word%29)  [N](part_two.html#%28tech._n%29) -> [String](part_one.html#%28tech._string%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; run a simplistic Hangman game, produce the current state |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (play the-pick time-limit)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) the-word  ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29) the-pick))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) the-guess ([make-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-list%29%29) (length the-word) "_"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [HM-Word](#%28tech._hm._word%29) -> [HM-Word](#%28tech._hm._word%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (do-nothing s) s)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [HM-Word](#%28tech._hm._word%29)  [KeyEvent](part_one.html#%28tech._keyevent%29)
    -> [HM-Word](#%28tech._hm._word%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (checked-compare current-status ke)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) ke LETTERS)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                 (compare-word the-word current-status ke) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                 current-status))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([implode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._implode%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([big-bang](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29) the-guess ; [HM-Word](#%28tech._hm._word%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        [[to-draw](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29) render-word]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        [[on-tick](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29) do-nothing 1 time-limit]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        [[on-key](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29)  checked-compare]))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [HM-Word](#%28tech._hm._word%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (render-word w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) ([implode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._implode%29%29) w) 22 "black"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 131: A simple hangman game'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 396\. Hangman is a well-known guessing game. One player picks a word,
    the other player gets told how many letters the word contains. The latter picks
    a letter and asks the first player whether and where this letter occurs in the
    chosen word. The game is over after an agreed-upon time or number of rounds.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 131](#%28counter._%28figure._fig~3ahangman-game%29%29) presents the
    essence of a time-limited version of the game. See [... Add Expressive Power](part_three.html#%28part._sec~3alocal-is-power%29)
    for why checked-compare is defined locally.'
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this exercise is to design compare-word, the central function. It
    consumes the word to be guessed, a word s that represents how much/little the
    guessing player has discovered, and the current guess. The function produces s
    with all "_" where the guess revealed a letter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have designed the function, run the program like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) LOCATION "/usr/share/dict/words") ; on
    OS X |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) AS-LIST ([read-lines](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-lines%29%29) DICTIONARY-LOCATION))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) SIZE (length DICTIONARY-AS-LIST))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (play ([list-ref](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list-ref%29%29) AS-LIST ([random](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._random%29%29) SIZE)) 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: See [figure 70](part_two.html#%28counter._%28figure._fig~3areading-a-dictionary%29%29)
    for an explanation. Enjoy and refine as desired! [![image](../Images/13e9464733bef922e29fee5189499c6e.jpg)](#%28counter._%28exercise._ex~3ahangman-list%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 397\. In a factory, employees punch time cards as they arrive in the
    morning and leave in the evening. Electronic time cards contain an employee number
    and record the number of hours worked per week. Employee records always contain
    the name of the employee, an employee number, and a pay rate.
  prefs: []
  type: TYPE_NORMAL
- en: Design wages*.v3. The function consumes a list of employee records and a list
    of time-card records. It produces a list of wage records, which contain the name
    and weekly wage of an employee. The function signals an error if it cannot find
    an employee record for a time card or vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Assumption There is at most one time card per employee number. [![image](../Images/3b6f98c4e4f2db22e9dada47f3789d04.jpg)](#%28counter._%28exercise._ex~3awage-general%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 398\. A linear combination is the sum of many linear terms, that is,
    products of variables and numbers. The latter are called coefficients in this
    context. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ![image](../Images/940c6daee1d5e04ea4a57c72a06b122c.jpg) |  | ![image](../Images/da4ed96675324965a77852b022d0d562.jpg)
    |  | ![image](../Images/90134c2bb98c8d387e95e68fd9633bd2.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In all examples, the coefficient of x is 5, that of y is 17, and the one for
    z is 3.
  prefs: []
  type: TYPE_NORMAL
- en: If we are given values for variables, we can determine the value of a polynomial.
    For example, if x = 10, the value of ![image](../Images/7bbe3a04a89c5df87b4048a8a52643cd.jpg)
    is 50; if x = 10 and y = 1, the value of ![image](../Images/169df914fc47068c0674792e7dc78daf.jpg)
    is 67; and if x = 10, y = 1, and z = 2, the value of ![image](../Images/2adea6e32ea9218139340238b7fb0618.jpg)
    is 73.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many different representations of linear combinations. We could,
    for example, represent them with functions. An alternative representation is a
    list of its coefficients. The above combinations would be represented as:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 5 17)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 5 17 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This choice of representation assumes a fixed order of variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Design value. The function consumes two equally long lists: a linear combination
    and a list of variable values. It produces the value of the combination for these
    values. [![image](../Images/ba205e2ba7bcdeb5535b7c76732e827e.jpg)](#%28counter._%28exercise._ex~3apolyn%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 399\. Louise, Jane, Laura, Dana, and Mary decide to run a lottery that
    assigns one gift recipient to each of them. Since Jane is a developer, they ask
    her to write a program that performs this task in an impartial manner. Of course,
    the program must not assign any of the sisters to herself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the core of Jane’s program:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; picks a random non-identity arrangement of names |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (gift-pick names)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (random-pick |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (non-same names (arrangements names)))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29) [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; returns all possible permutations of names |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; see [exercise 213](part_two.html#%28counter._%28exercise._ex~3apermutations%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (arrangements names)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It consumes a list of names and randomly picks one of those permutations that
    do not agree with the original list at any place.Your task is to design two auxiliary
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[NEList-of](part_three.html#%28tech._sim-dd._nelist._of%29) X] -> X |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; returns a random item from the list |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (random-pick l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]
    [[List-of](part_three.html#%28tech._sim-dd._list._of%29) [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; -> |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29) [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces the list of those lists in ll that do |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; not agree with names at any place |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (non-same names ll)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ll) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Recall that [random](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._random%29%29)
    picks a random number; see [exercise 99](part_one.html#%28counter._mix._%28exercise._mix-ufo-move%29%29).
    [![image](../Images/8575a613e87fd3ff0390b57f99c4b973.jpg)](#%28counter._%28exercise._ex~3aperm-xmas%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 400\. Design the function DNAprefix. The function takes two arguments,
    both lists of ''a, ''c, ''g, and ''t, symbols that occur in DNA descriptions.
    The first list is called a pattern, the second one a search string. The function
    returns #true if the pattern is identical to the initial part of the search string;
    otherwise it returns #false.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also design DNAdelta. This function is like DNAprefix but returns the first
    item in the search string beyond the pattern. If the lists are identical and there
    is no DNA letter beyond the pattern, the function signals an error. If the pattern
    does not match the beginning of the search string, it returns #false. The function
    must not traverse either of the lists more than once.'
  prefs: []
  type: TYPE_NORMAL
- en: Can DNAprefix or DNAdelta be simplified? [![image](../Images/1692c4c6e2ee0ddb52d45365054c12fd.jpg)](#%28counter._%28exercise._ex~3adna-prefix%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 401\. Design sexp=?, a function that determines whether two S-expressions
    are equal. For convenience, here is the data definition in condensed form:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; An S-expr (S-expression) is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Atom](#%28tech._atom%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [S-expr](#%28tech._s._expr%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Atom is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  [Symbol](part_two.html#%28tech._symbol%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Whenever you use [check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29),
    it uses a function like sexp=? to check whether the two arbitrary values are equal.
    If not, the check fails and [check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    reports it as such. [![image](../Images/355921c270967ca4d2c623ad80d4fee6.jpg)](#%28counter._%28exercise._ex~3atest-compare%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 402\. Re-read [exercise 354](#%28counter._%28exercise._ex~3absl-var-eval%29%29).
    Explain the reasoning behind our hint to think of the given expression as an atomic
    value at first. [![image](../Images/5de0e35304b89e59c20604bef6529587.jpg)](#%28counter._%28exercise._ex~3absl-var-eval-atomic%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '23.7Project: Database'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Many software applications use a database to keep track of data. Roughly speaking,
    a database is a table that comes with an explicitly stated organization rule.
    The former is the content, the latter isThis section pulls together knowledge
    from all four parts of the book. called a schema. [Figure 132](#%28counter._db._%28figure._fig~3adb-tables%29%29)
    shows two examples. Each table consists of two parts: the schema above the line
    and the content below.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s focus on the table on the left. It has three columns and four rows. Each
    column comes with a two-part rule:'
  prefs: []
  type: TYPE_NORMAL
- en: the rule in the left-most column says that the label of the column is “Name”
    and that every piece of data in this column is a [String](part_one.html#%28tech._string%29);
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the middle column is labeled “Age” and contains [Integer](part_one.html#%28tech._integer%29)s;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the label of the right-most one is “Present;” its values are [Boolean](part_one.html#%28tech._boolean%29).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop! Explain the table on the right in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Name &#124;  &#124; Age &#124;  &#124; Present &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; [String](part_one.html#%28tech._string%29) &#124;  &#124; [Integer](part_one.html#%28tech._integer%29)
    &#124;  &#124; [Boolean](part_one.html#%28tech._boolean%29) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Alice" &#124;  &#124; 35 &#124;  &#124; #true &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Bob" &#124;  &#124; 25 &#124;  &#124; #false &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Carol" &#124;  &#124; 30 &#124;  &#124; #true &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Dave" &#124;  &#124; 32 &#124;  &#124; #false &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Present &#124;  &#124; Description &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; [Boolean](part_one.html#%28tech._boolean%29) &#124;  &#124; [String](part_one.html#%28tech._string%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; #true &#124;  &#124; "presence" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; #false &#124;  &#124; "absence" &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 132: Databases as tables'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Computer scientists think of these tables as relations. The schema introduces
    terminology to refer to columns of a relation and to individual cells in a row.
    Each row relates a fixed number of values; the collection of all rows makes up
    the entire relation. In this terminology, the first row of the left table in [figure 132](#%28counter._db._%28figure._fig~3adb-tables%29%29)
    relates "Alice" to 35 and #true. Furthermore, the first cell of a row is called
    the “Name” cell, the second the “Age” cell, and the third one the “Present” cell.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we represent databases via structures and lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) db [schema content])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A DB is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-db  [Schema](#%28tech._db._schema%29)  [Content](#%28tech._db._content%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Schema is a [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Spec](#%28tech._db._spec%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Spec is a [[List](part_three.html#%28tech._sim-dd._list%29)  [Label](#%28tech._db._label%29)  [Predicate](#%28tech._db._predicate%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Label is a [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Predicate is a [[Any](part_one.html#%28tech._any%29) -> [Boolean](part_one.html#%28tech._boolean%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A (piece of) Content is a [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Row](#%28tech._db._row%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Row is [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Cell](#%28tech._db._cell%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Cell is [Any](part_one.html#%28tech._any%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; constraint cells do not contain functions |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; integrity constraint In (make-db  sch  con), |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; for every row in con, |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; (I1) its length is the same as sch''s, and |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; (I2) its ith [Cell](#%28tech._db._cell%29) satisfies the ith [Predicate](#%28tech._db._predicate%29)
    in sch |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Translate the databases from [figure 132](#%28counter._db._%28figure._fig~3adb-tables%29%29)
    into the chosen data representation. Note that the content of the tables already
    uses ISL+ data.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) school-schema
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   `(("Name"    ,[string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ("Age"     ,[integer?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._integer~3f%29%29))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ("Present" ,[boolean?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._boolean~3f%29%29))))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) presence-schema
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   `(("Present"     ,[boolean?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._boolean~3f%29%29))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ("Description" ,[string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29))))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) school-content
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   `(("Alice" 35 #true) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ("Bob"   25 #false) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ("Carol" 30 #true) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     ("Dave"  32 #false))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) presence-content
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''((#true  "presence") &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (#false "absence"))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) school-db
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (make-db school-schema &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;            school-content)) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) presence-db
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (make-db presence-schema &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;            presence-content)) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 133: Databases as ISL+ data'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 133](#%28counter._db._%28figure._fig~3adb-isl%29%29) shows how to represent
    the two tables in [figure 132](#%28counter._db._%28figure._fig~3adb-tables%29%29)
    as [DB](#%28tech._db._db%29)s. Its left-hand side represents the schema, the content,
    and the database from the left-hand side table in [figure 132](#%28counter._db._%28figure._fig~3adb-tables%29%29);
    its right part corresponds to the right-hand side table. For succinctness, the
    examples use the [quasiquote](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._quasiquote%29%29)
    and [unquote](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._unquote%29%29)
    notation. Recall that it allows the inclusion of a value such as [boolean?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._boolean~3f%29%29)
    in an otherwise quoted list. If you feel uncomfortable with this notation, reformulate
    these examples with [list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29).'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 403\. A [Spec](#%28tech._db._spec%29) combines one [Label](#%28tech._db._label%29)
    and one [Predicate](#%28tech._db._predicate%29) into a list. While this choice
    is perfectly acceptable for a mature programmer, it violates our guideline of
    using a structure type when the represented information consists of a fixed number
    of pieces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an alternative data representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) spec [label predicate])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; Spec is a structure: (make-spec  [Label](#%28tech._db._label%29)  [Predicate](#%28tech._db._predicate%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Use this alternative definition to represent the databases from [figure 132](#%28counter._db._%28figure._fig~3adb-tables%29%29).
    [![image](../Images/360e8207cb04d09fcc51cc2f9bd8d138.jpg)](#%28counter._db._%28exercise._ex~3adb-choice-of-rep%29%29)Integrity
    Checking The use of databases critically relies on their integrity. Here “integrity”
    refers to the constraints (I1) and (I2) from the data definition. Checking database
    integrity is clearly a task for a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [DB](#%28tech._db._db%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; do all rows in db satisfy (I1) and (I2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (integrity-check school-db) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (integrity-check presence-db) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (integrity-check db)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The wording of the two constraints suggests that some function has to produce
    #true for every row in the content of the given database. Expressing this idea
    in code calls for a use of [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    on the content of db:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (integrity-check db)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Row](#%28tech._db._row%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (row-integrity-check row)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29) row-integrity-check (db-content db))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Following the design recipe for the use of existing abstractions, the template
    introduces the auxiliary function via a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    definition.The design of row-integrity-check starts from this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Row](#%28tech._db._row%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; does row satisfy (I1) and (I2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (row-integrity-check row)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As always, the goal of formulating a purpose statement is to understand the
    problem. Here it says that the function checks two conditions. When two tasks
    are involved, our design guidelines call for functions and the combination of
    their results:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) (length-of-row-check row)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      (check-every-cell row)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Add these functions to your wish list; their names convey their purpose.Before
    we design these functions, we must contemplate whether we can compose existing
    primitive operations to compute the desired value. For example, we know that (length  row)
    counts how many cells are in row. Pushing a bit more in this direction, we clearly
    want
  prefs: []
  type: TYPE_NORMAL
- en: ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) (length row) (length (db-schema db)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This condition checks that the length of row is equal to that of db’s schema.Similarly,
    check-every-cell calls for checking that some function produces #true for every
    cell in the row. Once again, it looks like [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    might be called for:'
  prefs: []
  type: TYPE_NORMAL
- en: ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29) cell-integrity-check row)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The purpose of cell-integrity-check is obviously to check constraint (I2), that
    is,
  prefs: []
  type: TYPE_NORMAL
- en: whether “the ith [Cell](#%28tech._db._cell%29) satisfies the ith [Predicate](#%28tech._db._predicate%29)
    in db’s schema.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And now we are stuck because this purpose statement refers to the relative position
    of the given cell in row. The point of [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    is, however, to apply cell-integrity-check to every cell uniformly.When you are
    stuck, you must work through examples. For auxiliary or [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    functions, it’s best to derive these examples from the ones for the main function.
    The first example for integrity-check asserts that school-content satisfies the
    integrity constraints. Clearly all rows in school-content have the same length
    as school-schema. The question is why a row such as
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "Alice" 35 #true)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'satisfies the predicates in the corresponding schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "Name"    [string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "Age"     [integer?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._integer~3f%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "Present" [boolean?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._boolean~3f%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The answer is that all three application of the three predicates to the respective
    cells yields true:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29) "Alice")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([integer?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._integer~3f%29%29) 35)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([boolean?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._boolean~3f%29%29) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #true |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: From here, it is just a short step to see that the function must process these
    two lists—<wbr>db’s schema and the given row—<wbr>in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 404\. Design the function andmap2. It consumes a function f from two
    values to [Boolean](part_one.html#%28tech._boolean%29) and two equally long lists.
    Its result is also a [Boolean](part_one.html#%28tech._boolean%29). Specifically,
    it applies f to pairs of corresponding values from the two lists, and if f always
    produces #true, andmap2 produces #true, too. Otherwise, andmap2 produces #false.
    In short, andmap2 is like [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    but for two lists. [![image](../Images/a7969232ddd87663bd3b738070c22a2f.jpg)](#%28counter._db._%28exercise._ex~3aandmap2%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Solve [exercise 404](#%28counter._db._%28exercise._ex~3aandmap2%29%29)
    before reading on.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we had andmap2 in ISL+, checking the second condition on row would be straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (andmap2 ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (s c) [([second](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._second%29%29) s) c])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (db-schema db) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          row) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The given function consumes a [Spec](#%28tech._db._spec%29) s from db’s schema,
    extracts the predicate in the second position, and applies it to the given [Cell](#%28tech._db._cell%29)
    c. Whatever the predicate returns is the result of the [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Stop again! Explain [([second](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._second%29%29)  s)  c].
  prefs: []
  type: TYPE_NORMAL
- en: 'As it turns out, [andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29)
    in ISL+ is already like andmap2:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (integrity-check db)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Row](#%28tech._db._row%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; does row satisfy (I1) and (I2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (row-integrity-check row)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) (length row)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                     (length (db-schema db))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (s c) [([second](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._second%29%29) s) c])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                          (db-schema db) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                          row)))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29) row-integrity-check (db-content db))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop a last time! Develop a test for which integrity-check must fail.Note on
    Expression Hoisting Our definition of integrity-check suffers from several problems,
    some visible, some invisible. Clearly, the function extracts db’s schema twice.
    With the existing [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    definition it is possible to introduce a definition and avoid this duplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (integrity-check.v2 db)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) schema (db-schema db))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Row](#%28tech._db._row%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; does row satisfy (I1) and (I2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (row-integrity-check row)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) (length row) (length schema))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (s c) [([second](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._second%29%29) s) c])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                          schema |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                          row)))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29) row-integrity-check (db-content db))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: We know from [Local Definitions](part_three.html#%28part._sec~3alocal-definitions%29)
    that lifting such an expression may shorten the time needed to run the integrity
    check. Like the definition of inf in [figure 96](part_three.html#%28counter._%28figure._fig~3alocal-performance%29%29),
    the original version of integrity-check extracts the schema from db for every
    single row, even though it obviously stays the same.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (integrity-check.v3 db)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) schema  (db-schema db))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) content (db-content db))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) width   (length schema))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Row](#%28tech._db._row%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; does row satisfy (I1) and (I2) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (row-integrity-check row)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) (length row) width)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (s c) [([second](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._second%29%29) s) c])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                          schema |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                          row)))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([andmap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._andmap%29%29) row-integrity-check content)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 134: The result of systematic expression hoisting'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Terminology Computer scientists speak of “hoisting an expression.”
  prefs: []
  type: TYPE_NORMAL
- en: In a similar vein, the row-integrity-check function determines the length of
    db’s schema every single time it is called. The result is always the same. Hence,
    if we are interested in improving the performance of this function, we can use
    a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    definition to name the width of the database content once and for all. [Figure 134](#%28counter._db._%28figure._fig~3ahoisted%29%29)
    displays the result of hoisting (length  schema) out of the row-integrity-check.
    For readability, this final definition also names the content field of db. End
  prefs: []
  type: TYPE_NORMAL
- en: 'Projections and selections Programs need to extract data from databases. One
    kind of extraction is to select content, which is explained in [Real-world Data:
    iTunes](part_two.html#%28part._itunes-data._sec~3aitunes%29). The other kind of
    extraction produces a reduced database; it is dubbed projection. More specifically,
    a projection constructs a database by retaining only certain columns from a given
    database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The description of a projection suggests the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [DB](#%28tech._db._db%29) [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Label](#%28tech._db._label%29)]
    -> [DB](#%28tech._db._db%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; retain a column from db if its label is in labels |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (project db labels) (make-db ''() ''()))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Given the complexity of a projection, it is best to work through an example
    first. Say we wish to eliminate the age column from the database on the left in
    [figure 132](#%28counter._db._%28figure._fig~3adb-tables%29%29). Here is what
    this transformation looks like in terms of tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '| the original database |  | ... eliminating the “Age” column |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Name &#124;  &#124; Age &#124;  &#124; Present &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; [String](part_one.html#%28tech._string%29) &#124;  &#124; [Integer](part_one.html#%28tech._integer%29)
    &#124;  &#124; [Boolean](part_one.html#%28tech._boolean%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Alice" &#124;  &#124; 35 &#124;  &#124; #true &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Bob" &#124;  &#124; 25 &#124;  &#124; #false &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Carol" &#124;  &#124; 30 &#124;  &#124; #true &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Dave" &#124;  &#124; 32 &#124;  &#124; #false &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Name &#124;  &#124; Present &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; [String](part_one.html#%28tech._string%29) &#124;  &#124; [Boolean](part_one.html#%28tech._boolean%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Alice" &#124;  &#124; #true &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Bob" &#124;  &#124; #false &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Carol" &#124;  &#124; #true &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Dave" &#124;  &#124; #false &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A natural way to articulate the example as a test reuses [figure 133](#%28counter._db._%28figure._fig~3adb-isl%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) projected-content
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   `(("Alice" #true) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ("Bob"   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ("Carol" #true) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ("Dave"  #false))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) projected-schema
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   `(("Name" ,[string?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3f%29%29)) ("Present" ,[boolean?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._boolean~3f%29%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) projected-db
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-db projected-schema projected-content)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (project school-db ''("Name" "Present"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               projected-db) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! What is wrong with this test case?
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (project db labels)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) schema  (db-schema db))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) content (db-content db))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Spec](#%28tech._db._spec%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; does this spec belong to the new schema |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (keep? c) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Row](#%28tech._db._row%29) -> [Row](#%28tech._db._row%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; retains those columns whose name is in labels |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (row-project row) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (make-db ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) keep? schema)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|              ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) row-project content)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 135: A template for project'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you run the above code in DrRacket, you get the error message
  prefs: []
  type: TYPE_NORMAL
- en: first argument of equality cannot be a function
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'before DrRacket can even figure out whether the test succeeds. Recall from
    [Functions Are Values](part_three.html#%28part._sec~3afunctions-as-values%29)
    that functions are infinitely large objects and it is impossible to ensure that
    two functions always produce the same result when applied to the same arguments.
    We therefore weaken the test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (db-content (project school-db ''("Name" "Present"))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   projected-content) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'For the template, we again re-use existing abstractions; see [figure 135](#%28counter._db._%28figure._fig~3aproject-template%29%29).
    The [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression defines two functions: one for use with [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    for narrowing down the schema of the given database and the other for use with
    [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    for thinning out the content. In addition, the function again extracts and names
    the schema and the content from the given database.'
  prefs: []
  type: TYPE_NORMAL
- en: Before we turn to the wish list, let’s step back and study the decision to go
    with two re-uses of existing abstraction. The signature tells us that the function
    consumes a structure and produces an element of [DB](#%28tech._db._db%29), so
  prefs: []
  type: TYPE_NORMAL
- en: '| ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) schema (db-schema db))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) content (db-content db)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-db [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) schema [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) content [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'is clearly called for. It is also straightforward to see that the new schema
    is created from the old schema and the new content from the old content. Furthermore,
    the purpose statement of project calls for the retention of only those labels
    that are mentioned in the second argument. Hence, [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    is the correct way to narrow down the given schema. In contrast, the rows per
    se stay except that each of them loses some cells. Thus, [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    is the proper way of processing content.Now we can turn to the design of the two
    auxiliary functions. The design of keep? is straightforward. Here is the complete
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Spec](#%28tech._db._spec%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; does this spec belong to the new schema |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (keep? c)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) c) labels))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The function is applied to a [Spec](#%28tech._db._spec%29), which combines
    a [Label](#%28tech._db._label%29) and a [Predicate](#%28tech._db._predicate%29)
    in a list. If the former belongs to labels, the given [Spec](#%28tech._db._spec%29)
    is kept.For the design of row-project, the goal is to keep those [Cell](#%28tech._db._cell%29)s
    in each [Row](#%28tech._db._row%29) of content whose name is a member of the given
    labels. Let’s work through the above example. The four rows are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "Alice" 35 #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "Bob"   25 #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "Carol" 30 #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "Dave"  32 #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Each of these rows is as long as school-schema:'
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "Name" "Age" "Present")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The names in the schema determine the names of the cells in the given rows.
    Hence, row-project must keep the first and third cell of each row because it is
    their names that are in the given labels.Since [Row](#%28tech._db._row%29) is
    defined recursively, this matching process between the content of the [Cell](#%28tech._db._cell%29)s
    and their names calls for a recursive helper function that row-project can apply
    to the content and the labels of the cells. Let’s specify it as a wish:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Row](#%28tech._db._row%29) [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Label](#%28tech._db._label%29)]
    -> [Row](#%28tech._db._row%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; retain those cells whose namea is in labels |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (row-filter row names) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Using this wish, row-project is a one-liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (row-project row)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (row-filter row ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) [first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) schema)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    expression extracts the names of the cells.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 405\. Design the function row-filter. Construct examples for row-filter
    from the examples for project.
  prefs: []
  type: TYPE_NORMAL
- en: Assumption The given database passes an integrity check, meaning each row is
    as long as the schema and thus its list of names. [![image](../Images/c9f50a37bd81e8098f09e3f5b39d8115.jpg)](#%28counter._db._%28exercise._ex~3arow-filter%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 136](#%28counter._db._%28figure._fig~3adb-project%29%29) puts all the
    pieces together. The function project has the suffix .v1 because it calls for
    some improvement. The following exercises ask you to implement some of those.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (project.v1 db labels)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) schema  (db-schema db))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) content (db-content db))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Spec](#%28tech._db._spec%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; does this column belong to the new schema |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (keep? c)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) c) labels))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Row](#%28tech._db._row%29) -> [Row](#%28tech._db._row%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; retains those columns whose name is in labels |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (row-project row)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             (row-filter row ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) [first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) schema)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Row](#%28tech._db._row%29) [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Label](#%28tech._db._label%29)]
    -> [Row](#%28tech._db._row%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; retain those cells whose name is in labels |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (row-filter row names)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) labels) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) names) labels)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                    ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) row)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                      (row-filter ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) row) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) names)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                    (row-filter ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) row) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) names)))])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (make-db ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) keep? schema)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|              ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) row-project content))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 136: Database projection'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 406\. The row-project function re-computes the labels for every row
    of the database’s content. Does the result differ from call to call? If not, hoist
    the expression. [![image](../Images/9f33344851961578bc92eded296f13d0.jpg)](#%28counter._db._%28exercise._ex~3arow-project-hoist%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 407\. Re-design row-filter using [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29).
    Once you have done so, you may merge row-project and row-filter into a single
    function. Hint The [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    function in ISL+ may consume two lists and process them in parallel. [![image](../Images/241a93ebbb411cf98c70eb201268e8fe.jpg)](#%28counter._db._%28exercise._ex~3arow-filter%2Ffold%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: The final observation is that row-project checks the membership of a label in
    labels for every single cell. For the cells of the same column in different rows,
    the result is going to be the same. Hence it also makes sense to hoist this computation
    out of the function.
  prefs: []
  type: TYPE_NORMAL
- en: This form of hoisting is somewhat more difficult than plain expression hoisting.
    We basically wish to pre-compute the result of
  prefs: []
  type: TYPE_NORMAL
- en: ([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) label labels)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'for all rows and pass the results into the function instead of the list of
    labels. That is, we replace the list of labels with a list of [Boolean](part_one.html#%28tech._boolean%29)s
    that indicate whether the cell in the corresponding position is to be kept. Fortunately,
    computing those [Boolean](part_one.html#%28tech._boolean%29)s is just another
    application of keep? on the schema:'
  prefs: []
  type: TYPE_NORMAL
- en: ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) keep? schema)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Instead of keeping some [Spec](#%28tech._db._spec%29)s from the given schema,
    and throwing away the others, this expression just collects the decisions.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (project db labels)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) schema  (db-schema db))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) content (db-content db))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Spec](#%28tech._db._spec%29) -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; does this column belong to the new schema |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (keep? c)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) c) labels))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; [Row](#%28tech._db._row%29) -> [Row](#%28tech._db._row%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; retain those columns whose name is in labels |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (row-project row)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (cell m c) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) m ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) cell c) c))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                    ''() |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                    row |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                    mask)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) mask ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) keep? schema)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (make-db ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) keep? schema)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|              ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) row-project content))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 137: Database projection'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 137](#%28counter._db._%28figure._fig~3adb-project2%29%29) shows the
    final version of project and integrates the solutions for the preceding exercises.
    It also uses [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    to extract and name schema and content, plus keep? for checking whether the label
    in some [Spec](#%28tech._db._spec%29) is worth keeping. The remaining two definitions
    introduce mask, which stands for the list of [Boolean](part_one.html#%28tech._boolean%29)s
    discussed above, and the revised version of row-project. The latter uses [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    to process the given row and mask in parallel.'
  prefs: []
  type: TYPE_NORMAL
- en: Compare this revised definition of project with project.v1 in [figure 136](#%28counter._db._%28figure._fig~3adb-project%29%29).
    The final definition is both simpler and faster than the original version. Systematic
    design combined with careful revisions pay off; test suites ensure that revisions
    don’t mess up the functionality of the program.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 408\. Design the function select. It consumes a database, a list of
    labels, and a predicate on rows. The result is a list of rows that satisfy the
    given predicate, projected down to the given set of labels. [![image](../Images/127764d8d3ec3bbb4d54b2cd506db758.jpg)](#%28counter._db._%28exercise._ex~3adb-select%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 409\. Design reorder. The function consumes a database db and list
    lol of [Label](#%28tech._db._label%29)s. It produces a database like db but with
    its columns reordered according to lol.
  prefs: []
  type: TYPE_NORMAL
- en: Hint Read up on [list-ref](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list-ref%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: At first assume that lol consists exactly of the labels of db’s columns. Once
    you have completed the design, study what has to be changed if lol contains fewer
    labels than there are columns and strings that are not labels of column in db.
    [![image](../Images/989c577e83d3fbbe7ff5a14dfc979e8d.jpg)](#%28counter._db._%28exercise._ex~3adb-reorder%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 410\. Design the function db-union, which consumes two databases with
    the exact same schema and produces a new database with this schema and the joint
    content of both. The function must eliminate rows with the exact same content.
  prefs: []
  type: TYPE_NORMAL
- en: Assume that the schemas agree on the predicates for each column. [![image](../Images/ff22e4f8233d75d8cb612ddaae32e9ca.jpg)](#%28counter._db._%28exercise._ex~3adb-union%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 411\. Design join, a function that consumes two databases: db-1 and
    db-2. The schema of db-2 starts with the exact same [Spec](#%28tech._db._spec%29)
    that the schema of db-1 ends in. The function creates a database from db-1 by
    replacing the last cell in each row with the translation of the cell in db-2.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example. Take the databases in [figure 132](#%28counter._db._%28figure._fig~3adb-tables%29%29).
    The two satisfy the assumption of this exercises, that is, the last [Spec](#%28tech._db._spec%29)
    in the schema of the first is equal to the first [Spec](#%28tech._db._spec%29)
    of the second. Hence it is possible to join them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name |  | Age |  | Description |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [String](part_one.html#%28tech._string%29) |  | [Integer](part_one.html#%28tech._integer%29)
    |  | [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Alice" |  | 35 |  | "presence" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Bob" |  | 25 |  | "absence" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Carol" |  | 30 |  | "presence" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Dave" |  | 32 |  | "absence" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Its translation maps #true to "presence" and #false to "absence".'
  prefs: []
  type: TYPE_NORMAL
- en: Hints (1) In general, the second database may “translate” a cell to a row of
    values not just one. Modify the example by adding additional terms to the row
    for "presence" and "absence".
  prefs: []
  type: TYPE_NORMAL
- en: '(2) It may also “translate” a cell to several rows, in which case the process
    adds several rows to the new database. Here is a second example, a slightly different
    pair of databases from those in [figure 132](#%28counter._db._%28figure._fig~3adb-tables%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Name &#124;  &#124; Age &#124;  &#124; Present &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; [String](part_one.html#%28tech._string%29) &#124;  &#124; [Integer](part_one.html#%28tech._integer%29)
    &#124;  &#124; [Boolean](part_one.html#%28tech._boolean%29) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Alice" &#124;  &#124; 35 &#124;  &#124; #true &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Bob" &#124;  &#124; 25 &#124;  &#124; #false &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Carol" &#124;  &#124; 30 &#124;  &#124; #true &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; "Dave" &#124;  &#124; 32 &#124;  &#124; #false &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; Present &#124;  &#124; Description &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; [Boolean](part_one.html#%28tech._boolean%29) &#124;  &#124; [String](part_one.html#%28tech._string%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; #true &#124;  &#124; "presence" &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; #true &#124;  &#124; "here" &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; #false &#124;  &#124; "absence" &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; #false &#124;  &#124; "there" &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Joining the left database with the one on the right yields a database with
    eight rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name |  | Age |  | Description |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [String](part_one.html#%28tech._string%29) |  | [Integer](part_one.html#%28tech._integer%29)
    |  | [String](part_one.html#%28tech._string%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Alice" |  | 35 |  | "presence" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Alice" |  | 35 |  | "here" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Bob" |  | 25 |  | "absence" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Bob" |  | 25 |  | "there" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Carol" |  | 30 |  | "presence" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Carol" |  | 30 |  | "here" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Dave" |  | 32 |  | "absence" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| "Dave" |  | 32 |  | "there" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: (3) Use iterative refinement to solve the problem. For the first iteration,
    assume that a “translation” finds only one row per cell. For the second one, drop
    the assumption.
  prefs: []
  type: TYPE_NORMAL
- en: Note on Assumptions This exercise and the entire section mostly rely on informally
    stated assumptions about the given databases. Here, the design of join assumes
    that “the schema of db-2 starts with the exact same [Spec](#%28tech._db._spec%29)
    that the schema of db-1 ends in.” In reality, database functions must be checked
    functions in the spirit of [Input Errors](part_one.html#%28part._sec~3ainput-errors%29).
    Designing checked-join would be impossible for you, however. A comparison of the
    last [Spec](#%28tech._db._spec%29) in the schema of db-1 with the first one in
    db-2 calls for a comparison of functions. For practical solutions, see a text
    on databases. [![image](../Images/30cbedde5a204c345e2c3c8aee0f4260.jpg)](#%28counter._db._%28exercise._ex~3adb-join%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 24Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This fourth part of the book is about the design of functions that process
    data whose description requires many intertwined definitions. These forms of data
    show up everywhere in the real world, from your computer’s local file system to
    the world wide web and geometric shapes used in animated movies. After working
    through this part of the book carefully, you know that the design recipe scales
    to these forms of data, too:'
  prefs: []
  type: TYPE_NORMAL
- en: When the description of program data calls for several mutually referential
    data definitions, the design recipe calls for the simultaneous development of
    templates, one per data definition. If a data definition A refers to a data definition
    B, then the template function-for-A refers to function-for-B in the exact same
    place and manner. Otherwise the design recipes work as before, function for function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a function has to process two types of complex data, you need to distinguish
    three cases. First, the function may deal with one of the arguments as if it were
    atomic. Second, the two arguments are expected to have the exact same structure,
    and the function traverses them in a completely parallel manner. Third, the function
    may have to deal with all possible combinations separately. In this case, you
    make a two-dimensional table that along one dimension enumerates all kinds of
    data from one data definition and along the other one deals with the second kind
    of data. Finally you use the table’s cells to formulate conditions and answers
    for the various cases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This part of the book deals with functions on two complex arguments. If you
    ever encounter one of those rare cases where a function receives three complex
    pieces of data, you know you need (to imagine) a three-dimensional table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have now seen all forms of structural data that you are likely to encounter
    over the course of your career, though the details will differ. If you are ever
    stuck, remember the design recipe; it will get you started
  prefs: []
  type: TYPE_NORMAL
- en: 'Intermezzo: The Nature of Numbers'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When it comes to numbers, programming languages mediate the gap between the
    underlying hardware and true mathematics. The typical computer hardware represents
    numbers with fixed-size chunks of data;These chunks are called; bits, bytes, and
    words. they also come with processors that work on just such chunks. In paper-and-pencil
    calculations, we don’t worry about how many digits we process; in principle, we
    can deal with numbers that consist of one digit, 10 digits, or 10,000 digits.
    Thus, if a programming language uses the numbers from the underlying hardware,
    its calculations are as efficient as possible. If it sticks to the numbers we
    know from mathematics, it must translate those into chunks of hardware data and
    back—<wbr>and these translations cost time. Because of this cost, most creators
    of programming languages adopt the hardware-based choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'This intermezzo explains the hardware representation of numbers as an exercise
    in data representation. Concretely, the first subsection introduces a concrete
    fixed-size data representation for numbers, discusses how to map numbers into
    this representation, and hints at how calculations work on such numbers. The second
    and third section illustrate the two most fundamental problems of this choice:
    arithmetic overflow and underflow, respectively. The last one sketches how arithmetic
    in the teaching languages works; its number system generalizes what you find in
    most of today’s programming languages. The final exercises show how bad things
    can get when programs compute with numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: Fixed-size Number Arithmetic
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Suppose we can use four digits to represent numbers. If we represent natural
    numbers, one representable range is [0,10000). For real numbers, we could pick
    10,000 fractions between 0 and 1 or 5,000 between 0 and 1 and another 5,000 between
    1 and 2, etc. In either case, four digits can represent at most 10,000 numbers
    for some chosen interval, while the number line for this interval contains an
    infinite number of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: The common choice for hardware numbers is to use so-called scientific notation,
    meaning numbers are represented with two parts:For pure scientific notation, the
    base is between 0 and 9; we ignore this constraint.
  prefs: []
  type: TYPE_NORMAL
- en: a mantissa, which is a base number, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: an exponent, which is used to determine a 10-based factor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expressed as a formula, we write numbers as
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/0fb1827aee464b00b01dae74e0d9c813.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: where m is the mantissa and e the exponent. For example, one representation
    of 1200 with this scheme is
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/b83849e975bbd3bfb35d4b3dd82dd5a9.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: another one is
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/9aaf8bdd085317d12c95ae0d1819fd42.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'In general, a number has several equivalents in this representation.We can
    also use negative exponents, which adds fractions at the cost of one extra piece
    of data: the sign of the exponent. For example,'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/b0aa2a10add8c08200282fbe7b9375a2.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: stands for
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/d4374797f02251dc2b0b58e988ee3017.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: To use a form of mantissa-exponent notation for our problem, we must decide
    how many of the four digits we wish to use for the representation of the mantissa
    and how many for the exponent. Here we use two for each plus a sign for the exponent;
    other choices are possible. Given this decision, we can still represent 0 as
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/7bc7093fa80f1bf1e8612682fe223bcf.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The maximal number we can represent is
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/61a57152773d1efc521eec94ba33940d.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: which is 99 followed by 99 0’s. Using the negative exponents, we can add fractions
    all the way down to
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/a2349fa1331772220097f3485a8fb46e.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: which is the smallest representable number. In sum, using scientific notation
    with four digits (and a sign), we can represent a vast range of numbers and fractions,
    but this improvement comes with its own problems.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29)  [Number](part_one.html#%28tech._number%29)  [N](part_two.html#%28tech._n%29)
    -> [Inex](#%28tech._inex%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; make an instance of [Inex](#%28tech._inex%29) after checking the arguments
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._define%29%29) (create-inex m s e)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._and%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._~3c~3d%29%29) 0 m 99) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._~3c~3d%29%29) 0 e 99) ([or](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._or%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._~3d%29%29) s 1) ([=](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._~3d%29%29) s -1)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      (make-inex m s e)] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._error%29%29) "bad
    values given")])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Inex](#%28tech._inex%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; convert an [inex](#%28tech._inex%29) into its numeric equivalent |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._define%29%29) (inex->number an-inex)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._%2A%29%29) (inex-mantissa an-inex)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([expt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._expt%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        10 ([*](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._%2A%29%29) (inex-sign an-inex) (inex-exponent an-inex)))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 138: Functions for inexact representations'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To understand the problems, it is best to make these choices concrete with
    a data representation in ISL+ and by running some experiments. Let’s represent
    a fixed-size number with a structure that has three fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._define-struct%29%29) inex [mantissa sign exponent])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Inex is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-inex  [N99](#%28tech._n99%29)  [S](#%28tech._%29)  [N99](#%28tech._n99%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An S is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  -1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An N99 is an [N](part_two.html#%28tech._n%29) between 0 and 99 (inclusive).
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Because the conditions on the fields of an [Inex](#%28tech._inex%29) are so
    stringent, we define the function create-inex to instantiate this structure type
    definition; see [figure 138](#%28counter._%28figure._fig~3ainexact-construct%29%29).
    The figure also defines inex->number, which turns [Inex](#%28tech._inex%29)es
    into numbers using the above formula.Let’s translate the above example, 1200,
    into our data representation:'
  prefs: []
  type: TYPE_NORMAL
- en: (create-inex 12 1 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Representing 1200 as ![image](../Images/bb117fcd1bd4ff40d8b82683589ea0b0.jpg)
    is illegal, however, according to our [Inex](#%28tech._inex%29) data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (create-inex 120 1 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| bad values given |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'For other numbers, though, we can find two [Inex](#%28tech._inex%29) equivalents.
    One example is 5e-19:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (create-inex 50 -1 20) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (make-inex 50 -1 20) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (create-inex 5 -1 19) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (make-inex 5 -1 19) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Use inex->number to confirm the equivalence of these two numbers.With create-inex
    it is also easy to delimit the range of representable numbers, which is actually
    quite small for many applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._define%29%29) MAX-POSITIVE (create-inex 99 1 99))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._define%29%29) MIN-POSITIVE (create-inex 1 -1 99))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The question is which of the real numbers in the range between 0 and MAX-POSITIVE
    can be translated into an [Inex](#%28tech._inex%29). In particular, any positive
    number less than
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/e71d0c432abc8ebb6ae335b3194b88cb.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: has no equivalent [Inex](#%28tech._inex%29). Similarly, the representation has
    gaps in the middle. For example, the immediate successor of
  prefs: []
  type: TYPE_NORMAL
- en: (create-inex 12 1 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: is
  prefs: []
  type: TYPE_NORMAL
- en: (create-inex 13 1 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The first [Inex](#%28tech._inex%29) represents 1200, the second one 1300. Numbers
    in the middle, say 1240, can be represented as one or the other—<wbr>no other
    [Inex](#%28tech._inex%29) makes sense. The standard choice is to round the number
    to the closest representable equivalent, and that is what computer scientists
    mean with inexact numbers. That is, the chosen data representation forces us to
    map mathematical numbers to approximations.Finally, we must also consider arithmetic
    operations on [Inex](#%28tech._inex%29) structures. Adding two [Inex](#%28tech._inex%29)
    representations with the same exponent means adding the two mantissas:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (inex+ (create-inex 1 1 0) (create-inex 2 1 0)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (create-inex 3 1 0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Translated into mathematical notation, we have
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/e5021deed5ff11c29ea900ea930f091d.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: When the addition of two mantissas yields too many digits, we have to use the
    closest neighbor in [Inex](#%28tech._inex%29). Consider adding ![image](../Images/a052b24193b185d97df2240bf3ded069.jpg)
    to itself. Mathematically we get
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/470d7af8d182281a47bb87c57c3ae1af.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: but we can’t just translate this number naively into our chosen representation
    because ![image](../Images/71746caa1c8d2e3a7368eedacdba52a7.jpg). The proper corrective
    action is to represent the result as
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/1b7487c04ea2c314a4be3a62b27ba457.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Or, translated into ISL+, we must ensure that inex+ computes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (inex+ (create-inex 55 1 0) (create-inex 55 1 0)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (create-inex 11 1 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'More generally, if the mantissa of the result is too large, we must divide
    it by 10 and increase the exponent by one.Sometimes the result contains more mantissa
    digits than we can represent. In those cases, inex+ must round to the closest
    equivalent in the [Inex](#%28tech._inex%29) world. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (inex+ (create-inex 56 1 0) (create-inex 56 1 0)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (create-inex 11 1 1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Compare this with the precise calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/3e8bf64384a472baab32cde792009689.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Because the result has too many mantissa digits, the integer division of the
    result mantissa by 10 produces an approximate result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/add3fa9697451e251c16c400eab6abf2.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: This is an example of the many approximations in [Inex](#%28tech._inex%29) arithmetic.And
    inexact is appropriate.We can also multiply [Inex](#%28tech._inex%29) numbers.
    Recall that
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/42d4aa123d1639bf685d723ea21e70a3.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Thus we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f9f3bd4f56743060c2e8ef30a9e76601.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'or, in ISL+ notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (inex* (create-inex 2 1 4) (create-inex 8 1 10)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (create-inex 16 1 14) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As with addition, things are not straightforward. When the result has too many
    significant digits in the mantissa, inex* has to increase the exponent:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (inex* (create-inex 20 1 1) (create-inex  5 1 4)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (create-inex 10 1 6) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'And just like inex+, inex* introduces an approximation if the true mantissa
    doesn’t have an exact equivalent in [Inex](#%28tech._inex%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| (inex* (create-inex 27 -1 1) (create-inex  7 1 4)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (create-inex 19 1 4) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 412\. Design inex+. The function adds two [Inex](#%28tech._inex%29)
    representations of numbers that have the same exponent. The function must be able
    to deal with inputs that increase the exponent. Furthermore, it must signal its
    own error if the result is out of range, not rely on create-inex for error checking.
  prefs: []
  type: TYPE_NORMAL
- en: 'Challenge Extend inex+ so that it can deal with inputs whose exponents differ
    by 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (inex+ (create-inex 1 1 0) (create-inex 1 -1 1)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (create-inex 11 -1 1)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Do not attempt to deal with larger classes of inputs than that without reading
    the following subsection. [![image](../Images/e28baa45946456da9203091fa40cbd7d.jpg)](#%28counter._%28exercise._ex~3ainex-arith-plus%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 413\. Design inex*. The function multiplies two [Inex](#%28tech._inex%29)
    representations of numbers, including inputs that force an additional increase
    of the output’s exponent. Like inex+, it must signal its own error if the result
    is out of range, not rely on create-inex to perform error checking. [![image](../Images/bc3f25b10f8e4de66c67f8107e519821.jpg)](#%28counter._%28exercise._ex~3ainex-arith-times%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 414\. As this section illustrates, gaps in the data representation
    lead to round-off errors when numbers are mapped to [Inex](#%28tech._inex%29)es.
    The problem is, such round-off errors accumulate across computations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Design add, a function that adds up n copies of #i1/185. For your examples,
    use 0 and 1; for the latter, use a tolerance of 0.0001. What is the result for
    (add  185)? What would you expect? What happens if you multiply the result with
    a large number?'
  prefs: []
  type: TYPE_NORMAL
- en: Design sub. The function counts how often 1/185 can be subtracted from the argument
    until it is 0. Use 0 and 1/185 for your examples. What are the expected results?
    What are the results for (sub  1) and (sub #i1.0)? What happens in the second
    case? Why? [![image](../Images/fbfb1d45cbd56518572109da65e41d19.jpg)](#%28counter._%28exercise._ex~3ainex-arith-round%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Overflow
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While the use of scientific notation expands the range of numbers we can represent
    with fixed-size chunks of data, it still doesn’t cover arbitrarily large numbers.
    Some numbers are just too big to fit into a fixed-size number representation.
    For example,
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/0f9247e164b82a204c37856294cce718.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'can’t be represented, because the exponent 500 won’t fit into two digits, and
    the mantissa is as large as legally possible.Numbers that are too large for [Inex](#%28tech._inex%29)
    can arise during a computation. For example, two numbers that we can represent
    can add up to a number that we cannot represent:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (inex+ (create-inex 50 1 99) (create-inex 50 1 99)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (create-inex 100 1 99) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: which violates the data definition. When the result of [Inex](#%28tech._inex%29)
    arithmetic produces numbers that are too large to be represented, we say (arithmetic)
    overflow occurred.
  prefs: []
  type: TYPE_NORMAL
- en: When overflow takes place, some language implementations signal an error and
    stop the computation. Others designate some symbolic value, called infinity, to
    represent such numbers and propagate it through arithmetic operations.
  prefs: []
  type: TYPE_NORMAL
- en: Note If [Inex](#%28tech._inex%29)es had a sign field for the mantissa, then
    two negative numbers can add up to one that is so negative that it can’t be represented
    either. This is called overflow in the negative direction. End
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 415\. ISL+ uses +inf.0 to deal with overflow. Determine the integer
    n such that
  prefs: []
  type: TYPE_NORMAL
- en: '| ([expt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._expt%29%29) #i10.0 n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: is an inexact number while ([expt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._expt%29%29) #i10. ([+](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._%2B%29%29) n 1))
    is approximated with +inf.0. Hint Design a function to compute n. [![image](../Images/a05aeaf8e7714327344175f74e9aadc7.jpg)](#%28counter._%28exercise._ex~3aflow-large%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Underflow
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'At the opposite end of the spectrum, there are small numbers that don’t have
    a representation in [Inex](#%28tech._inex%29). For example, ![image](../Images/3695ae5b357839a87540d3beef91b56a.jpg)
    is not 0, but it’s smaller than the smallest non-zero number we can represent.
    An (arithmetic) underflow arises when we multiply two small numbers and the result
    is too small for [Inex](#%28tech._inex%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| (inex* (create-inex 1 -1 10) (create-inex 1 -1 99)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (create-inex 1 -1 109) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: which signals an error.
  prefs: []
  type: TYPE_NORMAL
- en: When underflow occurs, some language implementations signal an error; others
    use 0 to approximate the result. Using 0 to approximate underflow is qualitatively
    different from picking an approximate representation of a number in [Inex](#%28tech._inex%29).
    Concretely, approximating 1250 with (create-inex  12  1  2) drops significant
    digits from the mantissa, but the result is always within 10% of the number to
    be represented. Approximating on underflow, however, means dropping the entire
    mantissa, meaning the result is not within a predictable percentage range of the
    true result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 416\. ISL+ uses #i0.0 to approximate underflow. Determine the smallest
    integer n such that ([expt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._expt%29%29) #i10.0 n)
    is still an inexact ISL+ number and ([expt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._expt%29%29) #i10. ([-](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._-%29%29) n 1))
    is approximated with 0. Hint Use a function to compute n. Consider abstracting
    over this function and the solution of [exercise 415](#%28counter._%28exercise._ex~3aflow-large%29%29).
    [![image](../Images/8badd7d24c247ea1406f53c7ef4c6bd9.jpg)](#%28counter._%28exercise._ex~3aflow-small%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '*SL Numbers'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Most programming languages support only approximate number representations
    and arithmetic for numbers. A typical language limits its integers to an interval
    that is related toIn the context of such languages, inexact real representations
    come in several flavors: float, double, extflonum, and so on. the size of the
    chunks of the hardware on which it runs. Its representation of real numbers is
    loosely based on the sketch in the preceding sections, though with larger chunks
    than the four digits [Inex](#%28tech._inex%29) uses and with digits from the 2-based
    number system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The teaching languages support both exact and inexact numbers. Their integers
    and rationals are arbitrarily large and precise, limited only by the absolute
    size of the computer’s entire memory. For calculations on these numbers, our teaching
    languages use the underlying hardware as long as the involved rationals fit into
    the supported chunks of data; it automatically switches to a different representation
    and to different version of the arithmetic operations for numbers outside of this
    interval. Their real numbers come in two flavors: exact and inexact. An exact
    number truly represents a real number; an inexact one approximates a real number
    in the spirit of the preceding sections. Arithmetic operations preserve exactness
    when possible; they produce an inexact result when necessary. Thus, [sqrt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._sqrt%29%29)
    returns an inexact number for both the exact and inexact representation of 2.
    In contrast, [sqrt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._sqrt%29%29)
    produces an exact 2 when given exact 4 and #i2.0 for an input of #i4.0. Finally,
    a numeric constant in a teaching program is understood as an exact rational, unless
    it is prefixed with #i.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Plain Racket interprets all decimal numbers as inexact numbers; it also renders
    all real numbers as decimals, regardless of whether they are exact or inexact.
    The implication is that all such numbers are dangerous, because they are likely
    to be inexact approximations of the true number. A programmer can force Racket
    to interpret numbers with a dot as exact by prefixing numerical constants with
    #e.'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you may wonder how much a program’s results may differ from the
    true results if it uses these inexact numbers. This question is one that early
    computer scientists struggled with a lot, and over the pastFor an accessible introduction—<wbr>in
    Racket—<wbr>see [this article on error analysis](http://jeapostrophe.github.io/home/static/tm-cise2014.pdf)
    by Neil Toronto and Jay McCarthy or watch [Neil Toronto’s lecture](https://www.youtube.com/watch?v=HmtgHVwja4k)
    on this topic. few decades, these studies have created a separate field, called
    numerical analysis. Every computer scientist, and indeed, every person who uses
    computers and software, ought to be aware of its existence and some of its basic
    insights into the workings of numeric programs. As a first taste, the following
    exercises illustrate how bad things can get. Work through them to never lose sight
    of the problems of inexact numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 417\. Evaluate ([expt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._expt%29%29)  1.001  1e-12)
    in Racket and in ISL+. Explain what you see. [![image](../Images/8bd57d438c28ee390d638ca768100bdf.jpg)](#%28counter._%28exercise._ex~3adr-number%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 418\. Design my-expt without using [expt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._expt%29%29).
    The function raises the first given number to the power of the second one, a natural
    number. Using this function, conduct the following experiment. Add
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._define%29%29) inex ([+](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._%2B%29%29) 1 #i1e-12))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._define%29%29) exac ([+](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._%2B%29%29) 1 1e-12))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: to the definitions area. What is (my-expt  inex  30)? And how about (my-expt  exac  30)?
    Which answer is more useful? [![image](../Images/0e67ef7f342d75623fcffc6f849d1060.jpg)](#%28counter._%28exercise._ex~3ainex-time%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._define%29%29) JANUS
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._list%29%29) 31.0
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         #i2e+34 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         #i-1.2345678901235e+80 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         2749.0 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         -2939234.0 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         #i-2e+33 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         #i3.2e+270 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         17.0 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         #i-2.4e+270 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         #i4.2344294738446e+170 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         1.0 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         #i-8e+269 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         0.0 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         99.0)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 139: A Janus-faced series of inexact numbers'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Exercise 419\. When you add two inexact numbers of vastly different orders
    of magnitude, you may get the larger one back as the result. For example, if a
    number system uses only 15 significant digits, we run into problems when adding
    numbers that vary by more than a factor of ![image](../Images/17ed820c245504ffcdc6a00e15f7528d.jpg):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/1c05e11314d622f5d59c3a5f258b6aef.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'but the closest representable answer is ![image](../Images/60fea39c87cb1c440d0ded1df6d7b8bc.jpg).At
    first glance, this approximation doesn’t look too bad. Being wrong by one part
    in ![image](../Images/c3179dc49f3fa8f0b8aa41799c670109.jpg) (ten million billion)
    is close enough to the truth. Unfortunately, this kind of problem can add up to
    huge problems. Consider the list of numbers in [figure 139](#%28counter._%28figure._fig~3ajanus%29%29)
    and determine the values of these expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: (sum  JANUS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (sum  ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._reverse%29%29)  JANUS))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (sum  ([sort](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._sort%29%29)  JANUS  [<](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._~3c%29%29)))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Assuming sum adds the numbers in a list from left to right, explain what these
    expressions compute. What do you think of the results?Generic advice on inexact
    calculations tells programmers to start additions with the smallest numbers. While
    adding a big number to two small numbers might yield the big one, adding small
    numbers first creates a large one, which might change the outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([expt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._expt%29%29) 2 #i53.0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #i9007199254740992.0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (sum ([list](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._list%29%29) #i1.0 ([expt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._expt%29%29) 2 #i53.0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #i9007199254740992.0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (sum ([list](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._list%29%29) #i1.0 #i1.0 ([expt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._expt%29%29) 2 #i53.0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #i9007199254740994.0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This trick may not work; see the JANUS interactions above.In a language such
    as ISL+, you can convert the numbers to exact rationals, use exact arithmetic
    on those, and convert the result back:'
  prefs: []
  type: TYPE_NORMAL
- en: ([exact->inexact](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._exact-~3einexact%29%29) (sum ([map](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._map%29%29) [inexact->exact](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._inexact-~3eexact%29%29) JANUS)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Evaluate this expression and compare the result to the three sums above. What
    do you think now about advice from the web? [![image](../Images/84020e1030a24cf83a81915babdd602c.jpg)](#%28counter._%28exercise._ex~3ajanus%29%29)Exercise 420\.
    JANUS is just a fixed list but take a look at this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._define%29%29) (oscillate n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._define%29%29) (O i)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([>](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._~3e%29%29) i n) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28form._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([cons](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._cons%29%29) ([expt](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._expt%29%29) -0.99 i) (O ([+](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._%2B%29%29) i 1)))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (O 1))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Applying oscillate to a natural number n produces the first n elements of a
    mathematical series. It is most easily understood as a graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/65db5b1deef3f65388834a99c8f19888.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Run (oscillate  15) in DrRacket and inspect the result.Summing its results
    from left to right computes a different result than from right to left:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (sum (oscillate #i1000.0)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #i-0.49746596003269394 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (sum ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._reverse%29%29) (oscillate #i1000.0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #i-0.4974659600326953 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Again, the difference may appear to be small until we see the context:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; > ([-](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._-%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._%2A%29%29) 1e+16 (sum (oscillate #i1000.0)))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([*](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._%2A%29%29) 1e+16 (sum ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._reverse%29%29) (oscillate #i1000.0)))))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| #i14.0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Can this difference matter? Can we trust computers? [![image](../Images/28e9401a68e156868aee3ca5f52cfa5c.jpg)](#%28counter._%28exercise._ex~3ajanus2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: The question is which numbers programmers should use in their programs if they
    are given a choice. The answer depends on the context of course. In the world
    of financial statements, numerical constants should be interpreted as exact numbers,
    and computational manipulations of financial statements ought to be able to rely
    on the exactness-preserving nature of mathematical operations. After all, the
    law cannot accommodate the serious errors that come with inexact numbers and their
    operations. In scientific computations, however, the extra time needed to produce
    exact results might impose too much of a burden. Scientists therefore tend to
    use inexact numbers but carefully analyze their programs to make sure that the
    numerical errors are tolerable for their uses of the outputs of programs.
  prefs: []
  type: TYPE_NORMAL
- en: VGenerative Recursion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you follow the design recipe of the first four parts, you either turn domain
    knowledge into code or you exploit the structure of the data definition to organize
    your code.Some functions merely compose such functions; we group those with the
    “structural” group. The latter functions typically decompose their arguments into
    their immediate structural components and then process those components. If one
    of these immediate components belongs to the same class of data as the input,
    the function is structurally recursive. While structurally designed functions
    make up the vast majority of code in the world, some problems cannot be solved
    with a structural approach to design.
  prefs: []
  type: TYPE_NORMAL
- en: To solve such complicated problems, programmers use generative recursion, a
    form of recursion that is strictly more powerful than structural recursion. The
    study of generative recursion is as old as mathematics and is often called the
    study of algorithms. The inputs of an algorithm represent a problem. An algorithm
    tends to re-arrange a problem into a set of several problems, solve those, and
    combine their solutions into one overall solution. Often some of these newly generated
    problems are the same kind of problem as the given one, in which case the algorithm
    can be re-used to solve them. In these cases, the algorithm is recursive but its
    recursion uses newly generated data not immediate parts of the input data.
  prefs: []
  type: TYPE_NORMAL
- en: From the very description of generative recursion, you can tell that designing
    a generative recursive function is more of an ad hoc activity than designing a
    structurally recursive function. Still, many elements of the general design recipe
    apply to the design of algorithms, too, and this part of the book illustrates
    how and how much the design recipe helps. The key to designing algorithms is the
    “generation” step, which often means dividing up the problem. And figuring out
    a novel way of dividing a problem requires insight.In Greeks, it’s eureka! Sometimes
    very little insight is required. For example, it might just require a bit of common-sense
    knowledge about breaking up sequences of letters. At other times, it may rely
    on deep mathematical theorems about numbers. In practice, programmers design simple
    algorithms on their own and rely on domain specialists for their complex brethren.
    For either kind, programmers must thoroughly understand the underlying ideas so
    that they can code up algorithms and have the program communicate with future
    readers. The best way to get acquainted with the idea is to study a wide range
    of examples and to develop a sense for the kinds of generative recursions that
    may show up in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: 25Non-standard Recursion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point you have designed numerous functions that employ structural recursion.
    When you design a function, you know you need to look at the data definition for
    its major input. If this input is described by a self-referential data definition,
    you end up with a function that refers to itself basically where the data definition
    refers to itself.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter presents two sample programs that use recursion differently. They
    are illustrative of the problems that require some eureka, ranging from the obvious
    idea to the sophisticated insight.
  prefs: []
  type: TYPE_NORMAL
- en: 25.1Recursion without Structure
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Imagine you have joined the DrRacket team. The team is working on a sharing
    service to support collaborations among programmers. Concretely, the next revision
    of DrRacket is going to enable ISL programmers to share the content of their DrRacket’s
    definition area across several computers. Each time one programmer modifies the
    buffer, the revised DrRacket broadcasts the content of the definitions area to
    the instances of DrRacket that participate in the sharing session.
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Your task is to design the function bundle, which prepares the
    content of the definitions area for broadcasting. DrRacket hands over the content
    as a list of [1String](part_one.html#%28tech._1string%29)s. The function’s task
    is to bundle up chunks of individual “letters” into chunks and to thus produce
    a list of strings—<wbr>called chunks—<wbr>of a given length, called chunk size.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As you can see, the problem basically spells out the signature and there is
    no need for any problem-specific data definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1String](part_one.html#%28tech._1string%29)]
    [N](part_two.html#%28tech._n%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; bundles chunks of s into strings of length n |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (bundle s n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The purpose statement reformulates a sentence fragment from the problem statement
    and uses the parameters from the dummy function header.The third step calls for
    function examples. Here is a list of [1String](part_one.html#%28tech._1string%29)s:'
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "a" "b" "c" "d" "e" "f" "g" "h")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If we tell bundle to bundle this list into pairs—<wbr>that is, n is 2—<wbr>then
    the following list is the expected result:'
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "ab" "cd" "ef" "gh")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now if n is 3 instead, there is a left-over “letter”. Since the problem statement
    does not tell us which of the characters is left over, we can imagine at least
    two valid scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: The function produces ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  "abc"  "def"  "g"),
    that is, it considers the last letter as the left-over one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or, it produces ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  "a"  "bcd"  "efg"),
    which packs the lead character into a string by itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stop! Come up with at least one other choice.To make things simple, we pick
    the first choice as the desired result and say so by writing down a corresponding
    test:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (bundle ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29) "abcdefg") 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "abc" "def" "g"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note the use [explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29);
    it makes the test readable.Examples and tests must also describe what happens
    at the boundary of data definitions. In this context, boundary clearly means bundle
    is given a list that is too short for the given chunk size:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (bundle '("a" "b") 3) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "ab"))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'It also means we must consider what happens when bundle is given ''(). For
    simplicity, we choose ''() as the desired result:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (bundle '() 3) '())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One natural alternative is to ask for '(""). Can you see others?
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29) as compound, s considered atomic ; ([Processing
    Two Lists Simultaneously: Case 1](part_four.html#%28part._sec~3atwo-inputs~3acase1%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (bundle s n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([zero?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._zero~3f%29%29) n) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) s [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) n [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (bundle s ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1String](part_one.html#%28tech._1string%29)]
    as compound, n atomic ; ([Processing Two Lists Simultaneously: Case 1](part_four.html#%28part._sec~3atwo-inputs~3acase1%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (bundle s n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) s) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) s [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) n [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (bundle ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) s) n))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1String](part_one.html#%28tech._1string%29)]
    and [N](part_two.html#%28tech._n%29) are on equal footing ; ([Processing Two Lists
    Simultaneously: Case 2](part_four.html#%28part._sec~3atwo-inputs~3acase2%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (bundle s n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) s) ([zero?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._zero~3f%29%29) n)) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) s [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) n [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (bundle ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) s) ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; consider all possibilities ; ([Processing Two Lists Simultaneously: Case
    3](part_four.html#%28part._sec~3atwo-inputs~3acase3%29)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (bundle s n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) s) ([zero?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._zero~3f%29%29) n)) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) s) ([zero?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._zero~3f%29%29) n)) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) s) ([positive?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._positive~3f%29%29) n)) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (bundle s ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (bundle ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) s) n) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 140: Useless templates for breaking up strings into chunks'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The template step reveals that a structural approach cannot work. [Figure 140](#%28counter._%28figure._fig~3abundle-template-bad%29%29)
    shows four possible templates given that both arguments to bundle are complex
    arguments. The first two consider one of the arguments atomic, but that clearly
    cannot be the case because the function has to understand each argument. The third
    template is based on the assumption that the two arguments are processed in lock
    step, which is close—<wbr>except that bundle clearly has to reset the chunk size
    to its original value at regular intervals. The final template says that the two
    arguments are independent and must be processed in this manner, meaning there
    are four possibilities to proceed at each stage. But this case split decouples
    the arguments too much because the list and the counting number must be processed
    together. In short, we are forced to admit that the structural templates appear
    to be useless for this design problem.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1String](part_one.html#%28tech._1string%29)]
    [N](part_two.html#%28tech._n%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; bundles chunks of s into strings of length n |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; idea take n items and drop n at a time |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (bundle s n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) s) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([implode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._implode%29%29) (take s n)) (bundle (drop s n) n))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29) X] [N](part_two.html#%28tech._n%29)
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29) X] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; keep the first n items from l if possible or everything |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (take l n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([zero?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._zero~3f%29%29) n) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) (take ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29) X] [N](part_two.html#%28tech._n%29)
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29) X] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; remove the first n items from l if possible or everything |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (drop l n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([zero?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._zero~3f%29%29) n) l]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) l]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (drop ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 141: Generative recursion'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 141](#%28counter._%28figure._fig~3abundle%29%29) shows a complete definition
    for bundle. The definition uses the drop and take functions requested in [exercise 395](part_four.html#%28counter._%28exercise._ex~3adrop-take%29%29);
    these functions are also available in standard libraries. For completeness, the
    figure comes with their definitions: drop eliminates up to n items from the front
    of the list, take returns up to that many items. Using these functions, it is
    quite straightforward to define bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: if the given list is '(), the result is '() as decided upon;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: otherwise bundle uses take to grab the first n [1String](part_one.html#%28tech._1string%29)s
    from s and [implode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._implode%29%29)s
    them into a plain [String](part_one.html#%28tech._string%29);
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: it then recurs with a list that is shortened by n items, which is accomplished
    with drop;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: finally, [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    combines the string from 2 with the list of strings from 3 to create the result
    for the complete list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bullet 3 highlights the key difference between bundle and any function in the
    first four parts of this book. Because the definition of [List-of](part_three.html#%28tech._sim-dd._list._of%29)
    [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)es
    an item onto a list to create another one, all functions in the first four parts
    use [first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29)
    and [rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)
    to deconstruct a non-empty list. In contrast, bundle uses drop, which removes
    not just one but n items at once.
  prefs: []
  type: TYPE_NORMAL
- en: While the definition of bundle is unusual, the underlying ideas are intuitive
    and not too different from the functions seen so far. Indeed, if the chunk size
    n is 1, bundle specializes to a structurally recursive definition. Also, drop
    is guaranteed to produce an integral part of the given list, not some arbitrarily
    rearranged version. And this idea is precisely what the next section presents.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 421\. Is (bundle  '("a"  "b"  "c")  0) a proper use of the bundle function?
    What does it produce? Why? [![image](../Images/5de3b59f46a7c2f9770af53b4f21df76.jpg)](#%28counter._%28exercise._ex~3abundle-loops%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 422\. Define the function list->chunks. It consumes a list l of arbitrary
    data and a natural number n. The function’s result is a list of list chunks of
    size n. Each chunk represents a sub-sequence of items in l.
  prefs: []
  type: TYPE_NORMAL
- en: Use list->chunks to define bundle via function composition. [![image](../Images/4724bb2b5662ef01e236109bb72ce8c4.jpg)](#%28counter._%28exercise._ex~3abundle-from-abstraction%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 423\. Define partition. It consumes a String s and a natural number
    n. The function produces a list of string chunks of size n.
  prefs: []
  type: TYPE_NORMAL
- en: For non-empty strings s and positive natural numbers n,
  prefs: []
  type: TYPE_NORMAL
- en: ([equal?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._equal~3f%29%29) (partition s n) (bundle ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29) s) n))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'is #true. But don’t use this equality as the definition for partition; use
    [substring](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._substring%29%29)
    instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Hint Have partition produce its natural result for the empty string. For the
    case where n is 0, see [exercise 421](#%28counter._%28exercise._ex~3abundle-loops%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Note The partition function is somewhat closer to what a cooperative DrRacket
    environment would need than bundle. [![image](../Images/796a38fe2e197e219bd2337db1e299bd.jpg)](#%28counter._%28exercise._ex~3astring-bundle%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 25.2Recursion that Ignores Structure
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Recall that the sort> function from [Design by Composition](part_two.html#%28part._ch~3alist-sort%29)
    consumes a list of numbers and re-arranges it in some order, typically ascending
    or descending. It proceeds by inserting the first number into the appropriate
    position of the sorted rest of the list. Put differently, it is a structurally
    recursive function that re-processes the result of the natural recursions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hoare’s quick-sort algorithm goes about sorting lists in a radically different
    manner and has become the classic example of generative recursion. The underlying
    generative step uses the time-honored strategy of divide-and-conquer. That is,
    it divides the non-trivial instances of the problem into two smaller, related
    problems, solves those smaller problems, and combines their solutions into a solution
    for the original problem. In the case of the quick-sort algorithm, the intermediate
    goal is to divide the list of numbers into two lists:'
  prefs: []
  type: TYPE_NORMAL
- en: one that contains all the numbers that are strictly smaller than the first
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and another one with all those items that are strictly larger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then the two smaller lists are sorted via the quick-sort algorithm. Once the
    two lists are sorted, the results are composed with the first item placed in the
    middle. Owing to its special role, the first item on the list is called the pivot
    item.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/7ee0007c4672b86d3b960f26f9ae5e9c.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 142: A graphical illustration of the quick-sort algorithm'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To develop an understanding of how the quick-sort algorithm works, let’s walk
    through an example, quick-sorting ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  11  8  14  7).
    [Figure 142](#%28counter._%28figure._fig~3asort-ill%29%29) illustrates the process
    in a graphical way. The figure consists of a top half, the divide phase, and the
    bottom half, the conquer phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'The partition phase is represented with boxes and solid arrows. Three arrows
    emerge from each boxed list and go to a box with three pieces: the circled pivot
    element in the middle, to its left the boxed list of numbers smaller than the
    pivot, and to its right the boxed list of those numbers that are larger than the
    pivot. Each of these steps isolates at least one number as the pivot, meaning
    the two neighboring lists are shorter than the given list. Consequently, the overall
    process terminates too.'
  prefs: []
  type: TYPE_NORMAL
- en: Consider the first step where the input is ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  11  8  14  7).
    The pivot item is 11. Partitioning the list into items larger and smaller than
    11 produces ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  8  7)
    and ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  14).
    The remaining steps of the partitioning phase work in an analogous way. Partitioning
    ends when all numbers have been isolated as pivot elements. At this point, you
    can already read off the final result by reading the pivots from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: 'The conquering phase is represented with dashed arrows and boxed lists. Three
    arrows enter each result box: the middle one from a pivot, the left one from the
    boxed result of sorting the smaller numbers, and the right one from the boxed
    result of sorting the larger ones. Each step adds at least one number to the result
    list, the pivot, meaning the lists grow toward the bottom of the diagram. The
    box at the bottom is a sorted variant of the given list at the top.'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the left-most, upper-most conquer step. It combines the pivot
    7 with two empty lists, resulting in '(7). The next one down corresponds to the
    partitioning step that isolated 8 and thus yields '(7  8). Each level in the conquering
    phase mirrors a corresponding level from the partitioning phase. After all, the
    overall process is recursive.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 424\. Draw a quick-sort diagram like the one in [figure 142](#%28counter._%28figure._fig~3asort-ill%29%29)
    for ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  11  9  2  18  12  14  4  1).
    [![image](../Images/5100b3e2c630655fabad900d25f6ac41.jpg)](#%28counter._%28exercise._ex~3aquicksort-hand%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a good understanding of the quick-sort idea, we can translate
    it into ISL+. Clearly, quick-sort< distinguishes two cases. If the input is ''(),
    it produces ''() because this list is sorted already; otherwise, it performs a
    generative recursion. This case split suggests the following [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a sorted version of alon |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (quick-sort< alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The answer for the first case is given. For the second case, when quick-sort<’s
    input is a non-empty list, the algorithm uses the first item to partition the
    rest of the list into two sublists: a list with all items smaller than the pivot
    item and another one with those larger than the pivot item.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the rest of the list is of unknown size, we leave the task of partitioning
    the list to two auxiliary functions: smallers and largers. They process the list
    and filter out those items that are smaller and larger, respectively, than the
    pivot. Hence each auxiliary function accepts two arguments, namely, a list of
    numbers and a number. Designing these two functions is an exercise in structural
    recursion. Try on your own or read the definitions shown in [figure 143](#%28counter._%28figure._fig~3aquick-sort%29%29).'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; produces a sorted version of alon |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; assume the numbers are all distinct |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (quick-sort< alon)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) pivot ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) (quick-sort< (smallers alon pivot))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) pivot)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                     (quick-sort< (largers alon pivot))))])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (largers alon n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon) n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon) (largers ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon) n))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               (largers ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon) n))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (smallers alon n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon) n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon) (smallers ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon) n))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               (smallers ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon) n))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 143: The quick-sort algorithm'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Each of these lists is sorted separately, using quick-sort<, which implies
    the use of recursion, specifically the following two expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: (quick-sort<  (smallers  alon  pivot)), which sorts the list of items smaller
    than the pivot; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (quick-sort<  (largers  alon  pivot)), which sorts the list of items larger
    than the pivot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once quick-sort< has the sorted versions of the two lists, it must combine
    the two lists and the pivot in the proper order: first all those items smaller
    than pivot, then pivot, and finally all those that are larger. Since the first
    and last list are already sorted, quick-sort< can simply use [append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) (quick-sort< (smallers alon pivot))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         (quick-sort< (largers alon pivot))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '[Figure 143](#%28counter._%28figure._fig~3aquick-sort%29%29) contains the full
    program; read it before proceeding.Now that we have an actual function definition,
    we can evaluate the example from above by hand:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (quick-sort< ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 11 8 14 7))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) (quick-sort< ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 8 7))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 11)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         (quick-sort< ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 14)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) (quick-sort< ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 7))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 8)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 (quick-sort< ''())) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 11)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         (quick-sort< ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 14)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) (quick-sort< ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 7)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                         (quick-sort< ''())) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 8)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 (quick-sort< ''())) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 11)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         (quick-sort< ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 14)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ''()
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                          ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 7)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                         ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 8)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 11)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         (quick-sort< ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 14)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 7)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 8)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 11)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         (quick-sort< ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 14)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The calculation shows the essential steps of the sorting process, that is, the
    partitioning steps, the recursive sorting steps, and the concatenation of the
    three parts. From this calculation, it is easy to see how quick-sort< implements
    the process illustrated in [figure 142](#%28counter._%28figure._fig~3asort-ill%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Both [figure 142](#%28counter._%28figure._fig~3asort-ill%29%29) and the calculation
    also show how quick-sort< completely ignores the structure of the given list.
    The first recursion works on two distant numbers from the originally given list
    and the second one on the list’s third item. These recursions aren’t random but
    they are certainly not relying on the structure of the data definition.
  prefs: []
  type: TYPE_NORMAL
- en: Contrast quick-sort<’s organization with that of the sort> function from [Design
    by Composition](part_two.html#%28part._ch~3alist-sort%29). The design of the latter
    follows the structural design recipe, yielding a program that processes a list
    item by item. By splitting the list, quick-sort< can speed up the process of sorting
    the list, though at the cost of not using plain [first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29)
    and [rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 425\. Articulate purpose statements for smallers and largers in [figure 143](#%28counter._%28figure._fig~3aquick-sort%29%29).
    [![image](../Images/c06341fe298f18ac7c8747ecbfdf733c.jpg)](#%28counter._%28exercise._ex~3aquick-sort-purpose%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 426\. Complete the hand evaluation from above. A close inspection of
    the evaluation suggests an additional trivial case for quick-sort<. Every time
    quick-sort< consumes a list of one item, it returns it as is. After all, the sorted
    version of a list of one item is the list itself.
  prefs: []
  type: TYPE_NORMAL
- en: Modify quick-sort< to take advantage of this observation. Evaluate the example
    again. How many steps does the revised algorithm save? [![image](../Images/e7650d49ea47c5687fe13c6c5900483b.jpg)](#%28counter._%28exercise._ex~3aquick-sort-terminal%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 427\. While quick-sort< quickly reduces the size of the problem in
    many cases, it is inappropriately slow for small problems. Hence people use quick-sort<
    to reduce the size of the problem and switch to a different sort function when
    the list is small enough.
  prefs: []
  type: TYPE_NORMAL
- en: Develop a version of quick-sort< that uses sort< (an appropriately adapted variant
    of sort> from [Auxiliary Functions that Recur](part_two.html#%28part._sec~3asort.I%29))
    if the length of the input is below some threshold. [![image](../Images/a119eecb4de0404d3cc8f8b4bad1622a.jpg)](#%28counter._%28exercise._ex~3aquick-sort-switch%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 428\. If the input to quick-sort< contains the same number several
    times, the algorithm returns a list that is strictly shorter than the input. Why?
    Fix the problem so that the output is as long as the input. [![image](../Images/364615a0dc888d34906ec9a9ce87eae7.jpg)](#%28counter._%28exercise._ex~3aquick-sort-drop%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 429\. Use [filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29)
    to define smallers and largers. [![image](../Images/98e92c2cee5f4800cb64ed856f3f7dde.jpg)](#%28counter._%28exercise._ex~3aquick-sort-filter%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 430\. Develop a variant of quick-sort< that uses only one comparison
    function, say, [<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29).
    Its partitioning step divides the given list alon into a list that contains the
    items of alon smaller than the pivot and another one with those that are not smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    to package up the program as a single function: Abstract this function so that
    it consumes a list and a comparison function. [![image](../Images/44a82eb7519034d5d1f827a8a18b8f5e.jpg)](#%28counter._%28exercise._ex~3aquick-sort-abstract%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 26Designing Algorithms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The overview for this part already explains that the design of generative recursion
    functions is more ad hoc than structural design. As the first chapter shows, two
    generative recursions can radically differ in how they process functions. Both
    bundle and quick-sort< process lists, but while the former at least respects the
    sequencing in the given list, the latter re-arranges its given list at will. The
    question is whether a single design recipe can help with the creation of such
    widely differing functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first section shows how to adapt the process dimension of the design recipe
    to generative recursion. The second section hones in on another new phenomenon:
    an algorithm may fail to produce an answer for some of its inputs. Programmers
    must therefore analyze their programs and supplement the design information with
    a comment on termination. The remaining sections contrast structural and generative
    recursion.'
  prefs: []
  type: TYPE_NORMAL
- en: 26.1Adapting the Design Recipe
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s examine the six general steps of our structural design recipe in light
    of the examples in the preceding chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: As before, we must represent the problem information as data in our chosen programming
    language. The choice of a data representation for a problem affects our thinking
    about the computational process, so some planning ahead is necessary. Alternatively,
    be prepared to backtrack and to explore different data representations. Regardless,
    we must analyze the problem information and define data collections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also need a signature, a function header, and a purpose statement. Since
    the generative step has no connection to the structure of the data definition,
    the purpose statement must go beyond what the function is to compute and also
    explain how the function computes its result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is useful to explain the “how” with function examples, the way we explained
    bundle and quick-sort< in the previous chapter. That is, while function examples
    in the structural world merely specify which output the function is to produce
    for which input, the purpose of examples in the world of generative recursion
    is to explain the underlying idea behind the computational process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For bundle, the examples specify how the function acts in general and in certain
    boundary cases. For quick-sort<, the example in [figure 142](#%28counter._%28figure._fig~3asort-ill%29%29)
    illustrates how the function partitions the given list with respect to the pivot
    item. By adding such worked examples to the purpose statement, we—<wbr>the designers—<wbr>gain
    an improved understanding of the desired process, and we communicate this understanding
    to future readers of this code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our discussion suggests a general template for algorithms. Roughly speaking,
    the design of an algorithm distinguishes two kinds of problems: those that are
    trivially solvable and those that are not.For this part of the book, “trivial”
    is a technical term. If a given problem is trivially solvable, an algorithm produces
    the matching solution. For example, the problems of sorting an empty list or a
    one-item list are trivially solvable. A list with many items is a non-trivial
    problem. For these non-trivial problems, algorithms commonly generate new problems
    of the same kind as the given one, solve those recursively, and combine the solutions
    into an overall solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Based on this sketch, all algorithms have roughly this organization:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (generative-recursive-fun problem)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(trivially-solvable? problem) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      (determine-solution problem)] |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|      (combine-solutions |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|        [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) problem [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|        (generative-recursive-fun |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|          (generate-problem-1 problem)) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|        [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|        (generative-recursive-fun |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|          (generate-problem-n problem)))])) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The original problem is occasionally needed to combine the solutions for the
    newly generated problems, which is why it is handed over to combine-solutions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This template is only a suggestive blueprint, not a definitive shape. Each
    piece of the template is to remind us to think about the following four questions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a trivially solvable problem?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How are trivial solutions solved?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How does the algorithm generate new problems that are more easily solvable than
    the original one? Is there one new problem that we generate or are there several?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the solution of the given problem the same as the solution of (one of) the
    new problems? Or, do we need to combine the solutions to create a solution for
    the original problem? And, if so, do we need anything from the original problem
    data?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To define the algorithm as a function, we must express the answers to these
    four questions as functions and expressions in terms of the chosen data representation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For this step, the table-driven attempt from [Designing with Self-Referential
    Data Definitions](part_two.html#%28part._ch~3adesign-lists%29) might help again.
    Reconsider the quick-sort< example from [Recursion that Ignores Structure](#%28part._sec~3aquick-sort%29).
    The central idea behind quick-sort< is to divide a given list into a list of smaller
    items and larger items and to sort those separately. [Figure 144](#%28counter._%28figure._fig~3aquick-sort-table%29%29)
    spells out how some simple numeric examples work out for the non-trivial cases.
    From these examples it is straightforward to guess that the answer to the fourth
    question is to append the sorted list of smaller numbers, the pivot number, and
    the sorted list of larger numbers, which can easily be translated into code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the function is complete, it is time to test it. As before, the goal of
    testing is to discover and eliminate bugs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| alon |  | pivot |  | sorted, smaller |  | sorted, larger |  | expected |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ''(2  3  1  4) |  | 2 |  | ''(1) |  | ''(3  4) |  | ''(1  2  3  4) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ''(2  0  1  4) |  | 2 |  | ''(0  1) |  | ''(3) |  | ''(0  1  2  4) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ''(3  0  1  4) |  | 3 |  | ''(0  1) |  | ''(4) |  | ''(0  1  3  4) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 144: The table-based guessing approach for combining solutions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 431\. Articulate informal answers to the four key questions for the
    bundle problem and to the first three questions for quick-sort< problem. How many
    instances of generate-problem are needed? [![image](../Images/367976af50442d9f05fadd8d40255d6d.jpg)](#%28counter._%28exercise._ex~3agen-fun-instance1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 432\. [Exercise 219](part_two.html#%28counter._%28exercise._ex~3aworm5%29%29)
    introduces the function food-create, which consumes a [Posn](part_one.html#%28tech._posn%29)
    and produces a randomly chosen [Posn](part_one.html#%28tech._posn%29) that is
    guaranteed to be distinct from the given one. First re-formulate the two functions
    as a single definition, using [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29),
    then justify the design of food-create. [![image](../Images/f0d87bb937f9826e2a8c10abbe29775d.jpg)](#%28counter._%28exercise._ex~3aworm5-explained%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 26.2Termination
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Generative recursion adds an entirely new aspect to computations: non-termination.
    A function such as bundle may never produce a value nor signal an error for certain
    inputs. [Exercise 421](#%28counter._%28exercise._ex~3abundle-loops%29%29) asks
    what the result of (bundle  ''("a"  "b"  "c")  0) is, and here is an explanation
    of why it does not have a result:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (bundle ''("a" "b" "c") 0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([implode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._implode%29%29) (take  ''("a" "b" "c") 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       (bundle (drop  ''("a" "b" "c") 0))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([implode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._implode%29%29) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        (bundle (drop  ''("a" "b" "c") 0))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) "" (bundle (drop  ''("a" "b" "c") 0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) "" (bundle  ''("a" "b" "c") 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The calculation shows how evaluating (bundle  '("a"  "b"  "c")  0) requires
    having a result for the very same expression. In the context of ISL+ this means
    the evaluation does not stop. Computer scientists say that bundle does not terminate
    when the second argument is 0; they also say that the function loops or that the
    computation is stuck in an infinite loop.
  prefs: []
  type: TYPE_NORMAL
- en: Contrast this insight with the designs presented in the first four parts. Every
    function designed according to the recipe either produces an answer or raises
    an error signal for every input. After all, the recipe dictates that each natural
    recursion consumes an immediate piece of the input, not the input itself. Because
    data is constructed in a hierarchical manner, input shrinks at every stage. Eventually
    the function is applied to an atomic piece of data, and the recursion stops.
  prefs: []
  type: TYPE_NORMAL
- en: This reminder also explains why generative recursive functions may diverge.
    According to the design recipe for the latter, an algorithm may generate new problems
    without any limitations. If the design recipe required the designer to guarantee
    that the new problem were “smaller” than the given one, it would terminate.The
    theory of computation actually shows that we must lift these restrictions eventually.
    But, imposing such a restriction would needlessly complicate the design of functions
    such as bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we therefore keep the first six steps of the design recipe mostly
    intact and supplement them with a seventh step: the termination argument. [Figure 145](#%28counter._%28figure._fig~3adesign7%29%29)
    presents the first part of the design recipe for generative recursion, and [figure 146](#%28counter._%28figure._fig~3adesign7b%29%29)
    the second one. They show the design recipe in the conventional tabular form.
    The unmodified steps come with a dash in the activity column. Others come with
    comments on how the design recipe for generative recursion differs from the one
    for structural recursion. The last row in [figure 146](#%28counter._%28figure._fig~3adesign7b%29%29)
    is completely new.'
  prefs: []
  type: TYPE_NORMAL
- en: A termination argument comes in one of two forms. The first one argues why each
    recursive call works on a problem that is smaller than the given one. Often this
    argument is straightforward; on rare occasions, you will need to work with a mathematician
    to prove a theorem for such arguments. The second kind illustrates with an example
    that the function may not terminate.You cannot define a predicate for this class;
    otherwise you could modify the function and ensure that it always terminates.
    Ideally it should also describe the class of data for which the function may loop.
    In rare cases, you may not be able to make either argument because computer science
    does not know enough yet.
  prefs: []
  type: TYPE_NORMAL
- en: '| steps |  | outcome |  | activity |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| problem analysis |  | data representation and definition |  | —<wbr> |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| header |  | a purpose statement concerning the “how” of the function |  |
    supplement the explanation of what the function computes with a one-liner on how
    it computes the result |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| examples |  | examples and tests |  | work through the “how” with several
    examples |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| template |  | fixed template |  | —<wbr> |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 145: Designing algorithms (part 1)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| steps |  | outcome |  | activity |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| definition |  | full-fledged function definition |  | formulate conditions
    for trivially solvable problems; formulate answers for these trivial cases; determine
    how to generate new problems for non-trivial problems, possibly using auxiliary
    functions; determine how to combine the solutions of the generated problems into
    a solution for the given problem |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| tests |  | discover mistakes |  | —<wbr> |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| termination |  | (1) a size argument for each recursive call or (2) examples
    of exceptions to termination |  | investigate whether the problem data for each
    recursive data is smaller than the given data; find examples that cause the function
    to loop |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 146: Designing algorithms (part 2)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s illustrate the two kinds of termination arguments with examples. For
    the bundle function, it suffices to warn readers about chunk size 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1String](part_one.html#%28tech._1string%29)]
    [N](part_two.html#%28tech._n%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [String](part_one.html#%28tech._string%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; bundles sub-sequences of s into strings of length n |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; termination  (bundle  s  0) loops unless s is ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (bundle s n) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In this case, it is possible to define a predicate that precisely describes
    when bundle terminates. For quick-sort<, the key observation is that each recursive
    use of quick-sort< receives a list that is shorter than alon:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a sorted variant of alon |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; termination both recursive calls to quick-sort< |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; receive list that miss the pivot item |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (quick-sort< alon) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In one case, the list consists of the numbers that are strictly smaller than
    the pivot; the other one is for numbers strictly larger.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 433\. Develop a checked version of bundle that is guaranteed to terminate
    for all inputs. It may signal an error for those cases where the original version
    loops. [![image](../Images/f8a512a481e51982f86f8e792b2b7188.jpg)](#%28counter._%28exercise._ex~3aterminate-bundle%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 434\. Consider the following definition of smallers, one of the two
    “problem generators” for quick-sort<:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (smallers l n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) (smallers ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) n))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               (smallers ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) n))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: What can go wrong when this version is used with the quick-sort< definition
    from [Recursion that Ignores Structure](#%28part._sec~3aquick-sort%29)? [![image](../Images/15e88384ca68111ef52f1710d3f2d8ea.jpg)](#%28counter._%28exercise._ex~3aquick-sort-non-terminate%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 435\. When you worked on [exercise 430](#%28counter._%28exercise._ex~3aquick-sort-abstract%29%29)
    or [exercise 428](#%28counter._%28exercise._ex~3aquick-sort-drop%29%29), you may
    have produced looping solutions. Similarly, [exercise 434](#%28counter._%28exercise._ex~3aquick-sort-non-terminate%29%29)
    actually reveals how brittle the termination argument is for quick-sort<. In all
    cases, the argument relies on the idea that smallers and largers produce lists
    that are maximally as long as the given list, and our understanding that neither
    includes the given pivot in the result.
  prefs: []
  type: TYPE_NORMAL
- en: Based on this explanation, modify the definition of quick-sort< so that both
    functions receive lists that are shorter than the given one. [![image](../Images/13f3d33bd371d4e5cd9c8d7b1662a1d4.jpg)](#%28counter._%28exercise._ex~3aquick-sort-terminates%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 436\. Formulate a termination argument for food-create from [exercise 432](#%28counter._%28exercise._ex~3aworm5-explained%29%29).
    [![image](../Images/f3c542fae96a90e4a818e931c017865a.jpg)](#%28counter._%28exercise._ex~3aworm5-terminated%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 26.3Structural versus Generative Recursion
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The template for algorithms is so general that it includes structurally recursive
    functions. Consider the left side of [figure 147](#%28counter._%28figure._fig~3agenerative-vs-structural%29%29).
    This template is specialized to deal with one trivial clause and one generative
    step. If we replace trivial? with [empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)
    and generate with [rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29),
    we get a template for list-processing functions; see the right side of [figure 147](#%28counter._%28figure._fig~3agenerative-vs-structural%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (general P)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [(trivial? P) (solve P)] &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      (combine-solutions &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        P &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (general &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          (generate P)))])) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (special P)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) P) (solve P)]
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      (combine-solutions &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        P &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;        (special ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) P)))]))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 147: From generative to structural recursion'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 437\. Define solve and combine-solutions so that
  prefs: []
  type: TYPE_NORMAL
- en: special computes the length of its input,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: special negates each number on the given list of numbers, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: special uppercases the given list of strings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What do you conclude from these exercises? [![image](../Images/ccc8ed93fea0dcdcd5016a3e98748ddf.jpg)](#%28counter._%28exercise._ex~3agenerative-length%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Now you may wonder whether there is a real difference between structural recursive
    design and the one for generative recursion. Our answer is “it depends.” Of course,
    we could say that all functions using structural recursion are just special cases
    of generative recursion. This “everything is equal” attitude, however, is of no
    help if we wish to understand the process of designing functions. It confuses
    two kinds of design that require different forms of knowledge and that have different
    consequences. One relies on a systematic data analysis and not much more; the
    other requires a deep, often mathematical, insight into the problem-solving process
    itself. One leads programmers to naturally terminating functions; the other requires
    a termination argument. Conflating these two approaches is unhelpful.
  prefs: []
  type: TYPE_NORMAL
- en: 26.4Making Choices
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you interact with a function f that sorts lists of numbers, it is impossible
    for you to know whether f is sort< or quick-sort<. The two functions behave in
    an observably equivalent way.Observable equivalence is a central concept from
    the study of programming languages. This raises the question of which of the two
    a programming language should provide. More generally, when we can design a function
    using structural recursion and generative recursion, we must figure out which
    one to pick.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate the consequences of this choice, we discuss a classical example
    from mathematics: the problem of finding the greatest common divisor (gcd) of
    two positive natural numbers.John Stone suggested the greatest common divisor
    as a suitable example. ‘All such numbers have 1 as divisor in common. On occasion—<wbr>say
    2 and 3—<wbr>this is also the only common divisor. Both 6 and 25 are numbers with
    several divisors:'
  prefs: []
  type: TYPE_NORMAL
- en: 6 is evenly divisible by 1, 2, 3, and 6;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 25 is evenly divisible by 1, 5, and 25.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'and yet, their greatest common divisor is 1\. In contrast, 18 and 24 have many
    common divisors and their greatest common divisor is 6:'
  prefs: []
  type: TYPE_NORMAL
- en: 18 is evenly divisible by 1, 2, 3, 6, 9, and 18;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 24 is evenly divisible by 1, 2, 3, 4, 6, 8, 12, and 24.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Completing the first three steps of the design recipe is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29)[>= 1] [N](part_two.html#%28tech._n%29)[>=
    1] -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds the greatest common divisor of n and m |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) ([gcd](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._gcd%29%29) 6 25) 1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) ([gcd](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._gcd%29%29) 18 24) 6)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([gcd](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._gcd%29%29) n m) 42)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The signature specifies the inputs as natural numbers greater or equal to 1.
  prefs: []
  type: TYPE_NORMAL
- en: From here we design both a structural and a generative recursive solution. Since
    this part of the book is about generative recursion, we merely present a structural
    solution in [figure 148](#%28counter._%28figure._fig~3astructural-gcd%29%29) and
    leave the design ideas to exercises. Just note that ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29)  ([remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29)  n  i)  ([remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29)  m  i)  0)
    encodes the idea that both n and m are “evenly divisible” by i.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (gcd-structural n m)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [N](part_two.html#%28tech._n%29)
    -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; determines the gcd of n and m less than i |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (greatest-divisor-<= i)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) i 1) 1]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) ([remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29) n i) ([remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29) m i) 0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                    i |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                    (greatest-divisor-<= ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) i 1)))])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (greatest-divisor-<= ([min](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._min%29%29) n m))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 148: Finding the greatest common divisor via structural recursion'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Exercise 438\. In your words: how does greatest-divisor-<= work? Use the design
    recipe to find the right words. Why does the locally defined greatest-divisor-<=
    recur on ([min](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._min%29%29)  n  m)?
    [![image](../Images/329e6a6315fb451f846ea0dc19e104b8.jpg)](#%28counter._%28exercise._ex~3aexplain-structural-gcd%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the design of gcd-structural is rather straightforward, it is also
    naive. It simply tests for every number between the smaller of n and m and 1 whether
    it divides both n and m evenly and returns the first such number. For small n
    and m, this works just fine. Consider the following example, however:'
  prefs: []
  type: TYPE_NORMAL
- en: (gcd-structural 101135853 45014640)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The result is 177. To get there, gcd-structural checks the “evenly divisible”
    condition for 101135676, that is, 101135853 - 177, numbers. Checking that many
    [remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29)s—<wbr>twice!—<wbr>is
    a large effort, and even reasonably fast computers need time to complete this
    task.Exercise 439\. Copy gcd-structural into DrRacket and evaluate
  prefs: []
  type: TYPE_NORMAL
- en: ([time](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._time%29%29) (gcd-structural 101135853 45014640))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: in the interactions area. [![image](../Images/552a6e99fbc22c0acc8c604097eb0d03.jpg)](#%28counter._%28exercise._ex~3agcd-struct-time%29%29)Since
    mathematicians recognized the inefficiency of this structural function a long
    time ago, they studied the problem of finding divisors in depth. The essential
    insight is that
  prefs: []
  type: TYPE_NORMAL
- en: for two natural numbers, L for large and S for small, the greatest common divisor
    is equal to the greatest common divisor of S and the remainder of L divided by
    S.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here is how we can articulate this insight as an equation:'
  prefs: []
  type: TYPE_NORMAL
- en: ([gcd](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._gcd%29%29) L S) == ([gcd](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._gcd%29%29) S ([remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29) L S))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Since ([remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29)  L  S)
    is smaller than both L and S, the right-hand side use of [gcd](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._gcd%29%29)
    consumes S first.Here is how this insight applies to our small example:'
  prefs: []
  type: TYPE_NORMAL
- en: The given numbers are 18 and 24.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: According to the insight, they have the same gcd as 18 and 6.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And these two have the same greatest common divisor as 6 and 0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we seem stuck because 0 is unexpected. But, 0 can be evenly divided by
    every number, meaning we have found our answer: 6.Working through the example
    not only validates the basic insight but also suggests how to turn the insight
    into an algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: when the smaller of the numbers is 0, we face a trivial case;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the larger of the two numbers is the solution in the trivial case;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generating a new problem requires a single [remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29)
    operation;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and the above equation tells us that the answer to the newly generated problem
    is also the answer to the originally given problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In short, the answers for the four design-recipe questions fall out.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (gcd-generative n m)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [N](part_two.html#%28tech._n%29)[>=
    1] [N](part_two.html#%28tech._n%29)[>=1] -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; generative recursion |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; ([gcd](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._gcd%29%29)  L  S)  ==  ([gcd](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._gcd%29%29)  S  ([remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29)  L  S))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (clever-gcd L S)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) S 0) L]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (clever-gcd S ([remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29) L S))])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (clever-gcd ([max](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._max%29%29) m n) ([min](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._min%29%29) m n))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 149: Finding the greatest common divisor via generative recursion'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 149](#%28counter._%28figure._fig~3agenerative-gcd%29%29) presents the
    definition of the algorithm. The [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    definition introduces the workhorse of the function: clever-gcd. Its first [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    line discovers the trivial case by comparing smaller to 0 and produces the matching
    solution. The generative step uses smaller as the new first argument and ([remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29)  large  small)
    as the new second argument to clever-gcd.'
  prefs: []
  type: TYPE_NORMAL
- en: If we now use gcd-generative with our above example,
  prefs: []
  type: TYPE_NORMAL
- en: (gcd-generative 101135853 45014640)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'we see that the response is nearly instantaneous. A hand-evaluation shows that
    clever-gcd recurs only nine times before it produces the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (clever-gcd 101135853 45014640) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (clever-gcd 45014640 11106573) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (clever-gcd 11106573 588348) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (clever-gcd 588348 516309) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (clever-gcd 516309 72039) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (clever-gcd 72039 12036) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (clever-gcd 12036 11859) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (clever-gcd 11859 177) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (clever-gcd 177 0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This also means that it checks only nine [remainder](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remainder%29%29)
    conditions, clearly a much smaller effort than gcd-structural expends.Exercise 440\.
    Copy gcd-generative into the definitions area of DrRacket and evaluate
  prefs: []
  type: TYPE_NORMAL
- en: ([time](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._time%29%29) (gcd-generative 101135853 45014640))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: in the interactions area. [![image](../Images/a6ca6074896467f120ae94f09c4d7ef5.jpg)](#%28counter._%28exercise._ex~3agcd-gen-time%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: You may now think that generative recursion design has discovered a much faster
    solution to the [gcd](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._gcd%29%29)
    problem, and you may conclude that generative recursion is always the right way
    to go. This judgment is too rash for three reasons. First, even a well-designed
    algorithm isn’t always faster than an equivalent structurally recursive function.
    For example, quick-sort< wins only for large lists; for small ones, the standard
    sort> function is faster. Worse, a badly designed algorithm can wreak havoc on
    the performance of a program. Second, it is typically easier to design a function
    using the recipe for structural recursion. Conversely, designing an algorithm
    requires an idea of how to generate new problems, a step that often requires some
    deep insight. Finally, people who read functions can easily understand structurally
    recursive functions, even without much documentation. To understand an algorithm,
    the generative step must be explained really well, but generating a really good
    explanation can be a lot of hard work.
  prefs: []
  type: TYPE_NORMAL
- en: Experience shows that most functions in a program employ structural design;
    only a few exploit generative recursion. When we encounter a situation where a
    design could use the recipe for either structural or generative recursion, the
    best approach is to start with a structural version. If the result turns out to
    be too slow for the task at hand—<wbr>and only then—<wbr>it is time to explore
    the use of generative recursion.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 441\. Evaluate
  prefs: []
  type: TYPE_NORMAL
- en: (quick-sort< ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 10 6 8 9 14 12 3 11 14 16 2))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: by hand. Show only those lines that introduce a new recursive call to quick-sort<.
    How many recursive applications of quick-sort< are required? How many recursive
    applications of the [append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29)
    function? Suggest a general rule for a list of length n.Evaluate
  prefs: []
  type: TYPE_NORMAL
- en: (quick-sort< ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3 4 5 6 7 8 9 10 11 12 13 14))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: by hand. How many recursive applications of quick-sort< are required? How many
    recursive applications of [append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29)?
    Does this contradict the first part of the exercise? [![image](../Images/72dd61c5036f6c32511426b9b639225c.jpg)](#%28counter._%28exercise._ex~3aquick-sort-time1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 442\. Add sort< and quick-sort< to the definitions area. Run tests
    on the functions to ensure that they work on basic examples. Also develop create-tests,
    a function that creates large test cases randomly. Then explore how fast each
    works on various lists.
  prefs: []
  type: TYPE_NORMAL
- en: Does the experiment confirm the claim that the plain sort< function often wins
    over quick-sort< for short lists and vice versa?
  prefs: []
  type: TYPE_NORMAL
- en: Determine the cross-over point. Use it to build a clever-sort function that
    behaves like quick-sort< for large lists and like sort< for lists below this cross-over
    point. Compare with [exercise 427](#%28counter._%28exercise._ex~3aquick-sort-switch%29%29).
    [![image](../Images/147fc93116c91ae7f6e29c7d3b12f6f0.jpg)](#%28counter._%28exercise._ex~3aquick-sort-time2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 443\. Given the header material for gcd-structural, a naive use of
    the design recipe might use the following template or some variant:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (gcd-structural n m)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 1) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) m 1)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) n 1) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) m 1)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 1) ([>](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3e%29%29) m 1)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (gcd-structural ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n) ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) m)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (gcd-structural ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n) m) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (gcd-structural n ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) m)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Why is it impossible to find a divisor with this strategy? [![image](../Images/5cd46a664ce0799d67385e229527b1ba.jpg)](#%28counter._%28exercise._ex~3agcd-structural1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 444\. [Exercise 443](#%28counter._%28exercise._ex~3agcd-structural1%29%29)
    means that the design for gcd-structural calls for some planning and a design
    by composition approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'The very explanation of “greatest common denominator” suggests a two-stage
    approach. First design a function that can compute the listIdeally, you should
    use sets not lists. of divisors of a natural number. Second, design a function
    that picks the largest common number in the list of divisors of n and the list
    of divisors of m. The overall function would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (gcd-structural S L)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (largest-common (divisors S S) (divisors S L))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [N](part_two.html#%28tech._n%29)[>= 1] [N](part_two.html#%28tech._n%29)[>=
    1] -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [N](part_two.html#%28tech._n%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the divisors of l smaller or equal to k |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (divisors k l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [N](part_two.html#%28tech._n%29)]
    [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [N](part_two.html#%28tech._n%29)]
    -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds the largest number common to both k and l |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (largest-common k l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   1) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Why do you think divisors consumes two numbers? Why does it consume S as the
    first argument in both uses? [![image](../Images/355914f1b2d36a0f98103eafa3217bf6.jpg)](#%28counter._%28exercise._ex~3agcd-structural2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 27Variations on the Theme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The design of an algorithm starts with an informal description of a process
    of how to create a problem that is more easily solvable than the given one and
    whose solution contributes to the solution of the given problem. Coming up with
    this kind of idea requires inspiration, penetration of an area, and experience
    with many different kinds of examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter presents several illustrative examples of algorithms. Some are
    directly drawn from mathematics, which is the source of many ideas; others come
    from computational settings. The first example is a graphical illustration of
    our principle: the Sierpinski triangle. The second one explains the divide-and-conquer
    principle with the simple mathematical example of finding the root of a function.
    It then shows how to turn this idea into a fast algorithm for searching sequences,
    a widely used application. The third section concerns “parsing” of sequences of
    [1String](part_one.html#%28tech._1string%29)s, also a common problem in real-world
    programming.'
  prefs: []
  type: TYPE_NORMAL
- en: 27.1Fractals, a First Taste
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Fractals play an important role in computational geometry. Flake writes in The
    Computational Beauty of Nature (The MIT Press, 1998) that “geometry can be extended
    to account for objects with a fractional dimension. Such objects, known as fractals,
    come very close to capturing the richness and variety of forms found in nature.
    Fractals possess structural self-similarity on multiple ... scales, meaning that
    a piece of a fractal will often look like the whole.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/0392f4973c38028182719f0fb6df1693.jpg) ![image](../Images/a4f1e00948a10bda16a59f5f3a855b84.jpg)
    ![image](../Images/c52777d0e5cd33b86c1533dfa382fc43.jpg) ![image](../Images/0554b2230e10cc85b75c39b6d21000aa.jpg)
    ![image](../Images/ad6d683f4facb3be90b6f5f294194d6a.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 150: The Sierpinski triangle'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 150](#%28counter._%28figure._fig~3asiepic%29%29) displays an example
    of a fractal shape, known as the Sierpinski triangle. The basic shape is an (equilateral)
    triangle, like the one in the center. When this triangle is composed sufficiently
    many times in a triangular fashion, we get the left-most shape.'
  prefs: []
  type: TYPE_NORMAL
- en: The right-most image in [figure 150](#%28counter._%28figure._fig~3asiepic%29%29)
    explains the generative step. When taken by itself, it says that given a triangle,
    find the midpoint of each side and connect them to each other. This step yields
    four triangles; repeat the process for each of the outer of these three triangles
    unless these triangles are too small.
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative explanation, well suited for the shape composition functions
    in the 2htdp/image library,We owe this solution to Marc Smith. is based on the
    transition from the image in the center to the image on the right. By juxtaposing
    two of the center triangles and then placing one copy above these two, we also
    get the shape on the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > tri |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/01308c2c9a0179e4aef0631a80c155f2.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) tri tri)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/dcea584919f23ff718e3357c4cb73a08.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([above](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%29%29) tri ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) tri tri))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/7cd70d88c883a53338ae9aafc3d97854.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This section uses the alternative description to design the Sierpinski algorithm;
    [Accumulators as Results](part_six.html#%28part._sec~3afractal-acc%29) deals with
    the first description. Given that the goal is to generate the image of an equilateral
    triangle, we encode the problem with a (positive) number, the length of the triangle’s
    side. This decision, yields a signature, purpose statement, and header:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates Sierpinski triangle of size side |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sierpinski side)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([triangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._triangle%29%29) side ''outline ''red))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Now it is time to address the four questions of generative recursion:'
  prefs: []
  type: TYPE_NORMAL
- en: When the given number is so small that drawing triangles inside of it is pointless,
    the problem is trivial.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In that case, it suffices to generate a triangle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, the algorithm must generate a Sierpinski triangle of size side /
    2 because juxtaposing two such triangles in either direction yields one of size
    side.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If half-sized is the Sierpinski triangle of size side / 2, then
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ([above](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%29%29) half-sized
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) half-sized half-sized))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: is a Sierpinski triangle of size side.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With these answers, it is straightforward to define the function.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) SMALL 4) ; a
    size measure in terms of pixels |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) small-triangle ([triangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._triangle%29%29) SMALL ''outline ''red))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Number](part_one.html#%28tech._number%29) -> [Image](part_one.html#%28tech._image%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; generative creates Sierpinski Δ of size side by generating |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; one for ([/](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2F%29%29) side 2)
    and placing one copy above two copies |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (sierpinski SMALL) small-triangle)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (sierpinski ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 2 SMALL))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([above](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%29%29) small-triangle
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                      ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) small-triangle small-triangle)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sierpinski side)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) side SMALL) ([triangle](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._triangle%29%29) side ''outline ''red)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) half-sized (sierpinski ([/](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2F%29%29) side 2))))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([above](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%29%29) half-sized ([beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29) half-sized half-sized)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 151: The Sierpinski algorithm'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 151](#%28counter._%28figure._fig~3asierpinski-code%29%29) spells out
    the details. The “triviality condition” translates to ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29)  side  SMALL)
    for some constant SMALL. For the trivial answer, the function returns a (red)
    triangle of the given size. In the recursive case, a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression introduces the name half-sized for the Sierpinski triangle that is
    half as big as the specified size. Once the recursive call has generated the small
    Sierpinski triangle, the [above](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._above%29%29)-[beside](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._beside%29%29)
    composition of three copies yields the desired triangle.'
  prefs: []
  type: TYPE_NORMAL
- en: The figure highlights two other points. First, the purpose statement is articulated
    as an explanation of what the function accomplishes
  prefs: []
  type: TYPE_NORMAL
- en: ; create Sierpinski triangle of size side by ...
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and how it accomplishes this goal:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; ... generating one of size ([/](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2F%29%29) side 2)
    and |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; placing one copy above two composed copies |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Second, the examples illustrate the two possible cases: one if the given size
    is small enough, and one for a size that is too large still. In the latter case,
    the expression that computes the expected value explains exactly the meaning of
    the purpose statement.'
  prefs: []
  type: TYPE_NORMAL
- en: Since sierpinski is based on generative recursion, defining the function and
    testing it is not the last step. We must also consider why the algorithm terminates
    for any given legal input. The input of sierpinski is a single positive number.
    If the number is smaller than SMALL, the algorithm terminates. Otherwise, the
    recursive call uses a number that is half as large as the given one. Hence, the
    algorithm must terminate for all positive sides, assuming SMALL is positive, too.
  prefs: []
  type: TYPE_NORMAL
- en: One view of the Sierpinski process is that it divides its problem in half until
    it is immediately solvable. With a little imagination, you can see that the process
    can be used to search for numbers with certain properties. The next section explains
    this idea in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 27.2Binary Search
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Applied mathematicians model the real-world with non-linear equations and then
    try to solve them. Specifically, they translate problems into a function f from
    numbers to numbers and look for some number r such that
  prefs: []
  type: TYPE_NORMAL
- en: f(r) = 0.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The value r is called the root of f.Here is a problem from the physical domain:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem A rocket is flying at the constant speed of v miles per hour
    on a straight line towards some target, d0 miles away. It then accelerates at
    the rate of a miles per hour squared for t hours. When will it hit its target?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Physics tells us that the distance covered is the following function of time:'
  prefs: []
  type: TYPE_NORMAL
- en: d(t) = (v * t + 1/2 * a * t2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The question of when it hits the target asks us to find the time t0 such that
    the object reaches the desired goal:'
  prefs: []
  type: TYPE_NORMAL
- en: d0 = (v * t0 + 1/2 * a * t02)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: From algebra we know that this is a quadratic equation and that it is possible
    to solve such equations given d0, a, and v satisfy certain conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Generally such problems call for more complexity than quadratic equations. In
    response, mathematicians have spent the last few centuries developing root-finding
    methods for different types of functions. In this section, we study a solution
    that is based on the Intermediate Value Theorem (IVT), an early result of analysis.
    The resulting algorithm is a primary example of generative recursion based on
    a mathematical theorem. Computer scientists have generalized it to the binary
    search algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/181db63813ef721d36a354f6b8d78909.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 152: A numeric function f with root in interval [a,b] (stage 1)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Intermediate Value Theorem says that a continuous function f has a root
    in an interval [a,b] if f(a) and f(b) are on opposite sides of the x-axis. By
    continuous we mean a function that doesn’t “jump,” that doesn’t have gaps, and
    that proceeds on a “smooth” path.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 152](#%28counter._%28figure._fig~3aroot%29%29) illustrates the Intermediate
    Value Theorem with a graph. The function f is below the x-axis at a and above
    at b.We thank Neil Toronto for plot. It is a continuous function, as suggested
    by the uninterrupted, smooth graph. And indeed, f intersects the x-axis somewhere
    between a and b, labeled “range 1” in the figure.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now take a look at the midpoint between a and b:'
  prefs: []
  type: TYPE_NORMAL
- en: m = (a+b) / 2 .
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'It partitions the interval [a,b] into two smaller, equally large intervals.
    We can now compute the value of f at m and see whether it is below or above 0\.
    Here f(m) > 0, so according to the Intermediate Value Theorem, the root is in
    the left interval: [a,m]. Our picture confirms this because the root is in the
    left half of the interval, labeled “range 2” in [figure 152](#%28counter._%28figure._fig~3aroot%29%29).We
    now have a description of the key step in the root-finding process. The next step
    is to translate this description into a ISL+ algorithm. Our first task is to agree
    on the exact task of find-root. Clearly the algorithm consumes a function and
    the boundaries of the interval in which we expect to find a root:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-root f left right) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The three parameters can’t be just any function and numbers. For find-root to
    work, we must assume that
  prefs: []
  type: TYPE_NORMAL
- en: '| ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (f left) 0 (f right))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (f right) 0 (f left)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'holds, that is, f’s values for left and right must be on opposite side’s of
    the x-axis.Next we need to fix the function’s result and formulate a purpose statement.
    Simply put, find-root finds an interval that contains a root. The search divides
    the interval until its size, ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  right  left),
    is tolerably small, say, smaller than some constant ε. At that point, the function
    could produce one of three results: the left boundary, the right one, or a representation
    of the interval. Any one of them completely identifies the interval, and since
    it is simpler to return numbers, we pick the left boundary. Here is the complete
    header material:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determine R such that f has a root in [R,([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  R  ε)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; assume  f is continuous |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; (2) ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29)  ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29)  (f  left)  0  (f  right))  ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29)  (f  right)  0  (f  left)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; generative divide interval in half, the root is in |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; one of the two halves, pick according to (2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-root f left right)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Exercise 445\. Consider the following function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (poly x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) x 2) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) x 4)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It defines a binomial for which we can determine its roots by hand:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (poly 2) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (poly 4) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Use poly to formulate a [check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29)
    test for find-root.Also use poly to illustrate the root-finding process. Start
    with the interval [3,6] and tabulate the information as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| step |  | left |  | f(left) |  | right |  | f(right) |  | mid |  | f(mid)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| n=1 |  | 3 |  | -1 |  | 6.00 |  | 8.00 |  | 4.50 |  | 1.25 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| n=2 |  | 3 |  | -1 |  | 4.50 |  | 1.25 |  | ? |  | ? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Assume ε is 0.5 for the construction of this table. [![image](../Images/1e58864f6631ac128daae9673f43e5c7.jpg)](#%28counter._%28exercise._ex~3afind-root-example%29%29)Our
    next task is to address the four questions of algorithm design:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need a condition that describes when the problem is solved and a matching
    answer. Given our discussion so far, this is straightforward:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) right left) ε)
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The matching result in the trivial case is left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the generative case, we need an expression that generates new problems
    for find-root. According to our informal description, this step requires determining
    the midpoint and its function value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) mid ([/](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2F%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) left right) 2))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) f@m (f mid)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The midpoint is then used to pick the next interval. Following IVT, the interval
    [left,mid] is the next candidate if
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (f left) 0 f@m) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) f@m 0 (f left)))
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: while [mid,right] is used for the recursive call if
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) f@m 0 (f right)) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (f right) 0 f@m))
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Translated into code, the body of [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    must be a conditional:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (f left) 0 f@m) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) f@m 0 (f left)))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (find-root f left mid) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) f@m 0 (f right)) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (f right) 0 f@m))
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (find-root f mid right) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))])
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: In both clauses, we use find-root to continue the search.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The answer to the final question is obvious. Since the recursive call to find-root
    finds the root of f, there is nothing else to do.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The completed function is displayed in [figure 153](#%28counter._%28figure._fig~3aroot-of-f%29%29);
    the following exercises elaborate on its design.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines R such that f has a root in [R,([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  R  ε)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; assume  f is continuous |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; assume  ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29)  ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29)  (f  left)  0  (f  right))  ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29)  (f  right)  0  (f  left)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; generative divide interval in half, the root is in one of the two |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; halves, pick according to assumption |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-root f left right)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) right left) ε) left]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) mid ([/](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2F%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) left right) 2))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) f@mid (f mid)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           [([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (f left) 0 f@mid) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) f@mid 0 (f left)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|            (find-root f left mid)] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           [([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) f@mid 0 (f right)) ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) (f right) 0 f@mid))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|            (find-root f mid right)]))])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 153: The find-root algorithm'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 446\. Add the test from [exercise 445](#%28counter._%28exercise._ex~3afind-root-example%29%29)
    to the program in [figure 153](#%28counter._%28figure._fig~3aroot-of-f%29%29).
    Experiment with different values for ε. [![image](../Images/0640a7231bb5a47ea5c398027452974e.jpg)](#%28counter._%28exercise._ex~3afind-root-test%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 447\. The poly function has two roots. Use find-root with poly and
    an interval that contains both roots. [![image](../Images/e73ac9bca1bb0930415de785b0312a9f.jpg)](#%28counter._%28exercise._ex~3afind-root-test2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 448\. The find-root algorithm terminates for all (continuous) f, left,
    and right for which the assumption holds. Why? Formulate a termination argument.
  prefs: []
  type: TYPE_NORMAL
- en: Hint Suppose the arguments of find-root describe an interval of size S1. How
    large is the distance between left and right for the first and second recursive
    call to find-root? After how many steps is ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  right  left)
    smaller than or equal to ε? [![image](../Images/493acbe08e14e58020d6824aa60aa23d.jpg)](#%28counter._%28exercise._ex~3afind-root-termination%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 449\. As presented in [figure 153](#%28counter._%28figure._fig~3aroot-of-f%29%29),
    find-root computes the value of f for each boundary value twice to generate the
    next interval. Use [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    to avoid this re-computation.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, find-root recomputes the value of a boundary across recursive calls.
    For example, (find-root  f  left  right) computes (f  left) and, if [left,mid]
    is chosen as the next interval, find-root computes (f  left) again. Introduce
    a helper function that is like find-root but consumes not only left and right
    but also (f  left) and (f  right) at each recursive stage.
  prefs: []
  type: TYPE_NORMAL
- en: How many re-computations of (f  left) does this design maximally avoid? Note
    The two additional arguments to this helper function change at each recursive
    stage but the change is related to the change in the numeric arguments. These
    arguments are so-called accumulators, which are the topic of [Accumulators](part_six.html).
    [![image](../Images/63e2f1c9237f4b56ab5fdca026687646.jpg)](#%28counter._%28exercise._ex~3afind-root-locals%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 450\. A function f is monotonically increasing if ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29)  (f  a)  (f  b))
    holds whenever ([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)  a  b)
    holds. Simplify find-root assuming the given function is not only continuous but
    also monotonically increasing. [![image](../Images/e4bd4408a0b29e7ea278305bd29d353f.jpg)](#%28counter._%28exercise._ex~3afind-root-monotonic%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 451\. A table is a structure of two fields: the natural number VL
    and a function array,Many programming languages, including Racket, support arrays
    and vectors, which are similar to tables. which consumes natural numbers and,
    for those between 0 and VL (exclusive), produces answers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) table [length array])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Table is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-table  [N](part_two.html#%28tech._n%29)  [[N](part_two.html#%28tech._n%29)  ->  [Number](part_one.html#%28tech._number%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Since this data structure is somewhat unusual, it is critical to illustrate
    it with examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) table1 (make-table 3 ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (i) i)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [N](part_two.html#%28tech._n%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (a2 i)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) i 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [pi](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._pi%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) "table2
    is not defined for i =!= 0"))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) table2 (make-table 1 a2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here table1’s array function is defined for more inputs than its length field
    allows; table2 is defined for just one input, namely 0. Finally, we also define
    a useful function for looking up values in tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Table](#%28tech._table%29)  [N](part_two.html#%28tech._n%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; looks up the ith value in array of t |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (table-ref t i)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ((table-array t) i)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The root of a table t is a number in (table-array  t) that is close to 0. A
    root index is a natural number i such that (table-ref  t  i) is a root of table
    t. A table t is monotonically increasing if (table-ref  t  0) is less then (table-ref  t  1),
    (table-ref  t  1) is less than (table-ref  t  2), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Design find-linear. The function consumes a monotonically increasing table and
    finds the smallest index for a root of the table. Use the structural recipe for
    [N](part_two.html#%28tech._n%29), proceeding from 0 through 1, 2, and so on to
    the array-length of the given table. This kind of root-finding process is often
    called a linear search.
  prefs: []
  type: TYPE_NORMAL
- en: Design find-binary, which also finds the smallest index for root of a monotonically
    increasing table but uses generative recursion to do so. Like ordinary binary
    search, the algorithm narrows an interval down to the smallest possible size and
    then chooses the index. Don’t forget to formulate a termination argument.
  prefs: []
  type: TYPE_NORMAL
- en: Hint The key problem is that a table index is a natural number, not a plain
    number. Hence the interval boundary arguments for find must be natural numbers.
    Consider how this observation changes (1) the nature of trivially solvable problem
    instances, (2) the midpoint computation, (3) and the decision which interval to
    generate next. To make this concrete, think about a table with 1024 slots and
    the root at 1023\. How many recursive calls to find are needed in find-linear
    and find-binary respectively? [![image](../Images/a1177b93d62927896dba374766dd9c58.jpg)](#%28counter._%28exercise._ex~3afind-root-discrete%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 27.3A Glimpse at Parsing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As mentioned in [Incremental Refinement](part_four.html#%28part._ch~3afiles%29),
    computers come with files, which provide a form of permanent memory. From our
    perspective a file is just a list of [1String](part_one.html#%28tech._1string%29)s,The
    exact convention differs from one operating system to another, but for our purposes
    this is irrelevant. though interrupted by a special string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A File is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  "\n"  [File](#%28tech._file%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  [1String](part_one.html#%28tech._1string%29)  [File](#%28tech._file%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation represent the content of a file |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; "\n" is the newline character |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The idea is that [File](#%28tech._file%29)s are broken into lines, where "\n"
    represents the so-called newline character, which indicates the end of a line.
    Let’s also introduce lines before we move on:'
  prefs: []
  type: TYPE_NORMAL
- en: ; A Line is a [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1String](part_one.html#%28tech._1string%29)].
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Many functions need to process files as list of lines. The [read-lines](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-lines%29%29)
    from the 2htdp/batch-io library is one of them. Concretely, the function turns
    the file
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   "h" "o" "w" " " "a" "r" "e" " " "y" "o" "u" "\n" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   "d" "o" "i" "n" "g" "?" "\n" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   "a" "n" "y" " " "p" "r" "o" "g" "r" "e" "s" "s" "?") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'into a list of three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "h" "o" "w" "
    " "a" "r" "e" " " "y" "o" "u") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "d" "o" "i" "n" "g" "?")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "a" "n" "y" "
    " "p" "r" "o" "g" "r" "e" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         "s" "s" "?")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Similarly, the file
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "a" "b" "c" "\n" "d" "e" "\n" "f" "g" "h" "\n")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'also corresponds to a list of three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "a" "b" "c")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "d" "e")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "f" "g" "h"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! What are the list-of-lines representation for these three cases: ''(),
    ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  "\n"),
    and ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  "\n"  "\n")?.
    Why are these examples important test cases?'
  prefs: []
  type: TYPE_NORMAL
- en: The problem of turning a sequence of [1String](part_one.html#%28tech._1string%29)s
    into a list of lines is called the parsing problem. Many programming languages
    provide functions that retrieve lines, words, numbers and other kinds of so-called
    tokens from files. But even if they do, it is common that programs need to parse
    these tokens even further. This section provides a glimpse at a parsing technique.
    Parsing is so complex and so central to the creation of full-fledged software
    applications, however, that most undergraduate curricula come with at least one
    course on parsing. So do not think you can tackle real parsing problems properly
    even after mastering this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by stating the obvious—<wbr>a signature, a purpose statement, one
    of the above examples, and a header—<wbr>for a function that turns a [File](#%28tech._file%29)
    into a list of [Line](#%28tech._line%29)s:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [File](#%28tech._file%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Line](#%28tech._line%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; converts a file into a list of lines |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (file->list-of-lines
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "a" "b" "c" "\n"
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                       "d" "e" "\n" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                       "f" "g" "h" "\n")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "a" "b" "c")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "d" "e")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "f" "g" "h")))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (file->list-of-lines afile) ''())
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It is also easy to describe the parsing process, given our experience with
    [Recursion without Structure](#%28part._sec~3abundle%29):'
  prefs: []
  type: TYPE_NORMAL
- en: The problem is trivially solvable if the file is '().
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In that case, the file doesn’t contain a line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise, the file contains at least one "\n" or some other [1String](part_one.html#%28tech._1string%29).
    These items—<wbr>up to and including the first "\n", if any—<wbr>must be separated
    from the rest of the [File](#%28tech._file%29). The remainder is a new problem
    of the same kind that file->list-of-lines can solve.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It then suffices to [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    the initial segment as a single line to the list of [Line](#%28tech._line%29)s
    that result from the rest of the [File](#%28tech._file%29).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The four questions suggest a straightforward instantiation of the template
    for generative recursive functions. Because the separation of the initial segment
    from the rest of the file requires a scan of an arbitrarily long list of [1String](part_one.html#%28tech._1string%29)s,
    we put two auxiliary functions on our wish list: first-line, which collects all
    [1String](part_one.html#%28tech._1string%29)s up to, but excluding, the first
    occurrence of "\n" or the end of the list; and remove-first-line, which removes
    the very same items that first-line collects.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [File](#%28tech._file%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Line](#%28tech._line%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; converts a file into a list of lines |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (file->list-of-lines afile)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) afile) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) (first-line afile)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|            (file->list-of-lines (remove-first-line afile)))])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [File](#%28tech._file%29) -> [Line](#%28tech._line%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (first-line afile)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) afile) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) afile) NEWLINE) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) afile) (first-line ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) afile)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [File](#%28tech._file%29) -> [Line](#%28tech._line%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (remove-first-line afile)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) afile) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) afile) NEWLINE) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) afile)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (remove-first-line ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) afile))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) NEWLINE "\n") ; the
    [1String](part_one.html#%28tech._1string%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 154: Translating a file into a list of lines'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: From here, it is easy to create the rest of the program. In file->list-of-lines,
    the answer in the first clause must be '() because an empty file does not contain
    any lines. The answer in the second clause must [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    the value of (first-line  afile) onto the value (file->list-of-lines  (remove-first-line  afile)),
    because the first expression computes the first line and the second one computes
    the rest of the lines. Finally, the auxiliary functions traverse their inputs
    in a structurally recursive manner; their development is a straightforward exercise.
    [Figure 154](#%28counter._%28figure._fig~3afile2list%29%29) presents the complete
    program code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how file->list-of-lines processes the second test:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (file->list-of-lines |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "a" "b" "c" "\n" "d" "e" "\n" "f" "g" "h" "\n"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "a" "b" "c")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (file->list-of-lines |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "d" "e" "\n" "f" "g" "h" "\n")))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "a" "b" "c")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "d" "e")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         (file->list-of-lines |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "f" "g" "h" "\n"))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "a" "b" "c")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "d" "e")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "f" "g" "h")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                   (file->list-of-lines ''())))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "a" "b" "c")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "d" "e")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) "f" "g" "h")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ''()))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This evaluation is another reminder that the argument of the recursive application
    of file->list-of-lines is almost never the rest of the given file. It also shows
    why this generative recursion is guaranteed to terminate for every given [File](#%28tech._file%29).
    Every recursive application consumes a list that is shorter than the given one,
    meaning the recursive process stops when the process reaches '().
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 452\. Both first-line and remove-first-line are missing purpose statements.
    Articulate proper statements. [![image](../Images/e7fd05b04a8b6bbad289b2e8d7e4a87a.jpg)](#%28counter._%28exercise._ex~3afile-lines-purpose%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 453\. Design the function tokenize. It turns a [Line](#%28tech._line%29)
    into a list of tokens. Here a token is either a [1String](part_one.html#%28tech._1string%29)
    or a [String](part_one.html#%28tech._string%29) that consists of lower-case letters
    and nothing else. That is, all white-space [1String](part_one.html#%28tech._1string%29)s
    are dropped; all other non-letters remain as is; and all consecutive letters are
    bundled into “words.” Hint Read up on the [string-whitespace?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-whitespace~3f%29%29)
    function. [![image](../Images/124c5ba6b8f4e8f330c3a3102cdfbeb6.jpg)](#%28counter._%28exercise._ex~3aparse-words%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 454\. Design create-matrix. The function consumes a number n and a
    list of n2 numbers. It produces a n x n matrix, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (create-matrix 2 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2 3 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 4)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Make up a second example. [![image](../Images/0cb73628bf31e0d5370a02d887860a61.jpg)](#%28counter._%28exercise._ex~3amatrix-gen%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 28Mathematical Examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many solutions to mathematical problems employ generative recursion. A future
    programmer must get to know such solutions for two reasons. On one hand, a fair
    number of programming tasks are essentially about turning these kinds of mathematical
    ideas into programs. On the other hand, practicing with such mathematical problems
    often proves inspirational for the design of algorithms. This chapter deals with
    three such problems.
  prefs: []
  type: TYPE_NORMAL
- en: 28.1Newton’s Method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Binary Search](#%28part._sec~3abinary-search%29) introduces one method for
    finding the root of a mathematical function. As the exercises in the same section
    sketch, the method naturally generalizes to computational problems, such as finding
    certain values in tables, vectors, and arrays. In mathematical applications, programmers
    tend to employ methods that originate from analytical mathematics. A prominent
    one is due to Newton. Like binary search, the so-called Newton method repeatedly
    improves an approximation to the root until it is “close enough.” Starting from
    a guess, say, r1, the essence of the process is to construct the tangent of f
    at r1 and to determine its root. While the tangent approximates the function,
    it is also straightforward to determine its root. By repeating this process sufficiently
    often,Newton proved this fact. an algorithm can find a root r for which (f r)
    is close enough to 0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clearly this process relies on two pieces of domain knowledge about tangents:
    their slopes and roots. Informally, a tangent of f at some point r1 is the line
    that goes through the point (r1, f(r1)) and has the same slope as f. One mathematical
    way to obtain the tangent’s slope is to pick two close points on the x-axis that
    are equidistant from r1 and to use the slope of the line determined by f at those
    two points. The convention is to choose a small number ε and to work with r1 +
    ε and r1 - ε. That is, the points are (r1 - ε, f(r1 - ε)) and (r1 + ε, f(r1 +
    ε)), which determines a line and a slope:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/73b06b5b786f69bf144f70bcef5368b2.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Exercise 455\. Translate this mathematical formula into the ISL+ function slope,
    which maps function f and a number r1 to the slope of f at r1. Assume that ε is
    a global constant.DrRacket allows the use of Greek symbols such as ε. But you
    can also wrote EPSILON instead. For your examples, use functions whose exact slope
    you can figure out, say, horizontal lines, linear functions, and perhaps polynomials
    if you know some calculus. [![image](../Images/c0e47d531eee47154b68401a59b3ddcc.jpg)](#%28counter._%28exercise._ex~3aslope%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: The second piece of domain knowledge concerns the root of a tangent, which is
    just a line or a linear function. The tangent goes through (r1, f(r1)) and has
    the above slope. Mathematically, it is defined as
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/d5c21033bc15dd1ec6fa753989b76b5f.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Finding the root of tangent means finding a value root-of-tangent so that tanget(root-of-tangent)
    equals 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/9cc55584b0930b52e3a950d7a42be144.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'We can solve this equation in a straightforward manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/c45008bbfe93c046ae3663cb24df6928.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Exercise 456\. Design root-of-tangent, a function that maps f and r1 to the
    root of the tangent through (r1,(f  r1)). [![image](../Images/6427f4779cb1b994058804184ebda78a.jpg)](#%28counter._%28exercise._ex~3aroot-of-tangent%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can use the design recipe to translate the description of Newton’s process
    into an ISL+ program. The function—<wbr>let’s call it newton in honor of its inventor—<wbr>consumes
    a function f and a number r1:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds a number r such that (f  r) is small |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; generative repeatedly generate improved guesses |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (newton f r1) 1.0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'For the template of newton, we turn to the central four questions of the design
    recipe for generative recursion:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If (f  r1) is close enough to 0, the problem is solved. Close to 0 could be
    mean (f  r1) is a small positive number or a small negative number. Hence we check
    its absolute value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) ([abs](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._abs%29%29) (f r1)) ε)
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The solution is r1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The generative step of the algorithm consists of finding the root of the tangent
    of f at r1, which generates the next guess. By applying newton to f and this new
    guess, we resume the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The answer of the recursion is also the answer of the original problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ; [[Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds a number r such that ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29)  ([abs](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._abs%29%29)  (f  r))  ε)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-within](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-within%29%29) (newton poly 1) 2 ε)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-within](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-within%29%29) (newton poly 3.5) 4 ε)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (newton f r1)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) ([abs](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._abs%29%29) (f r1)) ε) r1]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (newton f (root-of-tangent f r1))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; see [exercise 455](#%28counter._%28exercise._ex~3aslope%29%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (slope f r) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; see [exercise 456](#%28counter._%28exercise._ex~3aroot-of-tangent%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (root-of-tangent f r) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 155: The Newton process'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 155](#%28counter._%28figure._fig~3anewton%29%29) displays newton. It
    includes two tests that are derived from the tests in [Binary Search](#%28part._sec~3abinary-search%29)
    for find-root. After all, both functions search for the root of a function and
    poly has two known roots.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/9db631529e37054f21950ddee75cd545.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 156: A plot of poly on the interval [-1,5]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We are not finished with the design of newton. The new, seventh step of the
    design recipe calls for an investigation into the termination behavior of the
    function. For newton, the problem shows up with poly:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (poly x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) x 2) ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) x 4)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As mentioned, its roots are 2 and 4. The graph of poly in [figure 156](#%28counter._%28figure._fig~3apoly-root%29%29)
    confirms these roots and also shows that between the two roots the function flattens
    out. For a mathematically inclined person, this shape begs the question what newton
    computes for an initial guess of 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (poly 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| -1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (newton poly 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| /: division by zero |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The explanation is that slope produces a “bad” value and the root-of-tangent
    function turns it into an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (slope poly 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| 0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (root-of-tangent poly 3) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| /: division by zero |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In addition to this run-time error, newton exhibits two other problems with
    respect to termination. Fortunately, we can demonstrate both with poly. The first
    one concerns the nature of numbers, which we briefly touched on in [The Arithmetic
    of Numbers](part_one.html#%28part._sec~3aarith-num%29). It is safe to ignore the
    distinction between exact and inexact numbers for many beginner exercises in programming
    but when it comes to translating mathematics into programs, you need to proceed
    with extreme caution. Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (newton poly 2.9999) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'An ISL+ program treats 2.9999 as an exact number and the computations in newton
    process it as such, though because the numbers aren’t integers, the computation
    uses exact rational fractions. Since the arithmetic for fractions can get much
    slower than the arithmetic for inexact numbers, the above function call takes
    a significant amount of time in DrRacket. Depending on your computer, it may take
    between a few second and a minute or more. If you happen to choose other numbers
    that trigger this form of computation, it may seem as if the call to newton does
    not terminate at all.The second problem concerns non-termination. Here is the
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (newton poly #i3.0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It uses the inexact number #i3.0 as the initial guess, which unlike 3 causes
    a different kind of problem. Specifically, the slope function now produces an
    inexact 0 for poly while root-of-tangent jumps to infinity:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > (slope poly #i3.0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #i0.0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > (root-of-tangent poly #i3.0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| #i+inf.0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As a result, the evaluation immediately falls into an infinite loop.The calculation
    in newton turns #i+inf.0 into +nan.0, a piece of data that says “not a number.”
    Most arithmetic operations propagate this value, which explains the behavior of
    newton.'
  prefs: []
  type: TYPE_NORMAL
- en: In short, newton exhibits the full range of problems when it comes to complex
    termination behavior. For some inputs, the function produces a correct result.
    For some others, it signals errors. And for yet others, it goes into infinite
    loop or appears to go into one. The header for newton—<wbr>or some other piece
    of writing—<wbr>must warn others who wish to use the function and future readers
    of these complexities, and good math libraries in common programming languages
    do so.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 457\. Design the function double-amount,This exercise is due to Adrian
    German. which computes how many months it takes to double a given amount of money
    when a savings account pays interest at a fixed rate on a monthly basis.
  prefs: []
  type: TYPE_NORMAL
- en: Domain Knowledge With a minor algebraic manipulation, you can show that the
    given amount is irrelevant. Only the interest rate matters. Also domain experts
    know that doubling occurs after roughly 72/r month as long as the interest rate
    r is “small.” [![image](../Images/52f7bb3514aa334401bcadbfe3db0dc3.jpg)](#%28counter._%28exercise._ex~3adouble-amount%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 28.2Numeric Integration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Many physics problems boil down to determining the area under a curve:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem A car drives at constant speed of v meters per second. How far
    does it travel in 5, 10, 15 seconds?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A rocket lifts off at the constant rate of acceleration of ![image](../Images/b01a5d9cd91d34c35ee64092e1ccd199.jpg).
    What height does it reach after 5, 10, 15 seconds?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Physics tells us that a vehicle travels ![image](../Images/0d44b652e37dc1e9f94ec38e1e81dcb4.jpg)
    meters if it moves at a constant speed v for t seconds. For vehicles that accelerate,
    the distance traveled depends on the square of the time t passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/fd4e70e2ab9700d161b7d36047c0fa14.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: In general, the law tells us that the distance corresponds to the area under
    the graph of speed v(t) over time t.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/98f20714c1710a2dac91138a37b1786d.jpg)    ![image](../Images/12615684bc7375d86014186edc7ddb99.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 157: Distance traveled with constant vs accelerating speed'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 157](#%28counter._%28figure._fig~3adistance%29%29) illustrates the
    idea in a graphical manner. On the left, we see an overlay of two graphs: the
    solid flat line is the speed of the vehicle and the rising dashed line is the
    distance traveled. A quick check shows that the latter is indeed the area determine
    by the former and the x-axis at every point in time. Similarly, the graphs on
    the right show the relationship between a rocket moving at constantly increasing
    speed and the height it reaches. Determining this area under the graph of a function
    for some specific interval is called (function) integration.'
  prefs: []
  type: TYPE_NORMAL
- en: While mathematicians know formulas for the two sample problems that give precise
    answers, the general problem calls for computational solutions. The problem is
    that curves often come with complex shapes, more like those in [figure 158](#%28counter._%28figure._fig~3afunc-int%29%29),
    which suggests that someone needs to know the area between the x-axis, the vertical
    lines labeled a and b, and the graph of f. Applied mathematicians determine such
    areas in an approximate manner, summing the areas of many small geometric shapes.
    It is therefore natural to develop algorithms that deal with these calculations.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/8ce2c8af3e5ae31fb2defa7b6a452e29.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 158: Integrating a function f between a and b'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'An integration algorithm consumes three inputs: the function f and two borders,
    a and b. The fourth part, the x-axis, is implied. This suggests the following
    signature:'
  prefs: []
  type: TYPE_NORMAL
- en: ; [[Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Number](part_one.html#%28tech._number%29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In order to understand the idea behind integration, it is best to study simple
    examples such as a constant function or a linear one. Thus, consider
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (constant x) 20)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Passing constant to integrate, together with 12 and 22, describes a rectangle
    of width 10 and height 20. The area of this rectangle is 200, meaning we get this
    test:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (integrate constant 12 22) 200)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Similarly, let’s use linear to create a second test:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (linear x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 2 x))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If we use linear, 0, and 10 with integrate, the area is a triangle with a base
    width of 10 and a height of 20. Here is the example as a test:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (integrate linear 0 10) 100)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: After all, a triangle’s area is half of the product of its base width and height.For
    a third example, we exploit some domain-specific knowledge. As mentioned, mathematicians
    know how to determine the area under some functions in a precise manner. For example,
    the area under the function
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/38e190ef09e727c1b4feff7fcfebda5f.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: on the interval [a,b] can be calculated with the following formula
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/bfac2d1b93ffe8fe6c0f5683bcdd66ce.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Here is how to turn this idea into a concrete test:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 ([sqr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqr%29%29) x)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (integrate [square](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._square%29%29) 0 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29) ([expt](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._expt%29%29) 10 3) ([expt](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._expt%29%29) 0 3)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ε 0.1)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[Number](part_one.html#%28tech._number%29) -> [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29)  [Number](part_one.html#%28tech._number%29)
    -> [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; computes the area under the graph of f between a and b |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; assume  ([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29)  a  b)
    holds |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-within](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-within%29%29) (integrate ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) 20) 12 22) 200 ε)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-within](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-within%29%29) (integrate ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 2 x)) 0 10) 100 ε)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-within](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-within%29%29) (integrate ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 ([sqr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sqr%29%29) x))) 0 10)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               1000 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ε) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (integrate f a b) #i0.0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 159: A generic integration function'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 159](#%28counter._%28figure._fig~3aintegrate-test%29%29) collects the
    result of the first three steps of the design recipe. The figure adds a purpose
    statement and an obvious assumption concerning the two interval boundaries. Instead
    of [check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    it uses [check-within](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-within%29%29),
    which anticipates the numerical inaccuracies that come with computational approximations
    in such calculations. Analogously, the header of integrate specifies #i0.0 as
    the return result, signaling that the function is expected to return an inexact
    number.'
  prefs: []
  type: TYPE_NORMAL
- en: The following two exercises show how to turn domain knowledge into integration
    functions. Both functions compute rather crude approximations. While the design
    of the first uses only mathematical formulas, the second also exploits a bit of
    structural design ideas. Solving these exercises creates the necessary appreciation
    for the core of this section, which presents a generative-recursive integration
    algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 458\. Kepler suggested a simple integration method. To compute an
    estimateThe method is known as Kepler’s rule. of the area under f between a and
    b, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: divide the interval into half at mid = (a + b) / 2;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'compute the areas of these two trapezoid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[(a,0),(a,f(a)),(mid,0),(mid,f(mid))]'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[(mid,0),(mid,f(mid)),(b,0),(b,f(b))];'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: then add the two areas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Domain knowledge Let’s take a look at these trapezoids. Here are the two possible
    shapes, with minimal annotations to reduce clutter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/650e07797670b911eefb76eaa16e81f0.jpg)      ![image](../Images/bec4bcc69f05ff7d04a83c8e8f262cf4.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'The left shape assumes f(L) > f(R) while the right one shows the case where
    f(L) < f (R). Despite the asymmetry, it is still possible to calculate the area
    of these trapezoids with a single formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/17000a6e5190aa2935e05fd617f777ee.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Stop! Convince yourself that this formula adds the area of the triangle to the
    area of the lower rectangle for the left trapezoid, while it subtracts the triangle
    from the area of the large rectangle for the right one.Also show that the above
    formula is equal to
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/6076086582ddc6a08d43ca6268e14621.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: This is a mathematical validation of the asymmetry of the formula.
  prefs: []
  type: TYPE_NORMAL
- en: Design the function integrate-kepler. That is, turn the mathematical knowledge
    into a ISL+ function. Make sure to adapt the test cases from [figure 159](#%28counter._%28figure._fig~3aintegrate-test%29%29)
    to this use. Which of the three tests fails and by how much? [![image](../Images/d46b66feaf6d885311aab88686e94b0e.jpg)](#%28counter._%28exercise._ex~3aintegral-kepler%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 459\. Another simple integration method divides the area into many
    small rectangles. Each rectangle has a fixed width and is as tall as the function
    graph in the middle of the rectangle. Adding up the areas of the rectangles produces
    an estimate of the area under the function’s graph.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use
  prefs: []
  type: TYPE_NORMAL
- en: R = 10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: to stand for the number of rectangles to be considered. Hence the width of each
    rectangle is
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/237637d6156f81edfe0465ac5217a378.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The height of one of these rectangles is the value of f at its midpoint. The
    first midpoint is clearly at a plus half of the width of the rectangle,
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/8326bb91beaf2ac92ba49ad4989c2fe6.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: which means its area is
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/44e70ecdb854320529cbad358645667d.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'To compute the area of the second rectangle, we must add the width of one rectangle
    to the first midpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/570909f11f1955e434f12b4c65bc3f8f.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: For the third one, we get
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/3dac918f9a6a652376210620d56c8e4c.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'In general, we can use the following formula for the ith rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/e205fcb8801c739139f389027276568a.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'The first rectangle has index 0, the last one R - 1.Using these rectangles,
    we can now determine the area under the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/4b2725b05095244bdf8c5dd516096e9e.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Turn the description of the process into an ISL+ function. Adapt the test cases
    from [figure 159](#%28counter._%28figure._fig~3aintegrate-test%29%29) to this
    case.
  prefs: []
  type: TYPE_NORMAL
- en: The more rectangles the algorithms uses, the closer its estimate is to the actual
    area. Make R a top-level constant and increase it by factors of 10 until the algorithm’s
    accuracy eliminates problems with ε value of 0.1.
  prefs: []
  type: TYPE_NORMAL
- en: Decrease ε to 0.01 and increase R enough to eliminate any failing test cases
    again. Compare the result to [exercise 458](#%28counter._%28exercise._ex~3aintegral-kepler%29%29).
    [![image](../Images/744d7c0fa87b5c61106ad02b9e73b068.jpg)](#%28counter._%28exercise._ex~3aintegral-rectangle%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: The Kepler method of [exercise 458](#%28counter._%28exercise._ex~3aintegral-kepler%29%29)
    immediately suggests a divide-and-conquer strategy like binary search introduced
    in [Binary Search](#%28part._sec~3abinary-search%29). Roughly speaking, the algorithm
    would split the interval into two pieces, recursively compute the area of each
    piece, and add the two results.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 460\. Develop the algorithm integrate-dc, which integrates a function
    f between the boundaries a and b using a divide-and-conquer strategy. Use Kepler’s
    method when the interval is sufficiently small. [![image](../Images/bda4e54552586cb1dce8ce1fff85950b.jpg)](#%28counter._%28exercise._ex~3aintegral-dc%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: The divide-and-conquer approach of [exercise 460](#%28counter._%28exercise._ex~3aintegral-dc%29%29)
    is wasteful. Consider a function whose graph is level in one part and rapidly
    changes in another; see [figure 160](#%28counter._%28figure._fig~3awave-y-function%29%29)
    for a concrete example. For the level part on the graph, it is pointless to keep
    splitting the interval. It is just as easy to compute the trapezoid for the complete
    interval as for the two halves. For the wavy part, however, the algorithm must
    continue dividing the interval until the irregularities of the graph are reasonably
    small.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/8cc3f7fa7897162536e3f74b78fa1eb3.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 160: A candidate for adaptive integration'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To discover when f is level, we can change the algorithm as follows. Instead
    of just testing how large the interval is, the new algorithm computes the area
    of three trapezoids: the given one, and the two halves. If the difference between
    the two is less than the area of a small rectangle of height ε and width b - a,'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/220925dc916fe0f6b4d6ba57f7464bef.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: it is safe to assume that the overall area is a good approximation. In other
    words, the algorithm determines whether f changes so much that it affects the
    error margin. If so, it continues with the divide-and-conquer approach; otherwise
    it stops and uses the Kepler approximation.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 461\. Design integrate-adaptive. That is, turn the recursive process
    description into an ISL+ algorithm. Make sure to adapt the test cases from [figure 159](#%28counter._%28figure._fig~3aintegrate-test%29%29)
    to this use.
  prefs: []
  type: TYPE_NORMAL
- en: Do not discuss the termination of integrate-adaptive
  prefs: []
  type: TYPE_NORMAL
- en: Does integrate-adaptive always compute a better answer than either integrate-kepler
    or integrate-rectangles? Which aspect is integrate-adaptive guaranteed to improve?
    [![image](../Images/24231e771f252fa449a4d1fc374f2cf5.jpg)](#%28counter._%28exercise._ex~3aadaptive-integral%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Terminology The algorithm is called adaptive integration because it automatically
    allocates time to those parts of the graph that needs it and spends little time
    on the others. Specifically, for those parts of f that are level, it performs
    just a few calculations; for the other parts, it inspects small intervals to decrease
    the error margin. Computer science knows many adaptive algorithms, and integrate-adaptive
    is just one of them.
  prefs: []
  type: TYPE_NORMAL
- en: '28.3Project: Gaussian Elimination'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Mathematicians not only search for solutions of equations in one variable;
    they also study whole systems of linear equations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample Problem In a bartering world, the values of coal (x), oil (y), and gas
    (z) are determined by these exchange equations:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![image](../Images/2d66f298ef0613af8aaefa14aafcd6c9.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: A solution to such a system of equations consists of a collection of numbers,
    one per variable, such that if we replace the variable with its corresponding
    number, the two sides of each equation evaluate to the same number. In our running
    example, the solution is
  prefs: []
  type: TYPE_NORMAL
- en: x = 1, y = 1, and z = 2.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We can easily check this claim:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/b73c6d50d594f9300f1cab3a4b7f8770.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The three equations reduce to
  prefs: []
  type: TYPE_NORMAL
- en: 10 = 10, 31 = 31, and 1 =1.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| ; An SOE is a non-empty [Matrix](part_two.html#%28tech._matrix%29). |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; constraint for ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  r1
    [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  rn),
    (length  ri) is ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  n  1)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation represents a system of linear equations |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Equation is a [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)].
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; constraint an [Equation](#%28tech._equation%29) contains at least two numbers.
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation if ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  a1
    [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  an
    b) is an [Equation](#%28tech._equation%29), |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; a1, ..., an are the left-hand side variable coefficients |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; and b is the right-hand side |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Solution is a [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) M ; an
    [SOE](#%28tech._soe%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 2  3 10) ; an
    [Equation](#%28tech._equation%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 5 12 31)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 4 1 -2  1)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) S ''(1 1 2)) ; a
    [Solution](#%28tech._solution%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 161: A data representation for systems of equations'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 161](#%28counter._%28figure._fig~3amatrix%29%29) introduces a data
    representation for our problem domain. It includes an example of a system of equations
    and its solution. This representation captures the essence of a system of equations,
    namely, the numeric coefficients of the variables on the left-hand side and the
    right-hand side values. The names of the variables don’t play any role because
    they are like parameters of functions; meaning, as long as they are consistently
    renamed the equations have the same solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the rest of this section. it is convenient to use these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Equation](#%28tech._equation%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts the left-hand side from a row in a matrix |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (lhs ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) M)) ''(2 2 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (lhs e)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29) e))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Equation](#%28tech._equation%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts the right-hand side from a row in a matrix |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (rhs ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) M)) 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (rhs e)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29) e)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Exercise 462\. Design the function check-solution. It consumes an [SOE](#%28tech._soe%29)
    and a [Solution](#%28tech._solution%29). Its result is #true if plugging in the
    numbers from the [Solution](#%28tech._solution%29) for the variables in the [Equation](#%28tech._equation%29)s
    of the [SOE](#%28tech._soe%29) produces equal left-hand side values and right-hand
    side values; otherwise the function produces #false. Use check-solution to formulate
    tests with [check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29).'
  prefs: []
  type: TYPE_NORMAL
- en: Hint Design the function plug-in first. It consumes the left-hand side of an
    [Equation](#%28tech._equation%29) and a [Solution](#%28tech._solution%29) and
    calculates out the value of the left-hand side when the numbers from the solution
    are plugged in for the variables. [![image](../Images/f5ba3f1e9e5d30a2c93dcd99382689c7.jpg)](#%28counter._%28exercise._ex~3agauss-data%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian elimination is a standard method for finding solutions to systems of
    linear equations. It consists of two steps. The first step is to transform the
    system of equations into a system of different shape but with the same solution.
    The second step is to find solutions to one equation at a time. Here we focus
    on the first step because it is another interesting instance of generative recursion.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step of the Gaussian elimination algorithm is called “triangulation”
    because the result is a system of equations in the shape of a triangle. In contrast,
    the original system is a rectangle. To understand this terminology, take a look
    at this list, which represents the original system:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 2  3 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 5 12 31)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 4 1 -2 1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Triangulation transforms this matrix into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 2  3 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)   3  9 21)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)      1  2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: As promised, the shape of this system of equations is (roughly) a triangle.Exercise 463\.
    Check that the following system of equations
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/1cfb296339cea5d390016d1e7d43eed4.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'has the same solution as the one labeled with (![image](../Images/2ba086e47de909710ef2a88d49723d7f.jpg)).
    Do so by hand and with check-solution from [exercise 462](#%28counter._%28exercise._ex~3agauss-data%29%29).
    [![image](../Images/acecba5575a74a6548896449375064e6.jpg)](#%28counter._%28exercise._ex~3agauss-equiv2%29%29)The
    key idea of triangulation is to subtract the first [Equation](#%28tech._equation%29)
    from the remaining ones. To subtract one [Equation](#%28tech._equation%29) from
    another means to subtract the corresponding coefficients in the two [Equation](#%28tech._equation%29)s.
    With our running example, subtracting the first from the second equation yields
    the following matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 2  3 10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0 3  9 21)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 4 1 -2  1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The goal of these subtractions is to put a 0 into the first column of all but
    the first equation. For the third equation, getting a 0 into the first position
    means subtracting the first equation twice from the third one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2  2  3  10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0  3  9  21)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0 -3 -8 -19))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Following convention, we drop the leading 0’s from the last two equations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2  2  3   10)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)    3  9   21)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)   -3 -8  -19))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: That is, we first multiply each item in the first row with 2 and then subtract
    the result from the last row.Mathematics teaches how to prove such facts. We use
    them. As mentioned, these subtractions do not change the solution; that is, the
    solution of the original system is also the solution of the transformed one.Exercise 464\.
    Check that the following system of equations
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/db3cfa556a9c43e3b3d6d6b73952d718.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: has the same solution as the one labeled with (![image](../Images/140e9f2adfef44cbdbd5a3eb84cac3c0.jpg)).
    Again do so by hand and with check-solution from [exercise 462](#%28counter._%28exercise._ex~3agauss-data%29%29).
    [![image](../Images/3f79606d2a428cff85be8e51a1787211.jpg)](#%28counter._%28exercise._ex~3agauss-equiv%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 465\. Design subtract. The function consumes two [Equation](#%28tech._equation%29)s
    of equal length. It “subtracts” a multiple of the second equation from the first,
    item by item, so that the resulting [Equation](#%28tech._equation%29) has a 0
    in the first position. Since the leading coefficient is known to be 0, subtract
    returns the rest of the list that results from the subtractions. [![image](../Images/342b769dcbd581cab7881c146c198336.jpg)](#%28counter._%28exercise._ex~3agauss-subtract%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now consider the rest of the [SOE](#%28tech._soe%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  3  9   21)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) -3 -8  -19))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It is also an [SOE](#%28tech._soe%29), so we can apply the same algorithm again.
    For our running example, this next subtraction step calls for subtracting the
    first [Equation](#%28tech._equation%29) -1 times from the second one. Doing so
    yields
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3  9 21)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)    1  2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The rest of this SOE is a single equation and cannot be simplified.Exercise 466\.
    Here is a representation for triangular SOEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A TM is a [[NEList-of](part_three.html#%28tech._sim-dd._nelist._of%29)  [Equation](#%28tech._equation%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; such that the [Equation](#%28tech._equation%29)s are of decreasing length:
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   n + 1, n, n - 1, ..., 2. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation represents a triangular matrix |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Design the triangulate algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [SOE](#%28tech._soe%29) -> [TM](#%28tech._tm%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; triangulates the given system of equations |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (triangulate M)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''(1 2)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Turn the above example into a test and spell out explicit answers for the four
    questions based on our loose description.
  prefs: []
  type: TYPE_NORMAL
- en: Do not yet deal with the termination step of the design recipe. [![image](../Images/bfd08d5c2c124373c61bc68925a7a1ea.jpg)](#%28counter._%28exercise._ex~3atriangulate1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, the solution to [exercise 466](#%28counter._%28exercise._ex~3atriangulate1%29%29)
    occasionally fails to produce the desired triangular system. Consider the following
    representation of a system of equations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2  3  3 8)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2  3 -2 3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 4 -2  2 4))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Its solution is x = 1, y = 1, and z = 1.The first step is to subtract the first
    row from the second and to subtract it twice from the last one, which yields the
    following matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  2  3  3   8)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)     0 -5  -5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)    -8 -4 -12))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Next triangulation would focus on the rest of the matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)   0 -5  -5)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  -8 -4 -12))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'but the first item of this matrix is 0. Since it is impossible to divide by
    0, the algorithm signals an error via subtract.To overcome this problem, we need
    to use another piece of knowledge from our problem domain. Mathematics tells us
    that switching equations in a system of equations does not affect the solution.
    Of course, as we switch equations, we must eventually find an equation whose leading
    coefficient is not 0. Here we can simply swap the first two:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  -8 -4 -12)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)   0 -5  -5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'From here we may continue as before, subtracting the first equation from the
    remaining one 0 times. The final triangular matrix is:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2  3  3   8)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)   -8 -4 -12)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)      -5  -5))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Show that x = 1, y = 1, and z = 1 is still a solution for these equations.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 467\. Revise the algorithm triangulate from [exercise 466](#%28counter._%28exercise._ex~3atriangulate1%29%29)
    so that it rotates the equations first to find one with a leading coefficient
    that is not 0 before it subtracts the first equation from the remaining ones.
  prefs: []
  type: TYPE_NORMAL
- en: Does this algorithm terminate for all possible system of equations?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint The following expression rotates a non-empty list L:'
  prefs: []
  type: TYPE_NORMAL
- en: ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) L) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) L)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Explain why. [![image](../Images/250520a78340164d03ee4855e2514cd9.jpg)](#%28counter._%28exercise._ex~3atriangulate2%29%29)Some
    systems of equations don’t have a solution. Consider this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/c1ba5a913abdc8beed8cff3eaeef3d92.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'If you try to triangulate this SOE—<wbr>by hand or with your solution from
    [exercise 467](#%28counter._%28exercise._ex~3atriangulate2%29%29)—<wbr>you arrive
    at an intermediate matrix all of whose equations start with 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/5f76804c45798bfb75a6028bdc642269.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Exercise 468\. Modify triangulate from [exercise 467](#%28counter._%28exercise._ex~3atriangulate2%29%29)
    so that it signals an error if it encounters an [SOE](#%28tech._soe%29) whose
    leading coefficients are all 0. [![image](../Images/b9d56657eb571754773a9cfbdffda4af.jpg)](#%28counter._%28exercise._ex~3atriangulate3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'After we obtain a triangular system of equations such as (*) in [exercise 463](#%28counter._%28exercise._ex~3agauss-equiv2%29%29),
    we can solve the equations, one at a time. In our specific example, the last equation
    says that z is 2. Equipped with this knowledge, we can eliminate z from the second
    equation through a substitution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/735cbaea3477af9201cd928f15b0c34a.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Doing so, in turn, determines the value for y:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/200d906d3d5ea796479cae3edea045a0.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Now that we have z = 2 and y = 1, we can plug these values into in the first
    equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/e95e22a3ac21016b3c2ba166d67bd227.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'This yields another equation in a single variable, which we solve like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/18d7e31af5483d72f0543dcfa23d514a.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: This finally yields a value for x and thus the complete solution for the entire
    system of equations.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 469\. Design the solve function. It consumes triangular systems of
    equations and produces a solution.
  prefs: []
  type: TYPE_NORMAL
- en: Hint Use structural recursion for the design. Start with the design of a function
    that solves a single linear equation in n+1 variables, given a solution for the
    last n variables. In general, this function plugs in the values for the rest of
    the left-hand side, subtracts the result from the right-hand side, and divides
    by the first coefficient. Experiment with this suggestion and the above examples.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge Use an existing abstraction and [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    to design solve. [![image](../Images/106cb1189ec3b532d3d169f516354c3d.jpg)](#%28counter._%28exercise._ex~3agauss-solve%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 470\. Define gauss, which combines the triangulate function from [exercise 468](#%28counter._%28exercise._ex~3atriangulate3%29%29)
    and the solve function from [exercise 469](#%28counter._%28exercise._ex~3agauss-solve%29%29).
    [![image](../Images/013eb22ef2c0b3e36b2275f0d61777e7.jpg)](#%28counter._%28exercise._ex~3agauss-complete%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 29Algorithms that Backtrack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Problem solving doesn’t always progress along some straight line. Sometimes
    we may follow one approach and discover that we are stuck, because we took a wrong
    turn. One obvious option is to backtrack to the place where we made the fateful
    decision and to take a different turn. Some algorithms work just like that. This
    chapter presents two instances. The first section deals with an algorithm for
    traversing graphs. The second one is an extended exercise that uses backtracking
    in the context of a chess puzzle.
  prefs: []
  type: TYPE_NORMAL
- en: 29.1Traversing Graphs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Graphs are ubiquitous in our world and the world of computing. Imagine a group
    of people, say, the students in your school. Write down all the names and connect
    the names of those people that know each other. You have just created your first
    undirected graph.
  prefs: []
  type: TYPE_NORMAL
- en: Now take a look at [figure 162](#%28counter._fsm._%28figure._fig~3agraph%29%29),
    which displays a small directed graph. It consists of seven nodes—<wbr>the circled
    letters—<wbr>and nine edges—<wbr>the arrows. The graph may represent a small version
    of an email network. Imagine a company and all the emails that go back and forth.
    Write down the email addresses of all employees. Then, address by address, draw
    an arrow from the address to all those addresses to whom the owner sends emails
    during a week. This is how you would create the directed graph in [figure 162](#%28counter._fsm._%28figure._fig~3agraph%29%29),
    though it might end up looking much more complex, almost impenetrable.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/b17c277d4235201453c9112e91df5ed9.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 162: A directed graph'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In general, a graph consists of a collection of nodes and a collection of edges,
    which connect nodes. In a directed graph, the edges represent one-way connections
    between the nodes; in an undirected graph, the edges represent two way connections
    between the nodes. In this context, the following is a common type of problem:Social
    scientists use such algorithms to figure out the power structure in a company.
    Similarly they use such graphs to predict the probable activities of people, even
    without knowledge of the content of the emails.
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design an algorithm that proposes a way to introduce one person
    to another in a directed email graph for a large company. The program consumes
    a directed graph representing established email connections and two email addresses.
    It returns a sequence of email addresses that connect the first email with the
    second.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Mathematical scientists call the desired sequence a path.[Figure 162](#%28counter._fsm._%28figure._fig~3agraph%29%29)
    makes the sample problem concrete. For example, you may wish to test whether the
    program can find a path from C to D. This particular path consists of the origination
    node C and the destination node D. In contrast, if you wish to connect E with
    D, there are two paths:'
  prefs: []
  type: TYPE_NORMAL
- en: send email from E to F and then to D.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: send it from E to C and then to D.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes it is impossible to connect two nodes with a path. In the graph of
    [figure 162](#%28counter._fsm._%28figure._fig~3agraph%29%29), you cannot move
    from C to G by following the arrows.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at [figure 162](#%28counter._fsm._%28figure._fig~3agraph%29%29) you
    can easily figure out how to get from one node to another without thinking much
    about how you did it. So imagine for a moment that the graph in [figure 162](#%28counter._fsm._%28figure._fig~3agraph%29%29)
    is a large park. Also imagine someone says you are located at E and you need to
    get to G. You can clearly see two paths, one leading to C and another one leading
    to F. Follow the first one and make sure to remember that it is also possible
    to get from E to F. Now you have a new problem, namely, how to get from C to G.
    The key insight is that this new problem is just like the original problem; it
    asks you to find a path from one node to another. Furthermore, if you can solve
    the problem, you know how to get from E to G—<wbr>just add the step from E to
    C. But there is no path from C to G. Fortunately, you remember that it is also
    possible to go from E to F, meaning you can backtrack to some point where you
    have a choice to make and re-start the search from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s design this algorithm in a systematic manner. Following the general
    design recipe, we start with a data analysis. Here are two compact list-based
    representations of the graph in [figure 162](#%28counter._fsm._%28figure._fig~3agraph%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) sample-graph
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''((A (B E)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (B (E F)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (C (D)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (D ()) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (E (C F)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (F (D G)) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (G ()))) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) sample-graph
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''((A B E) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (B E F) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (C D) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (D) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (E C F) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (F D G) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (G))) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Both contain one list per node. Each of these lists starts with the name of
    a node followed by its (immediate) neighbors, that is, nodes reachable by following
    a single arrow. The two differ in how they connect the (name of the) node and
    its neighbors: the left one uses [list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)
    while the right one uses [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29).
    For example, the second list represents node B with its two outgoing edges to
    E and F in [figure 162](#%28counter._fsm._%28figure._fig~3agraph%29%29). On the
    left ''B is the first name on a two-element list; on the right it is the first
    name on a three-element list.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 471\. Translate one of the above definitions into proper list form
    using [list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)
    and proper symbols.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data representation for nodes is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: ; A Node is a [Symbol](part_two.html#%28tech._symbol%29).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Formulate a data definition to describe the class of all Graph representations,
    allowing an arbitrary number of nodes and edges. Only one of the above representations
    has to belong to [Graph](#%28tech._fsm._graph%29).
  prefs: []
  type: TYPE_NORMAL
- en: Design the function neighbors. It consumes a [Node](#%28tech._fsm._node%29)
    n and a [Graph](#%28tech._fsm._graph%29) g and produces the list of immediate
    neighbors of n in g. [![image](../Images/c52324fc225897f2d7b7dc1e658c045e.jpg)](#%28counter._fsm._%28exercise._ex~3arepresent-graph%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Using your data definitions for [Node](#%28tech._fsm._node%29) and [Graph](#%28tech._fsm._graph%29)—<wbr>regardless
    of which one you chose, as long as you also designed neighbors—<wbr>we can now
    formulate a signature and a purpose statement for find-path, the function that
    searches a path in a graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Node](#%28tech._fsm._node%29)  [Node](#%28tech._fsm._node%29)  [Graph](#%28tech._fsm._graph%29)
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Node](#%28tech._fsm._node%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds a path from origination to destination in G |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-path origination destination G)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'What this header leaves open is the exact shape of the result. It implies that
    the result is a list of nodes, but it does not say which nodes it contains.To
    appreciate this ambiguity and why it matters, let’s study the examples from above.
    In ISL+, we can now formulate them like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (find-path ''C ''D sample-graph) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (find-path ''E ''D sample-graph) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (find-path ''C ''G sample-graph) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The first call to find-path must return a unique path, the second one must
    choose one from two, and the third one must signal that there is no path from
    ''C to ''G in sample-graph. Here are two possibilities then on how to construct
    the return value:'
  prefs: []
  type: TYPE_NORMAL
- en: The result of the function consists of all nodes leading from the origination
    node to the destination node, including those two.It is easy to imagine others,
    such as skipping either of the two given nodes. In this case, an empty path could
    be used to express the lack of a path between two nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatively, since the call itself already lists two of the nodes, the output
    could mention only the “interior” nodes of the path. Then the answer for the first
    call would be '() because 'D is an immediate neighbor of 'C. Of course, '() could
    then no longer signal failure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Concerning the lack-of-a-path issue, we must choose a distinct value for signaling
    this notion. Because #false is distinct, meaningful, and works in either case,
    we opt for it. As for the multiple-paths issue, we postpone making a choice for
    now and list both possibilities in the example section:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Path is a [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Node](#%28tech._fsm._node%29)].
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation The list of nodes specifies a sequence |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; of immediate neighbors that leads from the first |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Node](#%28tech._fsm._node%29) on the list to the last one. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Node](#%28tech._fsm._node%29)  [Node](#%28tech._fsm._node%29)  [Graph](#%28tech._fsm._graph%29)
    -> [[Maybe](part_three.html#%28tech._sim-dd._maybe%29)  [Path](#%28tech._fsm._path%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds a path from origination to destination in G |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if there is no path, the function produces #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (find-path ''C ''D sample-graph)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ''(C D)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-member-of](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-member-of%29%29) (find-path ''E ''D sample-graph)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ''(E F D) ''(E C D)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (find-path ''C ''G sample-graph)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-path origination destination G)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Our next design step is to understand the four essential pieces of the function:
    the “trivial problem” condition, a matching solution, the generation of a new
    problem, and the combination step. The above discussion of the search process
    and the analysis of the three examples suggest answers:'
  prefs: []
  type: TYPE_NORMAL
- en: If the two given nodes are directly connected with an arrow in the given graph,
    the path consists of just these two nodes. But there is an even simpler case,
    namely, when the origination argument of find-path is equal to its destination.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In that second case, the problem is truly trivial and the matching answer is
    ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  destination).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the arguments are different, the algorithm must inspect all immediate neighbors
    of origination and determine whether there is a path from any one of those to
    destination. In other words, picking one of those neighbors generates a new instance
    of the “find a path” problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, once the algorithm has a path from a neighbor of origination to destination,
    it is easy to construct a complete path from the former to the latter—<wbr>just
    add the origination node to the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From a programming perspective, the third point is critical. Since a node can
    have an arbitrary number of neighbors, the “inspect all neighbors” task is too
    complex for a single primitive. We need an auxiliary function that consumes a
    list of nodes and generates a new path problem for each of them. Put differently,
    the function is a list-oriented version of find-path.Let’s call this auxiliary
    function find-path/list and let’s formulate a wish for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Node](#%28tech._fsm._node%29)]
    [Node](#%28tech._fsm._node%29)  [Graph](#%28tech._fsm._graph%29) -> [[Maybe](part_three.html#%28tech._sim-dd._maybe%29)  [Path](#%28tech._fsm._path%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds a path from some node on lo-originations to |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; destination; otherwise, it produces #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-path/list lo-originations destination G)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Using this wish, we can fill in the generic template for generative-recursive
    functions to get a first draft of find-path:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-path origination destination G)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([symbol=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3d~3f%29%29) origination destination)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) destination)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) origination [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)(find-path/list (neighbors origination G)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                          destination G) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'It uses the neighbors from [exercise 471](#%28counter._fsm._%28exercise._ex~3arepresent-graph%29%29)
    and the wish list function find-path/list and otherwise uses the answers to the
    four questions about generative recursive functions.The rest of the design process
    is about details of composing these functions properly. Consider the signature
    of find-path/list. Like find-path, it produces [[Maybe](part_three.html#%28tech._sim-dd._maybe%29)
    [Path](#%28tech._fsm._path%29)]. That is, if it finds a path from any of the neighbors,
    it produces this path; otherwise, if none of the neighbors is connected to destination,
    the function produces #false. Hence the answer of find-path depends on the kind
    of result find-path/list produces, meaning the code must distinguish the two possible
    answers with a [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-path origination destination G)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([symbol=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3d~3f%29%29) origination destination)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) destination)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) next (neighbors origination G))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|              ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) candidate
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                (find-path/list next destination G))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          [([boolean?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._boolean~3f%29%29) candidate) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          [([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) candidate) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The two cases reflect the two kinds of answers we might receive: a [Boolean](part_one.html#%28tech._boolean%29)
    or a list. In the first case, find-path/list cannot find a path from any neighbor
    to destination, meaning find-path itself cannot construct such a path either.
    In the second case, the auxiliary function found a path, but find-path must still
    add origination to the front of this path because candidate starts with one of
    origination’s neighbors not origination itself as agreed upon above.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Node](#%28tech._fsm._node%29)  [Node](#%28tech._fsm._node%29)  [Graph](#%28tech._fsm._graph%29)
    -> [[Maybe](part_three.html#%28tech._sim-dd._maybe%29)  [Path](#%28tech._fsm._path%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds a path from origination to destination in G |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if there is no path, the function produces #false |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-path origination destination G)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([symbol=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3d~3f%29%29) origination destination) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) destination)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) next (neighbors origination G))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) candidate
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                     (find-path/list next destination G))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([boolean?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._boolean~3f%29%29) candidate) #false]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) origination candidate)]))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Node](#%28tech._fsm._node%29)]
    [Node](#%28tech._fsm._node%29)  [Graph](#%28tech._fsm._graph%29) -> [[Maybe](part_three.html#%28tech._sim-dd._maybe%29)  [Path](#%28tech._fsm._path%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds a path from some node on lo-Os to D |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if there is no path, the function produces #false |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-path/list lo-Os D G)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) lo-Os) #false]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) candidate
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                     (find-path ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) lo-Os) D G)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([boolean?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._boolean~3f%29%29) candidate)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                (find-path/list ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) lo-Os) D G)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) candidate]))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 163: Finding a path in a graph'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 163](#%28counter._fsm._%28figure._fig~3afind-path-code%29%29) contains
    the complete definition of find-path. It also contains a definition of find-path/list,
    which processes its first argument via structural recursion. For each node in
    the list, find-path/list uses find-path to check for a path. If find-path indeed
    produces a path, that path is its answer. Otherwise, find-path/list backtracks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note [Trees](part_four.html#%28part._sec~3abtrees%29) discusses backtracking
    in the structural world. A particularly good example is the function that searches
    blue-eyed ancestors in a family tree. When the function encounters node, it first
    searches one branch of the family tree, say the father’s, and if this search produces
    #false, it searches the other half. Since graphs generalize trees, comparing this
    function with find-path is an instructive exercise. End'
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we need to check whether find-path produces an answer for all possible
    inputs. It is relatively easy to check that when given the graph in [figure 162](#%28counter._fsm._%28figure._fig~3agraph%29%29)
    and any two nodes in this graph, find-path always produces some answer. Stop!
    Solve the next exercise before you read on.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 472\. Test find-path. Use the function to find a path from 'A to 'G
    in sample-graph. Which one does it find? Why?
  prefs: []
  type: TYPE_NORMAL
- en: Design test-on-all-nodes, a function that consumes a graph g and determines
    whether there is a path between any pair of nodes. [![image](../Images/37f5d31bcfb59f9ef2d328f05814af32.jpg)](#%28counter._fsm._%28exercise._ex~3afind-path2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/2106bb8d77c43da2dd2d233ce0445219.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 164: A directed graph with cycle'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For other graphs, however, find-path may not terminate for certain pairs of
    nodes. Consider the graph in [figure 164](#%28counter._fsm._%28figure._fig~3acyclic-graph%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Define cyclic-graph to represent the graph in this figure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Compared to [figure 162](#%28counter._fsm._%28figure._fig~3agraph%29%29), this
    new graph contains only one extra edge, from C to B. This seemingly small addition,
    though, allows to start a search in a node and to return to the same node. Specifically,
    it is possible to move from B to E to C and back to B. Indeed, when find-path
    is applied to ''B, ''D, and this graph, it fails to stop as a hand-evaluation
    confirms:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (find-path ''B ''D cyclic-graph) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29) (find-path ''B ''D cyclic-graph) [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29) (find-path/list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ''E ''F) ''D cyclic-graph) [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29) (find-path ''E ''D cyclic-graph) [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29) (find-path/list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ''C ''F) ''D cyclic-graph) [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29) (find-path ''C ''D cyclic-graph) [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29) (find-path/list ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ''B ''D) ''D cyclic-graph) [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29) (find-path ''B ''D cyclic-graph) [..](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._....%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The hand-evaluation shows that after seven applications of find-path and find-path/list,
    ISL+ must evaluate the exact same expression that it started with.You know only
    one exception to this rule: [random](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._random%29%29).
    Since the same input triggers the same evaluation for any function, find-path
    does not terminate for these inputs.'
  prefs: []
  type: TYPE_NORMAL
- en: In summary, the termination argument goes like this. If some given graph is
    free of cycles, find-path produces some output for any given inputs. After all,
    every path can only contain a finite number of nodes and the number of paths is
    finite, too. The function therefore either exhaustively inspects all solutions
    starting from some given node or finds a path from the origination to the destination
    node. If, however, a graph contains a cycle, that is, a path from some node back
    to itself, find-path may not produce a result for some inputs.
  prefs: []
  type: TYPE_NORMAL
- en: The next part presents a program design technique that addresses just this kind
    of problem. In particular, it presents a variant of find-path that can deal with
    cycles in a graph.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 473\. Test find-path on 'B, 'C, and the graph in [figure 164](#%28counter._fsm._%28figure._fig~3acyclic-graph%29%29).
    Also use test-on-all-nodes from [exercise 472](#%28counter._fsm._%28exercise._ex~3afind-path2%29%29)
    on this graph. [![image](../Images/f21e0eb866d3d83fb8b78d4f4c4b112c.jpg)](#%28counter._fsm._%28exercise._ex~3afind-path4%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 474\. Re-design the find-path program as a single function definition.
    Remove parameters from the locally defined functions. [![image](../Images/cb42b289042954b57222094cc28c1070.jpg)](#%28counter._fsm._%28exercise._ex~3afind-path5%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 475\. Re-design find-path/list so that it uses an existing list abstraction
    from [figures 91](part_three.html#%28counter._%28figure._fig~3aisl-ho-list%29%29)
    and [92](part_three.html#%28counter._%28figure._fig~3aisl-ho-list2%29%29) instead
    of explicit structural recursion. Hint Read the documentation for Racket’s [ormap](http://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._ormap%29%29).
    How does it differ from ISL+’s [ormap](http://docs.racket-lang.org/htdp-langs/intermediate.html#%28def._htdp-intermediate._%28%28lib._lang%2Fhtdp-intermediate..rkt%29._ormap%29%29)
    function? Would the former be helpful here? [![image](../Images/f64d34eeeb7a967abc4c151b1a74e7f0.jpg)](#%28counter._fsm._%28exercise._ex~3afind-path6%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Note on Data Abstraction You may have noticed that the find-path function does
    not need to know how [Graph](#%28tech._fsm._graph%29) is defined. As long as you
    provide a correct neighbors function for [Graph](#%28tech._fsm._graph%29), find-path
    works perfectly fine. In short, the find-path program uses data abstraction.
  prefs: []
  type: TYPE_NORMAL
- en: 'As [Abstraction](part_three.html) says, data abstraction works just like function
    abstraction. Here you could create a function abstract-find-path, which would
    consume one more parameter than find-path: neighbors. As long as you always handed
    abstract-find-path a graph G from [Graph](#%28tech._fsm._graph%29) and the matching
    neighbors function, it would process the graph properly. While the extra parameter
    suggests abstraction in the conventional sense, the required relationship between
    two of the parameters—<wbr>G and neighbors—<wbr>really means that abstract-find-path
    is also abstracted over the definition of [Graph](#%28tech._fsm._graph%29). Since
    the latter is a data definition, the idea is dubbed data abstraction.'
  prefs: []
  type: TYPE_NORMAL
- en: When programs grow large, data abstraction becomes a critical tool for the construction
    of a program’s components. The next volume in the “How to Design” series addresses
    this idea in depth; the next section illustrates the idea with another example.
    End
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 476\. [Finite State Machines](part_two.html#%28part._sec~3asec-fsm-list%29)
    poses a problem concerning finite state machines and strings but immediately defers
    to this chapter because the solution calls for generative recursion. You have
    now acquired the design knowledge needed to tackle the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Design the function fsm-match. It consumes the data representation of a finite
    state machine and a string. It produces #true if the sequence of characters in
    the string causes the finite state machine to transition from an initial state
    to a final state.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this problem is about the design of generative recursive functions, we
    provide the essential data definition and a data example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) transition [current key next])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) fsm [initial transitions final])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A FSM is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-fsm  [FSM-State](#%28tech._fsm._fsm._state%29)  [List-of  [1Transition](#%28tech._fsm._1transition%29)]  [FSM-State](#%28tech._fsm._fsm._state%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A 1Transition is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-transition  [FSM-State](#%28tech._fsm._fsm._state%29)  [1String](part_one.html#%28tech._1string%29)  [FSM-State](#%28tech._fsm._fsm._state%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A FSM-State is [String](part_one.html#%28tech._string%29). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; data example: see [exercise 109](part_one.html#%28counter._%28exercise._ex~3afsm%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) fsm-a-bc*-d
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-fsm |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    "AA" |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) (make-transition "AA" "a" "BC")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (make-transition "BC" "b" "BC") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (make-transition "BC" "c" "BC") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (make-transition "BC" "d" "DD")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    "DD")) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The data example corresponds to the regular expression a (b|c)* d. As mentioned
    in [exercise 109](part_one.html#%28counter._%28exercise._ex~3afsm%29%29), "acbd",
    "ad", and "abcd" are examples of acceptable strings; "da", "aa", or "d" do not
    match.In this context, you are designing the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [FSM](#%28tech._fsm._fsm%29)  [String](part_one.html#%28tech._string%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; does a-fsm recognize the given string |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (fsm-match? a-fsm a-string)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Hint Design the necessary auxiliary function locally to fsm-match?. In this
    context, represent the problem as a pair of parameters: the current state of the
    finite state machine and the remaining list of [1String](part_one.html#%28tech._1string%29)s.
    [![image](../Images/a0f03a7d7dfc734b0e9ad97cdcdef8f8.jpg)](#%28counter._fsm._%28exercise._ex~3afsm-match%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29) X] -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)
    [[List-of](part_three.html#%28tech._sim-dd._list._of%29) X]] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates a list of all rearrangements of the items in w |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (arrangements w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) w) ''(())]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (item others)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) without-item
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                          (arrangements ([remove](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._remove%29%29) item w)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                        ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) add-item-to-front
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                          ([map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (a) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) item a))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                               without-item))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) add-item-to-front others)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ''() |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         w)])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (all-words-from-rat? w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([and](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._and%29%29) ([member](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member%29%29) ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29) "rat") w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([member](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member%29%29) ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29) "art") w)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([member](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member%29%29) ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29) "tar") w)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29) (arrangements ''("r" "a" "t"))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  all-words-from-rat?) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 165: A definition of arrangements using generative recursion'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 477\. Inspect the function definition of arrangements in [figure 165](#%28counter._fsm._%28figure._fig~3apermutation-gen%29%29).
    The figure displays a generative-recursive solution of the extended design problem
    covered by [Word Games, the Heart of the Problem](part_two.html#%28part._sec~3apermute%29),
    namelyWe thank Mark Engelberg for suggesting this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: given a word, create all possible re-arrangements of the letters.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The extended exercise is a direct guide to the structurally recursive design
    of the main function and two auxiliaries, where the design of the latter requires
    the creation of two more helper functions. In contrast, [figure 165](#%28counter._fsm._%28figure._fig~3apermutation-gen%29%29)
    uses the power of generative recursion—<wbr>plus [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    and [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)—<wbr>to
    define the same program as a single function definition.
  prefs: []
  type: TYPE_NORMAL
- en: Explain the design of the generative-recursive version of arrangements. Answer
    all questions that the design recipe for generative recursion poses, including
    the question of termination.
  prefs: []
  type: TYPE_NORMAL
- en: Does arrangements in [figure 165](#%28counter._fsm._%28figure._fig~3apermutation-gen%29%29)
    create the same lists as the solution of [Word Games, the Heart of the Problem](part_two.html#%28part._sec~3apermute%29)?
    [![image](../Images/eb0123242651afdaec7bccd1e1cf423c.jpg)](#%28counter._fsm._%28exercise._ex~3apermutation-gen%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '29.2Project: Backtracking'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The n queens puzzle is a famous problem from the world of chess that also illustrates
    the applicability of backtracking in a natural way. For our purposes, a chessboard
    is a grid of n by n squares.We thank Mark Engelberg for his reformulation of this
    section. The queen is a game piece that can move in a horizontal, vertical, or
    diagonal direction arbitrarily far without “jumping” over another piece. We say
    that a queen threatens a square if it is on the square or can move to it. [Figure 166](#%28counter._%28figure._fig~3aqueens%29%29)
    illustrates the notion in a graphical manner. The queen is in the second column
    and sixth row. The solid lines radiating out from the queen go through all those
    squares that are threatened by the queen.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/d6ec9362661417d5f2a2073cb889dcef.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 166: A chessboard with a single queen and the positions it threatens'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The classical queens problem is to place 8 queens on a 8 by 8 chessboard such
    that the queens on the board don’t threaten each other. Computer scientists generalize
    the problem and ask whether it is possible to place n queens on a k by k, for
    k >= n, chessboard such that the queens don’t pose a threat to each other. When
    k = n, a solution solves the complete puzzle.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/c3ec9d77ec6942f1b7f16da65153b86a.jpg)            ![image](../Images/791f2945ae3a22833e51d41bdb0ddf82.jpg)
               ![image](../Images/d21bf21cceddb7cf0d775ab914db4418.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 167: Three queen configurations for a 3 by 3 chess board'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For n = 2, the complete puzzle obviously has no solution. A queen placed on
    any of the four squares threatens all remaining squares.
  prefs: []
  type: TYPE_NORMAL
- en: There is also no complete solution for n = 3. [Figure 167](#%28counter._%28figure._fig~3aqueens-non-solutions%29%29)
    presents three different placements of two queens, that is, solutions for k =
    3 and n = 2. In each case, the left-most queen occupies a square in the left-most
    column while a second queen is placed in one of two squares that the first one
    does not threaten. The placement of a second queen ensures that all seven unoccupied
    squares are threatened by some queen, meaning it is impossible to place a third
    queen. Together, the three placements explore all possibilities of placing the
    first queen in a square of the first column.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 478\. You can also place the first queen in all squares of the top-most
    row, the right-most column, and the bottom-most row. Explain why all of these
    solutions are just like the three scenarios depicted in [figure 167](#%28counter._%28figure._fig~3aqueens-non-solutions%29%29)?
  prefs: []
  type: TYPE_NORMAL
- en: This leaves the central square. Is it possible to place even a second queen
    after you place one on the central square of a 3 by 3 board? [![image](../Images/88c6b534d0ae4827028a61652c883bd5.jpg)](#%28counter._%28exercise._ex~3a3queens%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '| ![image](../Images/8ff7fe0a4a3bb5c5ba58a2844230e7ce.jpg) |  | ![image](../Images/64c18d9eb590262d196fda918ef38f6e.jpg)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 168: Solutions for the n queens puzzle for 4 by 4 and 5 by 5 boards'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 168](#%28counter._%28figure._fig~3aqueens-solutions%29%29) displays
    two solutions for the n queens puzzle: the left one is for n = 4, the right one
    for n  = 5. The figure shows how in each case, a solution has one queen in each
    row and column, which makes sense because a queen threatens the entire row and
    column that radiate out from its square.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have conducted a sufficiently detailed analysis, we can proceed
    to the solution phase. The analysis suggests several ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: The problem is about placing one queen at a time. When we place a queen on a
    board, we can mark the corresponding rows, columns, and diagonals as unusable
    for other queens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For another queen, we consider only non-threatened spots.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just in case this first choice of a spot leads to problems later, we remember
    what other squares are feasible for placing this queen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we are supposed to place a queen on a board but no safe squares are left,
    we backtrack to a previous point in the process where we chose one square over
    another and try one of the remaining squares.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In short, this solution process is like the “find a path” algorithm.Moving
    from the process description to a designed algorithm clearly calls for two data
    representations: one for the chess boards and one for positions on the board.
    Let’s start with the latter:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) QUEENS 8)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A QP is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29)  [CI](#%28tech._ci%29)  [CI](#%28tech._ci%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A CI is an [N](part_two.html#%28tech._n%29) in [0,QUEENS). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation  ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29)  r  c)
    denotes the square at |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; the r-th row and c-th column |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'After all, the chess board basically dictates the choice:'
  prefs: []
  type: TYPE_NORMAL
- en: The definition for [CI](#%28tech._ci%29) could use [1,QUEENS] instead of [0,
    QUEENS), but the two definitions are basically equivalent and counting up from
    0 is what programmers do. Similarly, the so-called algebraic notation for chess
    positions uses the letters 'a through 'h for one of the board’s dimension, meaning
    [QP](#%28tech._qp%29) could have used [CI](#%28tech._ci%29)s and such letters.
    Again, the two are roughly equivalent and with natural numbers it is easier in
    ISL+ to create many positions than with letters.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 479\. Design the threatening? function. It consumes two [QP](#%28tech._qp%29)s
    and determines whether queens placed on the two respective squares would threaten
    each other.
  prefs: []
  type: TYPE_NORMAL
- en: Domain Knowledge (1) Study [figure 166](#%28counter._%28figure._fig~3aqueens%29%29).
    The queen in this figure threatens all squares on the horizontal, the vertical,
    and the diagonal lines. Conversely, a queen on any square on these lines threatens
    the queen.
  prefs: []
  type: TYPE_NORMAL
- en: (2) Translate your insights into mathematical conditions that relate the squares’
    coordinates to each other. For example, all squares on a horizontal have the same
    y-coordinate. Similarly, all squares on one diagonal have coordinates whose sums
    are the same. Which diagonal is that? For the other diagonal, the differences
    between the two coordinates remains the same. Which diagonal does this idea describe?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint Once you have figured out the domain knowledge, formulate a test suite
    that covers horizontals, verticals, and diagonals. Don’t forget to include arguments
    for which threatening? must produce #false. [![image](../Images/0de2afa48d9986f3fcef3fc11e142341.jpg)](#%28counter._%28exercise._ex~3aqueens-threatened%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 480\. Design render-queens. The function consumes a natural number
    n, a list l of [QP](#%28tech._qp%29)s, and an [Image](part_one.html#%28tech._image%29)
    i representing a queen. It produces an image of an n by n chess board with images
    i placed according to l.
  prefs: []
  type: TYPE_NORMAL
- en: You may wish to look for an image for a chess queen on-line or create a simplistic
    one with the available image functions. [![image](../Images/da76aaf7b73718f657c11d9d31d780d7.jpg)](#%28counter._%28exercise._ex~3aqueen-render%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'As for a data representation for Boards, we postpone this step until we know
    how the algorithm implements the process. Doing so is another exercise in data
    abstraction. Indeed, a data definition for [Board](#%28tech._board%29) isn’t even
    necessary to state the signature for the algorithm proper:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29) -> [[Maybe](part_three.html#%28tech._sim-dd._maybe%29)
    [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [QP](#%28tech._qp%29)]]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; find a solution to the n queens problem |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; data example: [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [QP](#%28tech._qp%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) 4QUEEN-SOLUTION-2
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 2) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 1 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 2 3) ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 3 1)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (n-queens n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The complete puzzle is about finding a placement for n queens on an n by n chess
    board. So clearly, the algorithm consumes nothing else but a natural number, and
    it produces a representation for the n queen placements—<wbr>if a solution exists.
    The latter can be represented with a list of [QP](#%28tech._qp%29)s, which is
    why we choose
  prefs: []
  type: TYPE_NORMAL
- en: '; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [QP](#%28tech._qp%29)]
    or #false'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'as the result. Naturally, #false represents the failure to find a solution.The
    next step is to develop examples and to formulate them as tests. We know that
    n-queens must fail when given 2 or 3. For 4, there are two solutions with real
    boards and four identical queens. [Figure 168](#%28counter._%28figure._fig~3aqueens-solutions%29%29)
    shows one of them, on the left, and the other one is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/2d3d9106101f5f5e8534b5ceba66e005.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: In terms of data representations, however, there are many different ways to
    represent these two images. [Figure 169](#%28counter._%28figure._fig~3asolutions-for-4%29%29)
    sketches some. Fill in the rest.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29) -> [[Maybe](part_three.html#%28tech._sim-dd._maybe%29)
    [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [QP](#%28tech._qp%29)]]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; find a solution to the n queens problem |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) 0-1 ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 1))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) 1-3 ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 1 3))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) 2-0 ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 2 0))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) 3-2 ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 3 2))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-member-of](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-member-of%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  (n-queens 4) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0-1 1-3 2-0 3-2)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0-1 1-3 3-2 2-0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0-1 2-0 1-3 3-2)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0-1 2-0 3-2 1-3)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0-1 3-2 1-3 2-0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 0-1 3-2 2-0 1-3)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3-2 2-0 1-3 0-1))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (n-queens n)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   (place-queens (board0 n) n)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 169: Solutions for the 4 queens puzzle'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 481\. The tests in [figure 169](#%28counter._%28figure._fig~3asolutions-for-4%29%29)
    are awful. No real-world programmer ever spells out all these possible outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: 'One solution is to use property testing again. Design the n-queens-solution?
    function, which consumes a natural number n and produces a predicate on queen
    placements that determines whether a given placement is a solution to an n queens
    puzzle:'
  prefs: []
  type: TYPE_NORMAL
- en: A solution for an n queens puzzle must have length n.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [QP](#%28tech._qp%29) on such a list may not threaten any other, distinct
    [QP](#%28tech._qp%29).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have tested this predicate, use it and [check-satisfied](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-satisfied%29%29)
    to formulate the tests for n-queens.An alternative solution is to understand the
    lists of [QP](#%28tech._qp%29)s as sets. If two lists contains the same [QP](#%28tech._qp%29)s
    in different order, they are equivalent as the figure suggests. Hence you could
    formulate the test for n-queens as
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [QP](#%28tech._qp%29)]
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is the result equal [as a set] to one of two lists |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (is-queens-result? x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) (set=? 4QUEEN-SOLUTION-1 x)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       (set=? 4QUEEN-SOLUTION-2 x))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Design the function set=?. It consumes two lists and determines whether they
    contain the same items—<wbr>regardless of order. [![image](../Images/03c77931452bc17f731c12ee36cb5fb1.jpg)](#%28counter._%28exercise._ex~3aqueen-property-testing%29%29)Exercise 482\.
    As bullet 2 above says, you really want to design a function that places n queens
    on a k by k chessboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Board](#%28tech._board%29)  [N](part_two.html#%28tech._n%29) -> [[Maybe](part_three.html#%28tech._sim-dd._maybe%29)
    [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [QP](#%28tech._qp%29)]]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; places n queens on board; otherwise, returns #false |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (place-queens a-board n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '[Figure 169](#%28counter._%28figure._fig~3asolutions-for-4%29%29) already refers
    to this function in the definition of n-queens.Design the place-queens algorithm.
    Assume you have the following functions to deal with [Board](#%28tech._board%29)s:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29) -> [Board](#%28tech._board%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; creates the initial n by n board |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (board0 n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Board](#%28tech._board%29)  [QP](#%28tech._qp%29) -> [Board](#%28tech._board%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; places a queen at qp on a-board |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-queen a-board qp)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   a-board) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Board](#%28tech._board%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [QP](#%28tech._qp%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; finds spots where it is still safe to place a queen |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (find-open-spots a-board)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ''()) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The first function is used in [figure 169](#%28counter._%28figure._fig~3asolutions-for-4%29%29)
    to create the initial board representation for place-queens. You will need the
    other two to describe the generative steps for the algorithm. [![image](../Images/7eb12fa4f2d746b758dc9754648400d8.jpg)](#%28counter._%28exercise._ex~3aqueens-solve%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: You cannot confirm yet that your solution to the preceding exercise works because
    it relies on an extensive wish list. Technically, it calls for a data representation
    of [Board](#%28tech._board%29)s that supports three specific functions. The remaining
    problem is then to formulate a definition for [Board](#%28tech._board%29) and
    to design the functions on the wish list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 483\. Develop a data definition for [Board](#%28tech._board%29) and
    design the three functions specified in [exercise 482](#%28counter._%28exercise._ex~3aqueens-solve%29%29).
    Consider the following ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: a [Board](#%28tech._board%29) collects those positions where a queen can still
    be placed;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a [Board](#%28tech._board%29) contains the list of positions where a queen has
    been placed;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a [Board](#%28tech._board%29) is a grid of n by n squares, each possibly occupied
    by a queen. Hint For this representation, consider using a structure to represent
    a square with one field for the x index, another one for y, and a third one saying
    whether the square is threatened.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use one of the above ideas to solve this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge Use all three ideas to come up with three different data representations
    of [Board](#%28tech._board%29). Abstract your solution to [exercise 482](#%28counter._%28exercise._ex~3aqueens-solve%29%29)
    and confirm that it works with any of your data representations of [Board](#%28tech._board%29).
    [![image](../Images/9655863e88a90bdee5d4325eb00ac303.jpg)](#%28counter._%28exercise._ex~3aqueens-board%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 30Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This fifth part of the book introduces the idea of eureka! into program design.
    Unlike the structural design of the first four parts, eureka! design starts from
    an idea of how the program should solve a problem or process data that represents
    a problem. Designing here means coming up with a clever way to call a recursive
    function on a new kind of problem that is like the given one but simpler.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that while we have dubbed it generative recursion, most computer
    scientists refer to these functions as algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have completed this part of the book, you understand the following
    about the design of generative recursion:'
  prefs: []
  type: TYPE_NORMAL
- en: The standard outline of the design recipe remains valid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The major change concerns the coding step. It introduces four new questions
    on going from the completely generic template for generative recursion to a complete
    function. With two of these questions, you work out the “trivial” parts of the
    solution process; and with the other two you work out the generative solution
    step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The minor change is about the termination behavior of generative recursive functions.
    Unlike structurally designed functions, algorithms may not terminate for some
    inputs. This problem might be due to inherent limitations in the idea or the translation
    of the idea into code. Regardless, the future reader of your program deserves
    a warning about potentially “bad” inputs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will encounter some simple or well-known algorithms in your real-world programming
    tasks, and you will be expected to cope. For truly clever algorithms, software
    companies employ highly paid specialists, domain experts, and mathematicians to
    work out the conceptual details before they ask programmers to turn the concepts
    into programs. You must also be prepared for this kind of task, and the best preparation
    is practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Intermezzo: The Cost of Computation'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What do you know about program f once the following tests succeed:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (f 0) 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (f 1) 1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (f 2) 8)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If this question showed up on a standard test, you might respond with this:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f x) ([expt](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._expt%29%29) x 3))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'But nothing speaks against the following:'
  prefs: []
  type: TYPE_NORMAL
- en: ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f x) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) x 2) 8 ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) x x)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tests tell you only that a program works as expected on some inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same spirit, timing the evaluation of a program application for specific
    inputs tells you how long it takes to compute the answers for those inputs—<wbr>and
    nothing else.You may also wish to re-read [Local Definitions](part_three.html#%28part._sec~3alocal-definitions%29)
    and the discussion of integrity checks in [Project: Database](part_four.html#%28part._db._sec~3aproj-db%29).
    You may have two programs—<wbr>prog-linear and prog-square—<wbr>that compute the
    same answers when given the same inputs and you may find that for all chosen inputs,
    prog-linear always computes the answer faster than prog-square. [Making Choices](#%28part._sec~3achoice%29)
    presents just such a pair of programs: gcd, a structurally-recursive program,
    and gcd-generative, an equivalent but generative-recursive program. The timing
    comparison suggests that the latter is much faster than the former.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/3728df0c60a3550371711db7153bcf0f.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 170: A comparison of two running time expressions'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How confident are you that you wish to use prog-linear instead of prog-square?
    Consider the graph in [figure 170](#%28counter._%28figure._fig~3aperformance%29%29).
    In this graph, the x-axis records the size of the input—<wbr>say the length of
    a list—<wbr>and the y-axis records the time it takes to compute the answer for
    an input of a specific size. Assume that the straight line represents the running
    time of prog-linear and the curved graph represents prog-square. In the shaded
    region, prog-linear takes less time than prog-square, but at the edge of this
    region, the two graphs cross, and to its right, the performance of prog-square
    is better than that of prog-linear. If, for whatever reasons, you had evaluated
    the performance of prog-linear and prog-square only for input sizes in the blue
    region and if your clients were to run your program mostly on inputs that fall
    in the non-shaded region, you would be delivering the wrong program.
  prefs: []
  type: TYPE_NORMAL
- en: This intermezzo introduces the basic idea of algorithmic analysis, which allows
    programmers to make general statements about a program’s performance. Any serious
    programmer must be thoroughly familiar with this notion. It is the basis for analyzing
    performance attributes of programs, and it is a generally useful concept for describing
    the growth of functions in many other disciplines. This intermezzo provides a
    first glimpse at the idea; to understand the details and how to use it properly,
    you will need to study a text on algorithm analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Concrete Time, Abstract Time
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Making Choices](#%28part._sec~3achoice%29) compares the running time of gcd
    and gcd-generative. In addition, it argues that the latter is better because it
    always uses fewer recursive steps than the former to compute an answer. We use
    this idea as the starting point to analyze the performance of how-many, a simple
    program from [Designing with Self-Referential Data Definitions](part_two.html#%28part._ch~3adesign-lists%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (how-many a-list)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) a-list) 0]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (how-many ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) a-list)) 1)]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Suppose we want to know how long it takes to compute the length of some unknown,
    non-empty list. Using the rules of computation from [Intermezzo: BSL](part_one.html#%28part._i1-2%29),
    we can look at this process as a series of algebraic manipulations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (how-many some-non-empty-list) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) some-non-empty-list) 0]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (how-many ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) some-non-empty-list)) 1)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [#false 0] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (how-many ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) some-non-empty-list)) 1)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (how-many ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) some-non-empty-list)) 1)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (how-many ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) some-non-empty-list)) 1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The first step is to replace a-list in the definition of how-many with the actual
    argument, some-non-empty-list, which yields the first [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    expression. Next we must evaluate
  prefs: []
  type: TYPE_NORMAL
- en: ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) some-non-empty-list)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'By assumption the result is #false. The question is how long it takes to determine
    this result. While we don’t know the precise amount of time, it is safe to say
    that checking on the constructor of a list takes a small and fixed amount of time.
    Indeed, this assumption also holds for the next step, when [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    checks what the value of the first condition is. Since it is #false, the first
    [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    line is dropped. Checking whether a [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    line starts with [else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    is equally fast, which means we are left with'
  prefs: []
  type: TYPE_NORMAL
- en: ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (how-many ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) some-non-empty-list)) 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Finally we may safely assume that [rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)
    extracts the remainder of the list in a fixed amount of time, but otherwise it
    looks like we are stuck. To compute how long how-many takes to determine the length
    of some list, we need to know how long how-many takes to count the number of items
    in the rest of that list.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if we assume that predicates and selectors take some fixed amount
    of time, the time it takes how-many to determine the length of a list depends
    on the number of recursive steps it takes. Somewhat more precisely, evaluating
    (how-many  some-list) takes roughly n times some fixed amount times where n is
    the length of the list or, equivalently, the number of times the program recurs.
  prefs: []
  type: TYPE_NORMAL
- en: Generalizing from this example suggests that the running time depends on the
    size of the input and that the number of recursive steps is a good estimate for
    the length of an evaluation sequence. For this reason, computer scientists discuss
    the abstract running time of a program as a relationship between the size of the
    input and the number of recursive steps in an evaluation.Abstract because the
    measure ignores the details of how much time primitive steps take. In our first
    example, the size of the input is the number of items on the list. Thus, a list
    of one item requires one recursive step, a list of two needs two steps, and for
    a list of n items, it’s n steps.
  prefs: []
  type: TYPE_NORMAL
- en: Computer scientists use the phrase a program f takes “on the order of n steps”
    to formulate a claim about abstract running time of f. To use the phrase correctly,
    it must come with an explanation of n, for example, “it counts the number of items
    on the given list” or “it is the number of digits in the given number.” Without
    such an explanation, the original phrase is actually meaningless.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all programs have the kind of simple abstract running time as how-many.
    Take a look at the first recursive program in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (contains-flatt? lo-names)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) lo-names) #false]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29) lo-names)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) lo-names) ''flatt)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (contains-flatt? ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) lo-names)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: For a list that starts with 'flatt, say,
  prefs: []
  type: TYPE_NORMAL
- en: '| (contains-flatt? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ''flatt ''robot ''ball ''game-boy ''pokemon))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: the program requires no recursive steps. In contrast, if 'flatt occurs at the
    end of the list, as in,
  prefs: []
  type: TYPE_NORMAL
- en: '| (contains-flatt? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ''robot ''ball ''game-boy ''pokemon ''flatt))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'the evaluation needs as many recursive steps as there are items in the list.This
    second analysis brings us to the second important idea of program analysis, namely,
    the kind of analysis that is performed:'
  prefs: []
  type: TYPE_NORMAL
- en: A best-case analysis focuses on the class of inputs for which the program can
    easily find the answer. In our running example, a list that starts with 'flatt
    is the best kind of input.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In turn, a worst-case analysis determines how badly a program performs for those
    inputs that stress it most. The contains-flatt? function exhibits its worst performance
    when 'flatt is at the end of the input list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, a average analysis starts from the idea that programmers cannot assume
    that inputs are always of the best possible shape and that they must hope that
    the inputs are not of the worst possible shape. In many cases, they must estimate
    the average time a program takes. For example, contains-flatt? finds, on the average,
    'flatt somewhere in the middle of the input list. Thus, if the latter consists
    of n items, the average running time of contains-flatt? is ![image](../Images/93de999d515c93531b2888fdd1b53a29.jpg),
    that is, it recurs half as often as there are items on the input.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computer scientists therefore usually employ the “on the order of” phrase in
    conjunction with “on the average” or “in the worst case.”Returning to the idea
    that contains-flatt? uses, on the average, an “order of a ![image](../Images/f431176456e93ef23ac33280f78aec18.jpg)
    steps” brings us to one more characteristic of abstract running time. Because
    it ignores the exact time it takes to evaluate primitive computation steps—<wbr>checking
    predicates, selecting values, picking [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clauses—<wbr>we can drop the division by 2. Here is why. By assumption, each basic
    step takes k units of time, meaning contains-flatt? takes time
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/1eedc51486fdaed8fb9ba1930050e4f8.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'If you had a newer computer, these basic computations may run twice as fast,
    in which case we would use ![image](../Images/c5471033eb5b61d54fdc1662e9d66ad5.jpg)
    as the constant for basic work. Let’s call this constant c and calculate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/c3721594cfefbea6a28eeef003299e3b.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'That is, the abstract running time is always n multiplied by a constant, and
    that’s all that matters to say “order of n.”Now consider our sorting program from
    [figure 68](part_two.html#%28counter._%28figure._fig~3asort%29%29). Here is a
    hand-evaluation for a small input, listing all recursive steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 1 2))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (insert 3 ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 2)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (insert 3 (insert 1 ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (insert 3 (insert 1 (insert 2 ([sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29) ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (insert 3 (insert 1 (insert 2 ''()))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (insert 3 (insert 1 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (insert 3 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 2 (insert 1 ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (insert 3 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (insert 3 ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 2 1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The evaluation shows how [sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29)
    traverses the given list and how it sets up an application of insert for each
    number in the list. Put differently, [sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29)
    is a two-phase program. During the first one, the recursive steps for [sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29)
    set up as many applications of insert as there are items in the list. During the
    second phase, each application of insert traverses a sorted list.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting an item is similar to finding an one, so it is not surprising that
    the performance of insert and contains-flatt? are alike. The applications of insert
    to a list of l items triggers between 0 and l recursive steps. On the average,
    we assume it requires ![image](../Images/6989fc5c0c256e03c61f106feae5cee9.jpg),
    which means that insert takes “on the order of l steps” where l is the length
    of the given list.
  prefs: []
  type: TYPE_NORMAL
- en: The question is how these lists are to which insert adds numbers. Generalizing
    from the above calculation, we can see that the first one is ![image](../Images/c7e1733af6352c58b7902cd34d2e5b5c.jpg)
    items long, the second one ![image](../Images/8346763167f0bd038ea461defe6e2066.jpg),
    and so on, all the way down to the empty list. Hence, we get that insert performs
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/6e4744261941ebd624218718f429e8ab.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: meaning
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f5dd5d3840e44560927d23ddd5cae2dc.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: represents the best “guess” at the average number of insertion steps. In this
    last term, n2 is the dominant factor and so we say that a sorting process takes
    “on the order of n2 steps.” [Exercise 486](#%28counter._%28exercise._ex~3abig-o1%29%29)
    ask you to argue why it is correct to simplify this claim in this way.
  prefs: []
  type: TYPE_NORMAL
- en: See [exercise 486](#%28counter._%28exercise._ex~3abig-o1%29%29) why this is
    the case.
  prefs: []
  type: TYPE_NORMAL
- en: We can also proceed with less formalism and rigor. Because [sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29)
    uses insert once per item on the list, we get an “order of n” insert steps where
    n is the size of the list. Since insert needs ![image](../Images/dd6ac996b459159bab2b9909a2c828ca.jpg)
    steps, we now see that a sorting process needs ![image](../Images/1a31b1785f75882f6eb3193772ed386b.jpg)
    steps or “on the order of n2.
  prefs: []
  type: TYPE_NORMAL
- en: Totaling it all up, we get that [sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29)
    takes on the “order of n steps” plus n2 recursive steps in insert for a list of
    n items, which yields
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/60c256e17cbcb5140274df5e4ae3e059.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'steps. See again [exercise 486](#%28counter._%28exercise._ex~3abig-o1%29%29)
    for details. Note This analysis assumes that comparing two items on the list takes
    a fixed amount of time.Our final example is the inf program from [Local Definitions](part_three.html#%28part._sec~3alocal-definitions%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (inf l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) (inf ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               (inf ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Let’s start with a small input: ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  3  2  1  0).
    We know that the result is 0. Here is the first important step of a hand-evaluation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (inf ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 2 1 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) 3 (inf ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     3 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (inf ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'From here, we must evaluate the first recursive call. Because the result is
    0 and the condition is thus #false, we must evaluate the recursion in the else-branch
    as well.Once we do so, we see two evaluations of (inf  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  1  0)):'
  prefs: []
  type: TYPE_NORMAL
- en: '| (inf ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 1 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) 2 (inf ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 0))) 2 (inf ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 1 0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'At this point we can generalize the pattern and summarize it in a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| original expression |  | requires two evaluations of |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (inf  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  3  2  1  0))
    |  | (inf  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  2  1  0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (inf  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  2  1  0))
    |  | (inf  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  1  0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (inf  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  1  0))
    |  | (inf  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In total, the hand-evaluation requires eight recursive steps for a list of four
    items. If we added 4 to the front of the list, we would double the number of recursive
    steps again. Speaking algebraically, inf needs on the order of 2n recursive steps
    for a list of n numbers when the last number is the maximum, which is clearly
    the worst case for inf.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! If you paid close attention, you know that the above suggestion is sloppy.
    The inf program really just needs ![image](../Images/6c7eec82728bbb24175cd2457ccb566d.jpg)
    recursive steps for a list of n items. What is going on?
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that we don’t really measure the exact time when we say “on the order
    of.” Instead we skip over all built-in predicates, selectors, constructors, arithmetic,
    and so on and focus on recursive steps only. Now consider this calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/de120f3d0fde8767fc9f72b4a9010160.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'It shows that ![image](../Images/6aef8f15cc673324a5370d49ecde2154.jpg) and
    ![image](../Images/6922036666d7d5243da824ea466aff85.jpg) differ by a small factor:
    2, meaning “on the order of ![image](../Images/f4cf575fd98e44d697957c288ecb1705.jpg)
    steps” describes inf in a world where all basic operations provided by *SL run
    at half the speed when compared to an inf program that runs at “the order of ![image](../Images/a6e01b4756d1d09e54a3b827facce727.jpg)
    steps.” In this sense, the two expressions really mean the same thing. The question
    is what exactly they mean, and that is the subject of the next section.Exercise 484\.
    While a list sorted in descending order is clearly the worst possible input for
    inf, the analysis of inf’s abstract running time explains why the rewrite of inf
    with [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    reduces the running time. For convenience, we replicate this version here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (infL l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) s (infL ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([<](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) s) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) s))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Hand-evaluate (infL  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  3  2  1  0)).
    Then argue that infL uses on the “order of n steps” in the best and the worst
    case. You may now wish to revisit [exercise 261](part_three.html#%28counter._%28exercise._ex~3alocal-interm1%29%29),
    which asks you to explore a similar problem. [![image](../Images/1e9cee2139b60ba64faeb6909716c3e5.jpg)](#%28counter._%28exercise._ex~3aorder-of-0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 485\. A number tree is either a number or a pair of number trees. Design
    sum-tree, which determines the sum of the numbers in a tree. What is its abstract
    running time? What is an acceptable measure of the size of such a tree? What is
    the worst possible shape of the tree? What’s the best possible shape? [![image](../Images/717553754fb2e5b5033eda4e3635d30e.jpg)](#%28counter._%28exercise._ex~3aorder-of-2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: The Definition of “on the Order of”
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The preceding section alluded to all the key ingredients of the phrase “on
    the order of.” Now it is time to introduce a rigorous description of the phrase.
    Let’s start with the two ideas that the preceding section develops:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract measurement of performance is a relationship between two quantities:
    the size of the input and the number of recursive steps needed to determine the
    answer. The relationship is actually a mathematical function that maps one natural
    number—<wbr>the size of the input—<wbr>to another—<wbr>the time needed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hence, a general statement about the performance of a program is a statement
    about a function, and a comparison of the performance of two programs calls for
    the comparison of two such functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you decide whether one such function is “better” than another?
  prefs: []
  type: TYPE_NORMAL
- en: '[Exercise 245](part_three.html#%28counter._%28exercise._ex~3asem2-funcs%29%29)
    tackles a different question, namely, whether we can formulate a program that
    decides whether two other programs are equal. In this intermezzo, we are not writing
    a program; we are using plain mathematical arguments.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s return to the imaginary programs from the introduction: prog-linear and
    prog-square. They compute the same results but their performance differs. The
    prog-linear program requires “on the order of n steps” while prog-square uses
    “on the order of n2 steps.” Mathematically speaking, the performance function
    for prog-linear is'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/d297ef59076b27050a482ae51d59944f.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: and prog-square’s associated performance function is
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/6e2b346424e1222e17f1f8c846203ef1.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: In these definitions, cL is the cost for each recursive step in prog-square
    and cS is the cost per step in prog-linear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say we figure out that cL = 1000 and cS = 1. Then we can tabulate these abstract
    running times to make the comparison concrete:'
  prefs: []
  type: TYPE_NORMAL
- en: '| n |  | 10 |  | 100 |  | 1000 |  | 2000 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| prog-square |  | 100 |  | 10000 |  | 1000000 |  | 4000000 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| prog-linear |  | 10000 |  | 100000 |  | 1000000 |  | 2000000 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Like the graphs in [figure 170](#%28counter._%28figure._fig~3aperformance%29%29),
    the table at first seems to say that prog-square is better than prog-linear, because
    for inputs of the same size n, prog-square’s result is smaller than prog-linear’s.
    But look at the last column in the table. Once the inputs is sufficiently large,
    prog-square’s advantage decreases until it disappears at an input size of 1000.
    Thereafter prog-square is always slower than prog-linear.
  prefs: []
  type: TYPE_NORMAL
- en: This last insight is the key to the precise definition of the phrase “order
    of.” If a function f on the natural numbers produces larger numbers than some
    function g for all natural numbers, then f is clearly larger than g. But what
    if this comparison fails for just a few inputs, say for 1000 or 1000000, and holds
    for all others? In that case, we would still like to say f is better than g. And
    this brings us to the following definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Definition Given a function g on the natural numbers, O(g) (pronounced: “big-O
    of g”) is a class of functions on natural numbers. A function f is a member of
    O(g) if there exist numbers c and bigEnough such that'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: for all ![image](../Images/3eb7404afdc8450a55712542f9883fef.jpg) it is true
    that ![image](../Images/f154ee7dc4704c26059b2a0531675c09.jpg)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Terminology If ![image](../Images/09d9e191471bc44e442094730ab163dd.jpg), we
    say f is no worse than g.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Naturally, we would love to illustrate this definition with the example of
    prog-linear and prog-square from above. Recall the performance functions for prog-linear
    and prog-square, with the constants plugged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/723dffed8e9a4c6d333c7a9dac1eaf8c.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/7207d8f2d2fc4729f715c002879821c2.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'The key is to find the magic numbers c and bigEnough such that ![image](../Images/202c90c631a86c1f94a1c441a00b3da0.jpg),
    which would validate that prog-square’s performance is no worse than prog-linear’s.
    For now, we just tell you what these numbers are:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/0b7369de013a6a78cf7a4b6fb1968ba3.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Using these numbers, we need to show that
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/e2aa2996250acf86ae0481f4d1bb3324.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'for every single n larger than 1000. Here is how this kind of argument is spelled
    out:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pick some specific n0 that satisfies the condition:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![image](../Images/f8a81288275b8af1911f8dd7f2b01574.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We use the symbolic name n0 so that we don’t make any specific assumptions
    about it. Now recall from algebra that you can multiply both sides of the inequality
    with the same positive factor, and the inequality still holds. We use n0:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![image](../Images/64c5fd2442510488499947b5d1dbbda6.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'At this point, it is time to observe that the left side of the inequality is
    just H(n0) and the right side is G(n0):'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![image](../Images/e5b93e3aa2ff5050d6b100ce9ad3400a.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since n0 is a generic number of the right kind, we have shown exactly what we
    wanted to show.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Usually you find bigEnough and c working your way backwards through such an
    argument. While this kind of mathematical reasoning is fascinating, we leave it
    to a course on algorithms.The definition of O also explains with mathematical
    rigor why we don’t have to pay attention to specific constants in our comparisons
    of abstract running times. Say we can make each basic step of prog-linear go twice
    as fast so that we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/dd2022be7c7eb2f7fbd03a0168cc258b.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/5f0a1421fefe42da50afa4590903a6ea.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The above argument goes through by doubling bigEnough to 2000.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, most people use O together with a shorthand for stating functions.
    Thus they say how-many’s running time is O(n)—<wbr>because they tend to think
    of n as an abbreviation of the (mathematical) function id(n) = n. Similarly, this
    use yields the claim that [sort](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sort%29%29)’s
    worst-case running time is O(n2) and inc’s is O(2n)—<wbr>again because n2 is short-hand
    for the function sqr(n) = n2 and 2n is short for expt(n) = 2n.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! What does it mean to say that a function’s performance is O(1)?
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 486\. In the first subsection, we stated that the function f(n) = n2
    + n belongs to the class O(n2). Determine the pair of numbers c and bigEnough
    that verify this claim. [![image](../Images/ca0d9c1ead3e1deb88ca2c2c62809292.jpg)](#%28counter._%28exercise._ex~3abig-o1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 487\. Consider the functions f(n) = 2n and g(n) = 1000 n. Show that
    g belongs to O(f), which means that f is abstractly speaking more (or at least
    equally) expensive than g. If the input size is guaranteed to be between 3 and
    12, which function is better? [![image](../Images/cdc6effba810d9870a075420f3667182.jpg)](#%28counter._%28exercise._ex~3abig-o2%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 488\. Compare ![image](../Images/7cd21f01c3459d3c4e1900387bf79fea.jpg)
    and ![image](../Images/0d91856df1d278539708267e3bf1abec.jpg). Does f belong to
    O(g) or g to O(f)? [![image](../Images/cb7a53a411d46212c2b66372b2e5d99f.jpg)](#%28counter._%28exercise._ex~3abig-o3%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Why do Programs use Predicates and Selectors?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The notion of “on the order of” explains why the design recipes produce both
    well-organized and “performant” programs. We illustrate this insight with a single
    example, the design of a program that searches for a number in a list of numbers.
    Here are the signature, the purpose statement, and examples formulated as tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Number](part_one.html#%28tech._number%29) [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is x in l |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (search 0 ''(3 2 1 0)) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (search 4 ''(3 2 1 0)) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here are two definitions that live up to these expectations:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (searchL x l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) #false]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) x)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          (searchL &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;            x ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (searchS x l)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) (length l) 0) #false]
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;      ([or](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._or%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) x)
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;          (searchS &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;            x ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The design of the program on the left follows the design recipe. In particular,
    the development of the template calls for the use of structural predicates per
    clause in the data definition. Following this advice yields a conditional program
    whose first [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    line deals with empty lists and the second one with all others. The question in
    the first [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    line uses [empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29)
    and the second one uses [cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29)
    of [else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: The design of the program on the right fails to live up to the structural design
    recipe.Technically searchS uses generative recursion. It instead takes inspiration
    from the idea that lists are containers that have a size. Hence, a program can
    check this size for 0, which is equivalent to checking for emptiness.
  prefs: []
  type: TYPE_NORMAL
- en: Although this idea is functionally correct, it makes the assumption that the
    cost of *SL-provided operations is a fixed constant. If length is more like how-many,
    however, searchS is going to be slower than searchL. Using our new terminology,
    searchL is using O(n) recursive steps while searchS needs O(n2) steps for a list
    of n items. In short, using arbitrary *SL operations to formulate conditions may
    shift performance from one class of functions to one that is much worse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s wrap up this intermezzo with an experiment that checks whether length
    is a constant-time function or whether it consumes time proportionally to the
    length of the given list. The easiest way is to define a program that creates
    a long list and determines how much time each version of the search program takes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29) -> [[List](part_three.html#%28tech._sim-dd._list%29)  [Boolean](part_one.html#%28tech._boolean%29)  [Boolean](part_one.html#%28tech._boolean%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; how long do searchS and searchL take |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; to look for n in ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  0  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  1))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (timing n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) long-list
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29) n ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (x) x))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([time](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._time%29%29) (searchS n long-list))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([time](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._time%29%29) (searchL n long-list)))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Now run this program on 10000 and 20000. If length is like [empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29),
    the times for the second run will be roughly twice of the first one; otherwise,
    the time for searchS will increase drammatically.
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Conduct the experiment.
  prefs: []
  type: TYPE_NORMAL
- en: See [Data Representations with Accumulators](part_six.html#%28part._sec~3amore-accu-mc%29)
    for how other languages track the size of a container.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Assuming you have completed the experiment, you now know that length takes time
    proportionally to the size of the given list and the “S” in searchS stands for
    “squared” because its running time is O(n2). But don’t jump to the conclusion
    that this kind of reasoning holds for every programming language you will encounter.
    Many deal with containers differently than *SL. Understanding how they do this,
    calls for the introduction of one more design concept—<wbr>accumulators, which
    is what the final part of this book is about.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 489\. Reconnect with [Auxiliary Functions that Generalize](part_two.html#%28part._sec~3agen-funcs%29)
    and explain render-poly. [![image](../Images/bf13403da5ce39cc72e59ea4119382d4.jpg)](#%28counter._%28exercise._ex~3aempty-.O%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: VIAccumulators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you ask ISL+ to apply some function f to an argument a, you usually get
    some value v. If you evaluate (f  a) again, you get v again. As a matter of fact,
    you get v no matter how often you request the evaluation of (f  a).The function
    application may also loop forever or signal an error, but we ignore these possibilities.
    We also ignore random, which is the true exception to this rule. Whether the function
    is applied for the first time or the hundredth time, whether the application is
    located in DrRacket’s interactions area or inside the function itself, doesn’t
    matter. The function works according to its purpose statement, and that’s all
    you need to know.
  prefs: []
  type: TYPE_NORMAL
- en: This principle of context-independence plays a critical role in the design of
    recursive functions. When it comes to design, you are free to assume that the
    function computes what the purpose statement promises—<wbr>even if the function
    isn’t defined yet. In particular, you are free to use the results of recursive
    calls to create the code of some function, usually in one of its cond clauses.
    The template and coding steps of the design recipes for both structurally and
    generative recursive functions rely on this idea.
  prefs: []
  type: TYPE_NORMAL
- en: While context-independence facilitates the design of functions, it causes two
    problems. In general, context-independence induces a loss of knowledge during
    a recursive evaluation; a function does not “know” whether it is called on a complete
    list or on a piece of that list. For structurally recursive programs, this loss
    of knowledge means that they may have to traverse data more than once, inducing
    a performance cost. For functions that employ generative recursion, the loss means
    that the function may not be able to compute the result at all. The preceding
    part illustrates this second problem with a graph traversal function that cannot
    find a path between two nodes for a circular graph.
  prefs: []
  type: TYPE_NORMAL
- en: This part introduces a variant of the design recipes to address this “loss of
    context” problem. Since we wish to retain the principle that (f  a) returns the
    same result no matter how often or where it is evaluated, the only solution is
    to add an argument that represents the context of the function call. We call this
    additional argument an accumulator. During the traversal of data, the recursive
    calls continue to receive regular arguments while accumulators change in relation
    to those and the context.
  prefs: []
  type: TYPE_NORMAL
- en: Designing functions with accumulators correctly is clearly more complex than
    any of the design approaches from the preceding chapters. The key is to understand
    the relationship between the proper arguments and the accumulators. The following
    chapters explain how to design functions with accumulators and how they work.
  prefs: []
  type: TYPE_NORMAL
- en: 31The Loss of Knowledge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both functions designed according to structural recipes and the generative one
    suffer from the loss of knowledge, though in different ways. This chapter explains
    with two examples—<wbr>one from each category—<wbr>how the lack of contextual
    knowledge affects the performance of functions. While the first section is about
    structural recursion, the second one addresses concerns in the generative realm.
  prefs: []
  type: TYPE_NORMAL
- en: 31.1A Problem with Structural Processing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start with a seemingly straightforward example:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem You are working for a geometer team that will measure the length
    of roads segments. The team asked you to design a program that translates these
    relative distances between a series of road points into absolute distances for
    some starting point.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For example, we might be given a line such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/ae21484d48d67b94f5c0300f77013145.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Each number specifies the distance between two dots. What we need is the following
    picture, where each dot is annotated with the distance to the left-most end:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/e9e90d5e795a6818a385b3ac0cc51fae.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Designing a program that performs this calculation is a mere exercise in structural
    function design. [Figure 171](#%28counter._%28figure._fig~3arel-abs-dist%29%29)
    contains the complete program. When the given list is not '(), the natural recursion
    computes the absolute distance of the remainder of the dots to the first one on
    ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  l).
    Because the first is not the actual origin and has a distance of ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29)  l)
    to the origin, we must add ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29)  l)
    to each number on the result of the natural recursion. This second step—<wbr>adding
    a number to each item on a list of numbers—<wbr>requires an auxiliary function.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; convert a list of relative to absolute distances |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; the first number represents the distance to the origin |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (relative->absolute ''(50 40 70 30 30))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ''(50 90 160 190 220)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (relative->absolute l)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) rest-of-l
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                     (relative->absolute ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                   ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) adjusted
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                     (add-to-each ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) rest-of-l)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) adjusted))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Number](part_one.html#%28tech._number%29) [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; add n to each number on l |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 50 (add-to-each 50 ''(40 110 140 170)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ''(50 90 160 190 220)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-to-each n l)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) n) (add-to-each n ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 171: Converting relative distances to absolute distances'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'While designing the program is relatively straightforward, using it on larger
    and larger lists reveals a problem. Consider the evaluation of the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: (relative->absolute ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29) size [add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As we increase size, the time needed grows even faster:'
  prefs: []
  type: TYPE_NORMAL
- en: '| size |  | 1000 |  | 2000 |  | 3000 |  | 4000 |  | 5000 |  | 6000 |  | 7000
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| time |  | 25 |  | 109 |  | 234 |  | 429 |  | 689 |  | 978 |  | 1365 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Instead of doubling as we go from 1000 to 2000 items, the time quadruples.
    This is also the approximate relationship for going from 2000 to 4000, and so
    on.The times will differ from computer to computer and year to year. These measurements
    were conducted in 2014 on a MacMini running OS X 10.8.5; the previous measurement
    took place in 1998, and the times were 100x larger. Using the terminology of [Intermezzo:
    The Cost of Computation](part_five.html#%28part._i5-6%29), we say that the function’s
    performance is O(n2) where n is the length of the given list.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 490\. Reformulate add-to-each using [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29)
    and [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29).
    [![image](../Images/161aec90eafbc1352990aec2707ce90b.jpg)](#%28counter._%28exercise._ex~3aadd-to-each-map%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 491\. Develop a formula that describes the abstract running time of
    relative->absolute. Hint Evaluate the expression
  prefs: []
  type: TYPE_NORMAL
- en: (relative->absolute ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29) size [add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: by hand. Start by replacing size with 1, 2, and 3\. How many recursions of relative->absolute
    and add-to-each are required each time? [![image](../Images/82d0360643a0a7ff719f2aa3813faa58.jpg)](#%28counter._%28exercise._ex~3arel-abs-.O%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Considering the simplicity of the problem, the amount of work that the program
    performs is surprising. If we were to convert the same list by hand, we would
    tally up the total distance and just add it to the relative distances as we take
    steps along the line. Why can’t a program do so?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s attempt to design a version of the function that is close to our manual
    method. We still start from the list-processing template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (relative->absolute/a l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (relative->absolute/a ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Now let’s simulate a hand evaluation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (relative->absolute/a ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 2 7))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) 3 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (relative->absolute/a ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 7)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) 3 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) 2 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        (relative->absolute/a ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 7))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) 3 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) 2 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) 7 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (relative->absolute/a ''())))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The first item of the result list should obviously be 3, and it is easy to construct
    this list. But, the second one should be ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)  3  2),
    yet the second instance of relative->absolute/a has no way of “knowing” that the
    first item of the original list is 3. The “knowledge” is lost.
  prefs: []
  type: TYPE_NORMAL
- en: Again, the problem is that recursive functions are independent of their context.
    A function processes L in ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  N  L)
    the same way as in ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)  K  L).
    Indeed, if given L by itself, it would also process the list in that way.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make up for the loss of “knowledge,” we equip the function with an additional
    parameter: accu-dist. The latter represents the accumulated distance, which is
    the tally that we keep when we convert a list of relative distances to a list
    of absolute distances. Its initial value must be 0. As the function traverses
    the list, it must add its numbers to the tally.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the revised definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (relative->absolute/a l accu-dist)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) tally ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) accu-dist)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) tally
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          (relative->absolute/a ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) tally)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'The recursive application consumes the rest of the list and the new absolute
    distance of the current point to the origin. Although both arguments are changing
    for every call, the change in the second one strictly depends on the first argument.
    The function is still a plain list-processing procedure.Now let’s Evaluate our
    running example again:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (relative->absolute/a ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 2 7))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (relative->absolute/a ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 3 2 7) 0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 3 (relative->absolute/a ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 2 7) 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 3 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 5 (relative->absolute/a ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) 7) 5)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 3 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 5 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 12 ???)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 3 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 5 ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) 12 ''())))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Fill in the question marks in line 4.
  prefs: []
  type: TYPE_NORMAL
- en: The hand-evaluation shows just how much the use of an accumulator simplifies
    the conversion process. Each item in the list is processed once. When relative->absolute/a
    reaches the end of the argument list, the result is completely determined and
    no further work is needed. In general, the function performs on the order of N
    natural recursion steps for a list with N items.
  prefs: []
  type: TYPE_NORMAL
- en: One problem is that, unlike relative->absolute, the new function consumes two
    arguments not just one. Worse, someone might accidentally misuse relative->absolute/a
    by applying it to a list of numbers and a number that isn’t 0. We can solve both
    problems with a function definition that uses a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    definition to encapsulate relative->absolute/a; [figure 172](#%28counter._%28figure._fig~3arel-abs-human%29%29)
    shows the result. Now, relative->absolute is indistinguishable from relative->absolute.v2
    with respect to input-output.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; convert a list of relative to absolute distances |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; the first number represents the distance to the origin |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (relative->absolute.v2 ''(50 40 70 30 30))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ''(50 90 160 190 220)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (relative->absolute.v2 l0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    [Number](part_one.html#%28tech._number%29) -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (relative->absolute/a l accu-dist)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) accu ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) accu-dist)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) accu
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (relative->absolute/a ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l) accu)))])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (relative->absolute/a l0 0))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 172: Converting relative distances with an accumulator'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now let’s look at how this version of the program performs. To this end, we
    evaluate
  prefs: []
  type: TYPE_NORMAL
- en: (relative->absolute.v2 ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29) size [add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and tabulate the results for several values of size:'
  prefs: []
  type: TYPE_NORMAL
- en: '| size |  | 1000 |  | 2000 |  | 3000 |  | 4000 |  | 5000 |  | 6000 |  | 7000
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| time |  | 0 |  | 0 |  | 0 |  | 0 |  | 0 |  | 1 |  | 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Amazingly relative->absolute.v2 never takes more than one second to process
    such lists, even for a list of 7000 numbers. Comparing this performance to the
    one of relative->absolute, you may think that accumulators are a miracle cure
    for all slow-running programs. Unfortunately, this isn’t the case, but when a
    structurally recursive functions has to re-process the result of the natural recursion
    you should definitely consider the use of accumulators. In this particular case,
    the performance improved from O(n2) to O(n)—<wbr>with an additional large reduction
    in the constant.Exercise 492\. With a bit of design and a bit of tinkering a friend
    of yours came up with the following solution for the sample problem:Adrian German
    and Mardin Yadegar suggested this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (relative->absolute l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|  ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|    ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29) (f l) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) f ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)) l))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This simple solution merely uses well-known ISL+ functions: [reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29)
    and [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29).
    Using [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29),
    as you know, is just a convenience. You may also recall from [Abstraction](part_three.html)
    that [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    is designable with the design recipes presented in the first two parts of the
    book.'
  prefs: []
  type: TYPE_NORMAL
- en: Does your friend’s solution mean there is no need for our complicated design
    in this motivational section? For an answer, see [Recognizing the Need for an
    Accumulator](#%28part._sec~3aneed-accu%29), but reflect on the question first.
    Hint Try to design [reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29)
    on your own. [![image](../Images/840c6c229cb5616e98a222912476f206.jpg)](#%28counter._%28exercise._ex~3arel-abs-from-reverse%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 31.2A Problem with Generative Recursion
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let us revisit the problem of “traveling” along a path in a graph:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design an algorithm that checks whether two nodes are connected
    in a simple graph. In such a graph, each node has exactly one, directional connection
    to another, and possibly itself.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Algorithms that Backtrack](part_five.html#%28part._ch~3abacktrack%29) covered
    the variant where the algorithm has to discover the path. This sample problem
    is simpler than that, because this section focuses on the design of an accumulator
    version of the algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the sample graph in [figure 173](#%28counter._%28figure._fig~3asim-graph%29%29).
    There are six nodes: A through F, and six connections. A path from A to E must
    contain B and C. There is no path, though, from A to F or from any other node
    besides itself.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ![image](../Images/4f281edc410e4b18891c84f91208c8eb.jpg) |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '&#124; ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) a-sg
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''((A B) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (B C) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (C E) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (D E) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (E B) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;     (F F))) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 173: A simple graph'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The right part of [figure 173](#%28counter._%28figure._fig~3asim-graph%29%29)
    shows how to represent this graph with nested lists. Each node is represented
    by a list of two symbols. The first symbol is the label of the node; the second
    one is the single node that is reachable from the first one. Here are the relevant
    data definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A SimpleGraph is a [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Connection](#%28tech._connection%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Connection is a list of two items: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  [Node](#%28tech._node%29)  [Node](#%28tech._node%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Node is a [Symbol](part_two.html#%28tech._symbol%29). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'They are straightforward translations of our informal descriptions.We already
    know that the problem calls for generative recursion, and it is easy to create
    the header material:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Node](#%28tech._node%29)  [Node](#%28tech._node%29)  [SimpleGraph](#%28tech._simplegraph%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is there a path from origin to destination |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; in the simple graph sg |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (path-exists? ''A ''E a-sg) #true)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (path-exists? ''A ''F a-sg) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (path-exists? origin destination sg)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   #false) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'What we need are answers to the four basic questions of the recipe for generative
    recursion:'
  prefs: []
  type: TYPE_NORMAL
- en: The problem is trivial if origin is the same as destination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The trivial solution is #true.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If origin is not the same as destination, there is only one thing we can do:
    step to the immediate neighbor and search for destination from there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no need to do anything if we find the solution to the new problem.
    If origin’s neighbor is connected to destination, then so is origin. Otherwise
    there is no connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From here we just need to express these answers in ISL+ to obtain a full-fledged
    program.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Node](#%28tech._node%29)  [Node](#%28tech._node%29)  [SimpleGraph](#%28tech._simplegraph%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is there a path from origin to destination in sg |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (path-exists? ''A ''E a-sg) #true)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (path-exists? ''A ''F a-sg) #false)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (path-exists? origin destination sg)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([symbol=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3d~3f%29%29) origin destination) #t]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (path-exists? (neighbor origin sg)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                         destination |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                         sg)])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Node](#%28tech._node%29)  [SimpleGraph](#%28tech._simplegraph%29) -> [Node](#%28tech._node%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determine the node that is connected to a-node in sg |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (neighbor ''A a-sg) ''B)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-error%29%29) (neighbor ''G a-sg) "neighbor:
    not a node") |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (neighbor a-node sg)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) sg) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) "neighbor:
    not a node")] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([symbol=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3d~3f%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) sg)) a-node)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([second](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._second%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) sg))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               (neighbor a-node ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) sg)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 174: Finding a path in a simple graph'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 174](#%28counter._%28figure._fig~3apath-exists1%29%29) contains the
    complete program, including the function for finding the neighbor of a node in
    a simple graph—<wbr>a straightforward exercise in structural recursion—<wbr>and
    test cases for both. Don’t run the program, however. If you do, be ready with
    your mouse to stop the run-away program. Indeed, even a casual look at the function
    suggests that we have a problem. Although the function is supposed to produce
    #false if there is no path from origin to destination, the program doesn’t contain
    #false anywhere. Conversely, we need to ask what the function actually does when
    there is no path between two nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take another look at [figure 173](#%28counter._%28figure._fig~3asim-graph%29%29).
    In this simple graph there is no path from C to D. The connection that leaves
    C passes right by D and instead goes to E. So let’s look at a hand evaluation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| (path-exists? ''C ''D ''((A B) ![image](../Images/56a9403a20bcb9185bfb6b1765d2c53f.jpg) (F F)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (path-exists? ''E ''D ''((A B)  ![image](../Images/de7373283c8e2e5e5cfa860016644e06.jpg) (F F)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (path-exists? ''B ''D ''((A B)  ![image](../Images/9c93deffa0bc83f39248d0554013fe4d.jpg) (F F)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (path-exists? ''C ''D ''((A B)  ![image](../Images/85c98d5a287078304f33ce71fb35f25b.jpg) (F F)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It confirms that as the function recurs, it calls itself with the exact same
    arguments again and again. In other words, the evaluation never stops.
  prefs: []
  type: TYPE_NORMAL
- en: Our problem with path-exists? is again a loss of “knowledge,” similar to that
    of relative->absolute above. Like relative->absolute, the design of path-exists?
    uses a recipe and assumes that recursive calls are independent of their context.
    In the case of path-exists? this means, in particular, that the function doesn’t
    “know” whether a previous application in the current chain of recursions received
    the exact same arguments.
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this design problem follows the pattern of the preceding section.
    We add a parameter, which we call seen and which represents the accumulated list
    of starter nodes that the function has encountered, starting with the original
    application. Its initial value must be '(). As the function checks on a specific
    origin and moves to its neighbors, origin is added to seen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a first revision of path-exists?, dubbed path-exists?/a:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Node](#%28tech._node%29)  [Node](#%28tech._node%29)  [SimpleGraph](#%28tech._simplegraph%29)
    [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Node](#%28tech._node%29)]
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is there a path from origin to destination |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; assume there are no paths for the nodes in seen |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (path-exists?/a origin destination sg seen)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([symbol=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3d~3f%29%29) origin destination) #true]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (path-exists?/a (neighbor origin sg)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                           destination |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                           sg |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                           ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) origin seen))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The addition of the new parameter alone does not solve our problem, but, as
    the hand-evaluation of
  prefs: []
  type: TYPE_NORMAL
- en: (path-exists?/a 'C 'D '((A B) ![image](../Images/74423cbcbcc2933182d1e2cf406b8e01.jpg) (F F)) '())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'shows, provides the foundation for one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == (path-exists?/a ''E ''D ''((A B) ![image](../Images/7bec987947fed48e6cfe9328a42b38e4.jpg) (F F)) ''(C))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (path-exists?/a ''B ''D ''((A B) ![image](../Images/d646fc7ba544f9180a5dc6501997a0f1.jpg) (F F)) ''(E C))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (path-exists?/a ''C ''D ''((A B) ![image](../Images/04b720cac02a6af2a68abb780d952e68.jpg) (F F)) ''(B E C))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: In contrast to the original function, the revised function no longer calls itself
    with the exact same arguments. While the three arguments proper are again the
    same for the third recursive application, the accumulator argument is different
    from that of the first application. Instead of '(), it is now '(B  E  C). The
    new value tells us that during the search of a path from 'C to 'D, the function
    has inspected 'B, 'E, and 'C as starting points.
  prefs: []
  type: TYPE_NORMAL
- en: 'All we need to do now, is to make the algorithm exploit the accumulated knowledge.
    Specifically, the algorithm can determine whether the given origin is already
    an item in seen. If so, the problem is also trivially solvable yielding #false
    as the solution. [Figure 175](#%28counter._%28figure._fig~3apath-exists2%29%29)
    contains the definition of path-exists.v2?, which is the revision of path-exists?.
    The definition refers to [member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29),
    an ISL+ function.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Node](#%28tech._node%29)  [Node](#%28tech._node%29)  [SimpleGraph](#%28tech._simplegraph%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is there a path from origin to destination in sg |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (path-exists.v2? ''A ''E a-sg) #true)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (path-exists.v2? ''A ''F a-sg) #false)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (path-exists.v2? origin destination sg)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Node](#%28tech._node%29)  [Node](#%28tech._node%29)  [SimpleGraph](#%28tech._simplegraph%29)
    [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Node](#%28tech._node%29)]
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (path-exists?/a origin seen)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([symbol=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._symbol~3d~3f%29%29) origin destination) #t]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) origin seen) #f]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (path-exists?/a (neighbor origin sg)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                                     ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) origin seen))])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (path-exists?/a origin ''()))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 175: Finding a path in a simple graph with an accumulator'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The definition of path-exists.v2? also eliminates the two minor problems with
    the first revision. By localizing the definition of the accumulating function,
    we can ensure that the first call always uses '() as the initial value for seen.
    And, path-exists.v2? satisfies the exact same signature and purpose statement
    as the path-exists? function.
  prefs: []
  type: TYPE_NORMAL
- en: Still, there is a significant difference between path-exists.v2? and relative-to-absolute2.
    Whereas the latter was equivalent to the original function, path-exists.v2? improves
    on path-exists?. While the latter fails to find an answer for some inputs, path-exists.v2?
    finds a solution for any simple graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 493\. Modify the definitions in [figure 163](part_five.html#%28counter._fsm._%28figure._fig~3afind-path-code%29%29)
    so that the program produces #false, even if it encounters the same origin twice.
    [![image](../Images/7c4f15ad296e8c96baf91922e06668dc.jpg)](#%28counter._%28exercise._ex~3afind-path-comp%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: 32Designing Accumulator-style Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding chapter illustrates the need for accumulating extra knowledge
    with two examples. In one case, accumulation makes it easy to understand the function
    and yields one that is far faster than the original version. In the other case,
    accumulation is necessary for the function to work properly. In both cases though,
    the need for accumulation becomes only apparent once a properly designed function
    exists.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generalizing from the preceding chapter suggests that the design of accumulator
    functions has two major aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: the recognition that a function benefits from an accumulator;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: an understanding of what the accumulator represents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first two sections address these two questions. Because the second one is
    a difficult topic, the third section illustrates it with a series of examples
    that convert regular functions into accumulating ones.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29) X] -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)
    X] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; construct the reverse of alox |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (invert ''(a b c)) ''(c b a))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (invert alox)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alox) ''()]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      (add-as-last ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alox) (invert ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alox)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; X [[List-of](part_three.html#%28tech._sim-dd._list._of%29) X] -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)
    X] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; add an-x to the end of alox |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (add-as-last ''a ''(c b)) ''(c b a))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-as-last an-x alox)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alox) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) an-x)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alox) (add-as-last an-x ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alox)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 176: Design with accumulators, a structural example'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 32.1Recognizing the Need for an Accumulator
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Recognizing the need for accumulators is not an easy task. We have seen two
    reasons, and they are the most prevalent ones. In either case, it is critical
    that we first built a complete function based on a conventional design recipe.
    Then we study the function and proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If a structurally recursive function traverses the result of its natural recursion
    with an auxiliary, recursive function, consider the use of an accumulator parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take a look at the definition of invert in [figure 176](#%28counter._%28figure._fig~3adesign-accu-ex%29%29).
    The result of the recursive application produces the reverse of the rest of the
    list. It uses add-as-last to add the first item to this reversed list and thus
    creates the reverse of the entire list. This second, auxiliary function is also
    recursive. We have thus identified an accumulator candidate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It is now time to study some hand-evaluations, as in [A Problem with Structural
    Processing](#%28part._sec~3aloss~3astructural%29), to see whether an accumulator
    helps. Consider the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| (invert ''(a b c)) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| == (add-as-last ''a (invert ''(b c))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| == (add-as-last ''a (add-as-last ''b (invert ''(c)))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| == ... |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| == (add-as-last ''a (add-as-last ''b ''(c))) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| == (add-as-last ''a ''(c b)) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| == ''(c b a) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Replace the dots with the two missing steps. Then you can see that invert
    eventually reaches the end of the given list—<wbr>just like add-as-last—<wbr>and
    if it knew which items to put there, there would be no need for the auxiliary
    function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If we are dealing with a function based on generative recursion, we are faced
    with a much more difficult task. Our goal must be to understand whether the algorithm
    can fail to produce a result for inputs for which we expect a result. If so, adding
    a parameter that accumulates knowledge may help. Because these situations are
    complex, we defer the discussion of an example to [More Uses of Accumulation](#%28part._ch~3amore-accu%29).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Exercise 494\. Argue that, in the terminology of [Intermezzo: The Cost of Computation](part_five.html#%28part._i5-6%29),
    invert consumes O(n2) time when the given list consists of n items. [![image](../Images/ecf1c3170f2bc173b1347506dff6f262.jpg)](#%28counter._%28exercise._ex~3ainvert-.O%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 495\. Does the insertion sort> function from [Auxiliary Functions that
    Recur](part_two.html#%28part._sec~3asort.I%29) need an accumulator? If so, why?
    If not, why not? [![image](../Images/60baf902da90234f92028c690793330c.jpg)](#%28counter._%28exercise._ex~3aneed-accu%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 32.2Adding Accumulators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Once you have decided that an existing function should be equipped with an
    accumulator, take these two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the knowledge that the accumulator represents, what kind of data to
    use, and how the knowledge is acquired as data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, for the conversion of relative distances to absolute distances,
    it suffices to accumulate the total distance encountered so far. As the function
    processes the list of relative distances, it adds each new relative distance found
    to the accumulator’s current value. For the routing problem, the accumulator remembers
    every node encountered. As the path-checking function traverses the graph, it
    [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)es
    each new node on to the accumulator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In general, you want to proceed as follows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create an accumulator template:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ; Domain -> Range |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (function d0)
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; Domain
    AccuDomain -> Range |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator ... |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (function/a d a)
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|             [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '|     (function/a d0 a0))) |'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: Sketch a manual evaluation of an application of function to understand the nature
    of the accumulator.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Determine the kind of data that the accumulator tracks.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Write down a statement that explains the accumulator as a relationship between
    the argument d of the auxiliary function/a and the original argument d0.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Note The relationship remains constant, also called invariant, over the course
    of the evaluation. Because of this property, an accumulator statement is often
    called an invariant.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the invariant to determine the initial value a0 for a.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Also exploit the invariant to determine how to compute the accumulator for the
    recursive function calls within the definition of function/a.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploit the accumulator’s knowledge for the design of function/a.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a structurally recursive function, the accumulator’s value is typically
    used in the base case, that is, the [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause that does not recur. For functions that use generative recursive functions,
    the accumulated knowledge might be used in an existing base case, in a new base
    case, or in the [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clauses that deal with generative recursion.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As you can see, the key is the precise description of the role of the accumulator.
    It is therefore important to practice this skill.Let’s take a look at the invert
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (invert.v2 alox0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)
    X] ??? -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29) X] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; construct the reverse of alox |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (invert/a alox a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alox) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                (invert/a ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alox) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  a  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (invert/a alox0 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: As illustrated in the preceding section, this template suffices to sketch a
    manual evaluation of an example such as
  prefs: []
  type: TYPE_NORMAL
- en: (invert '(a b c))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here is the idea:'
  prefs: []
  type: TYPE_NORMAL
- en: '| == (invert/a ''(a b c) a0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (invert/a ''(b c) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  ''a  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  a0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (invert/a ''(c) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  ''b  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  ''a  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  a0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| == (invert/a ''() [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  ''c  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  ''b  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  ''a  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  a0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'This sketch suggests that invert/a can keep track of all the items it has seen
    in a list that tracks the difference between alox0 and a in reverse order. The
    initial value is clearly ''(); updating the accumulator inside of invert/a with
    [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    produces exactly the desired value when invert/a reaches ''().Here is a refined
    template that includes these insights:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (invert.v2 alox0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)
    X] [[List-of](part_three.html#%28tech._sim-dd._list._of%29) X] -> [[List-of](part_three.html#%28tech._sim-dd._list._of%29)
    X] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; construct the reverse of alox |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator  a is the list of all those |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; items on alox0 that precede alox |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; in reverse order |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (invert/a alox a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alox) a]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                (invert/a ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alox)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                          ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alox) a))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (invert/a alox0 ''()))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: While the body of the [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    definition initializes the accumulator with '(), the recursive call uses [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    to add the current head of alox to the accumulator. In the base case, invert/a
    uses the knowledge in the accumulator, the reversed list.
  prefs: []
  type: TYPE_NORMAL
- en: Note how, once again, invert.v2 merely traverses the list. In contrast, invert
    re-processes every result of its natural recursion with add-as-last. Stop! Measure
    how much faster invert.v2 runs than invert.
  prefs: []
  type: TYPE_NORMAL
- en: Terminology Programmers use the phrase accumulator-style function to discuss
    functions that use an accumulator parameter. Examples of functions in accumulator-style
    are relative->absolute/a, invert/a, and path-exists?/a.
  prefs: []
  type: TYPE_NORMAL
- en: 32.3Transforming Functions into Accumulator-Style
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Articulating the accumulator statement is difficult but without formulating
    a good invariant, it is impossible to understand an accumulator-style function.
    Since the goal of a programmer is to make sure that others who follow understand
    the code easily, practicing this skill is critical. And formulating invariants
    deserves a lot of practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal of this section is to study the formulation of accumulator statements
    with three case studies: a summation function, the factorial function, and a tree-traversal
    function. Each such case is about the conversion of a structurally recursive function
    into accumulator style. None actually call for the use of an accumulator parameter.
    But they are easily understood and, with the elimination of all other distractions,
    using such examples allows us to focus on the articulation of the accumulator
    invariant.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the first example, consider these definitions of the sum function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sum.v1 alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) 0]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon) (sum.v1 ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Here is the first step toward an accumulator version:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sum.v2 alon0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    ??? -> [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; compute the sum of the numbers on alon |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator  ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sum/a alon a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (sum/a ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                      [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  a  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (sum/a alon0 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop! Supply a signature and a test case that works for both.
  prefs: []
  type: TYPE_NORMAL
- en: As suggested by our first step, we have put the template for sum/a into a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    definition, added an accumulator parameter, and renamed the parameter of sum .
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (sum.v1 ''(10 4)) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 10 (sum.v1 ''(4)))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 10 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 4 (sum.v1 ''())))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 10 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 4 ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 0)))
    &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ... &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == 14 &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (sum.v2 ''(10 4)) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == (sum/a ''(10 4) a0) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == (sum/a ''(4) ... 10 ... a0) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == (sum/a ''() ... 4 ... 10 ... a0) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ... &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == 14 &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 177: Calculating with accumulator-style templates'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 177](#%28counter._%28figure._fig~3asum-accu%29%29) shows two side-by-side
    sketches of hand evaluations. A comparison immediately suggests the central idea,
    namely, that sum/a can use the accumulator to add up the numbers as it encounters.
    Concerning the accumulator invariant, the calculations suggests a represents the
    sum of the numbers encountered so far:'
  prefs: []
  type: TYPE_NORMAL
- en: a is the sum of the numbers that alon lacks from alon0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For example, the invariant forces the following relationships to hold:'
  prefs: []
  type: TYPE_NORMAL
- en: '| if |  | alon0 |  | is |  | ''(10  4  6) |  | ''(10  4  6) |  | ''(10  4  6)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| and |  | alon |  | is |  | ''(4  6) |  | ''(6) |  | ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| then |  | a |  | should be |  | 10 |  | 14 |  | 20 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Given this precise invariant, the rest of the design is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sum.v2 alon0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Number](part_one.html#%28tech._number%29)]
    ??? -> [Number](part_one.html#%28tech._number%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; compute the sum of the numbers on alon |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator  a is the sum of the numbers |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; that alon lacks from alon0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (sum/a alon a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) alon) a]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (sum/a ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) alon)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                            ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) alon) a))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (sum/a alon0 0))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: If alon is '(), sum/a returns a because it represents the sum of all numbers
    on alon. The invariant also implies that 0 is the initial value for a0 and [+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)
    updates the accumulator by adding the number that is about to be “forgotten”—<wbr>([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29)  alox)—<wbr>to
    the accumulator a.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 496\. Complete the manual evaluation of (sum/a  '(10  4)  0) in [figure 177](#%28counter._%28figure._fig~3asum-accu%29%29).
    Doing so shows that the sum and sum.v2 add up the given numbers in reverse order.
    While sum adds up the numbers from right to left, the accumulator-style version
    adds them up from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note on Numbers Remember that for exact numbers, this difference has no effect
    on the final result. For inexact numbers, the difference can be significant. See
    the exercises at the end of [Intermezzo: The Cost of Computation](part_five.html#%28part._i5-6%29).
    [![image](../Images/0e24369a53fd1926fa876bebce54ef11.jpg)](#%28counter._%28exercise._ex~3asum-accu-inex%29%29)'
  prefs: []
  type: TYPE_NORMAL
- en: The factorial function is useful for the analysis of algorithms.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For the second example, we turn to the well-known factorial function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29) -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; compute ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)  n  ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  1)  ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  2)  ...  1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (!.v1 3) 6)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (!.v1 n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([zero?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._zero~3f%29%29) n) 1]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) n (!.v1 ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'While relative-2-absolute and invert processed lists, the factorial function
    works on natural numbers, which its template reflects.We proceed as before with
    a template for an accumulator-style version:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (!.v2 n0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [N](part_two.html#%28tech._n%29)
    ??? -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; compute ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)  n  ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  1)  ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  2)  ...  1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator  ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (!/a n a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([zero?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._zero~3f%29%29) n) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (!/a ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                               [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  a  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (!/a n0 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'followed by a sketch of a hand evaluation:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (!.v1 3) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 (!.v1 2))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 3 ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) 2 (!.v1 1)))
    &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ... &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == 6 &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (!.v2 3) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == (!/a 3 a0) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == (!/a 2 ... 3 ... a0) &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; ... &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; == 6 &#124;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The left column indicates how the original version works; the right one sketches
    how the accumulator-style function proceeds. Both traverse the natural number
    until they reach 0. While the original version schedules only multiplications
    the accumulator keeps track of each number as the structural traversal descends
    through the given natural number.Given the goal of multiplying these numbers,
    !/a can use the accumulator to multiply the numbers immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: a is the product of the natural numbers in the interval [n0,n).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In particular, when n0 is 3 and n is 1, a is 6.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 497\. What should the value of a be when n0 is 3 and n is 1? How about
    when n0 is 10 and n is 8? [![image](../Images/5849457db0a9ef867da57a4cdf12ca38.jpg)](#%28counter._%28exercise._ex~3afactorial-inv%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this invariant we can easily pick the initial value for a—<wbr>it is
    1—<wbr>and we know that multiplication the current accumulator with n is the proper
    update operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (!.v2 n0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [N](part_two.html#%28tech._n%29)  [N](part_two.html#%28tech._n%29)
    -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; compute ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29)  n  ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  1)  ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  2)  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator  a is the product of the |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; natural numbers in the interval [n0,n) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (!/a n a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([zero?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._zero~3f%29%29) n) a]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (!/a ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n) ([*](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2A%29%29) n a))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (!/a n0 1))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: It also follows from the accumulator statement that when n is 0, the accumulator
    is the product of n through 1, meaning it is the desired result. So, like sum,
    !/a returns a in this case and uses the result of the recursion in the second
    case.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 498\. Like sum, !.v1 performs the primitive computations, multiplication
    in this case, in reverse order. Surprisingly, this affects the performance of
    the function in a negative manner.
  prefs: []
  type: TYPE_NORMAL
- en: Measure how long it takes to evaluate (!.v1  20) 1,000 times. Recall that ([time](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._time%29%29)  an-expression)
    function determines how long it takes to run an-expression. [![image](../Images/f8740b9127720f024bba5001bb32c6c6.jpg)](#%28counter._%28exercise._ex~3atime-factorial%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: For the third and last example, we use a function that measures the height of
    simplified binary trees. The example illustrates that accumulator-style programming
    applies to all kinds of data, not just those defined with single self-references.
    Indeed, it is as common for complicated data definitions as it is for lists and
    natural numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the relevant definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) node [left right])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A Tree is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-node  [Tree](#%28tech._tree%29)  [Tree](#%28tech._tree%29)) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) example
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (make-node (make-node ''() (make-node ''() ''())) ''())) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'These trees carry no information; their leafs are ''(). Still, there are many
    different trees as [figure 178](#%28counter._%28figure._fig~3asim-bt-ex%29%29)
    shows; it also uses suggestive graphics to bring across what these pieces of data
    look like as trees.One property one may wish to compute is the height of such
    a tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (height abt)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) abt) 0]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) ([max](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._max%29%29) (height (node-left abt))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                   (height (node-right abt))) 1)])) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Supply a signature and a test. The table in [figure 178](#%28counter._%28figure._fig~3asim-bt-ex%29%29)
    indicates how to measure the height of a tree though it leaves the notion somewhat
    ambiguous: it is either the number of nodes from the root of the tree to the highest
    leaf or the number of connections on such a path. The height function follows
    the second option.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ![image](../Images/b2de129e87448bcc4e2151c9fc068405.jpg) |  | ''() |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/654531d78f2cb49a4f2aa6d5a901e0d2.jpg) |  | (make-node ''() ''())
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|  |  |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/90ef93654765d0bb42d5f598d28bc9bf.jpg) |  |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124; (make-node &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   (make-node ''() &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;              (make-node ''() ''())) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;   ''()) &#124;'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 178: Some stripped-down binary trees'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To transform this function into an accumulator-style function, we follow the
    standard path. We begin with an appropriate template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (height.v2 abt0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Tree](#%28tech._tree%29)
    ??? -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; measure the height of abt |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator  ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (height/a abt a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) abt) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (height/a (node-left abt)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                                [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  a  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (height/a (node-right abt)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                                [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  a  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (height/a abt0 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As always, the problem is to determine what knowledge the accumulator represents.
    One obvious choice is the number of traversed branches:'
  prefs: []
  type: TYPE_NORMAL
- en: a is the number of steps it takes to reach abt from abt0.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Illustrating this accumulator invariant is best done with a graphical example.
    Take a second look at [figure 178](#%28counter._%28figure._fig~3asim-bt-ex%29%29).
    The bottom-most tree comes with two annotations, each pointing out one subtree:'
  prefs: []
  type: TYPE_NORMAL
- en: If abt0 is the complete tree and abt is the subtree pointed to by the circled
    1, the accumulator’s value must be 1 because it takes exactly one step to get
    from the root of abt to the root of abt0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the same spirit, for the subtree labeled 2 the accumulator is 2 because it
    takes two steps to get this place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As for the preceding two examples, the invariant basically dictates how to
    follow the rest of the design recipe for accumulators: the initial value for a
    is 0; the update operation is [add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29);
    and the base case uses the accumulated knowledge by returning it. Translating
    this into code yields the following skeleton definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (height.v2 abt0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Tree](#%28tech._tree%29)  [N](part_two.html#%28tech._n%29)
    -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; measure the height of abt |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator  a is the number of steps |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; it takes to reach abt from abt0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (height/a abt a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) abt) a]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                 ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (height/a (node-left abt)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                                ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) a 1)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (height/a (node-right abt)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                                ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) a 1)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (height/a abt0 0))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: But, in contrast to the first two examples, a is not the final result. In the
    second [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause, the two recursive calls yield two values. The design recipe for structural
    functions dictate that we combine those in order to formulate an answer for this
    case; the dots above indicate that we still need to pick an operation that combines
    these values.
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Tree](#%28tech._tree%29) -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; measure the height of abt0 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (height.v2 example) 3)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (height.v2 abt0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Tree](#%28tech._tree%29)  [N](part_two.html#%28tech._n%29)
    -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; measure the height of abt |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator  a is the number of steps |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; it takes to reach abt from abt0 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (height/a abt a)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) abt) a]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([max](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._max%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (height/a (node-left abt)  ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) a 1))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  (height/a (node-right abt) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) a 1)))])))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (height/a abt0 0))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 179: The accumulator-style version of height'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Following the design recipe also tells us that we need to interpret the two
    values to find the appropriate function. According to the purpose statement for
    height/a, the first value is the height of the left subtree, and the second one
    is the height of the right one. Given that we are interested in the height of
    abt itself and that the height is the largest number of steps it takes to reach
    a leaf, we use the [max](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._max%29%29)
    function to pick the proper one; see [figure 179](#%28counter._%28figure._fig~3aheight-accu%29%29)
    for the complete definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note on an Alternative Design In addition to counting the number of steps it
    takes to reach a node, an accumulator function could hold on to the largest height
    encountered so far. Here is the accumulator statement for the design idea:'
  prefs: []
  type: TYPE_NORMAL
- en: the first accumulator, a, represents the number of steps it takes to reach abt
    from abt0 and the second accumulator, stands for the tallest branch in the part
    of abt0 that is to the left of abt.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Clearly, this statement assumes a template with two accumulator parameters,
    something we have not encountered before:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) ; [Tree](#%28tech._tree%29)  [N](part_two.html#%28tech._n%29)  [N](part_two.html#%28tech._n%29)
    -> [N](part_two.html#%28tech._n%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ; measure the height of abt |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ; accumulator  s is the number of steps |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ; it takes to reach abt from abt0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ; accumulator  m is the maximal height of |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ; the part of abt0 that is to the left of abt |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (h/a abt s m)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) abt) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|         [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (h/a (node-left abt)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                    [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  s  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  m  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (h/a (node-right abt)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                    [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  s  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)  m  [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))])) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 499\. Complete the design of height.v3. Hint In terms of the bottom-most
    tree of [figure 178](#%28counter._%28figure._fig~3asim-bt-ex%29%29), the place
    marked 1 has no complete paths to leafs to its left while the place marked 2 has
    one complete path and it consists of two steps. [![image](../Images/6ad26615770850321e8f3f5608057600.jpg)](#%28counter._%28exercise._ex~3aheight-accu%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: This second design has a more complex accumulator invariant than the first one.
    By implication, its implementation requires more care than the first one. At the
    same time, it comes without any advantages, meaning it is inferior to the first
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Our point is that different accumulator invariants yield different variants.
    You can design both variants systematically following the same design recipe.
    When you have complete function definitions, you can compare and contrast the
    results, and you can then decide which one to keep based on evidence. End
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 500\. Design an accumulator-style version of product, the function
    that computes the product of a list of numbers. Stop when you have formulated
    the accumulator invariant and have someone check it.
  prefs: []
  type: TYPE_NORMAL
- en: The performance of product is O(n) where n is the length of the list. Does the
    accumulator version improve on this? [![image](../Images/01ceb7595bb84d50cf76cb03a6cb2a16.jpg)](#%28counter._%28exercise._ex~3api-accu%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 501\. Design an accumulator-style version of how-many, which is the
    function that determines the number of items on a list. Stop when you have formulated
    the invariant and have someone check it.
  prefs: []
  type: TYPE_NORMAL
- en: The performance of how-many is O(n) where n is the length of the list. Does
    the accumulator version improve on this?
  prefs: []
  type: TYPE_NORMAL
- en: Computer scientists refer to this space as stack space but you can safely ignore
    this terminology for now.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: When you evaluate (how-many  some-non-empty-list) by hand, n applications of
    [add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29)
    are pending by the time the function reaches '()—<wbr>where n is the number of
    items on the list. Computer scientist sometime say that how-many needs O(n) space
    to represent these pending function applications. Does the accumulator reduce
    the amount of space needed to compute the result? [![image](../Images/b00052282c6139d53c88383b85af7190.jpg)](#%28counter._%28exercise._ex~3alength-accu%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 502\. Design an accumulator-style version of add-to-pi. The function
    adds a natural number to [pi](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._pi%29%29)
    without using [+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29) -> [Number](part_one.html#%28tech._number%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; add n to [pi](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._pi%29%29)
    without use [+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-within](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-within%29%29) (add-to-pi 2) ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 2 [pi](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._pi%29%29)) 0.001)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-to-pi n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([zero?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._zero~3f%29%29) n) [pi](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._pi%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([add1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._add1%29%29) (add-to-pi ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Stop when you have formulated the accumulator invariant and have someone check
    it. [![image](../Images/0a256d409468574fb373904d5c376fae.jpg)](#%28counter._%28exercise._ex~3aadd-pi-accu%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 503\. Design the function palindrome, which accepts a non-empty list
    and constructs a palindrome by mirroring the list around the last item. When given
    ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29)  "abc"),
    it yields ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29)  "abcba").
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint Here is a solution designed by function composition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [[NEList-of](part_three.html#%28tech._sim-dd._nelist._of%29)  [1String](part_one.html#%28tech._1string%29)]
    -> [[NEList-of](part_three.html#%28tech._sim-dd._nelist._of%29)  [1String](part_one.html#%28tech._1string%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; create a palindrome from s0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   (mirror ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29) "abc")) ([explode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._explode%29%29) "abcba"))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (mirror s0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) (all-but-last s0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) (last s0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29) (all-but-last s0))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'See [Auxiliary Functions that Generalize](part_two.html#%28part._sec~3agen-funcs%29)
    for last; design all-but-last in an analogous manner.This solution traverses s0
    four times:'
  prefs: []
  type: TYPE_NORMAL
- en: via all-but-last,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: via last,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: via all-but-last again, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: via [reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29),
    which is ISL+’s version of invert.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Even with [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    definition for the result of all-but-last, the function needs three traversals.
    While these traversals aren’t “stacked” and therefore don’t have a disastrous
    impact on the function’s performance, an accumulator version can compute the same
    result with a single traversal. [![image](../Images/3968f81e6ba29be2f42f62a6ae9d0277.jpg)](#%28counter._%28exercise._ex~3apalindrome%29%29)Exercise 504\.
    [Exercise 467](part_five.html#%28counter._%28exercise._ex~3atriangulate2%29%29)
    implicitly asks for the design of a function that rotates a [Matrix](part_two.html#%28tech._matrix%29)
    until the first coefficient of the first row differs from 0. In the context of
    [Exercise 467](part_five.html#%28counter._%28exercise._ex~3atriangulate2%29%29),
    the solution calls for a generative recursive function that creates a new matrix
    by shifting the first row to the end when it encounters a 0 in the first position.
    Here is the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Matrix](part_two.html#%28tech._matrix%29) -> [Matrix](part_two.html#%28tech._matrix%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; find a row that doesn''t start with 0 and |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; use it as the first one |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; generative move the first row to last place |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; no termination if all rows start with 0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (rotate-until.v2 ''((0 4 5) (1 2 3)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ''((1 2 3) (0 4 5))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([rotate](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rotate%29%29) M)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([not](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._not%29%29) ([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) M)) 0)) M]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([rotate](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rotate%29%29) ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) M) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) M))))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Stop! Modify this function so that it errors when all rows start with 0.If
    you measure this function on large instances of [Matrix](part_two.html#%28tech._matrix%29),
    you get a surprising result:'
  prefs: []
  type: TYPE_NORMAL
- en: '| rows in M |  | 1000 |  | 2000 |  | 3000 |  | 4000 |  | 5000 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [rotate](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rotate%29%29)
    |  | 17 |  | 66 |  | 151 |  | 272 |  | 436 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: As the number of rows increases from 1,000 to 5,000, the time spent by [rotate](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rotate%29%29)
    does not increase by a factor of five but by twenty.The problem is that [rotate](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rotate%29%29)
    uses [append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29),
    which makes a brand-new list like ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29)  M)
    only to add ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29)  M)
    at the end. If M consists of 1,000 rows and the last row is the only one with
    a non-0 coefficient, that’s roughly
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/4e4edd6edb222ae96130a74accfeda12.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'lists. How many lists do we get if M consists of 5,000 lines?Now suppose we
    conjecture that the accumulator-style version is faster than the generative one.
    Here is the accumulator template for structurally recursive version of [rotate](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rotate%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (rotate.v2 M0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Matrix](part_two.html#%28tech._matrix%29)  ...
    -> [Matrix](part_two.html#%28tech._matrix%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator  ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (rotate/a M seen)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) M) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (rotate/a ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) M)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                                    [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) seen [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                      [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([rotate](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._rotate%29%29) M0 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The goal is to remember the first row when its leading coefficient is 0 without
    using [append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29)
    for every recursion.
  prefs: []
  type: TYPE_NORMAL
- en: Formulate an accumulator statement. Then follow the accumulator design recipe
    to complete the above function. Measure how fast it runs on a Matrix that consists
    of rows with leading 0s except for the last one. If you completed the design correctly,
    the function is quite fast. [![image](../Images/176cca216960a602e72eb907d9e564ea.jpg)](#%28counter._%28exercise._ex~3agauss-fast%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 505\. Design to10. It consumes a list of digits and produces the corresponding
    number. The first item on the list is the most significant digit. Hence, when
    applied to '(1  0  2), it produces 102.
  prefs: []
  type: TYPE_NORMAL
- en: Domain Knowledge You may recall from grade school that the result is determined
    by ![image](../Images/cecbefd620cee8336d70618c5eb711cc.jpg) [![image](../Images/e11b84b80bf4d7ecda1f701dcc24e5de.jpg)](#%28counter._%28exercise._ex~3ato10%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 506\. Design the function is-prime, which consumes a natural number
    and returns #true if it is prime and #false otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Domain Knowledge A number n is prime if it is not divisible by any number between
    n - 1 and 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint The design recipe for [N](part_two.html#%28tech._n%29) [>=1] suggests
    the following template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [N](part_two.html#%28tech._n%29) [>=1] -> [Boolean](part_one.html#%28tech._boolean%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determine whether n is a prime number |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (is-prime? n)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3d%29%29) n 1) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (is-prime? ([sub1](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sub1%29%29) n)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: This template immediately tells you that the function forgets n, its initial
    argument as it recurs. Since n is definitely needed to determine whether n is
    divisible by ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  1),
    ([-](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._-%29%29)  n  2),
    and so on, you know that you need an accumulator-style function. [![image](../Images/84948b5e75f297e7f063ff78f0711eeb.jpg)](#%28counter._%28exercise._ex~3ais-prime%29%29)Note
    on Speed People who encounter accumulator-style functions for the first time often
    get the impression that they are always faster than their plain counterparts.
    So let’s take a look at the solution of [exercise 498](#%28counter._%28exercise._ex~3atime-factorial%29%29):An
    explanation of these times is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '| !.v1 |  | 5.760 |  | 5.780 |  | 5.800 |  | 5.820 |  | 5.870 |  | 5.806 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| !.v2 |  | 5.970 |  | 5.940 |  | 5.980 |  | 5.970 |  | 6.690 |  | 6.111 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The table’s top row shows the number of seconds for five runs of (!.v1  20),
    while the bottom one lists those of running (!.v2  20). The last column shows
    the averages. In short, the table shows that people jump to premature conclusions;
    the performance of at least one accumulator-style function is worse than that
    of the original. Do not trust prejudices. Instead measure performance characteristics
    of your programs for yourself. End
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 507\. Design an accumulator-style version of [map](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._map%29%29).
    [![image](../Images/3113feaf2c9f952197a8b851df2a371c.jpg)](#%28counter._%28exercise._ex~3amap-accu%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 508\. [Exercise 257](part_three.html#%28counter._%28exercise._ex~3adesigning-build-list%29%29)
    explains how to design [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)
    with the design recipes and guidelines of the first two parts of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (f*ldl [+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 0 ''(1 2 3))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29) [+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) 0 ''(1 2 3)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (f*ldl [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ''() ''(a b c))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               ([foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29) [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ''() ''(a b c)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; version 1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f*ldl f [e](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._e%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) f [e](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._e%29%29) ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29) l)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'That is, [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29)
    is the result of reversing the given list and then using [foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29)
    to fold the given function over this intermediate list.The f*ldl function obviously
    traverses the list twice, but once we design all the functions, it becomes clear
    how much harder it has to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; version 2 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f*ldl f [e](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._e%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ''()]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (add-to-end ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                                 ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-to-end x l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) x)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                           (add-to-end x ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) [e](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._e%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (f ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29) l))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'We know that [reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29)
    has to traverse a list once for every item on the list, meaning f*ldl really performs
    ![image](../Images/e2f19796a979dc3c7d76a59866c366a8.jpg) traversals for a list
    of length n. Fortunately, we know how to eliminate this bottleneck with an accumulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; version 3 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f*ldl f [e](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._e%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (invert/a l a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) a]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (invert/a ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                               ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) a))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) [e](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._e%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                (f ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l)))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([foldr](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldr%29%29) (invert/a l ''()))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Once [reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29)
    uses an accumulator, we actually get the apparent performance of two traversals
    of the list. The question is whether we can improve on this by adding an accumulator
    to the locally defined fold:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; version 4 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f*ldl f [e](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._e%29%29) l0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (fold/a a l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) a]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                (fold/a (f ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) a) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (fold/a [e](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._e%29%29) l0)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Since equipping the function with an accumulator reverses the order in which
    the list is traversed, the initial reversal of the list is superfluous.Task 1
    Recall the signature for [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: ; [X Y] [X Y -> Y] Y [[List-of](part_three.html#%28tech._sim-dd._list._of%29)
    X] -> Y
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'It is also the signature of f*ldl. Formulate the signature for fold/a and its
    accumulator invariant. Hint Assume that the difference between l0 and l is ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  x1  x2  x3).
    What is a then?You may also be wondering why fold/a consumes its arguments in
    this unusual order, first the accumulator and then the list. To understand the
    reason for this ordering, imagine instead that fold/a also consumes f—<wbr>as
    the first argument. At this point it becomes abundantly clear that fold/a is [foldl](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._foldl%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; version 5 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (f*ldl f i l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) i]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) (f*ldl f (f ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) l) i) ([rest](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._rest%29%29) l))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Task 2 Design build-l*st using an accumulator-style approach. The function
    must satisfy the following tests:'
  prefs: []
  type: TYPE_NORMAL
- en: ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (build-l*st n f) ([build-list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._build-list%29%29) n f))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: for any natural number n and function f. [![image](../Images/7f03e1ed41c06754304e92fdcd960b6f.jpg)](#%28counter._%28exercise._ex~3afoldl-designed%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 32.4A Graphical Editor, with Mouse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[A Graphical Editor](part_one.html#%28part._sec~3aedit1%29) introduces the
    notion of a one-line editor and presents a number of exercises on creating a graphical
    editor. Recall that a graphical editor is an interactive program that interprets
    key events as editing actions on a string. In particular, when a user presses
    the left or right arrow key, the cursor moves left or right; similarly, pressing
    the delete key removes a [1String](part_one.html#%28tech._1string%29) from the
    edited text. The editor program uses a data representation that combines two strings
    in a structure. [A Graphical Editor, Revisited](part_two.html#%28part._list-edit2._sec~3aedit2%29)
    resumes these exercises and shows how the same program can greatly benefit from
    a different data structure, one that combines two strings.'
  prefs: []
  type: TYPE_NORMAL
- en: Neither of these sections deals with mouse actions for navigation, even though
    all modern applications support this functionality. The basic difficulty with
    mouse events is to place the cursor at the appropriate spot. Since the program
    deals with a single line of text, a mouse click at (x,y) clearly aims to place
    the cursor between the letters that are visible at or around the x position. This
    section fills the gap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall the relevant definitions from [A Graphical Editor, Revisited](part_two.html#%28part._list-edit2._sec~3aedit2%29):'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) FONT-SIZE 11)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) FONT-COLOR "black")
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1String](part_one.html#%28tech._1string%29)]
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; render a string as an image for the editor |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (editor-text s)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([text](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._text%29%29) ([implode](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._implode%29%29) s) FONT-SIZE FONT-COLOR))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) editor [pre post])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; An Editor is a structure: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ;   (make-editor  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1String](part_one.html#%28tech._1string%29)]  [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [1String](part_one.html#%28tech._1string%29)])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; interpretation if (make-editor  p  s) is the state of |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; an interactive editor, ([reverse](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._reverse%29%29)  p)
    corresponds to |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; the text to the left of the cursor and s to the |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; text on the right |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Exercise 509\. Develop split-structural using the structural design recipe.
    The function consumes a list of [1String](part_one.html#%28tech._1string%29)s
    ed and a natural number x; the former represents the complete string in some [Editor](#%28tech._accu-edit._editor%29)
    and the latter the x-coordinate of the mouse click. It produces
  prefs: []
  type: TYPE_NORMAL
- en: (make-editor p s)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'such that (1) p and s make up ed and (2) x is larger than the image of p and
    smaller than the image of p extended with the first [1String](part_one.html#%28tech._1string%29)
    on s (if any).Here is the first condition expressed with an ISL+ expression:'
  prefs: []
  type: TYPE_NORMAL
- en: ([string=?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string~3d~3f%29%29) ([string-append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._string-append%29%29) p s) ed)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The second one is
  prefs: []
  type: TYPE_NORMAL
- en: '| ([<=](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~3c~3d%29%29) ([image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29) (editor-text p))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     x |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     ([image-width](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._image-width%29%29) (editor-text ([append](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._append%29%29) p ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) s)))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: assuming ([cons?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons~3f%29%29)  s).
  prefs: []
  type: TYPE_NORMAL
- en: Hints (1) The x-coordinate measures the distance from the left. Hence the function
    must check whether smaller and smaller prefixes of ed fit into the given width.
    The first one that doesn’t fit corresponds to the pre field of the desired [Editor](#%28tech._accu-edit._editor%29),
    the remainder of ed to the post field.
  prefs: []
  type: TYPE_NORMAL
- en: (2) Designing this function calls for thoroughly developing examples and tests.
    See [Intervals, Enumerations, Itemizations](part_one.html#%28part._ch~3aintervals-enums%29).
    [![image](../Images/9c5d61bfd04061fa97f3fae44d052ab3.jpg)](#%28counter._accu-edit._%28exercise._ex~3aeditor-mouse-structural%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 510\. Design the function split. Use the accumulator design recipe
    to improve on the result of [exercise 509](#%28counter._accu-edit._%28exercise._ex~3aeditor-mouse-structural%29%29).
    After all, the hints already point out that when the function discovers the correct
    split point, it needs both parts of the list and one part is obviously lost due
    to recursion. [![image](../Images/1e4592e78dae2974d11f6e2cfb7cc5a0.jpg)](#%28counter._accu-edit._%28exercise._ex~3aeditor-mouse%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Once you have solved this exercise, equip the main function of [A Graphical
    Editor, Revisited](part_two.html#%28part._list-edit2._sec~3aedit2%29) with a clause
    for mouse clicks. As you experiment with moving the cursor via mouse clicks, you
    will notice that it does not exactly behave like applications that you use on
    your other devices—<wbr>even though split passes all its tests.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical programs, like editors, call for experimentation to come up with best
    “look and feel” experiences. In this case, your editor is too simplistic with
    its placement of the cursor. After the applications on your computer determine
    the split point, they also determine which letter division is closer to the x-coordinate
    and place the cursor there.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 511\. Many operating systems come with the fmt program, which can re-arrange
    the words in a file so that all lines in the resulting file have a maximal width.
    As a widely used program, fmt supports a range of related functions. This exercise
    focuses on its core functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Design the program fmt. It consumes a natural number w, the name of an input
    file in-f, and the name of an output file out-f—<wbr>in the same sense as [read-file](http://docs.racket-lang.org/teachpack/2htdpbatch-io.html#%28def._%28%28lib._2htdp%2Fbatch-io..rkt%29._read-file%29%29)
    from the 2htdp/batch-io library. Its purpose is to read all the words from the
    in-f, to arrange these words in the given order into lines of maximal width w,
    and to write these lines to out-f. [![image](../Images/60ab840228ad50c0dff3fddbc0dbe71f.jpg)](#%28counter._accu-edit._%28exercise._ex~3afmt%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 33More Uses of Accumulation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter presents three more uses of accumulators. The first section concerns
    the use of accumulators in conjunction with tree-processing functions. It uses
    the compilation of ISL+ as an illustrative example. The second section explains
    why we occasionally want accumulators inside of data representations and how to
    go about it. The final section resumes the discussion of rendering fractals.
  prefs: []
  type: TYPE_NORMAL
- en: 33.1Accumulators and Trees
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you ask DrRacket to run an ISL+ program, it translates the program to commands
    for your specific computer. This process is called compilation and the part of
    DrRacket that performs the task is called a compiler. Before the compiler translates
    the ISL+ program, it checks that every variable is declared via a [define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29),
    [define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29),
    or a [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: Stop! Enter x, ([lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)  (y)  x),
    and (x  5) as complete ISL+ programs into DrRacket and ask it to run each. What
    do you expect to see?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s phrase this idea as a sample problem:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem You have been hired to re-create a part of the ISL+ compiler.
    Specifically, your task deals with the following language fragment, specified
    in the so-called grammar notation that many programming language manuals use:We
    use the Greek letter λ instead of [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29)
    to signal that this exercise deals with ISL+ as an object of study not just a
    programming language.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|   expression |   | = |   | variable |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | ([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29) (variable) expression)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |   | &#124; |   | (expression expression) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Remember from [BSL Grammar](part_one.html#%28part._sec~3asynsem~3agrammar%29)
    that you can read the grammar aloud replacing = with “is one of” and | with “or.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Recall that [λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)
    expressions are functions without names. They bind their parameter in their body.
    Conversely, a variable occurrence is declared by a surrounding [λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)
    that specifies the same name as a parameter. You may wish to revisit [Intermezzo:
    Scope and Abstraction](part_three.html#%28part._i3-4%29) because it deals with
    the same issue from the perspective of a programmer. Look for the terms “binding
    occurrence,” “bound occurrence,” and “free.”'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Develop a data representation for the above language fragment; use symbols to
    represent variables. Then design a function that replaces all undeclared variables
    with '*undeclared.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This problem is representative of many steps in the translation process and,
    at the same time, is a great case study for accumulator-style functions.Before
    we dive into the problem, let’s look at some examples in this mini-language, recalling
    what we know about [lambda](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._lambda%29%29):'
  prefs: []
  type: TYPE_NORMAL
- en: ([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (x)  x)
    is the function that returns whatever it is given, also known as the identity
    function;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (x)  y)
    looks like a function that returns y whenever it is given an argument, except
    that y isn’t declared;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (y)  ([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (x)  y))
    is a function that, when given some value v, produces a function that always returns
    v;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (x)  x)  ([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (x)  x))
    applies the identity function to itself;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (x)  (x  x))  ([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (x)  (x  x)))
    is a short infinite loop; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ((([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (y)  ([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (x)  y))  ([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (z)  z))  ([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29)  (w)  w))
    is a complex expression that is best run in ISL+ to find out whether it terminates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indeed, you can run all of the above ISL+ expression in DrRacket to confirm
    what is written about them.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 512\. Explain the scope of each binding occurrence in the above examples.
    Draw arrows from the bound to the binding occurrences. [![image](../Images/030fff26b1a3d1625eddbd10caed4b28.jpg)](#%28counter._%28exercise._ex~3abinding1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Developing a data representation for the language is easy, especially because
    its description uses a grammar notation. Here is one possibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; A Lam is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; – a [Symbol](part_two.html#%28tech._symbol%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  ''λ  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  [Symbol](part_two.html#%28tech._symbol%29))  [Lam](#%28tech._lam%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29)  [Lam](#%28tech._lam%29)  [Lam](#%28tech._lam%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Because of [quote](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._quote%29%29),
    this data representation makes it easy to create data representations for expressions
    in our subset of ISL+:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ex1 ''(λ (x) x))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ex2 ''(λ (x) y))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ex3 ''(λ (y) (λ (x) y)))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) ex4 ''((λ (x) (x x)) (λ (x) (x x))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: These four data examples are representations of some of the above expressions.
    Stop! Create data representations for the remaining examples.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 513\. Define is-var?, is-λ?, and is-app?, that is, predicates that
    distinguish variables from λ expressions and applications.
  prefs: []
  type: TYPE_NORMAL
- en: Also define
  prefs: []
  type: TYPE_NORMAL
- en: λ-para, which extracts the parameter from a λ expression;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: λ-body, which extracts the body from a λ expression;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: app-fun, which extracts the function from an application; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: app-arg, which extracts the argument from an application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these predicates and selectors, you basically can act as if you had defined
    a structure-oriented data representation.
  prefs: []
  type: TYPE_NORMAL
- en: Design declareds, which produces the list of all symbols used as λ parameters
    in a λ term. Don’t worry about duplicate symbols. [![image](../Images/4123537440e9ae67b234fcfed164522b.jpg)](#%28counter._%28exercise._ex~3afree-bound-access%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 514\. Develop a data representation for the same subset of ISL+ that
    uses structures instead of lists. Also provide data representations for ex1, ex2,
    and ex3 following you data definition. [![image](../Images/54528f6e72481bfe1a7c3a4f3038a96c.jpg)](#%28counter._%28exercise._ex~3afree-bound-dd0%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'We follow the structural design recipe, and here is the product of the steps
    two and three:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Lam](#%28tech._lam%29) -> [Lam](#%28tech._lam%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; replace all symbols s in le with ''*undeclared |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; if they do not occur within the body of a λ |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; expression whose parameter is s |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (undeclareds ex1) ex1)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (undeclareds ex2) ''(λ (x) *undeclared))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (undeclareds ex3) ex3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (undeclareds ex4) ex4)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (undeclareds le0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   le0) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Note how we expect undeclareds to process ex4 even though the expression loops
    forever when run; compilers don’t run programs, they read them and create others.A
    close look at the purpose statement directly suggests that the function needs
    an accumulator. This becomes even clearer when we inspect the template for undeclareds:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (undeclareds le)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(is-var? le) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(is-λ? le) ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (undeclareds (λ-body le)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(is-app? le) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (undeclareds (app-fun le))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|       [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (undeclareds (app-arg le)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'When undeclareds recurs on the body of (the representation of) a λ expression,
    it forgets (λ-para  le), the declared variable.So, let’s start with an accumulator-style
    template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (undeclareds le0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (; [Lam](#%28tech._lam%29) ??? -> [Lam](#%28tech._lam%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ; accumulator  a represents ... |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (undeclareds/a le a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          [(is-var? le) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          [(is-λ? le) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (undeclareds/a (λ-body le)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                               [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) a [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|          [(is-app? le) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (undeclareds/a (app-fun le)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                               [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) a [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|            [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) (undeclareds/a (app-arg le)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                               [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) a [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)) [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))])))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (undeclareds/a le0 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'In this context, we can now formulate an accumulator invariant:'
  prefs: []
  type: TYPE_NORMAL
- en: a represents the list of λ parameters encountered on the path from the tope
    of le0 to the top of le.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example, if le0 is
  prefs: []
  type: TYPE_NORMAL
- en: '''(((λ (y) (λ (x) y)) (λ (z) z)) (λ (w) w))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: and le is the highlighted subtree, then a contains y. The left side of [figure 180](#%28counter._%28figure._fig~3alam-tree%29%29)
    presents a graphical illustration of the same example. It shows a [Lam](#%28tech._lam%29)
    expression as an upside-down tree, that is, the root is at the top. A @ node represents
    an application with two descendants; the other nodes are self-explanatory. In
    this tree diagram, the bold path leads from le0 to le through a single variable
    declaration.Similarly, if we pick a different subtree of the same piece of data,
  prefs: []
  type: TYPE_NORMAL
- en: '''(((λ (y) (λ (x) y)) (λ (z) z)) (λ (w) w))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: we get an accumulator that contains both 'y and 'x. The right side of [figure 180](#%28counter._%28figure._fig~3alam-tree%29%29)
    makes this point again. Here the bold path leads through two 'λ nodes to the boxed
    subtree, and the accumulator is the list of declared variables along the bold
    path.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/a1571e0ff4a9e5a4590e53113e185dae.jpg)            ![image](../Images/ffa35b1524feff39e7da987647850ef3.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 180: [Lam](#%28tech._lam%29) terms as trees'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now that we have settled on the data representation of the accumulator and
    its invariant, we can resolve the remaining design questions:'
  prefs: []
  type: TYPE_NORMAL
- en: the initial accumulator value of '();
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: we can use [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    to add (λ-para  le) to a; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: once undeclareds/a reaches a variable, it can use the accumulator to check whether
    the variable is in the scope of a declaration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 181](#%28counter._%28figure._fig~3aundeclareds%29%29) shows how to
    translate these ideas into a complete function definition. Note the name declareds
    for the accumulator; it brings across the key idea behind the accumulator invariant,
    helping the programmer understand the definition. The base case uses [member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29)
    from ISL+ to determine whether the variable le is in declareds and, if not, replaces
    it with ''*undeclared. The second [cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    clause uses a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    to introduce the extended accumulator newd. Because para is also used to rebuild
    the expression, it has its own local definition. Finally, the last clause concerns
    function applications, which do not declare variables and do not use any directly.
    As a result, it is by far the simplest of the three clauses.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (undeclareds le0)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [Lam](#%28tech._lam%29)
    [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [Symbol](part_two.html#%28tech._symbol%29)]
    -> [Lam](#%28tech._lam%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; accumulator  declareds is a list of all λ |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; parameters on the path from le0 to le |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (undeclareds/a le declareds)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [(is-var? le) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([member?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._member~3f%29%29) le declareds) le ''*undeclared)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [(is-λ? le) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) para (λ-para le))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                        ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) body (λ-body le))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                        ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) newd ([cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29) para declareds)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                  ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) ''λ ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) para)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                    (undeclareds/a body newd)))] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|               [(is-app? le) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) fun (app-fun le))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                        ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) arg (app-arg le)))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) (undeclareds/a fun declareds)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|                      (undeclareds/a arg declareds)))]))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     (undeclareds/a le0 ''()))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 181: Finding undeclared variables'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 515\. Make up an ISL+ expression in which x occurs both free and bound.
    Formulate it as an element of [Lam](#%28tech._lam%29). Does undeclareds work properly
    on your expression? [![image](../Images/d85555bdbdbe2dedda661cfade03d8a2.jpg)](#%28counter._%28exercise._ex~3afree-bound-both%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 516\. Considering the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: ([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29) (*undeclared) (([λ](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._~ce~bb%29%29) (x) (x *undeclared)) y))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Yes, it uses *undeclared as a variable. Represent it in [Lam](#%28tech._lam%29)
    and check what undeclareds produces for this expression.Modify undeclareds so
    that it replaces a free occurrence of 'x with
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) '*undeclared 'x)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: and a bound one 'y with
  prefs: []
  type: TYPE_NORMAL
- en: ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) '*declared 'y)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Doing so unambiguously identifies problem spots, which a program development
    environment such as DrRacket can use to high-light errors.
  prefs: []
  type: TYPE_NORMAL
- en: Note The trick of replacing a variable occurrence with the representation of
    an application feels awkward. If you dislike it, consider synthesizing the symbols
    '*undeclared:x and 'declared:y instead. [![image](../Images/1c1cb1af0f4161562ec57590dc489fa5.jpg)](#%28counter._%28exercise._ex~3afree-bound-undeclared%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 517\. Re-design the undeclareds function for the structure-based data
    representation from [exercise 514](#%28counter._%28exercise._ex~3afree-bound-dd0%29%29).
    [![image](../Images/ba5ebebb726932735d64226b2aa66810.jpg)](#%28counter._%28exercise._ex~3afree-bound-dd1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/e3c131be739b4105a0fa405914820264.jpg)            ![image](../Images/91f549e928bd5b9e94394816413e53ca.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 182: Static distances'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 518\. Design static-distance. The function replaces all occurrences
    of variables with a natural number that represents how far away the declaring
    λ is. [Figure 182](#%28counter._%28figure._fig~3asd%29%29) illustrates the idea
    for the term term
  prefs: []
  type: TYPE_NORMAL
- en: '''((λ (x) (λ (y) (y x))) (λ (z) z))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: in graphical form. It includes dotted arrows that point from variable occurrences
    to the corresponding variable declarations. On the right, the figure shows a tree
    of the same shape, though without the arrows. The 'λ nodes come without names,
    and variable occurrences have been replaced by natural numbers that specify which
    'λ declares the variable. Each natural number n says that the binding occurrence
    is n steps upwards—<wbr>toward the root of the [Lam](#%28tech._lam%29) tree. A
    value of 0 denotes the first 'λ on the path to the root, 1 the second one, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Hint The undeclareds accumulator of undeclareds/a is a list of all parameters
    on path from le to le0 in reverse order—<wbr>the last one seen is at the first
    on the list. [![image](../Images/2234e2638a90dad3a3209555dbceaa87.jpg)](#%28counter._%28exercise._ex~3afree-bound1%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 33.2Data Representations with Accumulators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The end of [Intermezzo: The Cost of Computation](part_five.html#%28part._i5-6%29)
    explains that *SL measures the size of containers, say lists, by traversing them
    and hints that other programming languages use a different,See [Finite State Machines](part_two.html#%28part._sec~3asec-fsm-list%29)
    for an early example of this idea. a less expensive way to compute sizes. In this
    section, we show how to implement this idea with the addition of an accumulator
    to data representations.'
  prefs: []
  type: TYPE_NORMAL
- en: Consider the ubiquitous lists in *SL. All lists are constructed from [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    and '(); operations such as [quote](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._quote%29%29)
    and [list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29),
    for example, are merely abbreviations for these two. As [What Is '(), What Is
    cons](part_two.html#%28part._sec~3alists-cons%29) shows, it is also possible to
    mimic lists in BSL with suitable structure type and function definitions.
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) pair [head right])
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; ConsOrEmpty is one of: |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-pair  [Any](part_one.html#%28tech._any%29)  [ConsOrEmpty](part_two.html#%28tech._consorempty%29))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Any](part_one.html#%28tech._any%29)  [ConsOrEmpty](part_two.html#%28tech._consorempty%29)
    -> [ConsOrEmpty](part_two.html#%28tech._consorempty%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (our-cons a-value a-list)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) a-list) (make-pair a-value a-list)]
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(our-cons? a-list) (make-pair a-value a-list)] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) "our-cons:
    ...")])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [ConsOrEmpty](part_two.html#%28tech._consorempty%29) -> [Any](part_one.html#%28tech._any%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; extracts the left part of the given pair |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (our-first mimicked-list)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([if](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._if%29%29) ([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) mimicked-list)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) "our-first:
    ...") |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|       (pair-left mimicked-list))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 183: An implementation of lists in BSL'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 183](#%28counter._%28figure._fig~3acons-recall%29%29) recalls the basic
    idea. Stop! Can you define our-rest now?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The key insight is that we can add a third field to the structure type definition
    of pair:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define-struct](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define-struct%29%29) cpair [count left right])
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; A [MyList X] is one of: |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  ''() |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; –  (make-cpair  (tech  "N")  X  [[MyList](#%28tech._mylist%29)  X]) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; accumulator the count field is the number of cpairs |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'As the accumulator statement says, the extra field is used to keep track of
    the number of cpair instances used to create the list. That is, it remembers a
    fact about the construction of the list. We call this kind of structure field
    a data accumulator.Adding a field to the major list constructor does not come
    for free. To begin with, it requires a change to the checked version of the constructor,
    the one that is actually available to programs:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; data definitions, via a constructor-function |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (our-cons f r)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) r) (make-cpair 1 f r)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(cpair? r) (make-cpair ([+](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._%2B%29%29) (cpair-count r) 1) f r)]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) "our-cons:
    ...")])) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'If the extended list is ''(), count is populated with 1; otherwise, the function
    extracts the count field from the given cpair, adds 1, and uses the resulting
    number as count.From here, it is also obvious how to define a function that measure
    the length of such a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Any](part_one.html#%28tech._any%29) -> [N](part_two.html#%28tech._n%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; how many items does l contain |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (our-length l)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [([empty?](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._empty~3f%29%29) l) 0]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(cpair? l) (cpair-count l)] |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29) ([error](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._error%29%29) "my-length:
    ...")])) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The function consumes any kind of value. For '() and instances of cpair, it
    produces natural numbers; otherwise it signals an error.
  prefs: []
  type: TYPE_NORMAL
- en: The second problem with the addition of a count field concerns performance.
    Indeed, there are two concerns. On one hand, every single list construction comes
    with an extra field now, meaning a 33% increase in memory consumption. On the
    other hand, the addition of the field decreases how fast our-cons constructs a
    list. In addition to the check that the extended list is either '() or an instance
    of a cpair, the constructor now computes the size of the list. Although this computation
    consumes a constant amount of time, it is imposed on every single use of our-cons—<wbr>and
    just think how many times this book uses [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    and does not ever compute how long the resulting list is.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 519\. Argue that our-pair takes a constant amount of time to compute
    its result, regardless of the size of its input. [![image](../Images/01d9317b5243abaa98439dd56ac1dcd2.jpg)](#%28counter._%28exercise._ex~3aconstant-time-length%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 520\. Is it acceptable to impose the extra cost on [cons](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cons%29%29)
    for all programs to turn length into a constant-time function? [![image](../Images/aad895dc60ef66b00942a29de68d58ac.jpg)](#%28counter._%28exercise._ex~3aextra-cost-cons%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: While the addition of count field to list is questionable, sometimes data accumulators
    play a crucial role in finding a solution. The next example is about adding so-called
    artificial intelligence to a board-game playing program, and its data accumulator
    is an absolute necessity.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you play board games or solve puzzles, you tend to think about your possible
    moves at every stage. As you get better, you may even imagine the possibilities
    after this first step. The result is a so-called game tree, which is a (part of
    the) tree of all possible moves that the rules allow. Let’s start with a problem:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Your manager tells you the following story.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Once upon a time, three cannibals were guiding three missionaries through a
    jungle. They were on their way to the nearest mission station. After some time,
    they arrived at a wide river, filled with deadly snakes and fish. There was no
    way to cross the river without a boat. Fortunately, they found a rowing boat with
    two oars after a short search. Unfortunately, the boat was too small to carry
    all of them. It could barely carry two people at a time. Worse, because of the
    river’s width someone had to row the boat back.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Since the missionaries could not trust the cannibals, they had to figure out
    a plan to get all six of them safely across the river. The problem was that these
    cannibals would kill and eat missionaries as soon as there were more cannibals
    than missionaries in some place. Our missionaries had to devise a plan that guaranteed
    that there were never any missionaries in the minority on either side of the river.
    The cannibals, however, could be trusted to cooperate otherwise. Specifically,
    they would not abandon any potential food, just as the missionaries would not
    abandon any potential converts.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: While your manager doesn’t assign any specific design task, he wants to explore
    whether the company can design (and sell) programs that solve such puzzles.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'While puzzles aren’t board games, the program illustrates the idea of game
    trees in the most straightforward manner possible.In principle, it is quite straightforward
    to solve such puzzles by hand. Here is the rough idea. Pick a graphical representation
    of the problem states. Ours consists of a three-part box: the left one represents
    the missionaries and the cannibals on the left; the middle combines the river
    and the boat; and the third part is the right-hand side of the river. Take a look
    at the following representation of the initial state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/077d71e41dc501a36a8590961603157b.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Black circles denote missionaries, white circles cannibals. All of them are
    on the left-hand river bank. The boat is also on the left side. Nobody is on the
    right. Here are two more states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/5f73961ececca5fddb4bb2ba6d62ad9c.jpg)            ![image](../Images/a3192f08a6889e8d04a54ff7ece4d6ed.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The first one is the final state, where all people and the boat are on the right
    bank of the river. The second one depicts some intermediate state where two people
    are on the left with the boat and four people are on the right.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/86a73aa5e6ceaa0954e1d4cdbef5f710.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 184: Creating a game tree'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now that you have a way to write down the state of the puzzle, you can think
    about the possibilities at each stage. Doing so yields a tree of possible moves.
    [Figure 184](#%28counter._%28figure._fig~3amc-transition%29%29) sketches the first
    two and a half layers in such a tree. The left-most state is the initial one.
    Because the boat can transport at most two people and must be rowed by at least
    one, you have five possibilities to explore: one cannibal rows across, two, one
    missionary and one cannibal go, one missionary, or two missionaries. These possibilities
    are represented with five arrows going from the initial state to five intermediate
    states.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For each of these five intermediate states, you can play the same game again.
    In [figure 184](#%28counter._%28figure._fig~3amc-transition%29%29) you see how
    the game continues for the middle (third) one of the new states. Because there
    are only two people on the right river bank, you see three possibilities: a cannibal
    goes back, a missionary, or both. Hence three arrows connect the middle state
    to the three states on the right side of the tree. If you keep drawing this tree
    of possibilities in a systematic manner, you eventually discover the final state.'
  prefs: []
  type: TYPE_NORMAL
- en: A second look at [figure 184](#%28counter._%28figure._fig~3amc-transition%29%29)
    reveals two problems with this naive approach to generating the tree of possibilities.
    The first one is the dashed arrow that connects the middle state on the right
    to the initial state. It indicates that rowing back the two people from the right
    to the left gets the puzzle back to its initial state, meaning you’re starting
    over, which is obviously undesirable. The second problem concerns those states
    with a star in the top-right corner. In both cases, there are more white-circle
    cannibals than black-circle missionaries on the left river bank, meaning the cannibals
    would eat the missionaries. Again, the goal is to avoid such states, making these
    moves undesirable.
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to turn this puzzle into a program is to design a function that determines
    whether some final state—<wbr>here the final state—<wbr>is reachable from some
    given state. Here is an appropriate function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [PuzzleState](#%28tech._puzzlestate%29) -> [PuzzleState](#%28tech._puzzlestate%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is the final state reachable from state0 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; generative create a tree of possible boat rides |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; termination ??? |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([check-expect](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._check-expect%29%29) (solve initial-puzzle) final-puzzle)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (solve state0)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29) (; [[List-of](part_three.html#%28tech._sim-dd._list._of%29)  [PuzzleState](#%28tech._puzzlestate%29)]
    -> [PuzzleState](#%28tech._puzzlestate%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ; generative generate the successors of los |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|           ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (solve* los)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|             ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [([ormap](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._ormap%29%29) final? los)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                ([first](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._first%29%29) ([filter](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._filter%29%29) final? los))]
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|               [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|                (solve* (create-next-states los))]))) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|     (solve* ([list](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._list%29%29) state0))))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: The auxiliary function uses generative recursion, generating all new possibilities
    given a list of possibilities. If one of the given possibilities is a final state,
    the function returns it.
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, solve is quite generic. As long as you define a collection of PuzzleStates,
    a function for recognizing final states, and a function for creating all “successor”
    states, solve can work on your puzzle.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 521\. The solve* function generates all states reachable with n boat
    trips before it looks at states that require n + 1 boat trips, even if some of
    those boat trips return to previously encountered states. Because of this systematic
    way of traversing the tree, solve* cannot go into an infinite loop. Why? Terminology
    This way of searching a tree or a graph is dubbed breadth-first search. [![image](../Images/187aee352d5f83d2384657954636aaa0.jpg)](#%28counter._%28exercise._ex~3amc-terminates%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 522\. Develop a representation for the states of the missionary-and-cannibal
    puzzle. Like the graphical representation, a state must obviously record the number
    of missionaries and cannibals on each side of the river plus the location of the
    boat. After all, these are the properties of the world that change with one boat
    trip.
  prefs: []
  type: TYPE_NORMAL
- en: The description of [PuzzleState](#%28tech._puzzlestate%29)s calls for a new
    structure type. Represent the above initial, intermediate, and final states in
    your representation.
  prefs: []
  type: TYPE_NORMAL
- en: Design the function final?, which detects whether in a given state all people
    are on the right river bank.
  prefs: []
  type: TYPE_NORMAL
- en: Design the function render-mc, which maps a state of the missionary-and-cannibal
    puzzle to an image. [![image](../Images/96d5d3db3c878cbb401e5f8f61922471.jpg)](#%28counter._%28exercise._ex~3amc-state%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that returning the final state says nothing about how the player
    can get from the initial state to the final one. In other words, create-next-states
    forgets how it gets to the returned states from the given ones. And this situation
    clearly calls for an accumulator, but at the same time, the accumulated knowledge
    is best associated with the individual [PuzzleState](#%28tech._puzzlestate%29)s
    not solve* or any other function.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 523\. Modify the representation from [exercise 522](#%28counter._%28exercise._ex~3amc-state%29%29)
    so that a state records the sequence of states traversed to get there. Use a list
    of states.
  prefs: []
  type: TYPE_NORMAL
- en: Articulate and write down an accumulator statement with the data definition
    that explains the additional field.
  prefs: []
  type: TYPE_NORMAL
- en: Modify final? or render-mc for this representation as needed. [![image](../Images/50295c79f6e53a198f311ddd27008535.jpg)](#%28counter._%28exercise._ex~3amc-accu-state%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 524\. Design the create-next-states function. It consumes lists of
    missionary-and-cannibal states and generates the list of all those states that
    a boat ride can reach.
  prefs: []
  type: TYPE_NORMAL
- en: Ignore the accumulator in the first draft of create-next-states, but make sure
    that the function does not generate states where the cannibals can eat the missionaries.
  prefs: []
  type: TYPE_NORMAL
- en: For the second design, update the accumulator field in the state structures
    and use it to rule out states that have been encountered on the way to the current
    state. [![image](../Images/c792ad6c796caa628057f4e7ab9cbbf4.jpg)](#%28counter._%28exercise._ex~3amc-next-state%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 525\. Exploit the accumulator-oriented data representation to modify
    solve. The revised function produces the list of states that lead from the initial
    puzzle state to the final one.
  prefs: []
  type: TYPE_NORMAL
- en: Also consider creating a movie from this list, using render-mc to generate the
    images. Use [run-movie](http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._%28%28lib._2htdp%2Funiverse..rkt%29._run-movie%29%29)
    to display the movie. [![image](../Images/45d965a0ef89e1801348220e5a26e879.jpg)](#%28counter._%28exercise._ex~3amc-solve%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 33.3Accumulators as Results
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Take another look at [figure 151](part_five.html#%28counter._%28figure._fig~3asierpinski-code%29%29).
    It displays a Sierpinski triangle and a suggestion how to create it. Specifically,
    the images on the right explain one version of the generative idea behind the
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: The given problem is a triangle. When the triangle is too small to be sub-divided
    any further, the algorithm does nothing; otherwise, it finds the midpoints of
    its three sides and deals with the three outer triangles recursively.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In contrast, [Fractals, a First Taste](part_five.html#%28part._sec~3afractal%29)
    shows how to compose Sierpinski triangles algebraically, a process that does not
    correspond to this description.Most programmers expect “draw” to mean the action
    of adding a triangle to some canvas. The [scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    function from the 2htdp/image library makes this idea concrete. The function consumes
    an image s and the coordinates of two points and adds a line through these two
    points to s. It is easy to generalize from [scene+line](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29)
    to add-triangle and from there to add-sierpinski:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Problem Design the add-sierpinski function. It consumes an image and
    three [Posn](part_one.html#%28tech._posn%29)s describing a triangle. It uses the
    latter to add a Sierpinski triangle to this image.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note how this problem implicitly refers to the above process description of
    how to draw a Sierpinski triangle. In other words, we are confronted with a classical
    generative-recursive problem and we can start with the classic template of generative
    recursion and the four central design questions:'
  prefs: []
  type: TYPE_NORMAL
- en: The problem is trivial if the triangle is too small to be sub-divided.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the trivial case, the function returns the given image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise the midpoints of the sides of the given triangle are determined to
    add another triangle. Each “outer” triangle is then processed recursively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these recursive steps produces an image. The remaining question is how
    to combine these images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ; [Image](part_one.html#%28tech._image%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; generative adds the triangle (a, b, c) to s, |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; sub-divides it into three triangles by taking the |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; midpoints of its sides; stop if (a, b, c) is too small |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-sierpinski scene0 a b c)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(too-small? a b c) scene0] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) scene1 (add-triangle scene0 a b c))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) mid-a-b (mid-point a b))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) mid-b-c (mid-point b c))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) mid-c-a (mid-point c a))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) scene2
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           (add-sierpinski scene0 a mid-a-b mid-c-a)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) scene3
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           (add-sierpinski scene0 b mid-b-c mid-a-b)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) scene4
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           (add-sierpinski scene0 c mid-c-a mid-b-c))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ; —<wbr>IN—<wbr> |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ([...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) scene1 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) scene2 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29) scene3 [...](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._......%29%29)))]))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 185: Accumulators as results of generative recursions, a skeleton'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 185](#%28counter._%28figure._fig~3aaccu-result-gen-temp%29%29) shows
    he the result of translating these answers into a skeletal definition. Since each
    midpoint is used twice, the skeleton uses a [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression to formulate the generative step in ISL+. The [local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    expression introduces the three new midpoints plus three recursive applications
    of sierpinski. The dots in its body suggests a combination of the scenes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 526\. Tackle the wish list that the skeleton implies:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ; [Image](part_one.html#%28tech._image%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; add the black triangle a, b, c to scene |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-triangle scene a b c) scene)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)
    -> [Boolean](part_one.html#%28tech._boolean%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; is the triangle a, b, c too small to be divided |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (too-small? a b c) #false)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)
    -> [Posn](part_one.html#%28tech._posn%29) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determine the midpoint between a and b |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (mid-point a b) a)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Design the three functions.Domain Knowledge (1) For the too-small? function
    it suffices to measure the distance between two points and to check whether it
    is below some chosen threshold, say, 10. The distance between (x0,y0) and (x1,y1)
    is
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/64940890db792f058f10a0d18145cbbe.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: 'that is, the distance of (x0 - x1,y0 - y1) to the origin.The midpoint between
    points (x0,y0) and (x1,y1) has as coordinates the midpoints between the respective
    x and y coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/9bc28fab4a469d02ad10e2102f28b64d.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: Take a close look. [![image](../Images/9828bc4c486409cf3f1f0e03744e31fa.jpg)](#%28counter._%28exercise._ex~3asierpinski-aux%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have all the auxiliary functions, it is time to return to the problem
    of combining the three images that are created by the recursive calls. One obvious
    guess is to use the [overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29)
    or [underlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._underlay%29%29)
    function, but a test at in the interaction area of DrRacket shows that the functions
    hide the underlying triangles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically imagine that the three recursive calls produce the following empty
    scenes enriched with a single triangle in appropriate locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > scene1 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/5a411ade66c0cf057cce24eebccc2101.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > scene2 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/eee3c3bab6bd69997dcfbe6e1d6fa0b9.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > scene3 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/da1a3d96ede8309f735254dea53607f8.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'A combination should look like this figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/6fc30a6abf86618dcb23ecf281bab950.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'But, combining these shapes with [overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29)
    or [underlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._underlay%29%29)
    does not yield this desired shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '| > ([overlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._overlay%29%29) scene1 scene2 scene3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/99b68f2c91ed95deccd88f74910383e3.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| > ([underlay](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._underlay%29%29) scene1 scene2 scene3)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ![image](../Images/f174065c8f1aa32eb540a5bbb605d88b.jpg) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Indeed, the image library of ISL+ does not support a function that combines
    these scenes in an appropriate manner.Let’s take a second look at these interactions.
    If scene1 is the result of adding the upper triangle to the given scene and scene2
    is the result of adding a triangle on the lower left, perhaps the second recursive
    call should add triangles to the result of the first call. Doing so would yield
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/93560f7cd2647cef24d8a703a65cb953.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'and handing over this scene to the third recursive call produces exactly what
    is wanted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/bde29d43f74170cc95108126202e506a.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '| ; [Image](part_one.html#%28tech._image%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)  [Posn](part_one.html#%28tech._posn%29)
    -> [Image](part_one.html#%28tech._image%29) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; generative adds the triangle (a, b, c) to s, |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; sub-divides it into three triangles by taking the |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; midpoints of its sides; stop if (a, b, c) is too small |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ; accumulator the function accumulates the triangles scene0 |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (add-sierpinski scene0 a b c)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([cond](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cond%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [(too-small? a b c) scene0] |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|     [[else](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._else%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|      ([local](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._local%29%29)
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        (([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) scene1 (add-triangle scene0 a b c))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) mid-a-b (mid-point a b))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) mid-b-c (mid-point b c))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) mid-c-a (mid-point c a))
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) scene2
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           (add-sierpinski scene1 a mid-a-b mid-c-a)) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|         ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) scene3
    |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|           (add-sierpinski scene2 b mid-b-c mid-a-b))) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        ; —<wbr>IN—<wbr> |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: '|        (add-sierpinski scene3 c mid-c-a mid-b-c))])) |'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure 186: Accumulators as results of generative recursion, the function'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Figure 186](#%28counter._%28figure._fig~3aadd-sierpinski%29%29) shows the
    reformulation based on this insight. The three highlights pinpoint the key design
    idea. All concern the case when the triangle is sufficiently large and it is added
    to the given scene. Once its sides are sub-divided, the first outer triangle is
    recursively processed using scene1, the result of adding the given triangle. Similarly,
    the result of this first recursion, dubbed scene2, is used for the second recursion,
    which is about processing the second triangle. Finally, scene3 flows into the
    third recursive call. In sum, the novelty is that the accumulator is simultaneously
    an argument, a tool for collecting knowledge, and the result of the function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To explore add-sierpinski it is best to start from an equilateral triangle
    and an image that leaves a sufficiently large border. Here are definitions that
    meet these two criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) MT ([empty-scene](http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._empty-scene%29%29) 400 400))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) A ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 200  50))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) B ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29)  27 350))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) C ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 373 350))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| (add-sierpinski MT A B C) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Check what kind of Sierpinski fractal this code fragment delivers. Experiment
    with the definitions from [exercise 526](#%28counter._%28exercise._ex~3asierpinski-aux%29%29)
    to create sparser and denser Sierpinski triangles than the first one.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 527\. To compute the endpoints of an equilateral Sierpinski triangle,
    draw a circle and pick three points on the circle that are 120 degrees apart,
    for example, 120, 240, and 360.
  prefs: []
  type: TYPE_NORMAL
- en: 'Design the function circle-pt:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) CENTER ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 200 200))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) RADIUS 200) ; the
    radius in pixels |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; [Number](part_one.html#%28tech._number%29) -> [Posn](part_one.html#%28tech._posn%29)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; determines the point on the circle with CENTER |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; and RADIUS whose angle is |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; examples |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; what are the x and y coordinates of the desired |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ; point, when given: 120/360, 240/360, 360/360 |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| ([define](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28form._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._define%29%29) (circle-pt factor)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '|   ([make-posn](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-posn%29%29) 0 0))
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Domain Knowledge This design problem calls on knowledge from mathematics. One
    way to view the problem is as a conversion of a complex number from the polar-coordinate
    representation to the [Posn](part_one.html#%28tech._posn%29) representation. Read
    up on [make-polar](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._make-polar%29%29),
    [real-part](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._real-part%29%29),
    and [imag-part](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._imag-part%29%29)
    in ISL+. Another way is to use trigonometry, [sin](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._sin%29%29)
    and [cos](http://docs.racket-lang.org/htdp-langs/intermediate-lam.html#%28def._htdp-intermediate-lambda._%28%28lib._lang%2Fhtdp-intermediate-lambda..rkt%29._cos%29%29),
    to determine the coordinates. If you choose this route, recall that these trigonometry
    functions compute the sine and cosine in terms of radians, not degrees. Also keep
    in mind that on-screen positions grow downwards not upwards. [![image](../Images/3d9da70ebd650aaf76e21fb50f41d64f.jpg)](#%28counter._%28exercise._ex~3asierpinski-start%29%29)Exercise 528\.
    Take a look at the following two images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/65813bc6695566afe38bb3065510495a.jpg)            ![image](../Images/ddd762b26b4dbffce6943eca5510012d.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: They demonstrate how to generate a fractal Savannah tree in the same way that
    [figure 150](part_five.html#%28counter._%28figure._fig~3asiepic%29%29) shows how
    to draw a Sierpinski triangle. The image on the left shows what a fractal Savannah
    tree looks like. The right one explains the generative construction step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Design the function add-savannah. The function consumes an image and four numbers:
    (1) the x-coordinate of a line’s base point, (2) the y-coordinate of a line’s
    base point, (3) the length of the line, and (4) the angle of the line. It adds
    a fractal Savannah tree to the given image.'
  prefs: []
  type: TYPE_NORMAL
- en: Unless the line is too short, the function adds the specified line to the image.
    It then divides the line into three segments. It recursively uses the two intermediate
    points as the new starting points for two lines. The lengths and the angles of
    the two branches change in a fixed manner, but independently of each other. Use
    constants to define these changes and work with them until you like your tree
    well enough.
  prefs: []
  type: TYPE_NORMAL
- en: Hint Experiment with shortening the left branches by at least one third and
    rotating it left by at least 0.15 degrees. For the right branch, shorten it by
    at least 20% and rotate it by 0.2 degrees in the opposite direction. [![image](../Images/0396574abdda2ec9b53ff8bb5046078f.jpg)](#%28counter._%28exercise._ex~3atree-generation%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 529\. Graphics programmers often need to connect two points with a
    smooth curve where “smooth” is relative to some perspective.Géraldine Morin suggested
    this exercise. Take a look at these two images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/5fa1933fb35889a369c7c48e2363e4af.jpg)            ![image](../Images/4fe39e189f064bdac3b7edecec6b91a0.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'The left one shows a smooth curve, connecting points A and C; the right one
    supplies the perspective point, B, and the angle of an observer.One method for
    drawing such curves is due to Bézier. It is a prime example of generative recursion,
    and the following sequence explains the eureka! behind the algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/7805400ef76af1eb129a2444da807586.jpg)    ![image](../Images/9ca99a87822a4563b51ae32dac5c7a4d.jpg)
       ![image](../Images/bb72f9afd33da0ed2e7c9d30c85df680.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Consider the image on the left. It reminds you that the three given points determine
    a triangle and that the connection between A to C is the focal point of the algorithm.
    The goal is to pull the line from A to C toward B so that it turns into a smooth
    curve.
  prefs: []
  type: TYPE_NORMAL
- en: Now turn to the image in the middle It explains the essential idea of the generative
    step. The algorithm determines the midpoint on the two observer lines, A-B and
    B-C, as well as their midpoint, A-B-C.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the rightmost image shows how these three new points generate two
    distinct recursive calls: one deals with the new triangle on the left and the
    other one with the triangle on the right. More precisely, A-B and B-C become the
    new observer points and the lines from A to A-B-C and from C to A-B-C become the
    foci of the two recursive calls.'
  prefs: []
  type: TYPE_NORMAL
- en: When the triangle is small enough, we have a trivially solvable case. The algorithm
    just draws the triangle, and it appears as a point on the given image. You may
    need to experiment with the notion of “small enough” to make the curve look smooth.
    [![image](../Images/b69e698c93cb2ec4869c3dc2f3323a44.jpg)](#%28counter._%28exercise._ex~3abezier%29%29)
  prefs: []
  type: TYPE_NORMAL
- en: 34Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This last part is about designing with accumulators, a mechanism for collecting
    knowledge during a data structure traversal. Adding an accumulator can fix performance
    flaws and eliminate termination problems. Your take-away from this part are two
    and a half design lessons:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to recognize the need for introducing an accumulator. Traversals
    “forget” pieces of the argument when they step from piece to the next. If you
    discover that such knowledge could simplify the function’s design, consider introducing
    an accumulator. The first step is to switch to the accumulator template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The key step is to formulate an accumulator statement. The latter must express
    what knowledge the accumulator gathers as what kind of data. In most cases, the
    accumulator statement describes the difference between the very original argument
    and the current one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The third step, a minor one, is to deduce from the accumulator statement (1)
    what the initial accumulator value is, (2) how to maintain it during traversal
    steps, and (3) how to exploit its knowledge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The idea of accumulating knowledge is ubiquitous, and it appears in many different
    forms and shapes. It is widely used in so-called functional languages like ISL+.
    Programmers using imperative languages encounter accumulators in a different way,
    mostly via assignment statements in primitive looping constructs, because the
    latter cannot return values. Designing such imperative accumulator programs proceeds
    just like the design of accumulator functions here, but the details are beyond
    the scope of this first book on systematic program design.
  prefs: []
  type: TYPE_NORMAL
- en: 'Epilogue: Moving On'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have reached the end of this introduction to computing and programming,
    or program design as we say here. While there is more to learn about both subjects,
    this is a good point to stop, summarize, and look ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Computing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In elementary school, you learned to calculate with numbers. At first, you
    used numbers to count real things: three apples, five friends, twelve bagels.
    A bit later, you encountered addition, subtraction, multiplication, and even division;
    then came fractions. Eventually, you found out about variables and functions,
    which your teachers called algebra. Variables represented numbers, and functions
    related numbers to numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: Because you used numbers throughout this process, you didn’t think much of numbers
    as a means to represent information about the real world. Yes, you had started
    with three bears, five wolves, and twelve horses; but by high school, nobody reminded
    you of this relationship.
  prefs: []
  type: TYPE_NORMAL
- en: When you move from mathematical calculations to computing, the step from information
    to data and back becomes central. Nowadays, programs process representations of
    music, videos, molecules, chemical compounds, business case studies, electrical
    diagrams, and blue prints. Fortunately, you don’t need to encode all this information
    with numbers or, worse, just 0 and 1; if you had to, life would be unimaginably
    tedious. Instead, computing generalizes arithmetic and algebra so that when you
    program, you can code—<wbr>and your programs can compute—<wbr>with strings, Booleans,
    characters, structures, lists, functions, and many more kinds of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Classes of data and their functions come with equational laws that explain
    their meaning, just like the laws for numbers and their functions. While these
    equational laws are as simple as “(+  1  1) evaluates to 2” and “(not  #true)
    equals #false,” you can use them to predict the behavior of entire programs. When
    you run a program, you really just apply one of its many functions, an act that
    you can explain with the beta rule first mentioned in [Intermezzo: BSL](part_one.html#%28part._i1-2%29).
    Once the variables are replaced with values, the laws of data take over until
    you either have just a value or another function application. But yes, that’s
    all there is to computing.'
  prefs: []
  type: TYPE_NORMAL
- en: Program Design
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A typical software development project requires the collaboration of many programmers,
    and the result consists of thousands of functions. Over the life span of such
    a project, programmers come and go. Hence, the design structure of programs is
    really a means of communication among programmers across time. When you approach
    code that someone else wrote some time ago, the program ought to express its purpose
    and its relationships to other pieces—<wbr>because that other person might not
    be around anymore.
  prefs: []
  type: TYPE_NORMAL
- en: In such a dynamic context, programmers must create programs in a disciplined
    manner if they wish to work reasonable numbers of hours or produce high-quality
    products. Following a systematic design method guarantees that the program organization
    is comprehensible. Others can then easily understand the pieces and the whole,
    and then fix bugs or add new pieces of functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The design process of this book is one of these methods, and you ought to follow
    it whenever you create programs you might care about. You start with an analysis
    of the world of information and a description of the data that represent the information.
    Then you make a plan, a work list of functions needed. If this list is large,
    you refine the process in an iterative manner. You start with a subset of functions
    that quickly yields a product with which a client can interact. As you observe
    these interactions, you will quickly figure out which elements of your work list
    to tackle next.
  prefs: []
  type: TYPE_NORMAL
- en: Designing a program, or just a function, requires a rigorous understanding of
    what it computes. Unless you can describe the purpose of a piece of code with
    a concise statement, you cannot produce anything useful for future programmers.
    Make up, and work through, examples. Turn these examples into a suite of tests.
    This test suite is even more important when it comes to future modifications of
    the program. Anyone who changes the code can re-run these tests and reconfirm
    that the program still works for the basic examples.
  prefs: []
  type: TYPE_NORMAL
- en: Eventually your program will also fail. Other programmers may use it in an unanticipated
    manner. Real-world users may find differences between expected and actual behavior.
    Because you have designed the code in a systematic manner, you will know what
    to do. You will formulate a failing test case for your program’s main function.
    From this one test, you will derive a test case for each function that the main
    function mentions. Those functions that pass their new tests do not contribute
    to the failure. One of others does; on occasion, several might collude to create
    a bug. If the broken function composes others, resume the test creation; otherwise
    you have found the source of the problem. You will know that you have fixed the
    problem when the program as a whole passes all its tests.
  prefs: []
  type: TYPE_NORMAL
- en: No matter how hard you work, a function or program isn’t done the first time
    it passes the test suite. You must find time to inspect it for design flaws and
    repetitions of designs. If you find any design patterns, form new abstractions
    or use existing abstractions to eliminate these patterns.
  prefs: []
  type: TYPE_NORMAL
- en: If you respect these guidelines, you will produce solid software within reasonable
    effort. It will work because you understand why and how it works. Others who must
    modify or enhance your software will understand it quickly, because the code communicates
    its process and its purpose. Working through this book got you started. Now you
    must practice, practice, practice. And you will have to learn a lot more about
    program design and computing than a first book can teach.
  prefs: []
  type: TYPE_NORMAL
- en: Onward, Developers and Computer Scientists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Right now, you might be wondering what to study next. The answer is both more
    programming and more computing.
  prefs: []
  type: TYPE_NORMAL
- en: As a student of program design, your next task is to learn how the design process
    applies in the setting of a full-fledged programming language. Some of these are
    like the teaching languages, and the transition will be easy. Others require a
    different mind set because they offer means for spelling out data definitions
    (classes and objects) and for formulating signatures so that they are cross-checked
    before the program is run (types).Given your knowledge, it is easy for you to
    learn Racket, the language behind the teaching languages in this book. See [Realm
    of Racket](http://realmofracket.com/about.html) for one possible introduction.
    In addition, you will also have to learn how to scale the design process to the
    use and production of so-called frameworks (“stacks”) and components. Roughly
    speaking, frameworks abstract pieces of functionality—<wbr>for example, graphical
    user interfaces, database connections, and web connectivity—<wbr>that are common
    to many software systems. You need to learn to instantiate these abstractions,
    and your programs will compose these instances to create coherent systems. Similarly,
    learning to create new system components is also inherently a part of scaling
    up your skills.
  prefs: []
  type: TYPE_NORMAL
- en: As a student of computing, you will also have to expand your understanding of
    the computational process. This book has focused on the laws that describe the
    process itself. In order to function as a real software engineer, you need to
    learn what the process costs, both at a theoretical level and a practical one.
    Studying the concept of big-O in some more depth is a first, small step in this
    direction; learning to measure and analyze a program’s performance is the real
    goal, because you will need this skill as a developer on a regular basis. Above
    and beyond these basic ideas, you will also need knowledge about hardware, networking,
    layering of software, and specialized algorithms in various disciplines.
  prefs: []
  type: TYPE_NORMAL
- en: Onward, Accountants, Journalists, Surgeons, and Everyone Else
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Some of you wanted to see what computing and programming are all about. You
    now know that computing is just a generalization of calculating, and you may just
    sense how useful program design is to you. Even if you never develop programs
    again, you know what distinguishes a garage programmer from a serious software
    developer. When you interact with developers as a professional, you know that
    systematic design matters because it affects your quality of life and the bottom
    line of your business.
  prefs: []
  type: TYPE_NORMAL
- en: In reality though, you are likely to “program” again, on a regular basis; you
    may just fail to see your activities in this light. Imagine a journalist for a
    moment. His story starts with the collection of information and data, laying it
    out, organizing it, and adding anecdotes. If you squint, you’ll see that this
    is just step one of the design process. Let’s turn to a family doctor who, after
    checking up on your symptoms, formulates a hypothesis of what might affect you.
    Do you see step two? Or, think of a lawyer who illustrates the point of her line
    of argument with a number of examples—<wbr>an instance of step three. Finally,
    a civil engineer cross-checks the bridge as it is built to make sure it lives
    up to the blueprint and the underlying static calculations. Cross-checking is
    just a form of testing—<wbr>step six of the process; it compares actual measurements
    with expected values from the predictive calculations. Each of these professionals
    develops a system to work effectively and efficiently; and deep down, this system
    is likely to resemble the design process employed in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Now, once you accept that many activities are a form of programming, you can
    transfer additional ideas from the design process to your own life. For example,
    if you recognize patterns, you may take the little additional time it takes to
    create an “abstraction”—<wbr>a single point of control—<wbr>to simplify your future
    work. So, regardless of whether you become an accountant or a doctor or something
    else, remember the design processes wherever you go and whatever you do.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise Write a short essay on how the design process may help you with your
    chosen profession. ![image](../Images/dd5f55d34a17441e12538e75f002bd61.jpg)
  prefs: []
  type: TYPE_NORMAL
