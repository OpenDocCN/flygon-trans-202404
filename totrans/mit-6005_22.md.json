["```\nget-balance\nif balance >= 1 then withdraw 1\n```", "```\n/** Squares integers. */\npublic class Squarer {\n\n    private final BlockingQueue<Integer> in;\n    private final BlockingQueue<SquareResult> out;\n    // Rep invariant: in, out != null\n\n    /** Make a new squarer.\n     *  @param requests queue to receive requests from\n     *  @param replies queue to send replies to */\n    public Squarer(BlockingQueue<Integer> requests,\n                   BlockingQueue<SquareResult> replies) {\n        this.in = requests;\n        this.out = replies;\n    }\n\n    /** Start handling squaring requests. */\n    public void start() {\n        new Thread(new Runnable() {\n            public void run() {\n                while (true) {\n                    // TODO: we may want a way to stop the thread\n                    try {\n                        // block until a request arrives\n                        int x = in.take();\n                        // compute the answer and send it back\n                        int y = x * x;\n                        out.put(new SquareResult(x, y));\n                    } catch (InterruptedException ie) {\n                        ie.printStackTrace();\n                    }\n                }\n            }\n        }).start();\n    }\n}\n```", "```\n/** An immutable squaring result message. */\npublic class SquareResult {\n    private final int input;\n    private final int output;\n\n    /** Make a new result message.\n     *  @param input input number\n     *  @param output square of input */\n    public SquareResult(int input, int output) {\n        this.input = input;\n        this.output = output;\n    }\n\n    @Override public String toString() {\n        return input + \"^2 = \" + output;\n    }\n}\n```", "```\npublic static void main(String[] args) {\n\n    BlockingQueue<Integer> requests = new LinkedBlockingQueue<>();\n    BlockingQueue<SquareResult> replies = new LinkedBlockingQueue<>();\n\n    Squarer squarer = new Squarer(requests, replies);\n    squarer.start();\n\n    try {\n        // make a request\n        requests.put(42);\n        // ... maybe do something concurrently ...\n        // read the reply\n        System.out.println(replies.take());\n    } catch (InterruptedException ie) {\n        ie.printStackTrace();\n    }\n}\n```", "```\nprivate void checkRep() {\n  assert REP_INVARIANT;\n}\n```", "```\nSquareRequest = IntegerRequest + StopRequest \n```", "```\ninput : SquareRequest \u2192 int\nshouldStop : SquareRequest \u2192 boolean\n```", "```\npublic void run() {\n    while (true) {\n        try {\n            // block until a request arrives\n            SquareRequest req = in.take();\n            // see if we should stop\n            if (req.shouldStop()) { break; }\n            // compute the answer and send it back\n            int x = req.input();\n            int y = x * x;\n            out.put(new SquareResult(x, y));\n        } catch (InterruptedException ie) {\n            ie.printStackTrace();\n        }\n    }\n}\n```", "```\npublic void run() {\n    // handle requests until we are interrupted\n    while ( ! Thread.interrupted()) {\n        try {\n            // block until a request arrives\n            int x = in.take();\n            // compute the answer and send it back\n            int y = x * x;\n            out.put(new SquareResult(x, y));\n        } catch (InterruptedException ie) {\n            // stop\n            break;\n        }\n    }\n}\n```", "```\nSquareRequest = IntegerRequest + StopRequest\n```", "```\ninterface SquareRequest { ... }\nclass IntegerRequest implements SquareRequest { ... }\nclass StopRequest implements SquareRequest { ... }\n```", "```\nclass SquareRequest { ... }\nclass IntegerRequest { ... }\nclass StopRequest { ... }\n```", "```\nclass SquareRequest {\n  private final String requestType;\n  public static final String INTEGER_REQUEST = \"integer\";\n  public static final String STOP_REQUEST    = \"stop\";\n  ...\n}\n```", "```\npublic interface Trade {\n    public int numShares();\n    public String stockName();\n}\n\npublic class TradeWorker implements Runnable {\n    private final Queue<Trade> tradesQueue;\n\n    public TradeWorker(Queue<Trade> tradesQueue) {\n        this.tradesQueue = tradesQueue;\n    }\n\n    public void run() {\n        while (true) {\n            Trade trade = tradesQueue.poll();\n            TradeProcessor.handleTrade(trade.numShares(), trade.stockName());\n        }\n    }\n}\n\npublic class TradeProcessor {\n    public static void handleTrade(int numShares, String stockName) {\n        /* ... process the trade ... takes a while ... */\n    }\n}\n```"]