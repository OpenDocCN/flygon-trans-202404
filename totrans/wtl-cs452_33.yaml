- en: Lecture 33 - Cyclic Execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Final exam date: 9.00 August 7 to 11.30 August 9'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Final demos: 26 August & 27 August'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 25 August
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Groups demoing on the 27th leave the lab at 13.00
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 26 August
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Code freeze at 9.00
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Demos start at 9.30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 30 minutes in length
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Demos end at 14.00, groups demoing on the 27th re-enter the lab
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 27 August
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Code freeze at 9.00
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Demos start at 9.30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 30 minutes in length
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Demos end at 14.00
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Software
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Server with clients & a worker
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Occam2
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Go
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Timing out
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Occam2
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Go
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Cyclic Execution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Voyageur
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In continuous operation for 34 years, 10 months, 7 days.
  prefs: []
  type: TYPE_NORMAL
- en: It was designed to have a three-year lifetime!
  prefs: []
  type: TYPE_NORMAL
- en: Computer
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 6000 word instruction and scratch data memory
  prefs: []
  type: TYPE_NORMAL
- en: 62,500 Kbyte digital tape recorder for storage of sensor data
  prefs: []
  type: TYPE_NORMAL
- en: System Software
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Cyclic executive
  prefs: []
  type: TYPE_NORMAL
- en: Cyclic Execution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Clock ticks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starts executing, in priority order, programs that are ready to run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At end of programs, wait until the clock ticks, then go to 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If clock ticks before end of programs, then report fault to earth and go to
    2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cycle can be interrupted by receiving input from earth that tells it to jump
    to boot mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking for input from earth is one of the programs that is run.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Boot mode often entails loading a new program from earth. (At present loading
    takes many hours, and hours is getting close to days. Aren't you lucky!)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is an abstract description: with so little memory it is essential to squeeze
    out every word.'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the programs have the form
  prefs: []
  type: TYPE_NORMAL
- en: If input from X, then do A.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are back at the beginning of the course, but we know much more now.
  prefs: []
  type: TYPE_NORMAL
- en: Real-time Scheduling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Much real-time computing operates in an environment like the space shuttle
  prefs: []
  type: TYPE_NORMAL
- en: Groups of sensors that are polled with fixed periodicities, not necessarily
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sensor input triggers tasks which also run with the periodicity of the sensor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Typical example, a group of sensors that returns
  prefs: []
  type: TYPE_NORMAL
- en: the rotational speed of the wheels, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the exhaust mixture, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the torque, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the state of the controls, and ...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and a set of tasks that
  prefs: []
  type: TYPE_NORMAL
- en: updates the engine parameters, such as combustion mixture, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: updates the transmission parameters, such as shift speeds, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: passes information to the instrument controller,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and ...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each time a sensor returns a new datum a scheduler runs
  prefs: []
  type: TYPE_NORMAL
- en: makes ready any task that the data makes ready to run
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: decides which of the ready tasks to schedule, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: starts it running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your kernel can handle problems like this one pretty efficiently,
  prefs: []
  type: TYPE_NORMAL
- en: but you can do better.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cyclic Execution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's make a finite schedule that repeats
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If the times are integers the pattern repeats after a while.
  prefs: []
  type: TYPE_NORMAL
- en: The total amount of thinking you have to do is finite.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The thinking you do is inserting into the schedule the amount of processing
    that needs to be done
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: worst case
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Work it all out so that nothing collides.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using heuristics, no doubt
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make it a little easier
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make the complete pattern short by making sensor periods multiples of one another.
    If you can control sensor periods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Underlying clock.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sensor i is read once every ni ticks.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Master cycle is LCM( n1, n2, n3, ... ) in length
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Schedule the master cycle by hand (= by brain)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Standardize the processing at each point
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Minimize the interaction between tasks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the tasks won't fit in adjust the complete sensor/program system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make it easier yet
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Prove some theorems, such as [Liu & Layland.](http://portal.acm.org/citation.cfm?id=321743&dl=ACM&coll=portal&CFID=10903146&CFTOKEN=86528874)
    The essence of the theorems is
  prefs: []
  type: TYPE_NORMAL
- en: The **critical moment**, which is guaranteed to exist, occurs when all three
    tasks are scheduled at once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you choose task priorities so that the most frequently scheduled task has
    the highest priority, then,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if there exists a schedule that meets all deadlines, then
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: your choice of task priorities meets all deadlines
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Your project
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If your project is correct, but resource limited, the critical instant for the
    limiting resource is the place where your project fails. For example.
  prefs: []
  type: TYPE_NORMAL
- en: If your project is CPU limited, it's the point where the maximum computation
    must be done before the CPU can get back to do the most important new thing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you project is train communication bandwidth limited, then it's the point
    at which all curent users of bandwidth want to communicate at once.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small form-factor computing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In 1977, when Voyageou was launched, computation was expensive, so the action
    in computation was in big expensive things. Now computation is cheap, and the
    action is in small inexpensive things. Think about how a mobile telephone works.
  prefs: []
  type: TYPE_NORMAL
- en: It has housekeeping functions that must be done regularly, things like
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: telling the nearest ground station that it's ready to receive a call
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: updating the clock
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: refreshing the memory
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When you are making a phone call, there are phone call functions that must be
    done regularly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: collecting packets of audio from the antenna
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: doing signal conditioning on the digital audio they contain.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: putting the digital audio into data buffers from which they will be send to
    the speaker.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: analogous things that intervene between the microphone and the antenna.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When you want to play a game, consult your calendar, browse the internet, etc
    you desire asynchronous response from the phone
  prefs: []
  type: TYPE_NORMAL
- en: It should slow down, not collapse, when you load it too heavily.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The easy way to do this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put all of the regular functions into a cyclic executive, carefully analysing
    the run-time of each to make certain that everything will always get done on time.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In almost every cycle there is some time left over. In this time run an asynchronous
    OS that supports non-critical but still real-time features such as
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: managing the UI
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: texting
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: game playing
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: internet browsing
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: whatever else you can find at the app store.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the kind of thing that your kernel can do well.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The definition of `non-critical' depends on the capabilities of the user. For
    example,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: if a UI slows a little the user easily slows his or her reactions to accomodate
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: but if the sound drops out for a second in the middle of a word the user cannot
    pause his hearing in order to put the two halves of the word together
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This sounds easy. Why is it hard in practice?
  prefs: []
  type: TYPE_NORMAL
- en: It's necessary to share resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hardware, such as memory and I/O
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: software, such as data structures
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: and battery life-time is what sells mobile phones
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: so resources are limited
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In particular, from the asynchro9nous UI the user starts functions, like phone
    calls, that are synchronous.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronous/asynchronous communication is hard to accomplish while meeting tight
    real-time constraints.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Code must cross a synchronous/asynchronous boundary
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Even more tricky, you have to handle foreign code, like apps.
  prefs: []
  type: TYPE_NORMAL
- en: Deciding whether it's safe to include a new activity in the schedule, which
    is called **admission control**, requires knowing its performance characteristics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can comfortably put your own code into the schedule because you trust the
    performace characteristics you received with it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foreign code, which means code produced elsewhere, is not trustworthy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you include it in the schedule?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take advantage of real-time being defined in human terms.
  prefs: []
  type: TYPE_NORMAL
- en: If its reported performance characteristics are good enough install it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it violates its performance characteristics during the first 100 milliseconds,
    then
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it's probably incompetent. Reject it and tell the user why.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This looks real-time to the user.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If it violates its performance characteristics later,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it could be malicious
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All you need is code that handles over-runs in the cyclic exective without missing
    deadlines!
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
