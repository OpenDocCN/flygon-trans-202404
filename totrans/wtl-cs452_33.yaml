- en: Lecture 33 - Cyclic Execution
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Final exam date: 9.00 August 7 to 11.30 August 9'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Final demos: 26 August & 27 August'
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 25 August
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Groups demoing on the 27th leave the lab at 13.00
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 26 August
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Code freeze at 9.00
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Demos start at 9.30
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 30 minutes in length
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Demos end at 14.00, groups demoing on the 27th re-enter the lab
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 27 August
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Code freeze at 9.00
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Demos start at 9.30
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 30 minutes in length
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Demos end at 14.00
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Software
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Server with clients & a worker
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Occam2
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Go
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Timing out
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Occam2
  id: totrans-24
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Go
  id: totrans-26
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Cyclic Execution
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Voyageur
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In continuous operation for 34 years, 10 months, 7 days.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: It was designed to have a three-year lifetime!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Computer
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 6000 word instruction and scratch data memory
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 62,500 Kbyte digital tape recorder for storage of sensor data
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: System Software
  id: totrans-36
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Cyclic executive
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Cyclic Execution
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Clock ticks
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starts executing, in priority order, programs that are ready to run.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At end of programs, wait until the clock ticks, then go to 2.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If clock ticks before end of programs, then report fault to earth and go to
    2.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cycle can be interrupted by receiving input from earth that tells it to jump
    to boot mode.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking for input from earth is one of the programs that is run.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Boot mode often entails loading a new program from earth. (At present loading
    takes many hours, and hours is getting close to days. Aren't you lucky!)
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is an abstract description: with so little memory it is essential to squeeze
    out every word.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Most of the programs have the form
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: If input from X, then do A.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are back at the beginning of the course, but we know much more now.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Real-time Scheduling
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Much real-time computing operates in an environment like the space shuttle
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Groups of sensors that are polled with fixed periodicities, not necessarily
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sensor input triggers tasks which also run with the periodicity of the sensor
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Typical example, a group of sensors that returns
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: the rotational speed of the wheels, and
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the exhaust mixture, and
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the torque, and
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the state of the controls, and ...
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and a set of tasks that
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: updates the engine parameters, such as combustion mixture, and
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: updates the transmission parameters, such as shift speeds, and
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: passes information to the instrument controller,
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and ...
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each time a sensor returns a new datum a scheduler runs
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: makes ready any task that the data makes ready to run
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: decides which of the ready tasks to schedule, and
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: starts it running.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your kernel can handle problems like this one pretty efficiently,
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: but you can do better.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cyclic Execution
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's make a finite schedule that repeats
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If the times are integers the pattern repeats after a while.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: The total amount of thinking you have to do is finite.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The thinking you do is inserting into the schedule the amount of processing
    that needs to be done
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: worst case
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Work it all out so that nothing collides.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using heuristics, no doubt
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make it a little easier
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make the complete pattern short by making sensor periods multiples of one another.
    If you can control sensor periods.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Underlying clock.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sensor i is read once every ni ticks.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Master cycle is LCM( n1, n2, n3, ... ) in length
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Schedule the master cycle by hand (= by brain)
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Standardize the processing at each point
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Minimize the interaction between tasks
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the tasks won't fit in adjust the complete sensor/program system.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make it easier yet
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Prove some theorems, such as [Liu & Layland.](http://portal.acm.org/citation.cfm?id=321743&dl=ACM&coll=portal&CFID=10903146&CFTOKEN=86528874)
    The essence of the theorems is
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: The **critical moment**, which is guaranteed to exist, occurs when all three
    tasks are scheduled at once.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you choose task priorities so that the most frequently scheduled task has
    the highest priority, then,
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if there exists a schedule that meets all deadlines, then
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: your choice of task priorities meets all deadlines
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Your project
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If your project is correct, but resource limited, the critical instant for the
    limiting resource is the place where your project fails. For example.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: If your project is CPU limited, it's the point where the maximum computation
    must be done before the CPU can get back to do the most important new thing.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you project is train communication bandwidth limited, then it's the point
    at which all curent users of bandwidth want to communicate at once.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small form-factor computing
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In 1977, when Voyageou was launched, computation was expensive, so the action
    in computation was in big expensive things. Now computation is cheap, and the
    action is in small inexpensive things. Think about how a mobile telephone works.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: It has housekeeping functions that must be done regularly, things like
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: telling the nearest ground station that it's ready to receive a call
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: updating the clock
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: refreshing the memory
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When you are making a phone call, there are phone call functions that must be
    done regularly
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: collecting packets of audio from the antenna
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: doing signal conditioning on the digital audio they contain.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: putting the digital audio into data buffers from which they will be send to
    the speaker.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: analogous things that intervene between the microphone and the antenna.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When you want to play a game, consult your calendar, browse the internet, etc
    you desire asynchronous response from the phone
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: It should slow down, not collapse, when you load it too heavily.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The easy way to do this.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put all of the regular functions into a cyclic executive, carefully analysing
    the run-time of each to make certain that everything will always get done on time.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In almost every cycle there is some time left over. In this time run an asynchronous
    OS that supports non-critical but still real-time features such as
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: managing the UI
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: texting
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: game playing
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: internet browsing
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: whatever else you can find at the app store.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the kind of thing that your kernel can do well.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The definition of `non-critical' depends on the capabilities of the user. For
    example,
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: if a UI slows a little the user easily slows his or her reactions to accomodate
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: but if the sound drops out for a second in the middle of a word the user cannot
    pause his hearing in order to put the two halves of the word together
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但如果声音在一个单词中间停顿一秒钟，用户无法暂停听力以将单词的两半拼接在一起
- en: This sounds easy. Why is it hard in practice?
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来很容易。为什么在实践中很难？
- en: It's necessary to share resources.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有必要共享资源。
- en: hardware, such as memory and I/O
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件，比如内存和I/O
- en: software, such as data structures
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件，比如数据结构
- en: and battery life-time is what sells mobile phones
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电池寿命是销售手机的关键
- en: so resources are limited
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此资源是有限的
- en: In particular, from the asynchro9nous UI the user starts functions, like phone
    calls, that are synchronous.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特别是，从异步UI开始，用户启动同步的功能，比如电话通话。
- en: Synchronous/asynchronous communication is hard to accomplish while meeting tight
    real-time constraints.
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同步/异步通信很难在满足严格的实时约束条件的同时实现。
- en: Code must cross a synchronous/asynchronous boundary
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码必须跨越同步/异步边界
- en: Even more tricky, you have to handle foreign code, like apps.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 更加棘手的是，你必须处理外部代码，比如应用程序。
- en: Deciding whether it's safe to include a new activity in the schedule, which
    is called **admission control**, requires knowing its performance characteristics.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定是否安全地将新活动包含在日程安排中，这被称为**准入控制**，需要了解其性能特征。
- en: You can comfortably put your own code into the schedule because you trust the
    performace characteristics you received with it.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以放心地将自己的代码放入日程安排中，因为你信任收到的性能特征。
- en: Foreign code, which means code produced elsewhere, is not trustworthy.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部代码，也就是在其他地方生成的代码，是不可信的。
- en: How can you include it in the schedule?
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何将其包含在日程安排中？
- en: Take advantage of real-time being defined in human terms.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 利用以人类术语定义的实时性。
- en: If its reported performance characteristics are good enough install it.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果其报告的性能特征足够好，就安装它。
- en: If it violates its performance characteristics during the first 100 milliseconds,
    then
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在前100毫秒内违反了其性能特征，那么
- en: it's probably incompetent. Reject it and tell the user why.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能是无能的。拒绝并告诉用户原因。
- en: This looks real-time to the user.
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这对用户来说是实时的。
- en: If it violates its performance characteristics later,
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果它在后来违反了其性能特征，
- en: it could be malicious
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能是恶意的
- en: All you need is code that handles over-runs in the cyclic exective without missing
    deadlines!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要处理循环执行中的溢出而不会错过截止日期的代码！
- en: '* * *'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Return to:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至：
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩在s12学期CS452课程的讲座笔记](index.html)'
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩2012年春季CS452页面](../index.html)'
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩的CS452页面](../../index.html)'
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩的教学页面](../../../index.html)'
- en: '[Bill Cowan''s home page](../../../../index.html)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩的主页](../../../../index.html)'
