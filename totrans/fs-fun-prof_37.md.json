["```\ntype RegularExpression =\n    | Literal of string\n    | Sequence of RegularExpression list\n    | Alternation of RegularExpression * RegularExpression\n    | Repetition of RegularExpression \n\n// An interpreter takes a string input and a RegularExpression\n// and returns a value of some kind \ntype Interpret<'a> =  string -> RegularExpression -> 'a \n```", "```\ntype Student = {\n    Name: string\n    Address: string\n    PhoneNumber: string\n    EmailAddress: string\n    AverageMark: float\n    }\n\ntype Professor= {\n    Name: string\n    Address: string\n    PhoneNumber: string\n    EmailAddress: string\n    Salary: int\n    }\n\ntype Seminar = {\n    Name: string\n    Number: string\n    Fees: float\n    TaughtBy: Professor option\n    WaitingList: Student list\n    }\n\ntype Enrollment = {\n    Student : Student \n    Seminar : Seminar \n    Marks: float list\n    }\n\ntype EnrollmentRepository = Enrollment list\n\n// ==================================\n// activities / use-cases / scenarios\n// ==================================\n\ntype IsElegibleToEnroll = Student -> Seminar -> bool\ntype GetSeminarsTaken = Student -> EnrollmentRepository -> Seminar list\ntype AddStudentToWaitingList = Student -> Seminar -> Seminar \n```", "```\ntype EnrollStudent = Student -> Seminar -> Enrollment option \n```", "```\ntype Customer = {name:string; location:string}\n\ntype NormalOrder = {date: DateTime; number: string; customer: Customer}\ntype SpecialOrder = {date: DateTime; number: string; customer: Customer}\ntype Order = \n    | Normal of NormalOrder\n    | Special of SpecialOrder \n\n// these three operations work on all orders\ntype Confirm =  Order -> Order \ntype Close =  Order -> Order \ntype Dispatch =  Order -> Order \n\n// this operation only works on Special orders\ntype Receive =  SpecialOrder -> SpecialOrder \n```", "```\ntype Date = System.DateTime\n\n// == Customer related ==\n\ntype Customer = {\n    name:string\n    address:string\n    }\n\n// == Item related ==\n\ntype [<Measure>] grams\n\ntype Item = {\n    shippingWeight: int<grams>\n    description: string\n    }\n\ntype Qty = int\ntype Price = decimal\n\n// == Payment related ==\n\ntype PaymentMethod = \n    | Cash\n    | Credit of number:string * cardType:string * expDate:Date\n    | Check of name:string * bankID: string\n\ntype Payment = {\n    amount: decimal\n    paymentMethod : PaymentMethod \n    }\n\n// == Order related ==\n\ntype TaxStatus = Taxable | NonTaxable\ntype Tax = decimal\n\ntype OrderDetail = {\n    item: Item\n    qty: int\n    taxStatus : TaxStatus\n    }\n\ntype OrderStatus = Open | Completed\n\ntype Order = {\n    date: DateTime; \n    customer: Customer\n    status: OrderStatus\n    lines: OrderDetail list\n    payments: Payment list\n    }\n\n// ==================================\n// activities / use-cases / scenarios\n// ==================================\ntype GetPriceForQuantity = Item -> Qty -> Price\n\ntype CalcTax = Order -> Tax\ntype CalcTotal = Order -> Price\ntype CalcTotalWeight = Order -> int<grams> \n```", "```\n// Try to authorize a payment. Note that it might fail\ntype Authorize =  UnauthorizedPayment -> AuthorizedPayment option\n\n// Pay an unpaid order with an authorized payment.\ntype PayOrder = UnpaidOrder -> AuthorizedPayment -> PaidOrder \n```", "```\ntype Date = System.DateTime\n\ntype User = {\n    username: string\n    password: string\n    name: string\n    }\n\ntype Hotel = {\n    id: int\n    name: string\n    address: string\n    city: string\n    state: string\n    zip: string\n    country: string\n    price: decimal\n    }\n\ntype CreditCardInfo = {\n    card: string\n    name: string\n    expiryMonth: int\n    expiryYear: int\n    }\n\ntype Booking = {\n    id: int\n    user: User\n    hotel: Hotel\n    checkinDate: Date\n    checkoutDate: Date\n    creditCardInfo: CreditCardInfo\n    smoking: bool\n    beds: int\n    }\n\n// What are these?!? And why are they in the domain?\ntype EntityManager = unit\ntype FacesMessages = unit\ntype Events = unit\ntype Log = unit\n\ntype BookingAction = {\n    em: EntityManager\n    user: User\n    hotel: Booking\n    booking: Booking\n    facesMessages : FacesMessages\n    events: Events \n    log: Log\n    bookingValid: bool\n    }\n\ntype ChangePasswordAction = {\n    user: User\n    em: EntityManager\n    verify: string\n    booking: Booking\n    changed: bool\n    facesMessages : FacesMessages\n    }\n\ntype RegisterAction = {\n    user: User\n    em: EntityManager\n    facesMessages : FacesMessages\n    verify: string\n    registered: bool\n    } \n```", "```\ntype Author = {\n    name: string\n    biography: string\n    }\n\ntype Book = {\n    ISBN: string option\n    title: string\n    author: Author\n    summary: string\n    publisher: string\n    publicationDate: Date\n    numberOfPages: int\n    language: string\n    }\n\ntype Library = {\n    name: string\n    address: string\n    }\n\n// Each physical library item - book, tape cassette, CD, DVD, etc. could have its own item number. \n// To support it, the items may be barcoded. The purpose of barcoding is \n// to provide a unique and scannable identifier that links the barcoded physical item \n// to the electronic record in the catalog. \n// Barcode must be physically attached to the item, and barcode number is entered into \n// the corresponding field in the electronic item record.\n// Barcodes on library items could be replaced by RFID tags. \n// The RFID tag can contain item's identifier, title, material type, etc. \n// It is read by an RFID reader, without the need to open a book cover or CD/DVD case \n// to scan it with barcode reader.\ntype BookItem = {\n    barcode: string option\n    RFID: string option\n    book: Book\n    /// Library has some rules on what could be borrowed and what is for reference only. \n    isReferenceOnly: bool\n    belongsTo: Library\n    }\n\ntype Catalogue = {\n    belongsTo: Library\n    records : BookItem list\n    }\n\ntype Patron = {\n    name: string\n    address: string\n    }\n\ntype AccountState = Active | Frozen | Closed\n\ntype Account = {\n    patron: Patron\n    library: Library\n    number: int\n    opened: Date\n\n    /// Rules are also defined on how many books could be borrowed \n    /// by patrons and how many could be reserved.\n    history: History list\n\n    state: AccountState\n    }\n\nand History = {\n    book : BookItem\n    account: Account\n    borrowedOn: Date\n    returnedOn: Date option\n    } \n```", "```\ntype Librarian = {\n    name: string\n    address: string\n    position: string\n    }\n\n/// Either a patron or a librarian can do a search\ntype SearchInterfaceOperator =\n    | Patron of Patron\n    | Librarian of Librarian\n\ntype SearchRequest = unit // to do\ntype SearchResult = unit // to do\ntype SearchInterface = SearchInterfaceOperator -> Catalogue -> SearchRequest -> SearchResult\n\ntype ManageRequest = unit // to do\ntype ManageResult = unit // to do\n\n/// Only librarians can do management\ntype ManageInterface = Librarian -> Catalogue -> ManageRequest -> ManageResult \n```", "```\ntype Account = \n    | Active of ActiveAccount\n    | Closed of ClosedAccount\n\n/// Only ActiveAccounts can borrow\ntype Borrow = ActiveAccount -> BookItem -> History \n```", "```\nopen System\ntype Date = System.DateTime\ntype String50 = string\ntype String5 = string\n\n// ==========================\n// Customer-related\n// ==========================\n\ntype AddressDetails = {\n    street : string option\n    city : string option\n    postalCode : string option\n    state : string option\n    country : string option\n    }\n\ntype CustomerIdDescription = {\n    CRM_ID : string\n    description : string\n    }\n\ntype IndividualCustomer = {\n    idAndDescription : CustomerIdDescription\n    firstName : string\n    lastName : string\n    middleName : string option\n    email : string\n    phone : string option\n    locale : string option // default :  \"English\"\n    billing : AddressDetails\n    shipping : AddressDetails\n    }\n\ntype Contact = {\n    firstName : string\n    lastName : string\n    middleName : string option\n    email : string\n    locale : string option // default :  \"English\"\n    }\n\ntype Company = {\n    idAndDescription : CustomerIdDescription\n    name : string\n    phone : string option\n    fax : string option\n    contact: Contact\n    billing : AddressDetails\n    shipping : AddressDetails\n    }\n\ntype Customer = \n    | Individual of IndividualCustomer\n    | Company of Company \n\n// ==========================\n// Product-related\n// ==========================\n\n/// Flags can be ORed together\n[<Flags>] \ntype LockingType =\n    | HL \n    | SL_AdminMode \n    | SL_UserMode\n\ntype Rehost =\n    | Enable\n    | Disable\n    | LeaveAsIs\n    | SpecifyAtEntitlementTime\n\ntype BatchCode = {\n    id : String5\n    }\n\ntype Feature = {\n    id : int\n    name : String50\n    description : string option\n    }\n\ntype ProductInfo = {\n    id : int\n    name : String50\n    lockingType : LockingType\n    rehost : Rehost\n    description : string option\n    features: Feature list\n    bactchCode: BatchCode\n    }\n\ntype Product = \n    | BaseProduct of ProductInfo\n    | ProvisionalProduct of ProductInfo * baseProduct:Product \n\n// ==========================\n// Entitlement-related\n// ==========================\n\ntype EntitlementType = \n    | HardwareKey\n    | ProductKey\n    | ProtectionKeyUpdate\n\ntype Entitlement = {\n    EID : string\n    entitlementType : EntitlementType \n    startDate : Date\n    endDate : Date option\n    neverExpires: bool\n    comments: string option\n    customer: Customer\n    products: Product list\n    } \n```"]