- en: 'Chapter B: Fun with Determinants'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节B：行列式的乐趣
- en: We have discussed the determinant in [Chapter 4](../chapter04/contents.html)
    and again in [Chapter 32](../chapter32/contents.html). We discussed several methods
    for computing determinants, which are not difficult in principle, but rather tedious
    to perform in practice, if you want to do them by hand.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第4章](../chapter04/contents.html)中讨论了行列式，再次在[第32章](../chapter32/contents.html)中讨论了它。我们讨论了几种计算行列式的方法，原则上并不困难，但是如果你想手动进行，那么实际上是很烦琐的。
- en: Here we give some ideas which allow us to deduce the determinant of several
    special types of matrices (but ones that are occasionally useful) with less effort
    than it takes to write down the matrix.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们提供了一些思路，可以让我们用比写出矩阵还要少的工夫推导出几种特殊类型矩阵的行列式（虽然它们偶尔会有用）。
- en: We also present a curious formula involving determinants that was discovered
    by Lewis Carroll, the author of Alice in Wonderland, and a magical algorithm for
    computing determinants and even inverses based upon it, with almost no effort.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了一个奇特的涉及行列式的公式，这个公式是由爱丽丝梦游仙境的作者刘易斯·卡罗尔发现的，并且基于它提出了一个神奇的计算行列式甚至逆的算法，几乎没有任何努力。
- en: 1 Some Easily Calculated Determinants. The VanderMonde Determinant
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 一些易于计算的行列式。范德蒙德行列式
- en: When a matrix has elements that are monomials or even polynomials in some set
    of variables, then its determinant will in general be a polynomial in those variables,
    and this is sometimes useful in evaluating it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个矩阵的元素是某些变量集合中的单项式甚至多项式时，那么它的行列式一般将是这些变量的多项式，并且这有时对于求值是有用的。
- en: The prime example of this is what is called a VanderMonde matrix, whose rows
    (or if you prefer, columns) all have the form (1, x[j], x[j]², x[j]³, ..., x[j]^(n-1))
    for some x[j].
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个的典型例子是所谓的范德蒙德矩阵，其行（或者如果你愿意，列）的形式都是（1，x[j]，x[j]²，x[j]³，...，x[j]^(n-1)）对于某个x[j]。
- en: Here is an example of one
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例
- en: '![](../Images/41f41b9d9296d71f9669b80965386c9f.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41f41b9d9296d71f9669b80965386c9f.jpg)'
- en: By the basic property of a determinant, that it is 0 if two of its rows are
    the same, we can deduce that determinant of a VanderMonde matrix will be 0 when
    any two of its rows are the same.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过行列式的基本性质，如果它的两行相同，则我们可以推断出范德蒙德矩阵的行列式在任意两行相同时为0。
- en: But that means that, as a polynomial, it must have (x[i] - x[j]) as a factor,
    for every i and j.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这意味着，作为一个多项式，它必须有(x[i] - x[j])作为一个因子，对于每一个i和j。
- en: This means that such a determinant must have ![](../Images/076a1de1ba2ff40d201747d2312fc823.jpg)
    as a factor, with the product here taken over all pairs of variables with i >
    j.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着这样的一个行列式必须有![](../Images/076a1de1ba2ff40d201747d2312fc823.jpg)作为一个因子，这里的乘积是对所有i
    > j的变量对进行的。
- en: This factor is already a polynomial of degree ![](../Images/a9e4a3da23633229ed6a4034f5d70e66.jpg)
    (where we are dealing with an n by n matrix).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个因子已经是一个次数为![](../Images/a9e4a3da23633229ed6a4034f5d70e66.jpg)的多项式了（我们在处理一个n乘n的矩阵）。
- en: And what is the degree of our VanderMonde determinant as a polynomial?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们的范德蒙德行列式作为一个多项式的次数是多少？
- en: Well, it is the sum of entries, each one of which has one factor from each column.
    Thus, as a polynomial, it has degrees 0 + 1 + ... + n - 1, which is ![](../Images/a9e4a3da23633229ed6a4034f5d70e66.jpg).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，它是条目的总和，每个条目都有每列的一个因子。因此，作为一个多项式，它的次数是0 + 1 + ... + n - 1，即![](../Images/a9e4a3da23633229ed6a4034f5d70e66.jpg)。
- en: And so, since we have seen that our determinant must have a factor of this degree,
    we have already evaluated our determinant as a polynomial, up to a constant factor.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，由于我们已经看到我们的行列式必须有这个次数的一个因子，我们已经将我们的行列式评估为一个多项式，直到一个常数因子。
- en: 'And what is that constant? We can check it by looking at the main diagonal
    term: which is'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那么那个常数是什么呢？我们可以通过查看主对角线项来检查它：即
- en: x[1]⁰x[2]¹x[3]²...x[n]^(n-1)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: x[1]⁰x[2]¹x[3]²...x[n]^(n-1)
- en: and this is exactly what you get if you take the first (positive) terms in each
    factor of our product above.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们从上述乘积的每个因子中取出第一个（正的）项所得到的。
- en: Since these two terms have the same coefficient, 1, in both the determinant
    and the product, the product is the determinant, and that is our answer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这两项在行列式和乘积中具有相同的系数1，因此乘积就是行列式，这就是我们的答案。
- en: In our example, we can deduce immediately that the determinant is 2*1*1, or
    2.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们可以立即推断出行列式是2*1*1，即2。
- en: '2 Another Easy Case: Cauchy''s Determinant'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 另一个简单的例子：柯西行列式
- en: Suppose we want the determinant of a matrix whose (j, k) entry is ![](../Images/ef08a37d5d1a2fa0c4adf099d477b95b.jpg)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要一个矩阵的行列式，其（j，k）项是！[](../Images/ef08a37d5d1a2fa0c4adf099d477b95b.jpg)
- en: 'Here is an example: for the x values 1, 2, 4 and y values 1, 2, 3'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：对于x值1、2、4和y值1、2、3
- en: '![](../Images/86569363f4ff6f687e3d398c37c9b4f5.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/86569363f4ff6f687e3d398c37c9b4f5.jpg)'
- en: Now we don't have a polynomial, but rather have a rational function of our variables.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们没有一个多项式，而是有一个关于我们变量的有理函数。
- en: What do we do? We make it into a polynomial by factoring out all the denominators!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们该怎么办？我们通过因式分解所有分母将其变成一个多项式！
- en: Again, by the way, we know that it will be 0 if any two x variables are the
    same, or if any two y variables are the same since that would make two rows or
    columns identical.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们知道，如果任何两个x变量相同，或者任何两个y变量相同，它将为0，因为这将使两行或两列相同。
- en: Thus, it must have factors of ![](../Images/2355580d2b919547609518c0f8d9bca0.jpg)
    in the numerator.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它必须在分子中有![](../Images/2355580d2b919547609518c0f8d9bca0.jpg)的因子。
- en: There is a product once for each pair with the larger index first.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每对索引较大的变量都有一个乘积。
- en: In the denominator we will have ![](../Images/cb5887dcb32afa46d664804b43f4679d.jpg)
    for every pair of variables.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在分母中，对于每一对变量，我们将有![](../Images/cb5887dcb32afa46d664804b43f4679d.jpg)。
- en: Notice that the numerator has already degree n(n - 1) in our variables and the
    denominator has degree n², which is n more than the that of the numerator.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，分子在我们的变量中已经有n(n - 1)次，而分母有n²次，比分子的次数多n。
- en: This is also true of the determinant, all of whose terms are products of n factors,
    each having one term in the denominator and none in the numerator, for a net excess
    of n in the denominator.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 行列式也是如此，其所有项都是n个因子的乘积，每个因子在分母中有一个项，在分子中没有，因此分母中有n个多余的项。
- en: In fact the formula we have so far
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，到目前为止我们有的公式
- en: '![](../Images/4510acae1839b1f9a2d9d629c68d0151.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4510acae1839b1f9a2d9d629c68d0151.jpg)'
- en: where the first two products are over variable pairs with the first variable
    having greater index, while the product in the denominator is over all pairs,
    is the determinant we seek.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个乘积是变量对，第一个变量具有更大索引，而分母中的乘积是所有对，这就是我们要找的行列式。
- en: We can verify this by setting x[j] = -y[j], in which case the terms in the products
    in the numerator become the off diagonal terms in the matrix, and these cancel
    with similar terms in the denominator, and we are left with ![](../Images/d6dc10150640ffdb10b14b66b8de21d8.jpg)
    in the denominator, exactly what we get from the diagonal term in the determinant.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过设置x[j] = -y[j]来验证这一点，在这种情况下，分子中的乘积项变为矩阵中的非对角线项，并且这些与分母中的类似项相互抵消，我们最终得到分母中的![](../Images/d6dc10150640ffdb10b14b66b8de21d8.jpg)，正是我们从行列式的对角线项中得到的。
- en: In our example, we can deduct that our determinant is ![](../Images/c0a20d41245db029098a2a0d6ece88cb.jpg)
    (which includes all the denominators except for a factor of 12 which cancels with
    the numerator).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们可以推断我们的行列式为![](../Images/c0a20d41245db029098a2a0d6ece88cb.jpg)（其中包括除了与分子相消的一个因子12之外的所有分母）。
- en: '**Exercise B.1 There is one more famous example, which we give you as an exercise:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习B.1 还有一个更有名的例子，我们给你作为练习：'
- en: Consider a matrix whose (j, k) element is x[j] if j > k, and y[j] otherwise.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个矩阵，其(j, k)元素为x[j]，如果j > k，则为y[j]。
- en: For a 3 by 3 matrix this looks like**
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个3x3矩阵，这看起来像**
- en: '**![](../Images/4df550372dc2f2e56b9f1e1c83d5ed9e.jpg)**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](../Images/4df550372dc2f2e56b9f1e1c83d5ed9e.jpg)**'
- en: '**Find a formula for its determinant. (Notice that it is a polynomial, of what
    degree? in these variables. When will it be 0? You can read off the answer from
    your answer to these questions.)**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**找出它的行列式公式。（注意它是一个多项式，是几次多项式？在这些变量中什么时候为0？你可以从这些问题的答案中得出答案。）**'
- en: For example, consider the matrix
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑矩阵
- en: '![](../Images/cc19a4422a8631d6595c00b51f389920.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc19a4422a8631d6595c00b51f389920.jpg)'
- en: You can immediately deduce that its determinant is 6*4*3 or 72.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以立即推断其行列式为6*4*3或72。
- en: 3 Lewis Carroll's Theorem
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3 路易斯·卡罗尔定理
- en: The formula for a determinant of a matrix in two dimensions
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 二维矩阵行列式的公式
- en: '![](../Images/ee8568195dab9f94c46b94172e888229.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ee8568195dab9f94c46b94172e888229.jpg)'
- en: is
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 是
- en: a[11]*a[22] - a[12]*a[21]
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: a[11]*a[22] - a[12]*a[21]
- en: Charles Dodgson (Lewis Carroll, author of Alice in Wonderland) found an analog
    of this formula in every dimension.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 查尔斯·道奇森（路易斯·卡罗尔，《爱丽丝梦游仙境》的作者）在每个维度中找到了这个公式的类似物。
- en: 'We introduce the following notation: let **A[i,j] be the determinant of the
    matrix obtained from A by removing its i-th row and j-th column. If we omit two
    rows and corresponding columns let A[ij,ij] be the determinant of what is left,**
    which in the two dimensional case is nothing (whose determinant we define to be
    1).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入以下符号：让**A[i,j]是从A中去除其i-th行和j-th列后获得的矩阵的行列式。如果我们省略两行和相应的列，则让A[ij,ij]是剩下的部分的行列式，这在二维情况下什么都没有（其行列式我们定义为1）。**
- en: Then for a two dimensional matrix, A, as above, we have A[2,2] = a[11], A[1,2]
    = a[21] and so on.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对于一个二维矩阵A，如上所述，我们有A[2,2] = a[11]，A[1,2] = a[21]等等。
- en: Our two dimensional formula above can then be written as
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面的二维公式可以写成
- en: (Det A) A[jk,jk] = A[kk]A[jj] - A[jk]A[kj]
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: (Det A) A[jk,jk] = A[kk]A[jj] - A[jk]A[kj]
- en: (Remember that the factor A[ij,ij] was defined to be 1 in this case.)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: (请记住，在这种情况下，因子A[ij,ij]被定义为1。)
- en: It is this formula that Dodgson generalized. He noticed, and proved that if
    you pick any two distinct indices (say j and k) for an n by n matrix, you get
    the same result
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这个公式是多次公式。他注意到，并证明，如果你选取任意两个不同的指标（比如 j 和 k）用于一个 n x n 矩阵，你会得到相同的结果
- en: (Det A) A[jk,jk] = A[kk]A[jj] - A[jk]A[kj]
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: (Det A) A[jk,jk] = A[kk]A[jj] - A[jk]A[kj]
- en: This formula on dividing by A[jk,jk], gives an n by n determinant in terms of
    determinants of smaller size.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个公式除以A[jk,jk]，给出了一个n乘n的行列式，其用更小尺寸的行列式来表示。
- en: Thus it can be used as a recursive definition of the determinant. (If you define
    the 0 by 0 determinant to be 1, and the 1 by 1 determinant of a number to be itself,
    you can use this definition to define all higher dimensional determinants, as
    long as A[jk,jk] is not 0.)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此它可以用行列式的递归定义来使用。（如果你把0乘0的行列式定义为1，把一个数字的1乘1的行列式定义为它本身，你可以使用这个定义来定义所有更高维度的行列式，只要A[jk,jk]不为0。）
- en: '**Exercise B.2 Verify the correctness of this claim for 3 by 3 matrices by
    working out a general example.**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 B.2 通过解决一个一般性的例子来验证3x3矩阵的正确性。**'
- en: '**Not only can you define the determinant this way, but you can compute it
    efficiently and with incredible ease on a spreadsheet using it.**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**不仅可以这样定义行列式，而且还可以使用电子表格高效地和不可思议地计算它。**'
- en: I call the algorithm for doing this **the Mad Hatter's Algorithm.** It is wonderfully
    efficient, but has a problem.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我把用于做这个的算法称为**疯帽子算法**。它非常高效，但有一个问题。
- en: '**What is the algorithm?**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**算法是什么？**'
- en: We build up the determinants of **all submatrices consisting of consecutive
    rows and columns.**
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建**由连续的行和列组成的所有子矩阵的行列式。**
- en: The matrix itself is the matrix of one by one determinants. There are n² of
    these.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵本身是一个一个行列式的矩阵。这些有n²个。
- en: From these we compute the (n - 1)² two by two consecutive row and column sub-determinants
    using the ordinary 2D determinant formula in Dodson's form.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些中，我们使用Dodson形式中的普通二维行列式公式计算(n - 1)²个2x2连续的行和列子行列式。
- en: And using the same rule, namely
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用同样的规则，即
- en: '![](../Images/012cf88e726dfcad496fbea76a347a0f.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/012cf88e726dfcad496fbea76a347a0f.jpg)'
- en: we compute all the (n-2)² 3 by 3 consecutive row and column sub-determinants
    from the 2 by 2's and 1 by 1's;
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算所有(n-2)²个3x3连续的行和列子行列式，从2x2和1x1的开始；
- en: and continue until we have the 4 n-1 by n-1 consecutive row and column sub-determinants,
    and finally the one full determinant.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 并继续，直到我们有4个n-1乘n-1连续的行和列子行列式，最后一个完整的行列式。
- en: This sounds like a huge project but if we start with **a square patch of 1's
    to represent the 0 by 0 determinants,** and then **enter our matrix** beneath
    it, **we can do everything with one instruction copied below our matrix and down.**
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来像一个巨大的项目，但如果我们从**一个1的方形块开始表示0乘0的行列式**，然后**在它下面输入我们的矩阵**，**我们可以用一个复制到我们的矩阵下方和下方的指令来完成所有工作。**
- en: Suppose, **for example,** we insert 1 in box a2 and copy it into the rectangle
    with corners a2 and j10, and enter our matrix with upper left corner in a11.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，**例如**，我们在方框a2中插入1，并将其复制到以a2和j10为角的矩形中，并在以a11为左上角的矩阵中输入。
- en: (Its extremely boring to enter a 10 by 10 matrix. I advise trying 4 by 4 or
    5 by 5 or maybe even 3 by 3\. If you want to go beyond 10 by 10 you will need
    more 1's at the top.)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: (输入一个10x10矩阵非常无聊。我建议尝试4x4或5x5甚至3x3。如果你想超过10x10，你需要在顶部添加更多的1。)
- en: Now in box a21 enter =(a11*b12-a12*b11)/b2
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在方框a21中输入=(a11*b12-a12*b11)/b2
- en: And copy it down and across into the rectangle with corners a21 and i110.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其复制到以a21和i110为角的矩形内。
- en: '**If your determinant is j by j, it should appear magically in the box in column
    a and row 10j+1.**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你的行列式是j乘j的，它应该神奇地出现在第a列和第10j+1行的框中。**'
- en: '**Not only that,**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**不仅如此，**'
- en: If you extend your **j by j matrix by copying the first j-1 rows after it, and
    then copying the first j-1 columns to its right,** the j by j box with upper left
    corner in column b and row 9j+2 will be **the cofactor matrix if j is odd,** and
    **the cofactor matrix with alternating signs reversed if j is even.**
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将**j乘j矩阵扩展到其后复制了前j-1行，然后将前j-1列复制到其右边**，以b列和第9j+2行为左上角的j乘j框将是**当j为奇数时的余子式矩阵**，**当j为偶数时的交替符号反转的余子式矩阵。**
- en: '**Does this really work?**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**这真的有效吗？**'
- en: If your matrix is ugly enough, it will work. That is if it has no entries that
    are 0, and none of the relevant sub-determinants that you divide by are 0, it
    will work. But if you divide by 0 in forming your answer it will fail.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的矩阵足够丑陋，它就会奏效。也就是说，如果它没有任何0的条目，并且你在形成答案时所除的相关子行列式都不为0，那么它就会奏效。但是如果你在形成答案时除以0，它就会失败。
- en: '**Will this happen?**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**这会发生吗？**'
- en: For a three by three matrix M it will only happen if the middle element, m[22],
    is 0.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个三乘三矩阵M，只有当中间元素m[22]为0时才会发生。
- en: If you have copied its first two rows to the right, it will only fail all three
    times, (you will have potential answers in a31, b31 and c31) only if the middle
    row consists entirely of zeroes, in which case the determinant is 0.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经将它的前两行复制到右边，它将只在所有三次尝试中失败（你将在a31、b31和c31中得到潜在答案），只有当中间行完全由零组成时，行列式才为0。
- en: 'For a four by four matrix, you will fail if any of the middle elements: m[22],
    m[23], m[32], m[33] are 0 or if their determinant is 0; and so on.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个四乘四的矩阵，如果中间元素m[22]、m[23]、m[32]、m[33]中的任何一个为0，或者它们的行列式为0，则会失败；等等。
- en: '**Can we make it really work?**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们能使它真正起作用吗？**'
- en: Yes! But it requires doing something, which is not so slick.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！但这需要做一些事情，这并不那么巧妙。
- en: '**Do what?**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**做什么？**'
- en: I am not sure what the best thing to do is. One thing that will usually work
    is to replace the zeroes of your matrix (and any later 0's that turn up in subdeterminants)
    by something very small, and then you can let that very small thing go to 0.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定该做什么是最好的。通常有效的一件事是用非常小的东西替换矩阵的零（以及在子行列式中出现的任何后续的0），然后你可以让那个非常小的东西趋向于0。
- en: For example you can put a tiny number like 10^(-8) in b1, keep a row index j
    and column index k and add $b$1*(j+k+1) to the original matrix. With luck this
    will eliminate all zeroes and everything should work.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以在b1中放入一个像10^(-8)这样的微小数，保持一个行索引j和列索引k，并将$ b$1*(j+k+1)添加到原始矩阵中。有了运气，这将消除所有的零，一切都应该正常工作。
- en: Of course your answer will be slightly off. Then you can round your answer or
    change what is in b1 to figure out the answer (You can probably think of something
    better to do).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你的答案会略有偏差。然后你可以四舍五入你的答案或者改变b1中的内容来找出答案（你可能想到更好的办法）。
- en: The suggestion above will eliminate 0's from your original matrix, but others
    may pop up in sub-determinants, though this should happen rarely. If you worry
    about this you should replace the basic instruction by
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的建议会消除你原始矩阵中的0，但其他0可能会出现在子行列式中，尽管这种情况应该很少发生。如果你担心这一点，你应该用以下基本指令替换
- en: '**=if( a11*b12=a12*b11, $b$1, (a11*b12-a12*b11)/b2))**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**=if( a11*b12=a12*b11, $b$1, (a11*b12-a12*b11)/b2))**'
- en: None of your friends will believe you can evaluate determinants so neatly, and
    they will not discover the divide by 0 flaw if you goad them to enter a matrix
    as ugly as they can make it. It will then not have annoying zeroes to divide by.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你的朋友们都不会相信你能如此整洁地评估行列式，如果你激励他们输入尽可能丑陋的矩阵，他们也不会发现除以0的缺陷。然后它就不会有让人讨厌的零来除。
- en: On the other hand you have the power to make the na?ve algorithm fail by creating
    a matrix for which the method will divide by 0.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，你有能力通过创建一个方法将要除以0的矩阵来使朴素的算法失败。
- en: '**Exercise B.3 Set this up and get it to work and get the cofactor matrix for
    a 4 by 4 matrix using it.**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习B.3 设置这个并让它起作用，并使用它得到一个4乘4矩阵的余子式矩阵。**'
- en: '**If you only want to evaluate 3 by 3 matrices and cross products, the set
    up is much simpler.**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你只想评估3乘3的矩阵和叉乘，那么设置就简单得多。**'
- en: '**Here it is**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**就是这样**'
- en: Step 1
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤1
- en: '**Enter 1** in each of b1, b2, c1, c2, d1,d2, e1, e2 (this can be done by entering
    1 in b1 and copying to the rest).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在b1、b2、c1、c2、d1、d2、e1、e2中输入1（可以通过在b1中输入1然后复制到其余部分来完成）。
- en: Step 2
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤2
- en: '**Enter your matrix** in a3 a4 a5, b3 b4 b5 and c3 c4 and c5 or enter the two
    vectors you want the cross product of in a3 b3 c3 and a4 b4 and c4 (anything can
    be in the 5-th row).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**在a3 a4 a5, b3 b4 b5 和 c3 c4 c5中输入你的矩阵**，或者在a3 b3 c3 和 a4 b4 c4中输入你想要进行叉乘的两个向量（第5行可以是任意内容）。'
- en: Step 3
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤3
- en: '**Put =a3** in d3 and copy it to d3 d4 e3 and e4.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**在d3中输入 =a3**，然后将其复制到d3、d4、e3 和 e4。'
- en: Step 4
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤4
- en: '**Put = (a3*b4-a4*b3)/b1** in a6 and copy it into a6 to d6 a7 to d7 a8 to d8
    a9 to d9.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**在a6中输入 = (a3*b4-a4*b3)/b1**，然后将其复制到a6 到 d6、a7 到 d7、a8 到 d8、a9 到 d9。'
- en: '**The cross product will appear in b6 c6 d6.**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**叉乘结果将出现在b6、c6 和 d6中。**'
- en: And the **determinant in one or all of a9 b9 and c9.**
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 并且在a9、b9 和 c9中的一个或全部中计算行列式。
- en: If no number appears then the determinant is 0.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有数字出现，则行列式为0。
- en: By the way, **if the determinant is 0,** then (b7, c7, d7) and (b6, c6, d6)
    if not all zeroes are **column eigenvectors** of your matrix, with **eigenvalue**
    0.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，**如果行列式为0**，那么(b7, c7, d7) 和 (b6, c6, d6)如果不全为零，则是你的矩阵的**列特征向量**，对应的**特征值**为0。
- en: If you ever have to evaluate cross products or determinants, checking your answers
    using this method is a very good idea.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要计算叉乘或行列式，用这种方法检查答案是一个很好的主意。
