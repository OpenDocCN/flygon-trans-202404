- en: Intro to Racket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notice that in the previous page, there was little mention of [programming languages](http://en.wikipedia.org/wiki/Programming_language).
    That's because in the grand scheme of things, programming languages don't matter.
    They only matter because, for any given problem, one language might let us solve
    the problem in fewer lines of code over another, or one language might let us
    solve the problem more efficiently, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: What of the problem of teaching computer science? Which language should we use
    for that? We have chosen Racket, a dialect of [Lisp](http://en.wikipedia.org/wiki/Lisp_programming_language).
    We'll show basics of the language today, after which you can start thinking about
    computer science. As you learn more computer science, we'll incrementally show
    you more of the language.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Racket, parentheses (also known as *parens*) matter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you ask a procedure to perform its action, you *call* it. This is also
    called *invoking* a procedure. Whenever you invoke a procedure, you must wrap
    the procedure call (the call to the procedure) in a set of parentheses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Everytime we invoke a procedure, we must follow **prefix notation**: the name
    of the procedure we''re invoking is always the leftmost item in the parentheses.
    All of the other things are *arguments* to that procedure—things we feed in to
    the procedure in order to get our answer.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s an example of an expression that demonstrates the three rules above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we're feeding the arguments `1` and `2` into the procedure
    `+`, which adds numbers. We should expect the answer to be 3.
  prefs: []
  type: TYPE_NORMAL
- en: The Racket Interpreter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course, a language is no good if no one speaks it. For programming languages,
    the dialog is usually between the programmer and a computer. An **interpreter**
    is a program that translates a particular language into actions and computations
    that the computer performs. Interpreters are one way to make computers do things,
    such as computing large prime numbers or counting all the distinct words used
    in all of Shakespeare's plays.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start our Racket interpreter. We do this by opening a terminal and then
    typing in `racket` and hitting Enter. You've just started the Racket interpreter!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now type Racket expressions for the interpreter to evaluate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What Will Racket Output?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Type each example below into the interpreter to try it out. Before entering
    each example, take a moment and think about what the output should be. Some of
    these examples cause errors—why do they do that? (If something errors, the interpreter
    will output an error message.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Takeaways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned the basics of Racket. We also tried our hands at
    the Racket interpreter.
  prefs: []
  type: TYPE_NORMAL
