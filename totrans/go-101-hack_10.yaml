- en: Prepend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prepend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '`Go` has a built-in [append](https://golang.org/pkg/builtin/#append) function
    which add elements in the slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'But how if we want to the "prepend" effect? Maybe we should use `copy` function.
    E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'But the above code looks ugly and cumbersome, so an elegant implementation
    maybe here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'BTW, I also have tried to write a "general-purpose" prepend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: But since `[]T` can't convert to an `[]interface{}` directly (please refer [https://golang.org/doc/faq#convert_slice_of_interface](https://golang.org/doc/faq#convert_slice_of_interface),
    it is just a toy, not useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Go â€“ append/prepend item into slice](https://codingair.wordpress.com/2014/07/18/go-appendprepend-item-into-slice/).'
  prefs: []
  type: TYPE_NORMAL
