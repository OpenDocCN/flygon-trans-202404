- en: Threads, Processes, and Dispatching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lecture Notes for CS 140
  prefs: []
  type: TYPE_NORMAL
- en: Spring 2014
  prefs: []
  type: TYPE_NORMAL
- en: John Ousterhout
  prefs: []
  type: TYPE_NORMAL
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    Chapter 4.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threads and Processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Thread: a sequential execution stream'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executes a series of instructions in order (only one thing happens at a time).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Process: one or more threads, along with their execution state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Execution state: everything that can affect, or be affected by, a thread:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Code, data, registers, call stack, open files, network connections, time of
    day, etc.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Part of the process state is private to a thread
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Part is shared among all threads in the process
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Evolution of operating system process model:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Early operating systems supported a single process with a single thread at a
    time (*single tasking*). They ran batch jobs (one user at a time).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Some early personal computer operating systems used single-tasking (e.g. MS-DOS),
    but these systems are almost unheard of today.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By late 1970''s most operating systems were *multitasking* systems: they supported
    multiple processes, but each process had only a single thread.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the 1990''s most systems converted to *multithreading*: multiple threads
    within each process.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Is a process the same as a program?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dispatching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Almost all computers today can execute multiple threads simultaneously:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each processor chip typically contains multiple *cores*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each core contains a complete CPU capable of executing threads
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Many modern processors support *hyperthreading*: each physical core behaves
    as if it is actually two cores, so it can run two threads simultaneously (e.g.
    execute one thread while the other is waiting on a cache miss).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, a server might contain 2 Intel Xeon E5-2670 processors, each with
    8 cores that supports 2-way hyperthreading. Overall, this computer can run 32
    threads simultaneously.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: May have more threads than cores
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: At any given time, most threads do not need to execute (they are waiting for
    something).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OS uses a *process control block* to keep track of each process:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution state for each thread (saved registers, etc.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduling information
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about memory used by this process
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about open files
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Accounting and other miscellaneous information
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At any given time a thread is in one of 3 states:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blocked: waiting for an event (disk I/O, incoming network packet, etc.)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ready: waiting for CPU time'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dispatcher*: innermost portion of the OS that runs on each core:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run a thread for a while
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Save its state
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Load state of another thread
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run it ...
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Context switch*: changing the thread currently running on a core by first
    saving the state of the old process, then loading the state of the new thread.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: the dispatcher is not itself a thread!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Core can only do one thing at a time. If a thread is executing, dispatcher
    isn''t: OS has lost control. How does OS regain control of core?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Traps (events occurring in current thread that cause a change of control into
    the operating system):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System call.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Error (illegal instruction, addressing violation, etc.).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Page fault.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interrupts (events occurring outside the current thread that cause a state
    switch into the operating system):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Character typed at keyboard.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Completion of disk operation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Timer: to make sure OS eventually gets control.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How does dispatcher decide which thread to run next?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plan 0: search process table from front, run first ready thread.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plan 1: link together the ready threads into a queue. Dispatcher grabs first
    thread from the queue. When threads become ready, insert at back of queue.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plan 2: give each thread a priority, organize the queue according to priority.
    Or, perhaps have multiple queues, one for each priority class.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Process Creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How the operating system creates a process:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load code and data into memory.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and initialize process control block.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create first thread with call stack.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide initial values for "saved state" for the thread
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make thread known to dispatcher; dispatcher "resumes" to start of new program.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'System calls for process creation in UNIX:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fork makes copy of current process, with one thread.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: exec replaces memory with code and data from a given executable file. Doesn't
    return ("returns" to starting point of new program).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: waitpid waits for a given process to exit.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Advantage: can modify process state before calling exec (e.g. change environment,
    open files).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Disadvantage: wasted work (most of forked state gets thrown away).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'System calls for process creation in Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CreateProcess combines fork and exec
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Must pass arguments for any state changes between parent and child.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Process creation in Pintos: exec combines UNIX fork and exec.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
