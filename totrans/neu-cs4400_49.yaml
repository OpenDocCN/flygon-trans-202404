- en: Lambda Calculus — SchlacTuesday, February 14th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda 演算 —— SchlacTuesday，February 14th
- en: '[PLAI §22](plai.pdf#chapter.22 "Shrinking the Language") (we do much more)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §22](plai.pdf#chapter.22 "缩减语言")（我们做的远不止如此）'
- en: We know that many constructs that are usually thought of as primitives are not
    really needed — we can implement them ourselves given enough tools. The question
    is how far can we go?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，许多通常被认为是原语的构造实际上是不需要的——只要给予足够的工具，我们就可以自己实现它们。问题是我们能走多远？
- en: 'The answer: as far as we want. For example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 答案：我们可以走得很远。例如：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We begin with a very minimal language, which is based on the Lambda Calculus.
    In this language we get a very minimal set of constructs and values.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个非常基本的语言开始，这个语言基于 Lambda 演算。在这种语言中，我们获得了一组非常基本的构造和值。
- en: 'In DrRacket, this we will use the Schlac language level (stands for “~~Scheme~~Racket
    as Lambda Calculus”). This language has a Racket-like syntax, but don’t be confused
    — it is *very* different from Racket. The only constructs that are available in
    this language are: lambda expressions of at least one argument, function application
    (again, at least one argument), and simple definition forms which are similar
    to the ones in the “Broken define” language — definitions are used as shorthand,
    and cannot be used for recursive function definition. They’re also only allowed
    at the toplevel — no local helpers, and a definition is not an expression that
    can appear anywhere. The BNF is therefore:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DrRacket 中，我们将使用 Schlac 语言级别（代表“~~Scheme~~Racket 作为 Lambda 演算”）。这种语言具有类似 Racket
    的语法，但不要混淆——它与 Racket *非常* 不同。此语言中唯一可用的构造是：至少具有一个参数的 lambda 表达式、函数应用（同样，至少有一个参数）和类似于“破损的定义”语言中的简单定义形式——定义用作简写，不能用于递归函数定义。它们也只允许在顶层使用——没有本地助手，并且定义不是可以出现在任何地方的表达式。因此，BNF
    是：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since this language has no primitive values (other than functions), Racket numbers
    and booleans are also considered identifiers, and have no built-in value that
    come with the language. In addition, all functions and function calls are curried,
    so
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此语言没有原始值（除了函数之外），Racket 数字和布尔值也被视为标识符，并且没有随语言一起提供的内置值。此外，所有函数和函数调用都是柯里化的，所以
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: is actually shorthand for
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上是上述的简写形式
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The rules for evaluation are simple, there is one very important rule for evaluation
    which is called “beta reduction”:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 评估规则很简单，其中有一个非常重要的评估规则称为“β-还原”：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: where substitution in this context requires being careful so you won’t capture
    names. This requires you to be able to do another kind of transformation which
    is called “alpha conversion”, which basically says that you can rename identifiers
    as long as you keep the same binding structure (eg, a valid renaming does not
    change the de-Bruijn form of the expression). There is one more rule that can
    be used, *eta conversion* which says that `(lambda (x) (f x))` is the same as
    `f` (we used this rule above when deriving the Y combinator).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，替换需要小心，以免捕获名称。这要求你能够进行另一种称为“α-转换”的转换，它基本上表示你可以重命名标识符，只要保持相同的绑定结构（例如，有效的重命名不会改变表达式的
    de-Bruijn 形式）。还有一条可以使用的规则，*eta 转换*，它表示 `(lambda (x) (f x))` 与 `f` 相同（我们在推导 Y 组合子时使用了这个规则）。
- en: One last difference between Schlac and Racket is that Schlac is a *lazy* language.
    This will be important since we do not have any built-in special forms like `if`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Schlac 和 Racket 之间的最后一个区别是 Schlac 是一个 *惰性* 语言。这一点很重要，因为我们没有像 `if` 这样的内置特殊形式。
- en: 'Here is a Schlac definition for the identity function:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对恒等函数的 Schlac 定义：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'and there is not much that we can do with this now:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对此无能为力：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: (In the last expression, note that `(id id id)` is shorthand for `((id id) id)`,
    and since `(id id)` is the identity, applying that on `id` returns it again.)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: （在最后一个表达式中，请注意 `(id id id)` 是 `(（id id）id)` 的简写，而且由于 `(id id)` 是恒等函数，将其应用于 `id`
    再次返回它。）
