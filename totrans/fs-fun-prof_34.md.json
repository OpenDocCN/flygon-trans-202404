["```\npublic static class SumOfSquaresHelper\n{\n   public static int Square(int i) {\n      return i * i;\n   }\n\n   public static int SumOfSquares(int n) {\n      int sum = 0;\n      for (int i = 1; i <= n; i++)\n      {\n         sum += Square(i);\n      }\n      return sum;\n   }\n} \n```", "```\nlet square x = x * x\nlet sumOfSquares n = [1..n] |> List.map square |> List.sum \n```", "```\npublic class Squarer\n{\n    public int Square(int input) {\n        var result = input * input;\n        return result;\n    }\n\n    public void PrintSquare(int input) {\n        var result = this.Square(input);\n        Console.WriteLine(\"Input={0}. Result={1}\", input, result);\n    }\n} \n```", "```\ntype Squarer() =  \n\n    let Square input = \n        let result = input * input\n        result\n\n    let PrintSquare input = \n        let result = Square input\n        printf \"Input=%i. Result=%i\" input result \n```", "```\nlet GroupBy source keySelector = \n    ... \n```", "```\npublic IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(\n    IEnumerable<TSource> source,\n    Func<TSource, TKey> keySelector\n    )\n    ... \n```", "```\nvoid someMethod(SomeClass x) {\n    if (x == null) { throw new NullArgumentException(); }\n\n    x.doSomething();\n} \n```", "```\nss=: +/ @: *: \n```"]