- en: More Exercises for Partner A
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多给 A 伙伴的练习
- en: '`adv.scm` includes a definition of the class `thief`, a subclass of person.
    A `thief` is a character who tries to steal food from other people. Of course,
    Berkeley can not tolerate this behavior for long. Your job is to define a `police`
    class; `police` objects catch `thieves` and send them directly to `jail`. To do
    this you will need to understand how `thiefs` work.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`adv.scm`包括`thief`类的定义，它是`person`的子类。`thief`是一个试图从其他人那里偷食物的角色。当然，伯克利不能容忍这种行为太久。你的任务是定义一个`police`类；`police`对象抓住`thieves`并直接送他们进`jail`。为此，你需要了解`thiefs`的工作原理。'
- en: Since a `thief` is a kind of `person`, whenever another `person` enters the
    place where the `thief` is, the `thief` gets a `notice` message from the place.
    When the `thief` notices a new person, he does one of two things, depending on
    the state of his internal `behavior` variable. If this variable is set to `steal`,
    the thief looks around to see if there is any food at the place. If there is food,
    the thief takes the food from its current possessor and sets his behavior to `run`.
    When the thief's behavior is `run`, he moves to a new random place whenever he
    `notice`s someone entering his current location. The `run` behavior makes it hard
    to catch a thief.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`thief`是`person`的一种，每当另一个`person`进入`thief`所在的地方时，`thief`会从地方收到一个`notice`消息。当`thief`注意到一个新的人时，根据他内部`behavior`变量的状态，他会做两件事中的一件。如果这个变量设置为`steal`，小偷会四处查看是否有食物。如果有食物，小偷会从当前持有者那里拿走食物，并将他的行为设置为`run`。当小偷的行为是`run`时，他会在`notice`到有人进入他当前位置时随机移动到一个新的地方。`run`行为使得抓住小偷变得困难。
- en: Notice that a `thief` object delegates many messages to its `person` object.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一个`thief`对象将许多消息委托给它的`person`对象。
- en: 'Question A6: Part 1'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 A6：第一部分
- en: To help the police do their work, you will need to create a place called `jail`
    (i.e., a `jail` is an instantiation of `place`). Jail has no exits. Moreover,
    you will need to create a method for persons and thieves called `go- directly-to`.
    `go-directly-to` does not require that the `new-place` be adjacent to the `current-place`.
    So by calling `(ask thief 'go-directly-to jail)`, the police can send the thief
    to jail no matter where the thief currently is located, assuming the variable
    `thief` is bound to the thief being apprehended.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助警察开展工作，你需要创建一个名为`jail`的地方（即，`jail`是`place`的一个实例）。Jail 没有出口。此外，你需要为人和小偷创建一个名为`go-directly-to`的方法。`go-directly-to`不要求`new-place`与`current-place`相邻。因此，通过调用`(ask
    thief 'go-directly-to jail)`，警察可以将小偷送进监狱，无论小偷当前位于何处，假设变量`thief`绑定到被逮捕的小偷。
- en: 'Question A6: Part 2'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 A6：第二部分
- en: Thieves sometimes try to leave their place in a randomly chosen direction. This,
    it turns out, won't work if there are no exits from that place -- for example,
    the `jail`. Modify the`thief` class so that a `thief` won't try to leave a place
    with no exits.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 小偷有时会尝试朝随机选择的方向离开他们所在的地方。事实证明，如果那个地方没有出口，比如`jail`，这样做是行不通的。修改`thief`类，使得小偷不会尝试离开没有出口的地方。
- en: Combining Work
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合工作
- en: Before moving on, get your partner to explain Question B6 and its solution.
    Also, explain Question A6 and its solution to your partner.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请让你的伙伴解释问题 B6 及其解决方案。同时，向你的伙伴解释问题 A6 及其解决方案。
- en: 'Question A7: Part 1'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 A7：第一部分
- en: We are now going to invent restaurant objects. People will interact with the
    restaurants by buying food there. First we have to make it possible for people
    to buy stuff. Give `person` objects a `money` property, which is a number, saying
    how many dollars they have. Note that `money` is not an object. We implement it
    as a number because, unlike the case of objects such as chairs and potstickers,
    a person needs to be able to spend *some* money without giving up all of it. In
    principle we could have objects like `quarter` and `dollar-bill`, but this would
    make the change-making process complicated for no good reason.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要创造餐厅对象。人们将通过在那里购买食物与餐厅互动。首先，我们必须让人们能够购买东西。给`person`对象一个`money`属性，这是一个数字，表示他们有��少美元。请注意，`money`不是一个对象。我们将其实现为一个数字，因为与椅子和锅贴等对象不同，一个人需要能够花一些钱而不是全部。原则上，我们可以有像`quarter`和`dollar-bill`这样的对象，但这会使找零过程变得复杂，没有充分的理由。
- en: To make life simple, we'll have every `person` start out with `$100`. (We should
    really start people with no money, and invent banks and jobs and so on, but we
    won't.) Create two methods for people, `get-money` and `pay-money`, each of which
    takes a number as argument and updates the person's `money` value appropriately.
    `Pay-money` must return `true` or `false` depending on whether the person had
    enough money.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化生活，我们让每个`person`从`$100`开始。（其实我们应该让人们一无所有，然后再发明银行、工作等等，但我们不会这样做。）为人们创建两个方法，`get-money`和`pay-money`，每个方法都接受一个数字作为参数，并适当更新人的`money`值。`Pay-money`必须根据人是否有足够的钱返回`true`或`false`。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Question A7: Part 2'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题A7：第2部分
- en: Another problem with the adventure game is that Noah's only has one bagel. Once
    someone has taken that bagel, they're out of business. The same goes with other
    restaurants.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 冒险游戏的另一个问题是，诺亚家只有一个百吉饼。一旦有人拿走了那个百吉饼，他们就破产了。其他餐厅也是一样。
- en: 'To fix this, we''re going to invent a new kind of place, called a `restaurant`.
    (That is, `restaurant` is a subclass of `place`.) Each `restaurant` serves only
    one kind of food. (This is a simplification, of course, and it''s easy to see
    how we might extend the project to allow lists of kinds of food.) When a `restaurant`
    is instantiated, it should have two extra arguments, besides the ones that all
    places have: the class of food objects that this restaurant sells, and the price
    of one item of this type:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将发明一种新类型的地方，称为`restaurant`。（也就是说，`restaurant`是`place`的子类。）每个`restaurant`只提供一种食物。（当然，这是一个简化，当然，我们可以看到如何扩展项目以允许食物种类的列表。）当实例化一个`restaurant`时，除了所有地方都有的参数外，它还应该有两个额外的参数：这家餐厅销售的食品对象类别，以及这种类型的一个物品的价格：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that the argument to the restaurant is a *class*, not a particular bagel
    (instance). Here is an example of the Pasta food class. Your partner should have
    defined some example of food classes as part of Question B6.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，餐厅的参数是一个*class*，而不是一个特定的百吉饼（实例）。这里是意大利面食品类的一个例子。你的伙伴应该在问题B6的一部分中定义了一些食品类的示例。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Restaurants should have two methods. The `menu` method returns a list containing
    the name and price of the food that the restaurant sells. The `sell` method takes
    two arguments, the `person` who wants to buy something and the `name` of the food
    that the person wants. The `sell` method must first check that the restaurant
    actually sells the right kind of food. If so, it should `ask` the buyer to `pay-money`
    in the appropriate amount. If that succeeds, the method should **instantiate the
    food class** and return the **new food object**. The method should return `#f`
    if the person can't buy the food.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 餐厅应该有两个方法。`menu`方法返回一个包含餐厅销售的食品名称和价格的列表。`sell`方法接受两个参数，想要购买东西的`person`和人想要的食品的`name`。`sell`方法必须首先检查餐厅是否实际销售正确类型的食品。如果是这样，它应该要求买家以适当的金额`pay-money`。如果成功，该方法应该**实例化食品类**并返回**新的食品对象**。如果人无法购买食物，该方法应返回`#f`。
- en: 'Here are some examples:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些例子：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Question A8
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题A8
- en: 'Now we need a `buy` method for people. It should take as argument the **name**
    of the food we want to buy:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一个人的`buy`方法。它应该以我们想要购买的食品的**name**作为参数：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The method must send a `sell` message to the restaurant. If this succeeds (that
    is, if the value returned from the `sell` method is an **object** rather than
    `#f`), the new food should be added to the person's possessions. If the person
    can't buy, return an **error**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法必须向餐厅发送一个`sell`消息。如果成功（也就是说，从`sell`方法返回的值是一个**对象**而不是`#f`），新食物应该被添加到人的财产中。如果人无法购买，返回一个**错误**。
