- en: Maps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射
- en: What is a map?
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 什么是映射？
- en: To compare different authors, or to identify a good match in a web search, we
    can use a histogram of a document. It contains all the words used, and for each
    word how often it was used.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较不同的作者，或在网络搜索中识别出一个好的匹配项，我们可以使用文档的直方图。它包含了所有使用过的单词，以及每个单词被使用的频率。
- en: In other words, given an input text, we want to compute a mapping
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，给定一个输入文本，我们想要计算一个映射
- en: \[ \textit{words} \rightarrow \mathbb{N} \]that maps a word \(w\) to the number
    of times it is used in the text.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: \[ \textit{words} \rightarrow \mathbb{N} \]将一个单词 \(w\) 映射到其在文本中出现的次数。
- en: 'We therefore need a data type that can store pairs of (word, count), that is,
    pairs of (String, Int). It should support the following operations:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要一个数据类型，它可以存储（单词，计数）对，即（String，Int）对。它应该支持以下操作：
- en: insert a new pair (given word and count),
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入一个新的对（给定单词和计数），
- en: given a word, find the current count,
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定一个单词，找到当前计数，
- en: update the count for a word,
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新单词的计数，
- en: enumerate all the pairs in the container.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举容器中的所有对。
- en: This data type is called a map or dictionary. A map implements a mapping from
    some key type to some value type.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据类型称为映射或字典。映射实现了从某种键类型到某种值类型的映射。
- en: The Java library provides a parameterized data type Map<K,V>, where K is the
    key type and V is the value type. We can think of it as a container for (K,V)
    pairs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Java 库提供了一个参数化数据类型 Map<K,V>，其中 K 是键类型，V 是值类型。我们可以将其视为 (K,V) 对的容器。
- en: 'We can create such a map as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像下面这样创建这样一个映射：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Instead of having to write Pair for every mapping, we can use the small utility
    function to. It does nothing but combine two elements into a pair, and makes the
    syntax for creating a map nicer:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与每个映射都要编写 Pair 不同，我们可以使用小型实用函数 to。它仅将两个元素组合成一对，并使得创建映射的语法更加美观：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can access the mappings using the nice mathematical syntax \(m[x]\) for
    the result of mapping key \(x\) by the mapping \(m\):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用好看的数学语法 \(m[x]\) 访问映射键 \(x\) 由映射 \(m\) 映射的结果：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that requesting a key that is not in the map will return the value null.
    This means that the result type of the map access is actually V? (see [nullable
    types](tutorial-null)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，请求不存在于映射中的键将返回 null 值。这意味着映射访问的结果类型实际上是 V?（参见[可空类型](tutorial-null)）。
- en: 'This means that you have to first check the result for null before you can
    do anything with it:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您必须先检查结果是否为 null，然后才能对其进行任何操作：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Alternatively, you can use the getOrElse method: if the key is not in the map,
    it will use the provided code to compute a default value:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用 getOrElse 方法：如果键不在映射中，则使用提供的代码计算默认值：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The result type of getOrElse is the (not nullable) value type V, so there is
    no need to check for null.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: getOrElse 的结果类型是（非可空）值类型 V，因此不需要检查是否为 null。
- en: 'We can check if a mapping is defined for a given key using the in operator:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 in 运算符检查是否为给定键定义了映射：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can determine the number of entries in a map m as m.size, use m.isEmpty()
    to determine if the map has no mappings, and you can iterate over all the entries
    of a map using a for-loop:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 m.size 确定映射 m 中的条目数，使用 m.isEmpty() 确定映射是否没有映射，您可以使用 for 循环遍历映射的所有条目：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Mutable maps
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 可变映射
- en: Often we need a mutable map, where we can add, update, and remove mappings.
    We use the syntax m[key] on the left side of an assignment to add or change a
    mapping. Mappings are removed using m.remove(key).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常需要一个可变映射，可以添加、更新和删除映射。我们使用赋值语句的左侧的 m[key] 语法来添加或更改映射。使用 m.remove(key) 删除映射。
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Another useful method is getOrPut. If the given key is in the map, it returns
    the value from the map. Otherwise, it executes the given piece of code, stores
    the value in the map (for the given key), and returns the value:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的方法是 getOrPut。如果给定的键存在于映射中，则从映射中返回该键的值。否则，它执行给定的代码片段，将值存储在映射中（对于给定的键），并返回该值：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Computing a word histogram
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 计算单词直方图
- en: 'Here is my first attempt at a histogram program ([histogram1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/histogram1.kts)):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的第一个直方图程序尝试（[histogram1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/histogram1.kts)）：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The function histogram creates an empty map hist from strings to integers. It
    then looks at all words in the file, converts them to uppercase. Using getOrElse,
    we obtain the current mapping of the word or zero if the word is not yet there.
    We increase the number by one, and store the new number in the map.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 函数histogram创建一个从字符串到整数的空映射hist。然后它查看文件中的所有单词，将它们转换为大写。使用getOrElse，我们获取单词的当前映射，如果单词尚未存在，则为零。我们将数字增加一，并将新数字存储在映射中。
- en: 'When I run it on the text file [text.txt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/text.txt),
    I get this output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在文本文件[text.txt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/text.txt)上运行它时，我得到这个输出：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is not very pretty, so I should use a nicer way of printing out
    the map. This can be done by iterating over the contents of the map, as follows
    ([histogram2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/histogram2.kts)):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 输出并不是很漂亮，所以我应该使用更好的方式来打印映射。这可以通过迭代映射的内容来完成，如下所示（[histogram2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/histogram2.kts))：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output is much nicer:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输出要好得多：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is still not perfect, because it''s quite hard to find the word we are
    looking for. It would be better if the list was sorted. We can do this by converting
    the map to a sorted map ([histogram3.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/histogram3.kts)):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然不完美，因为很难找到我们要找的单词。如果列表是排序的话会更好。我们可以通过将映射转换为排序映射来实现这一点（[histogram3.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/histogram3.kts))：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now the output becomes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输出变得更好了：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How do maps work?
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 地图是如何工作的？
- en: Maps are implemented using a hash table, which allows extremely fast insertion,
    removal, and search, but does not maintain any ordering on the keys. (Come to
    [CS206](../cs206) to learn about hash tables.)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 地图是使用哈希表实现的，这允许极快的插入、删除和搜索，但不保持键的任何顺序。（来[CS206](../cs206)学习哈希表。）
- en: A pronounciation dictionary
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一个发音词典
- en: Let's build a real "dictionary", one that maps words to other words. In this
    case, we want to build a map that maps English words to their pronounciation (English
    pronounciation is so unpredictable, it would be nice to have a tool to help with
    this).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个真正的“字典”，一个将单词映射到其他单词的字典。在这种情况下，我们想要构建一个将英语单词映射到它们的发音的映射（英语发音是如此不可预测，有一个工具来帮助这将是很好的）。
- en: 'We will use the data file [cmudict.txt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/cmudict.txt).
    Here are a few example lines from this file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用数据文件[cmudict.txt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/cmudict.txt)。这里有这个文件的一些示例行：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The format is roughly this: A line starting with # is a comment. Other lines
    start with a word in upper case, then a space, then the pronounciation in a particular
    format (the phonemes are separated by spaces, we will not go into details).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 格式大致如下：以#开头的行是注释。其他行以大写字母开头，然后是特定格式的发音（音素之间用空格分隔，我们不会详细介绍）。
- en: 'Some words have more than one correct pronounciation, see "adhesive" above.
    As you can see, the additional pronounciations are indicated by the number in
    parentheses after the word. Here is another example for a word with three pronounciations
    (and partly different meanings):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一些单词有多个正确的发音，参见上面的“adhesive”。正如您所看到的，额外的发音在���词后的括号中用数字表示。这里是另一个具有三个发音的单词的例子（并且部分不同含义）：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is a function that reads the file and constructs a mapping. It simply
    ignores the additional pronounciations and only uses the first one for each word
    (note that it returns an immutable map even though it internally works with a
    mutable map): ([cmudict1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/cmudict1.kts)):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个函数，它读取文件并构建映射。它简单地忽略了额外的发音，并且只使用每个单词的第一个发音（请注意，即使它在内部使用可变映射，它返回一个不可变映射）：([cmudict1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/30-maps/cmudict1.kts))：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here''s a quick test of the function:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对函数的一个快速测试：
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now let''s put our map to some use. English has many words that are homophones:
    they sound the same, like “be” and “bee”, or ”sewing” and ”sowing”. We want to
    find some more examples. What would be the largest number of different words that
    all have the same pronounciation?'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将我们的映射用于一些用途。英语有许多同音词：它们听起来相同，比如“be”和“bee”，或“sewing”和“sowing”。我们想找到一些更多的例子。有多少不同的单词具有相同的发音会是最大的数量？
- en: 'To determine this, we need to create a dictionary for the opposite direction:
    mapping pronounciations to words. Since there may be several words with the same
    pronounciation, this will be a Map<String, Set<String>>, that is a mapping from
    strings to sets of strings.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定这一点，我们需要为相反的方向创建一个字典：将发音映射到单词。由于可能有几个具有相同发音的单词，这将是一个Map<String, Set<String>>，即从字符串到字符串集合的映射。
- en: 'We write a general function that computes the inverse function of a map:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写一个通用函数来计算地图的反函数：
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We test with some examples:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用一些例子进行测试：
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And now we use the reverse map to display all the words that have at least
    a certain number of homophones:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用反向映射来显示所有至少有一定数量同音词的单词：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here is the output for \(k = 10\):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是\(k = 10\)的输出结果：
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s try another puzzle: There are words in English that sound the same if
    you remove the first letter: "knight" and "night" is an example. Let''s try to
    find all such words:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试另一个谜题：英语中有些单词如果去掉第一个字母会发音相同："knight"和"night"就是一个例子。让我们试着找出所有这样的单词：
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And here is the output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How many of these words do you know?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你认识这些单词中的多少个？
- en: There is a word in English where you can remove both the first letter or the
    second letter, and it still sounds the same. (In other words, if the whole word
    is XYABCDE, then YABCDE and XABCDE sound the same as XYABCDE.)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在英语中有一个单词，你可以去掉第一个字母或第二个字母，它的发音仍然相同。（换句话说，如果整个单词是XYABCDE，那么YABCDE和XABCDE的发音与XYABCDE相同。）
- en: Can you figure out which word this is?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你能想出这是哪个单词吗？
