["```\n(if (< 2 3) 10 20)\u00a0 -->\u00a0 10\n```", "```\n(if 0 1 2)\u00a0 \u00a0 \u00a0 \u00a0 -->\u00a0 1\u00a0 ; all of these are \"truthy\"(if \"false\" 1 2)\u00a0 -->\u00a0 1(if \"\" 1 2)\u00a0 \u00a0 \u00a0  -->\u00a0 1(if null 1 2)\u00a0 \u00a0  -->\u00a0 1(if #t 1 2)\u00a0 \u00a0 \u00a0  -->\u00a0 1\u00a0 ; including the true value(if #f 1 2)\u00a0 \u00a0 \u00a0  -->\u00a0 2\u00a0 ; the only false value(if #false 1 2)\u00a0  -->\u00a0 2\u00a0 ; another way to write it(if false 1 2)\u00a0 \u00a0 -->\u00a0 2\u00a0 ; also false since it's bound to #f\n```", "```\n(if test consequent)\n```", "```\n(if #f something)\n```", "```\n(define (digit-num n)\u00a0 (if (<= n 9)\u00a0 \u00a0 1\u00a0 \u00a0 (if (<= n 99)\u00a0 \u00a0 \u00a0 2\u00a0 \u00a0 \u00a0 (if (<= n 999)\u00a0 \u00a0 \u00a0 \u00a0 3\u00a0 \u00a0 \u00a0 \u00a0 (if (<= n 9999)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"a lot\")))))\n```", "```\nfunction digit_num(n) {\u00a0 if (n <= 9)\u00a0 \u00a0 \u00a0 \u00a0  return 1;\u00a0 else if (n <= 99)\u00a0  return 2;\u00a0 else if (n <= 999)\u00a0 return 3;\u00a0 else if (n <= 9999) return 4;\u00a0 else return \"a lot\";}\n```", "```\n(define (digit-num n)\u00a0 (if (<= n 9)\u00a0 \u00a0 1\u00a0 (if (<= n 99)\u00a0 \u00a0 2\u00a0 (if (<= n 999)\u00a0 \u00a0 3\u00a0 (if (<= n 9999)\u00a0 \u00a0 4\u00a0 \u00a0 \"a lot\")))))\n```", "```\n(define (digit-num n)\u00a0 (cond [(<= n 9)\u00a0 \u00a0 1]\u00a0 \u00a0 \u00a0 \u00a0 [(<= n 99)\u00a0  2]\u00a0 \u00a0 \u00a0 \u00a0 [(<= n 999)\u00a0 3]\u00a0 \u00a0 \u00a0 \u00a0 [(<= n 9999) 4]\u00a0 \u00a0 \u00a0 \u00a0 [else\u00a0 \u00a0 \u00a0 \u00a0 \"a lot\"]))\n```", "```\n(cond [test-1 expr-1]\u00a0 \u00a0 \u00a0 [test-2 expr-2]\u00a0 \u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0 [test-n expr-n]\u00a0 \u00a0 \u00a0 [else\u00a0  else-expr])\n```", "```\n(define (fact n)\u00a0 (if (zero? n)\u00a0 \u00a0 1\u00a0 \u00a0 (* n (fact (- n 1)))))\n```", "```\n(define (helper n acc)\u00a0 (if (zero? n)\u00a0 \u00a0 acc\u00a0 \u00a0 (helper (- n 1) (* acc n))))(define (fact n)\u00a0 (helper n 1))\n```"]