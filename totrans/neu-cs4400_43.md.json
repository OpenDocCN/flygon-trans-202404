["```\n#lang pl broken(define (fact n)\u00a0 (if (zero? n) 1 (* n (fact (- n 1)))))(fact 5)\n```", "```\n{with {fact {fun {n}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {if {= n 0} 1 {* n {call fact {- n 1}}}}}}\u00a0 {call fact 5}}\n```", "```\n(let ([fact (lambda (n)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (if (zero? n) 1 (* n (fact (- n 1)))))])\u00a0 (fact 5))\n```", "```\n(define (F x) x)(define (G y) (F y))(G F)\n```", "```\n(define F (lambda (x) x))(define G (lambda (y) (F y)))(G F)\n```", "```\n(define F (lambda (x) x))(define G (lambda (y) (F y)))((lambda (y) (F y)) (lambda (x) x))\n```", "```\n((lambda (y) ((lambda (x) x) y)) (lambda (x) x))\n```", "```\nfact := (lambda (n)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (if (zero? n) 1 (* n (fact (- n 1)))))(fact 5)\n```", "```\nfact = (lambda (n)\u00a0 \u00a0 \u00a0 \u00a0  (if (zero? n) 1 (* n (fact (- n 1)))))\n```"]