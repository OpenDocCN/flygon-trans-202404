- en: 1  Introduction to Abstract Interpretation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1  抽象解释介绍
- en: The *formal verification* of a program (and more generally a computer system)
    consists in proving that its *semantics* (describing "what the program executions
    actually do") satisfies its *specification* (describing "what the program executions
    are supposed to do").*Abstract interpretation* [[22](#CousotCousot77-1-POPL),[26](#CousotCousot79-1-POPL)]
    formalizes the idea that this formal proof can be done at some level of abstraction
    where irrelevant details about the semantics and the specification are ignored.
    This amounts to proving that an *abstract semantics* satisfies an *abstract specification*.
    An example of abstract semantics is Hoare logic while examples of abstract specifications
    are invariance, partial, or total correctness. This abstracts away from concrete
    properties such as execution times.Abstractions should preferably be *sound* (no
    conclusion derived from the abstract semantics is wrong relative to the program
    concrete semantics and specification). Otherwise stated, a proof that the abstract
    semantics satisfies the abstract specification should imply that the concrete
    semantics also satisfies the concrete specification. Hoare logic is a sound verification
    method, debugging is not (since some executions are left out), bounded model checking
    is not either (since parts of some executions are left out). Unsound abstractions
    lead to *false negatives* (the program may be claimed to be correct/non erroneous
    with respect to the specification whereas it is indeed incorrect).Abstractions
    should also preferably be *complete* (no aspect of the semantics relevant to the
    specification is left out). So if the concrete semantics satisfies the concrete
    specification this should be provable in the abstract. However program proofs
    are undecidable, and so automatic tools for reasoning about programs are all incomplete
    (for non trivial program properties such as safety, liveness, or security) and
    must therefore fail on some programs. This can be achieved by allowing the tool
    not to terminate, to be unsound (e.g. debugging tools omit possible executions),
    or to be incomplete (e.g. static analysis tools may produce false alarms). Incomplete
    abstractions lead to *false positives* or *false alarms* (the specification is
    claimed to be potentially violated by some program executions while it is not).Potentially
    non-terminating and unsound program verification tools are easy to design. Terminating
    and sound tools are much more difficult to design. Complete tools are impossible
    to design, by undecidability. However static analysis tools producing very few
    or no false alarms have been designed and used in industrial contexts for specific
    families of properties and programs [[42](#CousotEtAl05-ESOP)]. In all cases,
    abstract interpretation provides a systematic construction method based on the
    effective approximation of the concrete semantics, which can be (partly) automated
    and/or formally verified.Abstract interpretation aims at
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对程序（以及更普遍地说是计算机系统）的*形式验证*，就是证明其*语义*（描述“程序执行实际上做什么”）满足其*规范*（描述“程序执行应该做什么”）。*抽象解释*
    [[22](#CousotCousot77-1-POPL),[26](#CousotCousot79-1-POPL)] 形式化了这个想法，即在某个抽象层面上可以进行这种形式证明，在此层面上忽略了关于语义和规范的不相关细节。这相当于证明一个*抽象语义*满足一个*抽象规范*。抽象语义的一个例子是霍尔逻辑，而抽象规范的例子是不变性、部分或总体正确性。这将具体属性（如执行时间）抽象化为一边。抽象化应尽可能是*合理*的（从抽象语义推导的结论相对于程序具体语义和规范不是错误的）。换句话说，证明抽象语义满足抽象规范应意味着具体语义也满足具体规范。霍尔逻辑是一种合理的验证方法，调试不是（因为一些执行被省略了），有界模型检查也不是（因为一些执行的部分被省略了）。不合理的抽象会导致*假负*（程序可能被声称相对于规范是正确/非错误的，而实际上是不正确的）。抽象还应尽可能是*完整*的（与规范相关的语义方面没有遗漏）。因此，如果具体语义满足具体规范，则应在抽象中可以证明。然而，程序证明是不可判定的，因此用于推理程序的自动化工具都是不完整的（对于安全性、活性或安全性等非平凡程序属性）必然会在某些程序上失败。这可以通过允许工具不终止、不合理（例如调试工具省略了可能的执行）或不完整（例如静态分析工具可能产生错误警报）来实现。不完整的抽象会导致*假阳性*或*错误警报*（规范声称某些程序执行可能违反，而实际上不违反）。可能无法终止和不合理的程序验证工具易于设计。终止和合理的工具设计起来要困难得多。根据不可判定性，完整的工具不可能设计出来。然而，针对特定属性和程序族的工业环境中已设计并使用了产生极少或没有错误警报的静态分析工具
    [[42](#CousotEtAl05-ESOP)]。在所有情况下，抽象解释提供了一种基于对具体语义的有效近似的系统构建方法，可以（部分）自动化和/或正式验证。抽象解释的目标在于
- en: providing a basic coherent and conceptual theory for understanding in a unified
    framework the thousands of ideas, concepts, reasonings, methods, and tools on
    formal program analysis and verification [[22](#CousotCousot77-1-POPL),[26](#CousotCousot79-1-POPL)];
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个统一的框架中提供了一个基本的连贯和概念性理论，用于理解形式程序分析和验证中的成千上万个想法、概念、推理、方法和工具[[22](#CousotCousot77-1-POPL),[26](#CousotCousot79-1-POPL)];
- en: guiding the correct formal design of automatic tools for *program analysis*
    (computing an abstract semantics) and *program verification* (proving that an
    abstract semantics satisfies an abstract specification) [[17](#Cousot99-3-Marktoberdorf-paper)].
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指导正确的自动工具的形式设计，用于*程序分析*（计算抽象语义）和*程序验证*（证明抽象语义满足抽象规范）[[17](#Cousot99-3-Marktoberdorf-paper)]。
- en: Abstract interpretation theory studies semantics (formal models of computer
    systems), abstractions, their soundness, and completeness.The informal presentation
    "[Abstract Interpretation in a Nutshell](http://www.astree.ens.fr/IntroAbsInt.html)"
    aims at providing a short intuitive introduction to the theory. The "[basic](http://www.di.ens.fr/~cousot/COUSOTpapers/WCC04.shtml)
    [concepts](http://www.di.ens.fr/~cousot/COUSOTpapers/WCC04.shtml) [of](http://www.di.ens.fr/~cousot/COUSOTpapers/WCC04.shtml)
    [abstract](http://www.di.ens.fr/~cou''sot/COUSOTpapers/WCC04.shtml) [interpretation](http://www.di.ens.fr/~cousot/COUSOTpapers/WCC04.shtml)"
    and an elementary "[course on abstract interpretation](http://web.mit.edu/afs/athena.mit.edu/course/16/16.399/www/)"
    can also be found on the web.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象解释理论研究语义（计算机系统的形式模型）、抽象、它们的正确性和完整性。非正式的介绍 "[摘要解释简介](http://www.astree.ens.fr/IntroAbsInt.html)"
    旨在提供对该理论的简短直观介绍。网络上还可以找到关于抽象解释的 "[基本](http://www.di.ens.fr/~cousot/COUSOTpapers/WCC04.shtml)
    [概念](http://www.di.ens.fr/~cousot/COUSOTpapers/WCC04.shtml) [of](http://www.di.ens.fr/~cousot/COUSOTpapers/WCC04.shtml)
    [abstract](http://www.di.ens.fr/~cou''sot/COUSOTpapers/WCC04.shtml) [interpretation](http://www.di.ens.fr/~cousot/COUSOTpapers/WCC04.shtml)"
    和初级 "[抽象解释课程](http://web.mit.edu/afs/athena.mit.edu/course/16/16.399/www/)"。
