- en: Know Your IDE
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解你的IDE
- en: Know Your IDE
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解你的IDE
- en: In the 1980s our programming environments were typically nothing better than
    glorified text editors... if we were lucky. Syntax highlighting, which we take
    for granted nowadays, was a luxury that certainly was not available to everyone.
    Pretty printers to format our code nicely were usually external tools that had
    to be run to correct our spacing. Debuggers were also separate programs run to
    step through our code, but with a lot of cryptic keystrokes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪80年代，我们的编程环境通常不过是一种比较高级的文本编辑器……如果我们幸运的话。我们现在理所当然的语法高亮在当时是一种奢侈品，肯定不是每个人都能使用的。美化打印机用于将我们的代码格式化得漂亮通常是外部工具，必须运行以纠正我们的间距。调试器也是单独运行的程序，用于逐步执行我们的代码，但需要大量神秘的按键操作。
- en: During the 1990s companies began to recognize the potential income that they
    could derive from equipping programmers with better and more useful tools. The
    Integrated Development Environment (IDE) combined the previous editing features
    with a compiler, debugger, pretty printer, and other tools. During that time,
    menus and the mouse also became popular, which meant that developers no longer
    needed to learn cryptic key combinations to use their editors. They could simply
    select their command from the menu.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪90年代，公司开始意识到他们可以通过为程序员提供更好更有用的工具来获得潜在收入。集成开发环境（IDE）将以前的编辑功能与编译器、调试器、美化打印机和其他工具结合在一起。在那个时候，菜单和鼠标也变得流行起来，这意味着开发人员不再需要学习神秘的键盘组合来使用他们的编辑器。他们只需从菜单中选择命令即可。
- en: In the 21st century IDEs have become so common place that they are given away
    for free by companies wishing to gain market share in other areas. The modern
    IDE is equipped with an amazing array of features. My favorite is automated refactoring,
    particularly *Extract Method*, where I can select and convert a chunk of code
    into a method. The refactoring tool will pick up all the parameters that need
    to be passed into the method, which makes it extremely easy to modify code. My
    IDE will even detect other chunks of code that could also be replaced by this
    method and ask me whether I would like to replace them too.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在21世纪，IDE已经变得如此普遍，以至于一些公司为了在其他领域获得市场份额而免费提供。现代IDE配备了令人惊叹的功能。我最喜欢的是自动重构，特别是*提取方法*，我可以选择并将一块代码转换为一个方法。重构工具将捕捉到需要传递到方法中的所有参数，这使得修改代码变得极其容易。我的IDE甚至会检测到其他可以被此方法替换的代码块，并询问我是否也想替换它们。
- en: 'Another amazing feature of modern IDEs is the ability to enforce style rules
    within a company. For example, in Java, some programmers have started making all
    parameters final (which, in my opinion, is a waste of time). However, since they
    have such a style rule, all I would need to do to follow it is set it up in my
    IDE: I would get a warning for any non-final parameter. Style rules can also be
    used to find probable bugs, such as comparing autoboxed objects for reference
    equality, e.g., using `==` on primitive values that are autoboxed into reference
    objects.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现代IDE的另一个令人惊叹的功能是在公司内部强制执行样式规则的能力。例如，在Java中，一些程序员已经开始将所有参数设置为final（在我看来，这是浪费时间）。然而，由于他们有这样的样式规则，我只需要在我的IDE中设置它：对于任何非final参数，我会收到警告。样式规则还可以用于查找可能的错误，例如比较自动装箱对象的引用相等性，例如，对自动装箱为引用对象的原始值使用`==`。
- en: Unfortunately modern IDEs do not require us to invest effort in order to learn
    how to use them. When I first programmed C on Unix, I had to spend quite a bit
    of time learning how the vi editor worked, due to its steep learning curve. This
    time spent up-front paid off handsomely over the years. I am even typing the draft
    of this article with *vi*. Modern IDEs have a very gradual learning curve, which
    can have the effect that we never progress beyond the most basic usage of the
    tool.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，现代集成开发环境（IDE）不需要我们花费精力来学习如何使用它们。当我第一次在Unix上编写C程序时，我不得不花费相当多的时间学习vi编辑器的工作原理，因为它的学习曲线陡峭。这些前期花费的时间多年来都得到了丰厚的回报。我甚至正在用*vi*打草稿这篇文章。现代IDE具有非常渐进的学习曲线，这可能导致我们永远无法超越工具的最基本用法。
- en: 'My first step in learning an IDE is to memorize the keyboard shortcuts. Since
    my fingers are on the keyboard when I''m typing my code, pressing *Ctrl+Shift+I*
    to inline a variable saves breaking the flow, whereas switching to navigate a
    menu with my mouse interrupts the flow. These interruptions lead to unnecessary
    context switches, making me much less productive if I try to do everything the
    lazy way. The same rule also applies to keyboard skills: Learn to touch type,
    you won''t regret the time invested up-front.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我学习IDE的第一步是记住键盘快捷键。因为当我在键盘上输入代码时，按下*Ctrl+Shift+I*来内联一个变量可以避免中断流程，而用鼠标切换到菜单导航会打断流程。这些中断会导致不必要的上下文切换，如果我尝试以懒惰的方式做所有事情，那么我会变得不那么高效。同样的规则也适用于键盘技能：学会触摸打字，你不会后悔一开始投入的时间。
- en: 'Lastly, as programmers we have time proven Unix streaming tools that can help
    us manipulate our code. For example, if during a code review, I noticed that the
    programmers had named lots of classes the same, I could find these very easily
    using the tools *find*, *sed*, *sort*, *uniq*, and *grep*, like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，作为程序员，我们有经过时间验证的Unix流处理工具可以帮助我们操作我们的代码。例如，如果在代码审查期间，我注意到程序员们给很多类取了相同的名字，我可以很容易地使用*find*、*sed*、*sort*、*uniq*和*grep*这些工具找到它们，就像这样：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We expect a plumber coming to our house to be able to use his blow torch. Let's
    spend a bit of time to study how to become more effective with our IDE.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望一个管道工来我们家时能够使用他的喷灯。让我们花点时间学习如何更有效地使用我们的集成开发环境（IDE）。
- en: by [Heinz Kabutz](http://programmer.97things.oreilly.com/wiki/index.php/Heinz_Kabutz)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: by [Heinz Kabutz](http://programmer.97things.oreilly.com/wiki/index.php/Heinz_Kabutz)
