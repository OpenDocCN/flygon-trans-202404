- en: Real-Time Queues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[`RealTimeQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/RealTimeQueue.elm)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Combine `reverse` and `append` into an incremental function that performs one
    step of each at a time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Starting with the `BankersQueue`, use an ordinary `List` to describe the `back`,
    and track a "schedule" `LazyList a` that is a suffix of `front` that needs to
    be forced. The implementation enforces the invariant that the size of `sched`
    is equal to the size of `front` minus the size of `back`. This invariant obviates
    the need to maintain `Int` size information explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The basic operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Because of the invariant, `sched` is empty when the lengths of `front` and `back`
    are the same. So when `enqueue`ing an element, the rotation from `back` to `front`
    is initiated when `sched` is empty.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, `dequeue` initiates the rotation when the `back` becomes longer than
    the `front`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The common parts of these operations can be factored out into an `exec` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Recommended
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Okasaki, Chapter 7.1â€”7.2\. Although we will not cover this material carefully
    in class, you are encouraged to read through this material to understand the basic
    ideas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
