- en: More Exercises for Partner B
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合作伙伴 B 的更多练习
- en: 'Question B6: Part 1'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 B6：第 1 部分
- en: The way we're having people take food from restaurants is unrealistic in several
    ways. Our overall goal this week is to fix that. As a first step, you are going
    to create a `food` class. We will give things that are food two properties, an
    `edible?` property and a `calories` property. `edible?` will have the value `#t`
    if the object is a food. If a `person` eats some `food`, the `food`'s `calories`
    are added to the person's `strength`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们让人们从餐馆拿食物的方式在几个方面都不切实际。本周我们的总体目标是解决这个问题。作为第一步，你要创建一个 `food` 类。我们将给被视为食物的物品两个属性，一个
    `edible?` 属性和一个 `calories` 属性。如果对象是食物，`edible?` 属性将具有值 `#t`。如果一个 `person` 吃了一些
    `food`，那么食物的 `calories` 将被添加到人的 `strength` 中。
- en: (Remember that the `edible?` property will automatically be `false` for objects
    other than food, because of the way properties were implemented in Question B4\.
    You don't have to go around telling all the other stuff not to be edible explicitly.)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: （请记住，由于问题 B4 中属性的实现方式，除了食物以外的对象的 `edible?` 属性将自动为 `false`。你不必到处告诉其他所有东西不可食用。）
- en: Write a definition of the `food` class that uses `thing` as the parent class.
    It should return `#t` when you send it an `edible?` message, and it should correctly
    respond to a `calories` message.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个使用 `thing` 作为父类的 `food` 类的定义。当你向它发送一个 `edible?` 消息时，它应该返回 `#t`，并且它应该正确地响应一个
    `calories` 消息。
- en: Replace the procedure named `edible?` in the original `adv.scm` with a new version
    that takes advantage of the mechanism you've created, instead of relying on a
    built-in list of types of food.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始的 `adv.scm` 中用一个新版本替换名为 `edible?` 的过程，利用你创建的机制，而不是依赖于内置的食物类型列表。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Question B6: Part 2'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 B6：第 2 部分
- en: Now that you have the `food` class, invent some child classes for particular
    kinds of food. For example, make a `pasta` class that inherits from `food`. `pasta`
    should not have any instantiation variable. Give the `pasta` a **class-variable**
    called `name` whose value is the word pasta. (We'll need this later when we invent
    `restaurant` objects.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了 `food` 类，为特定种类的食物发明一些子类。例如，创建一个从 `food` 继承的 `pasta` 类。`pasta` 不应该有任何实例化变量。给
    `pasta` 一个名为 `name` 的**类变量**，其值为单词 pasta。（当我们后面发明 `restaurant` 对象时，我们会需要它。）
- en: Using your pasta class, it should now be possible to instantiate the pesto-pasta
    above as follows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的意大利面类，现在可以像下面这样实例化上面的香蒜酱意大利面。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Question B6: Part 3'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 B6：第 3 部分
- en: Make an `eat` method for people. Your `eat` method should look at your possessions
    and filter for all the ones that are edible. It should then add the `calories`
    value of the foods to your `strength`. Then it should make the foods disappear
    (no longer be your possessions and no longer be at your location).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为人类制作一个 `eat` 方法。你的 `eat` 方法应该查看你的财产，并筛选出所有可食用的物品。然后将食物的 `calories` 值加到你的 `strength`
    中。然后它应该使食物消失（不再是你的财产，也不再在你的位置）。
- en: Combining Work
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合工作
- en: Before moving on, get your partner to explain Question A6 and its solution.
    Also, explain Question B6 and its solution to your partner.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请让你的合作伙伴解释问题 A6 及其解决方案。同时，向你的合作伙伴解释问题 B6 及其解决方案。
- en: Question B7
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 B7
- en: Your job is to define the `police` class. When the police notices a new person
    entering where he is, the police checks to see if that person is a thief. If the
    person is a thief the police says "Crime Does Not Pay," then takes away all the
    thief's possessions and sends the thief directly to jail.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你的任务是定义 `police` 类。当警察注意到一个新的人进入他所在的地方时，警察会检查那个人是否是小偷。如果那个人是小偷，警察会说“犯罪是不值得的”，然后夺走小偷的所有财产，并将小偷直接送进监狱。
- en: Give thieves and police default strengths. Thieves should start out stronger
    than persons, but police should be stronger than thieves. Of course, if you eat
    lots you should be able to build up enough `strength` to take food away from a
    thief.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 给小偷和警察默认的强度。小偷的起始强度应该比人更强，但警察应该比小偷更强。当然，如果你吃得足够多，你应该能够积累足够的 `strength` 来夺走小偷的食物。
- en: Please test your code and turn in a transcript that shows the thief stealing
    your food, you chasing the thief and the police catching the thief. In case you
    haven't noticed, we've put a thief in Sproul Plaza to help test your code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请测试你的代码，并提交一份显示小偷偷走你的食物、你追赶小偷和警察逮捕小偷的记录。如果你还没有注意到，我们在 Sproul Plaza 放了一个小偷来帮助测试你的代码。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Question B8
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 B8
- en: 'Now we want to reorganize `take` so that it looks to see who previously possesses
    the desired object. If its possessor is`''no-one`, go ahead and take it as always.
    Otherwise, invoke:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们希望重新组织`take`，以便查看谁之前拥有所需的对象。如果其拥有者是`'no-one`，那么就像往常一样拿走它。否则，调用：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `may-take?` method for a thing that belongs to someone should compare the
    strength of its owner with the strength of the requesting person to decide whether
    or not it can be taken. If the receiver has the same strength as the holder, the
    receiver may take the object. If the thing does not has a holder, the receiver
    may take the object.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于属于某人的物品的`may-take?`方法应比较其所有者的力量与请求人的力量，以决定是否可以拿走它。如果接收者与持有者的力量相同，则接收者可以拿走该物品。如果物品没有持有者，则接收者可以拿走该物品。
- en: The method should return **`#f`** if the person may not take the thing, or **the
    thing itself** if the person may take it. This is a little more complicated than
    necessary right now, but we are planning ahead for a situation in which, for example,
    an object might want to make a clone of itself for a person to take.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果人不能拿走东西，该方法应返回**`#f`**，或者如果人可以拿走东西，则返回**物品本身**。目前这比必要的要复杂一些，但我们正在为可能出现的情况做准备，例如，一个对象可能想要为一个人制作自己的克隆品。
- en: Note the flurry of message-passing going on here. We send a message to the taker.
    It sends a message to the thing, which sends messages to two people to find out
    their strengths.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里正在进行的消息传递的大量活动。我们向拿取者发送消息。它向物品发送消息，物品向两个人发送消息以了解他们的实力。
