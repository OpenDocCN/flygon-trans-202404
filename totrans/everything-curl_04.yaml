- en: The source code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码
- en: The source code
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码
- en: The source code is, of course, the actual engine parts of this project. After
    all, it is a software project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，源代码是这个项目的实际引擎部分。毕竟，这是一个软件项目。
- en: curl and libcurl are written in C.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: curl 和 libcurl 是用 C 语言编写的。
- en: Hosting and download
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管和下载
- en: You can always find the source code for the latest curl and libcurl release
    on the [official curl web site](https://curl.haxx.se/). From there you can also
    find alternative mirrors that host copies and there are checksums and digital
    signatures provided to help you verify that what ends up on your local system
    when you download these files are the same bytes in the same order as were originally
    uploaded there by the curl team.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你始终可以在 [官方 curl 网站](https://curl.haxx.se/) 找到最新的 curl 和 libcurl 发布的源代码。从那里你也可以找到托管副本的替代镜像，还提供了校验和数字签名，以帮助你验证当你下载这些文件时，它们是否与
    curl 团队最初上传到你本地系统的内容一样。
- en: If you instead would rather work directly with the curl source code off our
    source code repository, you find all details in [the curl github repository](https://github.com/curl/curl/).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更愿意直接使用我们的源代码仓库中的 curl 源代码，你可以在 [curl 的 github 仓库](https://github.com/curl/curl/)
    中找到所有细节。
- en: Clone the code
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆代码
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will get the latest curl code downloaded and unpacked in a directory on
    your local system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你本地系统的一个目录中下载并解压最新的 curl 代码。
- en: Code layout
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码布局
- en: Code layout
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码布局
- en: The curl source code tree is neither large nor complicated. A key thing to remember
    is, perhaps, that libcurl is the library and that library is the biggest component
    of the curl command-line tool.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: curl 源代码树既不大也不复杂。记住的一个关键点也许是 libcurl 是库，而该库是 curl 命令行工具的最大组成部分。
- en: root
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 根目录
- en: We try to keep the number of files in the source tree root to a minimum. You
    will see a slight difference in files if you check a release archive compared
    to what is stored in the git repository as several files are generated by the
    release scripts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尽量保持源树根目录中文件的数量最少。如果你检查一个发布存档，你会看到与存储在 git 仓库中的内容略有不同，因为几个文件是由发布脚本生成的。
- en: 'Some of the more notable ones include:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一些较为显著的包括：
- en: '`buildconf`: used to build configure and more when building curl from source
    out of the git repository.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buildconf`: 用于从 git 仓库中的源代码构建 curl 时构建 configure 和更多内容。'
- en: '`buildconf.bat`: the Windows version of buildconf. Run this after having checked
    out the full source code from git.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buildconf.bat`: buildconf 的 Windows 版本。在从 git 检出完整源代码后运行此命令。'
- en: '`CHANGES`: generated at release and put into the release archive. It contains
    the 1000 latest changes to the source repository.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHANGES`: 在发布时生成并放入发布存档中。它包含源代码仓库中最新的 1000 个更改。'
- en: '`configure`: a generated script that is used on Unix-like systems to generate
    a setup when building curl.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configure`: 在类 Unix 系统上生成的脚本，在构建 curl 时用于生成设置。'
- en: '`COPYING`: the license detailing the rules for your using the code.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COPYING`: 描述你使用代码的规则的许可证。'
- en: '`GIT-INFO`: only present in git and contains information about how to build
    curl after having checked out the code from git.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GIT-INFO`: 仅在 git 中存在，包含有关从 git 检出代码后如何构建 curl 的信息。'
- en: '`maketgz`: the script used to produce release archives and daily snapshots'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maketgz`: 用于生成发布存档和每日快照的脚本'
- en: '`README`: a short summary of what curl and libcurl are.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README`: curl 和 libcurl 的简短摘要。'
- en: '`RELEASE-NOTES`: contains the changes done for the latest release; when found
    in git it contains the changes done since the previous release that are destined
    to end up in the coming release.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RELEASE-NOTES`: 包含最新发布的更改；当在 git 中找到时，它包含自上一次发布以来即将在即将发布的版本中结束的更改。'
- en: lib
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: lib
- en: This directory contains the full source code for libcurl. It is the same source
    code for all platforms—over one hundred C source files and a few more private
    header files. The header files used when building applications against libcurl
    are not stored in this directory; see include/curl for those.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录包含 libcurl 的完整源代码。它是所有平台的相同源代码——超过一百个 C 源文件和几个更多的私有头文件。构建应用程序时使用的头文件不存储在此目录中；请参阅
    include/curl。
- en: Depending on what features are enabled in your own build and what functions
    your platform provides, some of the source files or portions of the source files
    may contain code that is not used in your particular build.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的构建中启用了哪些功能以及你的平台提供了哪些功能，一些源文件或源文件的部分可能包含在你特定构建中未使用的代码。
- en: lib/vtls
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: lib/vtls
- en: The VTLS sub section within libcurl is the home of all the TLS backends libcurl
    can be built to support. The "virtual" TLS internal API is a common API that is
    used within libcurl to access TLS and crypto functions without the main code knowing
    exactly which TLS library that is used. This allows the person who builds libcurl
    to select from a wide variety TLS libraries to build with.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 libcurl 中的 VTLS 子部分是所有 TLS 后端的家园，libcurl 可以构建以支持。"虚拟" TLS 内部 API 是 libcurl
    中使用的一个常见 API，用于访问 TLS 和加密函数，而不需要主代码确切地知道使用的是哪个 TLS 库。这允许构建 libcurl 的人从各种各样的 TLS
    库中进行选择以构建。
- en: We also maintain a [SSL comparison table](https://curl.haxx.se/docs/ssl-compared.html)
    on the web site to aid users.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在网站上维护了一个[SSL 比较表](https://curl.haxx.se/docs/ssl-compared.html)以帮助用户。
- en: 'OpenSSL: the (by far) most popular TLS library.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSSL：（目前为止）最流行的 TLS 库。
- en: 'BoringSSL: an OpenSSL fork maintained by Google. It will make libcurl disable
    a few features due to lacking some functionality in the library.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BoringSSL：由 Google 维护的 OpenSSL 分支。它会使 libcurl 由于库中缺少某些功能而禁用一些功能。
- en: 'LibreSSL: an OpenSSL fork maintained by the OpenBSD team.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LibreSSL：由 OpenBSD 团队维护的 OpenSSL 分支。
- en: 'NSS: a full-blown TLS library perhaps most known for being used by the Firefox
    web browser. This is the default TLS backend for curl on Fedora and Redhat systems.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NSS：一款完整的 TLS 库，可能最为人所知的是被 Firefox 网页浏览器使用。这是 Fedora 和 Redhat 系统上 curl 的默认 TLS
    后端。
- en: 'GnuTLS: a full-blown TLS library used by default by the Debian packaged curl.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GnuTLS：默认由 Debian 打包的 curl 使用的一款完整的 TLS 库。
- en: 'mbedTLS: (formerly known as PolarSSL) is a TLS library more targeted towards
    the embedded market.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mbedTLS：（以前称为 PolarSSL）是一个更专注于嵌入式市场的 TLS 库。
- en: 'WolfSSL: (formerly known as cyaSSL) is a TLS library more targeted towards
    the embedded market.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[WolfSSL](https://wiki.example.org/wolfssl)：（前身为 cyaSSL）是一个更专注于嵌入式市场的 TLS 库。'
- en: 'axTLS: a minuscule TLS library focused on a requiring a small footprint.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: axTLS：一个专注于需要小的占用空间的微小的 TLS 库。
- en: 'SChannel: the native TLS library on Windows.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SChannel：Windows 上的本地 TLS 库。
- en: 'SecureTransport: the native TLS library on Mac OS X.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SecureTransport：Mac OS X 上的本地 TLS 库。
- en: 'GSKit: the native TLS library on OS/400.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GSKit：OS/400 上的本地 TLS 库。
- en: src
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: src
- en: This directory holds the source code for the curl command-line tool. It is the
    same source code for all platforms that run the tool.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此目录保存 curl 命令行工具的源代码。它是在运行该工具的所有平台上相同的源代码。
- en: Most of what the command-line tool does is to convert given command line options
    into the corresponding libcurl options or set of options and then makes sure to
    issue them correctly to drive the network transfer according to the user's wishes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行工具所做的大部分工作都是将给定的命令行选项转换为相应的 libcurl 选项或选项集，然后确保正确地将它们发出以根据用户的愿望驱动网络传输。
- en: This code uses libcurl just as any other application would.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码使用 libcurl 就像任何其他应用程序一样。
- en: include/curl
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: include/curl
- en: Here are the public header files that are provided for libcurl-using applications.
    Some of them are generated at configure or release time so they do not look identical
    in the git repository as they do in a release archive.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是为使用 libcurl 的应用程序提供的公共头文件。其中一些是在配置或发布时生成的，因此它们在 git 存储库中看起来与在发布存档中看起来不同。
- en: With modern libcurl, all an application is expected to include in its C source
    code is `#include <curl/curl.h>`
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用现代 libcurl，应用程序在其 C 源代码中所需包含的只有 `#include <curl/curl.h>`
- en: docs
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档
- en: The main documentation location. Text files in this directory are typically
    plain text files. We have slowly started to move towards Markdown format so a
    few (but hopefully growing number of) files use the .md extension to signify that.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的文档位置。此目录中的文本文件通常是纯文本文件。我们已经开始逐渐转向 Markdown 格式，因此一些（但希望数量逐渐增加的）文件使用 .md 扩展名表示。
- en: Most of these documents are also shown on the curl web site automatically converted
    from text to a web friendly format/look.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件中的大多数也会在 curl 网站上自动转换为友好的 Web 格式/外观。
- en: '`BINDINGS`: lists all known libcurl language bindings and where to find them'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BINDINGS`：列出所有已知的 libcurl 语言绑定及其位置'
- en: '`BUGS`: how to report bugs and where'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUGS`：如何报告错误以及在哪里报告'
- en: '`CODE_OF_CONDUCT.md`: how we expect people to behave in this project'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CODE_OF_CONDUCT.md`：我们期望人们在这个项目中的行为方式'
- en: '`CONTRIBUTE`: what to think about when contributing to the project'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONTRIBUTE`：在贡献到项目时要考虑的事项'
- en: '`curl.1`: the curl command-line tool man page, in nroff format'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`curl.1`：curl 命令行工具的 man 手册，以 nroff 格式'
- en: '`curl-config.1`: the curl-config man page, in nroff format'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`curl-config.1`：curl-config man 手册，以 nroff 格式'
- en: '`FAQ`: frequently asked questions about various curl-related subjects'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FAQ`：关于各种与 curl 相关的主题的常见问题'
- en: '`FEATURES`: an incomplete list of curl features'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FEATURES`: curl功能的不完整列表'
- en: '`HISTORY`: describes how the project started and has evolved over the years'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HISTORY`: 描述项目如何开始并随着年份的推移而发展'
- en: '`HTTP2.md`: how to use HTTP/2 with curl and libcurl'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTTP2.md`: 如何使用curl和libcurl进行HTTP/2'
- en: '`HTTP-COOKIES`: how curl supports and works with HTTP cookies'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTTP-COOKIES`: curl如何支持和处理HTTP cookies'
- en: '`index.html`: a basic HTML page as a documentation index page'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`: 作为文档索引页面的基本HTML页面'
- en: '`INSTALL`: how to build and install curl and libcurl from source'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSTALL`: 如何从源代码构建和安装curl和libcurl'
- en: '`INSTALL.cmake`: how to build curl and libcurl with CMake'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSTALL.cmake`: 如何使用CMake构建curl和libcurl'
- en: '`INSTALL.devcpp`: how to build curl and libcurl with devcpp'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSTALL.devcpp`: 如何使用devcpp构建curl和libcurl'
- en: '`INTERNALS`: details curl and libcurl internal structures'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INTERNALS`: curl和libcurl内部结构的详细信息'
- en: '`KNOWN_BUGS`: list of known bugs and problems'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KNOWN_BUGS`: 已知的错误和问题'
- en: '`LICENSE-MIXING`: describes how to combine different third party modules and
    their individual licenses'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LICENSE-MIXING`: 描述如何结合不同的第三方模块及其各自的许可证'
- en: '`MAIL-ETIQUETTE`: this is how to communicate on our mailing lists'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAIL-ETIQUETTE`: 这是如何在我们的邮件列表上进行沟通的方式'
- en: '`MANUAL`: a tutorial-like guide on how to use curl'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MANUAL`: 一个类似教程的指南，介绍如何使用curl'
- en: '`mk-ca-bundle.1`: the mk-ca-bundle tool man page, in nroff format'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mk-ca-bundle.1`: mk-ca-bundle工具的man页面，采用nroff格式'
- en: '`README.cmake`: CMake-specific details'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.cmake`: CMake特定细节'
- en: '`README.netware`: Netware-specific details'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.netware`: Netware特定细节'
- en: '`README.win32`: win32-specific details'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.win32`: win32特定细节'
- en: '`RELEASE-PROCEDURE`: how to do a curl and libcurl release'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RELEASE-PROCEDURE`: 如何发布curl和libcurl'
- en: '`RESOURCES`: further resources for further reading on what, why and how curl
    does things'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESOURCES`: 进一步阅读关于curl的内容的资源'
- en: '`ROADMAP.md`: what we want to work on in the future'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ROADMAP.md`: 我们未来想要开展的工作'
- en: '`SECURITY`: how we work on security vulnerabilities'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECURITY`: 我们如何处理安全漏洞'
- en: '`SSLCERTS`: TLS certificate handling documented'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SSLCERTS`: TLS证书处理文档'
- en: '`SSL-PROBLEMS`: common SSL problems and their causes'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SSL-PROBLEMS`: 常见SSL问题及其原因'
- en: '`THANKS`: thanks to this extensive list of friendly people, curl exists today!'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THANKS`: 感谢这一大量友好人士的名单，curl今天存在！'
- en: '`TheArtOfHttpScripting`: a tutorial into HTTP scripting with curl'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TheArtOfHttpScripting`: 使用curl进行HTTP脚本编写的教程'
- en: '`TODO`: things we or you can work on implementing'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TODO`: 我们或您可以着手实施的事项'
- en: '`VERSIONS`: how the version numbering of libcurl works'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VERSIONS`: libcurl版本编号的工作原理'
- en: docs/libcurl
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档/libsurl
- en: All libcurl functions have their own man pages in individual files with .3 extensions,
    using nroff format, in this directory. The are also a few other files that are
    described below.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所有libcurl函数都有自己的man页面，以独立的带有.3扩展名的文件形式存在，采用nroff格式，位于此目录中。还有一些其他文件如下所述。
- en: '`ABI`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ABI`'
- en: '`index.html`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`'
- en: '`libcurl.3`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libcurl.3`'
- en: '`libcurl-easy.3`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libcurl-easy.3`'
- en: '`libcurl-errors.3`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libcurl-errors.3`'
- en: '`libcurl.m4`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libcurl.m4`'
- en: '`libcurl-multi.3`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libcurl-multi.3`'
- en: '`libcurl-share.3`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libcurl-share.3`'
- en: '`libcurl-thread.3`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libcurl-thread.3`'
- en: '`libcurl-tutorial.3`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libcurl-tutorial.3`'
- en: '`symbols-in-versions`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symbols-in-versions`'
- en: docs/libcurl/opts
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档/libsurl/opts
- en: This directory contains the man pages for the individual options for three different
    libcurl functions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此目录包含三种不同libcurl函数的各个选项的man页面。
- en: '`curl_easy_setopt()` options start with `CURLOPT_`, `curl_multi_setopt()` options
    start with `CURLMOPT_` and `curl_easy_getinfo()` options start with `CURLINFO_`.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl_easy_setopt()`选项以`CURLOPT_`开头，`curl_multi_setopt()`选项以`CURLMOPT_`开头，`curl_easy_getinfo()`选项以`CURLINFO_`开头。'
- en: docs/examples
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档/示例
- en: Contains around 100 stand-alone examples that are meant to help readers understand
    how libcurl can be used.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 包含约100个独立示例，旨在帮助读者了解如何使用libcurl。
- en: See also the [libcurl examples](libcurl-examples.md) section of this book.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅本书的[libcurl示例](libcurl-examples.md)部分。
- en: scripts
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本
- en: Handy scripts.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 便捷脚本。
- en: '`contributors.sh`: extracts all contributors from the git repository since
    a given hash/tag. The purpose is to generate a list for the RELEASE-NOTES file
    and to allow manually added names to remain in there even on updates. The script
    uses the ''THANKS-filter` file to rewrite some names.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contributors.sh`: 从给定的哈希/标签中提取git存储库中的所有贡献者。其目的是为RELEASE-NOTES文件生成列表，并允许手动添加的名称即使在更新时也保留在其中。该脚本使用''THANKS-filter`文件重写一些名称。'
- en: '`contrithanks.sh`: extracts contributors from the git repository since a given
    hash/tag, filters out all the names that are already mentioned in `THANKS`, and
    then outputs `THANKS` to stdout with the list of new contributors appended at
    the end; it''s meant to allow easier updates of the THANKS document. The script
    uses the ''THANKS-filter` file to rewrite some names.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contrithanks.sh`：从给定的哈希/标签中提取git存储库中的贡献者，过滤掉所有已在`THANKS`中提到的名称，然后将`THANKS`输出到stdout，并将新贡献者的列表附加到末尾；它旨在让`THANKS`文档更容易更新。该脚本使用`THANKS-filter`文件重写某些名称。'
- en: '`log2changes.pl`: generates the `CHANGES` file for releases, as used by the
    release script. It simply converts git log output.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log2changes.pl`：为发布生成`CHANGES`文件，由发布脚本使用。它只是转换git log输出。'
- en: '`zsh.pl`: helper script to provide curl command-line completions to users of
    the zsh shell.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zsh.pl`：辅助脚本，为zsh shell的用户提供curl命令行完成。'
- en: Handling build options
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理构建选项
- en: Handling different build options
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理不同的构建选项
- en: The curl and libcurl source code have been carefully written to build and run
    on virtually every computer platform in existence. This can only be done through
    hard work and by adhering to a few guidelines (and, of course, a fair amount of
    testing).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: curl和libcurl源代码已经精心编写，可以在几乎所有现有的计算机平台上构建和运行。这只能通过辛勤工作和遵循一些准则（当然还有大量测试）来完成。
- en: 'A golden rule is to always add #ifdefs that checks for specific features, and
    then have the setup scripts (configure or CMake or hard-coded) check for the presence
    of said features in a user''s computer setup before the program is compiled there.
    Additionally and as a bonus, thanks to this way of writing the code, some features
    can be explicitly turned off even if they are present in the system and *could*
    be used. Examples of that would be when users want to, for example, build a version
    of the library with a smaller footprint or with support for certain protocols
    disabled, etc.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一个黄金法则是始终添加检查特定特性的#ifdef，然后在用户的计算机设置中编译程序之前，设置脚本（configure或CMake或硬编码）检查是否存在这些特性。此外，由于代码编写方式的这种方式，一些特性甚至可以显式关闭，即使它们存在于系统中并且*可能*被使用。例如，当用户想要构建具有较小占用空间或禁用某些协议支持的库的版本时等。
- en: 'The project sometimes uses #ifdef protection around entire source files when,
    for example, a single file is provided for a specific operating system or perhaps
    for a specific feature that isn''t always present. This is to make it possible
    for all platforms to always build all files—it simplifies the build scripts and
    makefiles a lot. A file entirely #ifdefed out hardly adds anything to the build
    time, anyway.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目有时会在整个源文件周围使用#ifdef保护，例如，当为特定操作系统提供单个文件或者也许是为一个不总是存在的特定特性提供文件时。这样做是为了使所有平台都能始终构建所有文件——这大大简化了构建脚本和makefile。一个完全#ifdefed的文件几乎不会增加任何构建时间。
- en: 'Rather than sprinkling the code with #ifdefs, to the extent where it is possible,
    we provide functions and macros that make the code look and work the same, independent
    of present features. Some of those are then empty macros for the builds that lack
    the features.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供函数和宏，使代码看起来和工作起来都是相同的，不论当前特性如何，而不是在代码中到处添加#ifdef。其中一些对于缺乏这些特性的构建来说是空宏。
- en: Both TLS handling and name resolving are handled with an internal API that hides
    the specific implementation and choice of 3rd party software library. That way,
    most of the internals work the same independent of which TLS library or name resolving
    system libcurl is told to use.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: TLS处理和名称解析都是使用内部API处理的，该API隐藏了特定实现和第三方软件库的选择。这样，大部分内部工作都是相同的，不论libcurl被告知使用哪个TLS库或名称解析系统。
- en: Code style
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码风格
- en: Style and code requirements
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 风格和代码要求
- en: Source code that has a common style is easier to read than code that uses different
    styles in different places. It helps making the code feel like one continuous
    code base. Easy-to-read is a very important property of code and helps make it
    easier to review when new things are added and it helps debugging code when developers
    are trying to figure out why things go wrong. A unified style is more important
    than individual contributors having their own personal tastes satisfied.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 具有共同风格的源代码比在不同位置使用不同风格的代码更容易阅读。它有助于使代码感觉像一个连续的代码库。易于阅读是代码的一个非常重要的属性，当新东西被添加时，它有助于使代码更容易审查，并且当开发人员试图弄清楚为什么事情出错时，它有助于调试代码。统一的风格比满足个人品味更重要。
- en: Our C code has a few style rules. Most of them are verified and upheld by the
    lib/checksrc.pl script. Invoked with `make checksrc` or even by default by the
    build system when built after `./configure --enable-debug` has been used.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的C代码有一些样式规则。其中大部分都由 lib/checksrc.pl 脚本验证和维护。可以通过 `make checksrc` 命令调用，甚至在使用
    `./configure --enable-debug` 后构建时默认由构建系统调用。
- en: It is normally not a problem for anyone to follow the guidelines as you just
    need to copy the style already used in the source code, and there are no particularly
    unusual rules in our set of rules.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何人来说，遵循指南通常不是问题，因为您只需复制源代码中已使用的样式，并且在我们的规则集中没有特别异常的规则。
- en: We also work hard on writing code that is warning-free on all the major platforms
    and in general on as many platforms as possible. Code that obviously will cause
    warnings will not be accepted as-is.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也努力编写在所有主要平台上都没有警告的代码，通常在尽可能多的平台上。显然会导致警告的代码不会被原样接受。
- en: 'Some the rules that you won''t be allowed to break are:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您不被允许违反的一些规则是：
- en: Indentation
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩进
- en: We use only spaces for indentation, never TABs. We use two spaces for each new
    open brace.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仅使用空格进行缩进，永远不使用制表符。我们为每个新的开放花括号使用两个空格。
- en: Comments
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: 'Since we write C89 code, // aren''t allowed. They weren''t introduced in the
    C standard until C99\. We use only /* and */ comments:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们编写的是C89代码，// 是不被允许的。它们直到C99标准才被引入。我们只使用 /* 和 */ 进行注释：
- en: '[PRE1]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Long lines
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 长行
- en: 'Source code in curl may never be wider than 80 columns. There are two reasons
    for maintaining this even in the modern era of very large and high resolution
    screens:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: curl 中的源代码不得超过 80 列。即使在现代非常大且高分辨率的屏幕时代，仍有两个原因要保持这一点：
- en: Narrower columns are easier to read than very wide ones. There's a reason newspapers
    have used columns for decades or centuries.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 较窄的列比非常宽的列更容易阅读。报纸几十年甚至几个世纪来都使用栏目有其原因。
- en: Narrower columns allow developers to more easily view multiple pieces of code
    next to each other in different windows. I often have two or three source code
    windows next to each other on the same screen, as well as multiple terminal and
    debugging windows.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 较窄的列允许开发人员更容易地在不同窗口中并排查看多个代码片段。我经常在同一个屏幕上有两三个源代码窗口，以及多个终端和调试窗口。
- en: Open brace on the same line
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开放的花括号位于同一行
- en: 'In if/while/do/for expressions, we write the open brace on the same line as
    the keyword and we then set the closing brace on the same indentation level as
    the initial keyword. Like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在 if/while/do/for 表达式中，我们将开放的花括号与关键字放在同一行，然后我们将闭合的花括号设置在与初始关键字相同缩进级别的位置。就像这样：
- en: '[PRE2]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: else on the following line
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: else 在下一行
- en: 'When adding an `else` clause to a conditional expression using braces, we add
    it on a new line after the closing brace. Like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用花括号为条件表达式添加 `else` 子句时，我们将其添加在闭合花括号的后一行。就像这样：
- en: '[PRE3]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: No space before parentheses
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 括号前不加空格
- en: 'When writing expressions using if/while/do/for, there shall be no space between
    the keyword and the open parenthesis. Like this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 if/while/do/for 写表达式时，关键字与开放括号之间不应有空格。就像这样：
- en: '[PRE4]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Contributing
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贡献
- en: Contributing
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 贡献
- en: Contributing means helping out.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 贡献意味着帮助。
- en: When you contribute anything to the project—code, documentation, bug fixes,
    suggestions or just good advice—we assume you do this with permission and you
    are not breaking any contracts or laws by providing that to us. If you don't have
    permission, don't contribute it to us.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当您向项目贡献任何内容时——代码、文档、错误修复、建议或者只是良好的建议——我们假设您是在有许可的情况下这样做的，并且您提供给我们的内容不会违反任何合同或法律。如果您没有许可，请不要向我们贡献。
- en: Contributing to a project like curl could be many different things. While source
    code is the stuff that is needed to build the products, we are also depending
    on good documentation, testing (both test code and test infrastructure), web content,
    user support and more.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 curl 这样的项目，贡献可能是许多不同的事情。虽然源代码是构建产品所需的东西，但我们还依赖于良好的文档、测试（包括测试代码和测试基础设施）、网络内容、用户支持等。
- en: Send your changes or suggestions to the team and by working together we can
    fix problems, improve functionality, clarify documentation, add features or make
    anything else you help out with land in the proper place. We will make sure improved
    code and docs get merged into the source tree properly and other sorts of contributions
    are suitable received.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的更改或建议发送给团队，通过共同努力，我们可以解决问题，改进功能，澄清文档，添加功能或使您提供帮助的任何其他事情落在正确的位置。我们将确保改进的代码和文档被正确合并到源树中，其他类型的贡献也会得到适当的接受。
- en: Send your contributions on a [mailing list](curl-comm.html), file an issue or
    submit a pull request.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的贡献发送到[邮件列表](curl-comm.html)，提交问题或提交拉取请求。
- en: Suggestions
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 建议
- en: Ideas are easy, implementations are hard. Yes, we do appreciate good ideas and
    suggestions of what to do and how to do it, but the chances that the ideas actually
    turn into real features grow substantially if you also volunteer to participate
    in converting the idea into reality.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 想法容易，实现难。是的，我们确实赞赏好主意和建议该做什么以及如何做，但是如果您也自愿参与将想法转化为现实，那么想法实际变为真实功能的机会就会大大增加。
- en: We already gather ideas in the `TODO` document and we are generally aware of
    the current trends in the popular networking protocols so there is usually no
    need to remind us about those.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在`TODO`文档中收集了想法，我们通常了解流行网络协议的当前趋势，因此通常不需要提醒我们这些。
- en: What to add
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应添加的内容
- en: The best approach to add anything to curl or libcurl is, of course, to first
    bring the idea and suggestion to the curl project team members and then discuss
    with them if the idea is feasible for inclusion and then how an implementation
    is best done—and done in the best possible way to get merged into the source code
    repository, assuming that is what you want.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 向curl或libcurl添加任何内容的最佳方法当然是首先将想法和建议带给curl项目团队成员，然后与他们讨论该想法是否适合包含，以及如何最好地实现——并且以最佳方式将其合并到源代码存储库中，假设这是您想要的。
- en: The project generally approves of functions that improves the support for the
    current protocols, especially features that popular clients or browsers have but
    that curl still lacks.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目通常批准改进对当前协议的支持的功能，特别是流行客户端或浏览器具有但curl仍然缺少的功能。
- en: Of course, you can also add contents to the project that isn't code, like documentation,
    graphics or web site contents, but the general rules apply equally to that.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以向项目添加非代码内容，例如文档、图形或网站内容，但一般规则同样适用。
- en: If you are fixing a problem you have or a problem that others are reporting,
    we will be thrilled to receive your fix and merge it as soon as possible!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在修复您或其他人报告的问题，我们将非常高兴收到您的修复，并尽快将其合并！
- en: What not to add
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无需添加的内容
- en: 'There aren''t any good rules to say what features you can''t add or that we
    will never accept, but let me instead try to mention a few things you should avoid
    to get less friction and to be successful, faster:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何好的规则来说明您不能添加哪些功能或我们永远不会接受的内容，但我想提一些您应该避免以减少摩擦并更快成功的事情：
- en: Do not write up a huge patch first and then send it to the list for discussion.
    Always start out by discussing on the list, and send your initial review requests
    early to get feedback on your design and approach. It saves you from wasting time
    going down a route that might need rewriting in the end anyway!
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要先编写一个巨大的补丁，然后将其发送到列表进行讨论。请始终从列表上讨论开始，并尽早发送您的初始审查请求，以获取有关设计和方法的反馈。这样可以避免您浪费时间沿着最终可能需要重写的道路前进！
- en: When introducing things in the code, you need to follow the style and architecture
    that already exists. When you add code to the ordinary transfer code path, it
    must, for example, work asynchronously in a non-blocking manner. We will not accept
    new code that introduces blocking behaviors—we already have too many of those
    that we haven't managed to remove yet.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在代码中引入新事物时，您需要遵循已经存在的风格和架构。当您向普通的传输代码路径添加代码时，例如，它必须以非阻塞的方式异步工作。我们不会接受引入阻塞行为的新代码——我们已经有太多这样的代码了，而我们尚未设法删除其中的许多。
- en: Quick hacks or dirty solutions that have a high risk of not working on platforms
    you don't run or on architectures you don't know. We don't care if you are in
    a hurry or that it works for you. We do not accept high risk code or code that
    is hard to read or understand.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速的小技巧或有可能无法在您不运行的平台上或您不了解的架构上运行的肮脏解决方案。我们不关心您是否赶时间或它是否对您有效。我们不接受高风险的代码或难以阅读或理解的代码。
- en: Code that breaks the build. Sure, we accept that we sometimes have to add code
    to certain areas that makes the new functionality perhaps depend on a specific
    3rd party library or a specific operating system and similar, but we can **never**
    do that at the expense of all other systems. We don't break the build, and we
    make sure all tests keep running successfully.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打破构建的代码。当然，我们接受有时必须向某些区域添加代码，使新功能可能依赖于特定的第三方库或特定操作系统等，但我们绝不能以牺牲所有其他系统为代价。我们不会破坏构建，并确保所有测试都能成功运行。
- en: git
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: git
- en: Our preferred source control tool is [git](https://git-scm.com/).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首选的源代码控制工具是[git](https://git-scm.com/)。
- en: While git is sometimes not the easiest tool to learn and master, all the basic
    steps a casual developer and contributor needs to know are very straight-forward
    and do not take much time or effort to learn.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 git 有时不是最容易学习和掌握的工具，但对于一个普通的开发者和贡献者所需了解的所有基本步骤都非常直接，学习起来也不需要太多时间或精力。
- en: This book will not help you learn git. All software developers in this day and
    age should learn git anyway.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将不会帮助您学习 git。在当今这个时代，所有的软件开发人员都应该学会 git。
- en: The curl git tree can be browsed with a web browser on our github page at [https://github.com/curl/curl](https://github.com/curl/curl).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的 GitHub 页面上使用 Web 浏览器浏览 curl git 树：[https://github.com/curl/curl](https://github.com/curl/curl)。
- en: 'To check out the curl source code from git, you can clone it like this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 git 中检出 curl 源代码，您可以像这样克隆它：
- en: '[PRE5]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Pull request
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拉取请求
- en: A very popular and convenient way to make your own changes and contribute them
    back to the project is by doing a so-called pull request on github.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一种非常流行和便捷的方式是通过在 GitHub 上进行所谓的拉取请求，对您自己的更改进行贡献并将它们带回项目中。
- en: First, you create your own version of the source tree, called a fork, on the
    github web site. That way you get your own version of the curl git tree that you
    can clone to a local copy.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您可以在 GitHub 网站上创建自己的源码树版本，称为 fork。这样，您就可以获得您自己的 curl git 树的版本，您可以将其克隆到本地副本。
- en: You edit your own local copy, commit the changes, push them to the git repository
    on github and then on the github web site you can select to create a pull request
    based on your changes done to your local repository clone of the original curl
    repository.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您编辑自己的本地副本，提交更改，将它们推送到 GitHub 上的 git 仓库，然后在 GitHub 网站上，您可以选择基于您对原始 curl 仓库的本地仓库克隆所做的更改来创建一个拉取请求。
- en: We recommend doing your work meant for a pull request in a dedicated separate
    branch and not in master, just to make it easier for you to update a pull request,
    like after review, for example, or if you realize it was a dead end and you decide
    to just throw it away.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您在专门的单独分支中执行用于拉取请求的工作，而不是在主分支中执行，这样可以更轻松地更新拉取请求，例如在审查之后，或者如果您意识到这是一条死路并决定将其丢弃。
- en: Make a patch for the mailing list
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为邮件列表制作一个补丁
- en: Even if you opt to not make a pull request but prefer the old fashioned and
    trusted method of sending a patch to the curl-library mailing list, it is still
    a good to work in a local git branch and commit your changes there.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您选择不发起拉取请求，而更喜欢发送补丁到 curl-library 邮件列表的老式和可信赖的方法，也最好在本地 git 分支中工作并在那里提交您的更改。
- en: A branch makes it easy to edit and rebase when you need to change things and
    it makes it easy to keep syncing to the master branch when things are updated
    upstream.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 分支使得在需要更改时轻松编辑和重新基础，并且使得在上游更新时轻松同步到主分支变得容易。
- en: Once your commits are fine enough to get sent to the mailing list, you just
    create patches with `git format-patch` and send them away. Even more fancy users
    go directly to `git send-email` and have git send the e-mail itself!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的提交足够好，可以发送到邮件列表，您只需使用 `git format-patch` 创建补丁并发送它们。更高级的用户甚至直接使用 `git send-email`
    并让 git 自己发送电子邮件！
- en: git commit style
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: git 提交风格
- en: 'When you commit a patch to git, you give it a commit message that describes
    the change you are committing. We have a certain style in the project that we
    ask you to use:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当您向 git 提交补丁时，您会为其提供一个描述所做更改的提交消息。我们在项目中有一定的风格，我们要求您使用：
- en: '[PRE6]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Don't forget to use `git commit --author="Jane Doe <jane@example.com>"` if you
    commit someone else's work, and make sure that you have your own user and e-mail
    setup correctly in git before you commit!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在您提交他人的工作时使用 `git commit --author="Jane Doe <jane@example.com>"`，并确保在提交之前在
    git 中正确设置了您自己的用户和电子邮件！
- en: 'The author and the *-by: lines are, of course, there to make sure we give the
    proper credit in the project. We do not want to take someone else''s work without
    clearly attributing where it comes from. Giving correct credit is of utmost importance!'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '作者和 *-by: 行，当然，是为了确保我们在项目中给予适当的认可。我们不希望在没有清楚标明来源的情况下使用他人的工作。正确给予认可是至关重要的！'
- en: Who decides what goes in?
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 谁来决定什么内容进入？
- en: First, it might not be obvious to everyone but there is, of course, only a limited
    set of people that can actually merge commits into the actual official git repository.
    Let's call them the core team.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，对于并不明显的一点是，并非所有人都可以将提交合并到实际的官方 git 仓库中。让我们称他们为核心团队。
- en: Everyone else can fork off their own curl repository to which they can commit
    and push changes and host them online and build their own curl versions from and
    so on, but in order to get changes into the *official* repository they need to
    be pushed by a trusted person.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都可以派生出自己的 curl 代码库，可以向其中提交和推送更改，并将其在线托管并构建自己的 curl 版本等等，但是要想将更改纳入*官方*代码库，必须由信任的人推送。
- en: The core team is a small set of curl developers who have been around for a several
    years and that have shown that they are skilled developers and that they fully
    comprehend the values and the style of development we do in this project. They
    are some of the people listed in the [The development team](curl-devteam.html)
    section.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 核心团队是一小部分 curl 开发人员，他们已经在这个项目中工作了几年，并且已经证明他们是熟练的开发人员，完全理解我们在这个项目中所做的价值观和开发风格。他们是
    [开发团队](curl-devteam.html) 部分中列出的一些人。
- en: You can always bring a discussion to the mailing list and motivation why you
    think your changes should get accepted, or perhaps even object to other changes
    that are getting in and so forth. You can even suggest yourself or someone else
    to be given "push rights" and become one of the selected few in that team.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时将讨论带到邮件列表，并说明你认为你的更改应该被接受的动机，或者甚至反对其他正在被接受的更改等等。
- en: Daniel remains the project leader and while it is very rarely needed, he has
    the final say in debates that don't seem to sway in either direction or fail to
    reach some sort of consensus.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 丹尼尔仍然是项目负责人，虽然很少需要，但他在辩论中拥有最终决定权，这些辩论似乎无法偏向任何一方或未能达成某种共识。
- en: Reporting vulnerabilities
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞报告
- en: Reporting vulnerabilities
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 漏洞报告
- en: All known and public curl or libcurl related vulnerabilities are listed on [the
    curl web site security page](https://curl.haxx.se/docs/security.html).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 所有已知的和公开的 curl 或 libcurl 相关的漏洞都列在 [curl 网站的安全页面](https://curl.haxx.se/docs/security.html)
    上。
- en: Security vulnerabilities should not be entered in the project's public bug tracker
    unless the necessary configuration is in place to limit access to the issue to
    only the reporter and the project's security team.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 安全漏洞不应该输入到项目的公开错误跟踪器中，除非已经配置好了必要的配置，以限制只有报告者和项目的安全团队才能访问该问题。
- en: Vulnerability handling
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 漏洞处理
- en: The typical process for handling a new security vulnerability is as follows.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 处理新安全漏洞的典型流程如下。
- en: No information should be made public about a vulnerability until it is formally
    announced at the end of this process. That means, for example, that a bug tracker
    entry must NOT be created to track the issue since that will make the issue public
    and it should not be discussed on any of the project's public mailing lists. Also
    messages associated with any commits should not make any reference to the security
    nature of the commit if done prior to the public announcement.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程结束前，不应该公开任何有关漏洞的信息。这意味着，例如，不应该创建 bug 跟踪器条目来跟踪该问题，因为这会使问题公开，并且不应该在项目的任何公开邮件列表上讨论该问题。此外，如果在公开公告之前进行了提交，则与任何提交相关的消息都不应提及提交的安全性质。
- en: The person discovering the issue, the reporter, reports the vulnerability privately
    to `curl-security@haxx.se`. That's an e-mail alias that reaches a handful of selected
    and trusted people.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现问题的人，即报告者，私下向`curl-security@haxx.se`报告漏洞。这是一个邮件别名，可以联系到几个被选择和信任的人。
- en: Messages that do not relate to the reporting or managing of an undisclosed security
    vulnerability in curl or libcurl are ignored and no further action is required.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 curl 或 libcurl 中未公开的安全漏洞的报告或管理无关的消息将被忽略，并且不需要进一步的操作。
- en: A person in the security team sends an e-mail to the original reporter to acknowledge
    the report.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全团队的一名成员会发送电子邮件给原始报告者，以确认报告。
- en: The security team investigates the report and either rejects it or accepts it.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全团队调查报告，要么拒绝，要么接受。
- en: If the report is rejected, the team writes to the reporter to explain why.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果报告被拒绝，团队会写信给报告者解释原因。
- en: If the report is accepted, the team writes to the reporter to let him/her know
    it is accepted and that they are working on a fix.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果报告被接受，团队会写信给报告者，让他/她知道报告被接受，并且他们正在解决问题。
- en: The security team discusses the problem, works out a fix, considers the impact
    of the problem and suggests a release schedule. This discussion should involve
    the reporter as much as possible.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全团队讨论问题，制定修复方案，考虑问题的影响并建议发布时间表。这次讨论应尽可能涉及报告者。
- en: The release of the information should be "as soon as possible" and is most often
    synced with an upcoming release that contains the fix. If the reporter, or anyone
    else, thinks the next planned release is too far away then a separate earlier
    release for security reasons should be considered.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息发布应尽快进行，并且通常与包含修复的即将发布的版本同步。如果报告者或其他人认为下一个计划的发布时间太遥远，则应考虑出于安全原因考虑提前发布。
- en: Write a security advisory draft about the problem that explains what the problem
    is, its impact, which versions it affects, any solutions or workarounds and when
    the fix was released, making sure to credit all contributors properly.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 撰写有关问题的安全咨询草案，解释问题是什么，其影响，影响的版本，任何解决方案或解决方法以及修复发布的时间，确保适当地表彰所有贡献者。
- en: Request a CVE number from [distros@openwall](http://oss-security.openwall.org/wiki/mailing-lists/distros)
    when also informing and preparing them for the upcoming public security vulnerability
    announcement—attach the advisory draft for information. Note that 'distros' won't
    accept an embargo longer than 19 days.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[distros@openwall](http://oss-security.openwall.org/wiki/mailing-lists/distros)请求CVE编号时，同时通知并准备他们即将公开的安全漏洞公告——附上咨询草案以供参考。请注意，“distros”不会接受长于19天的禁令。
- en: Update the "security advisory" with the CVE number.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CVE编号更新“安全咨询”。
- en: The security team commits the fix in a private branch. The commit message should
    ideally contain the CVE number. This fix is usually also distributed to the 'distros'
    mailing list to allow them to use the fix prior to the public announcement.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全团队在私有分支中提交修复。提交消息理想情况下应包含CVE编号。通常也会将此修复分发给“distros”邮件列表，以便他们在公开公告之前使用修复。
- en: At the day of the next release, the private branch is merged into the master
    branch and pushed. Once pushed, the information is accessible to the public and
    the actual release should follow suit immediately afterwards.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下一个发布日，私有分支合并到主分支并推送。一旦推送，信息就对公众可见，实际发布应立即跟进。
- en: The project team creates a release that includes the fix.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目团队创建包含修复的发布版本。
- en: The project team announces the release and the vulnerability to the world in
    the same manner we always announce releases—it gets sent to the curl-announce,
    curl-library and curl-users mailing lists.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目团队以与我们通常宣布发布的方式向全世界公布发布和漏洞信息——它会发送到curl-announce、curl-library和curl-users邮件列表。
- en: The security web page on the web site should get the new vulnerability mentioned.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站上的安全页面应提及新的漏洞。
- en: curl-security@haxx.se
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: curl-security@haxx.se
- en: Who is on this list? There are a couple of criteria you must meet, and then
    we might ask you to join the list or you can ask to join it. It really isn't very
    formal. We basically only require that you have a long-term presence in the curl
    project and you have shown an understanding for the project and its way of working.
    You must have been around for a good while and you should have no plans on vanishing
    in the near future.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 谁在这个名单上？您必须符合一些标准，然后我们可能会邀请您加入名单，或者您可以要求加入。这真的不是很正式。我们基本上只要求您在curl项目中有长期存在，并且您已经表现出对项目及其工作方式的理解。您必须已经在这里待了一段时间，而且您不应该计划在不久的将来消失。
- en: We do not make the list of participants public mostly because it tends to vary
    somewhat over time and a list somewhere will only risk getting outdated.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会公开列出参与者的名单，主要是因为随着时间的推移，名单往往会有所变化，而且某处的名单只会增加过时的风险。
- en: Web site
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网站
- en: Web site source code
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网站源代码
- en: Most of the curl web site is also available in a public git repository, although
    separate from the source code repository since it generally isn't interesting
    to the same people and we can maintain a different list of people that have push
    rights, etc.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分curl网站也可以在公共git存储库中找到，尽管与源代码存储库分开，因为它通常对同一群人不感兴趣，我们可以维护一个不同的具有推送权限等人员名单。
- en: 'The web site git repository is available on github at this URL: [https://github.com/curl/curl-www](https://github.com/curl/curl-www)
    and you can clone a copy of the web code like this:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 网站git存储库可在此URL上找到：[https://github.com/curl/curl-www](https://github.com/curl/curl-www)，您可以像这样克隆网页代码的副本：
- en: '[PRE7]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Building the web
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建网站
- en: The web site is an old custom-made setup that mostly builds static HTML files
    from a set of source files. The sources files are preprocessed with what is basically
    a souped-up C preprocessor called [fcpp](https://daniel.haxx.se/projects/fcpp/)
    and a set of perl scripts. The man pages get converted to HTML with [roffit](https://daniel.haxx.se/projects/roffit/).
    Make sure fcpp, perl, roffit, make and curl are all in your $PATH.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网站是一个老式的定制设置，主要是从一组源文件构建静态 HTML 文件。这些源文件经过了一种基本上是增强版 C 预处理器（[fcpp](https://daniel.haxx.se/projects/fcpp/)）和一组
    Perl 脚本的预处理。man 手册通过 [roffit](https://daniel.haxx.se/projects/roffit/) 转换为 HTML。确保
    fcpp、perl、roffit、make 和 curl 都在你的 $PATH 中。
- en: Once you have cloned the git repository the first time, invoke `sh bootstrap.sh`
    once to get a symlink and some some initial local files setup, and then you can
    build the web site locally by invoking `make` in the source root tree.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你第一次克隆了 git 仓库，就调用一次 `sh bootstrap.sh` 来获取一个符号链接和一些初始的本地文件设置，然后你可以在源根目录中调用
    `make` 来本地构建网站。
- en: Note that this doesn't make you a complete web site mirror, as some scripts
    and files are only available on the real actual site, but should give you enough
    to let you view most HTML pages locally.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这并不意味着你成为了完整的网站镜像，因为一些脚本和文件只在实际的真实网站上可用，但应该足够让你在本地查看大多数 HTML 页面。
