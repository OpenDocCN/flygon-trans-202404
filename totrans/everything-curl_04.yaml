- en: The source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source code is, of course, the actual engine parts of this project. After
    all, it is a software project.
  prefs: []
  type: TYPE_NORMAL
- en: curl and libcurl are written in C.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting and download
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can always find the source code for the latest curl and libcurl release
    on the [official curl web site](https://curl.haxx.se/). From there you can also
    find alternative mirrors that host copies and there are checksums and digital
    signatures provided to help you verify that what ends up on your local system
    when you download these files are the same bytes in the same order as were originally
    uploaded there by the curl team.
  prefs: []
  type: TYPE_NORMAL
- en: If you instead would rather work directly with the curl source code off our
    source code repository, you find all details in [the curl github repository](https://github.com/curl/curl/).
  prefs: []
  type: TYPE_NORMAL
- en: Clone the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will get the latest curl code downloaded and unpacked in a directory on
    your local system.
  prefs: []
  type: TYPE_NORMAL
- en: Code layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The curl source code tree is neither large nor complicated. A key thing to remember
    is, perhaps, that libcurl is the library and that library is the biggest component
    of the curl command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: root
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We try to keep the number of files in the source tree root to a minimum. You
    will see a slight difference in files if you check a release archive compared
    to what is stored in the git repository as several files are generated by the
    release scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the more notable ones include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`buildconf`: used to build configure and more when building curl from source
    out of the git repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`buildconf.bat`: the Windows version of buildconf. Run this after having checked
    out the full source code from git.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CHANGES`: generated at release and put into the release archive. It contains
    the 1000 latest changes to the source repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`configure`: a generated script that is used on Unix-like systems to generate
    a setup when building curl.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COPYING`: the license detailing the rules for your using the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GIT-INFO`: only present in git and contains information about how to build
    curl after having checked out the code from git.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maketgz`: the script used to produce release archives and daily snapshots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README`: a short summary of what curl and libcurl are.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RELEASE-NOTES`: contains the changes done for the latest release; when found
    in git it contains the changes done since the previous release that are destined
    to end up in the coming release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lib
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This directory contains the full source code for libcurl. It is the same source
    code for all platformsâ€”over one hundred C source files and a few more private
    header files. The header files used when building applications against libcurl
    are not stored in this directory; see include/curl for those.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on what features are enabled in your own build and what functions
    your platform provides, some of the source files or portions of the source files
    may contain code that is not used in your particular build.
  prefs: []
  type: TYPE_NORMAL
- en: lib/vtls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The VTLS sub section within libcurl is the home of all the TLS backends libcurl
    can be built to support. The "virtual" TLS internal API is a common API that is
    used within libcurl to access TLS and crypto functions without the main code knowing
    exactly which TLS library that is used. This allows the person who builds libcurl
    to select from a wide variety TLS libraries to build with.
  prefs: []
  type: TYPE_NORMAL
- en: We also maintain a [SSL comparison table](https://curl.haxx.se/docs/ssl-compared.html)
    on the web site to aid users.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenSSL: the (by far) most popular TLS library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BoringSSL: an OpenSSL fork maintained by Google. It will make libcurl disable
    a few features due to lacking some functionality in the library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LibreSSL: an OpenSSL fork maintained by the OpenBSD team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NSS: a full-blown TLS library perhaps most known for being used by the Firefox
    web browser. This is the default TLS backend for curl on Fedora and Redhat systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GnuTLS: a full-blown TLS library used by default by the Debian packaged curl.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'mbedTLS: (formerly known as PolarSSL) is a TLS library more targeted towards
    the embedded market.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WolfSSL: (formerly known as cyaSSL) is a TLS library more targeted towards
    the embedded market.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'axTLS: a minuscule TLS library focused on a requiring a small footprint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SChannel: the native TLS library on Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SecureTransport: the native TLS library on Mac OS X.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GSKit: the native TLS library on OS/400.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: src
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This directory holds the source code for the curl command-line tool. It is the
    same source code for all platforms that run the tool.
  prefs: []
  type: TYPE_NORMAL
- en: Most of what the command-line tool does is to convert given command line options
    into the corresponding libcurl options or set of options and then makes sure to
    issue them correctly to drive the network transfer according to the user's wishes.
  prefs: []
  type: TYPE_NORMAL
- en: This code uses libcurl just as any other application would.
  prefs: []
  type: TYPE_NORMAL
- en: include/curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here are the public header files that are provided for libcurl-using applications.
    Some of them are generated at configure or release time so they do not look identical
    in the git repository as they do in a release archive.
  prefs: []
  type: TYPE_NORMAL
- en: With modern libcurl, all an application is expected to include in its C source
    code is `#include <curl/curl.h>`
  prefs: []
  type: TYPE_NORMAL
- en: docs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main documentation location. Text files in this directory are typically
    plain text files. We have slowly started to move towards Markdown format so a
    few (but hopefully growing number of) files use the .md extension to signify that.
  prefs: []
  type: TYPE_NORMAL
- en: Most of these documents are also shown on the curl web site automatically converted
    from text to a web friendly format/look.
  prefs: []
  type: TYPE_NORMAL
- en: '`BINDINGS`: lists all known libcurl language bindings and where to find them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BUGS`: how to report bugs and where'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CODE_OF_CONDUCT.md`: how we expect people to behave in this project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CONTRIBUTE`: what to think about when contributing to the project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`curl.1`: the curl command-line tool man page, in nroff format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`curl-config.1`: the curl-config man page, in nroff format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FAQ`: frequently asked questions about various curl-related subjects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FEATURES`: an incomplete list of curl features'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HISTORY`: describes how the project started and has evolved over the years'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTP2.md`: how to use HTTP/2 with curl and libcurl'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTP-COOKIES`: how curl supports and works with HTTP cookies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`: a basic HTML page as a documentation index page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INSTALL`: how to build and install curl and libcurl from source'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INSTALL.cmake`: how to build curl and libcurl with CMake'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INSTALL.devcpp`: how to build curl and libcurl with devcpp'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INTERNALS`: details curl and libcurl internal structures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KNOWN_BUGS`: list of known bugs and problems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LICENSE-MIXING`: describes how to combine different third party modules and
    their individual licenses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MAIL-ETIQUETTE`: this is how to communicate on our mailing lists'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MANUAL`: a tutorial-like guide on how to use curl'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mk-ca-bundle.1`: the mk-ca-bundle tool man page, in nroff format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README.cmake`: CMake-specific details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README.netware`: Netware-specific details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README.win32`: win32-specific details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RELEASE-PROCEDURE`: how to do a curl and libcurl release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RESOURCES`: further resources for further reading on what, why and how curl
    does things'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ROADMAP.md`: what we want to work on in the future'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SECURITY`: how we work on security vulnerabilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SSLCERTS`: TLS certificate handling documented'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SSL-PROBLEMS`: common SSL problems and their causes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THANKS`: thanks to this extensive list of friendly people, curl exists today!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TheArtOfHttpScripting`: a tutorial into HTTP scripting with curl'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TODO`: things we or you can work on implementing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VERSIONS`: how the version numbering of libcurl works'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: docs/libcurl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All libcurl functions have their own man pages in individual files with .3 extensions,
    using nroff format, in this directory. The are also a few other files that are
    described below.
  prefs: []
  type: TYPE_NORMAL
- en: '`ABI`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libcurl.3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libcurl-easy.3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libcurl-errors.3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libcurl.m4`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libcurl-multi.3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libcurl-share.3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libcurl-thread.3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libcurl-tutorial.3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`symbols-in-versions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: docs/libcurl/opts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This directory contains the man pages for the individual options for three different
    libcurl functions.
  prefs: []
  type: TYPE_NORMAL
- en: '`curl_easy_setopt()` options start with `CURLOPT_`, `curl_multi_setopt()` options
    start with `CURLMOPT_` and `curl_easy_getinfo()` options start with `CURLINFO_`.'
  prefs: []
  type: TYPE_NORMAL
- en: docs/examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Contains around 100 stand-alone examples that are meant to help readers understand
    how libcurl can be used.
  prefs: []
  type: TYPE_NORMAL
- en: See also the [libcurl examples](libcurl-examples.md) section of this book.
  prefs: []
  type: TYPE_NORMAL
- en: scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Handy scripts.
  prefs: []
  type: TYPE_NORMAL
- en: '`contributors.sh`: extracts all contributors from the git repository since
    a given hash/tag. The purpose is to generate a list for the RELEASE-NOTES file
    and to allow manually added names to remain in there even on updates. The script
    uses the ''THANKS-filter` file to rewrite some names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contrithanks.sh`: extracts contributors from the git repository since a given
    hash/tag, filters out all the names that are already mentioned in `THANKS`, and
    then outputs `THANKS` to stdout with the list of new contributors appended at
    the end; it''s meant to allow easier updates of the THANKS document. The script
    uses the ''THANKS-filter` file to rewrite some names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log2changes.pl`: generates the `CHANGES` file for releases, as used by the
    release script. It simply converts git log output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zsh.pl`: helper script to provide curl command-line completions to users of
    the zsh shell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling build options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Handling different build options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The curl and libcurl source code have been carefully written to build and run
    on virtually every computer platform in existence. This can only be done through
    hard work and by adhering to a few guidelines (and, of course, a fair amount of
    testing).
  prefs: []
  type: TYPE_NORMAL
- en: 'A golden rule is to always add #ifdefs that checks for specific features, and
    then have the setup scripts (configure or CMake or hard-coded) check for the presence
    of said features in a user''s computer setup before the program is compiled there.
    Additionally and as a bonus, thanks to this way of writing the code, some features
    can be explicitly turned off even if they are present in the system and *could*
    be used. Examples of that would be when users want to, for example, build a version
    of the library with a smaller footprint or with support for certain protocols
    disabled, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The project sometimes uses #ifdef protection around entire source files when,
    for example, a single file is provided for a specific operating system or perhaps
    for a specific feature that isn''t always present. This is to make it possible
    for all platforms to always build all filesâ€”it simplifies the build scripts and
    makefiles a lot. A file entirely #ifdefed out hardly adds anything to the build
    time, anyway.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than sprinkling the code with #ifdefs, to the extent where it is possible,
    we provide functions and macros that make the code look and work the same, independent
    of present features. Some of those are then empty macros for the builds that lack
    the features.'
  prefs: []
  type: TYPE_NORMAL
- en: Both TLS handling and name resolving are handled with an internal API that hides
    the specific implementation and choice of 3rd party software library. That way,
    most of the internals work the same independent of which TLS library or name resolving
    system libcurl is told to use.
  prefs: []
  type: TYPE_NORMAL
- en: Code style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Style and code requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Source code that has a common style is easier to read than code that uses different
    styles in different places. It helps making the code feel like one continuous
    code base. Easy-to-read is a very important property of code and helps make it
    easier to review when new things are added and it helps debugging code when developers
    are trying to figure out why things go wrong. A unified style is more important
    than individual contributors having their own personal tastes satisfied.
  prefs: []
  type: TYPE_NORMAL
- en: Our C code has a few style rules. Most of them are verified and upheld by the
    lib/checksrc.pl script. Invoked with `make checksrc` or even by default by the
    build system when built after `./configure --enable-debug` has been used.
  prefs: []
  type: TYPE_NORMAL
- en: It is normally not a problem for anyone to follow the guidelines as you just
    need to copy the style already used in the source code, and there are no particularly
    unusual rules in our set of rules.
  prefs: []
  type: TYPE_NORMAL
- en: We also work hard on writing code that is warning-free on all the major platforms
    and in general on as many platforms as possible. Code that obviously will cause
    warnings will not be accepted as-is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some the rules that you won''t be allowed to break are:'
  prefs: []
  type: TYPE_NORMAL
- en: Indentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use only spaces for indentation, never TABs. We use two spaces for each new
    open brace.
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since we write C89 code, // aren''t allowed. They weren''t introduced in the
    C standard until C99\. We use only /* and */ comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Long lines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Source code in curl may never be wider than 80 columns. There are two reasons
    for maintaining this even in the modern era of very large and high resolution
    screens:'
  prefs: []
  type: TYPE_NORMAL
- en: Narrower columns are easier to read than very wide ones. There's a reason newspapers
    have used columns for decades or centuries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Narrower columns allow developers to more easily view multiple pieces of code
    next to each other in different windows. I often have two or three source code
    windows next to each other on the same screen, as well as multiple terminal and
    debugging windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open brace on the same line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In if/while/do/for expressions, we write the open brace on the same line as
    the keyword and we then set the closing brace on the same indentation level as
    the initial keyword. Like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: else on the following line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When adding an `else` clause to a conditional expression using braces, we add
    it on a new line after the closing brace. Like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: No space before parentheses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When writing expressions using if/while/do/for, there shall be no space between
    the keyword and the open parenthesis. Like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Contributing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Contributing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Contributing means helping out.
  prefs: []
  type: TYPE_NORMAL
- en: When you contribute anything to the projectâ€”code, documentation, bug fixes,
    suggestions or just good adviceâ€”we assume you do this with permission and you
    are not breaking any contracts or laws by providing that to us. If you don't have
    permission, don't contribute it to us.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to a project like curl could be many different things. While source
    code is the stuff that is needed to build the products, we are also depending
    on good documentation, testing (both test code and test infrastructure), web content,
    user support and more.
  prefs: []
  type: TYPE_NORMAL
- en: Send your changes or suggestions to the team and by working together we can
    fix problems, improve functionality, clarify documentation, add features or make
    anything else you help out with land in the proper place. We will make sure improved
    code and docs get merged into the source tree properly and other sorts of contributions
    are suitable received.
  prefs: []
  type: TYPE_NORMAL
- en: Send your contributions on a [mailing list](curl-comm.html), file an issue or
    submit a pull request.
  prefs: []
  type: TYPE_NORMAL
- en: Suggestions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ideas are easy, implementations are hard. Yes, we do appreciate good ideas and
    suggestions of what to do and how to do it, but the chances that the ideas actually
    turn into real features grow substantially if you also volunteer to participate
    in converting the idea into reality.
  prefs: []
  type: TYPE_NORMAL
- en: We already gather ideas in the `TODO` document and we are generally aware of
    the current trends in the popular networking protocols so there is usually no
    need to remind us about those.
  prefs: []
  type: TYPE_NORMAL
- en: What to add
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The best approach to add anything to curl or libcurl is, of course, to first
    bring the idea and suggestion to the curl project team members and then discuss
    with them if the idea is feasible for inclusion and then how an implementation
    is best doneâ€”and done in the best possible way to get merged into the source code
    repository, assuming that is what you want.
  prefs: []
  type: TYPE_NORMAL
- en: The project generally approves of functions that improves the support for the
    current protocols, especially features that popular clients or browsers have but
    that curl still lacks.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can also add contents to the project that isn't code, like documentation,
    graphics or web site contents, but the general rules apply equally to that.
  prefs: []
  type: TYPE_NORMAL
- en: If you are fixing a problem you have or a problem that others are reporting,
    we will be thrilled to receive your fix and merge it as soon as possible!
  prefs: []
  type: TYPE_NORMAL
- en: What not to add
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There aren''t any good rules to say what features you can''t add or that we
    will never accept, but let me instead try to mention a few things you should avoid
    to get less friction and to be successful, faster:'
  prefs: []
  type: TYPE_NORMAL
- en: Do not write up a huge patch first and then send it to the list for discussion.
    Always start out by discussing on the list, and send your initial review requests
    early to get feedback on your design and approach. It saves you from wasting time
    going down a route that might need rewriting in the end anyway!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When introducing things in the code, you need to follow the style and architecture
    that already exists. When you add code to the ordinary transfer code path, it
    must, for example, work asynchronously in a non-blocking manner. We will not accept
    new code that introduces blocking behaviorsâ€”we already have too many of those
    that we haven't managed to remove yet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick hacks or dirty solutions that have a high risk of not working on platforms
    you don't run or on architectures you don't know. We don't care if you are in
    a hurry or that it works for you. We do not accept high risk code or code that
    is hard to read or understand.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code that breaks the build. Sure, we accept that we sometimes have to add code
    to certain areas that makes the new functionality perhaps depend on a specific
    3rd party library or a specific operating system and similar, but we can **never**
    do that at the expense of all other systems. We don't break the build, and we
    make sure all tests keep running successfully.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our preferred source control tool is [git](https://git-scm.com/).
  prefs: []
  type: TYPE_NORMAL
- en: While git is sometimes not the easiest tool to learn and master, all the basic
    steps a casual developer and contributor needs to know are very straight-forward
    and do not take much time or effort to learn.
  prefs: []
  type: TYPE_NORMAL
- en: This book will not help you learn git. All software developers in this day and
    age should learn git anyway.
  prefs: []
  type: TYPE_NORMAL
- en: The curl git tree can be browsed with a web browser on our github page at [https://github.com/curl/curl](https://github.com/curl/curl).
  prefs: []
  type: TYPE_NORMAL
- en: 'To check out the curl source code from git, you can clone it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Pull request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A very popular and convenient way to make your own changes and contribute them
    back to the project is by doing a so-called pull request on github.
  prefs: []
  type: TYPE_NORMAL
- en: First, you create your own version of the source tree, called a fork, on the
    github web site. That way you get your own version of the curl git tree that you
    can clone to a local copy.
  prefs: []
  type: TYPE_NORMAL
- en: You edit your own local copy, commit the changes, push them to the git repository
    on github and then on the github web site you can select to create a pull request
    based on your changes done to your local repository clone of the original curl
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend doing your work meant for a pull request in a dedicated separate
    branch and not in master, just to make it easier for you to update a pull request,
    like after review, for example, or if you realize it was a dead end and you decide
    to just throw it away.
  prefs: []
  type: TYPE_NORMAL
- en: Make a patch for the mailing list
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even if you opt to not make a pull request but prefer the old fashioned and
    trusted method of sending a patch to the curl-library mailing list, it is still
    a good to work in a local git branch and commit your changes there.
  prefs: []
  type: TYPE_NORMAL
- en: A branch makes it easy to edit and rebase when you need to change things and
    it makes it easy to keep syncing to the master branch when things are updated
    upstream.
  prefs: []
  type: TYPE_NORMAL
- en: Once your commits are fine enough to get sent to the mailing list, you just
    create patches with `git format-patch` and send them away. Even more fancy users
    go directly to `git send-email` and have git send the e-mail itself!
  prefs: []
  type: TYPE_NORMAL
- en: git commit style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you commit a patch to git, you give it a commit message that describes
    the change you are committing. We have a certain style in the project that we
    ask you to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to use `git commit --author="Jane Doe <jane@example.com>"` if you
    commit someone else's work, and make sure that you have your own user and e-mail
    setup correctly in git before you commit!
  prefs: []
  type: TYPE_NORMAL
- en: 'The author and the *-by: lines are, of course, there to make sure we give the
    proper credit in the project. We do not want to take someone else''s work without
    clearly attributing where it comes from. Giving correct credit is of utmost importance!'
  prefs: []
  type: TYPE_NORMAL
- en: Who decides what goes in?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, it might not be obvious to everyone but there is, of course, only a limited
    set of people that can actually merge commits into the actual official git repository.
    Let's call them the core team.
  prefs: []
  type: TYPE_NORMAL
- en: Everyone else can fork off their own curl repository to which they can commit
    and push changes and host them online and build their own curl versions from and
    so on, but in order to get changes into the *official* repository they need to
    be pushed by a trusted person.
  prefs: []
  type: TYPE_NORMAL
- en: The core team is a small set of curl developers who have been around for a several
    years and that have shown that they are skilled developers and that they fully
    comprehend the values and the style of development we do in this project. They
    are some of the people listed in the [The development team](curl-devteam.html)
    section.
  prefs: []
  type: TYPE_NORMAL
- en: You can always bring a discussion to the mailing list and motivation why you
    think your changes should get accepted, or perhaps even object to other changes
    that are getting in and so forth. You can even suggest yourself or someone else
    to be given "push rights" and become one of the selected few in that team.
  prefs: []
  type: TYPE_NORMAL
- en: Daniel remains the project leader and while it is very rarely needed, he has
    the final say in debates that don't seem to sway in either direction or fail to
    reach some sort of consensus.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reporting vulnerabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All known and public curl or libcurl related vulnerabilities are listed on [the
    curl web site security page](https://curl.haxx.se/docs/security.html).
  prefs: []
  type: TYPE_NORMAL
- en: Security vulnerabilities should not be entered in the project's public bug tracker
    unless the necessary configuration is in place to limit access to the issue to
    only the reporter and the project's security team.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability handling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The typical process for handling a new security vulnerability is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: No information should be made public about a vulnerability until it is formally
    announced at the end of this process. That means, for example, that a bug tracker
    entry must NOT be created to track the issue since that will make the issue public
    and it should not be discussed on any of the project's public mailing lists. Also
    messages associated with any commits should not make any reference to the security
    nature of the commit if done prior to the public announcement.
  prefs: []
  type: TYPE_NORMAL
- en: The person discovering the issue, the reporter, reports the vulnerability privately
    to `curl-security@haxx.se`. That's an e-mail alias that reaches a handful of selected
    and trusted people.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messages that do not relate to the reporting or managing of an undisclosed security
    vulnerability in curl or libcurl are ignored and no further action is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A person in the security team sends an e-mail to the original reporter to acknowledge
    the report.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security team investigates the report and either rejects it or accepts it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the report is rejected, the team writes to the reporter to explain why.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the report is accepted, the team writes to the reporter to let him/her know
    it is accepted and that they are working on a fix.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security team discusses the problem, works out a fix, considers the impact
    of the problem and suggests a release schedule. This discussion should involve
    the reporter as much as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release of the information should be "as soon as possible" and is most often
    synced with an upcoming release that contains the fix. If the reporter, or anyone
    else, thinks the next planned release is too far away then a separate earlier
    release for security reasons should be considered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a security advisory draft about the problem that explains what the problem
    is, its impact, which versions it affects, any solutions or workarounds and when
    the fix was released, making sure to credit all contributors properly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request a CVE number from [distros@openwall](http://oss-security.openwall.org/wiki/mailing-lists/distros)
    when also informing and preparing them for the upcoming public security vulnerability
    announcementâ€”attach the advisory draft for information. Note that 'distros' won't
    accept an embargo longer than 19 days.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the "security advisory" with the CVE number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security team commits the fix in a private branch. The commit message should
    ideally contain the CVE number. This fix is usually also distributed to the 'distros'
    mailing list to allow them to use the fix prior to the public announcement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the day of the next release, the private branch is merged into the master
    branch and pushed. Once pushed, the information is accessible to the public and
    the actual release should follow suit immediately afterwards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project team creates a release that includes the fix.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project team announces the release and the vulnerability to the world in
    the same manner we always announce releasesâ€”it gets sent to the curl-announce,
    curl-library and curl-users mailing lists.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security web page on the web site should get the new vulnerability mentioned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: curl-security@haxx.se
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Who is on this list? There are a couple of criteria you must meet, and then
    we might ask you to join the list or you can ask to join it. It really isn't very
    formal. We basically only require that you have a long-term presence in the curl
    project and you have shown an understanding for the project and its way of working.
    You must have been around for a good while and you should have no plans on vanishing
    in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: We do not make the list of participants public mostly because it tends to vary
    somewhat over time and a list somewhere will only risk getting outdated.
  prefs: []
  type: TYPE_NORMAL
- en: Web site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web site source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the curl web site is also available in a public git repository, although
    separate from the source code repository since it generally isn't interesting
    to the same people and we can maintain a different list of people that have push
    rights, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'The web site git repository is available on github at this URL: [https://github.com/curl/curl-www](https://github.com/curl/curl-www)
    and you can clone a copy of the web code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Building the web
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The web site is an old custom-made setup that mostly builds static HTML files
    from a set of source files. The sources files are preprocessed with what is basically
    a souped-up C preprocessor called [fcpp](https://daniel.haxx.se/projects/fcpp/)
    and a set of perl scripts. The man pages get converted to HTML with [roffit](https://daniel.haxx.se/projects/roffit/).
    Make sure fcpp, perl, roffit, make and curl are all in your $PATH.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have cloned the git repository the first time, invoke `sh bootstrap.sh`
    once to get a symlink and some some initial local files setup, and then you can
    build the web site locally by invoking `make` in the source root tree.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this doesn't make you a complete web site mirror, as some scripts
    and files are only available on the real actual site, but should give you enough
    to let you view most HTML pages locally.
  prefs: []
  type: TYPE_NORMAL
