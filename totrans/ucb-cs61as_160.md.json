["```\n(define (make-mutex)\n  (let ((cell (list false)))            \n    (define (the-mutex m)\n      (cond ((eq? m 'acquire)\n             (if (test-and-set! cell)\n                 (the-mutex 'acquire))) ; retry\n            ((eq? m 'release) (clear! cell))))\n    the-mutex))\n(define (clear! cell)\n  (set-car! cell false)) \n```", "```\n(set! in-use #t)\n(apply proc args)\n(set! in-use #f) \n```", "```\n(mutex \u2019acquire)\n(apply proc args)\n(mutex \u2019release) \n```", "```\n(mutex \u2019acquire)\n(let ((result (apply proc args)))\n    (mutex \u2019release)\n    result) \n```", "```\n(define (make-serializer)\n  (let ((mutex (make-mutex)))\n    (lambda (p)\n      (define (serialized-p . args)\n        (mutex 'acquire)\n        (let ((val (apply p args)))\n          (mutex 'release)\n          val))\n      serialized-p))) \n```"]