- en: Bad advice
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 糟糕的建议
- en: Bad Advice
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 糟糕的建议
- en: Some truly terrible ideas are commonly circulated as "best practice". In this
    section we provide examples and explain why they should be ignored.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一些真正糟糕的想法常被宣传为“最佳实践”。在这一节中，我们提供例子并解释为什么它们应该被忽略。
- en: Single Exit Point Rules
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单一退出点规则
- en: Bad Advice - Single Exit Point Rules
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 糟糕的建议 - 单一退出点规则
- en: Some coding standards mandate that all methods should have a single exit point.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一些编码标准要求所有方法都应该有单一退出点。
- en: Doing so can be damaging, particularly when it is enforced by static analysis.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做可能会有害，特别是当它被静态分析强制执行时。
- en: Details
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 细节
- en: Single exit point is an idea with a long history dating back to the era of liberally
    applied gotos and spaghetti code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 单一退出点是一个历史悠久的概念，可以追溯到自由使用goto和过时的编程风格时代。
- en: In that context, adding constraints on what could happen within a function was
    helpful. Knowing that there is only one point that a large function can exit from
    makes it easier to understand.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，对函数内部可能发生的事情添加约束是有帮助的。知道一个大函数只有一个退出点，使得理解更加容易。
- en: Many modern functional languages continue to either enforce or encourage single
    exit points.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现代函数式语言继续要求或鼓励使用单一退出点。
- en: So it must be a good idea to add this constraint to Java right?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，把这个约束条件添加到Java中一定是个好主意，对吗？
- en: 'Lets look what happens when we are told we must only have one exit point:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们被告知只能有一个退出点时会发生什么：
- en: '**Single exit with statements**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**带语句的单一退出点**'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If we remove the single exit point constraint we get:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们去除单一退出点的约束条件，我们会得到：
- en: '**Multiple exit**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**多退出**'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Which version is better?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 哪个版本更好？
- en: There isn't much in it, but the multiple exit point version is easier to comprehend.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法差别不大，但是多退出点版本更容易理解。
- en: Trying to apply the single exit point constraint resulted in an additional local
    variable to hold return state. In the multi exit version we can clearly see what
    is returned when none of the conditions match. In the single exit version it is
    slightly less clear as the returned value is declared at the start of the method
    then overwritten.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 试图应用单一退出点约束导致额外的本地变量用于保存返回状态。在多退出版本中，我们可以清楚地看到当条件都不匹配时返回了什么值。在单一退出版本中，情况略微不太清晰，因为返回的值在方法开始时被声明，然后被覆盖。
- en: So does this mean that single exit point methods are bad?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着单一退出点方法是不好的吗？
- en: No.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不。
- en: It is possible to write alternate single exit implementations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以编写替代的单一退出点实现。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We've addressed the issues we identified earlier. We only assign to `retVal`
    once and it is clear what is assigned when none of the conditions match.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解决了之前确定的问题。我们只对`retVal`赋值一次，并且清楚地知道在条件都不匹配时赋予了什么值。
- en: Is this superior in some way to the multi exit version?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有什么优点吗？与多退出版本相比？
- en: Not really.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是。
- en: 'We can also write a single exit method using the `?` operator:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`?`操作符编写单一退出点方法：
- en: '**Single exit with the ? operator**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**带 ? 操作符的单一退出点**'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We have switched from using a statement (if) to working with expressions (i.e.
    things that return a value). This allows us to get rid of the additional variable
    while maintaining a single exit point.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从使用语句（if）切换到使用表达式（即返回值的东西）。这使我们能够摆脱额外的变量，同时保持单一退出点。
- en: Is this version clearer than the multi-exit version? That is debatable and ultimately
    a matter of personal taste.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本比多退出版本更清晰吗？这是值得商榷的，最终是个人口味问题。
- en: The code using `?` is terse and some will find it harder to understand.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`?`的代码简洁，但一些人可能会觉得难以理解。
- en: The multi-exit version is more verbose but its proponents would argue it is
    easier to comprehend.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 多退出版本更冗长，但其支持者认为更容易理解。
- en: If your personal preference is for the `?` operator version, it still does not
    follow that the single exit point rule is something you should try to universally
    apply.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你个人偏好`?`操作符版本，这仍然不意味着单一退出点规则是你应该试图普遍应用的东西。
- en: The most likely result is that you will push people towards writing code like
    the earlier bloated version of our method. As Java is a largely statement-based
    language, you will also encounter logic where the multi-exit version is undeniably
    clearer.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最有可能的结果是，你会促使人们编写类似于我们方法早期臃肿版本的代码。由于Java是一种主要基于语句的语言，你也会遇到使用多退出版本时更清晰的逻辑。
- en: 'Martin Fowler and Kent Beck express things nicely in "Refactoring: Improving
    the Design of Existing Code"'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 马丁·福勒和肯特·贝克在《重构：改善既有代码的设计》中表达得很好
- en: '". . . one exit point is really not a useful rule. Clarity is the key principle:
    If the method is clearer with one exit point, use one exit point; otherwise don''t"'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “. . . 单一退出点真的不是一个有用的规则。清晰是关键原则：如果方法使用单一退出点更清晰，就使用单一退出点；否则不要”
- en: There is nothing wrong with single exit functions, but only write them when
    it makes sense to do so.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 单一退出函数没有问题，但只有在有意义的情况下才编写它们。
- en: Always Use A StringBuffer
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总是使用StringBuffer
- en: Bad Advice - Always Use a StringBuffer to Concatenate
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不良建议 - 总是使用StringBuffer进行连接
- en: This advice is doubly wrong.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个建议是错误的。
- en: Firstly it advocates using the synchronized `StringBuffer` rather than a `StringBuilder`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它主张使用同步的`StringBuffer`而不是`StringBuilder`。
- en: Secondly it is an oversimplification or misunderstanding of the more nuanced
    and reasonable advice to not concatenate Strings in a loop.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，这是对更加微妙和合理的建议不在循环中连接字符串的过度简化或误解。
- en: Avoiding concatenation in a loop is reasonable. Using a `StringBuilder` is likely
    to be more efficient if the loop executes a reasonable number of times as it will
    avoid string allocations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在循环中连接字符串是合理的。如果循环执行了合理次数，使用`StringBuilder`可能更有效，因为它会避免字符串分配。
- en: The performance difference is unlikely to be significant in most cases, but
    the resulting code isn't noticeably less-readable - so it is a premature optimization
    without a cost.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，性能差异可能不会显著，但生成的代码并没有明显不易读 - 因此这是一种没有成本的过早优化。
- en: 'Lets see what happens when we apply this advice when no loop is present:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当没有循环时应用这个建议会发生什么：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `concat` version is far clearer.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat`版本更加清晰。'
- en: Is it less efficient?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它效率更低吗？
- en: 'The eclipse compiler generates the following bytecode for `concat`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse编译器为`concat`生成以下字节码：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A `StringBuilder` is created by the compiler behind the scenes to handle the
    concatenation so our simpler cleaner code produces identical bytecode to the more
    verbose option.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器在后台创建了一个`StringBuilder`来处理连接，因此我们更简单更清晰的代码生成的字节码与更冗长的选项相同。
- en: The presence of loops in the code may prevent the compiler performing this optimization,
    but code without branches will be optimized every time. Although compilers may
    exist that do not support this optimization it is unlikely that you will ever
    use them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的循环存在可能会阻止编译器执行此优化，但没有分支的代码每次都会被优化。尽管可能存在不支持此优化的编译器，但你不太可能会使用它们。
- en: Hungarian Notation
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匈牙利命名法
- en: Bad Advice - Hungarian Notation
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不良建议 - 匈牙利命名法
- en: The idea of Hungarian notation and similar schemes is to reflect the type, scope
    or other attribute of a variable in its name.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 匈牙利命名法及类似方案的理念是在变量名称中反映其类型、范围或其他属性。
- en: 'For example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: bFlag
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: b标志
- en: nSize
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: n大小
- en: m_nSize
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: m_nSize
- en: Where `b` indicates a Boolean type, `n` an integer type and `m_` that the named
    variable is a field.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`b`表示布尔类型，`n`表示整数类型，`m_`表示命名变量是一个字段。
- en: This is a terrible idea.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个糟糕的主意。
- en: Such notation *might* be useful if you are reading code printed to paper, but
    all the information it provides is readily available in a modern IDE.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在阅读打印在纸上的代码，这种标记可能有用，但它提供的所有信息在现代IDE中都很容易获得。
- en: Naming things is hard enough without adding additional concerns that the name
    must handle.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 命名事物本就很困难，而不必再添加额外的要求让名称处理这些问题。
- en: These types of notation are like comments. They add noise and must be maintained
    in tandem with the information they duplicate. If extra effort is not spent to
    maintain them they become misleading.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的标记就像注释一样。它们增加了噪音，并且必须与它们重复的信息一起维护。如果不额外花费精力来维护它们，它们就会误导。
- en: 'Uncle Bob Martin puts it nicely:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Uncle Bob Martin表达得很好：
- en: '"nowadays, HN and other forms of type encoding are simply impediments. They
    make it harder to change the name or type of a variable, function, member or class.
    They make it harder to read the code. And they create the possibility that the
    encoding system will mislead the reader"'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “如今，匈牙利命名法和其他类型编码形式只是阻碍。它们使得更改变量、函数、成员或类的名称或类型更加困难。它们使得阅读代码更加困难。并且它们可能会误导读者”
