- en: ECMAScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://jsprimer.net/basic/ecmascript/](https://jsprimer.net/basic/ecmascript/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ここまでJavaScriptの基本文法について見てきましたが、その文法を定めるECMAScriptという仕様自体がどのように変化していくのかを見ていきましょう。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScriptは[Ecma International](https://www.ecma-international.org/ "Ecma International")という団体によって標準化されている仕様です。
    Ecma InternationalはECMAScript以外にもC#やDartなどの標準化作業をしています。 Ecma Internationalの中のTechnical
    Committee 39（TC39）という技術委員会が中心となって、ECMAScript仕様について議論しています。 この技術委員会はMicrosoft、Mozilla、Google、AppleといったブラウザベンダーやECMAScriptに関心のある企業などによって構成されます。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[](#history)*ECMAScriptのバージョンの歴史*'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*ここで、簡単にECMAScriptのバージョンの歴史を振り返ってみましょう。'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '| バージョン | リリース時期 |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1997年6月 |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
- en: '| 2 | 1998年6月 |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
- en: '| 3 | 1999年12月 |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
- en: '| 4 | 破棄^([1](#fn_1)) |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
- en: '| 5 | 2009年12月 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
- en: '| 5.1 | 2011年6月 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
- en: '| 2015 | 2015年6月 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
- en: '| 2016 | 2016年6月 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
- en: '| 2017 | 2017年6月 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '| 以降毎年リリース |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: ES5.1からES2015がでるまで4年もの歳月がかかっているのに対して、ES2015以降は毎年リリースされています。 毎年安定したリリースを行えるようになったのは、ES2015以降に仕様策定プロセスの変更が行われたためです。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[](#living-standard)*Living StandardとなるECMAScript*'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*現在、ECMAScriptの仕様書のドラフトはGitHub上の[tc39/ecma262](https://github.com/tc39/ecma262
    "tc39/ecma262: Status, process, and documents for ECMA262")で管理されており、日々更新されています。
    そのため、本当の意味での最新のECMAScript仕様は[https://tc39.es/ecma262/](https://tc39.es/ecma262/)となります。
    このように更新ごとにバージョン番号をつけずに、常に最新版を公開する仕様のことを**Living Standard**と呼びます。'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScriptはLiving Standardですが、これに加えてECMAScript 2017のようにバージョン番号をつけたものも公開されています。
    このバージョンつきECMAScriptは、毎年決まった時期のドラフトを元にしたスナップショットのようなものです。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: ブラウザなどに実際にJavaScriptとして実装される際には、Living StandardのECMAScriptを参照しています。 これは、ブラウザ自体も日々更新されるものであり、決まった時期にしかリリースされないバージョンつきよりもLiving
    Standardのほうが適切であるためです。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[](#specification-process)*仕様策定のプロセス*'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*ES2015以前はすべての仕様の合意が取れるまで延々と議論を続け、すべてが決まってからリリースされていました。 そのため、ES2015がリリースされるまでには長い時間がかかり、言語の進化が停滞していました。
    この問題を解消するために、TC39は毎年リリースする形へとECMAScriptの策定プロセスを変更しました。'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: この策定プロセスはES2015のリリース後に適用され、このプロセスで初めてリリースされたのがES2016となります。 ES2016以降では、次のような仕様策定のプロセスで議論を進めて仕様が決定されています。^([2](#fn_2))
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '仕様に追加する機能（API、構文など）をそれぞれ個別の**プロポーザル**（提案書）として進めていきます。 現在策定中のプロポーザルはGitHub上の[tc39/proposals](https://github.com/tc39/proposals
    "tc39/proposals: Tracking ECMAScript Proposals")に一覧が公開されています。 それぞれのプロポーザルは責任者である**チャンピオン**と**ステージ**（Stage）と呼ばれる`0`から`4`の5段階の状態を持ちます。'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '| ステージ | ステージの概要 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: '| 0 | アイデアの段階 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
- en: '| 1 | 機能提案の段階 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: '| 2 | 機能の仕様書ドラフトを作成した段階 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: '| 3 | 仕様としては完成しており、ブラウザの実装やフィードバックを求める段階 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
- en: '| 4 | 仕様策定が完了し、2つ以上の実装が存在している 正式にECMAScriptにマージできる段階 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '2ヶ月に一度行われるTC39のミーティングにおいて、プロポーザルごとにステージを進めるかどうかを議論します。 このミーティングの議事録もGitHub上の[tc39/tc39-notes](https://github.com/tc39/notes
    "tc39/tc39-notes: TC39 Meeting Notes")にて公開されています。 ステージ4となったプロポーザルはドラフト版である[tc39/ecma262](https://github.com/tc39/ecma262
    "tc39/ecma262: Status, process, and documents for ECMA262")へマージされます。 そして毎年の決まった時期にドラフト版を元にして`ECMAScript
    20XX`としてリリースします。'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: この仕様策定プロセスの変更は、ECMAScriptに含まれる機能の形にも影響しています。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: たとえば、`class`構文の策定は**最大限に最小のクラス**（maximally minimal classes）と呼ばれる形で提案されています。
    これによりES2015で`class`構文が導入されましたが、クラスとして合意が取れる最低限の機能だけの状態で入りました。 その他のクラスの機能は別のプロポーザルとして提案され、ES2015以降に持ち越された形で議論が進められています。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: このような合意が取れる最低限の形でプロポーザルを進めていくのには、ES4の苦い失敗が背景にあります。 ES4ではECMAScriptに多くの変更を入れることを試みましたが、TC39内でも意見が分かれ、最終的に合意できませんでした。
    これによりES4の策定に割いた数年分のリソースが無駄になってしまったという経緯があります。^([3](#fn_3))
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: ES2016以降の策定プロセスでも、すべてのプロポーザルが仕様に入るわけではありません。^([4](#fn_4)) 別の代替プロポーザルが出た場合や後方互換性を保てない場合などにプロポーザルの策定を中断する場合があります。
    しかし、この場合でもプロポーザルという単位であるため策定作業の無駄は最小限で済みます。 このようにモジュール化されたプロポーザルは入れ替えがしやすいという性質もあります。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[](#try-proposal)*プロポーザルの機能を試す*'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*ECMAScriptの策定プロセスのステージ4に「2つ以上の実装が存在している」という項目があります。 そのためブラウザのJavaScriptエンジンには、策定中のプロポーザルが実装されている場合があります。
    多くの場合は試験的なフラグつきで実装されておりフラグを有効化することで、試すことができるようになっています。'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: またTranspilerやPolyfillといった手段で、プロポーザルの機能をエミュレートできる場合があります。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Transpilerとは、新しい構文を既存の機能で再現できるようにソースコードを変換するツールのことです。 たとえば、ES2015で`class`構文が導入されましたが、ES5では`class`は予約語であるため構文エラーとなり実行できません。
    Transpilerでは、`class`構文を含むソースコードを`function`キーワードを使って疑似的に再現するコードへ変換します。 Transpilerとしては[Babel](https://babeljs.io/
    "Babel · The compiler for writing next generation JavaScript")や[TypeScript](https://www.typescriptlang.org/
    "TypeScript - JavaScript that scales.")などが有名です。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Polyfillとは、新しい関数やメソッドなどの仕様を満たすような実装を提供するライブラリのことです。 たとえば、ES2016ではArrayに`includes`というメソッドが追加されました。
    構文とは異なり`includes`のようなメソッドはビルトインオブジェクトを書き換えることで実装できます。 Polyfillを提供するものとしては[core-js](https://github.com/zloirock/core-js
    "zloirock/core-js: Standard Library")や[polyfill.io](https://polyfill.io/v3/ "Polyfill
    service")などが有名です。'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 注意点としてはTranspilerやPolyfillは、あくまで既存の機能を用いて新しい機能の再現を試みているだけにすぎません。 そのため、既存の機能で再現ができないプロポーザル（機能）はTranspilerやPolyfillでは再現できません。
    また、完全な再現はできていないことがあるためTranspilerやPolyfillを新しい機能を学ぶために使うべきではありません。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[](#meaning-specification-process)*仕様や策定プロセスを知る意味*'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*こうしたECMAScriptという仕様や策定プロセスを知る意味は何があるのでしょうか？　主に次のような理由で知る意味があると考えています。'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 言語を学ぶため
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 言語が進化しているため
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 情報の正しい状態を調べるため
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](#to-learn)*言語を学ぶため*'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*もっとも単純な理由はJavaScriptという言語そのものを学ぶためです。 言語の詳細を知りたい場合にはECMAScriptという仕様を参照できます。'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: しかしながら、JavaScriptの言語機能に関しては[MDN Web Docs](https://developer.mozilla.org/ja/
    "MDN Web Docs")という優れたリファレンスサイトなどがあります。 そのため、使い方を覚えたいなどの範囲ではECMAScriptの仕様そのものを参照する機会は少ないでしょう。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[](#to-progress)*言語が進化しているため*'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*ECMAScriptはLiving Standardであり、日々更新されています。 これは、言語仕様に新しい機能や修正などが常に行われていることを表しています。'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScriptは後方互換性を尊重するため、今学んでいることが無駄になるわけではありません。 しかしながら言語自体も進化していることは意識しておくとよいでしょう。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScriptのプロポーザル（機能）は問題を解決するために提案されます。 そのプロポーザルがECMAScriptにマージされ利用できる場合、その機能が何を解決するために導入されたのかを知ることが大切です。
    その際には、ECMAScriptの策定プロセスを知っておくことが役立ちます。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: この仕様はなぜこうなったのかということを知りたいと思ったときに、その機能がどのような経緯で入ったのかを調べる手段を持つことは大切です。 特にES2015以降は策定プロセスもGitHubを利用したオープンなものとなり、過去の記録なども探しやすくなっています。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[](#to-search)*情報の正しい状態を調べるため*'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*JavaScriptは幅広く使われている言語であるため、世の中には膨大な情報があります。 そして、検索して見つかる情報には正しいものや間違ったものが混在しています。'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: その中においてECMAScriptの仕様やその策定中のプロポーザルに関する情報は状態が明確です。 基本的にECMAScriptの仕様に入るものは、後方互換性を維持するために破壊的変更はほとんど行えません。
    プロポーザルはステージという明示された状態があり、ステージ4未満の場合はまだ安定していないことがわかります。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: そのため、問題を見つけた際に該当する仕様やプロポーザルを確認してみることが重要です。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: これはECMAScriptに限らず、ウェブやブラウザに関する情報については同じことが言えます。 ブラウザに関してはHTML、DOM API、CSSなどのオープンな仕様とそれぞれの策定プロセスが存在しています。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[](#ecmascript-summary)*まとめ*'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*JavaScriptと一言に言ってもECMAScript、ウェブブラウザ、Node.js、WebAssembly、WebGL、WebRTCなど幅広い分野があります。
    すべてのことを知っている必要はありませんし、知っている人もおそらくいないでしょう。 このような状況下においては知識そのものよりも、それについて知りたいと思ったときに調べる方法を持っていることが大切です。'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScript涵盖了ECMAScript、Web浏览器、Node.js、WebAssembly、WebGL、WebRTC等广泛领域。 没有必要了解所有内容，甚至可能没有人了解所有内容。
    在这种情况下，比起知识本身，更重要的是拥有在想了解某事时如何查找的方法。'
- en: 何ごとも突然まったく新しい概念が増えるわけではなく、ものごとには過程が存在します。 ECMAScriptにおいては策定プロセスという形でどのような段階であるかが公開されています。
    つまり、仕様にいきなり新しい機能が増えるのではなくプロポーザルという段階を踏んでいます。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 任何事物都不会突然出现全新的概念，事物都有一个过程。 在ECMAScript中，制定过程以制定提案的形式公开。 换句话说，并非直接向规范中添加新功能，而是经历了提案阶段。
- en: 日々変化しているソフトウェアにおいては、自身に適切な調べ方を持つことが大切です。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在不断变化的软件领域，拥有适当的查找方法至关重要。
- en: ¹. ECMAScript 4は複雑で大きな変更が含まれており、合意を得ることができずに仕様が破棄されました。 [↩](#reffn_1 "Jump back
    to footnote [1] in the text.")
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. ECMAScript 4包含了复杂且重大的更改，由于无法达成一致，规范被废弃。 [↩](#reffn_1 "跳回文中脚注[1]")
- en: ². この策定プロセスは[https://tc39.es/process-document/](https://tc39.es/process-document/)に詳細が書かれています。
    [↩](#reffn_2 "Jump back to footnote [2] in the text.")
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ². 该制定过程的详细信息可在[https://tc39.es/process-document/](https://tc39.es/process-document/)找到。
    [↩](#reffn_2 "跳回文中脚注[2]")
- en: ³. ES2015の仕様編集者であるAllen Wirfs-Brock氏の書いた[Programming Language Standardization](http://wirfs-brock.com/allen/files/papers/standpats-asianplop2016.pdf)に詳細が書かれています。
    [↩](#reffn_3 "Jump back to footnote [3] in the text.")
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ³. Allen Wirfs-Brock先生撰写的[编程语言标准化](http://wirfs-brock.com/allen/files/papers/standpats-asianplop2016.pdf)详细介绍了ES2015的规范制定者。
    [↩](#reffn_3 "跳回文中脚注[3]")
- en: ⁴. [Inactive Proposals](https://github.com/tc39/proposals/blob/main/inactive-proposals.md)に策定を中止したプロポーザルの一覧が公開されています。
    [↩](#reffn_4 "Jump back to footnote [4] in the text.")*********
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ⁴. [已废弃的提案](https://github.com/tc39/proposals/blob/main/inactive-proposals.md)中列出了已中止制定的提案。
    [↩](#reffn_4 "跳回文中脚注[4]")*********
