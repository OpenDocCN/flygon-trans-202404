- en: 例外処理
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例外処理
- en: 原文：[https://jsprimer.net/basic/error-try-catch/](https://jsprimer.net/basic/error-try-catch/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/basic/error-try-catch/](https://jsprimer.net/basic/error-try-catch/)
- en: この章ではJavaScriptにおける例外処理について学びます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: この章ではJavaScriptにおける例外処理について学びます。
- en: '[](#try-catch)*try...catch構文*'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#try-catch)*try...catch構文*'
- en: '*[try...catch](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/try...catch)構文は例外が発生しうるブロックをマークし、例外が発生したときの処理を記述するための構文です。'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*[try...catch](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/try...catch)構文は例外が発生しうるブロックをマークし、例外が発生したときの処理を記述するための構文です。'
- en: try...catch構文の`try`ブロック内で例外が発生すると、`try`ブロック内のそれ以降の処理は実行されず、`catch`節に処理が移行します。
    `catch`節は、`try`ブロック内で例外が発生すると、発生したエラーオブジェクトとともに呼び出されます。 `finally`節は、`try`ブロック内で例外が発生したかどうかには関係なく、必ず`try`文の最後に実行されます。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: try...catch構文の`try`ブロック内で例外が発生すると、`try`ブロック内のそれ以降の処理は実行されず、`catch`節に処理が移行します。
    `catch`節は、`try`ブロック内で例外が発生すると、発生したエラーオブジェクトとともに呼び出されます。 `finally`節は、`try`ブロック内で例外が発生したかどうかには関係なく、必ず`try`文の最後に実行されます。
- en: 次のコードでは、`try`ブロックで例外が発生し、`catch`節の処理が実行され、最後に`finally`節の処理が実行されます。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、`try`ブロックで例外が発生し、`catch`節の処理が実行され、最後に`finally`節の処理が実行されます。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: また、`catch`節と`finally`節のうち、片方が存在していれば、もう片方の節は省略できます。 `finally`節のみを書いた場合は例外がキャッチされないため、`finally`節を実行後に例外が発生します。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: また、`catch`節と`finally`節のうち、片方が存在していれば、もう片方の節は省略できます。 `finally`節のみを書いた場合は例外がキャッチされないため、`finally`節を実行後に例外が発生します。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[](#throw)*throw文*'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#throw)*throw文*'
- en: '*[throw](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/throw)文を使うとユーザーが例外を投げることができます。
    例外として投げられたオブジェクトは、`catch`節で関数の引数のようにアクセスできます。 `catch`節でオブジェクトを参照できる識別子を[例外識別子](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/try...catch#The_exception_identifier)と呼びます。'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*[throw](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/throw)文を使うとユーザーが例外を投げることができます。
    例外として投げられたオブジェクトは、`catch`節で関数の引数のようにアクセスできます。 `catch`節でオブジェクトを参照できる識別子を[例外識別子](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/try...catch#The_exception_identifier)と呼びます。'
- en: 次のコードでは、`catch`節の`error`識別子でキャッチしたエラーオブジェクトを参照しています。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、`catch`節の`error`識別子でキャッチしたエラーオブジェクトを参照しています。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[](#error-object)*エラーオブジェクト*'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#error-object)*エラーオブジェクト*'
- en: '*`throw`文ではエラーオブジェクトを例外として投げることができます。 ここでは、`throw`文で例外として投げられるエラーオブジェクトについて見ていきます。'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*`throw`文ではエラーオブジェクトを例外として投げることができます。 ここでは、`throw`文で例外として投げられるエラーオブジェクトについて見ていきます。'
- en: '[](#error)*Error*'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#error)*Error*'
- en: '*`Error`オブジェクトのインスタンスは`new Error("エラーメッセージ")`で作成します。 コンストラクタの第一引数には、エラーメッセージとなる文字列を渡します。
    渡したエラーメッセージはErrorの`message`プロパティで参照できます。'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Error`オブジェクトのインスタンスは`new Error("エラーメッセージ")`で作成します。 コンストラクタの第一引数には、エラーメッセージとなる文字列を渡します。
    渡したエラーメッセージはErrorの`message`プロパティで参照できます。'
- en: 次のコードでは、`assertPositiveNumber`関数でエラーオブジェクトを作成し、例外として`throw`しています。 投げられたオブジェクトはcatch節の例外識別子（`error`）から取得でき、エラーメッセージが確認できます。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、`assertPositiveNumber`関数でエラーオブジェクトを作成し、例外として`throw`しています。 投げられたオブジェクトはcatch節の例外識別子（`error`）から取得でき、エラーメッセージが確認できます。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`throw`文はあらゆるオブジェクトを例外として投げられますが、基本的に`Error`オブジェクトのインスタンスを投げることを推奨します。 その理由は後述する**スタックトレース**のためです。
    `Error`オブジェクトはインスタンスの作成時に、そのインスタンスが作成されたファイル名や行数などのデバッグに役立つ情報を持っています。 文字列のような`Error`オブジェクトではないオブジェクトを投げてしまうと、スタックトレースが得られません。'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`throw`文はあらゆるオブジェクトを例外として投げられますが、基本的に`Error`オブジェクトのインスタンスを投げることを推奨します。 その理由は後述する**スタックトレース**のためです。
    `Error`オブジェクトはインスタンスの作成時に、そのインスタンスが作成されたファイル名や行数などのデバッグに役立つ情報を持っています。 文字列のような`Error`オブジェクトではないオブジェクトを投げてしまうと、スタックトレースが得られません。'
- en: そのため、次のように`throw`文で`Error`オブジェクトではないものを投げるのは非推奨です。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: そのため、次のように`throw`文で`Error`オブジェクトではないものを投げるのは非推奨です。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[](#built-in-error)*ビルトインエラー*'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#built-in-error)*ビルトインエラー*'
- en: '*エラーには状況に合わせたいくつかの種類があり、これらはビルトインエラーとして定義されています。 ビルトインエラーとは、ECMAScript仕様や実行環境に組み込みで定義されているエラーオブジェクトです。
    ビルトインエラーとして投げられるエラーオブジェクトは、すべて`Error`オブジェクトを継承したオブジェクトのインスタンスです。 そのため、ユーザーが定義したエラーと同じように例外処理できます。'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*エラーには状況に合わせたいくつかの種類があり、これらはビルトインエラーとして定義されています。 ビルトインエラーとは、ECMAScript仕様や実行環境に組み込みで定義されているエラーオブジェクトです。
    ビルトインエラーとして投げられるエラーオブジェクトは、すべて`Error`オブジェクトを継承したオブジェクトのインスタンスです。 そのため、ユーザーが定義したエラーと同じように例外処理できます。'
- en: ビルトインエラーにはいくつか種類がありますが、ここでは代表的なものを紹介します。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: ビルトインエラーにはいくつか種類がありますが、ここでは代表的なものを紹介します。
- en: '[](#reference-error)*ReferenceError*'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[](#reference-error)*ReferenceError*'
- en: '*[ReferenceError](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)は存在しない変数や関数などの識別子が参照された場合のエラーです。
    次のコードでは、存在しない変数を参照しているため`ReferenceError`例外が投げられます。'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*[ReferenceError](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)は存在しない変数や関数などの識別子が参照された場合のエラーです。
    次のコードでは、存在しない変数を参照しているため`ReferenceError`例外が投げられます。'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[](#syntax-error)*SyntaxError*'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[](#syntax-error)*SyntaxError*'
- en: '*[SyntaxError](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)は構文的に不正なコードを解釈しようとした場合のエラーです。
    基本的に`SyntaxError`例外は、JavaScriptを実行する前のパース段階で発生します。 そのため、実行前に発生する例外である`SyntaxError`は、実行時のエラーをキャッチする`try...catch`文ではcatchできません。'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*[SyntaxError](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)は構文的に不正なコードを解釈しようとした場合のエラーです。
    基本的に`SyntaxError`例外は、JavaScriptを実行する前のパース段階で発生します。 そのため、実行前に発生する例外である`SyntaxError`は、実行時のエラーをキャッチする`try...catch`文ではcatchできません。'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 次のコードでは、`eval`関数を使って実行時に`SyntaxError`を無理やり発生させ、構文エラーが`SyntaxError`であることを確認しています。
    `eval`関数は渡した文字列をJavaScriptとして実行する関数です。 実行時に発生した`SyntaxError`は、`try...catch`文でもcatchできます。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、`eval`関数を使って実行時に`SyntaxError`を無理やり発生させ、構文エラーが`SyntaxError`であることを確認しています。
    `eval`関数は渡した文字列をJavaScriptとして実行する関数です。 実行時に発生した`SyntaxError`は、`try...catch`文でもcatchできます。
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[](#type-error)*TypeError*'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[](#type-error)*TypeError*'
- en: '*[TypeError](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError)は値が期待される型ではない場合のエラーです。
    次のコードでは、関数ではないオブジェクトを関数呼び出ししているため、`TypeError`例外が投げられます。'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*[TypeError](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError)は値が期待される型ではない場合のエラーです。
    次のコードでは、関数ではないオブジェクトを関数呼び出ししているため、`TypeError`例外が投げられます。'
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[](#throw-built-in-error)*ビルトインエラーを投げる*'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#throw-built-in-error)*ビルトインエラーを投げる*'
- en: '*ビルトインエラーのインスタンスを作成し、そのインスタンスを例外として投げることもできます。 通常の`Error`オブジェクトと同じように、それぞれのビルトインエラーオブジェクトを`new`してインスタンスを作成できます。'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*可以创建内置错误的实例，并将该实例作为异常抛出。与普通的`Error`对象一样，可以通过`new`每个内置错误对象来创建实例。'
- en: たとえば関数の引数を文字列に限定したい場合は、次のように`TypeError`例外を投げるとよいでしょう。 メッセージを確認しなくても、エラーの名前だけで型に関する例外だとすぐにわかります。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果要限制函数参数为字符串，可以抛出`TypeError`异常。即使不查看消息，仅凭错误名称就可以立即了解与类型相关的异常。
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[](#error-and-debug)*エラーとデバッグ*'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#error-and-debug)*错误和调试*'
- en: '*JavaScript開発においてデバッグ中に発生したエラーを理解することは非常に重要です。 エラーが持つ情報を活用することで、ソースコードのどこでどのような例外が投げられたのかを知ることができます。'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*在JavaScript开发中，理解调试过程中发生的错误非常重要。通过利用错误提供的信息，可以了解源代码中发生异常的位置和类型。'
- en: エラーはすべて`Error`オブジェクトを拡張したオブジェクトで宣言されています。 つまり、エラーの名前を表す`name`プロパティと内容を表す`message`プロパティを持っています。
    この2つのプロパティを確認することで、多くの場面で開発の助けとなるでしょう。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所有错误都是由扩展自`Error`对象的对象声明的。也就是说，错误具有表示名称的`name`属性和表示内容的`message`属性。通过检查这两个属性，可以在许多情况下提供开发帮助。
- en: 次のコードでは、`try...catch`文で囲っていない部分で例外が発生しています。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，未包含在`try...catch`块中的部分发生了异常。
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: このスクリプトを読み込むと、投げられた例外についてのログがコンソールに出力されます。 ここではFirefoxにおける実行例を示します。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 加载此脚本后，控制台将输出有关抛出异常的日志。以下是Firefox中的执行示例。
- en: '![コンソールでのエラー表示（Firefox）](../Images/fa3c3b721816f38fb58865327e9ee6c3.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![控制台中的错误显示（Firefox）](../Images/fa3c3b721816f38fb58865327e9ee6c3.png)'
- en: このエラーログには次の情報が含まれています。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误日志包含以下信息。
- en: '| メッセージ | 意味 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 消息 | 含义 |'
- en: '| --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ReferenceError: x is not defined` | エラーの種類は`ReferenceError`で、`x`が未定義であること。
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `ReferenceError: x is not defined` | 错误类型为`ReferenceError`，表示`x`未定义。 |'
- en: '| `error.js:3:5` | 例外が`error.js`の3行目5列目で発生したこと。つまり`x++;`であること。 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `error.js:3:5` | 异常发生在`error.js`的第3行第5列。也就是`x++;`。 |'
- en: また、メッセージの後には例外のスタックトレースが表示されています。 スタックトレースとは、プログラムの実行過程を記録した内容で、どの処理によってエラーが発生したかが書かれています。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，消息后面还显示了异常的堆栈跟踪。堆栈跟踪记录了程序执行过程，指出了哪些处理导致错误。
- en: スタックトレースの最初の行が実際に例外が発生した場所です。つまり、3行目の `x++;` で例外が発生しています
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆栈跟踪的第一行是实际发生异常的位置。也就是说，在第3行的 `x++;` 发生了异常
- en: 次の行には、そのコードの呼び出し元が記録されています。つまり、3行目のコードを実行したのは5行目の`fn`関数の呼び出しです
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来的行记录了该代码的调用者。也就是说，执行第3行代码的是第5行的`fn`函数调用
- en: このように、スタックトレースは上から下へ呼び出し元をたどれるように記録されています。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈跟踪记录了调用者的信息。
- en: コンソールに表示されるエラーログには多くの情報が含まれています。 MDNの[JavaScriptエラーリファレンス](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Errors)には、ブラウザが投げるビルトインエラーの種類とメッセージが網羅されています。
    開発中にビルトインエラーが発生したときには、リファレンスを見て解決方法を探すとよいでしょう。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台显示的错误日志包含大量信息。MDN的[JavaScript错误参考](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Errors)详细列出了浏览器抛出的内置错误类型和消息。在开发过程中遇到内置错误时，查阅参考以寻找解决方法是一个好习惯。
- en: '[](#console.error)*`console.error`とスタックトレース*'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#console.error)*`console.error`和堆栈跟踪*'
- en: '*`console.error`メソッドではメッセージと合わせてスタックトレースをコンソールへ出力できます。'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*`console.error`方法可以将消息与堆栈跟踪一起输出到控制台。'
- en: 次のコードを実行して、`console.log`と`console.error`の出力結果を見比べてみます。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码，比较`console.log`和`console.error`的输出结果。
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: このコードをFirefoxで実行するとコンソール出力は次の図のようになります。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firefox中运行此代码，控制台输出将如下图所示。
- en: '![console.logとconsole.errorの出力結果](../Images/0acbabe37f577404122b0b87f7220370.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![console.log和console.error的输出结果](../Images/0acbabe37f577404122b0b87f7220370.png)'
- en: '`console.log`はメッセージだけなのに対して、`console.error`ではメッセージと共にスタックトレースが出力されます。 そのため、エラーが発生した場合のコンソールへのメッセージ出力に`console.error`を利用することでデバッグがしやすくなります。'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log`只有消息，而`console.error`除了消息外还输出堆栈跟踪。因此，在控制台输出错误消息时，使用`console.error`可以更容易进行调试。'
- en: また、ほとんどのブラウザには`console.log`や`console.error`の出力をフィルタリングできる機能が備わっています。 ただのログ出力には`console.log`を使い、エラーに関するログ出力には`console.error`を使うことで、ログの重要度が区別しやすくなります。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，大多数浏览器都提供了过滤`console.log`和`console.error`输出的功能。通过使用`console.log`进行普通日志输出，使用`console.error`进行与错误相关的日志输出，可以更容易区分日志的重要性。
- en: '[](#error-cause)*[ES2022] Error Cause*'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#error-cause)*[ES2022] 错误原因*'
- en: '*エラーをキャッチした際、新しいメッセージを持たせた別のエラーを再度投げ直すことで、デバッグに役立つ情報を付与できます。 これを実現する時に、新しくErrorオブジェクトを作成してthrowすることで実現できます。
    しかし、この方法には本来のエラーのスタックトレースが失われるという問題があります。'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*通过捕获错误并重新抛出带有新消息的另一个错误，可以提供有用的调试信息。通过创建新的Error对象并抛出来实现。但是，这种方法会导致原始错误的堆栈跟踪丢失。'
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: このスタックトレースが失われる問題を解決するには、ES2022で追加されたErrorの`cause`オプションが利用できます。 新しいエラーオブジェクトを作成する際に、第2引数の`cause`オプションに本来のエラーオブジェクトを渡すことで、本来のスタックトレースを保持できます。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决堆栈跟踪丢失的问题，可以使用ES2022中引入的Error的`cause`选项。在创建新错误对象时，通过将原始错误对象传递给第二个参数的`cause`选项，可以保留原始的堆栈跟踪。
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: このスクリプトを読み込むと、`sumNumsStrings` の例外に `safeParseInt` から投げられたスタックトレースが付与された状態のエラーログがコンソールに出力されます。
    ここではFirefoxにおける実行例を示します。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 加载此脚本后，控制台将输出带有从`sumNumsStrings`到`safeParseInt`抛出的堆栈跟踪的错误日志。以下是Firefox中的执行示例。
- en: '![safeParseIntのスタックトレースが含まれたconsole.errorの出力結果](../Images/82ca3eb6268226652f98a961bfcdbfb8.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![包含safeParseInt堆栈跟踪的console.error输出结果](../Images/82ca3eb6268226652f98a961bfcdbfb8.png)'
- en: '[](#conclusion)*まとめ*'
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)*总结*'
- en: '*この章では、例外処理とエラーオブジェクトについて学びました。'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章介绍了异常处理和错误对象。'
- en: '`try...catch`構文は`try`ブロック内で発生した例外を処理できる'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`try...catch`语法可以处理`try`块中发生的异常'
- en: '`catch`節と`finally`節は、両方またはどちらか片方を記述する'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catch`块和`finally`块可以同时或单独编写'
- en: '`throw`文は例外を投げることができ、`Error`オブジェクトを例外として投げる'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`throw`语句可以抛出异常，将`Error`对象作为异常抛出'
- en: '`Error`オブジェクトには、ECMAScript仕様や実行環境で定義されたビルトインエラーがある'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Error`对象包含了在ECMAScript规范和执行环境中定义的内置错误'
- en: '`Error`オブジェクトには、スタックトレースが記録され、デバッグに役立てられる'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Error`对象中记录了堆栈跟踪，对调试非常有用'
- en: Error Causeを使うことで、別のエラーのスタックトレースを引き継いだ新しいエラーを作成できる*************
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Error Cause，可以创建一个新错误，继承另一个错误的堆栈跟踪*************
