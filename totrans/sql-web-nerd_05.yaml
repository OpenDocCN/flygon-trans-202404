- en: '| [![Chinatown.  San Francisco, California](../Images/4469ebdfd51d1fd0a742f99eb8a403e5.jpg)](/http://philip.greenspun.com/images/pcd0923/san-francisco-chinatown-43.tcl)
    |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| [![唐人街。加利福尼亚州旧金山](../Images/4469ebdfd51d1fd0a742f99eb8a403e5.jpg)](/http://philip.greenspun.com/images/pcd0923/san-francisco-chinatown-43.tcl)
    |'
- en: Complex Queries
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复杂查询
- en: part of [SQL for Web Nerds](index.html) by [Philip Greenspun](http://philip.greenspun.com/)
    | [![Golden Gate Bridge.  San Francisco, California.](../Images/e2f80568876b29658b71afc396e50d00.jpg)](/http://philip.greenspun.com/images/pcd0741/golden-gate-duo-87.tcl)
    |
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[SQL for Web Nerds](index.html)的一部分，作者是[Philip Greenspun](http://philip.greenspun.com/)
    | [![金门大桥。加利福尼亚州旧金山。](../Images/e2f80568876b29658b71afc396e50d00.jpg)](/http://philip.greenspun.com/images/pcd0741/golden-gate-duo-87.tcl)
    |
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Suppose that you want to start lumping together information from multiple rows.
    For example, you''re interested in JOINing users with their classified ads. That
    will give you one row per ad posted. But you want to mush all the rows together
    for a particular user and just look at the most recent posting time. What you
    need is the GROUP BY construct:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要开始将多行信息合并在一起。例如，您对将用户与其分类广告进行 JOIN 感兴趣。这将为每个发布的广告给出一行。但是您想要将特定用户的所有行合并在一起，并只查看最近的发布时间。您需要的是
    GROUP BY 结构：
- en: '[PRE0]'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `group by users.user_id, users.email` tells SQL to "lump together all the
    rows that have the same values in these two columns." In addition to the grouped
    by columns, we can run aggregate functions on the columns that aren''t being grouped.
    For example, the MAX above applies to the posting dates for the rows in a particular
    group. We can also use COUNT to see at a glance how active and how recently active
    a user has been:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`group by users.user_id, users.email` 告诉 SQL “将这两列中具有相同值的所有行合并在一起”。除了被分组的列之外，我们还可以对没有被分组的列运行聚合函数。例如，上面的
    MAX 应用于特定组中行的发布日期。我们还可以使用 COUNT 来一目了然地查看用户的活跃程度和最近的活跃情况：'
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A publisher who was truly curious about this stuff probably wouldn''t be interested
    in these results alphabetically. Let''s find our most recently active users. At
    the same time, let''s get rid of the unsightly "MAX(CLASSI" at the top of the
    report:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真正对这些内容感兴趣的出版商可能不会对这些按字母顺序排列的结果感兴趣。让我们找到我们最近活跃的用户。同时，让我们摆脱报告顶部那个难看的“MAX(CLASSI”：
- en: '[PRE2]'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that we were able to use our *correlation names* of "how_recent" and "how_many"
    in the ORDER BY clause. The `desc` ("descending") directives in the ORDER BY clause
    instruct Oracle to put the largest values at the top. The default sort order is
    from smallest to largest ("ascending").
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们能够在 ORDER BY 子句中使用我们的*关联名称*“how_recent”和“how_many”。ORDER BY 子句中的 `desc`（“降序”）指令指示
    Oracle 将最大值放在顶部。默认排序顺序是从最小到最大（“升序”）。
- en: Upon close inspection, the results are confusing. We instructed Oracle to rank
    first by date and second by number of postings. Yet for 1998-12-13 we don't see
    both users with three total postings at the top. That's because Oracle dates are
    precise to the second even when the hour, minute, and second details are not displayed
    by SQL*Plus. A better query would include the clause
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 经过仔细检查，结果令人困惑。我们指示 Oracle 首先按日期排名，其次按帖子数量排名。然而，对于 1998-12-13，我们并没有看到两个帖子总数为三的用户排在前面。这是因为
    Oracle 的日期精确到秒，即使小时、分钟和秒的细节没有被 SQL*Plus 显示出来。一个更好的查询应该包括以下子句
- en: '[PRE3]'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: where the built-in Oracle function `trunc` truncates each date to midnight on
    the day in question.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 其中内置的 Oracle 函数`trunc`将每个日期截断到当天的午夜。
- en: 'Finding co-moderators: The HAVING Clause'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 寻找共同主持人：HAVING 子句
- en: 'The WHERE clause restricts which rows are returned. The HAVING clause operates
    analogously but on groups of rows. Suppose, for example, that we''re interested
    in finding those users who''ve contributed heavily to our discussion forum:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE 子句限制了返回的行。HAVING 子句类似地作用于行的组。例如，假设我们对那些在我们的讨论论坛上做出了重大贡献的用户感兴趣：
- en: '[PRE4]'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Seventy three hundred rows. That's way too big considering that we are only
    interested in nominating a couple of people. Let's restrict to more recent activity.
    A posting contributed three years ago is not necessarily evidence of interest
    in the community right now.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 七千三百行。考虑到我们只对提名几个人感兴趣，这太大了。让我们限制到更近期的活动。三年前的帖子并不一定代表对社区现在的兴趣。
- en: '[PRE5]'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We wanted to kill rows, not groups, so we did it with a WHERE clause. Let's
    get rid of the people who are already serving as maintainers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要删除行，而不是组，所以我们用 WHERE 子句来实现。让我们摆脱那些已经担任维护者的人。
- en: '[PRE6]'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The concept of User ID makes sense for both rows and groups, so we can restrict
    our results either with the extra WHERE clause above or by letting the relational
    database management system produce the groups and then we''ll ask that they be
    tossed out using a HAVING clause:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This doesn''t get to the root cause of our distressingly large query result:
    we don''t want to see groups where `how_many` is less than 30\. Here''s the SQL
    for "show me users who''ve posted at least 30 messages in the past 60 days, ranked
    in descending order of volubility":'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We had to do this in a HAVING clause because the number of rows in a group is
    a concept that doesn't make sense at the per-row level on which WHERE clauses
    operate.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Oracle 8's SQL parser is too feeble to allow you to use the `how_many` correlation
    variable in the HAVING clause. You therefore have to repeat the `count(*)` incantation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Set Operations: UNION, INTERSECT, and MINUS Oracle provides set operations
    that can be used to combine rows produced by two or more separate SELECT statements.
    UNION pools together the rows returned by two queries, removing any duplicate
    rows. INTERSECT combines the result sets of two queries by removing any rows that
    are not present in both. MINUS combines the results of two queries by taking the
    the first result set and subtracting from it any rows that are also found in the
    second. Of the three, UNION is the most useful in practice.'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the ArsDigita Community System ticket tracker, people reporting a bug or
    requesting a feature are given a menu of potential deadlines. For some projects,
    common project deadlines are stored in the `ticket_deadlines` table. These should
    appear in an HTML SELECT form element. We also, however, want some options like
    "today", "tomorrow", "next week", and "next month". The easiest way to handle
    these is to query the `dual` table to perform some date arithmetic. Each of these
    queries will return one row and if we UNION four of them together with the query
    from `ticket_deadlines`, we can have the basis for a very simple Web script to
    present the options:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: will produce something like
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'The INTERSECT and MINUS operators are seldom used. Here are some contrived
    examples. Suppose that you collect contest entries by Web users, each in a separate
    table:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now let''s populate with some dummy data:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Suppose that we''ve got a new contest on the site. This time we''re giving
    away a trip to Churchill, Manitoba to photograph polar bears. We assume that the
    most interested users will be those who''ve entered both the travel and the camera
    contests. Let''s get their user IDs so that we can notify them via email (spam)
    about the new contest:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Or suppose that we''re going to organize a personal trip to Paris and want
    to find someone to share the cost of a room at the Crillon. We can assume that
    anyone who entered the Paris trip contest is interested in going. So perhaps we
    should start by sending them all email. On the other hand, how can one enjoy a
    quiet evening with the absinthe bottle if one''s companion is constantly blasting
    away with an electronic flash? We''re interested in people who entered the Paris
    trip contest but who *did not* enter the camera giveaway:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 或者假设我们要组织一次去巴黎的个人旅行，并希望找到有人愿意分享 Crillon 酒店房间费用的人。我们可以假设任何参加巴黎之行比赛的人都有兴趣去。因此，也许我们应该先给他们所有人发电子邮件。另一方面，如果一个人的伴侣不断用电子闪光灯拍照，那么怎么能享受一个安静的晚上呢？我们对参加巴黎之行比赛但*没有*参加相机赠送活动的人感兴趣：
- en: '[PRE13]'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next: [Transactions](transactions.html)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来：[事务](transactions.html)
- en: '* * *'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[philg@mit.edu](http://philip.greenspun.com/)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[philg@mit.edu](http://philip.greenspun.com/)'
- en: Reader's Comments
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读者评论
- en: In less trivial uses of UNION, you can use UNION ALL, instructing Oracle not
    to remove duplicates and saving the sort if you know there aren't going to be
    any duplicate rows(or maybe don't care)
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在使用 UNION 的较为复杂的情况下，您可以使用 UNION ALL，指示 Oracle 不要删除重复项，并在您知道不会有重复行（或者可能不在乎）时节省排序。
- en: ''
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [Neal Sidhwaney](/shared/community-member?user_id=217722), December 10, 2002
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [Neal Sidhwaney](/shared/community-member?user_id=217722)，2002年12月10日
- en: Another example of using MINUS is shown in the following crazy-looking (and
    Oracle-specific [1]) query which selects the 91st through 100th rows of a subquery.
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: MINUS 的另一个使用示例显示在以下看起来疯狂的（仅适用于 Oracle [1]）查询中，该查询选择子查询的第91到100行。
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And in PostgreSQL (and MySQL too for that matter) it is as simple as:'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 而在 PostgreSQL（以及 MySQL 也是如此）中，只需简单地：
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: select * from my_table order by my_id limit 90,10
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: select * from my_table order by my_id limit 90,10
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'An easier way for Oracle (according to a random post in a devshed.com forum
    I googled) would be like this:'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于 Oracle 来说，一个更简单的方法（根据我在 devshed.com 论坛上随机搜索到的一篇帖子）是这样的：
- en: ''
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: select * from my_table order by my_id where rownum between 90,100
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: select * from my_table order by my_id where rownum between 90,100
- en: ''
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (Though the whole point about how to use MINUS is well taken)
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （尽管如何使用 MINUS 的整个要点都很重要）
- en: ''
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [Gabriel Ricard](/shared/community-member?user_id=237502), February 26, 2003
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [Gabriel Ricard](/shared/community-member?user_id=237502)，2003年2月26日
- en: Oops. I was wrong. Phil emailed me and explained that my rownum example won't
    work (just goes to show that not everything you find on the internet is right!).
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 糟糕。我错了。Phil 给我发了电子邮件，解释说我的 rownum 示例行不通（这只是表明并非互联网上的所有内容都是正确的！）。
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [Gabriel Ricard](/shared/community-member?user_id=237502), March 17, 2003
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [Gabriel Ricard](/shared/community-member?user_id=237502)，2003年3月17日
- en: '[Add a comment](/comments/add?page_id=3461)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加评论](/comments/add?page_id=3461)'
