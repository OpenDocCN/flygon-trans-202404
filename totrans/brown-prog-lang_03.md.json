["```\n100 * 1/6\n150 * 1/6\n90 * 1/6\n```", "```\n    earth-weight * 1/6\n    ```", "```\n    fun <function name>(<parameters>):\n      <the expression goes here>\n    end\n    ```", "```\nfun moon-weight(earth-weight):\n  earth-weight * 1/6\nend\n```", "```\nmoon-weight(100)\nmoon-weight(150)\nmoon-weight(90)\n```", "```\nfun japan-flag(unit):\n  bg-width = unit * 3\n  bg-height = unit * 2\n  circ-rad = 3/5 * 1/2 * bg-height\n  red-circ = circle(circ-rad, \"solid\", \"red\")\n  white-rect = rectangle(bg-width, bg-height, \"solid\", \"white\")\n  overlay(red-circ, white-rect)\nend\n```", "```\njapan-flag(100)\njapan-flag(200)\njapan-flag(50)\n```", "```\nfun moon-weight(earth-weight):\n  earth-weight * 1/6\nwhere:\n  moon-weight(100) is 100 * 1/6\n  moon-weight(150) is 150 * 1/6\n  moon-weight(90) is 90 * 1/6\nend\n```", "```\n> > earth-weight * 1/3\n> > ```", "```\nmoon-weight(\"Armstrong\")\n```", "```\nfun moon-weight(earth-weight :: Number) -> Number:\n  earth-weight * 1/6\nend\n```", "```\nfun japan-flag(unit :: Number) -> Image:\n  bg-width = unit * 3\n  bg-height = unit * 2\n  circ-rad = 3/5 * 1/2 * bg-height\n  red-circ = circle(circ-rad, \"solid\", \"red\")\n  white-rect = rectangle(bg-width, bg-height, \"solid\", \"white\")\n  overlay(red-circ, white-rect)\nend\n```", "```\n> > fun japan-flag(unit :: Number) -> Image:\n> >   bg-width :: ___ = unit * 3\n> >   bg-height :: ___ = unit * 2\n> >   circ-rad :: ___ = 3/5 * 1/2 * bg-height\n> >   red-circ :: ___ = circle(circ-rad, \"solid\", \"red\")\n> >   white-rect :: ___ = rectangle(bg-width, bg-height, \"solid\", \"white\")\n> >   overlay(red-circ, white-rect)\n> > end\n> > ```", "```\nfun japan-flag(unit :: Number) -> Image:\n  bg-width :: Number = unit * 3\n  bg-height :: Number = unit * 2\n  circ-rad :: Number = 3/5 * 1/2 * bg-height\n  red-circ :: Image = circle(circ-rad, \"solid\", \"red\")\n  white-rect :: Image = rectangle(bg-width, bg-height, \"solid\", \"white\")\n  overlay(red-circ, white-rect)\nend\n```", "```\n> > red-circ :: Number = circle(circ-rad, \"solid\", \"red\")\n> > ```", "```\nfun hours-to-wages(hours :: Number) -> Number:\n  doc: \"Compute total wage from hours, with overtime, at $10/hr base\"\nend\n```", "```\nfun hours-to-wages(hours :: Number) -> Number:\n  doc: \"Compute total wage from hours, with overtime, at $10/hr base\"\nwhere:\n  hours-to-wages(40) is 400\n  hours-to-wages(40.5) is 407.5\n  hours-to-wages(41) is 415\n  hours-to-wages(0) is 0\n  hours-to-wages(45) is 475\n  hours-to-wages(20) is 200\nend\n```", "```\nhours-to-wages(0)  is 0  * 10\nhours-to-wages(20) is 20 * 10\nhours-to-wages(40) is 40 * 10\n```", "```\nhours-to-wages(40.5) is (40 * 10) + ((40.5 - 40) * (10 * 1.5))\nhours-to-wages(41)   is (40 * 10) + ((41   - 40) * (10 * 1.5))\nhours-to-wages(45)   is (40 * 10) + ((45   - 40) * (10 * 1.5))\n```", "```\nfun hours-to-wages(hours :: Number) -> Number:\n  doc: \"Compute total wage from hours, with overtime, at $10/hr base\"\n  if hours <= 40:\n    hours * 10\n  else:\n    (40 * 10) + ((hours - 40) * (10 * 1.5))\n  end\nwhere:\n  hours-to-wages(40) is 400\n  hours-to-wages(40.5) is 407.5\n  hours-to-wages(41) is 415\n  hours-to-wages(0) is 0\n  hours-to-wages(45) is 475\n  hours-to-wages(20) is 200\nend\n```", "```\nfun hours-to-wages-20(hours :: Number) -> Number:\n  doc: \"Compute total wage from hours, accounting for overtime, at $20/hr base\"\n  if hours <= 40:\n    hours * 20\n  else:\n    (40 * 20) + ((hours - 40) * (20 * 1.5))\n  end\nend\n```", "```\nfun hours-to-wages-at-rate(rate :: Number, hours :: Number) -> Number:\n  doc: \"Compute total wage from hours, accounting for overtime, at the given rate\"\n  if hours <= 40:\n    hours * rate\n  else:\n    (40 * rate) + ((hours - 40) * (rate * 1.5))\n  end\nend\n```"]