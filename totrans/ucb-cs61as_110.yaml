- en: Mutable List Structure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可变列表结构
- en: Mutating a Pair
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改变对
- en: In Unit 2, we used pairs as the foundation of the data structures that store
    data. We have seen that we are now walking in a realm where it's possible to mutate
    data. There will also be times when we want to mutate what is stored in our data
    structures.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2单元中，我们使用对作为存储数据的��据结构的基础。我们已经看到我们现在正在进入一个可以改变数据的领域。也会有时候我们想要改变存储在数据结构中的内容。
- en: '`(define x (cons 1 2))`'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define x (cons 1 2))`'
- en: '![](/static/lab9-1.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/lab9-1.png)'
- en: '`set-car!`'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`set-car!`'
- en: 'Let the `car` of `x` represent the number of times I fall down the stairs and
    the `cdr` of `x` represent the number of times I went to the wrong bathroom. I
    fell down a flight of stairs just now, so I should update the `car` of `x` to
    `2`. How can we achieve this without creating a new pair? Scheme allows us to
    `set!` the value of some item using the following function:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让`x`的`car`代表我摔下楼梯的次数，`cdr`代表我去错洗手间的次数。我刚刚摔了一层楼梯，所以我应该更新`x`的`car`为`2`。我们如何在不创建新对的情况下实现这一点？Scheme允许我们使用以下函数`set!`来设置某个项目的值：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As the name suggests, `set-car!` takes in a pair and a value, and changes its
    `car` to point to the specified value of the second argument.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`set-car!`接受一个对和一个值，并将其`car`更改为指向第二个参数指定的值。
- en: '![](/static/lab9-2.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/lab9-2.png)'
- en: The general form is
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一般形式是
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`set-cdr!`'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`set-cdr!`'
- en: As you might expect, Scheme also provides us with the function `set-cdr!`, which
    takes in a pair and a value, and changes the pointer of the pair's `cdr` to point
    to the value. Going with the previous example, calling
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所期望的，Scheme还为我们提供了函数`set-cdr!`，它接受一个对和一个值，并将该对的`cdr`指针更改为指向该值。继续上一个例子，调用
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: will change the pair as shown below.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将会改变成下面显示的对。
- en: '![](/static/lab9-3.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/lab9-3.png)'
- en: The general syntax is
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一般的语法是
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Changing Pointers
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改变指针
- en: 'Let us see how `set-car!` and `set-cdr!` work with more complicated lists.
    We are given the following pairs:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`set-car!`和`set-cdr!`如何处理更复杂的列表。我们有以下对：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/e9eca21e818d614542c7d11dc0a02991.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e9eca21e818d614542c7d11dc0a02991.jpg)'
- en: The next few calls on `set-car!` and `set-cdr!` are independent and will be
    based on this original configuration. For the next few questions, drawing the
    box-pointer is highly recommended.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对`set-car!`和`set-cdr!`的接下来几次调用是独立的，并且将基于这个原始配置。对于接下来的几个问题，强烈建议画出盒指针。
- en: Example 1
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例1
- en: The effect of calling
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 调用的效果
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'to the original configuration will give the resulting box-and-pointer diagram:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对原始配置进行如下更改将得到以下盒指针图：
- en: '![](../Images/e8df21a04636ad2a014ee759e45a051d.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8df21a04636ad2a014ee759e45a051d.jpg)'
- en: 'The call changes the car-pointer on `x`, which initially points to `(list a
    b)`, to wherever `y` is pointing: `(list e f)`. What happens to the list with
    `a` and `b`? Nothing actually happens to it, but since it has no pointers that
    reference it, the list is no longer reachable.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个调用改变了`x`上的car指针，它最初指向`(list a b)`，现在指向`y`指向的地方：`(list e f)`。那么带有`a`和`b`的列表会发生什么？实际上对它没有任何影响，但由于它没有被引用的指针，这个列表就不再可达了。
- en: '**Test Your Understanding**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: In Example 1 above, what does `x` print?.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例1中，`x`会打印什么？
- en: 'Let''s say we have the original configuration from Example 1, and now we decided
    to call the following expression:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有来自示例1的原始配置，现在我们决定调用以下表达式：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What does `y` print?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`y`会打印什么？'
- en: Example 2
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例2
- en: From the original configuration, we now call
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从原始配置开始，我们现在调用
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This gives us the following box-and-pointer diagram:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们以下盒指针图：
- en: '![](../Images/753b11755ec16e689afc20e958891000.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/753b11755ec16e689afc20e958891000.jpg)'
- en: '`x` will print `((a b) c d)`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`将打印出`((a b) c d)`'
- en: '`y` will print `(e f)`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`将打印出`(e f)`'
- en: '`z` will print `((e f) c d)`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`z`将打印出`((e f) c d)`'
- en: '**Test Your Understanding**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: From the configuration shown in Example 2, we now decide to call
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 根据示例2中显示的配置，我们现在决定调用
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What does `x` print now?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`x`会打印什么？
- en: From the configuration shown in Example 2, what should we call so that `z` will
    return `((e f) b)`?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据示例2中显示的配置，我们应该调用什么才能使`z`返回`((e f) b)`？
- en: Creating New Pairs
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新的对
- en: 'Using `set-car!` and `set-cdr!` modifies existing pairs. Procedures like `cons`
    and `list` on the other hand, creates a new pair. What about `append`? Does it
    ''merge'' two lists by changing the `cdr` pointer of one of them? Remember the
    definition of `append` we have been using:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`set-car!`和`set-cdr!`修改现有的对。而`cons`和`list`等过程则创建新的对。那么`append`呢？它是否通过更改其中一个列表的`cdr`指针来“合并”两个列表？记住我们一直在使用的`append`的定义：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`append` forms a new list by `cons`-ing elements of `x` and `y`. This tells
    us that `append` returns a new list.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`append`通过`cons`连接`x`和`y`的元素形成一个新列表。这告诉我们`append`返回一个新列表。'
- en: '![](/static/lab9-4.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/lab9-4.png)'
- en: '**Test Your Understanding**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: What will the following piece of code print when entered into STk? Take an educated
    guess, then try it out in the interpreter. > (define a (list 1 2 3 4 5)) a > (set-cdr!
    (cdr a) (cdddr a)) okay > a
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入到STk时，以下代码片段会打印什么？先做一个有根据的猜测，然后在解释器中尝试。 > (define a (list 1 2 3 4 5)) a >
    (set-cdr! (cdr a) (cdddr a)) okay > a
- en: The procedure `append!` is similar to `append`, but it is a mutator rather than
    a constructor. It appends the lists by splicing them together, modifying the final
    pair of `x` so that its `cdr` is now `y`. (It is an error to call `append!` with
    an empty `x`.) For example,
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 过程`append!`类似于`append`，但它是一个变异器而不是一个构造器。它通过将它们拼接在一起来附加列表，修改`x`的最后一个对，使其`cdr`现在是`y`。（使用空的`x`调用`append!`是错误的。）例如，
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `last-pair` procedure accepts a list and returns the last pair of the list:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`last-pair`过程接受一个列表并返回列表的最后一个对：'
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s take a look at this piece of code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看这段代码：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What does `(cdr x)` return? Try it out by yourself before putting it into STk.
    Now, take the following call to `append!`
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`(cdr x)`返回什么？在将其放入STk之前，请自行尝试。现在，看看以下对`append!`的调用'
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What does `(cdr x)` return now?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`(cdr x)`返回什么？
- en: Sharing and Identity
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共享和身份
- en: The previous exercises raises a big sign that knowing when a pair is shared
    and created is important. In the code above, `x` and `y` refer to the same pairs,
    while `z` makes a different pair with the same elements.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的练习引起了一个重要的警示，即了解何时共享和创建对是重要的。在上面的代码中，`x`和`y`指向相同的对，而`z`则创建了一个具有相同元素的不同对。
- en: '![](/static/lab9-5.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/lab9-5.png)'
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Remember the `equal?` predicate? It can check if two pairs contain the same
    elements.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 记得`equal?`谓词吗？它可以检查两个对是否包含相同的元素。
- en: '`(equal? x y)`, `(equal? x z)`, `(equal? y z)` all return `#t`, because they
    all hold the same elements at the same place. Is it possible to differentiate
    that `x` and `z` point to different structures? Yes! Scheme has the `eq?` predicate
    which takes 2 arguments and checks if the 2 arguments refer to the same pair.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`(equal? x y)`、`(equal? x z)`、`(equal? y z)`都返回`#t`，因为它们在相同位置持有相同的元素。是否可能区分`x`和`z`指向不同的结构？是的！Scheme有`eq?`谓词，它接受2个参数并检查这两个参数是否指向同一个对。'
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Takeaways
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: '`set-car!` and `set-cdr!` change the respective `car` and `cdr` pointers. Procedures
    like `cons`, `list`, and `append` create new pairs. Knowing which pairs are shared
    between different lists is crucial to determining whether mutating one will influence
    the other. Drawing box-and-pointer diagrams will be very helpful.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`set-car!`和`set-cdr!`分别改变`car`和`cdr`指针。像`cons`、`list`和`append`这样的过程会创建新的对。知道哪些对在不同列表之间共享对于确定改变一个是否会影响另一个至关重要。绘制框和指针图将非常有帮助。'
