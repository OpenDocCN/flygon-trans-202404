["```\nfun dist(x, y):\n  num-sqrt((x * x) +\n           (y * y))\nend\n```", "```\ndata Point:\n  &#124; pt(x, y)\nend\n```", "```\ndata Point: | pt(x, y) end\n```", "```\ndata Point: pt(x, y) end\n```", "```\ndata Point:\n  | pt(x, y)\n  | pt3d(x, y, z)\nend\n```", "```\nif full-moon:\n  \"howl\"\nelse:\n  \"meow\"\nend\n```", "```\nif full-moon:\n  \"howl\"\nelse if new-moon:\n  \"bark\"\nelse:\n  \"meow\"\nend\n```", "```\nask:\n  | full-moon then: \"howl\"\n  | new-moon then:  \"bark\"\n  | otherwise:      \"meow\"\nend\n```", "```\nask:\n  | is-pt(v)   then: v.x + v.y\n  | is-pt3d(v) then: v.x + v.z\nend\n```", "```\nif is-pt(v):\n  v.x + v.y\nelse if is-pt3d(v):\n  v.x + v.z\nend\n```", "```\ncases (Point) v:\n  | pt(x, y)    => x + y\n  | pt(x, y, z) => x + z\nend\n```", "```\nfun square(n :: Number) -> Number: ...\n\nfun sort-nums(l :: List<Number>) -> List<Number>: ...\n\nfun sort<T>(l :: List<T>, cmp :: (T, T -> Boolean)) -> List<T>: ...\n```"]