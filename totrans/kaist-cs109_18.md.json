["```\n  >>> var d = Date(2012, 4, 9)\n\n```", "```\nclass Point(val x: Int, val y: Int) {\n  override fun toString(): String = \"(%d, %d)\".format(x, y)\n}\n\n```", "```\nclass Rect(var corner: Point, var width: Int, var height: Int) {\n  init { require(width > 0 && height > 0) }\n  override fun toString(): String = \"[%d ~ %d, %d ~ %d]\".format(corner.x, \n      corner.x + width, corner.y, corner.y + height)\n}\n\n```", "```\n>>> var r = Rect(Point(10, 20), 50, 20)\n>>> r\n[10 ~ 60, 20 ~ 40]\n\n```", "```\n>>> var r = Rect(10, 20, 50, 20)\n>>> r\n[10 ~ 60, 20 ~ 40]\n\n```", "```\nclass Rect(x: Int, y: Int, var width: Int, var height: Int) {\n  var corner = Point(x, y)\n  init { require(width > 0 && height > 0) }\n  override fun toString(): String = \"[%d ~ %d, %d ~ %d]\".format(corner.x, \n      corner.x + width, corner.y, corner.y + height)\n}\n\n```", "```\n>>> r.corner\n(10, 20)\n>>> r.width\n50\n>>> r.height\n20\n>>> r.x\nerror: unresolved reference: x\n>>> r.y\nerror: unresolved reference: y\n\n```", "```\nclass Accumulator {\n  var sum = 0\n  fun add(n: Int) {\n    sum += n\n  }\n}\n\n```", "```\n>>> var acc1 = Accumulator()\n>>> acc1\nLine46$Accumulator@747f281\n>>> acc1.add(7)\n>>> acc1.add(13)\n>>> acc1.sum\n20\n\n```", "```\n>>> var acc2 = Accumulator()\n>>> acc2.add(7)\n>>> acc2.add(23)\n>>> acc2.sum = 0 // Oops\n>>> acc2.add(19)\n>>> acc2.sum\n19\n\n```", "```\nclass Accumulator {\n  private var current = 0\n  fun add(n: Int) {\n    current += n\n  }\n  fun sum(): Int = current\n}\n\n```", "```\n>>> var acc1 = Accumulator()\n>>> acc1.add(7)\n>>> acc1.add(13)\n>>> acc1.sum()\n20\n\n```", "```\n>>> acc1.sum = 0\nerror: function invocation 'sum()' expected\nerror: variable expected\n\n```", "```\n>>> acc1.current = 0\nerror: cannot access 'current': it is 'private' in 'Accumulator'\n\n```", "```\n>>> acc1.current\nerror: cannot access 'current': it is 'private' in 'Accumulator'\n\n```", "```\nval Suits = arrayOf(\"Clubs\", \"Spades\", \"Hearts\", \"Diamonds\")\nval Faces = arrayOf(\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \n\t\t    \"Jack\", \"Queen\", \"King\", \"Ace\")\n\ndata class Card(val face: String, val suit: String) {\n  init {\n    require(suit in Suits)\n    require(face in Faces)\n  }\n\n  override fun toString(): String {\n    val a = if (face == \"Ace\" || face == \"8\") \"an \" else \"a \"\n    return a + face + \" of \" + suit\n  }\n\n  fun value(): Int = when(face) {\n    \"Ace\" -> 11\n    \"Jack\" -> 10\n    \"Queen\" -> 10\n    \"King\" -> 10\n    else -> face.toInt()\n  }\n}\n\n```", "```\n>>> val c1 = Card(\"Ace\", \"Diamonds\")\n>>> val c2 = Card(\"Jack\", \"Spades\")\n>>> val c3 = Card(\"8\", \"Hearts\")\n>>> c1\nan Ace of Diamonds\n>>> c2\na Jack of Spades\n>>> c3\nan 8 of Hearts\n>>> val hand = listOf(c1, c2, c3)\n>>> hand\n[an Ace of Diamonds, a Jack of Spades, an 8 of Hearts]\n>>> for (c in hand)\n...   println(\"Card $c has value ${c.value()}\")\nCard an Ace of Diamonds has value 11\nCard a Jack of Spades has value 10\nCard an 8 of Hearts has value 8\n\n```", "```\nclass Deck {\n  private val cards = mutableListOf<Card>()\n\n  init {\n    generateDeck()\n    shuffleDeck()\n  }  \n\n  private fun generateDeck() {\n    for (suit in Suits) {\n      for (face in Faces) {\n\tcards.add(Card(face, suit))\n      }\n    }\n  }\n\n  private fun shuffleDeck() {\n    for (i in 1 .. 52) {\n      // 0..i-2 already shuffled\n      val j = random.nextInt(i)\n      val cj = cards[j]\n      cards[j] = cards[i-1]\n      cards[i-1] = cj\n    }\n  }\n\n  fun draw(): Card {\n    assert(!cards.isEmpty())\n    return cards.removeAt(cards.lastIndex)\n  }\n}\n\n```", "```\n  private val cards = mutableListOf<Card>()\n\n  init {\n    generateDeck()\n    shuffleDeck()\n  }  \n\n```", "```\n>>> val deck = Deck()\n>>> for (i in 1 .. 10)\n...   println(deck.draw())\na King of Spades\na 3 of Diamonds\na Jack of Hearts\na 7 of Hearts\na 10 of Diamonds\nan Ace of Spades\na Queen of Clubs\na 4 of Clubs\na 2 of Clubs\na Jack of Clubs\n\n```", "```\n// Play one round of Blackjack\n//  Returns 1 if player wins, -1 if dealer wins, and 0 for a tie.\nfun blackjack(): Int {\n  val deck = Deck()\n\n  // initial cards\n  var player = mutableListOf(deck.draw())\n  println(\"You are dealt \" + player.first())\n  var dealer = mutableListOf(deck.draw())\n  println(\"Dealer is dealt a hidden card\")\n\n  player.add(deck.draw())\n  println(\"You are dealt \" + player.last())\n  dealer.add(deck.draw())\n  println(\"Dealer is dealt \" + dealer.last())\n  println(\"Your total is ${handValue(player)}\")\n\n  // player's turn to draw cards\n  var want = true\n  while (want && handValue(player) < 21) {\n    want = askYesNo(\"Would you like another card? (y/n) \")\n    if (want) {\n      player.add(deck.draw())\n      println(\"You are dealt \" + player.last())\n      println(\"Your total is ${handValue(player)}\")\n\n      // if the player's score is over 21, the player loses immediately.\n      if (handValue(player) > 21) {\n\tprintln(\"You went over 21! You lost!\")\n\treturn -1\n      }\n    }\n  }\n\n  println(\"The dealer's hidden card was \" + dealer.first())\n  while (handValue(dealer) < 17) {\n    dealer.add(deck.draw())\n    println(\"Dealer is dealt \" + dealer.last())\n  }\n  println(\"The dealer's total is ${handValue(dealer)}\")\n\n  // summary\n  val player_total = handValue(player)\n  val dealer_total = handValue(dealer)\n  println(\"\\nYour total is $player_total\")\n  println(\"The dealer's total is $dealer_total\")\n\n  if (dealer_total > 21) {\n    println(\"The dealer went over 21! You win!\")\n    return 1\n  } else if (player_total > dealer_total) {\n    println(\"You win!\")\n    return 1\n  } else if (player_total < dealer_total) {\n    println(\"You lost!\")\n    return -1\n  } else {\n    println(\"You have a tie!\")\n    return 0\n  }\n}\n\n```", "```\n$ ktc blackjack2.kt blackjack-game.kt \n\n```", "```\n$ kt Blackjack_gameKt\nWelcome to Blackjack!\n\nYou are dealt an 8 of Spades\nDealer is dealt a hidden card\nYou are dealt a 5 of Clubs\nDealer is dealt a Queen of Hearts\nYour total is 13\nWould you like another card? (y/n) y\nYou are dealt a 9 of Diamonds\nYour total is 22\nYou went over 21! You lost!\n\nPlay another round? (y/n) n\n\n```", "```\n    >>> class Normal(val x: Int)\n    >>> val n1 = Normal(7)\n    >>> val n2 = Normal(7)\n    >>> val n3 = n1\n    >>> n1 == n2\n    false\n    >>> n1 == n3\n    true\n    >>> n2 == n3\n    false\n    >>> data class Data(val x: Int)\n    >>> val d1 = Data(7)\n    >>> val d2 = Data(7)\n    >>> val d3 = d1\n    >>> d1 == d2\n    true\n    >>> d1 == d3\n    true\n    >>> d2 == d3\n    true\n\n    ```", "```\n    >>> data class Date(val year: Int, val month: Int, val day: Int)\n    >>> val d = Date(2012, 9, 12)\n    >>> d\n    Date(year=2012, month=9, day=12)\n    >>> fun extract(date: Date) {\n    ...   val (y, m, d) = date\n    ...   println(\"$y/$m/$d\")\n    ... }\n    >>> extract(d)\n    2012/9/12\n\n    ```", "```\n    >>> d\n    Date(year=2012, month=9, day=12)\n    >>> val d1 = d.copy(month = 12)\n    >>> d1\n    Date(year=2012, month=12, day=12)\n\n    ```"]