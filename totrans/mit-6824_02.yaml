- en: RPC and threads
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RPC和线程
- en: '6.824 2015 Lecture 2: Infrastructure: RPC and threads'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.824 2015年第2讲：基础设施：RPC和线程
- en: '**Note:** These lecture notes were slightly modified from the ones posted on
    the 6.824 [course website](http://nil.csail.mit.edu/6.824/2015/schedule.html)
    from Spring 2015.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**这些讲座笔记是从2015年春季6.824 [课程网站](http://nil.csail.mit.edu/6.824/2015/schedule.html)上稍作修改的。'
- en: Remote Procedure Call (RPC)
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程过程调用（RPC）
- en: A key piece of distrib sys machinery; all the labs use RPC
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式系统的一个关键部件；所有实验都使用RPC
- en: '*Goal:* easy-to-program network communication'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目标：*易于编程的网络通信'
- en: hides most details of client/server communication
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏了客户端/服务器通信的大部分细节
- en: client call is much like ordinary procedure call
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端调用很像普通的过程调用
- en: server handlers are much like ordinary procedures
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器处理程序很像普通的过程
- en: RPC is widely used!
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RPC被广泛使用！
- en: 'RPC ideally makes net communication look just like an ordinary *function call*:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: RPC理想情况下使网络通信看起来就像普通的*函数调用*：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: RPC aims for this level of transparency
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: RPC旨在实现这种透明度
- en: RPC message diagram
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RPC消息图
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Software structure
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 软件结构
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Stubs* are sort of the fake client-side functions that look like the real
    `f(x, y)` but they just take care of packaging the arguments, sending them over
    the network and ask the server to compute `f(x, y)`. The stub can then receive
    the result over the network and return the value to the client code.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*存根*有点像假的客户端端函数，看起来像真正的`f(x, y)`，但它们只负责打包参数、将其发送到网络上，并要求服务器计算`f(x, y)`。然后存根可以通过网络接收结果并将值返回给客户端代码。'
- en: 'Examples from lab 1:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '来自实验1的例子:'
- en: '`DoJob`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DoJob`'
- en: '`Register`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Register`'
- en: A few details of RPC
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RPC的一些细节
- en: '*Marshalling:* format data into packets'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编组：*将数据格式化为数据包'
- en: Tricky for arrays, pointers, objects, etc.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于数组、指针、对象等可能会有些棘手
- en: Go's RPC library is pretty powerful!
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go的RPC库非常强大！
- en: 'some things you cannot pass/marshall: e.g., channels, functions'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有些东西你无法传递/编组：例如通道、函数
- en: '*Binding:* how does client know who to talk to?'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绑定：*客户端如何知道要与谁通信？'
- en: Might be a name service -- e.g. DNS
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能是一个名称服务--例如DNS
- en: '*Threads:*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*线程：*'
- en: Client often has many threads, so `> 1` call outstanding, match up replies to
    calls
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端通常有许多线程，因此`> 1`个调用未完成，将回复与调用匹配
- en: Handlers may be slow, so server often runs each in a thread
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序可能很慢，因此服务器通常在每个线程中运行
- en: '*RPC problem:* what to do about failures?'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*RPC问题：*如何处理失败？'
- en: e.g. lost packets, broken network, crashed servers, slow servers
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如丢失的数据包、网络中断、服务器崩溃、服务器慢
- en: What does a failure look like to the client's RPC library?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端的RPC库看到的失败是什么样的？
- en: It never sees a response from the server
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它从未看到服务器的响应
- en: Maybe packet was lost
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能数据包丢失了
- en: It does *not* know if the server saw the request!
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它*不*知道服务器是否看到了请求！
- en: Maybe server/net failed just before sending reply
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能是服务器/网络在发送回复之前出现故障
- en: 'Simplest scheme: *"at least once"* behavior'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最简单的方案：*"至少一次"*行为
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: RPC client library waits for response for a while
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RPC客户端库会等待一段时间才会收到响应
- en: If none arrives, re-send the request
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有收到，重新发送请求
- en: Do this a few times
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多次执行这个操作
- en: Still no response -- return an error to the application
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仍然没有响应--向应用程序返回错误
- en: '**Q:** is "at least once" easy for applications to cope with?'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**问：**"至少一次"对应用程序来说容易应对吗？'
- en: 'Simple problem w/ at least once:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 至少一次的简单问题：
- en: Occurs with requests that are **not** *side-effect free*
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发生在**非** *无副作用* 的请求中
- en: Client sends *"deduct $10 from bank account"* twice because it did not hear
    back for the first one
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端发送*"从银行账户扣除$10"*两次，因为没有收到第一次的回复
- en: 'More subtle problem: what can go wrong with this client program?'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 更微妙的问题：客户端程序可能出现什么问题？
- en: '`Put("k", "v")` overwrites the value at `k` with `v`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Put("k", "v")`会用`v`覆盖`k`处的值'
- en: '`Put("key", "value1")` -- an RPC to set key''s value in a DB server'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Put("key", "value1")`--用于在DB服务器中设置键值的RPC'
- en: '`Put("key", "value2")` -- client then does a 2nd Put to same key'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Put("key", "value2")`--客户端然后对同一个键进行第二次Put'
- en: 'Example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Note:** This situation where client sends a request, server does some work
    and replies, but the reply is lost occurs frequently and will come up a lot in
    labs.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**客户端发送请求，服务器进行一些工作并回复，但回复丢失的情况经常发生，并且在实验中会经常遇到。'
- en: Is at-least-once ever OK?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 至少一次是否可以？
- en: 'Yes: if it''s OK to repeat operations, e.g. read-only op'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是的：如果重复操作是可以接受的，例如只读操作
- en: 'Yes: if application has its own plan for detecting duplicates'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是的：如果应用程序有自己的重复检测计划
- en: which you will need for Lab 1
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些内容将会在Lab 1中用到
- en: 'Better RPC behavior: *"at most once"*'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的RPC行为：*"至多一次"*
- en: '*Idea:* server RPC code detects duplicate requests'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*思路：*服务器RPC代码检测到重复请求'
- en: returns previous reply instead of re-running handler
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回先前的回复而不是重新运行处理程序
- en: Client includes *unique ID (XID)* with each request
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端在每个请求中包含*唯一ID（XID）*
- en: uses same XID for re-send
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新发送时使用相同的XID
- en: Server checks if XID has been seen before
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器检查XID是否之前已经看到
- en: 'Example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Some at-most-once complexities
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一些至多一次的复杂性
- en: How to ensure XID is unique?
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何确保XID是唯一的？
- en: big random number?
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大随机数？
- en: 'combine unique client ID (ip address?) with sequence #?'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将唯一客户端ID（ip地址？）与序列号结合？
- en: Server must eventually discard info about old RPCs
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器最终必须丢弃有关旧RPC的信息
- en: When is discard safe?
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时丢弃是安全的？
- en: '*Idea:*'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*想法：*'
- en: unique client IDs
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 唯一客户端ID
- en: per-client RPC sequence numbers
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个客户端RPC序列号
- en: 'client includes *"seen all replies `<= X`"* with every RPC much like TCP sequence
    #s and ACKs'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端在每个RPC中包含*"已看到所有回复`<= X`"*，类似于TCP序列号和ACK
- en: or only allow client one outstanding RPC at a time s.t. arrival of `seq+1` allows
    server to discard all `<= seq`
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者只允许客户端一次只有一个未完成的RPC，以便到达`seq+1`时服务器可以丢弃所有`<= seq`
- en: or client agrees to keep retrying for `< 5` minutes server discards after 5+
    minutes
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者客户端同意在`< 5`分钟内不断重试，服务器在5分钟后丢弃
- en: How to handle duplicate request while original is still executing?
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在原始请求仍在执行时如何处理重复请求？
- en: Server doesn't know reply yet; don't want to run twice
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器还不知道回复；不想运行两次
- en: '*Idea:* "pending" flag per executing RPC; wait or ignore'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*想法：*每个执行的RPC都有一个"挂起"标志；等待或忽略'
- en: What if an at-most-once server crashes?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个至多一次服务器崩溃了怎么办？
- en: if at-most-once duplicate info in memory, server will forget
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果至多一次在内存中有重复信息，服务器将忘记
- en: and accept duplicate requests
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并接受重复请求
- en: maybe it should write the duplicate info to disk?
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或许应该将重复信息写入磁盘？
- en: maybe replica server should also replicate duplicate info?
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制服务器也应该复制重复信息吗？
- en: What about *"exactly once"*?
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于*"仅一次"*怎么办？
- en: '*at-most-once* semantics plus unbounded retries plus fault-tolerant service'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*至多一次*语义加上无限重试加上容错服务'
- en: Go RPC is "at-most-once"
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Go RPC是"至多一次"
- en: open TCP connection
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开TCP连接
- en: write request to TCP connection
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将请求写入TCP连接
- en: TCP may retransmit, but server's TCP will filter out duplicates
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP可能会重传，但服务器的TCP会过滤重复数据
- en: no retry in Go code (i.e. will NOT create 2nd TCP connection)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go代码中不重试（即不会创建第二个TCP连接）
- en: Go RPC code returns an error if it doesn't get a reply
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go RPC代码如果没有收到回复就会返回错误
- en: perhaps after a timeout (from TCP)
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或许在超时后（来自TCP）
- en: perhaps server didn't see request
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或许服务器没有看到请求
- en: perhaps server processed request but server/net failed before reply came back
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或许服务器处理了请求但在回复返回之前服务器/网络失败了
- en: Go's at-most-once RPC isn't enough for Lab 1
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Go的至多一次RPC对Lab 1不够
- en: it only applies to a single RPC call
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它仅适用于单个RPC调用
- en: if worker doesn't respond, the master re-sends to it to another worker
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果工作线程没有响应，主服务器会将其重新发送给另一个工作线程
- en: but original worker may have not failed, and is working on it too
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但原始工作可能没有失败，而且也在处理
- en: Go RPC can't detect this kind of duplicate
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go RPC无法检测到这种重复
- en: No problem in lab 1, which handles at application level
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实验1中没有问题，它在应用程序级别处理
- en: In lab 2 you will have to protect against these kinds of duplicates
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实验2中，你将不得不防止这些重复
- en: Threads
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程
- en: threads are a fundamental server structuring tool
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程是一种基本的服务器结构工具
- en: you'll use them a lot in the labs
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将在实验中经常使用它们
- en: they can be tricky
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可能会很棘手
- en: useful with RPC
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与RPC一起很有用
- en: called goroutines in Go
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Go中称为goroutines
- en: Thread = "thread of control"
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 线程=“控制线程”
- en: threads allow one program to (logically) do many things at once
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程允许一个程序（逻辑上）同时执行多个任务
- en: the threads share memory
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程共享内存
- en: 'each thread includes some per-thread state:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个线程包含一些线程状态：
- en: program counter, registers, stack
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序计数器、寄存器、堆栈
- en: 'Threading challenges:'
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线程挑战：
- en: sharing data between thread
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线程之间共享数据
- en: what if two threads modify same variable at same time?
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个线程同时修改同一变量会怎样？
- en: what if one thread reads data another thread is changing?
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个线程读取另一个线���正在更改的数据会怎样？
- en: these problems are often called *races*
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些问题通常称为*竞争*
- en: 'need to protect invariants on shared data (Go: *mutex*)'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要保护共享数据的不变性（Go：*互斥锁*）
- en: '*coordination* between threads (Go: *channels*)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程之间的协调（Go：*通道*）
- en: e.g. wait for all Map threads to finish
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如等待所有Map线程完成
- en: '*deadlocks*'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*死锁*'
- en: thread 1 is waiting for thread 2
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程1正在等待线程2
- en: thread 2 is waiting for thread 1
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程2正在等待线程1
- en: easy detectable (unlike races)
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易检测（不像竞争）
- en: lock granularity
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁粒度
- en: goarse-grained `->` little concurrency/parallelism
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粗粒度`->`少量并发/并行
- en: fine-grained `->` lots of concurrency, but race and deadlocks
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 细粒度`->`大量并发，但竞争和死锁
- en: let's look at a toy RPC package to illustrate these problems
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们来看一个玩具 RPC 包，以说明这些问题。
- en: Look at today's handout -- [l-rpc.go](code/l-rpc.go)
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看今天的讲义 -- [l-rpc.go](code/l-rpc.go)
- en: Get it [here](code/l-rpc.go).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里](code/l-rpc.go)获取它。'
- en: it's a toy RPC system
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个玩具 RPC 系统。
- en: illustrates threads, mutexes, channels
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 说明了线程、互斥锁、通道。
- en: it's a toy
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个玩具。
- en: assumes connection already open
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设连接已经打开。
- en: only supports an integer arg, integer reply
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅支持整数参数，整数回复。
- en: doesn't deal with errors
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不处理错误。
- en: '`struct ToyClient`'
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`struct ToyClient`'
- en: client RPC state
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端 RPC 状态。
- en: mutex per `ToyClient`
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 `ToyClient` 都有一个互斥锁。
- en: connection to server (e.g. TCP socket)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与服务器的连接（例如 TCP 套接字）。
- en: xid -- unique ID per call, to match reply to caller
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: xid -- 每次调用的唯一标识，以匹配回复和调用方。
- en: '`pending[]` -- multiple threads may call, need to find them'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pending[]` -- 多个线程可能调用，需要找到它们。'
- en: channel on which caller is waiting
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用方正在等待的通道。
- en: '`Call()`'
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`Call()`'
- en: application calls `reply := client.Call(procNum, arg)`
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序调用 `reply := client.Call(procNum, arg)`
- en: '`procNum` indicates what function to run on server'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`procNum` 指示在服务器上运行哪个函数。'
- en: '`WriteRequest` knows the format of an RPC msg'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WriteRequest` 知道 RPC 消息的格式。'
- en: basically just the arguments turned into bits in a packet
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本上只是参数转换为数据包中的位。
- en: '**Q:** why the mutex in `Call()`? what does `mu.Lock()` do?'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Q:** `Call()` 中为什么需要互斥锁？`mu.Lock()` 是做什么的？'
- en: '**Q:** could we move `xid := tc.xid` outside the critical section?'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Q:** 我们可以将 `xid := tc.xid` 移到关键部分之外吗？'
- en: after all, we are not changing anything
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 毕竟，我们没有改变任何东西。
- en: '[See diagram below]'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[见下面的图表]'
- en: '**Q:** do we need to `WriteRequest` inside the critical section?'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Q:** 我们需要在关键部分内部调用 `WriteRequest` 吗？'
- en: 'note: Go says you are responsible for preventing concurrent map ops'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意：Go 说你负责防止并发的映射操作。
- en: that's one reason the update to pending is locked
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这就是为什么更新到待处理状态被锁定的一个原因。
- en: 'Diagram:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图表：
- en: '`Listener()`'
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`Listener()`'
- en: runs as a background thread
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为后台线程运行。
- en: what is `<-` doing?
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<-` 做什么？'
- en: not quite right that it may need to wait on chan for caller
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能需要在通道上等待调用方不太正确。
- en: Back to `Call()`...
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 回到 `Call()`...
- en: '**Q:** what if reply comes back very quickly?'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q:** 如果回复很快回来怎么办？'
- en: could `Listener()` see reply before `pending[xid]` entry exists?
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Listener()` 能在 `pending[xid]` 条目存在之前看到回复吗？'
- en: or before caller is waiting for channel?
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者在调用方等待通道之前？
- en: '**Q:** should we put `reply := <-done` inside the critical section?'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q:** 我们应该将 `reply := <-done` 放在关键部分内吗？'
- en: why is it OK outside? after all, two threads use it.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么在外面没问题？毕竟，两个线程都在使用它。
- en: '**Q:** why mutex per `ToyClient`, rather than single mutex per whole RPC pkg?'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q:** 为什么每个 `ToyClient` 都有一个互斥锁，而不是整个 RPC 包只有一个互斥锁？'
- en: Server's `Dispatcher()`
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 服务器的 `Dispatcher()`
- en: note that the Dispatcher echos the xid back to the client
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，调度器将 xid 回显回客户端。
- en: so that `Listener` knows which Call to wake up
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这样 `Listener` 就知道要唤醒哪个调用。
- en: '**Q:** why run the handler in a separate thread?'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Q:** 为什么在单独的线程中运行处理程序？'
- en: '**Q:** is it a problem that the dispatcher can reply out of order?'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Q:** 调度器可以无序地回复有问题吗？'
- en: '`main()`'
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`main()`'
- en: note registering handler in `handlers[]`
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意在 `handlers[]` 中注册处理程序。
- en: what will the program print?
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序会打印什么？
- en: When to use shared memory (and locks) vs when to use channels?
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 何时使用共享内存（和锁），何时使用通道？
- en: here is my opinion
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是我的观点。
- en: use channels when you want one thread to explicitly wait for another
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想要一个线程明确等待另一个线程时，请使用通道。
- en: often wait for a result, or wait for the next request
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常等待结果，或者等待下一个请求。
- en: e.g. when client `Call()` waits for `Listener()`
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如当客户端 `Call()` 等待 `Listener()` 时。
- en: use shared memory and locks when the threads are not intentionally
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当线程不是故意时，使用共享内存和锁。
- en: directly interacting, but just happen to r/w the same data
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接交互，但只是碰巧读/写相同的数据。
- en: e.g. when `Call()` uses `tc.xid`
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如当 `Call()` 使用 `tc.xid` 时。
- en: Go's "memory model" requires explicit synchronization to communicate!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Go 的 "内存模型" 需要显式同步才能通信！
- en: 'This code is not correct:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是不正确的：
- en: '[PRE6]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It's very tempting to write, but the Go spec says it's undefined use a channel
    or `sync.WaitGroup` instead
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 很诱人地编写，但 Go 规范表示应该使用通道或 `sync.WaitGroup` 代替。
- en: Study the Go tutorials on *goroutines* and *channels*.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 学习关于 *goroutines* 和 *channels* 的 Go 教程。
