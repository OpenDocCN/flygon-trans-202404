["```\n-> (= 1 1)\n#t\n\n-> (= 1 2)\n#f\n\n> (if #t\n    '(the condition was true)\n    '(the condition was false))\n(the condition was true)\n\n> (if #f\n    '(the condition was true)\n    '(the condition was false))\n(the condition was false)\n\n> (if (= 1 1)\n    '(the condition was true)\n    '(the condition was false))\n(the condition was true) \n```", "```\n-> (even? 2)\n#t\n-> (even? 3)\n#f \n```", "```\n-> (= (+ 3 3) 6)\n#t\n-> (= 'foo 'foo)\n; =: contract violation\n;   expected: number?\n;   given: 'foo\n;   argument position: 1st\n; [,bt for context] \n```", "```\n-> (member? 'a 'aeiou)\n#t\n-> (member? 'b 'aeiou)\n#f\n\n-> (member? 'foo '(foo bar baz))\n#t\n-> (member? 'foobar '(foo bar baz))\n#f \n```", "```\n-> (empty? \"\")\n#t\n-> (empty? 'foo)\n#f\n\n-> (empty? '())\n#t\n-> (empty? '(foo bar baz))\n#f\n\n-> (empty? 3)\n#f \n```", "```\n-> (equal? (+ 1 1) 2)\n#t\n-> (equal? 3 1)\n#f\n\n-> (equal? 'foo 'foo)\n#t\n-> (equal? '(foo bar baz) '(foo bar baz))\n#t\n\n-> (equal? + +)\n#t \n```", "```\n(define (vowel? letter)\n  (member? letter 'aeiou)) \n```", "```\n-> (false? \"\") ;; is \"\" false?\n#f ;; no, it is not\n-> (false? '())\n#f\n-> (false? 0)\n#f\n-> (false? false?) ;; is the procedure false? false?\n#f ;; no, the procedure itself is not false \n```", "```\n-> (and 1 2 3)\n3\n-> (and (= 1 1) (member? 'a 'aeiou))\n#t\n-> (and (number? 'hi) 2 3)\n#f \n```", "```\n-> (or (even? 4) (= 1 1))\n#t\n-> (or 1 #f 2)\n1\n-> (or (even? 1) #f (number? 'foo))\n#f \n```", "```\n-> (not #f)\n#t\n-> (not #t)\n#f\n-> (not 3)\n#f\n-> (not (and (and 3 3) (or #f #f)))\n#t \n```", "```\n-> (nand #f #t)\n...(not (and #f #t))\n...(not #f)\n#t \n```", "```\n-> (nor #f #t)\n...(not (or #f #t))\n...(not #t)\n#f \n```", "```\n-> (xor 11 #f)\n11\n-> (xor #f 11)\n11\n-> (xor 11 22)\n#f\n-> (xor #f #f)\n#f \n```"]