- en: Constructing Procedures Using Lambda
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Lambda构建过程
- en: Take a look at the following definition of `sum-doubles`, which takes two numbers
    `a` and `b`, and returns the sum of all numbers between `a` and `b` doubled.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面对`sum-doubles`的定义，它接受两个数字`a`和`b`，并返回`a`和`b`之间所有数字的总和加倍。
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since the `double` function was not already defined for us, we had to define
    it ourselves inside of our `sum-doubles` definition.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`double`函数并没有为我们预先定义，我们不得不在我们的`sum-doubles`定义内部自己定义它。
- en: But doing that is such a waste! Outside of our `sum-doubles` definition, we
    won't ever be able use that `double` function. Isn't there a quick, easy way to
    make a user-defined function without first defining, then applying the named function?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但这样做太浪费了！在我们的`sum-doubles`定义之外，我们将永远无法使用那个`double`函数。有没有一种快速、简单的方法可以在不先定义、然后应用命名函数的情况下创建用户定义的函数？
- en: 'Lambdas: The Anonymous Function'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Lambda：匿名函数
- en: Actually, yes. Let's introduce the **lambda** function, otherwise known as an
    anonymous function. These mysterious functions will be major players in the concepts
    we will discuss in future lessons.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，是的。让我们介绍**lambda**函数，也被称为匿名函数。这些神秘的函数将是我们将在未来课程中讨论的重要角色。
- en: 'The general form for a lambda is as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: lambda的一般形式如下：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s dissect this. Within the parentheses, we have three major parts:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来解剖一下。在括号内，我们有三个主要部分：
- en: a **tag**, `lambda`, which tells Racket that this is a lambda function,
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**标签**，`lambda`，告诉Racket这是一个lambda函数，
- en: a **list of parameters** (as many as you want),
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**参数列表**（可以有很多个），
- en: and the **body**—anything following the list of parameters.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和**主体**—在参数列表之后的任何内容。
- en: 'The procedure `double`, for example, can be defined as the following lambda
    function:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，过程`double`可以定义为以下lambda函数：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In other words,
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'would be equivalent to:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When describing lambdas, you would call it "the function of [params] that returns
    [body]." For example, "`double` is the function of `x` that returns `(* 2 x)`."
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在描述lambda时，你会称其为“返回[主体]的[参数]函数”。例如，“`double`是返回`(* 2 x)`的`x`函数。”
- en: Calling Lambdas
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用Lambda
- en: 'Just as we can call procedures created using `define`, we can also call lambda
    functions. The general form of a call to a lambda is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们可以调用使用`define`创建的过程一样，我们也可以调用lambda函数。调用lambda的一般形式如下：
- en: '`((lambda (<param1> <param2> ... <paramn>) <body>) <arg1> <arg2> ... <argn>)`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`((lambda (<param1> <param2> ... <paramn>) <body>) <arg1> <arg2> ... <argn>)`'
- en: 'So if we want to call `(double 5)` as an anonymous function, the substitution
    model would give us this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们想要将`(double 5)`作为匿名函数调用，替换模型会给我们这个结果：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What happens here? When we call a lambda function, the first argument corresponds
    to the first parameter, the second argument to the second parameter, ..., and
    the nth argument to the nth parameter. Then, in the body, every occurence of each
    parameter is replaced with the corresponding argument.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？当我们调用lambda函数时，第一个参数对应于第一个参数，第二个参数对应于第二个参数，...，第n个参数对应于第n个参数。然后，在主体中，每个参数的每次出现都会被相应的参数替换。
- en: 'Let''s illustrate this with an example expression:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个示例表达式来说明这一点：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the body of the lambda, we replace every occurence of `x` with `1`. We replace
    every `y` we see with `2`. And every time we see a `z`, we replace it with `3`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在lambda的主体中，我们用`1`替换每个`x`的出现。我们用`2`替换每个`y`。每次看到`z`时，我们用`3`替换它。
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we can rewrite `sum-doubles` as:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将`sum-doubles`重写为：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Note:** The value returned by creating a `lambda` is a procedure, just as
    much as one made with a call to `define`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**创建`lambda`返回的值是一个过程，就像使用`define`调用创建的过程一样。'
- en: 'Try these expressions out in the Racket interpreter:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在Racket解释器中尝试这些表达式：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
