["```\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'blue',\n  },\n  text: {\n    fontSize: 14,\n    color: 'red'\n  }\n}); \n```", "```\nclass Main extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.text}>I am red.</Text>\n      </View>\n    );\n  }\n} \n```", "```\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  header: {\n    height: 200,\n    backgroundColor: 'red'\n  },\n  main: {\n    flex: 1,\n    backgroundColor: 'blue'\n  },\n  footer: {\n    height: 200,\n    backgroundColor: 'green'\n  },\n  text: {\n    color: '#ffffff',\n    fontSize: 80\n  }\n}); \n```", "```\nclass Main extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.header}>\n          <Text style={styles.text}>200X100</Text>\n        </View>\n        <View style={styles.main}>\n          <View  style={styles.mainContent}>\n            <Text style={styles.text}>100X100</Text>\n          </View>\n        </View>\n        <View style={styles.footer}>\n          <Text style={styles.text}>200X100</Text>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  header: {\n    height: 100,\n    width: 200,\n    backgroundColor: 'red'\n  },\n  main: {\n    height: 200,\n    width: 200,\n    padding: 25,\n    borderWidth: 25,\n    borderColor: 'black',\n    margin: 25,\n    backgroundColor: 'blue'\n  },\n  mainContent: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'red'\n  },\n  footer: {\n    height: 100,\n    width: 200,\n    backgroundColor: 'green'\n  },\n  text: {\n    color: '#ffffff',\n    fontSize: 20\n  }\n}); \n```", "```\nclass Position extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.box1}>\n          <Text style={styles.text}>1</Text>\n        </View>\n        <View style={styles.box2}>\n          <Text style={styles.text}>2</Text>\n        </View>\n        <View style={styles.box3}>\n          <Text style={styles.text}>3</Text>\n        </View>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  box1: {\n    position: 'absolute',\n    top: 40,\n    left: 40,\n    width: 100,\n    height: 100,\n    backgroundColor: 'red'\n  },\n  box2: {\n    position: 'absolute',\n    top: 80,\n    left: 80,\n    width: 100,\n    height: 100,\n    backgroundColor: 'blue'\n  },\n  box3: {\n    position: 'absolute',\n    top: 120,\n    left: 120,\n    width: 100,\n    height: 100,\n    backgroundColor: 'green'\n  },\n  text: {\n    color: '#ffffff',\n    fontSize: 80\n  }\n}); \n```", "```\n box2: {\n    position: 'absolute',\n    top: 80,\n    left: 80,\n    width: 100,\n    height: 100,\n    backgroundColor: 'blue',\n    transform: [{'translate': [0,0, 1]}]\n  }, \n```", "```\nclass Relative extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.box1}>\n          <Text style={styles.text}>1</Text>\n          <View style={styles.ball}/>\n        </View>\n        <View style={styles.box2}>\n          <Text style={styles.text}>2</Text>\n        </View>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  box1: {\n    position: 'relative',\n    top: 40,\n    left: 40,\n    width: 100,\n    height: 100,\n    backgroundColor: 'red'\n  },\n  box2: {\n    position: 'absolute',\n    top: 100,\n    left: 100,\n    width: 100,\n    height: 100,\n    backgroundColor: 'blue'\n  },\n  ball: {\n    position: 'absolute',\n    top: 40,\n    left: 40,\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: 'yellow'\n  },\n  text: {\n    color: '#ffffff',\n    fontSize: 80\n  }\n}); \n```", "```\n class Fixed extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.tbar}>\n          <Text style={styles.text}>Fixed top bar</Text>\n        </View>\n        <ScrollView style={styles.main}>\n          <View style={styles.item}><Text style={styles.text}>1</Text></View>\n          <View style={styles.item}><Text style={styles.text}>2</Text></View>\n          <View style={styles.item}><Text style={styles.text}>3</Text></View>\n        </ScrollView>\n        <View style={styles.bbar}>\n          <Text style={styles.text}>Fixed bottom bar</Text>\n        </View>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  tbar: {\n    width: 375,\n    height: 100,\n    borderBottomWidth: 5,\n    borderColor: 'black',\n    backgroundColor: 'red'\n  },\n  main: {\n    flex: 1\n  },\n  item: {\n    height: 200,\n    width: 375,\n    marginTop: 10,\n    backgroundColor: 'green'\n  },\n  bbar: {\n    width: 375,\n    height: 100,\n    borderTopWidth: 5,\n    borderColor: 'black',\n    backgroundColor: 'red'\n  },\n  text: {\n    color: '#ffffff',\n    fontSize: 40\n  }\n}); \n```", "```\nlet winSize = Dimensions.get('window');\nconsole.log(winSize);\nclass Size extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.block}/>\n        <Text style={styles.text}>some text</Text>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'flex-start'\n  },\n  block: {\n    height: 100,\n    width: winSize.width,\n    backgroundColor: 'red'\n  },\n  text: {\n    color: '#ffffff',\n    fontSize: 40/winSize.scale,\n    backgroundColor: 'blue'\n  }\n}); \n```", "```\nclass Size extends Component {\n  handleTextLayout(evt){\n    console.log(evt.nativeEvent.layout);\n  }\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.block}/>\n        <Text style={styles.text}\n          onLayout={this.handleTextLayout}>some text</Text>\n      </View>\n    );\n  }\n} \n```", "```\nclass InheritanceStyle extends Component {\n  render() {\n    return (\n      <View style={this.props.parentColor}>\n      </View>\n    );\n  }\n}\n\nclass Main extends Component {\n  handleReady(str){\n    console.log(str);\n  }\n  render() {\n    return (\n      <View style={styles.container}>\n        <InheritanceStyle parentColor={styles.blue}/>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  blue: {\n    flex: 1,\n    backgroundColor: 'blue'\n  }\n}); \n```", "```\nimport { StyleSheet,Dimensions } from 'react-native';\nlet winSize = Dimensions.get('window');\nconst BaseStyles = StyleSheet.create({\n  text: {\n    fontSize: 40/winSize.scale\n  }\n});\nexport default BaseStyles; \n```", "```\nimport BaseStyles from './BaseStyles';\n\nclass InheritanceStyle extends Component {\n  render() {\n    return (\n      <View style={this.props.parentColor}>\n        <Text style={[BaseStyles.text, styles.text]}> this is a long text </Text>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  text:{\n    color: '#ffffff'\n  }\n}); \n```"]