["```\n(define (make-rational numer denom)\n  (if (= 0 denom)\n      (error \"Divisor cannot be 0!\")\n      (cons numer denom)))\n\n(define (numerator rat)\n  (car rat))\n\n(define (denominator rat)\n  (cdr rat)) \n```", "```\n-> (define x (make-rational 3 4))\nx\n-> (define num (car x))\nnum\n-> (= num (numerator x))\n#t \n```", "```\n(define (expt-rat rat n)\n  (make-rational (expt (car rat) n) \n                 (expt (cdr rat) n))) \n```", "```\n-> (define x (make-rational 3 4))\nx\n-> (expt-rat x 2)\n(9 . 16) \n```", "```\n(define (make-rational numer denom)\n  (lambda (m) (cond ((equal? m 'numerator) numer)\n                    ((equal? m 'denominator) denom)\n                    (else (error \"bad message to rational\")))))\n\n(define (numerator rat)\n  (rat 'numerator))\n\n(define (denominator rat)\n  (rat 'denominator)) \n```", "```\n-> (define y (make-rational 5 6))\ny\n-> (expt-rat y 4)\n; car: contract violation\n;   expected: pair?\n;   given: #<procedure>\n; [,bt for context] \n```"]