- en: Foreword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Foreword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**BEGIN DRAFT BOOK DISCLAIMER**'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the samples will not compile or may not have been syntax checked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C and Rust code snippets are not distinguished very well yet (styling)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the text makes uncited assertions of fact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the text is marked TODO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the topics that should be covered are brushed over, given undue weight
    or omitted entirely
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the text probably makes no sense or repeats itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WITH ALL THAT IN MIND, read on!
  prefs: []
  type: TYPE_NORMAL
- en: '**END DRAFT BOOK DISCLAIMER**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of all the software that needs to be reliable in this world. Software
    that can ill afford downtime or crashes. Software that is mission critical and
    must not or should not fail.
  prefs: []
  type: TYPE_NORMAL
- en: Operating system services and daemons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet of things devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Industrial control software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Medical devices, imagery etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High availability servers / databases / cloud storage etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avionics, telemetry, rocketry, drones etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All this code that has to run as efficiently and reliably as possible with the
    minimal of errors. It also has to be predictable without sudden freezes or mystery-memory
    behavior due to garbage collection.
  prefs: []
  type: TYPE_NORMAL
- en: C and C++ has the speed angle covered but is hard to make reliable. A language
    like Java would have the reliability angle covered but is hard to make performant.
  prefs: []
  type: TYPE_NORMAL
- en: What we want is something which runs as fast as C or C++ but has the reliability
    that goes with it. And that is what Rust is about. It compiles into binary executables
    or libraries just like C or C++ and can even be used to produce dynamic libraries
    that can be consumed by other code bodies.
  prefs: []
  type: TYPE_NORMAL
