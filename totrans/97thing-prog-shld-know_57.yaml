- en: Message Passing Leads to Better Scalability in Parallel Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息传递在并行系统中导致更好的可伸缩性
- en: Message Passing Leads to Better Scalability in Parallel Systems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息传递在并行系统中导致更好的可伸缩性
- en: Programmers are taught from the very outset of their study of computing that
    concurrency — and especially parallelism, a special subset of concurrency — is
    hard, that only the very best can ever hope to get it right, and even they get
    it wrong. There is invariably great focus on threads, semaphores, monitors, and
    how hard it is to get concurrent access to variables to be thread-safe.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员从他们学习计算的最初阶段就被教导，并发——尤其是并行性，是困难的，只有最优秀的人才有希望做对，即使他们也会出错。人们总是非常关注线程、信号量、监视器，以及如何让并发访问变量变得线程安全的困难。
- en: 'True, there are many difficult problems, and they can be very hard to solve.
    But what is the root of the problem? Shared memory. Almost all the problems of
    concurrency that people go on and on about relate to the use of shared mutable
    memory: race conditions, deadlock, livelock, etc. The answer seems obvious: Either
    forgo concurrency or eschew shared memory!'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，存在许多困难问题，而且它们可能非常难以解决。但问题的根源是什么？共享内存。人们一直在谈论的几乎所有并发问题都与使用共享可变内存有关：竞争条件、死锁、活锁等。答案似乎很明显：要么放弃并发，要么放弃共享内存！
- en: Forgoing concurrency is almost certainly not an option. Computers have more
    and more cores on an almost quarterly basis, so harnessing true parallelism becomes
    more and more important. We can no longer rely on ever increasing processor clock
    speeds to improve application performance. Only by exploiting parallelism will
    the performance of applications improve. Obviously, not improving performance
    is an option, but it is unlikely to be acceptable to users.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 放弃并发几乎肯定不是一个选项。计算机几乎每个季度都会增加更多的核心，因此利用真正的并行性变得越来越重要。我们不能再依赖不断增加的处理器时钟速度来提高应用程序性能。只有通过利用并行性，应用程序的性能才会提高。显然，不提高性能是一个选择，但这不太可能被用户接受。
- en: So can we eschew shared memory? Definitely.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们可以放弃共享内存吗？当然可以。
- en: Instead of using threads and shared memory as our programming model, we can
    use processes and message passing. Process here just means a protected independent
    state with executing code, not necessarily an operating system process. Languages
    such as Erlang (and occam before it) have shown that processes are a very successful
    mechanism for programming concurrent and parallel systems. Such systems do not
    have all the synchronization stresses that shared memory, multi-threaded systems
    have. Moreover there is a formal model — Communicating Sequential Processes (CSP)
    — that can be applied as part of the engineering of such systems.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用进程和消息传递而不是线程和共享内存作为我们的编程模型。这里的进程只是指具有执行代码的受保护独立状态，不一定是操作系统进程。诸如 Erlang（以及之前的
    occam）等语言已经证明，进程是编程并发和并行系统的非常成功的机制。这些系统没有所有共享内存、多线程系统所具有的所有同步压力。此外，还有一个正式模型——通信顺序进程（CSP）——可以作为这些系统工程的一部分应用。
- en: We can go further and introduce dataflow systems as a way of computing. In a
    dataflow system there is no explicitly programmed control flow. Instead a directed
    graph of operators, connected by data paths, is set up and then data fed into
    the system. Evaluation is controlled by the readiness of data within the system.
    Definitely no synchronization problems.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步引入数据流系统作为一种计算方式。在数据流系统中，没有明确编程的控制流。相反，建立一个由数据路径连接的操作符有向图，然后将数据输入系统。评估由系统内数据的准备情况控制。绝对不会出现同步问题。
- en: Having said all this, languages such as C, C++, Java, Python, and Groovy are
    the principal languages of systems development and all of these are presented
    to programmers as languages for developing shared memory, multi-threaded systems.
    So what can be done? The answer is to use — or, if they don't exist, create —
    libraries and frameworks that provide process models and message passing, avoiding
    all use of shared mutable memory.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，诸如 C、C++、Java、Python 和 Groovy 等语言是系统开发的主要语言，所有这些语言都被呈现给程序员作为开发共享内存、多线程系统的语言。那么该怎么办呢？答案是使用——或者，如果不存在，创建——提供进程模型和消息传递的库和框架，避免使用任何共享可变内存。
- en: All in all, not programming with shared memory, but instead using message passing,
    is likely to be the most successful way of implementing systems that harness the
    parallelism that is now endemic in computer hardware. Bizarrely perhaps, although
    processes predate threads as a unit of concurrency, the future seems to be in
    using threads to implement processes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，不是使用共享内存进行编程，而是使用消息传递，很可能是实现利用计算机硬件中现在普遍存在的并行性的系统最成功的方式。或许有些奇怪，尽管进程在并发性方面早于线程，但未来似乎在于使用线程来实现进程。
- en: By [Russel Winder](http://programmer.97things.oreilly.com/wiki/index.php/Russel_Winder)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Russel Winder](http://programmer.97things.oreilly.com/wiki/index.php/Russel_Winder)
