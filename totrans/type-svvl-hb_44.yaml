- en: 索引:記号とキーワード
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引:記号とキーワード
- en: 原文：[https://typescriptbook.jp/symbols-and-keywords](https://typescriptbook.jp/symbols-and-keywords)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/symbols-and-keywords](https://typescriptbook.jp/symbols-and-keywords)
- en: JavaScriptやTypeScriptのコードには`?.`のような記号や`as`のようなキーワードが使われます。こういった記号やキーワードはGoogleで検索しづらく、意味を調べるのは難しいものです。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptやTypeScriptのコードには`?.`のような記号や`as`のようなキーワードが使われます。こういった記号やキーワードはGoogleで検索しづらく、意味を調べるのは難しいものです。
- en: この索引は、JavaScriptとTypeScriptの記号やキーワードから、その名前や意味を調べられるようにするためのものです。コードを読んでいて未知の記号やキーワードに出くわしたら、その意味や使い方を調べる手がかりにしてください。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: この索引は、JavaScriptとTypeScriptの記号やキーワードから、その名前や意味を調べられるようにするためのものです。コードを読んでいて未知の記号やキーワードに出くわしたら、その意味や使い方を調べる手がかりにしてください。
- en: ここで扱う記号とキーワードには、JavaScript由来のもの、つまり、JavaScriptとTypeScriptに共通して使えるものと、TypeScriptでのみ使えるものを併記しています。JavaScript由来のものには![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)のマークを、TypeScript固有のものには![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)マークを表示しています。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ここで扱う記号とキーワードには、JavaScript由来のもの、つまり、JavaScriptとTypeScriptに共通して使えるものと、TypeScriptでのみ使えるものを併記しています。JavaScript由来のものには![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)のマークを、TypeScript固有のものには![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)マークを表示しています。
- en: 記号[​](#記号 "記号 への直接リンク")
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 記号[​](#記号 "記号 への直接リンク")
- en: '`!` 論理否定演算子 (logical not operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-論理否定演算子-logical-not-operator-js
    "-論理否定演算子-logical-not-operator-js への直接リンク")'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`!` 論理否定演算子 (logical not operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-論理否定演算子-logical-not-operator-js
    "-論理否定演算子-logical-not-operator-js への直接リンク")'
- en: 真値と偽値を反転します。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 真値と偽値を反転します。
- en: '`!` 非Nullアサーション (non-null assertion operator) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-非nullアサーション-non-null-assertion-operator-ts
    "-非nullアサーション-non-null-assertion-operator-ts への直接リンク")'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`!` 非Nullアサーション (non-null assertion operator) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-非nullアサーション-non-null-assertion-operator-ts
    "-非nullアサーション-non-null-assertion-operator-ts への直接リンク")'
- en: 値がnullやundefinedでないことを宣言し、コンパイラーに値を非Nullとして解釈させます。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 値がnullやundefinedでないことを宣言し、コンパイラーに値を非Nullとして解釈させます。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`!` 明確な割り当てアサーション演算子 (definite assignment assertion operator) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-明確な割り当てアサーション演算子-definite-assignment-assertion-operator-ts
    "-明確な割り当てアサーション演算子-definite-assignment-assertion-operator-ts への直接リンク")'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`!` 明確な割り当てアサーション演算子 (definite assignment assertion operator) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-明確な割り当てアサーション演算子-definite-assignment-assertion-operator-ts
    "-明確な割り当てアサーション演算子-definite-assignment-assertion-operator-ts への直接リンク")'
- en: クラスのプロパティが型アノテーションで示された型でセットされていることをコンパイラーに伝える記号です。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: クラスのプロパティが型アノテーションで示された型でセットされていることをコンパイラーに伝える記号です。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: または、変数の値が型アノテーションで示された型でセットされていることをコンパイラーに伝える記号です。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: または、変数の値が型アノテーションで示された型でセットされていることをコンパイラーに伝える記号です。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[## 📄️ 明確な割り当てアサーション'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ 明確な割り当てアサーション'
- en: 明確な割り当てアサーションは、変数やプロパティが確実に初期化されていることをTypeScriptのコンパイラに伝える演算子です。](/reference/values-types-variables/definite-assignment-assertion)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 明確な割り当てアサーションは、変数やプロパティが確実に初期化されていることをTypeScriptのコンパイラに伝える演算子です。](/reference/values-types-variables/definite-assignment-assertion)
- en: '`!!` Double Bang ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-double-bang-js
    "-double-bang-js への直接リンク")'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`!!` Double Bang ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-double-bang-js
    "-double-bang-js への直接リンク")'
- en: double bangはJavaScriptで定義されている演算子ではなく、論理否定演算子を2つ連続したイディオムです。値がtruthyかを求めるときに使われます。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: double bangはJavaScriptで定義されている演算子ではなく、論理否定演算子を2つ連続したイディオムです。値がtruthyかを求めるときに使われます。
- en: '`!=` 不等価演算子 (inequality operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-不等価演算子-inequality-operator-js
    "-不等価演算子-inequality-operator-js への直接リンク")'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`!=` 不等価演算子 (inequality operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-不等価演算子-inequality-operator-js
    "-不等価演算子-inequality-operator-js への直接リンク")'
- en: 左の値と右の値が異なるか判定します。型が異なる場合は型変換されて比較されます。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値と右の値が異なるか判定します。型が異なる場合は型変換されて比較されます。
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`!==` 厳密不等価演算子 (strict inequality operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-厳密不等価演算子-strict-inequality-operator-js
    "-厳密不等価演算子-strict-inequality-operator-js への直接リンク")'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`!==` 厳密不等価演算子 (strict inequality operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-厳密不等価演算子-strict-inequality-operator-js
    "-厳密不等価演算子-strict-inequality-operator-js への直接リンク")'
- en: 型を含めて左の値と右の値が異なるか判定します。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 型を含めて左の値と右の値が異なるか判定します。
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`"` 文字列リテラル (string literal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-文字列リテラル-string-literal-js
    "-文字列リテラル-string-literal-js への直接リンク")'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`"` 文字列リテラル (string literal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-文字列リテラル-string-literal-js
    "-文字列リテラル-string-literal-js への直接リンク")'
- en: '`"foo"`のように文字列リテラルの開始と終了に使われる記号です。'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`"foo"`のように文字列リテラルの開始と終了に使われる記号です。'
- en: '`#` プライベートプロパティ (private property) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-プライベートプロパティ-private-property-js
    "-プライベートプロパティ-private-property-js への直接リンク")'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`#` プライベートプロパティ (private property) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-プライベートプロパティ-private-property-js
    "-プライベートプロパティ-private-property-js への直接リンク")'
- en: クラスのプロパティのうち`#`で始まるプロパティはプライベートになります。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: クラスのプロパティのうち`#`で始まるプロパティはプライベートになります。
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`$` ドル変数 (dollar variable) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ドル変数-dollar-variable-js
    "-ドル変数-dollar-variable-js への直接リンク")'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`$` ドル変数 (dollar variable) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ドル変数-dollar-variable-js
    "-ドル変数-dollar-variable-js への直接リンク")'
- en: 慣習的にjQueryなどのライブラリで変数として使われることがあります。変数名として`$`が使われる場合は、JavaScriptとしては変数以上の特別な意味はありません。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 慣習的にjQueryなどのライブラリで変数として使われることがあります。変数名として`$`が使われる場合は、JavaScriptとしては変数以上の特別な意味はありません。
- en: '`$` 文字列中の変数展開 (placeholder) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-文字列中の変数展開-placeholder-js
    "-文字列中の変数展開-placeholder-js への直接リンク")'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`$` 文字列中の変数展開 (placeholder) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-文字列中の変数展開-placeholder-js
    "-文字列中の変数展開-placeholder-js への直接リンク")'
- en: テンプレートリテラル内で変数を展開するときに用いられる記号です。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: テンプレートリテラル内で変数を展開するときに用いられる記号です。
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`%` 剰余演算子 (reminder operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-剰余演算子-reminder-operator-js
    "-剰余演算子-reminder-operator-js への直接リンク")'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`%` 剰余演算子 (reminder operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-剰余演算子-reminder-operator-js
    "-剰余演算子-reminder-operator-js への直接リンク")'
- en: 左の値を右の値で割った余りを計算します。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値を右の値で割った余りを計算します。
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`%=` 剰余代入 (reminder assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-剰余代入-reminder-assignment-js
    "-剰余代入-reminder-assignment-js への直接リンク")'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`%=` 剰余代入 (reminder assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-剰余代入-reminder-assignment-js
    "-剰余代入-reminder-assignment-js への直接リンク")'
- en: 左の変数の値に右の値で割り算した余りを左の変数に割り当てます。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数の値に右の値で割り算した余りを左の変数に割り当てます。
- en: '`&` ビット論理積 (bitwise and) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ビット論理積-bitwise-and-js
    "-ビット論理積-bitwise-and-js への直接リンク")'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`&` ビット論理積 (bitwise and) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ビット論理積-bitwise-and-js
    "-ビット論理積-bitwise-and-js への直接リンク")'
- en: 左の値と右の値で共にビットが1である位置のビットを1に します。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値と右の値で共にビットが1である位置のビットを1に します。
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`&` インターセクション型 (intersection type) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-インターセクション型-intersection-type-ts
    "-インターセクション型-intersection-type-ts への直接リンク")'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`&` インターセクション型 (intersection type) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-インターセクション型-intersection-type-ts
    "-インターセクション型-intersection-type-ts への直接リンク")'
- en: 複数の型を組み合わせたインターセクション型を定義します。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 複数の型を組み合わせたインターセクション型を定義します。
- en: '[PRE18]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[## 📄️ インターセクション型'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ インターセクション型'
- en: 考え方はユニオン型と相対するものです。ユニオン型がどれかを意味するならインターセクション型はどれもです。言い換えるとオブジェクトの定義を合成させることを指します。](/reference/values-types-variables/intersection)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 考え方はユニオン型と相対するものです。ユニオン型がどれかを意味するならインターセクション型はどれもです。言い換えるとオブジェクトの定義を合成させることを指します。](/reference/values-types-variables/intersection)
- en: '`&=` ビット論理積代入 (bitwise and assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ビット論理積代入-bitwise-and-assignment-js
    "-ビット論理積代入-bitwise-and-assignment-js への直接リンク")'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`&=` ビット論理積代入 (bitwise and assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ビット論理積代入-bitwise-and-assignment-js
    "-ビット論理積代入-bitwise-and-assignment-js への直接リンク")'
- en: 左の変数の値と右の値で共にビットが1である位置のビットを1にした結果を左の変数に割り当てます。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数の値と右の値で共にビットが1である位置のビットを1にした結果を左の変数に割り当てます。
- en: '[PRE20]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`&&` 論理積 (logical and) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-論理積-logical-and-js
    "-論理積-logical-and-js への直接リンク")'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`&&` 論理積 (logical and) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-論理積-logical-and-js
    "-論理積-logical-and-js への直接リンク")'
- en: 左の値がtruthyな場合は右の値を返します。そうでないときは左の値を返します。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値がtruthyな場合は右の値を返します。そうでないときは左の値を返します。
- en: 特にboolean値が与えられた場合は、双方とも`true`のときに`true`を返し、そうでないときに`false`を返します。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 特にboolean値が与えられた場合は、双方とも`true`のときに`true`を返し、そうでないときに`false`を返します。
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`&&=` 論理積代入 (logical and assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-論理積代入-logical-and-assignment-js
    "-論理積代入-logical-and-assignment-js への直接リンク")'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`&&=` 論理積代入 (logical and assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-論理積代入-logical-and-assignment-js
    "-論理積代入-logical-and-assignment-js への直接リンク")'
- en: 左の変数と右の値の`&&`論理積の結果を左の変数に割り当てます。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数と右の値の`&&`論理積の結果を左の変数に割り当てます。
- en: '[PRE24]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`''` 文字列リテラル (string literal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-文字列リテラル-string-literal-js-1
    "-文字列リテラル-string-literal-js-1 への直接リンク")'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`''` 文字列リテラル (string literal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-文字列リテラル-string-literal-js-1
    "-文字列リテラル-string-literal-js-1 への直接リンク")'
- en: '`''foo''`のように文字列リテラルの開始と終了に使われる記号です。'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`''foo''`のように文字列リテラルの開始と終了に使われる記号です。'
- en: '`()` 即時実行関数の一部 (IIFE: immediately invoked function expression) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-即時実行関数の一部-iife-immediately-invoked-function-expression-js
    "-即時実行関数の一部-iife-immediately-invoked-function-expression-js への直接リンク")'
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`()` 即時実行関数の一部 (IIFE: immediately invoked function expression) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-即時実行関数の一部-iife-immediately-invoked-function-expression-js
    "-即時実行関数の一部-iife-immediately-invoked-function-expression-js への直接リンク")'
- en: 定義されるとすぐ実行される即時実行関数式(IIFE; Immediately Invoked Function Expression)の一部に用いられる書き方です。即時実行関数式そのものがデザインパターンで、その一部である`()`は関数呼び出しのカッコであり、JavaScriptの特別な演算子や構文というわけではありません。即時実行関数式は即時関数と呼ばれることがあります。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 定義されるとすぐ実行される即時実行関数式(IIFE; Immediately Invoked Function Expression)の一部に用いられる書き方です。即時実行関数式そのものがデザインパターンで、その一部である`()`は関数呼び出しのカッコであり、JavaScriptの特別な演算子や構文というわけではありません。即時実行関数式は即時関数と呼ばれることがあります。
- en: '[PRE26]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`*` 乗算演算子 (multiplication operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-乗算演算子-multiplication-operator-js
    "-乗算演算子-multiplication-operator-js への直接リンク")'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`*` 乗算演算子 (multiplication operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-乗算演算子-multiplication-operator-js
    "-乗算演算子-multiplication-operator-js への直接リンク")'
- en: 左の値と右の値を掛け算します。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値と右の値を掛け算します。
- en: '`*` ジェネレーター関数の宣言 (generator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ジェネレーター関数の宣言-generator-js
    "-ジェネレーター関数の宣言-generator-js への直接リンク")'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`*` ジェネレーター関数の宣言 (generator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ジェネレーター関数の宣言-generator-js
    "-ジェネレーター関数の宣言-generator-js への直接リンク")'
- en: '`Generator`オブジェクトを返すジェネレーター関数を宣言するときに用いられる記号です。'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`Generator`オブジェクトを返すジェネレーター関数を宣言するときに用いられる記号です。'
- en: '[PRE28]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`*` yield*式 (yield) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-yield式-yield-js
    "-yield式-yield-js への直接リンク")'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`*` yield*式 (yield) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-yield式-yield-js
    "-yield式-yield-js への直接リンク")'
- en: 別のジェネレーターに移譲する式を書くときに用いられる記号です。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 別のジェネレーターに移譲する式を書くときに用いられる記号です。
- en: '[PRE30]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`*=` 乗算代入 (multiplication assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-乗算代入-multiplication-assignment-js
    "-乗算代入-multiplication-assignment-js への直接リンク")'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`*=` 乗算代入 (multiplication assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-乗算代入-multiplication-assignment-js
    "-乗算代入-multiplication-assignment-js への直接リンク")'
- en: 左の変数の値と右の値を掛け算した結果を左の変数に割り当てます。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数の値と右の値を掛け算した結果を左の変数に割り当てます。
- en: '`**` べき乗演算子 (exponentiation) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-べき乗演算子-exponentiation-js
    "-べき乗演算子-exponentiation-js への直接リンク")'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`**` べき乗演算子 (exponentiation) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-べき乗演算子-exponentiation-js
    "-べき乗演算子-exponentiation-js への直接リンク")'
- en: 左の値を右の値でべき乗します。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値を右の値でべき乗します。
- en: '[PRE32]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`**=` べき乗代入 (exponentiation assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-べき乗代入-exponentiation-assignment-js
    "-べき乗代入-exponentiation-assignment-js への直接リンク")'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`**=` べき乗代入 (exponentiation assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-べき乗代入-exponentiation-assignment-js
    "-べき乗代入-exponentiation-assignment-js への直接リンク")'
- en: 左の変数の値を右の値でべき乗した結果を左の変数に割り当てます。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数の値を右の値でべき乗した結果を左の変数に割り当てます。
- en: '`+` 単項正値演算子 ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-単項正値演算子-js
    "-単項正値演算子-js への直接リンク")'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`+` 単項正値演算子 ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-単項正値演算子-js
    "-単項正値演算子-js への直接リンク")'
- en: number型に変換します。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: number型に変換します。
- en: '[PRE34]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`+` 加算演算子 (addition operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-加算演算子-addition-operator-js
    "-加算演算子-addition-operator-js への直接リンク")'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`+` 加算演算子 (addition operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-加算演算子-addition-operator-js
    "-加算演算子-addition-operator-js への直接リンク")'
- en: 2つの値を足し算します。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 2つの値を足し算します。
- en: '`+` 文字列結合演算子 (concatenation operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-文字列結合演算子-concatenation-operator-js
    "-文字列結合演算子-concatenation-operator-js への直接リンク")'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`+` 文字列結合演算子 (concatenation operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-文字列結合演算子-concatenation-operator-js
    "-文字列結合演算子-concatenation-operator-js への直接リンク")'
- en: 2つの文字列を結合します。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 2つの文字列を結合します。
- en: '`+` 修飾子の付加 ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-修飾子の付加-ts
    "-修飾子の付加-ts への直接リンク")'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`+` 修飾子の付加 ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-修飾子の付加-ts
    "-修飾子の付加-ts への直接リンク")'
- en: '`readonly`や`?`などの修飾子を追加します。'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`readonly`や`?`などの修飾子を追加します。'
- en: 何も指定しない場合は暗黙的に`+`が付与されるので`+`を実際に利用する機会はおそらくありません。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 何も指定しない場合は暗黙的に`+`が付与されるので`+`を実際に利用する機会はおそらくありません。
- en: '[PRE36]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`+=` 加算代入 (addition assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-加算代入-addition-assignment-js
    "-加算代入-addition-assignment-js への直接リンク")'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`+=` 加算代入 (addition assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-加算代入-addition-assignment-js
    "-加算代入-addition-assignment-js への直接リンク")'
- en: 左の変数の値とに右の値を足し算した結果を左の変数に割り当てます。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数の値とに右の値を足し算した結果を左の変数に割り当てます。
- en: '`++` インクリメント (increment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-インクリメント-increment-js
    "-インクリメント-increment-js への直接リンク")'
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`++` インクリメント (increment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-インクリメント-increment-js
    "-インクリメント-increment-js への直接リンク")'
- en: 変数に`1`を足す演算子です。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 変数に`1`を足す演算子です。
- en: '[PRE38]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`,` 関数引数の区切り ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-関数引数の区切り-js
    "-関数引数の区切り-js への直接リンク")'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`,` 関数引数の区切り ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-関数引数の区切り-js
    "-関数引数の区切り-js への直接リンク")'
- en: 複数の引数を関数に与えたり、複数の引数を受け取る関数宣言に用いる記号です。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 複数の引数を関数に与えたり、複数の引数を受け取る関数宣言に用いる記号です。
- en: '[PRE40]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '`,` 配列要素の区切り ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-配列要素の区切り-js
    "-配列要素の区切り-js への直接リンク")'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`,` 配列要素の区切り ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-配列要素の区切り-js
    "-配列要素の区切り-js への直接リンク")'
- en: 複数の要素を持つ配列を宣言するときに用いる記号です。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 複数の要素を持つ配列を宣言するときに用いる記号です。
- en: '[PRE42]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '`,` オブジェクトプロパティの区切り ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-オブジェクトプロパティの区切り-js
    "-オブジェクトプロパティの区切り-js への直接リンク")'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`,` オブジェクトプロパティの区切り ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-オブジェクトプロパティの区切り-js
    "-オブジェクトプロパティの区切り-js への直接リンク")'
- en: 複数のプロパティを持つオブジェクトを宣言するときに用いる記号です。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 複数のプロパティを持つオブジェクトを宣言するときに用いる記号です。
- en: '[PRE44]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`,` タプル型の要素の区切り ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-タプル型の要素の区切り-ts
    "-タプル型の要素の区切り-ts への直接リンク")'
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`,` タプル型の要素の区切り ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-タプル型の要素の区切り-ts
    "-タプル型の要素の���切り-ts への直接リンク")'
- en: 複数の要素を持つタプル型を宣言するときに用いる記号です。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 複数の要素を持つタプル型を宣言するときに用いる記号です。
- en: '[PRE46]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`,` カンマ演算子 (comma operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-カンマ演算子-comma-operator-js
    "-カンマ演算子-comma-operator-js への直接リンク")'
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`,` カンマ演算子 (comma operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-カンマ演算子-comma-operator-js
    "-カンマ演算子-comma-operator-js への直接リンク")'
- en: 左から右に式を評価をして、一番右の評価した値を返します。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 左から右に式を評価をして、一番右の評価した値を返します。
- en: '[PRE48]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '`-` 単項負値演算子 ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#--単項負値演算子-js
    "--単項負値演算子-js への直接リンク")'
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`-` 単項負値演算子 ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#--単項負値演算子-js
    "--単項負値演算子-js への直接リンク")'
- en: 正負を反転してnumber型に変換します。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正負を反転してnumber型に変換します。
- en: '[PRE50]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '`-` 減算演算子 (subtraction operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#--減算演算子-subtraction-operator-js
    "--減算演算子-subtraction-operator-js への直接リンク")'
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`-` 減算演算子 (subtraction operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#--減算演算子-subtraction-operator-js
    "--減算演算子-subtraction-operator-js への直接リンク")'
- en: 2つの値を引き算します。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 2つの値を引き算します。
- en: '`-` 修飾子の削除 ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#--修飾子の削除-ts
    "--修飾子の削除-ts への直接リンク")'
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`-` 修飾子の削除 ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#--修飾子の削除-ts
    "--修飾子の削除-ts への直接リンク")'
- en: '`readonly`や`?`などの修飾子を削除します。'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`readonly`や`?`などの修飾子を削除します。'
- en: '[PRE52]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '`-=` 減算代入 (subtraction assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#--減算代入-subtraction-assignment-js
    "--減算代入-subtraction-assignment-js への直接リンク")'
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`-=` 減算代入 (subtraction assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#--減算代入-subtraction-assignment-js
    "--減算代入-subtraction-assignment-js への直接リンク")'
- en: 左の変数の値から右の値を引き算した結果を左の変数に割り当てます。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数の値から右の値を引き算した結果を左の変数に割り当てます。
- en: '`--` デクリメント (decrement) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#---デクリメント-decrement-js
    "---デクリメント-decrement-js への直接リンク")'
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`--` デクリメント (decrement) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#---デクリメント-decrement-js
    "---デクリメント-decrement-js への直接リンク")'
- en: 変数に`1`を引き算する演算子です。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 変数に`1`を引き算する演算子です。
- en: '[PRE54]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '`.` プロパティへのアクセス (dot operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-プロパティへのアクセス-dot-operator-js
    "-プロパティへのアクセス-dot-operator-js への直接リンク")'
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`.` プロパティへのアクセス (dot operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-プロパティへのアクセス-dot-operator-js
    "-プロパティへのアクセス-dot-operator-js への直接リンク")'
- en: オブジェクトのプロパティにアクセスするときに用いる記号です。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトのプロパティにアクセスするときに用いる記号です。
- en: '[PRE56]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '`...` スプレッド構文 (spread syntax) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-スプレッド構文-spread-syntax-js
    "-スプレッド構文-spread-syntax-js への直接リンク")'
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`...` スプレッド構文 (spread syntax) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-スプレッド構文-spread-syntax-js
    "-スプレッド構文-spread-syntax-js への直接リンク")'
- en: 配列などの反復可能オブジェクトを関数の引数にする構文です。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 配列などの反復可能オブジェクトを関数の引数にする構文です。
- en: '[PRE58]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: または、配列などの反復可能オブジェクトを配列要素に展開する構文です。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: または、配列などの反復可能オブジェクトを配列要素に展開する構文です。
- en: '[PRE60]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: または、オブジェクトのプロパティを展開する構文です。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: または、オブジェクトのプロパティを展開する構文です。
- en: '[PRE62]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '`...` 残余構文 (rest syntax) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-残余構文-rest-syntax-js
    "-残余構文-rest-syntax-js への直接リンク")'
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`...` 残余構文 (rest syntax) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-残余構文-rest-syntax-js
    "-残余構文-rest-syntax-js への直接リンク")'
- en: 関数の残りの引数をひとつの配列として受け取るのに用いられる構文です。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 関数の残りの引数をひとつの配列として受け取るのに用いられる構文です。
- en: '[PRE64]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: または、配列などの反復可能オブジェクトの残りの要素を取り出す構文です。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: または、配列などの反復可能オブジェクトの残りの要素を取り出す構文です。
- en: '[PRE66]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: または、オブジェクトの残りのプロパティを取り出す構文です。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: または、オブジェクトの残りのプロパティを取り出す構文です。
- en: '[PRE68]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '`/` 除算演算子 (division operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-除算演算子-division-operator-js
    "-除算演算子-division-operator-js への直接リンク")'
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`/` 除算演算子 (division operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-除算演算子-division-operator-js
    "-除算演算子-division-operator-js への直接リンク")'
- en: 左の値を右の値で割り算します。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値を右の値で割り算します。
- en: '`/` 正規表現リテラル (regular expression literal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-正規表現リテラル-regular-expression-literal-js
    "-正規表現リテラル-regular-expression-literal-js への直接リンク")'
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`/` 正規表現リテラル (regular expression literal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-正規表現リテラル-regular-expression-literal-js
    "-正規表現リテラル-regular-expression-literal-js への直接リンク")'
- en: '`/[0-9]+/`のような正規表現リテラルの前後に書かれる記号です。'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`/[0-9]+/`のような正規表現リテラルの前後に書かれる記号です。'
- en: '`/=` 除算代入 (division assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-除算代入-division-assignment-js
    "-除算代入-division-assignment-js への直接リンク")'
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`/=` 除算代入 (division assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-除算代入-division-assignment-js
    "-除算代入-division-assignment-js への直接リンク")'
- en: 左の変数の値を右の値で割り算した結果を左の変数に割り当てます。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数の値を右の値で割り算した結果を左の変数に割り当てます。
- en: '`//` 一行コメント (one line comment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-一行コメント-one-line-comment-js
    "-一行コメント-one-line-comment-js への直接リンク")'
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`//` 一行コメント (one line comment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-一行コメント-one-line-comment-js
    "-一行コメント-one-line-comment-js への直接リンク")'
- en: 行コメントの開始を表す記号です。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 行コメントの開始を表す記号です。
- en: '`/*` 複数行コメント (multiline comment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-複数行コメント-multiline-comment-js
    "-複数行コメント-multiline-comment-js への直接リンク")'
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`/*` 複数行コメント (multiline comment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-複数行コメント-multiline-comment-js
    "-複数行コメント-multiline-comment-js への直接リンク")'
- en: 複数行コメントの開始を表す記号です。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 複数行コメントの開始を表す記号です。
- en: '[PRE70]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '`/**` JSDoc[​](#-jsdoc "-jsdoc への直接リンク")'
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`/**` JSDoc[​](#-jsdoc "-jsdoc への直接リンク")'
- en: 慣習的にJSDocなどのドキュメンテーションコメントの開始を表す記号です。これはJavaScriptやTypeScriptの構文ではなく、複数行コメントを用いたドキュメンテーションに慣習的に用いられるものです。
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 慣習的にJSDocなどのドキュメンテーションコメントの開始を表す記号です。これはJavaScriptやTypeScriptの構文ではなく、複数行コメントを用いたドキュメンテーションに慣習的に用いられるものです。
- en: '`:` オブジェクトの一部 ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-オブジェクトの一部-js
    "-オブジェクトの一部-js への直接リンク")'
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`:` オブジェクトの一部 ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-オブジェクトの一部-js
    "-オブジェクトの一部-js への直接リンク")'
- en: オブジェクトプロパティのキーと値の対関係を表すのに用いられる記号です。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトプロパティのキーと値の対関係を表すのに用いられる記号です。
- en: '[PRE72]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '`:` 三項演算子の一部 (conditional operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-三項演算子の一部-conditional-operator-js
    "-三項演算子の一部-conditional-operator-js への直接リンク")'
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`:` 三項演算子の一部 (conditional operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-三項演算子の一部-conditional-operator-js
    "-三項演算子の一部-conditional-operator-js への直接リンク")'
- en: '`a ? b : c`のような三項演算子のelseを表すのに用いられる記号です。'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`a ? b : c`のような三項演算子のelseを表すのに用いられる記号です。'
- en: '`:` 型アノテーション (type annotation) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-型アノテーション-type-annotation-ts
    "-型アノテーション-type-annotation-ts への直接リンク")'
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`:` 型アノテーション (type annotation) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-型アノテーション-type-annotation-ts
    "-型アノテーション-type-annotation-ts への直接リンク")'
- en: 変数の型アノテーションに用いられる記号です。
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 変数の型アノテーションに用いられる記号です。
- en: '[PRE74]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: または、関数の引数や戻り値の型アノテーションに用いられる記号です。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: または、関数の引数や戻り値の型アノテーションに用いられる記号です。
- en: '[PRE76]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '`<` 小なり演算子 (less than operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-小なり演算子-less-than-operator-js
    "-小なり演算子-less-than-operator-js への直接リンク")'
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<` 小なり演算子 (less than operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-小なり演算子-less-than-operator-js
    "-小なり演算子-less-than-operator-js への直接リンク")'
- en: 左の値が右の値よりも小さいか判定します。
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値が右の値よりも小さいか判定します。
- en: '`<` ジェネリクス (generic) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-ジェネリクス-generic-ts
    "-ジェネリクス-generic-ts への直接リンク")'
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<` ジェネリクス (generic) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-ジェネリクス-generic-ts
    "-ジェネリクス-generic-ts への直接リンク")'
- en: ジェネリクスの型引数の開始に用いられる記号です。
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: ジェネリクスの型引数の開始に用いられる記号です。
- en: '[PRE78]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[## 📄️ ジェネリクス'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ ジェネリクス'
- en: 型の安全性とコードの共通化の両立は難しいものです。あらゆる型で同じコードを使おうとすると、型の安全性が犠牲になります。逆に、型の安全性を重視しようとすると、同じようなコードを量産する必要が出てコードの共通化が達成しづらくなります。こうした問題を解決するために導入された言語機能がジェネリクスです。ジェネリクスを用いると、型の安全性とコードの共通化を両立することができます。](/reference/generics)
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 型の安全性とコードの共通化の両立は難しいものです。あらゆる型で同じコードを使おうとすると、型の安全性が犠牲になります。逆に、型の安全性を重視しようとすると、同じようなコードを量産する必要が出てコードの共通化が達成しづらくなります。こうした問題を解決するために導入された言語機能がジェネリクスです。ジェネリクスを用いると、型の安全性とコードの共通化を両立することができます。](/reference/generics)
- en: '`<` JSX ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-jsx-ts "-jsx-ts
    への直接リンク")'
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<` JSX ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-jsx-ts "-jsx-ts
    への直接リンク")'
- en: '[JSX](/reference/jsx)と呼ばれるXMLリテラルの開始に現れる記号です。'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[JSX](/reference/jsx)と呼ばれるXMLリテラルの開始に現れる記号です。'
- en: '[PRE80]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '`<` 型アサーション (type assertion) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-型アサーション-type-assertion-ts
    "-型アサーション-type-assertion-ts への直接リンク")'
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<` 型アサーション (type assertion) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-型アサーション-type-assertion-ts
    "-型アサーション-type-assertion-ts への直接リンク")'
- en: 型アサーションに用いられる記号です。`as`の別の書き方です。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 型アサーションに用いられる記号です。`as`の別の書き方です。
- en: '[PRE82]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '`<=` 小なりイコール演算子 (less than or equal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-小なりイコール演算子-less-than-or-equal-js
    "-小なりイコール演算子-less-than-or-equal-js への直接リンク")'
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<=` 小なりイコール演算子 (less than or equal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-小なりイコール演算子-less-than-or-equal-js
    "-小なりイコール演算子-less-than-or-equal-js への直接リンク")'
- en: 左の値が右の値以下か判定します。
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値が右の値以下か判定します。
- en: '`<<` ビット左シフト演算子 (left shift operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ビット左シフト演算子-left-shift-operator-js
    "-ビット左シフト演算子-left-shift-operator-js への直接リンク")'
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<<` ビット左シフト演算子 (left shift operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ビット左シフト演算子-left-shift-operator-js
    "-ビット左シフト演算子-left-shift-operator-js への直接リンク")'
- en: 左の値のビットを右の値の数だけ左にずらします。
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値のビットを右の値の数だけ左にずらします。
- en: '[PRE84]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '`<<=` 左シフト代入 (left shift assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-左シフト代入-left-shift-assignment-js
    "-左シフト代入-left-shift-assignment-js への直接リンク")'
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<<=` 左シフト代入 (left shift assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-左シフト代入-left-shift-assignment-js
    "-左シフト代入-left-shift-assignment-js への直接リンク")'
- en: 左の変数の値のビットを右の値の数だけ左にずらした結果を左の変数に割り当てます。
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数の値のビットを右の値の数だけ左にずらした結果を左の変数に割り当てます。
- en: '[PRE86]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '`=` 代入演算子 (assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-代入演算子-assignment-js
    "-代入演算子-assignment-js への直接リンク")'
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`=` 代入演算子 (assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-代入演算子-assignment-js
    "-代入演算子-assignment-js への直接リンク")'
- en: 左の変数に右の値を割り当てます。
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数に右の値を割り当てます。
- en: '`==` 等価演算子 (equality) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-等価演算子-equality-js
    "-等価演算子-equality-js への直接リンク")'
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`==` 等価演算子 (equality) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-等価演算子-equality-js
    "-等価演算子-equality-js への直接リンク")'
- en: 左の値と右の値が等しいか判定します。型が異なる場合は型変換されて比較されます。
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値と右の値が等しいか判定します。型が異なる場合は型変換されて比較されます。
- en: '[PRE88]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '`===` 厳密等価演算子 (strict equality) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-厳密等価演算子-strict-equality-js
    "-厳密等価演算子-strict-equality-js への直接リンク")'
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`===` 厳密等価演算子 (strict equality) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-厳密等価演算子-strict-equality-js
    "-厳密等価演算子-strict-equality-js への直接リンク")'
- en: 型を含めて左の値と右の値が等しいか判定します。
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 型を含めて左の値と右の値が等しいか判定します。
- en: '[PRE90]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '`=>` アロー関数の一部 (arrow function) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-アロー関数の一部-arrow-function-js
    "-アロー関数の一部-arrow-function-js への直接リンク")'
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`=>` アロー関数の一部 (arrow function) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-アロー関数の一部-arrow-function-js
    "-アロー関数の一部-arrow-function-js への直接リンク")'
- en: アロー関数の引数と関数ボディーの間に書かれる記号です。
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: アロー関数の引数と関数ボディーの間に書かれる記号です。
- en: '[PRE92]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '`>` 大なり演算子 (greater than) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-大なり演算子-greater-than-js
    "-大なり演算子-greater-than-js への直接リンク")'
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`>` 大なり演算子 (greater than) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-大なり演算子-greater-than-js
    "-大なり演算子-greater-than-js への直接リンク")'
- en: 左の値が右の値よりも大きいか判定します。
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値が右の値よりも大きいか判定します。
- en: '`>=` 大なりイコール演算子 (greater than or equal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-大なりイコール演算子-greater-than-or-equal-js
    "-大なりイコール演算子-greater-than-or-equal-js への直接リンク")'
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`>=` 大なりイコール演算子 (greater than or equal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-大なりイコール演算子-greater-than-or-equal-js
    "-大なりイコール演算子-greater-than-or-equal-js への直接リンク")'
- en: 左の値が右の値以上か判定します。
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値が右の値以上か判定します。
- en: '`>>` ビット右シフト演算子 (right shift) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ビット右シフト演算子-right-shift-js
    "-ビット右シフト演算子-right-shift-js への直接リンク")'
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`>>` ビット右シフト演算子 (right shift) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ビット右シフト演算子-right-shift-js
    "-ビット右シフト演算子-right-shift-js への直接リンク")'
- en: 左の値のビットを右の値の数だけ右にずらします。
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値のビットを右の値の数だけ右にずらします。
- en: '[PRE94]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '`>>=` 右シフト代入 (right shift assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-右シフト代入-right-shift-assignment-js
    "-右シフト代入-right-shift-assignment-js への直接リンク")'
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`>>=` 右シフト代入 (right shift assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-右シフト代入-right-shift-assignment-js
    "-右シフト代入-right-shift-assignment-js への直接リンク")'
- en: 左の変数の値のビットを右の値の数だけ右にずらした結果を左の変数に割り当てます。
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数の値のビットを右の値の数だけ右にずらした結果を左の変数に割り当てます。
- en: '`>>>` 符号なし右シフト演算子 (unsigned right shift) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-符号なし右シフト演算子-unsigned-right-shift-js
    "-符号なし右シフト演算子-unsigned-right-shift-js への直接リンク")'
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`>>>` 符号なし右シフト演算子 (unsigned right shift) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-符号なし右シフト演算子-unsigned-right-shift-js
    "-符号なし右シフト演算子-unsigned-right-shift-js への直接リンク")'
- en: 左の値のビットを右の値の数だけ右にずらします。左に入る符号ビットは常に0になります。
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 左の値のビットを右の値の数だけ右にずらします。左に入る符号ビットは常に0になります。
- en: '[PRE96]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '`>>>=` 符号なし右シフト代入 (unsigned right shift assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-符号なし右シフト代入-unsigned-right-shift-assignment-js
    "-符号なし右シフト代入-unsigned-right-shift-assignment-js への直接リンク")'
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`>>>=` 符号なし右シフト代入 (unsigned right shift assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-符号なし右シフト代入-unsigned-right-shift-assignment-js
    "-符号なし右シフト代入-unsigned-right-shift-assignment-js への直接リンク")'
- en: 左の変数の値のビットを右の値の数だけ右にずらした結果を左の変数に割り当てます。左に入る符号ビットは常に0になります。
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 左の変数の値のビットを右の値の数だけ右にずらした結果を左の変数に割り当てます。左に入る符号ビットは常に0になります。
- en: '`?` 三項演算子の一部 (conditional operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-三項演算子の一部-conditional-operator-js-1
    "-三項演算子の一部-conditional-operator-js-1 への直接リンク")'
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`?` 三項演算子の一部 (conditional operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-三項演算子の一部-conditional-operator-js-1
    "-三項演算子の一部-conditional-operator-js-1 への直接リンク")'
- en: '三項演算子`a ? b : c`の一部で、条件式の終わりに置かれる記号です。'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '三項演算子`a ? b : c`の一部で、条件式の終わりに置かれる記号です。'
- en: '`?` オプション修飾子 (optional property) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-オプション修飾子-optional-property-ts
    "-オプション修飾子-optional-property-ts への直接リンク")'
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: オブジェクトのプロパティを任意プロパティとして定義します。
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: または、関数の引数を必須ではなくします。
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '`?.` オプショナルチェーン (optional chaining) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-オプショナルチェーン-optional-chaining-js
    "-オプショナルチェーン-optional-chaining-js への直接リンク")'
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: プロパティのアクセス元が`null`または`undefined`のときにエラーを発生させずに`undefined`を返します。
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '`??` Null合体 (nullish coalescing operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-null合体-nullish-coalescing-operator-js
    "-null合体-nullish-coalescing-operator-js への直接リンク")'
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 左の値が`null`または`undefined`のときに右の値を返します。そうでない場合は左の値を返します。
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '`??=` Null合体代入 (logical nullish assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-null合体代入-logical-nullish-assignment-js
    "-null合体代入-logical-nullish-assignment-js への直接リンク")'
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 左の変数の値が`null`または`undefined`の場合のみ右の値を左の変数に割り当てます。
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '`@` デコレーター (decorator) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-デコレーター-decorator-ts
    "-デコレーター-decorator-ts への直接リンク")'
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: デコレーターはクラスやクラスメンバーに注釈を追加するもので、デコレーターを使うのに用いられる記号です。
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '`[` 配列リテラル (array literal notation) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-配列リテラル-array-literal-notation-js
    "-配列リテラル-array-literal-notation-js への直接リンク")'
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`[1, 2, 3]`のような配列リテラルの開始に用いられる記号です。'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '`[` アクセッサー (bracket notation) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-アクセッサー-bracket-notation-js
    "-アクセッサー-bracket-notation-js への直接リンク")'
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 配列の要素やオブジェクトのプロパティにアクセスするときに用いられる記号です。
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '`[` 配列の分割代入 (destructuring assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-配列の分割代入-destructuring-assignment-js
    "-配列の分割代入-destructuring-assignment-js への直接リンク")'
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 配列などの反復可能オブジェクトの分割代入の開始に用いられる記号です。
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '`[` インデックス型 (index signature) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-インデックス型-index-signature-ts
    "-インデックス型-index-signature-ts への直接リンク")'
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: インデックス型(index signature)の開始に用いられる記号です。
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[## 📄️ インデックス型'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptで、オブジェクトのフィールド名をあえて指定せず、プロパティのみを指定したい場合があります。そのときに使えるのがこのインデックス型(index
    signature)です。たとえば、プロパティがすべてnumber型であるオブジェクトは次のように型注釈します。](/reference/values-types-variables/object/index-signature)
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '`[]` 配列型 (array type) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[​](#-配列型-array-type-ts
    "-配列型-array-type-ts への直接リンク")'
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 配列型を表現するのに用いられる記号です。
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '`\` 文字列エスケープシーケンス (escaping character) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-文字列エスケープシーケンス-escaping-character-js
    "-文字列エスケープシーケンス-escaping-character-js への直接リンク")'
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 文字列のエスケープシーケンスの開始に用いられる記号です。
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '`^` ビット排他的論理和 (bitwise xor) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ビット排他的論理和-bitwise-xor-js
    "-ビット排他的論理和-bitwise-xor-js への直接リンク")'
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 左の値と右の値でビットの値が異なる位置のビットを1にします。
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '`^=` ビット排他的論理和代入 (bitwise xor assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#-ビット排他的論理和代入-bitwise-xor-assignment-js
    "-ビット排他的論理和代入-bitwise-xor-assignment-js への直接リンク")'
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 左の変数の値と右の値でビットの値が異なる位置のビットを1にした結果を左の変数に割り当てます。
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '`_` 数値の区切り文字 ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#_-数値の区切り文字-js
    "_-数値の区切り文字-js への直接リンク")'
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`_` 数字的分隔符 ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#_-数字的分隔符-js
    "_-数字的分隔符-js 的直接链接")'
- en: 数値の可読性のために、桁区切りとして用いられる記号です。
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 数字的可读性，用作数字的位数分隔符。
- en: '[PRE120]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '`_` アンダースコア変数 ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#_-アンダースコア変数-js
    "_-アンダースコア変数-js への直接リンク")'
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`_` 下划线变量 ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[​](#_-下划线变量-js
    "_-下划线变量-js 的直接链接")'
- en: 慣習的にlodashなどのライブラリで変数として使われることがあります。変数名として`_`が使われる場合は、JavaScriptとしては変数以上の特別な意味はありません。
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 惯例上，在类似lodash的库中可能会用作变量名。如果变量名为`_`，在JavaScript中并没有超出变量的特殊含义。
- en: また、慣習的に使わない変数の受け取り先に使われることがあります。たとえば、2つの引数を受け取るコールバック関数で、第2引数だけを使う場合、第1引数をアンダースコアにする書き方をするコードが中にはあります。
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，有时会用作不常用变量的接收者。例如，在接收两个参数的回调函数中，如果只使用第二个参数，则有些代码会将第一个参数命名为下划线。
- en: '[PRE122]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_PRE
  zh: '[PRE124]'
- en: js``string text`;`
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: js``字符串文本`;`
- en: '[PRE125]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: js``string text`;`
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: js``字符串文本`;`
- en: '[PRE126]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'js`if (<data-lsp lsp="let isOK: false">isOK</data-lsp>) {  // ...} else {  //
    ...}`'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`if (<data-lsp lsp="let isOK: false">isOK</data-lsp>) {  // ...} else {  //
    ...}`'
- en: '[PRE127]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'js`if (<data-lsp lsp="let isOK: false">isOK</data-lsp>) {  // ...} else {  //
    ...}`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`if (<data-lsp lsp="let isOK: false">isOK</data-lsp>) {  // ...} else {  //
    ...}`'
- en: '[PRE128]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'js`{  const  <data-lsp lsp="const value: 1">value</data-lsp>  =  1;}{  const  <data-lsp
    lsp="const value: 2">value</data-lsp>  =  2;  // 上と同じ変数名で初期化しているが、スコープが別になるためエラーにならない。}`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`{  const  <data-lsp lsp="const value: 1">value</data-lsp>  =  1;}{  const  <data-lsp
    lsp="const value: 2">value</data-lsp>  =  2;  // 使用相同变量名进行初始化，但由于作用域不同，不会出错。}`'
- en: '[PRE129]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'js`{  const  <data-lsp lsp="const value: 1">value</data-lsp>  =  1;}{  const  <data-lsp
    lsp="const value: 2">value</data-lsp>  =  2;  // 上と同じ変数名で初期化しているが、スコープが別になるためエラーにならない。}`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`{  const  <data-lsp lsp="const value: 1">value</data-lsp>  =  1;}{  const  <data-lsp
    lsp="const value: 2">value</data-lsp>  =  2;  // 使用相同变量名进行初始化，但由于作用域不同，不会出错。}`'
- en: '[PRE130]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'js`const  <data-lsp lsp="const object: {'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const object: {'
- en: 'a: number;'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a: 数字;'
- en: 'b: number;'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b: 数字;'
- en: 'c: number;'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c: 数字;'
- en: 'd: number;'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd: 数字;'
- en: '}">object</data-lsp>  = { <data-lsp lsp="(property) a: number">a</data-lsp>:  1,
    <data-lsp lsp="(property) b: number">b</data-lsp>:  2, <data-lsp lsp="(property)
    c: number">c</data-lsp>:  3, <data-lsp lsp="(property) d: number">d</data-lsp>:  4
    };const { <data-lsp lsp="const a: number">a</data-lsp>,  <data-lsp lsp="const
    b: number">b</data-lsp>,  ...<data-lsp lsp="const rest: {'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '}">object</data-lsp>  = { <data-lsp lsp="(property) a: 数字">a</data-lsp>:  1,
    <data-lsp lsp="(property) b: 数字">b</data-lsp>:  2, <data-lsp lsp="(property) c:
    数字">c</data-lsp>:  3, <data-lsp lsp="(property) d: 数字">d</data-lsp>:  4 };const
    { <data-lsp lsp="const a: 数字">a</data-lsp>,  <data-lsp lsp="const b: 数字">b</data-lsp>,  ...<data-lsp
    lsp="const rest: {'
- en: 'c: number;'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c: 数字;'
- en: 'd: number;'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd: 数字;'
- en: '}">rest</data-lsp> } = <data-lsp lsp="const object: {'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '}">rest</data-lsp> } = <data-lsp lsp="const object: {'
- en: 'a: number;'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a: 数字;'
- en: 'b: number;'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b: 数字;'
- en: 'c: number;'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c: 数字;'
- en: 'd: number;'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd: 数字;'
- en: '}">object</data-lsp>; // 分割代入<data-lsp lsp="namespace console'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '}">object</data-lsp>; // 分割赋值<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    a: number">a</data-lsp>, <data-lsp lsp="const b: number">b</data-lsp>, <data-lsp
    lsp="const rest: {'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    任意, ...optionalParams: 任意[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    a: 数字">a</data-lsp>, <data-lsp lsp="const b: 数字">b</data-lsp>, <data-lsp lsp="const
    rest: {'
- en: 'c: number;'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c: 数字;'
- en: 'd: number;'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd: 数字;'
- en: '}">rest</data-lsp>);1 2 { c: 3, d: 4 }// 分割代入function  <data-lsp lsp="function
    func({ a, b, ...rest }: {'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '}">rest</data-lsp>);1 2 { c: 3, d: 4 }// 分割赋值function  <data-lsp lsp="function
    func({ a, b, ...rest }: {'
- en: '[x: string]: any;'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[x: 字符串]: 任意;'
- en: 'a: any;'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a: 任意;'
- en: 'b: any;'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b: 任意;'
- en: '}): void">func</data-lsp>({ <data-lsp lsp="(parameter) a: any">a</data-lsp>,
    <data-lsp lsp="(parameter) b: any">b</data-lsp>,  ...<data-lsp lsp="(parameter)
    rest: {'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '}): void">func</data-lsp>({ <data-lsp lsp="(parameter) a: 任意">a</data-lsp>,
    <data-lsp lsp="(parameter) b: 任意">b</data-lsp>,  ...<data-lsp lsp="(parameter)
    rest: {'
- en: '[x: string]: any;'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[x: 字符串]: 任意;'
- en: '}">rest</data-lsp> }) {  <data-lsp lsp="namespace console'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '}">rest</data-lsp> }) {  <data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="(parameter)
    a: any">a</data-lsp>, <data-lsp lsp="(parameter) b: any">b</data-lsp>, <data-lsp
    lsp="(parameter) rest: {'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    任意, ...optionalParams: 任意[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="(parameter)
    a: 任意">a</data-lsp>, <data-lsp lsp="(parameter) b: 任意">b</data-lsp>, <data-lsp
    lsp="(parameter) rest: {'
- en: '[x: string]: any;'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[x: 字符串]: 任意;'
- en: '}">rest</data-lsp>);}<data-lsp lsp="function func({ a, b, ...rest }: {'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '}">rest</data-lsp>);}<data-lsp lsp="function func({ a, b, ...rest }: {'
- en: '[x: string]: any;'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[x: 字符串]: 任意;'
- en: 'a: any;'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a: 任意;'
- en: 'b: any;'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b: 任意;'
- en: '}): void">func</data-lsp>(<data-lsp lsp="const object: {'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '}): void">func</data-lsp>(<data-lsp lsp="const object: {'
- en: 'a: number;'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a: 数字;'
- en: 'b: number;'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b: 数字;'
- en: 'c: number;'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c: 数字;'
- en: 'd: number;'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd: 数字;'
- en: '}">object</data-lsp>);1 2 { c: 3, d: 4 }`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '}">object</data-lsp>);1 2 { c: 3, d: 4 }`'
- en: '[PRE131]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'js`const  <data-lsp lsp="const object: {'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const object: {'
- en: 'a: number;'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a: 数字;'
- en: 'b: number;'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b: 数字;'
- en: 'c: number;'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c: 数字;'
- en: 'd: number;'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd: 数字;'
- en: '}">object</data-lsp>  = { <data-lsp lsp="(property) a: number">a</data-lsp>:  1,
    <data-lsp lsp="(property) b: number">b</data-lsp>:  2, <data-lsp lsp="(property)
    c: number">c</data-lsp>:  3, <data-lsp lsp="(property) d: number">d</data-lsp>:  4
    };const { <data-lsp lsp="const a: number">a</data-lsp>,  <data-lsp lsp="const
    b: number">b</data-lsp>,  ...<data-lsp lsp="const rest: {'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '}">object</data-lsp>  = { <data-lsp lsp="(property) a: number">a</data-lsp>:  1,
    <data-lsp lsp="(property) b: number">b</data-lsp>:  2, <data-lsp lsp="(property)
    c: number">c</data-lsp>:  3, <data-lsp lsp="(property) d: number">d</data-lsp>:  4
    };const { <data-lsp lsp="const a: number">a</data-lsp>,  <data-lsp lsp="const
    b: number">b</data-lsp>,  ...<data-lsp lsp="const rest: {'
- en: 'c: number;'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c: number;'
- en: 'd: number;'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd: number;'
- en: '}">rest</data-lsp> } = <data-lsp lsp="const object: {'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '}">rest</data-lsp> } = <data-lsp lsp="const object: {'
- en: 'a: number;'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a: number;'
- en: 'b: number;'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b: number;'
- en: 'c: number;'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c: number;'
- en: 'd: number;'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd: number;'
- en: '}">object</data-lsp>; // 分割代入<data-lsp lsp="namespace console'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '}">object</data-lsp>; // 分割代入<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    a: number">a</data-lsp>, <data-lsp lsp="const b: number">b</data-lsp>, <data-lsp
    lsp="const rest: {'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    a: number">a</data-lsp>, <data-lsp lsp="const b: number">b</data-lsp>, <data-lsp
    lsp="const rest: {'
- en: 'c: number;'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c: number;'
- en: 'd: number;'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd: number;'
- en: '}">rest</data-lsp>);1 2 { c: 3, d: 4 }// 分割代入function <data-lsp lsp="function
    func({ a, b, ...rest }: {'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '}">rest</data-lsp>);1 2 { c: 3, d: 4 }// 分割代入function <data-lsp lsp="function
    func({ a, b, ...rest }: {'
- en: '[x: string]: any;'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[x: string]: any;'
- en: 'a: any;'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a: any;'
- en: 'b: any;'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b: any;'
- en: '}): void">func</data-lsp>({ <data-lsp lsp="(parameter) a: any">a</data-lsp>,
    <data-lsp lsp="(parameter) b: any">b</data-lsp>,  ...<data-lsp lsp="(parameter)
    rest: {'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '}): void">func</data-lsp>({ <data-lsp lsp="(parameter) a: any">a</data-lsp>,
    <data-lsp lsp="(parameter) b: any">b</data-lsp>,  ...<data-lsp lsp="(parameter)
    rest: {'
- en: '[x: string]: any;'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[x: string]: any;'
- en: '}">rest</data-lsp> }) {  <data-lsp lsp="namespace console'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '}">rest</data-lsp> }) {  <data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="(parameter)
    a: any">a</data-lsp>, <data-lsp lsp="(parameter) b: any">b</data-lsp>, <data-lsp
    lsp="(parameter) rest: {'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="(parameter)
    a: any">a</data-lsp>, <data-lsp lsp="(parameter) b: any">b</data-lsp>, <data-lsp
    lsp="(parameter) rest: {'
- en: '[x: string]: any;'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[x: string]: any;'
- en: '}">rest</data-lsp>);}<data-lsp lsp="function func({ a, b, ...rest }: {'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '}">rest</data-lsp>);}<data-lsp lsp="function func({ a, b, ...rest }: {'
- en: '[x: string]: any;'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[x: string]: any;'
- en: 'a: any;'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a: any;'
- en: 'b: any;'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b: any;'
- en: '}): void">func</data-lsp>(<data-lsp lsp="const object: {'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '}): void">func</data-lsp>(<data-lsp lsp="const object: {'
- en: 'a: number;'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a: number;'
- en: 'b: number;'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b: number;'
- en: 'c: number;'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c: number;'
- en: 'd: number;'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd: number;'
- en: '}">object</data-lsp>);1 2 { c: 3, d: 4 }`'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '}">object</data-lsp>);1 2 { c: 3, d: 4 }`'
- en: '[PRE132]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'js`const  <data-lsp lsp="const a: 2">a</data-lsp>  =  0b010;const  <data-lsp
    lsp="const b: 5">b</data-lsp>  =  0b101;<data-lsp lsp="namespace console'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const a: 2">a</data-lsp>  =  0b010;const  <data-lsp
    lsp="const b: 5">b</data-lsp>  =  0b101;<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>((<data-lsp
    lsp="const a: 2">a</data-lsp> | <data-lsp lsp="const b: 5">b</data-lsp>) ===  0b111);true`'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>((<data-lsp
    lsp="const a: 2">a</data-lsp> | <data-lsp lsp="const b: 5">b</data-lsp>) ===  0b111);true`'
- en: '[PRE133]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'js`const  <data-lsp lsp="const a: 2">a</data-lsp>  =  0b010;const  <data-lsp
    lsp="const b: 5">b</data-lsp>  =  0b101;<data-lsp lsp="namespace console'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const a: 2">a</data-lsp>  =  0b010;const  <data-lsp
    lsp="const b: 5">b</data-lsp>  =  0b101;<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>((<data-lsp
    lsp="const a: 2">a</data-lsp> | <data-lsp lsp="const b: 5">b</data-lsp>) ===  0b111);true`'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>((<data-lsp
    lsp="const a: 2">a</data-lsp> | <data-lsp lsp="const b: 5">b</data-lsp>) ===  0b111);true`'
- en: '[PRE134]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'ts`type  <data-lsp lsp="type ID = string | number">ID</data-lsp>  =  string  |  number;const  <data-lsp
    lsp="const id1: &quot;e29b41&quot;">id1</data-lsp>  =  "e29b41"; // OKconst  <data-lsp
    lsp="const id2: 100">id2</data-lsp>  =  100; // OKconst  <data-lsp lsp="const
    id3: true">id3</data-lsp>  =  true; // ERROR`'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`type  <data-lsp lsp="type ID = string | number">ID</data-lsp>  =  string  |  number;const  <data-lsp
    lsp="const id1: &quot;e29b41&quot;">id1</data-lsp>  =  "e29b41"; // OKconst  <data-lsp
    lsp="const id2: 100">id2</data-lsp>  =  100; // OKconst  <data-lsp lsp="const
    id3: true">id3</data-lsp>  =  true; // ERROR`'
- en: '[PRE135]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'ts`type <data-lsp lsp="type ID = string | number">ID</data-lsp> =  string  |  number;const  <data-lsp
    lsp="const id1: &quot;e29b41&quot;">id1</data-lsp>  =  "e29b41"; // OKconst  <data-lsp
    lsp="const id2: 100">id2</data-lsp>  =  100; // OKconst  <data-lsp lsp="const
    id3: true">id3</data-lsp>  =  true; // ERROR`'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`type <data-lsp lsp="type ID = string | number">ID</data-lsp> =  string  |  number;const  <data-lsp
    lsp="const id1: &quot;e29b41&quot;">id1</data-lsp>  =  "e29b41"; // OKconst  <data-lsp
    lsp="const id2: 100">id2</data-lsp>  =  100; // OKconst  <data-lsp lsp="const
    id3: true">id3</data-lsp>  =  true; // ERROR`'
- en: '[PRE136]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: js`<data-lsp lsp="namespace console
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: js`<data-lsp lsp="namespace console
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(true  ||  false);true<data-lsp
    lsp="namespace console'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(true  ||  false);true<data-lsp
    lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(false  ||  false);false<data-lsp
    lsp="namespace console'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(false  ||  false);false<data-lsp
    lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(false  ||  "abc");"abc"`'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(false  ||  "abc");"abc"`'
- en: '[PRE137]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: js`<data-lsp lsp="namespace console
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: js`<data-lsp lsp="namespace console
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(true  ||  false);true<data-lsp
    lsp="namespace console'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(true  ||  false);true<data-lsp
    lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(false  ||  false);false<data-lsp
    lsp="namespace console'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(false  ||  false);false<data-lsp
    lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(false  ||  "abc");"abc"`'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(false  ||  "abc");"abc"`'
- en: '[PRE138]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'js`let <data-lsp lsp="let a: boolean">a</data-lsp> =  false;let <data-lsp lsp="let
    b: number">b</data-lsp> =  1;<data-lsp lsp="let a: boolean">a</data-lsp> ||= <data-lsp
    lsp="let b: number">b</data-lsp>;<data-lsp lsp="namespace console'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`let <data-lsp lsp="let a: boolean">a</data-lsp> =  false;let <data-lsp lsp="let
    b: number">b</data-lsp> =  1;<data-lsp lsp="let a: boolean">a</data-lsp> ||= <data-lsp
    lsp="let b: number">b</data-lsp>;<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="let
    a: boolean">a</data-lsp>);1`'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="let
    a: boolean">a</data-lsp>);1`'
- en: '[PRE139]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'js`let <data-lsp lsp="let a: boolean">a</data-lsp> =  false;let <data-lsp lsp="let
    b: number">b</data-lsp> =  1;<data-lsp lsp="let a: boolean">a</data-lsp> ||= <data-lsp
    lsp="let b: number">b</data-lsp>;<data-lsp lsp="namespace console'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`let <data-lsp lsp="let a: boolean">a</data-lsp> =  false;let <data-lsp lsp="let
    b: number">b</data-lsp> =  1;<data-lsp lsp="let a: boolean">a</data-lsp> ||= <data-lsp
    lsp="let b: number">b</data-lsp>;<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="let
    a: boolean">a</data-lsp>);1`'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="let
    a: boolean">a</data-lsp>);1`'
- en: '[PRE140]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'js`const  <data-lsp lsp="const a: 1">a</data-lsp>  =  1;00000001<data-lsp lsp="namespace
    console'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const a: 1">a</data-lsp>  =  1;00000001<data-lsp lsp="namespace
    console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(~<data-lsp
    lsp="const a: 1">a</data-lsp>);11111110// 出力: -2`'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(~<data-lsp
    lsp="const a: 1">a</data-lsp>);11111110// 出力: -2`'
- en: '[PRE141]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'js`const  <data-lsp lsp="const a: 1">a</data-lsp>  =  1;00000001<data-lsp lsp="namespace
    console'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const a: 1">a</data-lsp>  =  1;00000001<data-lsp lsp="namespace
    console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(~<data-lsp
    lsp="const a: 1">a</data-lsp>);11111110// 出力: -2`'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(~<data-lsp
    lsp="const a: 1">a</data-lsp>);11111110// 出力: -2`'
- en: '[PRE142]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'js`~~1.5;1<data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method)
    Math.floor(x: number): number">floor</data-lsp>(1.5);1<data-lsp lsp="var Math:
    Math">Math</data-lsp>.<data-lsp lsp="(method) Math.ceil(x: number): number">ceil</data-lsp>(1.5);2~~-1.5;-1<data-lsp
    lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method) Math.floor(x: number):
    number">floor</data-lsp>(-1.5);-2<data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp
    lsp="(method) Math.ceil(x: number): number">ceil</data-lsp>(-1.5);-1`'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`~~1.5;1<data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method)
    Math.floor(x: number): number">floor</data-lsp>(1.5);1<data-lsp lsp="var Math:
    Math">Math</data-lsp>.<data-lsp lsp="(method) Math.ceil(x: number): number">ceil</data-lsp>(1.5);2~~-1.5;-1<data-lsp
    lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method) Math.floor(x: number):
    number">floor</data-lsp>(-1.5);-2<data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp
    lsp="(method) Math.ceil(x: number): number">ceil</data-lsp>(-1.5);-1`'
- en: '[PRE143]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'js`~~1.5;1<data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method)
    Math.floor(x: number): number">floor</data-lsp>(1.5);1<data-lsp lsp="var Math:
    Math">Math</data-lsp>.<data-lsp lsp="(method) Math.ceil(x: number): number">ceil</data-lsp>(1.5);2~~-1.5;-1<data-lsp
    lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method) Math.floor(x: number):
    number">floor</data-lsp>(-1.5);-2<data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp
    lsp="(method) Math.ceil(x: number): number">ceil</data-lsp>(-1.5);-1`'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`~~1.5;1<data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method)
    Math.floor(x: number): number">floor</data-lsp>(1.5);1<data-lsp lsp="var Math:
    Math">Math</data-lsp>.<data-lsp lsp="(method) Math.ceil(x: number): number">ceil</data-lsp>(1.5);2~~-1.5;-1<data-lsp
    lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method) Math.floor(x: number):
    number">floor</data-lsp>(-1.5);-2<data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp
    lsp="(method) Math.ceil(x: number): number">ceil</data-lsp>(-1.5);-1`'
- en: '[PRE144]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'ts`let <data-lsp lsp="let hello: string" style="border-bottom:solid 2px lightgrey">hello</data-lsp>
    =  "hello";` `let hello: stringlet <data-lsp lsp="let bye: &quot;bye&quot;" style="border-bottom:solid
    2px lightgrey">bye</data-lsp> =  "bye"  as  <data-lsp lsp="type const = &quot;bye&quot;">const</data-lsp>;`
    `let bye: "bye"const  <data-lsp lsp="const wolf: {'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`let <data-lsp lsp="let hello: string" style="border-bottom:solid 2px lightgrey">hello</data-lsp>
    =  "hello";` `let hello: stringlet <data-lsp lsp="let bye: &quot;bye&quot;" style="border-bottom:solid
    2px lightgrey">bye</data-lsp> =  "bye"  as  <data-lsp lsp="type const = &quot;bye&quot;">const</data-lsp>;`
    `let bye: "bye"const  <data-lsp lsp="const wolf: {'
- en: 'caniformia: string;'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'caniformia: string;'
- en: '}" style="border-bottom:solid 2px lightgrey">wolf</data-lsp>  = { <data-lsp
    lsp="(property) caniformia: string">caniformia</data-lsp>:  "Wolf" };` `const
    wolf: {'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">wolf</data-lsp>  = { <data-lsp
    lsp="(property) caniformia: string">caniformia</data-lsp>:  "Wolf" };` `const
    wolf: {'
- en: 'caniformia: string;'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'caniformia: string;'
- en: '}const  <data-lsp lsp="const fox: {'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '}const  <data-lsp lsp="const fox: {'
- en: 'readonly caniformia: &quot;Fox&quot;;'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly caniformia: &quot;Fox&quot;;'
- en: '}" style="border-bottom:solid 2px lightgrey">fox</data-lsp>  = { <data-lsp
    lsp="(property) caniformia: &quot;Fox&quot;">caniformia</data-lsp>:  "Fox" } as  <data-lsp
    lsp="type const = {'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">fox</data-lsp>  = { <data-lsp
    lsp="(property) caniformia: &quot;Fox&quot;">caniformia</data-lsp>:  "Fox" } as  <data-lsp
    lsp="type const = {'
- en: 'readonly caniformia: &quot;Fox&quot;;'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly caniformia: &quot;Fox&quot;;'
- en: '}">const</data-lsp>;` `const fox: {'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '}">const</data-lsp>;` `const fox: {'
- en: 'readonly caniformia: "Fox";'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly caniformia: "Fox";'
- en: '}`'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: '[PRE145]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'js`const  <data-lsp lsp="const exam: {'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const exam: {'
- en: 'scores: number[];'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'scores: number[];'
- en: 'readonly best: number;'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly best: number;'
- en: '}">exam</data-lsp>  = { <data-lsp lsp="(property) scores: number[]">scores</data-lsp>:
    [50,  70,  90,  80,  100,  60],  get  <data-lsp lsp="(getter) best: number">best</data-lsp>()
    {  return  <data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method)
    Math.max(...values: number[]): number">max</data-lsp>(...this.<data-lsp lsp="(property)
    scores: number[]">scores</data-lsp>); },};<data-lsp lsp="namespace console'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '}">exam</data-lsp>  = { <data-lsp lsp="(property) scores: number[]">scores</data-lsp>:
    [50,  70,  90,  80,  100,  60],  get  <data-lsp lsp="(getter) best: number">best</data-lsp>()
    {  return  <data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method)
    Math.max(...values: number[]): number">max</data-lsp>(...this.<data-lsp lsp="(property)
    scores: number[]">scores</data-lsp>); },};<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    exam: {'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    exam: {'
- en: 'scores: number[];'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'scores: number[];'
- en: 'readonly best: number;'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly best: number;'
- en: '}">exam</data-lsp>.<data-lsp lsp="(property) best: number">best</data-lsp>);100`'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '}">exam</data-lsp>.<data-lsp lsp="(property) best: number">best</data-lsp>);100`'
- en: '[PRE146]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'js`const  <data-lsp lsp="const exam: {'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const exam: {'
- en: 'scores: number[];'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'scores: number[];'
- en: 'readonly best: number;'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly best: number;'
- en: '}">exam</data-lsp>  = { <data-lsp lsp="(property) scores: number[]">scores</data-lsp>:
    [50,  70,  90,  80,  100,  60],  get <data-lsp lsp="(getter) best: number">best</data-lsp>()
    {  return  <data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method)
    Math.max(...values: number[]): number">max</data-lsp>(...this.<data-lsp lsp="(property)
    scores: number[]">scores</data-lsp>); },};<data-lsp lsp="namespace console'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '}">exam</data-lsp>  = { <data-lsp lsp="(property) scores: number[]">scores</data-lsp>:
    [50,  70,  90,  80,  100,  60],  get <data-lsp lsp="(getter) best: number">best</data-lsp>()
    {  return  <data-lsp lsp="var Math: Math">Math</data-lsp>.<data-lsp lsp="(method)
    Math.max(...values: number[]): number">max</data-lsp>(...this.<data-lsp lsp="(property)
    scores: number[]">scores</data-lsp>); },};<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    exam: {'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    exam: {'
- en: 'scores: number[];'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'scores: number[];'
- en: 'readonly best: number;'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly best: number;'
- en: '}">exam</data-lsp>.<data-lsp lsp="(property) best: number">best</data-lsp>);100`'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '}">exam</data-lsp>.<data-lsp lsp="(property) best: number">best</data-lsp>);100`'
- en: '[PRE147]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'js`const  <data-lsp lsp="const book: {'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const book: {'
- en: 'name: string;'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: '}">book</data-lsp>  = { <data-lsp lsp="(property) name: string">name</data-lsp>:  "サバイバルTypeScript"
    };<data-lsp lsp="namespace console'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '}">book</data-lsp>  = { <data-lsp lsp="(property) name: string">name</data-lsp>:  "サバイバルTypeScript"
    };<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>("name"  in
    <data-lsp lsp="const book: {'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>("name"  in
    <data-lsp lsp="const book: {'
- en: 'name: string;'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: '}">book</data-lsp>);true<data-lsp lsp="namespace console'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '}">book</data-lsp>);true<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>("price"  in
    <data-lsp lsp="const book: {'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>("price"  in
    <data-lsp lsp="const book: {'
- en: 'name: string;'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: '}">book</data-lsp>);false`'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '}">book</data-lsp>);false`'
- en: '[PRE148]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'js`const  <data-lsp lsp="const book: {'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const book: {'
- en: 'name: string;'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: '}">book</data-lsp>  = { <data-lsp lsp="(property) name: string">name</data-lsp>:  "サバイバルTypeScript"
    };<data-lsp lsp="namespace console'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '}">book</data-lsp>  = { <data-lsp lsp="(property) name: string">name</data-lsp>:  "サバイバルTypeScript"
    };<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>("name"  in
    <data-lsp lsp="const book: {'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>("name"  in
    <data-lsp lsp="const book: {'
- en: 'name: string;'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: '}">book</data-lsp>);true<data-lsp lsp="namespace console'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '}">book</data-lsp>);true<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>("price"  in
    <data-lsp lsp="const book: {'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>("price"  in
    <data-lsp lsp="const book: {'
- en: 'name: string;'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: '}">book</data-lsp>);false`'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '}">book</data-lsp>);false`'
- en: '[PRE149]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'js`const  <data-lsp lsp="const drink: {'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const drink: {'
- en: 'name: string;'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'price: number;'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'price: number;'
- en: '}">drink</data-lsp>  = { <data-lsp lsp="(property) name: string">name</data-lsp>:  "Coffee",
    <data-lsp lsp="(property) price: number">price</data-lsp>:  500 };for (const  <data-lsp
    lsp="const property: string">property</data-lsp>  in <data-lsp lsp="const drink:
    {'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '}">drink</data-lsp>  = { <data-lsp lsp="(property) name: string">name</data-lsp>:  "Coffee",
    <data-lsp lsp="(property) price: number">price</data-lsp>:  500 };for (const  <data-lsp
    lsp="const property: string">property</data-lsp>  in <data-lsp lsp="const drink:
    {'
- en: 'name: string;'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'price: number;'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'price: number;'
- en: '}">drink</data-lsp>) {  <data-lsp lsp="namespace console'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '}">drink</data-lsp>) {  <data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    property: string">property</data-lsp>);}`'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    property: string">property</data-lsp>);}`'
- en: '[PRE150]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'js`const  <data-lsp lsp="const drink: {'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 'js`const  <data-lsp lsp="const drink: {'
- en: 'name: string;'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'price: number;'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'price: number;'
- en: '}">drink</data-lsp>  = { <data-lsp lsp="(property) name: string">name</data-lsp>:  "Coffee",
    <data-lsp lsp="(property) price: number">price</data-lsp>:  500 };for (const  <data-lsp
    lsp="const property: string">property</data-lsp>  in <data-lsp lsp="const drink:
    {'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '}">drink</data-lsp>  = { <data-lsp lsp="(property) name: string">name</data-lsp>:  "咖啡",
    <data-lsp lsp="(property) price: number">price</data-lsp>:  500 };for (const  <data-lsp
    lsp="const property: string">property</data-lsp>  in <data-lsp lsp="const drink:
    {'
- en: 'name: string;'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: 字符串;'
- en: 'price: number;'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'price: 数字;'
- en: '}">drink</data-lsp>) {  <data-lsp lsp="namespace console'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '}">drink</data-lsp>) {  <data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    property: string">property</data-lsp>);}`'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    property: string">property</data-lsp>);}`'
- en: '[PRE151]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: ts`type  <data-lsp lsp="type MappedType = {
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: ts`type  <data-lsp lsp="type MappedType = {
- en: 'foo: string;'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'foo: 字符串;'
- en: 'bar: string;'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'bar: 字符串;'
- en: '}">MappedType</data-lsp>  = { [<data-lsp lsp="(type parameter) key">key</data-lsp>  in  "foo"  |  "bar"]:  string;};`'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '}">MappedType</data-lsp>  = { [<data-lsp lsp="(type parameter) key">key</data-lsp>  in  "foo"  |  "bar"]:  字符串;};`'
- en: '[PRE152]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: ts`type <data-lsp lsp="type MappedType = {
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: ts`type <data-lsp lsp="type MappedType = {
- en: 'foo: string;'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'foo: 字符串;'
- en: 'bar: string;'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'bar: 字符串;'
- en: '}">MappedType</data-lsp> = { [<data-lsp lsp="(type parameter) key">key</data-lsp>
    in  "foo"  |  "bar"]:  string;};`'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '}">MappedType</data-lsp> = { [<data-lsp lsp="(type parameter) key">key</data-lsp>
    in  "foo"  |  "bar"]:  字符串;};`'
- en: '[PRE153]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'ts`function  <data-lsp lsp="function isDuck(animal: Animal): animal is Duck">isDuck</data-lsp>(<data-lsp
    lsp="(parameter) animal: Animal">animal</data-lsp>:  <data-lsp lsp="class Animal">Animal</data-lsp>):
    <data-lsp lsp="(parameter) animal: Animal">animal</data-lsp> is  <data-lsp lsp="class
    Duck">Duck</data-lsp> {  return  <data-lsp lsp="(parameter) animal: Animal">animal</data-lsp>.<data-lsp
    lsp="(property) Animal.legs: number">legs</data-lsp> ===  2;}`'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`function  <data-lsp lsp="function isDuck(animal: Animal): animal is Duck">isDuck</data-lsp>(<data-lsp
    lsp="(parameter) animal: Animal">animal</data-lsp>:  <data-lsp lsp="class Animal">Animal</data-lsp>):
    <data-lsp lsp="(parameter) animal: Animal">animal</data-lsp> 是  <data-lsp lsp="class
    Duck">Duck</data-lsp> {  return  <data-lsp lsp="(parameter) animal: Animal">animal</data-lsp>.<data-lsp
    lsp="(property) Animal.legs: number">legs</data-lsp> ===  2;}`'
- en: '[PRE154]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'ts`function <data-lsp lsp="function isDuck(animal: Animal): animal is Duck">isDuck</data-lsp>(<data-lsp
    lsp="(parameter) animal: Animal">animal</data-lsp>: <data-lsp lsp="class Animal">Animal</data-lsp>):
    <data-lsp lsp="(parameter) animal: Animal">animal</data-lsp> is <data-lsp lsp="class
    Duck">Duck</data-lsp> {  return  <data-lsp lsp="(parameter) animal: Animal">animal</data-lsp>.<data-lsp
    lsp="(property) Animal.legs: number">legs</data-lsp> ===  2;}`'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`function <data-lsp lsp="function isDuck(animal: Animal): animal is Duck">isDuck</data-lsp>(<data-lsp
    lsp="(parameter) animal: Animal">animal</data-lsp>: <data-lsp lsp="class Animal">Animal</data-lsp>):
    <data-lsp lsp="(parameter) animal: Animal">animal</data-lsp> 是 <data-lsp lsp="class
    Duck">Duck</data-lsp> {  return  <data-lsp lsp="(parameter) animal: Animal">animal</data-lsp>.<data-lsp
    lsp="(property) Animal.legs: number">legs</data-lsp> ===  2;}`'
- en: '[PRE155]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: js`100n; // bigint型の100`
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: js`100n; // bigint型の100`
- en: '[PRE156]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: js`100n; // bigint型の100`
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: js`100n; // bigint型の100`
- en: '[PRE157]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: js`<data-lsp lsp="namespace console
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: js`<data-lsp lsp="namespace console
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(typeof  123);"number"`'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(typeof  123);"number"`'
- en: '[PRE158]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: js`<data-lsp lsp="namespace console
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: js`<data-lsp lsp="namespace console
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(typeof  123);"number"`'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(typeof  123);"number"`'
- en: '[PRE159]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: js`const  <data-lsp lsp="module prize
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: js`const  <data-lsp lsp="module prize
- en: 'const prize: {'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: 字符串;'
- en: 'history: never[];'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: 从不[];'
- en: 'winner: any;'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: 任意;'
- en: '}">prize</data-lsp>  = { <data-lsp lsp="(property) latest: string">latest</data-lsp>:  "",
    <data-lsp lsp="(property) history: never[]">history</data-lsp>: [],  set  <data-lsp
    lsp="(setter) winner: any">winner</data-lsp>(<data-lsp lsp="(parameter) winner:
    any">winner</data-lsp>) {  this.<data-lsp lsp="(property) latest: string">latest</data-lsp>
    = <data-lsp lsp="(parameter) winner: any">winner</data-lsp>;  this.<data-lsp lsp="(property)
    history: never[]">history</data-lsp>.<data-lsp lsp="(method) Array<never>.push(...items:
    never[]): number">push</data-lsp>(<data-lsp lsp="(parameter) winner: any">winner</data-lsp>);
    },};<data-lsp lsp="module prize'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>  = { <data-lsp lsp="(property) latest: string">latest</data-lsp>:  "",
    <data-lsp lsp="(property) history: never[]">history</data-lsp>: [],  set  <data-lsp
    lsp="(setter) winner: any">winner</data-lsp>(<data-lsp lsp="(parameter) winner:
    any">winner</data-lsp>) {  this.<data-lsp lsp="(property) latest: string">latest</data-lsp>
    = <data-lsp lsp="(parameter) winner: any">winner</data-lsp>;  this.<data-lsp lsp="(property)
    history: never[]">history</data-lsp>.<data-lsp lsp="(method) Array<never>.push(...items:
    never[]): number">push</data-lsp>(<data-lsp lsp="(parameter) winner: any">winner</data-lsp>);
    },};<data-lsp lsp="module prize'
- en: 'const prize: {'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: string;'
- en: 'history: never[];'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: never[];'
- en: 'winner: any;'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: any;'
- en: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "Stanislas Wawrinka";<data-lsp lsp="module prize'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "斯坦尼斯拉斯·瓦林卡";<data-lsp lsp="module prize'
- en: 'const prize: {'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: string;'
- en: 'history: never[];'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: never[];'
- en: 'winner: any;'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: any;'
- en: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "Rafael Nadal Parera";<data-lsp lsp="module prize'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "拉斐尔·纳达尔·帕雷拉";<data-lsp lsp="module prize'
- en: 'const prize: {'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: string;'
- en: 'history: never[];'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: never[];'
- en: 'winner: any;'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: any;'
- en: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "Novak Đoković";<data-lsp lsp="namespace console'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "诺瓦克·约科维奇";<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="module
    prize'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="module
    prize'
- en: 'const prize: {'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: string;'
- en: 'history: never[];'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: never[];'
- en: 'winner: any;'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: any;'
- en: '}">prize</data-lsp>.<data-lsp lsp="(property) latest: string">latest</data-lsp>);"Novak
    Đoković"<data-lsp lsp="namespace console'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>.<data-lsp lsp="(property) latest: string">latest</data-lsp>);"诺瓦克·约科维奇"<data-lsp
    lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="module
    prize'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="module
    prize'
- en: 'const prize: {'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: string;'
- en: 'history: never[];'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: never[];'
- en: 'winner: any;'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: any;'
- en: '}">prize</data-lsp>.<data-lsp lsp="(property) history: never[]">history</data-lsp>);[
    ''Stanislas Wawrinka'', ''Rafael Nadal Parera'', ''Novak Đoković'' ]`'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>.<data-lsp lsp="(property) history: never[]">history</data-lsp>);[
    ''斯坦尼斯拉斯·瓦林卡'', ''拉斐尔·纳达尔·帕雷拉'', ''诺瓦克·约科维奇'' ]`'
- en: '[PRE160]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: js`const  <data-lsp lsp="module prize
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: js`const  <data-lsp lsp="module prize
- en: 'const prize: {'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: string;'
- en: 'history: never[];'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: never[];'
- en: 'winner: any;'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: any;'
- en: '}">prize</data-lsp>  = { <data-lsp lsp="(property) latest: string">latest</data-lsp>:  "",
    <data-lsp lsp="(property) history: never[]">history</data-lsp>: [],  set <data-lsp
    lsp="(setter) winner: any">winner</data-lsp>(<data-lsp lsp="(parameter) winner:
    any">winner</data-lsp>) {  this.<data-lsp lsp="(property) latest: string">latest</data-lsp>
    = <data-lsp lsp="(parameter) winner: any">winner</data-lsp>;  this.<data-lsp lsp="(property)
    history: never[]">history</data-lsp>.<data-lsp lsp="(method) Array<never>.push(...items:
    never[]): number">push</data-lsp>(<data-lsp lsp="(parameter) winner: any">winner</data-lsp>);
    },};<data-lsp lsp="module prize'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>  = { <data-lsp lsp="(property) latest: string">latest</data-lsp>:  "",
    <data-lsp lsp="(property) history: never[]">history</data-lsp>: [],  set <data-lsp
    lsp="(setter) winner: any">winner</data-lsp>(<data-lsp lsp="(parameter) winner:
    any">winner</data-lsp>) {  this.<data-lsp lsp="(property) latest: string">latest</data-lsp>
    = <data-lsp lsp="(parameter) winner: any">winner</data-lsp>;  this.<data-lsp lsp="(property)
    history: never[]">history</data-lsp>.<data-lsp lsp="(method) Array<never>.push(...items:
    never[]): number">push</data-lsp>(<data-lsp lsp="(parameter) winner: any">winner</data-lsp>);
    },};<data-lsp lsp="module prize'
- en: 'const prize: {'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: string;'
- en: 'history: never[];'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: never[];'
- en: 'winner: any;'
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: any;'
- en: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "Stanislas Wawrinka";<data-lsp lsp="module prize'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "斯坦尼斯拉斯·瓦林卡";<data-lsp lsp="module prize'
- en: 'const prize: {'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: string;'
- en: 'history: never[];'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: never[];'
- en: 'winner: any;'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: any;'
- en: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "Rafael Nadal Parera";<data-lsp lsp="module prize'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "Rafael Nadal Parera";<data-lsp lsp="module prize'
- en: 'const prize: {'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: string;'
- en: 'history: never[];'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: never[];'
- en: 'winner: any;'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: any;'
- en: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "Novak Đoković";<data-lsp lsp="namespace console'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>.<data-lsp lsp="(property) winner: any">winner</data-lsp>
    =  "Novak Đoković";<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="module
    prize'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="module
    prize'
- en: 'const prize: {'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: string;'
- en: 'history: never[];'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: never[];'
- en: 'winner: any;'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: any;'
- en: '}">prize</data-lsp>.<data-lsp lsp="(property) latest: string">latest</data-lsp>);"Novak
    Đoković"<data-lsp lsp="namespace console'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>.<data-lsp lsp="(property) latest: string">latest</data-lsp>);"Novak
    Đoković"<data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="module
    prize'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="module
    prize'
- en: 'const prize: {'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 'const prize: {'
- en: 'latest: string;'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'latest: string;'
- en: 'history: never[];'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'history: never[];'
- en: 'winner: any;'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'winner: any;'
- en: '}">prize</data-lsp>.<data-lsp lsp="(property) history: never[]">history</data-lsp>);[
    ''Stanislas Wawrinka'', ''Rafael Nadal Parera'', ''Novak Đoković'' ]`'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '}">prize</data-lsp>.<data-lsp lsp="(property) history: never[]">history</data-lsp>);[
    ''Stanislas Wawrinka'', ''Rafael Nadal Parera'', ''Novak Đoković'' ]`'
- en: '[PRE161]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: js`<data-lsp lsp="namespace console
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: js`<data-lsp lsp="namespace console
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(void  123);undefined`'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(void  123);undefined`'
- en: '[PRE162]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: js`<data-lsp lsp="namespace console
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: js`<data-lsp lsp="namespace console
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(void  123);undefined`'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(void  123);undefined`'
- en: '[PRE163]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'ts`function  <data-lsp lsp="function returnUndefined(num: number): void">returnUndefined</data-lsp>(<data-lsp
    lsp="(parameter) num: number">num</data-lsp>:  number):  void {  if (<data-lsp
    lsp="(parameter) num: number">num</data-lsp> ===  0) {  return  <data-lsp lsp="var
    undefined">undefined</data-lsp>; }  return;}`'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`function  <data-lsp lsp="function returnUndefined(num: number): void">returnUndefined</data-lsp>(<data-lsp
    lsp="(parameter) num: number">num</data-lsp>:  number):  void {  if (<data-lsp
    lsp="(parameter) num: number">num</data-lsp> ===  0) {  return  <data-lsp lsp="var
    undefined">undefined</data-lsp>; }  return;}`'
- en: '[PRE164]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'ts`function <data-lsp lsp="function returnUndefined(num: number): void">returnUndefined</data-lsp>(<data-lsp
    lsp="(parameter) num: number">num</data-lsp>:  number):  void {  if (<data-lsp
    lsp="(parameter) num: number">num</data-lsp> ===  0) {  return  <data-lsp lsp="var
    undefined">undefined</data-lsp>; }  return;}`'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`function <data-lsp lsp="function returnUndefined(num: number): void">returnUndefined</data-lsp>(<data-lsp
    lsp="(parameter) num: number">num</data-lsp>:  number):  void {  if (<data-lsp
    lsp="(parameter) num: number">num</data-lsp> ===  0) {  return  <data-lsp lsp="var
    undefined">undefined</data-lsp>; }  return;}`'
- en: '[PRE165]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '```'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
