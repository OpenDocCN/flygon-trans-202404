- en: Tagged Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记数据
- en: Introduction to Tagged Data
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记数据简介
- en: Before we can create generic operators, we first have to be able to keep track
    of data types. Why?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建通用操作符之前，我们首先必须能够跟踪数据类型。为什么呢？
- en: 'Think back to Lesson 4 where we implemented rational numbers. We made the decision
    to store rational numbers as a pair, where the `car` held the numerator and the
    `cdr` held the denominator. Meanwhile, our frenemy, Ben Bitdiddle, implemented
    complex numbers. He represented these numbers as a pair as well: the `car` held
    the real part and the `cdr` held the imaginary part.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下第4课，我们实现了有理数。我们决定将有理数存储为一对，其中`car`保存分子，`cdr`保存分母。与此同时，我们的敌人，本·比特迪德尔，实现了复数。他也将这些数字表示为一对：`car`保存实部，`cdr`保存虚部。
- en: '![](/static/tagged_data_1.gif) ![](/static/tagged_data_2.gif)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/tagged_data_1.gif) ![](/static/tagged_data_2.gif)'
- en: Now, given a pair whose `car` is 3 and whose `cdr` is 4, how can we tell if
    the given data represents the rational number [mathjaxinline]\frac{3}{4}[/mathjaxinline]
    or the complex number [mathjaxinline]3+4i[/mathjaxinline]? The raw data we are
    given can be interpreted either way, so we can't know for sure! In fact, the pair
    may be neither of the two and actually represent some other data type. That's
    why need a system to associate data with their particular types.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，给定一个`car`是3且`cdr`是4的对，我们如何知道给定的数据表示有理数[mathjaxinline]\frac{3}{4}[/mathjaxinline]还是复数[mathjaxinline]3+4i[/mathjaxinline]？我们得到的原始数据可以以任何方式解释，所以我们无法确定！实际上，这对可能既不是这两者，实际上可能代表某种其他数据类型。这就是为什么我们需要一种将数据与其特定类型关联的系统。
- en: '(Side note: At this point, you might be mad at Ben—why did he have to use the
    same representation as us?! However, he really isn''t to blame. Even if he used
    a different internal representation, we *cannot* use this distinction to check
    the type of the data: we would be breaking data abstraction barriers!)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: （顺便说一句：此时，你可能会对本感到生气——他为什么要使用与我们相同的表示方式？！但是，他真的没有错。即使他使用了不同的内部表示，我们也*不能*使用此区别来检查数据的类型：我们将突破数据抽象屏障！）
- en: 'The solution is to have **tagged data**: Each piece of data carries around
    information about its type. We can do this by attaching tags to all our data.
    To accomplish this, we need a constructor to tag our data (`attach-tag`) and selectors
    to grab the tag and the data from a piece of tagged data (`type-tag` and `contents`).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是使用**标记数据**：每个数据片段都携带关于其类型的信息。我们可以通过给所有数据附加标记来实现这一点。为了做到这一点，我们需要一个构造函数来标记我们的数据（`attach-tag`），并选择器来从标记数据片段中获取标记和数据（`type-tag`和`contents`）。
- en: Here's a possible implementation for handling tagged data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是处理标记数据的可能实现。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Can you come up with another set of constructors and selectors that implements
    data tagging using a different internal representation?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你能想出另一组构造函数和选择器来使用不同的内部表示实现数据标记吗？
- en: Tagging Rational and Complex Numbers
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为有理数和复数标记
- en: 'Now that we''ve implemented tagged data, we can fix our implementations of
    the rational and complex number data types. Our old code looked like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实现了标记数据，我们可以修复我们的有理数和复数数据类型的实现。我们的旧代码看起来像这样：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But now we can do this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我们可以这样做：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that we easily could have replaced the function `attach-tag` with `cons`
    and the code would have still worked. But this violates the data abstraction barrier
    we created!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们完全可以用`attach-tag`替换函数`cons`，代码仍然可以正常工作。但这违反了我们创建的数据抽象屏障！
- en: 'We can then write selectors using `contents`. For example, for rational numbers:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`contents`编写选择器。例如，对于有理数：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Writing Procedures for Tagged Data
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为标记数据编写过程
- en: Our goal is to write a universal addition procedure. It should work with rational
    numbers and complex numbers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是编写一个通用的加法过程。它应该适用于有理数和复数。
- en: The first step is to write addition procedures that are specific to the data
    types of the inputs. Using the constructors and selectors that we just wrote in
    the previous section, this should be fairly straight forward.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是编写特定于输入数据类型的加法过程。使用我们在上一节刚刚编写的构造函数和选择器，这应该相当简单。
- en: 'Try the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下操作：
- en: Write `add-rational`, which takes in two rational numbers and returns a rational
    number equal to the sum of the two inputs. Remember to respect the data abstraction
    by using proper constructors and selectors.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写 `add-rational`，它接受两个有理数，并返回一个等于两个输入之和的有理数。记得通过使用适当的构造函数和选择器来尊重数据抽象。
- en: Write `add-complex`, which takes in two complex numbers and returns a complex
    number equal to the sum of the two inputs. Remember that [mathjaxinline](a+bi)
    + (c+di) = (a+c)+(b+d)i[/mathjaxinline].
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写`add-complex`，它接受两个复数，并返回等于两个输入之和的复数。请记住[mathjaxinline](a+bi) + (c+di) = (a+c)+(b+d)i[/mathjaxinline]。
- en: Assume that we've written a procedure `add-rational-complex` which takes in
    rational number and complex number in that order, and adds them properly.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我们已经编写了一个过程`add-rational-complex`，它按顺序接受有理数和复数，并正确地将它们相加。
- en: Now write a generic addition operation called `add-numbers` that takes in two
    numbers, each of which can be either rational or complex. We should rely on tags
    to direct our data to the correct procedure above.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编写一个名为`add-numbers`的通用加法操作，它接受两个数字，每个数字可以是有理数或复数。我们应该依靠标记将我们的数据指向上面的正确过程。
- en: Check your answers below.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面检查你的答案。
- en: Solutions
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Your `add-rational` should look something like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`add-rational`应该是这样的：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Your `add-complex` should be similar. Notice that we didn't have to worry about
    tagging, thanks to the abstraction barrier created by `make-rational`, `numer`,
    and `denom`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`add-complex`应该是类似的。请注意，由于`make-rational`、`numer`和`denom`创建的抽象屏障，我们不必担心标记。
- en: 'Now for `add-numbers`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是`add-numbers`：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Great! We can now add numbers using a single generic procedure!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们现在可以使用一个通用过程来添加数字了！
- en: Reflection
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 反思
- en: 'Let''s think about what we''ve learned:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下我们学到了什么：
- en: We don't even need to know how tags are implemented to write this `add-numbers`!
    This is because we properly *abstracted away* those details. So we can just use
    the selector `type-tag` to tell us what type of data we're dealing with.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们甚至不需要知道标记是如何实现的就能编写这个`add-numbers`！这是因为我们正确地*抽象了*这些细节。所以我们只需使用选择器`type-tag`来告诉我们正在处理的数据类型。
- en: If we want to add another type of number to our system, we'll have to change
    our generic function's definition, adding a good number of extra conditions to
    handle the new data type. The modifications would be straightforward in our situation,
    but this wouldn't work with larger systems. In other words, our system has poor
    *scalability*.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要将另一种类型的数字添加到我们的系统中，我们将不得不更改我们通用函数的定义，添加大量的额外条件来处理新的数据类型。在我们的情况下，修改将很简单，但这在较大的系统中不起作用。换句话说，我们的系统缺乏*可扩展性*。
- en: Although the `add-numbers` example is a little contrived, there are many systems
    that do use tagged data in the real world. In fact, the Racket interpreter uses
    tagged data to evaluate your code!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`add-numbers`的例子有点牵强，但实际上有许多系统确实使用了带标记的数据。事实上，Racket 解释器使用标记的数据来评估你的代码！
- en: Weaknesses of Tagged Data
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带标记数据的弱点
- en: As we hinted above, tagged data systems have several key weaknesses.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们上面所暗示的，带标记的数据系统有几个关键弱点。
- en: One weakness is that every data type must be identified and manually incorporated
    into every generic procedure. For instance, suppose we wanted to incorporate a
    new type of number into our system. We would need to identify this new representation
    with a type, then edit all the generic procedures out there (`add-numbers, multiply-numbers,
    divide-numbers`, etc.) to check for the new type and carry out the appropriate
    operations.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个弱点是，每种数据类型都必须被识别并手动纳入每个通用过程中。例如，假设我们想要将新类型的数字纳入我们的系统。我们需要用一个类型来标识这个新的表示，然后编辑所有通用过程（`add-numbers、multiply-numbers、divide-numbers`等）以检查新类型并执行相应的操作。
- en: Another weakness is that even though the individual representations and corresponding
    procedures can be designed separately, we must guarantee that no two procedures
    in the entire system have the same name. This is why we created the new procedure
    `add-numbers,` which calls `add- rational,` `add-complex`, and `add-rational-complex`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个弱点是，即使单独设计了各个表示和相应的过程，我们也必须保证整个系统中没有两个过程具有相同的名称。这就是我们创建了新过程`add-numbers`的原因，它调用了`add-rational`、`add-complex`和`add-rational-complex`。
- en: The issue underlying both of these weaknesses is that the technique for implementing
    generic interfaces does not scale—the person implementing the generic procedures
    must modify those procedures each time a new representation or type is added.
    Additionally, the people who originally wrote the rational number system and the
    complex number system must now modify their code to avoid name conflicts. In each
    of these cases, the changes that must be made to the code are straightforward,
    but they must be made nonetheless, and this is a source of inconvenience and error.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个弱点的根本问题是，实现通用接口的技术不具备可扩展性——实现通用程序的人必须每次添加新的表示或类型时修改这些程序。此外，最初编写有理数系统和复数系统的人现在必须修改他们的代码以避免名称冲突。在这些情况下，必须对代码进行的更改是直接的，但仍然必须进行，这是不便和错误的根源。
