- en: Data-Directed Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据导向编程
- en: What is Data-Directed-Programming?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是数据导向编程？
- en: '**You must load and run the following file to complete this section. Don''t
    worry about what''s defined in there.**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**你必须加载并运行以下文件才能完成本节内容。不用担心其中定义了什么。**'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Data-directed programming is a means to increase the flexibility of your code
    by modularizing data typing even further. Instead of controlling information regarding
    data types and operators(procedures) inside functions using `cond` clauses, we
    record this information in a data structure that we can add to and retrieve from.
    You are given tools to do so: `put` to set up the data structure and `get` to
    examine it. Intuitively, we''re simply adding entries into a table-like data structure.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据导向编程是一种通过进一步模块化数据类型来增加代码灵活性的方法。我们不是使用`cond`子句在函数内部控制有关数据类型和运算符（过程）的信息，而是将这些信息记录在一个我们可以添加和检索的数据结构中。你被赋予了这样做的工具：`put`来设置数据结构和`get`来检查它。直观地说，我们只是向一个类似表的数据结构中添加条目。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the code above, we try to retrieve the entry with keys `'foo` and `'baz`.
    Because that entry does not exist (we haven't `put` it yet!), we get `#f`. The
    next line places an entry into the table with keys `'foo` and `'baz`. In the last
    line, we retrieve the information we just placed.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们尝试检索具有键`'foo`和`'baz`的条目。因为该条目不存在（我们还没有`put`它！），我们得到了`#f`。下一行将一个条目放入具有键`'foo`和`'baz`的表中。在最后一行，我们检索我们刚刚放入的信息。
- en: Once you put something in the table, it stays there. (This is our ﬁrst departure
    from functional programming, we are allowing you to make an assignment. But our
    intent is to set up the table at the beginning of the computation and then to
    treat it as constant information, not as something that is mutable.) For now we
    take `put` and `get` as primitives; we'll see how to build them in Unit 3.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你把东西放进表里，它就会一直在那里。（这是我们从函数式编程中第一次分离出来的部分，我们允许你进行赋值。但我们的意图是在计算开始时设置表，然后将其视为常量信息，而不是可变的东西。）暂时我们把`put`和`get`当作原语；我们会在第三单元中看到如何构建它们。
- en: To understand how all of this relates to data-directed programming, begin with
    the observation that we have a few operations that we want to be able to apply
    to a variety of types. Depending on the type(s) of the input data, we call a different
    procedure to carry out the same basic operation. For example, adding two rational
    numbers uses a different procedure than adding two complex numbers. We are basically
    dealing with a two-dimensional table that contains the possible operations on
    one axis and the possible types on the other axis. Note that the possible types
    might actually be a list of types, if the procedure requires more than one argument.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解所有这些与数据导向编程的关系，首先观察到我们有一些操作，我们希望能够对各种类型的数据应用。根据输入数据的类型，我们调用不同的过程来执行相同的基本操作。例如，添加两个有理数使用不同的过程，与添加两个复数不同。我们基本上正在处理一个二维表，该表包含一个轴上的可能操作和另一个轴上的可能类型。请注意，可能的类型实际上可能是类型列表，如果过程需要多个参数的话。
- en: Using this paradigm, adding a new type to the system does not require changing
    any existing procedures; we need only add new entries to the table.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种范式，向系统添加一个新类型不需要更改任何现有的过程；我们只需要向表中添加新条目。
- en: A New Example System
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个新的示例系统
- en: As the last section mentioned, the "keys" for our table must be a list of types
    if we want to continue to use our arithmetic example. Instead of dealing with
    this unnecessary complexity right now, we're going to switch to a friendlier example
    that should be a little easier to follow. However, all of the big ideas are exactly
    the same.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如上一节所述，我们表的“键”必须是类型列表，如果我们想继续使用我们的算术示例。现在我们不打算处理这个不必要的复杂性，我们将切换到一个更友好的示例，这应该稍微容易些。但是，所有的大想法都完全相同。
- en: 'Our data types will be squares and circles; our operations will be area and
    perimeter. For some comparison (and review) the tagged-data version of these operations
    would be written:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据类型将是正方形和圆；我们的操作将是面积和周长。为了进行比较（和复习），这些操作的标记数据版本将被编写为：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should be able to completely understand the above code! We'll be using this
    example with squares and circles throughout the rest of the lesson.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能完全理解上面的代码！我们将在本课程的其余部分中始终使用这个以正方形和圆为例的示例。
- en: '"put"-ing it All Together'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “put”一切都放在一起
- en: 'Using the data structure introduced at the top of the page, it is now possible
    for a system to handle any number of types without having to change existing code!
    Here''s what the new code would look like (the constructors remain the same):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用页面顶部介绍的数据结构，现在系统可以处理任意数量的类型，而无需更改现有代码！以下是新代码的样子（构造函数保持不变）：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice that the entry in each cell of the table is a function, not a symbol.
    We can now redeﬁne the generic operators ("generic" because they work for any
    of the types):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，表格中每个单元格的条目都是一个函数，而不是一个符号。现在我们可以重新定义通用操作符（“通用”是因为它们适用于任何类型）：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The magic occurs in the `operate` procedure. Given an operation and some data,
    it looks up the correct procedure to apply to that data. If there is an entry
    (which means we know how to handle that operation), then we simply apply the procedure.
    Otherwise, we throw an error.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法发生在`operate`过程中。给定一个操作和一些数据，它会查找应用于该数据的正确过程。如果存在条目（这意味着我们知道如何处理该操作），那么我们只需应用该过程。否则，我们会抛出错误。
- en: A Clarification on Data-Directed-Programming
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据导向编程的澄清
- en: Don't get the idea that Data-Directed-Programming just means a two-dimensional
    table of operator and type names! DDP is a very general, great idea. It means
    putting the details of a system into data, rather than into programs, so you can
    write general programs instead of very speciﬁc ones.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不要认为数据导向编程只是指操作符和类型名称的二维表！DDP是一个非常通用、伟大的想法。它意味着将系统的细节放入数据中，而不是放入程序中，这样你就可以编写通用程序，而不是非常具体的程序。
- en: In the old days, every time a company got a computer they had to hire a bunch
    of programmers to write things like payroll programs for them. They couldn't just
    use someone else's program because the details would be different, e.g., how many
    digits in the employee number. These days you have general business packages and
    each company can "tune" the program to their speciﬁc purpose with a data ﬁle.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从前，每当一家公司获得一台计算机时，他们都必须雇佣一群程序员为他们编写诸如工资单程序之类的东西。他们不能只是使用别人的程序，因为细节会有所不同，例如，员工编号中有多少位数字。如今，你可以使用通用业务软件包，每家公司都可以根据自己的特定目的“调整”程序，使用数据文件。
- en: Another example showing the generality of Data-Directed-Programming is the compiler.
    It used to be that if you wanted to invent a new programming language you had
    to start from scratch in writing a compiler for it. But now we have formal notations
    for expressing the syntax of the language. (See section 7.1, page 38, of the Scheme
    Report at the back of the course reader.) A single program can read these formal
    descriptions and compile any language.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个展示数据导向编程通用性的例子是编译器。过去，如果你想发明一种新的编程语言，你必须从头开始编写一个编译器。但现在我们有形式化符号来表达语言的语法。（请参阅课程阅读器背面的Scheme报告第7.1节，第38页。）一个程序可以读取这些形式化描述，并编译任何语言。
