- en: Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Types in `Go` are divided into `2` categories: named and unnamed. Besides predeclared
    types (such as `int`, `rune`, etc), you can also define named type yourself. E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Unnamed types are defined by type literal. I.e., `[]int` is an unnamed type.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to [Go spec](https://golang.org/ref/spec#Types), there is an underlying
    type of every type:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each type T has an underlying type: If T is one of the predeclared boolean,
    numeric, or string types, or a type literal, the corresponding underlying type
    is T itself. Otherwise, T''s underlying type is the underlying type of the type
    to which T refers in its type declaration.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'So, in above example, both named type `mySlice` and unnamed type `[]int` have
    the same underlying type: `[]int`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Go` has strict rules of assigning values of variables. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The compilation will complain the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Although the underlying type of `s1` and `s2` are same: `[]int`, but they belong
    to `2` different named types (`mySlice1` and `mySlice2`), so they can''t assign
    values each other. But if you modify `s2`''s type to `[]int`, the compilation
    will be OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The magic behind it is one rule of [assignability](https://golang.org/ref/spec#Assignability):'
  prefs: []
  type: TYPE_NORMAL
- en: x's type V and T have identical underlying types and at least one of V or T
    is not a named type.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Go spec](https://golang.org/ref/spec#Types);'
  prefs: []
  type: TYPE_NORMAL
- en: '[Learning Go - Types](http://www.laktek.com/2012/01/27/learning-go-types/);'
  prefs: []
  type: TYPE_NORMAL
- en: '[Golang pop quiz](https://twitter.com/davecheney/status/734646224696016901).'
  prefs: []
  type: TYPE_NORMAL
