- en: Lecture 17 - Calibration I
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Convocation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Exam: 9.00, August 8'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Flow control when communicating with the train controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Measurement is an activity that is not speeded up by being smart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Calibration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Philosophy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can't do anything until you know where the train is. You accomplish this
    by
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the train's location when it arrives at a landmark, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interpolating between landmarks by knowing the train's velocity all the time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measurement is costly, and you should squeeze every bit of information you can
    out of every measurement you make.
  prefs: []
  type: TYPE_NORMAL
- en: By analogy with human information processing, I recommend that every time you
    get a sensor report you make a prediction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which sensor do you expect to hit next?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When do you expect to hit it?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When you hit the next sensor you automatically have an estimate of how fast
    you travelled between the sensors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This estimate is your most recent estimate of the train's velocity on that piece
    of train, at that speed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using it to improve the calibration tables is what we call *dynamic calibration.*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the difference between your prediction and your measurement on the terminal,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in time,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in distance,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in velocity
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This gives you an ongoing feeling for how your application is working, which
    is very important for setting effective tolerances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 1\. Calibrating Stopping Distance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The simplest objective:'
  prefs: []
  type: TYPE_NORMAL
- en: know where the train stops when you give it a command to stop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: restrict the stop commands to just after the train passes a sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: only one train moving
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sequence of events
  prefs: []
  type: TYPE_NORMAL
- en: Train triggers sensor at t
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: train at Sn + 0 cm
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Application receives report at t + dt1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You give command at t + dt1 + dt2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Train receives and executes command at t + dt1 + dt2 + dt3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Train slows and stops at t + dt1 + dt2 + dt3 + dt4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: train at Sn + y cm
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: (You measure y with a tape measure.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Questions you need to answer
  prefs: []
  type: TYPE_NORMAL
- en: If you do this again, same sensor, same speed, will you get the same answer?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you do this again, different sensor, same speed, will you get the same answer?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you do this again, same sensor, different speed, will you get the same answer?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you do this again, different sensor, different speed, will you get the same
    answer?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And all the other important ones in the list above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The sequence of events above has a whole lot of small delays that get added
    together
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each one has a constant part and a random part. Try to use values that are diffferences
    of measurements to eliminate the constant parts.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Some delays can be eliminated a priori because they are extremely small compared
    to other delays. The more you figure this out in advance the less measurement
    you have to do.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing where you stop is very important when running the train on routes that
    require reversing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are reversing routes important?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearly, knowing when you stop is equally important.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is very time-consuming!
  prefs: []
  type: TYPE_NORMAL
- en: The only way to reduce the number of measurements is to eliminate factors that
    are unimportant.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The only way to know that a factor is always unimportant is to measure. Developing
    the ability to estimate quickly, and to find the worst case quickly is the main
    way of being smart in tasks like this one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now make a table
  prefs: []
  type: TYPE_NORMAL
- en: '|  | Sensor 1 | Sensor 2 | ... |'
  prefs: []
  type: TYPE_TB
- en: '| Speed 6 |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Speed 8 |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ... |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: There are enough measurements in each cell of the table that you can estimate
    the random error. (Check with other groups to make certain that your error is
    not too big.)
  prefs: []
  type: TYPE_NORMAL
- en: Based on calibrations I have seen in previous terms you will find substantial
    variation with speed setting and train, little variation with sensor.
  prefs: []
  type: TYPE_NORMAL
- en: Group across cells that have the `same' value. Maybe all have the same value.
  prefs: []
  type: TYPE_NORMAL
- en: Hint. Interacting with other groups is useful to confirm that you are on track.
    Of course, simply using another group's calibration without saying so is `academic
    dishonesty'.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Calibrating Constant Velocity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point there are a few places on the track where you can stop with a
    precision of a trainlength or better. However, suppose you want to reverse direction
    at a switch.
  prefs: []
  type: TYPE_NORMAL
- en: You want to be close to the switch, clear of the switch, and on the right side
    of the switch when you stop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to know when the train has stopped because, until then you cannot give
    the command to start moving again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing the Current Velocity
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An implicit assumption you are making is that the future will closely resemble
    the past.
  prefs: []
  type: TYPE_NORMAL
- en: You measure the time interval between two adjacent sensor reports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Knowing the distance between the sensors you calculate the velocity of the train
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: velocity = distance / time interval
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: measured in cm / sec.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that on average the lag mentioned above -- waiting for sensor read, time
    in train controller, time in your system before time stamp -- is unimportant.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sensor1 actually hit at t1.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You record (S1, t1 + dt) as the first event.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensor2 actually hit at t2
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You record (S2, t2 + dt) as the second event
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You compute the velocity as (S2 - S1) / (t2 + dt - (t1 + dt)) = (S2 - S1) /
    (t2 - t1), which is the correct answer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: But the variation in dt from measurement to measurement adds noise to the measurement.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After many measurements you build a table
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the table to determine the current velocity
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the time since the last sensor report to calculate the distance beyond the
    sensor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: distance = velocity * time interval
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Resources Effectively
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The most scarce resources
  prefs: []
  type: TYPE_NORMAL
- en: Bandwidth to the train controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of the train itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most plentiful resource
  prefs: []
  type: TYPE_NORMAL
- en: CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any time you can use a plentiful resource to eliminate use of a scarce one you
    have a win. For example
  prefs: []
  type: TYPE_NORMAL
- en: Practical Problems You Have to Solve
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The table is too big.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need a ton of measurements
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The values you measure vary randomly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to average and estimate error.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The values you measure vary systematically
  prefs: []
  type: TYPE_NORMAL
- en: For example, each time you measure the velocity estimate is slower, presumably
    because the train is moving towards needing oiling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to make fewer measurements or use the measurement you make more effectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Long does it Take to Stop?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the train on a course that will cross the sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the train up to a constant speed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the speed zero command at a location that stops the train with its contact
    on the sensor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the time between when you gave the command and when the sensor triggered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for regularities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How Long does it Take the Train to Get up to Speed?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
