- en: Data classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Objects are the basis of object-oriented programming. In Kotlin, every piece
    of data is an object. Each object has a type, such as Int, Double, String, Pair,
    List<Int>, or MutableList<String>. The type of an object determines what you can
    do with the object. When you use an object, you should think of the object as
    a black box, and you need not know what really happens inside the object. All
    you need to know is what the object does, not how it implements its functionality.
  prefs: []
  type: TYPE_NORMAL
- en: A class defines a new type of object. You can also think about a class as a
    "blueprint" for objects. Once you define a class, you can create objects from
    the blueprint.
  prefs: []
  type: TYPE_NORMAL
- en: Data classes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A common use of classes is to define objects with a number of attributes. For
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: A point in the plane has an \(x\)-coordinate and a \(y\)-coordinate. Depending
    on the application, the coordinates could be integers, or floating-point numbers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A date has a year, month, and day.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A student object has (at least) a name, a student number, and a major.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A playing card (such as in Blackjack) has a suit (clubs, spades, hearts, or
    diamonds) and a face value (2,3,…,10, Jack, Queen, King, Ace).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![A set of playing cards](../Images/c7aa6d2faf4d2d48d5444da65cf65e1e.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Such a simple class is implemented as a data class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Point represents a two-dimensional point. It has two fields, namely x and y.
    We can create Point objects as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Not that Point(2, 5) looks like a function call, and in fact it is a call to
    the constructor for the Point class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have a Point object, we can access its fields using dot-syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can also print Point objects using println.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can compare two Point objects using == and !=. Two points are equal if and
    only if all their fields are equal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now look at the other examples from above: A date object could be defined
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A student object might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And a Blackjack card object could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
