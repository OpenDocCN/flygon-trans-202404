- en: Three Kinds of Local State Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far the only local state variables we''ve seen have been instantiation variables.
    In this subsection we will look at two other types: instance variables and class
    variables.'
  prefs: []
  type: TYPE_NORMAL
- en: Instance Variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Recall the `checking-account` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Whenever we write a check, we charged the account with an additional 10 cents.
    All `checking-accounts` start with a 10 cent fee, but now we want to be able to
    change the fee as we go. One way to do this is to add `check-fee` as an instantiation
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: But this format is slightly redundant because we have to specify the `check-fee`
    every time, even though we always want it to start at 10 cents. We will introduce
    a new clause, **instance-vars** that solves our problems.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Instance vs. Instantiation Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instantiation variables are also instance variables; that is, every instance
    has its own private value for them. The only difference is in the notation and
    when you set the initial value. For instantiation variables you give a value when
    you call instantiate, but for other instance variables you give the value in the
    class de finition.
  prefs: []
  type: TYPE_NORMAL
- en: Class Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The third kind of local state variable is a class variable. Unlike the case
    of instance variables, there is only one value for a class variable for the entire
    class. Every instance of the class shares this value. For example, let's say we
    want to have a class of `worker`s that are all working on the same project. That
    is to say, whenever any of them works, the total amount of work done is increased.
    On the other hand, each worker gets hungry separately as he or she works. Therefore,
    there is a common `work-done` variable for the class, and a separate `hunger`
    variable for each instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, asking any `worker` object to work increments the `work-done`
    variable. In contrast, each worker has its own `hunger` instance variable, so
    that when Brian works, Matt doesn't get hungry. You can ask any instance the value
    of a class variable, or you can ask the class itself. This is an exception to
    the usual rule that messages must be sent to instances, not to classes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Test Your Understanding**'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to design a "Dog" class. For each of the following, decide whether
    they should be a "child", "parent", "instance variable", "class variable" or "method"
    for the dog class.
  prefs: []
  type: TYPE_NORMAL
- en: (e.g. if we ask "cat?" and you think cat should be a parent of dog, type "parent")
  prefs: []
  type: TYPE_NORMAL
- en: 'In relation to the Dog class, "name" is a(n):'
  prefs: []
  type: TYPE_NORMAL
- en: 'In relation to the Dog class, "age" is a(n):'
  prefs: []
  type: TYPE_NORMAL
- en: 'In relation to the Dog class, "wag-tail" is a(n):'
  prefs: []
  type: TYPE_NORMAL
- en: 'In relation to the Dog class, "Animal" is a(n):'
  prefs: []
  type: TYPE_NORMAL
- en: Takeaways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three kinds of local state variables: instantiation, instance, and
    class.'
  prefs: []
  type: TYPE_NORMAL
- en: An instantiation variable is specified when you create an object using `instantiate`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An instance variable is a variable that each object has and is independent from
    each other; changing the value of one doesn't affect the others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class variable is a variable that is shared with all objects of that class;
    change the value of a class variable and every object of that class will notice
    the change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
