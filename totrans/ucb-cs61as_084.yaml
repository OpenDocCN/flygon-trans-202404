- en: Three Kinds of Local State Variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三种本地状态变量
- en: Overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'So far the only local state variables we''ve seen have been instantiation variables.
    In this subsection we will look at two other types: instance variables and class
    variables.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的唯一本地状态变量是实例化变量。在本小节中，我们将看到另外两种类型：实例变量和类变量。
- en: Instance Variable
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例变量
- en: 'Recall the `checking-account` class:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下`checking-account`类：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Whenever we write a check, we charged the account with an additional 10 cents.
    All `checking-accounts` start with a 10 cent fee, but now we want to be able to
    change the fee as we go. One way to do this is to add `check-fee` as an instantiation
    variable.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们写支票时，我们都会向账户收取额外的10美分。所有`checking-accounts`都以10美分的费用开始，但现在我们希望能够在进行过程中更改费用。一种方法是将`check-fee`作为一个实例化变量添加。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But this format is slightly redundant because we have to specify the `check-fee`
    every time, even though we always want it to start at 10 cents. We will introduce
    a new clause, **instance-vars** that solves our problems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种格式稍微冗余，因为我们必须每次指定`check-fee`，即使我们总是希望它从10美分开始。我们将引入一个新的子句，**instance-vars**，解决我们的问题。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Instance vs. Instantiation Variables
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例变量 vs. 实例化变量
- en: Instantiation variables are also instance variables; that is, every instance
    has its own private value for them. The only difference is in the notation and
    when you set the initial value. For instantiation variables you give a value when
    you call instantiate, but for other instance variables you give the value in the
    class de finition.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化变量也是实例变量；也就是说，每个实例都有它们的私有值。唯一的区别在于表示法以及何时设置初始值。对于实例化变量，你在调用实例化时给出一个值，但对于其他实例变量，你在类定义中给出值。
- en: Class Variables
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类变量
- en: The third kind of local state variable is a class variable. Unlike the case
    of instance variables, there is only one value for a class variable for the entire
    class. Every instance of the class shares this value. For example, let's say we
    want to have a class of `worker`s that are all working on the same project. That
    is to say, whenever any of them works, the total amount of work done is increased.
    On the other hand, each worker gets hungry separately as he or she works. Therefore,
    there is a common `work-done` variable for the class, and a separate `hunger`
    variable for each instance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种本地状态变量是类变量。与实例变量的情况不同，类变量对于整个类只有一个值。类的每个实例共享这个值。例如，假设我们想要有一个所有在同一项目上工作的`worker`类。也就是说，每当他们中的任何一个工作时，完成的工作总量都会增加。另一方面，每个工人在工作时都会单独感到饥饿。因此，类有一个共同的`work-done`变量，每个实例有一个单独的`hunger`变量。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, asking any `worker` object to work increments the `work-done`
    variable. In contrast, each worker has its own `hunger` instance variable, so
    that when Brian works, Matt doesn't get hungry. You can ask any instance the value
    of a class variable, or you can ask the class itself. This is an exception to
    the usual rule that messages must be sent to instances, not to classes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，要求任何`worker`对象工作会增加`work-done`变量。相反，每个工人都有自己的`hunger`实例变量，所以当Brian工作时，Matt不会感到饥饿。你可以询问任何实例类变量的值，或者你可以询问类本身。这是通常规则的一个例外，即消息必须发送给实例，而不是类。
- en: '**Test Your Understanding**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: We are going to design a "Dog" class. For each of the following, decide whether
    they should be a "child", "parent", "instance variable", "class variable" or "method"
    for the dog class.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设计一个“Dog”类。对于以下每一项，决定它们应该是狗类的“子类”、“父类”、“实例变量”、“类变量”还是“方法”。
- en: (e.g. if we ask "cat?" and you think cat should be a parent of dog, type "parent")
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: （例如，如果我们问“cat?”，你认为猫应该是狗的父类，请输入“parent”）
- en: 'In relation to the Dog class, "name" is a(n):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于狗类，“name”是一个：
- en: 'In relation to the Dog class, "age" is a(n):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 关于狗类，“age”是一个：
- en: 'In relation to the Dog class, "wag-tail" is a(n):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 关于狗类，“wag-tail”是一个：
- en: 'In relation to the Dog class, "Animal" is a(n):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于狗类，“Animal”是一个：
- en: Takeaways
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'There are three kinds of local state variables: instantiation, instance, and
    class.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种本地状态变量：实例化、实例和类。
- en: An instantiation variable is specified when you create an object using `instantiate`.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你使用`instantiate`创建对象时，会指定一个实例化变量。
- en: An instance variable is a variable that each object has and is independent from
    each other; changing the value of one doesn't affect the others.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例变量是每个对象都有的变量，彼此独立；改变一个的值不会影响其他的。
- en: A class variable is a variable that is shared with all objects of that class;
    change the value of a class variable and every object of that class will notice
    the change.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个类变量是一个被该类的所有对象共享的变量；改变类变量的值，该类的每个对象都会注意到这个变化。
