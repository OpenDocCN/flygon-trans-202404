["```\n( (1 . 1) (1 . 2) (1 . 3) (1 . 4)\n  (2 . 1) (2 . 2) (2 . 3) (2 . 4)\n  (3 . 1) (3 . 2) (3 . 3) (3 . 4)\n  (4 . 1) (4 . 2) (4 . 3) (4 . 4) ) \n```", "```\n> (map (lambda (x) (cons x 1))\n     (enumerate 1 4))\n((1 . 1) (2 . 1) (3 . 1) (4 . 1)) \n```", "```\n(map    (lambda (x) (cons x **1**))\n        (enumerate 1 4))\n\n(map    (lambda (x) (cons x **2**))\n        (enumerate 1 4))\n\n(map    (lambda (x) (cons x **3**))\n        (enumerate 1 4))\n\n(map    (lambda (x) (cons x **4**))\n        (enumerate 1 4)) \n```", "```\n(map (lambda (y) (map (lambda (x) (cons x y))\n                      (enumerate 1 4)))\n     (enumerate 1 4)) \n```", "```\n> (map (lambda (y)\n        (map (lambda (x) (cons x y))\n             (enumerate 1 4)))\n      (enumerate 1 4))\n( ((1 . 1) (2 . 1) (3 . 1) (4 . 1))\n  ((1 . 2) (2 . 2) (3 . 2) (4 . 2))\n  ((1 . 3) (2 . 3) (3 . 3) (4 . 3))\n  ((1 . 4) (2 . 4) (3 . 4) (4 . 4)) ) \n```", "```\n( (1 . 1) (2 . 1) (3 . 1) (4 . 1)\n  (1 . 2) (2 . 2) (3 . 2) (4 . 2)\n  (1 . 3) (2 . 3) (3 . 3) (4 . 3)\n  (1 . 4) (2 . 4) (3 . 4) (4 . 4) ) \n```", "```\n(accumulate append\n            nil\n            (map (lambda (y)\n                    (map (lambda (x) (cons x y))\n                (enumerate 1 4))\n            (enumerate 1 4)) \n```", "```\n(define (flatmap proc seq)\n  (accumulate append nil (map proc seq))) \n```", "```\n(flatmap (lambda (y)\n             (map (lambda (x) (cons x y))\n                  (enumerate 1 4)))\n         (enumerate 1 4)) \n```"]