- en: Compiling programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We write programs in a high-level programming language like Kotlin, Java, C++,
    or C. A compiler translates the source code to object code (machine code).
  prefs: []
  type: TYPE_NORMAL
- en: For C and C++, it is customary to compile to native machine code. It can be
    executed directly by the processor. Native machine code is different for different
    processors, operating systems, and can depend on library versions. So a program
    compiled for Windows does not run on Mac OS, a program compiled for iOS does not
    run on Windows, and a program compiled for Mac OS 10.9 may not work on Mac OS
    10.10.
  prefs: []
  type: TYPE_NORMAL
- en: Java and Kotlin are normally translated to object code for the JVM (Java virtual
    machine). A Java runtime environment is needed on the computer to execute the
    program. The exact same object code works on any system. JVM is heavily used on
    servers.
  prefs: []
  type: TYPE_NORMAL
- en: Until now we have written our programs as Kotlin scripts. Scripts are meant
    for quick programming tasks. Every time you run a script, it is compiled again
    and then executed.
  prefs: []
  type: TYPE_NORMAL
- en: For larger programs, it is better to write an application. It can consist of
    many separate source files that can be compiled individually (so you only have
    to compile the source file that you have changed). And once it has been compiled,
    an application starts much faster than a script.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s start with a small example. We make a source file [point.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/point.kt)
    (note the file extension kt, different from the extension kts we used for scripts):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve made new directory that only contains this file now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'I will now compile point.kt using the Kotlin compiler ktc:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, one new file has been created in the classes subdirectory, namely
    Point.class. A file with extension class contains exactly one class definition
    for the JVM.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now use this class from the interactive mode (or from a script):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that I did not define the Point class in this interactive session. Kotlin
    finds it automatically: When it sees the word Point which is currently not defined,
    it looks for the definition of a class or object with name Point. Therefore it
    checks all directories on its class path for files with the name Point.class.
    Since I added the subdirectory classes to the class path with the -cp option,
    Kotlin finds the file there and loads the class definition from that file. Note
    that the source file point.kt is not used—we can delete it and still use the Point
    class from Point.class.'
  prefs: []
  type: TYPE_NORMAL
- en: What can be compiled
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When you write a script, you can place arbitrary Kotlin commands inside the
    file. For instance, this file [hello.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/hello.kt)
    would be perfectly fine as a script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'However, it cannot be compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As the compiler already tells us, a source file can contain only top level declarations.
    This includes function definitions using fun, class definitions using class, and
    definitions of global variables using val and var.
  prefs: []
  type: TYPE_NORMAL
- en: Applications
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This leaves the question: How can we actually run any code in our program if
    we are only allowed to put declarations? The answer goes back to the early 1970s:
    An application is started through a special function with the name main. It must
    take exactly one argument of type Array<String>, which will receive the command
    line arguments when the program starts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So the following source file can be compiled [hello-app.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/hello-app.kt):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We compile it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that a class file for a class Hello_appKt has been created (there is also
    a new subdirectory called META_INF that contains information for the compiler—we
    can ignore this entirely).
  prefs: []
  type: TYPE_NORMAL
- en: 'To run our program, we need to "run the class" Hello_appKt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Remember that to run the program, you need to provide the class name, not the
    name of the source file. (And in fact the source file is not needed to run the
    program at all!)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a small example of full application: [number-game.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/number-game.kt):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can compile and run the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note again that to run the program, you have to provide the name of the class
    Number_gameKt (which Kotlin has created automatically from the name of the source
    file number-game.kt).
  prefs: []
  type: TYPE_NORMAL
- en: Multiple source files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A larger application will consist of several source files that define a number
    of functions and classes. At least one of the source files must define a function main(args:
    Array<String>) returning Unit. This function is the starting point of the program.
    The program is started through the class representing the source file containing
    the main function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to compile such an application is to compile all files at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: However, when the program becomes larger, it makes sense to only recompile those
    parts that have changed, or that depend on the changed part. The easiest way to
    achieve this is to use a build tool such as gradle or maven, or an integrated
    development environment (IDE) such as [IntelliJ](https://www.jetbrains.com/idea/download/index.html)
    (which has the best support for Kotlin, since it is made by the same company that
    created Kotlin). This [tutorial](https://kotlinlang.org/docs/tutorials/getting-started.html)
    will get you started.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling for distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Imagine you have written a nice program, and you want to give it to your friends
    or post it on your website. Obviously, you don't want them to have to install
    the Kotlin compiler just to run your program. So you have to package your program
    in such a form that all they need is a JVM installation (which most computers
    already have).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two things we need to do: First, instead of creating lots of class
    files, we will package them all together into a jar file. Second, we will add
    the Kotlin library into this package, so that it can be run without having Kotlin
    installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The compiler will create a new file number-game.jar. You can run this directly
    with the Java virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will work on any computer that has the JVM installed. If your program has
    a [graphical user interface](tutorial-cs109ui.html), you can probably also start
    it by just clicking on the jar file.
  prefs: []
  type: TYPE_NORMAL
