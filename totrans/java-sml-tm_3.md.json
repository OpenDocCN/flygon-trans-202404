["```\n@Override public boolean equals(Object o) {\n  throw new AssertionError(); // Method is never called\n} \n```", "```\n @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((field1 == null) ? 0 : field1.hashCode());\n    result = prime * result + ((field2 == null) ? 0 : field2.hashCode());\n    return result;\n  } \n```", "```\n @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n   MyClass  other = (MyClass) obj;\n    if (field1 == null) {\n      if (other.field1 != null)\n        return false;\n    } else if (!field1.equals(other.field1))\n      return false;\n    if (field2 == null) {\n      if (other.field2 != null)\n        return false;\n    } else if (!field2.equals(other.field2))\n      return false;\n    return true;\n  } \n```", "```\n @Override\n  public int hashCode() {\n    return Objects.hash(field1, field2);\n  } \n```", "```\n @Override\n  public boolean equals(Object obj) {\n    if (this == obj) // <- performance optimisation\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass()) // <- see note on inheritance\n      return false;\n    MyClass other = (MyClass) obj;\n    return Objects.equals(field1, other.field1) &&\n        Objects.equals(field2, other.field2);\n  } \n```", "```\n @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (!(obj instanceof MyClass)) // <- compare with instanceof\n      return false;\n    MyClass other = (MyClass) obj;\n    return Objects.equals(field1, other.field1) &&\n        Objects.equals(field2, other.field2);\n  } \n```", "```\nMyClass a = new MyClass();\nExtendsMyClassWithCustomEqual b = new ExtendsMyClassWithCustomEqual();\n\na.equals(b) // true\nb.equals(a) // false, a violation of symmetry \n```", "```\npublic boolean equals(Object obj) {\n  return EqualsBuilder.reflectionEquals(this, obj);\n} \n```", "```\npublic int hashCode() {\n  return HashCodeBuilder.reflectionHashCode(this);\n} \n```", "```\nimport com.google.auto.value.AutoValue;\n\n@AutoValue\nabstract class Animal {\n  static Animal create(String name, int numberOfLegs) {\n    return new AutoValue_Animal(name, numberOfLegs);\n  }\n\n  Animal() {}\n\n  abstract String name();\n  abstract int numberOfLegs();\n} \n```", "```\n@Value\npublic class ValueExample {\n  String name;\n  @NonFinal int age;\n  double score;\n} \n```", "```\npublic final class ValueExample {\n  private final String name;\n  private int age;\n  private final double score;\n\n  public ValueExample(String name, int age, double score) {\n    this.name = name;\n    this.age = age;\n    this.score = score;\n   }\n\n  public String getName() {\n    return this.name;\n  }\n\n  public int getAge() {\n    return this.age;\n  }\n\n  public double getScore() {\n    return this.score;\n  }\n\n  public boolean equals(Object o) {\n   // valid implementation of equality based on all fields\n  }\n\n  public int hashCode() {\n   // valid hashcode implementation based on all fields\n  } \n```", "```\npublic String foo(String currentStatus) {\n  if ( someLogic() ) {\n    currentStatus  = \"FOO\";\n  }\n  return currentStatus;\n} \n```", "```\npublic String foo(final String currentStatus) {\n  String desiredStatus = currentStatus;\n  if ( someLogic() ) {\n    desiredStatus = \"FOO\";\n  }\n\n  return desiredStatus ;\n} \n```", "```\npublic void foo(String value) {\n    String calculatedValue;\n    if (someCondition()) {\n        calculatedValue = calculateStr(value);\n        doSomethingWithValue(calculatedValue);\n    }\n} \n```", "```\npublic void foo(String value) {\n    if (someCondition()) {\n        String calculatedValue = calculateStr(value);\n        doSomethingWithValue(calculatedValue);\n    }\n} \n```", "```\npublic void foo(String value) {\n    if (someCondition()) {\n        doSomethingWithValue(calculateStr(value));\n    }\n} \n```", "```\n public List<String> selectValues(List<Integer> someIntegers) {\n    List<String> filteredStrings = new ArrayList<String>();\n    for (int i = 0; i != someIntegers.size(); i++) {\n      Integer value = someIntegers.get(i);\n      if (value > 20) {\n        filteredStrings.add(value.toString());\n      }\n    }\n    return filteredStrings;\n  } \n```", "```\n public List<String> selectValues(List<Integer> someIntegers) {\n    List<String> filteredStrings = new ArrayList<String>();\n    for (Integer value : someIntegers) {\n      if (value > 20) {\n        filteredStrings.add(value.toString());\n      }\n    }\n    return filteredStrings;\n  } \n```", "```\n public List<String> selectValues(List<Integer> someIntegers) {\n    List<String> filteredStrings = new ArrayList<String>();\n    for (Integer value : someIntegers) {\n      if (value > 20) {\n        filteredStrings.add(value.toString());\n      }\n    }\n    return filteredStrings;\n  } \n```", "```\n public List<String> selectValues(List<Integer> someIntegers) {\n    return someIntegers.stream()\n        .filter(i -> i > 20)\n        .map(i -> i.toString())\n        .collect(Collectors.toList());\n  } \n```", "```\n public List<String> selectValues(List<Integer> someIntegers) {\n    return FluentIterable\n    .from(someIntegers)\n    .filter(greaterThan(20))\n    .transform(Functions.toStringFunction())\n    .toList();\n  }\n\n  private static Predicate<Integer> greaterThan(final int limit) {\n    return new Predicate<Integer>() {\n      @Override\n      public boolean apply(Integer input) {\n        return input > limit;\n      }\n    };\n  } \n```", "```\nList list = numberList();\nfor (Object each : list) {\n  Integer i = (Integer) each;\n  // do things with integers\n} \n```", "```\nList is a raw type. References to generic type List<E> should be parameterized \n```", "```\nList l = new ArrayList<Number>();\nList<String> ls = l; \n```", "```\nThe expression of type List needs unchecked conversion to conform to List<String> \n```", "```\nList<Integer> list = numberList();\nfor (Integer each : list) {\n   // do things with each\n} \n```", "```\nList<Widget> widgets = getWidgets();\nList results = process(widgets);\n\nfor (Object each : results) {\n  if (each instanceof String) {\n    // handle failure using data from string\n  } else {\n    EnhancedWidget widget = (EnhancedWidget) each;\n    widget.doSomething();\n  }\n} \n```", "```\ninterface ProcessResult {\n void doSomething();\n}\n\nclass Success implements ProcessResult {\n\n  private final EnhancedWidget result;\n\n  @Override\n  public void doSomething() {\n    result.doSomething();\n  }\n\n}\n\nclass Failure implements ProcessResult {\n\n  private final String result;\n\n  @Override\n  public void doSomething() {\n    // do something with result string\n  }\n\n} \n```", "```\nList<Widget> widgets = getWidgets();\nList<ProcessResult> results = process(widgets);\n\nfor (ProcessResult each : results) {\n    each.doSomething();\n  }\n} \n```", "```\n List<ProcessResult> results = process(widgets);\n results.stream().forEach(ProcessResult::doSomething); \n```", "```\npublic class Either<L,R> {\n  private final L left;\n  private final R right;\n\n  private Either(L left, R right) {\n    this.left = left;\n    this.right = right;\n  }\n\n  public static <L, R> Either<L, R> left(final L left) {\n    return new Either<L, R>(left,null);\n  }\n\n  public static <L, R> Either<L, R> right(final R right) {\n    return new Either<L, R>(null,right);\n  }\n\n  boolean isLeft() {\n    return left != null;\n  }\n\n  L left() {\n    return left;\n  }\n\n  R right() {\n    return right;\n  }\n\n} \n```", "```\nList<Widget> widgets = getWidgets();\nList<Either<ProcessResult,String>> results = process(widgets);\n\nfor (Either<ProcessResult,String> each : results) {\n  if (each.isLeft()) {\n    // handle failure using data from string\n  } else {\n    each.right().doSomething();\n  }\n} \n```", "```\n@SuppressWarnings(\"unchecked\")\n<T> T read(final Class<T> type, String xml) {\n  return (T) fromXml(xml);\n}\n\nObject fromXml(final String xml) {\n  return ... // de-serialise from string\n} \n```", "```\npublic void fnord(int i) {\n  if (i == 1) {\n    performSideEffect();\n  }\n} \n```", "```\npublic void fnord(int i) {\n  if (i == VALID) {\n    performSideEffect();\n  }\n} \n```", "```\npublic void fnord(int i) {\n  if (i == ONE) {\n    performSideEffect();\n  }\n} \n```", "```\npublic void fnord(FnordStatus status) {\n  if (status == FnordStatus.VALID) {\n    performSideEffect();\n  }\n} \n```", "```\n if (list.size() == 0) {...} \n```", "```\n if (list.isEmpty()) {...} \n```", "```\n double balance = 2.00;\n    double transationCost = 0.10;\n    int numberTransactions = 6;\n\n    System.out.printf(\"After %s transactions balance is %s\"\n                    , numberTransactions\n                    , balance - (transationCost * numberTransactions));\n    // Gives After 6 transactions balance is 1.4 :-) \n```", "```\n double balance = 2.00;\n    double transationCost = 0.10;\n    int numberTransactions = 7;\n\n    System.out.printf(\"After %s transactions balance is %s\"\n                     , numberTransactions\n                     , balance - (transationCost * numberTransactions));\n    // Gives After 7 transactions balance is 1.2999999999999998 :-( \n```", "```\n BigDecimal balance = new BigDecimal(\"2.00\");\n    BigDecimal transationCost = new BigDecimal(\"0.10\");\n\n    BigDecimal numberTransactions = BigDecimal.valueOf(7);\n\n    System.out.printf(\"After %s transactions balance is %s\"\n                     , numberTransactions\n                     , balance.subtract(transationCost.multiply(numberTransactions)));\n\n   // Gives After 7 transactions balance is 1.30 :-) \n```", "```\n BigDecimal balance = new BigDecimal(\"2.00\");\n    BigDecimal transationCost = new BigDecimal(0.10); // <- float used to construct\n\n    BigDecimal numberTransactions = BigDecimal.valueOf(7);\n\n    System.out.printf(\"After %s transactions balance is %s\"\n                     , numberTransactions\n                     , balance.subtract(transationCost.multiply(numberTransactions)));\n\n   // Gives After 7 transactions\n   // balance is 1.2999999999999999611421941381195210851728916168212890625 \n```", "```\nBoolean b = Boolean.valueOf(true); \n```", "```\nBoolean b = new Boolean(true); \n```", "```\nBoolean b = true; \n```", "```\nBoolean b = Boolean.valueOf(true); \n```", "```\nfloat f = Float.parseFloat(\u201c1.2\u201d); \n```", "```\nfloat f = new Float(\u201c1.2\u201d); \n```", "```\nif ( list.size() == 0 ) {\n  // do stuff\n} \n```", "```\nif ( list.isEmpty() ) {\n  // do stuff\n} \n```", "```\nList.of(1, 2, 3);\nSet.of(42); \n```"]