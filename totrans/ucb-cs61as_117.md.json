["```\n(define (stream-car stream) (car stream))\n\n(define (stream-cdr stream) (force (cdr stream))) \n```", "```\n(define (stream-ref s n)\n  (if (= n 0)\n      (stream-car s)\n      (stream-ref (stream-cdr s) (- n 1)))) \n```", "```\n(define x (cons-stream 0 (cons-stream 1 (cons-stream 2 the-empty-stream)))) \n```", "```\n(define (stream-map proc s)\n  (if (stream-null? s)\n      the-empty-stream\n      (cons-stream (proc (stream-car s))\n                   (stream-map proc (stream-cdr s))))) \n```", "```\n(define (stream-for-each proc s)\n  (if (stream-null? s)\n      'done\n      (begin (proc (stream-car s))\n             (stream-for-each proc (stream-cdr s))))) \n```", "```\n(define (display-stream s)\n  (stream-for-each display-line s))\n\n(define (display-line x)\n  (newline)\n  (display x)) \n```", "```\n(stream-car\n (stream-cdr\n  (stream-filter prime?\n                 (stream-enumerate-interval 10000 1000000)))) \n```", "```\n(define (stream-enumerate-interval low high)\n  (if (> low high)\n      the-empty-stream\n      (cons-stream\n       low\n       (stream-enumerate-interval (+ low 1) high)))) \n```", "```\n(define (stream-filter pred stream)\n  (cond ((stream-null? stream) the-empty-stream)\n        ((pred (stream-car stream))\n         (cons-stream (stream-car stream)\n                      (stream-filter pred\n                                     (stream-cdr stream))))\n        (else (stream-filter pred (stream-cdr stream))))) \n```", "```\n(cons 10001\n      (delay (stream-enumerate-interval 10002 1000000))) \n```", "```\n(cons-stream (stream-car stream)\n             (stream-filter pred (stream-cdr stream))) \n```", "```\n(cons 10007\n      (delay\n        (stream-filter\n         prime?\n         (cons 10008\n               (delay\n                 (stream-enumerate-interval 10009\n                                            1000000)))))) \n```", "```\n(cons 10009\n      (delay\n        (stream-filter\n         prime?\n         (cons 10010\n               (delay\n                 (stream-enumerate-interval 10011\n                                            1000000)))))) \n```", "```\n (delay [exp]) \n```", "```\n (lambda () [exp]) \n```", "```\n (define (force delayed-object)\n  (delayed-object)) \n```", "```\n(define (memo-proc proc)\n  (let ((already-run? false) (result false))\n    (lambda ()\n      (if (not already-run?)\n          (begin (set! result (proc))\n                 (set! already-run? true)\n                 result)\n          result)))) \n```", "```\n(memo-proc (lambda () [exp])) \n```"]