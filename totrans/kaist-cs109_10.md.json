["```\n>>> val s = setOf(2, 3, 5, 7, 9)\n>>> s\n[2, 3, 5, 7, 9]\n>>> val w = setOf(\"CS109\", \"is\", \"wonderful\")\n>>> w\n[CS109, is, wonderful]\n>>> val e = emptySet<String>()\n>>> e\n[]\n\n```", "```\n>>> val s2 = setOf(9, 9, 5, 7, 3, 5, 3, 2)\n>>> s == s2\ntrue\n>>> val w2 = setOf(\"wonderful\", \"is\", \"CS109\")\n>>> w == w2\ntrue\n\n```", "```\n>>> s + 11\n[2, 3, 5, 7, 9, 11]\n>>> s - 7\n[2, 3, 5, 9]\n>>> s - 6\n[2, 3, 5, 7, 9]\n>>> s + 7\n[2, 3, 5, 7, 9]\n>>> s + 7 == s\ntrue\n\n```", "```\n>>> val a = (1 .. 10).toSet()\n>>> a\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> val b = (1 .. 10 step 2).toSet()\n>>> b\n[1, 3, 5, 7, 9]\n>>> val c = (1 .. 5).toSet()\n>>> c\n[1, 2, 3, 4, 5]\n>>> a.containsAll(b)\ntrue\n>>> b.containsAll(a)\nfalse\n>>> a.containsAll(c)\ntrue\n>>> a - b\n[2, 4, 6, 8, 10]\n>>> b + c\n[1, 3, 5, 7, 9, 2, 4]\n>>> b.filter { it in c }\n[1, 3, 5]\n\n```", "```\nimport org.otfried.cs109.readString\n\nval fname = \"words.txt\"\n\nval words = java.io.File(\"words.txt\").useLines { it.toSet() }\n\nwhile (true) {\n  val w = readString(\"Enter a word> \").trim()\n  if (w == \"\")\n    break\n  if (w in words) \n    println(\"$w is a word\")\n  else\n    println(\"Error: $w is not a word\")\n}\n\n```", "```\n$ kts spell.kts\nEnter a word> lovely\nlovely is a word\nEnter a word> lovly\nError: lovly is not a word\nEnter a word> wierd\nError: wierd is not a word\nEnter a word> weird\nweird is a word\nEnter a word> supercede\nError: supercede is not a word\nEnter a word> supersede\nsupersede is a word\nEnter a word> \n\n```", "```\n>>> val s = mutableSetOf(1, 2, 3, 4)\n>>> s\n[1, 2, 3, 4]\n>>> s.add(9)\ntrue\n>>> s\n[1, 2, 3, 4, 9]\n>>> s.add(13)\ntrue\n>>> s\n[1, 2, 3, 4, 9, 13]\n>>> s.remove(2)\ntrue\n>>> s\n[1, 3, 4, 9, 13]\n>>> s.remove(12)\nfalse\n>>> s\n[1, 3, 4, 9, 13]\n\n```", "```\nfun sieve(n: Int): Set<Int> {\n  var s = (2 .. n).toMutableSet()\n  val sqrtn = Math.sqrt(n.toDouble()).toInt()\n  for (i in 2 .. sqrtn) {\n    if (i in s) {\n      var k = i * i\n      while (k <= n) {\n      \ts.remove(k)\n\tk += i\n      }\n    }\n  }\n  return s\n}\n\nval num = if (args.size == 1) args[0].toInt() else 1000\n\nval primes = sieve(num)\n\nfor (i in primes)\n  print(\"$i \")\n\nprintln()\n\n```", "```\n$ kts sieve.kts 500\n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181\n191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277\n281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383\n389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487\n491 499\n\n```"]