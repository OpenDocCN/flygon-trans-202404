- en: Sequences as Conventional Interfaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列作为常规接口
- en: Sequences as Abstractions
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 序列作为抽象
- en: 'Let''s explore more into the concept of abstraction. One major benefit of using
    abstraction is that it helps us clean up code and increase readability. Some of
    the functions that we write for sequences can be generalized and abstracted using
    Higher Order Functions. This idea can be summarized by the following steps:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨抽象的概念。使用抽象的一个主要好处是帮助我们清理代码并增加可读性。我们为序列编写的一些函数可以使用高阶函数进行泛化和抽象。这个想法可以通过以下步骤总结：
- en: Find a recurring pattern in our code
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的代码中找到一个重复的模式
- en: Abstract each element in the pattern using HOFs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 HOF 抽象化模式中的每个元素
- en: Redefine our code with using the abstraction
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新定义我们的代码使用抽象
- en: Here are two example functions that will help demonstrate this idea.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个示例函数，将有助于演示这个想法。
- en: '`sum-odd-squares` takes in a tree containing numbers and adds together the
    square of each **odd** element in the tree:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`sum-odd-squares` 接受一个包含数字的树，并将树中每个**奇数**元素的平方相加：'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`even-fibs` takes in a number `n`, and returns a list of even fibonacci numbers
    up to and including `n`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`even-fibs` 接受一个数字 `n`，并返回包括 `n` 在内的偶数斐波那契数的列表：'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'From a first glance at the two functions, we might say "These two functions
    have nothing in common!". Sure, the functions look completely different but they
    do share the same logic:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看这两个函数，我们可能会说“这两个函数没有任何共同之处！”当然，这两个函数看起来完全不同，但它们确实共享相同的逻辑：
- en: '![](../Images/2be0131620e5880b328720c924f164fb.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2be0131620e5880b328720c924f164fb.jpg)'
- en: 'The first step in our idea was to find a recurring pattern in our code. From
    how we''ve described recursion in previous lessons, you might dissect `sum-odd-squares`
    and `even-fibs` by base cases and recursive calls. Now, let''s see what each function
    does from a different perspective:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想法的第一步是在我们的代码中找到一个重复的模式。从我们在之前课程中描述递归的方式，你可能会通过基本情况和递归调用来剖析 `sum-odd-squares`
    和 `even-fibs`。现在，让我们从不同的角度看看每个函数的作用：
- en: '`sum-odd-squares`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`sum-odd-squares`：'
- en: '**enumerates** the leaves of a tree'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**枚举**树的叶子节点'
- en: '**filters** out the nodes with even data, leaving only odd-valued nodes'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤**掉具有偶数数据的节点，仅留下奇数值节点'
- en: '**maps** the function `square` onto each of the remaining nodes, and finally'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**映射**函数 `square` 到剩余的每个节点，最后'
- en: '**accumulates** the results by adding them together, starting with 0.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**累积**结果通过将它们相加，从 0 开始。'
- en: '`even-fibs`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`even-fibs`：'
- en: '**enumerates** the integers from 0 to `n`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**枚举**从 0 到 `n` 的整数'
- en: '**maps** the function `fib` onto each integer'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**映射**函数 `fib` 到每个整数'
- en: '**filters** out the odd numbers, leaving only even Fibonacci numbers, and finally'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤**掉奇数，仅留下偶数斐波那契数，最后'
- en: '**accumulates** the results using `cons`, starting with the empty list.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**累积**使用 `cons`，从空列表开始。'
- en: 'What pattern do we see here? What at first seemed like two very different functions
    can now be summarized into four major parts: enumeration, filtering, accumulation,
    and computation. This is great, because now we can use HOFs to abstract our code.
    This leads us to step two of our abstraction idea. But before that, let''s go
    over some HOFs.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到了什么模式？起初看起来非常不同的两个函数现在可以总结为四个主要部分：枚举、过滤、累积和计算。这很棒，因为现在我们可以使用 HOF 来抽象化我们的代码。这将引导我们进入我们抽象化想法的第二步。但在那之前，让我们来看看一些
    HOF。
- en: Map
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射
- en: We went over the `map` HOF in Lesson 4\. You may want to [go back](http://localhost:8000/textbook/representing-sequences.html#sub3)
    for a quick refresher.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第 4 课中讨论了 `map` HOF。您可能希望[返回](http://localhost:8000/textbook/representing-sequences.html#sub3)快速复习一下。
- en: Filter
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤
- en: '`filter` takes in two arguments, `predicate` and `sequence`, and returns the
    sequence with only the elements of that sequence that satisfy `predicate`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter` 接受两个参数，`predicate` 和 `sequence`，并返回仅满足 `predicate` 的元素的序列。'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Test Your Understanding**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试您的理解**'
- en: What do the following expressions return?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表达式返回什么？
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Accumulate
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 累积
- en: '`accumulate` takes in an operation `op`, a starting value `initial`, and a
    `sequence`. Starting from `initial`, `accumulate` uses `op` to combine all the
    values in `sequence` into one. Here are some examples:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`accumulate` 接受一个操作 `op`，一个起始值 `initial` 和一个 `sequence`。从 `initial` 开始，`accumulate`
    使用 `op` 将 `sequence` 中的所有值组合成一个值。以下是一些示例：'
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is how we define `accumulate`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何定义 `accumulate`：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'How this HOF works could be a little confusing, so here let''s write out the
    evaluation steps explicitly:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 HOF 的工作原理可能有点令人困惑，所以让我们明确写出评估步骤：
- en: 'Consider the expression:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑表达式：
- en: '`(accumulate + 0 (list 1 2 3 4 5))`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`(accumulate + 0 (list 1 2 3 4 5))`'
- en: 'The recursive steps will proceed as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 递归步骤将按以下方式进行：
- en: '`(+ 1 (accumulate + 0 (list 2 3 4 5)))`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 1 (accumulate + 0 (list 2 3 4 5)))`'
- en: '`(+ 1 (+ 2 (accumulate + 0 (list 3 4 5))))`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 1 (+ 2 (accumulate + 0 (list 3 4 5))))`'
- en: '`(+ 1 (+ 2 (+ 3 (accumulate + 0 (list 4 5)))))`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 1 (+ 2 (+ 3 (accumulate + 0 (list 4 5)))))`'
- en: '`(+ 1 (+ 2 (+ 3 (+ 4 (accumulate + 0 (list 5))))))`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 1 (+ 2 (+ 3 (+ 4 (accumulate + 0 (list 5))))))`'
- en: '`(+ 1 (+ 2 (+ 3 (+ 4 (+ 5 (accumulate + 0 (list)))))))`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 1 (+ 2 (+ 3 (+ 4 (+ 5 (accumulate + 0 (list)))))))`'
- en: '`(+ 1 (+ 2 (+ 3 (+ 4 (+ 5 0)))))`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 1 (+ 2 (+ 3 (+ 4 (+ 5 0)))))`'
- en: '`(+ 1 (+ 2 (+ 3 (+ 4 5))))`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 1 (+ 2 (+ 3 (+ 4 5))))`'
- en: '`(+ 1 (+ 2 (+ 3 9)))`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 1 (+ 2 (+ 3 9)))`'
- en: '`(+ 1 (+ 2 12))`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 1 (+ 2 12))`'
- en: '`(+ 1 14)`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 1 14)`'
- en: '`15`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`15`'
- en: Enumerate
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举
- en: What does `enumerate` do? `enumerate` makes a sequence/list of elements. Our
    definition of `filter`, `map`, and `accumulate` are designed for sequences but
    recall that one of our functions, `sum-odd-squares` is called on trees. Instead
    of making several versions of accumulate, map, and filter, we can differentiate
    them by just having different `enumerate` functions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`enumerate`做什么？`enumerate`制作一个元素的序列/列表。我们对`filter`、`map`和`accumulate`的定义是为序列设计的，但请记住，我们的一个函数`sum-odd-squares`是在树上调用的。我们可以通过只有不同的`enumerate`函数来区分它们，而不是制作几个版本的累加、映射和筛选。'
- en: Enumerate for Lists
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列举列表
- en: Enumerate will return a list given a lower and upper range.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举将在给定下限和上限范围内返回一个列表。
- en: '`(enumerate-interval 0 5)` returns `(0 1 2 3 4 5)`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(enumerate-interval 0 5)` 返回`(0 1 2 3 4 5)`'
- en: '`(enumerate-interval 10 13)` returns `(10 11 12 13)`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(enumerate-interval 10 13)` 返回`(10 11 12 13)`'
- en: 'You can define enumerate (for lists) as:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以定义枚举（用于列表）如下：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Enumerate for Trees
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举树
- en: For our tree-version of enumerate, we need a function that accepts a tree, and
    returns a list with all of the leaves, so that it is compatible with the rest
    of our HOFs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们树形版本的枚举，我们需要一个接受树的函数，并返回一个包含所有叶子的列表，以便与我们的其他高阶函数兼容。
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Putting Everything Together
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: 'Here, we reach our final step in our abstraction idea. With all of the helper
    functions we have defined, we can define a more modular, readable, and compact
    version of `sum-odd-squares` and `even-fibs`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们达到了我们抽象概念的最后一步。通过我们定义的所有辅助函数，我们可以定义一个更模块化、可读性更强、更紧凑的`sum-odd-squares`和`even-fibs`的版本：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: What did we do here? We find all the leaves in the tree (**enumerate**), keep
    everything that is odd (**filter**), square everything left (**map**), and add
    up the results (**accumulate**).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做了什么？我们找到树中的所有叶子（**枚举**），保留所有奇数（**筛选**），对剩下的所有内容进行平方（**映射**），然后将结果相加（**累加**）。
- en: 'Similarly we can define `even-fibs` as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以如下定义`even-fibs`：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: What happened this time? We make a list from 0 to `n` (**enumerate**), find
    the Fibonacci number for all of them (**map**), keep everything that is even (**filter**),
    and put them together into a list (**accumulate**).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这次发生了什么？我们从0到`n`制作一个列表（**枚举**），为它们找到斐波那契数（**映射**），保留所有偶数（**筛选**），然后将它们放在一起成为一个列表（**累加**）。
- en: Takeaways
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: Sequences provide a strong foundation for abstraction with different combinations
    of `map`, `filter`, `accumulate` and `enumerate`. Even functions that may look
    to have different structures like the ones we used here as an example, we may
    be able to break them down using similar process signals.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 序列为使用不同组合的`map`、`filter`、`accumulate`和`enumerate`提供了强大的抽象基础。即使函数看起来具有不同结构，就像我们在这里使用的示例一样，我们可能能够使用类似的过程信号来分解它们。
