- en: Representing Sets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表示集合
- en: Intro to Sets
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合简介
- en: We have seen how we can use lists or trees to introduce hierarchy to our structure.
    Sometimes we don't care about a structure's hierarchy; we only need to know if
    a certain datum is in the structure. One useful structure for this is a **set**
    - a collection of unique data. In other words, sets will never contain two of
    the same element. For example, {cats dogs bears squirrels cats} is not a set because
    "cats" appear twice. In contrast, {cats dogs bears squirrels} is a set.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何使用列表或树来引入结构的层次结构。有时我们不关心结构的层次结构；我们只需要知道某个数据是否在结构中。对于这个问题，一个有用的结构是**集合**
    - 一组唯一的数据。换句话说，集合永远不会包含两个相同的元素。例如，{cats dogs bears squirrels cats}不是一个集合，因为"cats"出现了两次。相反，{cats
    dogs bears squirrels}是一个集合。
- en: 'For this lesson, we will use lists to represent a Set ADT. This means we can
    create Sets using `list` and select from sets using `car` and `cdr`. The empty
    set will be represented by an empty list, `null`. Looking forward, here are some
    functions that we will define for the Set ADT:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，我们将使用列表来表示一个集合ADT。这意味着我们可以使用`list`创建集合，并使用`car`和`cdr`从集合中选择。���集将由一个空列表`null`表示。展望未来，这里是我们将为集合ADT定义的一些函数：
- en: '`element-of-set?` checks if a certain data is in a set'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element-of-set?`检查某个数据是否在集合中'
- en: '`adjoin-set` adds a new data to a set.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adjoin-set`向集合添加新数据。'
- en: '`intersection-set` given two sets, returns a new set which contains only elements
    that are in both sets'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`intersection-set`给定两个集合，返回一个只包含两个集合中都有的元素的新集合'
- en: '`element-of-set?`'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`element-of-set?`'
- en: '`element-of-set?` takes in two arguments, an element `x` and a `set`, and returns
    `#t` if `x` is in `set`, `#f` otherwise:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`element-of-set?`接受两个参数，一个元素`x`和一个`set`，如果`x`在`set`中，则返回`#t`，否则返回`#f`：'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code is similar to `memq`. We used `equal?` because the member of a set
    can be a number, symbol, or anything else.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码类似于`memq`。我们使用`equal?`，因为集合的成员可以是数字、符号或其他任何东西。
- en: '**Test Your Understanding**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: Assume that set1 and set2 both have a length of n.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设set1和set2的长度都为n。
- en: What is the running time of the function call below?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的函数调用的运行时间是多少？
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`adjoin-set`'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`adjoin-set`'
- en: 'Let''s move on to `adjoin-set`! This function again takes in an element `x`
    and a `set`. If `x` is a member of `set` (we can check using our `element-of-set?`
    function), do nothing. Otherwise, add `x` to `set`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续学习`adjoin-set`！这个函数再次接受一个元素`x`和一个`set`。如果`x`是`set`的成员（我们可以使用我们的`element-of-set?`函数来检查），则不执行任何操作。否则，将`x`添加到`set`中：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`intersection-set`'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`intersection-set`'
- en: '`intersection-set` is a bit more challenging. Given two sets, `set1` and `set2`,
    we need to find its [intersection](https://en.wikipedia.org/wiki/Intersection_(set_theory)).
    We''ll have to do this recursively. Let''s separate this problem into cases:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`intersection-set`稍微有些挑战。给定两个集合`set1`和`set2`，我们需要找到它们的[交集](https://en.wikipedia.org/wiki/Intersection_(set_theory))。我们将不得不以递归方式完成这个任务。让我们将这个问题分为几种情况：'
- en: If either set is empty, return `null`.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任一集合为空，则返回`null`。
- en: Check if `(car set1)` is in `set2`.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查`(car set1)`是否在`set2`中。
- en: If so, include that element in our answer and recursively call `intersection-set`
    on `(cdr set1)` and `set2`.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是这样，请将该元素包含在我们的答案中，并在`(cdr set1)`和`set2`上递归调用`intersection-set`。
- en: If it is not in `set2`, recursively call `intersection-set` on `(cdr set1)`
    and `set2`.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不在`set2`中，则在`(cdr set1)`和`set2`上递归调用`intersection-set`。
- en: 'Here is the code for `intersection-set`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`intersection-set`的代码：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Test Your Understanding**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: Assume that set1 and set2 both have a length of n.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设set1和set2的长度都为n。
- en: What is the running time of the function call below?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的函数调用的运行时间是多少？
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Set as an Ordered List
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有序列表作为集合
- en: You might have noticed that our previous implementation of the Set ADT is relatively
    slow. Finding the intersection of two sets could have a quadratic run time relative
    to their size. If a set is rather large, this implementation would be very slow.
    But don't worry, we can speed things up by instead using **ordered sets**, where
    data must be stored in increasing order. e.g., `(1 3 4)` is an ordered set, whereas
    `(1 5 3 4)` is not.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们之前实现的集合ADT相对较慢。找到两个集合的交集可能会相对于它们的大小具有二次运行时间。如果一个集合很大，这种实现将非常慢。但不用担心，我们可以通过使用**有序集合**来加快速度，其中数据必须按递增顺序存储。例如，`(1
    3 4)`是一个有序集合，而`(1 5 3 4)`不是。
- en: Similar to how alphabetizing names will make a roster easier to search through,
    using ordered lists to represent sets will allow searching and manipulating them
    to be substantially faster.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于按字母顺序排列名称将使名册更容易搜索，使用有序列表来表示集合将使搜索和操作它们变得更快。
- en: '`element-of-set?`'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`element-of-set?`'
- en: One advantage of an ordered list is that we don't always have to explore the
    entire set to find a certain element. Let's make the necessary changes to `element-of-set?`
    so that it takes advantage of the ordered property.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有序列表的一个优点是，我们不必总是探索整个集合以找到某个特定元素。让我们对`element-of-set?`进行必要的更改，以利用有序属性。
- en: '`element-of-set?` still takes in two arguments, an element `x` and a `set`.
    Since we know that the elements of `set` are ordered, that means all we need to
    do is scan the set from left to right.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`element-of-set?`仍然接受两个参数，一个是元素`x`，另一个是`set`。由于我们知道`set`中的元素是有序的，这意味着我们只需要从左到右扫描集合。'
- en: If `(car set)` is equal to `x`, then we stop and return `#t`.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`(car set)`等于`x`，那么我们停止并返回`#t`。
- en: Otherwise, if `(car set)` is greater than `x`, then we know that all other elements
    in the set will be greater than `x`, and we can stop here and return `#f`.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，如果`(car set)`大于`x`，那么我们知道集合中的所有其他元素都将大于`x`，我们可以在这里停止并返回`#f`。
- en: Else, if `(car set)` is less than `x`, we'll have to move on to the next element
    in `set` and repeat.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，如果`(car set)`小于`x`，我们将不得不继续到`set`中的下一个元素并重复此过程。
- en: This means that, if we're lucky and `x` is less than or equal to the first element
    of `set`, we can automatically return `#f` or `#t` without even looking at the
    rest of `set`!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果我们幸运地`x`小于或等于`set`的第一个元素，我们甚至可以在不看`set`的其余部分的情况下自动返回`#f`或`#t`！
- en: 'Our code for `element-of-set?` will then be as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`element-of-set?`代码将如下所示：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Note:** We make the assumption that all the elements in our set are numbers.
    If this is not the case, the above code will error.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 我们假设我们集合中的所有元素都是数字。如果不是这种情况，上述代码将出错。'
- en: '**Test Your Understanding**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: Assume that set1 and set2 are ordered lists and both have a length of n.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`set1`和`set2`是有序列表，且长度都为n。
- en: What is the running time of the function call below?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的函数调用的运行时间是多少？
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`intersection-set`'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`intersection-set`'
- en: 'Our previous implementation of `intersection-set` with unordered lists compared
    each element of one set to every element of the other set, giving it a total run
    time of Θ(n^2). In order to speed up this function using ordered lists, let''s
    use a different approach to implement this function. We can split `intersection-set`
    into the base case (same as before):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前对于无序列表的`intersection-set`的实现将一个集合的每个元素与另一个集合的每个元素进行比较，导致其总运行时间为Θ(n^2)。为了加快使用有序列表的此功能的速度，让我们使用不同的方法来实现此函数。我们可以将`intersection-set`分为基本情况（与以前相同）：
- en: If either set is empty, return `null`
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任一集合为空，则返回`null`
- en: 'and the following recursive cases:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以及以下递归情况：
- en: '**`(= (car set1) (car set2))`:** Since they share the same element, we include
    this element in our answer, remove this element from both sets, and check the
    rest by calling `(intersection-set (cdr set1) (cdr set2))`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`(= (car set1) (car set2))`:** 由于它们共享相同的元素，我们在答案中包含此元素，从两个集合中删除此元素，并通过调用`(intersection-set
    (cdr set1) (cdr set2))`检查其余部分。'
- en: '**`(< (car set1) (car set2))`:** Since `(car set2)` is the smallest element
    in `set2`, we can conclude that `(car set1)` is smaller than all elements of `set2`
    and thus cannot be in `set2`. We can continue searching with the next largest
    in `set1` by calling `(intersection-set (cdr set1) set2)`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`(< (car set1) (car set2))`:** 由于`(car set2)`是`set2`中的最小元素，我们可以得出结论`(car
    set1)`小于`set2`的所有元素，因此不能在`set2`中。我们可以通过调用`(intersection-set (cdr set1) set2)`继续使用`set1`中的下一个最大成员进行搜索。'
- en: '**`(> (car set1) (car set2)`:** This is the mirror image of the case above.
    Since `(car set1)` is the smallest member in `set1`, we know that that `(car set2)`
    is smaller than all elements of `set1` and thus cannot be in `set1`. We can continue
    searching with the next largest member in `set2` by calling `(intersection-set
    set1 (cdr set2))`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`(> (car set1) (car set2))`:** 这是上述情况的镜像。由于`(car set1)`是`set1`中最小的成员，我们知道`(car
    set2)`小于`set1`的所有元素，因此不能在`set1`中。我们可以通过调用`(intersection-set set1 (cdr set2))`继续使用`set2`中的下一个最大成员进行搜索。'
- en: 'The complete code for `intersection-set` can be written as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`intersection-set`的完整代码可以如下所示：'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Test Your Understanding**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: Assume that set1 and set2 are ordered lists and both have a length of n.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`set1`和`set2`是有序列表，且长度都为n。
- en: What is the running time of the function call below?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的函数调用的运行时间是多少？
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Set as Binary Tree
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为二叉树的集合
- en: '*"I want to go faster"*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*"我想要更快"*'
- en: In the need for speed, we must break free of the chains of lists that bind us
    to linearity. In other words, if we want our Set ADT to work even faster, we will
    have to use a different data structure than lists. How about using a tree?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在追求速度的过程中，我们必须摆脱将我们与线性联系在一起的列表的束缚。换句话说，如果我们希望我们的集合ADT工作得更快，我们将不得不使用与列表不同的数据结构。使用树如何？
- en: 'A **binary tree** is just like the Tree we described earlier in this lesson,
    except for one important property: each node of a binary tree can have **at most
    two** branches.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**二叉树**就像我们在本课前面描述的树一样，除了一个重要的属性：二叉树的每个节点最多可以有**两个**分支。
- en: 'Using binary trees to represent sets is simple and intuitive. The **entry**
    (analogous to **datum**) of each node in a binary tree will be an element of a
    set. Each node will also have a **left branch** and a **right branch**; the left
    or right branch of a node can be empty. If both branches are empty, that node
    is a **leaf**. This data structure must follow one rule: The left branch of a
    node must point to a subtree with entries smaller than the entry node. The right
    branch must point to a subtree with entries larger than the entry node. In other
    words, **all values to the left of a node must be smaller than the node, and all
    values to the right of a node must be larger than the node**.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用二叉树表示集合是简单直观的。二叉树中每个节点的**入口**（类似于**数据**）将是集合的一个元素。每个节点还将有一个**左分支**和一个**右分支**；节点的左分支或右分支可以为空。如果两个分支都为空，那么该节点是一个**叶子**。这种数据结构必须遵循一个规则：节点的左分支必须指向具有比节点入口更小的条目的子树。右分支必须指向具有比节点入口更大的条目的子树。换句话说，**节点左侧的所有值必须小于节点，节点右侧的所有值必须大于节点**。
- en: '![](../Images/9011163110fabcf44a2ce30ec582cfc6.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9011163110fabcf44a2ce30ec582cfc6.jpg)'
- en: This rule introduces logarithmic runtime into the picture. Walk yourself through
    finding `11` in the leftmost tree above. We start at the root of the tree and
    notice that `11` is greater than `7`, and so we travel down the right branch.
    `11` is greater than `9`, and so we again go down the right branch. We have found
    `11` in the tree and can return `#t`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则引入了对数运行时间的概念。自己尝试在上面最左侧的树中找到`11`。我们从树的根开始，注意到`11`大于`7`，所以我们沿着右分支向下移动。`11`大于`9`，所以我们再次沿着右分支向下移动。我们在树中找到了`11`，可以返回`#t`。
- en: Okay, now let's try to prove this logarithmic run time. If you don't want to
    see the entire proof, you can skip ahead to the **TL;DR** section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们尝试证明这种对数运行时间。如果你不想看整个证明，可以直接跳到**TL;DR**部分。
- en: 'Take a look at the worst-case tree below:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的最坏情况树：
- en: '![](../Images/c803bb571db02fa03909d4a5dabe4a0e.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c803bb571db02fa03909d4a5dabe4a0e.jpg)'
- en: The maximum number of nodes you will have to explore, ever, is equal to the
    **depth** of the tree, or how many levels the tree has. (The depth at the root
    is 1.) Take a moment to confirm this.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将不得不探索的节点的最大数量，永远等于树的**深度**，或者树有多少层。 （根的深度为1。）花点时间确认一下。
- en: We are given that the set has size `n`, and so there are `n` nodes in the tree.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已知集合的大小为`n`，因此树中有`n`个节点。
- en: At depth 1, there is 1 `(2^1 - 1)` node. At depth 2, there are 3 `(2^2 - 1)`
    total nodes. At depth 3, there are 7 `(2^3 - 1)` total nodes, ...and finally,
    at depth `d`, there are `(2^d - 1)` total nodes.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在深度1处，有1个`(2^1 - 1)`节点。在深度2处，有3个`(2^2 - 1)`总节点。在深度3处，有7个`(2^3 - 1)`总节点，...最后，在深度`d`处，有`(2^d
    - 1)`总节点。
- en: We learned in Lesson 3 that in asymptotic analysis, we can ignore constants,
    so let's just say that at depth `d`, there are `2^d` total nodes. This means that
    any tree with depth `d` will have `2^d` nodes in the tree.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第3课中学到，在渐近分析中，我们可以忽略常数，所以让我们说在深度`d`处，树中有`2^d`个节点。这意味着任何深度为`d`的树将在树中有`2^d`个节点。
- en: We know that there are `n` total nodes in the tree. That means `2^d = n`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道树中总共有`n`个节点。这意味着`2^d = n`。
- en: After doing some cool algebra magic, we get `d = log(n)`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些很酷的代数魔术，我们得到`d = log(n)`。
- en: Remember how we said that the maximum number of nodes we'll ever explore is
    equal to the depth of the tree? This means the run time for finding a node in
    a binary tree is Θ(d) = Θ(logn). And thus, we have proved the logarithmic run
    time of using a binary tree to represent sets. Phew!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们说过我们将探索的节点的最大数量等于树的深度吗？这意味着在二叉树中查找节点的运行时间是Θ(d) = Θ(logn)。因此，我们证明了使用二叉树表示集合的对数运行时间。哦！
- en: '**TL;DR:** The ordering of the binary tree structure allows us to ignore half
    of the tree after every comparison. This means that the maximum number of nodes
    we''ll ever have to explore equals the **depth** of the tree. This leads us to
    a running time of Θ(log n). e.g., in a tree with 8 nodes, we just need 3 comparisons
    max until we reach any leaf. In a tree with 16 nodes (double the previous one),
    we just need 4 comparisons (just 1 more comparison!) until we can reach any leaf.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结：** 二叉树结构的排序允许我们在每次比较后忽略一半的树。这意味着我们需要探索的节点数最多等于树的**深度**。这导致我们的运行时间为 Θ(log
    n)。例如，在具有 8 个节点的树中，我们最多只需要 3 次比较，直到达到任何叶子节点。在具有 16 个节点的树中（是前一个的两倍），我们只需要 4 次比较（只多了
    1 次比较！）直到达到任何叶子节点。'
- en: Implementing a Binary Tree
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现二叉树
- en: One way to implement a binary tree is by using a list where the first item is
    the element, the second item is the left subtree and the third item is the right
    subtree.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一种实现二叉树的方法是使用一个列表，其中第一项是元素，第二项是左子树，第三项是右子树。
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`element-of-set?`'
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`element-of-set?`'
- en: 'We can formalize our algorithm for finding if an element is in a set with the
    following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下代码形式化我们的算法，以查找集合中是否存在元素：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Super simple stuff.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 超级简单的东西。
- en: '`adjoin-set`'
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`adjoin-set`'
- en: How do you add an element to a binary tree? Since you need to decide whether
    to add x in the leaf of the left subtree or right subtree, let's follow the same
    algorithm `element-of-set?` above.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如何向二叉树添加元素？由于你需要决定将 x 添加到左子树的叶子还是右子树的叶子，让我们遵循上面的相同算法 `element-of-set?`。
- en: If the tree is empty, make a tree with node entry `x` and empty left and right
    branches.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果树为空，则创建一个具有节点条目 `x` 和空左右分支的树。
- en: If x is equal to the node of the tree, return the tree. (This means `x` is already
    in the tree and no changes need to be made.)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 x 等于树的节点，则返回树。（这意味着 `x` 已经在树中，不需要进行任何更改。）
- en: If x is less than the node of the tree, go to the left subtree.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 x 小于树的节点，则进入左子树。
- en: If x is larger than the node of the tree, go to the right subtree.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 x 大于树的节点，则进入右子树。
- en: 'Here''s the formal algorithm for `adjoin-set`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `adjoin-set` 的正式算法：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Unbalanced Tree
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不平衡树
- en: '![](../Images/0be82a024daf6d0654f81ce7605fbfc0.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0be82a024daf6d0654f81ce7605fbfc0.jpg)'
- en: The image above is the result of adding the elements 1, 2, 3, 4, 5, 6, and 7,
    in that order, to an empty tree. (Make sure you try this out with pen and paper
    to see that this is the case). We say that this tree is **unbalanced** because
    one side of the tree has way more elements than the other.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图像是将元素 1、2、3、4、5、6 和 7 按顺序添加到空树的结果。（确保你用纸和笔尝试一下，看看是否是这样）。我们说这棵树是**不平衡**的，因为树的一侧有比另一侧更多的元素。
- en: '**Test Your Understanding**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: In the unbalanced tree above, what is the running time of finding an element
    (e.g., 7)? n is the the number of nodes in the tree, where n = 7.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的不平衡树中，查找一个元素（例如，7）的运行时间是多少？n 是树中的节点数，其中 n = 7。
- en: '**Challenge:** Can you think of an ordering to add the same numbers so that
    we create a balanced tree?'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**挑战：** 你能想到一种顺序添加相同数字的方法，以创建一个平衡的树吗？'
- en: Different Types of Trees
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同类型的树
- en: Previously, we saw how nodes in a tree can have an arbitary number of children.
    These types of trees are sometimes called **N-way trees**. For N-way trees, we
    store the children of the tree as a forest, or a list of trees. We retrieve this
    forest through the selector `(children <tree>).`
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们看到树中的节点可以有任意数量的子节点。这些类型的树有时被称为**N路树**。对于 N 路树，我们将树的子节点存储为一个森林，或者一组树。我们通过选择器
    `(children <tree>)` 检索这个森林。
- en: In the previous section, we saw a more specific type of tree, binary trees.
    Each node in this tree has at most 2 children. They can be accessed with `(left-branch
    <tree>)` and`(right-branch <tree>)`. The constructor for a binary tree is also
    different than the constructor for an N-way tree.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们看到了一种更具体的树类型，即二叉树。这棵树中的每个节点最多有 2 个子节点。它们可以通过 `(left-branch <tree>)`
    和 `(right-branch <tree>)` 访问。二叉树的构造器也与 N 路树的构造器不同。
- en: When you are working with trees, find out what kind of tree you are working
    with and notice the constructors and selectors that the question provide. The
    constructors and selectors for a binary tree would not work at all on an N-way
    tree!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在处理树时，要弄清楚你正在处理的是什么类型的树，并注意问题提供的构造器和选择器。二叉树的构造器和选择器在 N 路树上根本不起作用！
- en: Takeaways
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: A set is a particular data structure where each element appears only once. There
    are multiple ways to represent Sets (as with basically all data structures). The
    choice of representation affects the run time of different functions.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是一种特定的数据结构，其中每个元素只出现一次。有多种表示集合的方式（就像基本上所有数据结构一样）。表示的选择会影响不同函数的运行时间。
