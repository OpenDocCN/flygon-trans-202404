- en: 関数とスコープ
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://jsprimer.net/basic/function-scope/](https://jsprimer.net/basic/function-scope/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 定義された関数はそれぞれのスコープを持っています。スコープとは変数や関数の引数などを参照できる範囲を決めるものです。 JavaScriptでは、新しい関数を定義するとその関数にひもづけられた新しいスコープが作成されます。関数を定義するということは処理をまとめるというだけではなく、変数が有効な範囲を決める新しいスコープを作っていると言えます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: スコープの仕組みを理解することは関数をより深く理解することにつながります。なぜなら関数とスコープは密接な関係を持っているからです。 この章では関数とスコープの関係を中心に、スコープとはどのような働きをしていて、スコープ内では変数の名前から取得する値がどのように決まるかを見ていきます。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptのスコープは、ES2015において直感的に理解しやすい仕組みが整備されました。 基本的にはES2015以降の仕組みを理解していればコードを書く場合には問題ありません。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: しかし、既存のコードを理解するためには、ES2015より前に決められた古い仕組みについても知る必要があります。 なぜなら、既存のコードは古い仕組みを使って書かれていることもあるためです。
    また、JavaScriptでは古い仕組みと新しい仕組みを混在して書くことができます。 古い仕組みによるスコープは直感的でない挙動も多いため、古い仕組みについても補足していきます。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[](#what-is-scope)*スコープとは*'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*スコープとは変数の名前や関数などの参照できる範囲を決めるものです。 スコープの中で定義された変数はスコープの内側でのみ参照でき、スコープの外側からは参照できません。'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 身近なスコープの例として関数によるスコープを見ていきます。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、`fn`関数のブロック（`{`と`}`）内で変数`x`を定義しています。 この変数`x`は`fn`関数のスコープに定義されているため、`fn`関数の内側では参照できます。
    一方、`fn`関数の外側から変数`x`は参照できないため`ReferenceError`が発生します。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: このコードを見てわかるように、変数`x`は`fn`関数のスコープにひもづけて定義されます。 そのため、変数`x`は`fn`関数のスコープ内でのみ参照できます。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 関数は**仮引数**を持てますが、仮引数は関数のスコープにひもづけて定義されます。 そのため、仮引数はその関数の中でのみ参照が可能で、関数の外からは参照できません。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: このような、関数によるスコープのことを**関数スコープ**と呼びます。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 「[変数と宣言](../variables/)」の章にて、`let`や`const`は同じスコープ内に同じ名前の変数を二重に定義できないという話をしました。
    これは、各スコープには同じ名前の変数は1つしか宣言できないためです（`var`による変数宣言と`function`による関数宣言は例外的に可能です）。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 一方、スコープが異なれば同じ名前で変数を宣言できます。 次のコードでは、`fnA`関数と`fnB`関数という異なるスコープで、それぞれ変数`x`を定義できていることがわかります。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: このように、スコープが異なれば同じ名前の変数を定義できます。 スコープの仕組みがないと、グローバルな空間内で一意な変数名を考える必要があります。 スコープがあることで同じ名前の変数をスコープごとに定義できるため、スコープの役割は重要です。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[](#block-scope)*ブロックスコープ*'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*`{`と`}`で囲んだ範囲をブロックと呼びます（「[文と式](../statement-expression/)」の章を参照）。 ブロックもスコープを作成します。
    ブロック内で宣言された変数は、スコープ内でのみ参照でき、スコープの外側からは参照できません。'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ブロックによるスコープのことを**ブロックスコープ**と呼びます。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: if文やwhile文などもブロックスコープを作成します。 単独のブロックと同じく、ブロックの中で宣言した変数は外から参照できません。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: for文は、ループごとに新しいブロックスコープを作成します。 このことは「各スコープには同じ名前の変数は1つしか宣言できない」のルールを考えてみるとわかりやすいです。
    次のコードでは、ループごとに`const`で`element`変数を定義していますが、エラーなく定義できています。 これは、ループごとに別々のブロックスコープが作成され、変数の宣言もそれぞれ別々のスコープで行われるためです。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[](#scope-chain)*スコープチェーン*'
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*関数やブロックはネスト（入れ子）して書けますが、同様にスコープもネストできます。 次のコードではブロックの中にブロックを書いています。 このとき外側のブロックスコープのことを`OUTER`、内側のブロックスコープのことを`INNER`と呼ぶことにします。'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: スコープがネストしている場合に、内側のスコープから外側のスコープにある変数を参照できます。 次のコードでは、内側のINNERブロックスコープから外側のOUTERブロックスコープに定義されている変数`x`を参照できます。
    これは、ブロックスコープに限らず関数スコープでも同様です。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 変数を参照する際には、現在のスコープ（変数を参照する式が書かれているスコープ）から外側のスコープへと順番に変数が定義されているかを確認します。 上記のコードでは、内側のINNERブロックスコープには変数`x`はありませんが、外側のOUTERブロックスコープに変数`x`が定義されているため参照できます。
    つまり、次のようなステップで参照したい変数を探索しています。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: INNERブロックスコープに変数`x`があるかを確認 => ない
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ひとつ外側のOUTERブロックスコープに変数`x`があるかを確認 => ある
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 一方、現在のスコープも含め、外側のどのスコープにも該当する変数が定義されていない場合は、`ReferenceError`の例外が発生します。 次の例では、どのスコープにも存在しない`xyz`を参照しているため、`ReferenceError`の例外が発生します。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: このときも、現在のスコープ（変数を参照する式が書かれているスコープ）から外側のスコープへと順番に変数が定義されているかを確認しています。 しかし、どのスコープにも変数`xyz`は定義されていないため、`ReferenceError`の例外が発生していました。
    つまり次のようなステップで参照したい変数を探索しています。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: INNERブロックスコープに変数`xyz`があるかを確認 => ない
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ひとつ外側のOUTERブロックスコープに変数`xyz`があるかを確認 => ない
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 一番外側のスコープにも変数`xyz`は定義されていない => `ReferenceError`が発生
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: この内側から外側のスコープへと順番に変数が定義されているか探す仕組みのことを**スコープチェーン**と呼びます。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 内側と外側のスコープ両方に同じ名前の変数が定義されている場合もスコープチェーンの仕組みで解決できます。 次のコードでは、内側のINNERブロックスコープと外側のOUTERブロックスコープに同じ名前の変数`x`が定義されています。
    スコープチェーンの仕組みにより、現在のスコープに定義されている変数`x`を優先的に参照します。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: このようにスコープは階層的な構造となっており、変数を参照する際にどの変数が参照できるかはスコープチェーンによって解決されています。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[](#global-scope)*グローバルスコープ*'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*今までコードをプログラム直下に書いていましたが、ここにも暗黙的な**グローバルスコープ**（大域スコープ）と呼ばれるスコープが存在します。 グローバルスコープとは名前のとおりもっとも外側にあるスコープで、プログラム実行時に暗黙的に作成されます。'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: グローバルスコープで定義した変数は**グローバル変数**と呼ばれ、グローバル変数はあらゆるスコープから参照できる変数となります。 なぜなら、スコープチェーンの仕組みにより、最終的にもっとも外側のグローバルスコープに定義されている変数を参照できるためです。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: グローバルスコープには自分で定義したグローバル変数以外に、プログラム実行時に自動的に定義される**ビルトインオブジェクト**があります。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: ビルトインオブジェクトには、大きく分けて2種類のものがあります。 1つ目はECMAScript仕様が定義する`undefined`のような変数（「[undefinedはリテラルではない](../data-type/#undefined-is-not-literal)」を参照）や`isNaN`のような関数、`Array`や`RegExp`などのコンストラクタ関数です。2つ目は実行環境（ブラウザやNode.jsなど）が定義するオブジェクトで`document`や`module`などがあります。
    どちらもグローバルスコープに自動的に定義されているという点で大きな使い分けはないため、この章ではどちらも**ビルトインオブジェクト**と呼ぶことにします。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: ビルトインオブジェクトは、プログラム開始時にグローバルスコープへ自動的に定義されているためどのスコープからも参照できます。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 自分で定義したグローバル変数とビルトインオブジェクトでは、グローバル変数が優先して参照されます。 つまり次のようにビルトインオブジェクトと同じ名前の変数を定義すると、定義した変数が参照されます。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ビルトインオブジェクトと同じ名前の変数を定義したことにより、ビルトインオブジェクトを参照できなくなります。 このように内側のスコープで外側のスコープと同じ名前の変数を定義することで、外側の変数が参照できなくなることを**変数の隠蔽**（shadowing）と呼びます。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: この問題を回避する方法としては、むやみにグローバルスコープへ変数を定義しないことです。グローバルスコープでビルトインオブジェクトと名前が衝突するとすべてのスコープへ影響を与えますが、関数のスコープ内では影響範囲がその関数の中だけにとどまります。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: ビルトインオブジェクトと同じ名前を避けることは難しいです。 なぜならビルトインオブジェクトには実行環境（ブラウザやNode.jsなど）がそれぞれ独自に定義したものが多く存在するためです。
    関数などを活用して小さなスコープを中心にしてプログラムを書くことで、ビルトインオブジェクトと同じ名前の変数があっても影響範囲を限定できます。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[](#reduce-scope)*[コラム] 変数を参照できる範囲を小さくする*'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*グローバル変数に限らず、特定の変数を参照できる範囲を小さくするのはよいことです。 なぜなら、現在のスコープの変数を参照するつもりがグローバル変数を参照したり、その逆も起きることがあるからです。
    あらゆる変数がグローバルスコープにあると、どこでその変数が参照されているのかを把握できなくなります。 これを避けるシンプルな考え方は、変数はできるだけ利用するスコープ内に定義するというものです。'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、`doHeavyTask`関数の実行時間を計測しようとしています。 `Date.now`メソッドは現在の時刻をミリ秒にして返す関数です。
    `Date.now`メソッドを使った**実行後の時刻**から**実行前の時刻**を引くことで、間に行われた処理の実行時間が得られます。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: このコードでは、計測処理以外で利用しない`startTime`と`endTime`という変数がグローバルスコープに定義されています。 プログラム全体が短い場合はあまり問題になりませんが、プログラムが長くなっていくにつれ影響の範囲が広がっていきます。
    この2つの変数を参照できる範囲を小さくする簡単な方法は、この実行時間を計測する処理を関数にすることです。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: これにより、`startTime`と`endTime`という変数をグローバルスコープからなくせました。 また、実行時間を計測するという処理を`measureTask`という関数にしたことで再利用できます。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: コードの量が増えていくにつれ、人が一度に把握できる量にも限界がやってきます。 そのため、人が一度に把握できる範囲のサイズに処理をまとめていくことが必要です。
    この問題を解決するアプローチとして、変数を参照できる範囲を小さくするために、処理を関数にまとめるという手法がよく利用されます。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[](#hoisting-var)*関数スコープとvarの巻き上げ*'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*変数宣言には`var`、`let`、`const`が利用できます。 「[変数と宣言](../variables/)」の章において、「`let`は`var`を改善したバージョン」と紹介したように、`let`は`var`を改善する目的で導入された構文です。`const`は再代入できないという点以外は`let`と同じ動作になります。そのため、`let`が使える場合に`var`を使う理由はありませんが、既存のコードや既存のライブラリなどでは`var`が利用されている場面もあるため、`var`の動作を理解する必要があります。'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: まず最初に、`let`と`var`で共通する動作を見ていきます。 `let`と`var`どちらも、初期値を指定せずに宣言した変数の評価結果は暗黙的に`undefined`になります。
    また、`let`と`var`どちらも、変数宣言をした後に値を代入できます。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、それぞれ初期値を持たない変数を**宣言した後**に参照すると、変数の評価結果は`undefined`となっています。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 次に、`let`と`var`で異なる動作を見ていきます。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '`let`では、変数を**宣言する前**にその変数を参照すると`ReferenceError`の例外が発生して参照できません。 次のコードでは、変数を宣言する前に変数`x`を参照したため`ReferenceError`となっています。
    エラーメッセージから、変数`x`が存在しないからエラーになっているのではなく、実際に宣言した行より前に参照したためエラーとなっているのがわかります。^([1](#fn_1))'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`let`，在**声明之前**引用变量会导致`ReferenceError`异常，无法访问。 下面的代码由于在声明变量`x`之前引用了变量，因此导致`ReferenceError`。
    从错误消息中可以看出，错误并不是因为变量`x`不存在，而是因为在实际声明之前引用了它。^([1](#fn_1))
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 一方`var`では、変数を**宣言する前**にその変数を参照しても`undefined`となります。 次のコードは、変数を宣言する前に参照しているにもかかわらずエラーにはならず、変数`x`の評価結果は`undefined`となります。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，使用`var`，在**声明之前**引用变量会导致其为`undefined`。 下面的代码尽管在声明之前引用了变量，但不会报错，变量`x`的值会变为`undefined`。
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: このように`var`で宣言された変数が宣言前に参照でき、その値が`undefined`となる特殊な動きをしていることがわかります。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看出，使用`var`声明的变量可以在声明之前被引用，并且其值为`undefined`，这是一种特殊的行为。
- en: この`var`の振る舞いを理解するために、変数宣言が**宣言**と**代入**の2つの部分から構成されていると考えてみましょう。 `var`による変数宣言は、**宣言**部分が暗黙的にもっとも近い関数またはグローバルスコープの先頭に巻き上げられ、**代入**部分はそのままの位置に残るという特殊な動作をします。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这种`var`的行为，可以将变量声明看作由**声明**和**赋值**两部分组成。 使用`var`进行变量声明时，**声明**部分会被隐式地提升到最近的函数或全局作用域的顶部，而**赋值**部分则保持在原位置。
- en: この動作により、変数`x`を参照するコードより前に変数`x`の宣言部分が移動し、変数`x`の評価結果は暗黙的に`undefined`となっています。 つまり、先ほどのコードは実際の実行時には、次のように解釈されて実行されていると考えられます。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为导致变量`x`的声明部分被移动到引用变量`x`的代码之前，导致变量`x`的值在隐式情况下变为`undefined`。 换句话说，上述代码在实际执行时可能被解释和执行如下。
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: さらに、`var`変数の宣言の巻き上げは、ブロックスコープを無視してもっとも近い関数またはグローバルスコープに変数をひもづけます。 そのため、次のようにブロック`{}`で`var`による変数宣言を囲んでも、もっとも近い関数スコープである`fn`関数の直下に**宣言**部分が巻き上げられます
    （if文やfor文におけるブロックスコープも同様に無視されます）。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`var`变量的声明提升会将变量绑定到最近的函数或全局作用域，忽略块级作用域。 因此，即使在`{}`块中使用`var`声明变量，声明部分也会被提升到最近的函数作用域`fn`函数的顶部（在if语句或for循环中的块级作用域也会被忽略）。
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: つまり、先ほどのコードは実際の実行時には、次のように解釈されて実行されていると考えられます。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，上述代码在实际执行时可能被解释和执行如下。
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: この変数の**宣言**部分がもっとも近い関数またはグローバルスコープの先頭に移動しているように見える動作のことを変数の**巻き上げ**（hoisting）と呼びます。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这种变量的**声明**部分被看作移动到最近的函数或全局作用域的顶部的行为称为变量的**提升**（hoisting）。
- en: このように`var`は`let`、`const`とは異なった動作をしています。 `var`は巻き上げによりブロックスコープを無視して、宣言部分を自動的に関数スコープの先頭に移動するという予測しにくい問題を持っています。
    この問題のもっとも簡単な回避方法は`var`を使わないことですが、`var`を含んだコードではこの動作に気をつける必要があります。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，`var`与`let`、`const`有不同的行为。 `var`通过变量提升来忽略块级作用域，自动将声明部分移动到函数作用域的顶部，这带来了一些难以预测的问题。避免这个问题的最简单方法是不使用`var`，但在包含`var`的代码中需要注意这种行为。
- en: '[](#function-declaration-hoisting)*関数宣言と巻き上げ*'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#function-declaration-hoisting)*函数声明和变量提升*'
- en: '*`function`キーワードを使った関数宣言も`var`と同様に、もっとも近い関数またはグローバルスコープの先頭に**巻き上げ**られます。 次のコードでは、実際に`hello`関数を宣言した行より前に関数を呼び出せます。'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用`function`关键字进行函数声明也会像`var`一样被提升到最近的函数或全局作用域的顶部。 在下面的代码中，您可以在实际声明`hello`函数的行之前调用函数。'
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: これは、関数宣言は**宣言**そのものであるため、`hello`関数そのものがスコープの先頭に巻き上げられます。 つまり先ほどのコードは、次のように解釈されて実行されていると考えられます。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为函数声明本身就是**声明**，所以`hello`函数本身会被提升到作用域的顶部。 换句话说，上述代码在实际执行时可能被解释和执行如下。
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`function`キーワードによる関数宣言も巻き上げられます。 しかし、`var`による変数宣言の巻き上げとは異なり、問題となることはほとんどありません。
    なぜなら、実際に巻き上げられた関数を呼び出せるためです。'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`function`关键字进行函数声明也会被提升。 但与使用`var`进行变量声明的提升不同，这几乎不会引起问题。 这是因为实际上提升的函数可以被调用。
- en: 注意点として、`var`で宣言された変数へ関数を代入した場合は`var`のルールで巻き上げられます。 そのため、`var`で変数へ関数を代入する関数式では、`hello`変数が巻き上げにより`undefined`となるため呼び出せません（「[関数と宣言（関数式）](../function-declaration/#function-expression)」を参照）。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，如果将函数分配给使用`var`声明的变量，则会按照`var`的规则进行提升。 因此，在将函数分配给变量的函数表达式中使用`var`声明的情况下，由于`hello`变量被提升为`undefined`，因此无法调用（请参阅“[函数和声明（函数表达式）](../function-declaration/#function-expression)”）。
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[](#immediate-function)*[コラム] 即時実行関数*'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#immediate-function)*[专栏] 立即执行函数*'
- en: '*即時実行関数（**IIFE**, *Immediately-Invoked Function Expression*）は、 グローバルスコープの汚染を避けるために生まれたイディオムです。'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*立即执行函数（**IIFE**，*Immediately-Invoked Function Expression*）是为了避免全局作用域污染而产生的习惯用法。'
- en: 次のように、無名関数を宣言した直後に呼び出すことで、任意の処理を関数のスコープに閉じて実行できます。 関数スコープを作ることで`foo`変数は無名関数の外側からはアクセスできません。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在声明无名函数后立即调用，可以将任意处理封装在函数作用域中。 通过创建函数作用域，`foo`变量无法从无名函数外部访问。
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 関数を**式**として定義して、そのまま呼び出しています。 `function`からはじまってしまうとJavaScriptエンジンが**関数宣言**と解釈してしまうため、無害なカッコなどで囲んで**関数式**として解釈させるのが特徴的な記法です。これは次のように書いた場合と意味は同じですが、無名関数を定義して実行するため短く書くことができ、余計な関数定義がグローバルスコープに残りません。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将函数定义为**表达式**，并立即调用它。 由于以`function`开头会被JavaScript引擎解释为**函数声明**，因此用无害的括号等将其包围以将其解释为**函数表达式**是一种特殊的写法。
    这种写法与下面的写法意义相同，但可以更简洁地定义和执行匿名函数，而不会在全局作用域中留下多余的函数定义。
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: ECMAScript 5までは、変数を宣言する方法は`var`しか存在しませんでした。 そのため、即時実行関数は`var`によるグローバルスコープの汚染を防ぐために使われていました。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在ECMAScript 5之前，只有`var`一种方法来声明变量。 因此，立即执行函数被用来防止`var`污染全局作用域。
- en: しかしECMAScript 2015で導入された`let`と`const`により、ブロックスコープに対して変数宣言できるようになりました。 そのため、グローバルスコープの汚染を防ぐための即時実行関数は不要です。
    先ほどの即時実行関数は次のように`let`や`const`とブロックスコープで置き換えられます。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，通过ECMAScript 2015引入的`let`和`const`，可以在块级作用域中声明变量。 因此，不再需要立即执行函数来防止全局作用域的污染。
    上述的立即执行函数可以被`let`和`const`与块级作用域替代。
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[](#closure)*クロージャー*'
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#closure)*闭包*'
- en: '*最後にこの章ではクロージャーと呼ばれる関数とスコープに関わる性質について見ていきます。 クロージャーとは「外側のスコープにある変数への参照を保持できる」という関数が持つ性質のことです。'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*最后，在本章中我们将探讨与函数和作用域相关的特性，称为闭包。 闭包是指函数具有的一种性质，即“可以保持对外部作用域中变量的引用”。'
- en: クロージャーは言葉で説明しただけではわかりにくい性質です。 このセクションでは、クロージャーを使ったコードがどのように動くのかを理解することを目標にします。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[闭包](https://wiki.example.org/closure)是一种很难用言语解释清楚的特性。本节的目标是理解使用闭包的代码是如何运作的。'
- en: 次の例では`createCounter`関数が、関数内で定義した`increment`関数を返しています。 その返された`increment`関数を`myCounter`変数に代入しています。この`myCounter`変数を実行するたびに1,
    2, 3と1ずつ増えた値を返しています。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，`createCounter`函数返回在函数内定义的`increment`函数。 将返回的`increment`函数赋值给`myCounter`变量。每次执行`myCounter`变量时，它都会返回增加1的值。
- en: さらに、もう一度`createCounter`関数を実行して、その返り値を`newCounter`変数に代入します。 `newCounter`変数も実行するたびに1ずつ増えていますが、`myCounter`変数とその値を共有しているわけではないことがわかります。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，再次执行`createCounter`函数，并将其返回值赋给`newCounter`变量。 `newCounter`变量每次执行时也会递增1，但可以看出`newCounter`变量与`myCounter`变量及其值并不共享。
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: このように、まるで関数が状態（ここでは1ずつ増える`count`という値）を持っているように振る舞える仕組みの背景にはクロージャーがあります。 クロージャーは直感的に理解しにくいため、まずはクロージャーを理解するために必要な「静的スコープ」と「メモリ管理の仕組み」について見ていきます。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这种机制使得函数好像具有状态（在这里是逐渐增加的`count`值）一样，背后的原理是闭包。 由于闭包很难直观理解，因此首先需要了解“静态作用域”和“内存管理机制”来理解闭包。
- en: '[](#static-scope)*静的スコープ*'
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*クロージャーを理解するために、今まで意識してこなかったスコープの性質について見ていきます。 JavaScriptのスコープには、どの識別子がどの変数を参照するかが静的に決定されるという性質があります。
    つまり、コードを実行する前にどの識別子がどの変数を参照しているかがわかるということです。'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 次のような例を見てみます。 `printX`関数内で変数`x`を参照していますが、変数`x`はグローバルスコープと関数`run`の中で、それぞれ定義されています。
    このとき`printX`関数内の`x`という識別子がどの変数`x`を参照するかは静的に決定されます。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 結論から言えば、`printX`関数中にある識別子`x`はグローバルスコープ（＊1）の変数`x`を参照します。 そのため、`printX`関数の実行結果は常に`10`となります。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: スコープチェーンの仕組みを思い出すと、この識別子`x`は次のように名前解決されてグローバルスコープの変数`x`を参照することがわかります。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '`printX`の関数スコープに変数`x`が定義されていない'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ひとつ外側のスコープ（グローバルスコープ）を確認する
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ひとつ外側のスコープに`const x = 10;`が定義されているので、識別子`x`はこの変数を参照する
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: つまり、`printX`関数中に書かれた`x`という識別子は、`run`関数の実行とは関係なく、静的に＊1で定義された変数`x`を参照することが決定されます。
    このように、どの識別子がどの変数を参照しているかを静的に決定する性質を**静的スコープ**と呼びます。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: この静的スコープの仕組みは`function`キーワードを使った関数宣言、メソッド、Arrow Functionなどすべての関数で共通する性質です。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[](#dynamic-scope)*[コラム] 動的スコープ*'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*JavaScriptは静的スコープです。 しかし、動的スコープという呼び出し元により識別子がどの変数を参照するかが変わる仕組みを持つ言語もあります。'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードは、動的スコープの動きを説明する**疑似的な言語のコード例**です。 識別子`x`が呼び出し元のスコープを参照する仕組みである場合には、次のような結果になります。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: このように関数呼び出し時に呼び出し元のスコープの変数を参照する仕組みを**動的スコープ**と呼びます。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptは変数や関数の参照先は静的スコープで決まるため、上記のような動的スコープではありません。 しかし、JavaScriptでも`this`という特別なキーワードだけは、呼び出し元によって動的に参照先が変わります。
    `this`というキーワードについては次の章で解説します。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[](#memory-management)*メモリ管理の仕組み*'
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*プログラミング言語は、使わなくなった変数やデータを解放する仕組みを持っています。 なぜなら、変数や関数を定義すると定義されたデータはメモリ上に確保されますが、ハードウェアのメモリは有限だからです。
    そのため、メモリからデータがあふれないように、必要なタイミングで不要なデータをメモリから解放する必要があります。'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 不要なデータをメモリから解放する方法は言語によって異なりますが、JavaScriptでは**ガベージコレクション**が採用されています。 ガベージコレクションとは、どこからも参照されなくなったデータを不要なデータと判断して自動的にメモリ上から解放する仕組みのことです。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptにはガベージコレクションがあるため、手動でメモリを解放するコードを書く必要はありません。 しかし、ガベージコレクションといったメモリ管理の仕組みを理解することは、スコープやクロージャーに関係するため大切です。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: どのようなタイミングでメモリ上から不要なデータが解放されるのか、具体的な例を見てみましょう。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 次の例では、最初に`"before text"`という文字列のデータがメモリ上に確保され、変数`x`はそのメモリ上のデータを参照しています。 その後、`"after
    text"`という新しい文字列のデータを作り、変数`x`はその新しいデータへ参照先を変えています。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: このとき、最初にメモリ上へ確保した`"before text"`という文字列のデータはどこからも参照されなくなっています。 どこからも参照されなくなった時点で不要になったデータと判断されるためガベージコレクションの回収対象となります。
    その後、任意のタイミングでガベージコレクションによって回収されてメモリ上から解放されます。^([2](#fn_2))
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 次にこのガベージコレクションと関数の関係性について考えてみましょう。 よくある誤解として「関数の中で作成したデータは、その関数の実行が終了したら解放される」というのがあります。
    関数の中で作成したデータは、その関数の実行が終了した時点で必ずしも解放されるわけではありません。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 具体的に、「関数の実行が終了した際に解放される場合」と「関数の実行が終了しても解放されない場合」の例をそれぞれ見ていきます。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: まずは、関数の実行が終了した際に解放されるデータの例です。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、`printX`関数の中で変数`x`を定義しています。 この変数`x`は、`printX`関数が実行されるたびに定義され、実行終了後にどこからも参照されなくなります。
    どこからも参照されなくなったものは、ガベージコレクションによって回収されてメモリ上から解放されます。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 次に、関数の実行が終了しても解放されないデータの例です。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、`createArray`関数の中で定義された変数`tempArray`は、`createArray`関数の返り値となっています。 この、関数で定義された変数`tempArray`は返り値として、別の変数`array`に代入されています。
    つまり、変数`tempArray`が参照している配列オブジェクトは、`createArray`関数の実行終了後も変数`array`から参照され続けています。
    ひとつでも参照されているならば、そのデータが自動的に解放されることはありません。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: つまり、関数の実行が終了したことと関数内で定義したデータの解放のタイミングは直接関係ないことがわかります。 そのデータがメモリ上から解放されるかどうかはあくまで、そのデータが参照されているかによって決定されます。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[](#why-closure-work)*クロージャーがなぜ動くのか*'
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*ここまでで「静的スコープ」と「メモリ管理の仕組み」について説明してきました。'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '静的スコープ: ある変数がどの値を参照するかは静的に決まる'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'メモリ管理の仕組み: 参照されなくなったデータはガベージコレクションにより解放される'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: クロージャーとはこの２つの仕組みを利用して、関数内から特定の変数を参照し続けることで関数が状態を持てる仕組みのことを言います。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 最初にクロージャーの例として紹介した`createCounter`関数の例を改めて見てみましょう。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: つまり次のような参照の関係が`myCounter`変数と`count`変数の間にはあることがわかります。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以确认`myCounter`变量和`count`变量之间存在以下引用关系：
- en: '`myCounter`変数は`createCounter`関数の返り値である`increment`関数を参照している'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myCounter`变量引用了`createCounter`函数的返回值`increment`函数'
- en: '`myCounter`変数は`increment`関数を経由して`count`変数を参照している'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myCounter`变量通过`increment`函数引用了`count`变量'
- en: '`myCounter`変数を実行した後も`count`変数への参照は保たれている'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myCounter`变量执行后，对`count`变量的引用仍然保持'
- en: '`myCounter` → `increment` → `count`'
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`myCounter` → `increment` → `count`'
- en: '`count`変数を参照するものがいるため、`count`変数は自動的に解放されません。 そのため`count`変数の値は保持され続け、`myCounter`変数を実行するたびに1ずつ大きくなっていきます。'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有引用`count`变量的存在，`count`变量不会自动释放。 因此，`count`变量的值会持续保持，并且每次执行`myCounter`变量时都会增加1。
- en: このように`count`変数が自動解放されずに保持できているのは「`increment`関数内から外側の`createCounter`関数スコープにある`count`変数を参照している」ためです。
    このような性質のことを**クロージャー**（関数閉包）と呼びます。クロージャーは「静的スコープ」と「参照され続けている変数のデータが保持される」という2つの性質によって成り立っています。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`count`变量可以持续保持不释放的原因是因为它是“`increment`函数内部引用了外部`createCounter`函数作用域中的`count`变量”的结果。
    这种特性称为**闭包**。 闭包由“静态作用域”和“持续引用的变量数据被保持”的两个特性组成。'
- en: JavaScriptの関数は静的スコープとメモリ管理という2つの性質を常に持っています。そのため、ある意味ではすべての関数がクロージャーとなりますが、ここでは関数が特定の変数を参照することで関数が状態を持っていることを指します。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript函数始终具有静态作用域和内存管理的两个特性。 因此，在某种程度上，所有函数都是闭包，但这里指的是函数通过引用特定变量来持有状态。
- en: 先ほどの例では`createCounter`関数を実行するたびに、それぞれ`count`と`increment`関数が定義されます。そのため、`createCounter`関数を実行すると、それぞれ別々の`increment`関数が定義され、別々の`count`変数を参照します。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，每次执行`createCounter`函数时，都会定义一个新的`count`和`increment`函数。 因此，每次执行`createCounter`函数时，都会定义不同的`increment`函数，并且分别引用不同的`count`变量。
- en: 次のように`createCounter`関数を複数回呼び出してみると、別々の状態を持っていることが確認できます。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果多次调用`createCounter`函数，可以确认它们具有不同的状态。
- en: '[PRE36]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[](#closure-usecase)*クロージャーの用途*'
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#closure-usecase)*闭包的用途*'
- en: '*クロージャーはさまざまな用途に利用されますが、次のような用途で利用されることが多いです。'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*闭包可用于各种用途，但经常用于以下情况：'
- en: 関数に状態を持たせる手段として
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为使函数具有状态的手段
- en: 外から参照できない変数を定義する手段として
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为定义无法从外部引用的变量的手段
- en: グローバル変数を減らす手段として
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为减少全局变量的手段
- en: 高階関数の一部分として
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高阶函数的一部分包括
- en: これらはクロージャーの特徴でもあるので、同時に使われることがあります。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这些也是闭包的特征，因此它们经常一起使用。
- en: たとえば次の例では、`privateCount`という変数を関数の中に定義しています。 この`privateCount`変数は、外のグローバルスコープからは直接参照できません。
    外から参照する必要がない変数をクロージャーとなる関数に閉じ込めることで、グローバルに定義する変数を減らせています。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下示例中，我们定义了名为`privateCount`的变量。 这个`privateCount`变量无法直接从外部全局作用域引用。 通过将不需要从外部引用的变量封闭在闭包函数中，可以减少全局定义的变量。
- en: '[PRE37]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: また、関数を返す関数のことを高階関数と呼びますが、クロージャーの性質を使うことで次のように`n`より大きいかを判定する高階関数を作れます。 最初から`greaterThan5`という関数を定義すればよいのですが、高階関数を使うことで条件を後から定義できるなどの柔軟性があります。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，将函数作为返回值的函数称为高阶函数，通过利用闭包的特性，可以创建判断是否大于`n`的高阶函数。 虽然可以直接定义一个名为`greaterThan5`的函数，但使用高阶函数可以灵活地在之后定义条件等。
- en: '[PRE38]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: クロージャーは、変数が参照する値が静的に決まる静的スコープという性質とデータは参照されていれば保持されるという2つの性質によって成り立っています。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 闭包由函数具有静态作用域和数据持续引用保持的两个特性组成。
- en: JavaScriptには、関数を短く定義できるArrow Functionや高階関数であるArrayの`forEach`メソッドなどクロージャーを自然と利用しやすい環境があります。
    関数を理解する上ではクロージャーを理解することが大切です。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript提供了便于使用闭包的环境，例如可以通过Arrow Function或高阶函数如Array的`forEach`方法来定义函数。 在理解函数时，理解闭包是很重要的。
- en: '[](#closure-vs-function-object)*[コラム] 状態を持つ関数オブジェクト*'
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#closure-vs-function-object)*[专栏] 具有状态的函数对象*'
- en: '*JavaScriptでは関数はオブジェクトの一種です。オブジェクトであるため直接プロパティに値を代入できます。 そのため、クロージャーを使わなくても、次のように関数にプロパティとして状態を持たせることが可能です。'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*在JavaScript中，函数是一种对象。 作为对象，函数可以直接分配值给属性。 因此，即使不使用闭包，也可以通过以下方式为函数设置属性并保持状态。'
- en: '[PRE39]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: しかし、この方法は推奨されていません。なぜなら、関数の外から`count`プロパティを変更できるためです。 関数オブジェクトのプロパティは外からも参照でき、そのプロパティ値は変更できます。
    関数の中でのみ参照可能な状態を扱いたい場合には、それを強制できるクロージャーが有効です。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法并不推荐。 因为可以从函数外部更改`count`属性。 函数对象的属性可以从外部引用，并且其属性值可以更改。 如果想要处理仅在函数内部可引用的状态，那么强制使用闭包是有效的。
- en: '[PRE40]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[](#conclusion)*まとめ*'
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)*总结*'
- en: '*この章では関数を中心にスコープについて学びました。'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章主要学习了关于函数的作用域。'
- en: 関数やブロックはスコープを持つ
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数或块具有作用域
- en: スコープはネストできる
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作用域可以嵌套
- en: もっとも外側にはグローバルスコープがある
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最外层是全局作用域
- en: スコープチェーンは内側から外側のスコープへと順番に変数が定義されているか探す仕組みのこと
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作用域链是指从内部向外部作用域按顺序搜索变量定义的机制
- en: '`var`キーワードでの変数宣言や`function`での関数宣言では巻き上げが発生する'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`var`关键字声明变量或使用`function`声明函数时会发生提升
- en: クロージャーは静的スコープとメモリ管理の仕組みからなる関数が持つ性質
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闭包是由函数具有静态作用域和内存管理机制组成的性质
- en: ¹. この仕組みはTemporal Dead Zone（TDZ）と呼ばれます。 [↩](#reffn_1 "Jump back to footnote
    [1] in the text.")
  id: totrans-190
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. 这种机制被称为Temporal Dead Zone（TDZ）。 [↩](#reffn_1 "返回文本中的脚注 [1]")
- en: ². ECMAScriptの仕様ではガベージコレクションの実装の規定はないため、実装依存の処理となります。 [↩](#reffn_2 "Jump back
    to footnote [2] in the text.")****************
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ². 根据ECMAScript规范，垃圾收集的实现规范是没有的，因此它是依赖于具体实现的。 [↩](#reffn_2 "返回文本中的脚注 [2]")****************
