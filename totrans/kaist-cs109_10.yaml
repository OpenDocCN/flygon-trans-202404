- en: Sets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: A Set is a data type used to store a collection of elements. There is no order
    on the collection, and all the elements must be distinct (so you cannot have several
    copies of the same element in the set). In other words, a Set is the Kotlin implementation
    of a set in mathematics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是用于存储元素集合的数据类型。集合中没有顺序，并且所有元素必须是不同的（因此不能在集合中有多个相同元素的副本）。换句话说，集合是 Kotlin 中集合数学概念的实现。
- en: 'Sets appear naturally in many problems: Correctly spelled words form a set.
    Prime numbers form a set.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 集合在许多问题中自然而然地出现：拼写正确的单词形成一个集合。质数形成一个集合。
- en: 'Of course, we could simply use a list (or an array) to store a collection of
    items that forms a set. But this is not natural and often not efficient: A list
    is an indexed sequence, where the elements have an ordering, the same element
    can appear several times, and searching for an element can only be done by looking
    at all the elements one by one.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以简单地使用列表（或数组）来存储形成集合的项目集合。但这不是自然的，通常也不高效：列表是一个索引序列，其中元素具有排序，同一个元素可能出现多次，并且只能通过逐个查看所有元素来搜索元素。
- en: Fortunately, the Java standard library used by Kotlin provides for us a very
    nice Set data type. More precisely, Set is a parameterized data type, so there
    is a Set<Int>, Set<String>, and so on.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Kotlin 使用的 Java 标准库为我们提供了一个非常好的集合数据类型。更准确地说，集合是一个参数化数据类型，因此有 Set<Int>、Set<String>
    等。
- en: 'Let''s create some sets:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一些集合：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that for the empty set you have to indicate the type of elements, since
    Kotlin cannot deduce it from the elements themselves. You can also create sets
    by converting other collections (lists, arrays, ranges) using their toSet() method.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于空集，您必须指示元素的类型，因为 Kotlin 无法从元素本身推断出类型。您还可以通过使用它们的 toSet() 方法将其他集合（列表、数组、范围）转换为集合。
- en: 'Remember that it doesn''t matter in which order you write the elements, and
    an element cannot appear more than once:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您写入元素的顺序并不重要，一个元素不能出现多次：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The + and - operators can be used to add elements to a set, and to remove elements
    from a set. The result is a new set. It is okay to add elements already in the
    set, and to remove elements not in the set.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: + 和 - 运算符可用于向集合添加元素，并从集合中移除元素。结果是一个新的集合。可以添加已经在集合中的元素，也可以移除不在集合中的元素。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The standard mathematical operations of union, intersection, difference, and
    containment can (mostly) be implemented using Set methods:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 集合的标准数学操作——并集、交集、差集和包含关系——可以（大多数情况下）使用集合方法实现：
- en: \(|s|\) is s.size
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(|s|\) 是 s.size
- en: \(s \cup t\) is s + t
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(s \cup t\) 是 s + t
- en: \(s \setminus t\) is s - t
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(s \setminus t\) 是 s - t
- en: \(x \in s\)? is s.contains(x) or x in s
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(x \in s\)? 是 s.contains(x) 或 x in s
- en: \(s \subseteq t\)? is t.containsAll(s)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(s \subseteq t\)? 是 t.containsAll(s)
- en: \(s \cap t\) has no method, but can be implemented as s.filter { it in t }.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(s \cap t\) 没有方法，但可以实现为 s.filter { it in t }。
- en: 'Here are some examples:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些例子：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Sets support many other operations, some of which you are already familiar
    with from lists, for instance:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 集合支持许多其他操作，其中一些您已经从列表中熟悉，例如：
- en: s.size is the size of the set;
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.size 是集合的大小；
- en: s.isEmpty() is the same as s.size == 0;
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.isEmpty() 与 s.size == 0 相同；
- en: s.isNotEmpty() is the same as s.size != 0;
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.isNotEmpty() 与 s.size != 0 相同；
- en: s.max(), s.min(), s.sum() return the largest, smallest, and sum of elements
    in the set;
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.max()、s.min()、s.sum() 返回集合中元素的最大值、最小值和总和；
- en: s.sorted() returns a list with the elements of s in sorted order;
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.sorted() 返回一个 s 中元素按排序顺序排列的列表；
- en: s.joinToString() returns a string with all elements of s concatenated together
    (with the same options as for lists);
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.joinToString() 返回一个将 s 的所有元素连接在一起的字符串（具有与列表相同的选项）；
- en: s.toList() and s.toMutableList() return a (mutable) list with the same elements
    as the set.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.toList() 和 s.toMutableList() 返回与集合相同的元素的（可变）列表。
- en: As a first example of using sets, here is a simple spell checker. It makes use
    of the file [words.txt](code/words.txt), containing 113809 English words, one
    per line.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为使用集合的第一个示例，这里是一个简单的拼写检查器。它使用了包含113809个英语单词的文件 [words.txt](code/words.txt)，每行一个单词。
- en: We read the file and immediately convert it to a set. Then we allow the user
    to enter words from the terminal. We check if the word is in the set of correctly
    spelled words, and report this back ([spell.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/13-sets/spell.kts)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取文件并立即将其转换为集合。然后我们允许用户从终端输入单词。我们检查单词是否在拼写正确的单词集合中，并报告这一点（[spell.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/13-sets/spell.kts)）。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is an example run:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例运行：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You could also use sets to measure the similarity between two texts (for instance
    to classify documents on the web). Consider the set of words of each text, and
    compare the size of their union with the size of their intersection.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用集合来衡量两个文本之间的相似性（例如对网络文档进行分类）。考虑每个文本的单词集合，并比较它们的并集大小与交集大小。
- en: Mutable sets
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 可变集合
- en: 'All the sets we have looked at above are immutable: There is no way to change
    the contents of a Set. Set operations like union and intersection actually return
    a new set object.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面看到的所有集合都是不可变的：没有办法改变集合的内容。集合操作如并集和交集实际上会返回一个新的集合对象。
- en: 'Sometimes it is more efficient or convenient to use a mutable set (but remember
    that these are more dangerous to use). The Java standard library provides a mutable
    set data type, called MutableSet in Kotlin. We add elements with add, and remove
    them with remove:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有时使用可变集合更有效或更方便（但请记住这些更危险）。Java标准库提供了一个可变集合数据类型，在Kotlin中称为MutableSet。我们使用add添加元素，并使用remove删除元素：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A classic application of sets is the Sieve of Erathosthenes to compute prime
    numbers. Here is one implementation ([sieve.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/13-sets/sieve.kts)):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 集合的一个经典应用是埃拉托斯特尼筛法来计算质数。这里是一个实现（[sieve.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/13-sets/sieve.kts)）：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And the output of a run:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 运行的输出：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There are many other applications of sets. For instance, when finding your way
    in a maze, you could store the positions already seen in a set. Similarly, when
    implementing a computer game, you could store the game positions already evaluated
    in a set.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 集合还有许多其他应用。例如，在迷宫中找路时，你可以将已经看到的位置存储在一个集合中。同样地，在实现电脑游戏时，你可以将已经评估过的游戏位置存储在一个集合中。
