- en: 'Chapter 5: Vectors and Geometry in Two and Three Dimensions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We examine various descriptions of a plane in three dimensions and of a line
    in two and three dimensions and the use of vectors in describing interrelations
    between points lines and planes. We also examine properties of the vector triple
    product.
  prefs: []
  type: TYPE_NORMAL
- en: Topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 5.1  [Some Questions](section01.html)
  prefs: []
  type: TYPE_NORMAL
- en: '5.2  [Representations of a Line or Plane: Preliminary Remarks](section02.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 5.3  [Representations of a Line in Two and Three Dimensions](section03.html)
  prefs: []
  type: TYPE_NORMAL
- en: 5.4  [Representations of a Plane in 3 Dimensions](section04.html)
  prefs: []
  type: TYPE_NORMAL
- en: 5.5  [Projections and Applications](section05.html)
  prefs: []
  type: TYPE_NORMAL
- en: 5.6  [Vector Triple Products](section06.html)
  prefs: []
  type: TYPE_NORMAL
- en: 5.7  [Review of Facts about Vectors and Planes](section07.html)
  prefs: []
  type: TYPE_NORMAL
- en: 5.1 Some Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are some questions we will address.
  prefs: []
  type: TYPE_NORMAL
- en: How do we describe a line in 2 dimensions or a line or plane in 3?
  prefs: []
  type: TYPE_NORMAL
- en: How can you find a point on a line or in a plane?
  prefs: []
  type: TYPE_NORMAL
- en: The distance between a point and a plane, or� a point and a line?
  prefs: []
  type: TYPE_NORMAL
- en: The distance between two skew lines in 3D space?
  prefs: []
  type: TYPE_NORMAL
- en: The distance between parallel lines?
  prefs: []
  type: TYPE_NORMAL
- en: The projection of a point onto a line or plane?
  prefs: []
  type: TYPE_NORMAL
- en: All of these can be answered by appropriate definition and manipulation of vectors.
  prefs: []
  type: TYPE_NORMAL
- en: '5.2 Representations of a Line or Plane: Preliminary Remarks'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A single linear equation can be used to solve for one variable in terms of the
    others. It reduces the dimension of the set of its solutions by 1.
  prefs: []
  type: TYPE_NORMAL
- en: Thus **the points in a plane in 3 dimensions will be the solutions of one� linear
    equation. In two dimensions one linear equation determines a line,** while **in
    three dimensions two equations are needed to determine a line.**
  prefs: []
  type: TYPE_NORMAL
- en: A linear equation of the form ax + by + cz = d can be written as the dot product
    **v**![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)**r** = d where **v**
    is the vector (a, b, c) and **r** is (x, y, z).
  prefs: []
  type: TYPE_NORMAL
- en: Thus solutions to it all have the same value of their component in the direction
    of **v**, and are not determined in directions **perpendicular to, normal to**,
    or **orthogonal to v** (all these words mean the same thing). Thus **v** is normal
    to a vector pointing from one solution to another.
  prefs: []
  type: TYPE_NORMAL
- en: '**A line can be characterized by giving the coordinates of two points on it**
    (in any space) and a plane **by giving the coordinates of three points that don''t
    all lie on a single line.**'
  prefs: []
  type: TYPE_NORMAL
- en: Further we can describe **a line by giving any point on it, and a vector that
    points in its direction.**
  prefs: []
  type: TYPE_NORMAL
- en: Likewise we can describe the **points on a plane by giving a point and two linearly
    independent vectors starting from that point that lead to other points in the
    plane.**
  prefs: []
  type: TYPE_NORMAL
- en: We now examine the relations between the various characterizations of lines
    and planes.
  prefs: []
  type: TYPE_NORMAL
- en: '**5.3 Representations of a Line in Two and Three Dimensions**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Two points P[1] and P[2] on a line, L, determine L.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**L can be described parametrically as the set of points with coordinates those
    of P[1] + s * (P[2] - P[1]) for some number s.**'
  prefs: []
  type: TYPE_NORMAL
- en: (**P[2] - P[1]) is a vector which points in the direction of L.**
  prefs: []
  type: TYPE_NORMAL
- en: In two dimensions so that the vectors here are 2-vectors, there is only one
    direction perpendicular to L, and that direction can be obtained by switching
    the coordinates of (**P[2] - P[1])** �and changing one sign, (thus (7, -4) is
    perpendicular to (4, 7)).
  prefs: []
  type: TYPE_NORMAL
- en: With **N** the perpendicular vector, the equation of the line becomes **N****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)r
    = N****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)P[1].**
  prefs: []
  type: TYPE_NORMAL
- en: '**We do this out explicitly� L consists of the points obeying**'
  prefs: []
  type: TYPE_NORMAL
- en: x� = P[1x]� + s * (P[2x] - P[1x] )
  prefs: []
  type: TYPE_NORMAL
- en: y� = P[1y]� + s * (P[2y] - P[1y] )
  prefs: []
  type: TYPE_NORMAL
- en: and the equation for L is
  prefs: []
  type: TYPE_NORMAL
- en: (P[2y] - P[1y] ) x - (P[2x] - P[1x] )y = (P[2y] - P[1y] )P[1x] - (P[2x] - P[1x]
    )P[1y]
  prefs: []
  type: TYPE_NORMAL
- en: which when solved for y is
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cb4337e5f947e76d0cc19b025938b8bc.jpg) for some constant C.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The ratio ![](../Images/e5519d57029d220af7bac759fbf9507b.jpg), the coefficient
    of x in the equation for the line, is the difference of y coordinates of the two
    points divided by the difference in x coordinates.** It is called **the slope**
    of the **line L.**'
  prefs: []
  type: TYPE_NORMAL
- en: The constant C is called the y-intercept of the line L. It is the value of y
    on L where L meets the y axis.
  prefs: []
  type: TYPE_NORMAL
- en: <applet code="SlopeOfLine" codebase="../applets/" archive="slopeOfLine.jar,
    mk_lib.jar, parser_math.jar, jcbwt363.jar" width="760" height="450"></applet>
  prefs: []
  type: TYPE_NORMAL
- en: In three dimensions, a line is determined by two equations. You can describe
    it as above parametrically (though now all points and vectors have three components),
    but you must find two vectors normal to **(P[2] - P[1]**) to find equations that
    characterize it. You have infinite choice in doing so, but two convenient choices
    are
  prefs: []
  type: TYPE_NORMAL
- en: '**i****![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)( P[2] - P[1]) **
    and **j![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)(P[2] - P[1])**'
  prefs: []
  type: TYPE_NORMAL
- en: and you can require that the dot product of **each** of thesewith **r** (recall
    **r** = (x, y, z)) is what it is with **P[1].** This gives you two equations which
    together determine the line.
  prefs: []
  type: TYPE_NORMAL
- en: To find a point on a line from equations you fix one coordinate arbitrarily
    and solve the two equations for the other two coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: The following applet allows you two enter two arbitrary points. It then shows
    you the line in 3 space that your points determine, and the parametric representation
    of that line.
  prefs: []
  type: TYPE_NORMAL
- en: <applet code="LinesInSpace" codebase="../applets/" archive="linesInSpace.jar,go.jar,goText.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises 5.1 Find two equations for the default line in this applet. Then
    choose two random points, and find two equations for the line they lie on.**'
  prefs: []
  type: TYPE_NORMAL
- en: 5.4 Representations of a Plane in 3 Dimensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now address the question: **what is the relation between the different ways
    to describe a plane --- by points, one point and a vector, or by an equation?**'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose the points **P[1], P[2,] P[3]** lie in plane Q and they are not all
    on a line.
  prefs: []
  type: TYPE_NORMAL
- en: Then the vectors **P[2] - P[1]**, and **P[3] - P[1]** have direction in Q and
    an arbitrary point in Q will have the coordinates of **P[1]** + s (**P[2] - P[1])
    +** t **(P[3] - P[1]**) for some pair of values (s, t).
  prefs: []
  type: TYPE_NORMAL
- en: This is called a **"parametric" representation** of the plane with parameters
    s and t.
  prefs: []
  type: TYPE_NORMAL
- en: (s and t can be considered the components of the point in the plane in the basis
    given by (**P[2] - P[1])** and **(P[3] - P[1])** with origin P[1].)
  prefs: []
  type: TYPE_NORMAL
- en: You can compute a normal to Q by taking the cross product (**P[2] - P[1])![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)(P[3]
    - P[1]).**
  prefs: []
  type: TYPE_NORMAL
- en: We abbreviate by defining
  prefs: []
  type: TYPE_NORMAL
- en: '**N** = (**P[2] - P[1])![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)(P[3]
    - P[1]) = P[2]![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)P[3] + P[3]![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)P[1]
    +P[1]![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)P[2]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**and so the equation of the plane becomes**'
  prefs: []
  type: TYPE_NORMAL
- en: '**N![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)****P = N![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)P[1]**'
  prefs: []
  type: TYPE_NORMAL
- en: where P = (x, y, z).
  prefs: []
  type: TYPE_NORMAL
- en: You can write this out explicitly as
  prefs: []
  type: TYPE_NORMAL
- en: N[x] x + N[y] y + N[z] z = (N, P[1]) = (N[x]P[1x] + N[y]P[1y] + N[z]P[1z])
  prefs: []
  type: TYPE_NORMAL
- en: It is common, but not necessary **to "normalize" N,** that is to replace it
    by **n** with **![](../Images/ed77443cc42a075361b42919c78a42c1.jpg)**
  prefs: []
  type: TYPE_NORMAL
- en: In practice, planes are usually described by a normal vector, like **n** here,
    and by a point in it.
  prefs: []
  type: TYPE_NORMAL
- en: We started with three points, and obtained a parametric representation of the
    plane from them. We then found an equation describing the plane from that representation.
  prefs: []
  type: TYPE_NORMAL
- en: If we can go from the description of Q by this equation back to three points
    in Q, we will be able to go all the way around the circle and find any representation
    of Q from any other.
  prefs: []
  type: TYPE_NORMAL
- en: There are an infinite number of points in Q and choosing three of them requires
    making arbitrary decisions to single out three of them.
  prefs: []
  type: TYPE_NORMAL
- en: If **N** has all three of its components non-zero we can set each pair of variables
    to zero and solve for the third one. Then the three points will be
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab5750cf05b50356fcfb499b24049c39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: which are the points at which the plane meets the three axes.
  prefs: []
  type: TYPE_NORMAL
- en: From these points you can go around the circle again, and determine any representation
    of Q.
  prefs: []
  type: TYPE_NORMAL
- en: In the applet here you can enter three arbitrary points, and it will find and
    picture the plane, show **N, (N, P[1])**, and the parametric representation of
    points on it. You can do all of these things except making the picture, yourself.
  prefs: []
  type: TYPE_NORMAL
- en: <applet code="PlanesInSpace" codebase="../applets/" archive="planesInSpace.jar,go.jar,goText.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5.2 Write down the equation for the default plane in this applet, and find
    the three points in that plane which have two 0 coordinates each.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5.3 Start with three random points and go through this procedure to find
    N and the points where the plane meets the axes.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5.4 Set up a spreadsheet that does this whenever N has all its components
    non-zero.**'
  prefs: []
  type: TYPE_NORMAL
- en: When N[z] is not zero, we can solve the equation of the plane, **N****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)P
    = N****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)P[1]** for z in terms
    of x and y, getting
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/34a12109c75457ca801ea6a74c3969a5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**The coefficients of x and y here are particularly interesting to us.** If
    you fix y, then our three dimensional space becomes a plane. ![](../Images/cc444bc59ac65bca1367fafdfa013900.jpg)
    then represents **the slope of the line that is the intersection of our plane
    and the plane described by the equation: y = constant.** The same statement holds
    after interchanging x and y in this one.'
  prefs: []
  type: TYPE_NORMAL
- en: '**5.5 Find the two slopes (with y fixed and x fixed) h for the planes you describe
    in exercises 5.3 and 5.4.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5.5 Projections and Applications**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you drop a perpendicular from a point to a line or plane, the point you reach
    on that line or plane is called **the projection of the point onto the line or
    plane.**
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have a point **P'**, a line L, and a plane Q. Suppose L is described
    by two points, **P[1]** and **P[2]**, on it, and Q is described by a normal vector
    **N** and a point **P[3]** on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In applying vector concepts to geometric situations, there is one basic fact
    that is fairly simple and extremely useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The projection of a vector A on another vector B is given by ![](../Images/5c0321694f51a8f00fa7a9ac0915b5f2.jpg)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Why is this so?**'
  prefs: []
  type: TYPE_NORMAL
- en: Because it is a vector in the direction of B whose length is the length of A
    multiplied by the cosine of the angle between A and B, which is exactly what this
    projection is.
  prefs: []
  type: TYPE_NORMAL
- en: '**How can we use this fact?**'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we want to find **the projection of P' onto L.** We can write P' as
    **P' - P[1] + P[1],** with **P' - P[1]** a vector. If we project **P' - P[1]**
    onto **P[2] - P[1]**, then (**P[1]** + this projection) will be on L and is the
    point we want.
  prefs: []
  type: TYPE_NORMAL
- en: The answer is therefore
  prefs: []
  type: TYPE_NORMAL
- en: '**![](../Images/eefb24be62c7e31729e8b318c87980f1.jpg)**'
  prefs: []
  type: TYPE_NORMAL
- en: If instead we want the **distance of P' from L** we can subtract this point
    from P'. The length of the resulting vector is our answer.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we want **the distance of P' to Q**. This will be the length of the
    projection of **P[3] - P'** on **N.**
  prefs: []
  type: TYPE_NORMAL
- en: The projection of P' onto Q can be obtained by adding the projection of **P[3]
    - P'** on **N** to P'.
  prefs: []
  type: TYPE_NORMAL
- en: The distance between two lines is just the length of the projection of a vector
    between a point on each on the cross product of vectors in the direction of each.
    This does not work if the two lines are parallel, since the cross product needed
    here will be the 0 vector.
  prefs: []
  type: TYPE_NORMAL
- en: If the lines are parallel, you can form a vector from a point on one line to
    a point on the other, project it on a vector in the direction of the lines, and
    subtract this projection from it. The resulting vector will be normal to the lines
    and its length will be the desired distance.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, if you know how to project one vector on another, and you keep your wits
    about you, you can answer all the geometric questions raised in Section 5.1.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5.6 Draw an appropriate picture and find a formula for calculating each of
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then calculate the answer with the following input:'
  prefs: []
  type: TYPE_NORMAL
- en: P' = (1, 2, 3), P[1] = (1, 0, 0), P[2] = (1, 1, 1), P[3] = (-1, 2, -1), N =
    (2, 1, 4) , P[1]' = (-1, 4, 3), P[2]' = (2, 3, 4), P[1]" = (6, 0, 3), P[2]" =
    (6, 2, 6).**
  prefs: []
  type: TYPE_NORMAL
- en: '**5.7\. The projection of a point P'' onto a line L (containing P[1] and P[2]).**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5.8 The projection of a point P'' onto a plane Q (having normal N and containing
    P[3]).**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5.9 The distance between P'' and Q.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5.10 The distance between P'' and L.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5.11 The distance between two skew lines in 3 space, L and L'' (containing
    P[1]'' and P[2]'').**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5.12 The distance between two parallel lines in 3 space L and L" (containing
    P[1]"and P[2]").**'
  prefs: []
  type: TYPE_NORMAL
- en: 5.6 Vector Triple Products
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The volume of a parallelepiped with sides **A**, **B** and **C** is the area
    of its base (say the parallelogram with area |**B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)C**|
    ) multiplied by its altitude, the component of **A** in the direction of **B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)C.**
    This is the magnitude of **A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)C;**
    but it is also the magnitude of the determinant of the matrix with columns **A**,
    **B** and **C**, so these linear functions of the vectors here are the same up
    to sign. The usual sign convention gives
  prefs: []
  type: TYPE_NORMAL
- en: '**A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)(B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)C)
    = det(A, B, C)**'
  prefs: []
  type: TYPE_NORMAL
- en: This product is not changed by cyclically permuting the vectors (for example
    to **B**, **C**, **A**) or by reversing the order of the factors in the dot product.
  prefs: []
  type: TYPE_NORMAL
- en: We can deduce then that **A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)C
    = C![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)A![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)B
    =** **A![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)B![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)C.**
    In words, **we can switch the dot and cross product without changing anything
    in this entity.** (In either formula of course you must take the cross product
    first.) This product, like the determinant, changes sign if you just reverse the
    vectors in the cross product.
  prefs: []
  type: TYPE_NORMAL
- en: The vector triple product, **A![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****(B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****C**)
    is a vector, is normal to **A** and normal to **B****![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)C**
    which means it is in the plane of **B** and **C**. And it is linear in all three
    vectors.
  prefs: []
  type: TYPE_NORMAL
- en: We can deduce it is a multiple of **B** that is linear in **A** and **C** plus
    a multiple of **C** that is linear in **A** and **B**, with the condition that
    it is normal to **A**.
  prefs: []
  type: TYPE_NORMAL
- en: Any multiple of **B(A****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)C)
    - C(A****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)B)**�� will obey all
    these conditions.
  prefs: []
  type: TYPE_NORMAL
- en: What multiple is **A![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****(B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****C**)?
  prefs: []
  type: TYPE_NORMAL
- en: Suppose **A![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)(B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)C**)
    **= q(B(A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)C) - C(A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)B))**
    holds.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier we saw that the square of the area of a parallelogram with sides **A**
    and **B** can be written either as **(A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)A)(
    B![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)B) - (A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)B)(
    A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)B)** or (**B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****A)****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)(B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****A)**.
    By interchanging the dot and first cross product on the right here you can rewrite
    this equality as
  prefs: []
  type: TYPE_NORMAL
- en: (**B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****A)****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)(B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****A)
    = B****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)(A![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****(B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****A))
    =(A****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)A)( B****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)B)
    ) - (A****![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)B)( A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)B)**
  prefs: []
  type: TYPE_NORMAL
- en: If we identify **A** with **C** in **A![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)(B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)C)**
    and take the dot product of **A![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****(B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****A)**
    with **B** we find q = 1, and we get
  prefs: []
  type: TYPE_NORMAL
- en: '**A![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)****(B![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)C**)�
    = **B(A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)C) - C(A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)B)**'
  prefs: []
  type: TYPE_NORMAL
- en: '*This is sometimes called the **back cab** rule to make it easier to remember
    the appropriate signs. When using this name remember that the parentheses here
    are all as far back as possible in this expression The easiest way to get the
    signs right here without remembering anything is to guess a sign and then check
    it on the case **A = i = C, B = j.***'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 5.13 Suppose we have a vector A in three dimensions and an unknown
    vector v, but we do know A![](../Images/58f20e2afdd36d0ec9500430097f29f8.jpg)v
    and A![](../Images/7e602c591f306ccd58a2921a2a2138aa.jpg)v. Can we find v? YES!
    How?**'
  prefs: []
  type: TYPE_NORMAL
- en: 5.7 Review of Facts about Vectors and Planes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a listing of the key facts you should feel comfortable with about these
    things.
  prefs: []
  type: TYPE_NORMAL
- en: Vectors are added in each component separately.
  prefs: []
  type: TYPE_NORMAL
- en: You multiply a vector by a number by multiplying every component of the vector
    by that number.
  prefs: []
  type: TYPE_NORMAL
- en: The scalar (dot) product is linear in each argument (so you can use the distributive
    law on it).
  prefs: []
  type: TYPE_NORMAL
- en: The scalar product is computed by multiplying like components together and summing.
  prefs: []
  type: TYPE_NORMAL
- en: The scalar product is the product of the length of both vector arguments with
    the cosine of the angle between the vectors.
  prefs: []
  type: TYPE_NORMAL
- en: The determinant is linear in each of its rows and in each of its columns, and
    its magnitude is the area of the parallelogram or parallelepiped determined by
    its columns (and also determined by its rows).
  prefs: []
  type: TYPE_NORMAL
- en: The determinant changes sign if two of its columns are interchanged.
  prefs: []
  type: TYPE_NORMAL
- en: As a function of a single element a[ij], the determinant has the form det(A)
    = ra[ij] + s; (it is a linear function with an inhomogeneous term)
  prefs: []
  type: TYPE_NORMAL
- en: The coefficient r is the ij-**cofactor:** the determinant of the matrix obtained
    by removing i-th column and j-th row from A, multiplied by (-1)^(i+j).
  prefs: []
  type: TYPE_NORMAL
- en: The determinant can be evaluated by row reduction or by expanding on a column
    or row.
  prefs: []
  type: TYPE_NORMAL
- en: The vector product of two vectors is the vector obtained by making their components
    the first two columns of a matrix with **i, j, k** the third column, and taking
    its determinant.
  prefs: []
  type: TYPE_NORMAL
- en: The vector product is perpendicular to its vector factors and its magnitude
    in 3 dimensions is the area of their parallelogram. It is also linear in its factor
    vectors.
  prefs: []
  type: TYPE_NORMAL
- en: A line in two dimensions can be described parametrically or by a linear equation.
  prefs: []
  type: TYPE_NORMAL
- en: A plane in three dimensions can be described by an equation or its points can
    be determined by a formula having two linear parameters.
  prefs: []
  type: TYPE_NORMAL
- en: If the equation of a plane is az + by + cx = d, its equation can also be written
    as ![](../Images/ff66fb8b8a956cec3f203556e1f90c11.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: The quantities ![](../Images/059818f0d3281cf1e349f4283979b658.jpg) are called
    the slopes of z in the x and y directions respectively. In two dimensions there
    is no z and the slope is similarly ![](../Images/3237fbb5515d4a69b1cd8bc63b1ce444.jpg).
  prefs: []
  type: TYPE_NORMAL
