["```\nprint(read-number(\"First number\")\n  + read-number(\"Second number\"))\n```", "```\nread-number(\"First number\")\n```", "```\nprint(<the result from the first interaction>\n  + read-number(\"Second number\"))\n```", "```\nfun(v1):\n  print(v1 + read-number(\"Second number\"))\nend\n```", "```\nread-number-suspend(\"First number\",\n  fun(v1):\n    print(v1 + read-number(\"Second number\"))\n  end)\n```", "```\nfun(v2):\n  print(v1 + v2)\nend\n```", "```\nread-number-suspend(\"First number\",\n  fun(v1):\n    read-number-suspend(\"Second number\",\n      fun(v2):\n        print(v1 + v2)\n      end)\n  end)\n```", "```\nread-number-stateless(\"First number\", prog-1)\n\nfun prog-1(v1):\n  read-number-stateless(\"Second number\", prog-2)\nend\n\nfun prog-2(v2):\n  print(v1 + v2)\nend\n```", "```\nvar cookie = \"dummy initial value\"\n\nread-number-suspend(\"First number\",\n  fun(v1):\n    cookie := v1\n    read-number-suspend(\"Second number\",\n      fun(v2):\n        print(cookie + v2)\n      end)\n  end)\n```", "```\nvar cookie = \"dummy initial value\"\n\nread-number-stateless(\"First number\", prog-1)\n\nfun prog-1(v1):\n  cookie := v1\n  read-number-stateless(\"Second number\", prog-2)\nend\n\nfun prog-2(v2):\n  print(cookie + v2)\nend\n```", "```\nfun icps(e):\n  id-cps = fdC(\"v\", idC(\"v\"))\n  interp(appC(cps(e), id-cps), mt-env)\nend\n```", "```\nicps(plusC(numC(5), appC(quad, numC(3)))) is numV(17)\nicps(multC(appC(c5, numC(3)), numC(4))) is numV(20)\nicps(plusC(numC(10), appC(c5, numC(10)))) is numV(15)\n```", "```\ncps(plusC(numC(1), numC(2)))\n```", "```\nfdC(\"k\",\n  appC(fdC(\"k\",\n      appC(idC(\"k\"), numC(1))),\n    fdC(\"l-v\",\n      appC(fdC(\"k\",\n          appC(idC(\"k\"), numC(2))),\n        fdC(\"r-v\",\n          appC(idC(\"k\"),\n            plusC(idC(\"l-v\"), idC(\"r-v\"))))))))\n```", "```\nf1 =\n  lam(k):\n    (lam(shadow k):\n        k(1)\n      end)(lam(l-v):\n        (lam(shadow k):\n              k(2)\n          end)(lam(r-v):\n              k(l-v + r-v)\n          end)\n      end)\n  end\n```", "```\ncheck:\n  f1(lam(x): x end) is 3\nend\n```", "```\nf2 =\n  lam(k):\n    (lam(k1):\n        k1(1)\n      end)(lam(l-v):\n        (lam(k2):\n            k2(2)\n          end)(lam(r-v):\n            k(l-v + r-v)\n          end)\n      end)\n  end\n\ncheck:\n  f2(lam(x): x end) is 3\nend\n```", "```\n(lam(k1): k1(1) end)(...)\n```", "```\n| read-numC(p :: ExprC)\n| read-num-webC(p :: ExprC, k :: ExprC)\n```", "```\n| read-numC(p) =>\n  fdC(\"k\",\n    appC(cps(p),\n      fdC(\"p-v\",\n        read-num-webC(idC(\"p-v\"), idC(\"k\")))))\n```", "```\nvar web-continuation = \"nothing here yet\"\n```", "```\n| read-num-webC(p, k) =>\n  prompt = num-to-string(interp(p, nv).n)\n  cont = interp(k, nv)\n  print('Web interaction: ' + prompt)\n  web-continuation := cont\n  raise('Program halted waiting for user input')\n```", "```\nicps(plusC(read-numC(numC(1)), read-numC(numC(2))))\n```", "```\nfun run-wc(n):\n  wc = web-continuation\n  interp(appC(wc.f, numC(n)), wc.e)\nend\n```", "```\n| read-numC(p) =>\n  interp(p, nv,\n    lam(p-v):\n      prompt = num-to-string(p-v.n)\n      print('Web interaction: ' + prompt)\n      web-continuation := k\n      raise('Program halted waiting for user input')\n    end)\n```", "```\nfun run-wc(n):\n  web-continuation(numC(n))\nend\n```", "```\nplusC(read-numC(numC(1)), read-numC(numC(2)))\n```"]