- en: what's the RPC?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是RPC？
- en: what's the RPC?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是RPC？
- en: RPC（Remote Procedure CallProtocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。
  id: totrans-2
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: RPC（Remote Procedure CallProtocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。
- en: 简单来说rpc就是client在不知道任何底层实现的情况下，可以直接调用server的函数方法；而server也可以直接调用client的函数。
  id: totrans-3
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 简单来说rpc就是client在不知道任何底层实现的情况下，可以直接调用server的函数方法；而server也可以直接调用client的函数。
- en: 百度给出的流程图：
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百度给出的流程图：
- en: '![](18d8bc3eb13533fadd93e964a9d3fd1f41345b56.jpg)'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_IMG
  zh: '![](18d8bc3eb13533fadd93e964a9d3fd1f41345b56.jpg)'
- en: 简单了解了什么是rpc，下面我就来在我们的server和client来实现rpc的功能。
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 简单了解了什么是rpc，下面我就来在我们的server和client来实现rpc的功能。
- en: RPC on my server
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我的服务器上的RPC
- en: RPC on my server
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我的服务器上的RPC
- en: 下面是之前我们给出的tcpserver中的一个函数，用来处理连接
  id: totrans-9
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 下面是之前我们给出的tcpserver中的一个函数，用来处理连接
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: build_class之前我们说过，这是我们用来处理数据的protocol，那么rpc的逻辑流程应该都写在这里。现在假设client来调用一个函数sum(x,
    y)， 那么在我们server中就要有这样一个函数。
  id: totrans-11
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: build_class之前我们说过，这是我们用来处理数据的protocol，那么rpc的逻辑流程应该都写在这里。现在假设client来调用一个函数sum(x,
    y)， 那么在我们server中就要有这样一个函数。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 但是客户端来调用，我们如何知道server有这样一个函数呢？这就需要我们提前去处理一下，将希望可以被client调用的函数存起来。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是客户端来调用，我们如何知道server有这样一个函数呢？这就需要我们提前去处理一下，将希望可以被client调用的函数存起来。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 比如我们可以写这样一个函数，作为装饰器，来将被装饰的函数存起来(HANDLERS), 这样在client调用sum的时候，我们就可以知道，server中是否存在sum这个函数。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 比如我们可以写这样一个函数，作为装饰器，来将被装饰的函数存起来(HANDLERS)，这样在client调用sum的时候，我们就可以知道，server中是否存在sum这个函数。
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 这样函数被装饰起来以后，我们就可以找到这个函数了。当我们知道存在sum这个函数的时候，我就可以从HANDLERS中讲sum取出来，`sum = HANDLERS.get('sum')`,
    然后我们讲x，y两个参数传进去，算出结果，再将结果写回conn中，返回给client。至此，客户端调用服务器函数的大致流程就说完了。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这样函数被装饰起来以后，我们就可以找到这个函数了。当我们知道存在sum这个函数的时候，我就可以从HANDLERS中取出sum，`sum = HANDLERS.get('sum')`，然后我们将x，y两个参数传进去，算出结果，再将结果写回conn中，返回给client。至此，客户端调用服务器函数的大致流程就说完了。
- en: RPC on my client
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我的客户端上的RPC
- en: RPC on my client
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我的客户端上的RPC
- en: 服务器调用client函数也是一样的道理，client中也要和服务器一样，将想要被调用的函数收集起来。当然这个时候，服务器还要做一件事情，就是将客户端的tcp连接通过某种条件储存起来，这样才知道我想去调用哪个client的函数。
  id: totrans-20
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 服务器调用client函数也是一样的道理，client中也要和服务器一样，将想要被调用的函数收集起来。当然这个时候，��务器还要做一件事情，就是将客户端的tcp连接通过某种条件储存起来，这样才知道我想去调用哪个client的函数。
- en: 现在有很多client来连接我们server，以游戏为例，每个玩家都有自己对应的uid，那么我们就可以将conn根据uid储存起来。`client_conn
    = {uid:conn, ..}` 这样，我们想给哪位玩家发送消息或者做一些其他的事情，就很容易了，只要客户端写好函数功能，我们只要将函数名字，以及对应参数，通过client_conn找到对应玩家的tcp连接，然后将上述数据发送过，那么当客户端计算出结果以后，我们通过一个回调函数，就可以将结果return到服务器了。
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 现在有很多client来连接我们server，以游戏为例，每个玩家都有自己对应的uid，那么我们就可以将conn根据uid储存起来。`client_conn
    = {uid:conn, ..}` 这样，我们想给哪位玩家发送消息或者做一些其他的事情，就很容易了，只要客户端写好函数功能，我们只要将函数名字，以及对应参数，通过client_conn找到对应玩家的tcp连接，然后将上述数据发送过，那么当客户端计算出结果以后，我们通过一个回调函数，就可以将结果return到服务器了。
- en: 现有的rpc框架很多，比如[msgpack-python](https://github.com/msgpack-rpc/msgpack-rpc-python),
    这里有很多语言的rpcSimpleServer，感兴趣的同学可以参考一下。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的rpc框架很多，比如[msgpack-python](https://github.com/msgpack-rpc/msgpack-rpc-python)，这里有很多语言的rpcSimpleServer，感兴趣的同学可以参考一下。
