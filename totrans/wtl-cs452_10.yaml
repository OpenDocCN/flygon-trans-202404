- en: Lecture 10 - Name Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due date for assignment 1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next week's classes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assignment 2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: due date
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: what you do
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Send/Receive/Reply
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sequence of States
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two cases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Send before Receive
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '| SenderAction | SenderState | ReceiverAction | ReceiverState | Comments |'
  prefs: []
  type: TYPE_TB
- en: '|  | active |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Send | RCV_BL |  |  | sender added to receiver''s sendQ |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |  | active |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | RPL_BL | Receive | ready | request copiedsender deleted from receiver''s
    sendQ |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |  | active | service performed |'
  prefs: []
  type: TYPE_TB
- en: '|  | ready | Reply | ready | reply copied |'
  prefs: []
  type: TYPE_TB
- en: Receive before Send
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '| SenderAction | SenderState | ReceiverAction | ReceiverState | Comments |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |  | active |  |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | Receive | SND_BL | receiver''s sendQ empty |'
  prefs: []
  type: TYPE_TB
- en: '|  | active |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Send | RPL_BL |  | ready | request copied |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |  | active | service perfomed |'
  prefs: []
  type: TYPE_TB
- en: '|  | ready | Reply | ready | reply copied |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Practical Details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Need to keep around request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Send_Blocked receivers in the SendQ
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The same as Receive_Blocked senders
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For Reply_Blocked senders.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Task states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can add extra return values beyond those specified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: int Send( Tid tid, char *message, int mslen, char *reply, int rplen )
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These are pretty self explanatory, except
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the number of characters actually placed in the reply-buffer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: including the terminal character ( \000 ) if the contents of the reply buffer
    is a string
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If something goes wrong, the return value is negative, coded to indicate what
    went wrong
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What can go wrong
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Illegal `tid`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`tid` not an existing task'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's up to `Send` to check that the reply-buffer was big enough by looking at
    its return value
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It's not an error if the task to which we `Send` never `Receive`s
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Should it be?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hint. Finding out if a task "never Receives" is equivalent to what problem?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing `argument` and `reply-buffer` is potentially costly and error-prone
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A type system might be nice
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: But then you would feel compelled to implement run-time type checking
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Send
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: What's in user space is just stubs.
  prefs: []
  type: TYPE_NORMAL
- en: checking arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: putting arguments in the right place
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that there are five arguments
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What the kernel must do
  prefs: []
  type: TYPE_NORMAL
- en: Check arguments
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: tid is valid?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Change state of sender to RECEIVE_BLOCKED
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put sender on the end of the receiver's sendQ
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If receiver is SEND_BLOCKED, do from [#3 in Receive](s11-l09.html#sendQ).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: int Receive( Tid *tid, char *message, int msglen )
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These are pretty self explanatory, except
  prefs: []
  type: TYPE_NORMAL
- en: How is the task id copied form kernel to receiver?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That is, where does the pointer point to?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What if the buffer wasn't big enough?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If several tasks have done `Send`, which one gets `Receive`d first?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: return value is number of bytes in message, including terminal character (\000)
    if the message is really a string..
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It seems as though the return value should be the tid. Something is not right.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If something goes wrong, the return value is negative, coded to indicate what
    went wrong
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What can go wrong?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Only part of the message was copied
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's up to `Receive` to check that the message-buffer was big enough by looking
    at its return value
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Implementing Receive
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: What the kernel must do
  prefs: []
  type: TYPE_NORMAL
- en: Check arguments
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change receiver's state to SEND_BLOCKED
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the `sendQ`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If sendQ is empty
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: exit from kernel after scheduling
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: sendQ is not empty
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extract head of the send queue, called the sender below
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: copy message from sender to receiver, after checking buffer sizes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: change sender's state to REPLY_BLOCKED
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: change receiver's state to READY
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: put sender's tid into receiver's argument
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: put receiver on its `readyQ`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: set up receiver's return value
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: exit from kernel after scheduling
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: int Reply( Tid tid, char *reply, int rplen )
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These are pretty self explanatory, except
  prefs: []
  type: TYPE_NORMAL
- en: The Replyer need not be the Receiver, but must be in contact with the Receiver
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When all goes well Reply leaves two tasks READY when it completes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing Reply
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Check arguments
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: sender (tid) must be REPLY_BLOCKED
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy message from replier to sender, checking buffer sizes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up sender's return value
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change sender's state to READY
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put sender on readyQ
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up replier's return value
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change replier's state to READY
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put replier on readyQ
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exit from kernel after scheduling
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Servers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is a server?
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: a task that provides service to a client task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tasks requesting service, clients, must know the Tid of the server
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a task that owns a resource and provides synchronized access to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: above,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a task'' owns the interface'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: other tasks may do the work
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How are servers implemented?
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Receive is the key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receive a request
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reply the response
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sender (client, task that is making the request) blocks until the response is
    available. That is, sender, in effect, is running at the priority of the server
    between the request and its reponse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server priority should be set according to the importance of the service it
    supplies.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: But client priority should be considered by the server. For example,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One set of instructions for higher priority client
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One set of instructions for lower priority client
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Name Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is a name server?
  prefs: []
  type: TYPE_NORMAL
- en: There is a set of global execution-independent names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a set of execution-dependent tasks that provide services associated
    with the names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name server maintains an up-to-date table mapping names to resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accepts requests to update the table
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Accepts queries concerning the table
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why Do We Need a Name Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Names | constant across applications & executions | interface | Associated
    with a set of services (an API) |'
  prefs: []
  type: TYPE_TB
- en: '| Task Ids | vary across applications & executions | implementation | Associated
    with a particular set of instructions and data (an execution) |'
  prefs: []
  type: TYPE_TB
- en: How do You Get the Task Id of the Name Server?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make it a constant across executions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name Server API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: One task can be registered under two names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each name is associated with a single task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name is `\000` terminated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Name is `\000` terminated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name Server Semantics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: RegisterAs
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not a legal name.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's up to you to decide what you will accept as legal names
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: tid is not a task
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: tid is not the Name Server
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Already somebody registered with that name
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the caller do?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: WhoIs
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not a legal name.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: tid is not a task
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: tid is not the Name Server
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: No task registered under that name
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the caller do?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '`RegisterAs` overwrites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why? The rule is that the name -> task map is many to one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A task may have many names
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A name may have only one task
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Name Server Implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: User Code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: E.g., `RegisterAs`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are lots of possible variations.
  prefs: []
  type: TYPE_NORMAL
- en: Server Code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Comments
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: How much will this code run?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When will it run?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How would you implement insert & lookup?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure out
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What deadlines does Nameserver have?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How many names will be in NameServer?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How many RegisterAs? and when?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How many WhoIs? and when?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What should be allowable as a name?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
