- en: Lecture 10 - Name Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10讲 - 名字服务器
- en: Public Service Annoucements
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共服务公告
- en: Due date for assignment 1
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作业1的截止日期
- en: Next week's classes
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下周的课程安排
- en: Assignment 2
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作业2
- en: due date
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截止日期
- en: what you do
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你要做什么
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Send/Receive/Reply
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送/接收/回复
- en: Sequence of States
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态序列
- en: There are two cases
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有两种情况
- en: Send before Receive
  id: totrans-11
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 发送前接收
- en: '| SenderAction | SenderState | ReceiverAction | ReceiverState | Comments |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 发送者动作 | 发送者状态 | 接收者动作 | 接收者状态 | 注释 |'
- en: '|  | active |  |  |  |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|  | 活跃 |  |  |  |'
- en: '| Send | RCV_BL |  |  | sender added to receiver''s sendQ |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 发送 | RCV_BL |  |  | 发送者添加到接收者的sendQ中 |'
- en: '|  |  |  | active |  |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|  |  |  | 活跃 |  |'
- en: '|  | RPL_BL | Receive | ready | request copiedsender deleted from receiver''s
    sendQ |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|  | RPL_BL | 接收 | 就绪 | 请求已复制发送者从接收者的sendQ中删除 |'
- en: '|  |  |  | active | service performed |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '|  |  |  | 活跃 | 已执行的服务 |'
- en: '|  | ready | Reply | ready | reply copied |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|  | 就绪 | 回复 | 就绪 | 回复已复制 |'
- en: Receive before Send
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 发送前接收
- en: '| SenderAction | SenderState | ReceiverAction | ReceiverState | Comments |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 发送者动作 | 发送者状态 | 接收者动作 | 接收者状态 | 注释 |'
- en: '|  |  |  | active |  |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '|  |  |  | 活跃 |  |'
- en: '|  |  | Receive | SND_BL | receiver''s sendQ empty |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|  |  | 接收 | SND_BL | 接收者的sendQ为空 |'
- en: '|  | active |  |  |  |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|  | 活跃 |  |  |  |'
- en: '| Send | RPL_BL |  | ready | request copied |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 发送 | RPL_BL |  | 就绪 | 请求已复制 |'
- en: '|  |  |  | active | service perfomed |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|  |  |  | 活跃 | 已��行的服务 |'
- en: '|  | ready | Reply | ready | reply copied |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|  | 就绪 | 回复 | 就绪 | 回复已复制 |'
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Practical Details
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实际细节
- en: Need to keep around request
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要保留的请求
- en: For Send_Blocked receivers in the SendQ
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于SendQ中的Send_Blocked接收方
- en: The same as Receive_Blocked senders
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Receive_Blocked发送方相同
- en: For Reply_Blocked senders.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Reply_Blocked发送方。
- en: Messages
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息
- en: Task states
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务状态
- en: You can add extra return values beyond those specified
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在指定之外添加额外的返回值
- en: '* * *'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: int Send( Tid tid, char *message, int mslen, char *reply, int rplen )
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: int 发送( Tid tid, char *message, int mslen, char *reply, int rplen )
- en: These are pretty self explanatory, except
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都很容易理解，除了
- en: The return value is the number of characters actually placed in the reply-buffer
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回值是实际放置在回复缓冲区中的字符数
- en: including the terminal character ( \000 ) if the contents of the reply buffer
    is a string
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括回复缓冲区的内容是字符串时的终端字符（\000）
- en: If something goes wrong, the return value is negative, coded to indicate what
    went wrong
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果出现问题，返回值为负数，编码以指示出了什么问题
- en: What can go wrong
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会出什么问题
- en: Illegal `tid`
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非法的`tid`
- en: '`tid` not an existing task'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tid`不是现有任务'
- en: It's up to `Send` to check that the reply-buffer was big enough by looking at
    its return value
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过查看其返回值，`Send`需要检查回复缓冲区是否足够大
- en: It's not an error if the task to which we `Send` never `Receive`s
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们`Send`的任务从不`Receive`，那不是错误
- en: Should it be?
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该是吗？
- en: Hint. Finding out if a task "never Receives" is equivalent to what problem?
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示。找出任务“永远不接收”等同于什么问题？
- en: Parsing `argument` and `reply-buffer` is potentially costly and error-prone
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析`argument`和`reply-buffer`可能是昂贵且容易出错的
- en: A type system might be nice
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型系统可能很好
- en: But then you would feel compelled to implement run-time type checking
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但是然后你会感到有必要实现运行时类型检查
- en: Implementing Send
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 实现发送
- en: What's in user space is just stubs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用户空间中只是存根。
- en: checking arguments
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查参数
- en: putting arguments in the right place
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将参数放在正确的位置
- en: Note that there are five arguments
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意有五个参数
- en: What the kernel must do
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 内核必须做什么
- en: Check arguments
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查参数
- en: tid is valid?
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tid是否有效？
- en: Change state of sender to RECEIVE_BLOCKED
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将发送方的状态更改为RECEIVE_BLOCKED
- en: Put sender on the end of the receiver's sendQ
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将发送者放在接收者的sendQ的末尾
- en: If receiver is SEND_BLOCKED, do from [#3 in Receive](s11-l09.html#sendQ).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果接收方是SEND_BLOCKED，请参考[#3 in Receive](s11-l09.html#sendQ)。
- en: '* * *'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: int Receive( Tid *tid, char *message, int msglen )
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: int 接收( Tid *tid, char *message, int msglen )
- en: These are pretty self explanatory, except
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都很容易理解，除了
- en: How is the task id copied form kernel to receiver?
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务ID是如何从内核复制到接收者的？
- en: That is, where does the pointer point to?
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也就是说，指针指向哪里？
- en: What if the buffer wasn't big enough?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果缓冲区不够大怎么办？
- en: If several tasks have done `Send`, which one gets `Receive`d first?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有几个任务都执行了`Send`，哪一个会先被`Receive`？
- en: return value is number of bytes in message, including terminal character (\000)
    if the message is really a string..
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回值是消息中的字节数，包括终端字符（\000），如果消息实际上是一个字符串。
- en: It seems as though the return value should be the tid. Something is not right.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看起来返回值应该是tid。有些不对劲。
- en: If something goes wrong, the return value is negative, coded to indicate what
    went wrong
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果出现问题，返回值为负数，编码以指示出了什么问题
- en: What can go wrong?
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会出什么问题？
- en: Only part of the message was copied
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有消息的一部分被复制
- en: It's up to `Receive` to check that the message-buffer was big enough by looking
    at its return value
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过查看其返回值，`Receive`负责检查消息缓冲区是否足够大
- en: Implementing Receive
  id: totrans-76
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 实现接收
- en: What the kernel must do
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 内核必须做什么
- en: Check arguments
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查参数
- en: Change receiver's state to SEND_BLOCKED
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将接收者的状态更改为SEND_BLOCKED
- en: Check the `sendQ`
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`sendQ`
- en: If sendQ is empty
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果sendQ为空
- en: exit from kernel after scheduling
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出内核后进行调度
- en: sendQ is not empty
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sendQ不为空
- en: extract head of the send queue, called the sender below
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取发送队列的头部，称为下面的发送者
- en: copy message from sender to receiver, after checking buffer sizes
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将消息从发送者复制到接收者，检查缓冲区大小
- en: change sender's state to REPLY_BLOCKED
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将发送者的状态更改为REPLY_BLOCKED
- en: change receiver's state to READY
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将接收者的状态更改为READY
- en: put sender's tid into receiver's argument
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将发送者的tid放入接收者的参数中
- en: put receiver on its `readyQ`
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将接收者放入其`readyQ`
- en: set up receiver's return value
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置接收者的返回值
- en: exit from kernel after scheduling
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出内核后进行调度
- en: '* * *'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: int Reply( Tid tid, char *reply, int rplen )
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: int Reply( Tid tid, char *reply, int rplen )
- en: These are pretty self explanatory, except
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都很容易理解，除了
- en: The Replyer need not be the Receiver, but must be in contact with the Receiver
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回复者不必是接收者，但必须与接收者联系
- en: Why?
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么？
- en: When all goes well Reply leaves two tasks READY when it completes
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一切顺利时，Reply在完成后会使两��任务保持READY状态
- en: Implementing Reply
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 实现回复
- en: Check arguments
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查参数
- en: sender (tid) must be REPLY_BLOCKED
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送者（tid）必须是REPLY_BLOCKED状态
- en: Copy message from replier to sender, checking buffer sizes
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将消息从回复者复制到发送者，检查缓冲区大小
- en: Set up sender's return value
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置发送者的返回值
- en: Change sender's state to READY
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将发送者的状态更改为READY
- en: Put sender on readyQ
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将发送者放入readyQ
- en: Set up replier's return value
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置回复者的返回值
- en: Change replier's state to READY
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将回复者的状态更改为READY
- en: Put replier on readyQ
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将回复者放入readyQ
- en: Exit from kernel after scheduling
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出内核后进行调度
- en: '* * *'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Servers
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器
- en: What is a server?
  id: totrans-111
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 什么是服务器？
- en: a task that provides service to a client task
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为客户端任务提供服务的任务
- en: tasks requesting service, clients, must know the Tid of the server
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求服务的任务，客户端，必须知道服务器的Tid
- en: a task that owns a resource and provides synchronized access to it.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有资源并提供同步访问的任务。
- en: above,
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上面，
- en: '`a task'' owns the interface'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a task''拥有该接口'
- en: other tasks may do the work
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他任务可能会执行这项工作
- en: How are servers implemented?
  id: totrans-118
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 服务器是如何实现的？
- en: Receive is the key
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收是关键
- en: Receive a request
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收请求
- en: Reply the response
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回复响应
- en: Sender (client, task that is making the request) blocks until the response is
    available. That is, sender, in effect, is running at the priority of the server
    between the request and its reponse
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送者（客户端，发出请求的任务）在响应可用之前会被阻塞。也就是说，在请求和响应之间，发送者实际上以服务器的优先级运行
- en: Server priority should be set according to the importance of the service it
    supplies.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器优先级应根据其提供的服务的重要性进行设置。
- en: But client priority should be considered by the server. For example,
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但服务器应考虑客户端的优先级。例如，
- en: One set of instructions for higher priority client
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为优先级较高的客户端提供一组指令
- en: One set of instructions for lower priority client
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为优先级较低的客户端提供一组指令
- en: '* * *'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Name Server
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 名称服务器
- en: What is a name server?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是名称服务器？
- en: There is a set of global execution-independent names
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在一组全局的与执行无关的名称
- en: There is a set of execution-dependent tasks that provide services associated
    with the names
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在一组与名称相关联的执行相关任务
- en: Name server maintains an up-to-date table mapping names to resources
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称服务器维护一个将名称映射到资源的最新表
- en: Accepts requests to update the table
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受更新表的请求
- en: Accepts queries concerning the table
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受有关表的查询
- en: Why Do We Need a Name Server
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么我们需要名称服务器
- en: '| Names | constant across applications & executions | interface | Associated
    with a set of services (an API) |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 在应用程序和执行过程中保持不变 | 接口 | 与一组服务（一个API）相关联 |'
- en: '| Task Ids | vary across applications & executions | implementation | Associated
    with a particular set of instructions and data (an execution) |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 任务ID | 在应用程序和执行过程中变化 | 实现 | 与特定一组指令和数据（一个执行）相关联 |'
- en: How do You Get the Task Id of the Name Server?
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何获取名称服务器的任务ID？
- en: Make it a constant across executions
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使其在每次执行中保持不变
- en: Name Server API
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称服务器API
- en: '[PRE0]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: One task can be registered under two names.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个任务可以注册两个名称。
- en: Each name is associated with a single task.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个名称与单个任务关联。
- en: Name is `\000` terminated.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称以`\000`结尾。
- en: '[PRE1]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Name is `\000` terminated.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称以`\000`结尾。
- en: Name Server Semantics
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称服务器语义
- en: RegisterAs
  id: totrans-148
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: RegisterAs
- en: Errors
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: Not a legal name.
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不是合法的名称。
- en: It's up to you to decide what you will accept as legal names
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定什么是合法名称由你决定
- en: tid is not a task
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: tid不是一个任务
- en: tid is not the Name Server
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: tid不是名称服务器
- en: Already somebody registered with that name
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已经有人注册了那个名称
- en: What does the caller do?
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用者做什么？
- en: WhoIs
  id: totrans-156
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: WhoIs
- en: Errors
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: Not a legal name.
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不是法定名称。
- en: tid is not a task
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: tid不是一个任务
- en: tid is not the Name Server
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: tid不是名称服务器
- en: No task registered under that name
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有注册在那个名称下的任务
- en: What does the caller do?
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用者做什么？
- en: Comments
  id: totrans-163
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 注释
- en: '`RegisterAs` overwrites.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RegisterAs`会覆盖。'
- en: Why? The rule is that the name -> task map is many to one.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么？规则是名称->任务映射是多对一的。
- en: A task may have many names
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个任务可能有很多名称
- en: A name may have only one task
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名称可能只有一个任务
- en: Name Server Implementation
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称服务器实现
- en: User Code
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用户代码
- en: E.g., `RegisterAs`
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`RegisterAs`
- en: '[PRE2]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are lots of possible variations.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多可能的变体。
- en: Server Code
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 服务器代码
- en: '[PRE3]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Comments
  id: totrans-175
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 注释
- en: How much will this code run?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这段代码会运行多少次？
- en: When will it run?
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它何时运行？
- en: How would you implement insert & lookup?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会如何实现插入和查找？
- en: Figure out
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搞清楚
- en: What deadlines does Nameserver have?
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 名字服务器有哪些截止日期？
- en: How many names will be in NameServer?
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: NameServer中会有多少个名称？
- en: How many RegisterAs? and when?
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有多少个RegisterAs？何时？
- en: How many WhoIs? and when?
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有多少个WhoIs？何时？
- en: What should be allowable as a name?
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为名称应该被允许什么？
- en: '* * *'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Return to:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至：
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩在s12为CS452的讲座笔记](index.html)'
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩2012年春季CS452页面](../index.html)'
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩的CS452页面](../../index.html)'
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩的教学页面](../../../index.html)'
- en: '[Bill Cowan''s home page](../../../../index.html)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩的主页](../../../../index.html)'
