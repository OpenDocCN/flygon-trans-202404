- en: Scaling The Elm Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Elm 架构
- en: Scaling The Elm Architecture
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Elm 架构
- en: If you are coming from JavaScript, you are probably wondering “where are my
    reusable components?” and “how do I do parent-child communication between them?”
    A great deal of time and effort is spent on these questions in JavaScript, but
    it just works different in Elm. **We do not think in terms of reusable components.**
    Instead, we focus on reusable *functions*. It is a functional language after all!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你来自 JavaScript，你可能会想知道“我的可重用组件在哪里？”以及“我如何在它们之间进行父子通信？”在 JavaScript 中，这些问题花费了大量时间和精力，但在
    Elm 中却有所不同。**我们不是用可重用组件来思考。** 相反，我们专注于可重用的*函数*。毕竟它是一种函数式语言！
- en: So this chapter will go through a few examples that show how we create **reusable
    views** by breaking out helper functions to display our data. We will also learn
    about Elm’s *module system* which helps you break your code into multiple files
    and hide implementation details. These are the core tools and techniques of building
    large app with Elm.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本章将通过几个示例来展示我们如何通过拆分辅助函数来显示我们的数据来创建**可重用视图**。我们还将学习 Elm 的*模块系统*，它可以帮助您将代码分解为多个文件并隐藏实现细节。这些是使用
    Elm 构建大型应用程序的核心工具和技术。
- en: In the end, I think we end up with something far more flexible and reliable
    than “reusable components” and there is no real trick. We will just be using the
    fundamental tools of functional programming!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我认为我们得到的东西比“可重用组件”更灵活、更可靠，并且没有真正的诀窍。我们只会使用函数式编程的基本工具！
- en: Labeled Checkboxes
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带标签的复选框
- en: Labeled Checkboxes
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带标签的复选框
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Follow along in the [online editor](http://elm-lang.org/examples/checkboxes).
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在[在线编辑器](http://elm-lang.org/examples/checkboxes)中跟随。
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Your app will probably have some options people can mess with. If something
    happens, should you send them an email notification? If they come across a video,
    should it start playing by itself? That kind of thing. So you will need to create
    some HTML like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序可能会有一些用户可以操作的选项。如果发生了某事，您应该发送给他们电子邮件通知吗？如果他们遇到视频，它应该自动播放吗？那种东西。所以你需要创建这样的
    HTML：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'That will let people toggle the checkboxes, and using `<label>` means they
    get a much bigger area they can click on. Let’s write an Elm program that manages
    all this interaction! As always, we will take a guess at our `Model`. We know
    we need to track the user’s settings so we will put them in our model:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那样可以让人们切换复选框，并且使用 `<label>` 意味着他们可以点击更大的区域。让我们编写一个 Elm 程序来管理所有这些交互！像往常一样，我们会猜测我们的
    `Model`。我们知道我们需要跟踪用户的设置，所以我们会把它们放在我们的模型中：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'From there, we will want to figure out our messages and update function. Maybe
    something like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里开始，我们将想要弄清楚我们的消息和更新函数。也许是这样的：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That seems fine. Now to create our view!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错。现在来创建我们的视图！
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is not too crazy, but we are repeating ourselves a bit. How can we make
    our `view` function nicer? If you are coming from JavaScript, your first instinct
    is probably that we should make a “labeled checkbox component” but it is easier
    to just create a helper function! Here is the `view` function with a `checkbox`
    helper function:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不太疯狂，但我们有点重复自己。我们如何使我们的 `view` 函数更好看呢？如果你来自 JavaScript，你的第一反应可能是我们应该创建一个“带标签的复选框组件”，但创建一个辅助函数更容易！这是带有
    `checkbox` 辅助函数的 `view` 函数：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we have a highly configurable `checkbox` function. It takes two arguments
    to configure how it works: the message it produces on clicks and some text to
    show next to the checkbox. Now if we decide we want all checkboxes to have a certain
    `class`, we just add it in the `checkbox` function and it shows up everywhere!
    This is the essense of **reusable views** in Elm. Create helper functions!'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个高度可配置的 `checkbox` 函数。它需要两个参数来配置它的工作方式：点击时产生的消息和要显示在复选框旁边的一些文本。现在，如果我们决定所有复选框都要有特定的`class`，我们只需在
    `checkbox` 函数中添加它，它就会出现在所有地方！这就是 Elm 中**可重用视图**的本质。创建辅助函数！
- en: Comparing Reusable Views to Reusable Components
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将可重用视图与可重用组件进行比较
- en: 'We now have enough information to do a simple comparison of these approaches.
    Reusable views have a few major advantages over components:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有足够的信息来简单比较这些方法。可重用视图比组件具有几个主要优势：
- en: '**It is just functions.** We are not doing anything special here. Functions
    have all the power we need, and they are very simple to create. It is the most
    basic building block of Elm!'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**这只是函数。** 我们在这里没有做任何特殊的事情。函数拥有我们需要的所有能力，而且它们非常简单易懂。这是 Elm 的最基本构建块！'
- en: '**No parent-child communication.** If we had made a “checkbox component” we
    would have to figure out how to synchronize the state in the checkbox component
    with our overall model. “That checkbox says notifications are on, but the model
    says they are off!” Maybe we need a Flux store now? By using functions instead,
    we are able to have reuse in our view *without* disrupting our `Model` or `update`.
    They work exactly the same as before, no need to touch them!'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有父子通信。** 如果我们制作了一个“复选框组件”，我们将不得不找出如何同步复选框组件中的状态与我们的整体模型。“那个复选框显示通知已打开，但模型显示它们已关闭！”也许现在我们需要一个Flux存储？通过使用函数，我们能够在视图中实现重用，*而不会*干扰我们的`Model`或`update`。它���的工作方式与以前完全相同，无需修改它们！'
- en: This means we can always create reusable `view` code without changing our overall
    architecture or introducing any fancy ideas. Just write smaller functions. That
    sounds nice, but let’s see some more examples to make sure it is true!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以始终创建可重用的`view`代码，而不改变我们的整体架构或引入任何花哨的想法。只需编写更小的函数。听起来不错，但让我们看一些更多的例子来确保它是真实的！
- en: Radio Buttons
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单选按钮
- en: Radio Buttons
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单选按钮
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Follow along in the [online editor](http://elm-lang.org/examples/radio-buttons).
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在[在线编辑器](http://elm-lang.org/examples/radio-buttons)中跟随。
- en: '* * *'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Say you have a website that is primarily about reading, like this guide! You
    may want to have a way to choose between small, medium, and large fonts so your
    readers can customize it for their preferences. In that case, you will want some
    HTML like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个主要关于阅读的网站，就像这个指南！您可能希望有一种方法来选择小号、中号和大号字体，以便读者可以根据自己的喜好进行自定义。在这种情况下，您将需要一些类似这样的HTML：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Just like in the checkbox example from the previous page, this will let people
    choose the one they want, and using `<label>` means they get a much bigger area
    they can click on. Like always, we start with our `Model`. This one is kind of
    interesting because we can use [union types](union_types.html) to make it very
    reliable!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就像上一页复选框示例中一样，这将让人们选择他们想要的选项，并且使用`<label>`意味着他们可以点击的区域更大。和往常一样，我们从我们的`Model`开始。这个有点有趣，因为我们可以使用[联合类型](union_types.html)使其非常可靠！
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This means there are exactly three possible font sizes: `Small`, `Medium`,
    and `Large`. It is impossible to have any other value in our `fontSize` field.
    If you are coming from JavaScript, you know their alternative is to use strings
    or numbers and just hope that there is never a typo or mistake. You *could* use
    values like that in Elm, but why open yourself up to bugs for no reason?!'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着有三种可能的字体大小：`Small`、`Medium`和`Large`。在我们的`fontSize`字段中不可能有任何其他值。如果您来自JavaScript，您知道它们的替代方法是使用字符串或数字，只是希望永远不会出现拼写错误或错误。您*可以*在Elm中使用类似的值，但为什么要无缘无故地为自己引入错误呢？！
- en: '**Note:** You should always be looking for opportunities to use union types
    in your data. The best way to avoid invalid states is to make them impossible
    to represent in the first place!'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 您应该始终寻找使用联合类型的机会。避免无效状态的最佳方法是首先使其不可能表示！'
- en: 'Alright, now we need to `update` our model. In this case we just want to switch
    between font sizes as the user toggles the radio buttons:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们需要`update`我们的模型。在这种情况下，我们只想在用户切换单选按钮时在字体大小之间切换：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we need to describe how to show our `Model` on screen. First let’s see
    the one where we put all our code in one function and repeat ourselves a bunch
    of times:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要描述如何在屏幕上显示我们的`Model`。首先让我们看看将所有代码放在一个函数中并重复自己很多次的情况：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That is kind of a mess! The best thing to do is to start making helper functions
    (not components!). We see some repetition in the radio buttons, so we will start
    there.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那有点混乱！最好的做法是开始制作辅助函数（而不是组件！）。我们在单选按钮中看到一些重复，所以我们将从那里开始。
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our `view` function is quite a bit easier to read now. Great!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的`view`函数要容易阅读得多。太棒了！
- en: 'If that is the only chunk of radio buttons on your page, you are done. But
    perhaps you have a couple sets of radio buttons. For example, this guide not only
    lets you set font size, but also color scheme and whether you use a serif or sans-serif
    font. Each of those can be implemented as a set of radio buttons, so we could
    do a bit more refactoring, like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您页面上唯一的一组单选按钮，那么您已经完成了。但也许您有几组单选按钮。例如，这个指南不仅可以让您设置字体大小，还可以设置颜色方案以及是否使用衬线或无衬线字体。每个都可以实现为一组单选按钮，因此我们可以进行更多的重构，就像这样：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'So if we want to let users choose a color scheme or toggle serifs, the `view`
    can reuse `viewPicker` for each case. If we do that, we may want to add additional
    arguments to the `viewPicker` function. If we want to be able to set a class on
    each `<fieldset>`, we could add an argument like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们想让用户选择颜色方案或切换衬线字体，`view`可以为每种情况重用`viewPicker`。如果我们这样做，可能需要向`viewPicker`函数添加额外的参数。如果我们想在每个`<fieldset>`上设置一个类，我们可以添加一个类似这样的参数：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Or if we wanted even more flexibility, we could let people pass in whatever
    attributes they please, like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们想要更多的灵活性，我们可以让用户传入任何他们想要的属性，就像这样：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: And if we wanted even MORE flexibility, we could let people pass in attributes
    for each radio button too! There is really no end to what can be configured. You
    just add a bit more information to an argument.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要更多的灵活性，我们可以让用户为每个单选按钮传入属性！真的没有什么是不能配置的。你只需在参数中添加一点额外的信息。
- en: Too Much Reuse?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复用过度？
- en: 'In this case, we saw quite a few ways to write the same code. But which way
    is the *right* way to do it? A good rule to pick an API is **choose the absolute
    simplest thing that does everything you need**. Here are some scenarios that test
    this rule:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们看到了写相同代码的几种方式。但哪种方式是*正确*的方式呢？选择 API 的一个好规则是**选择做到你所需的一切的绝对最简单的东西**。以下是一些测试这个规则的场景：
- en: There is the only radio button thing on your page. In that case, just make them!
    Do not worry about making a highly configurable and reusable function for radio
    buttons. Refactoring is easy in Elm, so wait for a legitimate need before doing
    that work!
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面上只有一个单选按钮。在这种情况下，只需制作它们！不要担心为单选按钮制作一个高度可配置和可重用的函数。在 Elm 中重构很容易，所以在真正需要之前等待！
- en: There are a couple radio button things on your page, all with the same styling.
    That is how the options on this guide look. This is a great case for sharing a
    view function. You may not even need to change any classes or add any custom attributes.
    If you do not need that, do not design for it! It is easy to add later.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面上有几个单选按钮，都具有相同的样式。这就是本指南上选项的外观。这是共享视图函数的一个很好的案例。你甚至可能不需要更改任何类或添加任何自定义属性。如果你不需要，就不要为其设计！稍后可以轻松添加。
- en: There are a couple radio button things on your page, but they are very different.
    You could do an extremely flexible picker that lets you configure everything,
    but at some point, things that *look* similar are not actually similar enough
    for this to be worth it. So if you ever find yourself with tons of complex arguments
    configuring a view function, you may have overdone it on the reuse. I personally
    would prefer to have two chunks of *similar* view code that are both simple and
    easy to change than one chunk of view code that is complex and hard to understand.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面上有几个单选按钮，但它们非常不同。你可以创建一个非常灵活的选择器，让你配置一切，但在某个时候，看起来*相似*的东西实际上并不足够相似，以至于这样做不值得。所以，如果你发现自己有大量复杂的参数配置视图函数，你可能过度复用了。我个人更喜欢有两个*相似*的视图代码块，它们都简单易变，而不是一个复杂难以理解的视图代码块。
- en: Point is, there is no magic recipe here. The answer will depend on the particulars
    of your application, and you should always try to find the simplest approach.
    Sometimes that means sharing code. Sometimes it means writing *similar* code.
    It takes practice and experience to get good at this, so do not be afraid to experiment
    to find simpler ways!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是，这里没有魔法配方。答案将取决于你的应用程序的具体情况，你应该始终尝试找到最简单的方法。有时这意味着共享代码。有时意味着编写*相似*的代码。要想做到这一点需要练习和经验，所以不要害怕尝试寻找更简单的方法！
- en: Modules
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: Modules
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: In the last few sections, we learned how to create reusable views. Whenever
    you start seeing a pattern in your `view` code, you can break it out into a helper
    function. But so far, we have just been growing our files longer and longer. At
    some point this gets out of control though, we do not want to have 2000 line files!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近几节中，我们学会了如何创建可重用的视图。每当你在`view`代码中看到一种模式时，你可以将其拆分为一个辅助函数。但到目前为止，我们只是让我们的文件变得越来越长。然而，在某个时候，这种情况会失控，我们不希望有2000行的文件！
- en: So Elm has *modules* to help you grow your codebase in a nice way. On the most
    basic level, modules let you break your code into multiple files. Like everything
    else in Elm, you should only reach for a fancier tool when you feel you *need*
    it. So if you have a 400 line file and notice that a bunch of code is all related
    to showing radio buttons in a certain way, it may be a good idea to move all the
    relevant functions and types into their own module.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Elm有*模块*来帮助您以一种良好的方式扩展代码库。在最基本的层面上，模块允许您将代码分解为多个文件。就像Elm中的其他所有内容一样，只有在您感觉*需要*时才应该使用更复杂的工具。因此，如果您有一个400行的文件，并注意到一堆代码都与以某种方式显示单选按钮有关，将相关函数和类型移动到自己的模块中可能是一个好主意。
- en: Before we get into the nuances of using modules *appropriately*, let’s learn
    how to use them at all!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入讨论如何*适当地*使用模块之前，让我们先学习如何使用它们！
- en: Defining Modules
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义模块
- en: 'Every module starts with a *module declaration*. So if I wanted to define my
    own version of the `Maybe` module, I might start with something like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块都以*模块声明*开始。所以，如果我想定义自己版本的`Maybe`模块，我可能会从这样开始：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The new thing here is that first line. You can read it as “This module is named
    `Optional` and it exposes *everything* to people who use the module.”
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的新东西是第一行。您可以将其解读为“此模块命名为`Optional`，并向使用该模块的人公开*所有内容*。”
- en: 'Exposing everything is fine for prototyping and exploration, but a serious
    project will want to make the exposed values explicit, like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于原型设计和探索来说，暴露所有内容是可以的，但是一个严肃的项目会希望使暴露的值明确，就像这样：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Read this as “This module is named `Optional` and it exposes the `Optional`
    type, the `Some` and `None` constructors, and the `isNone` function to people
    who use the module.” Now there is no reason to list *everything* that is defined,
    so later we will see how this can be used to hide implementation details.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将其解读为“此模块命名为`Optional`，并向使用该模块的人公开`Optional`类型、`Some`和`None`构造函数以及`isNone`函数。”现在没有理由列出*定义的所有内容，所以稍后我们将看到如何使用它来隐藏实现细节。
- en: '**Note:** If you forget to add a module declaration, Elm will use this one
    instead:'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 如果您忘记添加模块声明，Elm将使用以下内容代替：'
- en: ''
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ''
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This makes things easier for beginners working in just one file. They should
    not be confronted with the module system on their first day!
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这对于初学者在一个文件中工作会更容易。他们不应该在第一天就面对模块系统！
- en: Using Modules
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模块
- en: 'Okay, we have our `Optional` module, but how do we use it? We can create `import`
    declarations at the top of files that describe which modules are needed. So if
    we wanted to make the “No shoes, no shirt, no service” policy explicit in code,
    we could write this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们有了`Optional`模块，但我们如何使用它呢？我们可以在文件顶部创建`import`声明，描述所需的模块。所以，如果我们想要在代码中明确“无鞋、无衬衫、不提供服务”的政策，我们可以这样写：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `import Optional` line means you can use anything exposed by the module
    as long as you put `Optional.` before it. So in the `noService` function, you
    see `Optional.Optional` and `Optional.isNone`. These are called *qualified* names.
    Which `isNone` is it? The one from the `Optional` module! It says it right there
    in the code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`import Optional`行意味着只要在其前面加上`Optional.`，就可以使用模块公开的任何内容。因此，在`noService`函数中，您会看到`Optional.Optional`和`Optional.isNone`。这些被称为*限定*名称。哪个`isNone`？来自`Optional`模块的那个！代码中就写着。'
- en: Generally, it is best to always use qualified names. In a project with twenty
    imports, it is extremely helpful to be able to quickly see where a value comes
    from.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最好始终使用限定名称。在一个有二十个导入的项目中，能够快速看到值来自哪里非常有帮助���
- en: That said, there are a few ways to customize an import that can come in handy.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，有几种定制导入的方法可能会派上用场。
- en: As
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为
- en: 'You can use the `as` keyword to provide a shorter name. To stick with the `Optional`
    module, we could abbreviate it to just `Opt` like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`as`关键字提供一个更短的名称。继续使用`Optional`模块，我们可以将其缩写为`Opt`，就像这样：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we can refer to `Opt.Optional` and `Opt.isNone`. It is kind of nice in
    this case, but this feature is best used on very long module names. Cases like
    this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以引用`Opt.Optional`和`Opt.isNone`。在这种情况下，这样做很好，但这个特性最适合用于非常长的模块名称。像这样的情况：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It would be annoying to type out the whole module name every time we need a
    function from it, so we shorten it to a name that is clear and helpful.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们需要从中获取函数时，键入整个模块名称会很烦人，因此我们将其缩短为一个清晰和有帮助的名称。
- en: Exposing
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 暴露
- en: 'You can also use the `exposing` keyword to bring in the contents of the module
    *without* a qualifier. You will sometimes see things like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`exposing`关键字将模块的内容*无需*限定符地引入。有时你会看到这样的东西：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This way you can refer to the `Optional` type directly, but still need to say
    `Optional.isNone` and `Optional.None` for everything else exposed by the module.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你就可以直接引用`Optional`类型，但仍然需要说`Optional.isNone`和`Optional.None`来访问模块中其他暴露的所有内容。
- en: This `exposing` keyword works just like it does in module declarations. If you
    want to expose everything you use `exposing (..)`. If you want to expose everything
    explicitly, you would say `exposing ( Optional(..), isNone )`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此`exposing`关键字的工作方式与模块声明中的方式相同。如果你想暴露你使用的所有内容，你会说`exposing (..)`。如果你想明确地暴露所有内容，你会说`exposing
    ( Optional(..), isNone )`。
- en: Mixing Both
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合使用
- en: 'It is possible to use `as` and `exposing` together. You could write:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 可以同时使用`as`和`exposing`。你可以这样写：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: No matter how you choose to `import` a module, you will only be able to refer
    to types and values that the module has made publicly available. You may get to
    see only one function from a module that has twenty. That is up to the author
    of the module!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择如何`import`一个模块，你只能引用该模块公开的类型和值。你可能只能看到一个模块的函数，而不是二十个。这取决于模块的作者！
- en: Building Projects with Multiple Modules
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建具有多个模块的项目
- en: We know what the Elm code looks like now, but how do we get `elm-make` to recognize
    our modules?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道 Elm 代码是什么样的，但是如何让`elm-make`识别我们的模块呢？
- en: 'Every Elm project has an `elm-package.json` file at its root. It will look
    something like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Elm 项目都有一个位于其根目录的`elm-package.json`文件。它看起来像这样：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'There are two important parts for us:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说有两个重要部分：
- en: '`"source-directories"` — This is a list of all the directories that `elm-make`
    will search through to find modules. Saying `import Optional` means `elm-make`
    will search for `src/Optional.elm` and `benchmarks/src/Optional.elm`. Notice that
    the name of the module needs to match the name of the file exactly.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"source-directories"` — 这是 `elm-make` 将搜索的所有目录的列表，以查找模块。说`import Optional`意味着`elm-make`将搜索`src/Optional.elm`和`benchmarks/src/Optional.elm`。注意，模块的名称必须与文件名完全匹配。'
- en: '`"dependencies"` — This lists all the [community packages](http://package.elm-lang.org/)
    you depend on. Saying `import Optional` means `elm-make` will also search the
    [`elm-lang/core`](http://package.elm-lang.org/packages/elm-lang/core/latest/)
    and [`elm-lang/html`](http://package.elm-lang.org/packages/elm-lang/html/latest/)
    packages for modules named `Optional`.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"dependencies"` — 这列出了你依赖的所有[社区包](http://package.elm-lang.org/)。说`import Optional`意味着`elm-make`还将搜索[`elm-lang/core`](http://package.elm-lang.org/packages/elm-lang/core/latest/)和[`elm-lang/html`](http://package.elm-lang.org/packages/elm-lang/html/latest/)包中命名为`Optional`的模块。'
- en: 'Typically, you will say `"source-directories": [ "src" ]` and have your project
    set up like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '通常，你会说`"source-directories": [ "src" ]`并设置你的项目如下：'
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And when you want to compile your `Main.elm` file, you say:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想编译你的`Main.elm`文件时，你会说：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: With this setup, `elm-make` will know exactly where to find the `Optional` module.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种设置，`elm-make`将准确地知道在哪里找到`Optional`模块。
- en: '**Note:** If you want fancier directory structure for your Elm code, you can
    use module names like `Facebook.Feed.Story`. That module would need to live in
    a file at `Facebook/Feed/Story.elm` so that the file name matches the module name.'
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意:** 如果你想要更复杂的 Elm 代码目录结构，你可以使用像`Facebook.Feed.Story`这样的模块名称。该模块需要位于`Facebook/Feed/Story.elm`文件中，以便文件名与模块名匹配。'
- en: More
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多
- en: More
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多
- en: 'Right now this section gives a brief introduction to **reusable views**. Instead
    of thinking about components, you create simple functions and configure them by
    passing in arguments. You can see the most extreme versions of this by checking
    out the following projects:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，本节简要介绍了**可重用视图**。不是考虑组件，而是创建简单的函数，并通过传递参数进行配置。你可以通过查看以下项目来看到这种情况的最极端版本：
- en: '[`evancz/elm-sortable-table`](https://github.com/evancz/elm-sortable-table)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`evancz/elm-sortable-table`](https://github.com/evancz/elm-sortable-table)'
- en: '[`thebritican/elm-autocomplete`](https://github.com/thebritican/elm-autocomplete)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thebritican/elm-autocomplete`](https://github.com/thebritican/elm-autocomplete)'
- en: 'The README of `elm-sortable-table` has some nice guidance on how to use APIs
    like these and why they are designed as they are. You can also watch the API design
    session where Greg and I figured out an API for `elm-autocomplete` here:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`elm-sortable-table`的README提供了如何使用这些API以及它们为什么设计成这样的一些很好的指导。你也可以观看 API 设计会话，Greg
    和我在那里为`elm-autocomplete`设计了一个 API：'
- en: '![](466d7e55.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](466d7e55.jpg)'
- en: '[Video link](http://youtube.com/watch?v=KSuCYUqY058)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[视频链接](http://youtube.com/watch?v=KSuCYUqY058)'
- en: We talk through a lot of the design considerations that go into APIs like these.
    One big takeaway is that you should not expect to do something as elaborate as
    this for every single thing in your app! As of this writing, NoRedInk has more
    than 30k lines of Elm and one or two instances where they felt it made sense to
    design something as elaborate as this.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了很多设计考虑因素，这些因素涉及到这样的API。一个很重要的观点是，你不应该期望为你的应用程序中的每一件事都做得像这样复杂！截至目前，NoRedInk有超过30,000行的Elm代码，只有一两个实例他们认为设计成这样复杂是有意义的。
- en: Hopefully those resources help guide you as you make larger and larger programs!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这些资源能够在你编写越来越大的程序时给你指引！
- en: '**Note:** I plan to fill this section in with more examples of growing your
    `Model` and `update` functions. It is roughly the same ideas though. If you find
    yourself repeating yourself, maybe break things out. If a function gets too big,
    make a helper function. If you see related things, maybe move them to a module.
    But at the end of the day, it is not a huge deal if you let things get big. Elm
    is great at finding problems and making refactors easy, so it is not actually
    a huge deal if you have a bunch of entries in your `Model` because it does not
    seem better to break them out in some way. I will be writing more about this!'
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 我计划在这一部分填充更多关于扩展你的`Model`和`update`函数的示例。尽管大致上是相同的想法。如果你发现自己在重复，也许可以拆分一些东西。如果一个函数变得太大，可以制作一个辅助函数。如果你发现相关的东西，也许可以将它们移动到一个模块中。但最终，如果你让事情变得庞大了，也不是什么大问题。Elm非常擅长发现问题并使重构变得容易，因此如果你的`Model`中有大量条目，也不会成为什么大问题，因为似乎没有更好的方法将它们拆分开来。我将会写更多关于这个的内容！'
