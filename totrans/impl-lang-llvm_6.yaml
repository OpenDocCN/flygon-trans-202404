- en: User-Defined Operations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户定义的操作
- en: User-defined Operations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户自定义操作
- en: Welcome to Chapter 6 of the “Implementing a language with LLVM” tutorial. At
    this point in our tutorial, we now have a fully functional language that is fairly
    minimal, but also useful. There is still one big problem with it, however. Our
    language doesn’t have many useful operators (like division, logical negation,
    or even any comparisons besides less-than).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到“使用LLVM实现语言”的教程第6章。在我们的教程中的这一点上，我们现在有一个完全功能的语言，它相当简单，但也有用。然而，它还有一个很大的问题。我们的语言没有很多有用的运算符（比如除法、逻辑否定，甚至除了小于以外没有任何比较）。
- en: This chapter of the tutorial takes a wild digression into adding user-defined
    operators to the simple and beautiful Kaleidoscope language. This digression now
    gives us a simple and ugly language in some ways, but also a powerful one at the
    same time. One of the great things about creating your own language is that you
    get to decide what is good or bad. In this tutorial we’ll assume that it is okay
    to use this as a way to show some interesting parsing techniques.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的这一章将在简单而美丽的Kaleidoscope语言中添加用户定义的运算符。在某些方面，这种离题的结果使我们的语言变得简单但丑陋，但同时也是强大的。创建自己的语言的一大好处是你可以决定什么是好的或坏的。在本教程中，我们将假设使用这种方法来展示一些有趣的解析技术是可以的。
- en: At the end of this tutorial, we’ll run through an example Kaleidoscope application
    that renders the Mandelbrot set. This gives an example of what you can build with
    Kaleidoscope and its feature set.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程结束时，我们将运行一个渲染Mandelbrot集合的Kaleidoscope应用程序示例。这提供了一个使用Kaleidoscope及其特性集构建的示例。
- en: '6.1 User-defined Operators: the Idea'
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.1 用户自定义运算符：概念
- en: 'The “operator overloading” that we will add to Kaleidoscope is more general
    than languages like C++. In C++, you are only allowed to redefine existing operators:
    you can’t programatically change the grammar, introduce new operators, change
    precedence levels, etc. In this chapter, we will add this capability to Kaleidoscope,
    which will let the user round out the set of operators that are supported.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加到Kaleidoscope的“操作符重载”比C++等语言更通用。在C++中，你只能重新定义现有的操作符：你不能编程地改变语法，引入新的操作符，改变优先级等。在本章中，我们将向Kaleidoscope添加此功能，这将允许用户完善支持的运算符集。
- en: 'The point of going into user-defined operators in a tutorial like this is to
    show the power and flexibility of using a hand-written parser. Thus far, the parser
    we have been implementing uses recursive descent for most parts of the grammar
    and operator precedence parsing for the expressions. See Chapter 2 for details.
    Without using operator precedence parsing, it would be very difficult to allow
    the programmer to introduce new operators into the grammar: the grammar is dynamically
    extensible as the JIT runs.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的教程中讨论用户定义的运算符的目的是展示使用手写解析器的强大和灵活性。到目前为止，我们一直在实现的解析器对语法的大部分部分使用递归下降，对表达式使用操作符优先级解析。详情请参见第2章。如果不使用操作符优先级解析，允许程序员将新运算符引入语法将会非常困难：语法在JIT运行时是动态可扩展的。
- en: 'The two specific features we’ll add are programmable unary operators (right
    now, Kaleidoscope has no unary operators at all) as well as binary operators.
    An example of this is:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加的两个具体功能是可编程的一元运算符（现在，Kaleidoscope根本没有一元运算符）以及二元运算符。一个例子是：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Many languages aspire to being able to implement their standard runtime library
    in the language itself. In Kaleidoscope, we can implement significant parts of
    the language in the library!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多语言渴望能够在语言本身中实现其标准运行时库。在Kaleidoscope中，我们可以在库中实现语言的重要部分！
- en: 'We will break down implementation of these features into two parts: implementing
    support for user-defined binary operators and adding unary operators.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些功能的实现分为两部分：实现对用户定义的二元运算符的支持和添加一元运算符。
- en: 6.2 User-defined Binary Operators
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.2 用户自定义二元运算符
- en: 'Adding support for user-defined binary operators is pretty simple with our
    current framework. We’ll first add support for the unary/binary keywords:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们当前的框架添加对用户定义的二元运算符的支持非常简单。我们将首先添加对一元/二元关键字的支持：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This just adds lexer support for the unary and binary keywords, like we did
    in previous chapters. One nice thing about our current AST, is that we represent
    binary operators with full generalisation by using their ASCII code as the opcode.
    For our extended operators, we’ll use this same representation, so we don’t need
    any new AST or parser support.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是为一元和二元关键字添加了词法支持，就像我们在前几章中所做的那样。我们当前 AST 的一个好处是，我们通过使用它们的 ASCII 码作为操作码，用完全泛化的方式表示二元运算符。对于我们扩展的运算符，我们将使用相同的表示，因此我们不需要任何新的
    AST 或解析器支持。
- en: 'On the other hand, we have to be able to represent the definitions of these
    new operators, in the “def binary| 5” part of the function definition. In our
    grammar so far, the “name” for the function definition is parsed as the “prototype”
    production and into the PrototypeAST AST node. To represent our new user-defined
    operators as prototypes, we have to extend the PrototypeAST AST node like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们必须能够表示这些新运算符的定义，在函数定义的“def binary| 5”部分。到目前为止，我们的语法中，“名称”被解析为“原型”产生式，并转换为
    PrototypeAST AST 节点。为了将我们的新用户定义的运算符表示为原型，我们必须像这样扩展 PrototypeAST AST 节点：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Basically, in addition to knowing a name for the prototype, we now keep track
    of whether it was an operator, and if it was, what precedence level the operator
    is at. The precedence is only used for binary operators (as you’ll see below,
    it just doesn’t apply for unary operators). Now that we have a way to represent
    the prototype for a user-defined operator, we need to parse it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，除了知道原型的名称外，我们现在还要跟踪它是否是运算符，以及如果是运算符，则该运算符的优先级水平是多少。优先级仅用于二元运算符（如下所示，它对一元运算符不适用）。现在我们有了一种表示用户定义的运算符原型的方法，我们需要对其进行解析：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is all fairly straightforward parsing code, and we have already seen a
    lot of similar code in the past. One interesting part about the code above is
    the couple lines that set up FnName for binary operators. This builds names like
    “binary@” for a newly defined “@” operator. This then takes advantage of the fact
    that symbol names in the LLVM symbol table are allowed to have any character in
    them, including embedded nul characters.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这都是相当直接的解析代码，我们已经在过去看过很多类似的代码。上面代码的一个有趣部分是为二元运算符设置 FnName 的几行代码。这构建了类似“binary@”的名称，用于新定义的“@”运算符。然后，利用了
    LLVM 符号表中的符号名称允许包含任何字符，包括嵌入的空字符的事实。
- en: 'The next interesting thing to add, is codegen support for these binary operators.
    Given our current structure, this is a simple addition of a default case for our
    existing binary operator node:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 添加的下一个有趣的内容是对这些二元运算符的代码生成支持。鉴于我们当前的结构，这只是对现有二元运算符节点的默认情况进行简单添加：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see above, the new code is actually really simple. It just does a
    lookup for the appropriate operator in the symbol table and generates a function
    call to it. Since user-defined operators are just built as normal functions (because
    the “prototype” boils down to a function with the right name) everything falls
    into place.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在上面所见，新代码实际上非常简单。它只是在符号表中查找适当的运算符，并生成对其的函数调用。由于用户定义的运算符只是作为普通函数构建的（因为“原型”归结为具有正确名称的函数），所以一切都就位了。
- en: 'The final piece of code we are missing, is a bit of top-level magic:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们缺少的最后一部分代码是一点顶层魔法：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Basically, before codegening a function, if it is a user-defined operator, we
    register it in the precedence table. This allows the binary operator parsing logic
    we already have in place to handle it. Since we are working on a fully-general
    operator precedence parser, this is all we need to do to “extend the grammar”.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，在对函数进行代码生成之前，如果它是用户定义的运算符，我们将在优先级表中注册它。这使我们已经放置的二元运算符解析逻辑能够处理它。由于我们正在使用全面的运算符优先级解析器，这是我们“扩展语法”的全部内容。
- en: Now we have useful user-defined binary operators. This builds a lot on the previous
    framework we built for other operators. Adding unary operators is a bit more challenging,
    because we don’t have any framework for it yet - lets see what it takes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了有用的用户定义的二元运算符。这在我们为其他运算符构建的先前框架基础上构建了很多内容。添加一元运算符要困难一些，因为我们还没有为它构建任何框架
    - 看看需要什么。
- en: 6.3 User-defined Unary Operators
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.3 用户定义的一元运算符
- en: 'Since we don’t currently support unary operators in the Kaleidoscope language,
    we’ll need to add everything to support them. Above, we added simple support for
    the ‘unary’ keyword to the lexer. In addition to that, we need an AST node:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们当前不支持一元运算符在万花筒语言中，我们需要添加一切以支持它们。在上面，我们为词法分析器添加了对‘unary’关键字的简单支持。除此之外，我们还需要一个
    AST 节点：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This AST node is very simple and obvious by now. It directly mirrors the binary
    operator AST node, except that it only has one child. With this, we need to add
    the parsing logic. Parsing a unary operator is pretty simple: we’ll add a new
    function to do it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这个AST节点非常简单和明显。它直接反映了二元运算符AST节点，只是它只有一个子节点。因此，我们需要添加解析逻辑。解析一元运算符非常简单：我们将添加一个新函数来完成它：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The grammar we add is pretty straightforward here. If we see a unary operator
    when parsing a primary operator, we eat the operator as a prefix and parse the
    remaining piece as another unary operator. This allows us to handle multiple unary
    operators (e.g. `!!x`). Note that unary operators can’t have ambiguous parses
    like binary operators can, so there is no need for precedence information.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里添加的语法非常简单明了。如果在解析主要运算符时遇到一元运算符，我们将将该运算符作为前缀吞掉，并将剩余部分解析为另一个一元运算符。这使我们能够处理多个一元运算符（例如`!!x`）。请注意，一元运算符不像二元运算符那样具有歧义解析，因此不需要优先级信息。
- en: 'The problem with this function, is that we need to call ParseUnary from somewhere.
    To do this, we change previous callers of ParsePrimary to call ParseUnary instead:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的问题在于我们需要从某个地方调用ParseUnary。为此，我们需要更改之前调用ParsePrimary的调用者，改为调用ParseUnary：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With these two simple changes, we are now able to parse unary operators and
    build the AST for them. Next up, we need to add parser support for prototypes,
    to parse the unary operator prototype. We extend the binary operator code above
    with:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这两个简单的更改，我们现在能够解析一元运算符并为其构建AST。接下来，我们需要添加原型的解析器支持，以解析一元运算符原型。我们通过以下方式扩展上面的二元运算符代码：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As with binary operators, we name unary operators with a name that includes
    the operator character. This assists us at code generation time. Speaking of,
    the final piece we need to add is codegen support for unary operators. It looks
    like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与二元运算符一样，我们使用包含运算符字符的名称来命名一元运算符。这在代码生成时对我们有所帮助。说到这里，我们需要添加的最后一部分是一元运算符的代码生成支持。代码如下：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This code is similar to, but simpler than, the code for binary operators. It
    is simpler primarily because it doesn’t need to handle any predefined operators.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与二元运算符的代码类似，但更简单。主要因为它不需要处理任何预定义的运算符。
- en: 6.4 Kicking the Tires
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.4 试驾
- en: 'It is somewhat hard to believe, but with a few simple extensions we’ve covered
    in the last chapters, we have grown a real-ish language. With this, we can do
    a lot of interesting things, including I/O, math, and a bunch of other things.
    For example, we can now add a nice sequencing operator (printd is defined to print
    out the specified value and a newline):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有点难以置信，但通过我们在最后几章中介绍的一些简单扩展，我们已经构建了一个接近真实的语言。有了这个，我们可以做很多有趣的事情，包括I/O、数学和其他一堆事情。例如，我们现在可以添加一个不错的顺序运算符（printd被定义为打印指定值和一个换行符）：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can also define a bunch of other “primitive” operations, such as:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以定义一堆其他“原始”操作，比如：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Given the previous if/then/else support, we can also define interesting functions
    for I/O. For example, the following prints out a character whose “density” reflects
    the value passed in: the lower the value, the denser the character:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于之前的if/then/else支持，我们还可以为I/O定义有趣的函数。例如，以下函数根据传入的值打印出反映该值的“密度”的字符：值越低，字符越密集：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Evaluated to 0.000000 Based on these simple primitive operations, we can start
    to define more interesting things. For example, here’s a little function that
    solves for the number of iterations it takes a function in the complex plane to
    converge:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 评估为0.000000 基于这些简单的原始操作，我们可以开始定义更有趣的事物。例如，这里有一个解决复平面中函数收敛所需迭代次数的小函数：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This `z = z2 + c` function is a beautiful little creature that is the basis
    for computation of the Mandelbrot Set. Our mandelconverge function returns the
    number of iterations that it takes for a complex orbit to escape, saturating to
    255\. This is not a very useful function by itself, but if you plot its value
    over a two-dimensional plane, you can see the Mandelbrot set. Given that we are
    limited to using putchard here, our amazing graphical output is limited, but we
    can whip together something using the density plotter above:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`z = z2 + c`函数是曼德勃罗集的计算基础，是一个美丽的小生物。我们的mandelconverge函数返回一个复杂轨道逃逸所需的迭代次数，饱和到255。这个函数本身并不是很有用，但如果你在二维平面上绘制其值，就可以看到曼德勃罗集。鉴于我们在这里只能使用putchard，我们惊人的图形输出受到限制，但我们可以利用上面的密度绘图器拼凑出一些东西：
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Given this, we can try plotting out the mandlebrot set! Lets try it out:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们可以尝试绘制曼德勃罗集！让我们试一试：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: At this point, you may be starting to realize that Kaleidoscope is a real and
    powerful language. It may not be self-similar :), but it can be used to plot things
    that are!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可能开始意识到Kaleidoscope是一种真正而强大的语言。它可能不是自相似的 :), 但它可以用来绘制一些东西！
- en: With this, we conclude the “adding user-defined operators” chapter of the tutorial.
    We have successfully augmented our language, adding the ability to extend the
    language in the library, and we have shown how this can be used to build a simple
    but interesting end-user application in Kaleidoscope. At this point, Kaleidoscope
    can build a variety of applications that are functional and can call functions
    with side-effects, but it can’t actually define and mutate a variable itself.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个，我们结束了教程中的“添加用户定义运算符”章节。我们成功地扩展了我们的语言，在库中添加了扩展语言的能力，并展示了如何使用它来构建一个简单但有趣的端用户应用程序在Kaleidoscope中。在这一点上，Kaleidoscope可以构建各种功能齐全的应用程序，并可以调用具有副作用的函数，但它实际上无法定义和改变一个变量本身。
- en: Strikingly, variable mutation is an important feature of some languages, and
    it is not at all obvious how to add support for mutable variables without having
    to add an “SSA construction” phase to your front-end. In the next chapter, we
    will describe how you can add variable mutation without building SSA in your front-end.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 引人注目的是，变量突变是一些语言的重要特性，如何在不必在前端添加“SSA构造”阶段的情况下添加对可变变量的支持并不明显。在下一章中，我们将描述如何在前端中添加变量突变而不构建SSA。
