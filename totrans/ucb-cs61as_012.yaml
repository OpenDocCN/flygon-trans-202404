- en: Words and Sentences
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单词和句子
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: When we think of functions, we automatically assume math and numbers. In fact,
    in Racket and any other functional programming language, we can have functions
    that manipulate non-numerical values.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想到函数时，我们自动假设与数学和数字有关。实际上，在Racket和任何其他函数式编程语言中，我们可以有函数来操作非数值的值。
- en: Words
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单词
- en: 'Let''s say you defined a procedure called `square`:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你定义了一个名为`square`的过程：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But later wanted to access the actual word `'square` instead of the procedure,
    we would simply type `'square` (single quotation mark followed by the word square)
    to get the **literal word**. Notice how you do not need parentheses around the
    expression if you working with just a single word.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 但是以后想要访问实际单词`'square`而不是过程，我们只需输入`'square`（单引号后跟单词square）即可获得**文字单词**。请注意，如果你只是处理一个单词，你不需要在表达式周围加上括号。
- en: Sentences
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 句子
- en: '**Sentences** are just a collection of words grouped together with parentheses.
    To create a sentence, you need need one quotation outside the parentheses, like
    this `''(hi hey hello)`. Try practicing a bit by writing one or two words and
    sentences.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**句子**只是用括号分组的单词集合。要创建一个句子，你需要在括号外面加上一个引号，就像这样`''(hi hey hello)`。尝试通过写一两个单词和句子来练习一下。'
- en: '**Test Your Understanding**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: Try each of the following in the Racket interpreter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Racket解释器中尝试以下每一个。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`quote`'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`quote`'
- en: 'The `''` you saw in the above sections is actually an abbreviation for a function
    called `quote`. This means that:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你在上面的部分看到的`'`实际上是一个名为`quote`的函数的缩写。这意味着：
- en: '`''x` is equivalent to `(quote x)`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''x`等同于`(quote x)`'
- en: '`''(hi hey hello)` is equivalent to `(quote (hi hey hello))`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''(hi hey hello)`等同于`(quote (hi hey hello))`'
- en: '`quote` is different from most other procedures in that it does not evaluate
    its argument. Functions that exhibit this type of behavior are **special forms**.
    You do not need to understand special forms for now; we will go more in depth
    on this topic in a later subsection. For now, it will suffice to know that `quote`
    is a function that takes in one argument and returns it as a word or sentence.
    Take the following example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`quote`与大多数其他过程不同，因为它不评估其参数。表现出这种行为的函数是**特殊形式**。你现在不需要理解特殊形式；我们将在后面的小节中更深入地讨论这个主题。现在，知道`quote`是一个接受一个参数并将其作为单词或句子返回的函数就足够了。看下面的例子：'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Since `quote` is used quite often, it is given the abbreviation `'`, a single
    quotation mark. Remember that, although it may seem this way in its abbreviated
    form, `quote` is simply a function that can be called like any other function
    in Racket.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`quote`经常被使用，它被赋予了缩写`'`，一个单引号。请记住，尽管在缩写形式中可能是这样，但`quote`只是一个函数，可以像其他函数一样在Racket中调用。
- en: Word and Sentence Selectors
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单词和句子选择器
- en: When working with words and sentences, it would help to have procedures that
    manipulate them. The procedures themselves are simple. Combining them correctly
    to accomplish your goal is going to the hard part. For now, here is a list of
    procedures you can use to select data from words or sentences.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理单词和句子时，拥有能够操作它们的过程会很有帮助。这些过程本身很简单。正确地组合它们以完成目标将是困难的部分。现在，这里是一些你可以用来从单词或句子中选择数据的过程列表。
- en: '`first`'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`first`'
- en: '`first` takes in a word and returns the first letter of the word, or takes
    in a sentence and returns the first word of the sentence.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`first`接受一个单词并返回单词的第一个字母，或接受一个句子并返回句子的第一个单词。'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`last`'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`last`'
- en: '`last` takes in a word and returns the last letter of the word, or takes in
    a sentence and returns the last word of the sentence.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`last`接受一个单词并返回单词的最后一个字母，或接受一个句子并返回句子的最后一个单词。'
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`butfirst` or `bf`'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`butfirst`或`bf`'
- en: '`butfirst`, or its abbreviated version `bf`, takes in a word and returns all
    but the first letter of the word, or takes in a sentence and returns all but the
    first word of the sentence.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`butfirst`或其缩写版本`bf`接受一个单词并返回除了第一个字母之外的所有字母，或接受一个句子并返回除了第一个单词之外的所有单词。'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`butlast` or `bl`'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`butlast`或`bl`'
- en: '`butlast`, or its abbreviated version `bl`, takes in a word and returns all
    but the last letter of the word, or takes in a sentence and returns all but the
    last word of the sentence.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`butlast`或其缩写版本`bl`接受一个单词并返回除了最后一个字母之外的所有字母，或接受一个句子并返回除了最后一个单词之外的所有单词。'
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`item`'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`item`'
- en: '`item` takes in a number `n` and a word and returns the `n`th letter in the
    word. Or, it takes in a number `n` and a sentence and returns the `n`th word in
    the sentence.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`item`接受一个数字`n`和一个单词，并返回单词中的第`n`个字母。或者，它接受一个数字`n`和一个句子，并返回句子中的第`n`个单词。'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Test Your Understanding**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: Try and guess what Racket will output for the following expressions, then check
    your answers with the Racket interpreter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试猜测 Racket 将对以下表达式输出什么，然后用 Racket 解释器检查你的答案。
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`equal?` is a function that checks if two elements are the same.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`equal?` 是一个检查两个元素是否相同的函数。'
- en: Word and Sentence Constructors
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单词和句子构造器
- en: Now that we can take apart a word or sentence, lets learn how to put them together.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何拆分单词或句子，让我们学习如何将它们组合在一起。
- en: '`word`'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`word`'
- en: '`word` takes in any number of words as arguments [concatenates](http://dictionary.reference.com/browse/concatenate)
    them into one big word.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`word` 接受任意数量的单词作为参数，将它们连接成一个大单词。'
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`sentence` or `se`'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`sentence` 或 `se`'
- en: '`sentence`, or its abbreviated version `se`, takes in any number of words or
    sentences as arguments and creates one sentence of all of its arguments.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`sentence`，或其缩写版本 `se`，接受任意数量的单词或句子作为参数，并创建一个包含所有参数的句子。'
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The Empty Word
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空单词
- en: There is an empty word that you can combine with other words which will have
    no effect when used. This is represented by `""`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个空单词，你可以将其与其他单词组合在一起，使用时不会产生任何效果。这由 `""` 表示。
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The Empty Sentence
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空句子
- en: There is also an empty sentence that you can combine with other sentences which
    will have no effect when used. This is represented by `'()`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个空句子，你可以将其与其他句子组合在一起，使用时不会产生任何效果。这由 `'()` 表示。
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: At the moment it may not be clear as to why need these empty words and sentences.
    Keep these in mind for now, as they will be very useful when we learn recursion
    in Lesson 0-3.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 目前可能不清楚为什么需要这些空单词和句子。现在记住它们，当我们学习 Lesson 0-3 中的递归时，它们将非常有用。
- en: '**Test Your Understanding**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: '**Note:** This is Exercise 1 on your Homework.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 这是你的作业中的练习1。'
- en: Let's build some functions to deal with words and sentences. We'll define the
    `second` procedure for you - this procedure returns the second letter in a word,
    or the second word in a sentence.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一些处理单词和句子的函数。我们将为你定义 `second` 过程 - 这个过程返回单词中的第二个字母，或句子中的第二个单词。
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Write a procedure `first-two` that takes a word as its argument, returning a
    two-letter word containing the first two letters of the argument.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个名为 `first-two` 的过程，它以单词作为参数，返回一个包含参数的前两个字母的两个字母单词。
- en: Write a procedure `two-first` that takes two words as arguments, returning a
    two-letter word containing the first letters of the two arguments.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个名为 `two-first` 的过程，它接受两个单词作为参数，返回一个包含这两个参数的首字母的两个字母单词。
- en: Now write a procedure `two-first-sent` that takes a two-word sentence as argument,
    returning a two-letter word containing the first letters of the two words.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编写一个名为 `two-first-sent` 的过程，它接受一个由两个单词组成的句子作为参数，返回一个包含这两个单词的首字母的两个字母单词。
- en: Pitfalls
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 陷阱
- en: Basically the only punctuation you can use when working with words and sentences
    are `!` and `?`. You have already seen that the quote `'` has a special meaning
    in Racket. The period and comma also have special meaning, so you cannot use those,
    either.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，在处理单词和句子时，你可以使用的唯一标点符号是 `!` 和 `?`。你已经看到引号 `'` 在 Racket 中有特殊含义。句号和逗号也有特殊含义，因此你也不能使用它们。
- en: 'As you saw in an earlier exercise, there''s a difference between a word and
    a sentence containing one word. For example, people often mistakenly assume that
    the `butfirst` of a two-word sentence such as `(computer science)` is `''science`.
    In actuality, it is a sentence with one word: `(science)`. Another way of proving
    the difference between a word and a one-word sentence is by `count`-ing both of
    them:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在早前的练习中看到的，单词和包含一个单词的句子之间有区别。例如，人们经常错误地认为两个单词的句子的 `butfirst`，比如 `(计算机科学)`
    是 `'科学`。实际上，它是一个包含一个单词的句子：`(科学)`。证明单词和一个单词句子之间的区别的另一种方法是通过对���们进行 `count`：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Takeaways
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: We can build words and sentences using `word` and `sentence`, respectively.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用 `word` 和 `sentence` 分别构建单词和句子。
- en: We can also make words and sentences using a quote.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们也可以使用引号来构建单词和句子。
- en: We can retrieve parts of a word or parts of a sentence by using procedures like
    `first`, `butfirst`, `last` and `butlast`.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用 `first`、`butfirst`、`last` 和 `butlast` 等过程来检索单词或句子的部分。
