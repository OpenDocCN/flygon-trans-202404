- en: Words and Sentences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we think of functions, we automatically assume math and numbers. In fact,
    in Racket and any other functional programming language, we can have functions
    that manipulate non-numerical values.
  prefs: []
  type: TYPE_NORMAL
- en: Words
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s say you defined a procedure called `square`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: But later wanted to access the actual word `'square` instead of the procedure,
    we would simply type `'square` (single quotation mark followed by the word square)
    to get the **literal word**. Notice how you do not need parentheses around the
    expression if you working with just a single word.
  prefs: []
  type: TYPE_NORMAL
- en: Sentences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Sentences** are just a collection of words grouped together with parentheses.
    To create a sentence, you need need one quotation outside the parentheses, like
    this `''(hi hey hello)`. Try practicing a bit by writing one or two words and
    sentences.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Test Your Understanding**'
  prefs: []
  type: TYPE_NORMAL
- en: Try each of the following in the Racket interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`quote`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `''` you saw in the above sections is actually an abbreviation for a function
    called `quote`. This means that:'
  prefs: []
  type: TYPE_NORMAL
- en: '`''x` is equivalent to `(quote x)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''(hi hey hello)` is equivalent to `(quote (hi hey hello))`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quote` is different from most other procedures in that it does not evaluate
    its argument. Functions that exhibit this type of behavior are **special forms**.
    You do not need to understand special forms for now; we will go more in depth
    on this topic in a later subsection. For now, it will suffice to know that `quote`
    is a function that takes in one argument and returns it as a word or sentence.
    Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Since `quote` is used quite often, it is given the abbreviation `'`, a single
    quotation mark. Remember that, although it may seem this way in its abbreviated
    form, `quote` is simply a function that can be called like any other function
    in Racket.
  prefs: []
  type: TYPE_NORMAL
- en: Word and Sentence Selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working with words and sentences, it would help to have procedures that
    manipulate them. The procedures themselves are simple. Combining them correctly
    to accomplish your goal is going to the hard part. For now, here is a list of
    procedures you can use to select data from words or sentences.
  prefs: []
  type: TYPE_NORMAL
- en: '`first`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`first` takes in a word and returns the first letter of the word, or takes
    in a sentence and returns the first word of the sentence.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`last`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`last` takes in a word and returns the last letter of the word, or takes in
    a sentence and returns the last word of the sentence.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`butfirst` or `bf`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`butfirst`, or its abbreviated version `bf`, takes in a word and returns all
    but the first letter of the word, or takes in a sentence and returns all but the
    first word of the sentence.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`butlast` or `bl`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`butlast`, or its abbreviated version `bl`, takes in a word and returns all
    but the last letter of the word, or takes in a sentence and returns all but the
    last word of the sentence.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`item`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`item` takes in a number `n` and a word and returns the `n`th letter in the
    word. Or, it takes in a number `n` and a sentence and returns the `n`th word in
    the sentence.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Test Your Understanding**'
  prefs: []
  type: TYPE_NORMAL
- en: Try and guess what Racket will output for the following expressions, then check
    your answers with the Racket interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`equal?` is a function that checks if two elements are the same.'
  prefs: []
  type: TYPE_NORMAL
- en: Word and Sentence Constructors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we can take apart a word or sentence, lets learn how to put them together.
  prefs: []
  type: TYPE_NORMAL
- en: '`word`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`word` takes in any number of words as arguments [concatenates](http://dictionary.reference.com/browse/concatenate)
    them into one big word.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`sentence` or `se`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`sentence`, or its abbreviated version `se`, takes in any number of words or
    sentences as arguments and creates one sentence of all of its arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The Empty Word
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is an empty word that you can combine with other words which will have
    no effect when used. This is represented by `""`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The Empty Sentence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is also an empty sentence that you can combine with other sentences which
    will have no effect when used. This is represented by `'()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: At the moment it may not be clear as to why need these empty words and sentences.
    Keep these in mind for now, as they will be very useful when we learn recursion
    in Lesson 0-3.
  prefs: []
  type: TYPE_NORMAL
- en: '**Test Your Understanding**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** This is Exercise 1 on your Homework.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's build some functions to deal with words and sentences. We'll define the
    `second` procedure for you - this procedure returns the second letter in a word,
    or the second word in a sentence.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Write a procedure `first-two` that takes a word as its argument, returning a
    two-letter word containing the first two letters of the argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a procedure `two-first` that takes two words as arguments, returning a
    two-letter word containing the first letters of the two arguments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now write a procedure `two-first-sent` that takes a two-word sentence as argument,
    returning a two-letter word containing the first letters of the two words.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pitfalls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Basically the only punctuation you can use when working with words and sentences
    are `!` and `?`. You have already seen that the quote `'` has a special meaning
    in Racket. The period and comma also have special meaning, so you cannot use those,
    either.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you saw in an earlier exercise, there''s a difference between a word and
    a sentence containing one word. For example, people often mistakenly assume that
    the `butfirst` of a two-word sentence such as `(computer science)` is `''science`.
    In actuality, it is a sentence with one word: `(science)`. Another way of proving
    the difference between a word and a one-word sentence is by `count`-ing both of
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Takeaways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can build words and sentences using `word` and `sentence`, respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also make words and sentences using a quote.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can retrieve parts of a word or parts of a sentence by using procedures like
    `first`, `butfirst`, `last` and `butlast`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
