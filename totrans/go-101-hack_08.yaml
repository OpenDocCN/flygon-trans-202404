- en: Short variable declaration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 短变量声明
- en: Short variable declaration
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 短变量声明
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Short variable declaration is a very convenient manner of "declaring variable"
    in `Go`:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 短变量声明是在 `Go` 中“声明变量”的一种非常便利的方式：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It is shorthand of following (Please notice there is no type):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是以下内容的缩写（请注意没有类型）：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `Go` compiler will infer the type according to the value of variable. It
    is a very handy feature, but on the other side of coin, it also brings some pitfalls
    which you should pay attention to:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`Go` 编译器将根据变量的值推断类型。这是一个非常方便的特性，但另一方面，它也带来了一些你应该注意的陷阱：'
- en: '(1) This format can only be used in functions:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: （1）此格式只能在函数中使用：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The compiler will complain the following words:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器将抱怨以下内容：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '(2) You must declare **at least 1 new variable**:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: （2）你必须声明**至少 1 个新变量**：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In `i, err := 2, false` statement, only `err` is a new declared variable, `var`
    is actually declared in `var i = 1`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `i, err := 2, false` 语句中，只有 `err` 是一个新声明的变量，`var` 实际上在 `var i = 1` 中声明。
- en: '(3) The short variable declaration can shadow the global variable declaration,
    and it may not be what you want, and gives you a big surprise:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: （3）短变量声明可以遮蔽全局变量声明，这可能不是你想要的，会带来很大的惊喜：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`i, err := 2, true` actually declares a **new local i** which makes the **global
    i** inaccessible in `main` function. To use the global variable but not introducing
    a new local one, one solution maybe like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`i, err := 2, true` 实际上声明了一个**新的本地 i**，这使得 `main` 函数中的**全局 i** 不可访问。要使用全局变量而不引入新的本地变量，可能的一个解决方案是这样的：'
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Reference：
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：
- en: '[Short variable declarations](https://golang.org/ref/spec#Short_variable_declarations).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[短变量声明](https://golang.org/ref/spec#Short_variable_declarations)。'
