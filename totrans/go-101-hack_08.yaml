- en: Short variable declaration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Short variable declaration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Short variable declaration is a very convenient manner of "declaring variable"
    in `Go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is shorthand of following (Please notice there is no type):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Go` compiler will infer the type according to the value of variable. It
    is a very handy feature, but on the other side of coin, it also brings some pitfalls
    which you should pay attention to:'
  prefs: []
  type: TYPE_NORMAL
- en: '(1) This format can only be used in functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The compiler will complain the following words:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '(2) You must declare **at least 1 new variable**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In `i, err := 2, false` statement, only `err` is a new declared variable, `var`
    is actually declared in `var i = 1`.
  prefs: []
  type: TYPE_NORMAL
- en: '(3) The short variable declaration can shadow the global variable declaration,
    and it may not be what you want, and gives you a big surprise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`i, err := 2, true` actually declares a **new local i** which makes the **global
    i** inaccessible in `main` function. To use the global variable but not introducing
    a new local one, one solution maybe like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Referenceï¼š
  prefs: []
  type: TYPE_NORMAL
- en: '[Short variable declarations](https://golang.org/ref/spec#Short_variable_declarations).'
  prefs: []
  type: TYPE_NORMAL
