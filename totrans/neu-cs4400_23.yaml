- en: Functions & Function ValuesTuesday, January 24th
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PLAI §4](plai.pdf#chapter.4 "An Introduction to Functions")'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now that we have a form for local bindings, which forced us to deal with proper
    substitutions and everything that is related, we can get to functions. The concept
    of a function is itself very close to substitution, and to our `with` form. For
    example, when we write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'then the `{* x x}` body is itself parametrized over some value for `x`. If
    we take this expression and take out the `5`, we’re left with something that has
    all of the necessary ingredients of a function — a bunch of code that is parameterized
    over some input identifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We only need to replace `with` and use a proper name that indicates that it’s
    a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now we have a new form in our language, one that should have a function as its
    meaning. As we have seen in the case of `with` expressions, we also need a new
    form to *use* these functions. We will use `call` for this, so that
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'will be the same as the original `with` expression that we started with — the
    `fun` expression is like the `with` expression with no value, and applying it
    on `5` is providing that value back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, this does not help much — all we get is a way to use local bindings
    that is more verbose from what we started with. What we’re really missing is a
    way to *name* these functions. If we get the right evaluation rules, we can evaluate
    a `fun` expression to some value — which will allow us to bind it to a variable
    using `with`. Something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this expression, we say that `x` is the formal parameter (or argument),
    and the `5` and `6` are actual parameters (sometimes abbreviated as formals and
    actuals). Note that naming functions often helps, but many times there are small
    functions that are fine to specify without a name — for example, consider a two-stage
    addition function, where there is no apparent good name for the returned function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
