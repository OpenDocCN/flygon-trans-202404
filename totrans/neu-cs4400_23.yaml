- en: Functions & Function ValuesTuesday, January 24th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数和函数值星期二，1月24日
- en: '[PLAI §4](plai.pdf#chapter.4 "An Introduction to Functions")'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §4](plai.pdf#chapter.4 "函数简介")'
- en: 'Now that we have a form for local bindings, which forced us to deal with proper
    substitutions and everything that is related, we can get to functions. The concept
    of a function is itself very close to substitution, and to our `with` form. For
    example, when we write:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个用于本地绑定的形式，这迫使我们处理适当的替换和所有相关的事情，我们可以开始谈论函数了。函数的概念本身与替换非常接近，也与我们的`with`形式接近。例如，当我们写下：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'then the `{* x x}` body is itself parametrized over some value for `x`. If
    we take this expression and take out the `5`, we’re left with something that has
    all of the necessary ingredients of a function — a bunch of code that is parameterized
    over some input identifier:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`{* x x}`体本身是针对`x`的某个值进行参数化的。如果我们取出这个表达式中的`5`，我们剩下的就是一个具有函数所有必要成分的东西——一堆代码，它是针对某个输入标识符进行参数化的：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We only need to replace `with` and use a proper name that indicates that it’s
    a function:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要替换`with`并使用一个适当的名称来指示它是一个函数：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we have a new form in our language, one that should have a function as its
    meaning. As we have seen in the case of `with` expressions, we also need a new
    form to *use* these functions. We will use `call` for this, so that
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的语言中有了一个新的形式，这个形式应该有一个作为其含义的功能。正如我们在`with`表达式的情况中所看到的，我们也需要一个新的形式来*使用*这些功能。我们将使用`call`来实现这一点，这样
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'will be the same as the original `with` expression that we started with — the
    `fun` expression is like the `with` expression with no value, and applying it
    on `5` is providing that value back:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将与我们最初开始的原始`with`表达式相同——`fun`表达式就像没有值的`with`表达式，将其应用于`5`就是提供那个值：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Of course, this does not help much — all we get is a way to use local bindings
    that is more verbose from what we started with. What we’re really missing is a
    way to *name* these functions. If we get the right evaluation rules, we can evaluate
    a `fun` expression to some value — which will allow us to bind it to a variable
    using `with`. Something like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这并没有太大帮助——我们得到的只是一种比起最初更啰嗦的使用本地绑定的方式。我们真正缺少的是一种*命名*这些函数的方法。如果我们得到正确的评估规则，我们可以将`fun`表达式评估为某个值——这将允许我们使用`with`将其绑定到一个变量。类似这样：
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this expression, we say that `x` is the formal parameter (or argument),
    and the `5` and `6` are actual parameters (sometimes abbreviated as formals and
    actuals). Note that naming functions often helps, but many times there are small
    functions that are fine to specify without a name — for example, consider a two-stage
    addition function, where there is no apparent good name for the returned function:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个表达式中，我们说`x`是形式参数（或参数），而`5`和`6`是实际参数（有时缩写为形式和实际）。请注意，通常给函数命名是有帮助的，但很多时候有些小函数可以不用指定名称——例如，考虑一个两阶段加法函数，其中没有明显好的返回函数的名称：
- en: '[PRE6]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
