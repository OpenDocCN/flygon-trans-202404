- en: Parallelism
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work with the ideas in this section, you''ll need our concurrency library.
    From a lab machine (or over SSH), type the following into your Scheme interpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: An Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many things we take for granted in ordinary programming become problematic
    when there is any kind of parallelism involved. These situations include:'
  prefs: []
  type: TYPE_NORMAL
- en: multiple processors (hardware) sharing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: software multithreading (simulated parallelism)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: operating system input/output device handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is covered in greater detail in CS 162 (operating systems).
  prefs: []
  type: TYPE_NORMAL
- en: Why Parallelism Is Hard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see in simple terms what the problem is, think about the Scheme expression
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you''ll learn in more detail in 61C, Scheme translates this into a sequence
    of instructions to your computer. The details depend on the particular computer
    model, but it''ll be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You don't have to understand the details of the code here (you'll learn about
    it in 61C), but you should have an idea of what's going on.
  prefs: []
  type: TYPE_NORMAL
- en: (A *register* is a place where computers put values so that it can operate on
    them. So a computer usually can't immediately add 1 to x - it has to first put
    the value of x in a register, and only then can it add 1 to it.)
  prefs: []
  type: TYPE_NORMAL
- en: Ordinarily we would expect this sequence of instructions to have the desired
    effect. If the value of x was 100 before these instructions, it should be 101
    after them.
  prefs: []
  type: TYPE_NORMAL
- en: 'But imagine that this sequence of three instructions can be interrupted by
    other events that come in the middle. To be specific, let''s suppose that someone
    else is also trying to add 1 to x''s value. Now we might have this sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The ultimate value of x will be 101, instead of the correct 102.
  prefs: []
  type: TYPE_NORMAL
- en: The general idea we need to solve this problem is the critical section, which
    means a sequence of instructions that mustn't be interrupted. The three instructions
    starting with the load and ending with the store are a critical section.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, we don't have to say that these instructions can't be interrupted;
    the only condition we must enforce is that they can't be interrupted by another
    process that uses the variable x. It's okay if another process wants to add 1
    to y meanwhile. So we'd like to be able to say something like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Levels of Abstraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Computers don''t really have instructions quite like `reserve` and `release`,
    but we''ll see that they do provide similar mechanisms. A typical programming
    environment includes concurrency control mechanisms at three levels of abstraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The serializer and the mutex are, in SICP, abstract data types. There is a constructor
    `make-serializer` that's implemented using a mutex, and a constructor `make-mutex`
    that's implemented using `test-and-set!`, which is a (simulated, in our case)
    hardware instruction.
  prefs: []
  type: TYPE_NORMAL
- en: We'll go over serializers and mutexes in the coming sections.
  prefs: []
  type: TYPE_NORMAL
