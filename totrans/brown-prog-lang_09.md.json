["```\ndata NumList:\n  | nl-empty\n  | nl-link(first :: Number, rest :: NumList)\nend\n```", "```\nnl-empty\n```", "```\nnl-link(4, nl-link(4, nl-empty))\n```", "```\n    cases (NumList) nl-empty:\n      | nl-empty => \"empty!\"\n      | nl-link(first, rest) => \"not empty\"\n    end\n\n=>  \"empty!\"\n```", "```\n    cases (NumList) nl-link(1, nl-link(2, nl-empty)):\n      | nl-empty => \"empty!\"\n      | nl-link(first, rest) => first\n    end\n\n=>  1\n```", "```\nnl-link(1,\n  nl-link(2,\n    nl-link(3,\n      nl-link(4,\n        nl-link(5,\n          nl-link(6,\n            nl-link(7,\n              nl-link(8,\n                nl-empty))))\n```", "```\nfun contains-3(nl :: NumList) -> Boolean:\n  doc: \"Produces true if the list contains 3, false otherwise\"\nend\n```", "```\nfun contains-3(nl :: NumList) -> Boolean:\n  doc: \"Produces true if the list contains 3, false otherwise\"\nwhere:\n  contains-3(nl-empty) is false\n  contains-3(nl-link(3, nl-empty)) is true\n  contains-3(nl-link(1, nl-link(3, nl-empty))) is true\n  contains-3(nl-link(1, nl-link(2, nl-link(3, nl-link(4, nl-empty))))) is true\n  contains-3(nl-link(1, nl-link(2, nl-link(5, nl-link(4, nl-empty))))) is false\nend\n```", "```\nfun contains-3(nl :: NumList) -> Boolean:\n  doc: \"Produces true if the list contains 3, false otherwise\"\n  cases (NumList) nl:\n    | nl-empty => ...\n    | nl-link(first, rest) =>\n      ... first ...\n      ... rest ...\n  end\nend\n```", "```\nfun contains-3(nl :: NumList) -> Boolean:\n  cases (NumList) nl:\n    | nl-empty => false\n    | nl-link(first, rest) =>\n      if first == 3:\n        true\n      else:\n        # handle rest here\n      end\n  end\nend\n```", "```\nfun contains-3(nl :: NumList) -> Boolean:\n  cases (NumList) nl:\n    | nl-empty => false\n    | nl-link(first, rest) =>\n      if first == 3:\n        true\n      else:\n        cases (NumList) rest:\n          | nl-empty => ...\n          | nl-link(first-of-rest, rest-of-rest) =>\n            ... first-of-rest ...\n            ... rest-of-rest ...\n        end\n      end\n  end\nend\n```", "```\nfun contains-3(nl :: NumList) -> Boolean:\n  cases (NumList) nl:\n    | nl-empty => false\n    | nl-link(first, rest) =>\n      if first == 3:\n        true\n      else:\n        cases (NumList) rest:\n          | nl-empty => false\n          | nl-link(first-of-rest, rest-of-rest) =>\n            if first-of-rest == 3:\n              true\n            else:\n              # fill in here ...\n            end\n        end\n      end\n  end\nend\n```", "```\nfun contains-3(nl :: NumList) -> Boolean:\n  cases (NumList) nl:\n    | nl-empty => false\n    | nl-link(first, rest) =>\n      if first == 3:\n        true\n      else:\n        cases (NumList) rest:\n          | nl-empty => false\n          | nl-link(first-of-rest, rest-of-rest) =>\n            if first-of-rest == 3:\n              true\n            else:\n              cases (NumList) rest-of-rest:\n                | nl-empty => ...\n                | nl-link(first-of-rest-of-rest, rest-of-rest-of-rest) =>\n                  ... first-of-rest-of-rest ...\n                  ... rest-of-rest-of-rest ...\n              end\n            end\n        end\n      end\n  end\nend\n```", "```\nfun contains-3(nl :: NumList) -> Boolean:\n  cases (NumList) nl:\n    | nl-empty => false\n    | nl-link(first, rest) =>\n      if first == 3:\n        true\n      else:\n        # what to do with rest?\n      end\n  end\nend\n```", "```\nfun contains-3(nl :: NumList) -> Boolean:\n  cases (NumList) nl:\n    | nl-empty => false\n    | nl-link(first, rest) =>\n      if first == 3:\n        true\n      else:\n        contains-3(rest)\n      end\n  end\nend\n```", "```\ncontains-3(nl-link(1, nl-link(3, nl-empty)))\n```", "```\n=>  cases (NumList) nl-link(1, nl-link(3, nl-empty)):\n       | nl-empty => false\n       | nl-link(first, rest) =>\n         if first == 3:\n           true\n         else:\n           contains-3(rest)\n         end\n     end\n```", "```\n=>  if 1 == 3:\n      true\n    else:\n      contains-3(nl-link(3, nl-empty))\n    end\n```", "```\n=>  if false:\n      true\n    else:\n      contains-3(nl-link(3, nl-empty))\n    end\n\n=>  contains-3(nl-link(3, nl-empty))\n```", "```\n=>  cases (NumList) nl-link(3, nl-empty):\n      | nl-empty => false\n      | nl-link(first, rest) =>\n        if first == 3:\n          true\n        else:\n          contains-3(rest)\n        end\n    end\n```", "```\n=>  if 3 == 3:\n      true\n    else:\n      contains-3(nl-empty)\n    end\n```", "```\n=>  if true:\n      true\n    else:\n      contains-3(nl-empty)\n    end\n\n=> true\n```", "```\n#|\nfun num-list-fun(nl :: NumList) -> ???:\n  cases (NumList) nl:\n    | nl-empty => ...\n    | nl-link(first, rest) =>\n      ... first ...\n      ... rest ...\n  end\nend\n|#\n```", "```\n#|\nfun num-list-fun(nl :: NumList) -> ???:\n  cases (NumList) nl:\n    | nl-empty => ...\n    | nl-link(first, rest) =>\n      ... first ...\n      ... num-list-fun(rest) ...\n  end\nend\n|#\n```"]