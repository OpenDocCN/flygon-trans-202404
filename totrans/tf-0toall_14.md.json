["```\n# Lab 5 Logistic Regression Classifier\nimport tensorflow as tf\nimport numpy as np\ntf.set_random_seed(777)  # for reproducibility\n\nxy = np.loadtxt('data-03-diabetes.csv', delimiter=',', dtype=np.float32)\nx_data = xy[:, 0:-1]\ny_data = xy[:, [-1]]\n\nprint(x_data.shape, y_data.shape)\n\n# placeholders for a tensor that will be always fed.\nX = tf.placeholder(tf.float32, shape=[None, 8])\nY = tf.placeholder(tf.float32, shape=[None, 1])\n\nW = tf.Variable(tf.random_normal([8, 1]), name='weight')\nb = tf.Variable(tf.random_normal([1]), name='bias')\n\n# Hypothesis using sigmoid: tf.div(1., 1\\. + tf.exp(-tf.matmul(X, W)))\nhypothesis = tf.sigmoid(tf.matmul(X, W) + b)\n\n# cost/loss function\ncost = -tf.reduce_mean(Y * tf.log(hypothesis) + (1 - Y) *\n                       tf.log(1 - hypothesis))\n\ntrain = tf.train.GradientDescentOptimizer(learning_rate=0.01).minimize(cost)\n\n# Accuracy computation\n# True if hypothesis>0.5 else False\npredicted = tf.cast(hypothesis > 0.5, dtype=tf.float32)\naccuracy = tf.reduce_mean(tf.cast(tf.equal(predicted, Y), dtype=tf.float32))\n\n# Launch graph\nwith tf.Session() as sess:\n    # Initialize TensorFlow variables\n    sess.run(tf.global_variables_initializer())\n\n    for step in range(10001):\n        cost_val, _ = sess.run([cost, train], feed_dict={X: x_data, Y: y_data})\n        if step % 200 == 0:\n            print(step, cost_val)\n\n    # Accuracy report\n    h, c, a = sess.run([hypothesis, predicted, accuracy],\n                       feed_dict={X: x_data, Y: y_data})\n    print(\"\\nHypothesis: \", h, \"\\nCorrect (Y): \", c, \"\\nAccuracy: \", a)\n\n'''\n0 0.82794\n200 0.755181\n400 0.726355\n600 0.705179\n800 0.686631\n...\n9600 0.492056\n9800 0.491396\n10000 0.490767\n\n...\n\n [ 1.]\n [ 1.]\n [ 1.]]\nAccuracy:  0.762846\n''' \n```"]