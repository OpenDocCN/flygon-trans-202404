["```\n(define (make-account balance) \n  (define (withdraw amount) \n    (set! balance (- balance amount)) balance) \n  (define (deposit amount) \n    (set! balance (+ balance amount)) balance) \n  (define (dispatch msg) \n    (cond \n      ((eq? msg 'withdraw) withdraw) \n      ((eq? msg 'deposit) deposit) ) ) \n  dispatch) \n```", "```\n(withdraw 25)\n75\n(withdraw 25)\n50\n(withdraw 60)\n\"Insufficient funds\"\n(withdraw 15)\n35 \n```", "```\n(define balance 100)\n\n(define (withdraw amount)\n  (if (>= balance amount)\n      (begin (set! balance (- balance amount))\n             balance)\n      \"Insufficient funds\")) \n```", "```\n(set! balance (- balance amount)) \n```", "```\n(set! [name] [new-value]) \n```", "```\n(begin [exp1] [exp2] ... [expk]) \n```", "```\n(define balance 100)\n\n(define (withdraw amount)\n  (if (>= balance amount)\n      (begin (set! balance (- balance amount))\n             balance)\n      \"Insufficient funds\")) \n```", "```\n(define new-withdraw\n  (let ((balance 100))\n    (lambda (amount)\n      (if (>= balance amount)\n          (begin (set! balance (- balance amount))\n                 balance)\n          \"Insufficient funds\")))) \n```", "```\n> (new-withdraw 10)\n90\n> (new-withdraw 30)\n60 \n```", "```\n(define (make-account balance) \n  (define (withdraw amount) \n    (set! balance (- balance amount)) balance) \n  (define (deposit amount) \n    (set! balance (+ balance amount)) balance) \n  (define (dispatch msg) \n    (cond ((eq? msg 'withdraw) withdraw) \n          ((eq? msg 'deposit) deposit) ) ) \n  dispatch) \n```", "```\n(define (make-account init-amount) \n  (let (______________________) \n    (define (withdraw amount) \n      (set! balance (- balance amount)) balance) \n    (define (deposit amount) \n      (set! balance (+ balance amount)) balance) \n    (define (dispatch msg) \n      (cond ((eq? msg 'withdraw) withdraw) \n            ((eq? msg 'deposit) deposit) ) ) \n    dispatch) ) \n```", "```\n> (define acc (make-account 100)) \nacc \n> (acc 'balance) \n100 \n```", "```\n> (define acc (make-account 100)) \nacc \n> ((acc 'withdraw) 50) \n50 \n> ((acc 'deposit) 10) \n60\n> (acc 'balance)\n60\n> (acc 'transactions) \n((deposit 10) (withdraw 50)) \n```", "```\n(define (make-account init-amount) \n  (let ((balance init-amount)\n        (transactions '())) \n    (define (withdraw amount) \n      (set! balance (- balance amount))\n      (set! transactions (cons (list 'withdraw amount) transactions)) \n      balance) \n    (define (deposit amount) \n      (set! balance (+ balance amount))\n      (set! transactions (cons (list 'deposit amount) transactions)) \n      balance) \n    (define (dispatch msg) \n      (cond ((eq? msg 'withdraw) withdraw) \n            ((eq? msg 'deposit) deposit)\n            ((eq? msg 'balance) balance)\n            ((eq? msg 'transactions) transactions) ) ) \n    dispatch) ) \n```", "```\n(define (plus1 var) \n  (set! var (+ var 1)) \n  var) \n```", "```\n(plus1 5) \n```"]