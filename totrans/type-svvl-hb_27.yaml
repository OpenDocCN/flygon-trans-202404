- en: JSXとECMAScriptの違い
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/reference/jsx](https://typescriptbook.jp/reference/jsx)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: JSX
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSX（JavaScript XML）は、コンポーネント指向のJavaScriptライブラリやフレームワーク（特にReact）で一般的に採用されている、JavaScriptの拡張構文です。JSXを用いると、JavaScriptのコード内にHTMLタグのような構文が埋め込み可能となり、より直感的かつ読みやすい形でUIのコードを表現することができます。それによって、開発者のコーディング体験や開発、デバッグの効率が上がります。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptの文法はECMAScriptという言語仕様で規定されています。一方、JSXはJavaScriptの構文を独自に拡張した言語です。そのため、JSXはECMAScriptの言語仕様に盛り込まれていません。ブラウザがJavaScriptエンジンを実装する場合は、ECMAScript(標準)に準拠するため、ブラウザで直接JSXを解釈し、実行することができない現状があります。この問題を解消するためには、JSXをブラウザが認識できるJavaScriptに変換する、いわゆるトランスパイルという過程が必要となります。このトランスパイル作業を助けるツールとして、BabelやTypeScriptコンパイラーが使われます。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: JSX構文とHTML構文の違い[​](#jsx構文とhtml構文の違い "JSX構文とHTML構文の違い への直接リンク")
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 初見では異なると気づきにくいかもしれませんが、実はJSXとHTMLはまったく同じではありません。構文のレベルにおいてJSXとHTMLの間には複数の違いが存在します。一例を挙げると、属性名の表記方法や、スタイルの指定方法、自己終了タグの書き方などが異なります。これらの詳細については後程の「属性」セクションでより詳しく説明します。覚えておくべき重要なポイントとしては、JSXがHTMLとJavaScriptのハイブリッドであるため、両者の規則や慣例を調和させる形で設計されているという点です。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: JSX構文[​](#jsx構文 "JSX構文 への直接リンク")
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 要素[​](#要素 "要素 への直接リンク")
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JSXでもっとも一般的な形式は、ネスト可能な要素（タグ）を使ってコンポーネントを表現するものです。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 入れ子の要素[​](#入れ子の要素 "入れ子の要素 への直接リンク")
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JSX要素はHTMLのようにネストすることができます。たとえば、`div`要素内に2つの`br`要素がネストされている状況を考えてみましょう。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: これらは簡単な例ですが、属性や子要素を追加してより複雑なコンポーネントを表現することも可能です。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: テキスト要素[​](#テキスト要素 "テキスト要素 への直接リンク")
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JSX内では、要素に直接テキストを書くことができます。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 上記のように、要素の中に直接テキストを書くと、そのテキストはそのままの形で出力されます。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 空白と要素[​](#空白と要素 "空白と要素 への直接リンク")
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: JSXでは、要素間のスペースは自動的に無視されます。たとえば、
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 上記のコードは「This is a**pen**.」として「a」と「pen」の分かち書きがない状態でレンダリングされてしまいます。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: これを回避するには、文字列をJavaScriptの式として書くことです。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: こうすると、正しく「This is a pen.」としてレンダリングされます。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 属性[​](#属性 "属性 への直接リンク")
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JSX属性の名前は、JavaScriptの命名規則に従いcamelCaseで記述することが推奨されています。この命名規則は、HTML内のアトリビュートとは異なる点に注意が必要です。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 標準HTML属性[​](#標準html属性 "標準HTML属性 への直接リンク")
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JSXでは、HTML属性と同じように要素に属性を与えることができます。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: ただし、`class`属性はJavaScriptの予約語であるため、代わりに`className`を使用します。たとえば、次のコードでは`h1`要素に`className`属性を適用しています。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: JSXで用いる属性は、JavaScriptのDOMのプロパティ名です。したがって、いくつかのHTML属性はJSXでは異なる名前を持ちます。次の表は、いくつかの一般的なHTML属性と対応するJSX属性名を示しています。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '| HTML | JSX |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| `class` | `className` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| `tabindex` | `tabIndex` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '| `for` | `htmlFor` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
- en: '| `colspan` | `colSpan` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| `maxlength` | `maxLength` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| `cellpadding` | `cellPadding` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| `cellspacing` | `cellSpacing` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| `rowspan` | `rowSpan` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: スタイル属性[​](#スタイル属性 "スタイル属性 への直接リンク")
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HTMLでは、スタイル属性は一般的に文字列です。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 一方、JSXではスタイル属性はオブジェクトでなければなりません。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 真偽属性[​](#真偽属性 "真偽属性 への直接リンク")
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 真偽属性は要素に特定の特性を指定します。たとえば、input要素には"disabled"というboolean型の属性があり、その値に真を指定するとinput要素は無効になります。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 属性の値として`{true}`を付けて明示的に指定することもできます。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: しかし、一般的には属性値がtrueの場合、値の部分を省略することが推奨されます。このように記述すると、コードが短くシンプルになるためです。したがって、上記の例のように属性名のみを指定することで、その属性を有効にすることができます。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 式[​](#式 "式 への直接リンク")
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JSX内ではJavaScriptの式を埋め込むことが可能です。これにより、動的な値をJSX内に簡単に導入することができます。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 基本的な式[​](#基本的な式 "基本的な式 への直接リンク")
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScriptの式をJSX内部に埋め込むためには、波カッコ`{}`を使います。次の例では、変数`name`の値を`<h1>`要素内に埋め込んでいます。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: ここでは、JavaScriptの変数を埋め込んでいますが、式としての評価結果が挿入されるので、JavaScriptの演算やメソッドの呼び出しも可能です。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 条件式[​](#条件式 "条件式 への直接リンク")
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScriptのif文は式ではなく文であるため、JSXの式の中に直接書くことはできません。条件式が必要な場合には三項演算子を用います。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'このように、三項演算子`条件式 ? 真の場合の値 : 偽の場合の値`を使うことで、JSX内で条件によって表示を切り替えることが可能です。'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 短絡評価[​](#短絡評価 "短絡評価 への直接リンク")
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 短絡評価[​](#短絡評価 "短絡評価 への直接リンク")
- en: JavaScriptの論理演算子を使用して、短絡評価を行うことも可能です。これを使用すると、特定の条件下でのみ要素を表示したり、デフォルトの値を提供したりします。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptの論理演算子を使用して、短絡評価を行うことも可能です。これを使用すると、特定の条件下でのみ要素を表示したり、デフォルトの値を提供したりします。
- en: 論理AND演算子(`&&`)による短絡評価[​](#論理and演算子による短絡評価 "論理and演算子による短絡評価 への直接リンク")
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 論理AND演算子(`&&`)による短絡評価[​](#論理and演算子による短絡評価 "論理and演算子による短絡評価 への直接リンク")
- en: 論理AND演算子`&&`は、最初の要素が`false`またはfalsyな値（`false`、`null`、`undefined`、`""`、`0`、`NaN`）の場合その値をそのまま返し、それ以外の場合には2番目の値を返します。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 論理AND演算子`&&`は、最初の要素が`false`またはfalsyな値（`false`、`null`、`undefined`、`""`、`0`、`NaN`）の場合その値をそのまま返し、それ以外の場合には2番目の値を返します。
- en: '[PRE28]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: この例では、`isLoggedIn`がtruthyの場合にのみ、`<h1>Welcome back!</h1>`が表示されます。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: この例では、`isLoggedIn`がtruthyの場合にのみ、`<h1>おかえりなさい！</h1>`が表示されます。
- en: 論理OR演算子(`||`)による短絡評価[​](#論理or演算子による短絡評価 "論理or演算子による短絡評価 への直接リンク")
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 論理OR演算子(`||`)による短絡評価[​](#論理or演算子による短絡評価 "論理or演算子による短絡評価 への直接リンク")
- en: 論理OR演算子 `||`は、最初のオペランドがtruthyな値の場合にその値をそのまま返し、それ以外の場合には2番目の値を返します。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 論理OR演算子 `||`は、最初のオペランドがtruthyな値の場合にその値をそのまま返し、それ以外の場合には2番目の値を返します。
- en: '[PRE30]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: この例では、`isLoggedIn`がfalsyな値（`undefined`、`null`、`""`、`0`、`NaN`）の場合にのみ、`<h1>Please
    sign up.</h1>`が表示されます。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: この例では、`isLoggedIn`がfalsyな値（`undefined`、`null`、`""`、`0`、`NaN`）の場合にのみ、`<h1>サインアップしてください。</h1>`が表示されます。
- en: Null合体演算子(`??`)による短絡評価[​](#null合体演算子による短絡評価 "null合体演算子による短絡評価 への直接リンク")
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Null合体演算子(`??`)���よる短絡評価[​](#null合体演算子による短絡評価 "null合体演算子による短絡評価 への直接リンク")
- en: Null合体演算子(nullish coalescing operator)`??`は、最初のオペランドが`null`または`undefined`の場合にのみ2番目の値を返します。そのため、最初のオペランドが`false`、`0`、`NaN`、空文字列であっても、その値が保持されます。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Null合体演算子(nullish coalescing operator)`??`は、最初のオペランドが`null`または`undefined`の場合にのみ2番目の値を返します。そのため、最初のオペランドが`false`、`0`、`NaN`、空文字列であっても、その値が保持されます。
- en: '[PRE32]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: この例では、`input.name`が`null`または`undefined`の場合にのみ、`<p>No input provided.</p>`が表示されます。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: この例では、`input.name`が`null`または`undefined`の場合にのみ、`<p>提供された入力はありません。</p>`が表示されます。
- en: ループ(反復処理)[​](#ループ反復処理 "ループ(反復処理) への直接リンク")
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ループ(反復処理)[​](#ループ反復処理 "ループ(反復処理) への直接リンク")
- en: JavaScriptの`for-of`ループなど、JSX内では文を直接使用することができないため、配列の反復処理を行う際は`Array.prototype.map`関数のような式を使用します。式とは、値を返すコードの片段のことで、それに対して文は値を生成しません。JSXは基本的には式ベースのシンタックスですので、式が使われます。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptの`for-of`ループなど、JSX内では文を直接使用することができないため、配列の反復処理を行う際は`Array.prototype.map`関数のような式を使用します。式とは、値を返すコードの片段のことで、それに対して文は値を生成しません。JSXは基本的には式ベースのシンタックスですので、式が使われます。
- en: '`Array.prototype.map`関数は配列の各要素に対して関数を適用し、その結果で新たな配列を作成します。これを利用して、一連の要素を作ることができます。次にサンプルコードを示します。'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array.prototype.map`関数は配列の各要素に対して関数を適用し、その結果で新たな配列を作成します。これを利用して、一連の要素を作ることができます。次にサンプルコードを示します。'
- en: '[PRE34]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: この例では、`numbers`という配列の各要素に対して関数が適用され、その結果から新たな`<li>`要素で構成された配列が作成されます。そして、その配列は`<ul>`要素に展開され`list`に代入されます。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: この例では、`numbers`という配列の各要素に対して関数が適用され、その結果から新たな`<li>`要素で構成された配列が作成されます。そして、その配列は`<ul>`要素に展開され`list`に代入されます。
- en: また、Reactでは配列内の要素に一意な`key`プロパティを追加することが推奨されます。これは、ReactがDOMの変更を効率的に追跡するために使用されます。上記の例では、`key`として数値を文字列に変換したものを使用しています。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: また、Reactでは配列内の要素に一意な`key`プロパティを追加することが推奨されます。これは、ReactがDOM��変更を効率的に追跡するために使用されます。上記の例では、`key`として数値を文字列に変換したものを使用しています。
- en: 自己終了タグ[​](#自己終了タグ "自己終了タグ への直接リンク")
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自己終了タグ[​](#自己終了タグ "自己終了タグ への直接リンク")
- en: JSXでは、XMLのように自己終了タグ(self-closing tags)が使用できます。これは、開始タグと終了タグの間に何も内容を持たない要素について使用します。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: JSXでは、XMLのように自己終了タグ(self-closing tags)が使用できます。これは、開始タグと終了タグの間に何も内容を持たない要素について使用します。
- en: '[PRE36]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: その要素が内容を持たない場合でも、`<img></img>`のように書くことは文法的には可能です。しかし、一般的には`<img />`のように自己終了タグを書くことが推奨されます。これは可読性の観点から、タグが内容を持たないことを明示するためです。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: その要素が内容を持たない場合でも、`<img></img>`のように書くことは文法的には可能です。しかし、一般的には`<img />`のように自己終了タグを書くことが推奨されます。これは可読性の観点から、タグが内容を持たないことを明示するためです。
- en: フラグメント[​](#フラグメント "フラグメント への直接リンク")
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: フラグメント[​](#フラグメント "フラグメント への直接リンク")
- en: 一般的にJSX要素は、ひとつの親要素内にすべての子要素をネストしなければなりません。これは、JSXが最終的にひとつのルートノードを返すことを要求するためです。しかし、この要求はしばしばReactのDOM構造に余計な要素を追加することを強制してしまいます。これを解決するためにReactが提供する機能が「フラグメント」です。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一般的にJSX要素は、ひとつの親要素内にすべての子要素をネストしなければなりません。これは、JSXが最終的にひとつのルートノードを返すことを要求するためです。しかし、この要求はしばしばReactのDOM構造に余計な要素を追加することを強制してしまいます。これを解決するためにReactが提供する機能が「フラグメント」です。
- en: フラグメントを使うと、ひとつの親要素なしに、複数の要素を同時に返すことができます。これにより、無駄なDOMノードの生成を防ぎつつ、構造をくずさずに複数の要素をレンダリングすることができます。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: フラグメントを使うと、ひとつの親要素なしに、複数の要素を同時に返すことができます。これにより、無駄なDOMノードの生成を防ぎつつ、構造をくずさずに複数の要素をレンダリングすることができます。
- en: JSXでのフラグメントの使用[​](#jsxでのフラグメントの使用 "JSXでのフラグメントの使用 への直接リンク")
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSXでのフラグメントの使用[​](#jsxでのフラグメントの使用 "JSXでのフラグメントの使用 への直接リンク")
- en: フラグメントは`<React.Fragment>`タグを使って明示的に表現することができます。次の例では、`h1`と`h2`要素がフラグメント内にまとめられています。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: フラグメントは`<React.Fragment>`タグを使って明示的に表現することができます。次の例では、`h1`と`h2`要素がフラグメント内にまとめられています。
- en: '[PRE38]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: ただ、より簡潔にフラグメントを表現するために`<>...</>`というショートハンド（短縮形）がよく使われます。次の例では、`<React.Fragment>`タグが`<>...</>`に置き換えられています。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ただ、より簡潔にフラグメントを表現するために`<>...</>`というショートハンド（短縮形）がよく使われます。次の例では、`<React.Fragment>`タグが`<>...</>`に置き換えられています。
- en: '[PRE40]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: いずれの形式でも、フラグメントを使うことで`h1`と`h2`要素は同一階層に配置され、それらをラップする余計なHTML要素を追加せずにレンダリングされます。フラグメントは、Reactアプリケーションのレンダリングパフォーマンスを持続的に向上させるツールとなります。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: いずれの形式でも、フラグメントを使うことで`h1`と`h2`要素は同一階層に配置され、それらをラップする余計なHTML要素を追加せずにレンダリングされます。フラグメントは、Reactアプリケーションのレンダリングパフォーマンスを持続的に向上させるツールとなります。
- en: JSX内のコメント[​](#jsx内のコメント "JSX内のコメント への直接リンク")
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSX内のコメント[​](#jsx内のコメント "JSX内のコメント への直接リンク")
- en: コメントはコードの読み易さを向上させる重要な要素です。しかし、JSX内のコメントは少し特殊で、明示的にJavaScriptのブロック、つまり波カッコ `{}`
    内に書く必要があります。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: コメントはコードの読み易さを向上させる重要な要素です。しかし、JSX内のコメントは少し特殊で、明示的にJavaScriptのブロック、つまり波カッコ `{}`
    内に書く必要があります。
- en: 一行コメント[​](#一行コメント "一行コメント への直接リンク")
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一行コメント[​](#一行コメント "一行コメント への直接リンク")
- en: JSX内では一行コメントを書く方法は次の通りです。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: JSX内では一行コメントを書く方法は次の通りです。
- en: '[PRE42]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: このように、コメントは `{/* */}` の形式で書かれます。この書き方により、コメントはブラウザに表示されず、ただ開発者を支援するために存在します。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: このように、コメントは `{/* */}` の形式で書かれます。この書き方により、コメントはブラウザに表示されず、ただ開発者を支援するために存在します。
- en: ジェネリクス[​](#ジェネリクス "ジェネリクス への直接リンク")
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ジェネリクス[​](#ジェネリクス "ジェネリクス への直接リンク")
- en: ジェネリクスを活用することで、一度定義したコンポーネントや関数を、各種の型に対応可能な形で再利用できます。ここではジェネリクス型を用いたReactコンポーネントの定義とその利用について、詳しく見ていきましょう。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: ジェネリクスを活用することで、一度定義したコンポーネントや関数を、各種の型に対応可能な形で再利用できます。ここではジェネリクス型を用いたReactコンポーネントの定義とその利用について、詳しく見ていきましょう。
- en: '[## 📄️ ジェネリクス'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ ジェネリクス'
- en: 型の安全性とコードの共通化の両立は難しいものです。あらゆる型で同じコードを使おうとすると、型の安全性が犠牲になります。逆に、型の安全性を重視しようとすると、同じようなコードを量産する必要が出てコードの共通化が達成しづらくなります。こうした問題を解決するために導入された言語機能がジェネリクスです。ジェネリクスを用いると、型の安全性とコードの共通化を両立することができます。](/reference/generics)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 型の安全性とコードの共通化の両立は難しいものです。あらゆる型で同じコードを使おうとすると、型の安全性が犠牲になります。逆に、型の安全性を重視しようとすると、同じようなコードを量産する必要が出てコードの共通化が達成しづらくなります。こうした問題を解決するために導入された言語機能がジェネリクスです。ジェネリクスを用いると、型の安全性とコードの共通化を両立することができます。](/reference/generics)
- en: ジェネリックコンポーネントの定義[​](#ジェネリックコンポーネントの定義 "ジェネリックコンポーネントの定義 への直接リンク")
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义泛型组件[​](#ジェネリックコンポーネントの定義 "定义泛型组件 直接链接")
- en: まず初めに、型変数`T`を用いたコンポーネントを定義します。ここでは`ItemType`という名前で型を作り、それがプロパティ`prop`を介して型`T`を受け取るように設計します。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，定义一个使用类型变量`T`的组件。在这里，创建一个名为`ItemType`的类型，并设计它通过属性`prop`接收类型`T`。
- en: '[PRE44]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 上記の`Item`という名前のコンポーネントには、ジェネリクス型を適用しています。そのため、あらゆる型を`prop`として受け取ることが可能になります。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对名为`Item`的组件应用泛型类型。因此，可以将任何类型作为`prop`接收。
- en: 注目すべき点として、`<T>`の書き方について説明します。もしジェネリクスとして `<T>`だけを記述する場合、TypeScriptはそれがJSXのタグと混同してしまう可能性があります。これは、TypeScriptのパーサーが
    `<T>`と読み取ったとき、それがジェネリクス開始を示すものなのかJSX要素の開始を示すものなのかを特定するのが難しいためです。この混同を避けるためには、ジェネリクスの開始を示す
    `<T>`に `,`を追加し、`<T,>`と記述する必要があります。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`<T>`的写法，这里解释一下。如果仅写`<T>`作为泛型，TypeScript可能会将其误认为是JSX标签。这是因为当TypeScript解析器读取`<T>`时，很难确定它是泛型开始还是JSX元素开始。为了避免这种混淆，必须在表示泛型开始的`<T>`后添加`,`，并写成`<T,>`。
- en: ジェネリックコンポーネントの利用[​](#ジェネリックコンポーネントの利用 "ジェネリックコンポーネントの利用 への直接リンク")
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用泛型组件[​](#ジェネリックコンポーネントの利用 "使用泛型组件 直接链接")
- en: ここで、上記で定義したジェネリクス型のコンポーネントを利用してみます。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用上面定义的泛型类型组件。
- en: '[PRE46]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`Item`コンポーネントに対して`string`という型引数を渡し、その`prop`プロパティとして`a`という文字列値を渡しています。これは問題ありません。しかし、次の行では、`Item`コンポーネントに対して`number`という型引数を渡しているのに、その`prop`プロパティとして`a`という文字列値を渡しています。これにより、TypeScriptは型エラーを発生させます。これで、型安全性が確保されていることが確認できます。'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为`Item`组件传递`string`类型的类型参数，并将`a`作为其`prop`属性的字符串值。这是没有问题的。然而，在下一行中，为`Item`组件传递`number`类型的类型参数，但将`a`作为其`prop`属性的字符串值。这将导致TypeScript发出类型错误。这样可以确保类型安全性。
- en: JSXのベストプラクティス[​](#jsxのベストプラクティス "JSXのベストプラクティス への直接リンク")
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[JSX的最佳实践](#jsxのベストプラクティス "JSX的最佳实践 直接链接")'
- en: JSXにおけるベストプラクティスは、効果的で読みやすいコードを書くために役立ちます。次にいくつかの主要なベストプラクティスを示します。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: JSX的最佳实践有助于编写有效且易读的代码。以下是一些主要的最佳实践。
- en: コンポーネント名は常に大文字ではじめる[​](#コンポーネント名は常に大文字ではじめる "コンポーネント名は常に大文字ではじめる への直接リンク")
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件名称始终以大写字母开头[​](#コンポーネント名は常に大文字ではじめる "组件名称始终以大写字母开头 直接链接")
- en: Reactは小文字で始まるコンポーネントをDOMタグとして認識します。したがって、コンポーネント名は常に大文字ではじめることを推奨します。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: React将以小写字母开头的组件视为DOM标签。因此，建议始终以大写字母开头命名组件。
- en: '[PRE48]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: マルチラインのJSXはカッコで囲む[​](#マルチラインのjsxはカッコで囲む "マルチラインのJSXはカッコで囲む への直接リンク")
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用括号括起来的多行JSX[​](#マルチラインのjsxはカッコで囲む "使用括号括起来的多行JSX 直接链接")
- en: 複数行に渡るJSXは可読性を上げるためにカッコで囲むことを推奨します。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐使用括号括起来的多行JSX以提高可读性。
- en: '[PRE50]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 自己終了タグを利用する[​](#自己終了タグを利用する "自己終了タグを利用する への直接リンク")
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用自闭合标签[​](#自己終了タグを利用する "使用自闭合标签 直接链接")
- en: 通常、JSX要素は開始タグと終了タグの間に子要素を配置して記述します。しかし内容が空の場合、すなわち子要素を持たない場合、自己終了タグという短縮形を使用することができます。自己終了タグでは、開始タグと終了タグをひとつのタグにまとめることができます。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，JSX元素在开始标签和结束标签之间放置子元素。但是，如果内容为空，即没有子元素，则可以使用自闭合标签的简写形式。自闭合标签允许将开始标签和结束标签合并为一个标签。
- en: 次の2つの表現は同等です：
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两种表达方式是等效的：
- en: '[PRE52]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 前者の例では、`<input></input>`という形で開始タグと終了タグを明示的に記述しています。一方、後者の例では、`<input />`という形で開始タグと終了タグをひとつにまとめた自己終了タグを利用しています。どちらの記述も完全に同じ動作をしますが、後者の形が簡潔であり一般的に好まれます。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例中，明确写出了开始标签和结束标签，如`<input></input>`。而在后一个示例中，使用了自闭合标签，将开始标签和结束标签合并为`<input
    />`。这两种写法完全相同，但后一种形式更为简洁且更受欢迎。
- en: '`true`の場合は真偽属性を省略する[​](#trueの場合は真偽属性を省略する "trueの場合は真偽属性を省略する への直接リンク")'
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`true`的情况下可以省略布尔属性[​](#trueの場合は真偽属性を省略する "在true的情况下可以省略布尔属性 直接链接")
- en: JSXでは、属性の値が`true`の場合、その属性名だけ記述することで属性の値を省略することが可能です。この書き方を真偽属性と呼びます。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在JSX中，如果属性值为`true`，则可以通过仅写属性名来省略属性值。这种写法称为布尔属性。
- en: 次の2つの表現は同等です：
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两种表达方式是等效的：
- en: '[PRE54]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 前者の例では、`required`という属性に対して`{true}`（即ち真）を明示的に設定しています。一方、後者の例では、属性が真であることを示すために`required`という属性名だけを記述しています。どちらの記述も完全に同じ動作をしますが、後者の形が簡潔であり一般的に好まれます。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例中，对于名为`required`的属性，明确设置为`{true}`（即真）。而在后一个示例中，只需写属性名`required`即可表示属性为真。这两种写法完全相同，但后一种形式更为简洁且更受欢迎。
- en: マップ関数内で一意の`key`プロパティを使用する[​](#マップ関数内で一意のkeyプロパティを使用する "マップ関数内で一意のkeyプロパティを使用する
    への直接リンク")
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在映射函数中使用唯一的`key`属性[​](#マップ関数内で一意のkeyプロパティを使用する "在映射函数中使用唯一的key属性 直接链接")
- en: '`map`関数を使用してリストを作成する際には、各要素に一意の`key`プロパティを付与することを推奨します。これによりReactは変更、追加、削除を効率的に適用できます。'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`map`函数创建列表时，建议为每个元素添加唯一的`key`属性。这样React可以有效地应用更改、添加和删除。
- en: '[PRE56]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: JSXとコンパイル[​](#jsxとコンパイル "JSXとコンパイル への直接リンク")
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSX和编译[​](#jsxとコンパイル "JSX和编译 直接链接")
- en: JSXはJavaScriptの一部ではないため、ブラウザで直接実行することはできません。デフォルトでは、JSX構文はJavaScript構文にないものであり、そのまま実行してもブラウザは理解できません。そのため、JSXをJavaScriptにコンパイル（または変換）する必要があります。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JSX不是JavaScript的一部分，��此无法直接在浏览器中执行。默认情况下，JSX语法不是JavaScript语法的一部分，因此直接执行浏览器无法理解。因此，必须将JSX编译（或转换）为JavaScript。
- en: TypeScriptでは、こうしたJSXのコンパイル方法を指定するために、"jsx"という名前のフラグを `tsconfig.json` 内で設定します。このフラグには次の5つの値を設定することができます。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，为了指定这些JSX的编译方式，您需要在`tsconfig.json`文件中设置名为"jsx"的标志。该标志可以设置为以下5个值。
- en: '"react"：この設定を選択すると、JSXはJavaScriptへと変換されます。そして、出力される.jsファイルでは、それぞれのJSX要素は対応する`React.createElement`呼び出しに変換されます。これはReactというライブラリが、JSXをどのように標準的なJavaScriptに変換するかを指定しています。'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"react"：选择此设置后，JSX将被转换为JavaScript。在生成的.js文件中，每个JSX元素都将转换为相应的`React.createElement`调用。这指定了React库如何将JSX转换为标准JavaScript。'
- en: '"react-jsx"：元のJSX要素は`_jsx`呼び出しに変換され、出力された.jsファイルに含まれます。これにより、ある程度のパフォーマンスの向上が期待できます。'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"react-jsx"：原始的JSX元素将被转换为`_jsx`调用，并包含在生成的.js文件中。这有望提高一定程度的性能。'
- en: '"react-jsxdev"：こちらも元のJSX要素は`_jsx`呼び出しに変換されますが、このモードは開発環境でのみ使用することを目的としています。ここで生成される`_jsxの`呼び出しは、開発中のデバッグを容易にするような追加のランタイムチェックを含みます。'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"react-jsxdev"：这种模式也将原始的JSX元素转换为`_jsx`调用，但此模式仅用于开发环境。生成的`_jsx`调用包含额外的运行时检查，有助于简化开发中的调试。'
- en: '"preserve"：このモードはJSXをそのままの形で出力ファイルに残します。つまり、元のJSX構文は変更されず、出力されるファイル拡張子は.jsxであることが期待されます。さらなる変換ステップ（たとえばBabel等のトランスパイラ）のためにJSXをそのまま保持する必要がある場合に使用します。'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"preserve"：此模式将保留JSX的原始形式在输出文件中。换句话说，原始的JSX语法不会改变，期望输出的文件扩展名为.jsx。当需要保留JSX以供进一步转换（例如使用Babel等转译器）时使用。'
- en: '"react-native"：このオプションもJSXをそのままの形で出力します。ただし、出力するファイル拡張子は.jsのままであることが期待されます。これは主にReact
    Nativeの開発環境で使用されます。'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"react-native"：此选项也会直接输出JSX。但是，期望输出的文件扩展名仍为.js。这主要用于React Native的开发环境。'
- en: 上記の設定により、JSXの構文をどのようにJavaScriptにコンパイルするかを制御できます。そして、TypeScriptとJSXを一緒に使う際には、これらの設定が不可欠となります。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述设置，可以控制将JSX语法编译为JavaScript的方式。在同时使用TypeScript和JSX时，这些设置是必不可少的。
- en: それぞれのフラグでどのようにコンパイルされるのか、次のサンプルコードのコンパイル結果を見てみましょう。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看下面示例代码的编译结果，可以了解每个标志是如何编译的。
- en: '[PRE58]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
