- en: Exceptions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常。
- en: We've seen a few functions that "return" any type
  id: totrans-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经看到一些“返回”任何类型的函数。
- en: '[PRE0]'
  id: totrans-2
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Return type can be arbitrary because function doesn't actually return
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回类型可以是任意的，因为函数实际上并不返回。
- en: These functions throw *language-level* exceptions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些函数抛出*语言级别*的异常。
- en: 'To use exceptions directly, import [`Control.Exception`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html)
    as follows:'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要直接使用异常，请按照以下方式导入[`Control.Exception`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html)：
- en: '[PRE1]'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Older `Prelude`s have an old, less general version of `catch` you should avoid
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧的`Prelude`有一个旧的、不太通用的`catch`版本，你应该避免使用。
- en: (`hiding` keyword prevents import of specific symbols)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （`hiding`关键字阻止特定符号的导入）
- en: '[`Control.Exception`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html)
    gives you access to the following symbols:'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Control.Exception`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html)让你可以访问以下符号：'
- en: '[PRE2]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Simple example
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单示例。
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Need `DeriveDataTypeable` language pragma (later lecture)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要`DeriveDataTypeable`语言扩展（稍后讲座）。
- en: '`handler`''s type cannot be inferred (use constructor or type signature)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handler`的类型无法推断（使用构造函数或类型签名）。'
- en: Constructor pattern `e@(SomeException _)` catches all exceptions
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造模式`e@(SomeException _)`捕获所有异常。
- en: Exceptions in pure code
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 纯代码中的异常。
- en: Previous example wrapped `catcher` around an IO action
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先前的示例在IO操作周围包裹了`catcher`。
- en: Can `throw` exceptions in pure code, yet `catch` them only in `IO`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在纯代码中`throw`异常，但只能在`IO`中`catch`它们。
- en: This is because evaluation order depends on implementation
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是因为评估顺序取决于实现。
- en: Which error is thrown by `(error "one") + (error "two")`?
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(error "one") + (error "two")`会抛出哪个错误？'
- en: Can be non-deterministic, which is [okay](http://research.microsoft.com/en-us/um/people/simonpj/papers/imprecise-exn.htm)
    if `catch` is restricted to the `IO` Monad
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可能是非确定性的，如果`catch`限制在`IO` Monad中，则[可以接受](http://research.microsoft.com/en-us/um/people/simonpj/papers/imprecise-exn.htm)。
- en: In `IO`, use `throwIO` (not `throw`) to make exception sequencing precise
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`IO`中，使用`throwIO`（而不是`throw`）使异常序列精确。
- en: '[PRE5]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Generally, use `throw` only where you can't use `throwIO`
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常只在无法使用`throwIO`时使用`throw`。
- en: 'Pure exceptions quite useful for errors & unimplemented code, E.g.:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯异常对于错误和未实现的代码非常有用，例如：
- en: '[PRE6]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Exceptions and laziness
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常和惰性。
- en: Consider the following function
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑以下函数。
- en: '[PRE7]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What happens if you do this?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你这样做会发生什么？
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Exceptions and laziness
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常和惰性。
- en: Consider the following function
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑以下函数。
- en: '[PRE10]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What happens if you do this?
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你这样做会发生什么？
- en: '[PRE12]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Exceptions and laziness
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常和惰性。
- en: Consider the following function
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑以下函数。
- en: '[PRE13]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What happens if you do this?
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你这样做会发生什么？
- en: '[PRE15]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`catch` only catches exceptions when thunks actually evaluated!'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catch`只在实际评估thunks时才捕获异常！'
- en: Exceptions and laziness continued
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常和惰性继续。
- en: Evaluating a list does not evaluate the head or tail
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估列表不会评估头部或尾部。
- en: '[PRE16]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Just evaluates the constructor (i.e., `(:)` or `[]`)
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只评估构造函数（即`(:)`或`[]`）。
- en: 'Exercise: Force evaluation of every element of a list'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习：强制评���列表的每个元素。
- en: Write `seq`-like function with the following signature, that evaluates every
    element of list before evaluating second argument
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写具有以下签名的类似于`seq`的函数，它在评估第二个参数之前评估列表的每个元素。
- en: '[PRE17]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Solution
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案。
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note, there is a function [`deepseq`](http://hackage.haskell.org/package/deepseq-1.3.0.2/docs/Control-DeepSeq.html#v:deepseq)
    in library of same name that does this for many common data types
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意，库中有一个名为[`deepseq`](http://hackage.haskell.org/package/deepseq-1.3.0.2/docs/Control-DeepSeq.html#v:deepseq)的函数，可以为许多常见数据类型执行此操作。
- en: A few more exception functions
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有一些异常函数。
- en: '`try` returns `Right a` normally, `Left e` if an exception occurred'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`try`通常返回`Right a`，如果发生异常则返回`Left e`。'
- en: '[PRE20]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`finally` and `onException` run an clean-up action'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`finally`和`onException`运行清理操作。'
- en: '[PRE21]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Result of cleanup action (`b`) is discarded
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理操作（`b`）的结果被丢弃。
- en: '`catchJust` catches only exceptions matching a predicate on value'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catchJust`仅捕获与值上的谓词匹配的异常。'
- en: '[PRE22]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Monadic exceptions
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单子异常。
- en: Language-level exceptions can be cumbersome for non-`IO` actions
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言级别的异常对于非`IO`操作可能很麻烦。
- en: Non-determinism is annoying
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非确定性很烦人。
- en: Often want to detect error without assuming the `IO` monad
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常希望在不假设`IO`单子的情况下检测错误。
- en: Many monads built on top of `IO` also can't catch exceptions
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多建立在`IO`之上的单子也无法捕获异常。
- en: Often it is better to implement error handling in the Monad
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常最好在Monad中实现错误处理。
- en: Recall the `Maybe` Monad, where can use `Nothing` to indicate failure
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回想一下`Maybe` Monad，可以使用`Nothing`表示失败。
- en: '[PRE24]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note `fail` method called when bind pattern matches fail in `do` block
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意，在`do`块中绑定模式匹配失败时调用`fail`方法。
- en: '[PRE25]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Haskell threads
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Haskell implements user-level threads in [`Control.Concurrent`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent.html)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threads are lightweight (in both time and space)
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use threads where in other languages would use cheaper constructs
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Runtime emulates blocking OS calls in terms of non-blocking ones
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Thread-switch can happen any time GC could be invoked
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forkIO` call creates a new thread:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'A few other very useful thread functions:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Example: timeout'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute `IO` action, or abort after # of µsec'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`System.Timeout`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/System-Timeout.html)
    has a slightly better version of this function'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[`MVar`s](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent-MVar.html)'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [`MVar`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent-MVar.html)
    type lets threads communicate via shared variables
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `MVar t` is a mutable variable of type `t` that is either *full* or *empty*
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If an `MVar` is full, `takeMVar` makes it empty and returns former contents
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If an `MVar` is empty, `putMVar` fills it with a value
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking an empty `MVar` or putting a full one puts thread to sleep until `MVar`
    becomes available
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Only one thread awakened at a time if several blocked on same `MVar`
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also non-blocking versions of `MVar` calls
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Example: pingpong benchmark'
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Sidenote: benchmarking'
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bryan has a kick-ass benchmarking library [criterion](http://hackage.haskell.org/package/criterion)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: ~3.8 msec for 20,000 thread switches = ~190 nsec/switch
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OS threads
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GHC also has *two* versions of the haskell runtime
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, all Haskell threads run in a single OS thread
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Link with `-threaded` to allow OS threads (`pthread_create`) as well
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forkOS` call creates Haskell thread *bound* to a new OS thread'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Also, when linked with `-threaded`, initial thread is bound
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whoa... what happened? `-threaded` 30 times slower?
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Bound vs. unbound threads
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without `-threaded`, all Haskell threads run in one OS thread
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thread switch is basically just a procedure call, i.e. super-fast
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-threaded` introduces multiple OS-level threads'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some Haskell threads are *bound* to a particular OS thread
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Unbound* Haskell threads share (and migrate between) OS threads'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unbound` haskell threads have same performance as w/o `-threaded`'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Initial thread bound, so we were actually benchmarking Linux
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can wrap parent thread in `forkIO` to make it unbound
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: But library has better function [`runInUnboundThread`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent.html#v:runInUnboundThread)
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What good are OS threads?
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If an unbound thread blocks, can block whole program
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unix runtime tries to avoid blocking syscalls, but can't avoid blocking for
    things like file system IO and paging
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Also relevant to foreign function interface (FFI)
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: GHC allows to kinds of calls into C code, `safe` and `unsafe`
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With `-threaded`, GHC ensures `safe` FFI calls run in separate OS thread
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `-threaded`，GHC 确保 `safe` FFI 调用在单独的 OS 线程中运行
- en: '`unsafe` FFI calls from unbound threads can block other threads'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未绑定线程中的 `unsafe` FFI 调用可能会阻塞其他线程
- en: FFI functions may expect to be called from same thread
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FFI 函数可能期望从同一线程调用
- en: E.g., foreign code using `pthread_getspecific` can get confused if called from
    a migrated unbound thread
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，从迁移的未绑定线程调用 `pthread_getspecific` 的外部代码可能会混淆
- en: May want to override scheduler and run on particular CPU
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能想要覆盖调度程序并在特定 CPU 上运行
- en: E.g., see [`forkOn`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent.html#v:forkOn)
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，查看[`forkOn`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent.html#v:forkOn)
- en: Asynchronous exceptions
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步异常
- en: Some handy `MVar` utility functions for updating a value
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些方便的 `MVar` 实用函数用于更新值
- en: '[PRE38]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: E.g., "`modifyMVar x (\n -> return (n+1, n))`" like "`x++`" in C
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，"`modifyMVar x (\n -> return (n+1, n))`" 就像 C 中的 "`x++`"
- en: How would you implement `modifyMVar`?
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会如何实现 `modifyMVar`？
- en: '[PRE39]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Anyone see a problem? (Hint: remember `throwTo`, `killThread`)'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有人看到问题了吗？（提示：记住 `throwTo`，`killThread`）
- en: Asynchronous exceptions
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步异常
- en: Some handy `MVar` utility functions for updating a value
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些方便的 `MVar` 实用函数用于更新值
- en: '[PRE40]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: E.g., "`modifyMVar x (\n -> return (n+1, n))`" like "`x++`" in C
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，"`modifyMVar x (\n -> return (n+1, n))`" 就像 C 中的 "`x++`"
- en: How would you implement `modifyMVar`?
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会如何实现 `modifyMVar`？
- en: '[PRE41]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: What if another thread calls `killThread` on the current thread while current
    thread between `takeMVar` and `onException`
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果另一个线程在当前线程在 `takeMVar` 和 `onException` 之间时调用 `killThread` 会怎么样
- en: '`timeout` and `wrap` functions from a few slides ago have same problem'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几张幻灯片前的 `timeout` 和 `wrap` 函数存在相同问题
- en: Masking exceptions
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 屏蔽异常
- en: The [`mask`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html#v:mask)
    function can sidestep such race conditions
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`mask`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html#v:mask)
    函数可以规避这种竞争条件'
- en: '[PRE42]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This is a funny type signature--uses an extension called `RankNTypes`. For now,
    ignore "`forall a.`"--just makes function more flexible
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个有趣的类型签名--使用了一个叫做 `RankNTypes` 的扩展。暂时忽略 "`forall a.`"--只是使函数更灵活
- en: '`mask $ \f -> b` runs action `b` with asynchronous exceptions *masked*'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask $ \f -> b` 使用异步异常*屏蔽*运行动作 `b`'
- en: Function `f` allows exceptions to be *unmasked* again for an action
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数 `f` 允许再次为动作取消*屏蔽*异常
- en: Exceptions are also unmasked if thread sleeps (e.g., in `takeMVar`)
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果线程休眠（例如在 `takeMVar` 中），异常也会取消屏蔽
- en: 'Example: Fixing `modifyMVar`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：修复 `modifyMVar`
- en: '[PRE43]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Masking exceptions (continued)
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 屏蔽异常（续）
- en: '`forkIO` preserves the current mask state'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`forkIO` 保留当前屏蔽状态'
- en: Can use the `unmask` function in child thread
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在子线程中使用 `unmask` 函数
- en: 'Example: fixed `wrap` function'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：修复 `wrap` 函数
- en: '[PRE44]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note we don't call `unmask` in parent thread
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意我们在父线程中不调用 `unmask`
- en: '`loop` will sleep on `takeMVar`, which implicitly unmasks'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loop` 在 `takeMVar` 上休眠，这会隐式取消屏蔽'
- en: Unmask while sleeping is generally what you want, but can avoid with [uninterruptibleMask](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html#v:uninterruptibleMask)
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在休眠时取消屏蔽通常是你想要的，但可以通过[uninterruptibleMask](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html#v:uninterruptibleMask)来避免
- en: The [`bracket`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html#v:bracket)
    function
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`bracket`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html#v:bracket)
    函数'
- en: '`mask` is tricky, but library function [`bracket`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html#v:bracket)
    simplifies use'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask` 很棘手，但库函数[`bracket`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html#v:bracket)简化了使用'
- en: '[PRE45]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Example: process file without leaking handle'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：处理文件而不泄漏句柄
- en: '[PRE46]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Example: fix `parent` function from our `timeout` example'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：修复我们 `timeout` 示例中的 `parent` 函数
- en: '[PRE47]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Working with `MVar`s
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `MVar` 工作
- en: '`MVar`s work just fine as a mutex:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MVar` 作为互斥锁运行得很好：'
- en: '[PRE49]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note anyone can unlock a `Mutex` if it is locked
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意任何人都可以解锁 `Mutex`，如果它被锁定
- en: How would you throw assertion failure if caller doesn't hold lock?
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果调用者没有持有锁，你会如何抛出断言失败？
- en: Alternate `Mutex`
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替代 `Mutex`
- en: Use *full* `MVar` rather than empty to mean lock held
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*完整的* `MVar` 而不是空的来表示锁已持有
- en: '[PRE50]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Store `ThreadId` of lock owner in `MVar`
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `MVar` 中存储锁所有者的 `ThreadId`
- en: How would you implement a condition variable?
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会如何实现条件变量？
- en: Many uses of condition variables don't work with async exceptions
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多条件变量的用途不适用于异步异常
- en: So let's not worrying about `mask` for this question...
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所以让我们不要为这个问题担心 `mask`...
- en: Condition variables
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件变量
- en: '[PRE51]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Key idea: putting `MVar`s inside `MVar`s is very powerful'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键思想：在`MVar`中放置`MVar`非常强大
- en: Channels
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通道
- en: '[`Control.Concurrent.Chan`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent-Chan.html)
    provides unbounded *channels*'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Control.Concurrent.Chan`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent-Chan.html)提供了无限制的*通道*'
- en: Implemented as two `MVar`s -- for read and and write end of `Stream`
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现为两个`MVar` -- 用于读取和写入`Stream`的端点
- en: '[PRE52]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '![](../Images/8055b0591ad69832c238495ef6b072c6.svg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8055b0591ad69832c238495ef6b072c6.svg)'
- en: Channel implementation [simplified]
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通道实现[简化]
- en: '[PRE53]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Networking
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: High-level Stream (TCP & Unix-domain) socket support in [`Network`](http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network.html)
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`Network`](http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network.html)中有高级别的流（TCP和Unix域）套接字支持
- en: '[PRE54]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Exercise: Network-enabled rock-paper-scissors. Define:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习：网络版的石头剪刀布。定义：
- en: '[PRE55]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This accepts connection, plays single game, exits
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个程序接受连接，进行单局游戏，然后退出
- en: '[PRE56]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Start with last week''s code: `wget` [`cs240h.stanford.edu/rock2.hs`](http://cs240h.stanford.edu/rock2.hs)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从上周的代码开始：`wget` [`cs240h.stanford.edu/rock2.hs`](http://cs240h.stanford.edu/rock2.hs)
- en: Solution
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: '[PRE58]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Exercise
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Build a program `netrock` that plays two users against one another and exits
    after one game
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个名为`netrock`的程序，让两个用户相互对战，并在一局游戏结束后退出
- en: '[PRE59]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Start here: `wget` [`cs240h.stanford.edu/netrock.hs`](http://cs240h.stanford.edu/netrock.hs),
    implement:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从这里开始：`wget` [`cs240h.stanford.edu/netrock.hs`](http://cs240h.stanford.edu/netrock.hs)，实现：
- en: '[PRE61]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'You may find it useful to define and use:'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能会发现定义和使用以下内容很有用：
- en: '[PRE62]'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'If your OS is missing `nc`: `wget` [`cs240h.stanford.edu/netcat.hs`](http://cs240h.stanford.edu/netcat.hs)'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的操作系统缺少`nc`：`wget` [`cs240h.stanford.edu/netcat.hs`](http://cs240h.stanford.edu/netcat.hs)
- en: Solution
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: '[PRE63]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Networking
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: Also have low-level BSD socket support in [`Network.Socket`](http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html)
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`Network.Socket`](http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html)中还有低级别的BSD套接字支持
- en: '[PRE64]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[`getAddrInfo`](http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html#v:getAddrInfo)
    looks up hostnames just like [[RFC3493]](http://tools.ietf.org/html/rfc3493) (returns
    `[`[`AddrInfo`](http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html#t:AddrInfo)`]`)'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`getAddrInfo`](http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html#v:getAddrInfo)像[[RFC3493]](http://tools.ietf.org/html/rfc3493)一样查找主机名（返回[`AddrInfo`](http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html#t:AddrInfo)`]`)'
- en: '[PRE65]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Example: Get `SockAddr` for talking to web server:'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：获取与web服务器通信的`SockAddr`：
- en: '[PRE66]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Example: netcat'
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例如：netcat
- en: '[PRE67]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
