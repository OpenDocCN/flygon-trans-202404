- en: RecordSubSubtyping with Records
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录子子类型与记录
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Require Import Maps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 Maps。
- en: Require Import Smallstep.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 Smallstep。
- en: Require Import MoreStlc.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 MoreStlc。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Syntax
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语法
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Well-Formedness
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 良好形式性
- en: The syntax of terms and types is a bit too loose, in the sense
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 术语和类型的语法有点太松散，意思是
- en: that it admits things like a record type whose final "tail" is
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它允许像记录类型一样的东西，其最终的“尾部”是
- en: Top or some arrow type rather than Nil.  To avoid such cases,
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 顶部或某个箭头类型而不是 Nil。为了避免这种情况，
- en: it is useful to assume that all the record types and terms that we
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设所有记录类型和术语都是
- en: see will obey some simple well-formedness conditions.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看看是否遵守一些简单的良好形式性条件。
- en: An interesting technical question is whether the basic properties of the system
    -- progress and preservation -- remain true if we drop these conditions. I believe
    they do, and I would encourage motivated readers to try to check this by dropping
    the conditions from the definitions of typing and subtyping and adjusting the
    proofs in the rest of the chapter accordingly. This is not a trivial exercise
    (or I'd have done it!), but it should not involve changing the basic structure
    of the proofs. If someone does do it, please let me know. --BCP 5/16.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个有趣的技术问题是，如果我们放弃这些条件，系统的基本属性 -- 进展和保留 -- 是否仍然成立。我相信它们是成立的，并鼓励有动力的读者尝试通过从类型和子类型的定义中删除这些条件，并相应地调整本章中的证明来验证这一点。这不是一个琐碎的练习（否则我会做的！），但不应涉及更改证明的基本结构。如果有人这样做了，请告诉我。--BCP
    5/16.
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Substitution
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替换
- en: Substitution and reduction are as before.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 替换和减少与以前一样。
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Reduction
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Subtyping
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子类型
- en: Now we come to the interesting part, where the features we've
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们来到有趣的部分，在这里我们
- en: added start to interact.  We begin by defining the subtyping
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加开始进行交互。我们首先通过定义子类型来开始
- en: relation and developing some of its important technical
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关系并发展一些重要的技术
- en: properties.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 属性。
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Reserved Notation "T '<:' U" (at level 40).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 保留的符号“T '<:' U”（在级别 40 处）。
- en: 'Inductive subtype : ty → ty → Prop :='
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 形成子类型关系：ty → ty → Prop :=
- en: (* Subtyping between proper types *)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: (* 适当类型之间的子类型关系 *)
- en: '| S_Refl : ∀T,'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '| S_Refl : ∀T,'
- en: well_formed_ty T →
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 良好形式性 T →
- en: 'T <: T'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'T <: T'
- en: '| S_Trans : ∀S U T,'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '| S_Trans : ∀S U T,'
- en: 'S <: U →'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 'S <: U →'
- en: 'U <: T →'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 'U <: T →'
- en: 'S <: T'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'S <: T'
- en: '| S_Top : ∀S,'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '| S_Top : ∀S，'
- en: well_formed_ty S →
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 良好形式性 S →
- en: 'S <: TTop'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 'S <: TTop'
- en: '| S_Arrow : ∀S[1] S[2] T[1] T[2],'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '| S_Arrow : ∀S[1] S[2] T[1] T[2]，'
- en: 'T[1] <: S[1] →'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'T[1] <: S[1] →'
- en: 'S[2] <: T[2] →'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'S[2] <: T[2] →'
- en: 'TArrow S[1] S[2] <: TArrow T[1] T[2]'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 'S[1] S[2] <: T[1] T[2]'
- en: (* Subtyping between record types *)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: (* 记录类型之间的子类型关系 *)
- en: '| S_RcdWidth : ∀i T[1] T[2],'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '| S_RcdWidth : ∀i T[1] T[2]，'
- en: well_formed_ty (TRCons i T[1] T[2]) →
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 良好形式性（TRCons i T[1] T[2]）→
- en: 'TRCons i T[1] T[2] <: TRNil'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'TRCons i T[1] T[2] <: TRNil'
- en: '| S_RcdDepth : ∀i S[1] T[1] Sr[2] Tr[2],'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '| S_RcdDepth : ∀i S[1] T[1] Sr[2] Tr[2]，'
- en: 'S[1] <: T[1] →'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 'S[1] <: T[1] →'
- en: 'Sr[2] <: Tr[2] →'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'Sr[2] <: Tr[2] →'
- en: record_ty Sr[2] →
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 记录类型 Sr[2] →
- en: record_ty Tr[2] →
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 记录类型 Tr[2] →
- en: 'TRCons i S[1] Sr[2] <: TRCons i T[1] Tr[2]'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'TRCons i S[1] Sr[2] <: TRCons i T[1] Tr[2]'
- en: '| S_RcdPerm : ∀i[1] i[2] T[1] T[2] Tr[3],'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '| S_RcdPerm : ∀i[1] i[2] T[1] T[2] Tr[3]，'
- en: well_formed_ty (TRCons i[1] T[1] (TRCons i[2] T[2] Tr[3])) →
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 良好形式性（TRCons i[1] T[1]（TRCons i[2] T[2] Tr[3]））→
- en: i[1] ≠ i[2] →
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: i[1] ≠ i[2] →
- en: TRCons i[1] T[1] (TRCons i[2] T[2] Tr[3])
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: TRCons i[1] T[1] (TRCons i[2] T[2] Tr[3])
- en: '<: TRCons i[2] T[2] (TRCons i[1] T[1] Tr[3])'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '<: TRCons i[2] T[2] (TRCons i[1] T[1] Tr[3])'
- en: where "T '<:' U" := (subtype T U).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 其中“T '<:' U” :=（subtype T U）。
- en: Hint Constructors subtype.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 提示构造子子类型。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Module Examples.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 模块示例。
- en: Notation x := (Id "x").
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 x := (Id "x")。
- en: Notation y := (Id "y").
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 y := (Id "y")。
- en: Notation z := (Id "z").
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 z := (Id "z")。
- en: Notation j := (Id "j").
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 j := (Id "j")。
- en: Notation k := (Id "k").
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 k := (Id "k")。
- en: Notation i := (Id "i").
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 i := (Id "i")。
- en: Notation A := (TBase (Id "A")).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 A := (TBase (Id "A")).
- en: Notation B := (TBase (Id "B")).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 B := (TBase (Id "B")).
- en: Notation C := (TBase (Id "C")).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 C := (TBase（Id "C"））。
- en: Definition TRcd_j  :=
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 TRcd_j  :=
- en: (TRCons j (TArrow B B) TRNil). (* {j:B->B} *)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: （TRCons j（TArrow B B）TRNil）。（{j:B->B}）
- en: Definition TRcd_kj :=
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 TRcd_kj :=
- en: TRCons k (TArrow A A) TRcd_j. (* {k:C->C,j:B->B} *)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: TRCons k（TArrow A A）TRcd_j。 （{k:C->C,j:B->B}）
- en: 'Example subtyping_example_0 :'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 示例子类型示例_0：
- en: subtype (TArrow C TRcd_kj)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: subtype (TArrow C TRcd_kj)
- en: (TArrow C TRNil).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: （TArrow C TRNil）。
- en: (* C->{k:A->A,j:B->B} <: C->{} *)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '(* C->{k:A->A,j:B->B} <: C->{} *)'
- en: Proof.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: apply S_Arrow.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 S_Arrow。
- en: apply S_Refl. auto.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 S_Refl。auto.
- en: unfold TRcd_kj, TRcd_j. apply S_RcdWidth; auto.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 展开 TRcd_kj，TRcd_j。应用 S_RcdWidth; auto.
- en: Qed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 完成。
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Example subtyping_example_1 :'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 示例子类型示例_1：
- en: subtype TRcd_kj TRcd_j.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: subtype TRcd_kj TRcd_j。
- en: (* {k:A->A,j:B->B} <: {j:B->B} *)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '(* {k:A->A,j:B->B} <: {j:B->B} *)'
- en: Proof with eauto.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 eauto 进行证明。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *) 已承认。
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Example subtyping_example_2 :'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 示例子类型示例_2：
- en: subtype (TArrow TTop TRcd_kj)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: subtype (TArrow TTop TRcd_kj)
- en: (TArrow (TArrow C C) TRcd_j).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: （TArrow（TArrow C C）TRcd_j）。
- en: (* Top->{k:A->A,j:B->B} <: (C->C)->{j:B->B} *)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '（Top->{k:A->A,j:B->B} <: (C->C)->{j:B->B}）'
- en: Proof with eauto.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: (* FILL IN HERE *) Admitted.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: （填写此处） Admitted。
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Example subtyping_example_3 :'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 举例 subtyping_example_3：
- en: subtype (TArrow TRNil (TRCons j A TRNil))
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: subtype (TArrow TRNil (TRCons j A TRNil))
- en: (TArrow (TRCons k B TRNil) TRNil).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: （TArrow (TRCons k B TRNil) TRNil）。
- en: (* {}->{j:A} <: {k:B}->{} *)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '（{}->{j:A} <: {k:B}->{}）'
- en: Proof with eauto.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: （填写此处） Admitted.
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Example subtyping_example_4 :'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 举例 subtyping_example_4：
- en: subtype (TRCons x A (TRCons y B (TRCons z C TRNil)))
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: subtype (TRCons x A (TRCons y B (TRCons z C TRNil)))
- en: (TRCons z C (TRCons y B (TRCons x A TRNil))).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: （TRCons z C (TRCons y B (TRCons x A TRNil))）。
- en: (* {x:A,y:B,z:C} <: {z:C,y:B,x:A} *)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '（{x:A,y:B,z:C} <: {z:C,y:B,x:A}）'
- en: Proof with eauto.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: (* FILL IN HERE *) Admitted.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: （填写此处） Admitted。
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: End Examples.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 结束示例。
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Lemma subtype__wf : ∀S T,'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 subtype__wf：∀S T，
- en: subtype S T →
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: subtype S T →
- en: well_formed_ty T ∧ well_formed_ty S.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: well_formed_ty T ∧ well_formed_ty S.
- en: Proof with eauto.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof with eauto。
- en: intros S T Hsub.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: intros S T Hsub.
- en: induction Hsub;
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: induction Hsub;
- en: intros; try (destruct IHHsub1; destruct IHHsub2)...
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: intros; try (destruct IHHsub1; destruct IHHsub2)...
- en: '- (* S_RcdPerm *)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '- （S_RcdPerm）'
- en: split... inversion H. subst. inversion H[5]... Qed.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: split... inversion H. subst. inversion H[5]... Qed.
- en: 'Lemma wf_rcd_lookup : ∀i T Ti,'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 wf_rcd_lookup：∀i T Ti，
- en: well_formed_ty T →
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: well_formed_ty T →
- en: Tlookup i T = Some Ti →
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Tlookup i T = Some Ti →
- en: well_formed_ty Ti.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: well_formed_ty Ti.
- en: Proof with eauto.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof with eauto。
- en: intros i T.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: intros i T。
- en: induction T; intros; try solve_by_invert.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: IHT; intros; try solve_by_invert。
- en: '- (* TRCons *)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '- （TRCons）'
- en: inversion H. subst. unfold [Tlookup](RecordSub.html#Tlookup) in H[0].
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: inversion H。subst。在 H[0] 中展开 Tlookup。
- en: destruct ([beq_id](Maps.html#beq_id) i i[0])... inversion H[0]; subst... Qed.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: destruct (beq_id i i[0])... inversion H[0]; subst... Qed。
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Lemma rcd_types_match : ∀S T i Ti,'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 rcd_types_match：∀S T i Ti，
- en: subtype S T →
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: subtype S T →
- en: Tlookup i T = Some Ti →
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Tlookup i T = Some Ti →
- en: ∃Si, Tlookup i S = Some Si ∧ subtype Si Ti.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: ∃Si，Tlookup i S = Some Si ∧ subtype Si Ti。
- en: Proof with (eauto using [wf_rcd_lookup](RecordSub.html#wf_rcd_lookup)).
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof with (eauto using wf_rcd_lookup).
- en: intros S T i Ti Hsub Hget. generalize dependent Ti.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: intros S T i Ti Hsub Hget. generalize dependent Ti.
- en: induction Hsub; intros Ti Hget;
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: induction Hsub; intros Ti Hget;
- en: try solve_by_invert.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: try solve_by_invert。
- en: '- (* S_Refl *)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '- （S_Refl）'
- en: ∃Ti...
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: ∃Ti...
- en: '- (* S_Trans *)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '- （S_Trans）'
- en: destruct (IHHsub2 Ti) as [Ui Hui]... destruct Hui.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: destruct (IHHsub2 Ti) as [Ui Hui]... destruct Hui.
- en: destruct (IHHsub1 Ui) as [Si Hsi]... destruct Hsi.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: destruct (IHHsub1 Ui) as [Si Hsi]... destruct Hsi.
- en: ∃Si...
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: ∃Si...
- en: '- (* S_RcdDepth *)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '- （S_RcdDepth）'
- en: rename i[0] into k.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将 i[0] 重命名为 k。
- en: unfold [Tlookup](RecordSub.html#Tlookup). unfold [Tlookup](RecordSub.html#Tlookup)
    in Hget.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 展开 Tlookup。在 Hget 中展开 Tlookup。
- en: destruct ([beq_id](Maps.html#beq_id) i k)...
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: destruct (beq_id i k)...
- en: + (* i = k -- we're looking up the first field *)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: + （i = k -- 我们正在查找第一个字段）
- en: inversion Hget. subst. ∃S[1]...
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: inversion Hget. subst. ∃S[1]...
- en: '- (* S_RcdPerm *)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '- （S_RcdPerm）'
- en: ∃Ti. split.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: ∃Ti. split.
- en: + (* lookup *)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: + （查找）
- en: unfold [Tlookup](RecordSub.html#Tlookup). unfold [Tlookup](RecordSub.html#Tlookup)
    in Hget.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 展开 Tlookup。在 Hget 中展开 Tlookup。
- en: destruct ([beq_idP](Maps.html#beq_idP) i i[1])...
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: destruct (beq_idP i i[1])...
- en: '* (* i = i[1] -- we''re looking up the first field *)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '* （i = i[1] -- 我们正在查找第一个字段）'
- en: destruct ([beq_idP](Maps.html#beq_idP) i i[2])...
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: destruct (beq_idP i i[2])...
- en: (* i = i[2] -- contradictory *)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: （i = i[2] -- 矛盾）
- en: destruct H[0].
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: destruct H[0].
- en: subst...
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: subst...
- en: + (* subtype *)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: + （subtype）
- en: inversion H. subst. inversion H[5]. subst... Qed.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: inversion H. subst. inversion H[5]. subst... Qed.
- en: '[PRE15]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: (* FILL IN HERE *)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: （填写此处）
- en: '[PRE16]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Lemma sub_inversion_arrow : ∀U V[1] V[2],'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 sub_inversion_arrow：∀U V[1] V[2]，
- en: subtype U (TArrow V[1] V[2]) →
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: subtype U (TArrow V[1] V[2]) →
- en: ∃U[1], ∃U[2],
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ∃U[1], ∃U[2]，
- en: (U=(TArrow U[1] U[2])) ∧ (subtype V[1] U[1]) ∧ (subtype U[2] V[2]).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: （U=(TArrow U[1] U[2])) ∧ (subtype V[1] U[1]) ∧ (subtype U[2] V[2])。
- en: Proof with eauto.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: intros U V[1] V[2] Hs.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: intros U V[1] V[2] Hs。
- en: remember ([TArrow](RecordSub.html#TArrow) V[1] V[2]) as V.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: remember (TArrow V[1] V[2]) as V。
- en: generalize dependent V[2]. generalize dependent V[1].
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: generalize dependent V[2]。generalize dependent V[1]。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: （填写此处） Admitted。
- en: ☐
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: Typing
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入
- en: '[PRE17]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Typing Examples
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型示例
- en: '[PRE18]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Exercise: 1 star (typing_example_0)'
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：1 星（typing_example_0）
- en: '[PRE19]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Example typing_example_1 :'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 举例 typing_example_1：
- en: has_type empty
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: has_type empty
- en: (tapp (tabs x TRcd_j (tproj (tvar x) j))
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: （tapp (tabs x TRcd_j (tproj (tvar x) j))
- en: (trcd_kj))
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: （trcd_kj）
- en: (TArrow B B).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: （TArrow B B）。
- en: (* empty |- (λx:{k:A->A,j:B->B}. x.j)                {k=(λz:A.z), j=(λz:B.z)} 
             : B->B *)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '（empty |- (λx:{k:A->A,j:B->B}. x.j)   {k=(λz:A.z), j=(λz:B.z)} : B->B）'
- en: Proof with eauto.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: (* FILL IN HERE *) Admitted.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: （填写此处） Admitted.
- en: ☐
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 2 stars, optional (typing_example_2)'
  id: totrans-195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2 星，可选（typing_example_2）
- en: '[PRE20]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Lemma has_type__wf : ∀Γ t T,'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 has_type__wf：∀Γ t T。
- en: has_type Γ t T → well_formed_ty T.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: has_type Γ t T → well_formed_ty T.
- en: Proof with eauto.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof with eauto。
- en: intros Γ t T Htyp.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: induction Htyp...
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_App *)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: inversion IHHtyp1...
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Proj *)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: eapply [wf_rcd_lookup](RecordSub.html#wf_rcd_lookup)...
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: apply [subtype__wf](RecordSub.html#subtype__wf) in H.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: destruct H...
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Lemma step_preserves_record_tm : ∀tr tr'','
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: record_tm tr →
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: tr ⇒ tr' →
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: record_tm tr'.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: intros tr tr' Hrt Hstp.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: inversion Hrt; subst; inversion Hstp; subst; eauto.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Lemma lookup_field_in_value : ∀v T i Ti,'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: value v →
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: has_type empty v T →
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Tlookup i T = Some Ti →
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: ∃vi, tlookup i v = Some vi ∧ has_type empty vi Ti.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: remember [empty](Maps.html#empty) as Γ.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: intros t T i Ti Hval Htyp. revert Ti HeqGamma Hval.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: induction Htyp; intros; subst; try solve_by_invert.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: apply ([rcd_types_match](RecordSub.html#rcd_types_match) S) in H[0]...
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: destruct H[0] as [Si [HgetSi Hsub]].
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: destruct (IHHtyp Si) as [vi [Hget Htyvi]]...
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_RCons *)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: simpl in H[0]. simpl. simpl in H[1].
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([beq_id](Maps.html#beq_id) i i[0]).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: + (* i is first *)
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: inversion H[1]. subst. ∃t...
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: + (* i in tail *)
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: destruct (IHHtyp2 Ti) as [vi [get Htyvi]]...
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: inversion Hval... Qed.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Lemma canonical_forms_of_arrow_types : ∀Γ s T[1] T[2],'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: has_type Γ s (TArrow T[1] T[2]) →
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: value s →
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: ∃x, ∃S[1], ∃s[2],
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: s = tabs x S[1] s[2].
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: ☐
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Theorem progress : ∀t T,'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[has_type](RecordSub.html#has_type) [empty](Maps.html#empty) [t](RecordSub.html#t)
    [T](RecordSub.html#T) →'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '[value](RecordSub.html#value) [t](RecordSub.html#t) ∨ ∃t'', [t](RecordSub.html#t)
    ⇒ [t''](RecordSub.html#t'').'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: intros t T Ht.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: remember [empty](Maps.html#empty) as Γ.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: revert HeqGamma.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: induction Ht;
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: intros HeqGamma; subst...
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Var *)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: inversion H.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_App *)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: right.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHt1; subst...
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: + (* t[1] is a value *)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHt2; subst...
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '* (* t[2] is a value *)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([canonical_forms_of_arrow_types](RecordSub.html#canonical_forms_of_arrow_types)
    [empty](Maps.html#empty) t[1] T[1] T[2])
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: as [x [S[1] [t[12] Heqt1]]]...
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: subst. ∃([x:=t[2]]t[12])...
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '* (* t[2] steps *)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: destruct H[0] as [t[2]' Hstp]. ∃([tapp](RecordSub.html#tapp) t[1] t[2]')...
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: + (* t[1] steps *)
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: destruct H as [t[1]' Hstp]. ∃([tapp](RecordSub.html#tapp) t[1]' t[2])...
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Proj *)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: right. destruct IHHt...
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: + (* rcd is value *)
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([lookup_field_in_value](RecordSub.html#lookup_field_in_value) t T
    i Ti)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: as [t' [Hget Ht']]...
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: + (* rcd_steps *)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: destruct H[0] as [t' Hstp]. ∃([tproj](RecordSub.html#tproj) t' i)...
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_RCons *)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHt1...
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: + (* head is a value *)
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHt2...
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '* (* tail steps *)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: right. destruct H[2] as [tr' Hstp].
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: ∃([trcons](RecordSub.html#trcons) i t tr')...
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: + (* head steps *)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: right. destruct H[1] as [t' Hstp].
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: ∃([trcons](RecordSub.html#trcons) i t' tr)... Qed.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '*Theorem* : For any term t and type T, if empty ⊢ t : T'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: then t is a value or t ⇒ t' for some term t'.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Proof*: Let t and T be given such that empty ⊢ t : T.  We'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proceed by induction on the given typing derivation.
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The cases where the last step in the typing derivation is T_Abs or T_RNil are
    immediate because abstractions and {} are always values. The case for T_Var is
    vacuous because variables cannot be typed in the empty context.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类型推导的最后一步是T_Abs或T_RNil的情况下是显而易见的，因为抽象和{}总是值。对于T_Var的情况是无效的，因为变量不能在空上下文中被类型化。
- en: 'If the last step in the typing derivation is by T_App, then there are terms
    t[1] t[2] and types T[1] T[2] such that t = t[1] t[2], T = T[2], empty ⊢ t[1]
    : T[1] → T[2] and empty ⊢ t[2] : T[1].'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果在类型推导中的最后一步是通过T_App，则存在项t[1] t[2]和类型T[1] T[2]，使得t = t[1] t[2]，T = T[2]，empty
    ⊢ t[1] : T[1] → T[2]和empty ⊢ t[2] : T[1]。'
- en: The induction hypotheses for these typing derivations yield that t[1] is a value
    or steps, and that t[2] is a value or steps.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些类型推导的归纳假设表明t[1]是一个值或步骤，t[2]是一个值或步骤。
- en: Suppose t[1] ⇒ t[1]' for some term t[1]'. Then t[1] t[2] ⇒ t[1]' t[2] by ST_App1.
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设对于某个项t[1]'，t[1] ⇒ t[1]'。那么t[1] t[2] ⇒ t[1]' t[2]通过ST_App1。
- en: Otherwise t[1] is a value.
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则t[1]是一个值。
- en: Suppose t[2] ⇒ t[2]' for some term t[2]'. Then t[1] t[2] ⇒ t[1] t[2]' by rule
    ST_App2 because t[1] is a value.
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设对于某个项t[2]'，t[2] ⇒ t[2]'。那么由于t[1]是一个值，所以t[1] t[2] ⇒ t[1] t[2]'通过ST_App2。
- en: Otherwise, t[2] is a value. By Lemma canonical_forms_for_arrow_types, t[1] =
    \x:S[1].s2 for some x, S[1], and s[2]. But then (λx:S[1].s2) t[2] ⇒ [x:=t[2]]s[2]
    by ST_AppAbs, since t[2] is a value.
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，t[2]是一个值。根据引理canonical_forms_for_arrow_types，t[1] = \x:S[1].s2，其中x，S[1]和s[2]。但是由于t[2]是一个值，所以(λx:S[1].s2)
    t[2] ⇒ [x:=t[2]]s[2]通过ST_AppAbs。
- en: 'If the last step of the derivation is by T_Proj, then there are a term tr,
    a type Tr, and a label i such that t = tr.i, empty ⊢ tr : Tr, and Tlookup i Tr
    = Some T.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果推导的最后一步是通过T_Proj，则存在一个项tr，一个类型Tr和一个标签i，使得t = tr.i，empty ⊢ tr : Tr，以及Tlookup
    i Tr = Some T。'
- en: By the IH, either tr is a value or it steps. If tr ⇒ tr' for some term tr',
    then tr.i ⇒ tr'.i by rule ST_Proj1.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过IH，tr要么是一个值，要么是一个步骤。如果对于某个项tr'，tr ⇒ tr'，那么通过规则ST_Proj1，tr.i ⇒ tr'.i。
- en: If tr is a value, then Lemma lookup_field_in_value yields that there is a term
    ti such that tlookup i tr = Some ti. It follows that tr.i ⇒ ti by rule ST_ProjRcd.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果tr是一个值，则引理lookup_field_in_value表明存在一个项ti，使得tlookup i tr = Some ti。由此可知tr.i
    ⇒ ti通过规则ST_ProjRcd。
- en: 'If the final step of the derivation is by T_Sub, then there is a type S such
    that S <: T and empty ⊢ t : S. The desired result is exactly the induction hypothesis
    for the typing subderivation.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果推导的最后一步是通过T_Sub，则存在一个类型S，使得S <: T且empty ⊢ t : S。所需的结果正是类型子推导的归纳假设。'
- en: 'If the final step of the derivation is by T_RCons, then there exist some terms
    t[1] tr, types T[1] Tr and a label t such that t = {i=t[1], tr}, T = {i:T[1],
    Tr}, record_tm tr, record_tm Tr, empty ⊢ t[1] : T[1] and empty ⊢ tr : Tr.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果推导的最后一步是通过T_RCons，则存在一些项t[1] tr，类型T[1] Tr和一个标签t，使得t = {i=t[1], tr}，T = {i:T[1],
    Tr}，record_tm tr，record_tm Tr，empty ⊢ t[1] : T[1]和empty ⊢ tr : Tr。'
- en: 'The induction hypotheses for these typing derivations yield that t[1] is a
    value or steps, and that tr is a value or steps. We consider each case:'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些类型推导的归纳假设表明t[1]是一个值或步骤，tr是一个值或步骤。我们考虑每种情况：
- en: Suppose t[1] ⇒ t[1]' for some term t[1]'. Then {i=t[1], tr} ⇒ {i=t[1]', tr}
    by rule ST_Rcd_Head.
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设对于某个项t[1]'，t[1] ⇒ t[1]'。那么由于t[1]是一个值，所以{i=t[1], tr} ⇒ {i=t[1]', tr}通过规则ST_Rcd_Head。
- en: Otherwise t[1] is a value.
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则t[1]是一个值。
- en: Suppose tr ⇒ tr' for some term tr'. Then {i=t[1], tr} ⇒ {i=t[1], tr'} by rule
    ST_Rcd_Tail, since t[1] is a value.
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设对于某个项tr'，tr ⇒ tr'。那么由于t[1]是一个值，所以{i=t[1], tr} ⇒ {i=t[1], tr'}通过规则ST_Rcd_Tail。
- en: Otherwise, tr is also a value. So, {i=t[1], tr} is a value by v_rcons.
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，tr也是一个值。因此，{i=t[1], tr}也是一个值，根据v_rcons。
- en: '[PRE23]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Lemma typing_inversion_var : ∀Γ x T,'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 引理typing_inversion_var：对于所有Γ x T，
- en: has_type Γ (tvar x) T →
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在Γ（tvar x）T下有类型 →
- en: ∃S,
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: ∃S。
- en: Γ x = Some S ∧ subtype S T.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: Γ x = Some S ∧ subtype S T。
- en: Proof with eauto.
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: intros Γ x T Hty.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: intros Γ x T Hty。
- en: remember ([tvar](RecordSub.html#tvar) x) as t.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 记住([tvar](RecordSub.html#tvar) x)为t。
- en: induction Hty; intros;
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 对归纳Hty; intros;
- en: inversion Heqt; subst; try solve_by_invert.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 反演Heqt; 替换; 尝试通过反演解决。
- en: '- (* T_Var *)'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Var *)'
- en: ∃T...
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: ∃T...
- en: '- (* T_Sub *)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Sub *)'
- en: destruct IHHty as [U [Hctx HsubU]]... Qed.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 将IHHty解构为[U [Hctx HsubU]]... 完成。
- en: 'Lemma typing_inversion_app : ∀Γ t[1] t[2] T[2],'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 引理typing_inversion_app：对于所有Γ t[1] t[2] T[2]，
- en: has_type Γ (tapp t[1] t[2]) T[2] →
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在Γ（tapp t[1] t[2]）T[2]下有类型 →
- en: ∃T[1],
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: ∃T[1]，
- en: has_type Γ t[1] (TArrow T[1] T[2]) ∧
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在Γ t[1] (TArrow T[1] T[2])下有类型 ∧
- en: has_type Γ t[2] T[1].
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在Γ t[2] T[1]下有类型。
- en: Proof with eauto.
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: intros Γ t[1] t[2] T[2] Hty.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: intros Γ t[1] t[2] T[2] Hty.
- en: remember ([tapp](RecordSub.html#tapp) t[1] t[2]) as t.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 记住([tapp](RecordSub.html#tapp) t[1] t[2])为t。
- en: induction Hty; intros;
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 对于归纳Hty; intros;
- en: inversion Heqt; subst; try solve_by_invert.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 反演Heqt; 替换; 尝试通过反演解决。
- en: '- (* T_App *)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_App *)'
- en: ∃T[1]...
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: ∃T[1]...
- en: '- (* T_Sub *)'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Sub *)'
- en: destruct IHHty as [U[1] [Hty1 Hty2]]...
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 将IHHty解构为[U[1] [Hty1 Hty2]]...
- en: assert (Hwf := [has_type__wf](RecordSub.html#has_type__wf) _ _ _ Hty2).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: ∃U[1]... Qed.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_abs : ∀Γ x S[1] t[2] T,'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: has_type Γ (tabs x S[1] t[2]) T →
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: (∃S[2], subtype (TArrow S[1] S[2]) T
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: ∧ has_type (update Γ x S[1]) t[2] S[2]).
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: intros Γ x S[1] t[2] T H.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: remember ([tabs](RecordSub.html#tabs) x S[1] t[2]) as t.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: induction H;
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqt; subst; intros; try solve_by_invert.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Abs *)'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: assert (Hwf := [has_type__wf](RecordSub.html#has_type__wf) _ _ _ H[0]).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[12]...
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHhas_type as [S[2] [Hsub Hty]]...
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_proj : ∀Γ i t[1] Ti,'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: has_type Γ (tproj t[1] i) Ti →
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: ∃T, ∃Si,
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: Tlookup i T = Some Si ∧ subtype Si Ti ∧ has_type Γ t[1] T.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: intros Γ i t[1] Ti H.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: remember ([tproj](RecordSub.html#tproj) t[1] i) as t.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: induction H;
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqt; subst; intros; try solve_by_invert.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Proj *)'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: assert ([well_formed_ty](RecordSub.html#well_formed_ty) Ti) as Hwf.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '{ (* pf of assertion *)'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: apply ([wf_rcd_lookup](RecordSub.html#wf_rcd_lookup) i T Ti)...
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: apply [has_type__wf](RecordSub.html#has_type__wf) in H... }
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: ∃T. ∃Ti...
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHhas_type as [U [Ui [Hget [Hsub Hty]]]]...
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: ∃U. ∃Ui... Qed.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_rcons : ∀Γ i ti tr T,'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: has_type Γ (trcons i ti tr) T →
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: ∃Si, ∃Sr,
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: subtype (TRCons i Si Sr) T ∧ has_type Γ ti Si ∧
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: record_tm tr ∧ has_type Γ tr Sr.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: intros Γ i ti tr T Hty.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: remember ([trcons](RecordSub.html#trcons) i ti tr) as t.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: induction Hty;
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqt; subst...
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: apply IHHty in H[0].
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: destruct H[0] as [Ri [Rr [HsubRS [HtypRi HtypRr]]]].
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: ∃Ri. ∃Rr...
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_RCons *)'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: assert ([well_formed_ty](RecordSub.html#well_formed_ty) ([TRCons](RecordSub.html#TRCons)
    i T Tr)) as Hwf.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '{ (* pf of assertion *)'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: apply [has_type__wf](RecordSub.html#has_type__wf) in Hty1.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: apply [has_type__wf](RecordSub.html#has_type__wf) in Hty2... }
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: ∃T. ∃Tr... Qed.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma abs_arrow : ∀x S[1] s[2] T[1] T[2],'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: has_type empty (tabs x S[1] s[2]) (TArrow T[1] T[2]) →
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: subtype T[1] S[1]
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: ∧ has_type (update empty x S[1]) s[2] T[2].
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: intros x S[1] s[2] T[1] T[2] Hty.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: apply [typing_inversion_abs](RecordSub.html#typing_inversion_abs) in Hty.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: destruct Hty as [S[2] [Hsub Hty]].
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: apply [sub_inversion_arrow](RecordSub.html#sub_inversion_arrow) in Hsub.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: destruct Hsub as [U[1] [U[2] [Heq [Hsub1 Hsub2]]]].
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heq; subst... Qed.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Inductive appears_free_in : id → tm → Prop :='
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_var : ∀x,'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x (tvar x)
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_app1 : ∀x t[1] t[2],'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t[1] → appears_free_in x (tapp t[1] t[2])
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_app2 : ∀x t[1] t[2],'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t[2] → appears_free_in x (tapp t[1] t[2])
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_abs : ∀x y T[11] t[12],'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: y ≠ x  →
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t[12] →
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x (tabs y T[11] t[12])
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_proj : ∀x t i,'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t →
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x (tproj t i)
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_rhead : ∀x i t tr,'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t →
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x (trcons i t tr)
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_rtail : ∀x i t tr,'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x tr →
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x (trcons i t tr).
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: Hint Constructors appears_free_in.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma context_invariance : ∀Γ Γ'' t S,'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 引理上下文不变性：∀Γ Γ' t S，
- en: has_type Γ t S  →
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 具有类型 Γ t S  →
- en: (∀x, appears_free_in x t → Γ x = Γ' x)  →
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: (∀x, 在 x t 中出现自由 → Γ x = Γ' x)  →
- en: has_type Γ' t S.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 具有类型 Γ' t S。
- en: Proof with eauto.
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明与 eauto。
- en: intros. generalize dependent Γ'.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: intros。推广 Γ'。
- en: induction H;
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 对 I 进行归纳；
- en: intros Γ' Heqv...
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: intros Γ' Heqv...
- en: '- (* T_Var *)'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Var *)'
- en: apply [T_Var](RecordSub.html#T_Var)... rewrite ← Heqv...
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 应用[T_Var](RecordSub.html#T_Var)... 重写 ← Heqv...
- en: '- (* T_Abs *)'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Abs *)'
- en: apply [T_Abs](RecordSub.html#T_Abs)... apply IHhas_type. intros x[0] Hafi.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 应用[T_Abs](RecordSub.html#T_Abs)... 应用 IHhas_type。intros x[0] Hafi。
- en: unfold [update](Maps.html#update), [t_update](Maps.html#t_update). destruct
    ([beq_idP](Maps.html#beq_idP) x x[0])...
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 展开[update](Maps.html#update), [t_update](Maps.html#t_update)。分解([beq_idP](Maps.html#beq_idP)
    x x[0])...
- en: '- (* T_App *)'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_App *)'
- en: apply [T_App](RecordSub.html#T_App) with T[1]...
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 应用[T_App](RecordSub.html#T_App)与T[1]...
- en: '- (* T_RCons *)'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_RCons *)'
- en: apply [T_RCons](RecordSub.html#T_RCons)... Qed.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 应用[T_RCons](RecordSub.html#T_RCons)... 完成。
- en: 'Lemma free_in_context : ∀x t T Γ,'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 引理自由出现在上下文中：∀x t T Γ，
- en: appears_free_in x t →
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 在 x t 中出现自由的 →
- en: has_type Γ t T →
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 具有类型 Γ t T →
- en: ∃T', Γ x = Some T'.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: ∃T'，Γ x = Some T'。
- en: Proof with eauto.
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明与 eauto。
- en: intros x t T Γ Hafi Htyp.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: intros x t T Γ Hafi Htyp。
- en: induction Htyp; subst; inversion Hafi; subst...
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Htyp 进行归纳；替换；反演 Hafi；替换...
- en: '- (* T_Abs *)'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Abs *)'
- en: destruct (IHHtyp H[5]) as [T Hctx]. ∃T.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 将 IHHtyp H[5] 分解为[T Hctx]。 ∃T。
- en: unfold [update](Maps.html#update), [t_update](Maps.html#t_update) in Hctx.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Hctx 中展开[update](Maps.html#update), [t_update](Maps.html#t_update)。
- en: rewrite [false_beq_id](Maps.html#false_beq_id) in Hctx... Qed.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Hctx 中重写[false_beq_id](Maps.html#false_beq_id)... 完成。
- en: '[PRE25]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Lemma substitution_preserves_typing : ∀Γ x U v t S,'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 替换保持类型：∀Γ x U v t S，
- en: has_type (update Γ x U) t S  →
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 具有类型 (update Γ x U) t S  →
- en: has_type empty v U   →
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 具有类型 empty v U →
- en: has_type Γ ([x:=v]t) S.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 具有类型 Γ ([x:=v]t) S.
- en: Proof with eauto.
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明与 eauto。
- en: intros Γ x U v t S Htypt Htypv.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: intros Γ x U v t S Htypt Htypv。
- en: generalize dependent S. generalize dependent Γ.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 推广 S。推广 Γ。
- en: induction t; intros; simpl.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 对 t 进行归纳；intros；简化。
- en: '- (* tvar *)'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tvar *)'
- en: rename i into y.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 将 i 重命名为 y。
- en: destruct ([typing_inversion_var](RecordSub.html#typing_inversion_var) _ _ _
    Htypt) as [T [Hctx Hsub]].
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 分解([typing_inversion_var](RecordSub.html#typing_inversion_var) _ _ _ Htypt)为[T
    [Hctx Hsub]]。
- en: unfold [update](Maps.html#update), [t_update](Maps.html#t_update) in Hctx.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Hctx 中展开[update](Maps.html#update), [t_update](Maps.html#t_update)。
- en: destruct ([beq_idP](Maps.html#beq_idP) x y)...
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 分解([beq_idP](Maps.html#beq_idP) x y)...
- en: + (* x=y *)
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: + (* x=y *)
- en: subst.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 替换。
- en: inversion Hctx; subst. clear Hctx.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 Hctx；替换。清除 Hctx。
- en: apply [context_invariance](RecordSub.html#context_invariance) with [empty](Maps.html#empty)...
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 应用[context_invariance](RecordSub.html#context_invariance)与[empty](Maps.html#empty)...
- en: intros x Hcontra.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: intros x Hcontra。
- en: destruct ([free_in_context](RecordSub.html#free_in_context) _ _ S [empty](Maps.html#empty)
    Hcontra) as [T' HT']...
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 分解([free_in_context](RecordSub.html#free_in_context) _ _ S [empty](Maps.html#empty)
    Hcontra)为[T' HT']...
- en: inversion HT'.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 HT'。
- en: + (* x<>y *)
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: + (* x<>y *)
- en: destruct ([subtype__wf](RecordSub.html#subtype__wf) _ _ Hsub)...
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 分解([subtype__wf](RecordSub.html#subtype__wf) _ _ Hsub)...
- en: '- (* tapp *)'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tapp *)'
- en: destruct ([typing_inversion_app](RecordSub.html#typing_inversion_app) _ _ _
    _ Htypt)
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 分解([typing_inversion_app](RecordSub.html#typing_inversion_app) _ _ _ _ Htypt)
- en: as [T[1] [Htypt1 Htypt2]].
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 作为[T[1] [Htypt1 Htypt2]]。
- en: eapply [T_App](RecordSub.html#T_App)...
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 应用[T_App](RecordSub.html#T_App)...
- en: '- (* tabs *)'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tabs *)'
- en: rename i into y. rename t into T[1].
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 将 i 重命名为 y。将 t 重命名为 T[1]。
- en: destruct ([typing_inversion_abs](RecordSub.html#typing_inversion_abs) _ _ _
    _ _ Htypt)
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 分解([typing_inversion_abs](RecordSub.html#typing_inversion_abs) _ _ _ _ _ Htypt)
- en: as [T[2] [Hsub Htypt2]].
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 作为[T[2] [Hsub Htypt2]]。
- en: destruct ([subtype__wf](RecordSub.html#subtype__wf) _ _ Hsub) as [Hwf1 Hwf2].
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 分解([subtype__wf](RecordSub.html#subtype__wf) _ _ Hsub)为[Hwf1 Hwf2]。
- en: inversion Hwf2. subst.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 Hwf2。替换。
- en: apply [T_Sub](RecordSub.html#T_Sub) with ([TArrow](RecordSub.html#TArrow) T[1]
    T[2])... apply [T_Abs](RecordSub.html#T_Abs)...
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 应用[T_Sub](RecordSub.html#T_Sub)与([TArrow](RecordSub.html#TArrow) T[1] T[2])...
    应用[T_Abs](RecordSub.html#T_Abs)...
- en: destruct ([beq_idP](Maps.html#beq_idP) x y).
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 分解([beq_idP](Maps.html#beq_idP) x y)。
- en: + (* x=y *)
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: + (* x=y *)
- en: eapply [context_invariance](RecordSub.html#context_invariance)...
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 应用[context_invariance](RecordSub.html#context_invariance)...
- en: subst.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 替换。
- en: intros x Hafi. unfold [update](Maps.html#update), [t_update](Maps.html#t_update).
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: intros x Hafi. 展开[update](Maps.html#update), [t_update](Maps.html#t_update)。
- en: destruct ([beq_id](Maps.html#beq_id) y x)...
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 分解([beq_id](Maps.html#beq_id) y x)...
- en: + (* x<>y *)
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: + (* x<>y *)
- en: apply IHt. eapply [context_invariance](RecordSub.html#context_invariance)...
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 IHt。应用[context_invariance](RecordSub.html#context_invariance)...
- en: intros z Hafi. unfold [update](Maps.html#update), [t_update](Maps.html#t_update).
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: intros z Hafi。展开[update](Maps.html#update), [t_update](Maps.html#t_update)。
- en: destruct ([beq_idP](Maps.html#beq_idP) y z)...
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 分解([beq_idP](Maps.html#beq_idP) y z)...
- en: subst. rewrite [false_beq_id](Maps.html#false_beq_id)...
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 替换。重写[false_beq_id](Maps.html#false_beq_id)...
- en: '- (* tproj *)'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tproj *)'
- en: destruct ([typing_inversion_proj](RecordSub.html#typing_inversion_proj) _ _
    _ _ Htypt)
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 解构（[typing_inversion_proj](RecordSub.html#typing_inversion_proj) _ _ _ _ Htypt）
- en: as [T [Ti [Hget [Hsub Htypt1]]]]...
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 [T [Ti [Hget [Hsub Htypt1]]]]...
- en: '- (* trnil *)'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* trnil *)'
- en: eapply [context_invariance](RecordSub.html#context_invariance)...
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [context_invariance](RecordSub.html#context_invariance)...
- en: intros y Hcontra. inversion Hcontra.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 推断 y Hcontra。反演 Hcontra。
- en: '- (* trcons *)'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* trcons *)'
- en: destruct ([typing_inversion_rcons](RecordSub.html#typing_inversion_rcons) _
    _ _ _ _ Htypt) as
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 解构（[typing_inversion_rcons](RecordSub.html#typing_inversion_rcons) _ _ _ _ _
    Htypt）为
- en: '[Ti [Tr [Hsub [HtypTi [Hrcdt2 HtypTr]]]]].'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ti [Tr [Hsub [HtypTi [Hrcdt2 HtypTr]]]]]。'
- en: apply [T_Sub](RecordSub.html#T_Sub) with ([TRCons](RecordSub.html#TRCons) i
    Ti Tr)...
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [T_Sub](RecordSub.html#T_Sub) 与 ([TRCons](RecordSub.html#TRCons) i Ti Tr)...
- en: apply [T_RCons](RecordSub.html#T_RCons)...
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [T_RCons](RecordSub.html#T_RCons)...
- en: + (* record_ty Tr *)
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: + (* 记录类型 Tr *)
- en: apply [subtype__wf](RecordSub.html#subtype__wf) in Hsub. destruct Hsub. inversion
    H[0]...
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [subtype__wf](RecordSub.html#subtype__wf) 在 Hsub 中。解构 Hsub。反演 H[0]...
- en: + (* record_tm (x:=vt[2]) *)
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: + (* 记录项 (x:=vt[2]) *)
- en: inversion Hrcdt2; subst; simpl... Qed.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 Hrcdt2；替换；简化... 完成。
- en: 'Theorem preservation : ∀t t'' T,'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 定理保持性：∀t t' T，
- en: has_type empty t T  →
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 有类型 empty t T  →
- en: t ⇒ t'  →
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: t ⇒ t'  →
- en: has_type empty t' T.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 有类型 empty t' T。
- en: Proof with eauto.
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明与自动完成。
- en: intros t t' T HT.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 推断 t t' T HT。
- en: remember [empty](Maps.html#empty) as Γ. generalize dependent HeqGamma.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 [empty](Maps.html#empty) 为 Γ。推广依赖于 HeqGamma。
- en: generalize dependent t'.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 推广依赖于 t'。
- en: induction HT;
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳 HT；
- en: intros t' HeqGamma HE; subst; inversion HE; subst...
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 推断 t' HeqGamma HE；替换；反演 HE；替换...
- en: '- (* T_App *)'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_App *)'
- en: inversion HE; subst...
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 HE；替换...
- en: + (* ST_AppAbs *)
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: + (* ST_AppAbs *)
- en: destruct ([abs_arrow](RecordSub.html#abs_arrow) _ _ _ _ _ HT[1]) as [HA[1] HA[2]].
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 解构（[abs_arrow](RecordSub.html#abs_arrow) _ _ _ _ _ HT[1]）为 [HA[1] HA[2]]。
- en: apply [substitution_preserves_typing](RecordSub.html#substitution_preserves_typing)
    with T...
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [substitution_preserves_typing](RecordSub.html#substitution_preserves_typing)
    与 T...
- en: '- (* T_Proj *)'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Proj *)'
- en: destruct ([lookup_field_in_value](RecordSub.html#lookup_field_in_value) _ _
    _ _ H[2] HT H)
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 解构（[lookup_field_in_value](RecordSub.html#lookup_field_in_value) _ _ _ _ H[2]
    HT H）
- en: as [vi [Hget Hty]].
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 [vi [Hget Hty]]。
- en: rewrite H[4] in Hget. inversion Hget. subst...
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H[4] 中重写 Hget。反演 Hget。替换...
- en: '- (* T_RCons *)'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_RCons *)'
- en: eauto using [step_preserves_record_tm](RecordSub.html#step_preserves_record_tm).
    Qed.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [step_preserves_record_tm](RecordSub.html#step_preserves_record_tm) 自动完成。完成。
- en: '[PRE26]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
