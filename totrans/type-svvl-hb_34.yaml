- en: オブジェクトを浅くコピーする
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浅拷贝对象
- en: 原文：[https://typescriptbook.jp/tips/shallow-copy-object](https://typescriptbook.jp/tips/shallow-copy-object)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tips/shallow-copy-object](https://typescriptbook.jp/tips/shallow-copy-object)
- en: オブジェクトとは色々なキーとプロパティの組み合わせをひとつのモノとして扱うことができます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对象可以将各种键和属性的组合视为一个单独的实体。
- en: オブジェクトを扱っているとき、そのインスタンスに対する比較や代入は他の言語と同じように参照の比較、代入です。その参照をほかのどこかで持たれているとそこで書き換えられる可能性があります。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理对象时，对于实例的比较和赋值与其他语言一样是引用的比较和赋值。如果其他地方持有该引用，则可能会被修改。
- en: インスタンスを安易に上書きすると起こる弊害[​](#インスタンスを安易に上書きすると起こる弊害 "インスタンスを安易に上書きすると起こる弊害 への直接リンク")
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容易导致覆盖实例的弊端[​](#容易导致覆盖实例的弊端 "容易导致覆盖实例的弊端 への直接リンク")
- en: たとえば生活習慣病に関するサービスを作るとします。そのサービスでは一日の食事を入力するとその食事から熱量 (カロリー) が計算され、さらに将来的に生活習慣病
    (少々異なりますがMetabolic Syndromeとします) になるかどうか判定できるとします。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要创建一个关于生活习惯疾病的服务。该服务允许用户输入一天的饮食，计算热量，并且可以判断未来是否会患上生活习惯疾病（稍有不同，但我们将其称为代谢综合征）。
- en: ここで一日の食事を意味するオブジェクトの型として`MealsPerDay`を定義し、一日に摂取した食事の熱量からいずれ生活習慣病になるかどうか判定する関数`willBeMetabo()`を定義すれば次のようになります。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们定义了一个表示一天饮食的对象类型为`MealsPerDay`，并定义了一个函数`willBeMetabo()`，用于根据一天摄入的食物热量判断是否会患上生活习惯疾病，则代码如下。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 使い方としては次のようになります。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法如下：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ですが、これだけだと食べ物ではないもの、たとえばネジなどの不正な入力があったときにサービスが予想しない反応をしかねません。そこで入力されているものが本当に食事かどうかをバリデーションする関数として`isMeals()`を定義します。この関数は食事ではないものが与えられると例外を投げます。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，仅仅这样做可能会导致服务对于非食物类输入（例如螺丝）做出意料之外的反应。因此，我们定义一个验证函数`isMeals()`，用于验证输入是否真的是食物。当输入非食物时，该函数会抛出异常。
- en: '`isMeals()`の構造は単純です。朝食、昼食、夕食をそれぞれそれが食事であるかどうかを判定するだけです。ひとつの食事が食事であるかを判定する関数`isMeal()`があるとすれば内部でそれを呼ぶだけです。`isMeal()`の実装については今回は重要ではないため省略します。'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`isMeals()`的结构很简单。它只是判断早餐、午餐和晚餐是否是食物。如果有一个判断食物的函数`isMeal()`，那么它只需在内部调用它。由于本次讨论重点不在`isMeal()`的实现上，因此省略了。'
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 今回のユースケースでは`isMeals()`でバリデーションを行ったあとその食事を`willBeMetabo()`で判定します。食べられないものが与られたときは例外を捕捉して対応できればよいので大まかにはこのような形になるでしょう。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本用例中，我们首先通过`isMeals()`进行验证，然后通过`willBeMetabo()`进行判断。如果输入了无法食用的物品，只要能捕获异常并处理即可，大致上会是这种形式。
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ここで`isMeals()`の制作者あるいは維持者が何を思ってか`isMeals()`に自分の好きなコッテコテギトギトの食事を、もとのインスタンスを上書きするようにプログラムを書いたとします。この変更によって前述のとても健康的で500
    kcalにも満たない食事をしているはずのユーザーが`isMeals()`を19,800 kcalものカロリー爆弾を摂取していることになります。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`isMeals()`的作者或维护者在`isMeals()`中写了一段代码，将自己喜欢的高热量食物覆盖了原始实例。由于这个更改，原本应该摄入非常健康且不到500卡路里的食物的用户，现在却摄入了19,800卡路里的热量炸弹。
- en: '[PRE8]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`isMeals()`を呼んでしまったらもうどのような食事が与えられても`willBeMetabo()`は誰もが生活習慣病に一直線であると判別されることになります。変数`meals`の変更は`isMeals()`内に留まらず、外側にも影響を与えます。'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调用`isMeals()`，那么无论输入什么食物，`willBeMetabo()`都会判断所有人都会患上生活习惯疾病。`meals`的更改不仅限于`isMeals()`内部，还会影响外部。
- en: 今回の問題[​](#今回の問題 "今回の問題 への直接リンク")
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这个问题[​](#这个问题 "这个问题 への直接リンク")
- en: 今回の例は`isMeals()`が悪さをしました。この関数が自分たちで作ったものであればすぐに原因を見つけることができるでしょう。このような問題のある関数を書かないようにすることはもちろん大事なことですが、未熟なチームメイトがいればこのような関数を書くかもしれません。人類が過ちを犯さない前提よりも過ちを犯すことがないようにする設計の方が大事です。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子中，`isMeals()`出了问题。如果这个函数是由我们自己编写的，我们可能会很快找到问题的原因。避免编写这种有问题的函数当然很重要，但更重要的是设计不会犯错的系统，而不是假设人类不会犯错。
- en: '`isMeals()`が外部から持ってきたパッケージだとすると問題です。自分たちでこのパッケージに手を加えることは容易ではないため (できなくはありません)
    。制作者にプルリクエストを出してバグフィックスが行われるまで開発を止めるというのも現実的ではありません。'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`isMeals()`是外部引入的包，那就有问题了。由于我们无法轻易修改这个包（虽然不是不可能），因此向制作者提交错误修复的请求并等待开发停止是不现实的。
- en: どうすればよかったのか[​](#どうすればよかったのか "どうすればよかったのか への直接リンク")
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 该怎么做才是正确的[​](#该怎么做才是正确的 "该怎么做才是正确的 への直接リンク")
- en: そもそもインスタンスを書き換えられないようにしてしまうか、元のインスタンスが破壊されないようにスケープゴートのインスタンスを用意するのが一般的です。前者はバリューオブジェクトと呼ばれるものが代表します。ここで紹介するのは後者のスケープゴート、つまりコピーを用意する方法です。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，要么禁止修改实例，要么为了避免原始实例被破坏而准备一个替罪羊实例是常见做法。前者代表了所谓的值对象。这里介绍的是后者的替罪羊，即准备拷贝的方法。
- en: 浅いコピー (shallow copy) とは[​](#浅いコピー-shallow-copy-とは "浅いコピー (shallow copy) とは への直接リンク")
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浅拷贝（shallow copy）是什么[​](#浅拷贝-shallow-copy-是什么 "浅拷贝（shallow copy）是什么 への直接リンク")
- en: 題名にもあるとおり**浅い**とは何を指しているのでしょうか？それはオブジェクトのコピーをするにあたりオブジェクトがいかに深い構造になっていても (ネストしていても)
    第一階層のみをコピーすることに由来します。当然対義語は深いコピー (deep copy) です。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如标题所示，**浅拷贝**指的是什么？这意味着在拷贝对象时，无论对象有多深的结构（即嵌套），只会拷贝第一层。显然，其反义词是深拷贝（deep copy）。
- en: 浅いコピーをしたオブジェクトは等しくない[​](#浅いコピーをしたオブジェクトは等しくない "浅いコピーをしたオブジェクトは等しくない への直接リンク")
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浅拷贝的对象是不相等的[​](#浅拷贝的对象是不相等的 "浅拷贝的对象是不相等的 への直接リンク")
- en: 浅いコピーをする関数を`shallowCopy()`とします。実装は難しくありませんが今回は挙動についてのみ触れたいため言及は後にします。浅いコピーをしたオブジェクトとそのオリジナルは`===`で比較すると`false`を返します。これはコピーの原義から当然の挙動であり、もし`true`を返すようであればそれはコピーに失敗していることになります。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将浅拷贝函数命名为`shallowCopy()`。实现并不复杂，但由于这里只想讨论行为，所以具体实现将在后面提到。浅拷贝的对象和原始对象使用`===`进行比较时会返回`false`。这是符合拷贝的原始含义的行为，如果返回`true`，则表示拷贝失败。
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 次の例は先ほどのインスタンスの上書きを浅いコピーをすることにより防いでいる例です。`meals`のインスタンスは変化せず`isMeals()`に引数として与えた`scapegoat`だけが変更されます。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了通过浅拷贝来避免覆盖先前实例的示例。`meals`实例保持不变，只有作为参数传递给`isMeals()`的`scapegoat`发生了变化。
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 浅いコピーで防ぎきれない場合[​](#浅いコピーで防ぎきれない場合 "浅いコピーで防ぎきれない場合 への直接リンク")
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果无法通过浅拷贝来避免[​](#如果无法通过浅拷贝来避免 "如果无法通过浅拷贝来避免 への直接リンク")
- en: 先ほども述べたように浅いコピーはオブジェクトの第一階層のみをコピーします。そのためもしオブジェクトが深い、複雑な階層を持っている場合、それらをすべてコピーしているのではなく、第二階層以降は単なる参照になります。次の例は浅いコピーのプロパティにオブジェクトがある場合、それがコピーではなく参照になっていることを示しています。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所述，浅拷贝只会拷贝对象的第一层。因此，如果对象具有深层次、复杂的结构，那么除了第二层以外的部分都将变成简单的引用。下面的示例展示了当浅拷贝的属性中包含对象时，这些对象不是被复制而是被引用的情况。
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 完全なコピーを作りたい場合は浅いコピーと一緒に出てきた深いコピーを使います。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想要创建完全的拷贝，可以使用深拷贝，与浅拷贝一起使用。
- en: 深いコピーについて今回は深く触れません。浅いコピーに比べ深いコピーはコピーに時間がかかり、さらに参照ではなく実体をコピーするため、記憶領域を同じ量確保しなければなりません。何でもかんでも深いコピーをするとあっという間に時間的、空間的な領域を浪費します。浅いコピーでこと足りる場合は浅いコピーを使用する方がよいでしょう。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 关于深拷贝，本次不会深入讨论。与浅拷贝相比，深拷贝需要更多时间，并且需要复制实体而不是引用，因此需要分配相同数量的存储空间。如果无脑使用深拷贝，很快就会浪费时间和空间。如果浅拷贝足够，那么最好使用浅拷贝。
- en: 浅いコピーを実装する[​](#浅いコピーを実装する "浅いコピーを実装する への直接リンク")
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现浅拷贝[​](#实现浅拷贝 "实现浅拷贝 への直接リンク")
- en: 浅いコピーの実装は昨今のJSでは大変楽になっており、次のコードで完成です。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今的JS中，浅拷贝的实现变得非常简单，下面的代码就可以完成。
- en: '[PRE16]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: もちろん変数`sample`はオブジェクトである必要があります。この`...`はスプレッド構文です。スプレッド構文については関数の章を参照ください。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当然变量`sample`必须是一个对象。这里的`...`是展开语法。有关展开语法，请参考函数章节。
- en: オブジェクトのコピーにスプレッド構文を使えるようになったのはES2018からです。たとえば次のような浅いコピーの例を
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从ES2018开始，可以使用展开语法来复制对象。例如，以下是浅复制的一个例子
- en: '[PRE18]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: ES2018でコンパイルすると次のようになります。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 编译为ES2018时会变成以下形式。
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: ほぼ同じですがES2017でコンパイルすると次のようになります。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎相同，但是编译为ES2017时会变成以下形式。
- en: '[PRE22]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: となります。スプレッド構文が実装される前はこの`Object.assign()`を使っていました。このふたつはまったく同じものではありませんが`Object.assign({},
    obj)`を`{...obj}`のほぼ代替として使うことができます。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 并且。在实现展开语法之前，我们使用`Object.assign()`。虽然这两者并不完全相同，但可以将`Object.assign({}, obj)`用作`{...obj}`的替代品。
- en: コピー用のAPIを使う[​](#コピー用のapiを使う "コピー用のAPIを使う への直接リンク")
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用复制的API[​](#使用复制的api "使用复制的API 直接链接")
- en: JavaScriptではオブジェクトによって、浅いコピーを簡潔に書くためのAPIが提供されているものがあります。`Map`や`Set`はそれが利用できます。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，有一些对象提供了用于简洁编写浅复制的API。`Map`和`Set`就是其中之一。
- en: '`Map<K, V>`のコピー[​](#mapk-vのコピー "mapk-vのコピー への直接リンク")'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Map<K, V>`的复制[​](#mapk-v的复制 "mapk-v的复制 直接链接")'
- en: '`Map`をコピーする場合は、`Map`コンストラクタにコピーしたい`Map`オブジェクトを渡します。'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要复制`Map`，只需将要复制的`Map`对象传递给`Map`构造函数。
- en: '[PRE24]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[## 📄️ Map<K, V>'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ Map<K, V>'
- en: MapはJavaScriptの組み込みAPIのひとつで、キーと値のペアを取り扱うためのオブジェクトです。Mapにはひとつのキーについてはひとつの値のみを格納できます。](/reference/builtin-api/map)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Map是JavaScript的内置API之一，用于处理键值对的对象。Map对于每个键只能存储一个值。
- en: '`Set<T>`のコピー[​](#settのコピー "settのコピー への直接リンク")'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Set<T>`的复制[​](#sett的复制 "sett的复制 直接链接")'
- en: '`Set`をコピーする場合は、`Set`コンストラクタにコピーしたい`Set`オブジェクトを渡します。'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要复制`Set`，只需将要复制的`Set`对象传递给`Set`构造函数。
- en: '[PRE26]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[## 📄️ Set<T>'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ Set<T>'
- en: SetはJavaScriptの組み込みAPIのひとつで、値のコレクションを扱うためのオブジェクトです。Setには重複する値が格納できません。Setに格納された値は一意(unique)になります。](/reference/builtin-api/set)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Set是JavaScript的内置API之一，用于处理值的集合对象。Set不能存储重复的值。存储在Set中的值是唯一的。
- en: '`Array<T>`のコピー[​](#arraytのコピー "arraytのコピー への直接リンク")'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Array<T>`的复制[​](#arrayt的复制 "arrayt的复制 直接链接")'
- en: 配列をコピーする方法はいくつかありますが、もっとも簡単なのは配列のスプレッド構文を用いたものです。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以复制数组，但最简单的方法是使用数组的展开语法。
- en: '[PRE28]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: このときスプレッド構文`...`を書き忘れると配列の配列`T[][]`型ができあがるので気をつけてください。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果忘记写展开语法`...`，将会得到数组的数组`T[][]`类型，所以请注意。
- en: 関連情報[​](#関連情報 "関連情報 への直接リンク")
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关信息[​](#相关信息 "相关信息 直接链接")
- en: '[## 📄️ 配列のスプレッド構文「...」'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ 数组的展开语法「...」'
- en: JavaScript の配列ではスプレッド構文「...」を使うことで、要素を展開することができます。](/reference/values-types-variables/array/spread-syntax-for-array)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript的数组中，可以使用展开语法「...」来展开元素。](/reference/values-types-variables/array/spread-syntax-for-array)
