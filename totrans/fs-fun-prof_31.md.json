["```\n[<Test>]\nlet ``For certain inputs, expect certain outputs``() = \n    let testpairs = [ \n      (1,\"I\")\n      (2,\"II\")\n      (4,\"IV\")\n      (5,\"V\")\n      (9,\"IX\")\n      (10,\"X\")\n      // etc\n      (900,\"CM\")\n      (1000,\"M\")\n      (3497,\"MMMCDXCVII\")\n      ]\n    for (arabic,expectedRoman) in testpairs do\n       let roman = arabicToRoman arabic\n       Assert.AreEqual(expectedRoman, roman) \n```", "```\n[<Test>]\nlet ``For all valid inputs, there must be a max of four \"I\"s in a row``() = \n    for i in [1..4000] do\n       let roman = arabicToRoman i\n       roman |> assertMaxRepetition \"I\" 4 \n```", "```\n// Define a property that should be true for all inputs\nlet ``has max rep of four Is`` arabic = \n   let roman = arabicToRoman arabic\n   roman |> assertMaxRepetition \"I\" 4\n\n// Explicitly enumerate all inputs...\n[<Test>]\nlet ``For all valid inputs, there must be a max of four \"I\"s``() = \n    for i in [1..4000] do\n       //check that the property holds\n       ``has max rep of four Is`` i\n\n// ...Or use FsCheck to generate inputs for you\nlet isInRange i = (i >= 1) && (i <= 4000)\n// input is in range implies has max of four Is\nlet prop i = isInRange i ==> ``has max rep of four Is`` i\n// check all inputs for this property\nCheck.Quick prop \n```", "```\n// Define a property that should be true for all inputs\nlet ``if arabic has 4 tens then roman has one XL otherwise none`` arabic = \n   let roman = arabicToRoman arabic\n   let has4Tens = (arabic % 100 / 10) = 4 \n   if has4Tens then\n       assertMaxOccurs \"XL\" 1 roman\n   else \n       assertMaxOccurs \"XL\" 0 roman\n\n// Explicitly enumerate all inputs...\n[<Test>]\nlet ``For all valid inputs, check the XL substitution``() = \n    for i in [1..4000] do\n       ``if arabic has 4 tens then roman has one XL otherwise none`` i\n\n// ...Or again use FsCheck to generate inputs for you\nlet isInRange i = (i >= 1) && (i <= 4000)\nlet prop i = isInRange i ==> ``if arabic has 4 tens then roman has one XL otherwise none`` i\nCheck.Quick prop \n```", "```\nlet arabicToRoman arabic = \n   String.replicate arabic \"I\" \n```", "```\narabicToRoman 1    // \"I\"\narabicToRoman 5    // \"IIIII\"\narabicToRoman 10   // \"IIIIIIIIII\" \n```", "```\nlet arabicToRoman arabic = \n   (String.replicate arabic \"I\")\n    .Replace(\"IIIII\",\"V\")\n\n// test\narabicToRoman 1    // \"I\"\narabicToRoman 5    // \"V\"\narabicToRoman 6    // \"VI\"\narabicToRoman 10   // \"VV\" \n```", "```\nlet arabicToRoman arabic = \n   (String.replicate arabic \"I\")\n    .Replace(\"IIIII\",\"V\")\n    .Replace(\"VV\",\"X\")\n\n// test\narabicToRoman 1    // \"I\"\narabicToRoman 5    // \"V\"\narabicToRoman 6    // \"VI\"\narabicToRoman 10   // \"X\" \narabicToRoman 12   // \"XII\" \narabicToRoman 16   // \"XVI\" \n```", "```\nlet arabicToRoman arabic = \n   (String.replicate arabic \"I\")\n    .Replace(\"IIIII\",\"V\")\n    .Replace(\"VV\",\"X\")\n    .Replace(\"XXXXX\",\"L\")\n    .Replace(\"LL\",\"C\")\n    .Replace(\"CCCCC\",\"D\")\n    .Replace(\"DD\",\"M\")\n\n// test\narabicToRoman 1    // \"I\"\narabicToRoman 5    // \"V\"\narabicToRoman 6    // \"VI\"\narabicToRoman 10   // \"X\" \narabicToRoman 12   // \"XII\" \narabicToRoman 16   // \"XVI\" \narabicToRoman 3497 // \"MMMCCCCLXXXXVII\" \n```", "```\nlet arabicToRoman arabic = \n   (String.replicate arabic \"I\")\n    .Replace(\"IIIII\",\"V\")\n    .Replace(\"VV\",\"X\")\n    .Replace(\"XXXXX\",\"L\")\n    .Replace(\"LL\",\"C\")\n    .Replace(\"CCCCC\",\"D\")\n    .Replace(\"DD\",\"M\")\n    // optional substitutions\n    .Replace(\"IIII\",\"IV\")\n    .Replace(\"VIV\",\"IX\")\n    .Replace(\"XXXX\",\"XL\")\n    .Replace(\"LXL\",\"XC\")\n    .Replace(\"CCCC\",\"CD\")\n    .Replace(\"DCD\",\"CM\")\n\n// test\narabicToRoman 1    // \"I\"\narabicToRoman 4    // \"IV\"\narabicToRoman 5    // \"V\"\narabicToRoman 6    // \"VI\"\narabicToRoman 10   // \"X\" \narabicToRoman 12   // \"XII\" \narabicToRoman 16   // \"XVI\" \narabicToRoman 40   // \"XL\" \narabicToRoman 946  // \"CMXLVI\" \narabicToRoman 3497 // \"MMMCDXCVII\" \n```", "```\nlet biQuinaryDigits place (unit,five) arabic =\n    let digit =  arabic % (10*place) / place\n    match digit with\n    | 0 -> \"\"\n    | 1 -> unit\n    | 2 -> unit + unit\n    | 3 -> unit + unit + unit\n    | 4 -> unit + unit + unit + unit\n    | 5 -> five\n    | 6 -> five + unit\n    | 7 -> five + unit + unit\n    | 8 -> five + unit + unit + unit\n    | 9 -> five + unit + unit + unit + unit\n    | _ -> failwith \"Expected 0-9 only\"\n\nlet arabicToRoman arabic = \n    let units = biQuinaryDigits 1 (\"I\",\"V\") arabic\n    let tens = biQuinaryDigits 10 (\"X\",\"L\") arabic\n    let hundreds = biQuinaryDigits 100 (\"C\",\"D\") arabic\n    let thousands = biQuinaryDigits 1000 (\"M\",\"?\") arabic\n    thousands + hundreds + tens + units \n```", "```\nlet biQuinaryDigits place (unit,five,ten) arabic =\n  let digit =  arabic % (10*place) / place\n  match digit with\n  | 0 -> \"\"\n  | 1 -> unit\n  | 2 -> unit + unit\n  | 3 -> unit + unit + unit\n  | 4 -> unit + five // changed to be one less than five \n  | 5 -> five\n  | 6 -> five + unit\n  | 7 -> five + unit + unit\n  | 8 -> five + unit + unit + unit\n  | 9 -> unit + ten  // changed to be one less than ten\n  | _ -> failwith \"Expected 0-9 only\"\n\nlet arabicToRoman arabic = \n  let units = biQuinaryDigits 1 (\"I\",\"V\",\"X\") arabic\n  let tens = biQuinaryDigits 10 (\"X\",\"L\",\"C\") arabic\n  let hundreds = biQuinaryDigits 100 (\"C\",\"D\",\"M\") arabic\n  let thousands = biQuinaryDigits 1000 (\"M\",\"?\",\"?\") arabic\n  thousands + hundreds + tens + units \n```"]