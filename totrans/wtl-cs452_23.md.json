["```\n  Send( administrator, nil, workOrder );\n  FOREVER {\n    Send( administrator, workResult, workOrder );\n    workResult = doWork( workOrder );\n  }\n```", "```\nAdministrator( ) {\n  for ( i = 0; i < NUM_WORKERS; i++ ) worker[i] = Create( mypriority - 1, workerCode );\n\n  FOREVER {\n    Receive( requester, request );\n    switch( request.type ) {\n    case CLIENT:\n      enqueue( orderQ, {order = {client, request}} );\n      if ( !empty( employeeQ ) ) Reply( dequeue( employeeQ ) ), dequeue( orderQ ) ); \n      break;\n    case WORKER:\n      enqueue( employeeQ, requester);\n      if ( !empty( orderQ ) ) Reply( dequeue( employeeQ ), { dequeue( orderQ ) );\n      if ( request != nil ) { Reply( request.client, request.request );\n      break;\n    }\n}\n```", "```\n        FOREVER {\n          AwaitEvent( eventId );\n          Send( server );\n        }\n        ```", "```\nFOREVER {\n  Send( part1 );\n  Send( part2 );\n  ...\n  Send( master );\n}\n```", "```\nFOREVER {\n  Receive( *requester, request );\n  switch ( request.type ) {\n  case CLIENT:\n    case = {requester, request.event, request.delay} );\n    insert( caseDB, case );\n    if ( !empty( delayQ ) && !empty( irregularQ ) ) {\n      Reply( dequeue( delayQ ), case );\n      Reply( dequeue( irregularQ ), case );\n    }\n  case DELAY:\n    enqueue( delayQ, requester );\n    if ( case = pending( caseDB, nil ) && !empty( irregularQ ) ) {\n      Reply( dequeue( delayQ ), case );\n      Reply( dequeue( irregularQ ), case );\n    } \n    case = extract( caseDB, request.requester );\n    if ( case != nil ) Reply( case.requester, TIME_OUT );\n    break;\n  case CLUE:\n    enqueue( irregularQ, requester );\n    if ( ( case = pending( caseDB, nil )!=nil && !empty( delayQ ) ) {\n      Reply( dequeue( delayQ ), case );\n      Reply( dequeue( irregularQ ), case );\n    } \n    case = extract( caseDB, request.requester );\n    if ( case != nil ) Reply( case.requester, EVENT );\n    break;\n  }\n}\n```"]