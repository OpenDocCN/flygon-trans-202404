- en: Thinking in States
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 思考状态
- en: Thinking in States
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 思考状态
- en: People in the real world have a weird relationship with state. This morning
    I stopped by the local store to prepare for another day of converting caffeine
    to code. Since my favorite way of doing that is by drinking latte, and I couldn't
    find any milk, I asked the clerk.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界的人们与状态有着奇怪的关系。今天早上，我顺路去了当地商店，准备再次将咖啡因转化为代码的一天。由于我最喜欢的方式是喝拿铁，而我找不到任何牛奶，于是我问了店员。
- en: '"Sorry, we''re super-duper, mega-out of milk."'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '"抱歉，我们的牛奶已经用完了。"'
- en: To a programmer, that's an odd statement. You're either out of milk or you're
    not. There is no scale when it comes to being out of milk. Perhaps she was trying
    to tell me that they'd be out of milk for a week, but the outcome was the same
    — espresso day for me.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于程序员来说，这是一个奇怪的说法。你要么没有牛奶，要么有。在没有牛奶的情况下没有程度的区别。也许她想告诉我他们将会缺牛奶一周，但结果是一样的 — 对我来说是浓缩咖啡的一天。
- en: In most real-world situations, people's relaxed attitude to state is not an
    issue. Unfortunately, however, many programmers are quite vague about state too
    — and that is a problem.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数现实情况下，人们对状态的放松态度并不是问题。不幸的是，许多程序员对状态也相当模糊 — 这是一个问题。
- en: 'Consider a simple webshop that only accepts credit cards and does not invoice
    customers, with an `Order` class containing this method:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个只接受信用卡且不向客户开具发票的简单网店，其中包含一个`Order`类的方法：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Reasonable, right? Well, even if the expression is nicely extracted into a
    method instead of copy''n''pasted everywhere, the expression shouldn''t exist
    at all. The fact that it does highlights a problem. Why? Because an order can''t
    be shipped before it''s paid. Thereby, `hasShipped` can''t be true unless `isPaid`
    is true, which makes part of the expression redundant. You may still want `isComplete`
    for clarity in the code, but then it should look like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 合理，对吧？即使表达式被很好地提取为一个方法而不是到处复制粘贴，这个表达式也不应该存在。它存在的事实突显了一个问题。为什么？因为订单在付款前不能发货。因此，`hasShipped`不能为真，除非`isPaid`为真，这使得表达式的一部分多余。您可能仍然希望使用`isComplete`来使代码更清晰，但那么它应该是这样的：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In my work, I see both missing checks and redundant checks all the time. This
    example is tiny, but when you add cancellation and repayment, it''ll become more
    complex and the need for good state handling increases. In this case, an order
    can only be in one of three distinct states:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的工作中，我经常看到缺失的检查和多余的检查。这个例子很小，但当你添加取消和退款时，它会变得更加复杂，对良好的状态处理的需求也会增加。在这种情况下，订单只能处于三种不同的状态之一：
- en: '*In progress:* Can add or remove items. Can''t ship.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*进行中：* 可以添加或删除商品。无法发货。'
- en: '*Paid:* Can''t add or remove items. Can be shipped.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*已支付：* 无法添加或删除商品。可以发货。'
- en: '*Shipped:* Done. No more changes accepted.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*已发货：* 完成。不再接受更改。'
- en: These states are important and you need to check that you're in the expected
    state before doing operations, and that you only move to a legal state from where
    you are. In short, you have to protect your objects carefully, in the right places.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些状态很重要，你需要在执行操作之前检查你处于预期状态，并且只能从当前状态移动到合法状态。简而言之，你必须在正确的地方小心保护你的对象。
- en: But how do you begin thinking in states? Extracting expressions to meaningful
    methods is a very good start, but it is just a start. The foundation is to understand
    state machines. I know you may have bad memories from CS class, but leave them
    behind. State machines are not particularly hard. Visualize them to make them
    simple to understand and easy to talk about. Test-drive your code to unravel valid
    and invalid states and transitions and to keep them correct. Study the State pattern.
    When you feel comfortable, read up on Design by Contract. It helps you ensure
    a valid state by validating incoming data and the object itself on entry and exit
    of each public method.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你如何开始思考状态呢？将表达式提取为有意义的方法是一个很好的开始，但只是一个开始。基础是理解状态机。我知道你可能对计算机科学课程有不好的记忆，但请抛开它们。状态机并不特别难。将其可视化，使其简单易懂且易于讨论。通过测试驱动代码来解开有效和无效状态以及转换，并保持它们正确。学习状态模式。当你感到舒适时，深入了解契约设计。它可以通过验证传入数据和每个公共方法的对象本身的输入和输出来帮助您确保有效状态。
- en: If your state is incorrect, there's a bug and you risk trashing data if you
    don't abort. If you find the state checks to be noise, learn how to use a tool,
    code generation, weaving, or aspects to hide them. Regardless of which approach
    you pick, thinking in states will make your code simpler and more robust.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的状态不正确，那就意味着有 bug，如果不中止操作，你将面临数据丢失的风险。如果你觉得状态检查是噪音，学会使用工具、代码生成、编织或者切面来隐藏它们。无论你选择哪种方法，以状态思考将使你的代码更简洁、更健壮。
- en: By [Niclas Nilsson](http://programmer.97things.oreilly.com/wiki/index.php/Niclas_Nilsson)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Niclas Nilsson](http://programmer.97things.oreilly.com/wiki/index.php/Niclas_Nilsson)提供。
