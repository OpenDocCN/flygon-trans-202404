- en: TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript
- en: 原文：[https://typescriptbook.jp/](https://typescriptbook.jp/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/](https://typescriptbook.jp/)
- en: 注記
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注記
- en: 本書『サバイバルTypeScript』は実務でTypeScriptを使う開発者のための入門書です。そして、このページはTypeScriptの特徴を最速で把握できるよう、数百ページからなる本書のコンテンツをつまみ食いした要約です。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本書『サバイバルTypeScript』は実務でTypeScriptを使う開発者のための入門書です。そして、このページはTypeScriptの特徴を最速で把握できるよう、数百ページからなる本書のコンテンツをつまみ食いした要約です。
- en: » [本書ついて詳しく知る](/about)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: » [本書ついて詳しく知る](/about)
- en: » [とにかく今すぐTypeScriptを書いてみたい](/tutorials)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: » [とにかく今すぐTypeScriptを書いてみたい](/tutorials)
- en: TypeScriptとは[​](#typescriptとは "TypeScriptとは への直接リンク")
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TypeScriptとは[​](#typescriptとは "TypeScriptとは への直接リンク")
- en: JavaScriptの**スーパーセット**となるプログラミング言語。
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScriptの**スーパーセット**となるプログラミング言語。
- en: '**静的型付け言語**であり、プログラムの正しさが**静的に検査**できる。'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静的型付け言語**であり、プログラムの正しさが**静的に検査**できる。'
- en: ライブラリやIDEなどの開発環境が充実しており、**大きなエコシステム**を持っている。
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ライブラリやIDEなどの開発環境が充実しており、**大きなエコシステム**を持っている。
- en: '**Microsoft**が2012年に開発し、**オープンソース**で公開した。'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft**が2012年に開発し、**オープンソース**で公開した。'
- en: » [TypeScriptの特徴について詳しく知る](/overview/features)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: » [TypeScriptの特徴について詳しく知る](/overview/features)
- en: » [TypeScript誕生の背景について詳しく知る](/overview/before-typescript)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: » [TypeScript誕生の背景について詳しく知る](/overview/before-typescript)
- en: TypeScriptはJavaScriptのスーパーセット[​](#typescriptはjavascriptのスーパーセット "TypeScriptはJavaScriptのスーパーセット
    への直接リンク")
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TypeScriptはJavaScriptのスーパーセット[​](#typescriptはjavascriptのスーパーセット "TypeScriptはJavaScriptのスーパーセット
    への直接リンク")
- en: '**スーパーセット**とは、元の言語との**互換性**を保ちつつ、元の言語を**拡張**して作った言語のこと。'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**スーパーセット**とは、元の言語との**互換性**を保ちつつ、元の言語を**拡張**して作った言語のこと。'
- en: TypeScriptは、JavaScriptとの互換性を保ちつつ、JavaScriptを拡張して作った言語である。
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptは、JavaScriptとの互換性を保ちつつ、JavaScriptを拡張して作った言語である。
- en: よって、JavaScriptのコードはすべてTypeScriptとしてあつかえる。
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: よって、JavaScriptのコードはすべてTypeScriptとしてあつかえる。
- en: TypeScriptは、型注釈やインターフェース、ジェネリクスなど独自の機能を追加している。
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptは、型注釈やインターフェース、ジェネリクスなど独自の機能を追加している。
- en: TypeScriptの機能とJavaScriptの機能
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScriptの機能とJavaScriptの機能
- en: '![](../Images/f21208fd99a2705a1642c04b474fed54.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f21208fd99a2705a1642c04b474fed54.png)'
- en: スーパーセットのメリット[​](#スーパーセットのメリット "スーパーセットのメリット への直接リンク")
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: スーパーセットのメリット[​](#スーパーセットのメリット "スーパーセットのメリット への直接リンク")
- en: '**学習のしやすさ**: JavaScriptの知識を活かしてTypeScriptを学べる。'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学習のしやすさ**: JavaScriptの知識を活かしてTypeScriptを学べる。'
- en: '**資産が活かせる**: 既存のJavaScriptコード資産を活かして開発できる。'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**資産が活かせる**: 既存のJavaScriptコード資産を活かして開発できる。'
- en: '**移行のしやすさ**: 既存のJavaScriptプロジェクトはTypeScriptへ移行がしやすい。'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移行のしやすさ**: 既存のJavaScriptプロジェクトはTypeScriptへ移行がしやすい。'
- en: » [TypeScriptとJavaScriptの関係について詳しく知る](/overview/javascript-is-typescript)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: » [TypeScriptとJavaScriptの関係について詳しく知る](/overview/javascript-is-typescript)
- en: 静的な検査[​](#静的な検査 "静的な検査 への直接リンク")
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静的な検査[​](#静的な検査 "静的な検査 への直接リンク")
- en: TypeScriptはプログラムの正しさを静的に検査できる。
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptはプログラムの正しさを静的に検査できる。
- en: JavaScriptは実行しないとバグがあるかを確かめられない。
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScriptは実行しないとバグがあるかを確かめられない。
- en: TypeScriptは実行せずにチェックが行える。
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptは実行せずにチェックが行える。
- en: » [静的な検査について詳しく知る](/overview/static-type)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: » [静的な検査について詳しく知��](/overview/static-type)
- en: 開発効率と品質を向上し、安心感を高める[​](#開発効率と品質を向上し安心感を高める "開発効率と品質を向上し、安心感を高める への直接リンク")
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 開発効率と品質を向上し、安心感を高める[​](#開発効率と品質を向上し安心感を高める "開発効率と品質を向上し、安心感を高める への直接リンク")
- en: 問題を早期に発見し、開発を効率化できる。
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 問題を早期に発見し、開発を効率化できる。
- en: コーディング時に問題を発見し、修正できるため、バグを予防できる。
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: コーディング時に問題を発見し、修正できるため、バグを予防できる。
- en: エディターとTypeScriptを連携させると、リアルタイムのチェックやコード補完が可能。
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: エディターとTypeScriptを連携させると、リアルタイムのチェックやコード補完が可能。
- en: エディター上でのフィードバック
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: エディター上でのフィードバック
- en: '![](../Images/e8222f986033e999ae7b07a1ae5ec855.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8222f986033e999ae7b07a1ae5ec855.png)'
- en: 問題を早期に修正できることで、製品の信頼感や安心感が高まる。
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 問題を早期に修正できることで、製品の信頼感や安心感が高まる。
- en: 見通しの悪い大規模なプログラムや、重要なシステムの開発では静的な検査が安心材料になる。
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 見通しの悪い大規模なプログラムや、重要なシステムの開発では静的な検査が安心材料になる。
- en: 検査の仕組み[​](#検査の仕組み "検査の仕組み への直接リンク")
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 検査の仕組み[​](#検査の仕組み "検査の仕組み への直接リンク")
- en: TypeScriptの検査は**型システム**に基づく。
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptの検査は**型システム**に基づく。
- en: 型システムに基づき、**コンパイル**のタイミングでプログラムを検査する。
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 型システムに基づき、**コンパイル**のタイミングでプログラムを検査する。
- en: 型システム[​](#型システム "型システム への直接リンク")
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 型システム[​](#型システム "型システム への直接リンク")
- en: 型システムは、データの種別ごとに型を与え、データに対して行える操作に制約を設ける。
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 型システムは、データの種別ごとに型を与え、データに対して行える操作に制約を設ける。
- en: これにより、変数には決められた値のみが代入され、決められた操作のみが行われることが保証され、プログラムが正確で安全になる。
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: これにより、変数には決められた値のみが代入され、決められた操作のみが行われることが保証され、プログラムが正確で安全になる。
- en: 型システムは、数学の「型理論」を背景に構築され、数学的証明によりプログラムの欠陥をあぶり出せる。
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 型システムは、数学の「型理論」を背景に構築され、数学的証明によりプログラムの欠陥をあぶり出せる。
- en: 型注釈[​](#型注釈 "型注釈 への直接リンク")
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 型注釈[​](#型注釈 "型注釈 への直接リンク")
- en: 変数にどのような値が代入できるのかを制約するものを「**型**」と言う。
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 変数にどのような値が代入できるのかを制約するものを「**型**」と言う。
- en: 開発者は、変数がどのような型なのかを**型注釈**で指定する。
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 開発者は、変数がどのような型なのかを**型注釈**で指定する。
- en: TypeScriptでは、型注釈を手がかりに検査が行われる。
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptでは、型注釈を手がかりに検査が行われる。
- en: 型注釈
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 型注釈
- en: '![](../Images/a31ec519278231ed0ee3aa8e2902849f.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a31ec519278231ed0ee3aa8e2902849f.png)'
- en: 型推論[​](#型推論 "型推論 への直接リンク")
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 型推論[​](#型推論 "型推論 への直接リンク")
- en: 値の型が文脈で明白な場合、型が自動で判断される。この仕組みを**型推論**という。
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 値の型が文脈で明白な場合、型が自動で判断される。この仕組みを**型推論**という。
- en: 型推論のおかげで、開発者は型注釈を割愛でき、記述量を減らせる。
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 型推論のおかげで、開発者は型注釈を割愛でき、記述量を減らせる。
- en: 型推論
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 型推論
- en: '![](../Images/1a688505f95f7034fdcc074fd3aa103f.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a688505f95f7034fdcc074fd3aa103f.png)'
- en: コンパイル[​](#コンパイル "コンパイル への直接リンク")
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: コンパイル[​](#コンパイル "コンパイル への直接リンク")
- en: TypeScriptを実行するために、JavaScriptへ変換する。この変換のことを**コンパイル**という。
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptを実行するために、JavaScriptへ変換する。この変換のことを**コンパイル**という。
- en: 変換後のJavaScriptコードはブラウザやサーバーで実行できる。
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 変換後のJavaScriptコードはブラウザやサーバーで実行できる。
- en: TypeScriptの検査はコンパイルのタイミングで行われる。
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptの検査はコンパイルのタイミングで行われる。
- en: コンパイル
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: コンパイル
- en: '![](../Images/55bec6342572c2b22cc5f299c2a57062.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/55bec6342572c2b22cc5f299c2a57062.png)'
- en: 型はドキュメント、リファクタリング、ツールの充実にも寄与[​](#型はドキュメントリファクタリングツールの充実にも寄与 "型はドキュメント、リファクタリング、ツールの充実にも寄与
    への直接リンク")
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 型はドキュメント、リファクタリング、ツールの充実にも寄与[​](#型はドキュメントリファクタリングツールの充実にも寄与 "型はドキュメント、リファクタリング、ツールの充実にも寄与
    への直接リンク")
- en: '**ドキュメントになる**: 型情報はドキュメントの役割を果たし、コードの理解を助ける。'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ドキュメントになる**: 型情報はドキュメントの役割を果たし、コードの理解を助ける。'
- en: '**リファクタリングが安全に**: 変数の型や関数のシグネチャを変更したとき、修正が必要な箇所がコンパイル時にすべて分かり、不注意による誤修正を減らせる。'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**リファクタリングが安全に**: 変数の型や関数のシグネチャを変更したとき、修正が必要な箇所がコンパイル時にすべて分かり、不注意による誤修正を減らせる。'
- en: '**ツールサポートが充実**: IDEやエディターでのリアルタイムのエラーチェック、自動補完、リファクタリングツール、ナビゲーションなど、開発ツールのサポートが充実している。'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ツールサポートが充実**: IDEやエディターでのリアルタイムのエラーチェック、自動補完、リファクタリングツール、ナビゲーションなど、開発ツールのサポートが充実している。'
- en: » [TypeScriptを使う動機について詳しく知る](/overview/why-you-should-use-typescript)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: » [TypeScriptを使う動機について詳しく知る](/overview/why-you-should-use-typescript)
- en: 多くのエディターがTypeScriptをサポート[​](#多くのエディターがtypescriptをサポート "多くのエディターがTypeScriptをサポート
    への直接リンク")
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多くのエディターがTypeScriptをサポート[​](#多くのエディターがtypescriptをサポート "多くのエディターがTypeScriptをサポート
    への直接リンク")
- en: Visual Studio Code
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: JetBrains IDE (IntelliJ, WebStorm, PhpStorm, RubyMine, PyCharm, GoLandなど)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JetBrains IDE (IntelliJ, WebStorm, PhpStorm, RubyMine, PyCharm, GoLandなど)
- en: Vim
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vim
- en: NeoVim
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NeoVim
- en: Emacs (Tide)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Emacs (Tide)
- en: Atom
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原子
- en: Sublime Text
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text
- en: » [TypeScriptとエコシステムについて詳しく知る](/overview/ecosystem)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: » [TypeScriptとエコシステムについて詳しく知る](/overview/ecosystem)
- en: 多様なソフトウェアが作れる[​](#多様なソフトウェアが作れる "多様なソフトウェアが作れる への直接リンク")
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多様なソフトウェアが作れる[​](#多様なソフトウェアが作れる "多様なソフトウェアが作れる への直接リンク")
- en: 作れるものの範囲が広いことは、TypeScriptの魅力のひとつ。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作れるものの範囲が広いことは、TypeScriptの魅力のひとつ。
- en: '**Webアプリケーション**: TypeScriptの主戦場。フロントエンドの開発に広く使用される。'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Webアプリケーション**: TypeScriptの主戦場。フロントエンドの開発に広く使用される。'
- en: '**サーバーサイドアプリケーション**: Node.jsと組み合わせて、バックエンドやAPIサーバーを開発することが可能。'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**サーバーサイドアプリケーション**: Node.jsと組み合わせて、バックエンドやAPIサーバーを開発することが可能。'
- en: '**モバイルアプリケーション**: React Nativeなどのフレームワークを利用して、モバイルアプリケーションを開発できる。'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**モバイルアプリケーション**: React Nativeなどのフレームワークを利用して、モバイルアプリケーションを開発できる。'
- en: '**デスクトップアプリケーション**: Electronを使用して、クロスプラットフォームのデスクトップアプリを開発できる。'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**デスクトップアプリケーション**: Electronを使用して、クロスプラットフォームのデスクトップアプリを開発できる。'
- en: '**クラウド関連の機能**: AWS LambdaやAzure Functionsなどのクラウドプラットフォームで、サーバーレス関数が作成できる。'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**クラウド関連の機能**: AWS LambdaやAzure Functionsなどのクラウドプラットフォームで、サーバーレス関数が作成できる。'
- en: '**ユーティリティーやCLIツール**: コマンドラインツールや各種ユーティリティの開発ができる。'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ユーティリティーやCLIツール**: コマンドラインツールや各種ユーティリティの開発ができる。'
- en: '**インフラ構成管理(IaC)**: PulumiやAWS CDKを使用して、インフラの構成を管理することができる。'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**インフラ構成管理(IaC)**: PulumiやAWS CDKを使用して、インフラの構成を管理することができる。'
- en: '**アプリケーションの拡張機能**: Google ChromeやVisual Studio Codeなどデスクトップアプリケーションの拡張をTypeScriptで開発できる。'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**アプリケーションの拡張機能**: Google ChromeやVisual Studio Codeなどデスクトップアプリケーションの拡張をTypeScriptで開発できる。'
- en: » [TypeScriptの射程圏について詳しく知る](/overview/range-of-typescript)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: » [TypeScriptの射程圏について詳しく知る](/overview/range-of-typescript)
- en: TypeScriptを導入した企業の感想[​](#typescriptを導入した企業の感想 "TypeScriptを導入した企業の感想 への直接リンク")
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TypeScriptを導入した企業の感想[​](#typescriptを導入した企業の感想 "TypeScriptを導入した企業の感想 への直接リンク")
- en: '**[Slack](https://slack.engineering/typescript-at-slack/)**: コードベースが大規模になっても、型システムが安全性と信頼性を保証してくれる。'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Slack](https://slack.engineering/typescript-at-slack/)**: コードベースが大規模になっても、型システムが安全性と信頼性を保証してくれる。'
- en: '**[Airbnb](https://www.reddit.com/r/typescript/comments/aofcik/38_of_bugs_at_airbnb_could_have_been_prevented_by/)**:
    TypeScriptを使っていたらAirbnbの38%ものバグを未然に防げた。'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Airbnb](https://www.reddit.com/r/typescript/comments/aofcik/38_of_bugs_at_airbnb_could_have_been_prevented_by/)**:
    TypeScriptを使っていたらAirbnbの38%ものバグを未然に防げた。'
- en: '**[ヤフー株式会社](https://codezine.jp/article/detail/16905)**: 静的型付けによりコードの品質とメンテナンス性が向上し、IDEとの連携により開発者の生産性が向上した。'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ヤフー株式会社](https://codezine.jp/article/detail/16905)**: 静的型付けによりコードの品質とメンテナンス性が向上し、IDEとの連携により開発者の生産性が向上した。'
- en: '**[LINE株式会社](https://logmi.jp/tech/articles/322702)**: ちょっとした修正でもかかるQAのコストを、TypeScript化によって抑制。'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[LINE株式会社](https://logmi.jp/tech/articles/322702)**: ちょっとした修正でもかかるQAのコストを、TypeScript化によって抑制。'
- en: '**[Sansan株式会社](https://buildersbox.corp-sansan.com/entry/2021/06/24/110000)**:
    型がドキュメントとしての役割を果たし、コードリーディングや他チームのコード変更に役立った。採用の文脈でアピールポイントにもなった。'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Sansan株式会社](https://buildersbox.corp-sansan.com/entry/2021/06/24/110000)**:
    型がドキュメントとしての役割を果たし、コードリーディングや他チームのコード変更に役立った。採用の文脈でアピールポイントにもなった。'
- en: '**[ラクスル株式会社](https://techblog.raksul.com/entry/2020/10/07/after-introducing-typescript-to-existing-product/)**:型システムの恩恵が得られる、エディターの入力補完を受けられる、コード=ドキュメントという状況を作りやすい。'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ラクスル株式会社](https://techblog.raksul.com/entry/2020/10/07/after-introducing-typescript-to-existing-product/)**:型システムの恩恵��得られる、エディターの入力補完を受けられる、コード=ドキュメントという状況を作りやすい。'
- en: 基本的な型[​](#基本的な型 "基本的な型 への直接リンク")
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的な型[​](#基本的な型 "基本的な型 への直接リンク")
- en: プリミティブ型[​](#プリミティブ型 "プリミティブ型 への直接リンク")
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: プリミティブ型[​](#プリミティブ型 "プリミティブ型 への直接リンク")
- en: '[`boolean`](/reference/values-types-variables/boolean): 真偽値。'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`boolean`](/reference/values-types-variables/boolean): 真偽値。'
- en: '[`number`](/reference/values-types-variables/number): 数値。'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`number`](/reference/values-types-variables/number): 数値。'
- en: '[`string`](/reference/values-types-variables/string): 文字列。'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`string`](/reference/values-types-variables/string): 文字列。'
- en: '[`bigint`](/reference/values-types-variables/bigint): 大きな整数。'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`bigint`](/reference/values-types-variables/bigint): 大きな整数。'
- en: '[`symbol`](/reference/values-types-variables/symbol): 一意の値を示す。'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`symbol`](/reference/values-types-variables/symbol): 一意の値を示す。'
- en: '[`undefined`](/reference/values-types-variables/undefined): 値が定義されていない状態を示す。'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`undefined`](/reference/values-types-variables/undefined): 値が定義されていない状態を示す。'
- en: '[`null`](/reference/values-types-variables/null): 値が存在しない状態を示す。'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`null`](/reference/values-types-variables/null): 値が存在しない状態を示す。'
- en: '[PRE0]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 特殊な型[​](#特殊な型 "特殊な型 への直接リンク")
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊な型[​](#特殊な型 "特殊な型 への直接リンク")
- en: '[`any`](/reference/values-types-variables/any): 何でも代入できる型。型が不明な場合に使用する。その値に対する操作の制限がなく、型の安全性は弱まる。'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`any`](/reference/values-types-variables/any): 何でも代入できる型。型が不明な場合に使用する。その値に対する操作の制限がなく、型の安全性は弱まる。'
- en: '[`unknown`](/reference/statements/unknown): any型と似て、何でも代入できる型。その値に対する操作は制限され、型の安全性が保たれる。'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`unknown`](/reference/statements/unknown): any型と似て、何でも代入できる型。その値に対する操作は制限され、型の安全性が保たれる。'
- en: '[`void`](/reference/functions/void-type): 値が存在しないことを示す。関数が何も返さない場合に使用する。'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`void`](/reference/functions/void-type): 値が存在しないことを示す。関数が何も返さない場合に使用する。'
- en: '[`never`](/reference/statements/never): 決して何も返さないことを示す。エラーを投げる関数や無限ループの関数の戻り値として使用する。'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`never`](/reference/statements/never): 決して何も返さないことを示す。エラーを投げる関数や無限ループの関数の戻り値として使用する。'
- en: '[PRE2]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 型エイリアス[​](#型エイリアス "型エイリアス への直接リンク")
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 型エイリアス[​](#型エイリアス "型エイリアス への直接リンク")
- en: '[型エイリアス](/reference/values-types-variables/type-alias)は既存の型を新たな名前で定義する機能。'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[型エイリアス](/reference/values-types-variables/type-alias)は既存の型を新たな名前で定義する機能。'
- en: より複雑な型を簡素に表現したり、コードの可読性を向上するのに役立つ。
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: より複雑な型を簡素に表現したり、コードの可読性を向上するのに役立つ。
- en: '[PRE4]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 構造的部分型[​](#構造的部分型 "構造的部分型 への直接リンク")
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 構造的部分型[​](#構造的部分型 "構造的部分型 への直接リンク")
- en: TypeScriptは[構造的部分型](/reference/values-types-variables/structural-subtyping)を採用している。
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptは[構造的部分型](/reference/values-types-variables/structural-subtyping)を採用している。
- en: 構造的部分型では、変数の代入可否を、構造が互換しているかに着目して判定する。
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 構造的部分型では、変数の代入可否を、構造が互換しているかに着目して判定する。
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 配列[​](#配列 "配列 への直接リンク")
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配列[​](#配列 "配列 への直接リンク")
- en: 配列リテラル[​](#配列リテラル "配列リテラル への直接リンク")
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配列リテラル[​](#配列リテラル "配列リテラル への直接リンク")
- en: 配列の値を作るには[配列リテラル](/reference/values-types-variables/array/array-literal)(`[]`)を使う。
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配列の値を作るには[配列リテラル](/reference/values-types-variables/array/array-literal)(`[]`)を使う。
- en: '`[要素1, 要素2, ...]`の形で配列の初期値を設定できる。'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[要素1, 要素2, ...]`の形で配列の初期値を設定できる。'
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 配列の型注釈[​](#配列の型注釈 "配列の型注釈 への直接リンク")
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配列の型注釈[​](#配列の型注釈 "配列の型注釈 への直接リンク")
- en: '[配列の型注釈](/reference/values-types-variables/array/type-annotation-of-array)には`型名[]`または`Array<型名>`を使う。'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[配列の型注釈](/reference/values-types-variables/array/type-annotation-of-array)には`型名[]`または`Array<型名>`を使う。'
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 配列要素へのアクセス[​](#配列要素へのアクセス "配列要素へのアクセス への直接リンク")
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配列要素へのアクセス[​](#配列要素へのアクセス "配列要素へのアクセス への直接リ���ク")
- en: '[配列要素にアクセスする](/reference/values-types-variables/array/how-to-access-elements-in-an-array)にはインデックス（インデックス）を使う。'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[配列要素にアクセスする](/reference/values-types-variables/array/how-to-access-elements-in-an-array)にはインデックス（インデックス）を使う。'
- en: 0から始まる整数を指定して配列の値を取得し、代入も可能。
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0から始まる整数を指定して配列の値を取得し、代入も可能。
- en: '[PRE12]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 読み取り専用配列[​](#読み取り専用配列 "読み取り専用配列 への直接リンク")
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 読み取り専用配列[​](#読み取り専用配列 "読み取り専用配列 への直接リンク")
- en: '[読み取り専用配列](/reference/values-types-variables/array/readonly-array)は値の変更ができない配列を表す。'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[読み取り専用配列](/reference/values-types-variables/array/readonly-array)は値の変更ができない配列を表す。'
- en: 配列の型注釈に`readonly`をつけると読み取り専用配列となる。
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配列の型注釈に`readonly`をつけると読み取り専用配列となる。
- en: '`ReadonlyArray<型名>`でも読み取り専用配列が宣言でき、`readonly 型名[]`と機能は同じ。'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReadonlyArray<型名>`でも読み取り専用配列が宣言でき、`readonly 型名[]`と機能は同じ。'
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 配列のループ[​](#配列のループ "配列のループ への直接リンク")
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配列のループ[​](#配列のループ "配列のループ への直接リンク")
- en: '[配列をループする](/reference/values-types-variables/array/how-to-loop-an-array)ための`for...of`構文もある。'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[配列をループする](/reference/values-types-variables/array/how-to-loop-an-array)ための`for...of`構文もある。'
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: タプル型[​](#タプル型 "タプル型 への直接リンク")
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: タプル型[​](#タプル型 "タプル型 への直接リンク")
- en: '[タプル型](/reference/values-types-variables/tuple)を使うと、配列の要素数と要素の型が固定される。'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[タプル型](/reference/values-types-variables/tuple)を使うと、配列の要素数と要素の型が固定される。'
- en: それぞれの要素のインデックスごとに型が決まる。
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: それぞれの要素のインデックスごとに型が決まる。
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: タプルの要素へのアクセス[​](#タプルの要素へのアクセス "タプルの要素へのアクセス への直接リンク")
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: タプルの要素へのアクセス[​](#タプルの要素へのアクセス "タプルの要素へのアクセス への直接リンク")
- en: タプルの要素にアクセスする場合も配列同様にインデックス（インデックス）を使用する。
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: タプルの要素にアクセスする場合も配列同様にインデックス（インデックス）を使用する。
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: オブジェクト[​](#オブジェクト "オブジェクト への直接リンク")
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: オブジェクト[​](#オブジェクト "オブジェクト への直接リンク")
- en: オブジェクトリテラル[​](#オブジェクトリテラル "オブジェクトリテラル への直接リンク")
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: オブジェクトリテラル[​](#オブジェクトリテラル "オブジェクトリテラル への直接リンク")
- en: オブジェクトの作り方は[オブジェクトリテラル](/reference/values-types-variables/object/object-literal)(`{}`)を使う。
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: オブジェクトの作り方は[オブジェクトリテラル](/reference/values-types-variables/object/object-literal)(`{}`)を使う。
- en: '`{ プロパティキー: 値, ... }` の形でオブジェクトの初期値を設定できる。'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{ プロパティキー: 値, ... }` の形でオブジェクトの初期値を設定できる。'
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: プロパティアクセス[​](#プロパティアクセス "プロパティアクセス への直接リンク")
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: プロパティアクセス[​](#プロパティアクセス "プロパティアクセス への直接リンク")
- en: ドット`.`を使ってオブジェクトのプロパティにアクセスできる。
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ドット`.`を使ってオブジェクトのプロパティにアクセスできる。
- en: '[PRE24]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: オブジェクトの型注釈[​](#オブジェクトの型注釈 "オブジェクトの型注釈 への直接リンク")
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: オブジェクトの型注釈[​](#オブジェクトの型注釈 "オブジェクトの型注釈 への直接リンク")
- en: '[オブジェクトの型注釈](/reference/values-types-variables/object/type-annotation-of-objects)は`{プロパティ1:
    型1, プロパティ2: 型2, ...}`の形で記述する。'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[オブジェクトの型注釈](/reference/values-types-variables/object/type-annotation-of-objects)は`{プロパティ1:
    ���1, プロパティ2: 型2, ...}`の形で記述する。'
- en: '[PRE26]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: readonlyプロパティ[​](#readonlyプロパティ "readonlyプロパティ への直接リンク")
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: readonlyプロパティ[​](#readonlyプロパティ "readonlyプロパティ への直接リンク")
- en: '[`readonly`](/reference/values-types-variables/object/readonly-property)をつけたプロパティは代入できない。'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`readonly`](/reference/values-types-variables/object/readonly-property)をつけたプロパティは代入できない。'
- en: '[PRE28]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: オプションプロパティー[​](#オプションプロパティー "オプションプロパティー への直接リンク")
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: オプションプロパティー[​](#オプションプロパティー "オプションプロパティー への直接リンク")
- en: '[オプショナルプロパティー](/reference/values-types-variables/object/optional-property)`?`をつけたプロパティは省略可能。'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[オプショナルプロパティー](/reference/values-types-variables/object/optional-property)`?`をつけたプロパティは省略可能。'
- en: '[PRE30]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: オブジェクトメソッド[​](#オブジェクトメソッド "オブジェクトメソッド への直接リンク")
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: オブジェクトメソッド[​](#オブジェクトメソッド "オブジェクトメソッド への直接リンク")
- en: 関数をプロパティに持つオブジェクトを定義できる。
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 関数をプロパティに持つオブジェクトを定義できる。
- en: '[PRE32]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: インデックス型[​](#インデックス型 "インデックス型 への直接リンク")
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: インデックス型[​](#インデックス型 "インデックス型 への直接リンク")
- en: オブジェクトは[インデックス型](/reference/values-types-variables/object/index-signature)を利用して任意のキーの値を取得することができる。
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: オブジェクトは[インデックス型](/reference/values-types-variables/object/index-signature)を利用して任意のキーの値を取得することができる。
- en: 'インデックス型プロパティの型注釈は`[キー名: プロパティキーの型]: プロパティ値の型` の形で記述する。'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'インデックス型プロパティの型注釈は`[キー名: プロパティキーの型]: プロパティ値の型` の形で記述する。'
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Shorthand property names[​](#shorthand-property-names "Shorthand property names
    への直接リンク")
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Shorthand property names[​](#shorthand-property-names "Shorthand property names
    への直接リンク")
- en: プロパティの値がすでに定義されている変数である場合、そのプロパティ名を省略して記述できる([shorthand property names](/reference/values-types-variables/object/shorthand-property-names))。
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: プロパティの値がすでに定義されている変数である場合、そのプロパティ名を省略して記述できる([shorthand property names](/reference/values-types-variables/object/shorthand-property-names))。
- en: '[PRE36]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: オプショナルチェーン[​](#オプショナルチェーン "オプショナルチェーン への直接リンク")
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: オプショナルチェーン[​](#オプショナルチェーン "オプショナルチェーン への直接リンク")
- en: プロパティが存在するかどうか不確定である場合、`?.`演算子（[オプショナルチェーン](/reference/values-types-variables/object/optional-chaining)）で安全にアクセスできる。
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: プロパティが存在するかどうか不確定である場合、`?.`演算子（[オプショナルチェーン](/reference/values-types-variables/object/optional-chaining)）で安全にアクセスできる。
- en: '[PRE38]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Map[​](#map "Map への直接リンク")
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Map[​](#map "Map への直接リンク")
- en: Mapオブジェクト[​](#mapオブジェクト "Mapオブジェクト への直接リンク")
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mapオブジェクト[​](#mapオブジェクト "Mapオブジェクト への直接リンク")
- en: '[Mapオブジェクト](/reference/builtin-api/map)はキーとそれに対応する値を対にしたコレクション。'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Mapオブジェクト](/reference/builtin-api/map)はキーとそれに対応する値を対にしたコレクション。'
- en: キーはオブジェクトも含め任意の値が可能。
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: キーはオブジェクトも含め任意の値が可能。
- en: '[PRE40]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Mapの型注釈[​](#mapの型注釈 "Mapの型注釈 への直接リンク")
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mapの型注釈[​](#mapの型注釈 "Mapの型注釈 への直接リンク")
- en: Mapの型注釈は`Map<キーの型, 値の型>`の形で記述する。
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mapの型注釈は`Map<キーの型, 値の型>`の形で記述する。
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Mapのループ[​](#mapのループ "Mapのループ への直接リンク")
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mapのループ[​](#mapのループ "Mapのループ への直接リンク")
- en: Mapオブジェクトは`for...of`でループすると、各エントリーがキーと値の配列として順に取得できる。
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mapオブジェクトは`for...of`でループすると、各エントリーがキーと値の配列として順に取得できる。
- en: 要素の順序は、要素を追加した順が保証されている。
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要素の順序は、要素を追加した順が保証されている。
- en: '[PRE44]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Set[​](#set "Set への直接リンク")
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Set[​](#set "Set への直接リンク")
- en: Set オブジェクト[​](#set-オブジェクト "Set オブジェクト への直接リンク")
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Set オブジェクト[​](#set-オブジェクト "Set オブジェクト への直接リンク")
- en: '[Setオブジェクト](/reference/builtin-api/set)は同じ値が存在しないコレクション。'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Setオブジェクト](/reference/builtin-api/set)は同じ値が存在しないコレクション。'
- en: Setの要素は何でも可能である。
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Setの要素は何でも可能である。
- en: '[PRE46]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Setの型注釈[​](#setの型注釈 "Setの型注釈 への直接リンク")
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Setの型注釈[​](#setの型注釈 "Setの型注釈 への直接リンク")
- en: Setの型注釈は`Set<要素の型>`の形で記述する。
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Setの型注釈は`Set<要素の型>`の形で記述する。
- en: '[PRE48]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Setのループ[​](#setのループ "Setのループ への直接リンク")
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Setのループ[​](#setのループ "Setのループ への直接リンク")
- en: SetもMap同様に`for...of`でループすることが可能。
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SetもMap同様に`for...of`でループすることが可能。
- en: 順序は`add`した順。
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 順序は`add`した順。
- en: '[PRE50]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 列挙型 (Enum)[​](#列挙型-enum "列挙型 (Enum) への直接リンク")
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列挙型 (Enum)[​](#列挙型-enum "列挙型 (Enum) への直接リンク")
- en: 列挙型の基本[​](#列挙型の基本 "列挙型の基本 への直接リンク")
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列挙型の基本[​](#列挙型の基本 "列挙型の基本 への直接リンク")
- en: '[列挙型](/reference/values-types-variables/enum)(enum)は、関連する一連の数値または文字列値の集まりを定義する。'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[列挙型](/reference/values-types-variables/enum)(enum)は、関連する一連の数値または文字列値の集まりを定義する。'
- en: 列挙型は`enum`キーワードを使用して定義する。
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列挙型は`enum`キーワードを使用して定義する。
- en: '[PRE52]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 列挙型に値を設定[​](#列挙型に値を設定 "列挙型に値を設定 への直接リンク")
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列挙型に値を設定[​](#列挙型に値を設定 "列挙型に値を設定 への直接リンク")
- en: 列挙体の値は文字列リテラルまたは数値リテラルで指定できる。
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列挙体の値は文字列リテラルまたは数値リテラルで指定できる。
- en: '[PRE54]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 列挙型の利用[​](#列挙型の利用 "列挙型の利用 への直接リンク")
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列挙型の利用[​](#列挙型の利用 "列挙型の利用 への直接リンク")
- en: 列挙型の各値にアクセスするにはドット演算子を使用する。
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列挙型の各値にアクセスするにはドット演算子を使用する。
- en: '[PRE56]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: ユニオン型[​](#ユニオン型 "ユニオン型 への直接リンク")
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ユニオン型[​](#ユニオン型 "ユニオン型 への直接リンク")
- en: '[ユニオン型](/reference/values-types-variables/union)は複数の型のうちのいずれかをとる値を表現できる。'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ユニオン型](/reference/values-types-variables/union)は複数の型のうちのいずれかをとる値を表現できる。'
- en: '`型1 | 型2 | ...`の形式で使う。'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`型1 | 型2 | ...`の形式で使う。'
- en: ひとつ以上の異なる型の値を同じ変数で扱う場合に使用する。
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ひとつ以上の異なる型の値を同じ変数で扱う場合に使用する。
- en: '[PRE58]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 判別可能なユニオン型[​](#判別可能なユニオン型 "判別可能なユニオン型 への直接リンク")
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 判別可能なユニオン型[​](#判別可能なユニオン型 "判別可能なユニオン型 への直接リンク")
- en: '[判別可能なユニオン型](/reference/values-types-variables/discriminated-union)は、共通のリテラル型のプロパティを持つ特別なユニオン型。'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[判別可能なユニオン型](/reference/values-types-variables/discriminated-union)は、共通のリテラル型のプロパティを持つ特別なユニオン型。'
- en: 共通のプロパティを利用して、型を判別できる。
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共通のプロパティを利用して、型を判別できる。
- en: '[PRE60]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: インターセクション型[​](#インターセクション型 "インターセクション型 への直接リンク")
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: インターセクション型[​](#インターセクション型 "インターセクション型 への直接リンク")
- en: '[インターセクション型](/reference/values-types-variables/intersection)は複数の型を1つに結合した新しい型を定義する。'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[インターセクション型](/reference/values-types-variables/intersection)は複数の型を1つに結合した新しい型を定義する。'
- en: '`型1 & 型2 & ...`の形式で使う。'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`型1 & 型2 & ...`の形式で使う。'
- en: その結果として生じた型は、それぞれの型が持つすべてのプロパティとメソッドを備えている。
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: その結果として生じた型は、それぞれの型が持つすべてのプロパティとメソッドを備えている。
- en: '[PRE62]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 分割代入[​](#分割代入 "分割代入 への直接リンク")
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分割代入[​](#分割代入 "分割代入 への直接リンク")
- en: 分割代入を使うと、配列の各要素を一度に変数に代入できる([配列の分割代入](/reference/values-types-variables/array/destructuring-assignment-from-array))。
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分割代入を使うと、配列の各要素を一度に変数に代入できる([配列の分割代入](/reference/values-types-variables/array/destructuring-assignment-from-array))。
- en: '[PRE64]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 分割代入により、オブジェクトのプロパティを個別の変数へ代入できる([オブジェクトの分割代入](/reference/values-types-variables/object/destructuring-assignment-from-objects))。
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分割代入により、オブジェクトのプロパティを個別の変数へ代入できる([オブジェクトの分割代入](/reference/values-types-variables/object/destructuring-assignment-from-objects))。
- en: '[PRE66]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 条件分岐[​](#条件分岐 "条件分岐 への直接リンク")
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件分岐[​](#条件分岐 "条件分岐 への直接リンク")
- en: TypeScriptではJavaScriptと同様に、条件分岐には`if`構文や`switch`構文が利用できる。
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptではJavaScriptと同様に、条件分岐には`if`構文や`switch`構文が利用できる。
- en: '[if-else文](/reference/statements/if-else)[​](#if-else文 "if-else文 への直接リンク")'
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[if-else文](/reference/statements/if-else)[​](#if-else文 "if-else文 への直接リンク")'
- en: '[PRE68]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[switch文](/reference/statements/switch)[​](#switch文 "switch文 への直接リンク")'
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[switch文](/reference/statements/switch)[​](#switch文 "switch文 への直接リンク")'
- en: '[PRE70]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 型の絞り込み[​](#型の絞り込み "型の絞り込み への直接リンク")
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 型の絞り込み[​](#型の絞り込み "型の絞り込み への直接リンク")
- en: 条件分岐を利用すると、その節内では型が自動的に絞り込まれる([制御フロー分析と型ガードによる型の絞り込み](/reference/statements/control-flow-analysis-and-type-guard))。
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件分岐を利用すると、その節内では型が自動的に絞り込まれる([制御フロー分析と型ガードによる型の絞り込み](/reference/statements/control-flow-analysis-and-type-guard))。
- en: '[PRE72]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 関数[​](#関数 "関数 への直接リンク")
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 関数[​](#関数 "関数 への直接リンク")
- en: TypeScriptではアロー関数や関数宣言に型注釈をつけることができる。
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptではアロー関数や関数宣言に型注釈をつけることができる。
- en: '[アロー関数](/reference/functions/arrow-functions)[​](#アロー関数 "アロー関数 への直接リンク")'
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[アロー関数](/reference/functions/arrow-functions)[​](#アロー関数 "アロー関数 への直接リンク")'
- en: '[PRE74]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[関数宣言](/reference/functions/function-declaration)[​](#関数宣言 "関数宣言 への直接リンク")'
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[関数宣言](/reference/functions/function-declaration)[​](#関数宣言 "関数宣言 への直接リンク")'
- en: '[PRE76]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 分割代入引数[​](#分割代入引数 "分割代入引数 への直接リンク")
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分割代入引数[​](#分割代入引数 "分割代入引数 への直接リンク")
- en: 関数の引数に配列またはオブジェクトリテラルを展開することができる([分割代入引数](/reference/functions/destructuring-assignment-parameters))。
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 関数の引数に配列またはオブジェクトリテラルを展開することができる([分割代入引数](/reference/functions/destructuring-assignment-parameters))。
- en: '[PRE78]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 型ガード関数[​](#型ガード関数 "型ガード関数 への直接リンク")
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 型ガード関数[​](#型ガード関数 "型ガード関数 への直接リンク")
- en: 特定の型であることを判定する関数([型ガード関数](/reference/functions/type-guard-functions))を利用することで、型が絞り込まれる。
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定の型であることを判定する関数([型ガード関数](/reference/functions/type-guard-functions))を利用することで、型が絞り込まれる。
- en: '[PRE80]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: オプション引数[​](#オプション引数 "オプション引数 への直接リンク")
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: オプション引数[​](#オプション引数 "オプション引数 への直接リンク")
- en: 関数の引数には`?`をつけることで任意とすることができる([オプション引数](/reference/functions/optional-parameters))。
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 関数の引数には`?`をつけることで任意とすることができる([オプション引数](/reference/functions/optional-parameters))。
- en: '[PRE82]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: デフォルト引数[​](#デフォルト引数 "デフォルト引数 への直接リンク")
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: デフォルト引数[​](#デフォルト引数 "デフォルト引数 への直接リンク")
- en: 関数の引数には`=`を使ってデフォルトの値を設定することができる([デフォルト引数](/reference/functions/default-parameters))。
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 関数の引数には`=`を使ってデフォルトの値を設定することができる([デフォルト引数](/reference/functions/default-parameters))。
- en: '[PRE84]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 残余引数[​](#残余引数 "残余引数 への直接リンク")
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 残余引数[​](#残余引数 "残余引数 への直接リンク")
- en: '`...`を使って[残余引数](/reference/functions/rest-parameters)(任意の数の引数)を設定することができる。'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`...`を使って[残余引数](/reference/functions/rest-parameters)(任意の数の引数)を設定することができる。'
- en: '[PRE86]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: クラス[​](#クラス "クラス への直接リンク")
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: クラス[​](#クラス "クラス への直接リンク")
- en: クラス構文[​](#クラス構文 "クラス構文 への直接リンク")
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: クラス構文[​](#クラス構文 "クラス構文 への直接リンク")
- en: JavaScriptの[クラス](/reference/object-oriented/class)構文はそのまま利用できる。
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScriptの[クラス](/reference/object-oriented/class)構文はそのまま利用できる。
- en: '[フィールド](/reference/object-oriented/class/fields)宣言に型注釈をつけることができる。'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[フィールド](/reference/object-oriented/class/fields)宣言に型注釈をつけることができる。'
- en: '[PRE88]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: アクセス修飾子[​](#アクセス修飾子 "アクセス修飾子 への直接リンク")
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: アクセス修飾子[​](#アクセス修飾子 "アクセス修飾子 への直接リンク")
- en: '`public`(デフォルト)、`protected`、`private`の3つの[アクセス修飾子](/reference/object-oriented/class/access-modifiers)が利用できる。'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public`(デフォルト)、`protected`、`private`の3つの[アクセス修飾子](/reference/object-oriented/class/access-modifiers)が利用できる。'
- en: '[PRE90]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: クラスのreadonly修飾子[​](#クラスのreadonly修飾子 "クラスのreadonly修飾子 への直接リンク")
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: クラスのreadonly修飾子[​](#クラスのreadonly修飾子 "クラスのreadonly修飾子 への直接リンク")
- en: '[`readonly`修飾子](/reference/object-oriented/class/readonly-modifier-in-classes)をつけたプロパティは、読み取り専用となる。'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`readonly`修飾子](/reference/object-oriented/class/readonly-modifier-in-classes)をつけたプロパティは、読み取り専用となる。'
- en: '`readonly`修飾子はアクセス修飾子と併用可能。'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readonly`修饰符可以与访问修饰符结合使用。'
- en: '[PRE92]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Constructor shorthand[​](#constructor-shorthand "Constructor shorthand への直接リンク")
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构造函数简写[​](#constructor-shorthand "Constructor shorthand への直接リンク")
- en: TypeScriptでは、コンストラクタパラメータにアクセス修飾子をつけることで、自動的にそのフィールドが定義される([constructor shorthand](/reference/object-oriented/class/constructor-shorthand))。
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript允许在构造函数参数上使用访问修饰符，从而自动定义该字段([constructor shorthand](/reference/object-oriented/class/constructor-shorthand))。
- en: これによりコードの簡略化が図れる。
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这样可以简化代码。
- en: '[PRE94]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: フィールドの初期化子[​](#フィールドの初期化子 "フィールドの初期化子 への直接リンク")
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字段的初始化器[​](#フィールドの初期化子 "フィールドの初期化子 への直接リンク")
- en: フィールド宣言の際に直接初期値を設定できる([フィールドの初期化子](/reference/object-oriented/class/field-initializers))。
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在字段声明时直接设置初始值([字段的初始化子](/reference/object-oriented/class/field-initializers))。
- en: '[PRE96]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 静的フィールドと静的メソッド[​](#静的フィールドと静的メソッド "静的フィールドと静的メソッド への直接リンク")
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态字段和静态方法[​](#静的フィールドと静的メソッド "静的フィールドと静的メソッド への直接リンク")
- en: '`static`キーワードを使うことで、インスタンスではなくクラス自体に関連するフィールドやメソッドを定義できる([静的フィールド](/reference/object-oriented/class/static-fields)、[静的メソッド](/reference/object-oriented/class/static-methods))。'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`static`关键字，可以定义与类本身相关联的字段和方法，而不是实例([静态字段](/reference/object-oriented/class/static-fields)、[静态方法](/reference/object-oriented/class/static-methods))。
- en: '[PRE98]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: this型[​](#this型 "this型 への直接リンク")
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: this类型[​](#this型 "this型 への直接リンク")
- en: メソッド内で`this`を返すことで、メソッドの呼び出しを直列につなげるメソッドチェーンを可能にする([メソッドチェーン](/reference/object-oriented/class/return-this-type))。
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在方法内返回`this`，可以实现方法链，将方法调用串联起来([方法链](/reference/object-oriented/class/return-this-type))。
- en: '[PRE100]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: クラスの継承[​](#クラスの継承 "クラスの継承 への直接リンク")
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类的继承[​](#クラスの継承 "クラスの継承 への直接リンク")
- en: '`extends`キーワードにより、[クラスの継承](/reference/object-oriented/class/class-inheritance)が可能。'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`extends`关键字，可以进行[类的继承](/reference/object-oriented/class/class-inheritance)。
- en: スーパークラスのプロパティ・メソッドの値は、サブクラスからアクセス可能。
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超类的属性和方法的值可以从子类中访问。
- en: '[PRE102]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '`instanceof`演算子[​](#instanceof演算子 "instanceof演算子 への直接リンク")'
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`instanceof`运算符[​](#instanceof演算子 "instanceof演算子 への直接リンク")'
- en: '[`instanceof`演算子](/reference/object-oriented/class/instanceof-operator)は、オブジェクトが特定のクラスのインスタンスであるかを判定できる。'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`instanceof`运算符](/reference/object-oriented/class/instanceof-operator)用于判断对象是否为特定类的实例。'
- en: '[PRE104]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 抽象クラス[​](#抽象クラス "抽象クラス への直接リンク")
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抽象类[​](#抽象クラス "抽象クラス への直接リンク")
- en: '`abstract`キーワードにより、[抽象クラス](/reference/object-oriented/class/abstract-class)を定義できる。'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`abstract`关键字，可以定义[抽象类](/reference/object-oriented/class/abstract-class)。
- en: 抽象クラスはインスタンス化できず、他のクラスが継承するための基底クラスに使用される。
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象类不能实例化，而是用于其他类的基类继承。
- en: '[PRE106]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: ゲッターとセッター[​](#ゲッターとセッター "ゲッターとセッター への直接リンク")
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取器和设置器[​](#ゲッターとセッター "ゲッターとセッター への直接リンク")
- en: ゲッターやセッターは、オブジェクトのプロパティを取得・設定するためのメソッド。
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取器和设置器是用于获取和设置对象属性的方法。
- en: ゲッターは`get`キーワードで、セッターは`set`キーワードで定義する。
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取器使用`get`关键字，设置器使用`set`关键字定义。
- en: '[PRE108]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: インターフェース[​](#インターフェース "インターフェース への直接リンク")
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接口[​](#インターフェース "インターフェース への直接リンク")
- en: TypeScriptのインターフェースは、プロパティ、メソッド、クラスなどの形状を定義する能力を持つ。
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript的接口具有定义属性、方法、类等形状的能力。
- en: インターフェースを使用する主な目的は、特定のクラスまたはオブジェクトが特定のプロパティまたはメソッドを保持することを強制する。
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口的主要目的是强制特定类或对象具有特定属性或方法。
- en: '[PRE110]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: インターフェース構文[​](#インターフェース構文 "インターフェース構文 への直接リンク")
  id: totrans-359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接口语法[​](#インターフェース構文 "インターフェース構文 への直接リンク")
- en: TypeScriptの[インターフェース](/reference/object-oriented/interface)はオブジェクトの形状を定義することが可能。
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript的[接口](/reference/object-oriented/interface)可以定义对象的形状。
- en: インターフェースはプロパティやメソッドのシグネチャを記述できる。
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口可以描述属性和方法的签名。
- en: '[PRE112]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: インターフェースのreadonly修飾子[​](#インターフェースのreadonly修飾子 "インターフェースのreadonly修飾子 への直接リンク")
  id: totrans-364
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接口的readonly修饰符[​](#インターフェースのreadonly修飾子 "インターフェースのreadonly修飾子 への直接リンク")
- en: インターフェース内でreadonly修飾子を使用して、プロパティを読み取り専用に設定できる。
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用接口内的readonly修饰符，可以将属性设置为只读。
- en: これにより、プロパティの値が一旦設定されると後から変更できなくなる。
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这样一来，一旦设置了属性的值，就无法再次更改。
- en: '[PRE114]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 例外処理[​](#例外処理 "例外処理 への直接リンク")
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常处理[​](#例外処理 "例外処理 への直接リンク")
- en: TypeScriptでは[例外処理](/reference/statements/exception)のためにtry / catch / finally
    ブロックを使用できる。
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript支持使用try / catch / finally块进行[异常处理](/reference/statements/exception)。
- en: 例外が発生した場合（つまり、エラーオブジェクトをスローした場合）catchブロックが実行される。
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发生异常（即抛出错误对象），则执行catch块。
- en: '[PRE116]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: try-catch-finally構文[​](#try-catch-finally構文 "try-catch-finally構文 への直接リンク")
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: try-catch-finally语法[​](#try-catch-finally構文 "try-catch-finally構文 への直接リンク")
- en: tryブロック内のコードは、エラーを検出し、catchブロックはエラーをハンドリングする。
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: try块内的代码用于检测错误，catch块用于处理错误。
- en: finallyブロックはエラーの有無に関係なく実行される。
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: finally块会在无论有无错误都执行。
- en: '[PRE118]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 例外クラス[​](#例外クラス "例外クラス への直接リンク")
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 异常类[​](#例外クラス "例外クラス への直接リンク")
- en: TypeScriptでは、カスタムエラークラスを作成することも可能。
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript还允许创建自定义错误类。
- en: Errorクラスを継承したカスタムクラスで、具体的なエラータイプを作成することができる。
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以创建继承自Error类的自定义类，以创建特定的错误类型。
- en: '[PRE120]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 非同期処理[​](#非同期処理 "非同期処理 への直接リンク")
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步处理[​](#非同期処理 "非同期処理 への直接リンク")
- en: TypeScriptでは、[非同期プログラミング](/reference/asynchronous)をサポートしていて、コード内で時間を要する処理を効率的に扱うことができる。
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript支持[异步编程](/reference/asynchronous)，可以有效处理代码中的耗时操作。
- en: Promise[​](#promise "Promise への直接リンク")
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Promise[​](#promise "Promise への直接リンク")
- en: '[Promise](/reference/asynchronous/promise)は非同期操作の最終的な完了（または失敗）とその結果の値を表す。'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Promise](/reference/asynchronous/promise)表示异步操作的最终完成（或失败）以及其结果值。'
- en: '[PRE122]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: async/await 構文[​](#asyncawait-構文 "async/await 構文 への直接リンク")
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: async/await语法[​](#asyncawait-構文 "async/await 構文 への直接リンク")
- en: 非同期処理をより直感的に書くことができる[async構文](/reference/asynchronous/async)と[await構文](/reference/asynchronous/await)を導入している。
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入了[async语法](/reference/asynchronous/async)和[await语法](/reference/asynchronous/await)，以更直观地编写异步代码。
- en: async/await 構文を使うと、非同期コードをあたかも同期コードであるかのように書ける。
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用async/await语法，可以将异步代码编写得就像同步代码一样。
- en: '[PRE124]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: ジェネリクス[​](#ジェネリクス "ジェネリクス への直接リンク")
  id: totrans-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 泛型[​](#ジェネリクス "ジェネリクス への直接リンク")
- en: TypeScriptの[ジェネリクス](/reference/generics)を使用すると、型の再利用性が向上し、型の一貫性を保つことができる。
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TypeScript的[泛型](/reference/generics)，可以提高类型的可重用性和一致性。
- en: ジェネリクスを使用すると、[型変数](/reference/generics/type-variables)を導入でき、これにより機能の一部を一般化できる。
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用泛型，可以引入[类型变量](/reference/generics/type-variables)，从而泛化部分功能。
- en: '[PRE126]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'typescript`// Tが型変数function <data-lsp lsp="function identity<T>(arg: T): T">identity</data-lsp><<data-lsp
    lsp="(type parameter) T in identity<T>(arg: T): T">T</data-lsp>>(<data-lsp lsp="(parameter)
    arg: T">arg</data-lsp>: <data-lsp lsp="(type parameter) T in identity<T>(arg:
    T): T">T</data-lsp>): <data-lsp lsp="(type parameter) T in identity<T>(arg: T):
    T">T</data-lsp> {  return <data-lsp lsp="(parameter) arg: T">arg</data-lsp>;}//
    型変数Tにstringを割り当てるconst  <data-lsp lsp="const output1: string" style="border-bottom:solid
    2px lightgrey">output1</data-lsp>  = <data-lsp lsp="function identity<string>(arg:
    string): string">identity</data-lsp><string>("myString");` `const output1: string//
    型変数Tにnumberを割り当てるconst  <data-lsp lsp="const output2: number" style="border-bottom:solid
    2px lightgrey">output2</data-lsp>  = <data-lsp lsp="function identity<number>(arg:
    number): number">identity</data-lsp><number>(100);` `const output2: number`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 'typescript`// Tが型変数function <data-lsp lsp="function identity<T>(arg: T): T">identity</data-lsp><<data-lsp
    lsp="(type parameter) T in identity<T>(arg: T): T">T</data-lsp>>(<data-lsp lsp="(parameter)
    arg: T">arg</data-lsp>: <data-lsp lsp="(type parameter) T in identity<T>(arg:
    T): T">T</data-lsp>): <data-lsp lsp="(type parameter) T in identity<T>(arg: T):
    T">T</data-lsp> {  return <data-lsp lsp="(parameter) arg: T">arg</data-lsp>;}//
    型変数Tにstringを割り当てるconst  <data-lsp lsp="const output1: string" style="border-bottom:solid
    2px lightgrey">output1</data-lsp>  = <data-lsp lsp="function identity<string>(arg:
    string): string">identity</data-lsp><string>("myString");` `const output1: string//
    型変数Tにnumberを割り当てるconst  <data-lsp lsp="const output2: number" style="border-bottom:solid
    2px lightgrey">output2</data-lsp>  = <data-lsp lsp="function identity<number>(arg:
    number): number">identity</data-lsp><number>(100);` `const output2: number`'
- en: モジュール[​](#モジュール "モジュール への直接リンク")
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: モジュール[​](#モジュール "モジュール への直接リンク")
- en: TypeScriptのモジュールシステムは、他のモジュールと共有するコードと、モジュール内部限定のコードとを分けることを可能にする([モジュール](/reference/modules))。
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptのモジュールシステムは、他のモジュールと共有するコードと、モジュール内部限定のコードとを分けることを可能にする([モジュール](/reference/modules))。
- en: '[PRE127]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: importとexport[​](#importとexport "importとexport への直接リンク")
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: importとexport[​](#importとexport "importとexport への直接リンク")
- en: モジュール内で定義した関数や変数を外部に公開するには、exportを使用する。
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: モジュール内で定義した関数や変数を外部に公開するには、exportを使用する。
- en: モジュールが公開した関数や変数を利用するには、importを使用する。
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: モジュールが公開した関数や変数を利用するには、importを使用する。
- en: '[PRE131]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: default export[​](#default-export "default export への直接リンク")
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: default export[​](#default-export "default export への直接リンク")
- en: defaultキーワードを使用すると、モジュールがデフォルトで1つの値のみをエクスポートすることを意味する。
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: defaultキーワードを使用すると、モジュールがデフォルトで1つの値のみをエクスポートすることを意味する。
- en: default exportは、importする際に別名を指定することが可能である。
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: default exportは、importする際に別名を指定することが可能である。
- en: '[PRE135]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 再export[​](#再export "再export への直接リンク")
  id: totrans-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 再export[​](#再export "再export への直接リンク")
- en: モジュールは、別のモジュールからエクスポートされたものを再エクスポートすることができる。
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: モジュールは、別のモジュールからエクスポートされたものを再エクスポートすることができる。
- en: '[PRE139]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: type importとtype export[​](#type-importとtype-export "type importとtype export
    への直接リンク")
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: type importとtype export[​](#type-importとtype-export "type importとtype export
    への直接リンク")
- en: 型だけをエクスポート・インポートすることもできる。
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 型だけをエクスポート・インポートすることもできる。
- en: '[PRE145]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 型レベルプログラミング[​](#型レベルプログラミング "型レベルプログラミング への直接リンク")
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 型レベルプログラミング[​](#型レベルプログラミング "型レベルプログラミング への直接リンク")
- en: TypeScriptには、typeof演算子やkeyof演算子、ユーティリティータイプなど、型レベルでプログラミングをするためのさまざまな機能が搭載されている。
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScriptには、typeof演算子やkeyof演算子、ユーティリティータイプなど、型レベルでプログラミングをするためのさまざまな機能が搭載されている。
- en: typeof型演算子[​](#typeof型演算子 "typeof型演算子 への直接リンク")
  id: totrans-436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typeof型演算子[​](#typeof型演算子 "typeof型演算子 への直接リンク")
- en: '[typeof演算子](/reference/type-reuse/typeof-type-operator)は、変数名から型を逆算できる。'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[typeof演算子](/reference/type-reuse/typeof-type-operator)は、変数名から型を逆算できる。'
- en: '[PRE149]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'typescript`const  <data-lsp lsp="const object: {'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 'typescript`const  <data-lsp lsp="const object: {'
- en: 'name: string;'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'version: number;'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'version: number;'
- en: '}">object</data-lsp>  = { <data-lsp lsp="(property) name: string">name</data-lsp>:  "TypeScript",
    <data-lsp lsp="(property) version: number">version</data-lsp>:  3.9,};type <data-lsp
    lsp="type ObjectType = {'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '}">object</data-lsp>  = { <data-lsp lsp="(property) name: string">name</data-lsp>:  "TypeScript",
    <data-lsp lsp="(property) version: number">version</data-lsp>:  3.9,};type <data-lsp
    lsp="type ObjectType = {'
- en: 'name: string;'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'version: number;'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'version: number;'
- en: '}" style="border-bottom:solid 2px lightgrey">ObjectType</data-lsp> =  typeof
    <data-lsp lsp="const object: {'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">ObjectType</data-lsp> =  typeof
    <data-lsp lsp="const object: {'
- en: 'name: string;'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'version: number;'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'version: number;'
- en: '}">object</data-lsp>;` `type ObjectType = {'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '}">object</data-lsp>;` `type ObjectType = {'
- en: 'name: string;'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'version: number;'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'version: number;'
- en: '}`'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: keyof型演算子[​](#keyof型演算子 "keyof型演算子 への直接リンク")
  id: totrans-452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: keyof型演算子[​](#keyof型演算子 "keyof型演算子 への直接リンク")
- en: '[keyof演算子](/reference/type-reuse/keyof-type-operator)を使うと、object型のすべてのキーを文字列リテラルのユニオン型として取得できる。'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[keyof演算子](/reference/type-reuse/keyof-type-operator)を使うと、object型のすべてのキーを文字列リテラルのユニオン型として取得できる。'
- en: '[PRE150]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: typescript`type <data-lsp lsp="type Point = {
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: typescript`type <data-lsp lsp="type Point = {
- en: 'x: number;'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'x: number;'
- en: 'y: number;'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'y: number;'
- en: '}">Point</data-lsp> = { <data-lsp lsp="(property) x: number">x</data-lsp>:  number;
    <data-lsp lsp="(property) y: number">y</data-lsp>:  number;};type <data-lsp lsp="type
    Key = keyof Point" style="border-bottom:solid 2px lightgrey">Key</data-lsp> =  keyof
    <data-lsp lsp="type Point = {'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '}">Point</data-lsp> = { <data-lsp lsp="(property) x: number">x</data-lsp>:  number;
    <data-lsp lsp="(property) y: number">y</data-lsp>:  number;};type <data-lsp lsp="type
    Key = keyof Point" style="border-bottom:solid 2px lightgrey">Key</data-lsp> =  keyof
    <data-lsp lsp="type Point = {'
- en: 'x: number;'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'x: number;'
- en: 'y: number;'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'y: number;'
- en: '}">Point</data-lsp>;` `type Key = keyof Pointconst  <data-lsp lsp="const key1:
    keyof Point">key1</data-lsp>: <data-lsp lsp="type Key = keyof Point">Key</data-lsp>
    =  "x"; // 代入OKconst  <data-lsp lsp="const key2: keyof Point">key2</data-lsp>:
    <data-lsp lsp="type Key = keyof Point">Key</data-lsp> =  "y"; // 代入OKconst  <data-err><data-lsp
    lsp="const key3: keyof Point">key3</data-lsp></data-err>: <data-lsp lsp="type
    Key = keyof Point">Key</data-lsp> =  "z"; // 代入不可Type ''"z"'' is not assignable
    to type ''keyof Point''.2322Type ''"z"'' is not assignable to type ''keyof Point''.`'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: ユーティリティ型[​](#ユーティリティ型 "ユーティリティ型 への直接リンク")
  id: totrans-462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScriptは、既存の型から新しい型を作成するためのさまざまな一般的な型操作を提供している。
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Required[​](#required "Required への直接リンク")
  id: totrans-464
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Required`](/reference/type-reuse/utility-types/required)は、オプションプロパティーを必須プロパティーにするユーティリティ型。'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE151]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: typescript`type <data-lsp lsp="type Person = {
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age?: number | undefined;'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age?: number | undefined">age</data-lsp>?:  number;};type
    <data-lsp lsp="type RequiredPerson = {'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">RequiredPerson</data-lsp> = <data-lsp
    lsp="type Required<T> = { [P in keyof T]-?: T[P]; }">Required</data-lsp><<data-lsp
    lsp="type Person = {'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age?: number | undefined;'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp>>;` `type RequiredPerson = {'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}// ageがオプションでなくなっている点に注目`'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: Partial[​](#partial "Partial への直接リンク")
  id: totrans-480
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Partial`](/reference/type-reuse/utility-types/partial)は、型のすべてのプロパティをオプションにするユーティリティ型。'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE152]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: typescript`type <data-lsp lsp="type Person = {
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number;};type <data-lsp
    lsp="type OptionalPerson = {'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: 'name?: string | undefined;'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age?: number | undefined;'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">OptionalPerson</data-lsp> = <data-lsp
    lsp="type Partial<T> = { [P in keyof T]?: T[P] | undefined; }">Partial</data-lsp><<data-lsp
    lsp="type Person = {'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp>>;` `type OptionalPerson = {'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: 'name?: string | undefined;'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age?: number | undefined;'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: Readonly[​](#readonly "Readonly への直接リンク")
  id: totrans-496
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Readonly`](/reference/type-reuse/utility-types/readonly)は、型のすべてのプロパティをreadonlyにするユーティリティ型。それらのプロパティは再代入できない。'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE153]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: typescript`type <data-lsp lsp="type Person = {
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number;};type <data-lsp
    lsp="type ReadonlyPerson = {'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly name: string;'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly age: number;'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">ReadonlyPerson</data-lsp> = <data-lsp
    lsp="type Readonly<T> = { readonly [P in keyof T]: T[P]; }">Readonly</data-lsp><<data-lsp
    lsp="type Person = {'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp>>;` `type ReadonlyPerson = {'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly name: string;'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '只读 名称: 字符串;'
- en: 'readonly age: number;'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '只读 年龄: 数字;'
- en: '}`'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: Record[​](#record "Record への直接リンク")
  id: totrans-512
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 记录[​](#record "直接链接到记录")
- en: '[`Record`](/reference/type-reuse/utility-types/record)は、オブジェクトのすべてのプロパティ値を特定の型に設定するユーティリティ型。'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`记录`](/reference/type-reuse/utility-types/record)是将对象的所有属性值设置为特定类型的实用程序类型。'
- en: '[PRE154]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: typescript`type <data-lsp lsp="type ThreeLetterRecord = {
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: typescript`类型 <data-lsp lsp="type 三字母记录 = {
- en: 'one: string;'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '一个: 字符串;'
- en: 'two: string;'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '二: 字符串;'
- en: 'three: string;'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '三: 字符串;'
- en: '}" style="border-bottom:solid 2px lightgrey">ThreeLetterRecord</data-lsp> =
    <data-lsp lsp="type Record<K extends string | number | symbol, T> = { [P in K]:
    T; }">Record</data-lsp><"one"  |  "two"  |  "three",  string>;` `type ThreeLetterRecord
    = {'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">三字母记录</data-lsp> = <data-lsp lsp="type
    记录<K extends string | number | symbol, T> = { [P in K]: T; }">记录</data-lsp><"一个"  |  "二"  |  "三",  字符串>;`
    `类型 三字母记录 = {'
- en: 'one: string;'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '一个: 字符串;'
- en: 'two: string;'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '二: 字符串;'
- en: 'three: string;'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '三: 字符串;'
- en: '}`'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: Pick[​](#pick "Pick への直接リンク")
  id: totrans-524
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 挑选[​](#pick "直接链接到挑选")
- en: '[`Pick`](/reference/type-reuse/utility-types/pick)は、オブジェクトから特定のプロパティだけを拾い出すユーティリティ型。'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`挑选`](/reference/type-reuse/utility-types/pick)是���对象中挑选特定属性的实用程序类型。'
- en: '[PRE155]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: typescript`type <data-lsp lsp="type Person = {
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: typescript`类型 <data-lsp lsp="type 人员 = {
- en: 'name: string;'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '名称: 字符串;'
- en: 'age: number;'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '年龄: 数字;'
- en: 'address: string;'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '地址: 字符串;'
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number; <data-lsp lsp="(property)
    address: string">address</data-lsp>:  string;};type <data-lsp lsp="type PersonNameAndAge
    = {'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '}">人员</data-lsp> = { <data-lsp lsp="(属性) 名称: 字符串">名称</data-lsp>:  字符串; <data-lsp
    lsp="(属性) 年龄: 数字">年龄</data-lsp>:  数字; <data-lsp lsp="(属性) 地址: 字符串">地址</data-lsp>:  字符串;};类型
    <data-lsp lsp="type 人员名称和年龄 = {'
- en: 'name: string;'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '名称: 字符串;'
- en: 'age: number;'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '年龄: 数字;'
- en: '}" style="border-bottom:solid 2px lightgrey">PersonNameAndAge</data-lsp> =
    <data-lsp lsp="type Pick<T, K extends keyof T> = { [P in K]: T[P]; }">Pick</data-lsp><<data-lsp
    lsp="type Person = {'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">人员名称和年龄</data-lsp> = <data-lsp
    lsp="type 挑选<T, K extends keyof T> = { [P in K]: T[P]; }">挑选</data-lsp><<data-lsp
    lsp="type 人员 = {'
- en: 'name: string;'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '名称: 字符串;'
- en: 'age: number;'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '年龄: 数字;'
- en: 'address: string;'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '地址: 字符串;'
- en: '}">Person</data-lsp>,  "name"  |  "age">;` `type PersonNameAndAge = {'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '}">人员</data-lsp>,  "名称"  |  "年龄">;` `类型 人员名称和年龄 = {'
- en: 'name: string;'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '名称: 字符串;'
- en: 'age: number;'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '年龄: 数字;'
- en: '}`'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: Omit[​](#omit "Omit への直接リンク")
  id: totrans-542
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 省略[​](#omit "直接链接到省略")
- en: '[`Omit`](/reference/type-reuse/utility-types/omit)は、オブジェクトから特定のプロパティを省いた型を作るユーティリティ型。'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`省略`](/reference/type-reuse/utility-types/omit)是创建省略对象特定属性的类型的实用程序类型。'
- en: '[PRE156]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: typescript`type <data-lsp lsp="type Person = {
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: typescript`类型 <data-lsp lsp="type 人员 = {
- en: 'name: string;'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '名称: 字符串;'
- en: 'age: number;'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '年龄: 数字;'
- en: 'address: string;'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '地址: 字符串;'
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number; <data-lsp lsp="(property)
    address: string">address</data-lsp>:  string;};type <data-lsp lsp="type PersonWithoutAddress
    = {'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '}">人员</data-lsp> = { <data-lsp lsp="(属性) 名称: 字符串">名称</data-lsp>:  字符串; <data-lsp
    lsp="(属性) 年龄: 数字">年龄</data-lsp>:  数字; <data-lsp lsp="(属性) 地址: 字符串">地址</data-lsp>:  字符串;};类型
    <data-lsp lsp="type 无地址人员 = {'
- en: 'name: string;'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '名称: 字符串;'
- en: 'age: number;'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '年龄: 数字;'
- en: '}" style="border-bottom:solid 2px lightgrey">PersonWithoutAddress</data-lsp>
    = <data-lsp lsp="type Omit<T, K extends string | number | symbol> = { [P in Exclude<keyof
    T, K>]: T[P]; }">Omit</data-lsp><<data-lsp lsp="type Person = {'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">无地址人员</data-lsp> = <data-lsp lsp="type
    Omit<T, K extends string | number | symbol> = { [P in Exclude<keyof T, K>]: T[P];
    }">省略</data-lsp><<data-lsp lsp="type 人员 = {'
- en: 'name: string;'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '名称: 字符串;'
- en: 'age: number;'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '年龄: 数字;'
- en: 'address: string;'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '地址: 字符串;'
- en: '}">Person</data-lsp>,  "address">;` `type PersonWithoutAddress = {'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '}">人员</data-lsp>,  "地址">;` `类型 无地址人员 = {'
- en: 'name: string;'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '名称: 字符串;'
- en: 'age: number;'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '年龄: 数字;'
- en: '}`'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: Exclude[​](#exclude "Exclude への直接リンク")
  id: totrans-560
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 排除[​](#exclude "直接链接到排除")
- en: '[`Exclude`](/reference/type-reuse/utility-types/exclude)は、ユニオン型から特定の型を除外するユーティリティ型。'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`排除`](/reference/type-reuse/utility-types/exclude)是从联合类型中排除特定类型的实用程序类型。'
- en: '[PRE157]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'typescript`type <data-lsp lsp="type T1 = string | number | boolean">T1</data-lsp>
    =  number  |  string  |  boolean;type <data-lsp lsp="type T2 = string | number"
    style="border-bottom:solid 2px lightgrey">T2</data-lsp> = <data-lsp lsp="type
    Exclude<T, U> = T extends U ? never : T">Exclude</data-lsp><<data-lsp lsp="type
    T1 = string | number | boolean">T1</data-lsp>,  boolean>;` `type T2 = string |
    number`'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 'typescript`类型 <data-lsp lsp="type T1 = string | number | boolean">T1</data-lsp>
    =  数字  |  字符串  |  布尔;类型 <data-lsp lsp="type T2 = string | number" style="border-bottom:solid
    2px lightgrey">T2</data-lsp> = <data-lsp lsp="type 排除<T, U> = T extends U ? never
    : T">排除</data-lsp><<data-lsp lsp="type T1 = string | number | boolean">T1</data-lsp>,  布尔>;`
    `类型 T2 = 字符串 | 数字`'
- en: Extract[​](#extract "Extract への直接リンク")
  id: totrans-564
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提取[​](#extract "直接链接到提取")
- en: '[`Extract`](/reference/type-reuse/utility-types/extract)は、ふたつのユニオン型の共通の部分を抽出するユーティリティ型。'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`提取`](/reference/type-reuse/utility-types/extract)是提取两个联合类型的共同部分的实用程序类型。'
- en: '[PRE158]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'typescript`type <data-lsp lsp="type T1 = string | number | boolean">T1</data-lsp>
    =  number  |  string  |  boolean;type <data-lsp lsp="type T2 = string | boolean">T2</data-lsp>
    =  string  |  boolean;type <data-lsp lsp="type T3 = string | boolean" style="border-bottom:solid
    2px lightgrey">T3</data-lsp> = <data-lsp lsp="type Extract<T, U> = T extends U
    ? T : never">Extract</data-lsp><<data-lsp lsp="type T1 = string | number | boolean">T1</data-lsp>,
    <data-lsp lsp="type T2 = string | boolean">T2</data-lsp>>;` `type T3 = string
    | boolean`'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 'typescript`type <data-lsp lsp="type T1 = string | number | boolean">T1</data-lsp>
    =  number  |  string  |  boolean;type <data-lsp lsp="type T2 = string | boolean">T2</data-lsp>
    =  string  |  boolean;type <data-lsp lsp="type T3 = string | boolean" style="border-bottom:solid
    2px lightgrey">T3</data-lsp> = <data-lsp lsp="type Extract<T, U> = T extends U
    ? T : never">Extract</data-lsp><<data-lsp lsp="type T1 = string | number | boolean">T1</data-lsp>,
    <data-lsp lsp="type T2 = string | boolean">T2</data-lsp>>;` `type T3 = string
    | boolean`'
- en: NonNullable[​](#nonnullable "NonNullable への直接リンク")
  id: totrans-568
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[NonNullable](#nonnullable "NonNullable への直接リンク")'
- en: '`NonNullable`は、nullまたはundefinedを含む型からいずれも除外するユーティリティ型。'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NonNullable`は、nullまたはundefinedを含む型からいずれも除外するユーティリティ型。'
- en: '[PRE159]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: typescript`type <data-lsp lsp="type T1 = string | null | undefined">T1</data-lsp>
    =  string  |  null  |  undefined;type <data-lsp lsp="type T2 = string" style="border-bottom:solid
    2px lightgrey">T2</data-lsp> = <data-lsp lsp="type NonNullable<T> = T &amp; {}">NonNullable</data-lsp><<data-lsp
    lsp="type T1 = string | null | undefined">T1</data-lsp>>;` `type T2 = string`
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: typescript`type <data-lsp lsp="type T1 = string | null | undefined">T1</data-lsp>
    =  string  |  null  |  undefined;type <data-lsp lsp="type T2 = string" style="border-bottom:solid
    2px lightgrey">T2</data-lsp> = <data-lsp lsp="type NonNullable<T> = T &amp; {}">NonNullable</data-lsp><<data-lsp
    lsp="type T1 = string | null | undefined">T1</data-lsp>>;` `type T2 = string`
- en: Mapped types[​](#mapped-types "Mapped types への直接リンク")
  id: totrans-572
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[Mapped types](#mapped-types "Mapped types への直接リンク")'
- en: '[Mapped types](/reference/type-reuse/mapped-types)を使うと、既存の型から新しい型を生成できる。'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Mapped types](/reference/type-reuse/mapped-types)を使うと、既存の型から新しい型を生成できる。'
- en: Mapped typesは、オブジェクトの各プロパティを”マップ”し、新しいオブジェクトを生成する。
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mapped typesは、オブジェクトの各プロパティを”マップ”し、新しいオブジェクトを生成する。
- en: '[PRE160]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: typescript`type <data-lsp lsp="type Person = {
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: typescript`type <data-lsp lsp="type Person = {
- en: 'name: string;'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'age: number;'
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number;};type <data-lsp
    lsp="type ReadOnlyPerson = {'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number;};type <data-lsp
    lsp="type ReadOnlyPerson = {'
- en: 'readonly name: string;'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly name: string;'
- en: 'readonly age: number;'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly age: number;'
- en: '}" style="border-bottom:solid 2px lightgrey">ReadOnlyPerson</data-lsp> = {
    readonly [<data-lsp lsp="(type parameter) K">K</data-lsp> in  keyof <data-lsp
    lsp="type Person = {'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">ReadOnlyPerson</data-lsp> = {
    readonly [<data-lsp lsp="(type parameter) K">K</data-lsp> in  keyof <data-lsp
    lsp="type Person = {'
- en: 'name: string;'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'age: number;'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: '}">Person</data-lsp>]: <data-lsp lsp="type Person = {'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '}">Person</data-lsp>]: <data-lsp lsp="type Person = {'
- en: 'name: string;'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'age: number;'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: '}">Person</data-lsp>[<data-lsp lsp="(type parameter) K">K</data-lsp>] };` `type
    ReadOnlyPerson = {'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '}">Person</data-lsp>[<data-lsp lsp="(type parameter) K">K</data-lsp>] };` `type
    ReadOnlyPerson = {'
- en: 'readonly name: string;'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly name: string;'
- en: 'readonly age: number;'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly age: number;'
- en: '}`'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: インデックスアクセス型[​](#インデックスアクセス型 "インデックスアクセス型 への直接リンク")
  id: totrans-592
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[インデックスアクセス型](/reference/type-reuse/indexed-access-types)を使うと、型のプロパティの型を取得できる。'
- en: '[インデックスアクセス型](/reference/type-reuse/indexed-access-types)を使うと、型のプロパティの型を取得できる。'
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Indexed Access Types](/reference/type-reuse/indexed-access-types)を使うと、型のプロパティの型を取得できる。'
- en: '[PRE161]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: typescript`type <data-lsp lsp="type Person = {
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: typescript`type <data-lsp lsp="type Person = {
- en: 'name: string;'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'age: number;'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number;};type <data-lsp
    lsp="type Name = string" style="border-bottom:solid 2px lightgrey">Name</data-lsp>
    = <data-lsp lsp="type Person = {'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number;};type <data-lsp
    lsp="type Name = string" style="border-bottom:solid 2px lightgrey">Name</data-lsp>
    = <data-lsp lsp="type Person = {'
- en: 'name: string;'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'age: number;'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: '}">Person</data-lsp>["name"];` `type Name = string`'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '}">Person</data-lsp>["name"];` `type Name = string`'
- en: '[PRE162]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
