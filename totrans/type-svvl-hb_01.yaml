- en: TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/](https://typescriptbook.jp/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 注記
  prefs: []
  type: TYPE_NORMAL
- en: 本書『サバイバルTypeScript』は実務でTypeScriptを使う開発者のための入門書です。そして、このページはTypeScriptの特徴を最速で把握できるよう、数百ページからなる本書のコンテンツをつまみ食いした要約です。
  prefs: []
  type: TYPE_NORMAL
- en: » [本書ついて詳しく知る](/about)
  prefs: []
  type: TYPE_NORMAL
- en: » [とにかく今すぐTypeScriptを書いてみたい](/tutorials)
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptとは[​](#typescriptとは "TypeScriptとは への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScriptの**スーパーセット**となるプログラミング言語。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**静的型付け言語**であり、プログラムの正しさが**静的に検査**できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ライブラリやIDEなどの開発環境が充実しており、**大きなエコシステム**を持っている。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft**が2012年に開発し、**オープンソース**で公開した。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: » [TypeScriptの特徴について詳しく知る](/overview/features)
  prefs: []
  type: TYPE_NORMAL
- en: » [TypeScript誕生の背景について詳しく知る](/overview/before-typescript)
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptはJavaScriptのスーパーセット[​](#typescriptはjavascriptのスーパーセット "TypeScriptはJavaScriptのスーパーセット
    への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**スーパーセット**とは、元の言語との**互換性**を保ちつつ、元の言語を**拡張**して作った言語のこと。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptは、JavaScriptとの互換性を保ちつつ、JavaScriptを拡張して作った言語である。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: よって、JavaScriptのコードはすべてTypeScriptとしてあつかえる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptは、型注釈やインターフェース、ジェネリクスなど独自の機能を追加している。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptの機能とJavaScriptの機能
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f21208fd99a2705a1642c04b474fed54.png)'
  prefs: []
  type: TYPE_IMG
- en: スーパーセットのメリット[​](#スーパーセットのメリット "スーパーセットのメリット への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**学習のしやすさ**: JavaScriptの知識を活かしてTypeScriptを学べる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**資産が活かせる**: 既存のJavaScriptコード資産を活かして開発できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**移行のしやすさ**: 既存のJavaScriptプロジェクトはTypeScriptへ移行がしやすい。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: » [TypeScriptとJavaScriptの関係について詳しく知る](/overview/javascript-is-typescript)
  prefs: []
  type: TYPE_NORMAL
- en: 静的な検査[​](#静的な検査 "静的な検査 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptはプログラムの正しさを静的に検査できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScriptは実行しないとバグがあるかを確かめられない。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptは実行せずにチェックが行える。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: » [静的な検査について詳しく知る](/overview/static-type)
  prefs: []
  type: TYPE_NORMAL
- en: 開発効率と品質を向上し、安心感を高める[​](#開発効率と品質を向上し安心感を高める "開発効率と品質を向上し、安心感を高める への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 問題を早期に発見し、開発を効率化できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: コーディング時に問題を発見し、修正できるため、バグを予防できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: エディターとTypeScriptを連携させると、リアルタイムのチェックやコード補完が可能。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: エディター上でのフィードバック
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e8222f986033e999ae7b07a1ae5ec855.png)'
  prefs: []
  type: TYPE_IMG
- en: 問題を早期に修正できることで、製品の信頼感や安心感が高まる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 見通しの悪い大規模なプログラムや、重要なシステムの開発では静的な検査が安心材料になる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 検査の仕組み[​](#検査の仕組み "検査の仕組み への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptの検査は**型システム**に基づく。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 型システムに基づき、**コンパイル**のタイミングでプログラムを検査する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 型システム[​](#型システム "型システム への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 型システムは、データの種別ごとに型を与え、データに対して行える操作に制約を設ける。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: これにより、変数には決められた値のみが代入され、決められた操作のみが行われることが保証され、プログラムが正確で安全になる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 型システムは、数学の「型理論」を背景に構築され、数学的証明によりプログラムの欠陥をあぶり出せる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 型注釈[​](#型注釈 "型注釈 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 変数にどのような値が代入できるのかを制約するものを「**型**」と言う。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 開発者は、変数がどのような型なのかを**型注釈**で指定する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptでは、型注釈を手がかりに検査が行われる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 型注釈
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a31ec519278231ed0ee3aa8e2902849f.png)'
  prefs: []
  type: TYPE_IMG
- en: 型推論[​](#型推論 "型推論 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 値の型が文脈で明白な場合、型が自動で判断される。この仕組みを**型推論**という。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 型推論のおかげで、開発者は型注釈を割愛でき、記述量を減らせる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 型推論
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a688505f95f7034fdcc074fd3aa103f.png)'
  prefs: []
  type: TYPE_IMG
- en: コンパイル[​](#コンパイル "コンパイル への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScriptを実行するために、JavaScriptへ変換する。この変換のことを**コンパイル**という。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 変換後のJavaScriptコードはブラウザやサーバーで実行できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptの検査はコンパイルのタイミングで行われる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: コンパイル
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/55bec6342572c2b22cc5f299c2a57062.png)'
  prefs: []
  type: TYPE_IMG
- en: 型はドキュメント、リファクタリング、ツールの充実にも寄与[​](#型はドキュメントリファクタリングツールの充実にも寄与 "型はドキュメント、リファクタリング、ツールの充実にも寄与
    への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ドキュメントになる**: 型情報はドキュメントの役割を果たし、コードの理解を助ける。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**リファクタリングが安全に**: 変数の型や関数のシグネチャを変更したとき、修正が必要な箇所がコンパイル時にすべて分かり、不注意による誤修正を減らせる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ツールサポートが充実**: IDEやエディターでのリアルタイムのエラーチェック、自動補完、リファクタリングツール、ナビゲーションなど、開発ツールのサポートが充実している。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: » [TypeScriptを使う動機について詳しく知る](/overview/why-you-should-use-typescript)
  prefs: []
  type: TYPE_NORMAL
- en: 多くのエディターがTypeScriptをサポート[​](#多くのエディターがtypescriptをサポート "多くのエディターがTypeScriptをサポート
    への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JetBrains IDE (IntelliJ, WebStorm, PhpStorm, RubyMine, PyCharm, GoLandなど)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NeoVim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emacs (Tide)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sublime Text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: » [TypeScriptとエコシステムについて詳しく知る](/overview/ecosystem)
  prefs: []
  type: TYPE_NORMAL
- en: 多様なソフトウェアが作れる[​](#多様なソフトウェアが作れる "多様なソフトウェアが作れる への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 作れるものの範囲が広いことは、TypeScriptの魅力のひとつ。
  prefs: []
  type: TYPE_NORMAL
- en: '**Webアプリケーション**: TypeScriptの主戦場。フロントエンドの開発に広く使用される。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**サーバーサイドアプリケーション**: Node.jsと組み合わせて、バックエンドやAPIサーバーを開発することが可能。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**モバイルアプリケーション**: React Nativeなどのフレームワークを利用して、モバイルアプリケーションを開発できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**デスクトップアプリケーション**: Electronを使用して、クロスプラットフォームのデスクトップアプリを開発できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**クラウド関連の機能**: AWS LambdaやAzure Functionsなどのクラウドプラットフォームで、サーバーレス関数が作成できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ユーティリティーやCLIツール**: コマンドラインツールや各種ユーティリティの開発ができる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**インフラ構成管理(IaC)**: PulumiやAWS CDKを使用して、インフラの構成を管理することができる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**アプリケーションの拡張機能**: Google ChromeやVisual Studio Codeなどデスクトップアプリケーションの拡張をTypeScriptで開発できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: » [TypeScriptの射程圏について詳しく知る](/overview/range-of-typescript)
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptを導入した企業の感想[​](#typescriptを導入した企業の感想 "TypeScriptを導入した企業の感想 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**[Slack](https://slack.engineering/typescript-at-slack/)**: コードベースが大規模になっても、型システムが安全性と信頼性を保証してくれる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Airbnb](https://www.reddit.com/r/typescript/comments/aofcik/38_of_bugs_at_airbnb_could_have_been_prevented_by/)**:
    TypeScriptを使っていたらAirbnbの38%ものバグを未然に防げた。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[ヤフー株式会社](https://codezine.jp/article/detail/16905)**: 静的型付けによりコードの品質とメンテナンス性が向上し、IDEとの連携により開発者の生産性が向上した。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[LINE株式会社](https://logmi.jp/tech/articles/322702)**: ちょっとした修正でもかかるQAのコストを、TypeScript化によって抑制。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Sansan株式会社](https://buildersbox.corp-sansan.com/entry/2021/06/24/110000)**:
    型がドキュメントとしての役割を果たし、コードリーディングや他チームのコード変更に役立った。採用の文脈でアピールポイントにもなった。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[ラクスル株式会社](https://techblog.raksul.com/entry/2020/10/07/after-introducing-typescript-to-existing-product/)**:型システムの恩恵が得られる、エディターの入力補完を受けられる、コード=ドキュメントという状況を作りやすい。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 基本的な型[​](#基本的な型 "基本的な型 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: プリミティブ型[​](#プリミティブ型 "プリミティブ型 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`boolean`](/reference/values-types-variables/boolean): 真偽値。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`number`](/reference/values-types-variables/number): 数値。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`string`](/reference/values-types-variables/string): 文字列。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`bigint`](/reference/values-types-variables/bigint): 大きな整数。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`symbol`](/reference/values-types-variables/symbol): 一意の値を示す。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`undefined`](/reference/values-types-variables/undefined): 値が定義されていない状態を示す。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`null`](/reference/values-types-variables/null): 値が存在しない状態を示す。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 特殊な型[​](#特殊な型 "特殊な型 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`any`](/reference/values-types-variables/any): 何でも代入できる型。型が不明な場合に使用する。その値に対する操作の制限がなく、型の安全性は弱まる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`unknown`](/reference/statements/unknown): any型と似て、何でも代入できる型。その値に対する操作は制限され、型の安全性が保たれる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`void`](/reference/functions/void-type): 値が存在しないことを示す。関数が何も返さない場合に使用する。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`never`](/reference/statements/never): 決して何も返さないことを示す。エラーを投げる関数や無限ループの関数の戻り値として使用する。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 型エイリアス[​](#型エイリアス "型エイリアス への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[型エイリアス](/reference/values-types-variables/type-alias)は既存の型を新たな名前で定義する機能。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: より複雑な型を簡素に表現したり、コードの可読性を向上するのに役立つ。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 構造的部分型[​](#構造的部分型 "構造的部分型 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptは[構造的部分型](/reference/values-types-variables/structural-subtyping)を採用している。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 構造的部分型では、変数の代入可否を、構造が互換しているかに着目して判定する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 配列[​](#配列 "配列 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 配列リテラル[​](#配列リテラル "配列リテラル への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 配列の値を作るには[配列リテラル](/reference/values-types-variables/array/array-literal)(`[]`)を使う。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[要素1, 要素2, ...]`の形で配列の初期値を設定できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 配列の型注釈[​](#配列の型注釈 "配列の型注釈 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[配列の型注釈](/reference/values-types-variables/array/type-annotation-of-array)には`型名[]`または`Array<型名>`を使う。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 配列要素へのアクセス[​](#配列要素へのアクセス "配列要素へのアクセス への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[配列要素にアクセスする](/reference/values-types-variables/array/how-to-access-elements-in-an-array)にはインデックス（インデックス）を使う。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 0から始まる整数を指定して配列の値を取得し、代入も可能。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 読み取り専用配列[​](#読み取り専用配列 "読み取り専用配列 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[読み取り専用配列](/reference/values-types-variables/array/readonly-array)は値の変更ができない配列を表す。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 配列の型注釈に`readonly`をつけると読み取り専用配列となる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ReadonlyArray<型名>`でも読み取り専用配列が宣言でき、`readonly 型名[]`と機能は同じ。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 配列のループ[​](#配列のループ "配列のループ への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[配列をループする](/reference/values-types-variables/array/how-to-loop-an-array)ための`for...of`構文もある。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: タプル型[​](#タプル型 "タプル型 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[タプル型](/reference/values-types-variables/tuple)を使うと、配列の要素数と要素の型が固定される。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: それぞれの要素のインデックスごとに型が決まる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: タプルの要素へのアクセス[​](#タプルの要素へのアクセス "タプルの要素へのアクセス への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: タプルの要素にアクセスする場合も配列同様にインデックス（インデックス）を使用する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: オブジェクト[​](#オブジェクト "オブジェクト への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: オブジェクトリテラル[​](#オブジェクトリテラル "オブジェクトリテラル への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: オブジェクトの作り方は[オブジェクトリテラル](/reference/values-types-variables/object/object-literal)(`{}`)を使う。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ プロパティキー: 値, ... }` の形でオブジェクトの初期値を設定できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: プロパティアクセス[​](#プロパティアクセス "プロパティアクセス への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ドット`.`を使ってオブジェクトのプロパティにアクセスできる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: オブジェクトの型注釈[​](#オブジェクトの型注釈 "オブジェクトの型注釈 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[オブジェクトの型注釈](/reference/values-types-variables/object/type-annotation-of-objects)は`{プロパティ1:
    型1, プロパティ2: 型2, ...}`の形で記述する。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: readonlyプロパティ[​](#readonlyプロパティ "readonlyプロパティ への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`readonly`](/reference/values-types-variables/object/readonly-property)をつけたプロパティは代入できない。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: オプションプロパティー[​](#オプションプロパティー "オプションプロパティー への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[オプショナルプロパティー](/reference/values-types-variables/object/optional-property)`?`をつけたプロパティは省略可能。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: オブジェクトメソッド[​](#オブジェクトメソッド "オブジェクトメソッド への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 関数をプロパティに持つオブジェクトを定義できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: インデックス型[​](#インデックス型 "インデックス型 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: オブジェクトは[インデックス型](/reference/values-types-variables/object/index-signature)を利用して任意のキーの値を取得することができる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'インデックス型プロパティの型注釈は`[キー名: プロパティキーの型]: プロパティ値の型` の形で記述する。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Shorthand property names[​](#shorthand-property-names "Shorthand property names
    への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: プロパティの値がすでに定義されている変数である場合、そのプロパティ名を省略して記述できる([shorthand property names](/reference/values-types-variables/object/shorthand-property-names))。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: オプショナルチェーン[​](#オプショナルチェーン "オプショナルチェーン への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: プロパティが存在するかどうか不確定である場合、`?.`演算子（[オプショナルチェーン](/reference/values-types-variables/object/optional-chaining)）で安全にアクセスできる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Map[​](#map "Map への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mapオブジェクト[​](#mapオブジェクト "Mapオブジェクト への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Mapオブジェクト](/reference/builtin-api/map)はキーとそれに対応する値を対にしたコレクション。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: キーはオブジェクトも含め任意の値が可能。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Mapの型注釈[​](#mapの型注釈 "Mapの型注釈 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mapの型注釈は`Map<キーの型, 値の型>`の形で記述する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Mapのループ[​](#mapのループ "Mapのループ への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mapオブジェクトは`for...of`でループすると、各エントリーがキーと値の配列として順に取得できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 要素の順序は、要素を追加した順が保証されている。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Set[​](#set "Set への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set オブジェクト[​](#set-オブジェクト "Set オブジェクト への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Setオブジェクト](/reference/builtin-api/set)は同じ値が存在しないコレクション。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setの要素は何でも可能である。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Setの型注釈[​](#setの型注釈 "Setの型注釈 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setの型注釈は`Set<要素の型>`の形で記述する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Setのループ[​](#setのループ "Setのループ への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SetもMap同様に`for...of`でループすることが可能。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 順序は`add`した順。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 列挙型 (Enum)[​](#列挙型-enum "列挙型 (Enum) への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 列挙型の基本[​](#列挙型の基本 "列挙型の基本 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[列挙型](/reference/values-types-variables/enum)(enum)は、関連する一連の数値または文字列値の集まりを定義する。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 列挙型は`enum`キーワードを使用して定義する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 列挙型に値を設定[​](#列挙型に値を設定 "列挙型に値を設定 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 列挙体の値は文字列リテラルまたは数値リテラルで指定できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 列挙型の利用[​](#列挙型の利用 "列挙型の利用 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 列挙型の各値にアクセスするにはドット演算子を使用する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: ユニオン型[​](#ユニオン型 "ユニオン型 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[ユニオン型](/reference/values-types-variables/union)は複数の型のうちのいずれかをとる値を表現できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`型1 | 型2 | ...`の形式で使う。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ひとつ以上の異なる型の値を同じ変数で扱う場合に使用する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 判別可能なユニオン型[​](#判別可能なユニオン型 "判別可能なユニオン型 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[判別可能なユニオン型](/reference/values-types-variables/discriminated-union)は、共通のリテラル型のプロパティを持つ特別なユニオン型。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 共通のプロパティを利用して、型を判別できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: インターセクション型[​](#インターセクション型 "インターセクション型 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[インターセクション型](/reference/values-types-variables/intersection)は複数の型を1つに結合した新しい型を定義する。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`型1 & 型2 & ...`の形式で使う。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: その結果として生じた型は、それぞれの型が持つすべてのプロパティとメソッドを備えている。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 分割代入[​](#分割代入 "分割代入 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 分割代入を使うと、配列の各要素を一度に変数に代入できる([配列の分割代入](/reference/values-types-variables/array/destructuring-assignment-from-array))。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 分割代入により、オブジェクトのプロパティを個別の変数へ代入できる([オブジェクトの分割代入](/reference/values-types-variables/object/destructuring-assignment-from-objects))。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 条件分岐[​](#条件分岐 "条件分岐 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptではJavaScriptと同様に、条件分岐には`if`構文や`switch`構文が利用できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[if-else文](/reference/statements/if-else)[​](#if-else文 "if-else文 への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[switch文](/reference/statements/switch)[​](#switch文 "switch文 への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 型の絞り込み[​](#型の絞り込み "型の絞り込み への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 条件分岐を利用すると、その節内では型が自動的に絞り込まれる([制御フロー分析と型ガードによる型の絞り込み](/reference/statements/control-flow-analysis-and-type-guard))。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 関数[​](#関数 "関数 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptではアロー関数や関数宣言に型注釈をつけることができる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[アロー関数](/reference/functions/arrow-functions)[​](#アロー関数 "アロー関数 への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[関数宣言](/reference/functions/function-declaration)[​](#関数宣言 "関数宣言 への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 分割代入引数[​](#分割代入引数 "分割代入引数 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 関数の引数に配列またはオブジェクトリテラルを展開することができる([分割代入引数](/reference/functions/destructuring-assignment-parameters))。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 型ガード関数[​](#型ガード関数 "型ガード関数 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 特定の型であることを判定する関数([型ガード関数](/reference/functions/type-guard-functions))を利用することで、型が絞り込まれる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: オプション引数[​](#オプション引数 "オプション引数 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 関数の引数には`?`をつけることで任意とすることができる([オプション引数](/reference/functions/optional-parameters))。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: デフォルト引数[​](#デフォルト引数 "デフォルト引数 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 関数の引数には`=`を使ってデフォルトの値を設定することができる([デフォルト引数](/reference/functions/default-parameters))。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 残余引数[​](#残余引数 "残余引数 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`...`を使って[残余引数](/reference/functions/rest-parameters)(任意の数の引数)を設定することができる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: クラス[​](#クラス "クラス への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: クラス構文[​](#クラス構文 "クラス構文 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScriptの[クラス](/reference/object-oriented/class)構文はそのまま利用できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[フィールド](/reference/object-oriented/class/fields)宣言に型注釈をつけることができる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: アクセス修飾子[​](#アクセス修飾子 "アクセス修飾子 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`public`(デフォルト)、`protected`、`private`の3つの[アクセス修飾子](/reference/object-oriented/class/access-modifiers)が利用できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: クラスのreadonly修飾子[​](#クラスのreadonly修飾子 "クラスのreadonly修飾子 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`readonly`修飾子](/reference/object-oriented/class/readonly-modifier-in-classes)をつけたプロパティは、読み取り専用となる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`readonly`修飾子はアクセス修飾子と併用可能。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Constructor shorthand[​](#constructor-shorthand "Constructor shorthand への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScriptでは、コンストラクタパラメータにアクセス修飾子をつけることで、自動的にそのフィールドが定義される([constructor shorthand](/reference/object-oriented/class/constructor-shorthand))。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: これによりコードの簡略化が図れる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: フィールドの初期化子[​](#フィールドの初期化子 "フィールドの初期化子 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: フィールド宣言の際に直接初期値を設定できる([フィールドの初期化子](/reference/object-oriented/class/field-initializers))。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 静的フィールドと静的メソッド[​](#静的フィールドと静的メソッド "静的フィールドと静的メソッド への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`static`キーワードを使うことで、インスタンスではなくクラス自体に関連するフィールドやメソッドを定義できる([静的フィールド](/reference/object-oriented/class/static-fields)、[静的メソッド](/reference/object-oriented/class/static-methods))。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: this型[​](#this型 "this型 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: メソッド内で`this`を返すことで、メソッドの呼び出しを直列につなげるメソッドチェーンを可能にする([メソッドチェーン](/reference/object-oriented/class/return-this-type))。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: クラスの継承[​](#クラスの継承 "クラスの継承 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`extends`キーワードにより、[クラスの継承](/reference/object-oriented/class/class-inheritance)が可能。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: スーパークラスのプロパティ・メソッドの値は、サブクラスからアクセス可能。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '`instanceof`演算子[​](#instanceof演算子 "instanceof演算子 への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`instanceof`演算子](/reference/object-oriented/class/instanceof-operator)は、オブジェクトが特定のクラスのインスタンスであるかを判定できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 抽象クラス[​](#抽象クラス "抽象クラス への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`abstract`キーワードにより、[抽象クラス](/reference/object-oriented/class/abstract-class)を定義できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 抽象クラスはインスタンス化できず、他のクラスが継承するための基底クラスに使用される。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: ゲッターとセッター[​](#ゲッターとセッター "ゲッターとセッター への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ゲッターやセッターは、オブジェクトのプロパティを取得・設定するためのメソッド。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ゲッターは`get`キーワードで、セッターは`set`キーワードで定義する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: インターフェース[​](#インターフェース "インターフェース への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScriptのインターフェースは、プロパティ、メソッド、クラスなどの形状を定義する能力を持つ。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: インターフェースを使用する主な目的は、特定のクラスまたはオブジェクトが特定のプロパティまたはメソッドを保持することを強制する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: インターフェース構文[​](#インターフェース構文 "インターフェース構文 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScriptの[インターフェース](/reference/object-oriented/interface)はオブジェクトの形状を定義することが可能。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: インターフェースはプロパティやメソッドのシグネチャを記述できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: インターフェースのreadonly修飾子[​](#インターフェースのreadonly修飾子 "インターフェースのreadonly修飾子 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: インターフェース内でreadonly修飾子を使用して、プロパティを読み取り専用に設定できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: これにより、プロパティの値が一旦設定されると後から変更できなくなる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 例外処理[​](#例外処理 "例外処理 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptでは[例外処理](/reference/statements/exception)のためにtry / catch / finally
    ブロックを使用できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 例外が発生した場合（つまり、エラーオブジェクトをスローした場合）catchブロックが実行される。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: try-catch-finally構文[​](#try-catch-finally構文 "try-catch-finally構文 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: tryブロック内のコードは、エラーを検出し、catchブロックはエラーをハンドリングする。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: finallyブロックはエラーの有無に関係なく実行される。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 例外クラス[​](#例外クラス "例外クラス への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScriptでは、カスタムエラークラスを作成することも可能。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Errorクラスを継承したカスタムクラスで、具体的なエラータイプを作成することができる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 非同期処理[​](#非同期処理 "非同期処理 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptでは、[非同期プログラミング](/reference/asynchronous)をサポートしていて、コード内で時間を要する処理を効率的に扱うことができる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Promise[​](#promise "Promise への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Promise](/reference/asynchronous/promise)は非同期操作の最終的な完了（または失敗）とその結果の値を表す。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: async/await 構文[​](#asyncawait-構文 "async/await 構文 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 非同期処理をより直感的に書くことができる[async構文](/reference/asynchronous/async)と[await構文](/reference/asynchronous/await)を導入している。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: async/await 構文を使うと、非同期コードをあたかも同期コードであるかのように書ける。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: ジェネリクス[​](#ジェネリクス "ジェネリクス への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptの[ジェネリクス](/reference/generics)を使用すると、型の再利用性が向上し、型の一貫性を保つことができる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ジェネリクスを使用すると、[型変数](/reference/generics/type-variables)を導入でき、これにより機能の一部を一般化できる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'typescript`// Tが型変数function <data-lsp lsp="function identity<T>(arg: T): T">identity</data-lsp><<data-lsp
    lsp="(type parameter) T in identity<T>(arg: T): T">T</data-lsp>>(<data-lsp lsp="(parameter)
    arg: T">arg</data-lsp>: <data-lsp lsp="(type parameter) T in identity<T>(arg:
    T): T">T</data-lsp>): <data-lsp lsp="(type parameter) T in identity<T>(arg: T):
    T">T</data-lsp> {  return <data-lsp lsp="(parameter) arg: T">arg</data-lsp>;}//
    型変数Tにstringを割り当てるconst  <data-lsp lsp="const output1: string" style="border-bottom:solid
    2px lightgrey">output1</data-lsp>  = <data-lsp lsp="function identity<string>(arg:
    string): string">identity</data-lsp><string>("myString");` `const output1: string//
    型変数Tにnumberを割り当てるconst  <data-lsp lsp="const output2: number" style="border-bottom:solid
    2px lightgrey">output2</data-lsp>  = <data-lsp lsp="function identity<number>(arg:
    number): number">identity</data-lsp><number>(100);` `const output2: number`'
  prefs: []
  type: TYPE_NORMAL
- en: モジュール[​](#モジュール "モジュール への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptのモジュールシステムは、他のモジュールと共有するコードと、モジュール内部限定のコードとを分けることを可能にする([モジュール](/reference/modules))。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: importとexport[​](#importとexport "importとexport への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: モジュール内で定義した関数や変数を外部に公開するには、exportを使用する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: モジュールが公開した関数や変数を利用するには、importを使用する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: default export[​](#default-export "default export への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: defaultキーワードを使用すると、モジュールがデフォルトで1つの値のみをエクスポートすることを意味する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: default exportは、importする際に別名を指定することが可能である。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 再export[​](#再export "再export への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: モジュールは、別のモジュールからエクスポートされたものを再エクスポートすることができる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: type importとtype export[​](#type-importとtype-export "type importとtype export
    への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 型だけをエクスポート・インポートすることもできる。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 型レベルプログラミング[​](#型レベルプログラミング "型レベルプログラミング への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptには、typeof演算子やkeyof演算子、ユーティリティータイプなど、型レベルでプログラミングをするためのさまざまな機能が搭載されている。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: typeof型演算子[​](#typeof型演算子 "typeof型演算子 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[typeof演算子](/reference/type-reuse/typeof-type-operator)は、変数名から型を逆算できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'typescript`const  <data-lsp lsp="const object: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'version: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">object</data-lsp>  = { <data-lsp lsp="(property) name: string">name</data-lsp>:  "TypeScript",
    <data-lsp lsp="(property) version: number">version</data-lsp>:  3.9,};type <data-lsp
    lsp="type ObjectType = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'version: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">ObjectType</data-lsp> =  typeof
    <data-lsp lsp="const object: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'version: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">object</data-lsp>;` `type ObjectType = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'version: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`'
  prefs: []
  type: TYPE_NORMAL
- en: keyof型演算子[​](#keyof型演算子 "keyof型演算子 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[keyof演算子](/reference/type-reuse/keyof-type-operator)を使うと、object型のすべてのキーを文字列リテラルのユニオン型として取得できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: typescript`type <data-lsp lsp="type Point = {
  prefs: []
  type: TYPE_NORMAL
- en: 'x: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'y: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Point</data-lsp> = { <data-lsp lsp="(property) x: number">x</data-lsp>:  number;
    <data-lsp lsp="(property) y: number">y</data-lsp>:  number;};type <data-lsp lsp="type
    Key = keyof Point" style="border-bottom:solid 2px lightgrey">Key</data-lsp> =  keyof
    <data-lsp lsp="type Point = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'x: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'y: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Point</data-lsp>;` `type Key = keyof Pointconst  <data-lsp lsp="const key1:
    keyof Point">key1</data-lsp>: <data-lsp lsp="type Key = keyof Point">Key</data-lsp>
    =  "x"; // 代入OKconst  <data-lsp lsp="const key2: keyof Point">key2</data-lsp>:
    <data-lsp lsp="type Key = keyof Point">Key</data-lsp> =  "y"; // 代入OKconst  <data-err><data-lsp
    lsp="const key3: keyof Point">key3</data-lsp></data-err>: <data-lsp lsp="type
    Key = keyof Point">Key</data-lsp> =  "z"; // 代入不可Type ''"z"'' is not assignable
    to type ''keyof Point''.2322Type ''"z"'' is not assignable to type ''keyof Point''.`'
  prefs: []
  type: TYPE_NORMAL
- en: ユーティリティ型[​](#ユーティリティ型 "ユーティリティ型 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScriptは、既存の型から新しい型を作成するためのさまざまな一般的な型操作を提供している。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Required[​](#required "Required への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Required`](/reference/type-reuse/utility-types/required)は、オプションプロパティーを必須プロパティーにするユーティリティ型。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: typescript`type <data-lsp lsp="type Person = {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age?: number | undefined;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age?: number | undefined">age</data-lsp>?:  number;};type
    <data-lsp lsp="type RequiredPerson = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">RequiredPerson</data-lsp> = <data-lsp
    lsp="type Required<T> = { [P in keyof T]-?: T[P]; }">Required</data-lsp><<data-lsp
    lsp="type Person = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age?: number | undefined;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp>>;` `type RequiredPerson = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}// ageがオプションでなくなっている点に注目`'
  prefs: []
  type: TYPE_NORMAL
- en: Partial[​](#partial "Partial への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Partial`](/reference/type-reuse/utility-types/partial)は、型のすべてのプロパティをオプションにするユーティリティ型。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: typescript`type <data-lsp lsp="type Person = {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number;};type <data-lsp
    lsp="type OptionalPerson = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name?: string | undefined;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age?: number | undefined;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">OptionalPerson</data-lsp> = <data-lsp
    lsp="type Partial<T> = { [P in keyof T]?: T[P] | undefined; }">Partial</data-lsp><<data-lsp
    lsp="type Person = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp>>;` `type OptionalPerson = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name?: string | undefined;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age?: number | undefined;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`'
  prefs: []
  type: TYPE_NORMAL
- en: Readonly[​](#readonly "Readonly への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Readonly`](/reference/type-reuse/utility-types/readonly)は、型のすべてのプロパティをreadonlyにするユーティリティ型。それらのプロパティは再代入できない。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: typescript`type <data-lsp lsp="type Person = {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number;};type <data-lsp
    lsp="type ReadonlyPerson = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">ReadonlyPerson</data-lsp> = <data-lsp
    lsp="type Readonly<T> = { readonly [P in keyof T]: T[P]; }">Readonly</data-lsp><<data-lsp
    lsp="type Person = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp>>;` `type ReadonlyPerson = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`'
  prefs: []
  type: TYPE_NORMAL
- en: Record[​](#record "Record への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Record`](/reference/type-reuse/utility-types/record)は、オブジェクトのすべてのプロパティ値を特定の型に設定するユーティリティ型。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: typescript`type <data-lsp lsp="type ThreeLetterRecord = {
  prefs: []
  type: TYPE_NORMAL
- en: 'one: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'two: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'three: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">ThreeLetterRecord</data-lsp> =
    <data-lsp lsp="type Record<K extends string | number | symbol, T> = { [P in K]:
    T; }">Record</data-lsp><"one"  |  "two"  |  "three",  string>;` `type ThreeLetterRecord
    = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'one: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'two: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'three: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`'
  prefs: []
  type: TYPE_NORMAL
- en: Pick[​](#pick "Pick への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Pick`](/reference/type-reuse/utility-types/pick)は、オブジェクトから特定のプロパティだけを拾い出すユーティリティ型。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: typescript`type <data-lsp lsp="type Person = {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'address: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number; <data-lsp lsp="(property)
    address: string">address</data-lsp>:  string;};type <data-lsp lsp="type PersonNameAndAge
    = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">PersonNameAndAge</data-lsp> =
    <data-lsp lsp="type Pick<T, K extends keyof T> = { [P in K]: T[P]; }">Pick</data-lsp><<data-lsp
    lsp="type Person = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'address: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp>,  "name"  |  "age">;` `type PersonNameAndAge = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`'
  prefs: []
  type: TYPE_NORMAL
- en: Omit[​](#omit "Omit への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Omit`](/reference/type-reuse/utility-types/omit)は、オブジェクトから特定のプロパティを省いた型を作るユーティリティ型。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: typescript`type <data-lsp lsp="type Person = {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'address: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number; <data-lsp lsp="(property)
    address: string">address</data-lsp>:  string;};type <data-lsp lsp="type PersonWithoutAddress
    = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">PersonWithoutAddress</data-lsp>
    = <data-lsp lsp="type Omit<T, K extends string | number | symbol> = { [P in Exclude<keyof
    T, K>]: T[P]; }">Omit</data-lsp><<data-lsp lsp="type Person = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'address: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp>,  "address">;` `type PersonWithoutAddress = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`'
  prefs: []
  type: TYPE_NORMAL
- en: Exclude[​](#exclude "Exclude への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Exclude`](/reference/type-reuse/utility-types/exclude)は、ユニオン型から特定の型を除外するユーティリティ型。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'typescript`type <data-lsp lsp="type T1 = string | number | boolean">T1</data-lsp>
    =  number  |  string  |  boolean;type <data-lsp lsp="type T2 = string | number"
    style="border-bottom:solid 2px lightgrey">T2</data-lsp> = <data-lsp lsp="type
    Exclude<T, U> = T extends U ? never : T">Exclude</data-lsp><<data-lsp lsp="type
    T1 = string | number | boolean">T1</data-lsp>,  boolean>;` `type T2 = string |
    number`'
  prefs: []
  type: TYPE_NORMAL
- en: Extract[​](#extract "Extract への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Extract`](/reference/type-reuse/utility-types/extract)は、ふたつのユニオン型の共通の部分を抽出するユーティリティ型。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'typescript`type <data-lsp lsp="type T1 = string | number | boolean">T1</data-lsp>
    =  number  |  string  |  boolean;type <data-lsp lsp="type T2 = string | boolean">T2</data-lsp>
    =  string  |  boolean;type <data-lsp lsp="type T3 = string | boolean" style="border-bottom:solid
    2px lightgrey">T3</data-lsp> = <data-lsp lsp="type Extract<T, U> = T extends U
    ? T : never">Extract</data-lsp><<data-lsp lsp="type T1 = string | number | boolean">T1</data-lsp>,
    <data-lsp lsp="type T2 = string | boolean">T2</data-lsp>>;` `type T3 = string
    | boolean`'
  prefs: []
  type: TYPE_NORMAL
- en: NonNullable[​](#nonnullable "NonNullable への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`NonNullable`は、nullまたはundefinedを含む型からいずれも除外するユーティリティ型。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: typescript`type <data-lsp lsp="type T1 = string | null | undefined">T1</data-lsp>
    =  string  |  null  |  undefined;type <data-lsp lsp="type T2 = string" style="border-bottom:solid
    2px lightgrey">T2</data-lsp> = <data-lsp lsp="type NonNullable<T> = T &amp; {}">NonNullable</data-lsp><<data-lsp
    lsp="type T1 = string | null | undefined">T1</data-lsp>>;` `type T2 = string`
  prefs: []
  type: TYPE_NORMAL
- en: Mapped types[​](#mapped-types "Mapped types への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Mapped types](/reference/type-reuse/mapped-types)を使うと、既存の型から新しい型を生成できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapped typesは、オブジェクトの各プロパティを”マップ”し、新しいオブジェクトを生成する。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: typescript`type <data-lsp lsp="type Person = {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number;};type <data-lsp
    lsp="type ReadOnlyPerson = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">ReadOnlyPerson</data-lsp> = {
    readonly [<data-lsp lsp="(type parameter) K">K</data-lsp> in  keyof <data-lsp
    lsp="type Person = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp>]: <data-lsp lsp="type Person = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp>[<data-lsp lsp="(type parameter) K">K</data-lsp>] };` `type
    ReadOnlyPerson = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`'
  prefs: []
  type: TYPE_NORMAL
- en: インデックスアクセス型[​](#インデックスアクセス型 "インデックスアクセス型 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[インデックスアクセス型](/reference/type-reuse/indexed-access-types)を使うと、型のプロパティの型を取得できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: typescript`type <data-lsp lsp="type Person = {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp> = { <data-lsp lsp="(property) name: string">name</data-lsp>:  string;
    <data-lsp lsp="(property) age: number">age</data-lsp>:  number;};type <data-lsp
    lsp="type Name = string" style="border-bottom:solid 2px lightgrey">Name</data-lsp>
    = <data-lsp lsp="type Person = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">Person</data-lsp>["name"];` `type Name = string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
