- en: Operators and Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Operators and Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is an `ajax` operator on the Rx object.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ajax() operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: index.html
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: app.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A little GOTCHA from this is how we call the `ajax()` operator, we obviously
    specify a bunch of stuff other thant the `url` property. The reason for this is
    that the `ajax` operator does the following :'
  prefs: []
  type: TYPE_NORMAL
- en: default factory of XHR in ajaxObservable sets withCredentials to true by default
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So we give at a custom factory and it works. I understand this is an issue that
    is currently looked upon
  prefs: []
  type: TYPE_NORMAL
- en: Using fetch API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So a couple of things here happens worth mentioning
  prefs: []
  type: TYPE_NORMAL
- en: fetch api is promised base, however using `.from()` Rxjs allows us to insert
    promise as a parameter and converts it to an Observable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BUT the result coming back is a response object that we need to convert to Json.
    Calling `json()` will do that for you but that operation returns a Promise. So
    we need to use another `from()` operator. But creating an Observable inside an
    observable creates a list of observables and we can't have that, we want Json.
    So we use an operator called `flatMap()` to fix that. Read more on `flatMap()`
    [here](operators-observable-in-an-observable.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And finally we get the Json we expect, no issues with CORS but a little more
    to write.
  prefs: []
  type: TYPE_NORMAL
