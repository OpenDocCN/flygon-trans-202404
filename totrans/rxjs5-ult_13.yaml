- en: Operators and Ajax
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符和Ajax
- en: Operators and Ajax
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符和Ajax
- en: There is an `ajax` operator on the Rx object.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Rx对象上有一个`ajax`运算符。
- en: Using the ajax() operator
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`ajax()`运算符
- en: index.html
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: index.html
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: app.js
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: app.js
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A little GOTCHA from this is how we call the `ajax()` operator, we obviously
    specify a bunch of stuff other thant the `url` property. The reason for this is
    that the `ajax` operator does the following :'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里引发的一个小注意事项是我们如何调用`ajax()`运算符，我们显然指定了除了`url`属性之外的一堆东西。之所以这样做是因为`ajax`运算符执行以下操作：
- en: default factory of XHR in ajaxObservable sets withCredentials to true by default
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ajaxObservable中的XHR的默认工厂默认将withCredentials设置为true
- en: So we give at a custom factory and it works. I understand this is an issue that
    is currently looked upon
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们在自定义工厂中提供了一个解决方案，并且它有效。我明白这是一个当前正在关注的问题。
- en: Using fetch API
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用fetch API
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So a couple of things here happens worth mentioning
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了几件值得一提的事情
- en: fetch api is promised base, however using `.from()` Rxjs allows us to insert
    promise as a parameter and converts it to an Observable.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fetch api是基于promise的，但是使用`.from()` Rxjs允许我们将promise作为参数插入并将其转换为Observable。
- en: BUT the result coming back is a response object that we need to convert to Json.
    Calling `json()` will do that for you but that operation returns a Promise. So
    we need to use another `from()` operator. But creating an Observable inside an
    observable creates a list of observables and we can't have that, we want Json.
    So we use an operator called `flatMap()` to fix that. Read more on `flatMap()`
    [here](operators-observable-in-an-observable.html)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但是返回的结果是一个响应对象，我们需要将其转换为Json。调用`json()`会为您完成此操作，但该操作会返回一个Promise。因此，我们需要使用另一个`from()`运算符。但在observable内部创建一个Observable会创建一个observable列表，而我们不希望如此，我们想要Json。所以我们使用一个称为`flatMap()`的运算符来解决这个问题。在[这里](operators-observable-in-an-observable.html)阅读更多关于`flatMap()`的内容。
- en: And finally we get the Json we expect, no issues with CORS but a little more
    to write.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们获得了我们期望的Json，没有CORS的问题，但是需要写更多的代码。
