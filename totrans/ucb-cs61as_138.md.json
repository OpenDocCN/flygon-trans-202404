["```\n(define (cons x y)\n  (lambda (m) (m x y)))\n(define (car z)\n  (z (lambda (p q) p)))\n(define (cdr z)\n  (z (lambda (p q) q))) \n```", "```\n(define (list-ref items n)\n  (if (= n 0)\n      (car items)\n      (list-ref (cdr items) (- n 1))))\n\n(define (map proc items)\n  (if (null? items)\n      '()\n      (cons (proc (car items))\n            (map proc (cdr items)))))\n(define (scale-list items factor)\n  (map (lambda (x) (* x factor))\n       items))\n(define (add-lists list1 list2)\n  (cond ((null? list1) list2)\n        ((null? list2) list1)\n        (else (cons (+ (car list1) (car list2))\n                    (add-lists (cdr list1) (cdr list2))))))\n(define ones (cons 1 ones))\n(define integers (cons 1 (add-lists ones integers)))\n;;; L-Eval input:\n(list-ref integers 17)\n;;; L-Eval value:\n18 \n```"]