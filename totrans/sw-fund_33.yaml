- en: LibTacticsA Collection of Handy General-Purpose Tactics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: (* Chapter maintained by Arthur Chargueraud *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: (* DROP *)
  prefs: []
  type: TYPE_NORMAL
- en: Set Implicit Arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Require Import List.
  prefs: []
  type: TYPE_NORMAL
- en: '(* Very important to remove hint trans_eq_bool from LibBool,    otherwise eauto slows down dramatically:
      Lemma test : forall b, b = false.   time eauto 7. (* takes over 4 seconds  to fail! *) *)'
  prefs: []
  type: TYPE_NORMAL
- en: Remove Hints Bool.trans_eq_bool.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Ltac idcont tt :=
  prefs: []
  type: TYPE_NORMAL
- en: idtac.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Inductive Boxer : Type :='
  prefs: []
  type: TYPE_NORMAL
- en: '| boxer : ∀(A:Type), A → Boxer.'
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Inductive ltac_No_arg : Set :='
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_no_arg : ltac_No_arg.'
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Inductive ltac_Wild : Set :='
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_wild : ltac_Wild.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notation "''__''" := ltac_wild : ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Inductive ltac_Wilds : Set :='
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_wilds : ltac_Wilds.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notation "''___''" := ltac_wilds : ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Open Scope ltac_scope.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Inductive ltac_Mark : Type :='
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_mark : ltac_Mark.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Ltac gen_until_mark :=
  prefs: []
  type: TYPE_NORMAL
- en: 'match goal with H: ?T ⊢ _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_Mark ⇒ clear H'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ generalize H; clear H; gen_until_mark'
  prefs: []
  type: TYPE_NORMAL
- en: end end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Ltac intro_until_mark :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (ltac_Mark → _) ⇒ intros _'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ intro; intro_until_mark'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Notation "'>>'" :=
  prefs: []
  type: TYPE_NORMAL
- en: (@nil Boxer)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2 v3" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2 v3 v4" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[4] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2 v3 v4 v5" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[4] at level 0, v[5] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2 v3 v4 v5 v6" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  prefs: []
  type: TYPE_NORMAL
- en: ::(boxer v[6])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  prefs: []
  type: TYPE_NORMAL
- en: ::(boxer v[6])::(boxer v[7])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  prefs: []
  type: TYPE_NORMAL
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[8] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  prefs: []
  type: TYPE_NORMAL
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::(boxer v[9])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[8] at level 0, v[9] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  prefs: []
  type: TYPE_NORMAL
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::(boxer v[9])::(boxer v[10])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[8] at level 0, v[9] at level 0, v[10] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  prefs: []
  type: TYPE_NORMAL
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::(boxer v[9])::(boxer v[10])
  prefs: []
  type: TYPE_NORMAL
- en: ::(boxer v[11])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[8] at level 0, v[9] at level 0, v[10] at level 0, v[11] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  prefs: []
  type: TYPE_NORMAL
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::(boxer v[9])::(boxer v[10])
  prefs: []
  type: TYPE_NORMAL
- en: ::(boxer v[11])::(boxer v[12])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[8] at level 0, v[9] at level 0, v[10] at level 0, v[11] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[12] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13" :=
  prefs: []
  type: TYPE_NORMAL
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  prefs: []
  type: TYPE_NORMAL
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::(boxer v[9])::(boxer v[10])
  prefs: []
  type: TYPE_NORMAL
- en: ::(boxer v[11])::(boxer v[12])::(boxer v[13])::nil)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[8] at level 0, v[9] at level 0, v[10] at level 0, v[11] at level 0,
  prefs: []
  type: TYPE_NORMAL
- en: v[12] at level 0, v[13] at level 0)
  prefs: []
  type: TYPE_NORMAL
- en: ': ltac_scope.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Ltac list_boxer_of E :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with
  prefs: []
  type: TYPE_NORMAL
- en: '| List.list Boxer ⇒ constr:(E)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ constr:((boxer E)::nil)'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Inductive Ltac_database_token : Prop := ltac_database_token.'
  prefs: []
  type: TYPE_NORMAL
- en: Definition ltac_database (D:Boxer) (T:Boxer) (A:Boxer) := Ltac_database_token.
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'Register' D T" := (ltac_database (boxer D) (boxer T) _)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 69, D at level 0, T at level 0).
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma ltac_database_provide : ∀(A:Boxer) (D:Boxer) (T:Boxer),'
  prefs: []
  type: TYPE_NORMAL
- en: ltac_database D T A.
  prefs: []
  type: TYPE_NORMAL
- en: Proof using. split. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac Provide T := apply (@ltac_database_provide (boxer T)).
  prefs: []
  type: TYPE_NORMAL
- en: Ltac ltac_database_get D T :=
  prefs: []
  type: TYPE_NORMAL
- en: let A := fresh "TEMP" in evar (A:Boxer);
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh "TEMP" in
  prefs: []
  type: TYPE_NORMAL
- en: 'assert (H : ltac_database (boxer D) (boxer T) A);'
  prefs: []
  type: TYPE_NORMAL
- en: '[ subst A; auto'
  prefs: []
  type: TYPE_NORMAL
- en: '| subst A; match type of H with ltac_database _ _ (boxer ?L) ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: generalize L end; clear H ].
  prefs: []
  type: TYPE_NORMAL
- en: '(* Note for a possible alternative implementation of the ltac_database_token:
       Inductive Ltac_database : Type :=      | ltac_database : forall A, A -> Ltac_database.
       Implicit Arguments ltac_database A. *)'
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Definition rm (A:Type) (X:A) := X.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Ltac rm_term E :=
  prefs: []
  type: TYPE_NORMAL
- en: let T := type of E in
  prefs: []
  type: TYPE_NORMAL
- en: 'match goal with H: T ⊢ _ ⇒ try clear H end.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Ltac rm_inside E :=
  prefs: []
  type: TYPE_NORMAL
- en: let go E := rm_inside E in
  prefs: []
  type: TYPE_NORMAL
- en: match E with
  prefs: []
  type: TYPE_NORMAL
- en: '| rm ?X ⇒ rm_term X'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: go X[1]; go X[2]
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: go X[1]; go X[2]; go X[3]
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: go X[1]; go X[2]; go X[3]; go X[4]
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X[8] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]; go X[8]
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X[8] ?X[9] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]; go X[8]; go X[9]
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X[8] ?X[9] ?X[10] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]; go X[8]; go X[9];
    go X[10]
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Ltac fast_rm_inside E :=
  prefs: []
  type: TYPE_NORMAL
- en: rm_inside E.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '(* COQ-8.4:    Require Coq.Numbers.BinNums Coq.ZArith.BinInt. *)'
  prefs: []
  type: TYPE_NORMAL
- en: Require BinPos Coq.ZArith.BinInt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Definition ltac_nat_from_int (x:BinInt.Z) : nat :='
  prefs: []
  type: TYPE_NORMAL
- en: match x with
  prefs: []
  type: TYPE_NORMAL
- en: '| BinInt.Z0 ⇒ 0%nat'
  prefs: []
  type: TYPE_NORMAL
- en: '| BinInt.Zpos p ⇒ BinPos.nat_of_P p'
  prefs: []
  type: TYPE_NORMAL
- en: '| BinInt.Zneg p ⇒ 0%nat'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac nat_from_number N :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of N with
  prefs: []
  type: TYPE_NORMAL
- en: '| nat ⇒ constr:(N)'
  prefs: []
  type: TYPE_NORMAL
- en: '| BinInt.Z ⇒ let N'' := constr:(ltac_nat_from_int N) in eval compute in N'''
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "ltac_pattern" constr(E) "at" constr(K) :=
  prefs: []
  type: TYPE_NORMAL
- en: match nat_from_number K with
  prefs: []
  type: TYPE_NORMAL
- en: '| 1 ⇒ pattern E at 1'
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 ⇒ pattern E at 2'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 ⇒ pattern E at 3'
  prefs: []
  type: TYPE_NORMAL
- en: '| 4 ⇒ pattern E at 4'
  prefs: []
  type: TYPE_NORMAL
- en: '| 5 ⇒ pattern E at 5'
  prefs: []
  type: TYPE_NORMAL
- en: '| 6 ⇒ pattern E at 6'
  prefs: []
  type: TYPE_NORMAL
- en: '| 7 ⇒ pattern E at 7'
  prefs: []
  type: TYPE_NORMAL
- en: '| 8 ⇒ pattern E at 8'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "ltac_pattern" constr(E) "at" constr(K) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: match nat_from_number K with
  prefs: []
  type: TYPE_NORMAL
- en: '| 1 ⇒ pattern E at 1 in H'
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 ⇒ pattern E at 2 in H'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 ⇒ pattern E at 3 in H'
  prefs: []
  type: TYPE_NORMAL
- en: '| 4 ⇒ pattern E at 4 in H'
  prefs: []
  type: TYPE_NORMAL
- en: '| 5 ⇒ pattern E at 5 in H'
  prefs: []
  type: TYPE_NORMAL
- en: '| 6 ⇒ pattern E at 6 in H'
  prefs: []
  type: TYPE_NORMAL
- en: '| 7 ⇒ pattern E at 7 in H'
  prefs: []
  type: TYPE_NORMAL
- en: '| 8 ⇒ pattern E at 8 in H'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "show" tactic(tac) :=
  prefs: []
  type: TYPE_NORMAL
- en: let R := tac in pose R.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Lemma dup_lemma : ∀P, P → P → P.'
  prefs: []
  type: TYPE_NORMAL
- en: Proof using. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac dup_tactic N :=
  prefs: []
  type: TYPE_NORMAL
- en: match nat_from_number N with
  prefs: []
  type: TYPE_NORMAL
- en: '| 0 ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| S 0 ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| S ?N'' ⇒ apply dup_lemma; [ | dup_tactic N'' ]'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "dup" constr(N) :=
  prefs: []
  type: TYPE_NORMAL
- en: dup_tactic N.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "dup" :=
  prefs: []
  type: TYPE_NORMAL
- en: dup 2.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '(* COQ8.4: Ltac check_noevar M :=   match M with M => idtac end. Ltac check_noevar_hyp H := (* todo: imlement using check_noevar *)
      let T := type of H in   match type of H with T => idtac end. Ltac check_noevar_goal := (* todo: imlement using check_noevar *)
      match goal with |- ?G => match G with G => idtac end end. *)'
  prefs: []
  type: TYPE_NORMAL
- en: Ltac check_noevar M :=
  prefs: []
  type: TYPE_NORMAL
- en: first [ has_evar M; fail 2 | idtac ].
  prefs: []
  type: TYPE_NORMAL
- en: Ltac check_noevar_hyp H := (* todo: imlement using check_noevar *)
  prefs: []
  type: TYPE_NORMAL
- en: let T := type of H in check_noevar T.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac check_noevar_goal := (* todo: imlement using check_noevar *)
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?G ⇒ check_noevar G end.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Ltac with_evar_base T cont :=
  prefs: []
  type: TYPE_NORMAL
- en: let x := fresh in evar (x:T); cont x; subst x.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "with_evar" constr(T) tactic(cont) :=
  prefs: []
  type: TYPE_NORMAL
- en: with_evar_base T cont.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Ltac get_last_hyp tt :=
  prefs: []
  type: TYPE_NORMAL
- en: 'match goal with H: _ ⊢ _ ⇒ constr:(H) end.'
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Definition ltac_tag_subst (A:Type) (x:A) := x.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Definition ltac_to_generalize (A:Type) (x:A) := x.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac gen_to_generalize :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with
  prefs: []
  type: TYPE_NORMAL
- en: 'H: ltac_to_generalize _ ⊢ _ ⇒ generalize H; clear H end.'
  prefs: []
  type: TYPE_NORMAL
- en: Ltac mark_to_generalize H :=
  prefs: []
  type: TYPE_NORMAL
- en: let T := type of H in
  prefs: []
  type: TYPE_NORMAL
- en: change T with (ltac_to_generalize T) in H.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Ltac get_head E :=
  prefs: []
  type: TYPE_NORMAL
- en: match E with
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ _ _ _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ _ _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ _ _ _ _ _ _ _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ _ _ _ _ _ _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ _ _ _ _ _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ _ _ _ _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ _ _ _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ _ _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P _ ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P ⇒ constr:(P)'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Ltac get_fun_arg E :=
  prefs: []
  type: TYPE_NORMAL
- en: match E with
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X ⇒ constr:((X[1] X[2] X[3] X[4]
    X[5] X[6],X))'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X ⇒ constr:((X[1] X[2] X[3] X[4] X[5],X))'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X ⇒ constr:((X[1] X[2] X[3] X[4],X))'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X ⇒ constr:((X[1] X[2] X[3],X))'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X[3] ?X ⇒ constr:((X[1] X[2],X))'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X[2] ?X ⇒ constr:((X[1],X))'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?X[1] ?X ⇒ constr:((X[1],X))'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "ltac_action_at" constr(K) "of" constr(E) "do" tactic(Tac) :=
  prefs: []
  type: TYPE_NORMAL
- en: let p := fresh in ltac_pattern E at K;
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?P _ ⇒ set (p:=P) end;
  prefs: []
  type: TYPE_NORMAL
- en: Tac; unfold p; clear p.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "ltac_action_at" constr(K) "of" constr(E) "in" hyp(H) "do" tactic(Tac)
    :=
  prefs: []
  type: TYPE_NORMAL
- en: let p := fresh in ltac_pattern E at K in H;
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with ?P _ ⇒ set (p:=P) in H end;
  prefs: []
  type: TYPE_NORMAL
- en: Tac; unfold p in H; clear p.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "protects" constr(E) "do" tactic(Tac) :=
  prefs: []
  type: TYPE_NORMAL
- en: (* let x := fresh "TEMP" in sets_eq x: E; T; subst x. *)
  prefs: []
  type: TYPE_NORMAL
- en: let x := fresh "TEMP" in let H := fresh "TEMP" in
  prefs: []
  type: TYPE_NORMAL
- en: 'set (X := E) in *; assert (H : X = E) by reflexivity;'
  prefs: []
  type: TYPE_NORMAL
- en: clearbody X; Tac; subst x.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "protects" constr(E) "do" tactic(Tac) "/" :=
  prefs: []
  type: TYPE_NORMAL
- en: protects E do Tac.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Definition eq' := @eq.
  prefs: []
  type: TYPE_NORMAL
- en: Hint Unfold eq'.
  prefs: []
  type: TYPE_NORMAL
- en: Notation "x '='' y" := (@eq' _ x y)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 70, y at next level).
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Ltac jauto_set_hyps :=
  prefs: []
  type: TYPE_NORMAL
- en: 'repeat match goal with H: ?T ⊢ _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ⇒ destruct H'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃a, _ ⇒ destruct H'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ generalize H; clear H'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac jauto_set_goal :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ∃a, _ ⇒ esplit'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ _ ∧ _ ⇒ split'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac jauto_set :=
  prefs: []
  type: TYPE_NORMAL
- en: intros; jauto_set_hyps;
  prefs: []
  type: TYPE_NORMAL
- en: intros; jauto_set_goal;
  prefs: []
  type: TYPE_NORMAL
- en: unfold not in *.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Ltac old_refine f :=
  prefs: []
  type: TYPE_NORMAL
- en: refine f. (* ; shelve_unifiable. *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "rapply" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: first  (* todo: les @ sont inutiles *)
  prefs: []
  type: TYPE_NORMAL
- en: '[ eexact (@t)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _ _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)'
  prefs: []
  type: TYPE_NORMAL
- en: '].'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "rapply_0" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_1" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_2" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_3" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_4" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_5" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_6" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _ _).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_7" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _ _ _).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_8" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _ _ _ _).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_9" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _ _ _ _ _).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_10" constr(t) :=
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _ _ _ _ _ _).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Ltac lets_base I E := generalize E; intros I.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "applys_to" hyp(H) constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: let H' := fresh in rename H into H';
  prefs: []
  type: TYPE_NORMAL
- en: (first [ lets_base H (E H')
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ H'')'
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ H'')'
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ H'')'
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ H'')'
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ _ H'')'
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ _ _ H'')'
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ _ _ _ H'')'
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ _ _ _ _ H'')'
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ _ _ _ _ _ H'') ]'
  prefs: []
  type: TYPE_NORMAL
- en: ); clear H'.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "applys_to" hyp(H[1]) "," hyp(H[2]) constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_to H[1] E; applys_to H[2] E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_to" hyp(H[1]) "," hyp(H[2]) "," hyp(H[3]) constr(E)
    :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_to H[1] E; applys_to H[2] E; applys_to H[3] E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_to" hyp(H[1]) "," hyp(H[2]) "," hyp(H[3]) "," hyp(H[4])
    constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_to H[1] E; applys_to H[2] E; applys_to H[3] E; applys_to H[4] E.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "constructors" :=
  prefs: []
  type: TYPE_NORMAL
- en: first [ constructor | econstructor ]; unfold eq'.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "asserts" simple_intropattern(I) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh in assert (H : T);'
  prefs: []
  type: TYPE_NORMAL
- en: '[ | generalize H; clear H; intros I ].'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "asserts" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'asserts [I[1] I[2]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'asserts [I[1] [I[2] I[3]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'asserts [I[1] [I[2] [I[3] I[4]]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) simple_intropattern(I[5]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'asserts [I[1] [I[2] [I[3] [I[4] I[5]]]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) simple_intropattern(I[5])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[6]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'asserts [I[1] [I[2] [I[3] [I[4] [I[5] I[6]]]]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "asserts" ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh in asserts H : T.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "cuts" simple_intropattern(I) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: cut (T); [ intros I | idtac ].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "cuts" ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh in cuts H: T.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "cuts" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts [I[1] I[2]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts [I[1] [I[2] I[3]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts [I[1] [I[2] [I[3] I[4]]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) simple_intropattern(I[5]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts [I[1] [I[2] [I[3] [I[4] I[5]]]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) simple_intropattern(I[5])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[6]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts [I[1] [I[2] [I[3] [I[4] [I[5] I[6]]]]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: (* Underlying implementation *)
  prefs: []
  type: TYPE_NORMAL
- en: Ltac app_assert t P cont :=
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh "TEMP" in
  prefs: []
  type: TYPE_NORMAL
- en: 'assert (H : P); [ | cont(t H); clear H ].'
  prefs: []
  type: TYPE_NORMAL
- en: Ltac app_evar t A cont :=
  prefs: []
  type: TYPE_NORMAL
- en: let x := fresh "TEMP" in
  prefs: []
  type: TYPE_NORMAL
- en: evar (x:A);
  prefs: []
  type: TYPE_NORMAL
- en: let t' := constr:(t x) in
  prefs: []
  type: TYPE_NORMAL
- en: let t'' := (eval unfold x in t') in
  prefs: []
  type: TYPE_NORMAL
- en: subst x; cont t''.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac app_arg t P v cont :=
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh "TEMP" in
  prefs: []
  type: TYPE_NORMAL
- en: 'assert (H : P); [ apply v | cont(t H); try clear H ].'
  prefs: []
  type: TYPE_NORMAL
- en: Ltac build_app_alls t final :=
  prefs: []
  type: TYPE_NORMAL
- en: let rec go t :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of t with
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P → ?Q ⇒ app_assert t P go'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:?A, _ ⇒ app_evar t A go'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ final t'
  prefs: []
  type: TYPE_NORMAL
- en: end in
  prefs: []
  type: TYPE_NORMAL
- en: go t.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac boxerlist_next_type vs :=
  prefs: []
  type: TYPE_NORMAL
- en: match vs with
  prefs: []
  type: TYPE_NORMAL
- en: '| nil ⇒ constr:(ltac_wild)'
  prefs: []
  type: TYPE_NORMAL
- en: '| (boxer ltac_wild)::?vs'' ⇒ boxerlist_next_type vs'''
  prefs: []
  type: TYPE_NORMAL
- en: '| (boxer ltac_wilds)::_ ⇒ constr:(ltac_wild)'
  prefs: []
  type: TYPE_NORMAL
- en: '| (@boxer ?T _)::_ ⇒ constr:(T)'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: (* Note: refuse to instantiate a dependent hypothesis with a proposition;     refuse to instantiate an argument of type Type with one that 
        does not have the type Type. *)
  prefs: []
  type: TYPE_NORMAL
- en: Ltac build_app_hnts t vs final :=
  prefs: []
  type: TYPE_NORMAL
- en: let rec go t vs :=
  prefs: []
  type: TYPE_NORMAL
- en: match vs with
  prefs: []
  type: TYPE_NORMAL
- en: '| nil ⇒ first [ final t | fail 1 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| (boxer ltac_wilds)::_ ⇒ first [ build_app_alls t final | fail 1 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| (boxer ?v)::?vs'' ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: let cont t' := go t' vs in
  prefs: []
  type: TYPE_NORMAL
- en: let cont' t' := go t' vs' in
  prefs: []
  type: TYPE_NORMAL
- en: let T := type of t in
  prefs: []
  type: TYPE_NORMAL
- en: let T := eval hnf in T in
  prefs: []
  type: TYPE_NORMAL
- en: match v with
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_wild ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: first [ let U := boxerlist_next_type vs' in
  prefs: []
  type: TYPE_NORMAL
- en: match U with
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_wild ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P → ?Q ⇒ first [ app_assert t P cont'' | fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:?A, _ ⇒ first [ app_evar t A cont'' | fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match T with  (* should test T for unifiability *)
  prefs: []
  type: TYPE_NORMAL
- en: '| U → ?Q ⇒ first [ app_assert t U cont'' | fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:U, _ ⇒ first [ app_evar t U cont'' | fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P → ?Q ⇒ first [ app_assert t P cont | fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:?A, _ ⇒ first [ app_evar t A cont | fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 2 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P → ?Q ⇒ first [ app_arg t P v cont'''
  prefs: []
  type: TYPE_NORMAL
- en: '| app_assert t P cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:Type, _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match type of v with
  prefs: []
  type: TYPE_NORMAL
- en: '| Type ⇒ first [ cont'' (t v)'
  prefs: []
  type: TYPE_NORMAL
- en: '| app_evar t Type cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ first [ app_evar t Type cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:?A, _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: let V := type of v in
  prefs: []
  type: TYPE_NORMAL
- en: match type of V with
  prefs: []
  type: TYPE_NORMAL
- en: '| Prop ⇒  first [ app_evar t A cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ first [ cont'' (t v)'
  prefs: []
  type: TYPE_NORMAL
- en: '| app_evar t A cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end in
  prefs: []
  type: TYPE_NORMAL
- en: go t vs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Ltac app_typeclass t cont :=
  prefs: []
  type: TYPE_NORMAL
- en: let t' := constr:(t _) in
  prefs: []
  type: TYPE_NORMAL
- en: cont t'.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac build_app_alls t final ::=
  prefs: []
  type: TYPE_NORMAL
- en: let rec go t :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of t with
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P → ?Q ⇒ app_assert t P go'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:?A, _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: first [ app_evar t A go
  prefs: []
  type: TYPE_NORMAL
- en: '| app_typeclass t go'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ final t'
  prefs: []
  type: TYPE_NORMAL
- en: end in
  prefs: []
  type: TYPE_NORMAL
- en: go t.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac build_app_hnts t vs final ::=
  prefs: []
  type: TYPE_NORMAL
- en: let rec go t vs :=
  prefs: []
  type: TYPE_NORMAL
- en: match vs with
  prefs: []
  type: TYPE_NORMAL
- en: '| nil ⇒ first [ final t | fail 1 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| (boxer ltac_wilds)::_ ⇒ first [ build_app_alls t final | fail 1 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| (boxer ?v)::?vs'' ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: let cont t' := go t' vs in
  prefs: []
  type: TYPE_NORMAL
- en: let cont' t' := go t' vs' in
  prefs: []
  type: TYPE_NORMAL
- en: let T := type of t in
  prefs: []
  type: TYPE_NORMAL
- en: let T := eval hnf in T in
  prefs: []
  type: TYPE_NORMAL
- en: match v with
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_wild ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: first [ let U := boxerlist_next_type vs' in
  prefs: []
  type: TYPE_NORMAL
- en: match U with
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_wild ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P → ?Q ⇒ first [ app_assert t P cont'' | fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:?A, _ ⇒ first [ app_typeclass t cont'''
  prefs: []
  type: TYPE_NORMAL
- en: '| app_evar t A cont'''
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match T with  (* should test T for unifiability *)
  prefs: []
  type: TYPE_NORMAL
- en: '| U → ?Q ⇒ first [ app_assert t U cont'' | fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:U, _ ⇒ first'
  prefs: []
  type: TYPE_NORMAL
- en: '[ app_typeclass t cont'''
  prefs: []
  type: TYPE_NORMAL
- en: '| app_evar t U cont'''
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P → ?Q ⇒ first [ app_assert t P cont | fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:?A, _ ⇒ first'
  prefs: []
  type: TYPE_NORMAL
- en: '[ app_typeclass t cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| app_evar t A cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 2 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P → ?Q ⇒ first [ app_arg t P v cont'''
  prefs: []
  type: TYPE_NORMAL
- en: '| app_assert t P cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:Type, _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match type of v with
  prefs: []
  type: TYPE_NORMAL
- en: '| Type ⇒ first [ cont'' (t v)'
  prefs: []
  type: TYPE_NORMAL
- en: '| app_evar t Type cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ first [ app_evar t Type cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:?A, _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: let V := type of v in
  prefs: []
  type: TYPE_NORMAL
- en: match type of V with
  prefs: []
  type: TYPE_NORMAL
- en: '| Prop ⇒ first [ app_typeclass t cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| app_evar t A cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ first [ cont'' (t v)'
  prefs: []
  type: TYPE_NORMAL
- en: '| app_typeclass t cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| app_evar t A cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 3 ]'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end in
  prefs: []
  type: TYPE_NORMAL
- en: go t vs.
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: use local function for first ... *)
  prefs: []
  type: TYPE_NORMAL
- en: (*--old version Ltac build_app_hnts t vs final :=   let rec go t vs :=     match vs with
        | nil => first  final t | fail 1 | (boxer ltac_wilds)::_ => first  build_app_alls
    t final | fail 1 | (boxer ?v)::?vs' =>       let cont t' := go t' vs in       let cont' t' := go t' vs' in
          let T := type of t in       let T := eval hnf in T in       match v with
          | ltac_wild =>          first  let U := boxerlist_next_type vs' in match
    U with | ltac_wild ⇒ match T with | ?P → ?Q ⇒ first [ app_assert t P cont' | fail
    3 ] | ∀ _:?A, _ ⇒ first [ app_evar t A cont' | fail 3 ] end | _ ⇒ match T with
     should test T for unifiability *)             | U → ?Q ⇒ first [ app_assert t
    U cont' | fail 3 ]
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀ _:U, _ ⇒ first [ app_evar t U cont'' | fail 3 ]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ?P → ?Q ⇒ first [ app_assert t P cont | fail 3 ]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ∀ _:?A, _ ⇒ first [ app_evar t A cont | fail 3 ]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: end
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: end
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '| fail 2 | _ =>'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P -> ?Q => first  app_arg t P v cont'''
  prefs: []
  type: TYPE_NORMAL
- en: '| app_assert t P cont'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '| fail 3 | forall _:?A, _ => first  cont'' (t v)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '| app_evar t A cont'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '| fail 3 end'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end in
  prefs: []
  type: TYPE_NORMAL
- en: go t vs.
  prefs: []
  type: TYPE_NORMAL
- en: '*)'
  prefs: []
  type: TYPE_NORMAL
- en: Ltac build_app args final :=
  prefs: []
  type: TYPE_NORMAL
- en: first [
  prefs: []
  type: TYPE_NORMAL
- en: match args with (@[boxer](LibTactics.html#boxer) ?T ?t)::?vs ⇒
  prefs: []
  type: TYPE_NORMAL
- en: let t := constr:(t:T) in
  prefs: []
  type: TYPE_NORMAL
- en: build_app_hnts t vs final;
  prefs: []
  type: TYPE_NORMAL
- en: fast_rm_inside args
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 1 "Instantiation fails for:" args].'
  prefs: []
  type: TYPE_NORMAL
- en: Ltac unfold_head_until_product T :=
  prefs: []
  type: TYPE_NORMAL
- en: eval hnf in T.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac args_unfold_head_if_not_product args :=
  prefs: []
  type: TYPE_NORMAL
- en: match args with (@[boxer](LibTactics.html#boxer) ?T ?t)::?vs ⇒
  prefs: []
  type: TYPE_NORMAL
- en: let T' := unfold_head_until_product T in
  prefs: []
  type: TYPE_NORMAL
- en: constr:((@[boxer](LibTactics.html#boxer) T' t)::vs)
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac args_unfold_head_if_not_product_but_params args :=
  prefs: []
  type: TYPE_NORMAL
- en: match args with
  prefs: []
  type: TYPE_NORMAL
- en: '| ([boxer](LibTactics.html#boxer) ?t)::([boxer](LibTactics.html#boxer) ?v)::?vs
    ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: args_unfold_head_if_not_product args
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ constr:(args)'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Ltac lets_build I Ei :=
  prefs: []
  type: TYPE_NORMAL
- en: let args := list_boxer_of Ei in
  prefs: []
  type: TYPE_NORMAL
- en: let args := args_unfold_head_if_not_product_but_params args in
  prefs: []
  type: TYPE_NORMAL
- en: (*    let Ei''' := args_unfold_head_if_not_product Ei'' in*)
  prefs: []
  type: TYPE_NORMAL
- en: build_app args ltac:(fun R ⇒ lets_base I R).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: lets_build I E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh in lets H: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: (>> E[0] A[1]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: (>> E[0] A[1] A[2]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: (>> E[0] A[1] A[2] A[3]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: (>> E[0] A[1] A[2] A[3] A[4]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
  prefs: []
  type: TYPE_NORMAL
- en: (* --todo: deprecated, do not use *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: '":" constr(E) :='
  prefs: []
  type: TYPE_NORMAL
- en: 'lets [I[1] I[2]]: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets [I[1] [I[2] I[3]]]: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets [I[1] [I[2] [I[3] I[4]]]]: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  prefs: []
  type: TYPE_NORMAL
- en: '":" constr(E) :='
  prefs: []
  type: TYPE_NORMAL
- en: 'lets [I[1] [I[2] [I[3] [I[4] I[5]]]]]: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: (>> E[0] A[1]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: (>> E[0] A[1] A[2]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: (>> E[0] A[1] A[2] A[3]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: (>> E[0] A[1] A[2] A[3] A[4]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets [I[1] I[2]]: E[0] A[1].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets [I[1] I[2]]: E[0] A[1] A[2].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets [I[1] I[2]]: E[0] A[1] A[2] A[3].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets [I[1] I[2]]: E[0] A[1] A[2] A[3] A[4].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets [I[1] I[2]]: E[0] A[1] A[2] A[3] A[4] A[5].'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Ltac forwards_build_app_arg Ei :=
  prefs: []
  type: TYPE_NORMAL
- en: let args := list_boxer_of Ei in
  prefs: []
  type: TYPE_NORMAL
- en: let args := (eval simpl in (args ++ ((boxer ___)::nil))) in
  prefs: []
  type: TYPE_NORMAL
- en: let args := args_unfold_head_if_not_product args in
  prefs: []
  type: TYPE_NORMAL
- en: args.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac forwards_then Ei cont :=
  prefs: []
  type: TYPE_NORMAL
- en: let args := forwards_build_app_arg Ei in
  prefs: []
  type: TYPE_NORMAL
- en: let args := args_unfold_head_if_not_product_but_params args in
  prefs: []
  type: TYPE_NORMAL
- en: build_app args cont.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(Ei) :=
  prefs: []
  type: TYPE_NORMAL
- en: let args := forwards_build_app_arg Ei in
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: args.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh in forwards H: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: (>> E[0] A[1]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: (>> E[0] A[1] A[2]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: (>> E[0] A[1] A[2] A[3]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: (>> E[0] A[1] A[2] A[3] A[4]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: deprecated, do not use *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: '":" constr(E) :='
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards [I[1] I[2]]: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards [I[1] [I[2] I[3]]]: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards [I[1] [I[2] [I[3] I[4]]]]: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  prefs: []
  type: TYPE_NORMAL
- en: '":" constr(E) :='
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards [I[1] [I[2] [I[3] [I[4] I[5]]]]]: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: (>> E[0] A[1]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: (>> E[0] A[1] A[2]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: (>> E[0] A[1] A[2] A[3]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: (>> E[0] A[1] A[2] A[3] A[4]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
  prefs: []
  type: TYPE_NORMAL
- en: (* for use by tactics -- todo: factorize better *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards_nounfold" simple_intropattern(I) ":" constr(Ei) :=
  prefs: []
  type: TYPE_NORMAL
- en: let args := list_boxer_of Ei in
  prefs: []
  type: TYPE_NORMAL
- en: let args := (eval simpl in (args ++ ((boxer ___)::nil))) in
  prefs: []
  type: TYPE_NORMAL
- en: build_app args ltac:(fun R ⇒ lets_base I R).
  prefs: []
  type: TYPE_NORMAL
- en: Ltac forwards_nounfold_then Ei cont :=
  prefs: []
  type: TYPE_NORMAL
- en: let args := list_boxer_of Ei in
  prefs: []
  type: TYPE_NORMAL
- en: let args := (eval simpl in (args ++ ((boxer ___)::nil))) in
  prefs: []
  type: TYPE_NORMAL
- en: build_app args cont.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Ltac applys_build Ei :=
  prefs: []
  type: TYPE_NORMAL
- en: let args := list_boxer_of Ei in
  prefs: []
  type: TYPE_NORMAL
- en: let args := args_unfold_head_if_not_product_but_params args in
  prefs: []
  type: TYPE_NORMAL
- en: build_app args ltac:(fun R ⇒
  prefs: []
  type: TYPE_NORMAL
- en: first [ apply R | eapply R | rapply R ]).
  prefs: []
  type: TYPE_NORMAL
- en: Ltac applys_base E :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with
  prefs: []
  type: TYPE_NORMAL
- en: '| list Boxer ⇒ applys_build E'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ first [ rapply E | applys_build E ]'
  prefs: []
  type: TYPE_NORMAL
- en: end; fast_rm_inside E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_base E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" constr(E[0]) constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys (>> E[0] A[1]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" constr(E[0]) constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys (>> E[0] A[1] A[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: applys (>> E[0] A[1] A[2] A[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys (>> E[0] A[1] A[2] A[3] A[4]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys (>> E[0] A[1] A[2] A[3] A[4] A[5]).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Ltac fapplys_build Ei :=
  prefs: []
  type: TYPE_NORMAL
- en: let args := list_boxer_of Ei in
  prefs: []
  type: TYPE_NORMAL
- en: let args := (eval simpl in (args ++ ((boxer ___)::nil))) in
  prefs: []
  type: TYPE_NORMAL
- en: let args := args_unfold_head_if_not_product_but_params args in
  prefs: []
  type: TYPE_NORMAL
- en: build_app args ltac:(fun R ⇒ apply R).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fapplys" constr(E[0]) :=  (* todo: use the tactic for that*)
  prefs: []
  type: TYPE_NORMAL
- en: match type of E[0] with
  prefs: []
  type: TYPE_NORMAL
- en: '| list Boxer ⇒ fapplys_build E[0]'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ fapplys_build (>> E[0])'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fapplys" constr(E[0]) constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: fapplys (>> E[0] A[1]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fapplys" constr(E[0]) constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: fapplys (>> E[0] A[1] A[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fapplys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: fapplys (>> E[0] A[1] A[2] A[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fapplys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: fapplys (>> E[0] A[1] A[2] A[3] A[4]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fapplys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: fapplys (>> E[0] A[1] A[2] A[3] A[4] A[5]).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Ltac specializes_build H Ei :=
  prefs: []
  type: TYPE_NORMAL
- en: let H' := fresh "TEMP" in rename H into H';
  prefs: []
  type: TYPE_NORMAL
- en: let args := list_boxer_of Ei in
  prefs: []
  type: TYPE_NORMAL
- en: let args := constr:((boxer H')::args) in
  prefs: []
  type: TYPE_NORMAL
- en: let args := args_unfold_head_if_not_product args in
  prefs: []
  type: TYPE_NORMAL
- en: 'build_app args ltac:(fun R ⇒ lets H: R);'
  prefs: []
  type: TYPE_NORMAL
- en: clear H'.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac specializes_base H Ei :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes_build H Ei; fast_rm_inside Ei.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes_base H (___).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes_base H A.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H (>> A[1] A[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H (>> A[1] A[2] A[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H (>> A[1] A[2] A[3] A[4]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H (>> A[1] A[2] A[3] A[4] A[5]).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Ltac specializes_var_base H :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with
  prefs: []
  type: TYPE_NORMAL
- en: '| ?P → ?Q ⇒ fail 1'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_:_, _ ⇒ specializes H __'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac specializes_vars_base H :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat (specializes_var_base H).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes_var" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes_var_base H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes_vars" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes_vars_base H.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "fapply" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh in forwards H: E;'
  prefs: []
  type: TYPE_NORMAL
- en: first [ apply H | eapply H | rapply H | hnf; apply H
  prefs: []
  type: TYPE_NORMAL
- en: '| hnf; eapply H | applys H ].'
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: is applys redundant with rapply ? *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "sapply" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: first [ apply H | eapply H | rapply H | applys H
  prefs: []
  type: TYPE_NORMAL
- en: '| hnf; apply H | hnf; eapply H | hnf; applys H'
  prefs: []
  type: TYPE_NORMAL
- en: '| fapply H ].'
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "lets_simpl" ident(H) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets H: E; try simpl in H.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets_simpl" ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh in lets_simpl H: T.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "lets_hnf" ident(H) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets H: E; hnf in H.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets_hnf" ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh in lets_hnf H: T.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "puts" ident(X) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: pose (X := E).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "puts" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: let X := fresh "X" in pose (X := E).
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Ltac logic_base E cont :=
  prefs: []
  type: TYPE_NORMAL
- en: assert (H:E); [ cont tt | eapply H; clear H ].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "logic" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: logic_base E ltac:(fun _ ⇒ tauto).
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Section equatesLemma.
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables (A[0] A[1] : Type).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables (A[2] : ∀(x[1] : A[1]), Type).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables (A[3] : ∀(x[1] : A[1]) (x[2] : A[2] x[1]), Type).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables (A[4] : ∀(x[1] : A[1]) (x[2] : A[2] x[1]) (x[3] : A[3] x[2]), Type).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables (A[5] : ∀(x[1] : A[1]) (x[2] : A[2] x[1]) (x[3] : A[3] x[2]) (x[4]
    : A[4] x[3]), Type).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables (A[6] : ∀(x[1] : A[1]) (x[2] : A[2] x[1]) (x[3] : A[3] x[2]) (x[4]
    : A[4] x[3]) (x[5] : A[5] x[4]), Type).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma equates_0 : ∀(P Q:Prop),'
  prefs: []
  type: TYPE_NORMAL
- en: P → P = Q → Q.
  prefs: []
  type: TYPE_NORMAL
- en: Proof. intros. subst. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma equates_1 :'
  prefs: []
  type: TYPE_NORMAL
- en: ∀(P:A[0]→Prop) x[1] y[1],
  prefs: []
  type: TYPE_NORMAL
- en: P y[1] → x[1] = y[1] → P x[1].
  prefs: []
  type: TYPE_NORMAL
- en: Proof. intros. subst. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma equates_2 :'
  prefs: []
  type: TYPE_NORMAL
- en: ∀y[1] (P:A[0]→∀(x[1]:A[1]),Prop) x[1] x[2],
  prefs: []
  type: TYPE_NORMAL
- en: P y[1] x[2] → x[1] = y[1] → P x[1] x[2].
  prefs: []
  type: TYPE_NORMAL
- en: Proof. intros. subst. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma equates_3 :'
  prefs: []
  type: TYPE_NORMAL
- en: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1]),Prop) x[1] x[2] x[3],
  prefs: []
  type: TYPE_NORMAL
- en: P y[1] x[2] x[3] → x[1] = y[1] → P x[1] x[2] x[3].
  prefs: []
  type: TYPE_NORMAL
- en: Proof. intros. subst. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma equates_4 :'
  prefs: []
  type: TYPE_NORMAL
- en: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1])(x[3]:A[3] x[2]),Prop) x[1] x[2] x[3]
    x[4],
  prefs: []
  type: TYPE_NORMAL
- en: P y[1] x[2] x[3] x[4] → x[1] = y[1] → P x[1] x[2] x[3] x[4].
  prefs: []
  type: TYPE_NORMAL
- en: Proof. intros. subst. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma equates_5 :'
  prefs: []
  type: TYPE_NORMAL
- en: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1])(x[3]:A[3] x[2])(x[4]:A[4] x[3]),Prop)
    x[1] x[2] x[3] x[4] x[5],
  prefs: []
  type: TYPE_NORMAL
- en: P y[1] x[2] x[3] x[4] x[5] → x[1] = y[1] → P x[1] x[2] x[3] x[4] x[5].
  prefs: []
  type: TYPE_NORMAL
- en: Proof. intros. subst. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma equates_6 :'
  prefs: []
  type: TYPE_NORMAL
- en: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1])(x[3]:A[3] x[2])(x[4]:A[4] x[3])(x[5]:A[5]
    x[4]),Prop)
  prefs: []
  type: TYPE_NORMAL
- en: x[1] x[2] x[3] x[4] x[5] x[6],
  prefs: []
  type: TYPE_NORMAL
- en: P y[1] x[2] x[3] x[4] x[5] x[6] → x[1] = y[1] → P x[1] x[2] x[3] x[4] x[5] x[6].
  prefs: []
  type: TYPE_NORMAL
- en: Proof. intros. subst. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: End equatesLemma.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac equates_lemma n :=
  prefs: []
  type: TYPE_NORMAL
- en: match nat_from_number n with
  prefs: []
  type: TYPE_NORMAL
- en: '| 0 ⇒ constr:(equates_0)'
  prefs: []
  type: TYPE_NORMAL
- en: '| 1 ⇒ constr:(equates_1)'
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 ⇒ constr:(equates_2)'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 ⇒ constr:(equates_3)'
  prefs: []
  type: TYPE_NORMAL
- en: '| 4 ⇒ constr:(equates_4)'
  prefs: []
  type: TYPE_NORMAL
- en: '| 5 ⇒ constr:(equates_5)'
  prefs: []
  type: TYPE_NORMAL
- en: '| 6 ⇒ constr:(equates_6)'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac equates_one n :=
  prefs: []
  type: TYPE_NORMAL
- en: let L := equates_lemma n in
  prefs: []
  type: TYPE_NORMAL
- en: eapply L.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac equates_several E cont :=
  prefs: []
  type: TYPE_NORMAL
- en: let all_pos := match type of E with
  prefs: []
  type: TYPE_NORMAL
- en: '| List.list Boxer ⇒ constr:(E)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ constr:((boxer E)::nil)'
  prefs: []
  type: TYPE_NORMAL
- en: end in
  prefs: []
  type: TYPE_NORMAL
- en: let rec go pos :=
  prefs: []
  type: TYPE_NORMAL
- en: match pos with
  prefs: []
  type: TYPE_NORMAL
- en: '| nil ⇒ cont tt'
  prefs: []
  type: TYPE_NORMAL
- en: '| (boxer ?n)::?pos'' ⇒ equates_one n; [ instantiate; go pos'' | ]'
  prefs: []
  type: TYPE_NORMAL
- en: end in
  prefs: []
  type: TYPE_NORMAL
- en: go all_pos.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: equates_several E ltac:(fun _ ⇒ idtac).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" constr(n[1]) constr(n[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: equates (>> n[1] n[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" constr(n[1]) constr(n[2]) constr(n[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: equates (>> n[1] n[2] n[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" constr(n[1]) constr(n[2]) constr(n[3]) constr(n[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: equates (>> n[1] n[2] n[3] n[4]).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "applys_eq" constr(H) constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: equates_several E ltac:(fun _ ⇒ sapply H).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" constr(H) constr(n[1]) constr(n[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H (>> n[1] n[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H (>> n[1] n[2] n[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    constr(n[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H (>> n[1] n[2] n[3] n[4]).
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "false_goal" :=
  prefs: []
  type: TYPE_NORMAL
- en: elimtype False.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Ltac false_post :=
  prefs: []
  type: TYPE_NORMAL
- en: solve [ assumption | discriminate | congruence ].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "false" :=
  prefs: []
  type: TYPE_NORMAL
- en: false_goal; try false_post.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "tryfalse" :=
  prefs: []
  type: TYPE_NORMAL
- en: try solve [ false ].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Ltac false_then E cont :=
  prefs: []
  type: TYPE_NORMAL
- en: false_goal; first
  prefs: []
  type: TYPE_NORMAL
- en: '[ applys E; instantiate'
  prefs: []
  type: TYPE_NORMAL
- en: '| forwards_then E ltac:(fun M ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: pose M; jauto_set_hyps; intros; false) ];
  prefs: []
  type: TYPE_NORMAL
- en: cont tt.
  prefs: []
  type: TYPE_NORMAL
- en: (* TODO: is cont needed? *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: false_then E ltac:(fun _ ⇒ idtac).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" constr(E) constr(E[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: false (>> E E[1]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" constr(E) constr(E[1]) constr(E[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: false (>> E E[1] E[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" constr(E) constr(E[1]) constr(E[2]) constr(E[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: false (>> E E[1] E[2] E[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" constr(E) constr(E[1]) constr(E[2]) constr(E[3]) constr(E[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: false (>> E E[1] E[2] E[3] E[4]).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Ltac false_invert_for H :=
  prefs: []
  type: TYPE_NORMAL
- en: let M := fresh in pose (M := H); inversion H; false.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false_invert" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: try solve [ false_invert_for H | false ].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Ltac false_invert_iter :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with H:_ ⊢ _ ⇒
  prefs: []
  type: TYPE_NORMAL
- en: solve [ inversion H; false
  prefs: []
  type: TYPE_NORMAL
- en: '| clear H; false_invert_iter'
  prefs: []
  type: TYPE_NORMAL
- en: '| fail 2 ] end.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false_invert" :=
  prefs: []
  type: TYPE_NORMAL
- en: intros; solve [ false_invert_iter | false ].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "tryfalse_invert" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: try (false_invert H).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "tryfalse_invert" :=
  prefs: []
  type: TYPE_NORMAL
- en: try false_invert.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Ltac false_neq_self_hyp :=
  prefs: []
  type: TYPE_NORMAL
- en: 'match goal with H: ?x ≠ ?x ⊢ _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: false_goal; apply H; reflexivity end.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: (* introv_rec introduces all visible variables.    It does not try to unfold any definition. *)
  prefs: []
  type: TYPE_NORMAL
- en: Ltac introv_rec :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ?P → ?Q ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ∀_, _ ⇒ intro; introv_rec'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ _ ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: (* introv_noarg forces the goal to be a ∀ or an →,    and then calls introv_rec to introduces variables
       (possibly none, in which case introv is the same as hnf).    If the goal is not a product, then it does not do anything. *)
  prefs: []
  type: TYPE_NORMAL
- en: Ltac introv_noarg :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ?P → ?Q ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ∀_, _ ⇒ introv_rec'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ?G ⇒ hnf;'
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ?P → ?Q ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ∀_, _ ⇒ introv_rec'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ _ ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: (* simpler yet perhaps less efficient imlementation *)
  prefs: []
  type: TYPE_NORMAL
- en: Ltac introv_noarg_not_optimized :=
  prefs: []
  type: TYPE_NORMAL
- en: intro; match goal with H:_|-_ ⇒ revert H end; introv_rec.
  prefs: []
  type: TYPE_NORMAL
- en: (* introv_arg H introduces one non-dependent hypothesis    under the name H, after introducing the variables
       quantified with a ∀ that preceeds this hypothesis.    This tactic fails if there does not exist a hypothesis
       to be introduced. *)
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: __ in introv means "intros" *)
  prefs: []
  type: TYPE_NORMAL
- en: Ltac introv_arg H :=
  prefs: []
  type: TYPE_NORMAL
- en: hnf; match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ?P → ?Q ⇒ intros H'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ∀_, _ ⇒ intro; introv_arg H'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: (* introv I[1] .. IN iterates introv Ik *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "introv" :=
  prefs: []
  type: TYPE_NORMAL
- en: introv_noarg.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "introv" simple_intropattern(I[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: introv_arg I[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: introv I[1]; introv I[2].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: introv I[1]; introv I[2] I[3].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: introv I[1]; introv I[2] I[3] I[4].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: introv I[1]; introv I[2] I[3] I[4] I[5].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[6]) :=
  prefs: []
  type: TYPE_NORMAL
- en: introv I[1]; introv I[2] I[3] I[4] I[5] I[6].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[6]) simple_intropattern(I[7]) :=
  prefs: []
  type: TYPE_NORMAL
- en: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[6]) simple_intropattern(I[7]) simple_intropattern(I[8])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7] I[8].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[6]) simple_intropattern(I[7]) simple_intropattern(I[8])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[9]) :=
  prefs: []
  type: TYPE_NORMAL
- en: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7] I[8] I[9].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[6]) simple_intropattern(I[7]) simple_intropattern(I[8])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[9]) simple_intropattern(I[10]) :=
  prefs: []
  type: TYPE_NORMAL
- en: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7] I[8] I[9] I[10].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "intros_all" :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat intro.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "intro_hnf" :=
  prefs: []
  type: TYPE_NORMAL
- en: 'intro; match goal with H: _ ⊢ _ ⇒ hnf in H end.'
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "gen" ident(X[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: generalize dependent X[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: gen X[2]; gen X[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: gen X[3]; gen X[2]; gen X[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4])  :=
  prefs: []
  type: TYPE_NORMAL
- en: gen X[4]; gen X[3]; gen X[2]; gen X[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[6]) :=
  prefs: []
  type: TYPE_NORMAL
- en: gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[6]) ident(X[7]) :=
  prefs: []
  type: TYPE_NORMAL
- en: gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[6]) ident(X[7]) ident(X[8]) :=
  prefs: []
  type: TYPE_NORMAL
- en: gen X[8]; gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[6]) ident(X[7]) ident(X[8]) ident(X[9]) :=
  prefs: []
  type: TYPE_NORMAL
- en: gen X[9]; gen X[8]; gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2];
    gen X[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[6]) ident(X[7]) ident(X[8]) ident(X[9]) ident(X[10]) :=
  prefs: []
  type: TYPE_NORMAL
- en: gen X[10]; gen X[9]; gen X[8]; gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3];
    gen X[2]; gen X[1].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "generalizes" hyp(X) :=
  prefs: []
  type: TYPE_NORMAL
- en: generalize X; clear X.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "generalizes" hyp(X[1]) hyp(X[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: generalizes X[1]; generalizes X[2].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "generalizes" hyp(X[1]) hyp(X[2]) hyp(X[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: generalizes X[1] X[2]; generalizes X[3].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "generalizes" hyp(X[1]) hyp(X[2]) hyp(X[3]) hyp(X[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: generalizes X[1] X[2] X[3]; generalizes X[4].
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "sets" ident(X) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E) in *.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Ltac def_to_eq X HX E :=
  prefs: []
  type: TYPE_NORMAL
- en: 'assert (HX : X = E) by reflexivity; clearbody X.'
  prefs: []
  type: TYPE_NORMAL
- en: Ltac def_to_eq_sym X HX E :=
  prefs: []
  type: TYPE_NORMAL
- en: 'assert (HX : E = X) by reflexivity; clearbody X.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "set_eq" ident(X) ident(HX) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E); def_to_eq X HX E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" ident(X) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let HX := fresh "EQ" X in set_eq X HX: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let X := fresh "X" in set_eq X: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" "←" ident(X) ident(HX) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E); def_to_eq_sym X HX E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" "←" ident(X) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let HX := fresh "EQ" X in set_eq ← X HX: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" "←" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let X := fresh "X" in set_eq ← X: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sets_eq" ident(X) ident(HX) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E) in *; def_to_eq X HX E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sets_eq" ident(X) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let HX := fresh "EQ" X in sets_eq X HX: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sets_eq" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let X := fresh "X" in sets_eq X: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sets_eq" "←" ident(X) ident(HX) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E) in *; def_to_eq_sym X HX E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sets_eq" "←" ident(X) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let HX := fresh "EQ" X in sets_eq ← X HX: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sets_eq" "←" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let X := fresh "X" in sets_eq ← X: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" ident(X) ident(HX) ":" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E) in H; def_to_eq X HX E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" ident(X) ":" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let HX := fresh "EQ" X in set_eq X HX: E in H.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" ":" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let X := fresh "X" in set_eq X: E in H.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" "←" ident(X) ident(HX) ":" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E) in H; def_to_eq_sym X HX E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" "←" ident(X) ":" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let HX := fresh "EQ" X in set_eq ← X HX: E in H.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" "←" ":" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let X := fresh "X" in set_eq ← X: E in H.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" ident(X) ident(HX) ":" constr(E) "in" "⊢" :=
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E) in ⊢; def_to_eq X HX E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" ident(X) ":" constr(E) "in" "⊢" :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let HX := fresh "EQ" X in set_eq X HX: E in ⊢.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" ":" constr(E) "in" "⊢" :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let X := fresh "X" in set_eq X: E in ⊢.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" "←" ident(X) ident(HX) ":" constr(E) "in" "⊢" :=
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E) in ⊢; def_to_eq_sym X HX E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" "←" ident(X) ":" constr(E) "in" "⊢" :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let HX := fresh "EQ" X in set_eq ← X HX: E in ⊢.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "set_eq" "←" ":" constr(E) "in" "⊢" :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let X := fresh "X" in set_eq ← X: E in ⊢.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "gen_eq" ident(X) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let EQ := fresh in sets_eq X EQ: E; revert EQ.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen_eq" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let X := fresh "X" in gen_eq X: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen_eq" ":" constr(E) "as" ident(X) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'gen_eq X: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen_eq" ident(X[1]) ":" constr(E[1]) ","
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[2]) ":" constr(E[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'gen_eq X[2]: E[2]; gen_eq X[1]: E[1].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "gen_eq" ident(X[1]) ":" constr(E[1]) ","
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[2]) ":" constr(E[2]) "," ident(X[3]) ":" constr(E[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'gen_eq X[3]: E[3]; gen_eq X[2]: E[2]; gen_eq X[1]: E[1].'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Ltac sets_let_base tac :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ context[let _ := ?E in _] ⇒ tac E; cbv zeta'
  prefs: []
  type: TYPE_NORMAL
- en: '| H: context[let _ := ?E in _] ⊢ _ ⇒ tac E; cbv zeta in H'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac sets_let_in_base H tac :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with context[let _ := ?E in _] ⇒
  prefs: []
  type: TYPE_NORMAL
- en: tac E; cbv zeta in H end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sets_let" ident(X) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'sets_let_base ltac:(fun E ⇒ sets X: E).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sets_let" ident(X) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'sets_let_in_base H ltac:(fun E ⇒ sets X: E).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sets_eq_let" ident(X) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'sets_let_base ltac:(fun E ⇒ sets_eq X: E).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sets_eq_let" ident(X) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'sets_let_in_base H ltac:(fun E ⇒ sets_eq X: E).'
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Ltac rewrites_base E cont :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with
  prefs: []
  type: TYPE_NORMAL
- en: '| List.list Boxer ⇒ forwards_then E cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ cont E; fast_rm_inside E'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites_base E ltac:(fun M ⇒ rewrite M ).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites_base E ltac:(fun M ⇒ rewrite M in H).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites_base E ltac:(fun M ⇒ rewrite M in *).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites_base E ltac:(fun M ⇒ rewrite ← M ).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "←" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites_base E ltac:(fun M ⇒ rewrite ← M in H).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "←" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites_base E ltac:(fun M ⇒ rewrite ← M in *).
  prefs: []
  type: TYPE_NORMAL
- en: (* TODO: extend tactics below to use rewrites *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "rewrite_all" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat rewrite E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat rewrite ← E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" constr(E) "in" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat rewrite E in H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "←" constr(E) "in" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat rewrite ← E in H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat rewrite E in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "←" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat rewrite ← E in *.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Ltac asserts_rewrite_tactic E action :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let EQ := fresh in (assert (EQ : E);'
  prefs: []
  type: TYPE_NORMAL
- en: '[ idtac | action EQ; clear EQ ]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ in H).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "←" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ in H).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ in *).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "←" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ in *).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Ltac cuts_rewrite_tactic E action :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let EQ := fresh in (cuts EQ: E;'
  prefs: []
  type: TYPE_NORMAL
- en: '[ action EQ; clear EQ | idtac ]).'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ in H).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "←" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ in H).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Ltac rewrite_except H EQ :=
  prefs: []
  type: TYPE_NORMAL
- en: let K := fresh in let T := type of H in
  prefs: []
  type: TYPE_NORMAL
- en: set (K := T) in H;
  prefs: []
  type: TYPE_NORMAL
- en: rewrite EQ in *; unfold K in H; clear K.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "rewrites" constr(E) "at" constr(K) :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with ?T[1] = ?T[2] ⇒
  prefs: []
  type: TYPE_NORMAL
- en: ltac_action_at K of T[1] do (rewrites E) end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "←" constr(E) "at" constr(K) :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with ?T[1] = ?T[2] ⇒
  prefs: []
  type: TYPE_NORMAL
- en: ltac_action_at K of T[2] do (rewrites ← E) end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" constr(E) "at" constr(K) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with ?T[1] = ?T[2] ⇒
  prefs: []
  type: TYPE_NORMAL
- en: ltac_action_at K of T[1] in H do (rewrites E in H) end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "←" constr(E) "at" constr(K) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with ?T[1] = ?T[2] ⇒
  prefs: []
  type: TYPE_NORMAL
- en: ltac_action_at K of T[2] in H do (rewrites ← E in H) end.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "replaces" constr(E) "with" constr(F) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let T := fresh in assert (T: E = F); [ | replace E with F; clear T ].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "replaces" constr(E) "with" constr(F) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let T := fresh in assert (T: E = F); [ | replace E with F in H; clear T ].'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "replaces" constr(E) "at" constr(K) "with" constr(F) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let T := fresh in assert (T: E = F); [ | rewrites T at K; clear T ].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "replaces" constr(E) "at" constr(K) "with" constr(F) "in" hyp(H)
    :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let T := fresh in assert (T: E = F); [ | rewrites T at K in H; clear T ].'
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: (* TODO: support "changes (E[1] = E[2])" *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "changes" constr(E[1]) "with" constr(E[2]) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite (E[1] = E[2]) in H; [ reflexivity | ].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "changes" constr(E[1]) "with" constr(E[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite (E[1] = E[2]); [ reflexivity | ].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "changes" constr(E[1]) "with" constr(E[2]) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite (E[1] = E[2]) in *; [ reflexivity | ].
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: rename X[1] into Y[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[2]) "to" ident(Y[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: renames X[1] to Y[1]; renames X[2] to Y[2].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: renames X[1] to Y[1]; renames X[2] to Y[2], X[3] to Y[3].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) ","
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[4]) "to" ident(Y[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: renames X[1] to Y[1]; renames X[2] to Y[2], X[3] to Y[3], X[4] to Y[4].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) ","
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[4]) "to" ident(Y[4]) "," ident(X[5]) "to" ident(Y[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: renames X[1] to Y[1]; renames X[2] to Y[2], X[3] to Y[3], X[4] to Y[4], X[5]
    to Y[5].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) ","
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[4]) "to" ident(Y[4]) "," ident(X[5]) "to" ident(Y[5]) ","
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[6]) "to" ident(Y[6]) :=
  prefs: []
  type: TYPE_NORMAL
- en: renames X[1] to Y[1]; renames X[2] to Y[2], X[3] to Y[3], X[4] to Y[4], X[5]
    to Y[5], X[6] to Y[6].
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Ltac apply_to_head_of E cont :=
  prefs: []
  type: TYPE_NORMAL
- en: let go E :=
  prefs: []
  type: TYPE_NORMAL
- en: let P := get_head E in cont P in
  prefs: []
  type: TYPE_NORMAL
- en: match E with
  prefs: []
  type: TYPE_NORMAL
- en: '| ∀_,_ ⇒ intros; apply_to_head_of E cont'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?A = ?B ⇒ first [ go A | go B ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?A ⇒ go A'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac unfolds_base :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?G ⇒
  prefs: []
  type: TYPE_NORMAL
- en: apply_to_head_of G ltac:(fun P ⇒ unfold P) end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds_base.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Ltac unfolds_in_base H :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with ?G ⇒
  prefs: []
  type: TYPE_NORMAL
- en: apply_to_head_of G ltac:(fun P ⇒ unfold P in H) end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds_in_base H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "unfolds" "in" hyp(H[1]) hyp(H[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds in H[1]; unfolds in H[2].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "in" hyp(H[1]) hyp(H[2]) hyp(H[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds in H[1]; unfolds in H[2] H[3].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "in" hyp(H[1]) hyp(H[2]) hyp(H[3]) hyp(H[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds in H[1]; unfolds in H[2] H[3] H[4].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "unfolds" constr(F[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold F[1] in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold F[1],F[2] in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(F[3]) :='
  prefs: []
  type: TYPE_NORMAL
- en: unfold F[1],F[2],F[3] in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(F[3]) "," constr(F[4]) :='
  prefs: []
  type: TYPE_NORMAL
- en: unfold F[1],F[2],F[3],F[4] in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5]) :='
  prefs: []
  type: TYPE_NORMAL
- en: unfold F[1],F[2],F[3],F[4],F[5] in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5]) "," constr(F[6]) :='
  prefs: []
  type: TYPE_NORMAL
- en: unfold F[1],F[2],F[3],F[4],F[5],F[6] in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5])'
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(F[6]) "," constr(F[7]) :='
  prefs: []
  type: TYPE_NORMAL
- en: unfold F[1],F[2],F[3],F[4],F[5],F[6],F[7] in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5])'
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(F[6]) "," constr(F[7]) "," constr(F[8]) :='
  prefs: []
  type: TYPE_NORMAL
- en: unfold F[1],F[2],F[3],F[4],F[5],F[6],F[7],F[8] in *.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "folds" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: fold H in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "folds" constr(H[1]) "," constr(H[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: folds H[1]; folds H[2].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "folds" constr(H[1]) "," constr(H[2]) "," constr(H[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: folds H[1]; folds H[2]; folds H[3].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "folds" constr(H[1]) "," constr(H[2]) "," constr(H[3])
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(H[4]) :='
  prefs: []
  type: TYPE_NORMAL
- en: folds H[1]; folds H[2]; folds H[3]; folds H[4].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "folds" constr(H[1]) "," constr(H[2]) "," constr(H[3])
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(H[4]) "," constr(H[5]) :='
  prefs: []
  type: TYPE_NORMAL
- en: folds H[1]; folds H[2]; folds H[3]; folds H[4]; folds H[5].
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "simpls" :=
  prefs: []
  type: TYPE_NORMAL
- en: simpl in *.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "simpls" constr(F[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: simpl F[1] in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simpls" constr(F[1]) "," constr(F[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: simpls F[1]; simpls F[2].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simpls" constr(F[1]) "," constr(F[2])
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(F[3]) :='
  prefs: []
  type: TYPE_NORMAL
- en: simpls F[1]; simpls F[2]; simpls F[3].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simpls" constr(F[1]) "," constr(F[2])
  prefs: []
  type: TYPE_NORMAL
- en: '"," constr(F[3]) "," constr(F[4]) :='
  prefs: []
  type: TYPE_NORMAL
- en: simpls F[1]; simpls F[2]; simpls F[3]; simpls F[4].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "unsimpl" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: let F := (eval simpl in E) in change F with E.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "unsimpl" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: let F := (eval simpl in E) in change F with E in H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "unsimpl" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: let F := (eval simpl in E) in change F with E in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unsimpls" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: unsimpl E in *.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Notation "'nosimpl' t" := (match tt with tt ⇒ t end)
  prefs: []
  type: TYPE_NORMAL
- en: (at level 10).
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "hnfs" := hnf in *.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "substs" :=
  prefs: []
  type: TYPE_NORMAL
- en: 'repeat (match goal with H: ?x = ?y ⊢ _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: first [ subst x | subst y ] end).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Ltac substs_below limit :=
  prefs: []
  type: TYPE_NORMAL
- en: 'match goal with H: ?T ⊢ _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| limit ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?x = ?y ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: first [ subst x; substs_below limit
  prefs: []
  type: TYPE_NORMAL
- en: '| subst y; substs_below limit'
  prefs: []
  type: TYPE_NORMAL
- en: '| generalizes H; substs_below limit; intro ]'
  prefs: []
  type: TYPE_NORMAL
- en: end end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "substs" "below" "body" constr(M) :=
  prefs: []
  type: TYPE_NORMAL
- en: substs_below M.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "substs" "below" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with ?M ⇒ substs below body M end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Ltac intro_subst_hyp := fail. (* definition further on *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Ltac subst_hyp_base H :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with
  prefs: []
  type: TYPE_NORMAL
- en: '| (_,_,_,_,_) = (_,_,_,_,_) ⇒ injection H; clear H; do 4 intro_subst_hyp'
  prefs: []
  type: TYPE_NORMAL
- en: '| (_,_,_,_) = (_,_,_,_) ⇒ injection H; clear H; do 4 intro_subst_hyp'
  prefs: []
  type: TYPE_NORMAL
- en: '| (_,_,_) = (_,_,_) ⇒ injection H; clear H; do 3 intro_subst_hyp'
  prefs: []
  type: TYPE_NORMAL
- en: '| (_,_) = (_,_) ⇒ injection H; clear H; do 2 intro_subst_hyp'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?x = ?x ⇒ clear H'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?x = ?y ⇒ first [ subst x | subst y ]'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst_hyp" hyp(H) := subst_hyp_base H.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac intro_subst_hyp ::=
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh "TEMP" in intros H; subst_hyp H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "intro_subst" :=
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh "TEMP" in intros H; subst_hyp H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Ltac subst_local :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with H:=_ ⊢ _ ⇒ subst H end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Ltac subst_eq_base E :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh "TEMP" in lets H: E; subst_hyp H.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst_eq" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: subst_eq_base E.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Require Import ProofIrrelevance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Ltac pi_rewrite_base E rewrite_tac :=
  prefs: []
  type: TYPE_NORMAL
- en: let E' := fresh in let T := type of E in evar (E':T);
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_tac (@proof_irrelevance _ E E'); subst E'.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "pi_rewrite" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: pi_rewrite_base E ltac:(fun X ⇒ rewrite X).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "pi_rewrite" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: pi_rewrite_base E ltac:(fun X ⇒ rewrite X in H).
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Ltac fequal_base :=
  prefs: []
  type: TYPE_NORMAL
- en: let go := f_equal; [ fequal_base | ] in
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (_,_,_) = (_,_,_) ⇒ go'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (_,_,_,_) = (_,_,_,_) ⇒ go'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (_,_,_,_,_) = (_,_,_,_,_) ⇒ go'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (_,_,_,_,_,_) = (_,_,_,_,_,_) ⇒ go'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ _ ⇒ f_equal'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fequal" :=
  prefs: []
  type: TYPE_NORMAL
- en: fequal_base.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Ltac fequal_post :=
  prefs: []
  type: TYPE_NORMAL
- en: first [ reflexivity | congruence | apply proof_irrelevance | idtac ].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fequals" :=
  prefs: []
  type: TYPE_NORMAL
- en: fequal; fequal_post.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "fequals_rec" :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat (progress fequals).
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "invert" "keep" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: pose ltac_mark; inversion H; gen_until_mark.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "invert" "keep" hyp(H) "as" simple_intropattern(I[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert keep H; introv I[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "invert" "keep" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert keep H; introv I[1] I[2].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "invert" "keep" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert keep H; introv I[1] I[2] I[3].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "invert" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert keep H; clear H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "invert_tactic" hyp(H) tactic(tac) :=
  prefs: []
  type: TYPE_NORMAL
- en: let H' := fresh in rename H into H'; tac H'; clear H'.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "invert" hyp(H) "as" simple_intropattern(I[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ invert keep H as I[1]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "invert" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ invert keep H as I[1] I[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "invert" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ invert keep H as I[1] I[2] I[3]).
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: (* --we do not import Eqdep because it imports nasty hints automatically     Require Import Eqdep. *)
  prefs: []
  type: TYPE_NORMAL
- en: 'Axiom inj_pair2 :  (* is in fact derivable from the axioms in LibAxiom.v *)'
  prefs: []
  type: TYPE_NORMAL
- en: '∀(U : Type) (P : U → Type) (p : U) (x y : P p),'
  prefs: []
  type: TYPE_NORMAL
- en: existT P p x = existT P p y → x = y.
  prefs: []
  type: TYPE_NORMAL
- en: (* Proof using. apply Eqdep.EqdepTheory.inj_pair2. Qed.*)
  prefs: []
  type: TYPE_NORMAL
- en: Ltac inverts_tactic H i[1] i[2] i[3] i[4] i[5] i[6] :=
  prefs: []
  type: TYPE_NORMAL
- en: let rec go i[1] i[2] i[3] i[4] i[5] i[6] :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (ltac_Mark → _) ⇒ intros _'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (?x = ?y → _) ⇒ let H := fresh in intro H;'
  prefs: []
  type: TYPE_NORMAL
- en: first [ subst x | subst y ];
  prefs: []
  type: TYPE_NORMAL
- en: go i[1] i[2] i[3] i[4] i[5] i[6]
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (existT ?P ?p ?x = existT ?P ?p ?y → _) ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh in intro H;
  prefs: []
  type: TYPE_NORMAL
- en: generalize (@inj_pair2 _ P p x y H);
  prefs: []
  type: TYPE_NORMAL
- en: clear H; go i[1] i[2] i[3] i[4] i[5] i[6]
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (?P → ?Q) ⇒ i[1]; go i[2] i[3] i[4] i[5] i[6] ltac:(intro)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (∀_, _) ⇒ intro; go i[1] i[2] i[3] i[4] i[5] i[6]'
  prefs: []
  type: TYPE_NORMAL
- en: end in
  prefs: []
  type: TYPE_NORMAL
- en: generalize ltac_mark; invert keep H; go i[1] i[2] i[3] i[4] i[5] i[6];
  prefs: []
  type: TYPE_NORMAL
- en: unfold eq' in *.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "inverts" "keep" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts_tactic H ltac:(intro) ltac:(intro) ltac:(intro)
  prefs: []
  type: TYPE_NORMAL
- en: ltac:(intro) ltac:(intro) ltac:(intro).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts_tactic H ltac:(intros I[1])
  prefs: []
  type: TYPE_NORMAL
- en: ltac:(intro) ltac:(intro) ltac:(intro) ltac:(intro) ltac:(intro).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2])
  prefs: []
  type: TYPE_NORMAL
- en: ltac:(intro) ltac:(intro) ltac:(intro) ltac:(intro).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2]) ltac:(intros I[3])
  prefs: []
  type: TYPE_NORMAL
- en: ltac:(intro) ltac:(intro) ltac:(intro).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2]) ltac:(intros I[3])
  prefs: []
  type: TYPE_NORMAL
- en: ltac:(intros I[4]) ltac:(intro) ltac:(intro).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2]) ltac:(intros I[3])
  prefs: []
  type: TYPE_NORMAL
- en: ltac:(intros I[4]) ltac:(intros I[5]) ltac:(intro).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[5]) simple_intropattern(I[6]) :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2]) ltac:(intros I[3])
  prefs: []
  type: TYPE_NORMAL
- en: ltac:(intros I[4]) ltac:(intros I[5]) ltac:(intros I[6]).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "inverts" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts keep H; clear H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "inverts_tactic" hyp(H) tactic(tac) :=
  prefs: []
  type: TYPE_NORMAL
- en: let H' := fresh in rename H into H'; tac H'; clear H'.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1] I[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1] I[2] I[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1] I[2] I[3] I[4]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1] I[2] I[3] I[4] I[5]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[5]) simple_intropattern(I[6]) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1] I[2] I[3] I[4] I[5] I[6]).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Ltac inverts_as_tactic H :=
  prefs: []
  type: TYPE_NORMAL
- en: let rec go tt :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (ltac_Mark → _) ⇒ intros _'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (?x = ?y → _) ⇒ let H := fresh "TEMP" in intro H;'
  prefs: []
  type: TYPE_NORMAL
- en: first [ subst x | subst y ];
  prefs: []
  type: TYPE_NORMAL
- en: go tt
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (existT ?P ?p ?x = existT ?P ?p ?y → _) ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh in intro H;
  prefs: []
  type: TYPE_NORMAL
- en: generalize (@inj_pair2 _ P p x y H);
  prefs: []
  type: TYPE_NORMAL
- en: clear H; go tt
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (∀_, _) ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: intro; let H := get_last_hyp tt in mark_to_generalize H; go tt
  prefs: []
  type: TYPE_NORMAL
- en: end in
  prefs: []
  type: TYPE_NORMAL
- en: pose ltac_mark; inversion H;
  prefs: []
  type: TYPE_NORMAL
- en: generalize ltac_mark; gen_until_mark;
  prefs: []
  type: TYPE_NORMAL
- en: go tt; gen_to_generalize; unfolds ltac_to_generalize;
  prefs: []
  type: TYPE_NORMAL
- en: unfold eq' in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "keep" hyp(H) "as" :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts_as_tactic H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts_as_tactic H; clear H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[5]) simple_intropattern(I[6]) simple_intropattern(I[7])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts H as; introv I[1] I[2] I[3] I[4] I[5] I[6] I[7].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[5]) simple_intropattern(I[6]) simple_intropattern(I[7])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[8]) :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts H as; introv I[1] I[2] I[3] I[4] I[5] I[6] I[7] I[8].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Ltac lets_inverts_base E cont :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh "TEMP" in lets H: E; try cont H.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets_inverts" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: lets_inverts_base E ltac:(fun H ⇒ inverts H).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets_inverts" constr(E) "as" simple_intropattern(I[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets_inverts" constr(E) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1] I[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets_inverts" constr(E) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1] I[2] I[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets_inverts" constr(E) "as" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1] I[2] I[3] I[4]).
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Ltac injects_tactic H :=
  prefs: []
  type: TYPE_NORMAL
- en: let rec go _ :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (ltac_Mark → _) ⇒ intros _'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (?x = ?y → _) ⇒ let H := fresh in intro H;'
  prefs: []
  type: TYPE_NORMAL
- en: first [ subst x | subst y | idtac ];
  prefs: []
  type: TYPE_NORMAL
- en: go tt
  prefs: []
  type: TYPE_NORMAL
- en: end in
  prefs: []
  type: TYPE_NORMAL
- en: generalize ltac_mark; injection H; go tt.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "injects" "keep" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: injects_tactic H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "injects" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: injects_tactic H; clear H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "inject" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: injection H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inject" hyp(H) "as" ident(X[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: injection H; intros X[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inject" hyp(H) "as" ident(X[1]) ident(X[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: injection H; intros X[1] X[2].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inject" hyp(H) "as" ident(X[1]) ident(X[2]) ident(X[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: injection H; intros X[1] X[2] X[3].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inject" hyp(H) "as" ident(X[1]) ident(X[2]) ident(X[3])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: injection H; intros X[1] X[2] X[3] X[4].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inject" hyp(H) "as" ident(X[1]) ident(X[2]) ident(X[3])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[4]) ident(X[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: injection H; intros X[1] X[2] X[3] X[4] X[5].
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "inversions" "keep" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: inversion H; subst.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "inversions" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: inversion H; subst; clear H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "injections" "keep" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: injection H; intros; subst.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "injections" "keep" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: injection H; clear H; intros; subst.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "cases" constr(E) "as" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: let X := fresh "TEMP" in
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E) in *; def_to_eq_sym X H E;
  prefs: []
  type: TYPE_NORMAL
- en: destruct X.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh "Eq" in cases E as H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Ltac case_if_post := tryfalse.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Ltac case_if_on_tactic_core E Eq :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with
  prefs: []
  type: TYPE_NORMAL
- en: '| {_}+{_} ⇒ destruct E as [Eq | Eq]'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let X := fresh in'
  prefs: []
  type: TYPE_NORMAL
- en: 'sets_eq ← X Eq: E;'
  prefs: []
  type: TYPE_NORMAL
- en: destruct X
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac case_if_on_tactic E Eq :=
  prefs: []
  type: TYPE_NORMAL
- en: case_if_on_tactic_core E Eq; case_if_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if_on" constr(E) "as" simple_intropattern(Eq) :=
  prefs: []
  type: TYPE_NORMAL
- en: case_if_on_tactic E Eq.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "as" simple_intropattern(Eq) :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ context [if ?B then _ else _] ⇒ case_if_on B as Eq'
  prefs: []
  type: TYPE_NORMAL
- en: '| K: context [if ?B then _ else _] ⊢ _ ⇒ case_if_on B as Eq'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "in" hyp(H) "as" simple_intropattern(Eq) :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with context [if ?B then _ else _] ⇒
  prefs: []
  type: TYPE_NORMAL
- en: case_if_on B as Eq end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" :=
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh in case_if as Eq.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh in case_if in H as Eq.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Ltac cases_if_on_tactic_core E Eq :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with
  prefs: []
  type: TYPE_NORMAL
- en: '| {_}+{_} ⇒ destruct E as [Eq|Eq]; try subst_hyp Eq'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let X := fresh in'
  prefs: []
  type: TYPE_NORMAL
- en: 'sets_eq ← X Eq: E;'
  prefs: []
  type: TYPE_NORMAL
- en: destruct X
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac cases_if_on_tactic E Eq :=
  prefs: []
  type: TYPE_NORMAL
- en: cases_if_on_tactic_core E Eq; tryfalse; case_if_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if_on" constr(E) "as" simple_intropattern(Eq) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases_if_on_tactic E Eq.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "as" simple_intropattern(Eq) :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ context [if ?B then _ else _] ⇒ cases_if_on B as Eq'
  prefs: []
  type: TYPE_NORMAL
- en: '| K: context [if ?B then _ else _] ⊢ _ ⇒ cases_if_on B as Eq'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "in" hyp(H) "as" simple_intropattern(Eq) :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with context [if ?B then _ else _] ⇒
  prefs: []
  type: TYPE_NORMAL
- en: cases_if_on B as Eq end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" :=
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh in cases_if as Eq.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh in cases_if in H as Eq.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Ltac case_ifs_core :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat case_if.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_ifs" :=
  prefs: []
  type: TYPE_NORMAL
- en: case_ifs_core.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Ltac destruct_if_post := tryfalse.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if"
  prefs: []
  type: TYPE_NORMAL
- en: '"as" simple_intropattern(Eq[1]) simple_intropattern(Eq[2]) :='
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ context [if ?B then _ else _] ⇒ destruct B as [Eq[1]|Eq[2]]'
  prefs: []
  type: TYPE_NORMAL
- en: '| K: context [if ?B then _ else _] ⊢ _ ⇒ destruct B as [Eq[1]|Eq[2]]'
  prefs: []
  type: TYPE_NORMAL
- en: end;
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "in" hyp(H)
  prefs: []
  type: TYPE_NORMAL
- en: '"as" simple_intropattern(Eq[1]) simple_intropattern(Eq[2]) :='
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with context [if ?B then _ else _] ⇒
  prefs: []
  type: TYPE_NORMAL
- en: destruct B as [Eq[1]|Eq[2]] end;
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "as" simple_intropattern(Eq) :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if as Eq Eq.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "in" hyp(H) "as" simple_intropattern(Eq) :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if in H as Eq Eq.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" :=
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh "C" in destruct_if as Eq Eq.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh "C" in destruct_if in H as Eq Eq.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: Ltac find_head_match T :=
  prefs: []
  type: TYPE_NORMAL
- en: match T with context [?E] ⇒
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| E ⇒ fail 1'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ constr:(E)'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac destruct_head_match_core cont :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ?T[1] = ?T[2] ⇒ first [ let E := find_head_match T[1] in cont E'
  prefs: []
  type: TYPE_NORMAL
- en: '| let E := find_head_match T[2] in cont E ]'
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ?T[1] ⇒ let E := find_head_match T[1] in cont E'
  prefs: []
  type: TYPE_NORMAL
- en: end;
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_head_match" "as" simple_intropattern(I) :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct_head_match_core ltac:(fun E ⇒ destruct E as I).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_head_match" :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct_head_match_core ltac:(fun E ⇒ destruct E).
  prefs: []
  type: TYPE_NORMAL
- en: (**--provided for compatibility with remember *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "cases'" constr(E) "as" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: let X := fresh "TEMP" in
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E) in *; def_to_eq X H E;
  prefs: []
  type: TYPE_NORMAL
- en: destruct X.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases'" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: let x := fresh "Eq" in cases' E as H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Ltac cases_if_on' E Eq :=
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with
  prefs: []
  type: TYPE_NORMAL
- en: '| {_}+{_} ⇒ destruct E as [Eq|Eq]; try subst_hyp Eq'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let X := fresh in'
  prefs: []
  type: TYPE_NORMAL
- en: 'sets_eq X Eq: E;'
  prefs: []
  type: TYPE_NORMAL
- en: destruct X
  prefs: []
  type: TYPE_NORMAL
- en: end; case_if_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" "as" simple_intropattern(Eq) :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ context [if ?B then _ else _] ⇒ cases_if_on'' B Eq'
  prefs: []
  type: TYPE_NORMAL
- en: '| K: context [if ?B then _ else _] ⊢ _ ⇒ cases_if_on'' B Eq'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" :=
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh in cases_if' as Eq.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Require Import Coq.Program.Equality.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac inductions_post :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold eq' in *.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E; inductions_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1]; inductions_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2]; inductions_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3]; inductions_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) ident(X[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3] X[4]; inductions_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) ident(X[4]) ident(X[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3] X[4] X[5]; inductions_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) ident(X[4]) ident(X[5]) ident(X[6]) :=
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3] X[4] X[5] X[6]; inductions_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) ident(X[4]) ident(X[5]) ident(X[6]) ident(X[7]) :=
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3] X[4] X[5] X[6] X[7]; inductions_post.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) ident(X[4]) ident(X[5]) ident(X[6]) ident(X[7]) ident(X[8]) :=
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3] X[4] X[5] X[6] X[7] X[8];
    inductions_post.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "induction_wf" ident(IH) ":" constr(E) ident(X) :=
  prefs: []
  type: TYPE_NORMAL
- en: pattern X; apply (well_founded_ind E); clear X; intros X IH.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "induction_wf" ":" constr(E) ident(X) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let IH := fresh "IH" in induction_wf IH: E X.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "induction_wf" ":" constr(E) ident(X) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'induction_wf: E X.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Require Import Compare_dec Omega.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma induct_height_max2 : ∀n[1] n[2] : nat,'
  prefs: []
  type: TYPE_NORMAL
- en: ∃n, n[1] < n ∧ n[2] < n.
  prefs: []
  type: TYPE_NORMAL
- en: Proof using.
  prefs: []
  type: TYPE_NORMAL
- en: intros. destruct (lt_dec n[1] n[2]).
  prefs: []
  type: TYPE_NORMAL
- en: ∃(S n[2]). omega.
  prefs: []
  type: TYPE_NORMAL
- en: ∃(S n[1]). omega.
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac induct_height_step x :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| H: ∃_, _ ⊢ _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: let n := fresh "n" in let y := fresh "x" in
  prefs: []
  type: TYPE_NORMAL
- en: destruct H as [n ?];
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards (y&?&?): induct_height_max2 n x;'
  prefs: []
  type: TYPE_NORMAL
- en: induct_height_step y
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ ∃(S x); eauto'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac induct_height := induct_height_step O.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Definition COIND (P:Prop) := P.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cofixs" ident(IH) :=
  prefs: []
  type: TYPE_NORMAL
- en: cofix IH;
  prefs: []
  type: TYPE_NORMAL
- en: match type of IH with ?P ⇒ change P with (COIND P) in IH end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: Ltac clear_coind :=
  prefs: []
  type: TYPE_NORMAL
- en: 'repeat match goal with H: COIND _ ⊢ _ ⇒ clear H end.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "abstracts" tactic(tac) :=
  prefs: []
  type: TYPE_NORMAL
- en: clear_coind; tac.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: Ltac decides_equality_tactic :=
  prefs: []
  type: TYPE_NORMAL
- en: first [ decide equality | progress(unfolds); decides_equality_tactic ].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "decides_equality" :=
  prefs: []
  type: TYPE_NORMAL
- en: decides_equality_tactic.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'Lemma iff_intro_swap : ∀(P Q : Prop),'
  prefs: []
  type: TYPE_NORMAL
- en: (Q → P) → (P → Q) → (P ↔ Q).
  prefs: []
  type: TYPE_NORMAL
- en: Proof using. intuition. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" simple_intropattern(H[1]) simple_intropattern(H[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: split; [ intros H[1] | intros H[2] ].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" simple_intropattern(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: iff H H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" :=
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh "H" in iff H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "←" simple_intropattern(H[1]) simple_intropattern(H[2])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: apply iff_intro_swap; [ intros H[1] | intros H[2] ].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "←" simple_intropattern(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: iff ← H H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "←" :=
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh "H" in iff ← H.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Ltac splits_tactic N :=
  prefs: []
  type: TYPE_NORMAL
- en: match N with
  prefs: []
  type: TYPE_NORMAL
- en: '| O ⇒ fail'
  prefs: []
  type: TYPE_NORMAL
- en: '| S O ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| S ?N'' ⇒ split; [| splits_tactic N'']'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac unfold_goal_until_conjunction :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ _ ∧ _ ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ progress(unfolds); unfold_goal_until_conjunction'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_term_conjunction_arity T :=
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ⇒ constr:(8)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ⇒ constr:(7)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ⇒ constr:(6)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ∧ _ ∧ _ ⇒ constr:(5)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ∧ _ ⇒ constr:(4)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ⇒ constr:(3)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ⇒ constr:(2)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ → ?T'' ⇒ get_term_conjunction_arity T'''
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let P := get_head T in'
  prefs: []
  type: TYPE_NORMAL
- en: let T' := eval unfold P in T in
  prefs: []
  type: TYPE_NORMAL
- en: match T' with
  prefs: []
  type: TYPE_NORMAL
- en: '| T ⇒ fail 1'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ get_term_conjunction_arity T'''
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: warning this can loop... *)
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_goal_conjunction_arity :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?T ⇒ get_term_conjunction_arity T end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "splits" :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold_goal_until_conjunction;
  prefs: []
  type: TYPE_NORMAL
- en: let N := get_goal_conjunction_arity in
  prefs: []
  type: TYPE_NORMAL
- en: splits_tactic N.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "splits" constr(N) :=
  prefs: []
  type: TYPE_NORMAL
- en: let N := nat_from_number N in
  prefs: []
  type: TYPE_NORMAL
- en: splits_tactic N.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Ltac splits_all_base := repeat split.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits_all" :=
  prefs: []
  type: TYPE_NORMAL
- en: splits_all_base.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Ltac destructs_conjunction_tactic N T :=
  prefs: []
  type: TYPE_NORMAL
- en: match N with
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 ⇒ destruct T as [? ?]'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 ⇒ destruct T as [? [? ?]]'
  prefs: []
  type: TYPE_NORMAL
- en: '| 4 ⇒ destruct T as [? [? [? ?]]]'
  prefs: []
  type: TYPE_NORMAL
- en: '| 5 ⇒ destruct T as [? [? [? [? ?]]]]'
  prefs: []
  type: TYPE_NORMAL
- en: '| 6 ⇒ destruct T as [? [? [? [? [? ?]]]]]'
  prefs: []
  type: TYPE_NORMAL
- en: '| 7 ⇒ destruct T as [? [? [? [? [? [? ?]]]]]]'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "destructs" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: let TT := type of T in
  prefs: []
  type: TYPE_NORMAL
- en: let N := get_term_conjunction_arity TT in
  prefs: []
  type: TYPE_NORMAL
- en: destructs_conjunction_tactic N T.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "destructs" constr(N) constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: let N := nat_from_number N in
  prefs: []
  type: TYPE_NORMAL
- en: destructs_conjunction_tactic N T.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Ltac branch_tactic K N :=
  prefs: []
  type: TYPE_NORMAL
- en: match constr:((K,N)) with
  prefs: []
  type: TYPE_NORMAL
- en: '| (_,0) ⇒ fail 1'
  prefs: []
  type: TYPE_NORMAL
- en: '| (0,_) ⇒ fail 1'
  prefs: []
  type: TYPE_NORMAL
- en: '| (1,1) ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| (1,_) ⇒ left'
  prefs: []
  type: TYPE_NORMAL
- en: '| (S ?K'', S ?N'') ⇒ right; branch_tactic K'' N'''
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac unfold_goal_until_disjunction :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ _ ∨ _ ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ progress(unfolds); unfold_goal_until_disjunction'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_term_disjunction_arity T :=
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ⇒ constr:(8)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ⇒ constr:(7)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ⇒ constr:(6)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ∨ _ ∨ _ ⇒ constr:(5)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ∨ _ ⇒ constr:(4)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ⇒ constr:(3)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ⇒ constr:(2)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ → ?T'' ⇒ get_term_disjunction_arity T'''
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let P := get_head T in'
  prefs: []
  type: TYPE_NORMAL
- en: let T' := eval unfold P in T in
  prefs: []
  type: TYPE_NORMAL
- en: match T' with
  prefs: []
  type: TYPE_NORMAL
- en: '| T ⇒ fail 1'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ get_term_disjunction_arity T'''
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_goal_disjunction_arity :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?T ⇒ get_term_disjunction_arity T end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "branch" constr(K) :=
  prefs: []
  type: TYPE_NORMAL
- en: let K := nat_from_number K in
  prefs: []
  type: TYPE_NORMAL
- en: unfold_goal_until_disjunction;
  prefs: []
  type: TYPE_NORMAL
- en: let N := get_goal_disjunction_arity in
  prefs: []
  type: TYPE_NORMAL
- en: branch_tactic K N.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "branch" constr(K) "of" constr(N) :=
  prefs: []
  type: TYPE_NORMAL
- en: let N := nat_from_number N in
  prefs: []
  type: TYPE_NORMAL
- en: let K := nat_from_number K in
  prefs: []
  type: TYPE_NORMAL
- en: branch_tactic K N.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Ltac destructs_disjunction_tactic N T :=
  prefs: []
  type: TYPE_NORMAL
- en: match N with
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 ⇒ destruct T as [? | ?]'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 ⇒ destruct T as [? | [? | ?]]'
  prefs: []
  type: TYPE_NORMAL
- en: '| 4 ⇒ destruct T as [? | [? | [? | ?]]]'
  prefs: []
  type: TYPE_NORMAL
- en: '| 5 ⇒ destruct T as [? | [? | [? | [? | ?]]]]'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "branches" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: let TT := type of T in
  prefs: []
  type: TYPE_NORMAL
- en: let N := get_term_disjunction_arity TT in
  prefs: []
  type: TYPE_NORMAL
- en: destructs_disjunction_tactic N T.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "branches" constr(N) constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: let N := nat_from_number N in
  prefs: []
  type: TYPE_NORMAL
- en: destructs_disjunction_tactic N T.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: (* Underlying implementation of ∃. *)
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_term_existential_arity T :=
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3] x[4] x[5] x[6] x[7] x[8], _ ⇒ constr:(8)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3] x[4] x[5] x[6] x[7], _ ⇒ constr:(7)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3] x[4] x[5] x[6], _ ⇒ constr:(6)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3] x[4] x[5], _ ⇒ constr:(5)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3] x[4], _ ⇒ constr:(4)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3], _ ⇒ constr:(3)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2], _ ⇒ constr:(2)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1], _ ⇒ constr:(1)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ → ?T'' ⇒ get_term_existential_arity T'''
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let P := get_head T in'
  prefs: []
  type: TYPE_NORMAL
- en: let T' := eval unfold P in T in
  prefs: []
  type: TYPE_NORMAL
- en: match T' with
  prefs: []
  type: TYPE_NORMAL
- en: '| T ⇒ fail 1'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ get_term_existential_arity T'''
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_goal_existential_arity :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?T ⇒ get_term_existential_arity T end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "exists_original" constr(T[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: match T[1] with
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_wild ⇒ esplit'
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_wilds ⇒ repeat esplit'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ ∃T[1]'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) constr(T[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; ∃T[2].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) constr(T[2]) constr(T[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; ∃T[2]; ∃T[3].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; ∃T[2]; ∃T[3]; ∃T[4].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; ∃T[2]; ∃T[3]; ∃T[4]; ∃T[5].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) constr(T[6]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; ∃T[2]; ∃T[3]; ∃T[4]; ∃T[5]; ∃T[6].
  prefs: []
  type: TYPE_NORMAL
- en: (* The tactic exists___ N is short for ∃ __ ... __    with N double-underscores. The tactic ∃ is equivalent 
       to calling exists___ N, where the value of N is obtained    by counting the number of existentials syntactically present
       at the head of the goal. The behaviour of ∃ differs    from that of ∃ ___ is the case where the goal is a
       definition which yields an existential only after unfolding. *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists___" constr(N) :=
  prefs: []
  type: TYPE_NORMAL
- en: let rec aux N :=
  prefs: []
  type: TYPE_NORMAL
- en: match N with
  prefs: []
  type: TYPE_NORMAL
- en: '| 0 ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| S ?N'' ⇒ esplit; aux N'''
  prefs: []
  type: TYPE_NORMAL
- en: end in
  prefs: []
  type: TYPE_NORMAL
- en: let N := nat_from_number N in aux N.
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: deprecated *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists___" :=
  prefs: []
  type: TYPE_NORMAL
- en: let N := get_goal_existential_arity in
  prefs: []
  type: TYPE_NORMAL
- en: exists___ N.
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: does not seem to work *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" :=
  prefs: []
  type: TYPE_NORMAL
- en: exists___.
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: exists_all is the new syntax for exists___ *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists_all" := exists___.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Ltac unpack_core :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| H: _ ∧ _ ⊢ _ ⇒ destruct H'
  prefs: []
  type: TYPE_NORMAL
- en: '| H: ∃a, _ ⊢ _ ⇒ destruct H'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac unpack_from H :=
  prefs: []
  type: TYPE_NORMAL
- en: first [ progress (unpack_core)
  prefs: []
  type: TYPE_NORMAL
- en: '| destruct H; unpack_core ].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unpack" :=
  prefs: []
  type: TYPE_NORMAL
- en: unpack_core.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unpack" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: unpack_from H.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "typeclass" :=
  prefs: []
  type: TYPE_NORMAL
- en: let go _ := eauto with typeclass_instances in
  prefs: []
  type: TYPE_NORMAL
- en: solve [ go tt | constructor; go tt ].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "solve_typeclass" :=
  prefs: []
  type: TYPE_NORMAL
- en: solve [ eauto with typeclass_instances ].
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "f_equal" :=
  prefs: []
  type: TYPE_NORMAL
- en: f_equal.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "constructor" :=
  prefs: []
  type: TYPE_NORMAL
- en: constructor.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simple" :=
  prefs: []
  type: TYPE_NORMAL
- en: simpl.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "split" :=
  prefs: []
  type: TYPE_NORMAL
- en: split.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "right" :=
  prefs: []
  type: TYPE_NORMAL
- en: right.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "left" :=
  prefs: []
  type: TYPE_NORMAL
- en: left.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "hint" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh "Hint" in lets H: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hint" constr(E[1]) "," constr(E[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: hint E[1]; hint E[2].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hint" constr(E[1]) "," constr(E[2]) "," constr(E[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: hint E[1]; hint E[2]; hint(E[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hint" constr(E[1]) "," constr(E[2]) "," constr(E[3]) "," constr(E[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: hint E[1]; hint E[2]; hint(E[3]); hint(E[4] ).
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "jauto" :=
  prefs: []
  type: TYPE_NORMAL
- en: try solve [ jauto_set; eauto ].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "jauto_fast" :=
  prefs: []
  type: TYPE_NORMAL
- en: try solve [ auto | eauto | jauto ].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "iauto" := try solve [intuition eauto].
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: Ltac auto_tilde_default := auto.
  prefs: []
  type: TYPE_NORMAL
- en: Ltac auto_tilde := auto_tilde_default.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: (* SPECIAL VERSION FOR SF*)
  prefs: []
  type: TYPE_NORMAL
- en: Ltac auto_star_default := try solve [ jauto ].
  prefs: []
  type: TYPE_NORMAL
- en: Ltac auto_star := auto_star_default.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "autos" :=
  prefs: []
  type: TYPE_NORMAL
- en: auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "¬" constr(E[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "¬" constr(E[1]) constr(E[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; lets: E[2]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "¬" constr(E[1]) constr(E[2]) constr(E[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; lets: E[2]; lets: E[3]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "autos" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "*" constr(E[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "*" constr(E[1]) constr(E[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; lets: E[2]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "*" constr(E[1]) constr(E[2]) constr(E[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; lets: E[2]; lets: E[3]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Ltac auto_false_base cont :=
  prefs: []
  type: TYPE_NORMAL
- en: try solve [
  prefs: []
  type: TYPE_NORMAL
- en: intros_all; try match goal with ⊢ _ ↔ _ ⇒ split end;
  prefs: []
  type: TYPE_NORMAL
- en: solve [ cont tt | intros_all; false; cont tt ] ].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "auto_false" :=
  prefs: []
  type: TYPE_NORMAL
- en: auto_false_base ltac:(fun tt ⇒ auto).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "auto_false" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: auto_false_base ltac:(fun tt ⇒ auto_tilde).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "auto_false" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: auto_false_base ltac:(fun tt ⇒ auto_star).
  prefs: []
  type: TYPE_NORMAL
- en: (* NOT NEEDED FOR SF (incompatible with V[8].4)  Tactic Notation "dauto" :=
      dintuition eauto. *)
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "equates" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: equates E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "¬" constr(n[1]) constr(n[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "¬" constr(n[1]) constr(n[2]) constr(n[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2] n[3]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "¬" constr(n[1]) constr(n[2]) constr(n[3]) constr(n[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2] n[3] n[4]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "¬" constr(H) constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "¬" constr(H) constr(n[1]) constr(n[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "¬" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2] n[3]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "¬" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    constr(n[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2] n[3] n[4]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "apply" "¬" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: sapply H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct" "¬" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct" "¬" constr(H) "as" simple_intropattern(I) :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct H as I; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "f_equal" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: f_equal; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "induction" "¬" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: induction H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inversion" "¬" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: inversion H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "split" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: split; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: subst; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "right" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: right; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "left" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: left; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "constructor" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: constructor; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "constructors" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: constructors; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: false; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: false_then E ltac:(fun _ ⇒ auto_tilde).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" constr(E[0]) constr(E[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: false¬ (>> E[0] E[1]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" constr(E[0]) constr(E[1]) constr(E[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: false¬ (>> E[0] E[1] E[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" constr(E[0]) constr(E[1]) constr(E[2]) constr(E[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: false¬ (>> E[0] E[1] E[2] E[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" constr(E[0]) constr(E[1]) constr(E[2]) constr(E[3])
    constr(E[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: false¬ (>> E[0] E[1] E[2] E[3] E[4]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "tryfalse" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: try solve [ false¬ ].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" "¬" simple_intropattern(H) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'asserts H: E; [ auto_tilde | idtac ].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" "¬" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh "H" in asserts¬ H: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" "¬" simple_intropattern(H) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts H: E; [ auto_tilde | idtac ].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" "¬" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts: E; [ auto_tilde | idtac ].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3] A[4]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3] A[4] A[5]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3] A[4]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3] A[4] A[5]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3] A[4]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3] A[4] A[5]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3] A[4]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3] A[4] A[5]; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: sapply H; auto_tilde. (*todo?*)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3] A[4]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3] A[4] A[5]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" "¬" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" "¬" hyp(H) constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3] A[4]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3] A[4] A[5]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fapply" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: fapply E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sapply" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: sapply E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "logic" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: logic_base E ltac:(fun _ ⇒ auto_tilde).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intros_all" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: intros_all; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "¬" constr(F[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "¬" constr(F[1]) "," constr(F[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "¬" constr(F[1]) "," constr(F[2]) "," constr(F[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2], F[3]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "¬" constr(F[1]) "," constr(F[2]) "," constr(F[3])
    ","
  prefs: []
  type: TYPE_NORMAL
- en: constr(F[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2], F[3], F[4]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simple" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: simpl; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simple" "¬" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: simpl in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simpls" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: simpls; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hnfs" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: hnfs; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hnfs" "¬" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: hnf in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "substs" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: substs; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intro_hyp" "¬" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: subst_hyp H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intro_subst" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: intro_subst; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst_eq" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: subst_eq E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "¬" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite ← E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "¬" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite E in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "¬" "←" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite ← E in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E in *; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" "←" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" "←" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E in *; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" constr(E) "in" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" "←" constr(E) "in" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E in *; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" "←" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E in *; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" "←" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E in *; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" "←" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E in *; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "¬" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite ← E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "¬" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite E in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "¬" "←" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite ← E in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "erewrite" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: erewrite E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fequal" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: fequal; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fequals" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: fequals; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "pi_rewrite" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: pi_rewrite E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "pi_rewrite" "¬" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: pi_rewrite E in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "invert" "¬" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "¬" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "¬" hyp(E) "as" :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts E as; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "injects" "¬" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: injects H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inversions" "¬" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: inversions H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases" "¬" constr(E) "as" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases E as H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: case_if; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_ifs" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: case_ifs; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "¬" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: case_if in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: cases_if; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "¬" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases_if in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "¬" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if in H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_head_match" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct_head_match; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases'" "¬" constr(E) "as" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases' E as H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases'" "¬" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases' E; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" "¬" "as" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases_if' as H; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: cases_if'; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "decides_equality" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: decides_equality; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: iff; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: splits; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits" "¬" constr(N) :=
  prefs: []
  type: TYPE_NORMAL
- en: splits N; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits_all" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: splits_all; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destructs" "¬" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: destructs T; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destructs" "¬" constr(N) constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: destructs N T; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branch" "¬" constr(N) :=
  prefs: []
  type: TYPE_NORMAL
- en: branch N; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branch" "¬" constr(K) "of" constr(N) :=
  prefs: []
  type: TYPE_NORMAL
- en: branch K of N; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branches" "¬" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: branches T; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branches" "¬" constr(N) constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: branches N T; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists___" "¬" :=
  prefs: []
  type: TYPE_NORMAL
- en: exists___; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) constr(T[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) constr(T[2]) constr(T[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4] T[5]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) constr(T[6]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4] T[5] T[6]; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "equates" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: equates E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "*" constr(n[1]) constr(n[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "*" constr(n[1]) constr(n[2]) constr(n[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2] n[3]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "*" constr(n[1]) constr(n[2]) constr(n[3]) constr(n[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2] n[3] n[4]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "*" constr(H) constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "*" constr(H) constr(n[1]) constr(n[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "*" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2] n[3]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "*" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    constr(n[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2] n[3] n[4]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "apply" "*" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: sapply H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct" "*" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct" "*" constr(H) "as" simple_intropattern(I) :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct H as I; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "f_equal" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: f_equal; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "induction" "*" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: induction H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inversion" "*" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: inversion H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "split" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: split; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subs" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: subst; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: subst; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "right" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: right; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "left" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: left; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "constructor" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: constructor; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "constructors" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: constructors; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: false; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: false_then E ltac:(fun _ ⇒ auto_star).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" constr(E[0]) constr(E[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: false* (>> E[0] E[1]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" constr(E[0]) constr(E[1]) constr(E[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: false* (>> E[0] E[1] E[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" constr(E[0]) constr(E[1]) constr(E[2]) constr(E[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: false* (>> E[0] E[1] E[2] E[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" constr(E[0]) constr(E[1]) constr(E[2]) constr(E[3])
    constr(E[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: false* (>> E[0] E[1] E[2] E[3] E[4]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "tryfalse" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: try solve [ false* ].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" "*" simple_intropattern(H) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'asserts H: E; [ auto_star | idtac ].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" "*" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh "H" in asserts* H: E.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" "*" simple_intropattern(H) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts H: E; [ auto_star | idtac ].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" "*" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts: E; [ auto_star | idtac ].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3] A[4]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3] A[4] A[5]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3] A[4]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3] A[4] A[5]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3] A[4]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3] A[4] A[5]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3] A[4]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E[0])
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3] A[4] A[5]; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: sapply H; auto_star. (*todo?*)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3] A[4]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3] A[4] A[5]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" "*" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" "¬" hyp(H) constr(A[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3] A[4]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3] A[4] A[5]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fapply" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: fapply E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sapply" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: sapply E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "logic" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: logic_base E ltac:(fun _ ⇒ auto_star).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intros_all" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: intros_all; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "*" constr(F[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "*" constr(F[1]) "," constr(F[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "*" constr(F[1]) "," constr(F[2]) "," constr(F[3])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2], F[3]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "*" constr(F[1]) "," constr(F[2]) "," constr(F[3])
    ","
  prefs: []
  type: TYPE_NORMAL
- en: constr(F[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2], F[3], F[4]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simple" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: simpl; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simple" "*" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: simpl in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simpls" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: simpls; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hnfs" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: hnfs; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hnfs" "*" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: hnf in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "substs" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: substs; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intro_hyp" "*" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: subst_hyp H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intro_subst" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: intro_subst; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst_eq" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: subst_eq E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "*" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite ← E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "*" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite E in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "*" "←" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite ← E in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" constr(E) "in" hyp(H):=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" constr(E) "in" "*":=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E in *; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" "←" constr(E) "in" hyp(H):=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" "←" constr(E) "in" "*":=
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E in *; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" constr(E) "in" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" "←" constr(E) "in" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E in *; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" "←" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E in *; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" "←" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E in *; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" "←" constr(E) "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E in *; auto_tilde.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "*" "←" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite ← E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "*" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite E in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "*" "←" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite ← E in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "erewrite" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: erewrite E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fequal" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: fequal; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fequals" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: fequals; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "pi_rewrite" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: pi_rewrite E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "pi_rewrite" "*" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: pi_rewrite E in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "invert" "*" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: invert H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "*" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "*" hyp(E) "as" :=
  prefs: []
  type: TYPE_NORMAL
- en: inverts E as; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "injects" "*" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: injects H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inversions" "*" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: inversions H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases" "*" constr(E) "as" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases E as H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: case_if; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_ifs" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: case_ifs; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "*" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: case_if in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: cases_if; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "*" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases_if in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "*" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if in H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_head_match" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: destruct_head_match; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases'" "*" constr(E) "as" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases' E as H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases'" "*" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases' E; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" "*" "as" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: cases_if' as H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: cases_if'; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "decides_equality" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: decides_equality; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: iff; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "*" simple_intropattern(I) :=
  prefs: []
  type: TYPE_NORMAL
- en: iff I; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: splits; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits" "*" constr(N) :=
  prefs: []
  type: TYPE_NORMAL
- en: splits N; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits_all" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: splits_all; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destructs" "*" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: destructs T; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destructs" "*" constr(N) constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: destructs N T; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branch" "*" constr(N) :=
  prefs: []
  type: TYPE_NORMAL
- en: branch N; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branch" "*" constr(K) "of" constr(N) :=
  prefs: []
  type: TYPE_NORMAL
- en: branch K of N; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branches" "*" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: branches T; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branches" "*" constr(N) constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: branches N T; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists___" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: exists___; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) constr(T[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) constr(T[2]) constr(T[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4] T[5]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) constr(T[6]) :=
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4] T[5] T[6]; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: (* Implementation *)
  prefs: []
  type: TYPE_NORMAL
- en: Definition ltac_something (P:Type) (e:P) := e.
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'Something'" :=
  prefs: []
  type: TYPE_NORMAL
- en: (@ltac_something _ _).
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma ltac_something_eq : ∀(e:Type),'
  prefs: []
  type: TYPE_NORMAL
- en: e = (@ltac_something _ e).
  prefs: []
  type: TYPE_NORMAL
- en: Proof using. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma ltac_something_hide : ∀(e:Type),'
  prefs: []
  type: TYPE_NORMAL
- en: e → (@ltac_something _ e).
  prefs: []
  type: TYPE_NORMAL
- en: Proof using. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma ltac_something_show : ∀(e:Type),'
  prefs: []
  type: TYPE_NORMAL
- en: (@ltac_something _ e) → e.
  prefs: []
  type: TYPE_NORMAL
- en: Proof using. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "hide_def" hyp(x) :=
  prefs: []
  type: TYPE_NORMAL
- en: let x' := constr:(x) in
  prefs: []
  type: TYPE_NORMAL
- en: let T := eval unfold x in x' in
  prefs: []
  type: TYPE_NORMAL
- en: change T with (@ltac_something _ T) in x.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_def" hyp(x) :=
  prefs: []
  type: TYPE_NORMAL
- en: let x' := constr:(x) in
  prefs: []
  type: TYPE_NORMAL
- en: let U := eval unfold x in x' in
  prefs: []
  type: TYPE_NORMAL
- en: match U with @ltac_something _ ?T ⇒
  prefs: []
  type: TYPE_NORMAL
- en: change U with T in x end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "show_def" :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_def" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something in H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_def" "in" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something in *.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "hide_defs" :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with H := ?T ⊢ _ ⇒
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| @ltac_something _ _ ⇒ fail 1'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ change T with (@ltac_something _ T) in H'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_defs" :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with H := (@ltac_something _ ?T) ⊢ _ ⇒
  prefs: []
  type: TYPE_NORMAL
- en: change (@ltac_something _ T) with T in H end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "show_hyp" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: apply ltac_something_show in H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hide_hyp" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: apply ltac_something_hide in H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "show_hyps" :=
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with
  prefs: []
  type: TYPE_NORMAL
- en: 'H: @ltac_something _ _ ⊢ _ ⇒ show_hyp H end.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hide_hyps" :=
  prefs: []
  type: TYPE_NORMAL
- en: 'repeat match goal with H: ?T ⊢ _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match type of T with
  prefs: []
  type: TYPE_NORMAL
- en: '| Prop ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  prefs: []
  type: TYPE_NORMAL
- en: '| @ltac_something _ _ ⇒ fail 2'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ hide_hyp H'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ fail 1'
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "hide" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: first [hide_def H | hide_hyp H].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: first [show_def H | show_hyp H].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hide_all" :=
  prefs: []
  type: TYPE_NORMAL
- en: hide_hyps; hide_defs.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_all" :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something in *.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "hide_term" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: change E with (@ltac_something _ E).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_term" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: change (@ltac_something _ E) with E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_term" :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hide_term" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: change E with (@ltac_something _ E) in H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_term" constr(E) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: change (@ltac_something _ E) with E in H.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_term" "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something in H.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: (* todo: change "unfolds" *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_unfold" constr(R[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold R[1]; show_def.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_unfold" constr(R[1]) "," constr(R[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: unfold R[1], R[2]; show_def.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: Ltac sort_tactic :=
  prefs: []
  type: TYPE_NORMAL
- en: 'try match goal with H: ?T ⊢ _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match type of T with Prop ⇒
  prefs: []
  type: TYPE_NORMAL
- en: generalizes H; (try sort_tactic); intro
  prefs: []
  type: TYPE_NORMAL
- en: end end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sort" :=
  prefs: []
  type: TYPE_NORMAL
- en: sort_tactic.
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "clears" ident(X[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: let rec doit _ :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  prefs: []
  type: TYPE_NORMAL
- en: '| H:context[X[1]] ⊢ _ ⇒ clear H; try (doit tt)'
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ clear X[1]'
  prefs: []
  type: TYPE_NORMAL
- en: end in doit tt.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" ident(X[1]) ident(X[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: clears X[1]; clears X[2].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" ident(X[1]) ident(X[2]) ident(X[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: clears X[1]; clears X[2]; clears X[3].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) :=
  prefs: []
  type: TYPE_NORMAL
- en: clears X[1]; clears X[2]; clears X[3]; clears X[4].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: clears X[1]; clears X[2]; clears X[3]; clears X[4]; clears X[5].
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4])
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[5]) ident(X[6]) :=
  prefs: []
  type: TYPE_NORMAL
- en: clears X[1]; clears X[2]; clears X[3]; clears X[4]; clears X[5]; clears X[6].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: (* todo: rename to clears_var ? *)
  prefs: []
  type: TYPE_NORMAL
- en: Ltac clears_tactic :=
  prefs: []
  type: TYPE_NORMAL
- en: 'match goal with H: ?T ⊢ _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: match type of T with
  prefs: []
  type: TYPE_NORMAL
- en: '| Prop ⇒ generalizes H; (try clears_tactic); intro'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?TT ⇒ clear H; (try clears_tactic)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ?TT ⇒ generalizes H; (try clears_tactic); intro'
  prefs: []
  type: TYPE_NORMAL
- en: end end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" :=
  prefs: []
  type: TYPE_NORMAL
- en: clears_tactic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: Ltac clears_or_generalizes_all_core :=
  prefs: []
  type: TYPE_NORMAL
- en: 'repeat match goal with H: _ ⊢ _ ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: first [ clear H | generalizes H] end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_all" :=
  prefs: []
  type: TYPE_NORMAL
- en: generalize ltac_mark;
  prefs: []
  type: TYPE_NORMAL
- en: clears_or_generalizes_all_core;
  prefs: []
  type: TYPE_NORMAL
- en: intro_until_mark.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Ltac clears_but_core cont :=
  prefs: []
  type: TYPE_NORMAL
- en: generalize ltac_mark;
  prefs: []
  type: TYPE_NORMAL
- en: cont tt;
  prefs: []
  type: TYPE_NORMAL
- en: clears_or_generalizes_all_core;
  prefs: []
  type: TYPE_NORMAL
- en: intro_until_mark.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" :=
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ idtac).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" ident(H[1]) :=
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ gen H[1]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" ident(H[1]) ident(H[2]) :=
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ gen H[1] H[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" ident(H[1]) ident(H[2]) ident(H[3]) :=
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ gen H[1] H[2] H[3]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" ident(H[1]) ident(H[2]) ident(H[3]) ident(H[4])
    :=
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ gen H[1] H[2] H[3] H[4]).
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" ident(H[1]) ident(H[2]) ident(H[3]) ident(H[4])
    ident(H[5]) :=
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ gen H[1] H[2] H[3] H[4] H[5]).
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma demo_clears_all_and_clears_but :'
  prefs: []
  type: TYPE_NORMAL
- en: ∀x y:nat, y < 2 → x = x → x ≥ 2 → x < 3 → True.
  prefs: []
  type: TYPE_NORMAL
- en: Proof using.
  prefs: []
  type: TYPE_NORMAL
- en: introv M[1] M[2] M[3]. dup 6.
  prefs: []
  type: TYPE_NORMAL
- en: (* clears_all clears all hypotheses. *)
  prefs: []
  type: TYPE_NORMAL
- en: clears_all. auto.
  prefs: []
  type: TYPE_NORMAL
- en: (* clears_but H clears all but H *)
  prefs: []
  type: TYPE_NORMAL
- en: clears_but M[3]. auto.
  prefs: []
  type: TYPE_NORMAL
- en: clears_but y. auto.
  prefs: []
  type: TYPE_NORMAL
- en: clears_but x. auto.
  prefs: []
  type: TYPE_NORMAL
- en: clears_but M[2] M[3]. auto.
  prefs: []
  type: TYPE_NORMAL
- en: clears_but x y. auto.
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "clears_last" :=
  prefs: []
  type: TYPE_NORMAL
- en: 'match goal with H: ?T ⊢ _ ⇒ clear H end.'
  prefs: []
  type: TYPE_NORMAL
- en: Ltac clears_last_base N :=
  prefs: []
  type: TYPE_NORMAL
- en: match nat_from_number N with
  prefs: []
  type: TYPE_NORMAL
- en: '| 0 ⇒ idtac'
  prefs: []
  type: TYPE_NORMAL
- en: '| S ?p ⇒ clears_last; clears_last_base p'
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_last" constr(N) :=
  prefs: []
  type: TYPE_NORMAL
- en: clears_last_base N.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: (* ---------------------------------------------------------------------- *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: Ltac skip_with_existential :=
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?G ⇒
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh in evar(H:G); eexact H end.
  prefs: []
  type: TYPE_NORMAL
- en: (* TO BE DEPRECATED: *)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameter skip_axiom : False.'
  prefs: []
  type: TYPE_NORMAL
- en: '(* To obtain a safe development, change to skip_axiom : True *)'
  prefs: []
  type: TYPE_NORMAL
- en: Ltac skip_with_axiom :=
  prefs: []
  type: TYPE_NORMAL
- en: elimtype False; apply skip_axiom.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" :=
  prefs: []
  type: TYPE_NORMAL
- en: skip_with_axiom.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip'" :=
  prefs: []
  type: TYPE_NORMAL
- en: skip_with_existential.
  prefs: []
  type: TYPE_NORMAL
- en: (* SF DOES NOT NEED THIS (* For backward compatibility *) Tactic Notation "admit" := 
      skip. *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "demo" :=
  prefs: []
  type: TYPE_NORMAL
- en: skip.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "skip" simple_intropattern(I) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'asserts I: T; [ skip | ].'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh in skip H: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" "¬" ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'skip: T; auto_tilde.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" "*" ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'skip: T; auto_star.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'skip [I[1] I[2]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'skip [I[1] [I[2] I[3]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'skip [I[1] [I[2] [I[3] I[4]]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) simple_intropattern(I[5]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'skip [I[1] [I[2] [I[3] [I[4] I[5]]]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" simple_intropattern(I[1])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) simple_intropattern(I[5])
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[6]) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'skip [I[1] [I[2] [I[3] [I[4] [I[5] I[6]]]]]]: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip_asserts" simple_intropattern(I) ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'skip I: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip_asserts" ":" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'skip: T.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "skip_cuts" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts: T; [ skip | ].'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "skip_goal" ident(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'match goal with ⊢ ?G ⇒ skip H: G end.'
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip_goal" :=
  prefs: []
  type: TYPE_NORMAL
- en: let IH := fresh "IH" in skip_goal IH.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "skip_rewrite" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let M := fresh in skip_asserts M: T; rewrite M; clear M.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "skip_rewrite" constr(T) "in" hyp(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let M := fresh in skip_asserts M: T; rewrite M in H; clear M.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Tactic Notation "skip_rewrite_all" constr(T) :=
  prefs: []
  type: TYPE_NORMAL
- en: 'let M := fresh in skip_asserts M: T; rewrite_all M; clear M.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: (* TODO: deprecated *)
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip_induction" constr(E) :=
  prefs: []
  type: TYPE_NORMAL
- en: let IH := fresh "IH" in skip_goal IH; destruct E.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip_induction" constr(E) "as" simple_intropattern(I) :=
  prefs: []
  type: TYPE_NORMAL
- en: let IH := fresh "IH" in skip_goal IH; destruct E as I.
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: Module LibTacticsCompatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "apply" "*" constr(H) :=
  prefs: []
  type: TYPE_NORMAL
- en: sapply H; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst" "*" :=
  prefs: []
  type: TYPE_NORMAL
- en: subst; auto_star.
  prefs: []
  type: TYPE_NORMAL
- en: End LibTacticsCompatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Open Scope nat_scope.
  prefs: []
  type: TYPE_NORMAL
- en: (* /DROP *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
