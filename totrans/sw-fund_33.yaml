- en: LibTacticsA Collection of Handy General-Purpose Tactics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LibTacticsA Collection of Handy General-Purpose Tactics
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (* Chapter maintained by Arthur Chargueraud *)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: (* Chapter maintained by Arthur Chargueraud *)
- en: '[PRE1]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (* DROP *)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: (* DROP *)
- en: Set Implicit Arguments.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Set Implicit Arguments.
- en: Require Import List.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Require Import List.
- en: '(* Very important to remove hint trans_eq_bool from LibBool,    otherwise eauto slows down dramatically:
      Lemma test : forall b, b = false.   time eauto 7. (* takes over 4 seconds  to fail! *) *)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '(* Very important to remove hint trans_eq_bool from LibBool,    otherwise eauto slows down dramatically:
       Lemma test : forall b, b = false.    time eauto 7. (* takes over 4 seconds  to fail! *) *)'
- en: Remove Hints Bool.trans_eq_bool.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Remove Hints Bool.trans_eq_bool.
- en: (* ********************************************************************** *)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: (* ********************************************************************** *)
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Ltac idcont tt :=
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac idcont tt :=
- en: idtac.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: idtac.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Inductive Boxer : Type :='
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'Inductive Boxer : Type :='
- en: '| boxer : ∀(A:Type), A → Boxer.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '| boxer : ∀(A:Type), A → Boxer.'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Inductive ltac_No_arg : Set :='
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'Inductive ltac_No_arg : Set :='
- en: '| ltac_no_arg : ltac_No_arg.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '| ltac_no_arg : ltac_No_arg.'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Inductive ltac_Wild : Set :='
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 'Inductive ltac_Wild : Set :='
- en: '| ltac_wild : ltac_Wild.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '| ltac_wild : ltac_Wild.'
- en: 'Notation "''__''" := ltac_wild : ltac_scope.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 'Notation "''__''" := ltac_wild : ltac_scope.'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Inductive ltac_Wilds : Set :='
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'Inductive ltac_Wilds : Set :='
- en: '| ltac_wilds : ltac_Wilds.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '| ltac_wilds : ltac_Wilds.'
- en: 'Notation "''___''" := ltac_wilds : ltac_scope.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 'Notation "''___''" := ltac_wilds : ltac_scope.'
- en: Open Scope ltac_scope.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Open Scope ltac_scope.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Inductive ltac_Mark : Type :='
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 'Inductive ltac_Mark : Type :='
- en: '| ltac_mark : ltac_Mark.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '| ltac_mark : ltac_Mark.'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ltac gen_until_mark :=
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac gen_until_mark :=
- en: 'match goal with H: ?T ⊢ _ ⇒'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 'match goal with H: ?T ⊢ _ ⇒'
- en: match T with
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: match T with
- en: '| ltac_Mark ⇒ clear H'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '| ltac_Mark ⇒ clear H'
- en: '| _ ⇒ generalize H; clear H; gen_until_mark'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ generalize H; clear H; gen_until_mark'
- en: end end.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: end end.
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Ltac intro_until_mark :=
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac intro_until_mark :=
- en: match goal with
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: match goal with
- en: '| ⊢ (ltac_Mark → _) ⇒ intros _'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (ltac_Mark → _) ⇒ intros _'
- en: '| _ ⇒ intro; intro_until_mark'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ intro; intro_until_mark'
- en: end.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notation "'>>'" :=
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Notation "'>>'" :=
- en: (@nil Boxer)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: (@nil Boxer)
- en: (at level 0)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: (at level 0)
- en: ': ltac_scope.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1" :=
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Notation "'>>' v1" :=
- en: ((boxer v[1])::nil)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ((boxer v[1])::nil)
- en: (at level 0, v[1] at level 0)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: (at level 0, v[1] at level 0)
- en: ': ltac_scope.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2" :=
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Notation "'>>' v1 v2" :=
- en: ((boxer v[1])::(boxer v[2])::nil)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ((boxer v[1])::(boxer v[2])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: (at level 0, v[1] at level 0, v[2] at level 0)
- en: ': ltac_scope.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2 v3" :=
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Notation "'>>' v1 v2 v3" :=
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::nil)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ((boxer v[1])::(boxer v[2])::(boxer v[3])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0)
- en: ': ltac_scope.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2 v3 v4" :=
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Notation "'>>' v1 v2 v3 v4" :=
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::nil)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
- en: v[4] at level 0)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: v[4] at level 0)
- en: ': ltac_scope.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2 v3 v4 v5" :=
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Notation "'>>' v1 v2 v3 v4 v5" :=
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])::nil)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
- en: v[4] at level 0, v[5] at level 0)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: v[4] at level 0, v[5] at level 0)
- en: ': ltac_scope.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2 v3 v4 v5 v6" :=
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Notation "'>>' v1 v2 v3 v4 v5 v6" :=
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
- en: ::(boxer v[6])::nil)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ::(boxer v[6])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: v[4] at level 0, v[5] at level 0, v[6] at level 0)
- en: ': ltac_scope.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7" :=
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Notation "'>>' v1 v2 v3 v4 v5 v6 v7" :=
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
- en: ::(boxer v[6])::(boxer v[7])::nil)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ::(boxer v[6])::(boxer v[7])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0)
- en: ': ltac_scope.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8" :=
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 符号 "'>>' v1 v2 v3 v4 v5 v6 v7 v8" :=
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ((拳击手 v[1])::(拳击手 v[2])::(拳击手 v[3])::(拳击手 v[4])::(拳击手 v[5])
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::nil)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ::(拳击手 v[6])::(拳击手 v[7])::(拳击手 v[8])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: (在 0 级, v[1] 在 0 级, v[2] 在 0 级, v[3] 在 0 级,
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: v[4] 在 0 级, v[5] 在 0 级, v[6] 在 0 级, v[7] 在 0 级,
- en: v[8] at level 0)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: v[8] 在 0 级)
- en: ': ltac_scope.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9" :=
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 符号 "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9" :=
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ((拳击手 v[1])::(拳击手 v[2])::(拳击手 v[3])::(拳击手 v[4])::(拳击手 v[5])
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::(boxer v[9])::nil)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: ::(拳击手 v[6])::(拳击手 v[7])::(拳击手 v[8])::(拳击手 v[9])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: (在 0 级, v[1] 在 0 级, v[2] 在 0 级, v[3] 在 0 级,
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: v[4] 在 0 级, v[5] 在 0 级, v[6] 在 0 级, v[7] 在 0 级,
- en: v[8] at level 0, v[9] at level 0)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: v[8] 在 0 级, v[9] 在 0 级)
- en: ': ltac_scope.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10" :=
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 符号 "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10" :=
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ((拳击手 v[1])::(拳击手 v[2])::(拳击手 v[3])::(拳击手 v[4])::(拳击手 v[5])
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::(boxer v[9])::(boxer v[10])::nil)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ::(拳击手 v[6])::(拳击手 v[7])::(拳击手 v[8])::(拳击手 v[9])::(拳击手 v[10])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: (在 0 级, v[1] 在 0 级, v[2] 在 0 级, v[3] 在 0 级,
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: v[4] 在 0 级, v[5] 在 0 级, v[6] 在 0 级, v[7] 在 0 级,
- en: v[8] at level 0, v[9] at level 0, v[10] at level 0)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: v[8] 在 0 级, v[9] 在 0 级, v[10] 在 0 级)
- en: ': ltac_scope.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11" :=
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 符号 "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11" :=
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ((拳击手 v[1])::(拳击手 v[2])::(拳击手 v[3])::(拳击手 v[4])::(拳击手 v[5])
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::(boxer v[9])::(boxer v[10])
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: ::(拳击手 v[6])::(拳击手 v[7])::(拳击手 v[8])::(拳击手 v[9])::(拳击手 v[10])
- en: ::(boxer v[11])::nil)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ::(拳击手 v[11])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: (在 0 级, v[1] 在 0 级, v[2] 在 0 级, v[3] 在 0 级,
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: v[4] 在 0 级, v[5] 在 0 级, v[6] 在 0 级, v[7] 在 0 级,
- en: v[8] at level 0, v[9] at level 0, v[10] at level 0, v[11] at level 0)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: v[8] 在 0 级, v[9] 在 0 级, v[10] 在 0 级, v[11] 在 0 级)
- en: ': ltac_scope.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12" :=
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 符号 "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12" :=
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ((拳击手 v[1])::(拳击手 v[2])::(拳击手 v[3])::(拳击手 v[4])::(拳击手 v[5])
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::(boxer v[9])::(boxer v[10])
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ::(拳击手 v[6])::(拳击手 v[7])::(拳击手 v[8])::(拳击手 v[9])::(拳击手 v[10])
- en: ::(boxer v[11])::(boxer v[12])::nil)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: ::(拳击手 v[11])::(拳击手 v[12])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: (在 0 级, v[1] 在 0 级, v[2] 在 0 级, v[3] 在 0 级,
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: v[4] 在 0 级, v[5] 在 0 级, v[6] 在 0 级, v[7] 在 0 级,
- en: v[8] at level 0, v[9] at level 0, v[10] at level 0, v[11] at level 0,
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: v[8] 在 0 级, v[9] 在 0 级, v[10] 在 0 级, v[11] 在 0 级,
- en: v[12] at level 0)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: v[12] 在 0 级)
- en: ': ltac_scope.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: Notation "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13" :=
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 符号 "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13" :=
- en: ((boxer v[1])::(boxer v[2])::(boxer v[3])::(boxer v[4])::(boxer v[5])
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ((拳击手 v[1])::(拳击手 v[2])::(拳击手 v[3])::(拳击手 v[4])::(拳击手 v[5])
- en: ::(boxer v[6])::(boxer v[7])::(boxer v[8])::(boxer v[9])::(boxer v[10])
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: ::(拳击手 v[6])::(拳击手 v[7])::(拳击手 v[8])::(拳击手 v[9])::(拳��手 v[10])
- en: ::(boxer v[11])::(boxer v[12])::(boxer v[13])::nil)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ::(拳击手 v[11])::(拳击手 v[12])::(拳击手 v[13])::nil)
- en: (at level 0, v[1] at level 0, v[2] at level 0, v[3] at level 0,
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: (在 0 级, v[1] 在 0 级, v[2] 在 0 级, v[3] 在 0 级,
- en: v[4] at level 0, v[5] at level 0, v[6] at level 0, v[7] at level 0,
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: v[4] 在 0 级, v[5] 在 0 级, v[6] 在 0 级, v[7] 在 0 级,
- en: v[8] at level 0, v[9] at level 0, v[10] at level 0, v[11] at level 0,
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: v[8] 在 0 级, v[9] 在 0 级, v[10] 在 0 级, v[11] 在 0 级,
- en: v[12] at level 0, v[13] at level 0)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: v[12] 在 0 级, v[13] 在 0 级)
- en: ': ltac_scope.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ': ltac_scope.'
- en: '[PRE12]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Ltac list_boxer_of E :=
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac list_boxer_of E :=
- en: match type of E with
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 E 的类型
- en: '| List.list Boxer ⇒ constr:(E)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '| List.list 拳击手 ⇒ 构造:(E)'
- en: '| _ ⇒ constr:((boxer E)::nil)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ 构造:((拳击手 E)::nil)'
- en: end.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Inductive Ltac_database_token : Prop := ltac_database_token.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '归纳 Ltac_database_token : 命题 := ltac_database_token.'
- en: Definition ltac_database (D:Boxer) (T:Boxer) (A:Boxer) := Ltac_database_token.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 ltac_database (D:拳击手) (T:拳击手) (A:拳击手) := Ltac_database_token.
- en: Notation "'Register' D T" := (ltac_database (boxer D) (boxer T) _)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 符号 "'Register' D T" := (ltac_database (拳击手 D) (拳击手 T) _)
- en: (at level 69, D at level 0, T at level 0).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: (在 69 级, D 在 0 级, T 在 0 级).
- en: 'Lemma ltac_database_provide : ∀(A:Boxer) (D:Boxer) (T:Boxer),'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '引理 ltac_database_provide : ∀(A:拳击手) (D:拳击手) (T:拳击手),'
- en: ltac_database D T A.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: ltac_database D T A.
- en: Proof using. split. Qed.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Proof using. 分割. 完成.
- en: Ltac Provide T := apply (@ltac_database_provide (boxer T)).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 提供 T := 应用 (@ltac_database_provide (boxer T)).
- en: Ltac ltac_database_get D T :=
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac ltac_database_get D T :=
- en: let A := fresh "TEMP" in evar (A:Boxer);
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让 A := fresh "TEMP" 在 evar (A:Boxer);
- en: let H := fresh "TEMP" in
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让 H := fresh "TEMP" 在
- en: 'assert (H : ltac_database (boxer D) (boxer T) A);'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '断言 (H : ltac_database (boxer D) (boxer T) A);'
- en: '[ subst A; auto'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[ subst A; 自动'
- en: '| subst A; match type of H with ltac_database _ _ (boxer ?L) ⇒'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '| subst A; 匹配 H 的类型为 ltac_database _ _ (boxer ?L) ⇒'
- en: generalize L end; clear H ].
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 推广 L 结束; 清除 H ].
- en: '(* Note for a possible alternative implementation of the ltac_database_token:
       Inductive Ltac_database : Type :=      | ltac_database : forall A, A -> Ltac_database.
       Implicit Arguments ltac_database A. *)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: (* 对于 ltac_database_token 的可能替代实现的注意事项：    Inductive Ltac_database : Type :=
         | ltac_database : forall A, A -> Ltac_database.    Implicit Arguments ltac_database A.
    *)
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE14]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Definition rm (A:Type) (X:A) := X.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 rm (A:Type) (X:A) := X.
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Ltac rm_term E :=
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac rm_term E :=
- en: let T := type of E in
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让 T := E 的类型
- en: 'match goal with H: T ⊢ _ ⇒ try clear H end.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '匹配目标为 H: T ⊢ _ ⇒ 尝试清除 H'
- en: '[PRE16]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Ltac rm_inside E :=
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac rm_inside E :=
- en: let go E := rm_inside E in
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让 go E := rm_inside E
- en: match E with
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: match E with
- en: '| rm ?X ⇒ rm_term X'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '| rm ?X ⇒ rm_term X'
- en: '| ?X[1] ?X[2] ⇒'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ⇒'
- en: go X[1]; go X[2]
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: go X[1]; go X[2]
- en: '| ?X[1] ?X[2] ?X[3] ⇒'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ⇒'
- en: go X[1]; go X[2]; go X[3]
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: go X[1]; go X[2]; go X[3]
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ⇒'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X[4] ⇒'
- en: go X[1]; go X[2]; go X[3]; go X[4]
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: go X[1]; go X[2]; go X[3]; go X[4]
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ⇒'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ⇒'
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ⇒'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ⇒'
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ⇒'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ⇒'
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X[8] ⇒'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X[8] ⇒'
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]; go X[8]
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]; go X[8]
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X[8] ?X[9] ⇒'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X[8] ?X[9] ⇒'
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]; go X[8]; go X[9]
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]; go X[8]; go X[9]
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X[8] ?X[9] ?X[10] ⇒'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X[8] ?X[9] ?X[10] ⇒'
- en: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]; go X[8]; go X[9];
    go X[10]
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: go X[1]; go X[2]; go X[3]; go X[4]; go X[5]; go X[6]; go X[7]; go X[8]; go X[9];
    go X[10]
- en: '| _ ⇒ idtac'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ idtac'
- en: end.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: '[PRE17]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Ltac fast_rm_inside E :=
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac fast_rm_inside E :=
- en: rm_inside E.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: rm_inside E.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE18]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '(* COQ-8.4:    Require Coq.Numbers.BinNums Coq.ZArith.BinInt. *)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '(* COQ-8.4:    Require Coq.Numbers.BinNums Coq.ZArith.BinInt. *)'
- en: Require BinPos Coq.ZArith.BinInt.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Require BinPos Coq.ZArith.BinInt.
- en: 'Definition ltac_nat_from_int (x:BinInt.Z) : nat :='
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 ltac_nat_from_int (x:BinInt.Z) : nat :='
- en: match x with
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 x 为
- en: '| BinInt.Z0 ⇒ 0%nat'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '| BinInt.Z0 ⇒ 0%nat'
- en: '| BinInt.Zpos p ⇒ BinPos.nat_of_P p'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '| BinInt.Zpos p ⇒ BinPos.nat_of_P p'
- en: '| BinInt.Zneg p ⇒ 0%nat'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '| BinInt.Zneg p ⇒ 0%nat'
- en: end.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Ltac nat_from_number N :=
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac nat_from_number N :=
- en: match type of N with
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 N 的类型为
- en: '| nat ⇒ constr:(N)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '| nat ⇒ 让 N'
- en: '| BinInt.Z ⇒ let N'' := constr:(ltac_nat_from_int N) in eval compute in N'''
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '| BinInt.Z ⇒ 让 N'' := constr:(ltac_nat_from_int N) 在 N'' 中计算'
- en: end.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: '[PRE19]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tactic Notation "ltac_pattern" constr(E) "at" constr(K) :=
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "ltac_pattern" constr(E) "at" constr(K) :=
- en: match nat_from_number K with
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 nat_from_number K 为
- en: '| 1 ⇒ pattern E at 1'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '| 1 ⇒ 在位置 1 处的模式 E'
- en: '| 2 ⇒ pattern E at 2'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '| 2 ⇒ 在位置 2 处的模式 E'
- en: '| 3 ⇒ pattern E at 3'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '| 3 ⇒ 在位置 3 处的模式 E'
- en: '| 4 ⇒ pattern E at 4'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '| 4 ⇒ 在位置 4 处的模式 E'
- en: '| 5 ⇒ pattern E at 5'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '| 5 ⇒ 在位置 5 处的模式 E'
- en: '| 6 ⇒ pattern E at 6'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '| 6 ⇒ 在位置 6 处的模式 E'
- en: '| 7 ⇒ pattern E at 7'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '| 7 ⇒ 在位置 7 处的模式 E'
- en: '| 8 ⇒ pattern E at 8'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '| 8 ⇒ 在位置 8 处的模式 E'
- en: end.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Tactic Notation "ltac_pattern" constr(E) "at" constr(K) "in" hyp(H) :=
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "ltac_pattern" constr(E) "at" constr(K) "in" hyp(H) :=
- en: match nat_from_number K with
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 nat_from_number K 为
- en: '| 1 ⇒ pattern E at 1 in H'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '| 1 ⇒ 在 H 中的位置 1 处的模式 E'
- en: '| 2 ⇒ pattern E at 2 in H'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '| 2 ⇒ 在 H 中的位置 2 处的模式 E'
- en: '| 3 ⇒ pattern E at 3 in H'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '| 3 ⇒ 在 H 中的位置 3 处的模式 E'
- en: '| 4 ⇒ pattern E at 4 in H'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '| 4 ⇒ 在 H 中的位置 4 处的模式 E'
- en: '| 5 ⇒ pattern E at 5 in H'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '| 5 ⇒ 在 H 中的位置 5 处的模式 E'
- en: '| 6 ⇒ pattern E at 6 in H'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '| 6 ⇒ 在 H 中的位置 6 处的模式 E'
- en: '| 7 ⇒ pattern E at 7 in H'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '| 7 ⇒ 在 H 中的位置 7 处的模式 E'
- en: '| 8 ⇒ pattern E at 8 in H'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '| 8 ⇒ 在 H 中的位置 8 处的模式 E'
- en: end.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE20]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tactic Notation "show" tactic(tac) :=
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "show" tactic(tac) :=
- en: let R := tac in pose R.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让 R := tac 在 R 中 pose.
- en: '[PRE21]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Lemma dup_lemma : ∀P, P → P → P.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '引理 dup_lemma : ∀P, P → P → P.'
- en: Proof using. auto. Qed.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Proof using. 自动. 完成.
- en: Ltac dup_tactic N :=
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac dup_tactic N :=
- en: match nat_from_number N with
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 nat_from_number N 与之；
- en: '| 0 ⇒ idtac'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 ⇒ idtac'
- en: '| S 0 ⇒ idtac'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '| S 0 ⇒ idtac'
- en: '| S ?N'' ⇒ apply dup_lemma; [ | dup_tactic N'' ]'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '| S ?N'' ⇒ 应用 dup_lemma; [ | dup_tactic N'' ]'
- en: end.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: end。
- en: Tactic Notation "dup" constr(N) :=
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "dup" constr(N) :=
- en: dup_tactic N.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 复制策略 N.
- en: Tactic Notation "dup" :=
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "dup" :=
- en: dup 2.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 复制 2.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE22]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '(* COQ8.4: Ltac check_noevar M :=   match M with M => idtac end. Ltac check_noevar_hyp H := (* todo: imlement using check_noevar *)
      let T := type of H in   match type of H with T => idtac end. Ltac check_noevar_goal := (* todo: imlement using check_noevar *)
      match goal with |- ?G => match G with G => idtac end end. *)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '(* COQ8.4: Ltac check_noevar M :=   match M with M => idtac end. Ltac check_noevar_hyp H := (* todo: imlement using check_noevar *)
      let T := type of H in   match type of H with T => idtac end. Ltac check_noevar_goal := (* todo: imlement using check_noevar *)
      match goal with |- ?G => match G with G => idtac end end. *)'
- en: Ltac check_noevar M :=
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 检查无自由变量 M :=
- en: first [ has_evar M; fail 2 | idtac ].
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 首先 [ has_evar M; fail 2 | idtac ]。
- en: Ltac check_noevar_hyp H := (* todo: imlement using check_noevar *)
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 检查无自由变量假设 H := (* todo: imlement using check_noevar *)
- en: let T := type of H in check_noevar T.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 让 T := H 的类型 in check_noevar T。
- en: Ltac check_noevar_goal := (* todo: imlement using check_noevar *)
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 检查无自由变量目标 := (* todo: imlement using check_noevar *)
- en: match goal with ⊢ ?G ⇒ check_noevar G end.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配目标为 ⊢ ?G ⇒ check_noevar G end.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE23]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Ltac with_evar_base T cont :=
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac with_evar_base T cont：
- en: let x := fresh in evar (x:T); cont x; subst x.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 让 x := 新鲜的 in evar (x:T); cont x; subst x.
- en: Tactic Notation "with_evar" constr(T) tactic(cont) :=
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "with_evar" constr(T) tactic(cont) :=
- en: with_evar_base T cont.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 用_evar_base T cont。
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE24]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Ltac get_last_hyp tt :=
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 获取最后的假设 tt :=
- en: 'match goal with H: _ ⊢ _ ⇒ constr:(H) end.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '匹配目标为 H: _ ⊢ _ ⇒ constr:(H) end.'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE25]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Definition ltac_tag_subst (A:Type) (x:A) := x.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 ltac_tag_subst (A:Type) (x:A) := x。
- en: '[PRE26]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Definition ltac_to_generalize (A:Type) (x:A) := x.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 ltac_to_generalize (A:Type) (x:A) := x.
- en: Ltac gen_to_generalize :=
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac gen_to_generalize :=
- en: repeat match goal with
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 重复 匹配目标为
- en: 'H: ltac_to_generalize _ ⊢ _ ⇒ generalize H; clear H end.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 'H: ltac_to_generalize _ ⊢ _ ⇒ generalize H; clear H end.'
- en: Ltac mark_to_generalize H :=
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 标记为通用化 H :=
- en: let T := type of H in
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 让 T := H 的类型 in
- en: change T with (ltac_to_generalize T) in H.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H 中用 T 替换为 (ltac_to_generalize T)。
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE27]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Ltac get_head E :=
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 获取头部 E :=
- en: match E with
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 E 与之；
- en: '| ?P _ _ _ _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ _ _ _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
- en: '| ?P _ _ _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
- en: '| ?P _ _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
- en: '| ?P _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ _ _ _ _ _ _ _ _ ⇒ constr:(P)'
- en: '| ?P _ _ _ _ _ _ _ _ ⇒ constr:(P)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ _ _ _ _ _ _ _ ⇒ constr:(P)'
- en: '| ?P _ _ _ _ _ _ _ ⇒ constr:(P)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ _ _ _ _ _ _ ⇒ constr:(P)'
- en: '| ?P _ _ _ _ _ _ ⇒ constr:(P)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ _ _ _ _ _ ⇒ constr:(P)'
- en: '| ?P _ _ _ _ _ ⇒ constr:(P)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ _ _ _ _ ⇒ constr:(P)'
- en: '| ?P _ _ _ _ ⇒ constr:(P)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ _ _ _ ⇒ constr:(P)'
- en: '| ?P _ _ _ ⇒ constr:(P)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ _ _ ⇒ constr:(P)'
- en: '| ?P _ _ ⇒ constr:(P)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ _ ⇒ constr:(P)'
- en: '| ?P _ ⇒ constr:(P)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P _ ⇒ constr:(P)'
- en: '| ?P ⇒ constr:(P)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P ⇒ constr:(P)'
- en: end.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: end。
- en: '[PRE28]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Ltac get_fun_arg E :=
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 获取函数参数 E :=
- en: match E with
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 E 与之；
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X ⇒ constr:((X[1] X[2] X[3] X[4]
    X[5] X[6],X))'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X[7] ?X ⇒ constr:((X[1] X[2] X[3] X[4]
    X[5] X[6],X))'
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X ⇒ constr:((X[1] X[2] X[3] X[4] X[5],X))'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X[6] ?X ⇒ constr:((X[1] X[2] X[3] X[4] X[5],X))'
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X ⇒ constr:((X[1] X[2] X[3] X[4],X))'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X[5] ?X ⇒ constr:((X[1] X[2] X[3] X[4],X))'
- en: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X ⇒ constr:((X[1] X[2] X[3],X))'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X[4] ?X ⇒ constr:((X[1] X[2] X[3],X))'
- en: '| ?X[1] ?X[2] ?X[3] ?X ⇒ constr:((X[1] X[2],X))'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X[3] ?X ⇒ constr:((X[1] X[2],X))'
- en: '| ?X[1] ?X[2] ?X ⇒ constr:((X[1],X))'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X[2] ?X ⇒ constr:((X[1],X))'
- en: '| ?X[1] ?X ⇒ constr:((X[1],X))'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?X[1] ?X ⇒ constr:((X[1],X))'
- en: end.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: end。
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE29]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tactic Notation "ltac_action_at" constr(K) "of" constr(E) "do" tactic(Tac) :=
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "ltac_action_at" constr(K) "of" constr(E) "do" tactic(Tac) :=
- en: let p := fresh in ltac_pattern E at K;
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 让 p := 新鲜的 in ltac_pattern E at K;
- en: match goal with ⊢ ?P _ ⇒ set (p:=P) end;
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配目标为 ⊢ ?P _ ⇒ set (p:=P) end;
- en: Tac; unfold p; clear p.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: Tac; 展开 p; 清除 p。
- en: Tactic Notation "ltac_action_at" constr(K) "of" constr(E) "in" hyp(H) "do" tactic(Tac)
    :=
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "ltac_action_at" constr(K) "of" constr(E) "in" hyp(H) "do" tactic(Tac)
    :=
- en: let p := fresh in ltac_pattern E at K in H;
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 让 p := 新鲜的 in ltac_pattern E at K in H;
- en: match type of H with ?P _ ⇒ set (p:=P) in H end;
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Tac; unfold p in H; clear p.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Tactic Notation "protects" constr(E) "do" tactic(Tac) :=
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: (* let x := fresh "TEMP" in sets_eq x: E; T; subst x. *)
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: let x := fresh "TEMP" in let H := fresh "TEMP" in
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 'set (X := E) in *; assert (H : X = E) by reflexivity;'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: clearbody X; Tac; subst x.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "protects" constr(E) "do" tactic(Tac) "/" :=
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: protects E do Tac.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Definition eq' := @eq.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Hint Unfold eq'.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Notation "x '='' y" := (@eq' _ x y)
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: (at level 70, y at next level).
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Ltac jauto_set_hyps :=
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: 'repeat match goal with H: ?T ⊢ _ ⇒'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ⇒ destruct H'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃a, _ ⇒ destruct H'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ generalize H; clear H'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: Ltac jauto_set_goal :=
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ∃a, _ ⇒ esplit'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ _ ∧ _ ⇒ split'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: Ltac jauto_set :=
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: intros; jauto_set_hyps;
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: intros; jauto_set_goal;
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: unfold not in *.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Ltac old_refine f :=
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: refine f. (* ; shelve_unifiable. *)
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Tactic Notation "rapply" constr(t) :=
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: first  (* todo: les @ sont inutiles *)
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[ eexact (@t)'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t)'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _)'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _)'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _)'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _)'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _)'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _)'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _)'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _)'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _ _)'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _ _ _)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _ _ _ _)'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _ _ _ _ _)'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '| refine (@t _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '].'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Tactic Notation "rapply_0" constr(t) :=
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_1" constr(t) :=
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _).
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_2" constr(t) :=
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _).
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_3" constr(t) :=
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _).
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_4" constr(t) :=
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _).
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_5" constr(t) :=
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _).
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_6" constr(t) :=
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _ _).
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_7" constr(t) :=
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _ _ _).
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_8" constr(t) :=
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _ _ _ _).
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_9" constr(t) :=
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _ _ _ _ _).
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rapply_10" constr(t) :=
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: refine (@t _ _ _ _ _ _ _ _ _ _).
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Ltac lets_base I E := generalize E; intros I.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Tactic Notation "applys_to" hyp(H) constr(E) :=
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: let H' := fresh in rename H into H';
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: (first [ lets_base H (E H')
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ H'')'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ H'')'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ H'')'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ H'')'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ _ H'')'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ _ _ H'')'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ _ _ _ H'')'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ _ _ _ _ H'')'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '| lets_base H (E _ _ _ _ _ _ _ _ _ H'') ]'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: ); clear H'.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Tactic Notation "applys_to" hyp(H[1]) "," hyp(H[2]) constr(E) :=
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: applys_to H[1] E; applys_to H[2] E.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: applys_to H[1] E; applys_to H[2] E。
- en: Tactic Notation "applys_to" hyp(H[1]) "," hyp(H[2]) "," hyp(H[3]) constr(E)
    :=
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“applys_to” hyp(H[1])，“hyp(H[2])”，hyp(H[3]) constr(E) :=
- en: applys_to H[1] E; applys_to H[2] E; applys_to H[3] E.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: applys_to H[1] E; applys_to H[2] E; applys_to H[3] E。
- en: Tactic Notation "applys_to" hyp(H[1]) "," hyp(H[2]) "," hyp(H[3]) "," hyp(H[4])
    constr(E) :=
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“applys_to” hyp(H[1])，“hyp(H[2])”，“hyp(H[3])”，“hyp(H[4])” constr(E) :=
- en: applys_to H[1] E; applys_to H[2] E; applys_to H[3] E; applys_to H[4] E.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: applys_to H[1] E; applys_to H[2] E; applys_to H[3] E; applys_to H[4] E。
- en: '[PRE40]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Tactic Notation "constructors" :=
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“constructors” :=
- en: first [ constructor | econstructor ]; unfold eq'.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: first [ constructor | econstructor ]; unfold eq'。
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE41]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Tactic Notation "asserts" simple_intropattern(I) ":" constr(T) :=
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“asserts” simple_intropattern(I)：“constr(T) :=
- en: 'let H := fresh in assert (H : T);'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 'let H := fresh in assert (H : T);'
- en: '[ | generalize H; clear H; intros I ].'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '[ | generalize H; clear H; intros I ]。'
- en: '[PRE42]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Tactic Notation "asserts" simple_intropattern(I[1])
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“asserts” simple_intropattern(I[1])
- en: simple_intropattern(I[2]) ":" constr(T) :=
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2])：“constr(T) :=
- en: 'asserts [I[1] I[2]]: T.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 断言[I[1] I[2]]：T。
- en: Tactic Notation "asserts" simple_intropattern(I[1])
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“asserts” simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) ":" constr(T) :=
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3])：“constr(T) :=
- en: 'asserts [I[1] [I[2] I[3]]]: T.'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 断言[I[1] [I[2] I[3]]]：T。
- en: Tactic Notation "asserts" simple_intropattern(I[1])
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“asserts” simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3])
- en: simple_intropattern(I[4]) ":" constr(T) :=
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[4])：“constr(T) :=
- en: 'asserts [I[1] [I[2] [I[3] I[4]]]]: T.'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 断言[I[1] [I[2] [I[3] I[4]]]：T。
- en: Tactic Notation "asserts" simple_intropattern(I[1])
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“asserts” simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3])
- en: simple_intropattern(I[4]) simple_intropattern(I[5]) ":" constr(T) :=
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[4]) simple_intropattern(I[5])：“constr(T) :=
- en: 'asserts [I[1] [I[2] [I[3] [I[4] I[5]]]]]: T.'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: asserts [I[1] [I[2] [I[3] [I[4] I[5]]]]：T。
- en: Tactic Notation "asserts" simple_intropattern(I[1])
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“asserts” simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3])
- en: simple_intropattern(I[4]) simple_intropattern(I[5])
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[4]) simple_intropattern(I[5])
- en: simple_intropattern(I[6]) ":" constr(T) :=
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[6])：“constr(T) :=
- en: 'asserts [I[1] [I[2] [I[3] [I[4] [I[5] I[6]]]]]]: T.'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 断言[I[1] [I[2] [I[3] [I[4] [I[5] I[6]]]]]：T。
- en: '[PRE43]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Tactic Notation "asserts" ":" constr(T) :=
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“asserts”：“constr(T) :=
- en: 'let H := fresh in asserts H : T.'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 'let H := fresh in asserts H : T。'
- en: '[PRE44]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Tactic Notation "cuts" simple_intropattern(I) ":" constr(T) :=
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“cuts” simple_intropattern(I)：“constr(T) :=
- en: cut (T); [ intros I | idtac ].
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: cut (T); [ intros I | idtac ]。
- en: '[PRE45]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Tactic Notation "cuts" ":" constr(T) :=
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“cuts”：“constr(T) :=
- en: 'let H := fresh in cuts H: T.'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 'let H := fresh in cuts H: T。'
- en: '[PRE46]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Tactic Notation "cuts" simple_intropattern(I[1])
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“cuts” simple_intropattern(I[1])
- en: simple_intropattern(I[2]) ":" constr(T) :=
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2])：“constr(T) :=
- en: 'cuts [I[1] I[2]]: T.'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: cuts [I[1] I[2]]：T。
- en: Tactic Notation "cuts" simple_intropattern(I[1])
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“cuts” simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) ":" constr(T) :=
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3])：“constr(T) :=
- en: 'cuts [I[1] [I[2] I[3]]]: T.'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: cuts [I[1] [I[2] I[3]]]：T。
- en: Tactic Notation "cuts" simple_intropattern(I[1])
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“cuts” simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3])
- en: simple_intropattern(I[4]) ":" constr(T) :=
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[4])：“constr(T) :=
- en: 'cuts [I[1] [I[2] [I[3] I[4]]]]: T.'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: cuts [I[1] [I[2] [I[3] I[4]]]：T。
- en: Tactic Notation "cuts" simple_intropattern(I[1])
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“cuts” simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3])
- en: simple_intropattern(I[4]) simple_intropattern(I[5]) ":" constr(T) :=
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[4]) simple_intropattern(I[5])：“constr(T) :=
- en: 'cuts [I[1] [I[2] [I[3] [I[4] I[5]]]]]: T.'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: cuts [I[1] [I[2] [I[3] [I[4] I[5]]]]：T。
- en: Tactic Notation "cuts" simple_intropattern(I[1])
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 策略符号“cuts” simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3])
- en: simple_intropattern(I[4]) simple_intropattern(I[5])
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[4]) simple_intropattern(I[5])
- en: simple_intropattern(I[6]) ":" constr(T) :=
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[6])：“constr(T) :=
- en: 'cuts [I[1] [I[2] [I[3] [I[4] [I[5] I[6]]]]]]: T.'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: cuts [I[1] [I[2] [I[3] [I[4] [I[5] I[6]]]]]：T。
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE47]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: (* Underlying implementation *)
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: (* Underlying implementation *)
- en: Ltac app_assert t P cont :=
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac app_assert t P cont :=
- en: let H := fresh "TEMP" in
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: let H := fresh "TEMP" in
- en: 'assert (H : P); [ | cont(t H); clear H ].'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 'assert (H : P); [ | cont(t H); clear H ]。'
- en: Ltac app_evar t A cont :=
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac app_evar t A cont :=
- en: let x := fresh "TEMP" in
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: let x := fresh "TEMP" in
- en: evar (x:A);
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: evar (x:A);
- en: let t' := constr:(t x) in
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: let t' := constr:(t x) in
- en: let t'' := (eval unfold x in t') in
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 让 t'' := (eval unfold x in t') in
- en: subst x; cont t''.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 替换 x; cont t''.
- en: Ltac app_arg t P v cont :=
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac app_arg t P v cont :=
- en: let H := fresh "TEMP" in
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 让 H := fresh "TEMP" in
- en: 'assert (H : P); [ apply v | cont(t H); try clear H ].'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '断言 (H : P); [ 应用 v | cont(t H); 尝试清除 H ].'
- en: Ltac build_app_alls t final :=
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac build_app_alls t final :=
- en: let rec go t :=
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 让 rec go t :=
- en: match type of t with
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 t 的类型与
- en: '| ?P → ?Q ⇒ app_assert t P go'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P → ?Q ⇒ app_assert t P go'
- en: '| ∀_:?A, _ ⇒ app_evar t A go'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:?A, _ ⇒ app_evar t A go'
- en: '| _ ⇒ final t'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ final t'
- en: end in
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: end in
- en: go t.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 进行 t.
- en: Ltac boxerlist_next_type vs :=
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac boxerlist_next_type vs :=
- en: match vs with
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 vs 与
- en: '| nil ⇒ constr:(ltac_wild)'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '| 空 ⇒ 构造:(ltac_wild)'
- en: '| (boxer ltac_wild)::?vs'' ⇒ boxerlist_next_type vs'''
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '| (拳击手 ltac_wild)::?vs'' ⇒ boxerlist_next_type vs'''
- en: '| (boxer ltac_wilds)::_ ⇒ constr:(ltac_wild)'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '| (拳击手 ltac_wilds)::_ ⇒ 构造:(ltac_wild)'
- en: '| (@boxer ?T _)::_ ⇒ constr:(T)'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '| (@拳击手 ?T _)::_ ⇒ 构造:(T)'
- en: end.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: (* Note: refuse to instantiate a dependent hypothesis with a proposition;     refuse to instantiate an argument of type Type with one that 
        does not have the type Type. *)
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: (* 注意：拒绝用命题实例化依赖假设； 拒绝用类型为 Type 的参数实例化一个不具有类型 Type 的参数。 *)
- en: Ltac build_app_hnts t vs final :=
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac build_app_hnts t vs final :=
- en: let rec go t vs :=
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 让 rec go t vs :=
- en: match vs with
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 vs 与
- en: '| nil ⇒ first [ final t | fail 1 ]'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '| 空 ⇒ 首先 [ final t | fail 1 ]'
- en: '| (boxer ltac_wilds)::_ ⇒ first [ build_app_alls t final | fail 1 ]'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '| (拳击手 ltac_wilds)::_ ⇒ 首先 [ build_app_alls t final | fail 1 ]'
- en: '| (boxer ?v)::?vs'' ⇒'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '| (拳击手 ?v)::?vs'' ⇒'
- en: let cont t' := go t' vs in
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 让 cont t' := go t' vs in
- en: let cont' t' := go t' vs' in
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 让 cont' t' := go t' vs' in
- en: let T := type of t in
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 让 T := t 的类型 in
- en: let T := eval hnf in T in
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 让 T := eval hnf in T in
- en: match v with
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 v 与
- en: '| ltac_wild ⇒'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '| ltac_wild ⇒'
- en: first [ let U := boxerlist_next_type vs' in
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 首先 [ 让 U := boxerlist_next_type vs' in
- en: match U with
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 U 与
- en: '| ltac_wild ⇒'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '| ltac_wild ⇒'
- en: match T with
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 T 与
- en: '| ?P → ?Q ⇒ first [ app_assert t P cont'' | fail 3 ]'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P → ?Q ⇒ 首先 [ app_assert t P cont'' | fail 3 ]'
- en: '| ∀_:?A, _ ⇒ first [ app_evar t A cont'' | fail 3 ]'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:?A, _ ⇒ 首先 [ app_evar t A cont'' | fail 3 ]'
- en: end
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| _ ⇒'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒'
- en: match T with  (* should test T for unifiability *)
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 T 与  (* 应该 测试 T 是否 可统一 *)
- en: '| U → ?Q ⇒ first [ app_assert t U cont'' | fail 3 ]'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '| U → ?Q ⇒ 首先 [ app_assert t U cont'' | fail 3 ]'
- en: '| ∀_:U, _ ⇒ first [ app_evar t U cont'' | fail 3 ]'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:U, _ ⇒ 首先 [ app_evar t U cont'' | fail 3 ]'
- en: '| ?P → ?Q ⇒ first [ app_assert t P cont | fail 3 ]'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P → ?Q ⇒ 首先 [ app_assert t P cont | fail 3 ]'
- en: '| ∀_:?A, _ ⇒ first [ app_evar t A cont | fail 3 ]'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:?A, _ ⇒ 首先 [ app_evar t A cont | fail 3 ]'
- en: end
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| fail 2 ]'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '| fail 2 ]'
- en: '| _ ⇒'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒'
- en: match T with
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 T 与
- en: '| ?P → ?Q ⇒ first [ app_arg t P v cont'''
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P → ?Q ⇒ 首先 [ app_arg t P v cont'''
- en: '| app_assert t P cont'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_assert t P cont'
- en: '| fail 3 ]'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '| fail 3 ]'
- en: '| ∀_:Type, _ ⇒'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:Type, _ ⇒'
- en: match type of v with
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 v 的类型与
- en: '| Type ⇒ first [ cont'' (t v)'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '| 类型 ⇒ 首先 [ cont'' (t v)'
- en: '| app_evar t Type cont'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_evar t 类型 cont'
- en: '| fail 3 ]'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '| fail 3 ]'
- en: '| _ ⇒ first [ app_evar t Type cont'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ 首先 [ app_evar t 类型 cont'
- en: '| fail 3 ]'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '| fail 3 ]'
- en: end
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| ∀_:?A, _ ⇒'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:?A, _ ⇒'
- en: let V := type of v in
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 让 V := v 的类型 in
- en: match type of V with
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 V 的类型与
- en: '| Prop ⇒  first [ app_evar t A cont'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '| 命题 ⇒  首先 [ app_evar t A cont'
- en: '| fail 3 ]'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '| fail 3 ]'
- en: '| _ ⇒ first [ cont'' (t v)'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ 首先 [ cont'' (t v)'
- en: '| app_evar t A cont'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_evar t A cont'
- en: '| fail 3 ]'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '| fail 3 ]'
- en: end
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end in
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: end in
- en: go t vs.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: go t vs.
- en: '[PRE48]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Ltac app_typeclass t cont :=
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac app_typeclass t cont :=
- en: let t' := constr:(t _) in
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 让 t' := 构造:(t _) in
- en: cont t'.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: cont t'.
- en: Ltac build_app_alls t final ::=
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac build_app_alls t final ::=
- en: let rec go t :=
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 让 rec go t :=
- en: match type of t with
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 t 的类型与
- en: '| ?P → ?Q ⇒ app_assert t P go'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P → ?Q ⇒ app_assert t P go'
- en: '| ∀_:?A, _ ⇒'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:?A, _ ⇒'
- en: first [ app_evar t A go
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 首先 [ app_evar t A go
- en: '| app_typeclass t go'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_typeclass t go'
- en: '| fail 3 ]'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '| fail 3 ]'
- en: '| _ ⇒ final t'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ final t'
- en: end in
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: end in
- en: go t.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: go t.
- en: Ltac build_app_hnts t vs final ::=
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac build_app_hnts t vs final ::=
- en: let rec go t vs :=
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 让 rec go t vs :=
- en: match vs with
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 vs 与
- en: '| nil ⇒ first [ final t | fail 1 ]'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '| 空 ⇒ 首先 [ final t | fail 1 ]'
- en: '| (boxer ltac_wilds)::_ ⇒ first [ build_app_alls t final | fail 1 ]'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '| (拳击手 ltac_wilds)::_ ⇒ 首先 [ build_app_alls t final | fail 1 ]'
- en: '| (boxer ?v)::?vs'' ⇒'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '| (拳击手 ?v)::?vs'' ⇒'
- en: let cont t' := go t' vs in
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 让 cont t' := go t' vs in
- en: let cont' t' := go t' vs' in
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 让 cont' t' := go t' vs' in
- en: let T := type of t in
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 让 T := t 的类型 in
- en: let T := eval hnf in T in
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 让 T := eval hnf in T in
- en: match v with
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 v 与
- en: '| ltac_wild ⇒'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '| ltac_wild ⇒'
- en: first [ let U := boxerlist_next_type vs' in
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 首先 [ 让 U := boxerlist_next_type vs' in
- en: match U with
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 U 与
- en: '| ltac_wild ⇒'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '| ltac_wild ⇒'
- en: match T with
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 T 与
- en: '| ?P → ?Q ⇒ first [ app_assert t P cont'' | fail 3 ]'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P → ?Q ⇒ 首先 [ app_assert t P cont'' | fail 3 ]'
- en: '| ∀_:?A, _ ⇒ first [ app_typeclass t cont'''
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:?A, _ ⇒ 首先 [ app_typeclass t cont'''
- en: '| app_evar t A cont'''
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_evar t A cont'''
- en: '| fail 3 ]'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '| fail 3 ]'
- en: end
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| _ ⇒'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒'
- en: match T with  (* should test T for unifiability *)
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 T 与  (* 应该 测试 T 是否 可统一 *)
- en: '| U → ?Q ⇒ first [ app_assert t U cont'' | fail 3 ]'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '| U → ?Q ⇒ 首先 [ app_assert t U cont'' | fail 3 ]'
- en: '| ∀_:U, _ ⇒ first'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:U, _ ⇒ 首先'
- en: '[ app_typeclass t cont'''
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '[ app_typeclass t cont'''
- en: '| app_evar t U cont'''
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_evar t U cont'''
- en: '| fail 3 ]'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '| fail 3 ]'
- en: '| ?P → ?Q ⇒ first [ app_assert t P cont | fail 3 ]'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P → ?Q ⇒ 首先 [ app_assert t P cont | fail 3 ]'
- en: '| ∀_:?A, _ ⇒ first'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:?A, _ ⇒ 首先'
- en: '[ app_typeclass t cont'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '[ app_typeclass t cont'
- en: '| app_evar t A cont'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_evar t A cont'
- en: '| fail 3 ]'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '| 失败 3 ]'
- en: end
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| fail 2 ]'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '| 失败 2 ]'
- en: '| _ ⇒'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒'
- en: match T with
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 T with
- en: '| ?P → ?Q ⇒ first [ app_arg t P v cont'''
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P → ?Q ⇒ first [ app_arg t P v cont'''
- en: '| app_assert t P cont'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_assert t P cont'
- en: '| fail 3 ]'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '| 失败 3 ]'
- en: '| ∀_:Type, _ ⇒'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:Type, _ ⇒'
- en: match type of v with
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 v 的类型 with
- en: '| Type ⇒ first [ cont'' (t v)'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '| Type ⇒ first [ cont'' (t v)'
- en: '| app_evar t Type cont'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_evar t Type cont'
- en: '| fail 3 ]'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '| 失败 3 ]'
- en: '| _ ⇒ first [ app_evar t Type cont'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ first [ app_evar t Type cont'
- en: '| fail 3 ]'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '| 失败 3 ]'
- en: end
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| ∀_:?A, _ ⇒'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:?A, _ ⇒'
- en: let V := type of v in
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 让 V := v 的类型 in
- en: match type of V with
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 V 的类型 with
- en: '| Prop ⇒ first [ app_typeclass t cont'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '| Prop ⇒ first [ app_typeclass t cont'
- en: '| app_evar t A cont'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_evar t A cont'
- en: '| fail 3 ]'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '| 失败 3 ]'
- en: '| _ ⇒ first [ cont'' (t v)'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ first [ cont'' (t v)'
- en: '| app_typeclass t cont'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_typeclass t cont'
- en: '| app_evar t A cont'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '| app_evar t A cont'
- en: '| fail 3 ]'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '| 失败 3 ]'
- en: end
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end in
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: end in
- en: go t vs.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: go t vs。
- en: (* todo: use local function for first ... *)
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: (* todo: use local function for first ... *)
- en: (*--old version Ltac build_app_hnts t vs final :=   let rec go t vs :=     match vs with
        | nil => first  final t | fail 1 | (boxer ltac_wilds)::_ => first  build_app_alls
    t final | fail 1 | (boxer ?v)::?vs' =>       let cont t' := go t' vs in       let cont' t' := go t' vs' in
          let T := type of t in       let T := eval hnf in T in       match v with
          | ltac_wild =>          first  let U := boxerlist_next_type vs' in match
    U with | ltac_wild ⇒ match T with | ?P → ?Q ⇒ first [ app_assert t P cont' | fail
    3 ] | ∀ _:?A, _ ⇒ first [ app_evar t A cont' | fail 3 ] end | _ ⇒ match T with
     should test T for unifiability *)             | U → ?Q ⇒ first [ app_assert t
    U cont' | fail 3 ]
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: (*--old version Ltac build_app_hnts t vs final :=   let rec go t vs :=     match vs with
        | nil => first  final t | 失败 1 | (boxer ltac_wilds)::_ => first  build_app_alls
    t final | 失败 1 | (boxer ?v)::?vs' =>       let cont t' := go t' vs in       let cont' t' := go t' vs' in
          let T := t 的类型 in       let T := eval hnf in T in       match v with       | ltac_wild =>
             first  let U := boxerlist_next_type vs' in match U with | ltac_wild ⇒
    match T with | ?P → ?Q ⇒ first [ app_assert t P cont' | 失败 3 ] | ∀ _:?A, _ ⇒ first
    [ app_evar t A cont' | 失败 3 ] end | _ ⇒ match T with  should test T for unifiability *)             |
    U → ?Q ⇒ first [ app_assert t U cont' | 失败 3 ]
- en: '| ∀ _:U, _ ⇒ first [ app_evar t U cont'' | fail 3 ]'
  id: totrans-649
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '| ∀ _:U, _ ⇒ first [ app_evar t U cont'' | 失败 3 ]'
- en: '| ?P → ?Q ⇒ first [ app_assert t P cont | fail 3 ]'
  id: totrans-650
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '| ?P → ?Q ⇒ first [ app_assert t P cont | 失败 3 ]'
- en: '| ∀ _:?A, _ ⇒ first [ app_evar t A cont | fail 3 ]'
  id: totrans-651
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '| ∀ _:?A, _ ⇒ first [ app_evar t A cont | 失败 3 ]'
- en: end
  id: totrans-652
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: end
- en: end
  id: totrans-653
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: end
- en: '| fail 2 | _ =>'
  id: totrans-654
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '| 失败 2 | _ =>'
- en: match T with
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 T with
- en: '| ?P -> ?Q => first  app_arg t P v cont'''
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P -> ?Q => first  app_arg t P v cont'''
- en: '| app_assert t P cont'
  id: totrans-657
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '| app_assert t P cont'
- en: '| fail 3 | forall _:?A, _ => first  cont'' (t v)'
  id: totrans-658
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '| 失败 3 | forall _:?A, _ => first  cont'' (t v)'
- en: '| app_evar t A cont'
  id: totrans-659
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '| app_evar t A cont'
- en: '| fail 3 end'
  id: totrans-660
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '| 失败 3 end'
- en: end
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end in
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: end in
- en: go t vs.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: go t vs。
- en: '*)'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: '*)'
- en: Ltac build_app args final :=
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac build_app args final :=
- en: first [
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: first [
- en: match args with (@[boxer](LibTactics.html#boxer) ?T ?t)::?vs ⇒
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 args with (@[boxer](LibTactics.html#boxer) ?T ?t)::?vs ⇒
- en: let t := constr:(t:T) in
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 让 t := 构造:(t:T) in
- en: build_app_hnts t vs final;
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: build_app_hnts t vs final;
- en: fast_rm_inside args
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: fast_rm_inside args
- en: end
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| fail 1 "Instantiation fails for:" args].'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '| 失败 1 "实例化失败:" args]。'
- en: Ltac unfold_head_until_product T :=
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac unfold_head_until_product T :=
- en: eval hnf in T.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: eval hnf in T。
- en: Ltac args_unfold_head_if_not_product args :=
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac args_unfold_head_if_not_product args :=
- en: match args with (@[boxer](LibTactics.html#boxer) ?T ?t)::?vs ⇒
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 args with (@[boxer](LibTactics.html#boxer) ?T ?t)::?vs ⇒
- en: let T' := unfold_head_until_product T in
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 让 T' := unfold_head_until_product T in
- en: constr:((@[boxer](LibTactics.html#boxer) T' t)::vs)
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: constr:((@[boxer](LibTactics.html#boxer) T' t)::vs)
- en: end.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Ltac args_unfold_head_if_not_product_but_params args :=
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac args_unfold_head_if_not_product_but_params args :=
- en: match args with
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 args with
- en: '| ([boxer](LibTactics.html#boxer) ?t)::([boxer](LibTactics.html#boxer) ?v)::?vs
    ⇒'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '| ([boxer](LibTactics.html#boxer) ?t)::([boxer](LibTactics.html#boxer) ?v)::?vs
    ⇒'
- en: args_unfold_head_if_not_product args
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: args_unfold_head_if_not_product args
- en: '| _ ⇒ constr:(args)'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ 构造:(args)'
- en: end.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: '[PRE49]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Ltac lets_build I Ei :=
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac lets_build I Ei :=
- en: let args := list_boxer_of Ei in
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := list_boxer_of Ei in
- en: let args := args_unfold_head_if_not_product_but_params args in
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := args_unfold_head_if_not_product_but_params args in
- en: (*    let Ei''' := args_unfold_head_if_not_product Ei'' in*)
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: (*    让 Ei''' := args_unfold_head_if_not_product Ei'' in*)
- en: build_app args ltac:(fun R ⇒ lets_base I R).
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: build_app args ltac:(fun R ⇒ lets_base I R)。
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E) :=
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "lets" simple_intropattern(I) ":" constr(E) :=
- en: lets_build I E.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: lets_build I E。
- en: Tactic Notation "lets" ":" constr(E) :=
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "lets" ":" constr(E) :=
- en: 'let H := fresh in lets H: E.'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: '让 H := 新鲜 in lets H: E。'
- en: Tactic Notation "lets" ":" constr(E[0])
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "lets" ":" constr(E[0])
- en: constr(A[1]) :=
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) :=
- en: 'lets: (>> E[0] A[1]).'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets: (>> E[0] A[1])。'
- en: Tactic Notation "lets" ":" constr(E[0])
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "lets" ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) :=
- en: 'lets: (>> E[0] A[1] A[2]).'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets: (>> E[0] A[1] A[2])。'
- en: Tactic Notation "lets" ":" constr(E[0])
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "lets" ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) :=
- en: 'lets: (>> E[0] A[1] A[2] A[3]).'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets: (>> E[0] A[1] A[2] A[3])。'
- en: Tactic Notation "lets" ":" constr(E[0])
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
- en: 'lets: (>> E[0] A[1] A[2] A[3] A[4]).'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets: (>> E[0] A[1] A[2] A[3] A[4]).'
- en: Tactic Notation "lets" ":" constr(E[0])
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
- en: 'lets: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
- en: (* --todo: deprecated, do not use *)
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: (* --todo: deprecated, do not use *)
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: '":" constr(E) :='
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '":" constr(E) :='
- en: 'lets [I[1] I[2]]: E.'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets [I[1] I[2]]: E.'
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) ":" constr(E) :=
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) ":" constr(E) :=
- en: 'lets [I[1] [I[2] I[3]]]: E.'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets [I[1] [I[2] I[3]]]: E.'
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) ":" constr(E) :=
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) simple_intropattern(I[4]) ":" constr(E) :=
- en: 'lets [I[1] [I[2] [I[3] I[4]]]]: E.'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets [I[1] [I[2] [I[3] I[4]]]]: E.'
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
- en: '":" constr(E) :='
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '":" constr(E) :='
- en: 'lets [I[1] [I[2] [I[3] [I[4] I[5]]]]]: E.'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets [I[1] [I[2] [I[3] [I[4] I[5]]]]]: E.'
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
- en: constr(A[1]) :=
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) :=
- en: 'lets I: (>> E[0] A[1]).'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets I: (>> E[0] A[1]).'
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) :=
- en: 'lets I: (>> E[0] A[1] A[2]).'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets I: (>> E[0] A[1] A[2]).'
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) :=
- en: 'lets I: (>> E[0] A[1] A[2] A[3]).'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets I: (>> E[0] A[1] A[2] A[3]).'
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
- en: 'lets I: (>> E[0] A[1] A[2] A[3] A[4]).'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets I: (>> E[0] A[1] A[2] A[3] A[4]).'
- en: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I) ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
- en: 'lets I: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets I: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
- en: constr(A[1]) :=
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) :=
- en: 'lets [I[1] I[2]]: E[0] A[1].'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets [I[1] I[2]]: E[0] A[1].'
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) :=
- en: 'lets [I[1] I[2]]: E[0] A[1] A[2].'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets [I[1] I[2]]: E[0] A[1] A[2].'
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) :=
- en: 'lets [I[1] I[2]]: E[0] A[1] A[2] A[3].'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets [I[1] I[2]]: E[0] A[1] A[2] A[3].'
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
- en: 'lets [I[1] I[2]]: E[0] A[1] A[2] A[3] A[4].'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets [I[1] I[2]]: E[0] A[1] A[2] A[3] A[4].'
- en: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "lets" simple_intropattern(I[1]) simple_intropattern(I[2]) ":"
    constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
- en: 'lets [I[1] I[2]]: E[0] A[1] A[2] A[3] A[4] A[5].'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets [I[1] I[2]]: E[0] A[1] A[2] A[3] A[4] A[5].'
- en: '[PRE50]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Ltac forwards_build_app_arg Ei :=
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac forwards_build_app_arg Ei :=
- en: let args := list_boxer_of Ei in
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := list_boxer_of Ei in
- en: let args := (eval simpl in (args ++ ((boxer ___)::nil))) in
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := (eval simpl in (args ++ ((boxer ___)::nil))) in
- en: let args := args_unfold_head_if_not_product args in
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := args_unfold_head_if_not_product args in
- en: args.
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: args.
- en: Ltac forwards_then Ei cont :=
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac forwards_then Ei cont :=
- en: let args := forwards_build_app_arg Ei in
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := forwards_build_app_arg Ei in
- en: let args := args_unfold_head_if_not_product_but_params args in
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := args_unfold_head_if_not_product_but_params args in
- en: build_app args cont.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: build_app args cont.
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(Ei) :=
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" simple_intropattern(I) ":" constr(Ei) :=
- en: let args := forwards_build_app_arg Ei in
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := forwards_build_app_arg Ei in
- en: 'lets I: args.'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets I: args.'
- en: Tactic Notation "forwards" ":" constr(E) :=
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" ":" constr(E) :=
- en: 'let H := fresh in forwards H: E.'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '让 H := fresh in forwards H: E.'
- en: Tactic Notation "forwards" ":" constr(E[0])
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" ":" constr(E[0])
- en: constr(A[1]) :=
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) :=
- en: 'forwards: (>> E[0] A[1]).'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards: (>> E[0] A[1]).'
- en: Tactic Notation "forwards" ":" constr(E[0])
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) :=
- en: 'forwards: (>> E[0] A[1] A[2]).'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards: (>> E[0] A[1] A[2]).'
- en: Tactic Notation "forwards" ":" constr(E[0])
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) :=
- en: 'forwards: (>> E[0] A[1] A[2] A[3]).'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards: (>> E[0] A[1] A[2] A[3]).'
- en: Tactic Notation "forwards" ":" constr(E[0])
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
- en: 'forwards: (>> E[0] A[1] A[2] A[3] A[4]).'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards: (>> E[0] A[1] A[2] A[3] A[4]).'
- en: Tactic Notation "forwards" ":" constr(E[0])
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
- en: 'forwards: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
- en: (* todo: deprecated, do not use *)
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: (* todo: deprecated, do not use *)
- en: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: '":" constr(E) :='
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: '":" constr(E) :='
- en: 'forwards [I[1] I[2]]: E.'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards [I[1] I[2]]: E.'
- en: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) ":" constr(E) :=
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) ":" constr(E) :=
- en: 'forwards [I[1] [I[2] I[3]]]: E.'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards [I[1] [I[2] I[3]]]: E.'
- en: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) ":" constr(E) :=
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) simple_intropattern(I[4]) ":" constr(E) :=
- en: 'forwards [I[1] [I[2] [I[3] I[4]]]]: E.'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards [I[1] [I[2] [I[3] I[4]]]]: E.'
- en: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
- en: '":" constr(E) :='
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '":" constr(E) :='
- en: 'forwards [I[1] [I[2] [I[3] [I[4] I[5]]]]]: E.'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards [I[1] [I[2] [I[3] [I[4] I[5]]]]]: E.'
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
- en: constr(A[1]) :=
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) :=
- en: 'forwards I: (>> E[0] A[1]).'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards I: (>> E[0] A[1]).'
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) :=
- en: 'forwards I: (>> E[0] A[1] A[2]).'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards I: (>> E[0] A[1] A[2]).'
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) :=
- en: 'forwards I: (>> E[0] A[1] A[2] A[3]).'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards I: (>> E[0] A[1] A[2] A[3]).'
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
- en: 'forwards I: (>> E[0] A[1] A[2] A[3] A[4]).'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards I: (>> E[0] A[1] A[2] A[3] A[4]).'
- en: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards" simple_intropattern(I) ":" constr(E[0])
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
- en: 'forwards I: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 'forwards I: (>> E[0] A[1] A[2] A[3] A[4] A[5]).'
- en: (* for use by tactics -- todo: factorize better *)
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: (* for use by tactics -- todo: factorize better *)
- en: Tactic Notation "forwards_nounfold" simple_intropattern(I) ":" constr(Ei) :=
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "forwards_nounfold" simple_intropattern(I) ":" constr(Ei) :=
- en: let args := list_boxer_of Ei in
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := list_boxer_of Ei in
- en: let args := (eval simpl in (args ++ ((boxer ___)::nil))) in
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := (eval simpl in (args ++ ((boxer ___)::nil))) in
- en: build_app args ltac:(fun R ⇒ lets_base I R).
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: build_app args ltac:(fun R ⇒ lets_base I R).
- en: Ltac forwards_nounfold_then Ei cont :=
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac forwards_nounfold_then Ei cont :=
- en: let args := list_boxer_of Ei in
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := list_boxer_of Ei in
- en: let args := (eval simpl in (args ++ ((boxer ___)::nil))) in
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := (eval simpl in (args ++ ((boxer ___)::nil))) in
- en: build_app args cont.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: build_app args cont.
- en: '[PRE51]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Ltac applys_build Ei :=
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac applys_build Ei :=
- en: let args := list_boxer_of Ei in
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := list_boxer_of Ei in
- en: let args := args_unfold_head_if_not_product_but_params args in
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := args_unfold_head_if_not_product_but_params args in
- en: build_app args ltac:(fun R ⇒
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: build_app args ltac:(fun R ⇒
- en: first [ apply R | eapply R | rapply R ]).
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: first [ apply R | eapply R | rapply R ]).
- en: Ltac applys_base E :=
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac applys_base E :=
- en: match type of E with
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: match type of E with
- en: '| list Boxer ⇒ applys_build E'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '| list Boxer ⇒ applys_build E'
- en: '| _ ⇒ first [ rapply E | applys_build E ]'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ first [ rapply E | applys_build E ]'
- en: end; fast_rm_inside E.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: end; fast_rm_inside E.
- en: Tactic Notation "applys" constr(E) :=
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "applys" constr(E) :=
- en: applys_base E.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: applys_base E.
- en: Tactic Notation "applys" constr(E[0]) constr(A[1]) :=
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "applys" constr(E[0]) constr(A[1]) :=
- en: applys (>> E[0] A[1]).
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: applys (>> E[0] A[1]).
- en: Tactic Notation "applys" constr(E[0]) constr(A[1]) constr(A[2]) :=
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "applys" 构造(E[0]) 构造(A[1]) 构造(A[2]) :=
- en: applys (>> E[0] A[1] A[2]).
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: applys (>> E[0] A[1] A[2]).
- en: Tactic Notation "applys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "applys" 构造(E[0]) 构造(A[1]) 构造(A[2]) 构造(A[3]) :=
- en: applys (>> E[0] A[1] A[2] A[3]).
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: applys (>> E[0] A[1] A[2] A[3]).
- en: Tactic Notation "applys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "applys" 构造(E[0]) 构造(A[1]) 构造(A[2]) 构造(A[3]) 构造(A[4]) :=
- en: applys (>> E[0] A[1] A[2] A[3] A[4]).
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: applys (>> E[0] A[1] A[2] A[3] A[4]).
- en: Tactic Notation "applys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "applys" 构造(E[0]) 构造(A[1]) 构造(A[2]) 构造(A[3]) 构造(A[4]) 构造(A[5]) :=
- en: applys (>> E[0] A[1] A[2] A[3] A[4] A[5]).
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: applys (>> E[0] A[1] A[2] A[3] A[4] A[5]).
- en: '[PRE52]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Ltac fapplys_build Ei :=
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac fapplys_build Ei :=
- en: let args := list_boxer_of Ei in
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := list_boxer_of Ei in
- en: let args := (eval simpl in (args ++ ((boxer ___)::nil))) in
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := (eval simpl in (args ++ ((boxer ___)::nil))) in
- en: let args := args_unfold_head_if_not_product_but_params args in
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := args_unfold_head_if_not_product_but_params args in
- en: build_app args ltac:(fun R ⇒ apply R).
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: build_app args ltac:(fun R ⇒ apply R).
- en: Tactic Notation "fapplys" constr(E[0]) :=  (* todo: use the tactic for that*)
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "fapplys" 构造(E[0]) :=  (* todo: use the tactic for that*)
- en: match type of E[0] with
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 E[0] 的类型为
- en: '| list Boxer ⇒ fapplys_build E[0]'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: '| list Boxer ⇒ fapplys_build E[0]'
- en: '| _ ⇒ fapplys_build (>> E[0])'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ fapplys_build (>> E[0])'
- en: end.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Tactic Notation "fapplys" constr(E[0]) constr(A[1]) :=
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "fapplys" 构造(E[0]) 构造(A[1]) :=
- en: fapplys (>> E[0] A[1]).
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: fapplys (>> E[0] A[1]).
- en: Tactic Notation "fapplys" constr(E[0]) constr(A[1]) constr(A[2]) :=
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "fapplys" 构造(E[0]) 构造(A[1]) 构造(A[2]) :=
- en: fapplys (>> E[0] A[1] A[2]).
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: fapplys (>> E[0] A[1] A[2]).
- en: Tactic Notation "fapplys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "fapplys" 构造(E[0]) 构造(A[1]) 构造(A[2]) 构造(A[3]) :=
- en: fapplys (>> E[0] A[1] A[2] A[3]).
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: fapplys (>> E[0] A[1] A[2] A[3]).
- en: Tactic Notation "fapplys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "fapplys" 构造(E[0]) 构造(A[1]) 构造(A[2]) 构造(A[3]) 构造(A[4]) :=
- en: fapplys (>> E[0] A[1] A[2] A[3] A[4]).
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: fapplys (>> E[0] A[1] A[2] A[3] A[4]).
- en: Tactic Notation "fapplys" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "fapplys" 构造(E[0]) 构造(A[1]) 构造(A[2]) 构造(A[3]) 构造(A[4]) 构造(A[5]) :=
- en: fapplys (>> E[0] A[1] A[2] A[3] A[4] A[5]).
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: fapplys (>> E[0] A[1] A[2] A[3] A[4] A[5]).
- en: '[PRE53]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Ltac specializes_build H Ei :=
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac specializes_build H Ei :=
- en: let H' := fresh "TEMP" in rename H into H';
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 让 H' := fresh "TEMP" in rename H into H';
- en: let args := list_boxer_of Ei in
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := list_boxer_of Ei in
- en: let args := constr:((boxer H')::args) in
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := 构造:((boxer H')::args) in
- en: let args := args_unfold_head_if_not_product args in
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 让 args := args_unfold_head_if_not_product args in
- en: 'build_app args ltac:(fun R ⇒ lets H: R);'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 'build_app args ltac:(fun R ⇒ lets H: R);'
- en: clear H'.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 清除 H'.
- en: Ltac specializes_base H Ei :=
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac specializes_base H Ei :=
- en: specializes_build H Ei; fast_rm_inside Ei.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: specializes_build H Ei; fast_rm_inside Ei.
- en: Tactic Notation "specializes" hyp(H) :=
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "specializes" 假设(H) :=
- en: specializes_base H (___).
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: specializes_base H (___).
- en: Tactic Notation "specializes" hyp(H) constr(A) :=
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "specializes" 假设(H) 构造(A) :=
- en: specializes_base H A.
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: specializes_base H A.
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) :=
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "specializes" 假设(H) 构造(A[1]) ���造(A[2]) :=
- en: specializes H (>> A[1] A[2]).
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: specializes H (>> A[1] A[2]).
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "specializes" 假设(H) 构造(A[1]) 构造(A[2]) 构造(A[3]) :=
- en: specializes H (>> A[1] A[2] A[3]).
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: specializes H (>> A[1] A[2] A[3]).
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "specializes" 假设(H) 构造(A[1]) 构造(A[2]) 构造(A[3]) 构造(A[4]) :=
- en: specializes H (>> A[1] A[2] A[3] A[4]).
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: specializes H (>> A[1] A[2] A[3] A[4]).
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "specializes" 假设(H) 构造(A[1]) 构造(A[2]) 构造(A[3]) 构造(A[4]) 构造(A[5]) :=
- en: specializes H (>> A[1] A[2] A[3] A[4] A[5]).
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: specializes H (>> A[1] A[2] A[3] A[4] A[5]).
- en: '[PRE54]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Ltac specializes_var_base H :=
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac specializes_var_base H :=
- en: match type of H with
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 H 的类型为
- en: '| ?P → ?Q ⇒ fail 1'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?P → ?Q ⇒ 失败 1'
- en: '| ∀_:_, _ ⇒ specializes H __'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_:_, _ ⇒ specializes H __'
- en: end.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Ltac specializes_vars_base H :=
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac specializes_vars_base H :=
- en: repeat (specializes_var_base H).
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 重复 (specializes_var_base H).
- en: Tactic Notation "specializes_var" hyp(H) :=
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "specializes_var" 假设(H) :=
- en: specializes_var_base H.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: specializes_var_base H.
- en: Tactic Notation "specializes_vars" hyp(H) :=
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "specializes_vars" 假设(H) :=
- en: specializes_vars_base H.
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: specializes_vars_base H.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE55]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Tactic Notation "fapply" constr(E) :=
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "fapply" 构造(E) :=
- en: 'let H := fresh in forwards H: E;'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: '让 H := fresh in forwards H: E;'
- en: first [ apply H | eapply H | rapply H | hnf; apply H
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 首先[应用 H | 应用 H | 应用 H | hnf; 应用 H
- en: '| hnf; eapply H | applys H ].'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '| hnf; 应用 H | applys H ].'
- en: (* todo: is applys redundant with rapply ? *)
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: （* todo: is applys redundant with rapply ? *）
- en: '[PRE56]'
  id: totrans-908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Tactic Notation "sapply" constr(H) :=
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "sapply" constr(H) :=
- en: first [ apply H | eapply H | rapply H | applys H
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: first [ apply H | eapply H | rapply H | applys H
- en: '| hnf; apply H | hnf; eapply H | hnf; applys H'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: '| hnf; apply H | hnf; eapply H | hnf; applys H'
- en: '| fapply H ].'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: '| fapply H ]。'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: （* ---------------------------------------------------------------------- *）
- en: '[PRE57]'
  id: totrans-914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Tactic Notation "lets_simpl" ident(H) ":" constr(E) :=
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "lets_simpl" ident(H) "：" constr(E) :=
- en: 'lets H: E; try simpl in H.'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets H: E; try simpl in H.'
- en: Tactic Notation "lets_simpl" ":" constr(T) :=
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "lets_simpl" "：" constr(T) :=
- en: 'let H := fresh in lets_simpl H: T.'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 'let H := fresh in lets_simpl H: T。'
- en: '[PRE58]'
  id: totrans-919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Tactic Notation "lets_hnf" ident(H) ":" constr(E) :=
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "lets_hnf" ident(H) "：" constr(E) :=
- en: 'lets H: E; hnf in H.'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 'lets H: E; hnf in H。'
- en: Tactic Notation "lets_hnf" ":" constr(T) :=
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "lets_hnf" "：" constr(T) :=
- en: 'let H := fresh in lets_hnf H: T.'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 'let H := fresh in lets_hnf H: T。'
- en: '[PRE59]'
  id: totrans-924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Tactic Notation "puts" ident(X) ":" constr(E) :=
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "puts" ident(X) "：" constr(E) :=
- en: pose (X := E).
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: pose (X := E)。
- en: Tactic Notation "puts" ":" constr(E) :=
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "puts" "：" constr(E) :=
- en: let X := fresh "X" in pose (X := E).
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: let X := fresh "X" in pose (X := E)。
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: （* ---------------------------------------------------------------------- *）
- en: '[PRE60]'
  id: totrans-930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Ltac logic_base E cont :=
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac logic_base E cont :=
- en: assert (H:E); [ cont tt | eapply H; clear H ].
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: assert (H:E); [ cont tt | eapply H; clear H ]。
- en: Tactic Notation "logic" constr(E) :=
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "logic" constr(E) :=
- en: logic_base E ltac:(fun _ ⇒ tauto).
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: logic_base E ltac:(fun _ ⇒ tauto).
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: （* ---------------------------------------------------------------------- *）
- en: '[PRE61]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Section equatesLemma.
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 区 equatesLemma。
- en: 'Variables (A[0] A[1] : Type).'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 (A[0] A[1]：类型)。
- en: 'Variables (A[2] : ∀(x[1] : A[1]), Type).'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 (A[2]：∀(x[1]：A[1]), 类型)。
- en: 'Variables (A[3] : ∀(x[1] : A[1]) (x[2] : A[2] x[1]), Type).'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 (A[3]：∀(x[1]：A[1]) (x[2]：A[2] x[1]), 类型)。
- en: 'Variables (A[4] : ∀(x[1] : A[1]) (x[2] : A[2] x[1]) (x[3] : A[3] x[2]), Type).'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 (A[4]：∀(x[1]：A[1]) (x[2]：A[2] x[1]) (x[3]：A[3] x[2]), 类型)。
- en: 'Variables (A[5] : ∀(x[1] : A[1]) (x[2] : A[2] x[1]) (x[3] : A[3] x[2]) (x[4]
    : A[4] x[3]), Type).'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 (A[5]：∀(x[1]：A[1]) (x[2]：A[2] x[1]) (x[3]：A[3] x[2]) (x[4]：A[4] x[3]), 类型)。
- en: 'Variables (A[6] : ∀(x[1] : A[1]) (x[2] : A[2] x[1]) (x[3] : A[3] x[2]) (x[4]
    : A[4] x[3]) (x[5] : A[5] x[4]), Type).'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 (A[6]：∀(x[1]：A[1]) (x[2]：A[2] x[1]) (x[3]：A[3] x[2]) (x[4]：A[4] x[3]) (x[5]：A[5]
    x[4]), 类型)。
- en: 'Lemma equates_0 : ∀(P Q:Prop),'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 equates_0：∀(P Q:Prop)，
- en: P → P = Q → Q.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: P → P = Q → Q.
- en: Proof. intros. subst. auto. Qed.
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。intros。subst。auto。Qed。
- en: 'Lemma equates_1 :'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 equates_1：
- en: ∀(P:A[0]→Prop) x[1] y[1],
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: ∀(P:A[0]→Prop) x[1] y[1]，
- en: P y[1] → x[1] = y[1] → P x[1].
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: P y[1] → x[1] = y[1] → P x[1]。
- en: Proof. intros. subst. auto. Qed.
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。intros。subst。auto。Qed。
- en: 'Lemma equates_2 :'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 equates_2：
- en: ∀y[1] (P:A[0]→∀(x[1]:A[1]),Prop) x[1] x[2],
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: ∀y[1] (P:A[0]→∀(x[1]:A[1]),Prop) x[1] x[2]，
- en: P y[1] x[2] → x[1] = y[1] → P x[1] x[2].
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: P y[1] x[2] → x[1] = y[1] → P x[1] x[2]。
- en: Proof. intros. subst. auto. Qed.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。intros。subst。auto。Qed。
- en: 'Lemma equates_3 :'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 equates_3：
- en: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1]),Prop) x[1] x[2] x[3],
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1]),Prop) x[1] x[2] x[3]，
- en: P y[1] x[2] x[3] → x[1] = y[1] → P x[1] x[2] x[3].
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: P y[1] x[2] x[3] → x[1] = y[1] → P x[1] x[2] x[3]。
- en: Proof. intros. subst. auto. Qed.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。intros。subst。auto。Qed。
- en: 'Lemma equates_4 :'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 equates_4：
- en: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1])(x[3]:A[3] x[2]),Prop) x[1] x[2] x[3]
    x[4],
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1])(x[3]:A[3] x[2]),Prop) x[1] x[2] x[3]
    x[4]，
- en: P y[1] x[2] x[3] x[4] → x[1] = y[1] → P x[1] x[2] x[3] x[4].
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: P y[1] x[2] x[3] x[4] → x[1] = y[1] → P x[1] x[2] x[3] x[4]。
- en: Proof. intros. subst. auto. Qed.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。intros。subst。auto。Qed。
- en: 'Lemma equates_5 :'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 equates_5：
- en: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1])(x[3]:A[3] x[2])(x[4]:A[4] x[3]),Prop)
    x[1] x[2] x[3] x[4] x[5],
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1])(x[3]:A[3] x[2])(x[4]:A[4] x[3]),Prop)
    x[1] x[2] x[3] x[4] x[5]，
- en: P y[1] x[2] x[3] x[4] x[5] → x[1] = y[1] → P x[1] x[2] x[3] x[4] x[5].
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: P y[1] x[2] x[3] x[4] x[5] → x[1] = y[1] → P x[1] x[2] x[3] x[4] x[5]。
- en: Proof. intros. subst. auto. Qed.
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。intros。subst。auto。Qed。
- en: 'Lemma equates_6 :'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 equates_6：
- en: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1])(x[3]:A[3] x[2])(x[4]:A[4] x[3])(x[5]:A[5]
    x[4]),Prop)
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: ∀y[1] (P:A[0]→∀(x[1]:A[1])(x[2]:A[2] x[1])(x[3]:A[3] x[2])(x[4]:A[4] x[3])(x[5]:A[5]
    x[4]),Prop)
- en: x[1] x[2] x[3] x[4] x[5] x[6],
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: x[1] x[2] x[3] x[4] x[5] x[6]，
- en: P y[1] x[2] x[3] x[4] x[5] x[6] → x[1] = y[1] → P x[1] x[2] x[3] x[4] x[5] x[6].
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: P y[1] x[2] x[3] x[4] x[5] x[6] → x[1] = y[1] → P x[1] x[2] x[3] x[4] x[5] x[6]。
- en: Proof. intros. subst. auto. Qed.
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。intros。subst。auto。Qed。
- en: End equatesLemma.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: End equatesLemma。
- en: Ltac equates_lemma n :=
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac equates_lemma n :=
- en: match nat_from_number n with
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: match nat_from_number n with
- en: '| 0 ⇒ constr:(equates_0)'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 ⇒ constr:(equates_0)'
- en: '| 1 ⇒ constr:(equates_1)'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '| 1 ⇒ constr:(equates_1)'
- en: '| 2 ⇒ constr:(equates_2)'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: '| 2 ⇒ constr:(equates_2)'
- en: '| 3 ⇒ constr:(equates_3)'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: '| 3 ⇒ constr:(equates_3)'
- en: '| 4 ⇒ constr:(equates_4)'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '| 4 ⇒ constr:(equates_4)'
- en: '| 5 ⇒ constr:(equates_5)'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: '| 5 ⇒ constr:(equates_5)'
- en: '| 6 ⇒ constr:(equates_6)'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: '| 6 ⇒ constr:(equates_6)'
- en: end.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: end。
- en: Ltac equates_one n :=
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac equates_one n :=
- en: let L := equates_lemma n in
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: let L := equates_lemma n in
- en: eapply L.
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: eapply L。
- en: Ltac equates_several E cont :=
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac equates_several E cont :=
- en: let all_pos := match type of E with
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: let all_pos := match type of E with
- en: '| List.list Boxer ⇒ constr:(E)'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: '| List.list Boxer ⇒ constr:(E)'
- en: '| _ ⇒ constr:((boxer E)::nil)'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ constr:((boxer E)::nil)'
- en: end in
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: end in
- en: let rec go pos :=
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: let rec go pos :=
- en: match pos with
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: match pos with
- en: '| nil ⇒ cont tt'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: '| nil ⇒ cont tt'
- en: '| (boxer ?n)::?pos'' ⇒ equates_one n; [ instantiate; go pos'' | ]'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: '| (boxer ?n)::?pos'' ⇒ equates_one n; [ instantiate; go pos'' | ]'
- en: end in
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: end in
- en: go all_pos.
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: go all_pos.
- en: Tactic Notation "equates" constr(E) :=
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "equates" constr(E) :=
- en: equates_several E ltac:(fun _ ⇒ idtac).
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: equates_several E ltac:(fun _ ⇒ idtac).
- en: Tactic Notation "equates" constr(n[1]) constr(n[2]) :=
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "equates" constr(n[1]) constr(n[2]) :=
- en: equates (>> n[1] n[2]).
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: equates (>> n[1] n[2]).
- en: Tactic Notation "equates" constr(n[1]) constr(n[2]) constr(n[3]) :=
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "equates" constr(n[1]) constr(n[2]) constr(n[3]) :=
- en: equates (>> n[1] n[2] n[3]).
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: equates (>> n[1] n[2] n[3]).
- en: Tactic Notation "equates" constr(n[1]) constr(n[2]) constr(n[3]) constr(n[4])
    :=
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "equates" constr(n[1]) constr(n[2]) constr(n[3]) constr(n[4])
    :=
- en: equates (>> n[1] n[2] n[3] n[4]).
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: equates (>> n[1] n[2] n[3] n[4]).
- en: '[PRE62]'
  id: totrans-1005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Tactic Notation "applys_eq" constr(H) constr(E) :=
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "applys_eq" constr(H) constr(E) :=
- en: equates_several E ltac:(fun _ ⇒ sapply H).
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: equates_several E ltac:(fun _ ⇒ sapply H).
- en: Tactic Notation "applys_eq" constr(H) constr(n[1]) constr(n[2]) :=
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "applys_eq" constr(H) constr(n[1]) constr(n[2]) :=
- en: applys_eq H (>> n[1] n[2]).
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: applys_eq H (>> n[1] n[2]).
- en: Tactic Notation "applys_eq" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    :=
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "applys_eq" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    :=
- en: applys_eq H (>> n[1] n[2] n[3]).
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: applys_eq H (>> n[1] n[2] n[3]).
- en: Tactic Notation "applys_eq" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    constr(n[4]) :=
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "applys_eq" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    constr(n[4]) :=
- en: applys_eq H (>> n[1] n[2] n[3] n[4]).
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: applys_eq H (>> n[1] n[2] n[3] n[4]).
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE63]'
  id: totrans-1015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Tactic Notation "false_goal" :=
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "false_goal" :=
- en: elimtype False.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: elimtype False.
- en: '[PRE64]'
  id: totrans-1018
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Ltac false_post :=
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac false_post :=
- en: solve [ assumption | discriminate | congruence ].
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: solve [ assumption | discriminate | congruence ].
- en: '[PRE65]'
  id: totrans-1021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Tactic Notation "false" :=
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "false" :=
- en: false_goal; try false_post.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: false_goal; try false_post.
- en: '[PRE66]'
  id: totrans-1024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Tactic Notation "tryfalse" :=
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "tryfalse" :=
- en: try solve [ false ].
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: try solve [ false ].
- en: '[PRE67]'
  id: totrans-1027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Ltac false_then E cont :=
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac false_then E cont :=
- en: false_goal; first
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: false_goal; first
- en: '[ applys E; instantiate'
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: '[ applys E; instantiate'
- en: '| forwards_then E ltac:(fun M ⇒'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: '| forwards_then E ltac:(fun M ⇒'
- en: pose M; jauto_set_hyps; intros; false) ];
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: pose M; jauto_set_hyps; intros; false) ];
- en: cont tt.
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: cont tt.
- en: (* TODO: is cont needed? *)
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: (* TODO: is cont needed? *)
- en: Tactic Notation "false" constr(E) :=
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "false" constr(E) :=
- en: false_then E ltac:(fun _ ⇒ idtac).
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: false_then E ltac:(fun _ ⇒ idtac).
- en: Tactic Notation "false" constr(E) constr(E[1]) :=
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "false" constr(E) constr(E[1]) :=
- en: false (>> E E[1]).
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: false (>> E E[1]).
- en: Tactic Notation "false" constr(E) constr(E[1]) constr(E[2]) :=
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "false" constr(E) constr(E[1]) constr(E[2]) :=
- en: false (>> E E[1] E[2]).
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: false (>> E E[1] E[2]).
- en: Tactic Notation "false" constr(E) constr(E[1]) constr(E[2]) constr(E[3]) :=
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "false" constr(E) constr(E[1]) constr(E[2]) constr(E[3]) :=
- en: false (>> E E[1] E[2] E[3]).
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: false (>> E E[1] E[2] E[3]).
- en: Tactic Notation "false" constr(E) constr(E[1]) constr(E[2]) constr(E[3]) constr(E[4])
    :=
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "false" constr(E) constr(E[1]) constr(E[2]) constr(E[3]) constr(E[4])
    :=
- en: false (>> E E[1] E[2] E[3] E[4]).
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: false (>> E E[1] E[2] E[3] E[4]).
- en: '[PRE68]'
  id: totrans-1045
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Ltac false_invert_for H :=
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac false_invert_for H :=
- en: let M := fresh in pose (M := H); inversion H; false.
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: let M := fresh in pose (M := H); inversion H; false.
- en: Tactic Notation "false_invert" constr(H) :=
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "false_invert" constr(H) :=
- en: try solve [ false_invert_for H | false ].
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: try solve [ false_invert_for H | false ].
- en: '[PRE69]'
  id: totrans-1050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Ltac false_invert_iter :=
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac false_invert_iter :=
- en: match goal with H:_ ⊢ _ ⇒
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: match goal with H:_ ⊢ _ ⇒
- en: solve [ inversion H; false
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: solve [ inversion H; false
- en: '| clear H; false_invert_iter'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: '| clear H; false_invert_iter'
- en: '| fail 2 ] end.'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: '| fail 2 ] end.'
- en: Tactic Notation "false_invert" :=
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "false_invert" :=
- en: intros; solve [ false_invert_iter | false ].
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: intros; solve [ false_invert_iter | false ].
- en: '[PRE70]'
  id: totrans-1058
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Tactic Notation "tryfalse_invert" constr(H) :=
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "tryfalse_invert" constr(H) :=
- en: try (false_invert H).
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: try (false_invert H).
- en: Tactic Notation "tryfalse_invert" :=
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "tryfalse_invert" :=
- en: try false_invert.
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: try false_invert.
- en: '[PRE71]'
  id: totrans-1063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Ltac false_neq_self_hyp :=
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac false_neq_self_hyp :=
- en: 'match goal with H: ?x ≠ ?x ⊢ _ ⇒'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 'match goal with H: ?x ≠ ?x ⊢ _ ⇒'
- en: false_goal; apply H; reflexivity end.
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: false_goal; apply H; reflexivity end.
- en: (* ********************************************************************** *)
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: (* ********************************************************************** *)
- en: '[PRE72]'
  id: totrans-1068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE73]'
  id: totrans-1070
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: (* introv_rec introduces all visible variables.    It does not try to unfold any definition. *)
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: (* introv_rec introduces all visible variables.    It does not try to unfold any definition. *)
- en: Ltac introv_rec :=
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac introv_rec :=
- en: match goal with
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: match goal with
- en: '| ⊢ ?P → ?Q ⇒ idtac'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ ?P → ?Q ⇒ idtac'
- en: '| ⊢ ∀_, _ ⇒ intro; introv_rec'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ ∀_, _ ⇒ intro; introv_rec'
- en: '| ⊢ _ ⇒ idtac'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ _ ⇒ idtac'
- en: end.
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: (* introv_noarg forces the goal to be a ∀ or an →,    and then calls introv_rec to introduces variables
       (possibly none, in which case introv is the same as hnf).    If the goal is not a product, then it does not do anything. *)
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: (* introv_noarg 强制目标为∀或→，然后调用introv_rec引入变量（可能没有，在这种情况下introv与hnf相同）。如果目标不是乘积，则不执行任何操作。*)
- en: Ltac introv_noarg :=
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac introv_noarg :=
- en: match goal with
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: match goal with
- en: '| ⊢ ?P → ?Q ⇒ idtac'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ ?P → ?Q ⇒ idtac'
- en: '| ⊢ ∀_, _ ⇒ introv_rec'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ ∀_, _ ⇒ introv_rec'
- en: '| ⊢ ?G ⇒ hnf;'
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ ?G ⇒ hnf;'
- en: match goal with
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: match goal with
- en: '| ⊢ ?P → ?Q ⇒ idtac'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ ?P → ?Q ⇒ idtac'
- en: '| ⊢ ∀_, _ ⇒ introv_rec'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ ∀_, _ ⇒ introv_rec'
- en: end
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| ⊢ _ ⇒ idtac'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ _ ⇒ idtac'
- en: end.
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: (* simpler yet perhaps less efficient imlementation *)
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: (* 更简单但可能效率较低的实现*)
- en: Ltac introv_noarg_not_optimized :=
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac introv_noarg_not_optimized :=
- en: intro; match goal with H:_|-_ ⇒ revert H end; introv_rec.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: intro; match goal with H:_|-_ ⇒ revert H end; introv_rec.
- en: (* introv_arg H introduces one non-dependent hypothesis    under the name H, after introducing the variables
       quantified with a ∀ that preceeds this hypothesis.    This tactic fails if there does not exist a hypothesis
       to be introduced. *)
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: (* introv_arg H 在引入前导此假设的∀量化变量后，引入一个非依赖假设H。如果不存在要引入的假设，则此策略失败。*)
- en: (* todo: __ in introv means "intros" *)
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: (* todo: __ 在introv中表示"intros"*)
- en: Ltac introv_arg H :=
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac introv_arg H :=
- en: hnf; match goal with
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: hnf; match goal with
- en: '| ⊢ ?P → ?Q ⇒ intros H'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ ?P → ?Q ⇒ intros H'
- en: '| ⊢ ∀_, _ ⇒ intro; introv_arg H'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ ∀_, _ ⇒ intro; introv_arg H'
- en: end.
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: (* introv I[1] .. IN iterates introv Ik *)
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: (* introv I[1] .. IN 迭代introv Ik*)
- en: Tactic Notation "introv" :=
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "introv" :=
- en: introv_noarg.
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: introv_noarg.
- en: Tactic Notation "introv" simple_intropattern(I[1]) :=
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "introv" simple_intropattern(I[1]) :=
- en: introv_arg I[1].
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: introv_arg I[1].
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
    :=
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
    :=
- en: introv I[1]; introv I[2].
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: introv I[1]; introv I[2].
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) :=
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) :=
- en: introv I[1]; introv I[2] I[3].
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: introv I[1]; introv I[2] I[3].
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) :=
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) simple_intropattern(I[4]) :=
- en: introv I[1]; introv I[2] I[3] I[4].
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: introv I[1]; introv I[2] I[3] I[4].
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
    :=
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
    :=
- en: introv I[1]; introv I[2] I[3] I[4] I[5].
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: introv I[1]; introv I[2] I[3] I[4] I[5].
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
- en: simple_intropattern(I[6]) :=
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[6]) :=
- en: introv I[1]; introv I[2] I[3] I[4] I[5] I[6].
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: introv I[1]; introv I[2] I[3] I[4] I[5] I[6].
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
- en: simple_intropattern(I[6]) simple_intropattern(I[7]) :=
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[6]) simple_intropattern(I[7]) :=
- en: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7].
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7].
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
- en: simple_intropattern(I[6]) simple_intropattern(I[7]) simple_intropattern(I[8])
    :=
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[6]) simple_intropattern(I[7]) simple_intropattern(I[8])
    :=
- en: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7] I[8].
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7] I[8].
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
- en: simple_intropattern(I[6]) simple_intropattern(I[7]) simple_intropattern(I[8])
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[6]) simple_intropattern(I[7]) simple_intropattern(I[8])
- en: simple_intropattern(I[9]) :=
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[9]) :=
- en: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7] I[8] I[9].
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7] I[8] I[9].
- en: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "introv" simple_intropattern(I[1]) simple_intropattern(I[2])
- en: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[3]) simple_intropattern(I[4]) simple_intropattern(I[5])
- en: simple_intropattern(I[6]) simple_intropattern(I[7]) simple_intropattern(I[8])
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[6]) simple_intropattern(I[7]) simple_intropattern(I[8])
- en: simple_intropattern(I[9]) simple_intropattern(I[10]) :=
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[9]) simple_intropattern(I[10]) :=
- en: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7] I[8] I[9] I[10].
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: introv I[1]; introv I[2] I[3] I[4] I[5] I[6] I[7] I[8] I[9] I[10].
- en: '[PRE74]'
  id: totrans-1138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Tactic Notation "intros_all" :=
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "intros_all" :=
- en: repeat intro.
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: repeat intro.
- en: '[PRE75]'
  id: totrans-1141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Tactic Notation "intro_hnf" :=
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "intro_hnf" :=
- en: 'intro; match goal with H: _ ⊢ _ ⇒ hnf in H end.'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 'intro; match goal with H: _ ⊢ _ ⇒ hnf in H end.'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE76]'
  id: totrans-1145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Tactic Notation "gen" ident(X[1]) :=
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "gen" ident(X[1]) :=
- en: generalize dependent X[1].
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: generalize dependent X[1].
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) :=
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "gen" ident(X[1]) ident(X[2]) :=
- en: gen X[2]; gen X[1].
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: gen X[2]; gen X[1].
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) :=
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) :=
- en: gen X[3]; gen X[2]; gen X[1].
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: gen X[3]; gen X[2]; gen X[1].
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4])  :=
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4])  :=
- en: gen X[4]; gen X[3]; gen X[2]; gen X[1].
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: gen X[4]; gen X[3]; gen X[2]; gen X[1].
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
    :=
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
    :=
- en: gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
- en: ident(X[6]) :=
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[6]) :=
- en: gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
- en: ident(X[6]) ident(X[7]) :=
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[6]) ident(X[7]) :=
- en: gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
- en: ident(X[6]) ident(X[7]) ident(X[8]) :=
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[6]) ident(X[7]) ident(X[8]) :=
- en: gen X[8]; gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: gen X[8]; gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2]; gen X[1].
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
- en: ident(X[6]) ident(X[7]) ident(X[8]) ident(X[9]) :=
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[6]) ident(X[7]) ident(X[8]) ident(X[9]) :=
- en: gen X[9]; gen X[8]; gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2];
    gen X[1].
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: gen X[9]; gen X[8]; gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3]; gen X[2];
    gen X[1].
- en: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "gen" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) ident(X[5])
- en: ident(X[6]) ident(X[7]) ident(X[8]) ident(X[9]) ident(X[10]) :=
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[6]) ident(X[7]) ident(X[8]) ident(X[9]) ident(X[10]) :=
- en: gen X[10]; gen X[9]; gen X[8]; gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3];
    gen X[2]; gen X[1].
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: gen X[10]; gen X[9]; gen X[8]; gen X[7]; gen X[6]; gen X[5]; gen X[4]; gen X[3];
    gen X[2]; gen X[1].
- en: '[PRE77]'
  id: totrans-1171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Tactic Notation "generalizes" hyp(X) :=
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "generalizes" hyp(X) :=
- en: generalize X; clear X.
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: generalize X; clear X.
- en: Tactic Notation "generalizes" hyp(X[1]) hyp(X[2]) :=
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "generalizes" hyp(X[1]) hyp(X[2]) :=
- en: generalizes X[1]; generalizes X[2].
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: generalizes X[1]; generalizes X[2].
- en: Tactic Notation "generalizes" hyp(X[1]) hyp(X[2]) hyp(X[3]) :=
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "generalizes" hyp(X[1]) hyp(X[2]) hyp(X[3]) :=
- en: generalizes X[1] X[2]; generalizes X[3].
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: generalizes X[1] X[2]; generalizes X[3].
- en: Tactic Notation "generalizes" hyp(X[1]) hyp(X[2]) hyp(X[3]) hyp(X[4]) :=
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "generalizes" hyp(X[1]) hyp(X[2]) hyp(X[3]) hyp(X[4]) :=
- en: generalizes X[1] X[2] X[3]; generalizes X[4].
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: generalizes X[1] X[2] X[3]; generalizes X[4].
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE78]'
  id: totrans-1181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Tactic Notation "sets" ident(X) ":" constr(E) :=
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "sets" ident(X) ":" constr(E) :=
- en: set (X := E) in *.
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: set (X := E) in *.
- en: '[PRE79]'
  id: totrans-1184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Ltac def_to_eq X HX E :=
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac def_to_eq X HX E :=
- en: 'assert (HX : X = E) by reflexivity; clearbody X.'
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 'assert (HX : X = E) by reflexivity; clearbody X.'
- en: Ltac def_to_eq_sym X HX E :=
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac def_to_eq_sym X HX E :=
- en: 'assert (HX : E = X) by reflexivity; clearbody X.'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 'assert (HX : E = X) by reflexivity; clearbody X.'
- en: '[PRE80]'
  id: totrans-1189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Tactic Notation "set_eq" ident(X) ident(HX) ":" constr(E) :=
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "set_eq" ident(X) ident(HX) ":" constr(E) :=
- en: set (X := E); def_to_eq X HX E.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: set (X := E); def_to_eq X HX E.
- en: Tactic Notation "set_eq" ident(X) ":" constr(E) :=
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "set_eq" ident(X) ":" constr(E) :=
- en: 'let HX := fresh "EQ" X in set_eq X HX: E.'
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 'let HX := fresh "EQ" X in set_eq X HX: E.'
- en: Tactic Notation "set_eq" ":" constr(E) :=
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "set_eq" ":" constr(E) :=
- en: 'let X := fresh "X" in set_eq X: E.'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 'let X := fresh "X" in set_eq X: E.'
- en: Tactic Notation "set_eq" "←" ident(X) ident(HX) ":" constr(E) :=
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "set_eq" "←" ident(X) ident(HX) ":" constr(E) :=
- en: set (X := E); def_to_eq_sym X HX E.
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: set (X := E); def_to_eq_sym X HX E.
- en: Tactic Notation "set_eq" "←" ident(X) ":" constr(E) :=
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "set_eq" "←" ident(X) ":" constr(E) :=
- en: 'let HX := fresh "EQ" X in set_eq ← X HX: E.'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 'let HX := fresh "EQ" X in set_eq ← X HX: E.'
- en: Tactic Notation "set_eq" "←" ":" constr(E) :=
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" "←" ":" constr(E) :=
- en: 'let X := fresh "X" in set_eq ← X: E.'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 'let X := fresh "X" in set_eq ← X: E.'
- en: Tactic Notation "sets_eq" ident(X) ident(HX) ":" constr(E) :=
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "sets_eq" ident(X) ident(HX) ":" constr(E) :=
- en: set (X := E) in *; def_to_eq X HX E.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: set (X := E) in *; def_to_eq X HX E.
- en: Tactic Notation "sets_eq" ident(X) ":" constr(E) :=
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "sets_eq" ident(X) ":" constr(E) :=
- en: 'let HX := fresh "EQ" X in sets_eq X HX: E.'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 'let HX := fresh "EQ" X in sets_eq X HX: E.'
- en: Tactic Notation "sets_eq" ":" constr(E) :=
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "sets_eq" ":" constr(E) :=
- en: 'let X := fresh "X" in sets_eq X: E.'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 'let X := fresh "X" in sets_eq X: E.'
- en: Tactic Notation "sets_eq" "←" ident(X) ident(HX) ":" constr(E) :=
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "sets_eq" "←" ident(X) ident(HX) ":" constr(E) :=
- en: set (X := E) in *; def_to_eq_sym X HX E.
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: set (X := E) in *; def_to_eq_sym X HX E.
- en: Tactic Notation "sets_eq" "←" ident(X) ":" constr(E) :=
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "sets_eq" "←" ident(X) ":" constr(E) :=
- en: 'let HX := fresh "EQ" X in sets_eq ← X HX: E.'
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 'let HX := fresh "EQ" X in sets_eq ← X HX: E.'
- en: Tactic Notation "sets_eq" "←" ":" constr(E) :=
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "sets_eq" "←" ":" constr(E)：
- en: 'let X := fresh "X" in sets_eq ← X: E.'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 'let X := fresh "X" in sets_eq ← X: E.'
- en: Tactic Notation "set_eq" ident(X) ident(HX) ":" constr(E) "in" hyp(H) :=
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" ident(X) ident(HX) ":" constr(E) "in" hyp(H) :=
- en: set (X := E) in H; def_to_eq X HX E.
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: set (X := E) in H; def_to_eq X HX E.
- en: Tactic Notation "set_eq" ident(X) ":" constr(E) "in" hyp(H) :=
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" ident(X) ":" constr(E) "in" hyp(H) :=
- en: 'let HX := fresh "EQ" X in set_eq X HX: E in H.'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 'let HX := fresh "EQ" X in set_eq X HX: E in H.'
- en: Tactic Notation "set_eq" ":" constr(E) "in" hyp(H) :=
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" ":" constr(E) "in" hyp(H) :=
- en: 'let X := fresh "X" in set_eq X: E in H.'
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 'let X := fresh "X" in set_eq X: E in H.'
- en: Tactic Notation "set_eq" "←" ident(X) ident(HX) ":" constr(E) "in" hyp(H) :=
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" "←" ident(X) ident(HX) ":" constr(E) "in" hyp(H) :=
- en: set (X := E) in H; def_to_eq_sym X HX E.
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: set (X := E) in H; def_to_eq_sym X HX E.
- en: Tactic Notation "set_eq" "←" ident(X) ":" constr(E) "in" hyp(H) :=
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" "←" ident(X) ":" constr(E) "in" hyp(H) :=
- en: 'let HX := fresh "EQ" X in set_eq ← X HX: E in H.'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 'let HX := fresh "EQ" X in set_eq ← X HX: E in H.'
- en: Tactic Notation "set_eq" "←" ":" constr(E) "in" hyp(H) :=
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" "←" ":" constr(E) "in" hyp(H) :=
- en: 'let X := fresh "X" in set_eq ← X: E in H.'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 'let X := fresh "X" in set_eq ← X: E in H.'
- en: Tactic Notation "set_eq" ident(X) ident(HX) ":" constr(E) "in" "⊢" :=
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" ident(X) ident(HX) ":" constr(E) "in" "⊢" :=
- en: set (X := E) in ⊢; def_to_eq X HX E.
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: set (X := E) in ⊢; def_to_eq X HX E.
- en: Tactic Notation "set_eq" ident(X) ":" constr(E) "in" "⊢" :=
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" ident(X) ":" constr(E) "in" "⊢" :=
- en: 'let HX := fresh "EQ" X in set_eq X HX: E in ⊢.'
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 'let HX := fresh "EQ" X in set_eq X HX: E in ⊢.'
- en: Tactic Notation "set_eq" ":" constr(E) "in" "⊢" :=
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" ":" constr(E) "in" "⊢" :=
- en: 'let X := fresh "X" in set_eq X: E in ⊢.'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: 'let X := fresh "X" in set_eq X: E in ⊢.'
- en: Tactic Notation "set_eq" "←" ident(X) ident(HX) ":" constr(E) "in" "⊢" :=
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" "←" ident(X) ident(HX) ":" constr(E) "in" "⊢" :=
- en: set (X := E) in ⊢; def_to_eq_sym X HX E.
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: set (X := E) in ⊢; def_to_eq_sym X HX E.
- en: Tactic Notation "set_eq" "←" ident(X) ":" constr(E) "in" "⊢" :=
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" "←" ident(X) ":" constr(E) "in" "⊢" :=
- en: 'let HX := fresh "EQ" X in set_eq ← X HX: E in ⊢.'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 'let HX := fresh "EQ" X in set_eq ← X HX: E in ⊢.'
- en: Tactic Notation "set_eq" "←" ":" constr(E) "in" "⊢" :=
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "set_eq" "←" ":" constr(E) "in" "⊢" :=
- en: 'let X := fresh "X" in set_eq ← X: E in ⊢.'
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 'let X := fresh "X" in set_eq ← X: E in ⊢.'
- en: '[PRE81]'
  id: totrans-1238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Tactic Notation "gen_eq" ident(X) ":" constr(E) :=
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "gen_eq" ident(X) ":" constr(E) :=
- en: 'let EQ := fresh in sets_eq X EQ: E; revert EQ.'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 'let EQ := fresh in sets_eq X EQ: E; revert EQ.'
- en: Tactic Notation "gen_eq" ":" constr(E) :=
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "gen_eq" ":" constr(E) :=
- en: 'let X := fresh "X" in gen_eq X: E.'
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 'let X := fresh "X" in gen_eq X: E.'
- en: Tactic Notation "gen_eq" ":" constr(E) "as" ident(X) :=
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "gen_eq" ":" constr(E) "as" ident(X) :=
- en: 'gen_eq X: E.'
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 'gen_eq X: E.'
- en: Tactic Notation "gen_eq" ident(X[1]) ":" constr(E[1]) ","
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "gen_eq" ident(X[1]) ":" constr(E[1]) ","
- en: ident(X[2]) ":" constr(E[2]) :=
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[2]) ":" constr(E[2]) :=
- en: 'gen_eq X[2]: E[2]; gen_eq X[1]: E[1].'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 'gen_eq X[2]: E[2]; gen_eq X[1]: E[1].'
- en: Tactic Notation "gen_eq" ident(X[1]) ":" constr(E[1]) ","
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "gen_eq" ident(X[1]) ":" constr(E[1]) ","
- en: ident(X[2]) ":" constr(E[2]) "," ident(X[3]) ":" constr(E[3]) :=
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[2]) ":" constr(E[2]) "," ident(X[3]) ":" constr(E[3]) :=
- en: 'gen_eq X[3]: E[3]; gen_eq X[2]: E[2]; gen_eq X[1]: E[1].'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: 'gen_eq X[3]: E[3]; gen_eq X[2]: E[2]; gen_eq X[1]: E[1].'
- en: '[PRE82]'
  id: totrans-1251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Ltac sets_let_base tac :=
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac sets_let_base tac :=
- en: match goal with
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: match goal with
- en: '| ⊢ context[let _ := ?E in _] ⇒ tac E; cbv zeta'
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ context[let _ := ?E in _] ⇒ tac E; cbv zeta'
- en: '| H: context[let _ := ?E in _] ⊢ _ ⇒ tac E; cbv zeta in H'
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: '| H: context[let _ := ?E in _] ⊢ _ ⇒ tac E; cbv zeta in H'
- en: end.
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Ltac sets_let_in_base H tac :=
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac sets_let_in_base H tac :=
- en: match type of H with context[let _ := ?E in _] ⇒
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 H 的类型为 context[let _ := ?E in _] ⇒
- en: tac E; cbv zeta in H end.
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: tac E; cbv zeta in H end.
- en: Tactic Notation "sets_let" ident(X) :=
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "sets_let" ident(X) :=
- en: 'sets_let_base ltac:(fun E ⇒ sets X: E).'
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 'sets_let_base ltac:(fun E ⇒ sets X: E).'
- en: Tactic Notation "sets_let" ident(X) "in" hyp(H) :=
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "sets_let" ident(X) "in" hyp(H) :=
- en: 'sets_let_in_base H ltac:(fun E ⇒ sets X: E).'
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: 'sets_let_in_base H ltac:(fun E ⇒ sets X: E).'
- en: Tactic Notation "sets_eq_let" ident(X) :=
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 策略记法 "sets_eq_let" ident(X) :=
- en: 'sets_let_base ltac:(fun E ⇒ sets_eq X: E).'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: 'sets_let_base ltac:(fun E ⇒ sets_eq X: E).'
- en: Tactic Notation "sets_eq_let" ident(X) "in" hyp(H) :=
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "sets_eq_let" ident(X) "in" hyp(H) :=
- en: 'sets_let_in_base H ltac:(fun E ⇒ sets_eq X: E).'
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 'sets_let_in_base H ltac:(fun E ⇒ sets_eq X: E).'
- en: (* ********************************************************************** *)
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: (* ********************************************************************** *)
- en: '[PRE83]'
  id: totrans-1269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Ltac rewrites_base E cont :=
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac rewrites_base E cont :=
- en: match type of E with
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: match type of E with
- en: '| List.list Boxer ⇒ forwards_then E cont'
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: '| List.list Boxer ⇒ forwards_then E cont'
- en: '| _ ⇒ cont E; fast_rm_inside E'
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ cont E; fast_rm_inside E'
- en: end.
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Tactic Notation "rewrites" constr(E) :=
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrites" constr(E) :=
- en: rewrites_base E ltac:(fun M ⇒ rewrite M ).
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: rewrites_base E ltac:(fun M ⇒ rewrite M ).
- en: Tactic Notation "rewrites" constr(E) "in" hyp(H) :=
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrites" constr(E) "in" hyp(H) :=
- en: rewrites_base E ltac:(fun M ⇒ rewrite M in H).
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: rewrites_base E ltac:(fun M ⇒ rewrite M in H).
- en: Tactic Notation "rewrites" constr(E) "in" "*" :=
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrites" constr(E) "in" "*" :=
- en: rewrites_base E ltac:(fun M ⇒ rewrite M in *).
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: rewrites_base E ltac:(fun M ⇒ rewrite M in *).
- en: Tactic Notation "rewrites" "←" constr(E) :=
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrites" "←" constr(E) :=
- en: rewrites_base E ltac:(fun M ⇒ rewrite ← M ).
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: rewrites_base E ltac:(fun M ⇒ rewrite ← M ).
- en: Tactic Notation "rewrites" "←" constr(E) "in" hyp(H) :=
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrites" "←" constr(E) "in" hyp(H) :=
- en: rewrites_base E ltac:(fun M ⇒ rewrite ← M in H).
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: rewrites_base E ltac:(fun M ⇒ rewrite ← M in H).
- en: Tactic Notation "rewrites" "←" constr(E) "in" "*" :=
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrites" "←" constr(E) "in" "*" :=
- en: rewrites_base E ltac:(fun M ⇒ rewrite ← M in *).
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: rewrites_base E ltac:(fun M ⇒ rewrite ← M in *).
- en: (* TODO: extend tactics below to use rewrites *)
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: (* TODO: extend tactics below to use rewrites *)
- en: '[PRE84]'
  id: totrans-1288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Tactic Notation "rewrite_all" constr(E) :=
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrite_all" constr(E) :=
- en: repeat rewrite E.
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: repeat rewrite E.
- en: Tactic Notation "rewrite_all" "←" constr(E) :=
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrite_all" "←" constr(E) :=
- en: repeat rewrite ← E.
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: repeat rewrite ← E.
- en: Tactic Notation "rewrite_all" constr(E) "in" ident(H) :=
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrite_all" constr(E) "in" ident(H) :=
- en: repeat rewrite E in H.
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: repeat rewrite E in H.
- en: Tactic Notation "rewrite_all" "←" constr(E) "in" ident(H) :=
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrite_all" "←" constr(E) "in" ident(H) :=
- en: repeat rewrite ← E in H.
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: repeat rewrite ← E in H.
- en: Tactic Notation "rewrite_all" constr(E) "in" "*" :=
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrite_all" constr(E) "in" "*" :=
- en: repeat rewrite E in *.
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: repeat rewrite E in *.
- en: Tactic Notation "rewrite_all" "←" constr(E) "in" "*" :=
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrite_all" "←" constr(E) "in" "*" :=
- en: repeat rewrite ← E in *.
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: repeat rewrite ← E in *.
- en: '[PRE85]'
  id: totrans-1301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Ltac asserts_rewrite_tactic E action :=
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac asserts_rewrite_tactic E action :=
- en: 'let EQ := fresh in (assert (EQ : E);'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 'let EQ := fresh in (assert (EQ : E);'
- en: '[ idtac | action EQ; clear EQ ]).'
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: '[ idtac | action EQ; clear EQ ]).'
- en: Tactic Notation "asserts_rewrite" constr(E) :=
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "asserts_rewrite" constr(E) :=
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ).
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ).
- en: Tactic Notation "asserts_rewrite" "←" constr(E) :=
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "asserts_rewrite" "←" constr(E) :=
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ).
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ).
- en: Tactic Notation "asserts_rewrite" constr(E) "in" hyp(H) :=
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "asserts_rewrite" constr(E) "in" hyp(H) :=
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ in H).
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ in H).
- en: Tactic Notation "asserts_rewrite" "←" constr(E) "in" hyp(H) :=
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "asserts_rewrite" "←" constr(E) "in" hyp(H) :=
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ in H).
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ in H).
- en: Tactic Notation "asserts_rewrite" constr(E) "in" "*" :=
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "asserts_rewrite" constr(E) "in" "*" :=
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ in *).
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ in *).
- en: Tactic Notation "asserts_rewrite" "←" constr(E) "in" "*" :=
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "asserts_rewrite" "←" constr(E) "in" "*" :=
- en: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ in *).
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: asserts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ in *).
- en: '[PRE86]'
  id: totrans-1317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Ltac cuts_rewrite_tactic E action :=
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac cuts_rewrite_tactic E action :=
- en: 'let EQ := fresh in (cuts EQ: E;'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 'let EQ := fresh in (cuts EQ: E;'
- en: '[ action EQ; clear EQ | idtac ]).'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: '[ action EQ; clear EQ | idtac ]).'
- en: Tactic Notation "cuts_rewrite" constr(E) :=
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "cuts_rewrite" constr(E) :=
- en: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ).
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ).
- en: Tactic Notation "cuts_rewrite" "←" constr(E) :=
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "cuts_rewrite" "←" constr(E) :=
- en: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ).
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ).
- en: Tactic Notation "cuts_rewrite" constr(E) "in" hyp(H) :=
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "cuts_rewrite" constr(E) "in" hyp(H) :=
- en: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ in H).
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite EQ in H).
- en: Tactic Notation "cuts_rewrite" "←" constr(E) "in" hyp(H) :=
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "cuts_rewrite" "←" constr(E) "in" hyp(H) :=
- en: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ in H).
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: cuts_rewrite_tactic E ltac:(fun EQ ⇒ rewrite ← EQ in H).
- en: '[PRE87]'
  id: totrans-1329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Ltac rewrite_except H EQ :=
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac rewrite_except H EQ :=
- en: let K := fresh in let T := type of H in
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: let K := fresh in let T := type of H in
- en: set (K := T) in H;
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: set (K := T) in H;
- en: rewrite EQ in *; unfold K in H; clear K.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: rewrite EQ in *; unfold K in H; clear K.
- en: '[PRE88]'
  id: totrans-1334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Tactic Notation "rewrites" constr(E) "at" constr(K) :=
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "rewrites" constr(E) "at" constr(K) :=
- en: match type of E with ?T[1] = ?T[2] ⇒
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: match type of E with ?T[1] = ?T[2] ⇒
- en: ltac_action_at K of T[1] do (rewrites E) end.
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: 在 T[1] 中的 K 处执行 (重写 E) 结束。
- en: Tactic Notation "rewrites" "←" constr(E) "at" constr(K) :=
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "rewrites" "←" constr(E) "at" constr(K) :=
- en: match type of E with ?T[1] = ?T[2] ⇒
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 E 的类型为 ?T[1] = ?T[2] ⇒
- en: ltac_action_at K of T[2] do (rewrites ← E) end.
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 在 T[2] 中的 K 处执行 (在 T[2] 中重写 ← E) 结束。
- en: Tactic Notation "rewrites" constr(E) "at" constr(K) "in" hyp(H) :=
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "rewrites" constr(E) "at" constr(K) "in" hyp(H) :=
- en: match type of E with ?T[1] = ?T[2] ⇒
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 E 的类型为 ?T[1] = ?T[2] ⇒
- en: ltac_action_at K of T[1] in H do (rewrites E in H) end.
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H 中的 T[1] 处的 K 处执行 (在 H 中重写 E) 结束。
- en: Tactic Notation "rewrites" "←" constr(E) "at" constr(K) "in" hyp(H) :=
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "rewrites" "←" constr(E) "at" constr(K) "in" hyp(H) :=
- en: match type of E with ?T[1] = ?T[2] ⇒
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 E 的类型为 ?T[1] = ?T[2] ⇒
- en: ltac_action_at K of T[2] in H do (rewrites ← E in H) end.
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H 中的 T[2] 处的 K 处执行 (在 H 中重写 ← E) 结束。
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE89]'
  id: totrans-1348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Tactic Notation "replaces" constr(E) "with" constr(F) :=
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "replaces" constr(E) "with" constr(F) :=
- en: 'let T := fresh in assert (T: E = F); [ | replace E with F; clear T ].'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: '让 T := fresh in 断言 (T: E = F); [ | 替换 E 为 F; 清除 T ]。'
- en: Tactic Notation "replaces" constr(E) "with" constr(F) "in" hyp(H) :=
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "replaces" constr(E) "with" constr(F) "in" hyp(H) :=
- en: 'let T := fresh in assert (T: E = F); [ | replace E with F in H; clear T ].'
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: '让 T := fresh in 断言 (T: E = F); [ | 在 H 中替换 E 为 F; 清除 T ]。'
- en: '[PRE90]'
  id: totrans-1353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Tactic Notation "replaces" constr(E) "at" constr(K) "with" constr(F) :=
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "replaces" constr(E) "at" constr(K) "with" constr(F) :=
- en: 'let T := fresh in assert (T: E = F); [ | rewrites T at K; clear T ].'
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: '让 T := fresh in 断言 (T: E = F); [ | 在 K 处重写 T; 清除 T ]。'
- en: Tactic Notation "replaces" constr(E) "at" constr(K) "with" constr(F) "in" hyp(H)
    :=
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "replaces" constr(E) "at" constr(K) "with" constr(F) "in" hyp(H)
    :=
- en: 'let T := fresh in assert (T: E = F); [ | rewrites T at K in H; clear T ].'
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: '让 T := fresh in 断言 (T: E = F); [ | 在 K 处的 H 中重写 T; 清除 T ]。'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE91]'
  id: totrans-1359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: (* TODO: support "changes (E[1] = E[2])" *)
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: (* TODO: 支持 "changes (E[1] = E[2])" *)
- en: Tactic Notation "changes" constr(E[1]) "with" constr(E[2]) "in" hyp(H) :=
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "changes" constr(E[1]) "with" constr(E[2]) "in" hyp(H) :=
- en: asserts_rewrite (E[1] = E[2]) in H; [ reflexivity | ].
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 断言重写 (E[1] = E[2]) 在 H 中; [ 反射性 | ]。
- en: Tactic Notation "changes" constr(E[1]) "with" constr(E[2]) :=
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "changes" constr(E[1]) "with" constr(E[2]) :=
- en: asserts_rewrite (E[1] = E[2]); [ reflexivity | ].
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: 断言重写 (E[1] = E[2]); [ 反射性 | ]。
- en: Tactic Notation "changes" constr(E[1]) "with" constr(E[2]) "in" "*" :=
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "changes" constr(E[1]) "with" constr(E[2]) "in" "*" :=
- en: asserts_rewrite (E[1] = E[2]) in *; [ reflexivity | ].
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: 断言重写 (E[1] = E[2]) 在 * 中; [ 反射性 | ]。
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE92]'
  id: totrans-1368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) :=
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "renames" ident(X[1]) "to" ident(Y[1]) :=
- en: rename X[1] into Y[1].
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: 将 X[1] 重命名为 Y[1]。
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
- en: ident(X[2]) "to" ident(Y[2]) :=
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[2]) "to" ident(Y[2]) :=
- en: renames X[1] to Y[1]; renames X[2] to Y[2].
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 将 X[1] 重命名为 Y[1]; 将 X[2] 重命名为 Y[2].
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
- en: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) :=
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) :=
- en: renames X[1] to Y[1]; renames X[2] to Y[2], X[3] to Y[3].
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: 将 X[1] 重命名为 Y[1]; 将 X[2] 重命名为 Y[2], X[3] 重命名为 Y[3].
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
- en: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) ","
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) ","
- en: ident(X[4]) "to" ident(Y[4]) :=
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[4]) "to" ident(Y[4]) :=
- en: renames X[1] to Y[1]; renames X[2] to Y[2], X[3] to Y[3], X[4] to Y[4].
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 将 X[1] 重命名为 Y[1]; 将 X[2] 重命名为 Y[2], X[3] 重命名为 Y[3], X[4] 重命名为 Y[4]。
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
- en: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) ","
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) ","
- en: ident(X[4]) "to" ident(Y[4]) "," ident(X[5]) "to" ident(Y[5]) :=
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[4]) "to" ident(Y[4]) "," ident(X[5]) "to" ident(Y[5]) :=
- en: renames X[1] to Y[1]; renames X[2] to Y[2], X[3] to Y[3], X[4] to Y[4], X[5]
    to Y[5].
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: 将 X[1] 重命名为 Y[1]; 将 X[2] 重命名为 Y[2], X[3] 重命名为 Y[3], X[4] 重命名为 Y[4], X[5] 重命名为
    Y[5]。
- en: Tactic Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Notation "renames" ident(X[1]) "to" ident(Y[1]) ","
- en: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) ","
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[2]) "to" ident(Y[2]) "," ident(X[3]) "to" ident(Y[3]) ","
- en: ident(X[4]) "to" ident(Y[4]) "," ident(X[5]) "to" ident(Y[5]) ","
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[4]) "to" ident(Y[4]) "," ident(X[5]) "to" ident(Y[5]) ","
- en: ident(X[6]) "to" ident(Y[6]) :=
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: ident(X[6]) "to" ident(Y[6]) :=
- en: renames X[1] to Y[1]; renames X[2] to Y[2], X[3] to Y[3], X[4] to Y[4], X[5]
    to Y[5], X[6] to Y[6].
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: 将 X[1] 重命名为 Y[1]; 将 X[2] 重命名为 Y[2], X[3] 重命名为 Y[3], X[4] 重命名为 Y[4], X[5] 重命名为
    Y[5], X[6] 重命名为 Y[6]。
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE93]'
  id: totrans-1391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Ltac apply_to_head_of E cont :=
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 对 E 的头部应用 cont :=
- en: let go E :=
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 让 go E :=
- en: let P := get_head E in cont P in
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 让 P := 获取 E 的头部 in cont P in
- en: match E with
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 E 为
- en: '| ∀_,_ ⇒ intros; apply_to_head_of E cont'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: '| ∀_,_ ⇒ 引入；对 E 的头部应用 cont'
- en: '| ?A = ?B ⇒ first [ go A | go B ]'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?A = ?B ⇒ 首选 [ go A | go B ]'
- en: '| ?A ⇒ go A'
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?A ⇒ go A'
- en: end.
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: end。
- en: Ltac unfolds_base :=
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 展开基础 :=
- en: match goal with ⊢ ?G ⇒
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配目标为 ⊢ ?G ⇒
- en: apply_to_head_of G ltac:(fun P ⇒ unfold P) end.
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 对 G 的头部应用 ltac:(fun P ⇒ 展开 P) 结束。
- en: Tactic Notation "unfolds" :=
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "展开" :=
- en: unfolds_base.
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 展开基础。
- en: '[PRE94]'
  id: totrans-1405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Ltac unfolds_in_base H :=
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 在基础上展开 H :=
- en: match type of H with ?G ⇒
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 H 的类型为 ?G ⇒
- en: apply_to_head_of G ltac:(fun P ⇒ unfold P in H) end.
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: 对 G 的头部应用 ltac:(fun P ⇒ 在 H 中展开 P) 结束。
- en: Tactic Notation "unfolds" "in" hyp(H) :=
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "在" hyp(H) 中展开 :=
- en: unfolds_in_base H.
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础上展开 H。
- en: '[PRE95]'
  id: totrans-1411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Tactic Notation "unfolds" "in" hyp(H[1]) hyp(H[2]) :=
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "在" hyp(H[1]) hyp(H[2]) 中展开 :=
- en: unfolds in H[1]; unfolds in H[2].
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H[1] 中展开；在 H[2] 中展开。
- en: Tactic Notation "unfolds" "in" hyp(H[1]) hyp(H[2]) hyp(H[3]) :=
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "在" hyp(H[1]) hyp(H[2]) hyp(H[3]) 中展开 :=
- en: unfolds in H[1]; unfolds in H[2] H[3].
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H[1] 中展开；在 H[2]，H[3] 中展开。
- en: Tactic Notation "unfolds" "in" hyp(H[1]) hyp(H[2]) hyp(H[3]) hyp(H[4]) :=
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "在" hyp(H[1]) hyp(H[2]) hyp(H[3]) hyp(H[4]) 中展开 :=
- en: unfolds in H[1]; unfolds in H[2] H[3] H[4].
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H[1]，H[2]，H[3]，H[4] 中展开。
- en: '[PRE96]'
  id: totrans-1418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Tactic Notation "unfolds" constr(F[1]) :=
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "展开" constr(F[1]) :=
- en: unfold F[1] in *.
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: 在 * 中展开 F[1]。
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2]) :=
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "展开" constr(F[1]) "," constr(F[2]) :=
- en: unfold F[1],F[2] in *.
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 在 * 中展开 F[1]，F[2]。
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "展开" constr(F[1]) "," constr(F[2])
- en: '"," constr(F[3]) :='
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(F[3]) :='
- en: unfold F[1],F[2],F[3] in *.
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: 在 * 中展开 F[1]，F[2]，F[3]。
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "展开" constr(F[1]) "," constr(F[2])
- en: '"," constr(F[3]) "," constr(F[4]) :='
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(F[3]) "," constr(F[4]) :='
- en: unfold F[1],F[2],F[3],F[4] in *.
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: 在 * 中展开 F[1]，F[2]，F[3]，F[4]。
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "展开" constr(F[1]) "," constr(F[2])
- en: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5]) :='
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5]) :='
- en: unfold F[1],F[2],F[3],F[4],F[5] in *.
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: 在 * 中展开 F[1]，F[2]，F[3]，F[4]，F[5]。
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "展开" constr(F[1]) "," constr(F[2])
- en: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5]) "," constr(F[6]) :='
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5]) "," constr(F[6]) :='
- en: unfold F[1],F[2],F[3],F[4],F[5],F[6] in *.
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: 在 * 中展开 F[1]，F[2]，F[3]，F[4]，F[5]，F[6]。
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "展开" constr(F[1]) "," constr(F[2])
- en: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5])'
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5])'
- en: '"," constr(F[6]) "," constr(F[7]) :='
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(F[6]) "," constr(F[7]) :='
- en: unfold F[1],F[2],F[3],F[4],F[5],F[6],F[7] in *.
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: 在 * 中展开 F[1]，F[2]，F[3]，F[4]，F[5]，F[6]，F[7]。
- en: Tactic Notation "unfolds" constr(F[1]) "," constr(F[2])
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "展开" constr(F[1]) "," constr(F[2])
- en: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5])'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(F[3]) "," constr(F[4]) "," constr(F[5])'
- en: '"," constr(F[6]) "," constr(F[7]) "," constr(F[8]) :='
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(F[6]) "," constr(F[7]) "," constr(F[8]) :='
- en: unfold F[1],F[2],F[3],F[4],F[5],F[6],F[7],F[8] in *.
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: 在 * 中展开 F[1]，F[2]，F[3]，F[4]，F[5]，F[6]，F[7]，F[8]。
- en: '[PRE97]'
  id: totrans-1443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Tactic Notation "folds" constr(H) :=
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "折叠" constr(H) :=
- en: fold H in *.
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 在 * 中折叠 H。
- en: Tactic Notation "folds" constr(H[1]) "," constr(H[2]) :=
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "折叠" constr(H[1]) "," constr(H[2]) :=
- en: folds H[1]; folds H[2].
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: folds H[1]; folds H[2]。
- en: Tactic Notation "folds" constr(H[1]) "," constr(H[2]) "," constr(H[3]) :=
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "折叠" constr(H[1]) "," constr(H[2]) "," constr(H[3]) :=
- en: folds H[1]; folds H[2]; folds H[3].
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: folds H[1]; folds H[2]; folds H[3]。
- en: Tactic Notation "folds" constr(H[1]) "," constr(H[2]) "," constr(H[3])
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "折叠" constr(H[1]) "," constr(H[2]) "," constr(H[3])
- en: '"," constr(H[4]) :='
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(H[4]) :='
- en: folds H[1]; folds H[2]; folds H[3]; folds H[4].
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: folds H[1]; folds H[2]; folds H[3]; folds H[4]。
- en: Tactic Notation "folds" constr(H[1]) "," constr(H[2]) "," constr(H[3])
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "折叠" constr(H[1]) "," constr(H[2]) "," constr(H[3])
- en: '"," constr(H[4]) "," constr(H[5]) :='
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(H[4]) "," constr(H[5]) :='
- en: folds H[1]; folds H[2]; folds H[3]; folds H[4]; folds H[5].
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: folds H[1]; folds H[2]; folds H[3]; folds H[4]; folds H[5]。
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE98]'
  id: totrans-1457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Tactic Notation "simpls" :=
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "简化" :=
- en: simpl in *.
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 简化 在 * 中。
- en: '[PRE99]'
  id: totrans-1460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Tactic Notation "simpls" constr(F[1]) :=
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "简化" constr(F[1]) :=
- en: simpl F[1] in *.
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: 简化 F[1] 在 * 中。
- en: Tactic Notation "simpls" constr(F[1]) "," constr(F[2]) :=
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "简化" constr(F[1]) "," constr(F[2]) :=
- en: simpls F[1]; simpls F[2].
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: 简化 F[1]；简化 F[2]。
- en: Tactic Notation "simpls" constr(F[1]) "," constr(F[2])
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "简化" constr(F[1]) "," constr(F[2])
- en: '"," constr(F[3]) :='
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(F[3]) :='
- en: simpls F[1]; simpls F[2]; simpls F[3].
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: 简化 F[1]；简化 F[2]；简化 F[3]。
- en: Tactic Notation "simpls" constr(F[1]) "," constr(F[2])
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "简化" constr(F[1]) "," constr(F[2])
- en: '"," constr(F[3]) "," constr(F[4]) :='
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: '"," constr(F[3]) "," constr(F[4]) :='
- en: simpls F[1]; simpls F[2]; simpls F[3]; simpls F[4].
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: simpls F[1]; simpls F[2]; simpls F[3]; simpls F[4].
- en: '[PRE100]'
  id: totrans-1471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Tactic Notation "unsimpl" constr(E) :=
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "unsimpl" constr(E) :=
- en: let F := (eval simpl in E) in change F with E.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: let F := (eval simpl in E) in change F with E.
- en: '[PRE101]'
  id: totrans-1474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Tactic Notation "unsimpl" constr(E) "in" hyp(H) :=
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "unsimpl" constr(E) "in" hyp(H) :=
- en: let F := (eval simpl in E) in change F with E in H.
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: let F := (eval simpl in E) in change F with E in H.
- en: '[PRE102]'
  id: totrans-1477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Tactic Notation "unsimpl" constr(E) "in" "*" :=
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "unsimpl" constr(E) "in" "*" :=
- en: let F := (eval simpl in E) in change F with E in *.
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: let F := (eval simpl in E) in change F with E in *.
- en: Tactic Notation "unsimpls" constr(E) :=
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "unsimpls" constr(E) :=
- en: unsimpl E in *.
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: unsimpl E in *.
- en: '[PRE103]'
  id: totrans-1482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Notation "'nosimpl' t" := (match tt with tt ⇒ t end)
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: Notation "'nosimpl' t" := (match tt with tt ⇒ t end)
- en: (at level 10).
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: (at level 10).
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE104]'
  id: totrans-1486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Tactic Notation "hnfs" := hnf in *.
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "hnfs" := hnf in *.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE105]'
  id: totrans-1489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Tactic Notation "substs" :=
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "substs" :=
- en: 'repeat (match goal with H: ?x = ?y ⊢ _ ⇒'
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 'repeat (match goal with H: ?x = ?y ⊢ _ ⇒'
- en: first [ subst x | subst y ] end).
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: first [ subst x | subst y ] end).
- en: '[PRE106]'
  id: totrans-1493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Ltac substs_below limit :=
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac substs_below limit :=
- en: 'match goal with H: ?T ⊢ _ ⇒'
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 'match goal with H: ?T ⊢ _ ⇒'
- en: match T with
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: match T with
- en: '| limit ⇒ idtac'
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: '| limit ⇒ idtac'
- en: '| ?x = ?y ⇒'
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?x = ?y ⇒'
- en: first [ subst x; substs_below limit
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: first [ subst x; substs_below limit
- en: '| subst y; substs_below limit'
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: '| subst y; substs_below limit'
- en: '| generalizes H; substs_below limit; intro ]'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: '| generalizes H; substs_below limit; intro ]'
- en: end end.
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: end end.
- en: '[PRE107]'
  id: totrans-1503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Tactic Notation "substs" "below" "body" constr(M) :=
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "substs" "below" "body" constr(M) :=
- en: substs_below M.
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: substs_below M.
- en: '[PRE108]'
  id: totrans-1506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Tactic Notation "substs" "below" hyp(H) :=
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "substs" "below" hyp(H) :=
- en: match type of H with ?M ⇒ substs below body M end.
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: match type of H with ?M ⇒ substs below body M end.
- en: '[PRE109]'
  id: totrans-1509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Ltac intro_subst_hyp := fail. (* definition further on *)
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac intro_subst_hyp := fail. (* definition further on *)
- en: '[PRE110]'
  id: totrans-1511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Ltac subst_hyp_base H :=
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac subst_hyp_base H :=
- en: match type of H with
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: match type of H with
- en: '| (_,_,_,_,_) = (_,_,_,_,_) ⇒ injection H; clear H; do 4 intro_subst_hyp'
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: '| (_,_,_,_,_) = (_,_,_,_,_) ⇒ injection H; clear H; do 4 intro_subst_hyp'
- en: '| (_,_,_,_) = (_,_,_,_) ⇒ injection H; clear H; do 4 intro_subst_hyp'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: '| (_,_,_,_) = (_,_,_,_) ⇒ injection H; clear H; do 4 intro_subst_hyp'
- en: '| (_,_,_) = (_,_,_) ⇒ injection H; clear H; do 3 intro_subst_hyp'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: '| (_,_,_) = (_,_,_) ⇒ injection H; clear H; do 3 intro_subst_hyp'
- en: '| (_,_) = (_,_) ⇒ injection H; clear H; do 2 intro_subst_hyp'
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: '| (_,_) = (_,_) ⇒ injection H; clear H; do 2 intro_subst_hyp'
- en: '| ?x = ?x ⇒ clear H'
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?x = ?x ⇒ clear H'
- en: '| ?x = ?y ⇒ first [ subst x | subst y ]'
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: '| ?x = ?y ⇒ first [ subst x | subst y ]'
- en: end.
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Tactic Notation "subst_hyp" hyp(H) := subst_hyp_base H.
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "subst_hyp" hyp(H) := subst_hyp_base H.
- en: Ltac intro_subst_hyp ::=
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac intro_subst_hyp ::=
- en: let H := fresh "TEMP" in intros H; subst_hyp H.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: let H := fresh "TEMP" in intros H; subst_hyp H.
- en: '[PRE111]'
  id: totrans-1524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Tactic Notation "intro_subst" :=
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "intro_subst" :=
- en: let H := fresh "TEMP" in intros H; subst_hyp H.
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: let H := fresh "TEMP" in intros H; subst_hyp H.
- en: '[PRE112]'
  id: totrans-1527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Ltac subst_local :=
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac subst_local :=
- en: repeat match goal with H:=_ ⊢ _ ⇒ subst H end.
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: repeat match goal with H:=_ ⊢ _ ⇒ subst H end.
- en: '[PRE113]'
  id: totrans-1530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Ltac subst_eq_base E :=
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac subst_eq_base E :=
- en: 'let H := fresh "TEMP" in lets H: E; subst_hyp H.'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: 'let H := fresh "TEMP" in lets H: E; subst_hyp H.'
- en: Tactic Notation "subst_eq" constr(E) :=
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "subst_eq" constr(E) :=
- en: subst_eq_base E.
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: subst_eq_base E.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE114]'
  id: totrans-1536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Require Import ProofIrrelevance.
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: Require Import ProofIrrelevance.
- en: '[PRE115]'
  id: totrans-1538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Ltac pi_rewrite_base E rewrite_tac :=
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac pi_rewrite_base E rewrite_tac :=
- en: let E' := fresh in let T := type of E in evar (E':T);
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: let E' := fresh in let T := type of E in evar (E':T);
- en: rewrite_tac (@proof_irrelevance _ E E'); subst E'.
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: rewrite_tac (@proof_irrelevance _ E E'); subst E'.
- en: Tactic Notation "pi_rewrite" constr(E) :=
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "pi_rewrite" constr(E) :=
- en: pi_rewrite_base E ltac:(fun X ⇒ rewrite X).
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: pi_rewrite_base E ltac:(fun X ⇒ rewrite X).
- en: Tactic Notation "pi_rewrite" constr(E) "in" hyp(H) :=
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "pi_rewrite" constr(E) "in" hyp(H) :=
- en: pi_rewrite_base E ltac:(fun X ⇒ rewrite X in H).
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: pi_rewrite_base E ltac:(fun X ⇒ rewrite X in H).
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE116]'
  id: totrans-1547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Ltac fequal_base :=
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac fequal_base :=
- en: let go := f_equal; [ fequal_base | ] in
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: let go := f_equal; [ fequal_base | ] in
- en: match goal with
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: match goal with
- en: '| ⊢ (_,_,_) = (_,_,_) ⇒ go'
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (_,_,_) = (_,_,_) ⇒ go'
- en: '| ⊢ (_,_,_,_) = (_,_,_,_) ⇒ go'
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (_,_,_,_) = (_,_,_,_) ⇒ go'
- en: '| ⊢ (_,_,_,_,_) = (_,_,_,_,_) ⇒ go'
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (_,_,_,_,_) = (_,_,_,_,_) ⇒ go'
- en: '| ⊢ (_,_,_,_,_,_) = (_,_,_,_,_,_) ⇒ go'
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (_,_,_,_,_,_) = (_,_,_,_,_,_) ⇒ go'
- en: '| ⊢ _ ⇒ f_equal'
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ _ ⇒ f_equal'
- en: end.
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Tactic Notation "fequal" :=
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "fequal" :=
- en: fequal_base.
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: fequal_base.
- en: '[PRE117]'
  id: totrans-1559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Ltac fequal_post :=
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac fequal_post :=
- en: first [ reflexivity | congruence | apply proof_irrelevance | idtac ].
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: first [ reflexivity | congruence | apply proof_irrelevance | idtac ].
- en: Tactic Notation "fequals" :=
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "fequals" :=
- en: fequal; fequal_post.
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: fequal; fequal_post.
- en: '[PRE118]'
  id: totrans-1564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Tactic Notation "fequals_rec" :=
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "fequals_rec" :=
- en: repeat (progress fequals).
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: repeat (progress fequals).
- en: (* ********************************************************************** *)
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: (* ********************************************************************** *)
- en: '[PRE119]'
  id: totrans-1568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE120]'
  id: totrans-1570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Tactic Notation "invert" "keep" hyp(H) :=
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "invert" "keep" hyp(H) :=
- en: pose ltac_mark; inversion H; gen_until_mark.
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: pose ltac_mark; inversion H; gen_until_mark.
- en: '[PRE121]'
  id: totrans-1573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Tactic Notation "invert" "keep" hyp(H) "as" simple_intropattern(I[1]) :=
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "invert" "keep" hyp(H) "as" simple_intropattern(I[1])：
- en: invert keep H; introv I[1].
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: invert keep H; introv I[1].
- en: Tactic Notation "invert" "keep" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "invert" "keep" hyp(H) "as" simple_intropattern(I[1])
- en: simple_intropattern(I[2]) :=
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) :=
- en: invert keep H; introv I[1] I[2].
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: invert keep H; introv I[1] I[2].
- en: Tactic Notation "invert" "keep" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "invert" "keep" hyp(H) "as" simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
- en: invert keep H; introv I[1] I[2] I[3].
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: invert keep H; introv I[1] I[2] I[3].
- en: '[PRE122]'
  id: totrans-1582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Tactic Notation "invert" hyp(H) :=
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "invert" hyp(H) :=
- en: invert keep H; clear H.
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: invert keep H; clear H.
- en: '[PRE123]'
  id: totrans-1585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Tactic Notation "invert_tactic" hyp(H) tactic(tac) :=
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "invert_tactic" hyp(H) tactic(tac) :=
- en: let H' := fresh in rename H into H'; tac H'; clear H'.
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: let H' := fresh in rename H into H'; tac H'; clear H'.
- en: Tactic Notation "invert" hyp(H) "as" simple_intropattern(I[1]) :=
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "invert" hyp(H) "as" simple_intropattern(I[1]) :=
- en: invert_tactic H (fun H ⇒ invert keep H as I[1]).
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: invert_tactic H (fun H ⇒ invert keep H as I[1]).
- en: Tactic Notation "invert" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "invert" hyp(H) "as" simple_intropattern(I[1])
- en: simple_intropattern(I[2]) :=
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) :=
- en: invert_tactic H (fun H ⇒ invert keep H as I[1] I[2]).
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: invert_tactic H (fun H ⇒ invert keep H as I[1] I[2]).
- en: Tactic Notation "invert" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "invert" hyp(H) "as" simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
- en: invert_tactic H (fun H ⇒ invert keep H as I[1] I[2] I[3]).
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: invert_tactic H (fun H ⇒ invert keep H as I[1] I[2] I[3]).
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE124]'
  id: totrans-1597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: (* --we do not import Eqdep because it imports nasty hints automatically     Require Import Eqdep. *)
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: (* --we do not import Eqdep because it imports nasty hints automatically     Require Import Eqdep. *)
- en: 'Axiom inj_pair2 :  (* is in fact derivable from the axioms in LibAxiom.v *)'
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: 'Axiom inj_pair2 :  (* is in fact derivable from the axioms in LibAxiom.v *)'
- en: '∀(U : Type) (P : U → Type) (p : U) (x y : P p),'
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: '∀(U : Type) (P : U → Type) (p : U) (x y : P p),'
- en: existT P p x = existT P p y → x = y.
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: 存在T P p x = 存在T P p y → x = y.
- en: (* Proof using. apply Eqdep.EqdepTheory.inj_pair2. Qed.*)
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: (* Proof using. apply Eqdep.EqdepTheory.inj_pair2. Qed.*)
- en: Ltac inverts_tactic H i[1] i[2] i[3] i[4] i[5] i[6] :=
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac inverts_tactic H i[1] i[2] i[3] i[4] i[5] i[6] :=
- en: let rec go i[1] i[2] i[3] i[4] i[5] i[6] :=
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: let rec go i[1] i[2] i[3] i[4] i[5] i[6] :=
- en: match goal with
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: match goal with
- en: '| ⊢ (ltac_Mark → _) ⇒ intros _'
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (ltac_Mark → _) ⇒ intros _'
- en: '| ⊢ (?x = ?y → _) ⇒ let H := fresh in intro H;'
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (?x = ?y → _) ⇒ let H := fresh in intro H;'
- en: first [ subst x | subst y ];
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: first [ subst x | subst y ];
- en: go i[1] i[2] i[3] i[4] i[5] i[6]
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: go i[1] i[2] i[3] i[4] i[5] i[6]
- en: '| ⊢ (existT ?P ?p ?x = existT ?P ?p ?y → _) ⇒'
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (existT ?P ?p ?x = existT ?P ?p ?y → _) ⇒'
- en: let H := fresh in intro H;
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: let H := fresh in intro H;
- en: generalize (@inj_pair2 _ P p x y H);
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: generalize (@inj_pair2 _ P p x y H);
- en: clear H; go i[1] i[2] i[3] i[4] i[5] i[6]
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: clear H; go i[1] i[2] i[3] i[4] i[5] i[6]
- en: '| ⊢ (?P → ?Q) ⇒ i[1]; go i[2] i[3] i[4] i[5] i[6] ltac:(intro)'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (?P → ?Q) ⇒ i[1]; go i[2] i[3] i[4] i[5] i[6] ltac:(intro)'
- en: '| ⊢ (∀_, _) ⇒ intro; go i[1] i[2] i[3] i[4] i[5] i[6]'
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (∀_, _) ⇒ intro; go i[1] i[2] i[3] i[4] i[5] i[6]'
- en: end in
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: end in
- en: generalize ltac_mark; invert keep H; go i[1] i[2] i[3] i[4] i[5] i[6];
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: generalize ltac_mark; invert keep H; go i[1] i[2] i[3] i[4] i[5] i[6];
- en: unfold eq' in *.
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: unfold eq' in *.
- en: '[PRE125]'
  id: totrans-1619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Tactic Notation "inverts" "keep" hyp(H) :=
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "inverts" "keep" hyp(H) :=
- en: inverts_tactic H ltac:(intro) ltac:(intro) ltac:(intro)
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: inverts_tactic H ltac:(intro) ltac:(intro) ltac:(intro)
- en: ltac:(intro) ltac:(intro) ltac:(intro).
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: ltac:(intro) ltac:(intro) ltac:(intro).
- en: '[PRE126]'
  id: totrans-1623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1]) :=
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1]) :=
- en: inverts_tactic H ltac:(intros I[1])
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: inverts_tactic H ltac:(intros I[1])
- en: ltac:(intro) ltac:(intro) ltac:(intro) ltac:(intro) ltac:(intro).
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: ltac:(intro) ltac:(intro) ltac:(intro) ltac:(intro) ltac:(intro).
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
- en: simple_intropattern(I[2]) :=
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) :=
- en: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2])
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2])
- en: ltac:(intro) ltac:(intro) ltac:(intro) ltac:(intro).
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: ltac:(intro) ltac:(intro) ltac:(intro) ltac:(intro).
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
- en: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2]) ltac:(intros I[3])
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2]) ltac:(intros I[3])
- en: ltac:(intro) ltac:(intro) ltac:(intro).
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
    :=
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
- en: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2]) ltac:(intros I[3])
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
- en: ltac:(intros I[4]) ltac:(intro) ltac:(intro).
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[5]) :=
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
- en: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2]) ltac:(intros I[3])
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
- en: ltac:(intros I[4]) ltac:(intros I[5]) ltac:(intro).
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "keep" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[5]) simple_intropattern(I[6]) :=
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
- en: inverts_tactic H ltac:(intros I[1]) ltac:(intros I[2]) ltac:(intros I[3])
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
- en: ltac:(intros I[4]) ltac:(intros I[5]) ltac:(intros I[6]).
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  id: totrans-1649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Tactic Notation "inverts" hyp(H) :=
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
- en: inverts keep H; clear H.
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  id: totrans-1652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Tactic Notation "inverts_tactic" hyp(H) tactic(tac) :=
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
- en: let H' := fresh in rename H into H'; tac H'; clear H'.
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1]) :=
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1]).
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) :=
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1] I[2]).
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1] I[2] I[3]).
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
    :=
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1] I[2] I[3] I[4]).
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[5]) :=
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1] I[2] I[3] I[4] I[5]).
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[5]) simple_intropattern(I[6]) :=
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
- en: invert_tactic H (fun H ⇒ inverts keep H as I[1] I[2] I[3] I[4] I[5] I[6]).
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  id: totrans-1674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Ltac inverts_as_tactic H :=
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
- en: let rec go tt :=
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (ltac_Mark → _) ⇒ intros _'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (?x = ?y → _) ⇒ let H := fresh "TEMP" in intro H;'
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
- en: first [ subst x | subst y ];
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
- en: go tt
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (existT ?P ?p ?x = existT ?P ?p ?y → _) ⇒'
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh in intro H;
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
- en: generalize (@inj_pair2 _ P p x y H);
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
- en: clear H; go tt
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ (∀_, _) ⇒'
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
- en: intro; let H := get_last_hyp tt in mark_to_generalize H; go tt
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
- en: end in
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
- en: pose ltac_mark; inversion H;
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
- en: generalize ltac_mark; gen_until_mark;
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
- en: go tt; gen_to_generalize; unfolds ltac_to_generalize;
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
- en: unfold eq' in *.
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "keep" hyp(H) "as" :=
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
- en: inverts_as_tactic H.
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" :=
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
- en: inverts_as_tactic H; clear H.
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "inverts" 假设(H) "as" simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
- en: simple_intropattern(I[5]) simple_intropattern(I[6]) simple_intropattern(I[7])
    :=
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[5]) simple_intropattern(I[6]) simple_intropattern(I[7])
    :=
- en: inverts H as; introv I[1] I[2] I[3] I[4] I[5] I[6] I[7].
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: inverts H as; introv I[1] I[2] I[3] I[4] I[5] I[6] I[7].
- en: Tactic Notation "inverts" hyp(H) "as" simple_intropattern(I[1])
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "inverts" 假设(H) "as" simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
- en: simple_intropattern(I[5]) simple_intropattern(I[6]) simple_intropattern(I[7])
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[5]) simple_intropattern(I[6]) simple_intropattern(I[7])
- en: simple_intropattern(I[8]) :=
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[8]) :=
- en: inverts H as; introv I[1] I[2] I[3] I[4] I[5] I[6] I[7] I[8].
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: inverts H as; introv I[1] I[2] I[3] I[4] I[5] I[6] I[7] I[8].
- en: '[PRE130]'
  id: totrans-1706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Ltac lets_inverts_base E cont :=
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac lets_inverts_base E cont :=
- en: 'let H := fresh "TEMP" in lets H: E; try cont H.'
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: 'let H := fresh "TEMP" in lets H: E; try cont H.'
- en: Tactic Notation "lets_inverts" constr(E) :=
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "lets_inverts" 构造(E) :=
- en: lets_inverts_base E ltac:(fun H ⇒ inverts H).
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
  zh: lets_inverts_base E ltac:(fun H ⇒ inverts H).
- en: Tactic Notation "lets_inverts" constr(E) "as" simple_intropattern(I[1]) :=
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "lets_inverts" 构造(E) "as" simple_intropattern(I[1]) :=
- en: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1]).
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
  zh: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1]).
- en: Tactic Notation "lets_inverts" constr(E) "as" simple_intropattern(I[1])
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "lets_inverts" 构造(E) "as" simple_intropattern(I[1])
- en: simple_intropattern(I[2]) :=
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) :=
- en: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1] I[2]).
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1] I[2]).
- en: Tactic Notation "lets_inverts" constr(E) "as" simple_intropattern(I[1])
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "lets_inverts" 构造(E) "as" simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3]) :=
- en: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1] I[2] I[3]).
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
  zh: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1] I[2] I[3]).
- en: Tactic Notation "lets_inverts" constr(E) "as" simple_intropattern(I[1])
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "lets_inverts" 构造(E) "as" simple_intropattern(I[1])
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
    :=
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: simple_intropattern(I[2]) simple_intropattern(I[3]) simple_intropattern(I[4])
    :=
- en: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1] I[2] I[3] I[4]).
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: lets_inverts_base E ltac:(fun H ⇒ inverts H as I[1] I[2] I[3] I[4]).
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE131]'
  id: totrans-1723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Ltac injects_tactic H :=
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac injects_tactic H :=
- en: let rec go _ :=
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: let rec go _ :=
- en: match goal with
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: match goal with
- en: '| ⊢ (ltac_Mark → _) ⇒ intros _'
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (ltac_Mark → _) ⇒ intros _'
- en: '| ⊢ (?x = ?y → _) ⇒ let H := fresh in intro H;'
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: '| ⊢ (?x = ?y → _) ⇒ let H := fresh in intro H;'
- en: first [ subst x | subst y | idtac ];
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: first [ subst x | subst y | idtac ];
- en: go tt
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: go tt
- en: end in
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: end in
- en: generalize ltac_mark; injection H; go tt.
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: generalize ltac_mark; injection H; go tt.
- en: '[PRE132]'
  id: totrans-1733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Tactic Notation "injects" "keep" hyp(H) :=
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "injects" "keep" 假设(H) :=
- en: injects_tactic H.
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: injects_tactic H.
- en: '[PRE133]'
  id: totrans-1736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Tactic Notation "injects" hyp(H) :=
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "injects" 假设(H) :=
- en: injects_tactic H; clear H.
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: injects_tactic H; clear H.
- en: '[PRE134]'
  id: totrans-1739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Tactic Notation "inject" hyp(H) :=
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "inject" 假设(H) :=
- en: injection H.
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
  zh: injection H.
- en: Tactic Notation "inject" hyp(H) "as" ident(X[1]) :=
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "inject" 假设(H) "as" 标识符(X[1]) :=
- en: injection H; intros X[1].
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: injection H; intros X[1].
- en: Tactic Notation "inject" hyp(H) "as" ident(X[1]) ident(X[2]) :=
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "inject" 假设(H) "as" 标识符(X[1]) 标识符(X[2]) :=
- en: injection H; intros X[1] X[2].
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: injection H; intros X[1] X[2].
- en: Tactic Notation "inject" hyp(H) "as" ident(X[1]) ident(X[2]) ident(X[3]) :=
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "inject" 假设(H) "as" 标识符(X[1]) 标识符(X[2]) 标识符(X[3]) :=
- en: injection H; intros X[1] X[2] X[3].
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: injection H; intros X[1] X[2] X[3].
- en: Tactic Notation "inject" hyp(H) "as" ident(X[1]) ident(X[2]) ident(X[3])
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "inject" 假设(H) "as" 标识符(X[1]) 标识符(X[2]) 标识符(X[3])
- en: ident(X[4]) :=
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符(X[4]) :=
- en: injection H; intros X[1] X[2] X[3] X[4].
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: injection H; intros X[1] X[2] X[3] X[4].
- en: Tactic Notation "inject" hyp(H) "as" ident(X[1]) ident(X[2]) ident(X[3])
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "inject" 假设(H) "as" 标识符(X[1]) 标识符(X[2]) 标识符(X[3])
- en: ident(X[4]) ident(X[5]) :=
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符(X[4]) 标识符(X[5]) :=
- en: injection H; intros X[1] X[2] X[3] X[4] X[5].
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: injection H; intros X[1] X[2] X[3] X[4] X[5].
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE135]'
  id: totrans-1755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Tactic Notation "inversions" "keep" hyp(H) :=
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "inversions" "keep" 假设(H) :=
- en: inversion H; subst.
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: inversion H; subst.
- en: '[PRE136]'
  id: totrans-1758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Tactic Notation "inversions" hyp(H) :=
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "inversions" 假设(H) :=
- en: inversion H; subst; clear H.
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: inversion H; subst; clear H.
- en: '[PRE137]'
  id: totrans-1761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Tactic Notation "injections" "keep" hyp(H) :=
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "injections" "keep" 假设(H) :=
- en: injection H; intros; subst.
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
  zh: injection H; intros; subst.
- en: '[PRE138]'
  id: totrans-1764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Tactic Notation "injections" "keep" hyp(H) :=
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "injections" "keep" 假设(H) :=
- en: injection H; clear H; intros; subst.
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: injection H; clear H; intros; subst.
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: (* ---------------------------------------------------------------------- *)
- en: '[PRE139]'
  id: totrans-1768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Tactic Notation "cases" constr(E) "as" ident(H) :=
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 符号 "cases" 构造(E) "as" 标识符(H) :=
- en: let X := fresh "TEMP" in
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E) in *; def_to_eq_sym X H E;
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
- en: destruct X.
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases" constr(E) :=
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh "Eq" in cases E as H.
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  id: totrans-1775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Ltac case_if_post := tryfalse.
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  id: totrans-1777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Ltac case_if_on_tactic_core E Eq :=
  id: totrans-1778
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
- en: '| {_}+{_} ⇒ destruct E as [Eq | Eq]'
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let X := fresh in'
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
- en: 'sets_eq ← X Eq: E;'
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
- en: destruct X
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
- en: Ltac case_if_on_tactic E Eq :=
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
- en: case_if_on_tactic_core E Eq; case_if_post.
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if_on" constr(E) "as" simple_intropattern(Eq) :=
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
- en: case_if_on_tactic E Eq.
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "as" simple_intropattern(Eq) :=
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ context [if ?B then _ else _] ⇒ case_if_on B as Eq'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
- en: '| K: context [if ?B then _ else _] ⊢ _ ⇒ case_if_on B as Eq'
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "in" hyp(H) "as" simple_intropattern(Eq) :=
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with context [if ?B then _ else _] ⇒
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
- en: case_if_on B as Eq end.
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" :=
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh in case_if as Eq.
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "in" hyp(H) :=
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh in case_if in H as Eq.
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  id: totrans-1801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Ltac cases_if_on_tactic_core E Eq :=
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
- en: '| {_}+{_} ⇒ destruct E as [Eq|Eq]; try subst_hyp Eq'
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let X := fresh in'
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
- en: 'sets_eq ← X Eq: E;'
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
- en: destruct X
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
- en: Ltac cases_if_on_tactic E Eq :=
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
- en: cases_if_on_tactic_core E Eq; tryfalse; case_if_post.
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if_on" constr(E) "as" simple_intropattern(Eq) :=
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
- en: cases_if_on_tactic E Eq.
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "as" simple_intropattern(Eq) :=
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ context [if ?B then _ else _] ⇒ cases_if_on B as Eq'
  id: totrans-1815
  prefs: []
  type: TYPE_NORMAL
- en: '| K: context [if ?B then _ else _] ⊢ _ ⇒ cases_if_on B as Eq'
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "in" hyp(H) "as" simple_intropattern(Eq) :=
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with context [if ?B then _ else _] ⇒
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
- en: cases_if_on B as Eq end.
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" :=
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh in cases_if as Eq.
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "in" hyp(H) :=
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh in cases_if in H as Eq.
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  id: totrans-1825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Ltac case_ifs_core :=
  id: totrans-1826
  prefs: []
  type: TYPE_NORMAL
- en: repeat case_if.
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_ifs" :=
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
- en: case_ifs_core.
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  id: totrans-1830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Ltac destruct_if_post := tryfalse.
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if"
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
- en: '"as" simple_intropattern(Eq[1]) simple_intropattern(Eq[2]) :='
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ context [if ?B then _ else _] ⇒ destruct B as [Eq[1]|Eq[2]]'
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
- en: '| K: context [if ?B then _ else _] ⊢ _ ⇒ destruct B as [Eq[1]|Eq[2]]'
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
- en: end;
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if_post.
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "in" hyp(H)
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
- en: '"as" simple_intropattern(Eq[1]) simple_intropattern(Eq[2]) :='
  id: totrans-1840
  prefs: []
  type: TYPE_NORMAL
- en: match type of H with context [if ?B then _ else _] ⇒
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
- en: destruct B as [Eq[1]|Eq[2]] end;
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if_post.
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "as" simple_intropattern(Eq) :=
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if as Eq Eq.
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "in" hyp(H) "as" simple_intropattern(Eq) :=
  id: totrans-1846
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if in H as Eq Eq.
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" :=
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh "C" in destruct_if as Eq Eq.
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "in" hyp(H) :=
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh "C" in destruct_if in H as Eq Eq.
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  id: totrans-1852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Ltac find_head_match T :=
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
- en: match T with context [?E] ⇒
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
- en: '| E ⇒ fail 1'
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ constr:(E)'
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
- en: Ltac destruct_head_match_core cont :=
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ?T[1] = ?T[2] ⇒ first [ let E := find_head_match T[1] in cont E'
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
- en: '| let E := find_head_match T[2] in cont E ]'
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ ?T[1] ⇒ let E := find_head_match T[1] in cont E'
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
- en: end;
  id: totrans-1865
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if_post.
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_head_match" "as" simple_intropattern(I) :=
  id: totrans-1867
  prefs: []
  type: TYPE_NORMAL
- en: destruct_head_match_core ltac:(fun E ⇒ destruct E as I).
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_head_match" :=
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
- en: destruct_head_match_core ltac:(fun E ⇒ destruct E).
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
- en: (**--provided for compatibility with remember *)
  id: totrans-1871
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  id: totrans-1872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Tactic Notation "cases'" constr(E) "as" ident(H) :=
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
- en: let X := fresh "TEMP" in
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
- en: set (X := E) in *; def_to_eq X H E;
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
- en: destruct X.
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases'" constr(E) :=
  id: totrans-1877
  prefs: []
  type: TYPE_NORMAL
- en: let x := fresh "Eq" in cases' E as H.
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  id: totrans-1879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Ltac cases_if_on' E Eq :=
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
- en: match type of E with
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
- en: '| {_}+{_} ⇒ destruct E as [Eq|Eq]; try subst_hyp Eq'
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let X := fresh in'
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
- en: 'sets_eq X Eq: E;'
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
- en: destruct X
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
- en: end; case_if_post.
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" "as" simple_intropattern(Eq) :=
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  id: totrans-1888
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ context [if ?B then _ else _] ⇒ cases_if_on'' B Eq'
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
- en: '| K: context [if ?B then _ else _] ⊢ _ ⇒ cases_if_on'' B Eq'
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" :=
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
- en: let Eq := fresh in cases_if' as Eq.
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  id: totrans-1895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Require Import Coq.Program.Equality.
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
- en: Ltac inductions_post :=
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
- en: unfold eq' in *.
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) :=
  id: totrans-1899
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E; inductions_post.
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) :=
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1]; inductions_post.
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2]) :=
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2]; inductions_post.
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) :=
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3]; inductions_post.
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) ident(X[4]) :=
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3] X[4]; inductions_post.
  id: totrans-1910
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  id: totrans-1911
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) ident(X[4]) ident(X[5]) :=
  id: totrans-1912
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3] X[4] X[5]; inductions_post.
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) ident(X[4]) ident(X[5]) ident(X[6]) :=
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3] X[4] X[5] X[6]; inductions_post.
  id: totrans-1916
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) ident(X[4]) ident(X[5]) ident(X[6]) ident(X[7]) :=
  id: totrans-1918
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3] X[4] X[5] X[6] X[7]; inductions_post.
  id: totrans-1919
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inductions" ident(E) "gen" ident(X[1]) ident(X[2])
  id: totrans-1920
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[3]) ident(X[4]) ident(X[5]) ident(X[6]) ident(X[7]) ident(X[8]) :=
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
- en: dependent induction E generalizing X[1] X[2] X[3] X[4] X[5] X[6] X[7] X[8];
    inductions_post.
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  id: totrans-1923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Tactic Notation "induction_wf" ident(IH) ":" constr(E) ident(X) :=
  id: totrans-1924
  prefs: []
  type: TYPE_NORMAL
- en: pattern X; apply (well_founded_ind E); clear X; intros X IH.
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "induction_wf" ":" constr(E) ident(X) :=
  id: totrans-1926
  prefs: []
  type: TYPE_NORMAL
- en: 'let IH := fresh "IH" in induction_wf IH: E X.'
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "induction_wf" ":" constr(E) ident(X) :=
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
- en: 'induction_wf: E X.'
  id: totrans-1929
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  id: totrans-1930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Require Import Compare_dec Omega.
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma induct_height_max2 : ∀n[1] n[2] : nat,'
  id: totrans-1932
  prefs: []
  type: TYPE_NORMAL
- en: ∃n, n[1] < n ∧ n[2] < n.
  id: totrans-1933
  prefs: []
  type: TYPE_NORMAL
- en: Proof using.
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
- en: intros. destruct (lt_dec n[1] n[2]).
  id: totrans-1935
  prefs: []
  type: TYPE_NORMAL
- en: ∃(S n[2]). omega.
  id: totrans-1936
  prefs: []
  type: TYPE_NORMAL
- en: ∃(S n[1]). omega.
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-1938
  prefs: []
  type: TYPE_NORMAL
- en: Ltac induct_height_step x :=
  id: totrans-1939
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  id: totrans-1940
  prefs: []
  type: TYPE_NORMAL
- en: '| H: ∃_, _ ⊢ _ ⇒'
  id: totrans-1941
  prefs: []
  type: TYPE_NORMAL
- en: let n := fresh "n" in let y := fresh "x" in
  id: totrans-1942
  prefs: []
  type: TYPE_NORMAL
- en: destruct H as [n ?];
  id: totrans-1943
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards (y&?&?): induct_height_max2 n x;'
  id: totrans-1944
  prefs: []
  type: TYPE_NORMAL
- en: induct_height_step y
  id: totrans-1945
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ ∃(S x); eauto'
  id: totrans-1946
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-1947
  prefs: []
  type: TYPE_NORMAL
- en: Ltac induct_height := induct_height_step O.
  id: totrans-1948
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  id: totrans-1950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Definition COIND (P:Prop) := P.
  id: totrans-1951
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cofixs" ident(IH) :=
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
- en: cofix IH;
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
- en: match type of IH with ?P ⇒ change P with (COIND P) in IH end.
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  id: totrans-1955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Ltac clear_coind :=
  id: totrans-1956
  prefs: []
  type: TYPE_NORMAL
- en: 'repeat match goal with H: COIND _ ⊢ _ ⇒ clear H end.'
  id: totrans-1957
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  id: totrans-1958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: Tactic Notation "abstracts" tactic(tac) :=
  id: totrans-1959
  prefs: []
  type: TYPE_NORMAL
- en: clear_coind; tac.
  id: totrans-1960
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-1961
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  id: totrans-1962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Ltac decides_equality_tactic :=
  id: totrans-1963
  prefs: []
  type: TYPE_NORMAL
- en: first [ decide equality | progress(unfolds); decides_equality_tactic ].
  id: totrans-1964
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "decides_equality" :=
  id: totrans-1965
  prefs: []
  type: TYPE_NORMAL
- en: decides_equality_tactic.
  id: totrans-1966
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-1967
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  id: totrans-1968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Lemma iff_intro_swap : ∀(P Q : Prop),'
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
- en: (Q → P) → (P → Q) → (P ↔ Q).
  id: totrans-1970
  prefs: []
  type: TYPE_NORMAL
- en: Proof using. intuition. Qed.
  id: totrans-1971
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" simple_intropattern(H[1]) simple_intropattern(H[2]) :=
  id: totrans-1972
  prefs: []
  type: TYPE_NORMAL
- en: split; [ intros H[1] | intros H[2] ].
  id: totrans-1973
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" simple_intropattern(H) :=
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
- en: iff H H.
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" :=
  id: totrans-1976
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh "H" in iff H.
  id: totrans-1977
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "←" simple_intropattern(H[1]) simple_intropattern(H[2])
    :=
  id: totrans-1978
  prefs: []
  type: TYPE_NORMAL
- en: apply iff_intro_swap; [ intros H[1] | intros H[2] ].
  id: totrans-1979
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "←" simple_intropattern(H) :=
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
- en: iff ← H H.
  id: totrans-1981
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "←" :=
  id: totrans-1982
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh "H" in iff ← H.
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-1984
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  id: totrans-1985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-1986
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  id: totrans-1987
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Ltac splits_tactic N :=
  id: totrans-1988
  prefs: []
  type: TYPE_NORMAL
- en: match N with
  id: totrans-1989
  prefs: []
  type: TYPE_NORMAL
- en: '| O ⇒ fail'
  id: totrans-1990
  prefs: []
  type: TYPE_NORMAL
- en: '| S O ⇒ idtac'
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
- en: '| S ?N'' ⇒ split; [| splits_tactic N'']'
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
- en: Ltac unfold_goal_until_conjunction :=
  id: totrans-1994
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  id: totrans-1995
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ _ ∧ _ ⇒ idtac'
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ progress(unfolds); unfold_goal_until_conjunction'
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-1998
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_term_conjunction_arity T :=
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  id: totrans-2000
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ⇒ constr:(8)'
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ⇒ constr:(7)'
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ∧ _ ∧ _ ∧ _ ⇒ constr:(6)'
  id: totrans-2003
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ∧ _ ∧ _ ⇒ constr:(5)'
  id: totrans-2004
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ∧ _ ⇒ constr:(4)'
  id: totrans-2005
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ∧ _ ⇒ constr:(3)'
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∧ _ ⇒ constr:(2)'
  id: totrans-2007
  prefs: []
  type: TYPE_NORMAL
- en: '| _ → ?T'' ⇒ get_term_conjunction_arity T'''
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let P := get_head T in'
  id: totrans-2009
  prefs: []
  type: TYPE_NORMAL
- en: let T' := eval unfold P in T in
  id: totrans-2010
  prefs: []
  type: TYPE_NORMAL
- en: match T' with
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
- en: '| T ⇒ fail 1'
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ get_term_conjunction_arity T'''
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: warning this can loop... *)
  id: totrans-2015
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_goal_conjunction_arity :=
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?T ⇒ get_term_conjunction_arity T end.
  id: totrans-2018
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  id: totrans-2019
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Tactic Notation "splits" :=
  id: totrans-2020
  prefs: []
  type: TYPE_NORMAL
- en: unfold_goal_until_conjunction;
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
- en: let N := get_goal_conjunction_arity in
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
- en: splits_tactic N.
  id: totrans-2023
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  id: totrans-2024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Tactic Notation "splits" constr(N) :=
  id: totrans-2025
  prefs: []
  type: TYPE_NORMAL
- en: let N := nat_from_number N in
  id: totrans-2026
  prefs: []
  type: TYPE_NORMAL
- en: splits_tactic N.
  id: totrans-2027
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  id: totrans-2028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Ltac splits_all_base := repeat split.
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits_all" :=
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
- en: splits_all_base.
  id: totrans-2031
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2032
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  id: totrans-2033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Ltac destructs_conjunction_tactic N T :=
  id: totrans-2034
  prefs: []
  type: TYPE_NORMAL
- en: match N with
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 ⇒ destruct T as [? ?]'
  id: totrans-2036
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 ⇒ destruct T as [? [? ?]]'
  id: totrans-2037
  prefs: []
  type: TYPE_NORMAL
- en: '| 4 ⇒ destruct T as [? [? [? ?]]]'
  id: totrans-2038
  prefs: []
  type: TYPE_NORMAL
- en: '| 5 ⇒ destruct T as [? [? [? [? ?]]]]'
  id: totrans-2039
  prefs: []
  type: TYPE_NORMAL
- en: '| 6 ⇒ destruct T as [? [? [? [? [? ?]]]]]'
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
- en: '| 7 ⇒ destruct T as [? [? [? [? [? [? ?]]]]]]'
  id: totrans-2041
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-2042
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  id: totrans-2043
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Tactic Notation "destructs" constr(T) :=
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
- en: let TT := type of T in
  id: totrans-2045
  prefs: []
  type: TYPE_NORMAL
- en: let N := get_term_conjunction_arity TT in
  id: totrans-2046
  prefs: []
  type: TYPE_NORMAL
- en: destructs_conjunction_tactic N T.
  id: totrans-2047
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  id: totrans-2048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Tactic Notation "destructs" constr(N) constr(T) :=
  id: totrans-2049
  prefs: []
  type: TYPE_NORMAL
- en: let N := nat_from_number N in
  id: totrans-2050
  prefs: []
  type: TYPE_NORMAL
- en: destructs_conjunction_tactic N T.
  id: totrans-2051
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  id: totrans-2053
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Ltac branch_tactic K N :=
  id: totrans-2054
  prefs: []
  type: TYPE_NORMAL
- en: match constr:((K,N)) with
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
- en: '| (_,0) ⇒ fail 1'
  id: totrans-2056
  prefs: []
  type: TYPE_NORMAL
- en: '| (0,_) ⇒ fail 1'
  id: totrans-2057
  prefs: []
  type: TYPE_NORMAL
- en: '| (1,1) ⇒ idtac'
  id: totrans-2058
  prefs: []
  type: TYPE_NORMAL
- en: '| (1,_) ⇒ left'
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
- en: '| (S ?K'', S ?N'') ⇒ right; branch_tactic K'' N'''
  id: totrans-2060
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-2061
  prefs: []
  type: TYPE_NORMAL
- en: Ltac unfold_goal_until_disjunction :=
  id: totrans-2062
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  id: totrans-2063
  prefs: []
  type: TYPE_NORMAL
- en: '| ⊢ _ ∨ _ ⇒ idtac'
  id: totrans-2064
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ progress(unfolds); unfold_goal_until_disjunction'
  id: totrans-2065
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-2066
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_term_disjunction_arity T :=
  id: totrans-2067
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  id: totrans-2068
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ⇒ constr:(8)'
  id: totrans-2069
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ⇒ constr:(7)'
  id: totrans-2070
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ∨ _ ∨ _ ∨ _ ⇒ constr:(6)'
  id: totrans-2071
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ∨ _ ∨ _ ⇒ constr:(5)'
  id: totrans-2072
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ∨ _ ⇒ constr:(4)'
  id: totrans-2073
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ∨ _ ⇒ constr:(3)'
  id: totrans-2074
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ∨ _ ⇒ constr:(2)'
  id: totrans-2075
  prefs: []
  type: TYPE_NORMAL
- en: '| _ → ?T'' ⇒ get_term_disjunction_arity T'''
  id: totrans-2076
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let P := get_head T in'
  id: totrans-2077
  prefs: []
  type: TYPE_NORMAL
- en: let T' := eval unfold P in T in
  id: totrans-2078
  prefs: []
  type: TYPE_NORMAL
- en: match T' with
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
- en: '| T ⇒ fail 1'
  id: totrans-2080
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ get_term_disjunction_arity T'''
  id: totrans-2081
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-2082
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_goal_disjunction_arity :=
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?T ⇒ get_term_disjunction_arity T end.
  id: totrans-2085
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  id: totrans-2086
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Tactic Notation "branch" constr(K) :=
  id: totrans-2087
  prefs: []
  type: TYPE_NORMAL
- en: let K := nat_from_number K in
  id: totrans-2088
  prefs: []
  type: TYPE_NORMAL
- en: unfold_goal_until_disjunction;
  id: totrans-2089
  prefs: []
  type: TYPE_NORMAL
- en: let N := get_goal_disjunction_arity in
  id: totrans-2090
  prefs: []
  type: TYPE_NORMAL
- en: branch_tactic K N.
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  id: totrans-2092
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Tactic Notation "branch" constr(K) "of" constr(N) :=
  id: totrans-2093
  prefs: []
  type: TYPE_NORMAL
- en: let N := nat_from_number N in
  id: totrans-2094
  prefs: []
  type: TYPE_NORMAL
- en: let K := nat_from_number K in
  id: totrans-2095
  prefs: []
  type: TYPE_NORMAL
- en: branch_tactic K N.
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  id: totrans-2098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Ltac destructs_disjunction_tactic N T :=
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
- en: match N with
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 ⇒ destruct T as [? | ?]'
  id: totrans-2101
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 ⇒ destruct T as [? | [? | ?]]'
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
- en: '| 4 ⇒ destruct T as [? | [? | [? | ?]]]'
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
- en: '| 5 ⇒ destruct T as [? | [? | [? | [? | ?]]]]'
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-2105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  id: totrans-2106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Tactic Notation "branches" constr(T) :=
  id: totrans-2107
  prefs: []
  type: TYPE_NORMAL
- en: let TT := type of T in
  id: totrans-2108
  prefs: []
  type: TYPE_NORMAL
- en: let N := get_term_disjunction_arity TT in
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
- en: destructs_disjunction_tactic N T.
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  id: totrans-2111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Tactic Notation "branches" constr(N) constr(T) :=
  id: totrans-2112
  prefs: []
  type: TYPE_NORMAL
- en: let N := nat_from_number N in
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
- en: destructs_disjunction_tactic N T.
  id: totrans-2114
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  id: totrans-2116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: (* Underlying implementation of ∃. *)
  id: totrans-2117
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_term_existential_arity T :=
  id: totrans-2118
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  id: totrans-2119
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3] x[4] x[5] x[6] x[7] x[8], _ ⇒ constr:(8)'
  id: totrans-2120
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3] x[4] x[5] x[6] x[7], _ ⇒ constr:(7)'
  id: totrans-2121
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3] x[4] x[5] x[6], _ ⇒ constr:(6)'
  id: totrans-2122
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3] x[4] x[5], _ ⇒ constr:(5)'
  id: totrans-2123
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3] x[4], _ ⇒ constr:(4)'
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2] x[3], _ ⇒ constr:(3)'
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1] x[2], _ ⇒ constr:(2)'
  id: totrans-2126
  prefs: []
  type: TYPE_NORMAL
- en: '| ∃x[1], _ ⇒ constr:(1)'
  id: totrans-2127
  prefs: []
  type: TYPE_NORMAL
- en: '| _ → ?T'' ⇒ get_term_existential_arity T'''
  id: totrans-2128
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ let P := get_head T in'
  id: totrans-2129
  prefs: []
  type: TYPE_NORMAL
- en: let T' := eval unfold P in T in
  id: totrans-2130
  prefs: []
  type: TYPE_NORMAL
- en: match T' with
  id: totrans-2131
  prefs: []
  type: TYPE_NORMAL
- en: '| T ⇒ fail 1'
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ get_term_existential_arity T'''
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-2134
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-2135
  prefs: []
  type: TYPE_NORMAL
- en: Ltac get_goal_existential_arity :=
  id: totrans-2136
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?T ⇒ get_term_existential_arity T end.
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  id: totrans-2138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Tactic Notation "exists_original" constr(T[1]) :=
  id: totrans-2139
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1].
  id: totrans-2140
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) :=
  id: totrans-2141
  prefs: []
  type: TYPE_NORMAL
- en: match T[1] with
  id: totrans-2142
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_wild ⇒ esplit'
  id: totrans-2143
  prefs: []
  type: TYPE_NORMAL
- en: '| ltac_wilds ⇒ repeat esplit'
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ ∃T[1]'
  id: totrans-2145
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-2146
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) constr(T[2]) :=
  id: totrans-2147
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; ∃T[2].
  id: totrans-2148
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) constr(T[2]) constr(T[3]) :=
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; ∃T[2]; ∃T[3].
  id: totrans-2150
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
    :=
  id: totrans-2151
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; ∃T[2]; ∃T[3]; ∃T[4].
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  id: totrans-2153
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) :=
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; ∃T[2]; ∃T[3]; ∃T[4]; ∃T[5].
  id: totrans-2155
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) constr(T[6]) :=
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; ∃T[2]; ∃T[3]; ∃T[4]; ∃T[5]; ∃T[6].
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
- en: (* The tactic exists___ N is short for ∃ __ ... __    with N double-underscores. The tactic ∃ is equivalent 
       to calling exists___ N, where the value of N is obtained    by counting the number of existentials syntactically present
       at the head of the goal. The behaviour of ∃ differs    from that of ∃ ___ is the case where the goal is a
       definition which yields an existential only after unfolding. *)
  id: totrans-2159
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists___" constr(N) :=
  id: totrans-2160
  prefs: []
  type: TYPE_NORMAL
- en: let rec aux N :=
  id: totrans-2161
  prefs: []
  type: TYPE_NORMAL
- en: match N with
  id: totrans-2162
  prefs: []
  type: TYPE_NORMAL
- en: '| 0 ⇒ idtac'
  id: totrans-2163
  prefs: []
  type: TYPE_NORMAL
- en: '| S ?N'' ⇒ esplit; aux N'''
  id: totrans-2164
  prefs: []
  type: TYPE_NORMAL
- en: end in
  id: totrans-2165
  prefs: []
  type: TYPE_NORMAL
- en: let N := nat_from_number N in aux N.
  id: totrans-2166
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: deprecated *)
  id: totrans-2167
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists___" :=
  id: totrans-2168
  prefs: []
  type: TYPE_NORMAL
- en: let N := get_goal_existential_arity in
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
- en: exists___ N.
  id: totrans-2170
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: does not seem to work *)
  id: totrans-2171
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" :=
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
- en: exists___.
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
- en: (* todo: exists_all is the new syntax for exists___ *)
  id: totrans-2174
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists_all" := exists___.
  id: totrans-2175
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  id: totrans-2177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Ltac unpack_core :=
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with
  id: totrans-2179
  prefs: []
  type: TYPE_NORMAL
- en: '| H: _ ∧ _ ⊢ _ ⇒ destruct H'
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
- en: '| H: ∃a, _ ⊢ _ ⇒ destruct H'
  id: totrans-2181
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-2182
  prefs: []
  type: TYPE_NORMAL
- en: Ltac unpack_from H :=
  id: totrans-2183
  prefs: []
  type: TYPE_NORMAL
- en: first [ progress (unpack_core)
  id: totrans-2184
  prefs: []
  type: TYPE_NORMAL
- en: '| destruct H; unpack_core ].'
  id: totrans-2185
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unpack" :=
  id: totrans-2186
  prefs: []
  type: TYPE_NORMAL
- en: unpack_core.
  id: totrans-2187
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unpack" constr(H) :=
  id: totrans-2188
  prefs: []
  type: TYPE_NORMAL
- en: unpack_from H.
  id: totrans-2189
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-2190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  id: totrans-2191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Tactic Notation "typeclass" :=
  id: totrans-2192
  prefs: []
  type: TYPE_NORMAL
- en: let go _ := eauto with typeclass_instances in
  id: totrans-2193
  prefs: []
  type: TYPE_NORMAL
- en: solve [ go tt | constructor; go tt ].
  id: totrans-2194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  id: totrans-2195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Tactic Notation "solve_typeclass" :=
  id: totrans-2196
  prefs: []
  type: TYPE_NORMAL
- en: solve [ eauto with typeclass_instances ].
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-2198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  id: totrans-2199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  id: totrans-2201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Tactic Notation "f_equal" :=
  id: totrans-2202
  prefs: []
  type: TYPE_NORMAL
- en: f_equal.
  id: totrans-2203
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "constructor" :=
  id: totrans-2204
  prefs: []
  type: TYPE_NORMAL
- en: constructor.
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simple" :=
  id: totrans-2206
  prefs: []
  type: TYPE_NORMAL
- en: simpl.
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "split" :=
  id: totrans-2208
  prefs: []
  type: TYPE_NORMAL
- en: split.
  id: totrans-2209
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "right" :=
  id: totrans-2210
  prefs: []
  type: TYPE_NORMAL
- en: right.
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "left" :=
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
- en: left.
  id: totrans-2213
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  id: totrans-2215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Tactic Notation "hint" constr(E) :=
  id: totrans-2216
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh "Hint" in lets H: E.'
  id: totrans-2217
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hint" constr(E[1]) "," constr(E[2]) :=
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
- en: hint E[1]; hint E[2].
  id: totrans-2219
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hint" constr(E[1]) "," constr(E[2]) "," constr(E[3]) :=
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
- en: hint E[1]; hint E[2]; hint(E[3]).
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hint" constr(E[1]) "," constr(E[2]) "," constr(E[3]) "," constr(E[4])
    :=
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
- en: hint E[1]; hint E[2]; hint(E[3]); hint(E[4] ).
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  id: totrans-2225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Tactic Notation "jauto" :=
  id: totrans-2226
  prefs: []
  type: TYPE_NORMAL
- en: try solve [ jauto_set; eauto ].
  id: totrans-2227
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "jauto_fast" :=
  id: totrans-2228
  prefs: []
  type: TYPE_NORMAL
- en: try solve [ auto | eauto | jauto ].
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  id: totrans-2230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Tactic Notation "iauto" := try solve [intuition eauto].
  id: totrans-2231
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  id: totrans-2233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Ltac auto_tilde_default := auto.
  id: totrans-2234
  prefs: []
  type: TYPE_NORMAL
- en: Ltac auto_tilde := auto_tilde_default.
  id: totrans-2235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  id: totrans-2236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: (* SPECIAL VERSION FOR SF*)
  id: totrans-2237
  prefs: []
  type: TYPE_NORMAL
- en: Ltac auto_star_default := try solve [ jauto ].
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
- en: Ltac auto_star := auto_star_default.
  id: totrans-2239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  id: totrans-2240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Tactic Notation "autos" :=
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
- en: auto_tilde.
  id: totrans-2242
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "¬" :=
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
- en: auto_tilde.
  id: totrans-2244
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "¬" constr(E[1]) :=
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; auto_tilde.'
  id: totrans-2246
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "¬" constr(E[1]) constr(E[2]) :=
  id: totrans-2247
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; lets: E[2]; auto_tilde.'
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "¬" constr(E[1]) constr(E[2]) constr(E[3]) :=
  id: totrans-2249
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; lets: E[2]; lets: E[3]; auto_tilde.'
  id: totrans-2250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  id: totrans-2251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Tactic Notation "autos" "*" :=
  id: totrans-2252
  prefs: []
  type: TYPE_NORMAL
- en: auto_star.
  id: totrans-2253
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "*" constr(E[1]) :=
  id: totrans-2254
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; auto_star.'
  id: totrans-2255
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "*" constr(E[1]) constr(E[2]) :=
  id: totrans-2256
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; lets: E[2]; auto_star.'
  id: totrans-2257
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "autos" "*" constr(E[1]) constr(E[2]) constr(E[3]) :=
  id: totrans-2258
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[1]; lets: E[2]; lets: E[3]; auto_star.'
  id: totrans-2259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  id: totrans-2260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Ltac auto_false_base cont :=
  id: totrans-2261
  prefs: []
  type: TYPE_NORMAL
- en: try solve [
  id: totrans-2262
  prefs: []
  type: TYPE_NORMAL
- en: intros_all; try match goal with ⊢ _ ↔ _ ⇒ split end;
  id: totrans-2263
  prefs: []
  type: TYPE_NORMAL
- en: solve [ cont tt | intros_all; false; cont tt ] ].
  id: totrans-2264
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "auto_false" :=
  id: totrans-2265
  prefs: []
  type: TYPE_NORMAL
- en: auto_false_base ltac:(fun tt ⇒ auto).
  id: totrans-2266
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "auto_false" "¬" :=
  id: totrans-2267
  prefs: []
  type: TYPE_NORMAL
- en: auto_false_base ltac:(fun tt ⇒ auto_tilde).
  id: totrans-2268
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "auto_false" "*" :=
  id: totrans-2269
  prefs: []
  type: TYPE_NORMAL
- en: auto_false_base ltac:(fun tt ⇒ auto_star).
  id: totrans-2270
  prefs: []
  type: TYPE_NORMAL
- en: (* NOT NEEDED FOR SF (incompatible with V[8].4)  Tactic Notation "dauto" :=
      dintuition eauto. *)
  id: totrans-2271
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  id: totrans-2273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Tactic Notation "equates" "¬" constr(E) :=
  id: totrans-2274
  prefs: []
  type: TYPE_NORMAL
- en: equates E; auto_tilde.
  id: totrans-2275
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "¬" constr(n[1]) constr(n[2]) :=
  id: totrans-2276
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2]; auto_tilde.
  id: totrans-2277
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "¬" constr(n[1]) constr(n[2]) constr(n[3]) :=
  id: totrans-2278
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2] n[3]; auto_tilde.
  id: totrans-2279
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "¬" constr(n[1]) constr(n[2]) constr(n[3]) constr(n[4])
    :=
  id: totrans-2280
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2] n[3] n[4]; auto_tilde.
  id: totrans-2281
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "¬" constr(H) constr(E) :=
  id: totrans-2282
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H E; auto_tilde.
  id: totrans-2283
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "¬" constr(H) constr(n[1]) constr(n[2]) :=
  id: totrans-2284
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2]; auto_tilde.
  id: totrans-2285
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "¬" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    :=
  id: totrans-2286
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2] n[3]; auto_tilde.
  id: totrans-2287
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "¬" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    constr(n[4]) :=
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2] n[3] n[4]; auto_tilde.
  id: totrans-2289
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "apply" "¬" constr(H) :=
  id: totrans-2290
  prefs: []
  type: TYPE_NORMAL
- en: sapply H; auto_tilde.
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct" "¬" constr(H) :=
  id: totrans-2292
  prefs: []
  type: TYPE_NORMAL
- en: destruct H; auto_tilde.
  id: totrans-2293
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct" "¬" constr(H) "as" simple_intropattern(I) :=
  id: totrans-2294
  prefs: []
  type: TYPE_NORMAL
- en: destruct H as I; auto_tilde.
  id: totrans-2295
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "f_equal" "¬" :=
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
- en: f_equal; auto_tilde.
  id: totrans-2297
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "induction" "¬" constr(H) :=
  id: totrans-2298
  prefs: []
  type: TYPE_NORMAL
- en: induction H; auto_tilde.
  id: totrans-2299
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inversion" "¬" constr(H) :=
  id: totrans-2300
  prefs: []
  type: TYPE_NORMAL
- en: inversion H; auto_tilde.
  id: totrans-2301
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "split" "¬" :=
  id: totrans-2302
  prefs: []
  type: TYPE_NORMAL
- en: split; auto_tilde.
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst" "¬" :=
  id: totrans-2304
  prefs: []
  type: TYPE_NORMAL
- en: subst; auto_tilde.
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "right" "¬" :=
  id: totrans-2306
  prefs: []
  type: TYPE_NORMAL
- en: right; auto_tilde.
  id: totrans-2307
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "left" "¬" :=
  id: totrans-2308
  prefs: []
  type: TYPE_NORMAL
- en: left; auto_tilde.
  id: totrans-2309
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "constructor" "¬" :=
  id: totrans-2310
  prefs: []
  type: TYPE_NORMAL
- en: constructor; auto_tilde.
  id: totrans-2311
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "constructors" "¬" :=
  id: totrans-2312
  prefs: []
  type: TYPE_NORMAL
- en: constructors; auto_tilde.
  id: totrans-2313
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" :=
  id: totrans-2314
  prefs: []
  type: TYPE_NORMAL
- en: false; auto_tilde.
  id: totrans-2315
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" constr(E) :=
  id: totrans-2316
  prefs: []
  type: TYPE_NORMAL
- en: false_then E ltac:(fun _ ⇒ auto_tilde).
  id: totrans-2317
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" constr(E[0]) constr(E[1]) :=
  id: totrans-2318
  prefs: []
  type: TYPE_NORMAL
- en: false¬ (>> E[0] E[1]).
  id: totrans-2319
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" constr(E[0]) constr(E[1]) constr(E[2]) :=
  id: totrans-2320
  prefs: []
  type: TYPE_NORMAL
- en: false¬ (>> E[0] E[1] E[2]).
  id: totrans-2321
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" constr(E[0]) constr(E[1]) constr(E[2]) constr(E[3])
    :=
  id: totrans-2322
  prefs: []
  type: TYPE_NORMAL
- en: false¬ (>> E[0] E[1] E[2] E[3]).
  id: totrans-2323
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "¬" constr(E[0]) constr(E[1]) constr(E[2]) constr(E[3])
    constr(E[4]) :=
  id: totrans-2324
  prefs: []
  type: TYPE_NORMAL
- en: false¬ (>> E[0] E[1] E[2] E[3] E[4]).
  id: totrans-2325
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "tryfalse" "¬" :=
  id: totrans-2326
  prefs: []
  type: TYPE_NORMAL
- en: try solve [ false¬ ].
  id: totrans-2327
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" "¬" simple_intropattern(H) ":" constr(E) :=
  id: totrans-2328
  prefs: []
  type: TYPE_NORMAL
- en: 'asserts H: E; [ auto_tilde | idtac ].'
  id: totrans-2329
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" "¬" ":" constr(E) :=
  id: totrans-2330
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh "H" in asserts¬ H: E.'
  id: totrans-2331
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" "¬" simple_intropattern(H) ":" constr(E) :=
  id: totrans-2332
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts H: E; [ auto_tilde | idtac ].'
  id: totrans-2333
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" "¬" ":" constr(E) :=
  id: totrans-2334
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts: E; [ auto_tilde | idtac ].'
  id: totrans-2335
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E) :=
  id: totrans-2336
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E; auto_tilde.'
  id: totrans-2337
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2338
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  id: totrans-2339
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1]; auto_tilde.'
  id: totrans-2340
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2341
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-2342
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2]; auto_tilde.'
  id: totrans-2343
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2344
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-2345
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3]; auto_tilde.'
  id: totrans-2346
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2347
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-2348
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3] A[4]; auto_tilde.'
  id: totrans-2349
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2350
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-2351
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3] A[4] A[5]; auto_tilde.'
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E) :=
  id: totrans-2353
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E; auto_tilde.'
  id: totrans-2354
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E[0])
  id: totrans-2355
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  id: totrans-2356
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1]; auto_tilde.'
  id: totrans-2357
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E[0])
  id: totrans-2358
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-2359
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2]; auto_tilde.'
  id: totrans-2360
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E[0])
  id: totrans-2361
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-2362
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3]; auto_tilde.'
  id: totrans-2363
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E[0])
  id: totrans-2364
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-2365
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3] A[4]; auto_tilde.'
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "¬" ":" constr(E[0])
  id: totrans-2367
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-2368
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3] A[4] A[5]; auto_tilde.'
  id: totrans-2369
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E) :=
  id: totrans-2370
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E; auto_tilde.'
  id: totrans-2371
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2372
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  id: totrans-2373
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1]; auto_tilde.'
  id: totrans-2374
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2375
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-2376
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2]; auto_tilde.'
  id: totrans-2377
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-2379
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3]; auto_tilde.'
  id: totrans-2380
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2381
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-2382
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3] A[4]; auto_tilde.'
  id: totrans-2383
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2384
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-2385
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3] A[4] A[5]; auto_tilde.'
  id: totrans-2386
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E) :=
  id: totrans-2387
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E; auto_tilde.'
  id: totrans-2388
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E[0])
  id: totrans-2389
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1]; auto_tilde.'
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E[0])
  id: totrans-2392
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-2393
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2]; auto_tilde.'
  id: totrans-2394
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E[0])
  id: totrans-2395
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-2396
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3]; auto_tilde.'
  id: totrans-2397
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E[0])
  id: totrans-2398
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-2399
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3] A[4]; auto_tilde.'
  id: totrans-2400
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "¬" ":" constr(E[0])
  id: totrans-2401
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-2402
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3] A[4] A[5]; auto_tilde.'
  id: totrans-2403
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(H) :=
  id: totrans-2404
  prefs: []
  type: TYPE_NORMAL
- en: sapply H; auto_tilde. (*todo?*)
  id: totrans-2405
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) :=
  id: totrans-2406
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1]; auto_tilde.
  id: totrans-2407
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) :=
  id: totrans-2408
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1]; auto_tilde.
  id: totrans-2409
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) constr(A[2]) :=
  id: totrans-2410
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2]; auto_tilde.
  id: totrans-2411
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3]; auto_tilde.
  id: totrans-2413
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3] A[4]; auto_tilde.
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "¬" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  id: totrans-2416
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3] A[4] A[5]; auto_tilde.
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" "¬" hyp(H) :=
  id: totrans-2418
  prefs: []
  type: TYPE_NORMAL
- en: specializes H; auto_tilde.
  id: totrans-2419
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" "¬" hyp(H) constr(A[1]) :=
  id: totrans-2420
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1]; auto_tilde.
  id: totrans-2421
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) :=
  id: totrans-2422
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2]; auto_tilde.
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  id: totrans-2424
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3]; auto_tilde.
  id: totrans-2425
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  id: totrans-2426
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3] A[4]; auto_tilde.
  id: totrans-2427
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  id: totrans-2428
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3] A[4] A[5]; auto_tilde.
  id: totrans-2429
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fapply" "¬" constr(E) :=
  id: totrans-2430
  prefs: []
  type: TYPE_NORMAL
- en: fapply E; auto_tilde.
  id: totrans-2431
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sapply" "¬" constr(E) :=
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
- en: sapply E; auto_tilde.
  id: totrans-2433
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "logic" "¬" constr(E) :=
  id: totrans-2434
  prefs: []
  type: TYPE_NORMAL
- en: logic_base E ltac:(fun _ ⇒ auto_tilde).
  id: totrans-2435
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intros_all" "¬" :=
  id: totrans-2436
  prefs: []
  type: TYPE_NORMAL
- en: intros_all; auto_tilde.
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "¬" :=
  id: totrans-2438
  prefs: []
  type: TYPE_NORMAL
- en: unfolds; auto_tilde.
  id: totrans-2439
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "¬" constr(F[1]) :=
  id: totrans-2440
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1]; auto_tilde.
  id: totrans-2441
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "¬" constr(F[1]) "," constr(F[2]) :=
  id: totrans-2442
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2]; auto_tilde.
  id: totrans-2443
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "¬" constr(F[1]) "," constr(F[2]) "," constr(F[3])
    :=
  id: totrans-2444
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2], F[3]; auto_tilde.
  id: totrans-2445
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "¬" constr(F[1]) "," constr(F[2]) "," constr(F[3])
    ","
  id: totrans-2446
  prefs: []
  type: TYPE_NORMAL
- en: constr(F[4]) :=
  id: totrans-2447
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2], F[3], F[4]; auto_tilde.
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simple" "¬" :=
  id: totrans-2449
  prefs: []
  type: TYPE_NORMAL
- en: simpl; auto_tilde.
  id: totrans-2450
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simple" "¬" "in" hyp(H) :=
  id: totrans-2451
  prefs: []
  type: TYPE_NORMAL
- en: simpl in H; auto_tilde.
  id: totrans-2452
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simpls" "¬" :=
  id: totrans-2453
  prefs: []
  type: TYPE_NORMAL
- en: simpls; auto_tilde.
  id: totrans-2454
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hnfs" "¬" :=
  id: totrans-2455
  prefs: []
  type: TYPE_NORMAL
- en: hnfs; auto_tilde.
  id: totrans-2456
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hnfs" "¬" "in" hyp(H) :=
  id: totrans-2457
  prefs: []
  type: TYPE_NORMAL
- en: hnf in H; auto_tilde.
  id: totrans-2458
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "substs" "¬" :=
  id: totrans-2459
  prefs: []
  type: TYPE_NORMAL
- en: substs; auto_tilde.
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intro_hyp" "¬" hyp(H) :=
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
- en: subst_hyp H; auto_tilde.
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intro_subst" "¬" :=
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
- en: intro_subst; auto_tilde.
  id: totrans-2464
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst_eq" "¬" constr(E) :=
  id: totrans-2465
  prefs: []
  type: TYPE_NORMAL
- en: subst_eq E; auto_tilde.
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "¬" constr(E) :=
  id: totrans-2467
  prefs: []
  type: TYPE_NORMAL
- en: rewrite E; auto_tilde.
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "¬" "←" constr(E) :=
  id: totrans-2469
  prefs: []
  type: TYPE_NORMAL
- en: rewrite ← E; auto_tilde.
  id: totrans-2470
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "¬" constr(E) "in" hyp(H) :=
  id: totrans-2471
  prefs: []
  type: TYPE_NORMAL
- en: rewrite E in H; auto_tilde.
  id: totrans-2472
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "¬" "←" constr(E) "in" hyp(H) :=
  id: totrans-2473
  prefs: []
  type: TYPE_NORMAL
- en: rewrite ← E in H; auto_tilde.
  id: totrans-2474
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" constr(E) :=
  id: totrans-2475
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E; auto_tilde.
  id: totrans-2476
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" constr(E) "in" hyp(H) :=
  id: totrans-2477
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E in H; auto_tilde.
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" constr(E) "in" "*" :=
  id: totrans-2479
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E in *; auto_tilde.
  id: totrans-2480
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" "←" constr(E) :=
  id: totrans-2481
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E; auto_tilde.
  id: totrans-2482
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" "←" constr(E) "in" hyp(H) :=
  id: totrans-2483
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E in H; auto_tilde.
  id: totrans-2484
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "¬" "←" constr(E) "in" "*" :=
  id: totrans-2485
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E in *; auto_tilde.
  id: totrans-2486
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" constr(E) :=
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E; auto_tilde.
  id: totrans-2488
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" "←" constr(E) :=
  id: totrans-2489
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E; auto_tilde.
  id: totrans-2490
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" constr(E) "in" ident(H) :=
  id: totrans-2491
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E in H; auto_tilde.
  id: totrans-2492
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" "←" constr(E) "in" ident(H) :=
  id: totrans-2493
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E in H; auto_tilde.
  id: totrans-2494
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" constr(E) "in" "*" :=
  id: totrans-2495
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E in *; auto_tilde.
  id: totrans-2496
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "¬" "←" constr(E) "in" "*" :=
  id: totrans-2497
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E in *; auto_tilde.
  id: totrans-2498
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" constr(E) :=
  id: totrans-2499
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E; auto_tilde.
  id: totrans-2500
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" "←" constr(E) :=
  id: totrans-2501
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E; auto_tilde.
  id: totrans-2502
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" constr(E) "in" hyp(H) :=
  id: totrans-2503
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E in H; auto_tilde.
  id: totrans-2504
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" "←" constr(E) "in" hyp(H) :=
  id: totrans-2505
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E in H; auto_tilde.
  id: totrans-2506
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" constr(E) "in" "*" :=
  id: totrans-2507
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E in *; auto_tilde.
  id: totrans-2508
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "¬" "←" constr(E) "in" "*" :=
  id: totrans-2509
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E in *; auto_tilde.
  id: totrans-2510
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "¬" constr(E) :=
  id: totrans-2511
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite E; auto_tilde.
  id: totrans-2512
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "¬" "←" constr(E) :=
  id: totrans-2513
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite ← E; auto_tilde.
  id: totrans-2514
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "¬" constr(E) "in" hyp(H) :=
  id: totrans-2515
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite E in H; auto_tilde.
  id: totrans-2516
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "¬" "←" constr(E) "in" hyp(H) :=
  id: totrans-2517
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite ← E in H; auto_tilde.
  id: totrans-2518
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "erewrite" "¬" constr(E) :=
  id: totrans-2519
  prefs: []
  type: TYPE_NORMAL
- en: erewrite E; auto_tilde.
  id: totrans-2520
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fequal" "¬" :=
  id: totrans-2521
  prefs: []
  type: TYPE_NORMAL
- en: fequal; auto_tilde.
  id: totrans-2522
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fequals" "¬" :=
  id: totrans-2523
  prefs: []
  type: TYPE_NORMAL
- en: fequals; auto_tilde.
  id: totrans-2524
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "pi_rewrite" "¬" constr(E) :=
  id: totrans-2525
  prefs: []
  type: TYPE_NORMAL
- en: pi_rewrite E; auto_tilde.
  id: totrans-2526
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "pi_rewrite" "¬" constr(E) "in" hyp(H) :=
  id: totrans-2527
  prefs: []
  type: TYPE_NORMAL
- en: pi_rewrite E in H; auto_tilde.
  id: totrans-2528
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "invert" "¬" hyp(H) :=
  id: totrans-2529
  prefs: []
  type: TYPE_NORMAL
- en: invert H; auto_tilde.
  id: totrans-2530
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "¬" hyp(H) :=
  id: totrans-2531
  prefs: []
  type: TYPE_NORMAL
- en: inverts H; auto_tilde.
  id: totrans-2532
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "¬" hyp(E) "as" :=
  id: totrans-2533
  prefs: []
  type: TYPE_NORMAL
- en: inverts E as; auto_tilde.
  id: totrans-2534
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "injects" "¬" hyp(H) :=
  id: totrans-2535
  prefs: []
  type: TYPE_NORMAL
- en: injects H; auto_tilde.
  id: totrans-2536
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inversions" "¬" hyp(H) :=
  id: totrans-2537
  prefs: []
  type: TYPE_NORMAL
- en: inversions H; auto_tilde.
  id: totrans-2538
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases" "¬" constr(E) "as" ident(H) :=
  id: totrans-2539
  prefs: []
  type: TYPE_NORMAL
- en: cases E as H; auto_tilde.
  id: totrans-2540
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases" "¬" constr(E) :=
  id: totrans-2541
  prefs: []
  type: TYPE_NORMAL
- en: cases E; auto_tilde.
  id: totrans-2542
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "¬" :=
  id: totrans-2543
  prefs: []
  type: TYPE_NORMAL
- en: case_if; auto_tilde.
  id: totrans-2544
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_ifs" "¬" :=
  id: totrans-2545
  prefs: []
  type: TYPE_NORMAL
- en: case_ifs; auto_tilde.
  id: totrans-2546
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "¬" "in" hyp(H) :=
  id: totrans-2547
  prefs: []
  type: TYPE_NORMAL
- en: case_if in H; auto_tilde.
  id: totrans-2548
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "¬" :=
  id: totrans-2549
  prefs: []
  type: TYPE_NORMAL
- en: cases_if; auto_tilde.
  id: totrans-2550
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "¬" "in" hyp(H) :=
  id: totrans-2551
  prefs: []
  type: TYPE_NORMAL
- en: cases_if in H; auto_tilde.
  id: totrans-2552
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "¬" :=
  id: totrans-2553
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if; auto_tilde.
  id: totrans-2554
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "¬" "in" hyp(H) :=
  id: totrans-2555
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if in H; auto_tilde.
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_head_match" "¬" :=
  id: totrans-2557
  prefs: []
  type: TYPE_NORMAL
- en: destruct_head_match; auto_tilde.
  id: totrans-2558
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases'" "¬" constr(E) "as" ident(H) :=
  id: totrans-2559
  prefs: []
  type: TYPE_NORMAL
- en: cases' E as H; auto_tilde.
  id: totrans-2560
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases'" "¬" constr(E) :=
  id: totrans-2561
  prefs: []
  type: TYPE_NORMAL
- en: cases' E; auto_tilde.
  id: totrans-2562
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" "¬" "as" ident(H) :=
  id: totrans-2563
  prefs: []
  type: TYPE_NORMAL
- en: cases_if' as H; auto_tilde.
  id: totrans-2564
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" "¬" :=
  id: totrans-2565
  prefs: []
  type: TYPE_NORMAL
- en: cases_if'; auto_tilde.
  id: totrans-2566
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "decides_equality" "¬" :=
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
- en: decides_equality; auto_tilde.
  id: totrans-2568
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "¬" :=
  id: totrans-2569
  prefs: []
  type: TYPE_NORMAL
- en: iff; auto_tilde.
  id: totrans-2570
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits" "¬" :=
  id: totrans-2571
  prefs: []
  type: TYPE_NORMAL
- en: splits; auto_tilde.
  id: totrans-2572
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits" "¬" constr(N) :=
  id: totrans-2573
  prefs: []
  type: TYPE_NORMAL
- en: splits N; auto_tilde.
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits_all" "¬" :=
  id: totrans-2575
  prefs: []
  type: TYPE_NORMAL
- en: splits_all; auto_tilde.
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destructs" "¬" constr(T) :=
  id: totrans-2577
  prefs: []
  type: TYPE_NORMAL
- en: destructs T; auto_tilde.
  id: totrans-2578
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destructs" "¬" constr(N) constr(T) :=
  id: totrans-2579
  prefs: []
  type: TYPE_NORMAL
- en: destructs N T; auto_tilde.
  id: totrans-2580
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branch" "¬" constr(N) :=
  id: totrans-2581
  prefs: []
  type: TYPE_NORMAL
- en: branch N; auto_tilde.
  id: totrans-2582
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branch" "¬" constr(K) "of" constr(N) :=
  id: totrans-2583
  prefs: []
  type: TYPE_NORMAL
- en: branch K of N; auto_tilde.
  id: totrans-2584
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branches" "¬" constr(T) :=
  id: totrans-2585
  prefs: []
  type: TYPE_NORMAL
- en: branches T; auto_tilde.
  id: totrans-2586
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branches" "¬" constr(N) constr(T) :=
  id: totrans-2587
  prefs: []
  type: TYPE_NORMAL
- en: branches N T; auto_tilde.
  id: totrans-2588
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" :=
  id: totrans-2589
  prefs: []
  type: TYPE_NORMAL
- en: ∃; auto_tilde.
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists___" "¬" :=
  id: totrans-2591
  prefs: []
  type: TYPE_NORMAL
- en: exists___; auto_tilde.
  id: totrans-2592
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) :=
  id: totrans-2593
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; auto_tilde.
  id: totrans-2594
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) constr(T[2]) :=
  id: totrans-2595
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2]; auto_tilde.
  id: totrans-2596
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) constr(T[2]) constr(T[3]) :=
  id: totrans-2597
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3]; auto_tilde.
  id: totrans-2598
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
    :=
  id: totrans-2599
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4]; auto_tilde.
  id: totrans-2600
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  id: totrans-2601
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) :=
  id: totrans-2602
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4] T[5]; auto_tilde.
  id: totrans-2603
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "¬" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  id: totrans-2604
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) constr(T[6]) :=
  id: totrans-2605
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4] T[5] T[6]; auto_tilde.
  id: totrans-2606
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2607
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  id: totrans-2608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Tactic Notation "equates" "*" constr(E) :=
  id: totrans-2609
  prefs: []
  type: TYPE_NORMAL
- en: equates E; auto_star.
  id: totrans-2610
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "*" constr(n[1]) constr(n[2]) :=
  id: totrans-2611
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2]; auto_star.
  id: totrans-2612
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "*" constr(n[1]) constr(n[2]) constr(n[3]) :=
  id: totrans-2613
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2] n[3]; auto_star.
  id: totrans-2614
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "equates" "*" constr(n[1]) constr(n[2]) constr(n[3]) constr(n[4])
    :=
  id: totrans-2615
  prefs: []
  type: TYPE_NORMAL
- en: equates n[1] n[2] n[3] n[4]; auto_star.
  id: totrans-2616
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "*" constr(H) constr(E) :=
  id: totrans-2617
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H E; auto_star.
  id: totrans-2618
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "*" constr(H) constr(n[1]) constr(n[2]) :=
  id: totrans-2619
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2]; auto_star.
  id: totrans-2620
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "*" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    :=
  id: totrans-2621
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2] n[3]; auto_star.
  id: totrans-2622
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys_eq" "*" constr(H) constr(n[1]) constr(n[2]) constr(n[3])
    constr(n[4]) :=
  id: totrans-2623
  prefs: []
  type: TYPE_NORMAL
- en: applys_eq H n[1] n[2] n[3] n[4]; auto_star.
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "apply" "*" constr(H) :=
  id: totrans-2625
  prefs: []
  type: TYPE_NORMAL
- en: sapply H; auto_star.
  id: totrans-2626
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct" "*" constr(H) :=
  id: totrans-2627
  prefs: []
  type: TYPE_NORMAL
- en: destruct H; auto_star.
  id: totrans-2628
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct" "*" constr(H) "as" simple_intropattern(I) :=
  id: totrans-2629
  prefs: []
  type: TYPE_NORMAL
- en: destruct H as I; auto_star.
  id: totrans-2630
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "f_equal" "*" :=
  id: totrans-2631
  prefs: []
  type: TYPE_NORMAL
- en: f_equal; auto_star.
  id: totrans-2632
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "induction" "*" constr(H) :=
  id: totrans-2633
  prefs: []
  type: TYPE_NORMAL
- en: induction H; auto_star.
  id: totrans-2634
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inversion" "*" constr(H) :=
  id: totrans-2635
  prefs: []
  type: TYPE_NORMAL
- en: inversion H; auto_star.
  id: totrans-2636
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "split" "*" :=
  id: totrans-2637
  prefs: []
  type: TYPE_NORMAL
- en: split; auto_star.
  id: totrans-2638
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subs" "*" :=
  id: totrans-2639
  prefs: []
  type: TYPE_NORMAL
- en: subst; auto_star.
  id: totrans-2640
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst" "*" :=
  id: totrans-2641
  prefs: []
  type: TYPE_NORMAL
- en: subst; auto_star.
  id: totrans-2642
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "right" "*" :=
  id: totrans-2643
  prefs: []
  type: TYPE_NORMAL
- en: right; auto_star.
  id: totrans-2644
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "left" "*" :=
  id: totrans-2645
  prefs: []
  type: TYPE_NORMAL
- en: left; auto_star.
  id: totrans-2646
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "constructor" "*" :=
  id: totrans-2647
  prefs: []
  type: TYPE_NORMAL
- en: constructor; auto_star.
  id: totrans-2648
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "constructors" "*" :=
  id: totrans-2649
  prefs: []
  type: TYPE_NORMAL
- en: constructors; auto_star.
  id: totrans-2650
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" :=
  id: totrans-2651
  prefs: []
  type: TYPE_NORMAL
- en: false; auto_star.
  id: totrans-2652
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" constr(E) :=
  id: totrans-2653
  prefs: []
  type: TYPE_NORMAL
- en: false_then E ltac:(fun _ ⇒ auto_star).
  id: totrans-2654
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" constr(E[0]) constr(E[1]) :=
  id: totrans-2655
  prefs: []
  type: TYPE_NORMAL
- en: false* (>> E[0] E[1]).
  id: totrans-2656
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" constr(E[0]) constr(E[1]) constr(E[2]) :=
  id: totrans-2657
  prefs: []
  type: TYPE_NORMAL
- en: false* (>> E[0] E[1] E[2]).
  id: totrans-2658
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" constr(E[0]) constr(E[1]) constr(E[2]) constr(E[3])
    :=
  id: totrans-2659
  prefs: []
  type: TYPE_NORMAL
- en: false* (>> E[0] E[1] E[2] E[3]).
  id: totrans-2660
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "false" "*" constr(E[0]) constr(E[1]) constr(E[2]) constr(E[3])
    constr(E[4]) :=
  id: totrans-2661
  prefs: []
  type: TYPE_NORMAL
- en: false* (>> E[0] E[1] E[2] E[3] E[4]).
  id: totrans-2662
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "tryfalse" "*" :=
  id: totrans-2663
  prefs: []
  type: TYPE_NORMAL
- en: try solve [ false* ].
  id: totrans-2664
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" "*" simple_intropattern(H) ":" constr(E) :=
  id: totrans-2665
  prefs: []
  type: TYPE_NORMAL
- en: 'asserts H: E; [ auto_star | idtac ].'
  id: totrans-2666
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts" "*" ":" constr(E) :=
  id: totrans-2667
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh "H" in asserts* H: E.'
  id: totrans-2668
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" "*" simple_intropattern(H) ":" constr(E) :=
  id: totrans-2669
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts H: E; [ auto_star | idtac ].'
  id: totrans-2670
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts" "*" ":" constr(E) :=
  id: totrans-2671
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts: E; [ auto_star | idtac ].'
  id: totrans-2672
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E) :=
  id: totrans-2673
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E; auto_star.'
  id: totrans-2674
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2675
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  id: totrans-2676
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1]; auto_star.'
  id: totrans-2677
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2678
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-2679
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2]; auto_star.'
  id: totrans-2680
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2681
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-2682
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3]; auto_star.'
  id: totrans-2683
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2684
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-2685
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3] A[4]; auto_star.'
  id: totrans-2686
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2687
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-2688
  prefs: []
  type: TYPE_NORMAL
- en: 'lets I: E[0] A[1] A[2] A[3] A[4] A[5]; auto_star.'
  id: totrans-2689
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E) :=
  id: totrans-2690
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E; auto_star.'
  id: totrans-2691
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E[0])
  id: totrans-2692
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  id: totrans-2693
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1]; auto_star.'
  id: totrans-2694
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E[0])
  id: totrans-2695
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-2696
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2]; auto_star.'
  id: totrans-2697
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E[0])
  id: totrans-2698
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-2699
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3]; auto_star.'
  id: totrans-2700
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E[0])
  id: totrans-2701
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-2702
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3] A[4]; auto_star.'
  id: totrans-2703
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "lets" "*" ":" constr(E[0])
  id: totrans-2704
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-2705
  prefs: []
  type: TYPE_NORMAL
- en: 'lets: E[0] A[1] A[2] A[3] A[4] A[5]; auto_star.'
  id: totrans-2706
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E) :=
  id: totrans-2707
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E; auto_star.'
  id: totrans-2708
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2709
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  id: totrans-2710
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1]; auto_star.'
  id: totrans-2711
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2712
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-2713
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2]; auto_star.'
  id: totrans-2714
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2715
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-2716
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3]; auto_star.'
  id: totrans-2717
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2718
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-2719
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3] A[4]; auto_star.'
  id: totrans-2720
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" simple_intropattern(I) ":" constr(E[0])
  id: totrans-2721
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-2722
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards I: E[0] A[1] A[2] A[3] A[4] A[5]; auto_star.'
  id: totrans-2723
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E) :=
  id: totrans-2724
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E; auto_star.'
  id: totrans-2725
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E[0])
  id: totrans-2726
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) :=
  id: totrans-2727
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1]; auto_star.'
  id: totrans-2728
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E[0])
  id: totrans-2729
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) :=
  id: totrans-2730
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2]; auto_star.'
  id: totrans-2731
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E[0])
  id: totrans-2732
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) :=
  id: totrans-2733
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3]; auto_star.'
  id: totrans-2734
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E[0])
  id: totrans-2735
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) :=
  id: totrans-2736
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3] A[4]; auto_star.'
  id: totrans-2737
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "forwards" "*" ":" constr(E[0])
  id: totrans-2738
  prefs: []
  type: TYPE_NORMAL
- en: constr(A[1]) constr(A[2]) constr(A[3]) constr(A[4]) constr(A[5]) :=
  id: totrans-2739
  prefs: []
  type: TYPE_NORMAL
- en: 'forwards: E[0] A[1] A[2] A[3] A[4] A[5]; auto_star.'
  id: totrans-2740
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(H) :=
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
- en: sapply H; auto_star. (*todo?*)
  id: totrans-2742
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) :=
  id: totrans-2743
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1]; auto_star.
  id: totrans-2744
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) :=
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1]; auto_star.
  id: totrans-2746
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) constr(A[2]) :=
  id: totrans-2747
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2]; auto_star.
  id: totrans-2748
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  id: totrans-2749
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3]; auto_star.
  id: totrans-2750
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  id: totrans-2751
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3] A[4]; auto_star.
  id: totrans-2752
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "applys" "*" constr(E[0]) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  id: totrans-2753
  prefs: []
  type: TYPE_NORMAL
- en: applys E[0] A[1] A[2] A[3] A[4] A[5]; auto_star.
  id: totrans-2754
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" "*" hyp(H) :=
  id: totrans-2755
  prefs: []
  type: TYPE_NORMAL
- en: specializes H; auto_star.
  id: totrans-2756
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" "¬" hyp(H) constr(A[1]) :=
  id: totrans-2757
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1]; auto_star.
  id: totrans-2758
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) :=
  id: totrans-2759
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2]; auto_star.
  id: totrans-2760
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    :=
  id: totrans-2761
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3]; auto_star.
  id: totrans-2762
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) :=
  id: totrans-2763
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3] A[4]; auto_star.
  id: totrans-2764
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "specializes" hyp(H) constr(A[1]) constr(A[2]) constr(A[3])
    constr(A[4]) constr(A[5]) :=
  id: totrans-2765
  prefs: []
  type: TYPE_NORMAL
- en: specializes H A[1] A[2] A[3] A[4] A[5]; auto_star.
  id: totrans-2766
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fapply" "*" constr(E) :=
  id: totrans-2767
  prefs: []
  type: TYPE_NORMAL
- en: fapply E; auto_star.
  id: totrans-2768
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sapply" "*" constr(E) :=
  id: totrans-2769
  prefs: []
  type: TYPE_NORMAL
- en: sapply E; auto_star.
  id: totrans-2770
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "logic" constr(E) :=
  id: totrans-2771
  prefs: []
  type: TYPE_NORMAL
- en: logic_base E ltac:(fun _ ⇒ auto_star).
  id: totrans-2772
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intros_all" "*" :=
  id: totrans-2773
  prefs: []
  type: TYPE_NORMAL
- en: intros_all; auto_star.
  id: totrans-2774
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "*" :=
  id: totrans-2775
  prefs: []
  type: TYPE_NORMAL
- en: unfolds; auto_star.
  id: totrans-2776
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "*" constr(F[1]) :=
  id: totrans-2777
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1]; auto_star.
  id: totrans-2778
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "*" constr(F[1]) "," constr(F[2]) :=
  id: totrans-2779
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2]; auto_star.
  id: totrans-2780
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "*" constr(F[1]) "," constr(F[2]) "," constr(F[3])
    :=
  id: totrans-2781
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2], F[3]; auto_star.
  id: totrans-2782
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "unfolds" "*" constr(F[1]) "," constr(F[2]) "," constr(F[3])
    ","
  id: totrans-2783
  prefs: []
  type: TYPE_NORMAL
- en: constr(F[4]) :=
  id: totrans-2784
  prefs: []
  type: TYPE_NORMAL
- en: unfolds F[1], F[2], F[3], F[4]; auto_star.
  id: totrans-2785
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simple" "*" :=
  id: totrans-2786
  prefs: []
  type: TYPE_NORMAL
- en: simpl; auto_star.
  id: totrans-2787
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simple" "*" "in" hyp(H) :=
  id: totrans-2788
  prefs: []
  type: TYPE_NORMAL
- en: simpl in H; auto_star.
  id: totrans-2789
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "simpls" "*" :=
  id: totrans-2790
  prefs: []
  type: TYPE_NORMAL
- en: simpls; auto_star.
  id: totrans-2791
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hnfs" "*" :=
  id: totrans-2792
  prefs: []
  type: TYPE_NORMAL
- en: hnfs; auto_star.
  id: totrans-2793
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hnfs" "*" "in" hyp(H) :=
  id: totrans-2794
  prefs: []
  type: TYPE_NORMAL
- en: hnf in H; auto_star.
  id: totrans-2795
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "substs" "*" :=
  id: totrans-2796
  prefs: []
  type: TYPE_NORMAL
- en: substs; auto_star.
  id: totrans-2797
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intro_hyp" "*" hyp(H) :=
  id: totrans-2798
  prefs: []
  type: TYPE_NORMAL
- en: subst_hyp H; auto_star.
  id: totrans-2799
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "intro_subst" "*" :=
  id: totrans-2800
  prefs: []
  type: TYPE_NORMAL
- en: intro_subst; auto_star.
  id: totrans-2801
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst_eq" "*" constr(E) :=
  id: totrans-2802
  prefs: []
  type: TYPE_NORMAL
- en: subst_eq E; auto_star.
  id: totrans-2803
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "*" constr(E) :=
  id: totrans-2804
  prefs: []
  type: TYPE_NORMAL
- en: rewrite E; auto_star.
  id: totrans-2805
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "*" "←" constr(E) :=
  id: totrans-2806
  prefs: []
  type: TYPE_NORMAL
- en: rewrite ← E; auto_star.
  id: totrans-2807
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "*" constr(E) "in" hyp(H) :=
  id: totrans-2808
  prefs: []
  type: TYPE_NORMAL
- en: rewrite E in H; auto_star.
  id: totrans-2809
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite" "*" "←" constr(E) "in" hyp(H) :=
  id: totrans-2810
  prefs: []
  type: TYPE_NORMAL
- en: rewrite ← E in H; auto_star.
  id: totrans-2811
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" constr(E) :=
  id: totrans-2812
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E; auto_star.
  id: totrans-2813
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" constr(E) "in" hyp(H):=
  id: totrans-2814
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E in H; auto_star.
  id: totrans-2815
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" constr(E) "in" "*":=
  id: totrans-2816
  prefs: []
  type: TYPE_NORMAL
- en: rewrites E in *; auto_star.
  id: totrans-2817
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" "←" constr(E) :=
  id: totrans-2818
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E; auto_star.
  id: totrans-2819
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" "←" constr(E) "in" hyp(H):=
  id: totrans-2820
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E in H; auto_star.
  id: totrans-2821
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrites" "*" "←" constr(E) "in" "*":=
  id: totrans-2822
  prefs: []
  type: TYPE_NORMAL
- en: rewrites ← E in *; auto_star.
  id: totrans-2823
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" constr(E) :=
  id: totrans-2824
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E; auto_star.
  id: totrans-2825
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" "←" constr(E) :=
  id: totrans-2826
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E; auto_star.
  id: totrans-2827
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" constr(E) "in" ident(H) :=
  id: totrans-2828
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E in H; auto_star.
  id: totrans-2829
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" "←" constr(E) "in" ident(H) :=
  id: totrans-2830
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E in H; auto_star.
  id: totrans-2831
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" constr(E) "in" "*" :=
  id: totrans-2832
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all E in *; auto_star.
  id: totrans-2833
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "rewrite_all" "*" "←" constr(E) "in" "*" :=
  id: totrans-2834
  prefs: []
  type: TYPE_NORMAL
- en: rewrite_all ← E in *; auto_star.
  id: totrans-2835
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" constr(E) :=
  id: totrans-2836
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E; auto_star.
  id: totrans-2837
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" "←" constr(E) :=
  id: totrans-2838
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E; auto_star.
  id: totrans-2839
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" constr(E) "in" hyp(H) :=
  id: totrans-2840
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E; auto_star.
  id: totrans-2841
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" "←" constr(E) "in" hyp(H) :=
  id: totrans-2842
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E; auto_star.
  id: totrans-2843
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" constr(E) "in" "*" :=
  id: totrans-2844
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite E in *; auto_tilde.
  id: totrans-2845
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "asserts_rewrite" "*" "←" constr(E) "in" "*" :=
  id: totrans-2846
  prefs: []
  type: TYPE_NORMAL
- en: asserts_rewrite ← E in *; auto_tilde.
  id: totrans-2847
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "*" constr(E) :=
  id: totrans-2848
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite E; auto_star.
  id: totrans-2849
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "*" "←" constr(E) :=
  id: totrans-2850
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite ← E; auto_star.
  id: totrans-2851
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "*" constr(E) "in" hyp(H) :=
  id: totrans-2852
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite E in H; auto_star.
  id: totrans-2853
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cuts_rewrite" "*" "←" constr(E) "in" hyp(H) :=
  id: totrans-2854
  prefs: []
  type: TYPE_NORMAL
- en: cuts_rewrite ← E in H; auto_star.
  id: totrans-2855
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "erewrite" "*" constr(E) :=
  id: totrans-2856
  prefs: []
  type: TYPE_NORMAL
- en: erewrite E; auto_star.
  id: totrans-2857
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fequal" "*" :=
  id: totrans-2858
  prefs: []
  type: TYPE_NORMAL
- en: fequal; auto_star.
  id: totrans-2859
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "fequals" "*" :=
  id: totrans-2860
  prefs: []
  type: TYPE_NORMAL
- en: fequals; auto_star.
  id: totrans-2861
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "pi_rewrite" "*" constr(E) :=
  id: totrans-2862
  prefs: []
  type: TYPE_NORMAL
- en: pi_rewrite E; auto_star.
  id: totrans-2863
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "pi_rewrite" "*" constr(E) "in" hyp(H) :=
  id: totrans-2864
  prefs: []
  type: TYPE_NORMAL
- en: pi_rewrite E in H; auto_star.
  id: totrans-2865
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "invert" "*" hyp(H) :=
  id: totrans-2866
  prefs: []
  type: TYPE_NORMAL
- en: invert H; auto_star.
  id: totrans-2867
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "*" hyp(H) :=
  id: totrans-2868
  prefs: []
  type: TYPE_NORMAL
- en: inverts H; auto_star.
  id: totrans-2869
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inverts" "*" hyp(E) "as" :=
  id: totrans-2870
  prefs: []
  type: TYPE_NORMAL
- en: inverts E as; auto_star.
  id: totrans-2871
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "injects" "*" hyp(H) :=
  id: totrans-2872
  prefs: []
  type: TYPE_NORMAL
- en: injects H; auto_star.
  id: totrans-2873
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "inversions" "*" hyp(H) :=
  id: totrans-2874
  prefs: []
  type: TYPE_NORMAL
- en: inversions H; auto_star.
  id: totrans-2875
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases" "*" constr(E) "as" ident(H) :=
  id: totrans-2876
  prefs: []
  type: TYPE_NORMAL
- en: cases E as H; auto_star.
  id: totrans-2877
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases" "*" constr(E) :=
  id: totrans-2878
  prefs: []
  type: TYPE_NORMAL
- en: cases E; auto_star.
  id: totrans-2879
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "*" :=
  id: totrans-2880
  prefs: []
  type: TYPE_NORMAL
- en: case_if; auto_star.
  id: totrans-2881
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_ifs" "*" :=
  id: totrans-2882
  prefs: []
  type: TYPE_NORMAL
- en: case_ifs; auto_star.
  id: totrans-2883
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "case_if" "*" "in" hyp(H) :=
  id: totrans-2884
  prefs: []
  type: TYPE_NORMAL
- en: case_if in H; auto_star.
  id: totrans-2885
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "*" :=
  id: totrans-2886
  prefs: []
  type: TYPE_NORMAL
- en: cases_if; auto_star.
  id: totrans-2887
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if" "*" "in" hyp(H) :=
  id: totrans-2888
  prefs: []
  type: TYPE_NORMAL
- en: cases_if in H; auto_star.
  id: totrans-2889
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "*" :=
  id: totrans-2890
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if; auto_star.
  id: totrans-2891
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_if" "*" "in" hyp(H) :=
  id: totrans-2892
  prefs: []
  type: TYPE_NORMAL
- en: destruct_if in H; auto_star.
  id: totrans-2893
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destruct_head_match" "*" :=
  id: totrans-2894
  prefs: []
  type: TYPE_NORMAL
- en: destruct_head_match; auto_star.
  id: totrans-2895
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases'" "*" constr(E) "as" ident(H) :=
  id: totrans-2896
  prefs: []
  type: TYPE_NORMAL
- en: cases' E as H; auto_star.
  id: totrans-2897
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases'" "*" constr(E) :=
  id: totrans-2898
  prefs: []
  type: TYPE_NORMAL
- en: cases' E; auto_star.
  id: totrans-2899
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" "*" "as" ident(H) :=
  id: totrans-2900
  prefs: []
  type: TYPE_NORMAL
- en: cases_if' as H; auto_star.
  id: totrans-2901
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "cases_if'" "*" :=
  id: totrans-2902
  prefs: []
  type: TYPE_NORMAL
- en: cases_if'; auto_star.
  id: totrans-2903
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "decides_equality" "*" :=
  id: totrans-2904
  prefs: []
  type: TYPE_NORMAL
- en: decides_equality; auto_star.
  id: totrans-2905
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "*" :=
  id: totrans-2906
  prefs: []
  type: TYPE_NORMAL
- en: iff; auto_star.
  id: totrans-2907
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "iff" "*" simple_intropattern(I) :=
  id: totrans-2908
  prefs: []
  type: TYPE_NORMAL
- en: iff I; auto_star.
  id: totrans-2909
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits" "*" :=
  id: totrans-2910
  prefs: []
  type: TYPE_NORMAL
- en: splits; auto_star.
  id: totrans-2911
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits" "*" constr(N) :=
  id: totrans-2912
  prefs: []
  type: TYPE_NORMAL
- en: splits N; auto_star.
  id: totrans-2913
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "splits_all" "*" :=
  id: totrans-2914
  prefs: []
  type: TYPE_NORMAL
- en: splits_all; auto_star.
  id: totrans-2915
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destructs" "*" constr(T) :=
  id: totrans-2916
  prefs: []
  type: TYPE_NORMAL
- en: destructs T; auto_star.
  id: totrans-2917
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "destructs" "*" constr(N) constr(T) :=
  id: totrans-2918
  prefs: []
  type: TYPE_NORMAL
- en: destructs N T; auto_star.
  id: totrans-2919
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branch" "*" constr(N) :=
  id: totrans-2920
  prefs: []
  type: TYPE_NORMAL
- en: branch N; auto_star.
  id: totrans-2921
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branch" "*" constr(K) "of" constr(N) :=
  id: totrans-2922
  prefs: []
  type: TYPE_NORMAL
- en: branch K of N; auto_star.
  id: totrans-2923
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branches" "*" constr(T) :=
  id: totrans-2924
  prefs: []
  type: TYPE_NORMAL
- en: branches T; auto_star.
  id: totrans-2925
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "branches" "*" constr(N) constr(T) :=
  id: totrans-2926
  prefs: []
  type: TYPE_NORMAL
- en: branches N T; auto_star.
  id: totrans-2927
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" :=
  id: totrans-2928
  prefs: []
  type: TYPE_NORMAL
- en: ∃; auto_star.
  id: totrans-2929
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists___" "*" :=
  id: totrans-2930
  prefs: []
  type: TYPE_NORMAL
- en: exists___; auto_star.
  id: totrans-2931
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) :=
  id: totrans-2932
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]; auto_star.
  id: totrans-2933
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) constr(T[2]) :=
  id: totrans-2934
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2]; auto_star.
  id: totrans-2935
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) constr(T[2]) constr(T[3]) :=
  id: totrans-2936
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3]; auto_star.
  id: totrans-2937
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
    :=
  id: totrans-2938
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4]; auto_star.
  id: totrans-2939
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  id: totrans-2940
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) :=
  id: totrans-2941
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4] T[5]; auto_star.
  id: totrans-2942
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "exists" "*" constr(T[1]) constr(T[2]) constr(T[3]) constr(T[4])
  id: totrans-2943
  prefs: []
  type: TYPE_NORMAL
- en: constr(T[5]) constr(T[6]) :=
  id: totrans-2944
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1] T[2] T[3] T[4] T[5] T[6]; auto_star.
  id: totrans-2945
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-2946
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  id: totrans-2947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-2948
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  id: totrans-2949
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: (* Implementation *)
  id: totrans-2950
  prefs: []
  type: TYPE_NORMAL
- en: Definition ltac_something (P:Type) (e:P) := e.
  id: totrans-2951
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'Something'" :=
  id: totrans-2952
  prefs: []
  type: TYPE_NORMAL
- en: (@ltac_something _ _).
  id: totrans-2953
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma ltac_something_eq : ∀(e:Type),'
  id: totrans-2954
  prefs: []
  type: TYPE_NORMAL
- en: e = (@ltac_something _ e).
  id: totrans-2955
  prefs: []
  type: TYPE_NORMAL
- en: Proof using. auto. Qed.
  id: totrans-2956
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma ltac_something_hide : ∀(e:Type),'
  id: totrans-2957
  prefs: []
  type: TYPE_NORMAL
- en: e → (@ltac_something _ e).
  id: totrans-2958
  prefs: []
  type: TYPE_NORMAL
- en: Proof using. auto. Qed.
  id: totrans-2959
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma ltac_something_show : ∀(e:Type),'
  id: totrans-2960
  prefs: []
  type: TYPE_NORMAL
- en: (@ltac_something _ e) → e.
  id: totrans-2961
  prefs: []
  type: TYPE_NORMAL
- en: Proof using. auto. Qed.
  id: totrans-2962
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  id: totrans-2963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: Tactic Notation "hide_def" hyp(x) :=
  id: totrans-2964
  prefs: []
  type: TYPE_NORMAL
- en: let x' := constr:(x) in
  id: totrans-2965
  prefs: []
  type: TYPE_NORMAL
- en: let T := eval unfold x in x' in
  id: totrans-2966
  prefs: []
  type: TYPE_NORMAL
- en: change T with (@ltac_something _ T) in x.
  id: totrans-2967
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_def" hyp(x) :=
  id: totrans-2968
  prefs: []
  type: TYPE_NORMAL
- en: let x' := constr:(x) in
  id: totrans-2969
  prefs: []
  type: TYPE_NORMAL
- en: let U := eval unfold x in x' in
  id: totrans-2970
  prefs: []
  type: TYPE_NORMAL
- en: match U with @ltac_something _ ?T ⇒
  id: totrans-2971
  prefs: []
  type: TYPE_NORMAL
- en: change U with T in x end.
  id: totrans-2972
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  id: totrans-2973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: Tactic Notation "show_def" :=
  id: totrans-2974
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something.
  id: totrans-2975
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_def" "in" hyp(H) :=
  id: totrans-2976
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something in H.
  id: totrans-2977
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_def" "in" "*" :=
  id: totrans-2978
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something in *.
  id: totrans-2979
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  id: totrans-2980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: Tactic Notation "hide_defs" :=
  id: totrans-2981
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with H := ?T ⊢ _ ⇒
  id: totrans-2982
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  id: totrans-2983
  prefs: []
  type: TYPE_NORMAL
- en: '| @ltac_something _ _ ⇒ fail 1'
  id: totrans-2984
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ change T with (@ltac_something _ T) in H'
  id: totrans-2985
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-2986
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-2987
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_defs" :=
  id: totrans-2988
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with H := (@ltac_something _ ?T) ⊢ _ ⇒
  id: totrans-2989
  prefs: []
  type: TYPE_NORMAL
- en: change (@ltac_something _ T) with T in H end.
  id: totrans-2990
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  id: totrans-2991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Tactic Notation "show_hyp" hyp(H) :=
  id: totrans-2992
  prefs: []
  type: TYPE_NORMAL
- en: apply ltac_something_show in H.
  id: totrans-2993
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hide_hyp" hyp(H) :=
  id: totrans-2994
  prefs: []
  type: TYPE_NORMAL
- en: apply ltac_something_hide in H.
  id: totrans-2995
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  id: totrans-2996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Tactic Notation "show_hyps" :=
  id: totrans-2997
  prefs: []
  type: TYPE_NORMAL
- en: repeat match goal with
  id: totrans-2998
  prefs: []
  type: TYPE_NORMAL
- en: 'H: @ltac_something _ _ ⊢ _ ⇒ show_hyp H end.'
  id: totrans-2999
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hide_hyps" :=
  id: totrans-3000
  prefs: []
  type: TYPE_NORMAL
- en: 'repeat match goal with H: ?T ⊢ _ ⇒'
  id: totrans-3001
  prefs: []
  type: TYPE_NORMAL
- en: match type of T with
  id: totrans-3002
  prefs: []
  type: TYPE_NORMAL
- en: '| Prop ⇒'
  id: totrans-3003
  prefs: []
  type: TYPE_NORMAL
- en: match T with
  id: totrans-3004
  prefs: []
  type: TYPE_NORMAL
- en: '| @ltac_something _ _ ⇒ fail 2'
  id: totrans-3005
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ hide_hyp H'
  id: totrans-3006
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-3007
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ fail 1'
  id: totrans-3008
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-3009
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-3010
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  id: totrans-3011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Tactic Notation "hide" hyp(H) :=
  id: totrans-3012
  prefs: []
  type: TYPE_NORMAL
- en: first [hide_def H | hide_hyp H].
  id: totrans-3013
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show" hyp(H) :=
  id: totrans-3014
  prefs: []
  type: TYPE_NORMAL
- en: first [show_def H | show_hyp H].
  id: totrans-3015
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hide_all" :=
  id: totrans-3016
  prefs: []
  type: TYPE_NORMAL
- en: hide_hyps; hide_defs.
  id: totrans-3017
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_all" :=
  id: totrans-3018
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something in *.
  id: totrans-3019
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  id: totrans-3020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: Tactic Notation "hide_term" constr(E) :=
  id: totrans-3021
  prefs: []
  type: TYPE_NORMAL
- en: change E with (@ltac_something _ E).
  id: totrans-3022
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_term" constr(E) :=
  id: totrans-3023
  prefs: []
  type: TYPE_NORMAL
- en: change (@ltac_something _ E) with E.
  id: totrans-3024
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_term" :=
  id: totrans-3025
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something.
  id: totrans-3026
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "hide_term" constr(E) "in" hyp(H) :=
  id: totrans-3027
  prefs: []
  type: TYPE_NORMAL
- en: change E with (@ltac_something _ E) in H.
  id: totrans-3028
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_term" constr(E) "in" hyp(H) :=
  id: totrans-3029
  prefs: []
  type: TYPE_NORMAL
- en: change (@ltac_something _ E) with E in H.
  id: totrans-3030
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_term" "in" hyp(H) :=
  id: totrans-3031
  prefs: []
  type: TYPE_NORMAL
- en: unfold ltac_something in H.
  id: totrans-3032
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  id: totrans-3033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: (* todo: change "unfolds" *)
  id: totrans-3034
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_unfold" constr(R[1]) :=
  id: totrans-3035
  prefs: []
  type: TYPE_NORMAL
- en: unfold R[1]; show_def.
  id: totrans-3036
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "show_unfold" constr(R[1]) "," constr(R[2]) :=
  id: totrans-3037
  prefs: []
  type: TYPE_NORMAL
- en: unfold R[1], R[2]; show_def.
  id: totrans-3038
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-3039
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  id: totrans-3040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: Ltac sort_tactic :=
  id: totrans-3041
  prefs: []
  type: TYPE_NORMAL
- en: 'try match goal with H: ?T ⊢ _ ⇒'
  id: totrans-3042
  prefs: []
  type: TYPE_NORMAL
- en: match type of T with Prop ⇒
  id: totrans-3043
  prefs: []
  type: TYPE_NORMAL
- en: generalizes H; (try sort_tactic); intro
  id: totrans-3044
  prefs: []
  type: TYPE_NORMAL
- en: end end.
  id: totrans-3045
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "sort" :=
  id: totrans-3046
  prefs: []
  type: TYPE_NORMAL
- en: sort_tactic.
  id: totrans-3047
  prefs: []
  type: TYPE_NORMAL
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-3048
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  id: totrans-3049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: Tactic Notation "clears" ident(X[1]) :=
  id: totrans-3050
  prefs: []
  type: TYPE_NORMAL
- en: let rec doit _ :=
  id: totrans-3051
  prefs: []
  type: TYPE_NORMAL
- en: match goal with
  id: totrans-3052
  prefs: []
  type: TYPE_NORMAL
- en: '| H:context[X[1]] ⊢ _ ⇒ clear H; try (doit tt)'
  id: totrans-3053
  prefs: []
  type: TYPE_NORMAL
- en: '| _ ⇒ clear X[1]'
  id: totrans-3054
  prefs: []
  type: TYPE_NORMAL
- en: end in doit tt.
  id: totrans-3055
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" ident(X[1]) ident(X[2]) :=
  id: totrans-3056
  prefs: []
  type: TYPE_NORMAL
- en: clears X[1]; clears X[2].
  id: totrans-3057
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" ident(X[1]) ident(X[2]) ident(X[3]) :=
  id: totrans-3058
  prefs: []
  type: TYPE_NORMAL
- en: clears X[1]; clears X[2]; clears X[3].
  id: totrans-3059
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4]) :=
  id: totrans-3060
  prefs: []
  type: TYPE_NORMAL
- en: clears X[1]; clears X[2]; clears X[3]; clears X[4].
  id: totrans-3061
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4])
  id: totrans-3062
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[5]) :=
  id: totrans-3063
  prefs: []
  type: TYPE_NORMAL
- en: clears X[1]; clears X[2]; clears X[3]; clears X[4]; clears X[5].
  id: totrans-3064
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" ident(X[1]) ident(X[2]) ident(X[3]) ident(X[4])
  id: totrans-3065
  prefs: []
  type: TYPE_NORMAL
- en: ident(X[5]) ident(X[6]) :=
  id: totrans-3066
  prefs: []
  type: TYPE_NORMAL
- en: clears X[1]; clears X[2]; clears X[3]; clears X[4]; clears X[5]; clears X[6].
  id: totrans-3067
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  id: totrans-3068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: (* todo: rename to clears_var ? *)
  id: totrans-3069
  prefs: []
  type: TYPE_NORMAL
- en: Ltac clears_tactic :=
  id: totrans-3070
  prefs: []
  type: TYPE_NORMAL
- en: 'match goal with H: ?T ⊢ _ ⇒'
  id: totrans-3071
  prefs: []
  type: TYPE_NORMAL
- en: match type of T with
  id: totrans-3072
  prefs: []
  type: TYPE_NORMAL
- en: '| Prop ⇒ generalizes H; (try clears_tactic); intro'
  id: totrans-3073
  prefs: []
  type: TYPE_NORMAL
- en: '| ?TT ⇒ clear H; (try clears_tactic)'
  id: totrans-3074
  prefs: []
  type: TYPE_NORMAL
- en: '| ?TT ⇒ generalizes H; (try clears_tactic); intro'
  id: totrans-3075
  prefs: []
  type: TYPE_NORMAL
- en: end end.
  id: totrans-3076
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears" :=
  id: totrans-3077
  prefs: []
  type: TYPE_NORMAL
- en: clears_tactic.
  id: totrans-3078
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  id: totrans-3079
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Ltac clears_or_generalizes_all_core :=
  id: totrans-3080
  prefs: []
  type: TYPE_NORMAL
- en: 'repeat match goal with H: _ ⊢ _ ⇒'
  id: totrans-3081
  prefs: []
  type: TYPE_NORMAL
- en: first [ clear H | generalizes H] end.
  id: totrans-3082
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_all" :=
  id: totrans-3083
  prefs: []
  type: TYPE_NORMAL
- en: generalize ltac_mark;
  id: totrans-3084
  prefs: []
  type: TYPE_NORMAL
- en: clears_or_generalizes_all_core;
  id: totrans-3085
  prefs: []
  type: TYPE_NORMAL
- en: intro_until_mark.
  id: totrans-3086
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  id: totrans-3087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Ltac clears_but_core cont :=
  id: totrans-3088
  prefs: []
  type: TYPE_NORMAL
- en: generalize ltac_mark;
  id: totrans-3089
  prefs: []
  type: TYPE_NORMAL
- en: cont tt;
  id: totrans-3090
  prefs: []
  type: TYPE_NORMAL
- en: clears_or_generalizes_all_core;
  id: totrans-3091
  prefs: []
  type: TYPE_NORMAL
- en: intro_until_mark.
  id: totrans-3092
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" :=
  id: totrans-3093
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ idtac).
  id: totrans-3094
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" ident(H[1]) :=
  id: totrans-3095
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ gen H[1]).
  id: totrans-3096
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" ident(H[1]) ident(H[2]) :=
  id: totrans-3097
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ gen H[1] H[2]).
  id: totrans-3098
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" ident(H[1]) ident(H[2]) ident(H[3]) :=
  id: totrans-3099
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ gen H[1] H[2] H[3]).
  id: totrans-3100
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" ident(H[1]) ident(H[2]) ident(H[3]) ident(H[4])
    :=
  id: totrans-3101
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ gen H[1] H[2] H[3] H[4]).
  id: totrans-3102
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_but" ident(H[1]) ident(H[2]) ident(H[3]) ident(H[4])
    ident(H[5]) :=
  id: totrans-3103
  prefs: []
  type: TYPE_NORMAL
- en: clears_but_core ltac:(fun _ ⇒ gen H[1] H[2] H[3] H[4] H[5]).
  id: totrans-3104
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma demo_clears_all_and_clears_but :'
  id: totrans-3105
  prefs: []
  type: TYPE_NORMAL
- en: ∀x y:nat, y < 2 → x = x → x ≥ 2 → x < 3 → True.
  id: totrans-3106
  prefs: []
  type: TYPE_NORMAL
- en: Proof using.
  id: totrans-3107
  prefs: []
  type: TYPE_NORMAL
- en: introv M[1] M[2] M[3]. dup 6.
  id: totrans-3108
  prefs: []
  type: TYPE_NORMAL
- en: (* clears_all clears all hypotheses. *)
  id: totrans-3109
  prefs: []
  type: TYPE_NORMAL
- en: clears_all. auto.
  id: totrans-3110
  prefs: []
  type: TYPE_NORMAL
- en: (* clears_but H clears all but H *)
  id: totrans-3111
  prefs: []
  type: TYPE_NORMAL
- en: clears_but M[3]. auto.
  id: totrans-3112
  prefs: []
  type: TYPE_NORMAL
- en: clears_but y. auto.
  id: totrans-3113
  prefs: []
  type: TYPE_NORMAL
- en: clears_but x. auto.
  id: totrans-3114
  prefs: []
  type: TYPE_NORMAL
- en: clears_but M[2] M[3]. auto.
  id: totrans-3115
  prefs: []
  type: TYPE_NORMAL
- en: clears_but x y. auto.
  id: totrans-3116
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-3117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  id: totrans-3118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: Tactic Notation "clears_last" :=
  id: totrans-3119
  prefs: []
  type: TYPE_NORMAL
- en: 'match goal with H: ?T ⊢ _ ⇒ clear H end.'
  id: totrans-3120
  prefs: []
  type: TYPE_NORMAL
- en: Ltac clears_last_base N :=
  id: totrans-3121
  prefs: []
  type: TYPE_NORMAL
- en: match nat_from_number N with
  id: totrans-3122
  prefs: []
  type: TYPE_NORMAL
- en: '| 0 ⇒ idtac'
  id: totrans-3123
  prefs: []
  type: TYPE_NORMAL
- en: '| S ?p ⇒ clears_last; clears_last_base p'
  id: totrans-3124
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-3125
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "clears_last" constr(N) :=
  id: totrans-3126
  prefs: []
  type: TYPE_NORMAL
- en: clears_last_base N.
  id: totrans-3127
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-3128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  id: totrans-3129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: (* ---------------------------------------------------------------------- *)
  id: totrans-3130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  id: totrans-3131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Ltac skip_with_existential :=
  id: totrans-3132
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?G ⇒
  id: totrans-3133
  prefs: []
  type: TYPE_NORMAL
- en: let H := fresh in evar(H:G); eexact H end.
  id: totrans-3134
  prefs: []
  type: TYPE_NORMAL
- en: (* TO BE DEPRECATED: *)
  id: totrans-3135
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameter skip_axiom : False.'
  id: totrans-3136
  prefs: []
  type: TYPE_NORMAL
- en: '(* To obtain a safe development, change to skip_axiom : True *)'
  id: totrans-3137
  prefs: []
  type: TYPE_NORMAL
- en: Ltac skip_with_axiom :=
  id: totrans-3138
  prefs: []
  type: TYPE_NORMAL
- en: elimtype False; apply skip_axiom.
  id: totrans-3139
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" :=
  id: totrans-3140
  prefs: []
  type: TYPE_NORMAL
- en: skip_with_axiom.
  id: totrans-3141
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip'" :=
  id: totrans-3142
  prefs: []
  type: TYPE_NORMAL
- en: skip_with_existential.
  id: totrans-3143
  prefs: []
  type: TYPE_NORMAL
- en: (* SF DOES NOT NEED THIS (* For backward compatibility *) Tactic Notation "admit" := 
      skip. *)
  id: totrans-3144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  id: totrans-3145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Tactic Notation "demo" :=
  id: totrans-3146
  prefs: []
  type: TYPE_NORMAL
- en: skip.
  id: totrans-3147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  id: totrans-3148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Tactic Notation "skip" simple_intropattern(I) ":" constr(T) :=
  id: totrans-3149
  prefs: []
  type: TYPE_NORMAL
- en: 'asserts I: T; [ skip | ].'
  id: totrans-3150
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" ":" constr(T) :=
  id: totrans-3151
  prefs: []
  type: TYPE_NORMAL
- en: 'let H := fresh in skip H: T.'
  id: totrans-3152
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" "¬" ":" constr(T) :=
  id: totrans-3153
  prefs: []
  type: TYPE_NORMAL
- en: 'skip: T; auto_tilde.'
  id: totrans-3154
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" "*" ":" constr(T) :=
  id: totrans-3155
  prefs: []
  type: TYPE_NORMAL
- en: 'skip: T; auto_star.'
  id: totrans-3156
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" simple_intropattern(I[1])
  id: totrans-3157
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) ":" constr(T) :=
  id: totrans-3158
  prefs: []
  type: TYPE_NORMAL
- en: 'skip [I[1] I[2]]: T.'
  id: totrans-3159
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" simple_intropattern(I[1])
  id: totrans-3160
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3]) ":" constr(T) :=
  id: totrans-3161
  prefs: []
  type: TYPE_NORMAL
- en: 'skip [I[1] [I[2] I[3]]]: T.'
  id: totrans-3162
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" simple_intropattern(I[1])
  id: totrans-3163
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  id: totrans-3164
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) ":" constr(T) :=
  id: totrans-3165
  prefs: []
  type: TYPE_NORMAL
- en: 'skip [I[1] [I[2] [I[3] I[4]]]]: T.'
  id: totrans-3166
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" simple_intropattern(I[1])
  id: totrans-3167
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  id: totrans-3168
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) simple_intropattern(I[5]) ":" constr(T) :=
  id: totrans-3169
  prefs: []
  type: TYPE_NORMAL
- en: 'skip [I[1] [I[2] [I[3] [I[4] I[5]]]]]: T.'
  id: totrans-3170
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip" simple_intropattern(I[1])
  id: totrans-3171
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[2]) simple_intropattern(I[3])
  id: totrans-3172
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[4]) simple_intropattern(I[5])
  id: totrans-3173
  prefs: []
  type: TYPE_NORMAL
- en: simple_intropattern(I[6]) ":" constr(T) :=
  id: totrans-3174
  prefs: []
  type: TYPE_NORMAL
- en: 'skip [I[1] [I[2] [I[3] [I[4] [I[5] I[6]]]]]]: T.'
  id: totrans-3175
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip_asserts" simple_intropattern(I) ":" constr(T) :=
  id: totrans-3176
  prefs: []
  type: TYPE_NORMAL
- en: 'skip I: T.'
  id: totrans-3177
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip_asserts" ":" constr(T) :=
  id: totrans-3178
  prefs: []
  type: TYPE_NORMAL
- en: 'skip: T.'
  id: totrans-3179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  id: totrans-3180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: Tactic Notation "skip_cuts" constr(T) :=
  id: totrans-3181
  prefs: []
  type: TYPE_NORMAL
- en: 'cuts: T; [ skip | ].'
  id: totrans-3182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  id: totrans-3183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Tactic Notation "skip_goal" ident(H) :=
  id: totrans-3184
  prefs: []
  type: TYPE_NORMAL
- en: 'match goal with ⊢ ?G ⇒ skip H: G end.'
  id: totrans-3185
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip_goal" :=
  id: totrans-3186
  prefs: []
  type: TYPE_NORMAL
- en: let IH := fresh "IH" in skip_goal IH.
  id: totrans-3187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  id: totrans-3188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Tactic Notation "skip_rewrite" constr(T) :=
  id: totrans-3189
  prefs: []
  type: TYPE_NORMAL
- en: 'let M := fresh in skip_asserts M: T; rewrite M; clear M.'
  id: totrans-3190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  id: totrans-3191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Tactic Notation "skip_rewrite" constr(T) "in" hyp(H) :=
  id: totrans-3192
  prefs: []
  type: TYPE_NORMAL
- en: 'let M := fresh in skip_asserts M: T; rewrite M in H; clear M.'
  id: totrans-3193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  id: totrans-3194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: Tactic Notation "skip_rewrite_all" constr(T) :=
  id: totrans-3195
  prefs: []
  type: TYPE_NORMAL
- en: 'let M := fresh in skip_asserts M: T; rewrite_all M; clear M.'
  id: totrans-3196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  id: totrans-3197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: (* TODO: deprecated *)
  id: totrans-3198
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip_induction" constr(E) :=
  id: totrans-3199
  prefs: []
  type: TYPE_NORMAL
- en: let IH := fresh "IH" in skip_goal IH; destruct E.
  id: totrans-3200
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "skip_induction" constr(E) "as" simple_intropattern(I) :=
  id: totrans-3201
  prefs: []
  type: TYPE_NORMAL
- en: let IH := fresh "IH" in skip_goal IH; destruct E as I.
  id: totrans-3202
  prefs: []
  type: TYPE_NORMAL
- en: (* ********************************************************************** *)
  id: totrans-3203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  id: totrans-3204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Module LibTacticsCompatibility.
  id: totrans-3205
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "apply" "*" constr(H) :=
  id: totrans-3206
  prefs: []
  type: TYPE_NORMAL
- en: sapply H; auto_star.
  id: totrans-3207
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "subst" "*" :=
  id: totrans-3208
  prefs: []
  type: TYPE_NORMAL
- en: subst; auto_star.
  id: totrans-3209
  prefs: []
  type: TYPE_NORMAL
- en: End LibTacticsCompatibility.
  id: totrans-3210
  prefs: []
  type: TYPE_NORMAL
- en: Open Scope nat_scope.
  id: totrans-3211
  prefs: []
  type: TYPE_NORMAL
- en: (* /DROP *)
  id: totrans-3212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  id: totrans-3213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
