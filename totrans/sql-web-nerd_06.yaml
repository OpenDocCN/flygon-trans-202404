- en: '| [![The Saw.  Fulton Fish Market.  Manhattan 1994 (pre burning).](../Images/27f73bd7fa3383f6ef99cd42b80c0d5e.jpg)](/http://philip.greenspun.com/images/pcd0451/fulton-fish-market-65.tcl)
    |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| [![电锯。富尔顿鱼市。曼哈顿1994年（火灾前）。](../Images/27f73bd7fa3383f6ef99cd42b80c0d5e.jpg)](/http://philip.greenspun.com/images/pcd0451/fulton-fish-market-65.tcl)
    |'
- en: Transactions
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事务
- en: part of [SQL for Web Nerds](index.html) by [Philip Greenspun](http://philip.greenspun.com/)
    | [![Handbills.  Manhattan 1995.](../Images/b6b10ad5dad53695b546bc2b274f6573.jpg)](/http://philip.greenspun.com/images/pcd1253/handbills-38.tcl)
    |
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[Web极客的SQL](index.html)的一部分，由[Philip Greenspun](http://philip.greenspun.com/)编写
    | [![传单。1995年曼哈顿。](../Images/b6b10ad5dad53695b546bc2b274f6573.jpg)](/http://philip.greenspun.com/images/pcd1253/handbills-38.tcl)
    |'
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'In the introduction we covered some examples of inserting data into a database
    by typing at SQL*Plus:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍中，我们讨论了通过在SQL*Plus中输入数据来将数据插入数据库的一些示例：
- en: '[PRE0]'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Generally, this is not how it is done. As a programmer, you write code that
    gets executed every time a user submits a discussion forum posting or classified
    ad. The structure of the SQL statement remains fixed but not the string literals
    after the `values`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，这并不是操作的方式。作为一个程序员，你编写的代码会在用户提交讨论论坛帖子或分类广告时执行。SQL语句的结构保持不变，但`values`后面的字符串文字不同。
- en: 'The simplest and most direct interface to a relational database involves a
    procedural program in C, Java, Lisp, Perl, or Tcl putting together a string of
    SQL that is then sent to to the RDBMS. Here''s how the ArsDigita Community System
    constructs a new entry in the clickthrough log:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 访问关系数据库的最简单和最直接的接口涉及到使用C、Java、Lisp、Perl或Tcl等过程式程序将一串SQL组合成字符串，然后发送到RDBMS。以下是ArsDigita社区系统如何构建点击日志中的新条目的方式：
- en: '[PRE1]'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The INSERT statement adds one row, filling in the four list columns. Two of
    the values come from local variables set within the Web server, `$local_url` and
    `$foreign_url`. Because these are strings, they must be surrounded by single quotes.
    One of the values is dynamic and comes straight from Oracle: `trunc(sysdate)`.
    Recall that the `date` data type in Oracle is precise to the second. We only want
    one of these rows per day of the year and hence truncate the date to midnight.
    Finally, as this is the first clickthrough of the day, we insert a constant value
    of 1 for `click_count`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT语句添加一行，填充四个列表列。其中两个值来自于Web服务器中设置的本地变量，`$local_url`和`$foreign_url`。因为这些是字符串，所以必须用单引号括起来。其中一个值是动态的，直接来自Oracle：`trunc(sysdate)`。回想一下，在Oracle中，`date`数据类型精确到秒。我们只想要每年的这一天的一个这样的行，因此将日期截断到午夜。最后，因为这是当天的第一次点击，我们为`click_count`插入一个常量值1。
- en: Atomicity
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原子性
- en: Each SQL statement executes as an atomic transaction. For example, suppose that
    you were to attempt to purge some old data with
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个SQL语句都作为一个原子事务执行。例如，假设你尝试清除一些旧数据
- en: '[PRE2]'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (delete clickthrough records more than 120 days old) and that 3500 rows in `clickthrough_log`
    are older than 120 days. If your computer failed halfway through the execution
    of this DELETE, i.e., before the transaction committed, you would find that none
    of the rows had been deleted. Either all 3500 rows will disappear or none will.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: （删除超过120天的点击记录），而`clickthrough_log`中有3500行记录超过120天。如果你的电脑在执行这个DELETE的过程中半途而废，即在事务提交之前失败了，你会发现没有任何一行被删除。要么所有的3500行都会消失，要么一个也不会消失。
- en: 'More interestingly, you can wrap a transaction around multiple SQL statements.
    For example, when a user is editing a comment, the ArsDigita Community System
    keeps a record of what was there before:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 更有趣的是，你可以将一个事务包裹在多个SQL语句周围。例如，当用户正在编辑评论时，ArsDigita社区系统会记录之前的内容是什么：
- en: '[PRE3]'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is generally referred to in the database industry as *auditing*. The database
    itself is used to keep track of what has been changed and by whom.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这在数据库行业通常被称为*审计*。数据库本身用于跟踪被更改的内容以及由谁更改的。
- en: Let's look at these sections piece by piece. We're looking at a Tcl program
    calling AOLserver API procedures when it wants to talk to Oracle. We've configured
    the system to reverse the normal Oracle world order in which everything is within
    a transaction unless otherwise committed. The `begin transaction` and `end transaction`
    statements never get through to Oracle; they are merely instructions to our Oracle
    driver to flip Oracle out and then back into autocommit mode.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个部分地看一下这些部分。我们正在查看一个Tcl程序，在想与Oracle通信时调用AOLserver API过程。我们已经配置系统以颠倒正常的Oracle世界顺序，即除非另有提交，否则一切都在事务中。`begin
    transaction`和`end transaction`语句永远不会传递到Oracle；它们只是给我们的Oracle驱动的指令，让Oracle进入然后退出自动提交模式。
- en: The transaction wrapper is imposed around two SQL statements. The first statement
    inserts a row into `general_comments_audit`. We could simply query the `general_comments`
    table from Tcl and then use the returned data to create a standard-looking INSERT.
    However, if what you're actually doing is moving data from one place within the
    RDBMS to another, it is extremely bad taste to drag it all the way out to an application
    program and then stuff it back in. Much better to use the "INSERT ... SELECT"
    form.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 事务包装器被强加在两个SQL语句周围。第一个语句将一行插入`general_comments_audit`。我们可以简单地从Tcl查询`general_comments`表，然后使用返回的数据创建一个标准的INSERT。但是，如果您实际上要做的是将数据从RDBMS内的一个地方移动到另一个地方，那么将其全部拖到应用程序中再塞回去是极其不合适的。最好使用"INSERT
    ... SELECT"形式。
- en: 'Note that two of the columns we''re querying from `general_comments` don''t
    exist in the table: `sysdate` and `''[ns_conn peeraddr]''`. It is legal in SQL
    to put function calls or constants in your select list, just as you saw at the
    beginning of [the Queries chapter](queries.html) where we discussed Oracle''s
    one-row system table: `dual`. To refresh your memory:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们从`general_comments`查询的两列在表中不存在：`sysdate`和`'[ns_conn peeraddr]'`。在SQL中，将函数调用或常量放在选择列表中是合法的，就像您在[查询章节](queries.html)开头讨论Oracle的单行系统表`dual`时看到的那样。为了提醒您：
- en: '[PRE4]'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can compute multiple values in a single query:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在单个查询中计算多个值：
- en: '[PRE5]'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This approach is useful in the transaction above, where we combine information
    from a table with constants and function calls. Here''s a simpler example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在上面的事务中很有用，其中我们将表中的信息与常量和函数调用结合在一起。这里是一个更简单的例子：
- en: '[PRE6]'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s get back to our comment editing transaction and look at the basic structure:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的评论编辑事务并查看基本结构：
- en: open a transaction
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开启一个事务
- en: insert into an audit table whatever comes back from a SELECT statement on the
    comment table
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将从评论表的SELECT语句返回的内容插入到审核表中
- en: update the comment table
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新评论表
- en: close the transaction
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭事务
- en: Suppose that something goes wrong during the INSERT. The tablespace in which
    the audit table resides is full and it isn't possible to add a row. Putting the
    INSERT and UPDATE in the same RDBMS transactions ensures that if there is a problem
    with one, the other won't be applied to the database.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在INSERT过程中出现问题。存储审核表的表空间已满，无法添加行。将INSERT和UPDATE放在同一个RDBMS事务中确保如果一个出现问题，另一个不会应用于数据库。
- en: Consistency
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一致性
- en: 'Suppose that we''ve looked at a message on the bulletin board and decide that
    its content is so offensive we wish to delete the user from our system:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们查看了公告板上的一条消息，并决定其内容如此令人反感，我们希望从系统中删除该用户：
- en: '[PRE7]'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Oracle has stopped us from deleting user 39685 because to do so would leave
    the database in an inconsistent state. Here''s the definition of the bboard table:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle阻止我们删除用户39685，因为这样做会使数据库处于不一致状态。这是bboard表的定义：
- en: '[PRE8]'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `user_id` column is constrained to be not null. Furthermore, the value in
    this column must correspond to some row in the `users` table (`references users`).
    By asking Oracle to delete the author of msg_id 000KWj from the `users` table
    before we deleted all of his or her postings from the `bboard` table, we were
    asking Oracle to leave the RDBMS in an inconsistent state.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`user_id`列被限制为非空。此外，此列中的值必须对应于`users`表中的某一行（`引用 users`）。在我们删除`users`表中msg_id
    000KWj的作者之前，我们要求Oracle将RDBMS保持在不一致的状态。'
- en: Mutual Exclusion
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 互斥
- en: '[![Bachelor''s Walk.  Dublin, Ireland.](../Images/ba74d5ba720ede1cf514340381203653.jpg)](/http://philip.greenspun.com/images/pcd1120/dublin-bachelors-walk-11.tcl)
    When you have multiple simultaneously executing copies of the same program, you
    have to think about *mutual exclusion*. If a program has to'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[![爱尔兰都柏林的学士步行街。](../Images/ba74d5ba720ede1cf514340381203653.jpg)](/http://philip.greenspun.com/images/pcd1120/dublin-bachelors-walk-11.tcl)
    当您同时执行多个副本相同程序时，您必须考虑*互斥*。如果一个程序必须'
- en: read a value from the database
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中读取一个值
- en: perform a computation based on that value
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据该值执行计算
- en: update the value in the database based on the computation
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据计算更新数据库中的值
- en: Then you want to make sure only one copy of the program is executing at a time
    through this segment.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您希望通过此段确保一次只执行一个程序副本。
- en: The /bboard module of the ArsDigita Community System has to do this. The sequence
    is
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ArsDigita社区系统的/bboard模块必须执行此操作。顺序是
- en: read the last message ID from the `msg_id_generator` table
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`msg_id_generator`表中读取最后一个消息ID
- en: increment the message ID with a bizarre collection of Tcl scripts
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一组奇怪的Tcl脚本增加消息ID
- en: update the `last_msg_id` column in the `msg_id_generator` table
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`msg_id_generator`表中的`last_msg_id`列
- en: 'First, anything having to do with locks only makes sense when the three operations
    are grouped together in a transaction. Second, to avoid deadlocks a transaction
    must acquire all the resources (including locks) that it needs at the start of
    the transaction. A SELECT in Oracle does not acquire any locks but a SELECT ..
    FOR UPDATE does. Here''s the beginning of the transaction that inserts a message
    into the `bboard` table (from /bboard/insert-msg.tcl):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，与锁有关的任何事情只有在这三个操作在事务中组合在一起时才有意义。其次，为了避免死锁，事务必须在事务开始时获取所有需要的资源（包括锁）。Oracle中的SELECT不会获取任何锁，但SELECT
    .. FOR UPDATE会。这是向`bboard`表插入消息的事务的开始（来自/bboard/insert-msg.tcl）：
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Mutual Exclusion (the Big Hammer)
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 互斥（大锤）
- en: The `for update` clause isn't a panacea. For example, in the Action Network
    (described in [Chapter 16 of Philip and Alex's Guide to Web Publishing](/panda/better-living)),
    we need to make sure that a double-clicking user doesn't generate duplicate FAXes
    to politicians. The test to see if the user has already responded is
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`for update`子句并非万能之策。例如，在行动网络（在[菲利普和亚历克斯网络出版指南第16章](/panda/better-living)中描述）中，我们需要确保双击用户不会向政客生成重复的传真。检查用户是否已经回应的测试是'
- en: '[PRE10]'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By default, Oracle locks one row at a time and doesn't want you to throw a FOR
    UPDATE clause into a SELECT COUNT(*). The implication of that would be Oracle
    recording locks on every row in the table. Much more efficient is simply to start
    the transaction with
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Oracle一次锁定一行，并不希望您在SELECT COUNT(*)中加入FOR UPDATE子句。这将导致Oracle在表中的每一行记录锁定。更有效的方法是简单地开始事务
- en: '[PRE11]'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is a big hammer and you don't want to hold a table lock for more than an
    instant. So the structure of a page that gets a table lock should be
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个大锤，您不希望持有表锁超过瞬间。因此，获得表锁的页面结构应该是
- en: open a transaction
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开启一个事务
- en: lock table
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定表
- en: select count(*)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择计数(*)
- en: if the count was 0, insert a row to record the fact that the user has responded
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果计数为0，则插入一行记录用户已回应的事实
- en: commit the transaction (releases the table lock)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交事务（释放表锁）
- en: proceed with the rest of the script
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继续执行剩余的脚本
- en: '...'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '...'
- en: What if I just want some unique numbers?
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果我只想要一些唯一的数字怎么办？
- en: 'Does it really have to be this hard? What if you just want some unique integers,
    each of which will be used as a primary key? Consider a table to hold news items
    for a Web site:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 真的需要这么难吗？如果您只想要一些唯一的整数，每个都将用作主键？考虑一个用于保存网站新闻项目的表：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You might think you could use the `title` column as a key, but consider the
    following articles:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为可以使用`title`列作为键，但考虑以下文章：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It would seem that, at least as far as headlines are concerned, little of what
    is reported is truly new. Could we add
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来，至少就头条新闻而言，报道的内容很少是真正新的。我们能否添加
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE14]'
- en: at the end of our table definition? Absolutely. But keying by title and date
    would result in some unwieldy URLs for editing or approving news articles. If
    your site allows public suggestions, you might find submissions from multiple
    users colliding. If you accept comments on news articles, a standard feature of
    the ArsDigita Community System, each comment must reference a news article. You'd
    have to be sure to update both the comments table and the news table if you needed
    to correct a typo in the `title` column or changed the `release_date`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的表定义的末尾？绝对是的。但是按标题和日期进行键入将导致一些笨拙的URL用于编辑或批准新闻文章。如果您的网站允许公共建议，您可能会发现来自多个用户的提交发生冲突。如果您允许对新闻文章发表评论，这是ArsDigita社区系统的一个标准功能，每条评论必须引用一篇新闻文章。如果您需要更正`title`列中的拼写错误或更改`release_date`，您必须确保同时更新评论表和新闻表。
- en: 'The traditional database design that gets around all of these problems is the
    use of a generated key. If you''ve been annoyed by having to carry around your
    student ID at MIT or your patient ID at a hospital, now you understand the reason
    why: the programmers are using generated keys and making their lives a bit easier
    by exposing this part of their software''s innards.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的数据库设计可以避开所有这些问题，就是使用生成的键。如果您因为不得不携带MIT的学生ID或医院的患者ID而感到烦恼，现在您明白了原因：程序员们正在使用生成的键，并通过暴露软件内部的这部分使他们的生活变得更轻松。
- en: 'Here''s how the news module of the ArsDigita Community System works, in an
    excerpt from [http://software.arsdigita.com/www/doc/sql/news.sql](http://software.arsdigita.com/www/doc/sql/news.sql):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是ArsDigita社区系统的新闻模块的工作原理，摘自[http://software.arsdigita.com/www/doc/sql/news.sql](http://software.arsdigita.com/www/doc/sql/news.sql)：
- en: '[PRE15]'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We're taking advantage of the nonstandard but very useful Oracle *sequence*
    facility. In almost any Oracle SQL statement, you can ask for a sequence's current
    value or next value.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在利用非标准但非常有用的Oracle *sequence* 功能。在几乎任何Oracle SQL语句中，你都可以请求序列的当前值或下一个值。
- en: '[PRE16]'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Oops! Looks like we can't ask for the current value until we've asked for at
    least one key in our current session with Oracle.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕！看起来在我们当前的会话中至少请求了一个密钥之前，我们不能请求当前值。
- en: '[PRE17]'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can use the sequence generator directly in an insert, e.g.,
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接在插入中使用序列生成器，例如，
- en: '[PRE18]'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Background on this story: [http://philip.greenspun.com/school/tuition-free-mit.html](http://philip.greenspun.com/school/tuition-free-mit.html)*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*这个故事的背景：[http://philip.greenspun.com/school/tuition-free-mit.html](http://philip.greenspun.com/school/tuition-free-mit.html)*'
- en: 'In the ArsDigita Community System implementation, the `news_id` is actually
    generated in /news/post-new-2.tcl:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在ArsDigita社区系统的实现中，`news_id` 实际上是在/news/post-new-2.tcl中生成的：
- en: '[PRE19]'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This way the page that actually does the database insert, /news/post-new-3.tcl,
    can be sure when the user has inadvertently hit submit twice:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这样实际执行数据库插入的页面，/news/post-new-3.tcl，可以确定用户何时不小心点击了两次提交：
- en: '[PRE20]'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In our experience, the standard technique of generating the key at the same
    time as the insert leads to a lot of duplicate information in the database.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的经验，在插入时生成密钥的标准技术会导致数据库中有大量重复信息。
- en: Sequence Caveats
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 序列注意事项
- en: Oracle sequences are optimized for speed. Hence they offer the minimum guarantees
    that Oracle thinks are required for primary key generation and no more.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle序列被优化为速度。因此，它们提供了Oracle认为对于主键生成所需的最小保证，没有更多。
- en: If you ask for a few nextvals and roll back your transaction, the sequence will
    not be rolled back.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你请求一些nextvals并回滚你的事务，序列不会回滚。
- en: You can't rely on sequence values to be, uh, sequential. They will be unique.
    They will be monotonically increasing. But there might be gaps. The gaps arise
    because Oracle pulls, by default, 20 sequence values into memory and records those
    values as used on disk. This makes nextval very fast since the new value need
    only be marked use in RAM and not on disk. But suppose that someone pulls the
    plug on your database server after only two sequence values have been handed out.
    If your database administrator and system administrator are working well together,
    the computer will come back to life running Oracle. But there will be a gap of
    18 values in the sequence (e.g., from 2023 to 2041). That's because Oracle recorded
    20 values used on disk and only handed out 2.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能依赖序列值是连续的。它们将是唯一的。它们将单调递增。但可能会有间隙。这些间隙是因为Oracle默认将20个序列值加载到内存中，并将这些值记录为在磁盘上使用。这使得nextval非常快，因为新值只需在RAM中标记为使用，而不是在磁盘上。但是假设有人在你的数据库服务器仅分发了两个序列值后拔掉了插头。如果你的数据库管理员和系统管理员合作得很好，计算机将重新运行Oracle。但序列中会有18个值的间隙（例如，从2023到2041）。这是因为Oracle记录了在磁盘上使用的20个值，但只分发了2个。
- en: More
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多
- en: Oracle8 Server Application Developer's Guide, [Controlling Transactions](http://www.oradoc.com/keyword/controlling_transactions)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle8服务器应用程序开发人员指南，[控制事务](http://www.oradoc.com/keyword/controlling_transactions)
- en: Orace8 Server SQL Reference, [CREATE SEQUENCE section](http://www.oradoc.com/keyword/createsequence)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle8服务器SQL参考，[CREATE SEQUENCE部分](http://www.oradoc.com/keyword/createsequence)
- en: 'Next: [Triggers](triggers.html)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步：[触发器](triggers.html)
- en: '* * *'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[philg@mit.edu](http://philip.greenspun.com/)[Add a comment](/comments/add?page_id=3462)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[philg@mit.edu](http://philip.greenspun.com/)[添加评论](/comments/add?page_id=3462)'
