["```\n    Receive( &serverTid, eventId );\n    Reply( serverTid, ... );\n    notmsg.type = NOT_RCV\n\n    ```", "```\n    FOREVER {\n      notmsg.data = AwaitEvent( eventid );\n      Send( serverTid, notmsg, notmsg );  // byte is to be transmitted\n    }\n    ```", "```\n    // queues & fifos\n    notifierPid = Create( notifier );     //Should notifier code name be hard coded?\n    Send( notifierTid, MyTid( ), ... );   //On return notifier is known to be okay\n    RegisterAs( );                        //On return requests can begin.\n\n    ```", "```\n    FOREVER {\n      requesterTid = Receive( request, notmsg );\n      switch ( notmsg.type ) {\n      case NOT_RCV:\n        Reply( requesterTid, notmsg );\n        enqueue( rcvfifo, notmsg );\n        if ( ! empty( rcvQ ) ) Reply( dequeue( rcvQ ), dequeue( rcvfifo ) );\n        break;\n      case NOT_XMIT:\n        enqueue( xmitQ, requesterTid );\n        if ( ! empty( xmitfifo ) ) Reply( dequeue( xmitQ ), dequeue( xmitfifo ) );\n        break;\n      case CLIENT_RCV:\n        enqueue( rcvQ, requesterTid );\n        if ( !empty( rcvfifo ) Reply( dequeue( rcvQ ), dequeue( rcvfifo ) );\n        break;\n      case CLIENT_XMIT:\n        Reply( requesterTid, ... );\n        enqueue ( xmitfifo, data );\n        if ( ! empty( xmitQ ) ) Reply( dequeue( xmitQ ), dequeue( xmitfifo ) );\n        break;\n      default:\n        ASSERT( \"Never executed because notifiers and clients are bug-free.\" )\n      }\n    }\n    ```", "```\n    Receive( &courierTid, ... );\n    Reply( courierTid, ... );\n\n    ```", "```\n    FOREVER {\n      Receive( &courierTid, byte );\n      load( UART..., byte )\n      data = AwaitEvent( eventid );\n      Reply( courierTid, NOT_XMIT,  );\n    }\n    ```", "```\n    Receive( &serverTid, notifierTid );\n    Send( notifierTid, ... );\n    Reply( serverTid );\n    ```", "```\n    FOREVER {\n      Send( notifierTid, notmsg, ack );\n      Send( serverTid, notmsg, ack );\n    }\n    ```", "```\n    // queues & fifos\n    notifierTid = Create( notifier );\n    courierTid = Create( courier );\n    Send( courierTid, notifierTid, ... ); // On return courier & notifier are known to be okay\n    RegisterAs( );                        //On return client requests will begin.\n\n    ```", "```\n    FOREVER {\n      requesterTid = Receive( request, {request-type, data} );\n      switch ( request-type ) {\n      case NOT_XMIT:\n        enqueue( requesterTid, xmitQ )\n        if ( ! empty( xmitFifo ) ) Reply( dequeue( xmitQ ), dequeue( xmitFifo ) );\n        break;\n      case CLIENT_XMIT:\n        Reply( requesterTid, notmsg );\n        enqueue ( xmitFifo, notmsg );\n        if ( ! empty( xmitQ ) ) Reply( dequeue( xmitQ ), dequeue( xmitFifo ) );\n        break;\n      default:\n        ASSERT( \"...\" );\n      }\n    }\n    ```", "```\n    Receive( &warhouseTid, ... );\n    Reply( warhouseTid, ... );\n    msg.type = NOT_RCV;\n\n    ```", "```\n    FOREVER {\n      msg.data = AwaitEvent( eventid );\n      Send( warehouseTid, msg, msg );\n    }\n    ```", "```\n    // data structures\n    Receive( &courierTid, notifierTid, ... );\n    Send( notifierTid, ... );\n    Reply( courierTid, ... );\n    ```", "```\n    FOREVER {\n       Receive( &requester, msg );\n       switch( msg.type ) {\n       case NOT_RCV:\n          Reply( requester, msg );\n          // insert data into package\n          enqueue( pkgQ, package );\n          if ( !empty( courQ ) ) { dequeue( courQ ), extract( pkgQ ) };\n          break;\n       case COUR_RCV:\n          enqueue( courQ, requester );\n          if( !empty( pkgQ ) ) Reply( dequeue( courQ ), dequeue( pkgQ ) );\n          break;\n       default:\n         ASSERT( \"This didn't happen because my kernel is bug-free.\" );\n       }\n    }\n    ```", "```\n    Receive( &serverTid, {notifierTid, warehouseTid} ... );\n    Send( warehouseTid, notifierTid, ... );\n    Reply( serverTid );\n    ```", "```\n    FOREVER {\n      Send( warehouseTid, pkg );\n      Send( serverTid, pkg );\n    }\n    ```", "```\n    // queues & fifos\n    notifierTid = Create( notifier );\n    warehouseTid = Create( warehouse );\n    courierTid = Create( courier );\n    Send( courierTid, notifierTid, ... ); // On return courier, warehouse & notifier are known to be okay\n    RegisterAs( );                        // On return client requests can begin.\n\n    ```", "```\n    FOREVER {\n      Receive( &requesterTid, pkg );\n      switch ( pkg.type ) {\n      case COUR_RCV:\n        Reply( requesterTid, pkg );\n        enqueue( pkgQ, pkg );\n        if ( !empty( clientQ ) ) Reply( dequeue( clientQ ), dequeue( pkgQ ) );\n        break;\n      case CLIENT_RCV:\n        enqueue( clientQ, requester );\n        if ( !empty( pkgQ ) ) Reply( dequeue( clientQ ), dequeue( pkgQ ) );\n        break;\n      default:\n        ASSERT( \"This didn't happen.\" );\n      }\n    }\n    ```"]