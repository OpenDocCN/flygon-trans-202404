- en: TypeScriptは何ではないか？
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/overview/typescript-is-not-that](https://typescriptbook.jp/overview/typescript-is-not-that)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 多くの開発者がTypeScriptを高く評価しています。そのような中、誤解の上にTypeScriptを過度に高評価する人もいます。TypeScriptも魔法の杖ではありません。本稿では、TypeScriptが何を解決してくれないのかを見ていきます。TypeScriptでできないことを無理にやらせようとしても、その努力は無駄になりますから、これを理解することは重要です。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 実行時の高速化・省メモリ化に影響しない[​](#実行時の高速化省メモリ化に影響しない "実行時の高速化・省メモリ化に影響しない への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: しばしば、TypeScriptとJavaScriptを比較する話の中で、次のような言説が見られます。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptはJavaScriptより高速に実行できる
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptはJavaScriptよりメモリ消費量が少ない
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: また逆に次のように心配されることもあります。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptはJavaScriptで書くより低速になるのでは？
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptはJavaScriptよりメモリ消費量が大きいのでは？
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 結論を言うと、TypeScriptの実行時パフォーマンスはJavaScriptと同じです。これを理解するには、次の2つの前提をおさえておく必要がります。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptのランタイムはない。
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TypeScriptコンパイラは最適化しない。
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TypeScriptランタイムはない[​](#typescriptランタイムはない "TypeScriptランタイムはない への直接リンク")
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScriptにはランタイムがありません。どういうことかというと、TypeScriptを直接実行するエンジンがないということです。TypeScriptを開発しているMicrosoftのブラウザMicrosoft
    Edgeであっても、TypeScriptは実行できません。サーバーのNode.jsもそうです^([1](#fn-1))。TypeScriptで書いたコードを実行するには、一度JavaScriptコードに変換する必要があります。そのため、TypeScriptのパフォーマンスは、コンパイル後のJavaScriptがどうなっているかで決まるわけです。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptコンパイラは最適化しない[​](#typescriptコンパイラは最適化しない "TypeScriptコンパイラは最適化しない への直接リンク")
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 一般的に「コンパイラ」には、次の3つの仕事があると言われます。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: ソースコードを解析し、問題点をチェックする
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ソースコードを別の言語に変換する
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 最適化する
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 実行速度が速くなるようにする
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 少ないメモリで動くようにする
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 少ない電力で済むようにする
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 実行ファイルのサイズを小さくする
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: このうち、TypeScriptコンパイラがするのは上の2つです。3つ目の最適化はしません。TypeScriptコンパイラは、基本的に型に関する部分を消すだけで、それ以外の部分はほぼそのままJavaScriptに変換します。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: たとえば、次のようなTypeScriptコードをコンパイルすると、
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 次のJavaScriptコードが生成されます。型注釈の`number`が消されただけです。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: この`60 * 60 * 24`の式は静的に計算できるものです。コンパイル時に計算して、次のようなJavaScriptを生成しておけば、実行時の余計な計算が不要になります。高速化に寄与します。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 上のような最適化は技術的には可能なはずです。しかし、TypeScriptはこうした最適化は原則的に行いません。TypeScriptコンパイラがするのは基本的に型を外すだけです。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 両者のパフォーマンスは基本的に同等[​](#両者のパフォーマンスは基本的に同等 "両者のパフォーマンスは基本的に同等 への直接リンク")
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScriptには次の特徴があることを見てきました。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptのランタイムはない。
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TypeScriptコンパイラは最適化しない。
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: この2つの特徴から、まったく同じロジックのコードをTypeScriptとJavaScriptで書いて比較したとき、その間には注意が必要なほどのパフォーマンスの違いはないと考えて差し支えありません^([2](#fn-2))。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptの仕様バグは修正しない[​](#javascriptの仕様バグは修正しない "JavaScriptの仕様バグは修正しない への直接リンク")
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScriptには元々バグだったものが仕様に変わった例があります。たとえば、値の型を調べる[typeof演算子](/reference/values-types-variables/typeof-operator)は、`null`を渡すと`"object"`が返ります。これはバグと考えられていましたが、後方互換性のため修正されることなく仕様になりました。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: TypeScriptでも、こうした仕様バグは修正されていません。なぜかというと、TypeScriptはあくまでJavaScriptに型をプラスした言語というスタンスだからです。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 学びをシェアする
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: TypeScriptが解決しないこと
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: ・JavaScriptの実行時パフォーマンス改善
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: ・JSの仕様バグの解決
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 『サバイバルTypeScript』より
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[この内容をツイートする](https://twitter.com/intent/tweet?text=TypeScript%E3%81%8C%E8%A7%A3%E6%B1%BA%E3%81%97%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8%0A%0A%E3%83%BBJavaScript%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E6%94%B9%E5%96%84%0A%E3%83%BBJS%E3%81%AE%E4%BB%95%E6%A7%98%E3%83%90%E3%82%B0%E3%81%AE%E8%A7%A3%E6%B1%BA%0A%0A%E3%80%8E%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABTypeScript%E3%80%8F%E3%82%88%E3%82%8A)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptのランタイムを謳うDenoというサーバー環境があります。このDenoであっても、内部的にTypeScriptをJavaScriptにコンパイルし、それをJavaScriptエンジン上で実行しています。[↩](#fnref-1)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 厳密に言うと、コンパイラオプション`target`を`es3`(古いJavaScript)に指定するなどで、「単に型を消すだけ」のコンパイルではなくなる場合もあるので常に同等が保証されているわけではありません。[↩](#fnref-2)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 厳密に言うと、コンパイラオプション`target`を`es3`(古いJavaScript)に指定するなどで、「単に型を消すだけ」のコンパイルではなくなる場合もあるので常に同等が保証されているわけではありません。[↩](#fnref-2)
