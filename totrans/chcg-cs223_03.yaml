- en: Introduction to FRP in Elm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Elm中的FRP简介
- en: 'Say that we wanted to write some JavaScript (pseudo)code to keep track of whether
    the user is currently pressing the mouse button. We might start by defining a
    mutable variable, and then installing two "callback" functions that get invoked
    by the JavaScript run-time system when the `mousedown` and `mouseup` events are
    triggered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要编写一些JavaScript（伪代码）来跟踪用户当前是否按下了鼠标按钮。我们可能会先定义一个可变变量，然后安装两个“回调”函数，当JavaScript运行时系统触发`mousedown`和`mouseup`事件时，这两个函数会被调用：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '(Note: The point of this example is to make plain the structure of managing
    the state, so we will avoid the natural urge to refactor.)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: （注意：这个示例的目的是清晰地展示状态管理的结构，所以我们将避免自然的重构冲动。）
- en: This is quite a roundabout way of implementing what can be described simply
    as "a boolean that is `true` only when the mouse button is being pressed." Matters
    quickly become more complicated when managing state that depends on multiple events
    and multiple intermediate computations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常绕弯的方法，可以简单描述为“仅当鼠标按钮被按下时为`true`的布尔值”。当管理依赖于多个事件和多个中间计算的状态时，情况很快变得更加复杂。
- en: '*Functional reactive programming (FRP)* is a paradigm that allows *time-varying*
    values (such as `isDown`) to be implemented directly using the building blocks
    of functional programming, rather than resorting to using mutation and callbacks
    as above.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数式响应式编程（FRP）*是一种范式，它允许直接使用函数式编程的构建块来实现*时变*值（如`isDown`），而不是像上面那样使用突变和回调。'
- en: '[What is a Signal?](http://elm-lang.org/learn/What-is-FRP.elm)'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[什么是Signal？](http://elm-lang.org/learn/What-is-FRP.elm)'
- en: '"A *signal* is a value that changes over time." In Elm, [`Mouse.isDown`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Mouse)
    is a primitive signal provided by the language that has type `Signal Bool`. We
    get to treat `isDown` as if it always refers to the "current" value, without worrying
    about the low-level details of how it gets updated.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “*信号*是随时间变化的值。”在Elm中，[`Mouse.isDown`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Mouse)是语言提供的一个原始信号，类型为`Signal
    Bool`。我们可以将`isDown`视为始终指向“当前”值，而不必担心它如何被更新的底层细节。
- en: Better still, we can *abstract over* and *compose* signals using the building
    blocks of functional programing. For example, we can use
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的是，我们可以使用函数式编程的构建块*抽象*和*组合*信号。例如，我们可以使用
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: to "lift" the pure function `not`, which negates `Bool`s, to operate on the
    current value of `isDown` as follows
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将纯函数`not`，即对`Bool`进行取反的操作，应用到当前值`isDown`上，实现如下
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'or, more clearly:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 或者更清晰地说：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The result is a signal of boolean values (of type `Signal Bool`) that updates
    whenever the `Mouse.isDown` signal updates. How cool is that?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个布尔值信号（类型为`Signal Bool`），当`Mouse.isDown`信号更新时，它也会更新。这是多么酷？
- en: As the name suggests, the behavior and type of `Signal.map` is analogous to
    mapping functions that operate on other kinds of data — [`List.map`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/List),
    [`String.map`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/String),
    [`Maybe.map`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Maybe),
    [`Dict.map`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Dict), etc.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名称所示，`Signal.map`的行为和类型类似于操作其他类型数据的映射函数 — [`List.map`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/List)、[`String.map`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/String)、[`Maybe.map`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Maybe)、[`Dict.map`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Dict)
    等。
- en: Rendering to HTML
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染到HTML
- en: Writing to an HTML window is the primary *effect* that Elm programs can affect.
    The `main` definition in an Elm module specifies what to render, and this something
    takes the form of an `Element` value, a type defined in the [`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element)
    library.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML窗口中写入是Elm程序的主要*效果*。Elm模块中的`main`定义指定了要渲染的内容，这个内容采用了[`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element)库中定义的`Element`值的形式。
- en: The `elm-repl` comes in handy when testing out programs that do not render anything
    to HTML (notice that we did not have to define `main` in those cases). But now
    you will want to try out these examples in the browser — either by compiling Elm
    source files with `elm-make` (see [HW0](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/assignments/HW0.html)
    for a refresher); using the live editor [online](http://elm-lang.org/try); or
    building the [Elm website](https://github.com/elm-lang/elm-lang.org) locally so
    that you can run your own live editor without an Intnet connection.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试不会呈现任何HTML的程序时，`elm-repl`非常方便（注意在这些情况下我们没有必要定义`main`）。但现在你可能想要在浏览器中尝试这些示例了
    —— 通过使用`elm-make`编译Elm源文件（参见[HW0](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/assignments/HW0.html)进行复习）；使用[在线](http://elm-lang.org/try)的实时编辑器；或者本地构建[Elm网站](https://github.com/elm-lang/elm-lang.org)，这样你就可以在没有互联网连接的情况下运行自己的实时编辑器。
- en: 'A first example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个例子：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In addition to providing many functions for manipulating text, the [`Text`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Text)
    library provides `plainText` to convert a `String` to an `Element`, which is the
    type of value we need to provide `main` in order to render. Notice also that `import`
    statements are used to load names of types (e.g. `Element`) as well as values
    (e.g. `plainText`) into scope.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供许多用于操作文本的函数之外，[`Text`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Text)库还提供了`plainText`来将`String`转换为`Element`，这是我们需要在`main`中提供的值类型，以便进行呈现。还请注意，`导入`语句用于将类型的名称（例如`Element`）以及值（例如`plainText`）加载到作用域中。
- en: In fact, because we will often want to change what is rendered over time, a
    `main` definition is actually a *signal* of `Element`s (i.e. of type `Signal Element`).
    When `main` is defined to be an expression `e` of type `Element` rather than `Signal
    Element`, it is interpreted as signal `Signal.constant e`, where the function
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，因为我们经常会想要随着时间的推移改变呈现的内容，所以`main`定义实际上是`Element`的*信号*（即类型为`Signal Element`的信号）。当将`main`定义为类型为`Element`而不是`Signal
    Element`的表达式`e`时，它将被解释为信号`Signal.constant e`，其中函数
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'turns a pure value into a `Signal`, one that is constant. So we could have
    written the more explicit:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个纯值转换成`Signal`，一个常量信号。所以我们也可以写得更加明确：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that we''ve introduced ourselves to the world, let''s write something slightly
    more interesting to the window, say, whether or not the mouse button is currently
    being pressed. For this, we make use of the `toString` function in [`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经向世界介绍了自己，让我们写一些稍微有趣的东西到窗口中，比如，当前鼠标按钮是否正在被按下。为此，我们利用了[`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)中的`toString`函数：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Try this out and click around. You can also play with [the official IsDown example](http://elm-lang.org/edit/examples/Reactive/IsDown.elm).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一下并点击周围。你也可以玩一下[官方的IsDown示例](http://elm-lang.org/edit/examples/Reactive/IsDown.elm)。
- en: A Word About Imports
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关于导入的说明
- en: Notice that most libraries, even pretty common ones, require explicit `import`s.
    I think this will be especially handy when learning the language, because it will
    require carefully understanding the structure and purposes of the libraries.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，大多数库，甚至是非常常见的库，都需要明确的`导入`。我认为这在学习语言时会特别方便，因为它需要仔细理解库的结构和目的。
- en: Also notice that, in the example above, I've chosen to mix and match qualified
    and unqualified `imports`. As you develop experience writing Elm code, you will
    find a style of `import`s that works for you. This will depend on factors such
    as how many functions you plan to use from a given module — I don't know about
    you, but I'm planning to go crazy with the [`Mouse`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Mouse)
    library and I don't want to list all of its definitions explictly — as well as
    how unique imported names are — `plainText` is much less likely than, say, `map`
    to be defined by other imported modules, so using `plainText` without qualification
    seems like a good choice to me.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 还请注意，在上面的例子中，我选择了混合使用合格和非合格的`导入`。随着你编写Elm代码的经验增加，你会发现一种适合自己的`导入`风格。这将取决于诸如你计划从给定模块中使用多少函数之类的因素
    —— 我不知道你，但我打算在[`Mouse`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Mouse)库中疯狂使用很多函数，而且我不想明确列出它的所有定义
    —— 以及导入的名称有多独特 —— `plainText`远不如，比如说，`map`容易被其他导入的模块定义，因此在不加限定地使用`plainText`似乎对我来说是一个不错的选择。
- en: A Word About Function Composition
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关于函数组合的一点说明
- en: Depending on your prior experience and tastes, you may prefer to scrap the anonymous
    lambda in the `main` definition above in favor of one that emphasizes function
    composition, such as
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的先前经验和喜好，你可能更喜欢放弃上面`main`定义中的匿名lambda，而是选择一个更强调函数组合的lambda，例如
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: or
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: or
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: or
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: All of these definitions are equivalent, so choose a style that you like best
    and that fits well within the code around it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些定义是等效的，所以选择你最喜欢的风格，并且能很好地融入周围的代码。
- en: Recall that [`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)
    defines these infix operators. Take a look also at [`Text.asText`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Text),
    which is similar to `(plainText << toString)`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)
    定义了这些中缀运算符。同时也看看 [`Text.asText`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Text)，它类似于
    `(plainText << toString)`。'
- en: Folding From the Past
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从过去折叠
- en: Let's now consider a slightly more interesting example, to count and display
    the number of times the user has clicked a mouse button. There is no such signal
    built in to Elm, so we will define our own in terms of the signals that are provided.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑一个稍微有趣的例子，来计算并显示用户点击鼠标按钮的次数。Elm 中没有这样的信号内建，因此我们将根据提供的信号定义自己的信号。
- en: One option is to build on the mouse click event, which is separate but closely
    related to the mouse-down event we have seen. For this, Elm provides the primitive
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一种选择是建立在鼠标点击事件的基础上，这与我们见过的鼠标按下事件是分开但密切相关的。为此，Elm 提供了原始
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: which produces the dummy "unit" value (written `()`) of the dummy "unit" type
    (also written `()`) for every mouse button click. Releasing a button does not
    trigger an update to this signal.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它为每次鼠标按钮点击产生虚拟的“单位”值（写作 `()`），对应于虚拟的“单位”类型（也写作 `()`）。释放按钮不会触发对这个信号的更新。
- en: Basic Model-View-Controller Architecture
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基本的模型-视图-控制器架构
- en: In order to build a `Signal` of `Element`s to render, it is often convenient
    to factor the work intro three parts.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建一个`Signal`来渲染`Element`，通常将工作分为三个部分会很方便。
- en: The *model* keeps track of all the information that is needed to produce the
    desired result. We may be sloppy and sometimes (actually, often) refer to the
    model as the *state*, but let us not be tricked into thinking there is anything
    mutable at the source level.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*模型* 跟踪产生所需结果所需的所有信息。我们可能有时会懒惰，有时（实际上经常）将模型称为*状态*，但我们不要被误导以为在源级别有任何可变的东西。'
- en: 'In order to display the number of clicks, all we need to maintain is an integer
    counter:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了显示点击次数，我们只需维护一个整数计数器：
- en: '[PRE13]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The use of the `alias` keyword defines `State` to be completely synonymous with
    `Int`; it is simply a shorthand and does not define a new type. Type aliases can
    be used to abbreviate long types as well as to give an indication about the intended
    use of the type.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`alias`关键字将 `State` 定义为完全等同于 `Int`；它只是一个简写，不定义新类型。类型别名可以用来缩写长类型以及给出关于类型预期用途的指示。
- en: 'The *view* defines how to render the model to the screen. In this case, it''s
    rather simple:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*视图* 定义了如何将模型渲染到屏幕上。在这种情况下，它相当简单：'
- en: '[PRE14]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Or, more succinctly:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者更简洁地说：
- en: '[PRE15]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The *controller* defines the connection between a signal and a function that
    transforms and renders the state when the signal updates. For this, we use the
    function
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*控制器* 定义了信号和在信号更新时转换和渲染状态的函数之间的连接。为此，我们使用函数'
- en: '[PRE16]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'to apply a folding function to *all* values (of type `a`) ever produced by
    the signal, starting with some initial state (of type `b`), and turning it into
    a signal of state values (of type `b`). This is, in fact, the same fold pattern
    as provided for other datatypes:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将折叠函数应用于信号产生的*所有*值（类型为 `a`），从某个初始状态（类型为 `b`）开始，并将其转换为状态值信号（类型为 `b`）。实际上，这与为其他数据类型提供的折叠模式相同：
- en: '[PRE17]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For `Signal`, this operation is called "folding from the past" rather than "from
    the left". Folding "from the right" would mean folding "from the future"...
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 `Signal`，这个操作称为“从过去折叠”，而不是“从左边折叠”。从“右边”折叠意味着从“未来”折叠……
- en: 'To finish our task, we define a folding function `step` and then put everything
    together in `main` as follows:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要完成我们的任务，我们定义一个折叠函数 `step`，然后将所有内容放在 `main` 中，如下所示：
- en: '[PRE18]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Download this program as [`IntroFRP.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/IntroFRP.elm)
    and [try](http://elm-lang.org/try) it out. You can also take a look at [the CountClicks
    example](http://elm-lang.org/edit/examples/Reactive/CountClicks.elm).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将此程序下载为[`IntroFRP.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/IntroFRP.elm)，并[尝试](http://elm-lang.org/try)一下。您还可以查看[CountClicks示例](http://elm-lang.org/edit/examples/Reactive/CountClicks.elm)。
- en: 'Something to consider: could we have implemented this functionality by using
    the `Mouse.isDown` signal rather than `Mouse.clicks`?'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有一点需要考虑：我们是否可以使用`Mouse.isDown`信号而不是`Mouse.clicks`来实现这个功能？
- en: Finally, say we wanted to track the passage of time rather than the number of
    clicks. By factoring our `main` definition into the generic form
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，假设我们想要跟踪时间的流逝而不是点击次数。通过将我们的`main`定义分解为通用形式，我们可以实现这一点。
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'we can implement this with a minor tweak of the previous definition:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过对先前定义进行微小调整来实现这一点：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Check out the [`Time`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Time)
    library.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`Time`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Time)库。
- en: Wait a minute...
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 等一下...
- en: We are factoring our Elm code into models, views, and controllers just like
    in the JavaScript code we started with. So, what have we really gained?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将Elm代码分解为模型、视图和控制器，就像我们开始时的JavaScript代码一样。那么，我们到底获得了什么？
- en: Well, in JavaScript, we would write logic in event handlers to determine which
    parts of the state need to be updated for different events. In Elm, we define
    new signals directly as functions of existing ones, and we leave it to the Elm
    compiler and run-time to figure out how and when to recompute signal values that
    are derived from more primitive ones. So, we have gained a lot!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，在JavaScript中，我们会在事件处理程序中编写逻辑，以确定哪些状态的部分需要更新以响应不同的事件。在Elm中，我们直接将新信号定义为现有信号的函数，并且将其留给Elm编译器和运行时来确定何时以及如何重新计算从更原始的信号派生的信号值。所以，我们获得了很多！
- en: 'This begs the question: how will the compiler figure this all out?'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了一个问题：编译器将如何弄清楚这一切？
- en: Compiling to JavaScript
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译为JavaScript
- en: The Elm compiler is left with the responsibility to generate target JavaScript
    that manages mutable state and event handlers, similar to the pseudocode we started
    with. A way to understand the structure of an Elm program is to think of a *signal
    graph*, where nodes are units of computation and edges indicate the flow of values.
    The incoming edges to a signal graph are the "primitive" JavaScript signals, or
    events, such as mouse-down, mouse-up, mouse-click, etc. The rest of the graph
    constitutes a pure function defined in terms of these primitive signals.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Elm编译器负责生成目标JavaScript，管理可变状态和事件处理程序，类似于我们开始时的伪代码。理解Elm程序的结构的一种方法是将其视为*信号图*，其中节点是计算单元，边表示值的流动。信号图的入边是"原始"JavaScript信号或事件，如鼠标按下、鼠标抬起、鼠标点击等。图的其余部分构成了一个纯函数，以这些原始信号为基础定义。
- en: As a result, a naive approach would be to recompute the *entire* program based
    on changes to *any* signal. This would, of course, be inefficient and is also
    unnecessary, because many parts of the signal graph are likely to be independent
    of changes to many primitive signals.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一个天真的方法是基于*任何*信号的更改重新计算*整个*程序。这显然是低效的，也是不必要的，因为信号图的许多部分可能独立于许多原始信号的更改。
- en: Instead, the compiler tracks dependencies in the signal graph and uses a concurrent
    message-passing system to more efficiently recompute only those parts of a program
    that depend on changes to primitive signals.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，编译器跟踪信号图中的依赖关系，并使用并发消息传递系统更有效地重新计算仅依赖于原始信号更改的程序部分。
- en: 'We will not go into any of the details of the compilation process, but you
    can find more information about it in the Reading links posted below. At a basic
    level, however, our intuitions for how the process might work should resemble
    our intuitions about how optimizing compilers for functional languages (even without
    FRP) work: a source language may be purely functional with immutable data structures
    being copied all over the place, but we know that, below the hood, the compiler
    is working to identify opportunities to reuse and cache previously computed results.
    In fact, we will see much more of this principle in the coming weeks as we study
    how to realize efficient data structures in purely functional languages.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入讨论编译过程的任何细节，但是你可以在下面发布的阅读链接中找到更多信息。但是，从基本的角度来看，我们对过程可能是如何工作的直觉应该类似于我们对函数语言（即使没有
    FRP）的优化编译器的直觉：源语言可能是纯函数的，具有不断复制的不可变数据结构，但是我们知道，在底层，编译器正在努力识别重新使用和缓存先前计算结果的机会。事实上，随着我们研究如何在纯函数语言中实现高效数据结构的几周内，我们将看到更多这一原则。
- en: 2D Graphics
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2D 图形
- en: The [`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element)
    library defines an API for laying out text, images, and other `Element`s. In addition,
    the [`Graphics.Collage`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Collage)
    library provides tools for defining freeform graphics, comprising shapes, lines,
    colors, etc. Start exploring by going through the 2D Shapes examples on the [Elm
    Examples page](http://elm-lang.org/Examples.elm). Homework 1 will provide a reason
    to really dig in.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element)
    库定义了一个用于排列文本、图像和其他 `Element` 的 API。此外，[`Graphics.Collage`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Collage)
    库提供了定义自由形状图形（包括形状、线条、颜色等）的工具。通过浏览 [Elm 示例页面](http://elm-lang.org/Examples.elm)
    上的 2D 形状示例来开始探索。作业 1 将提供一个真正深入挖掘的理由。'
- en: Reading
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: Required
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 必须的
- en: 'Libraries: [`Signal`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Signal),
    [`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element),
    [`Graphics.Collage`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Collage).
    As you peruse the `Signal` library, notice how the `isUp` function can be rewritten
    using a handy infix operator:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库：[`Signal`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Signal)，[`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element)，[`Graphics.Collage`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Collage)。当您查阅
    `Signal` 库时，请注意 `isUp` 函数如何使用一个方便的中缀运算符重写：
- en: '[PRE21]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '"Pass the `Mouse.isDown` signal through the `not` function."'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"通过 `Mouse.isDown` 信号通过 `not` 函数。"'
- en: Recommended
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 推荐的
- en: Look through more of the [Elm Examples](http://elm-lang.org/Examples.elm)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看更多的 [Elm 示例](http://elm-lang.org/Examples.elm)
- en: Look through more of the [Standard Libraries](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看更多的 [标准库](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/)
- en: Additional
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 附加
- en: For a more comprehensive background on FRP and introduction to Elm, you may
    want to skim parts of Evan Czaplicki's
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 FRP 的更全面背景和 Elm 的介绍，您可能想要略读 Evan Czaplicki 的一些部分。
- en: '[Senior Thesis](http://elm-lang.org/papers/concurrent-frp.pdf) and'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[高级论文](http://elm-lang.org/papers/concurrent-frp.pdf) 和'
- en: '[PLDI 2013 paper](http://people.seas.harvard.edu/~chong/pubs/pldi13-elm.pdf)
    with [Stephen Chong](http://people.seas.harvard.edu/~chong/).'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PLDI 2013 论文](http://people.seas.harvard.edu/~chong/pubs/pldi13-elm.pdf)，作者是
    [Stephen Chong](http://people.seas.harvard.edu/~chong/)。'
- en: You will find that some terminology and language features have since changed
    (e.g. `Signal.lift` is now called `Signal.map`). You will also find detailed explanation
    of the compilation process that we will not cover in this class.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现一些术语和语言特性已经改变（例如，`Signal.lift` 现在称为 `Signal.map`）。您还会找到我们在本课程中不涵盖的编译过程的详细解释。
