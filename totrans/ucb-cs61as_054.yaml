- en: List Operators and HOFs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表运算符和HOFs
- en: List Operators
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表运算符
- en: 'Racket provides useful primitive procedures for lists:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Racket为列表提供了有用的原始过程：
- en: '`list-ref`'
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`list-ref`'
- en: '`list-ref` takes as arguments a list and a number `n` and returns the `n`th
    item of the list. The first element of the list is indexed as `0`, meaning it
    is the `0`th element of the list. Here''s how `list-ref` is defined:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`list-ref`接受一个列表和一个数字`n`作为参数，并返回列表的第`n`个项目。列表的第一个元素被索引为`0`，意味着它是列表的第`0`个元素。这是`list-ref`的定义方式：'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and here is an example of how it works:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个演示它如何工作的示例：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`null?`'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`null?`'
- en: '`null?` takes a list as an argument and returns `#t` if the list is empty.
    Otherwise, it returns `#f`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`null?`接受一个列表作为参数，如果列表为空则返回`#t`。否则，返回`#f`：'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`length`'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`length`'
- en: '`length` takes a list as an argument and returns the number of items in a list.
    Here''s how `length` is defined:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`length`接受一个列表作为参数，并返回列表中的项目数。这是`length`的定义方式：'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and here is an example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Higher Order Functions with Lists
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高阶函数与列表
- en: From here on out, we’ll be mostly using lists and pairs rather than sentences.
    This is great, since it means we'll be able to take a closer look at how data
    is represented by Racket. But, this also means that a lot of the important higher
    order functions we previously defined with sentences must now be rewritten to
    work with pairs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们将主要使用列表和对，而不是句子。这很好，因为这意味着我们将能够更仔细地查看Racket如何表示数据。但是，这也意味着我们之前用句子定义的许多重要的高阶函数现在必须重新编写以适用于对。
- en: '`every` vs. `map`'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`every` vs. `map`'
- en: 'Recall the HOF `every`, which takes in a function and a sentence, and returns
    a sentence with the function applied to every element of the sentence. The equivalent
    of this HOF using pairs is called `map`, which it takes in a function and a *list*,
    and returns a list with the function *mapped* to every element in the list. `map`
    is a recursively defined function, as you can see here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下HOF `every`，它接受一个函数和一个句子，并返回一个应用到句子的每个元素的句子。使用对的等价物称为`map`，它接受一个函数和一个*列表*，并返回一个将函数*映射*到列表中每个元素的列表。`map`是一个递归定义的函数，你可以在这里看到：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The procedure `null?` for lists is analogous to the procedure `empty?` for
    sentences, and checks whether or not the given argument is the empty list. Here
    are a few example calls to `map`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列表的过程`null?`类似于句子的过程`empty?`，检查给定的参数是否为空列表。这里有一些对`map`的例子：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`keep` vs. `filter`'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`keep` vs. `filter`'
- en: 'We already had a quick glimpse of `filter` in the `filtered-accumulate` problem
    in Homework 2, so you should already have some idea of what the HOF `filter` should
    do. `filter` takes in two arguments, a predicate and a list, and returns a list
    with only elements that satisfy the predicate. Take a look at the formal definition:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在作业2中的`filtered-accumulate`问题中已经快速看到了`filter`，所以你应该已经对HOF `filter`应该做什么有一些想法。`filter`接受两个参数，一个谓词和一个列表，并返回仅满足谓词的元素的列表。看一下正式定义：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And here are some examples:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些例子：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`accumulate`'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`accumulate`'
- en: 'Finally, there is the procedure `accumulate` for sentences. This procedure
    takes in a function of two arguments, a base case value, and a sentence of values,
    and continuously combines the values in the list using this operation and ending/starting
    with the base case value. There are two equivalents to accumulate for lists: `foldl`
    and `foldr`. Both take in a function of two values, a base case value, and a list.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有一个用于句子的过程`accumulate`。这个过程接受两个参数的函数，一个基本情况值和一个值的句子，并使用这个操作连续地组合列表中的值，并以基本情况值结束/开始。有两个等效的`accumulate`用于列表：`foldl`和`foldr`。两者都接受两个值的函数，一个基本情况值和一个列表。
- en: '`fold-left` starts from the last (right-most) element in the list and continuously
    applies the function recursively until it reaches the first element of the list.
    Thus, it *folds* to the left. For example, here are the steps to evaluate a call
    to `foldl`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`fold-left`从列表中的最后一个（最右边）元素开始，并递归地连续应用函数，直到达到列表的第一个元素。因此，它向左*折叠*。例如，这是评估对`foldl`调用的步骤：'
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s another example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个例子：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'On the other hand, `fold-right` starts from the first (left-most) element in
    the list and continuously applies the function recursively until it reaches the
    last element of the list. Thus, it *folds* to the right. Take these calls for
    example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`fold-right`从列表中的第一个（最左边）元素开始，并递归地连续应用函数，直到达到列表的最后一个元素。因此，它向右*折叠*。举个例子：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We now have two versions of `accumulate`, where the values of `foldl` and `foldr`
    would only differ when they are called with combiner functions in which order
    matters.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个版本的`accumulate`，其中`foldl`和`foldr`的值仅在它们被调用时与组合函数的顺序有关时才会有所不同。
- en: Summary of HOFs
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高阶函数总结
- en: To make the transition easier, here’s a table illustrating some operations on
    sentences and their equivalent for lists.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使过渡更容易，这里有一个表格，展示了一些句子操作及其在列表中的等价操作。
- en: '| SENTENCE | LIST |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 句子 | 列表 |'
- en: '| --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `se/sentence` | `cons/list/append` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `se/sentence` | `cons/list/append` |'
- en: '| `first` | `car` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `first` | `car` |'
- en: '| `bf/butfirst` | `cdr` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `bf/butfirst` | `cdr` |'
- en: '| `last` | NO EQUIVALENT |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `last` | 没有对应项 |'
- en: '| `bl/butlast` | NO EQUIVALENT |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `bl/butlast` | 没有对应项 |'
- en: '| `count` | `length` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `count` | `length` |'
- en: '| `item` (one-indexed) | `list-ref` (zero-indexed) |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `item`（从一开始索引） | `list-ref`（从零开始索引） |'
- en: '| `every` | `map` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `every` | `map` |'
- en: '| `keep` | `filter` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `keep` | `filter` |'
- en: '| `accumulate` | `foldl/foldr` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `accumulate` | `foldl/foldr` |'
