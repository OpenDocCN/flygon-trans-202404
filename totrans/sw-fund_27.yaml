- en: SubSubtyping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Require Import Maps.
  prefs: []
  type: TYPE_NORMAL
- en: Require Import Types.
  prefs: []
  type: TYPE_NORMAL
- en: Require Import Smallstep.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Person  = {name:String, age:Nat}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Student = {name:String, age:Nat, gpa:Nat}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: (λr:Person. (r.age)+1) {name="Pat",age=21,gpa=1}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: f : C → Student
  prefs: []
  type: TYPE_NORMAL
- en: g : (C→Person) → D
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: f : Person → C
  prefs: []
  type: TYPE_NORMAL
- en: g : (Student → C) → D
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '{name:String, age:Nat, gpa:Nat} <: {name:String, age:Nat}'
  prefs: []
  type: TYPE_NORMAL
- en: '{name:String, age:Nat} <: {name:String} {name:String} <: {}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '{x:Student} <: {x:Person}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '{name:String,age:Nat} <: {age:Nat,name:String}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: f : Student → Nat
  prefs: []
  type: TYPE_NORMAL
- en: g : (Person → Nat) → Nat
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: ∀S T,
  prefs: []
  type: TYPE_NORMAL
- en: S <: T  →
  prefs: []
  type: TYPE_NORMAL
- en: S→S   <:  T→T
  prefs: []
  type: TYPE_NORMAL
- en: ∀S,
  prefs: []
  type: TYPE_NORMAL
- en: S <: A→A →
  prefs: []
  type: TYPE_NORMAL
- en: ∃T,
  prefs: []
  type: TYPE_NORMAL
- en: S = T→T  ∧  T <: A
  prefs: []
  type: TYPE_NORMAL
- en: ∀S T[1] T[2],
  prefs: []
  type: TYPE_NORMAL
- en: (S <: T[1] → T[2]) →
  prefs: []
  type: TYPE_NORMAL
- en: ∃S[1] S[2],
  prefs: []
  type: TYPE_NORMAL
- en: S = S[1] → S[2]  ∧  T[1] <: S[1]  ∧  S[2] <: T[2]
  prefs: []
  type: TYPE_NORMAL
- en: ∃S,
  prefs: []
  type: TYPE_NORMAL
- en: S <: S→S
  prefs: []
  type: TYPE_NORMAL
- en: ∃S,
  prefs: []
  type: TYPE_NORMAL
- en: S→S <: S
  prefs: []
  type: TYPE_NORMAL
- en: ∀S T[1] T[2],
  prefs: []
  type: TYPE_NORMAL
- en: S <: T[1]*T[2] →
  prefs: []
  type: TYPE_NORMAL
- en: ∃S[1] S[2],
  prefs: []
  type: TYPE_NORMAL
- en: S = S[1]*S[2]  ∧  S[1] <: T[1]  ∧  S[2] <: T[2]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: ∀T,
  prefs: []
  type: TYPE_NORMAL
- en: ~(T = TBool ∨ ∃n, T = TBase n) →
  prefs: []
  type: TYPE_NORMAL
- en: ∃S,
  prefs: []
  type: TYPE_NORMAL
- en: S <: T  ∧  S ≠ T
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: empty ⊢ (λp:T*Top. p.fst) ((λz:A.z), unit) : A→A
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: empty ⊢ (λp:(A→A * B→B). p) ((λz:A.z), (λz:B.z)) : T
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: a:A ⊢ (λp:(A*T). (p.snd) (p.fst)) (a , \z:A.z) : A
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ∃S,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: empty ⊢ (λp:(A*T). (p.snd) (p.fst)) : S
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ∃S, ∃t,
  prefs: []
  type: TYPE_NORMAL
- en: empty ⊢ (λx:T. x x) t : S
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: empty ⊢ (λx:Top. x) ((λz:A.z) , (λz:B.z)) : T
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Inductive ty : Type :='
  prefs: []
  type: TYPE_NORMAL
- en: '| TTop   : ty'
  prefs: []
  type: TYPE_NORMAL
- en: '| TBool  : ty'
  prefs: []
  type: TYPE_NORMAL
- en: '| TBase  : id → ty'
  prefs: []
  type: TYPE_NORMAL
- en: '| TArrow : ty → ty → ty'
  prefs: []
  type: TYPE_NORMAL
- en: '| TUnit  : ty'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 'Inductive tm : Type :='
  prefs: []
  type: TYPE_NORMAL
- en: '| tvar : id → tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tapp : tm → tm → tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tabs : id → ty → tm → tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| ttrue : tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tfalse : tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tif : tm → tm → tm → tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tunit : tm'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Fixpoint subst (x:id) (s:tm)  (t:tm) : tm :='
  prefs: []
  type: TYPE_NORMAL
- en: match t with
  prefs: []
  type: TYPE_NORMAL
- en: '| tvar y ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: if beq_id x y then s else t
  prefs: []
  type: TYPE_NORMAL
- en: '| tabs y T t[1] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: tabs y T (if beq_id x y then t[1] else (subst x s t[1]))
  prefs: []
  type: TYPE_NORMAL
- en: '| tapp t[1] t[2] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: tapp (subst x s t[1]) (subst x s t[2])
  prefs: []
  type: TYPE_NORMAL
- en: '| ttrue ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: ttrue
  prefs: []
  type: TYPE_NORMAL
- en: '| tfalse ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: tfalse
  prefs: []
  type: TYPE_NORMAL
- en: '| tif t[1] t[2] t[3] ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: tif (subst x s t[1]) (subst x s t[2]) (subst x s t[3])
  prefs: []
  type: TYPE_NORMAL
- en: '| tunit ⇒'
  prefs: []
  type: TYPE_NORMAL
- en: tunit
  prefs: []
  type: TYPE_NORMAL
- en: end.
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'[' x ':=' s ']' t" := (subst x s t) (at level 20).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Inductive value : tm → Prop :='
  prefs: []
  type: TYPE_NORMAL
- en: '| v_abs : ∀x T t,'
  prefs: []
  type: TYPE_NORMAL
- en: value (tabs x T t)
  prefs: []
  type: TYPE_NORMAL
- en: '| v_true :'
  prefs: []
  type: TYPE_NORMAL
- en: value ttrue
  prefs: []
  type: TYPE_NORMAL
- en: '| v_false :'
  prefs: []
  type: TYPE_NORMAL
- en: value tfalse
  prefs: []
  type: TYPE_NORMAL
- en: '| v_unit :'
  prefs: []
  type: TYPE_NORMAL
- en: value tunit
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Hint Constructors value.
  prefs: []
  type: TYPE_NORMAL
- en: Reserved Notation "t1 '⇒' t2" (at level 40).
  prefs: []
  type: TYPE_NORMAL
- en: 'Inductive step : tm → tm → Prop :='
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_AppAbs : ∀x T t[12] v[2],'
  prefs: []
  type: TYPE_NORMAL
- en: value v[2] →
  prefs: []
  type: TYPE_NORMAL
- en: (tapp (tabs x T t[12]) v[2]) ⇒ [x:=v[2]]t[12]
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_App1 : ∀t[1] t[1]'' t[2],'
  prefs: []
  type: TYPE_NORMAL
- en: t[1] ⇒ t[1]' →
  prefs: []
  type: TYPE_NORMAL
- en: (tapp t[1] t[2]) ⇒ (tapp t[1]' t[2])
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_App2 : ∀v[1] t[2] t[2]'','
  prefs: []
  type: TYPE_NORMAL
- en: value v[1] →
  prefs: []
  type: TYPE_NORMAL
- en: t[2] ⇒ t[2]' →
  prefs: []
  type: TYPE_NORMAL
- en: (tapp v[1] t[2]) ⇒ (tapp v[1]  t[2]')
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_IfTrue : ∀t[1] t[2],'
  prefs: []
  type: TYPE_NORMAL
- en: (tif ttrue t[1] t[2]) ⇒ t[1]
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_IfFalse : ∀t[1] t[2],'
  prefs: []
  type: TYPE_NORMAL
- en: (tif tfalse t[1] t[2]) ⇒ t[2]
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_If : ∀t[1] t[1]'' t[2] t[3],'
  prefs: []
  type: TYPE_NORMAL
- en: t[1] ⇒ t[1]' →
  prefs: []
  type: TYPE_NORMAL
- en: (tif t[1] t[2] t[3]) ⇒ (tif t[1]' t[2] t[3])
  prefs: []
  type: TYPE_NORMAL
- en: where "t1 '⇒' t2" := (step t[1] t[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Hint Constructors step.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Reserved Notation "T '<:' U" (at level 40).
  prefs: []
  type: TYPE_NORMAL
- en: 'Inductive subtype : ty → ty → Prop :='
  prefs: []
  type: TYPE_NORMAL
- en: '| S_Refl : ∀T,'
  prefs: []
  type: TYPE_NORMAL
- en: 'T <: T'
  prefs: []
  type: TYPE_NORMAL
- en: '| S_Trans : ∀S U T,'
  prefs: []
  type: TYPE_NORMAL
- en: 'S <: U →'
  prefs: []
  type: TYPE_NORMAL
- en: 'U <: T →'
  prefs: []
  type: TYPE_NORMAL
- en: 'S <: T'
  prefs: []
  type: TYPE_NORMAL
- en: '| S_Top : ∀S,'
  prefs: []
  type: TYPE_NORMAL
- en: 'S <: TTop'
  prefs: []
  type: TYPE_NORMAL
- en: '| S_Arrow : ∀S[1] S[2] T[1] T[2],'
  prefs: []
  type: TYPE_NORMAL
- en: 'T[1] <: S[1] →'
  prefs: []
  type: TYPE_NORMAL
- en: 'S[2] <: T[2] →'
  prefs: []
  type: TYPE_NORMAL
- en: '(TArrow S[1] S[2]) <: (TArrow T[1] T[2])'
  prefs: []
  type: TYPE_NORMAL
- en: where "T '<:' U" := (subtype T U).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Hint Constructors subtype.
  prefs: []
  type: TYPE_NORMAL
- en: Module Examples.
  prefs: []
  type: TYPE_NORMAL
- en: Notation x := (Id "x").
  prefs: []
  type: TYPE_NORMAL
- en: Notation y := (Id "y").
  prefs: []
  type: TYPE_NORMAL
- en: Notation z := (Id "z").
  prefs: []
  type: TYPE_NORMAL
- en: Notation A := (TBase (Id "A")).
  prefs: []
  type: TYPE_NORMAL
- en: Notation B := (TBase (Id "B")).
  prefs: []
  type: TYPE_NORMAL
- en: Notation C := (TBase (Id "C")).
  prefs: []
  type: TYPE_NORMAL
- en: Notation String := (TBase (Id "String")).
  prefs: []
  type: TYPE_NORMAL
- en: Notation Float := (TBase (Id "Float")).
  prefs: []
  type: TYPE_NORMAL
- en: Notation Integer := (TBase (Id "Integer")).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example subtyping_example_0 :'
  prefs: []
  type: TYPE_NORMAL
- en: '(TArrow C TBool) <: (TArrow C TTop).'
  prefs: []
  type: TYPE_NORMAL
- en: (* C->Bool <: C->Top *)
  prefs: []
  type: TYPE_NORMAL
- en: Proof. auto. Qed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Person   := { name : String }
  prefs: []
  type: TYPE_NORMAL
- en: Student  := { name : String ;
  prefs: []
  type: TYPE_NORMAL
- en: gpa  : Float }
  prefs: []
  type: TYPE_NORMAL
- en: Employee := { name : String ;
  prefs: []
  type: TYPE_NORMAL
- en: ssn  : Integer }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Definition Person : ty'
  prefs: []
  type: TYPE_NORMAL
- en: (* REPLACE THIS LINE WITH ":= _your_definition_ ." *). Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Definition Student : ty'
  prefs: []
  type: TYPE_NORMAL
- en: (* REPLACE THIS LINE WITH ":= _your_definition_ ." *). Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Definition Employee : ty'
  prefs: []
  type: TYPE_NORMAL
- en: (* REPLACE THIS LINE WITH ":= _your_definition_ ." *). Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Example sub_student_person :'
  prefs: []
  type: TYPE_NORMAL
- en: 'Student <: Person.'
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example sub_employee_person :'
  prefs: []
  type: TYPE_NORMAL
- en: 'Employee <: Person.'
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Example subtyping_example_1 :'
  prefs: []
  type: TYPE_NORMAL
- en: '(TArrow TTop Student) <: (TArrow (TArrow C C) Person).'
  prefs: []
  type: TYPE_NORMAL
- en: (* Top->Student <: (C->C)->Person *)
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Example subtyping_example_2 :'
  prefs: []
  type: TYPE_NORMAL
- en: '(TArrow TTop Person) <: (TArrow Person TTop).'
  prefs: []
  type: TYPE_NORMAL
- en: (* Top->Person <: Person->Top *)
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: End Examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Definition context := partial_map ty.
  prefs: []
  type: TYPE_NORMAL
- en: Reserved Notation "Gamma '⊢' t '∈' T" (at level 40).
  prefs: []
  type: TYPE_NORMAL
- en: 'Inductive has_type : context → tm → ty → Prop :='
  prefs: []
  type: TYPE_NORMAL
- en: (* Same as before *)
  prefs: []
  type: TYPE_NORMAL
- en: '| T_Var : ∀Γ x T,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ x = Some T →
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tvar x) ∈ T
  prefs: []
  type: TYPE_NORMAL
- en: '| T_Abs : ∀Γ x T[11] T[12] t[12],'
  prefs: []
  type: TYPE_NORMAL
- en: (update Γ x T[11]) ⊢ t[12] ∈ T[12] →
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tabs x T[11] t[12]) ∈ (TArrow T[11] T[12])
  prefs: []
  type: TYPE_NORMAL
- en: '| T_App : ∀T[1] T[2] Γ t[1] t[2],'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t[1] ∈ (TArrow T[1] T[2]) →
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t[2] ∈ T[1] →
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tapp t[1] t[2]) ∈ T[2]
  prefs: []
  type: TYPE_NORMAL
- en: '| T_True : ∀Γ,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ ttrue ∈ TBool
  prefs: []
  type: TYPE_NORMAL
- en: '| T_False : ∀Γ,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ tfalse ∈ TBool
  prefs: []
  type: TYPE_NORMAL
- en: '| T_If : ∀t[1] t[2] t[3] T Γ,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t[1] ∈ TBool →
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t[2] ∈ T →
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t[3] ∈ T →
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tif t[1] t[2] t[3]) ∈ T
  prefs: []
  type: TYPE_NORMAL
- en: '| T_Unit : ∀Γ,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ tunit ∈ TUnit
  prefs: []
  type: TYPE_NORMAL
- en: (* New rule of subsumption *)
  prefs: []
  type: TYPE_NORMAL
- en: '| T_Sub : ∀Γ t S T,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t ∈ S →
  prefs: []
  type: TYPE_NORMAL
- en: 'S <: T →'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t ∈ T
  prefs: []
  type: TYPE_NORMAL
- en: where "Gamma '⊢' t '∈' T" := (has_type Γ t T).
  prefs: []
  type: TYPE_NORMAL
- en: Hint Constructors has_type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Hint Extern 2 (has_type _ (tapp _ _) _) ⇒
  prefs: []
  type: TYPE_NORMAL
- en: eapply T_App; auto.
  prefs: []
  type: TYPE_NORMAL
- en: Hint Extern 2 (_ = _) ⇒ compute; reflexivity.
  prefs: []
  type: TYPE_NORMAL
- en: Module Examples2.
  prefs: []
  type: TYPE_NORMAL
- en: Import Examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: (* empty |- ((λz:A.z), (λz:B.z))
  prefs: []
  type: TYPE_NORMAL
- en: : (A->A * B->B) *)
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: (* empty |- (λx:(Top * B->B). x.snd) ((λz:A.z), (λz:B.z))
  prefs: []
  type: TYPE_NORMAL
- en: : B->B *)
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: (* empty |- (λz:(C->C)->(Top * B->B). (z (λx:C.x)).snd)
  prefs: []
  type: TYPE_NORMAL
- en: (λz:C->C. ((λz:A.z), (λz:B.z)))
  prefs: []
  type: TYPE_NORMAL
- en: : B->B *)
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: End Examples2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Lemma sub_inversion_Bool : ∀U,'
  prefs: []
  type: TYPE_NORMAL
- en: 'U <: TBool →'
  prefs: []
  type: TYPE_NORMAL
- en: U = TBool.
  prefs: []
  type: TYPE_NORMAL
- en: Proof with auto.
  prefs: []
  type: TYPE_NORMAL
- en: intros U Hs.
  prefs: []
  type: TYPE_NORMAL
- en: remember [TBool](Sub.html#TBool) as V.
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Lemma sub_inversion_arrow : ∀U V[1] V[2],'
  prefs: []
  type: TYPE_NORMAL
- en: 'U <: (TArrow V[1] V[2]) →'
  prefs: []
  type: TYPE_NORMAL
- en: ∃U[1], ∃U[2],
  prefs: []
  type: TYPE_NORMAL
- en: 'U = (TArrow U[1] U[2]) ∧ (V[1] <: U[1]) ∧ (U[2] <: V[2]).'
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros U V[1] V[2] Hs.
  prefs: []
  type: TYPE_NORMAL
- en: remember ([TArrow](Sub.html#TArrow) V[1] V[2]) as V.
  prefs: []
  type: TYPE_NORMAL
- en: generalize dependent V[2]. generalize dependent V[1].
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Lemma canonical_forms_of_arrow_types : ∀Γ s T[1] T[2],'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ s ∈ (TArrow T[1] T[2]) →
  prefs: []
  type: TYPE_NORMAL
- en: value s →
  prefs: []
  type: TYPE_NORMAL
- en: ∃x, ∃S[1], ∃s[2],
  prefs: []
  type: TYPE_NORMAL
- en: s = tabs x S[1] s[2].
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Lemma canonical_forms_of_Bool : ∀Γ s,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ s ∈ TBool →
  prefs: []
  type: TYPE_NORMAL
- en: value s →
  prefs: []
  type: TYPE_NORMAL
- en: (s = ttrue ∨ s = tfalse).
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ s Hty Hv.
  prefs: []
  type: TYPE_NORMAL
- en: remember [TBool](Sub.html#TBool) as T.
  prefs: []
  type: TYPE_NORMAL
- en: induction Hty; try solve_by_invert...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  prefs: []
  type: TYPE_NORMAL
- en: subst. apply [sub_inversion_Bool](Sub.html#sub_inversion_Bool) in H. subst...
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Theorem progress : ∀t T,'
  prefs: []
  type: TYPE_NORMAL
- en: empty ⊢ t ∈ T →
  prefs: []
  type: TYPE_NORMAL
- en: value t ∨ ∃t', t ⇒ t'.
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros t T Ht.
  prefs: []
  type: TYPE_NORMAL
- en: remember [empty](Maps.html#empty) as Γ.
  prefs: []
  type: TYPE_NORMAL
- en: revert HeqGamma.
  prefs: []
  type: TYPE_NORMAL
- en: induction Ht;
  prefs: []
  type: TYPE_NORMAL
- en: intros HeqGamma; subst...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Var *)'
  prefs: []
  type: TYPE_NORMAL
- en: inversion H.
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_App *)'
  prefs: []
  type: TYPE_NORMAL
- en: right.
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHt1; subst...
  prefs: []
  type: TYPE_NORMAL
- en: + (* t[1] is a value *)
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHt2; subst...
  prefs: []
  type: TYPE_NORMAL
- en: '* (* t[2] is a value *)'
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([canonical_forms_of_arrow_types](Sub.html#canonical_forms_of_arrow_types)
    [empty](Maps.html#empty) t[1] T[1] T[2])
  prefs: []
  type: TYPE_NORMAL
- en: as [x [S[1] [t[12] Heqt1]]]...
  prefs: []
  type: TYPE_NORMAL
- en: subst. ∃([x:=t[2]]t[12])...
  prefs: []
  type: TYPE_NORMAL
- en: '* (* t[2] steps *)'
  prefs: []
  type: TYPE_NORMAL
- en: inversion H[0] as [t[2]' Hstp]. ∃([tapp](Sub.html#tapp) t[1] t[2]')...
  prefs: []
  type: TYPE_NORMAL
- en: + (* t[1] steps *)
  prefs: []
  type: TYPE_NORMAL
- en: inversion H as [t[1]' Hstp]. ∃([tapp](Sub.html#tapp) t[1]' t[2])...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_If *)'
  prefs: []
  type: TYPE_NORMAL
- en: right.
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHt1.
  prefs: []
  type: TYPE_NORMAL
- en: + (* t[1] is a value *) eauto.
  prefs: []
  type: TYPE_NORMAL
- en: + assert (t[1] = [ttrue](Sub.html#ttrue) ∨ t[1] = [tfalse](Sub.html#tfalse))
  prefs: []
  type: TYPE_NORMAL
- en: by (eapply [canonical_forms_of_Bool](Sub.html#canonical_forms_of_Bool); eauto).
  prefs: []
  type: TYPE_NORMAL
- en: inversion H[0]; subst...
  prefs: []
  type: TYPE_NORMAL
- en: + inversion H. rename x into t[1]'. eauto.
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Lemma typing_inversion_abs : ∀Γ x S[1] t[2] T,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tabs x S[1] t[2]) ∈ T →
  prefs: []
  type: TYPE_NORMAL
- en: '(∃S[2], (TArrow S[1] S[2]) <: T'
  prefs: []
  type: TYPE_NORMAL
- en: ∧ (update Γ x S[1]) ⊢ t[2] ∈ S[2]).
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ x S[1] t[2] T H.
  prefs: []
  type: TYPE_NORMAL
- en: remember ([tabs](Sub.html#tabs) x S[1] t[2]) as t.
  prefs: []
  type: TYPE_NORMAL
- en: induction H;
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqt; subst; intros; try solve_by_invert.
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Abs *)'
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[12]...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHhas_type as [S[2] [Hsub Hty]]...
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Lemma typing_inversion_var : ∀Γ x T,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tvar x) ∈ T →
  prefs: []
  type: TYPE_NORMAL
- en: ∃S,
  prefs: []
  type: TYPE_NORMAL
- en: 'Γ x = Some S ∧ S <: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ x T Hty.
  prefs: []
  type: TYPE_NORMAL
- en: remember ([tvar](Sub.html#tvar) x) as t.
  prefs: []
  type: TYPE_NORMAL
- en: induction Hty; intros;
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqt; subst; try solve_by_invert.
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Var *)'
  prefs: []
  type: TYPE_NORMAL
- en: ∃T...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHty as [U [Hctx HsubU]]... Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_app : ∀Γ t[1] t[2] T[2],'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tapp t[1] t[2]) ∈ T[2] →
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1],
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t[1] ∈ (TArrow T[1] T[2]) ∧
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t[2] ∈ T[1].
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ t[1] t[2] T[2] Hty.
  prefs: []
  type: TYPE_NORMAL
- en: remember ([tapp](Sub.html#tapp) t[1] t[2]) as t.
  prefs: []
  type: TYPE_NORMAL
- en: induction Hty; intros;
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqt; subst; try solve_by_invert.
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_App *)'
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHty as [U[1] [Hty1 Hty2]]...
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_true : ∀Γ T,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ ttrue ∈ T →
  prefs: []
  type: TYPE_NORMAL
- en: 'TBool <: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ T Htyp. remember [ttrue](Sub.html#ttrue) as tu.
  prefs: []
  type: TYPE_NORMAL
- en: induction Htyp;
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqtu; subst; intros...
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_false : ∀Γ T,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ tfalse ∈ T →
  prefs: []
  type: TYPE_NORMAL
- en: 'TBool <: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ T Htyp. remember [tfalse](Sub.html#tfalse) as tu.
  prefs: []
  type: TYPE_NORMAL
- en: induction Htyp;
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqtu; subst; intros...
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_if : ∀Γ t[1] t[2] t[3] T,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tif t[1] t[2] t[3]) ∈ T →
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t[1] ∈ TBool
  prefs: []
  type: TYPE_NORMAL
- en: ∧ Γ ⊢ t[2] ∈ T
  prefs: []
  type: TYPE_NORMAL
- en: ∧ Γ ⊢ t[3] ∈ T.
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ t[1] t[2] t[3] T Hty.
  prefs: []
  type: TYPE_NORMAL
- en: remember ([tif](Sub.html#tif) t[1] t[2] t[3]) as t.
  prefs: []
  type: TYPE_NORMAL
- en: induction Hty; intros;
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqt; subst; try solve_by_invert.
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_If *)'
  prefs: []
  type: TYPE_NORMAL
- en: auto.
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  prefs: []
  type: TYPE_NORMAL
- en: destruct (IHHty H[0]) as [H[1] [H[2] H[3]]]...
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_unit : ∀Γ T,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ tunit ∈ T →
  prefs: []
  type: TYPE_NORMAL
- en: 'TUnit <: T.'
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ T Htyp. remember [tunit](Sub.html#tunit) as tu.
  prefs: []
  type: TYPE_NORMAL
- en: induction Htyp;
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqtu; subst; intros...
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Lemma abs_arrow : ∀x S[1] s[2] T[1] T[2],'
  prefs: []
  type: TYPE_NORMAL
- en: empty ⊢ (tabs x S[1] s[2]) ∈ (TArrow T[1] T[2]) →
  prefs: []
  type: TYPE_NORMAL
- en: 'T[1] <: S[1]'
  prefs: []
  type: TYPE_NORMAL
- en: ∧ (update empty x S[1]) ⊢ s[2] ∈ T[2].
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros x S[1] s[2] T[1] T[2] Hty.
  prefs: []
  type: TYPE_NORMAL
- en: apply [typing_inversion_abs](Sub.html#typing_inversion_abs) in Hty.
  prefs: []
  type: TYPE_NORMAL
- en: inversion Hty as [S[2] [Hsub Hty1]].
  prefs: []
  type: TYPE_NORMAL
- en: apply [sub_inversion_arrow](Sub.html#sub_inversion_arrow) in Hsub.
  prefs: []
  type: TYPE_NORMAL
- en: inversion Hsub as [U[1] [U[2] [Heq [Hsub1 Hsub2]]]].
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heq; subst... Qed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Inductive appears_free_in : id → tm → Prop :='
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_var : ∀x,'
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x (tvar x)
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_app1 : ∀x t[1] t[2],'
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t[1] → appears_free_in x (tapp t[1] t[2])
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_app2 : ∀x t[1] t[2],'
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t[2] → appears_free_in x (tapp t[1] t[2])
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_abs : ∀x y T[11] t[12],'
  prefs: []
  type: TYPE_NORMAL
- en: y ≠ x  →
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t[12] →
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x (tabs y T[11] t[12])
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_if[1] : ∀x t[1] t[2] t[3],'
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t[1] →
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x (tif t[1] t[2] t[3])
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_if[2] : ∀x t[1] t[2] t[3],'
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t[2] →
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x (tif t[1] t[2] t[3])
  prefs: []
  type: TYPE_NORMAL
- en: '| afi_if[3] : ∀x t[1] t[2] t[3],'
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t[3] →
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x (tif t[1] t[2] t[3])
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Hint Constructors appears_free_in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma context_invariance : ∀Γ Γ'' t S,'
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t ∈ S  →
  prefs: []
  type: TYPE_NORMAL
- en: (∀x, appears_free_in x t → Γ x = Γ' x)  →
  prefs: []
  type: TYPE_NORMAL
- en: Γ' ⊢ t ∈ S.
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros. generalize dependent Γ'.
  prefs: []
  type: TYPE_NORMAL
- en: induction H;
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ' Heqv...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Var *)'
  prefs: []
  type: TYPE_NORMAL
- en: apply [T_Var](Sub.html#T_Var)... rewrite ← Heqv...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Abs *)'
  prefs: []
  type: TYPE_NORMAL
- en: apply [T_Abs](Sub.html#T_Abs)... apply IHhas_type. intros x[0] Hafi.
  prefs: []
  type: TYPE_NORMAL
- en: unfold [update](Maps.html#update), [t_update](Maps.html#t_update). destruct
    ([beq_idP](Maps.html#beq_idP) x x[0])...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_If *)'
  prefs: []
  type: TYPE_NORMAL
- en: apply [T_If](Sub.html#T_If)...
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma free_in_context : ∀x t T Γ,'
  prefs: []
  type: TYPE_NORMAL
- en: appears_free_in x t →
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t ∈ T →
  prefs: []
  type: TYPE_NORMAL
- en: ∃T', Γ x = Some T'.
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros x t T Γ Hafi Htyp.
  prefs: []
  type: TYPE_NORMAL
- en: induction Htyp;
  prefs: []
  type: TYPE_NORMAL
- en: subst; inversion Hafi; subst...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Abs *)'
  prefs: []
  type: TYPE_NORMAL
- en: destruct (IHHtyp H[4]) as [T Hctx]. ∃T.
  prefs: []
  type: TYPE_NORMAL
- en: unfold [update](Maps.html#update), [t_update](Maps.html#t_update) in Hctx.
  prefs: []
  type: TYPE_NORMAL
- en: rewrite ← [beq_id_false_iff](Maps.html#beq_id_false_iff) in H[2].
  prefs: []
  type: TYPE_NORMAL
- en: rewrite H[2] in Hctx... Qed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Lemma substitution_preserves_typing : ∀Γ x U v t S,'
  prefs: []
  type: TYPE_NORMAL
- en: (update Γ x U) ⊢ t ∈ S  →
  prefs: []
  type: TYPE_NORMAL
- en: empty ⊢ v ∈ U   →
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ ([x:=v]t) ∈ S.
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ x U v t S Htypt Htypv.
  prefs: []
  type: TYPE_NORMAL
- en: generalize dependent S. generalize dependent Γ.
  prefs: []
  type: TYPE_NORMAL
- en: induction t; intros; simpl.
  prefs: []
  type: TYPE_NORMAL
- en: '- (* tvar *)'
  prefs: []
  type: TYPE_NORMAL
- en: rename i into y.
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([typing_inversion_var](Sub.html#typing_inversion_var) _ _ _ Htypt)
  prefs: []
  type: TYPE_NORMAL
- en: as [T [Hctx Hsub]].
  prefs: []
  type: TYPE_NORMAL
- en: unfold [update](Maps.html#update), [t_update](Maps.html#t_update) in Hctx.
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([beq_idP](Maps.html#beq_idP) x y) as [Hxy|Hxy]; eauto;
  prefs: []
  type: TYPE_NORMAL
- en: subst.
  prefs: []
  type: TYPE_NORMAL
- en: inversion Hctx; subst. clear Hctx.
  prefs: []
  type: TYPE_NORMAL
- en: apply [context_invariance](Sub.html#context_invariance) with [empty](Maps.html#empty)...
  prefs: []
  type: TYPE_NORMAL
- en: intros x Hcontra.
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([free_in_context](Sub.html#free_in_context) _ _ S [empty](Maps.html#empty)
    Hcontra)
  prefs: []
  type: TYPE_NORMAL
- en: as [T' HT']...
  prefs: []
  type: TYPE_NORMAL
- en: inversion HT'.
  prefs: []
  type: TYPE_NORMAL
- en: '- (* tapp *)'
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([typing_inversion_app](Sub.html#typing_inversion_app) _ _ _ _ Htypt)
  prefs: []
  type: TYPE_NORMAL
- en: as [T[1] [Htypt1 Htypt2]].
  prefs: []
  type: TYPE_NORMAL
- en: eapply [T_App](Sub.html#T_App)...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* tabs *)'
  prefs: []
  type: TYPE_NORMAL
- en: rename i into y. rename t into T[1].
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([typing_inversion_abs](Sub.html#typing_inversion_abs) _ _ _ _ _ Htypt)
  prefs: []
  type: TYPE_NORMAL
- en: as [T[2] [Hsub Htypt2]].
  prefs: []
  type: TYPE_NORMAL
- en: apply [T_Sub](Sub.html#T_Sub) with ([TArrow](Sub.html#TArrow) T[1] T[2])...
    apply [T_Abs](Sub.html#T_Abs)...
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([beq_idP](Maps.html#beq_idP) x y) as [Hxy|Hxy].
  prefs: []
  type: TYPE_NORMAL
- en: + (* x=y *)
  prefs: []
  type: TYPE_NORMAL
- en: eapply [context_invariance](Sub.html#context_invariance)...
  prefs: []
  type: TYPE_NORMAL
- en: subst.
  prefs: []
  type: TYPE_NORMAL
- en: intros x Hafi. unfold [update](Maps.html#update), [t_update](Maps.html#t_update).
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([beq_id](Maps.html#beq_id) y x)...
  prefs: []
  type: TYPE_NORMAL
- en: + (* x<>y *)
  prefs: []
  type: TYPE_NORMAL
- en: apply IHt. eapply [context_invariance](Sub.html#context_invariance)...
  prefs: []
  type: TYPE_NORMAL
- en: intros z Hafi. unfold [update](Maps.html#update), [t_update](Maps.html#t_update).
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([beq_idP](Maps.html#beq_idP) y z)...
  prefs: []
  type: TYPE_NORMAL
- en: subst.
  prefs: []
  type: TYPE_NORMAL
- en: rewrite ← [beq_id_false_iff](Maps.html#beq_id_false_iff) in Hxy. rewrite Hxy...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* ttrue *)'
  prefs: []
  type: TYPE_NORMAL
- en: 'assert ([TBool](Sub.html#TBool) <: S)'
  prefs: []
  type: TYPE_NORMAL
- en: by apply ([typing_inversion_true](Sub.html#typing_inversion_true) _ _  Htypt)...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* tfalse *)'
  prefs: []
  type: TYPE_NORMAL
- en: 'assert ([TBool](Sub.html#TBool) <: S)'
  prefs: []
  type: TYPE_NORMAL
- en: by apply ([typing_inversion_false](Sub.html#typing_inversion_false) _ _  Htypt)...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* tif *)'
  prefs: []
  type: TYPE_NORMAL
- en: assert (([update](Maps.html#update) Γ x U) ⊢ t[1] ∈ [TBool](Sub.html#TBool)
  prefs: []
  type: TYPE_NORMAL
- en: ∧ ([update](Maps.html#update) Γ x U) ⊢ t[2] ∈ S
  prefs: []
  type: TYPE_NORMAL
- en: ∧ ([update](Maps.html#update) Γ x U) ⊢ t[3] ∈ S)
  prefs: []
  type: TYPE_NORMAL
- en: by apply ([typing_inversion_if](Sub.html#typing_inversion_if) _ _ _ _ _ Htypt).
  prefs: []
  type: TYPE_NORMAL
- en: inversion H as [H[1] [H[2] H[3]]].
  prefs: []
  type: TYPE_NORMAL
- en: apply IHt1 in H[1]. apply IHt2 in H[2]. apply IHt3 in H[3].
  prefs: []
  type: TYPE_NORMAL
- en: auto.
  prefs: []
  type: TYPE_NORMAL
- en: '- (* tunit *)'
  prefs: []
  type: TYPE_NORMAL
- en: 'assert ([TUnit](Sub.html#TUnit) <: S)'
  prefs: []
  type: TYPE_NORMAL
- en: by apply ([typing_inversion_unit](Sub.html#typing_inversion_unit) _ _  Htypt)...
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Theorem preservation : ∀t t'' T,'
  prefs: []
  type: TYPE_NORMAL
- en: empty ⊢ t ∈ T  →
  prefs: []
  type: TYPE_NORMAL
- en: t ⇒ t'  →
  prefs: []
  type: TYPE_NORMAL
- en: empty ⊢ t' ∈ T.
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  prefs: []
  type: TYPE_NORMAL
- en: intros t t' T HT.
  prefs: []
  type: TYPE_NORMAL
- en: remember [empty](Maps.html#empty) as Γ. generalize dependent HeqGamma.
  prefs: []
  type: TYPE_NORMAL
- en: generalize dependent t'.
  prefs: []
  type: TYPE_NORMAL
- en: induction HT;
  prefs: []
  type: TYPE_NORMAL
- en: intros t' HeqGamma HE; subst; inversion HE; subst...
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_App *)'
  prefs: []
  type: TYPE_NORMAL
- en: inversion HE; subst...
  prefs: []
  type: TYPE_NORMAL
- en: + (* ST_AppAbs *)
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([abs_arrow](Sub.html#abs_arrow) _ _ _ _ _ HT[1]) as [HA[1] HA[2]].
  prefs: []
  type: TYPE_NORMAL
- en: apply [substitution_preserves_typing](Sub.html#substitution_preserves_typing)
    with T...
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '{a:Nat, b:Nat} ----> {Nat,Nat}       i.e., (Nat,(Nat,Top))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{c:Nat, a:Nat} ----> {Nat,Top,Nat}   i.e., (Nat,(Top,(Nat,Top)))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Module ProductExtension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inductive ty : Type :='
  prefs: []
  type: TYPE_NORMAL
- en: '| TTop   : ty'
  prefs: []
  type: TYPE_NORMAL
- en: '| TBool  : ty'
  prefs: []
  type: TYPE_NORMAL
- en: '| TBase  : id → ty'
  prefs: []
  type: TYPE_NORMAL
- en: '| TArrow : ty → ty → ty'
  prefs: []
  type: TYPE_NORMAL
- en: '| TUnit  : ty'
  prefs: []
  type: TYPE_NORMAL
- en: '| TProd : ty → ty → ty.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inductive tm : Type :='
  prefs: []
  type: TYPE_NORMAL
- en: '| tvar : id → tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tapp : tm → tm → tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tabs : id → ty → tm → tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| ttrue : tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tfalse : tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tif : tm → tm → tm → tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tunit : tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tpair : tm → tm → tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tfst : tm → tm'
  prefs: []
  type: TYPE_NORMAL
- en: '| tsnd : tm → tm.'
  prefs: []
  type: TYPE_NORMAL
- en: (* Copy and extend and/or fill in required definitions and lemmas
  prefs: []
  type: TYPE_NORMAL
- en: here. *)
  prefs: []
  type: TYPE_NORMAL
- en: 'Theorem progress : ∀t T,'
  prefs: []
  type: TYPE_NORMAL
- en: empty ⊢ t ∈ T →
  prefs: []
  type: TYPE_NORMAL
- en: value t ∨ ∃t', t ⇒ t'.
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Theorem preservation : ∀t t'' T,'
  prefs: []
  type: TYPE_NORMAL
- en: empty ⊢ t ∈ T  →
  prefs: []
  type: TYPE_NORMAL
- en: t ⇒ t'  →
  prefs: []
  type: TYPE_NORMAL
- en: empty ⊢ t' ∈ T.
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  prefs: []
  type: TYPE_NORMAL
- en: End ProductExtension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
