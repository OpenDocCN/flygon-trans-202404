- en: SubSubtyping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Require Import Maps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Require Import Types.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Require Import Smallstep.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Person  = {name:String, age:Nat}
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Student = {name:String, age:Nat, gpa:Nat}
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (λr:Person. (r.age)+1) {name="Pat",age=21,gpa=1}
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: f : C → Student
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: g : (C→Person) → D
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: f : Person → C
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: g : (Student → C) → D
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '{name:String, age:Nat, gpa:Nat} <: {name:String, age:Nat}'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '{name:String, age:Nat} <: {name:String} {name:String} <: {}'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '{x:Student} <: {x:Person}'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '{name:String,age:Nat} <: {age:Nat,name:String}'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: f : Student → Nat
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: g : (Person → Nat) → Nat
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ∀S T,
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: S <: T  →
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: S→S   <:  T→T
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: ∀S,
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: S <: A→A →
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: ∃T,
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: S = T→T  ∧  T <: A
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: ∀S T[1] T[2],
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: (S <: T[1] → T[2]) →
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: ∃S[1] S[2],
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: S = S[1] → S[2]  ∧  T[1] <: S[1]  ∧  S[2] <: T[2]
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: ∃S,
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: S <: S→S
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: ∃S,
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: S→S <: S
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: ∀S T[1] T[2],
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: S <: T[1]*T[2] →
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: ∃S[1] S[2],
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: S = S[1]*S[2]  ∧  S[1] <: T[1]  ∧  S[2] <: T[2]
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: ∀T,
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: ~(T = TBool ∨ ∃n, T = TBase n) →
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: ∃S,
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: S <: T  ∧  S ≠ T
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: empty ⊢ (λp:T*Top. p.fst) ((λz:A.z), unit) : A→A
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: empty ⊢ (λp:(A→A * B→B). p) ((λz:A.z), (λz:B.z)) : T
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: a:A ⊢ (λp:(A*T). (p.snd) (p.fst)) (a , \z:A.z) : A
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ∃S,
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: empty ⊢ (λp:(A*T). (p.snd) (p.fst)) : S
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ∃S, ∃t,
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: empty ⊢ (λx:T. x x) t : S
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: empty ⊢ (λx:Top. x) ((λz:A.z) , (λz:B.z)) : T
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Inductive ty : Type :='
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '| TTop   : ty'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '| TBool  : ty'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '| TBase  : id → ty'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '| TArrow : ty → ty → ty'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '| TUnit  : ty'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: .
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Inductive tm : Type :='
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '| tvar : id → tm'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '| tapp : tm → tm → tm'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '| tabs : id → ty → tm → tm'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '| ttrue : tm'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '| tfalse : tm'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '| tif : tm → tm → tm → tm'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '| tunit : tm'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: .
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Fixpoint subst (x:id) (s:tm)  (t:tm) : tm :='
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: match t with
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '| tvar y ⇒'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: if beq_id x y then s else t
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '| tabs y T t[1] ⇒'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: tabs y T (if beq_id x y then t[1] else (subst x s t[1]))
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '| tapp t[1] t[2] ⇒'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: tapp (subst x s t[1]) (subst x s t[2])
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '| ttrue ⇒'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: ttrue
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '| tfalse ⇒'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: tfalse
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '| tif t[1] t[2] t[3] ⇒'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: tif (subst x s t[1]) (subst x s t[2]) (subst x s t[3])
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '| tunit ⇒'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: tunit
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: end.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Notation "'[' x ':=' s ']' t" := (subst x s t) (at level 20).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Inductive value : tm → Prop :='
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '| v_abs : ∀x T t,'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: value (tabs x T t)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '| v_true :'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: value ttrue
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '| v_false :'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: value tfalse
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '| v_unit :'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: value tunit
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: .
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Hint Constructors value.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Reserved Notation "t1 '⇒' t2" (at level 40).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'Inductive step : tm → tm → Prop :='
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_AppAbs : ∀x T t[12] v[2],'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: value v[2] →
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: (tapp (tabs x T t[12]) v[2]) ⇒ [x:=v[2]]t[12]
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_App1 : ∀t[1] t[1]'' t[2],'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: t[1] ⇒ t[1]' →
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: (tapp t[1] t[2]) ⇒ (tapp t[1]' t[2])
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_App2 : ∀v[1] t[2] t[2]'','
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: value v[1] →
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: t[2] ⇒ t[2]' →
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: (tapp v[1] t[2]) ⇒ (tapp v[1]  t[2]')
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_IfTrue : ∀t[1] t[2],'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: (tif ttrue t[1] t[2]) ⇒ t[1]
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_IfFalse : ∀t[1] t[2],'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: (tif tfalse t[1] t[2]) ⇒ t[2]
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '| ST_If : ∀t[1] t[1]'' t[2] t[3],'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: t[1] ⇒ t[1]' →
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: (tif t[1] t[2] t[3]) ⇒ (tif t[1]' t[2] t[3])
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: where "t1 '⇒' t2" := (step t[1] t[2]).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Hint Constructors step.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Reserved Notation "T '<:' U" (at level 40).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Inductive subtype : ty → ty → Prop :='
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '| S_Refl : ∀T,'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'T <: T'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '| S_Trans : ∀S U T,'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'S <: U →'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'U <: T →'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'S <: T'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '| S_Top : ∀S,'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'S <: TTop'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '| S_Arrow : ∀S[1] S[2] T[1] T[2],'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'T[1] <: S[1] →'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'S[2] <: T[2] →'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '(TArrow S[1] S[2]) <: (TArrow T[1] T[2])'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: where "T '<:' U" := (subtype T U).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Hint Constructors subtype.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Module Examples.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Notation x := (Id "x").
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Notation y := (Id "y").
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 y := (Id "y").
- en: Notation z := (Id "z").
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 z := (Id "z").
- en: Notation A := (TBase (Id "A")).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 A := (TBase (Id "A")).
- en: Notation B := (TBase (Id "B")).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 B := (TBase (Id "B")).
- en: Notation C := (TBase (Id "C")).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 C := (TBase (Id "C")).
- en: Notation String := (TBase (Id "String")).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 String := (TBase (Id "String")).
- en: Notation Float := (TBase (Id "Float")).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 Float := (TBase (Id "Float")).
- en: Notation Integer := (TBase (Id "Integer")).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 Integer := (TBase (Id "Integer")).
- en: 'Example subtyping_example_0 :'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 subtyping_example_0 :'
- en: '(TArrow C TBool) <: (TArrow C TTop).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '(TArrow C TBool) <: (TArrow C TTop).'
- en: (* C->Bool <: C->Top *)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: (* C->Bool <: C->Top *)
- en: Proof. auto. Qed.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Proof. auto. Qed.
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Person   := { name : String }
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Person   := { name : String }
- en: Student  := { name : String ;
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Student  := { name : String ;
- en: gpa  : Float }
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: gpa  : Float }
- en: Employee := { name : String ;
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Employee := { name : String ;
- en: ssn  : Integer }
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ssn  : Integer }
- en: '[PRE23]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Definition Person : ty'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 Person : ty'
- en: (* REPLACE THIS LINE WITH ":= _your_definition_ ." *). Admitted.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: (* 用你的定义替换这一行 *). Admitted.
- en: 'Definition Student : ty'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 Student : ty'
- en: (* REPLACE THIS LINE WITH ":= _your_definition_ ." *). Admitted.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: (* 用你的定义替换这一行 *). Admitted.
- en: 'Definition Employee : ty'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 Employee : ty'
- en: (* REPLACE THIS LINE WITH ":= _your_definition_ ." *). Admitted.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: (* 用你的定义替换这一行 *). Admitted.
- en: '[PRE24]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Example sub_student_person :'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 sub_student_person :'
- en: 'Student <: Person.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 'Student <: Person.'
- en: Proof.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Proof.
- en: (* FILL IN HERE *) Admitted.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *) Admitted.
- en: 'Example sub_employee_person :'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 sub_employee_person :'
- en: 'Employee <: Person.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 'Employee <: Person.'
- en: Proof.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Proof.
- en: (* FILL IN HERE *) Admitted.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *) Admitted.
- en: '[PRE25]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Example subtyping_example_1 :'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 subtyping_example_1 :'
- en: '(TArrow TTop Student) <: (TArrow (TArrow C C) Person).'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '(TArrow TTop Student) <: (TArrow (TArrow C C) Person).'
- en: (* Top->Student <: (C->C)->Person *)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: (* Top->Student <: (C->C)->Person *)
- en: Proof with eauto.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: (* FILL IN HERE *) Admitted.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *) Admitted.
- en: '[PRE26]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Example subtyping_example_2 :'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 subtyping_example_2 :'
- en: '(TArrow TTop Person) <: (TArrow Person TTop).'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '(TArrow TTop Person) <: (TArrow Person TTop).'
- en: (* Top->Person <: Person->Top *)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: (* Top->Person <: Person->Top *)
- en: Proof with eauto.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: (* FILL IN HERE *) Admitted.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *) Admitted.
- en: '[PRE27]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: End Examples.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: End Examples.
- en: '[PRE28]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Definition context := partial_map ty.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 定义上下文为部分映射 ty。
- en: Reserved Notation "Gamma '⊢' t '∈' T" (at level 40).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Reserved Notation "Gamma '⊢' t '∈' T" (at level 40).
- en: 'Inductive has_type : context → tm → ty → Prop :='
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 'Inductive has_type : context → tm → ty → Prop :='
- en: (* Same as before *)
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: (* 同上 *)
- en: '| T_Var : ∀Γ x T,'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '| T_Var : ∀Γ x T,'
- en: Γ x = Some T →
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Γ x = Some T →
- en: Γ ⊢ (tvar x) ∈ T
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ (tvar x) ∈ T
- en: '| T_Abs : ∀Γ x T[11] T[12] t[12],'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '| T_Abs : ∀Γ x T[11] T[12] t[12],'
- en: (update Γ x T[11]) ⊢ t[12] ∈ T[12] →
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: (update Γ x T[11]) ⊢ t[12] ∈ T[12] →
- en: Γ ⊢ (tabs x T[11] t[12]) ∈ (TArrow T[11] T[12])
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ (tabs x T[11] t[12]) ∈ (TArrow T[11] T[12])
- en: '| T_App : ∀T[1] T[2] Γ t[1] t[2],'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '| T_App : ∀T[1] T[2] Γ t[1] t[2],'
- en: Γ ⊢ t[1] ∈ (TArrow T[1] T[2]) →
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ t[1] ∈ (TArrow T[1] T[2]) →
- en: Γ ⊢ t[2] ∈ T[1] →
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ t[2] ∈ T[1] →
- en: Γ ⊢ (tapp t[1] t[2]) ∈ T[2]
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ (tapp t[1] t[2]) ∈ T[2]
- en: '| T_True : ∀Γ,'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '| T_True : ∀Γ,'
- en: Γ ⊢ ttrue ∈ TBool
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ ttrue ∈ TBool
- en: '| T_False : ∀Γ,'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '| T_False : ∀Γ,'
- en: Γ ⊢ tfalse ∈ TBool
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ tfalse ∈ TBool
- en: '| T_If : ∀t[1] t[2] t[3] T Γ,'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '| T_If : ∀t[1] t[2] t[3] T Γ,'
- en: Γ ⊢ t[1] ∈ TBool →
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ t[1] ∈ TBool →
- en: Γ ⊢ t[2] ∈ T →
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ t[2] ∈ T →
- en: Γ ⊢ t[3] ∈ T →
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ t[3] ∈ T →
- en: Γ ⊢ (tif t[1] t[2] t[3]) ∈ T
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ (tif t[1] t[2] t[3]) ∈ T
- en: '| T_Unit : ∀Γ,'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '| T_Unit : ∀Γ,'
- en: Γ ⊢ tunit ∈ TUnit
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ tunit ∈ TUnit
- en: (* New rule of subsumption *)
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: (* 子类型新规则 *)
- en: '| T_Sub : ∀Γ t S T,'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '| T_Sub : ∀Γ t S T,'
- en: Γ ⊢ t ∈ S →
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ t ∈ S →
- en: 'S <: T →'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 'S <: T →'
- en: Γ ⊢ t ∈ T
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ t ∈ T
- en: where "Gamma '⊢' t '∈' T" := (has_type Γ t T).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: where "Gamma '⊢' t '∈' T" := (has_type Γ t T).
- en: Hint Constructors has_type.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 提��� 构造 has_type。
- en: '[PRE29]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Hint Extern 2 (has_type _ (tapp _ _) _) ⇒
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 提示 外部 2 (has_type _ (tapp _ _) _) ⇒
- en: eapply T_App; auto.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 T_App; auto.
- en: Hint Extern 2 (_ = _) ⇒ compute; reflexivity.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 提示 外部 2 (_ = _) ⇒ 计算; 反射性。
- en: Module Examples2.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 Examples2。
- en: Import Examples.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 Examples。
- en: '[PRE30]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: (* empty |- ((λz:A.z), (λz:B.z))
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: (* 空 |- ((λz:A.z), (λz:B.z))
- en: : (A->A * B->B) *)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: : (A->A * B->B) *)
- en: (* FILL IN HERE *)
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *)
- en: '[PRE31]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: (* empty |- (λx:(Top * B->B). x.snd) ((λz:A.z), (λz:B.z))
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: (* 空 |- (λx:(Top * B->B). x.snd) ((λz:A.z), (λz:B.z))
- en: : B->B *)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: : B->B *)
- en: (* FILL IN HERE *)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *)
- en: '[PRE32]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: (* empty |- (λz:(C->C)->(Top * B->B). (z (λx:C.x)).snd)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: (* 空 |- (λz:(C->C)->(Top * B->B). (z (λx:C.x)).snd)
- en: (λz:C->C. ((λz:A.z), (λz:B.z)))
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: (λz:C->C. ((λz:A.z), (λz:B.z)))
- en: : B->B *)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: : (A->A * B->B) *)
- en: (* FILL IN HERE *)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *)
- en: '[PRE33]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: End Examples2.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: End Examples2.
- en: '[PRE34]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Lemma sub_inversion_Bool : ∀U,'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '引理 sub_inversion_Bool : ∀U,'
- en: 'U <: TBool →'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 'U <: TBool →'
- en: U = TBool.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: U = TBool.
- en: Proof with auto.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with auto.
- en: intros U Hs.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: intros U Hs.
- en: remember [TBool](Sub.html#TBool) as V.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 [TBool](Sub.html#TBool) 作为 V。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *) Admitted.
- en: '[PRE35]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Lemma sub_inversion_arrow : ∀U V[1] V[2],'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 'Lemma sub_inversion_arrow : ∀U V[1] V[2],'
- en: 'U <: (TArrow V[1] V[2]) →'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 'U <: (TArrow V[1] V[2]) →'
- en: ∃U[1], ∃U[2],
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: ∃U[1], ∃U[2],
- en: 'U = (TArrow U[1] U[2]) ∧ (V[1] <: U[1]) ∧ (U[2] <: V[2]).'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 'U = (TArrow U[1] U[2]) ∧ (V[1] <: U[1]) ∧ (U[2] <: V[2]).'
- en: Proof with eauto.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: intros U V[1] V[2] Hs.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: intros U V[1] V[2] Hs.
- en: remember ([TArrow](Sub.html#TArrow) V[1] V[2]) as V.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 ([TArrow](Sub.html#TArrow) V[1] V[2]) 作为 V。
- en: generalize dependent V[2]. generalize dependent V[1].
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 推广 V[1]。推广 V[2]。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *) Admitted.
- en: '[PRE36]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Lemma canonical_forms_of_arrow_types : ∀Γ s T[1] T[2],'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ s ∈ (TArrow T[1] T[2]) →
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: value s →
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: ∃x, ∃S[1], ∃s[2],
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: s = tabs x S[1] s[2].
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Lemma canonical_forms_of_Bool : ∀Γ s,'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ s ∈ TBool →
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: value s →
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: (s = ttrue ∨ s = tfalse).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ s Hty Hv.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: remember [TBool](Sub.html#TBool) as T.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: induction Hty; try solve_by_invert...
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: subst. apply [sub_inversion_Bool](Sub.html#sub_inversion_Bool) in H. subst...
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Theorem progress : ∀t T,'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: empty ⊢ t ∈ T →
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: value t ∨ ∃t', t ⇒ t'.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: intros t T Ht.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: remember [empty](Maps.html#empty) as Γ.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: revert HeqGamma.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: induction Ht;
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: intros HeqGamma; subst...
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Var *)'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: inversion H.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_App *)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: right.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHt1; subst...
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: + (* t[1] is a value *)
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHt2; subst...
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '* (* t[2] is a value *)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([canonical_forms_of_arrow_types](Sub.html#canonical_forms_of_arrow_types)
    [empty](Maps.html#empty) t[1] T[1] T[2])
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: as [x [S[1] [t[12] Heqt1]]]...
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: subst. ∃([x:=t[2]]t[12])...
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '* (* t[2] steps *)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: inversion H[0] as [t[2]' Hstp]. ∃([tapp](Sub.html#tapp) t[1] t[2]')...
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: + (* t[1] steps *)
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: inversion H as [t[1]' Hstp]. ∃([tapp](Sub.html#tapp) t[1]' t[2])...
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_If *)'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: right.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHt1.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: + (* t[1] is a value *) eauto.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: + assert (t[1] = [ttrue](Sub.html#ttrue) ∨ t[1] = [tfalse](Sub.html#tfalse))
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: by (eapply [canonical_forms_of_Bool](Sub.html#canonical_forms_of_Bool); eauto).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: inversion H[0]; subst...
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: + inversion H. rename x into t[1]'. eauto.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Lemma typing_inversion_abs : ∀Γ x S[1] t[2] T,'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tabs x S[1] t[2]) ∈ T →
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '(∃S[2], (TArrow S[1] S[2]) <: T'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: ∧ (update Γ x S[1]) ⊢ t[2] ∈ S[2]).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ x S[1] t[2] T H.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: remember ([tabs](Sub.html#tabs) x S[1] t[2]) as t.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: induction H;
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqt; subst; intros; try solve_by_invert.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Abs *)'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[12]...
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHhas_type as [S[2] [Hsub Hty]]...
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Lemma typing_inversion_var : ∀Γ x T,'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tvar x) ∈ T →
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: ∃S,
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: 'Γ x = Some S ∧ S <: T.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ x T Hty.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: remember ([tvar](Sub.html#tvar) x) as t.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: induction Hty; intros;
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqt; subst; try solve_by_invert.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Var *)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: ∃T...
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHty as [U [Hctx HsubU]]... Qed.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_app : ∀Γ t[1] t[2] T[2],'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tapp t[1] t[2]) ∈ T[2] →
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1],
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t[1] ∈ (TArrow T[1] T[2]) ∧
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ t[2] ∈ T[1].
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ t[1] t[2] T[2] Hty.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: remember ([tapp](Sub.html#tapp) t[1] t[2]) as t.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: induction Hty; intros;
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqt; subst; try solve_by_invert.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_App *)'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: ∃T[1]...
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '- (* T_Sub *)'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: destruct IHHty as [U[1] [Hty1 Hty2]]...
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_true : ∀Γ T,'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ ttrue ∈ T →
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: 'TBool <: T.'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ T Htyp. remember [ttrue](Sub.html#ttrue) as tu.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: induction Htyp;
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqtu; subst; intros...
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_false : ∀Γ T,'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ tfalse ∈ T →
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: 'TBool <: T.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Proof with eauto.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: intros Γ T Htyp. remember [tfalse](Sub.html#tfalse) as tu.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: induction Htyp;
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: inversion Heqtu; subst; intros...
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: 'Lemma typing_inversion_if : ∀Γ t[1] t[2] t[3] T,'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: Γ ⊢ (tif t[1] t[2] t[3]) ∈ T →
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ (tif t[1] t[2] t[3]) ∈ T →
- en: Γ ⊢ t[1] ∈ TBool
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ t[1] ∈ TBool
- en: ∧ Γ ⊢ t[2] ∈ T
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: ∧ Γ ⊢ t[2] ∈ T
- en: ∧ Γ ⊢ t[3] ∈ T.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: ∧ Γ ⊢ t[3] ∈ T.
- en: Proof with eauto.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: intros Γ t[1] t[2] t[3] T Hty.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: intros Γ t[1] t[2] t[3] T Hty.
- en: remember ([tif](Sub.html#tif) t[1] t[2] t[3]) as t.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: remember ([tif](Sub.html#tif) t[1] t[2] t[3]) as t.
- en: induction Hty; intros;
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: induction Hty; intros;
- en: inversion Heqt; subst; try solve_by_invert.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: inversion Heqt; subst; try solve_by_invert.
- en: '- (* T_If *)'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_If *)'
- en: auto.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: auto.
- en: '- (* T_Sub *)'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Sub *)'
- en: destruct (IHHty H[0]) as [H[1] [H[2] H[3]]]...
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: destruct (IHHty H[0]) as [H[1] [H[2] H[3]]]...
- en: Qed.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: Qed.
- en: 'Lemma typing_inversion_unit : ∀Γ T,'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 'Lemma typing_inversion_unit : ∀Γ T,'
- en: Γ ⊢ tunit ∈ T →
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ tunit ∈ T →
- en: 'TUnit <: T.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 'TUnit <: T.'
- en: Proof with eauto.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: intros Γ T Htyp. remember [tunit](Sub.html#tunit) as tu.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: intros Γ T Htyp. remember [tunit](Sub.html#tunit) as tu.
- en: induction Htyp;
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: induction Htyp;
- en: inversion Heqtu; subst; intros...
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: inversion Heqtu; subst; intros...
- en: Qed.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: Qed.
- en: '[PRE41]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Lemma abs_arrow : ∀x S[1] s[2] T[1] T[2],'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 'Lemma abs_arrow : ∀x S[1] s[2] T[1] T[2],'
- en: empty ⊢ (tabs x S[1] s[2]) ∈ (TArrow T[1] T[2]) →
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: empty ⊢ (tabs x S[1] s[2]) ∈ (TArrow T[1] T[2]) →
- en: 'T[1] <: S[1]'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 'T[1] <: S[1]'
- en: ∧ (update empty x S[1]) ⊢ s[2] ∈ T[2].
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: ∧ (update empty x S[1]) ⊢ s[2] ∈ T[2].
- en: Proof with eauto.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: intros x S[1] s[2] T[1] T[2] Hty.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: intros x S[1] s[2] T[1] T[2] Hty.
- en: apply [typing_inversion_abs](Sub.html#typing_inversion_abs) in Hty.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: apply [typing_inversion_abs](Sub.html#typing_inversion_abs) in Hty.
- en: inversion Hty as [S[2] [Hsub Hty1]].
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: inversion Hty as [S[2] [Hsub Hty1]].
- en: apply [sub_inversion_arrow](Sub.html#sub_inversion_arrow) in Hsub.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: apply [sub_inversion_arrow](Sub.html#sub_inversion_arrow) in Hsub.
- en: inversion Hsub as [U[1] [U[2] [Heq [Hsub1 Hsub2]]]].
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: inversion Hsub as [U[1] [U[2] [Heq [Hsub1 Hsub2]]]].
- en: inversion Heq; subst... Qed.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: inversion Heq; subst... Qed.
- en: '[PRE42]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Inductive appears_free_in : id → tm → Prop :='
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 'Inductive appears_free_in : id → tm → Prop :='
- en: '| afi_var : ∀x,'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '| afi_var : ∀x,'
- en: appears_free_in x (tvar x)
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x (tvar x)
- en: '| afi_app1 : ∀x t[1] t[2],'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '| afi_app1 : ∀x t[1] t[2],'
- en: appears_free_in x t[1] → appears_free_in x (tapp t[1] t[2])
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x t[1] → appears_free_in x (tapp t[1] t[2])
- en: '| afi_app2 : ∀x t[1] t[2],'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '| afi_app2 : ∀x t[1] t[2],'
- en: appears_free_in x t[2] → appears_free_in x (tapp t[1] t[2])
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x t[2] → appears_free_in x (tapp t[1] t[2])
- en: '| afi_abs : ∀x y T[11] t[12],'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '| afi_abs : ∀x y T[11] t[12],'
- en: y ≠ x  →
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: y ≠ x  →
- en: appears_free_in x t[12] →
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x t[12] →
- en: appears_free_in x (tabs y T[11] t[12])
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x (tabs y T[11] t[12])
- en: '| afi_if[1] : ∀x t[1] t[2] t[3],'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '| afi_if[1] : ∀x t[1] t[2] t[3],'
- en: appears_free_in x t[1] →
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x t[1] →
- en: appears_free_in x (tif t[1] t[2] t[3])
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x (tif t[1] t[2] t[3])
- en: '| afi_if[2] : ∀x t[1] t[2] t[3],'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '| afi_if[2] : ∀x t[1] t[2] t[3],'
- en: appears_free_in x t[2] →
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x t[2] →
- en: appears_free_in x (tif t[1] t[2] t[3])
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x (tif t[1] t[2] t[3])
- en: '| afi_if[3] : ∀x t[1] t[2] t[3],'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '| afi_if[3] : ∀x t[1] t[2] t[3],'
- en: appears_free_in x t[3] →
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x t[3] →
- en: appears_free_in x (tif t[1] t[2] t[3])
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x (tif t[1] t[2] t[3])
- en: .
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: Hint Constructors appears_free_in.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: Hint Constructors appears_free_in.
- en: 'Lemma context_invariance : ∀Γ Γ'' t S,'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 'Lemma context_invariance : ∀Γ Γ'' t S,'
- en: Γ ⊢ t ∈ S  →
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ t ∈ S  →
- en: (∀x, appears_free_in x t → Γ x = Γ' x)  →
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: (∀x, appears_free_in x t → Γ x = Γ' x)  →
- en: Γ' ⊢ t ∈ S.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: Γ' ⊢ t ∈ S.
- en: Proof with eauto.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: intros. generalize dependent Γ'.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: intros. generalize dependent Γ'.
- en: induction H;
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: induction H;
- en: intros Γ' Heqv...
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: intros Γ' Heqv...
- en: '- (* T_Var *)'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Var *)'
- en: apply [T_Var](Sub.html#T_Var)... rewrite ← Heqv...
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: apply [T_Var](Sub.html#T_Var)... rewrite ← Heqv...
- en: '- (* T_Abs *)'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Abs *)'
- en: apply [T_Abs](Sub.html#T_Abs)... apply IHhas_type. intros x[0] Hafi.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: apply [T_Abs](Sub.html#T_Abs)... apply IHhas_type. intros x[0] Hafi.
- en: unfold [update](Maps.html#update), [t_update](Maps.html#t_update). destruct
    ([beq_idP](Maps.html#beq_idP) x x[0])...
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: unfold [update](Maps.html#update), [t_update](Maps.html#t_update). destruct
    ([beq_idP](Maps.html#beq_idP) x x[0])...
- en: '- (* T_If *)'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_If *)'
- en: apply [T_If](Sub.html#T_If)...
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: apply [T_If](Sub.html#T_If)...
- en: Qed.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: Qed.
- en: 'Lemma free_in_context : ∀x t T Γ,'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 'Lemma free_in_context : ∀x t T Γ,'
- en: appears_free_in x t →
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: appears_free_in x t →
- en: Γ ⊢ t ∈ T →
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ t ∈ T →
- en: ∃T', Γ x = Some T'.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: ∃T', Γ x = Some T'.
- en: Proof with eauto.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: intros x t T Γ Hafi Htyp.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: intros x t T Γ Hafi Htyp.
- en: induction Htyp;
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: induction Htyp;
- en: subst; inversion Hafi; subst...
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: subst; inversion Hafi; subst...
- en: '- (* T_Abs *)'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Abs *)'
- en: destruct (IHHtyp H[4]) as [T Hctx]. ∃T.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: destruct (IHHtyp H[4]) as [T Hctx]. ∃T.
- en: unfold [update](Maps.html#update), [t_update](Maps.html#t_update) in Hctx.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: unfold [update](Maps.html#update), [t_update](Maps.html#t_update) in Hctx.
- en: rewrite ← [beq_id_false_iff](Maps.html#beq_id_false_iff) in H[2].
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: rewrite ← [beq_id_false_iff](Maps.html#beq_id_false_iff) in H[2].
- en: rewrite H[2] in Hctx... Qed.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: rewrite H[2] in Hctx... Qed.
- en: '[PRE43]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Lemma substitution_preserves_typing : ∀Γ x U v t S,'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 'Lemma substitution_preserves_typing : ∀Γ x U v t S,'
- en: (update Γ x U) ⊢ t ∈ S  →
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: (update Γ x U) ⊢ t ∈ S  →
- en: empty ⊢ v ∈ U   →
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: empty ⊢ v ∈ U   →
- en: Γ ⊢ ([x:=v]t) ∈ S.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ ([x:=v]t) ∈ S.
- en: Proof with eauto.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: intros Γ x U v t S Htypt Htypv.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: intros Γ x U v t S Htypt Htypv.
- en: generalize dependent S. generalize dependent Γ.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: generalize dependent S. generalize dependent Γ.
- en: induction t; intros; simpl.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: induction t; intros; simpl.
- en: '- (* tvar *)'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tvar *)'
- en: rename i into y.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: rename i into y.
- en: destruct ([typing_inversion_var](Sub.html#typing_inversion_var) _ _ _ Htypt)
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: destruct ([typing_inversion_var](Sub.html#typing_inversion_var) _ _ _ Htypt)
- en: as [T [Hctx Hsub]].
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: as [T [Hctx Hsub]].
- en: unfold [update](Maps.html#update), [t_update](Maps.html#t_update) in Hctx.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Hctx 中展开 [update](Maps.html#update), [t_update](Maps.html#t_update)。
- en: destruct ([beq_idP](Maps.html#beq_idP) x y) as [Hxy|Hxy]; eauto;
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 分解 ([beq_idP](Maps.html#beq_idP) x y) 得到 [Hxy|Hxy]; 自动;
- en: subst.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 替换。
- en: inversion Hctx; subst. clear Hctx.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Hctx 进行反演; 替换; 清除 Hctx。
- en: apply [context_invariance](Sub.html#context_invariance) with [empty](Maps.html#empty)...
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [context_invariance](Sub.html#context_invariance) 得�� [empty](Maps.html#empty)...
- en: intros x Hcontra.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 x Hcontra。
- en: destruct ([free_in_context](Sub.html#free_in_context) _ _ S [empty](Maps.html#empty)
    Hcontra)
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 分解 ([free_in_context](Sub.html#free_in_context) _ _ S [empty](Maps.html#empty)
    Hcontra)
- en: as [T' HT']...
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 得到 [T' HT']...
- en: inversion HT'.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 对 HT' 进行反演。
- en: '- (* tapp *)'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tapp *)'
- en: destruct ([typing_inversion_app](Sub.html#typing_inversion_app) _ _ _ _ Htypt)
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 分解 ([typing_inversion_app](Sub.html#typing_inversion_app) _ _ _ _ Htypt)
- en: as [T[1] [Htypt1 Htypt2]].
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 得到 [T[1] [Htypt1 Htypt2]]。
- en: eapply [T_App](Sub.html#T_App)...
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [T_App](Sub.html#T_App)...
- en: '- (* tabs *)'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tabs *)'
- en: rename i into y. rename t into T[1].
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名 i 为 y。重命名 t 为 T[1]。
- en: destruct ([typing_inversion_abs](Sub.html#typing_inversion_abs) _ _ _ _ _ Htypt)
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 分解 ([typing_inversion_abs](Sub.html#typing_inversion_abs) _ _ _ _ _ Htypt)
- en: as [T[2] [Hsub Htypt2]].
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 得到 [T[2] [Hsub Htypt2]]。
- en: apply [T_Sub](Sub.html#T_Sub) with ([TArrow](Sub.html#TArrow) T[1] T[2])...
    apply [T_Abs](Sub.html#T_Abs)...
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [T_Sub](Sub.html#T_Sub) 得到 ([TArrow](Sub.html#TArrow) T[1] T[2])... 应用 [T_Abs](Sub.html#T_Abs)...
- en: destruct ([beq_idP](Maps.html#beq_idP) x y) as [Hxy|Hxy].
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 分解 ([beq_idP](Maps.html#beq_idP) x y) 得到 [Hxy|Hxy]。
- en: + (* x=y *)
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: + (* x=y *)
- en: eapply [context_invariance](Sub.html#context_invariance)...
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [context_invariance](Sub.html#context_invariance)...
- en: subst.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 替换。
- en: intros x Hafi. unfold [update](Maps.html#update), [t_update](Maps.html#t_update).
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 x Hafi. 展开 [update](Maps.html#update), [t_update](Maps.html#t_update).
- en: destruct ([beq_id](Maps.html#beq_id) y x)...
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 分解 ([beq_id](Maps.html#beq_id) y x)...
- en: + (* x<>y *)
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: + (* x<>y *)
- en: apply IHt. eapply [context_invariance](Sub.html#context_invariance)...
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 IHt。通过 [context_invariance](Sub.html#context_invariance)...
- en: intros z Hafi. unfold [update](Maps.html#update), [t_update](Maps.html#t_update).
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 z Hafi. 展开 [update](Maps.html#update), [t_update](Maps.html#t_update).
- en: destruct ([beq_idP](Maps.html#beq_idP) y z)...
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 分解 ([beq_idP](Maps.html#beq_idP) y z)...
- en: subst.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 替换。
- en: rewrite ← [beq_id_false_iff](Maps.html#beq_id_false_iff) in Hxy. rewrite Hxy...
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [beq_id_false_iff](Maps.html#beq_id_false_iff) 重写 Hxy。重写 Hxy...
- en: '- (* ttrue *)'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* ttrue *)'
- en: 'assert ([TBool](Sub.html#TBool) <: S)'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '断言 [TBool](Sub.html#TBool) <: S'
- en: by apply ([typing_inversion_true](Sub.html#typing_inversion_true) _ _  Htypt)...
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 通过应用 ([typing_inversion_true](Sub.html#typing_inversion_true) _ _  Htypt)...
- en: '- (* tfalse *)'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tfalse *)'
- en: 'assert ([TBool](Sub.html#TBool) <: S)'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '断言 [TBool](Sub.html#TBool) <: S'
- en: by apply ([typing_inversion_false](Sub.html#typing_inversion_false) _ _  Htypt)...
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 通过应用 ([typing_inversion_false](Sub.html#typing_inversion_false) _ _  Htypt)
    得到...
- en: '- (* tif *)'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tif *)'
- en: assert (([update](Maps.html#update) Γ x U) ⊢ t[1] ∈ [TBool](Sub.html#TBool)
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 断言 (([update](Maps.html#update) Γ x U) ⊢ t[1] ∈ [TBool](Sub.html#TBool)
- en: ∧ ([update](Maps.html#update) Γ x U) ⊢ t[2] ∈ S
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: ∧ ([update](Maps.html#update) Γ x U) ⊢ t[2] ∈ S
- en: ∧ ([update](Maps.html#update) Γ x U) ⊢ t[3] ∈ S)
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: ∧ ([update](Maps.html#update) Γ x U) ⊢ t[3] ∈ S)
- en: by apply ([typing_inversion_if](Sub.html#typing_inversion_if) _ _ _ _ _ Htypt).
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 通过应用 ([typing_inversion_if](Sub.html#typing_inversion_if) _ _ _ _ _ Htypt) 得到。
- en: inversion H as [H[1] [H[2] H[3]]].
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 对 H 进行反演得到 [H[1] [H[2] H[3]]]。
- en: apply IHt1 in H[1]. apply IHt2 in H[2]. apply IHt3 in H[3].
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 对 H[1] 应用 IHt1。对 H[2] 应用 IHt2。对 H[3] 应用 IHt3。
- en: auto.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 自动。
- en: '- (* tunit *)'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tunit *)'
- en: 'assert ([TUnit](Sub.html#TUnit) <: S)'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '断言 [TUnit](Sub.html#TUnit) <: S'
- en: by apply ([typing_inversion_unit](Sub.html#typing_inversion_unit) _ _  Htypt)...
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 通过应用 ([typing_inversion_unit](Sub.html#typing_inversion_unit) _ _  Htypt)...
- en: Qed.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 完成。
- en: '[PRE44]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Theorem preservation : ∀t t'' T,'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '定理保持性 : ∀t t'' T,'
- en: empty ⊢ t ∈ T  →
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: empty ⊢ t ∈ T  →
- en: t ⇒ t'  →
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: t ⇒ t'  →
- en: empty ⊢ t' ∈ T.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: empty ⊢ t' ∈ T。
- en: Proof with eauto.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 证明使用 eauto。
- en: intros t t' T HT.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 t t' T HT.
- en: remember [empty](Maps.html#empty) as Γ. generalize dependent HeqGamma.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 [empty](Maps.html#empty) 为 Γ。推广 HeqGamma。
- en: generalize dependent t'.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 推广 t'.
- en: induction HT;
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳 HT;
- en: intros t' HeqGamma HE; subst; inversion HE; subst...
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 t' HeqGamma HE; 替换; 反演 HE; 替换...
- en: '- (* T_App *)'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_App *)'
- en: inversion HE; subst...
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 HE; 替换...
- en: + (* ST_AppAbs *)
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: + (* ST_AppAbs *)
- en: destruct ([abs_arrow](Sub.html#abs_arrow) _ _ _ _ _ HT[1]) as [HA[1] HA[2]].
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 分解 ([abs_arrow](Sub.html#abs_arrow) _ _ _ _ _ HT[1]) 得到 [HA[1] HA[2]]。
- en: apply [substitution_preserves_typing](Sub.html#substitution_preserves_typing)
    with T...
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [substitution_preserves_typing](Sub.html#substitution_preserves_typing) 得到
    T...
- en: Qed.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 完成。
- en: '[PRE45]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '{a:Nat, b:Nat} ----> {Nat,Nat}       i.e., (Nat,(Nat,Top))'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{a:Nat, b:Nat} ----> {Nat,Nat}       即，(Nat,(Nat,Top))'
- en: '{c:Nat, a:Nat} ----> {Nat,Top,Nat}   i.e., (Nat,(Top,(Nat,Top)))'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{c:Nat, a:Nat} ----> {Nat,Top,Nat}   即，(Nat,(Top,(Nat,Top)))'
- en: '[PRE46]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Module ProductExtension.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 ProductExtension。
- en: 'Inductive ty : Type :='
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '归纳 ty : Type :='
- en: '| TTop   : ty'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '| TTop   : ty'
- en: '| TBool  : ty'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '| TBool  : ty'
- en: '| TBase  : id → ty'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '| TBase  : id → ty'
- en: '| TArrow : ty → ty → ty'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '| TArrow : ty → ty → ty'
- en: '| TUnit  : ty'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '| TUnit  : ty'
- en: '| TProd : ty → ty → ty.'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '| TProd : ty → ty → ty.'
- en: 'Inductive tm : Type :='
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '归纳 tm : Type :='
- en: '| tvar : id → tm'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '| tvar : id → tm'
- en: '| tapp : tm → tm → tm'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '| tapp : tm → tm → tm'
- en: '| tabs : id → ty → tm → tm'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '| tabs : id → ty → tm → tm'
- en: '| ttrue : tm'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '| ttrue : tm'
- en: '| tfalse : tm'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '| tfalse : tm'
- en: '| tif : tm → tm → tm → tm'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '| tif : tm → tm → tm → tm'
- en: '| tunit : tm'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '| tunit : tm'
- en: '| tpair : tm → tm → tm'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '| tpair : tm → tm → tm'
- en: '| tfst : tm → tm'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '| tfst : tm → tm'
- en: '| tsnd : tm → tm.'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '| tsnd : tm → tm.'
- en: (* Copy and extend and/or fill in required definitions and lemmas
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: (* 复制并扩展和/或填写所需的定义和引理
- en: here. *)
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: here. *)
- en: 'Theorem progress : ∀t T,'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '定理 progress : ∀t T,'
- en: empty ⊢ t ∈ T →
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: empty ⊢ t ∈ T →
- en: value t ∨ ∃t', t ⇒ t'.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: value t ∨ ∃t', t ⇒ t'.
- en: Proof.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: Proof.
- en: (* FILL IN HERE *) Admitted.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *) 已承认。
- en: 'Theorem preservation : ∀t t'' T,'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '定理 preservation : ∀t t'' T,'
- en: empty ⊢ t ∈ T  →
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: empty ⊢ t ∈ T  →
- en: t ⇒ t'  →
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: t ⇒ t'  →
- en: empty ⊢ t' ∈ T.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: empty ⊢ t' ∈ T.
- en: Proof.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: Proof.
- en: (* FILL IN HERE *) Admitted.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *) 已承认。
- en: End ProductExtension.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: End ProductExtension.
- en: '[PRE47]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
