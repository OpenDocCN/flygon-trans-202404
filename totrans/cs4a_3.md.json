["```\ndef divisors (n, low, high):\n    '''Returns True if n has a divisor in the range from low to high.\n Otherwise returns False.'''\n    if low > high:\n        return False\n    elif n % low == 0: # Is n divisible by low?\n        return True\n    else:\n        return divisors (n , low + 1, high)\n\n```", "```\ndef isPrime (n):\n    '''For any n greater than or equal to 2,\n Returns True if n is prime. False if not.'''\n    if divisors (n, 2, n-1):\n        return False\n    else :\n        return True\n\n```", "```\ndef isPrime (n):\n    '''For any n greater than or equal to 2,\n Returns True if n is prime. False if not.'''\n    return not divisors (n, 2, n-1)\n\n```", "```\ndef listPrimes (n, limit):\n    '''Returns a list of prime numbers between n and limit.'''\n    if n == limit:\n        return []\n    elif isPrime (n):\n        return [n] + listPrimes (n+1, limit)\n    else:\n        return listPrimes (n+1, limit)\n\n```", "```\n>>> range(0,5)\n[0, 1, 2, 3, 4]\n>>> range(3,7)\n[3, 4, 5, 6]\n\n```", "```\n>>> list(range(0,5))\n[0, 1, 2, 3, 4]\n>>> list(range(3,7))\n[3, 4, 5, 6]\n\n```", "```\ndef primeSieve(numberList):\n    '''Returns the list of all primes in numberList, using a prime sieve algorithm.'''\n    if numberList == []:      # if the list is empty,\n        return []             # ...we're done\n    else:\n        prime = numberList[0]  # The first element is prime!\n        return [prime] + primeSieve(sift(prime, numberList[1:]))\n\n```", "```\ndef isNotDivisibleBy2(n):\n    '''Returns True if n is not divisible by 2,\n else returns False.'''\n\n    return n % 2 != 0\n\n```", "```\n>>> filter(isNotDivisibleBy2, range(3, 10))\n[3, 5, 7, 9]\n\n```", "```\n>>> list(filter(isNotDivisibleBy2, range(3, 10)))\n[3, 5, 7, 9]\n\n```", "```\ndef isBad(word):\n    '''Returns True if the length of \"word\" is 4, else returns False.'''\n\n    return len(word) == 4\n\n```", "```\n>>> list(filter(isBad, ['ugh', 'darn', 'heck', 'spam', 'zyzzyva']))\n['darn', 'heck', 'spam']\n\n```", "```\ndef isNotDivisibleBy3(n):\n    '''Returns True if n is not divisible by 3, else returns False.'''\n    return n % 3 != 0\n\n```", "```\ndef isNotDivisibleBy(n, d):\n    '''Returns True if n is not divisible by d, else returns False.'''\n    return n % d != 0\n\n```", "```\n>>> filter(lambda n: n % 2 != 0, range(0, 1001))\n\n```"]