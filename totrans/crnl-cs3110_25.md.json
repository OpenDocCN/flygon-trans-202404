["```\n(* AF: (p,q) represents the rational number p/q\n   RI: q is not 0 and either p=0 or gcd(p,q)=1 *)\ntype rational = int*int\n\n(* Creates the rational number p/q.\n * Checks: q is not 0 *)\nlet create(p:int, q:int) : rational = ...\nlet toReal(r: rational): real = ...\n...\n(* plus(r1,r2) is r1 + r2\\. *)\nlet plus(r1: rational, r2: rational) : rational = ...\n\n```", "```\n(* Return the maximum element in the list. *)\nlet max: int list -> int\n\n```", "```\n(* copy(s1,s2): add all the elements of s2 into the set s1 *)\nlet copy: set * set -> unit\n...\n(* test case: *)\nlet s: set = ...\ncopy(s,s)\n\n```", "```\nlet union(s1, s2) =\n  fold_left (function (x,s) -> if contains(x,s) then s else x::s) s1 s2\n\n```"]