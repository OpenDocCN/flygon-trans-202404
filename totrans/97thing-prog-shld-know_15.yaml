- en: Coding with Reason
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以理性编码
- en: Coding with Reason
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以理性编码
- en: 'Trying to reason about software correctness by hand results in a formal proof
    that is longer than the code and is more likely to contain errors than the code.
    Automated tools are preferable, but not always possible. What follows describes
    a middle path: reasoning semi-formally about correctness.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 试图手工推理软件正确性会导致一个比代码更长的形式证明，并且更有可能包含错误。自动化工具更可取，但并非总是可行。接下来描述了一种中间路径：对正确性进行半形式推理。
- en: The underlying approach is to divide all the code under consideration into short
    sections — from a single line, such as a function call, to blocks of less than
    ten lines — and arguing about their correctness. The arguments need only be strong
    enough to convince your devil's advocate peer programmer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 底层方法是将考虑中的所有代码划分为短部分 —— 从单行，例如函数调用，到少于十行的块 —— 并对其正确性进行论证。这些论点只需要足够强大，以说服您的恶魔倡导者同行程序员。
- en: A section should be chosen so that at each endpoint the *state of the program*
    (namely, the program counter and the values of all "living" objects) satisfies
    an easily described property, and that the functionality of that section (state
    transformation) is easy to describe as a single task — these will make reasoning
    simpler. Such endpoint properties generalize concepts like *precondition* and
    *postcondition* for functions, and *invariant* for loops and classes (with respect
    to their instances). Striving for sections to be as independent of one another
    as possible simplifies reasoning and is indispensable when these sections are
    to be modified.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 应选择一个部分，以便在每个端点处，程序的*状态*（即，程序计数器和所有“活动”对象的值）满足一个易于描述的属性，并且该部分的功能（状态转换）易于描述为单个任务
    — 这将使推理更简单。这样的端点属性推广了函数的*前置条件*和*后置条件*以及循环和类（关于它们的实例）的*不变条件*等概念。努力使各个部分尽可能独立于彼此将简化推理，并且在修改这些部分时是不可或缺的。
- en: 'Many of the coding practices that are well known (although perhaps less well
    followed) and considered ''good'' make reasoning easier. Hence, just by intending
    to reason about your code, you already start thinking toward a better style and
    structure. Unsurprisingly, most of these practices can be checked by static code
    analyzers:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 许多众所周知的编码实践（尽管可能不那么遵循）并被认为是“好”的使推理变得更容易。因此，只要打算推理您的代码，您就已经开始朝着更好的风格和结构思考。毫不奇怪，大多数这些实践都可以通过静态代码分析器进行检查：
- en: Avoid using goto statements, as they make remote sections highly interdependent.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 避免使用goto语句，因为它们会使远程部分高度相互依赖。
- en: Avoid using modifiable global variables, as they make all sections that use
    them dependent.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 避免使用可修改的全局变量，因为它们使使用它们的所有部分都依赖于它们。
- en: Each variable should have the smallest possible scope. For example, a local
    object can be declared right before its first usage.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个变量的作用域应尽可能小。例如，可以在其第一次使用之前直接声明局部对象。
- en: Make objects *immutable* whenever relevant.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只要相关，就使对象*不可变*。
- en: Make the code readable by using spacing, both horizontal and vertical. For example,
    aligning related structures and using an empty line to separate two sections.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用水平和垂直间距使代码可读。例如，对齐相关结构并使用空行来分隔两个部分。
- en: Make the code self-documenting by choosing descriptive (but relatively short)
    names for objects, types, functions, etc.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择描述性（但相对较短）的名称来使代码自我说明，用于对象、类型、函数等。
- en: If you need a nested section, make it a function.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要嵌套部分，请将其设为函数。
- en: Make your functions short and focused on a single task. The old *24-line limit*
    still applies. Although screen size and resolution have changed, nothing has changed
    in human cognition since the 1960s.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使您的函数简短且专注于单个任务。旧的*24行限制*仍然适用。尽管屏幕大小和分辨率已经改变，但人类认知自1960年代以来并没有改变。
- en: 'Functions should have few parameters (four is a good upper bound). This does
    not restrict the data communicated to functions: Grouping related parameters into
    a single object benefits from *object invariants* and saves reasoning, such as
    their coherence and consistency.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数应具有较少的参数（四个是良好的上限）。这不限制向函数传递的数据：将相关参数分组到单个对象中有利于*对象不变式*，并节省了推理，如它们的一致性和一致性。
- en: More generally, each unit of code, from a block to a library, should have a
    *narrow interface*. Less communication reduces the reasoning required. This means
    that *getters* that return internal state are a liability — don't ask an object
    for information to work with. Instead, ask the object to do the work with the
    information it already has. In other words, *encapsulation* is all — and only
    — about *narrow interfaces*.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更一般地说，从一个代码块到一个库，每个单元都应该有一个*窄接口*。减少通信可以减少所需的推理。这意味着返回内部状态的*获取器*是一种负担 — 不要向对象请求要处理的信息。相反，要求对象使用它已经拥有的信息来完成工作。换句话说，*封装*
    就是一切 — 也只是关于*窄接口*。
- en: In order to preserve class *invariants*, usage of *setters* should be discouraged,
    as *setters* tend to allow invariants that govern an object's state to be broken.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了保持类的*不变性*，应该避免使用*设置器*，因为*设置器*往往会允许破坏对象状态的不变性。
- en: As well as reasoning about its correctness, arguing about your code gives you
    understanding of it. Communicate the insights you gain for everyone's benefit.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对其正确性进行推理，对代码进行讨论也可以让你理解它。分享你获得的见解，让每个人受益。
- en: By [Yechiel Kimchi](http://programmer.97things.oreilly.com/wiki/index.php/Yechiel_Kimchi)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Yechiel Kimchi](http://programmer.97things.oreilly.com/wiki/index.php/Yechiel_Kimchi)
