["```\ntype ThreeState = \n    | Checked\n    | Unchecked\n    | Unknown \n```", "```\ntype Direction = \n    | North\n    | East\n    | South\n    | West \n```", "```\ntype Speed = \n    | Slow\n    | Fast\n\ntype Velocity = {\n    direction: Direction\n    speed: Speed \n    } \n```", "```\n{direction=North; speed=Slow}; {direction=North; speed=Fast}\n{direction=East;  speed=Slow}; {direction=East;  speed=Fast}\n{direction=South; speed=Slow}; {direction=South; speed=Fast}\n{direction=West;  speed=Slow}; {direction=West;  speed=Fast} \n```", "```\ntype RecordType = {\n    a : TypeA\n    b : TypeB } \n```", "```\nsize(RecordType) = size(TypeA) * size(TypeB) \n```", "```\ntype TupleType = TypeA * TypeB \n```", "```\nsize(TupleType) = size(TypeA) * size(TypeB) \n```", "```\ntype Movement = \n    | Moving of Direction\n    | NotMoving \n```", "```\nMoving North\nMoving East\nMoving South\nMoving West\nNotMoving \n```", "```\ntype ThingsYouCanSay =\n    | Yes\n    | Stop\n    | Goodbye\n\ntype ThingsICanSay =\n    | No\n    | GoGoGo\n    | Hello\n\ntype HelloGoodbye = \n    | YouSay of ThingsYouCanSay \n    | ISay of ThingsICanSay \n```", "```\nYouSay Yes\nISay No\nYouSay Stop\nISay GoGoGo\nYouSay Goodbye\nISay Hello \n```", "```\ntype SumType = \n    | CaseA of TypeA\n    | CaseB of TypeB \n```", "```\nsize(SumType) = size(TypeA) + size(TypeB) \n```", "```\ntype Optional<'a> =   \n    | Something of 'a\n    | Nothing \n```", "```\nsize(Optional<'a>) = size('a) + 1 \n```", "```\ntype Either<'a,'b> =   \n    | Left of 'a\n    | Right of 'b \n```", "```\nsize(Either<'a,'b>) = size('a) + size('b) \n```", "```\ntype LinkedList<'a> = \n    | Empty\n    | Node of head:'a * tail:LinkedList<'a> \n```", "```\nlet S = size(LinkedList<'a>)\nlet N = size('a) \n```", "```\nS = \n    1         // Size of \"Empty\" case \n    +         // Union type\n    N * S     // Size of \"Cell\" case using tuple size calculation \n```", "```\nS = 1 + (N * S) \n```", "```\nS = 1 + (N * (1 + (N * S))) \n```", "```\nS = 1 + N + (N^2 * S) \n```", "```\nS = 1 + N + (N^2 * (1 + (N * S))) \n```", "```\nS = 1 + N + N^2 + (N^3 * S) \n```", "```\nS = 1 + N + N^2 + N^3 + N^4 + N^5 + ... \n```", "```\ntype Suit = Heart | Spade | Diamond | Club\ntype Color = Red | Black\n\ntype SuitColor = Suit -> Color \n```", "```\n(Heart -> Red); (Spade -> Red); (Diamond -> Red); (Club -> Red) \n```", "```\n(Heart -> Red); (Spade -> Red); (Diamond -> Red); (Club -> Black) \n```", "```\n(Heart -> Red); (Spade -> Red); (Diamond -> Red); (Club -> Red)\n(Heart -> Red); (Spade -> Red); (Diamond -> Red); (Club -> Black)\n(Heart -> Red); (Spade -> Red); (Diamond -> Black); (Club -> Red)\n(Heart -> Red); (Spade -> Red); (Diamond -> Black); (Club -> Black)\n\n(Heart -> Red); (Spade -> Black); (Diamond -> Red); (Club -> Red)\n(Heart -> Red); (Spade -> Black); (Diamond -> Red); (Club -> Black)  // the right one!\n(Heart -> Red); (Spade -> Black); (Diamond -> Black); (Club -> Red)\n(Heart -> Red); (Spade -> Black); (Diamond -> Black); (Club -> Black)\n\n(Heart -> Black); (Spade -> Red); (Diamond -> Red); (Club -> Red)\n(Heart -> Black); (Spade -> Red); (Diamond -> Red); (Club -> Black)\n(Heart -> Black); (Spade -> Red); (Diamond -> Black); (Club -> Red)\n(Heart -> Black); (Spade -> Red); (Diamond -> Black); (Club -> Black)\n\n(Heart -> Black); (Spade -> Black); (Diamond -> Red); (Club -> Red)\n(Heart -> Black); (Spade -> Black); (Diamond -> Red); (Club -> Black)\n(Heart -> Black); (Spade -> Black); (Diamond -> Black); (Club -> Red)\n(Heart -> Black); (Spade -> Black); (Diamond -> Black); (Club -> Black) \n```", "```\ntype SuitColorImplementation = {\n    Heart : Color\n    Spade : Color\n    Diamond : Color\n    Club : Color } \n```", "```\nsize(SuitColorImplementation) = size(Color) * size(Color) * size(Color) * size(Color) \n```", "```\nsize(SuitColorImplementation) = size(Color) to the power of size(Suit) \n```", "```\ntype Function<'input,'output> = 'input -> 'output \n```", "```\nsize(Function) =  size(output) ^ size(input) \n```", "```\ntype YesNoUnion = \n    | Yes\n    | No\n\ntype YesNoRecord = { \n    isYes: bool } \n```", "```\nlet toUnion yesNoRecord =\n    if yesNoRecord.isYes then \n        Yes\n    else\n        No\n\nlet toRecord yesNoUnion =\n    match yesNoUnion with\n    | Yes -> {isYes = true}\n    | No ->  {isYes = false} \n```", "```\ntype YesNoMaybe = \n    | Yes\n    | No\n    | Maybe \n```", "```\ntype YesNoOption = { maybeIsYes: bool option } \n```", "```\nlet toYesNoMaybe yesNoOption =\n    match yesNoOption.maybeIsYes with\n    | None -> Maybe\n    | Some b -> if b then Yes else No\n\nlet toYesNoOption yesNoMaybe =\n    match yesNoMaybe with\n    | Yes ->   {maybeIsYes = Some true}\n    | No ->    {maybeIsYes = Some false}\n    | Maybe -> {maybeIsYes = None} \n```", "```\ntype Nibble = {\n    bit1: bool\n    bit2: bool\n    bit3: bool\n    bit4: bool }\n\ntype TwoNibbles = {\n    high: Nibble\n    low: Nibble } \n```", "```\ntype StringToDirection_V1 = \n    | North\n    | East\n    | South\n    | West\n    | Empty    \n    | NotValid\n    | TooLong \n```", "```\ntype Direction = \n    | North\n    | East\n    | South\n    | West\n\ntype ConversionFailure = \n    | Empty    \n    | NotValid\n    | TooLong\n\ntype StringToDirection_V2 = \n    | Success of Direction\n    | Failure of ConversionFailure \n```", "```\ntype Something_V1 =\n    | CaseA1 of TypeX * TypeY\n    | CaseA2 of TypeX * TypeZ \n```", "```\ntype Inner =\n    | CaseA1 of TypeY\n    | CaseA2 of TypeZ\n\ntype Something_V2 = \n    TypeX * Inner \n```", "```\ntype Something_V3 = {\n    x: TypeX\n    inner: Inner } \n```", "```\nmodule Customer_V1 =\n\n    type UserInfo = {name:string} //etc\n    type SessionId = SessionId of int\n\n    type WebsiteUser = \n        | RegisteredUser of SessionId * UserInfo\n        | GuestUser of SessionId \n```", "```\nmodule Customer_V2 =\n\n    type UserInfo = {name:string} //etc\n    type SessionId = SessionId of int\n\n    type WebsiteUserInfo = \n        | RegisteredUser of UserInfo\n        | GuestUser \n\n    type WebsiteUser = {\n        sessionId : SessionId\n        info: WebsiteUserInfo } \n```", "```\ntype DomainCustomer = {\n    Name: String50\n    Email: EmailAddress\n    Age: PositiveIntegerLessThan130 } \n```", "```\ntype CustomerDTO = {\n    Name: string\n    Email: string\n    Age: int } \n```"]