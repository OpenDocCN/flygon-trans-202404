["```\n> (read)\n123\n123 \n```", "```\n> (define a (read))\n123\na\n> a\n123 \n```", "```\n> (define a (read))\n(+ 1 2)\na\n> a\n(+ 1 2)\n> (equal? a '(+ 1 2))\n#t \n```", "```\n> (calc)\ncalc: \n```", "```\n(define (calc)\n  (display \"calc: \")\n  (flush)\n  (print (calc-eval (read)))\n  (calc)) \n```", "```\ncalc: 42\n42 \n```", "```\n(define (calc-eval exp)\n    (cond ((number? exp) exp)\n          ((list? exp) \n           (calc-apply (car exp)\n                       (map calc-eval (cdr exp))))\n          (else (error \"Calc: bad expression:\" exp)))) \n```", "```\ncalc: (* 2 3 10) \n```", "```\n(define (calc-eval exp)\n  (cond ((number? exp) exp)\n        ((list? exp)\n         (calc-apply (car exp)\n                     (map calc-eval (cdr exp))))\n        (else (error \"Calc: bad expression:\" exp)))) \n```", "```\n(calc-eval '(* 2 3 10)) \n```", "```\n(define (calc-apply fn args)\n  (cond ((eq? fn '+) (accumulate + 0 args))\n        ((eq? fn '-) (cond ((null? args) (error \"Calc: no args to -\"))\n                           ((= (length args) 1) (- (car args)))\n                           (else (- (car args) (accumulate + 0 (cdr args))))))\n        ((eq? fn '*) (accumulate * 1 args))\n        ((eq? fn '/) (cond ((null? args) (error \"Calc: no args to /\"))\n                           ((= (length args) 1) (/ (car args)))\n                           (else (/ (car args) (accumulate * 1 (cdr args))))))\n        (else (error \"Calc: bad operator:\" fn)))) \n```", "```\n(define (calc-eval exp)\n  (cond ((number? exp) exp)\n        ((list? exp)\n         (calc-apply (car exp)\n                     (map calc-eval (cdr exp))))\n        (else (error \"Calc: bad expression:\" exp)))) \n```", "```\n(calc-eval '(+ 4 5 (* 10 2) 7)) \n```"]