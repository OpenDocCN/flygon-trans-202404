- en: “nil slice” vs “nil map”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “nil slice” vs “nil map”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Slice and map are all reference types in `Go`, and their default values are
    `nil`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The result is like this：
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When a slice''s value is `nil`, you could also do operations on it, such as
    `append`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The result is like this：
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A caveat you should notice is the length of both `nil` and empty slice is `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The result is like this：
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: So you should compare the slice's value with `nil` to check whether it is a
    `nil`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accessing a `nil` map is OK, but storing a `nil` map cause program panic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'So the best practice is to initialize a `map` before using it, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'BTW, you should use the following pattern to check whether there is an element
    in map or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Go Programming Language](http://www.gopl.io/).'
  prefs: []
  type: TYPE_NORMAL
