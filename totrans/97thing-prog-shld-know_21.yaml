- en: Distinguish Business Exceptions from Technical
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区分业务异常和技术异常
- en: Distinguish Business Exceptions from Technical
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区分业务异常和技术异常
- en: 'There are basically two reasons that things go wrong at runtime: technical
    problems that prevent us from using the application and business logic that prevents
    us from misusing the application. Most modern languages, such as LISP, Java, Smalltalk,
    and C#, use exceptions to signal both these situations. However, the two situations
    are so different that they should be carefully held apart. It is a potential source
    of confusion to represent them both using the same exception hierarchy, not to
    mention the same exception class.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时出现问题基本上有两个原因：技术问题阻止我们使用应用程序和业务逻辑阻止我们误用应用程序。大多数现代语言，如LISP、Java、Smalltalk和C#，都使用异常来表示这两种情况。然而，这两种情况是如此不同，它们应该被仔细区分开来。使用相同的异常层次结构来表示它们两者，更不用说相同的异常类，可能会导致混淆。
- en: An unresolvable technical problem can occur when there is a programming error.
    For example, if you try to access element 83 from an array of size 17, then the
    program is clearly off track, and some exception should result. The subtler version
    is calling some library code with inappropriate arguments, causing the same situation
    on the inside of the library.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现编程错误时，可能会出现无法解决的技术问题。例如，如果你尝试从大小为17的数组中访问第83个元素，那么程序显然偏离了轨道，应该产生一些异常。更微妙的情况是使用不当的参数调用某些库代码，导致库内部发生相同的情况。
- en: It would be a mistake to attempt to resolve these situations you caused yourself.
    Instead we let the exception bubble up to the highest architectural level and
    let some general exception-handling mechanism do what it can to ensure the system
    is in a safe state, such as rolling back a transaction, logging and alerting administration,
    and reporting back (politely) to the user.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试解决你自己造成的这些情况是一个错误。相反，我们让异常上升到最高的架构级别，并让一些通用的异常处理机制尽力确保系统处于安全状态，比如回滚事务、记录和警报管理人员，并向用户报告（礼貌地）。
- en: 'A variant of this situation is when you are in the "library situation" and
    a caller has broken the contract of your method, e.g., passing a totally bizarre
    argument or not having a dependent object set up properly. This is on a par with
    accessing 83rd element from 17: the caller should have checked; not doing so is
    a programmer error on the client side. The proper response is to throw a technical
    exception.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况的变体是当你处于“库情况”下，调用者违反了你方法的契约，例如，传递了完全奇怪的参数或者没有正确设置依赖对象。这与从17个元素中访问第83个元素类似：调用者应该进行检查；不这样做是客户端的程序员错误。正确的响应是抛出技术异常。
- en: 'A different, but still technical, situation is when the program cannot proceed
    because of a problem in the execution environment, such as an unresponsive database.
    In this situation you must assume that the infrastructure did what it could to
    resolve the situation — repairing connections and retrying a reasonable number
    of times — and failed. Even if the cause is different, the situation for the calling
    code is similar: there is little it can do about it. So, we signal the situation
    through an exception that we let bubble up to the general exception handling mechanism.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种不同但仍然是技术问题的情况是，程序由于执行环境中的问题（如无响应的数据库）而无法继续。在这种情况下，你必须假设基础设施已尽力解决问题——修复连接并重试合理次数——但失败了。即使原因不同，对调用代码的情况是相似的：它几乎无能为力。因此，我们通过异常信号这种情况，让它上升到通用异常处理机制。
- en: In contrast to these, we have the situation where you cannot complete the call
    for a domain-logical reason. In this case we have encountered a situation that
    is an exception, i.e., unusual and undesirable, but not bizarre or programmatically
    in error. For example, if I try to withdraw money from an account with insufficient
    funds. In other words, this kind of situation is a part of the contract, and throwing
    an exception is just an *alternative return path* that is part of the model and
    that the client should be aware of and be prepared to handle. For these situations
    it is appropriate to create a specific exception or a separate exception hierarchy
    so that the client can handle the situation on its own terms.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相反，我们有一种情况，即由于领域逻辑原因无法完成调用。在这种情况下，我们遇到了一种异常情况，即异常，即不寻常且不希望的情况，但不是奇异或在程序上出错。例如，如果我尝试从余额不足的账户中取款。换句话说，这种情况是契约的一部分，抛出异常只是模型的一种*替代返回路径*，客户端应该知道并准备处理。对于这些情况，创建特定异常或单独的异常层次结构以便客户端根据自己的条款处理情况是合适的。
- en: Mixing technical exceptions and business exceptions in the same hierarchy blurs
    the distinction and confuses the caller about what the method contract is, what
    conditions it is required to ensure before calling, and what situations it is
    supposed to handle. Separating the cases gives clarity and increases the chances
    that technical exceptions will be handled by some application framework, while
    the business domain exceptions actually are considered and handled by the client
    code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 将技术异常和业务异常混合在同一层次结构中会模糊区分并使调用者困惑，不清楚方法契约是什么，调用前需要确保什么条件，以及应该处理什么情况。将这些情况分开可以提高清晰度，并增加技术异常由某些应用程序框架处理的机会，而业务域异常实际上是由客户端代码考虑和处理的。
- en: By [Dan Bergh Johnsson](http://programmer.97things.oreilly.com/wiki/index.php/Dan_Bergh_Johnsson)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[丹·贝尔格·约翰森](http://programmer.97things.oreilly.com/wiki/index.php/Dan_Bergh_Johnsson)
