- en: The Environment Model of Evaluation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Environment Model of Evaluation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](http://www-tc.pbs.org/wgbh/americanexperience/media/uploads/collections/he
    roImages/environment_film_landing.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous subsection, we learned that we can no longer use the substitution
    model of evaluation once we use assignments. The new model that will be used from
    now on is called the **environment model of evaluation**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go through the example to see how this new model works. We define a
    simple `square` procedure and call it on `7`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'What happens? The substitution model states:'
  prefs: []
  type: TYPE_NORMAL
- en: Substitute the actual argument value(s) for the formal parameter(s) in the body
    of the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate the resulting expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this example, the substitution of `7` for `x` in `(* x x)` gives `(* 7 7)`.
    In step 2 we evaluate that expression to get the result, `49`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s put the substitution model aside and take a look at the more complete
    and comprehensive **environment model**:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a frame with the formal parameter(s) bound to the actual argument values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use this frame to extend the lexical environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate the body in the resulting environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A **frame** is a collection of name-value associations, or **bindings**. In
    our example, the frame has one binding that binds `x` to `7`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's skip step 2 for a moment and think about step 3\. The idea is that we
    are going to evaluate the expression `(* x x)`, but we are reﬁning our notion
    of what it means to "evaluate" an expression. Expressions are no longer evaluated
    in a vacuum, but instead, every evaluation must be done with respect to some environment.
  prefs: []
  type: TYPE_NORMAL
- en: An **environment** can be described as some collection of bindings between names
    and values. When we are evaluating `(* x x)` and we see the symbol `x`, we want
    to be able to look up `x` in our collection of bindings and ﬁnd the value `7`.
    Looking up the value bound to a symbol is something we've done before with global
    variables. What's new is that instead of one central collection of bindings we
    now have the possibility of **local environments**. The symbol `x` isn't always
    `7`. That's only the case during this one invocation of `square`. So, step 3 means
    to evaluate the expression in the way that we've always understood, but looking
    up names in a particular place.
  prefs: []
  type: TYPE_NORMAL
- en: What's step 2 about? The point is that we can't evaluate `(* x x)` in an environment
    with nothing but the `x` to `7` binding, because we also have to look up a value
    for the symbol `*` (namely, the multiplication function). So, we create a new
    frame in step 1, but that frame isn't an environment by itself. Instead we use
    the new frame to extend an environment that already existed.
  prefs: []
  type: TYPE_NORMAL
- en: Which old environment do we extend? In the `square` example, there is only one
    candidate, the **global environment**. But in more complicated situations there
    may be several environments available.
  prefs: []
  type: TYPE_NORMAL
- en: Rules for the Environment Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will go over the rules for the environment model for different cases.
    Before we proceed, keep in mind that:'
  prefs: []
  type: TYPE_NORMAL
- en: Every expression is either an **atom** or a **list**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At any time there is a current frame, initially the global frame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expressing Atoms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s get some perspective on how we expression atomic values:'
  prefs: []
  type: TYPE_NORMAL
- en: Numbers, strings, `#t`, and `#f` are self-evaluating.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the expression is a symbol, find the **first available** binding. (That is,
    look in the current frame; if not found there, look in the frame "behind" the
    current frame; and so on until the global frame is reached.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/f4668433759407c7a43fd68da3d184dd.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Procedure Invocation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What about procedures? How does the evaluation deal with expressions that invoke
    procedures?
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate all the subexpressions (using these same rules).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the procedure (the value of the first subexpression) to the arguments
    (the values of the other subexpressions).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the procedure is compound (user-defined):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a frame with the formal parameters of the procedure bound to the actual
    argument values.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Extend the procedure's defining environment with this new frame.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate the procedure body, using the new frame as the current frame.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the procedure is primitive:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply it by magic. **ONLY COMPOUND PROCEDURE INVOCATIONS CREATES A NEW FRAME.**
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/918ba20c9909a0637277685ab7ab61e8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Procedure objects in the global frame.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/35a1b511561df0c1098a486422343b2f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Environments created by evaluating `(f 5)`.
  prefs: []
  type: TYPE_NORMAL
- en: Special Forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `lambda` creates a procedure in the form of a double bubble. The left circle
    points to the text of the `lambda` expression; the right circle points to the
    defining environment (i.e., to the current environment at the time the `lambda`
    is seen). **ONLY LAMBDAS CREATE PROCEDURES.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`define` adds a new binding to the current frame.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`set!` changes the first available binding.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `let` is a `lambda` with an invocation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(define (...) …)` = `lambda` + `define`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Other special forms follow their own rules (`cond`, `if`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f8dbb06f27f40cdcd1059c2e05003d9c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Result of defining `make-withdraw` in the global environment.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1460cf6157ee3bb2c541e1a5783b37ae.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Result of evaluating `(define W1 (make-withdraw 100))`.
  prefs: []
  type: TYPE_NORMAL
- en: Takeaways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this subsection, we learned how to evaluate procedures with the environment
    model.
  prefs: []
  type: TYPE_NORMAL
- en: What's Next?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to the next subsection and learn how to draw environment diagrams!
  prefs: []
  type: TYPE_NORMAL
