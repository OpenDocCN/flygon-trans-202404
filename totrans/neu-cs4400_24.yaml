- en: Implementing First Class FunctionsTuesday, January 24th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现第一类函数星期二，1月24日
- en: '[PLAI §6](plai.pdf#chapter.6 "First-Class Functions") (uses some stuff from
    [PLAI §5](plai.pdf#chapter.5 "Deferring Substitution"), which we do later)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §6](plai.pdf#chapter.6 "第一类函数")（使用了一些来自[PLAI §5](plai.pdf#chapter.5 "延迟替换")的内容，我们稍后会讨论）'
- en: This is a simple plan, but it is directly related to how functions are going
    to be used in our language. We know that `{call {fun {x} E1} E2}` is equivalent
    to a `with` expression, but the new thing here is that we do allow writing just
    the `{fun ...}` expression by itself, and therefore we need to have some meaning
    for it. The meaning, or the value of this expression, should roughly be “an expression
    that needs a value to be plugged in for `x`”. In other words, our language will
    have these new kinds of values that contain an expression to be evaluated later
    on.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的计划，但它与函数在我们的语言中如何使用直接相关。我们知道`{call {fun {x} E1} E2}`等同于一个`with`表达式，但这里的新事物是我们允许仅仅写`{fun
    ...}`表达式本身，因此我们需要为其赋予一些含义。这个表达式的含义，或者说这个表达式的值，大致应该是“一个需要为`x`插入值的表达式”。换句话说，我们的语言将具有这些新类型的值，其中包含一个稍后要评估的表达式。
- en: 'There are three basic approaches that classify programming languages in relation
    to how the deal with functions:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种基本方法可以将编程语言分类为与函数处理方式相关的：
- en: 'First order: functions are not real values. They cannot be used or returned
    as values by other functions. This means that they cannot be stored in data structures.
    This is what most “conventional” languages used to have in the past. (You will
    be implementing such a language in homework 4.)'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一阶：函数不是真正的值。它们不能被其他函数使用或返回作为值。这意味着它们不能被存储在数据结构中。这是大多数“传统”语言过去所具有的特征。（你将在作业4中实现这样一种语言。）
- en: An example of such a language is the Beginner Student language that is used
    in HtDP, where the language is intentionally first-order to help students write
    correct code (at the early stages where using a function as a value is usually
    an error). It’s hard to find practical modern languages that fall in this category.
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这样一种语言的例子是在HtDP中使用的初学者学生语言，该语言故意是一阶的，以帮助学生编写正确的代码（在通常将函数用作值的早期阶段通常是错误的情况下）。很难找到属于这一类别的实用现代语言。
- en: 'Higher order: functions can receive and return other functions as values. This
    is what you get with C and modern Fortran.'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高阶：函数可以接收和返回其他函数作为值。这就是你在C和现代Fortran中得到的东西。
- en: 'First class: functions are values with all the rights of other values. In particular,
    they can be supplied to other functions, returned from functions, stored in data
    structures, and new functions can be created at run-time. (And most modern languages
    have first class functions.)'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一类：函数是具有其他值所有权利的值。特别是，它们可以被提供给其他函数，从函数返回，存储在数据结构中，并且可以在运行时创建新函数。（大多数现代语言都具有第一类函数。）
- en: 'The last category is the most interesting one. Back in the old days, complex
    expressions were not first-class in that they could not be freely composed. This
    is still the case in machine-code: as we’ve seen earlier, to compute an expression
    such as'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一类是最有趣的。在过去，复杂表达式不是第一类的，因为它们不能自由组合。这在机器码中仍然是这样：正如我们之前所见，要计算一个表达式，例如
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'you have to do something like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须像这样做：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In other words, every intermediate value needs to have its own name. But with
    proper (“high-level”) programming languages (at least most of them…) you can just
    write the original expression, with no names for these values.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，每个中间值都需要有自己的名称。但是使用适当的（“高级”）编程语言（至少大多数…），你可以只写原始表达式，而不为这些值命名。
- en: With first-class functions something similar happens — it is possible to have
    complex expressions that consume and return functions, and they do not need to
    be named.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用第一类函数时会发生类似的事情 — 可以有消耗和返回函数的复杂表达式，它们不需要被命名。
- en: 'What we get with our `fun` expression (if we can make it work) is exactly this:
    it generates a function, and you can choose to either bind it to a name, or not.
    The important thing is that the value exists independently of a name.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们可以使我们的`fun`表达式工作，我们得到的正是这个：它生成一个函数，你可以选择将其绑定到一个名称，或者不绑定。重要的是该值独立于名称存在。
- en: This has a major effect on the “personality” of a programming language as we
    will see. In fact, just adding this feature will make our language much more advanced
    than languages with just higher-order or first-order functions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这对编程语言的“个性”产生了重大影响，我们将会看到。事实上，仅仅添加这个特性就会使我们的语言比仅具有高阶或一阶函数的语言更加先进。
- en: '* * *'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
