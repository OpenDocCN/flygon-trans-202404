- en: CSE 331 Software Design and Implementation
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: CSE 331 软件设计与实现
- en: Editing, Compiling, Running, and Testing Java Programs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑、编译、运行和测试 Java 程序
- en: This handout describes how to perform common Java development tasks in Eclipse
    and on the command-line.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本手册描述了如何在 Eclipse 和命令行中执行常见的 Java 开发任务。
- en: 'Contents:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 目录：
- en: '[Using the Unix Command Line](#unix)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Unix 命令行](#unix)'
- en: '[Starting Eclipse](#starting-eclipse)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[启动 Eclipse](#starting-eclipse)'
- en: '[Starting Eclipse on Linux](#starting-eclipse-linux)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Linux 上启动 Eclipse](#starting-eclipse-linux)'
- en: '[Starting Eclipse on Windows](#starting-eclipse-windows)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Windows 上启动 Eclipse](#starting-eclipse-windows)'
- en: '[Eclipse preferences](#eclipse-preferences)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse 首选项](#eclipse-preferences)'
- en: '[Setting the JDK in Eclipse on Windows](#eclipse-windows-jdk)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Windows 上设置 Eclipse 中的 JDK](#eclipse-windows-jdk)'
- en: '[Eclipse generics errors configuration](#eclipse-generics)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse 泛型错误配置](#eclipse-generics)'
- en: '[Opening Files; Managing Multiple Files](#multi)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[打开文件；管理多个文件](#multi)'
- en: '[Creating New Files](#new)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建新文件](#new)'
- en: '[New Java files](#new-eclipse-java)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新建 Java 文件](#new-eclipse-java)'
- en: '[New Text files](#new-eclipse-text)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新建文本文件](#new-eclipse-text)'
- en: '[Editing Java Source Files](#editing)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编辑 Java 源文件](#editing)'
- en: '[Autocompletion](#autocomplete)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自动补全](#autocomplete)'
- en: '[Organizing Imports](#organize-imports)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[组织导入](#organize-imports)'
- en: '[Viewing Documentation](#viewing-doc)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查看文档](#viewing-doc)'
- en: '[Eclipse](#viewdocs-eclipse)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse](#viewdocs-eclipse)'
- en: '[Running Automated Tasks with Ant](#ant)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Ant 运行自动化任务](#ant)'
- en: '[Command-line](#ant-cli)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[命令行](#ant-cli)'
- en: '[Eclipse](#ant-eclipse)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse](#ant-eclipse)'
- en: '[Compiling Java Source Files](#compiling)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编译 Java 源文件](#compiling)'
- en: '[Command-line](#compiling-cli)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[命令行](#compiling-cli)'
- en: '[Eclipse](#compiling-eclipse)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse](#compiling-eclipse)'
- en: '[Compiling With Ant in Eclipse](#compiling-eclipse-ant)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Eclipse 中使用 Ant 编译](#compiling-eclipse-ant)'
- en: '[Running Java Programs](#running)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[运行 Java 程序](#running)'
- en: '[Command-line](#running-cli)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[命令行](#running-cli)'
- en: '[Eclipse](#running-eclipse)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse](#running-eclipse)'
- en: '[Testing Java Programs with JUnit](#junit)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 JUnit 测试 Java 程序](#junit)'
- en: '[Running JUnit Tests](#running-junit)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[运行 JUnit 测试](#running-junit)'
- en: '[Command-line](#junit-cli)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[命令行](#junit-cli)'
- en: '[Eclipse](#junit-eclipse)'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse](#junit-eclipse)'
- en: '[CSE 331 JUnit Framework](#junit-331-framework)'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CSE 331 JUnit 框架](#junit-331-framework)'
- en: '[Using javadoc to generate specs](#javadoc)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 javadoc 生成规范](#javadoc)'
- en: Using the Unix Command Line
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Unix 命令行
- en: A few CSE 331 tasks require connecting to a Linux machine and running some commands
    from the command-line. To understand the instructions may require some basic understanding
    of how to use a shell to perform command-line actions. This material is covered
    (in more depth than we need) in [CSE390A](http://courses.cs.washington.edu/courses/cse390a),
    which has materials posted online. Alternately, you can read the Unix [tutorials](http://flatline.cs.washington.edu/orgs/acm/tutorials/)
    provided by the student ACM chapter. While these tutorials are old and have some
    dated information about machine names and such, the basics of the Unix command
    line have not changed in decades.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 CSE 331 任务需要连接到 Linux 机器并从命令行运行一些命令。要理解这些说明可能需要一些基本的使用 shell 执行命令行操作的理解。这些材料在
    [CSE390A](http://courses.cs.washington.edu/courses/cse390a) 中有更深入的介绍，该课程的材料已经在线发布。或者，您可以阅读学生
    ACM 章节提供的 Unix [教程](http://flatline.cs.washington.edu/orgs/acm/tutorials/)。虽然这些教程有些过时，并且关于机器名称等信息有些过时，但
    Unix 命令行的基础知识几十年来都没有改变。
- en: Starting Eclipse
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动 Eclipse
- en: If you are [working on your own computer](WorkingAtHome.html), you should have
    installed Eclipse. Else, it is installed on the department machines (and virtual
    machine).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在[自己的计算机上工作](WorkingAtHome.html)，您应该已经安装了 Eclipse。否则，它已安装在部门机器（和虚拟机）上。
- en: Starting Eclipse on Linux
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Linux 上启动 Eclipse
- en: 'Type this at the prompt to start Eclipse on Linux:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上输入以下内容以启动 Eclipse：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Eclipse will start up, display a splash screen, and then show a workplace selection
    dialog:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 将启动，显示一个启动画面，然后显示一个工作区选择对话框：
- en: '![Screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![屏幕截图：'
- en: Eclipse Workspace Selection](../Images/e098d77eadfe10ca658afeb8a62ee977.jpg)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 工作区选择](../Images/e098d77eadfe10ca658afeb8a62ee977.jpg)
- en: 'Eclipse is asking you which workspace folder to use for this session. In response,
    if in the department labs, type:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 正在询问您要为此会话使用哪个工作区文件夹。如果在部门实验室，请输入：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: where `*YourUserName*` is your UW CSE username. (**Note:** Do **not** enter
    "`~/workspace331`" for this step. Eclipse does not recognize the '~' character.)
    On your own machine, you can choose where to put your workspace.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `*YourUserName*` 是您的 UW CSE 用户名。（**注意：**在此步骤中**不要**输入 "`~/workspace331`"。Eclipse
    不识别 '~' 字符。）在您自己的机器上，您可以选择放置工作区的位置。
- en: If Eclipse shows the welcome screen, containing only the text "Welcome to the
    Eclipse IDE for Java Developers" on a pretty background, switch to the code editor
    by going to Window > Open Perspective > Other... and selecting `Java (default)`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Eclipse显示欢迎屏幕，只包含文本“欢迎使用Java开发人员的Eclipse IDE”在一个漂亮的背景上，通过转到窗口 > 打开透视图 > 其他...
    并选择`Java（默认）`来切换到代码编辑器。
- en: Starting Eclipse on Windows
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上启动Eclipse
- en: 'From the start menu, goto: **All Programs ? DEV TOOLS & LANGUAGES ? Eclipse
    ? eclipse**.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从开始菜单，转到：**所有程序 ? DEV TOOLS & LANGUAGES ? Eclipse ? eclipse**。
- en: 'Eclipse will start up, display a splash screen, and then show a workplace selection
    dialog:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse将启动，显示一个启动画面，然后显示一个工作区选择对话框：
- en: '![Screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![截图：'
- en: Eclipse Workspace Selection in Windows](../Images/34c0c412004a8e0a05c9168e140d2f88.jpg)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Windows中的Eclipse工作区选择](../Images/34c0c412004a8e0a05c9168e140d2f88.jpg)
- en: 'Eclipse is asking you which workspace folder to use for this session. In response,
    type:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse正在询问您要为此会话使用哪个工作区文件夹。作为回应，键入：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This directory will work on the lab Windows computers; adjust it as needed if
    you are working on your personal computer.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录将在实验室的Windows计算机上工作；如果您在个人计算机上工作，根据需要进行调整。
- en: Eclipse preferences
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Eclipse首选项
- en: Go to Window(or Eclipse in OS X)->Preferences->Java->Code Style->Formatter.
    Then hit Edit. In the Comments tab, unselect the "enable block comment formatting"
    checkbox.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 转到窗口（或OS X中的Eclipse）->首选项->Java->代码样式->格式化程序。然后点击编辑。在注释选项卡中，取消选中“启用块注释格式化”复选框。
- en: Setting the JDK in Eclipse on Windows
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上设置Eclipse中的JDK
- en: To use the Ant buildfile, you need to tell Eclipse to use the Java JDK (development
    kit) instead of the JRE (runtime environment).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Ant构建文件，您需要告诉Eclipse使用Java JDK（开发工具包）而不是JRE（运行时环境）。
- en: In Eclipse, goto **Window ? Preferences** to open the Preferences dialog.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中，转到**Window ? Preferences**以打开首选项对话框。
- en: In the left pane of Preference dialog, select **Java ? Installed JREs**
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在首选项对话框的左侧窗格中，选择**Java ? Installed JREs**
- en: Click the **Search...** button in the Installed JREs pane
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击已安装的JREs窗格中的**搜索...**按钮
- en: In the directory selection window that appears, select **C:\ ? Program Files
    ? Java** as shown in the screenshot below.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的目录选择窗口中，如下截图所示，选择**C:\ ? Program Files ? Java**。
- en: '![Screenshot: Searching for JREs](../Images/69ff2141533be9fb0b45820da27ed3e5.jpg)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![截图：搜索JREs](../Images/69ff2141533be9fb0b45820da27ed3e5.jpg)'
- en: Click **OK**
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**OK**
- en: In the Installed JREs list, check the box next to jdk1.7.0_04 (or any version
    that starts with jdk1.7) and click **OK**
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在已安装的JREs列表中，选中jdk1.7.0_04（或以jdk1.7开头的任何版本）旁边的复选��，然后点击**OK**
- en: '![Screenshot: Selecting jdk1.7](../Images/0a286f642bd504321fe2128a05818245.jpg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![截图：选择jdk1.7](../Images/0a286f642bd504321fe2128a05818245.jpg)'
- en: If Eclipse shows the welcome screen, containing only the text "Welcome to the
    Eclipse IDE for Java Developers" on a pretty background, switch to the code editor
    by going to Window > Open Perspective > Other... and selecting `Java (default)`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Eclipse显示欢迎屏幕，只包含文本“欢迎使用Java开发人员的Eclipse IDE”在一个漂亮的背景上，通过转到窗口 > 打开透视图 > 其他...
    并选择`Java（默认）`来切换到代码编辑器。
- en: Eclipse generics errors configuration
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Eclipse泛型错误配置
- en: 'We expect your code to not have any generics-related problems. For example,
    the following code is unacceptable:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望您的代码不会有任何与泛型相关的问题。例如，以下代码是不可接受的：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The generic type `List` of `myList` should be parametrized, for instance, to
    `String` by replacing the first line with `List<String> myList = new ArrayList<String>();`
    Note that `List<String> myList = new ArrayList();` is also incorrect.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`myList`的泛型类型`List`应该被参数化，例如，通过将第一行替换为`List<String> myList = new ArrayList<String>();`。请注意，`List<String>
    myList = new ArrayList();`也是不正确的。'
- en: By default, Eclipse shows generics problems as warnings (indicated by yellow
    lines and markers). You can configure Eclipse to instead issue errors (indicated
    by red lines and markers) for these problems. Doing so will help you remember
    to write acceptable generics code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Eclipse将泛型问题显示为警告（用黄色线条和标记表示）。您可以配置Eclipse，使其对这些问题发出错误（用红色线条和标记表示）。这样做将帮助您记住编写可接受的泛型代码。
- en: To make this configuration, go to **Windows ? Preferences** and select **Java
    ? Compiler ? Errors/Warnings**. Under **Generic types**, change the value of **Unchecked
    generic type operation** to **Error**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行此配置，请转到**Windows ? Preferences**并选择**Java ? Compiler ? Errors/Warnings**。在**Generic
    types**下，将**Unchecked generic type operation**的值更改为**Error**。
- en: (Note that there is another setting named **Usage of a raw type** that is set
    to **Ignore** by default. We recommend leaving this option disabled or set simply
    to **Warn** because it is specific to the Eclipse compiler and checks for more
    stringent requirements than required by the Java language specification. Thus,
    "Usage of raw type" may complain about issues, that while providing insight about
    your code, is not checked by Oracle's `javac`, which is our official standard
    for compilation errors and warnings in this class.)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意，还有另一个名为**使用原始类型**的设置，默认设置为**Ignore**。我们建议保持此选项禁用或简单设置为**Warn**，因为它特定于Eclipse编译器，并检查比Java语言规范要严格的要求。因此，“使用原始类型”可能会对问题提出抱怨，尽管它提供了关于您的代码的洞察，但Oracle的`javac`不会检查这些问题，而这是我们课程中官方的编译错误和警告的标准。）
- en: Opening Files; Managing Multiple Files
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开文件；管理多个文件
- en: Switch to the "Java" perspective in Eclipse if you're not already in it (**Window
    ? Open Perspective ? Other... ? Java**).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到Eclipse中的“Java”视图（如果尚未在其中）（**Window ? Open Perspective ? Other... ? Java**）。
- en: You can open multiple files in Eclipse by double-clicking each of them from
    the Package Explorer pane. Once you have multiple files open, you can switch between
    them quickly by holding down **Ctrl** and hitting **F6** to bring up a dropdown
    box of open files, and then using the arrow keys to select the file whose editor
    you wish to bring into focus. You can also navigate through different files using
    the tabs on top of the editor pane.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在Package Explorer窗格中双击每个文件来在Eclipse中打开多个文件。打开多个文件后，您可以通过按住**Ctrl**并按下**F6**快速切换到下拉框以选择要带入焦点的编辑器的文件，然后使用箭头键快速在不同文件之间导航。
- en: Creating New Files
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新文件
- en: New Java files
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的Java文件
- en: To create a new Java source file (with the `.java` extension), select from the
    top menu **File ? New ? Class**. A window will pop up, asking you details about
    the class. Leave the source folder as **cse331/src**, and select a package (e.g.
    `hw1`). Choose a name for your class (e.g. `MyClass`) Type this name in the "Name"
    field and click **Finish**.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的Java源文件（带有`.java`扩展名），请从顶部菜单中选择**File ? New ? Class**。将弹出一个窗口，询问您有关类的详细信息。将源文件夹保留为**cse331/src**，并选择一个包（例如，`hw1`）。为您的类选择一个名称（例如，`MyClass`），将此名称键入“名称”字段，然后点击**Finish**。
- en: (If you want your new class to be executable, it will need a `main` method.
    Eclipse can generate that automatically for you if you check the appropriate checkbox
    in the **New Java Class** screen.)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: （如果您希望您的新类可执行，它将需要一个`main`方法。如果您在**New Java Class**屏幕中选中适当的复选框，Eclipse可以为您自动生成。）
- en: '![Screenshot: New Java Class](../Images/ecf35852f28b79e01395ce9e06109483.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![屏幕截图：新Java类](../Images/ecf35852f28b79e01395ce9e06109483.jpg)'
- en: New Text files
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新文本文件
- en: There is a similar procedure for creating new non-Java files such as text files.
    Select **File ? New ? File**. In the resulting dialog box, choose the parent directory
    of your new file and type the desired filename. If you want to create a new directory,
    you can do so by appending the directory name in front of your desired filename.
    For example, if you want to create a file `problem0.txt` in the directory `hw1/answers`,
    but the `answers` directory does not yet exist, you can choose `hw1` as the parent
    directory, and then type `answers/problem0.txt` as the file name, and Eclipse
    will create the new directory and file for you.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于创建新的非Java文件（如文本文件），也有类似的步骤。选择**File ? New ? File**。在弹出的对话框中，选择您新文件的父目录并输入所需的文件名。如果要创建新目录，可以在所需文件名前附加目录名。例如，如果要在目录`hw1/answers`中创建文件`problem0.txt`，但`answers`目录尚不存在，则可以选择`hw1`作为父目录，然后在文件名中键入`answers/problem0.txt`，Eclipse将为您创建新目录和文件。
- en: Editing Java Source Files
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑Java源文件
- en: 'Here are some useful actions that you can perform when editing Java code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑Java代码时，您可以执行一些有用的操作：
- en: '[Autocompletion](#autocomplete)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自动完成](#autocomplete)'
- en: '[Organizing Imports](#organize-imports)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[整理导入](#organize-imports)'
- en: '[Viewing Documentation](#viewing-doc)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查看文档](#viewing-doc)'
- en: Autocompletion
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动完成
- en: Autocompletion is the ability of an editor to guess what you are typing after
    you type out only part of a word. Using autocompletion will reduce the amount
    of typing that you have to do as well as the number of spelling mistakes, thereby
    increasing your efficiency.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 自动完成是编辑器在您仅键入单词的一部分后猜测您正在键入什么的能力。使用自动完成将减少您需要键入的量以及拼写错误的数量，从而提高您的效率。
- en: Eclipse continuously parses your Java files as you are editing, so it is aware
    of the names of variables, methods, etc... that you have declared thus far.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当您编辑Java文件时，Eclipse会持续解析文件，因此它了解您迄今为止声明的变量、方法等的名称。
- en: '**CTRL+Space** can be used to autocomplete most things inside the Eclipse Java
    editor. For example, if you have declared a variable named `spanishGreeting` in
    the current class, and have typed the letters `spanishGree` in a subsequent line,
    Eclipse can infer that you mean to type `spanishGreeting`. To use this feature,
    press **CTRL+Space** while your cursor is at the right of the incomplete name.
    You should see `spanishGree` expand to `spanishGreeting`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**CTRL+Space**可用于自动完成Eclipse Java编辑器中的大多数内容。例如，如果您在当前类中声明了一个名为`spanishGreeting`的变量，并在后续行中输入了`spanishGree`，Eclipse可以推断您的意思是`spanishGreeting`。要使用此功能，请在不完整名称的右侧按下**CTRL+Space**。您应该看到`spanishGree`扩展为`spanishGreeting`。'
- en: Eclipse can also help you autocomplete method names. Suppose you have a variable
    `myList` of type `List`, and you want to call the method `clear`. Begin typing
    "`myList.`" — at this point, a pop-up dialog will display a list of available
    methods for the type `List`, and you can select the appropriate method with the
    arrow keys. You can force the popup to appear with **CTRL+Space**.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse还可以帮助您自动完成方法名称。假设您有一个类型为`List`的变量`myList`，并且想要调用`clear`方法。开始输入"`myList.`"
    - 此时，一个弹出对话框将显示`List`类型的可用方法列表，您可以使用箭头键选择适当的方法。您可以使用**CTRL+Space**强制弹出对话框。
- en: Organizing Imports
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组织导入
- en: You can press **CTRL+SHIFT+o** to ***o**rganize* your imports in a Java file.
    Eclipse will remove extraneous `import` statements and try to infer correct ones
    for types that you refer to in your code but have not yet been imported. (If the
    name of the class that needs to be imported is ambiguous – for example, there
    is a `java.util.List` as well as a `java.awt.List` – then Eclipse will prompt
    you to choose which one to import.)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按下**CTRL+SHIFT+o**来***o**rganize* Java文件中的导入。Eclipse将删除多余的`import`语句，并尝试为您的代码中引用但尚未导入的类型推断正确的导入。
    （如果需要导入的类名不明确 - 例如，有一个`java.util.List`和一个`java.awt.List` - 那么Eclipse将提示您选择要导入的哪一个。）
- en: Viewing Documentation
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看文档
- en: Although you can directly browse the [Java 7 API](http://docs.oracle.com/javase/7/docs/api/)
    and other documentation at the Oracle website, it is often useful to be able to
    cross-reference parts of your code with the appropriate documentation from within
    your editor.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可以直接浏览[Java 7 API](http://docs.oracle.com/javase/7/docs/api/)和Oracle网站上的其他文档，但通常可以在编辑器内部将代码的各个部分与相应的文档进行交叉引用是很有用的。
- en: To view the documentation of a class that is referred to in your code, place
    your cursor over the class's name, and press **SHIFT+F2**. A web browser window
    will be opened to the class's documentation page. If the class is provided by
    Java, the documentation page will be on Oracle's website.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看代码中引用的类的文档，请将光标放在类名上，然后按下**SHIFT+F2**。将会打开一个网页浏览器窗口，显示该类的文档页面。如果该类由Java提供，文档页面将在Oracle的网站上。
- en: 'For your own classes, you will need to tell Eclipse where to find their documentation.
    To do so, right click on the project name (e.g. `cse331`) in the Package Explorer
    pane and click **"Properties"**. Select **"Javadoc Location"** in the left pane.
    Select the location, e.g. **"file:/homes/iws/*YourUserName*/workspace331/cse331/doc/"**.
    (Note: the **"file:"** portion is important, since the location is expected to
    be recognizable by a web browser.) After setting the Javadoc location path, click
    **OK**. (If on your own machine, modify the path above appropriately.)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您自己的类，您需要告诉Eclipse在哪里找到它们的文档。要这样做，请在包资源管理器窗格中右键单击项目名称（例如`cse331`），然后单击**"属性"**。在左侧窗格中选择**"Javadoc位置"**。选择位置，例如**"file:/homes/iws/*YourUserName*/workspace331/cse331/doc/"**。（注意：**"file:"**部分很重要，因为位置应该能够被网页浏览器识别。）设置Javadoc位置路径后，点击**确定**。（如果在您自己的计算机上，请适当修改上面的路径。）
- en: Running Automated Tasks with Ant
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Ant运行自动化任务
- en: Ant is a tool that can be used to automate many common tasks, such as compiling,
    testing, and running code. It is also used to [validate a CSE 331 assignment submission.](turnin.html#validate)
    The instructions for Ant are stored in a “buildfile” named `build.xml` in each
    assignment's directory.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Ant是一个工具，可用于自动化许多常见任务，如编译、测试和运行代码。它还用于[验证CSE 331作业提交。](turnin.html#validate)
    Ant的说明存储在每个作业目录中名为`build.xml`的“构建文件”中。
- en: The buildfile specifies a set of **targets** that it supports, such as [build](#compiling-cli)
    and [test](#junit-cli). Note that the “help” target will output information about
    the supported targets in our buildfile. The **[validate](turnin.html#validate)**
    target works only on `attu`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 构建文件指定了它支持的一组**目标**，例如[build](#compiling-cli)和[test](#junit-cli)。请注意，“help”目标将输出有关我们构建文件中支持的目标的信息。**[validate](turnin.html#validate)**目标仅在`attu`上有效。
- en: Command-line
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令行
- en: 'To run Ant for assignment *N* from the command line, do the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行运行作业*N*的Ant，请执行以下操作：
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Eclipse
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Eclipse
- en: To run Ant in Eclipse, right click `cse331/src/hw*N*/build.xml` in the **Package
    Explorer**, where *N* is the desired assignment number. Now right click **Run
    As ? Ant Build...** and in the resulting window, go to **Targets** and select
    the desired target(s).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Eclipse中运行Ant，请在**Package Explorer**中右键单击`cse331/src/hw*N*/build.xml`，其中*N*是所需的作业编号。现在右键单击**Run
    As ? Ant Build...**，在结果窗口中，转到**Targets**并选择所需的目标。
- en: There is a button near the left-hand side of the Eclipse toolbar that looks
    like ![a green 'play'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse工具栏左侧附近有一个按钮，看起来像![一个绿色的'play'
- en: button with a suitcase below it](../Images/2b329928cc4866a939aa2c23d4850bd5.jpg)
    which will re-run the last ant target (or other external tool) that you ran. The
    drop down button will let you easily re-run a number of ant targets.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮下方有一个手提箱的按钮](../Images/2b329928cc4866a939aa2c23d4850bd5.jpg)，它将重新运行您上次运行的最后一个ant目标（或其他外部工具）。下拉按钮将让您轻松重新运行多个ant目标。
- en: Compiling Java Source Files
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译Java源文件
- en: You must compile your source code before running it. The `javac` compiler is
    used to transform Java programs into bytecode form, contained in a *class file*.
    Class files are recognized by their `.class` extension. The bytecode in class
    files can be executed by the `java` interpreter.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行源代码之前，您必须先编译源代码。`javac`编译器用于将Java程序转换为字节码形式，包含在*类文件*中。类文件通过其`.class`扩展名进行识别。类文件中的字节码可以由`java`解释器执行。
- en: Command-line
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令行
- en: 'To compile all source files for a particular assignment, change your current
    directory to `~/workspace331/cse331/src/hw*N*/`, where *N* is the desired assignment
    number. Now type on the command-line:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译特定作业的所有源文件，请将当前目录更改为`~/workspace331/cse331/src/hw*N*/`，其中*N*是所需的作业编号。现在在命令行上键入：
- en: '[PRE5]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will run an Ant script that uses the instructions denoted in `build.xml`
    to compile all the `.java` files into corresponding `.class` files. Note that
    if one or more of your files do not compile, you will receive error messages and
    no `.class` files will be generated for the files that do not compile properly.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行一个使用`build.xml`中指定的指令来将所有`.java`文件编译为相应的`.class`文件的Ant脚本。请注意，如果您的一个或多个文件无法编译，您将收到错误消息，并且对于无法正确编译的文件将不会生成`.class`文件。
- en: 'If you would like to manually compile files without the use of an Ant script,
    you can use `javac` to compile one or more source files into class files for execution
    by the Java interpreter. The following commands:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想手动编译文件而不使用Ant脚本，可以使用`javac`将一个或多个源文件编译为供Java解释器执行的类文件。以下命令：
- en: '[PRE6]'
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: will generate class files hw*N*/file1.class, hw*N*/file2.class, etc., for each
    specified source file. Type "`man javac`" at the `attu` prompt for more information
    on `javac` options. You should almost always use the `-g` option, which will provide
    improved debugging output, and also the `-Xlint` option, which provides stricter
    compiler warnings.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将为每个指定的源文件生成类文件hw*N*/file1.class，hw*N*/file2.class等。在`attu`提示符处键入"`man javac`"以获取有关`javac`选项的更多信息。您几乎总是应该使用`-g`选项，它将提供改进的调试输出，还应该使用`-Xlint`选项，它提供更严格的编译器警告。
- en: Eclipse
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Eclipse
- en: Eclipse is set up by default to automatically recompile your code every time
    you save. Classes with compile errors are marked in the **Package Explorer** with
    red cross marks. The compile errors, as well as compile warnings, also appear
    in the **Problems** view (usually situated at the bottom panel of Eclipse).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse默认设置为每次保存时自动重新编译您的代码。具有编译错误的类在**Package Explorer**中用红色交叉标记标记。编译错误以及编译警告也会显示在Eclipse的**Problems**视图中（通常位于Eclipse底部面板）。
- en: If your file is saved and Eclipse says that it does not compile but you believe
    that it should, make sure that all of the files on which your file depends are
    saved and compiled. If that does not work, try refreshing your project or using
    **Project ? Rebuild Project** to force Eclipse to recognize the latest versions
    of everything.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的文件已保存，但 Eclipse 表示它未编译，但您认为应该编译，请确保您的文件依赖��所有文件都已保存和编译。如果这样不起作用，请尝试刷新您的项目或使用**Project
    ? Rebuild Project**强制 Eclipse 识别所有内容的最新版本。
- en: Compiling With Ant in Eclipse
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在 Eclipse 中使用 Ant 进行编译
- en: To compile with Ant in Eclipse, right click `cse331/hw*N*/build.xml` in the
    **Package Explorer**, where *N* is the desired assignment number. Now right click
    **Run As ? Ant Build...** and in the resulting window, go to **Targets** and select
    **build** in the list of targets.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Eclipse 中使用 Ant 进行编译，请在**Package Explorer**中右键单击 `cse331/hw*N*/build.xml`，其中
    *N* 是所需的作业编号。现在右键单击**Run As ? Ant Build...**，在弹出的窗口中，转到**Targets**，并在目标列表中选择**build**。
- en: Running Java Programs
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 Java 程序
- en: Once you have compiled your source code into class files, you can execute it
    with the Java interpreter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将源代码编译为类文件后，您可以使用 Java 解释器执行它。
- en: Command-line
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令行
- en: 'Typically, to run a program you will just type `ant` on the command line, possibly
    with a more specific target: `ant *target*`. However, you can also invoke the
    Java virtual machine directly via the `java` program.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，要运行程序，您只需在命令行上键入 `ant`，可能还会带有更具体的目标：`ant *target*`。但是，您也可以通过 `java` 程序直接调用
    Java 虚拟机。
- en: 'Here is how to run Java programs from the command-line:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何从命令行运行 Java 程序：
- en: '[PRE7]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: (The `-ea` flag enables assertions.)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: （`-ea` 标志启用断言。）
- en: 'For example, if you wish to run the `PolyGraph` class from hw1, you would run:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您希望运行 hw1 中的 `PolyGraph` 类，则应运行：
- en: '[PRE8]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that you do not include `.java` or `.class` at the end of the class name.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，类名末尾不包括 `.java` 或 `.class`。
- en: Eclipse
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Eclipse
- en: To run a program, right click on the Java source file containing the `main()`
    method and choose **Run As... ? Java Application**.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行程序，请右键单击包含 `main()` 方法的 Java 源文件，然后选择**Run As... ? Java Application**。
- en: There is also a button near the left-hand side of the Eclipse toolbar that looks
    like ![a
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 工具栏左侧附近还有一个按钮，看起来像 ![a
- en: green 'play' button](../Images/3dc0b99b0d2650d9e1722eba6f13c8ce.jpg) which will
    re-run the last application (or JUnit test, see below) that you ran.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 绿色的 'play' 按钮](../Images/3dc0b99b0d2650d9e1722eba6f13c8ce.jpg)，将重新运行您上次运行的应用程序（或
    JUnit 测试，见下文）。
- en: Testing Java Programs with JUnit
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 JUnit 测试 Java 程序
- en: '**JUnit** is the testing framework that you will use for writing and running
    tests.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**JUnit** 是您用于编写和运行测试的测试框架。'
- en: 'For more information, visit:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请访问：
- en: '[The official web site](http://junit.org)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[官方网站](http://junit.org)'
- en: '[JUnit Cookbook](http://junit.sourceforge.net/doc/cookbook/cookbook.htm), a
    brief tutorial'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JUnit Cookbook](http://junit.sourceforge.net/doc/cookbook/cookbook.htm)，一个简短的教程'
- en: '[JUnit API](http://junit.sourceforge.net/javadoc/)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JUnit API](http://junit.sourceforge.net/javadoc/)'
- en: Running JUnit Tests
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行 JUnit 测试
- en: '[Command-line](#junit-cli)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[命令行](#junit-cli)'
- en: '[Eclipse](#junit-eclipse)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse](#junit-eclipse)'
- en: Command-line
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命令行
- en: The `test` Ant target can be used to test `SpecificationTests` and `ImplementationTests`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`test` Ant 目标可用于测试 `SpecificationTests` 和 `ImplementationTests`。'
- en: 'To run JUnit without using Ant, change to the `~/workspace331/cse331/src` directory
    and invoke `java org.junit.runner.JUnitCore` for the text interface with the name
    of the test class as a parameter. For example, if I wanted to run `RatTermTest`,
    I could type:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要在不使用 Ant 的情况下运行 JUnit，请切换到 `~/workspace331/cse331/src` 目录，并调用 `java org.junit.runner.JUnitCore`
    以获得带有测试类名称作为参数的文本界面。例如，如果我想运行 `RatTermTest`，我可以键入：
- en: '[PRE9]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Eclipse
  id: totrans-155
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Eclipse
- en: JUnit is integrated with Eclipse, so you can run the test suite from within
    the IDE.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 与 Eclipse 集成，因此您可以从 IDE 中运行测试套件。
- en: First, select the test you want to run from the **Package Explorer** (usually
    the leftmost pane).
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，从**Package Explorer**（通常是最左侧的窗格）中选择要运行的测试。
- en: From the Eclipse menu at the top of the screen, select **Run ? Run As ? JUnit
    Test**
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从屏幕顶部的 Eclipse 菜单中，选择**Run ? Run As ? JUnit Test**
- en: The JUnit GUI should pop up in place of the Package Explorer momentarily and
    run all the tests. You can double-click on failed tests to jump to the code for
    that test. When you're done inspecting the JUnit results, close the JUnit pane
    to go back to the Package Explorer.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JUnit GUI 应该会在 Package Explorer 的位置弹出，并运行所有测试。您可以双击失败的测试以跳转到该测试的代码。检查完 JUnit
    结果后，关闭 JUnit 窗格以返回 Package Explorer。
- en: If you are not working at UW CSE, you might have to explicitly add the `junit-4.11.jar`
    library using **Project ? Properties ? Java Build Path ? Libraries ? Add External
    JARs** and then telling Eclipse where your copy of `junit-4.11.jar` is located.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不在UW CSE工作，你可能需要显式添加`junit-4.11.jar`库，使用**项目？属性？Java构建路径？库？添加外部JAR文件**，然后告诉Eclipse你的`junit-4.11.jar`的位置在哪里。
- en: CSE 331 JUnit Framework
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSE 331 JUnit框架
- en: Because your JUnit tests will likely have different class and method names than
    those of your classmates, there needs to be a standardized way of accessing every
    student's tests. Thus, each assignment comes with the JUnit test classes `hw*N*.test.SpecificationTests`
    and `hw*N*.test.ImplementationTests`. You will load all the JUnit tests you wrote
    in one of these two test suites.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你的JUnit测试可能会有不同的类和方法名称，与你的同学不同，所以需要一种标准化的方式来访问每个学生的测试。因此，每个作业都带有JUnit测试类`hw*N*.test.SpecificationTests`和`hw*N*.test.ImplementationTests`。你将加载所有你写的JUnit测试之一到这两个测试套件中的一个。
- en: '`hw*N*.test.SpecificationTests`, as it name suggests, should contain only *specification
    tests* — that is, those tests that check only for features implied by the specification.
    Consequently, your specification tests should be valid tests for any other person''s
    code that claims to satisfy the same specification, even if that implementation
    is inherently very different.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`hw*N*.test.SpecificationTests`，顾名思义，应仅包含*规范测试* — 即，仅检查规范所隐含的特性的测试。因此，你的规范测试应该是对任何其他人声称满足相同规范的代码的有效测试，即使该实现在本质上非常不同。'
- en: Conversely, `hw*N*.test.ImplementationTests` should contain *implementation
    tests* — that is, those tests that test only details that are specific to your
    implementation.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，`hw*N*.test.ImplementationTests`应该包含*实现测试* — 即，仅测试与你的实现特定细节的测试。
- en: 'As an example, suppose you were implementing the following specification:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你正在实现以下规范：
- en: '[PRE10]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A *specification test* should never pass in a null parameter to this method
    — this would violate the specified pre-condition. However, your particular implementation
    might check for the null parameter and throw a NullPointerException. Your *implementation
    test* can safely exercise this case by passing in null.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '*规范测试*不应该将空参数传递给此方法 — 这将违反指定的前置条件。然而，你的特定实现可能会检查空参数并抛出NullPointerException。你的*实现测试*可以安全地通过传递空值来执行此案例。'
- en: Similarly, an iterator specification which does not specify the order in which
    elements are returned indicates that no specific order should be assumed in a
    *specification test*. Your implementation may happen to keep elements in a sorted
    list, and so your *implementation test* may wish to check that the elements returned
    by the iterator are sorted.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，未指定元素返回顺序的迭代器规范表明在*规范测试*中不应假定任何特定顺序。你的实现可能会将元素保留在排序列表中，因此你的*实现测试*可能希望检查迭代器返回的元素是否已排序。
- en: Before your submit each assignment, you should ensure that your code passes
    both the `SpecificationTests` and `ImplementationTests` test suites. We have provided
    a convenient way to run these tests in each assignment's build file in `~/workspace331/cse331/src/hw*N*/build.xml`.
    The `test` target will run `hw*N*.test.SpecificationTests` and `hw*N*.test.ImplementationTests`.
    The `validate` target runs these tests on a fresh copy of your code it checks
    out from your repository.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交每个作业之前，你应该确保你的代码通过了`SpecificationTests`和`ImplementationTests`测试套件。我们在每个作业的构建文件中提供了一个方便的方法来运行这些测试，位于`~/workspace331/cse331/src/hw*N*/build.xml`中。`test`目标将运行`hw*N*.test.SpecificationTests`和`hw*N*.test.ImplementationTests`。`validate`目标在检出自你的存储库的新副本上运行这些测试，它会检查你的代码。
- en: Using javadoc to generate specs
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用javadoc生成规范
- en: Oracle's Java Development Kit includes [javadoc](http://www.oracle.com/technetwork/java/javase/documentation/index-jsp-135444.html),
    a tool that produces specifications from source code annotated with special comments.
    The comments may include "tags", which are introduced by an at-sign (@).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle的Java开发工具包包括[javadoc](http://www.oracle.com/technetwork/java/javase/documentation/index-jsp-135444.html)，一个从用特殊注释注释的源代码中产生规范的工具。这些注释可能包含“标签”，由@符号引入。
- en: We have an extended javadoc program that recognizes additional CSE 331 tags,
    as well as all the [tags](http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#javadoctags)
    accepted by the Oracle Standard Doclet. These additional tags declare specification
    fields for classes and requires, modifies, and effects clauses for methods. Note
    that these tags must appear **after** all non-tag comments for classes and methods.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个扩展的javadoc程序，可以识别CSE 331的其他标签，以及Oracle标准Doclet接受的所有[标签](http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#javadoctags)。这些额外的标签为类声明规范字段，并为方法声明要求、修改和效果条款。请注意，这些标签必须出现在类和方法的所有非标签注释之后。
- en: Some extended tags belong in the overview for a class; they are used to formally
    define what a given Abstract Data Type represents.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些扩展标签属于类的概述; 它们用于正式定义给定抽象数据类型代表的内容。
- en: '| @specfield *name* : *T* // *text* | Indicates that *name* is a abstract specification
    field of type *T* for the class, adding *text* as a comment if present |'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| @specfield *name* : *T* // *text* | 表示*name*是类的类型为*T*的抽象规范字段，如果存在，添加*text*作为注释
    |'
- en: '| @derivedfield *name* : *T* // *text* | Same as specfield, except that this
    also adds the property "derived" to the output information |'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| @derivedfield *name* : *T* // *text* | 与specfield相同，只是这还会在输出信息中添加属性"derived"
    |'
- en: 'Derived fields can be viewed as functions on preexisting state; thus if a class
    had a specfield `@specfield n : integer` we could define a derived field:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '派生字段可以看作是对现有状态的函数; 因此，如果一个类有一个specfield `@specfield n : integer`，我们可以定义一个派生字段：'
- en: '[PRE11]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Derived fields are not allowed to hold any information that could not be already
    calculated from the already existing state in the object. Thus, you use specfields
    to introduce new state variables and derived fields to introduce functions on
    those state variables.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 派生字段不允许保存任何无法从对象中已有的状态计算出的信息。因此，您可以使用specfields引入新的状态变量，使用derived fields引入这些状态变量的函数。
- en: Derived fields are not strictly needed in specifications, but they may reduce
    complexity and redundancy.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规范中不一定需要派生字段，但它们可能会减少复杂性和冗余。
- en: Other extended tags belong in the specification for a method; they define the
    method's preconditions, postconditions, and side effects.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他扩展标签属于方法的规范; 它们定义了方法的前置条件、后置条件和副作用。
- en: '| @requires *X* | Declares *X* to be a precondition for the method |'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| @requires *X* | 声明*X*为方法的前置条件 |'
- en: '| @modifies *Y* | Declares that nothing besides *Y* will be modified by the
    method (as long as *X* holds when it is invoked) |'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| @modifies *Y* | 声明方法除*Y*之外不会修改任何内容（只要调用时*X*保持） |'
- en: '| @effects *Z* | Declares that *Z* will hold at exit from the method (as long
    as *X* holds when it is invoked) |'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| @effects *Z* | 声明*Z*将在方法退出时保存（只要调用时*X*保持） |'
- en: The preferred way to generate API documentation with the CSE 331-extended javadoc
    is to use the ant `doc` or `doc-hw` target for your assignment.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSE 331扩展的javadoc生成API文档的首选方法是使用ant的`doc`或`doc-hw`目标来完成作业。
- en: 'The instructions for eclipse (recommended):'
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: eclipse的说明（推荐）：
- en: Right-click on `build.xml` in Package Explorer. It will be under any of the
    hw folders.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Package Explorer中右键单击`build.xml`。它将位于任何hw文件夹下。
- en: Select **Run As**
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 **Run As**
- en: Select **Ant Build... (second option)**
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 **Ant Build... (second option)**
- en: If you would like to generate the API JavaDocs for all your hw assignments (recommended),
    select just the **doc** target in the window that appears, and click **Apply**
    and **Run**
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想为所有作业生成API JavaDocs（推荐），请在出现的窗口中仅选择**doc**目标，然后点击**Apply**和**Run**
- en: If instead, you would like to generate the JavaDocs for only the single homework
    assignment where the `build.xml` file is located, select just the **doc-hw** target,
    and click **Apply** and **Run**
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您希望仅为`build.xml`文件所在的单个作业生成JavaDocs，请选择**doc-hw**目标，然后点击**Apply**和**Run**
- en: After you see a **BUILD SUCCESSFUL** message in the console at the bottom of
    the screen, right-click on `doc` in Package Explorer
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在屏幕底部的控制台中看到**BUILD SUCCESSFUL**消息后，在Package Explorer中右键单击`doc`
- en: Select **Refresh**
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 **Refresh**
- en: Open the `doc` folder and double-click `index.html` to open the documentation
    in eclipse's web browser. Or navigate to the folder on your computer and double-click
    `index.html` to open in your default browser.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开`doc`文件夹，双击`index.html`以在eclipse的web浏览器中打开文档。或者在计算机上导航到文件夹，双击`index.html`以在默认浏览器中打开。
- en: Note, when you run this, a **local.properties** file may automatically be generated
    by eclipse. It is completely harmless and you can commit it to your repo if your
    want, or just ignore it.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意，当你运行这个时，eclipse 可能会自动生成一个名为**local.properties**的文件。这完全无害，如果你愿意，可以将其提交到你的仓库，或者直接忽略它。
- en: 'The instructions for command-line:'
  id: totrans-195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命令行的说明：
- en: Log in to attu [via SSH](WorkingAtHome.html#remote-attu) from any machine.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从任何机器上通过 SSH 登录到 attu[远程 attu](WorkingAtHome.html#remote-attu)。
- en: If you have not yet checked out your repository in attu, then you must first
    check out your repository [using the command line](versioncontrol.html#SetUpCommandLine)
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你还没有在 attu 中检出你的仓库，则必须首先使用[命令行](versioncontrol.html#SetUpCommandLine)检出你的仓库。
- en: Navigate to cse331/src
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航至 cse331/src。
- en: If you would like to generate the API for all your hw assignments, go to any
    hw folder and run **ant doc**
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想为所有作业生成 API，请前往任何作业文件夹并运行**ant doc**。
- en: If instead, you would like to generate the API for just one hw assignment, go
    to that specific hw folder and run **ant doc-hw**
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想为单个作业生成 API，前往该特定作业文件夹并运行**ant doc-hw**。
- en: After you see a **BUILD SUCCESSFUL** message in the console at the bottom of
    the screen, navigate back to cse331/doc, and inside you should see the generated
    javadoc files
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在屏幕底部的控制台中看到**BUILD SUCCESSFUL**消息后，返回到 cse331/doc，你应该在其中看到生成的 javadoc 文件。
- en: 'Important Notes and Troubleshooting:'
  id: totrans-202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重要提示和故障排除：
- en: You may see a **BUILD FAIL** message. This could be because of serious syntax
    errors in your files that cause the code not to compile. This may also be the
    issue if you see a **BUILD SUCCESSFUL** message but incorrect API in the doc folder.
    To fix these problems, look at the error messages and fix up the most serious
    problems reported there. Javadoc can produce documentation for partially implemented
    files (that is one of its strengths), but it can't compensate for some serious
    problems in the source code.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能会看到一个**BUILD FAIL**消息。这可能是因为你的文件中存在严重的语法错误导致代码无法编译。如果你看到**BUILD SUCCESSFUL**消息但
    doc 文件夹中的 API 不正确，也可能是这个问题。要解决这些问题，请查看错误消息并修复报告的最严重的问题。Javadoc 可以为部分实现的文件生成文档（这是它的优势之一），但它无法弥补源代码中的一些严重问题。
- en: Note that running this ant task will completely overwrite the existing the API
    in the doc folder.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，运行此 ant 任务将完全覆盖 doc 文件夹中现有的 API。
- en: If you get a "system cannot find the file specified" error in eclipse, then
    this is because the ant task is not set up to use your jdk. To fix this make sure
    you have the **Java 7 JDK** installed, then follow the first 3 steps of the eclipse
    instructions above. Click the JRE tab. If the JDK is in the dropdown for **Seperate
    JRE**, select that. Otherwise, click Installed JREs, Select Add, Select Standard
    VM, Select Directory, then Choose the Java/jdk folder on your computer. Now you
    should be able to select the jdk from the dropdown menu, hit apply, and then run
    without issues.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在 eclipse 中出现“系统找不到指定的文件”错误，则是因为 ant 任务未设置为使用你的 jdk。要解决此问题，请确保已安装**Java 7
    JDK**，然后按照上述 eclipse 说明的前三步操作。点击 JRE 选项卡。如果 JDK 在**Seperate JRE**的下拉菜单中，请选择它。否则，点击
    Installed JREs，选择 Add，选择 Standard VM，选择 Directory，然后选择你计算机上的 Java/jdk 文件夹。现在你应该能够从下拉菜单中选择
    jdk，点击应用，然后无问题地运行。
- en: 'After running the ant `doc` target, you should check the output. You may find
    that you need to add line breaks (`<br>`) or paragraph breaks (`<p>`) to your
    javadoc comments for readability. Also, if you omit certain tags, subsequent text
    may fail to appear in the output. Finally, since much of the text of javadoc comments
    is inserted in a HTML document, you must be careful with text that can be interpreted
    as HTML markup, such as the less-than (<) and greater-than (>) characters. For
    instance, if you write:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 ant `doc` 目标后，你应该检查输出。你可能会发现需要为了可读性添加换行符(`<br>`)或段落分隔符(`<p>`)到你的 javadoc
    注释中。此外，如果省略了某些标签，后续文本可能无法显示在输出中。最后，由于 javadoc 注释的大部分文本被插入到 HTML 文档中，你必须小心处理可能被解释为
    HTML 标记的文本，比如小于号（<）和大于号（>）字符。例如，如果你写：
- en: '[PRE12]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: then <x> and <y> will be interpreted as HTML tags in the output (and won't be
    displayed by a browser). It's usually better to just write
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 那么<x>和<y>将在输出中被解释为 HTML 标记（并且浏览器不会显示）。最好只写
- en: '[PRE13]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Report any weird behavior or complaints about `javadoc` to [cse331-staff@cs.washington.edu](mailto:cse331-staff@cs.washington.edu).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现任何奇怪的行为或关于`javadoc`的投诉，请发送邮件至[cse331-staff@cs.washington.edu](mailto:cse331-staff@cs.washington.edu)。
- en: 'For problems or questions regarding this page, contact: [cse331-staff@cs.washington.edu](mailto:cse331-staff@cs.washington.edu).'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如有关于此页面的问题或疑问，请联系：[cse331-staff@cs.washington.edu](mailto:cse331-staff@cs.washington.edu)。
