- en: CSE 331 Software Design and Implementation
  prefs: []
  type: TYPE_NORMAL
- en: Editing, Compiling, Running, and Testing Java Programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This handout describes how to perform common Java development tasks in Eclipse
    and on the command-line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using the Unix Command Line](#unix)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Starting Eclipse](#starting-eclipse)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Starting Eclipse on Linux](#starting-eclipse-linux)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Starting Eclipse on Windows](#starting-eclipse-windows)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Eclipse preferences](#eclipse-preferences)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Setting the JDK in Eclipse on Windows](#eclipse-windows-jdk)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Eclipse generics errors configuration](#eclipse-generics)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Opening Files; Managing Multiple Files](#multi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating New Files](#new)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[New Java files](#new-eclipse-java)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[New Text files](#new-eclipse-text)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Editing Java Source Files](#editing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Autocompletion](#autocomplete)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Organizing Imports](#organize-imports)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Viewing Documentation](#viewing-doc)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Eclipse](#viewdocs-eclipse)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Automated Tasks with Ant](#ant)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Command-line](#ant-cli)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Eclipse](#ant-eclipse)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Compiling Java Source Files](#compiling)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Command-line](#compiling-cli)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Eclipse](#compiling-eclipse)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Compiling With Ant in Eclipse](#compiling-eclipse-ant)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Java Programs](#running)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Command-line](#running-cli)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Eclipse](#running-eclipse)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing Java Programs with JUnit](#junit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running JUnit Tests](#running-junit)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Command-line](#junit-cli)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Eclipse](#junit-eclipse)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CSE 331 JUnit Framework](#junit-331-framework)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using javadoc to generate specs](#javadoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Unix Command Line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A few CSE 331 tasks require connecting to a Linux machine and running some commands
    from the command-line. To understand the instructions may require some basic understanding
    of how to use a shell to perform command-line actions. This material is covered
    (in more depth than we need) in [CSE390A](http://courses.cs.washington.edu/courses/cse390a),
    which has materials posted online. Alternately, you can read the Unix [tutorials](http://flatline.cs.washington.edu/orgs/acm/tutorials/)
    provided by the student ACM chapter. While these tutorials are old and have some
    dated information about machine names and such, the basics of the Unix command
    line have not changed in decades.
  prefs: []
  type: TYPE_NORMAL
- en: Starting Eclipse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are [working on your own computer](WorkingAtHome.html), you should have
    installed Eclipse. Else, it is installed on the department machines (and virtual
    machine).
  prefs: []
  type: TYPE_NORMAL
- en: Starting Eclipse on Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Type this at the prompt to start Eclipse on Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Eclipse will start up, display a splash screen, and then show a workplace selection
    dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse Workspace Selection](../Images/e098d77eadfe10ca658afeb8a62ee977.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: 'Eclipse is asking you which workspace folder to use for this session. In response,
    if in the department labs, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: where `*YourUserName*` is your UW CSE username. (**Note:** Do **not** enter
    "`~/workspace331`" for this step. Eclipse does not recognize the '~' character.)
    On your own machine, you can choose where to put your workspace.
  prefs: []
  type: TYPE_NORMAL
- en: If Eclipse shows the welcome screen, containing only the text "Welcome to the
    Eclipse IDE for Java Developers" on a pretty background, switch to the code editor
    by going to Window > Open Perspective > Other... and selecting `Java (default)`.
  prefs: []
  type: TYPE_NORMAL
- en: Starting Eclipse on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'From the start menu, goto: **All Programs ? DEV TOOLS & LANGUAGES ? Eclipse
    ? eclipse**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Eclipse will start up, display a splash screen, and then show a workplace selection
    dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse Workspace Selection in Windows](../Images/34c0c412004a8e0a05c9168e140d2f88.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: 'Eclipse is asking you which workspace folder to use for this session. In response,
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This directory will work on the lab Windows computers; adjust it as needed if
    you are working on your personal computer.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse preferences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to Window(or Eclipse in OS X)->Preferences->Java->Code Style->Formatter.
    Then hit Edit. In the Comments tab, unselect the "enable block comment formatting"
    checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the JDK in Eclipse on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use the Ant buildfile, you need to tell Eclipse to use the Java JDK (development
    kit) instead of the JRE (runtime environment).
  prefs: []
  type: TYPE_NORMAL
- en: In Eclipse, goto **Window ? Preferences** to open the Preferences dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left pane of Preference dialog, select **Java ? Installed JREs**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Search...** button in the Installed JREs pane
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the directory selection window that appears, select **C:\ ? Program Files
    ? Java** as shown in the screenshot below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Screenshot: Searching for JREs](../Images/69ff2141533be9fb0b45820da27ed3e5.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click **OK**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Installed JREs list, check the box next to jdk1.7.0_04 (or any version
    that starts with jdk1.7) and click **OK**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Screenshot: Selecting jdk1.7](../Images/0a286f642bd504321fe2128a05818245.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If Eclipse shows the welcome screen, containing only the text "Welcome to the
    Eclipse IDE for Java Developers" on a pretty background, switch to the code editor
    by going to Window > Open Perspective > Other... and selecting `Java (default)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Eclipse generics errors configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We expect your code to not have any generics-related problems. For example,
    the following code is unacceptable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The generic type `List` of `myList` should be parametrized, for instance, to
    `String` by replacing the first line with `List<String> myList = new ArrayList<String>();`
    Note that `List<String> myList = new ArrayList();` is also incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Eclipse shows generics problems as warnings (indicated by yellow
    lines and markers). You can configure Eclipse to instead issue errors (indicated
    by red lines and markers) for these problems. Doing so will help you remember
    to write acceptable generics code.
  prefs: []
  type: TYPE_NORMAL
- en: To make this configuration, go to **Windows ? Preferences** and select **Java
    ? Compiler ? Errors/Warnings**. Under **Generic types**, change the value of **Unchecked
    generic type operation** to **Error**.
  prefs: []
  type: TYPE_NORMAL
- en: (Note that there is another setting named **Usage of a raw type** that is set
    to **Ignore** by default. We recommend leaving this option disabled or set simply
    to **Warn** because it is specific to the Eclipse compiler and checks for more
    stringent requirements than required by the Java language specification. Thus,
    "Usage of raw type" may complain about issues, that while providing insight about
    your code, is not checked by Oracle's `javac`, which is our official standard
    for compilation errors and warnings in this class.)
  prefs: []
  type: TYPE_NORMAL
- en: Opening Files; Managing Multiple Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Switch to the "Java" perspective in Eclipse if you're not already in it (**Window
    ? Open Perspective ? Other... ? Java**).
  prefs: []
  type: TYPE_NORMAL
- en: You can open multiple files in Eclipse by double-clicking each of them from
    the Package Explorer pane. Once you have multiple files open, you can switch between
    them quickly by holding down **Ctrl** and hitting **F6** to bring up a dropdown
    box of open files, and then using the arrow keys to select the file whose editor
    you wish to bring into focus. You can also navigate through different files using
    the tabs on top of the editor pane.
  prefs: []
  type: TYPE_NORMAL
- en: Creating New Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New Java files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create a new Java source file (with the `.java` extension), select from the
    top menu **File ? New ? Class**. A window will pop up, asking you details about
    the class. Leave the source folder as **cse331/src**, and select a package (e.g.
    `hw1`). Choose a name for your class (e.g. `MyClass`) Type this name in the "Name"
    field and click **Finish**.
  prefs: []
  type: TYPE_NORMAL
- en: (If you want your new class to be executable, it will need a `main` method.
    Eclipse can generate that automatically for you if you check the appropriate checkbox
    in the **New Java Class** screen.)
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot: New Java Class](../Images/ecf35852f28b79e01395ce9e06109483.jpg)'
  prefs: []
  type: TYPE_IMG
- en: New Text files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a similar procedure for creating new non-Java files such as text files.
    Select **File ? New ? File**. In the resulting dialog box, choose the parent directory
    of your new file and type the desired filename. If you want to create a new directory,
    you can do so by appending the directory name in front of your desired filename.
    For example, if you want to create a file `problem0.txt` in the directory `hw1/answers`,
    but the `answers` directory does not yet exist, you can choose `hw1` as the parent
    directory, and then type `answers/problem0.txt` as the file name, and Eclipse
    will create the new directory and file for you.
  prefs: []
  type: TYPE_NORMAL
- en: Editing Java Source Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some useful actions that you can perform when editing Java code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Autocompletion](#autocomplete)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Organizing Imports](#organize-imports)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Viewing Documentation](#viewing-doc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autocompletion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Autocompletion is the ability of an editor to guess what you are typing after
    you type out only part of a word. Using autocompletion will reduce the amount
    of typing that you have to do as well as the number of spelling mistakes, thereby
    increasing your efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse continuously parses your Java files as you are editing, so it is aware
    of the names of variables, methods, etc... that you have declared thus far.
  prefs: []
  type: TYPE_NORMAL
- en: '**CTRL+Space** can be used to autocomplete most things inside the Eclipse Java
    editor. For example, if you have declared a variable named `spanishGreeting` in
    the current class, and have typed the letters `spanishGree` in a subsequent line,
    Eclipse can infer that you mean to type `spanishGreeting`. To use this feature,
    press **CTRL+Space** while your cursor is at the right of the incomplete name.
    You should see `spanishGree` expand to `spanishGreeting`.'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse can also help you autocomplete method names. Suppose you have a variable
    `myList` of type `List`, and you want to call the method `clear`. Begin typing
    "`myList.`" — at this point, a pop-up dialog will display a list of available
    methods for the type `List`, and you can select the appropriate method with the
    arrow keys. You can force the popup to appear with **CTRL+Space**.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing Imports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can press **CTRL+SHIFT+o** to ***o**rganize* your imports in a Java file.
    Eclipse will remove extraneous `import` statements and try to infer correct ones
    for types that you refer to in your code but have not yet been imported. (If the
    name of the class that needs to be imported is ambiguous – for example, there
    is a `java.util.List` as well as a `java.awt.List` – then Eclipse will prompt
    you to choose which one to import.)
  prefs: []
  type: TYPE_NORMAL
- en: Viewing Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although you can directly browse the [Java 7 API](http://docs.oracle.com/javase/7/docs/api/)
    and other documentation at the Oracle website, it is often useful to be able to
    cross-reference parts of your code with the appropriate documentation from within
    your editor.
  prefs: []
  type: TYPE_NORMAL
- en: To view the documentation of a class that is referred to in your code, place
    your cursor over the class's name, and press **SHIFT+F2**. A web browser window
    will be opened to the class's documentation page. If the class is provided by
    Java, the documentation page will be on Oracle's website.
  prefs: []
  type: TYPE_NORMAL
- en: 'For your own classes, you will need to tell Eclipse where to find their documentation.
    To do so, right click on the project name (e.g. `cse331`) in the Package Explorer
    pane and click **"Properties"**. Select **"Javadoc Location"** in the left pane.
    Select the location, e.g. **"file:/homes/iws/*YourUserName*/workspace331/cse331/doc/"**.
    (Note: the **"file:"** portion is important, since the location is expected to
    be recognizable by a web browser.) After setting the Javadoc location path, click
    **OK**. (If on your own machine, modify the path above appropriately.)'
  prefs: []
  type: TYPE_NORMAL
- en: Running Automated Tasks with Ant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ant is a tool that can be used to automate many common tasks, such as compiling,
    testing, and running code. It is also used to [validate a CSE 331 assignment submission.](turnin.html#validate)
    The instructions for Ant are stored in a “buildfile” named `build.xml` in each
    assignment's directory.
  prefs: []
  type: TYPE_NORMAL
- en: The buildfile specifies a set of **targets** that it supports, such as [build](#compiling-cli)
    and [test](#junit-cli). Note that the “help” target will output information about
    the supported targets in our buildfile. The **[validate](turnin.html#validate)**
    target works only on `attu`.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To run Ant for assignment *N* from the command line, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run Ant in Eclipse, right click `cse331/src/hw*N*/build.xml` in the **Package
    Explorer**, where *N* is the desired assignment number. Now right click **Run
    As ? Ant Build...** and in the resulting window, go to **Targets** and select
    the desired target(s).
  prefs: []
  type: TYPE_NORMAL
- en: There is a button near the left-hand side of the Eclipse toolbar that looks
    like ![a green 'play'
  prefs: []
  type: TYPE_NORMAL
- en: button with a suitcase below it](../Images/2b329928cc4866a939aa2c23d4850bd5.jpg)
    which will re-run the last ant target (or other external tool) that you ran. The
    drop down button will let you easily re-run a number of ant targets.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling Java Source Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You must compile your source code before running it. The `javac` compiler is
    used to transform Java programs into bytecode form, contained in a *class file*.
    Class files are recognized by their `.class` extension. The bytecode in class
    files can be executed by the `java` interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To compile all source files for a particular assignment, change your current
    directory to `~/workspace331/cse331/src/hw*N*/`, where *N* is the desired assignment
    number. Now type on the command-line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will run an Ant script that uses the instructions denoted in `build.xml`
    to compile all the `.java` files into corresponding `.class` files. Note that
    if one or more of your files do not compile, you will receive error messages and
    no `.class` files will be generated for the files that do not compile properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to manually compile files without the use of an Ant script,
    you can use `javac` to compile one or more source files into class files for execution
    by the Java interpreter. The following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: will generate class files hw*N*/file1.class, hw*N*/file2.class, etc., for each
    specified source file. Type "`man javac`" at the `attu` prompt for more information
    on `javac` options. You should almost always use the `-g` option, which will provide
    improved debugging output, and also the `-Xlint` option, which provides stricter
    compiler warnings.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Eclipse is set up by default to automatically recompile your code every time
    you save. Classes with compile errors are marked in the **Package Explorer** with
    red cross marks. The compile errors, as well as compile warnings, also appear
    in the **Problems** view (usually situated at the bottom panel of Eclipse).
  prefs: []
  type: TYPE_NORMAL
- en: If your file is saved and Eclipse says that it does not compile but you believe
    that it should, make sure that all of the files on which your file depends are
    saved and compiled. If that does not work, try refreshing your project or using
    **Project ? Rebuild Project** to force Eclipse to recognize the latest versions
    of everything.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling With Ant in Eclipse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To compile with Ant in Eclipse, right click `cse331/hw*N*/build.xml` in the
    **Package Explorer**, where *N* is the desired assignment number. Now right click
    **Run As ? Ant Build...** and in the resulting window, go to **Targets** and select
    **build** in the list of targets.
  prefs: []
  type: TYPE_NORMAL
- en: Running Java Programs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have compiled your source code into class files, you can execute it
    with the Java interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Typically, to run a program you will just type `ant` on the command line, possibly
    with a more specific target: `ant *target*`. However, you can also invoke the
    Java virtual machine directly via the `java` program.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how to run Java programs from the command-line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: (The `-ea` flag enables assertions.)
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you wish to run the `PolyGraph` class from hw1, you would run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that you do not include `.java` or `.class` at the end of the class name.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run a program, right click on the Java source file containing the `main()`
    method and choose **Run As... ? Java Application**.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a button near the left-hand side of the Eclipse toolbar that looks
    like ![a
  prefs: []
  type: TYPE_NORMAL
- en: green 'play' button](../Images/3dc0b99b0d2650d9e1722eba6f13c8ce.jpg) which will
    re-run the last application (or JUnit test, see below) that you ran.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Java Programs with JUnit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**JUnit** is the testing framework that you will use for writing and running
    tests.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[The official web site](http://junit.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[JUnit Cookbook](http://junit.sourceforge.net/doc/cookbook/cookbook.htm), a
    brief tutorial'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[JUnit API](http://junit.sourceforge.net/javadoc/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running JUnit Tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Command-line](#junit-cli)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Eclipse](#junit-eclipse)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command-line
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `test` Ant target can be used to test `SpecificationTests` and `ImplementationTests`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run JUnit without using Ant, change to the `~/workspace331/cse331/src` directory
    and invoke `java org.junit.runner.JUnitCore` for the text interface with the name
    of the test class as a parameter. For example, if I wanted to run `RatTermTest`,
    I could type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Eclipse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: JUnit is integrated with Eclipse, so you can run the test suite from within
    the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: First, select the test you want to run from the **Package Explorer** (usually
    the leftmost pane).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the Eclipse menu at the top of the screen, select **Run ? Run As ? JUnit
    Test**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The JUnit GUI should pop up in place of the Package Explorer momentarily and
    run all the tests. You can double-click on failed tests to jump to the code for
    that test. When you're done inspecting the JUnit results, close the JUnit pane
    to go back to the Package Explorer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are not working at UW CSE, you might have to explicitly add the `junit-4.11.jar`
    library using **Project ? Properties ? Java Build Path ? Libraries ? Add External
    JARs** and then telling Eclipse where your copy of `junit-4.11.jar` is located.
  prefs: []
  type: TYPE_NORMAL
- en: CSE 331 JUnit Framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because your JUnit tests will likely have different class and method names than
    those of your classmates, there needs to be a standardized way of accessing every
    student's tests. Thus, each assignment comes with the JUnit test classes `hw*N*.test.SpecificationTests`
    and `hw*N*.test.ImplementationTests`. You will load all the JUnit tests you wrote
    in one of these two test suites.
  prefs: []
  type: TYPE_NORMAL
- en: '`hw*N*.test.SpecificationTests`, as it name suggests, should contain only *specification
    tests* — that is, those tests that check only for features implied by the specification.
    Consequently, your specification tests should be valid tests for any other person''s
    code that claims to satisfy the same specification, even if that implementation
    is inherently very different.'
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, `hw*N*.test.ImplementationTests` should contain *implementation
    tests* — that is, those tests that test only details that are specific to your
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, suppose you were implementing the following specification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A *specification test* should never pass in a null parameter to this method
    — this would violate the specified pre-condition. However, your particular implementation
    might check for the null parameter and throw a NullPointerException. Your *implementation
    test* can safely exercise this case by passing in null.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, an iterator specification which does not specify the order in which
    elements are returned indicates that no specific order should be assumed in a
    *specification test*. Your implementation may happen to keep elements in a sorted
    list, and so your *implementation test* may wish to check that the elements returned
    by the iterator are sorted.
  prefs: []
  type: TYPE_NORMAL
- en: Before your submit each assignment, you should ensure that your code passes
    both the `SpecificationTests` and `ImplementationTests` test suites. We have provided
    a convenient way to run these tests in each assignment's build file in `~/workspace331/cse331/src/hw*N*/build.xml`.
    The `test` target will run `hw*N*.test.SpecificationTests` and `hw*N*.test.ImplementationTests`.
    The `validate` target runs these tests on a fresh copy of your code it checks
    out from your repository.
  prefs: []
  type: TYPE_NORMAL
- en: Using javadoc to generate specs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Oracle's Java Development Kit includes [javadoc](http://www.oracle.com/technetwork/java/javase/documentation/index-jsp-135444.html),
    a tool that produces specifications from source code annotated with special comments.
    The comments may include "tags", which are introduced by an at-sign (@).
  prefs: []
  type: TYPE_NORMAL
- en: We have an extended javadoc program that recognizes additional CSE 331 tags,
    as well as all the [tags](http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#javadoctags)
    accepted by the Oracle Standard Doclet. These additional tags declare specification
    fields for classes and requires, modifies, and effects clauses for methods. Note
    that these tags must appear **after** all non-tag comments for classes and methods.
  prefs: []
  type: TYPE_NORMAL
- en: Some extended tags belong in the overview for a class; they are used to formally
    define what a given Abstract Data Type represents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| @specfield *name* : *T* // *text* | Indicates that *name* is a abstract specification
    field of type *T* for the class, adding *text* as a comment if present |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| @derivedfield *name* : *T* // *text* | Same as specfield, except that this
    also adds the property "derived" to the output information |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Derived fields can be viewed as functions on preexisting state; thus if a class
    had a specfield `@specfield n : integer` we could define a derived field:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Derived fields are not allowed to hold any information that could not be already
    calculated from the already existing state in the object. Thus, you use specfields
    to introduce new state variables and derived fields to introduce functions on
    those state variables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Derived fields are not strictly needed in specifications, but they may reduce
    complexity and redundancy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Other extended tags belong in the specification for a method; they define the
    method's preconditions, postconditions, and side effects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| @requires *X* | Declares *X* to be a precondition for the method |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| @modifies *Y* | Declares that nothing besides *Y* will be modified by the
    method (as long as *X* holds when it is invoked) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| @effects *Z* | Declares that *Z* will hold at exit from the method (as long
    as *X* holds when it is invoked) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: The preferred way to generate API documentation with the CSE 331-extended javadoc
    is to use the ant `doc` or `doc-hw` target for your assignment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The instructions for eclipse (recommended):'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Right-click on `build.xml` in Package Explorer. It will be under any of the
    hw folders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Run As**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Ant Build... (second option)**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you would like to generate the API JavaDocs for all your hw assignments (recommended),
    select just the **doc** target in the window that appears, and click **Apply**
    and **Run**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If instead, you would like to generate the JavaDocs for only the single homework
    assignment where the `build.xml` file is located, select just the **doc-hw** target,
    and click **Apply** and **Run**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After you see a **BUILD SUCCESSFUL** message in the console at the bottom of
    the screen, right-click on `doc` in Package Explorer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Refresh**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the `doc` folder and double-click `index.html` to open the documentation
    in eclipse's web browser. Or navigate to the folder on your computer and double-click
    `index.html` to open in your default browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note, when you run this, a **local.properties** file may automatically be generated
    by eclipse. It is completely harmless and you can commit it to your repo if your
    want, or just ignore it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The instructions for command-line:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Log in to attu [via SSH](WorkingAtHome.html#remote-attu) from any machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have not yet checked out your repository in attu, then you must first
    check out your repository [using the command line](versioncontrol.html#SetUpCommandLine)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate to cse331/src
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you would like to generate the API for all your hw assignments, go to any
    hw folder and run **ant doc**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If instead, you would like to generate the API for just one hw assignment, go
    to that specific hw folder and run **ant doc-hw**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After you see a **BUILD SUCCESSFUL** message in the console at the bottom of
    the screen, navigate back to cse331/doc, and inside you should see the generated
    javadoc files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Important Notes and Troubleshooting:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You may see a **BUILD FAIL** message. This could be because of serious syntax
    errors in your files that cause the code not to compile. This may also be the
    issue if you see a **BUILD SUCCESSFUL** message but incorrect API in the doc folder.
    To fix these problems, look at the error messages and fix up the most serious
    problems reported there. Javadoc can produce documentation for partially implemented
    files (that is one of its strengths), but it can't compensate for some serious
    problems in the source code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that running this ant task will completely overwrite the existing the API
    in the doc folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you get a "system cannot find the file specified" error in eclipse, then
    this is because the ant task is not set up to use your jdk. To fix this make sure
    you have the **Java 7 JDK** installed, then follow the first 3 steps of the eclipse
    instructions above. Click the JRE tab. If the JDK is in the dropdown for **Seperate
    JRE**, select that. Otherwise, click Installed JREs, Select Add, Select Standard
    VM, Select Directory, then Choose the Java/jdk folder on your computer. Now you
    should be able to select the jdk from the dropdown menu, hit apply, and then run
    without issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After running the ant `doc` target, you should check the output. You may find
    that you need to add line breaks (`<br>`) or paragraph breaks (`<p>`) to your
    javadoc comments for readability. Also, if you omit certain tags, subsequent text
    may fail to appear in the output. Finally, since much of the text of javadoc comments
    is inserted in a HTML document, you must be careful with text that can be interpreted
    as HTML markup, such as the less-than (<) and greater-than (>) characters. For
    instance, if you write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: then <x> and <y> will be interpreted as HTML tags in the output (and won't be
    displayed by a browser). It's usually better to just write
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Report any weird behavior or complaints about `javadoc` to [cse331-staff@cs.washington.edu](mailto:cse331-staff@cs.washington.edu).
  prefs: []
  type: TYPE_NORMAL
- en: 'For problems or questions regarding this page, contact: [cse331-staff@cs.washington.edu](mailto:cse331-staff@cs.washington.edu).'
  prefs: []
  type: TYPE_NORMAL
