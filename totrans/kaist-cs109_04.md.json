["```\n$ ktc\n>>> :load collatz3.kts\n>>> findMax(100000)\nStarting at 77031 needs 350 steps.\n>>> findMax(110000)\nStarting at 106239 needs 353 steps.\n>>> findMax(113000)\nStarting at 106239 needs 353 steps.\n>>> findMax(114000)\n\n```", "```\nfun collatzBounded(n0: Int, steps: Int): Int {\n  var n = n0\n  var count = 0\n  while (n != 1 && count < steps) {\n    n = next(n)\n    count += 1\n  }\n  return count\n}\n\nfun findLong(n: Int, steps: Int) {\n  for (i in 2 .. n) {\n    val count = collatzBounded(i, steps)\n    if (count >= steps) { \n      println(\"Starting at $i needs $count steps.\")\n    }\n  }\n}\n\n```", "```\n>>> :load collatz4.kts\n>>> findLong(114000, 1000)\nStarting at 113383 needs 1000 steps.\n>>> findLong(114000, 10000)\nStarting at 113383 needs 10000 steps.\n>>> findLong(114000, 100000)\nStarting at 113383 needs 100000 steps.\n>>> findLong(114000, 1000000)\nStarting at 113383 needs 1000000 steps.\n\n```", "```\nfun collatzBounded(n0: Int, steps: Int): Int {\n  var n = n0\n  var count = 0\n  while (n != 1 && count < steps) {\n    print(\"$n \")\n    n = next(n)\n    count += 1\n  }\n  println()\n  return count\n}\n\n```", "```\n>>> collatzBounded(113383, 200)\n113383 340150 170075 510226 255113 765340 382670 191335 574006 287003\n861010 430505 1291516 645758 322879 968638 484319 1452958 726479\n2179438 1089719 3269158 1634579 4903738 2451869 7355608 3677804\n1838902 919451 2758354 1379177 4137532 2068766 1034383 3103150 1551575\n4654726 2327363 6982090 3491045 10473136 5236568 2618284 1309142\n654571 1963714 981857 2945572 1472786 736393 2209180 1104590 552295\n1656886 828443 2485330 1242665 3727996 1863998 931999 2795998 1397999\n4193998 2096999 6290998 3145499 9436498 4718249 14154748 7077374\n3538687 10616062 5308031 15924094 7962047 23886142 11943071 35829214\n17914607 53743822 26871911 80615734 40307867 120923602 60461801\n181385404 90692702 45346351 136039054 68019527 204058582 102029291\n306087874 153043937 459131812 229565906 114782953 344348860 172174430\n86087215 258261646 129130823 387392470 193696235 581088706 290544353\n871633060 435816530 217908265 653724796 326862398 163431199 490293598\n245146799 735440398 367720199 1103160598 551580299 1654740898\n827370449 -1812855948 -906427974 -453213987 -1359641960 -679820980\n-339910490 -169955245 -509865734 -254932867 -764798600 -382399300\n-191199650 -95599825 -286799474 -143399737 -430199210 -215099605\n-645298814 -322649407 -967948220 -483974110 -241987055 -725961164\n-362980582 -181490291 -544470872 -272235436 -136117718 -68058859\n-204176576 -102088288 -51044144 -25522072 -12761036 -6380518 -3190259\n-9570776 -4785388 -2392694 -1196347 -3589040 -1794520 -897260 -448630\n-224315 -672944 -336472 -168236 -84118 -42059 -126176 -63088 -31544\n-15772 -7886 -3943 -11828 -5914 -2957 -8870 -4435 -13304 -6652 -3326\n-1663 -4988 -2494 -1247 -3740 -1870 -935 -2804 -1402 -701 -2102 -1051\n-3152 -1576 -788 -394 200\n\n```", "```\n>>> next(827370449)\n-1812855948\n\n```", "```\n>>> 827370449 * 3\n-1812855949\n\n```", "```\n>>> next(827370449)\n-1812855948\n>>> 827370449 * 3\n-1812855949\n>>> Int.MAX_VALUE\n2147483647\n>>> 827370449 * 3\n-1812855949\n>>> 827370449.toLong() * 3\n2482111347\n>>> 827370449L * 3\n2482111347\n>>> Int.MAX_VALUE\n2147483647\n>>> Long.MAX_VALUE\n9223372036854775807\n\n```", "```\n 0010 = 2\n+0111 = 7\n---------\n 1001 = 9\n\n 1001 = 9\n+0111 = 7\n---------\n 0000 = 0\n\n```", "```\n 0101 = 5\n+1111 = 15 = -1\n---------------\n 0100 = 4\n\n 0111 = 7\n+1100 = 12 = -4\n---------------\n 0011 = 3\n\n```", "```\n0111 = 7\n0110 = 6\n0101 = 5\n0100 = 4\n0011 = 3\n0010 = 2\n0001 = 1\n0000 = 0\n1111 = -1\n1110 = -2\n1101 = -3\n1100 = -4\n1011 = -5\n1010 = -6\n1001 = -7\n1000 = -8\n\n```", "```\n11 * 00110001010100001010101111010001 = \n     10010011111100100000001101110011\n\n```"]