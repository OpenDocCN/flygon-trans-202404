["```\n    struct lock {\n        int locked;\n        struct queue q;\n    };\n\n    void lock_acquire(struct lock *l) {\n        intr_disable();\n        if (!l->locked) {\n            l->locked = 1;\n        } else {\n            queue_add(&l->q, thread_current());\n            thread_block();\n        }\n        intr_enable();\n    }\n\n    void lock_release(struct lock *l) {\n        intr_disable();\n        if (queue_empty(&l->q) {\n            l->locked = 0;\n        } else {\n            thread_unblock(queue_remove(&l->q));\n        }\n        intr_enable();\n    }\n\n    ```", "```\n    struct lock {\n        int locked;\n    };\n\n    void lock_acquire(struct lock *l) {\n        while (swap(&l->locked, 1)) {\n            /* Do nothing */\n        }\n    }\n\n    void lock_release(struct lock *l) {\n        l->locked = 0;\n    }\n\n    ```", "```\n    struct lock {\n        int locked;\n        struct queue q;\n    };\n\n    void lock_acquire(struct lock *l) {\n        if (swap(&l->locked, 1) != 0) {\n            queue_add(&l->q, thread_current());\n            thread_block();\n        }\n    }\n\n    void lock_release(struct lock *l) {\n        if (queue_empty(&l->q) {\n           l->locked = 0;\n        } else {\n            thread_unblock(queue_remove(&l->q));\n        }\n    }\n\n    ```", "```\n    struct lock {\n        int locked;\n        struct queue q;\n        int sync;         /* Normally 0\\. */\n    };\n\n    void lock_acquire(struct lock *l) {\n        while (swap(&l->sync, 1) != 0) {\n            /* Do nothing */\n        }\n        if (!l->locked) {\n            l->locked = 1;\n            l->sync = 0;\n        } else {\n            queue_add(&l->q, thread_current());\n            l->sync = 0;\n            thread_block();\n        }\n    }\n\n    void lock_release(struct lock *l) {\n        while (swap(&l->sync, 1) != 0) {\n            /* Do nothing */\n        }\n        if (queue_empty(&l->q) {\n            l->locked = 0;\n        } else {\n            thread_unblock(queue_remove(&l->q));\n        }\n        l->sync = 0;\n    }\n\n    ```", "```\n    struct lock {\n        int locked;\n        struct queue q;\n        int sync;         /* Normally 0\\. */\n    };\n\n    void lock_acquire(struct lock *l) {\n        while (swap(&l->sync, 1) != 0) {\n            /* Do nothing */\n        }\n        if (!l->locked) {\n            l->locked = 1;\n            l->sync = 0;\n        } else {\n            queue_add(&l->q, thread_current());\n            thread_block(&l->sync);\n        }\n    }\n\n    void lock_release(struct lock *l) {\n        while (swap(&l->sync, 1) != 0) {\n            /* Do nothing */\n        }\n        if (queue_empty(&l->q) {\n            l->locked = 0;\n        } else {\n            thread_unblock(queue_remove(&l->q));\n        }\n        l->sync = 0;\n    }\n\n    ```", "```\n    struct lock {\n        int locked;\n        struct queue q;\n        int sync;         /* Normally 0\\. */\n    };\n\n    void lock_acquire(struct lock *l) {\n        intr_disable();\n        while (swap(&l->sync, 1) != 0) {\n            /* Do nothing */\n        }\n        if (!l->locked) {\n            l->locked = 1;\n            l->sync = 0;\n        } else {\n            queue_add(&l->q, thread_current());\n            thread_block(&l->sync);\n        }\n        intr_enable();\n    }\n\n    void lock_release(struct lock *l) {\n        intr_disable();\n        while (swap(&l->sync, 1) != 0) {\n            /* Do nothing */\n        }\n        if (queue_empty(&l->q) {\n            l->locked = 0;\n        } else {\n            thread_unblock(queue_remove(&l->q));\n        }\n        l->sync = 0;\n        intr_enable();\n    }\n\n    ```"]