- en: Type assertion and type switch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Type assertion and type switch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, you may want to know the exact type of an interface variable. In
    this scenario, you can use `type assertion`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`x` is the variable whose type must be **interface**, and `T` is the type which
    you want to check. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The running result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, using `v.(int)` to assert the `v` is `int` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'if the `type assertion` operation fails, a running panic will occur: change'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'into:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then executing the program will get following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To avoid this, `type assertion` actually returns an additional `boolean` variable
    to tell whether this operations holds or not. So modify the program as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, the output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, you can also use `type switch` which makes use of `type assertion`
    to determine the type of variable, and do the operations accordingly. Check the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The running result is here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Compared to `type assertion`, `type switch` uses keyword `type` instead of the
    specified variable type (such as `int`) in the parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Effective Go](https://golang.org/doc/effective_go.html);'
  prefs: []
  type: TYPE_NORMAL
- en: '[Go â€“ x.(T) Type Assertions](https://codingair.wordpress.com/2014/07/21/go-x-t-type-assertions/);'
  prefs: []
  type: TYPE_NORMAL
- en: '[How to find a type of a object in Golang?](http://stackoverflow.com/questions/20170275/how-to-find-a-type-of-a-object-in-golang).'
  prefs: []
  type: TYPE_NORMAL
