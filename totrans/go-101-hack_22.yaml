- en: Type assertion and type switch
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型断言和类型开关
- en: Type assertion and type switch
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型断言和类型开关
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Sometimes, you may want to know the exact type of an interface variable. In
    this scenario, you can use `type assertion`:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能想知道接口变量的确切类型。在这种情况下，您可以使用`类型断言`：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`x` is the variable whose type must be **interface**, and `T` is the type which
    you want to check. For example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`是其类型必须为**接口**的变量，`T`是您要检查的类型。例如：'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The running result is:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 运行结果是：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above example, using `v.(int)` to assert the `v` is `int` variable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，使用`v.(int)`来断言`v`是`int`变量。
- en: 'if the `type assertion` operation fails, a running panic will occur: change'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`类型断言`操作失败，将会发生运行时恐慌：更改
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'into:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then executing the program will get following error:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后执行程序将会得到以下错误：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To avoid this, `type assertion` actually returns an additional `boolean` variable
    to tell whether this operations holds or not. So modify the program as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，`类型断言`实际上返回一个额外的`布尔`变量来告诉此操作是否成立。因此，修改程序如下：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This time, the output is:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，输出是：
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Furthermore, you can also use `type switch` which makes use of `type assertion`
    to determine the type of variable, and do the operations accordingly. Check the
    following example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以使用`类型开关`，它利用`类型断言`来确定变量的类型，并根据需要执行操作。请查看以下示例：
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The running result is here:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行结果在此：
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Compared to `type assertion`, `type switch` uses keyword `type` instead of the
    specified variable type (such as `int`) in the parentheses.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与`类型断言`相比，`类型开关`在括号中使用关键字`type`而不是指定的变量类型（如`int`）。
- en: 'References:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料：
- en: '[Effective Go](https://golang.org/doc/effective_go.html);'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[Effective Go](https://golang.org/doc/effective_go.html)；'
- en: '[Go – x.(T) Type Assertions](https://codingair.wordpress.com/2014/07/21/go-x-t-type-assertions/);'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go – x.(T)类型断言](https://codingair.wordpress.com/2014/07/21/go-x-t-type-assertions/)；'
- en: '[How to find a type of a object in Golang?](http://stackoverflow.com/questions/20170275/how-to-find-a-type-of-a-object-in-golang).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何在Golang中找到对象的类型？](http://stackoverflow.com/questions/20170275/how-to-find-a-type-of-a-object-in-golang)。'
