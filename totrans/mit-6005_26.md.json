["```\nFormula = Variable(name:String)\n          + Not(formula:Formula)\n          + And(left:Formula, right:Formula)\n          + Or(left:Formula, right:Formula)\n```", "```\nAnd(Or(Variable(\"p\"), Variable(\"q\")),\n    Or(Not(Variable(\"p\")), Variable(\"r\")))\n```", "```\n(p || q) && ((!p) || r) \n```", "```\nclass VariableNameComparator implements Comparator<Variable> {\n    public int compare(Variable v1, Variable v2) {\n        return v1.name().compareTo(v2.name());\n    }\n}\n```", "```\nVariable v1, v2;\nComparator<Variable> c = new VariableNameComparator();\n...\nint a = c.compare(v1, v2);\nint b = c.compare(v2, v1);\nSortedSet<Variable> vars = new TreeSet<>(c); // vars is sorted by name\n```", "```\nComparator<Variable> c = (v1, v2) -> v1.name().compareTo(v2.name());\n```", "```\nMusic = Note(duration:double, pitch:Pitch, instrument:Instrument)\n        + Rest(duration:double)\n        + Concat(m1:Music, m2:Music)\n```", "```\nimport music.*;\nimport static music.Instrument.*;\nimport static music.MusicLanguage.*;\n```", "```\nimport music.*;\nimport static music.Instrument.*;\nimport static music.MusicLanguage.*;\n```", "```\nMusic r = rest(1);\nPitch p = new Pitch('A').transpose(6);\nMusic n = note(1, p, GLOCKENSPIEL);\nList<Music> s = Arrays.asList(r, n);\n```"]