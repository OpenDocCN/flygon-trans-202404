- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: A Guide to Porting C/C++ to Rust
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C/C++迁移到Rust的指南
- en: This book is for people familiar with C or C++ who are thinking of using Rust.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是为熟悉C或C++的人准备的，他们正在考虑使用Rust。
- en: Before we go into what Rust is or why it might be preferable to C/C++ *in some
    cases*, let's think of software that is mission critical and must not or should
    not fail.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论Rust是什么，或者为什么在*某些情况下*它可能更可取于C/C++之前，让我们考虑一下那些必须不或者不应该失败的关键任务的软件。
- en: Operating system services and daemons
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统服务和守护进程
- en: Internet of things devices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网设备
- en: Industrial control software
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工业控制软件
- en: Medical devices - MRI, ultrasound, X-ray, ventilators etc.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 医疗设备 - MRI、超声波、X射线、呼吸机等。
- en: High availability servers / databases / cloud storage etc.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可用性服务器/数据库/云存储等。
- en: Avionics, telemetry, rocketry, drones etc.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 航空电子学、遥测、火箭技术、无人机等。
- en: All this code must run as efficiently and reliably as possible. It must run
    on devices for days, weeks, months or preferably years without failure. It cannot
    suffer intermittent freezes, erratic performance, memory leaks, crashes or other
    issues without impacting on its purpose.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些代码必须尽可能高效和可靠地运行。它必须在设备上连续运行数天、数周、数月，或者最好是数年而不出现故障。它不能够遭受间歇性的冻结、不稳定的性能、内存泄漏、崩溃或其他问题，而不影响其目的。
- en: 'Normally such software would be written in C or C++, but consider these *every
    day* programming issues that can afflict these languages:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通常这样的软件会用C或C++编写，但考虑到这些每天都可能影响这些语言的编程问题：
- en: Dangling pointers. A program calls an invalid pointer causing a crash.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 悬空指针。程序调用无效指针导致崩溃。
- en: Buffer overruns / underruns. Code writes beyond an allocated buffer causing
    memory corruption or a page exception.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓冲区溢出/溢出。代码写入超出分配缓冲区的范围，导致内存损坏或页面异常。
- en: Memory leaks. Code that allocates memory *or resources* without calling the
    corresponding free action. C++ provides classes such as smart pointers and techniques
    like RAII to mitigate these issues but still occur.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存泄漏。分配内存*或资源*的代码没有调用相应的释放操作。C++提供了诸如智能指针之类的类和RAII之类的技术来减轻这些问题，但问题仍然存在。
- en: Data races. Multiple threads write to data at the same time causing corruption
    or other destabilizing behavior.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据竞争。多个线程同时写入数据，导致数据损坏或其他不稳定行为。
- en: 'Rust stops these bad things happening **by design**. And it does so without
    impacting on runtime performance because all of these things are checked at compile
    time:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Rust通过设计阻止了这些不良事件的发生。而且它在运行时不会影响性能，因为所有这些事情都在编译时进行检查：
- en: Object lifetimes are tracked automatically to prevent memory leaks and dangling
    pointers.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象生命周期会自动跟踪，以防止内存泄漏和悬空指针。
- en: The length of arrays and collections is enforced.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组和集合的长度是强制执行的。
- en: Data race conditions are prevented by strict enforcement of mutex / guards and
    object ownership.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过严格执行互斥锁/守卫和对象所有权，可以防止数据竞争条件。
- en: Code that passes the compiler's checks is transformed into machine code with
    similar performance and speed as the equivalent C or C++.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编译器的检查的代码被转换为与等效的C或C++具有相似性能和速度的机器代码。
- en: This is a "zero-cost" approach. The compiler enforces the rules so that there
    is zero runtime cost over the equivalent and correctly written program in C or
    C++. Safety does not compromise performance.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种“零成本”方法。编译器强制执行规则，以确保与C或C++中等效且正确编写的程序相比，没有运行时成本。安全性不会影响性能。
- en: In addition Rust plays well C. You may invoke C from Rust or invoke Rust from
    C using foreign function interfaces. You can choose to rewrite a critical section
    of your codebase leave the remainder alone.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Rust与C兼容。你可以从Rust中调用C，或者从C中调用Rust，使用外部函数接口。你可以选择重写代码库的关键部分，而保持其余部分不变。
- en: For example, the Firefox browser uses Rust to analyse video stream data - headers
    and such like where corrupt or malicious code could destabilize the browser or
    even be exploitable.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Firefox浏览器使用Rust来分析视频流数据 - 标头和类似的内容，其中损坏或恶意代码可能会使浏览器不稳定，甚至是可利用的。
- en: Why Rust?
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择Rust？
- en: Let's start by saying if what you have works and is reliable, then the answer
    to the question is "there's no reason" you should consider porting.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先说，如果你有可靠的工作代码，那么对于这个问题的答案就是“没有理由”你应该考虑迁移。
- en: However if you have code that *doesn't* work or *isn't* reliable, or *hasn't*
    been written yet or is due a major rewrite then perhaps you have answered your
    own question.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你的代码*不*工作或*不*可靠，或者*还没有*被编写，或者需要进行重大重写，那么也许你已经回答了自己的问题。
- en: You could write the code or fixes in C/C++ in which case you have to deal with
    all the unsafe issues that the language does not protect you from. Or you might
    consider that choosing a safe-by-design language is a good way to protect you
    from suffering bugs in the field when the code is supposed to be ready for production.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用C/C++编写代码或修复问题，在这种情况下，你必须处理语言没有保护你的所有不安全问题。或者你可以考虑选择一种安全设计的语言，这是保护你免受在代码应该准备投入生产时出现错误的好方法。
- en: Rust is not a magic wand
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rust不是魔法棒
- en: 'Despite the things the language can protect you against, it cannot protect
    you against the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管语言可以保护你免受一些事情，但它无法保护你免受以下问题：
- en: General race conditions such as deadlocks between threads
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般的竞争条件，比如线程之间的死锁
- en: Unbounded growth, e.g. a loop that pushes values onto a vector until memory
    is exhausted.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无界增长，例如一个循环将值推送到向量，直到内存耗尽。
- en: Application logic errors, i.e. errors that have nothing to do with the underlying
    language, e.g. missing out the line that should say "if door_open { sound_alarm();
    }"
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用逻辑错误，即与基础语言无关的错误，例如遗漏应该说“if door_open { sound_alarm(); }”的行。
- en: Explicit unsafe sections doing unsafe and erroneous things
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明确的不安全部分执行不安全和错误的操作
- en: Errors in LLVM or something outside of Rust's control.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LLVM中的错误或Rust控制范围之外的东西。
