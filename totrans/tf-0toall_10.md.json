["```\n# Lab 4 Multi-variable linear regression\nimport tensorflow as tf\ntf.set_random_seed(777)  # for reproducibility\n\nx_data = [[73., 80., 75.],\n          [93., 88., 93.],\n          [89., 91., 90.],\n          [96., 98., 100.],\n          [73., 66., 70.]]\ny_data = [[152.],\n          [185.],\n          [180.],\n          [196.],\n          [142.]]\n\n# placeholders for a tensor that will be always fed.\nX = tf.placeholder(tf.float32, shape=[None, 3])\nY = tf.placeholder(tf.float32, shape=[None, 1])\n\nW = tf.Variable(tf.random_normal([3, 1]), name='weight')\nb = tf.Variable(tf.random_normal([1]), name='bias')\n\n# Hypothesis\nhypothesis = tf.matmul(X, W) + b\n\n# Simplified cost/loss function\ncost = tf.reduce_mean(tf.square(hypothesis - Y))\n\n# Minimize\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=1e-5)\ntrain = optimizer.minimize(cost)\n\n# Launch the graph in a session.\nsess = tf.Session()\n# Initializes global variables in the graph.\nsess.run(tf.global_variables_initializer())\n\nfor step in range(2001):\n    cost_val, hy_val, _ = sess.run(\n        [cost, hypothesis, train], feed_dict={X: x_data, Y: y_data})\n    if step % 10 == 0:\n        print(step, \"Cost: \", cost_val, \"\\nPrediction:\\n\", hy_val)\n\n'''\n0 Cost:  7105.46\nPrediction:\n [[ 80.82241058]\n [ 92.26364136]\n [ 93.70250702]\n [ 98.09217834]\n [ 72.51759338]]\n10 Cost:  5.89726\nPrediction:\n [[ 155.35159302]\n [ 181.85691833]\n [ 181.97254944]\n [ 194.21760559]\n [ 140.85707092]]\n\n...\n\n1990 Cost:  3.18588\nPrediction:\n [[ 154.36352539]\n [ 182.94833374]\n [ 181.85189819]\n [ 194.35585022]\n [ 142.03240967]]\n2000 Cost:  3.1781\nPrediction:\n [[ 154.35881042]\n [ 182.95147705]\n [ 181.85035706]\n [ 194.35533142]\n [ 142.036026  ]]\n\n''' \n```"]