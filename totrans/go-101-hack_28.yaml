- en: Check data race
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check data race
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '"Data race" is a common but notorious issue in concurrency programs. sometimes
    it is difficult to debug and reproduce, especially in some big system, so this
    will make people very frustrated. Thankfully, the `Go` toolchain provides a `race
    detector` (now only works on `amd64` platform.) which can help us quickly spot
    and fix this kind of issue, and this can save our time even lives!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following classic "data race" program as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Two tasks increase `global` variable simultaneously, so the final value of
    `global` is non-deterministic. Using `race detector` to check it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Cool! the `race detector` finds the issue precisely, and it also provides the
    detailed tips of how to modifying it. Adding the lock of writing the `global`
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, race detector is calm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Please be accustomed to use this powerful tool frequently, you will appreciate
    it, I promise!
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Introducing the Go Race Detector](https://blog.golang.org/race-detector).'
  prefs: []
  type: TYPE_NORMAL
