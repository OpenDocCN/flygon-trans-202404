- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '6.824 2015 Lecture 1: Introduction'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Note:** These lecture notes were slightly modified from the ones posted on
    the 6.824 [course website](http://nil.csail.mit.edu/6.824/2015/schedule.html)
    from Spring 2015.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Distributed systems
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is a distributed system?
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: multiple networked cooperating computers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* Internet E-Mail, Athena file server, Google MapReduce, Dropbox,
    etc.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why distribute?
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: to connect physically separate entities
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to achieve security via physical isolation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to tolerate faults via replication at separate sites
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to increase performance via parallel CPUs/mem/disk/net
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '...but:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: complex, hard to debug
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: new classes of problems, e.g. partial failure (did he accept my e-mail?)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Leslie Lamport: *"A distributed system is one in which the failure of a computer
    you didn''t even know existed can render your own computer unusable."*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Advice:* don''t distribute if a central system will work'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why take this course?
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: interesting -- hard problems, non-obvious solutions
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: active research area -- lots of progress + big unsolved problems
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used by real systems -- unlike 10 years ago -- driven by the rise of big Web
    sites
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hands-on -- you'll build a real system in the labs
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Course structure
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the course [website](http://pdos.csail.mit.edu/6.824).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Course components
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lectures about big ideas, papers, labs
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Readings: research papers as case studies'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: please read papers before class
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'paper for today: [MapReduce paper](papers/mapreduce.pdf)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: each paper has a question for you to answer and one for you to ask (see web
    site)
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: submit question & answer before class, one or two paragraphs
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mid-term quiz in class, and final exam
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Labs: build increasingly sophisticated fault-tolerant services'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First lab is due on Monday
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project: design and build a distributed system of your choice or the system
    we pose in the last month of the course'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: teams of two or three
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: project meetings with course staff
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: demo in last class meeting
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Main topics
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Example:*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: a shared file system, so users can cooperate, like Dropbox
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: but this lecture isn't about dropbox specifically
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: just an example goal to get feel for distributed system problems
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lots of client computers
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecture
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choice of interfaces
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monolithic file server?
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Block server(s) -> FS logic in clients?
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Separate naming + file servers?
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Separate FS + block servers?
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Single machine room or unified wide area system?
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wide-area dramatically more difficult.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Client/server or peer-to-peer?
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact w/ performance, security, fault behavior.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How do clients/servers communicate?
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct network communication is pretty painful
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Want to hide network stuff from application logic
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Most systems organize distribution with some structuring framework(s)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RPC, RMI, DSM, MapReduce, etc.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Distribution can hurt: network b/w and latency bottlenecks'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lots of tricks, e.g. caching, threaded servers
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Distribution can help: parallelism, pick server near client'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Idea: scalable design'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We would like performance to scale linearly with the addition of machines
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`N x` servers `-> N x` total performance'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Need a way to divide the load by N
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: divide the state by N
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: split by user
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: split by file name
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '"sharding" or "partitioning"'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Rarely perfect `->` only scales so far
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global operations, e.g. search
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Load imbalance
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One very active user
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One very popular file
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`->` one server 100%, added servers mostly idle'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-> N x` servers `->` `1 x` performance'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fault tolerance
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Dropbox: ~10,000 servers; [some fail](http://www.datacenterknowledge.com/archives/2013/10/23/how-dropbox-stores-stuff-for-200-million-users/)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can I use my files if there's a failure?
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some part of network, some set of servers
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Maybe: replicate the data on multiple servers'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perhaps client sends every operation to both
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Maybe only needs to wait for one reply
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Opportunity:* operate from two "replicas" independently if partitioned?'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Opportunity:* can 2 servers yield 2x availability **AND** 2x performance?'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistency
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Contract w/ apps/users about meaning of operations
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: e.g. "read yields most recently written value"
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: hard due to partial failure, replication/caching, concurrency
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Problem:* keep replicas identical'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If one is down, it will miss operations
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Must be brought up to date after reboot
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If net is broken, *both* replicas maybe live, and see different ops
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete file, still visible via other replica
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*"split brain"* -- usually bad'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Problem:* clients may see updates in different orders'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Due to caching or replication
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I make `grades.txt` unreadable, then TA writes grades to it
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What if the operations run in different order on different replicas?
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistency often hurts performance (communication, blocking)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many systems cut corners -- "relaxed consistency"
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Shifts burden to applications
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Labs
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Focus: fault tolerance and consistency -- central to distributed systems.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'lab 1: MapReduce'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'labs 2/3/4: storage servers'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: progressively more sophisticated (tolerate more kinds of faults)
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: progressively harder too!
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: patterned after real systems, e.g. MongoDB
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab 4 has core of a real-world design for 1000s of servers
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What you''ll learn from the labs:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: easy to listen to lecture / read paper and think you understand
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: building forces you to really understand
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*"I hear and I forget, I see and I remember, I do and I understand"* (Confucius?)'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: you'll have to do some design yourself
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: we supply skeleton, requirements, and tests
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: but we leave you substantial scope to solve problems your own way
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: you'll get experience debugging distributed systems
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test cases simulate failure scenarios:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'distributed systems are tricky to debug: concurrency and failures'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: many client and servers operating in parallel
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: test cases make servers fail at the "most" inopportune time
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*think first* before starting to code!'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: otherwise your solution will be a mess
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: and/or, it will take you a lot of time
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: code review
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: learn from others
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: judge other solutions
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ve tried to ensure that the hard problems have to do w/ distributed systems:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: not e.g. fighting against language, libraries, etc.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: thus Go (type-safe, garbage collected, slick RPC library)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: thus fairly simple services (MapReduce, key/value store)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lab 1: MapReduce'
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: help you get up to speed on Go and distributed programming
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: first exposure to some fault tolerance
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: motivation for better fault tolerance in later labs
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: motivating app for many papers
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: popular distributed programming framework
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: many descendants frameworks
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computational model
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: aimed at document processing
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: split doc `-> K1 k, list<V1> values`
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: run `Map(K1 key, list<V1> values)` on each split `-> list<K2, V2> kvps`
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: run `Reduce(K2 key, list<V2> values)` on each partition `-> list<V2>`
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: merge result
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: write a map function and reduce function
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: framework takes care of parallelism, distribution, and fault tolerance
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'some computations are not targeted, such as:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: anything that updates a document
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example: `wc`'
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: word count
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Go''s implementation, we have:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`func Map(value string) *list.List`'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the input is *a split* of the file `wc` is called on
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a split is just a partion of the file, as decided by MapReduce's splitter (can
    be customized, etc.)
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: returns a list of *key-value pairs*
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the key is the word (like 'pen')
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the value is 1 (to indicate 'pen' occurred once)
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note:** there will be multiple `<''pen'', 1>` entries in the list if ''pen''
    shows up more times'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`func Reduce(key string, values *list.List) string`'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the input is a key and a list of (all? ) the values mapped to that key in the
    `Map()` phase
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: so here, we would expect a `Reduce('pen', [1,1,1,1])` call if pen appeared 4
    times in the input file
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TODO**: not clear if it''s also possible to get three reduce calls as follows:'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Reduce(''pen'', [1,1]) -> 2` + `Reduce(''pen'', [1,1]) -> 2`'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Reduce(''pen'', [2,2])`'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the paper seems to indicate `Reduce`'s return value is just a list of values
    and so it seems that the association of those values with the key 'pen' in this
    case would be lost, which would prevent the 3rd `Reduce('pen')` call
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example: `grep`'
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: map phase
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: master splits input in `M` partitions
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: calls Map on each partition
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`map(partition) -> list(k1,v1)`'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: search partition for word
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: produce a list with one item if word shows up, `nil` if not
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: partition results among `R` reducers
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reduce phase
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce job collects 1/R output from each Map job
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: all map jobs have completed!
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reduce(k1, v1) -> v2`'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'identity function: `v1` in, `v1` out'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: merge phase
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: master merges `R` outputs
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'number of jobs: `M x R` map jobs'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how much speed up do we get on `N` machines?
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ideally: `N`'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'bottlenecks:'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: stragglers
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: network calls to collect a Reduce partition
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: network calls to interact with FS
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: disk I/O calls
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fault tolerance model
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: master is not fault tolerant
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*assumption:* this single machine won''t fail during running a MapReduce app'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: but many workers, so have to handle their failures
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'assumption: workers are fail stop'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: they fail and stop (e.g., don't send garbled weird packets after a failure)
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: they may reboot
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What kinds of faults might we want to tolerate?
  id: totrans-200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'network:'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lost packets
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: duplicated packets
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: temporary network failure
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: server disconnected
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: network partitioned
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'server:'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: server crash+restart (master versus worker?)
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: server fails permanently (master versus worker?)
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: all servers fail simultaneously -- power/earthquake
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'bad case: crash mid-way through complex operation'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: what happens if we fail in the middle of map or reduce?
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: bugs -- but not in this course
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: what happens when bug in map or reduce?
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: same bug in Map over and over?
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: management software kills app
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: malice -- but not in this course
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools for dealing with faults?
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**retry** -- e.g. if packet is lost, or server crash+restart'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: packets (TCP) and MapReduce jobs
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'may execute MapReduce job twice: must account for this'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**replicate** -- e.g. if one server or part of net has failed'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: next labs
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**replace** -- for long-term health'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: e.g., worker
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Retry jobs
  id: totrans-226
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'network falure: oops execute job twice'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ok for MapReduce, because `map()/reduce()` produces same output
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`map()/reduce()` are "functional" or "deterministic"'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: how about intermediate files?
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: atomic rename
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'worker failure: may have executed job or not'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: so, we may execute job more than once!
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: but ok for MapReduce as long as `map()` and `reduce()` functions are deterministic
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: what would make `map() or reduce()` not deterministic?
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: is executing a request twice in general ok?
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: no. in fact, often not.
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: unhappy customer if you execute one credit card transaction several times
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: adding servers
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: easy in MapReduce -- just tell master
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: hard in general
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: server may have lost state (need to get new state)
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: server may have rebooted quickly
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: may need to recognize that to bring server up to date
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: server may have a new role after reboot (e.g., not the primary)
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: these harder issues you would have to deal with to make the MapReduce master
    fault tolerant
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: topic of later labs
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab 1 code
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The lab 1 app (see `main/wc.go`):'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: stubs for `map() and reduce()`
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: you fill them out to implement word count (wc)
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how would you write grep?
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The lab 1 sequential implementation (see `mapreduce/mapreduce.go`):'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 'demo: `run wc.go`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code walk through start with `RunSingle()`
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The lab 1 worker (see `mapreduce/worker.go`):'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: the remote procedure calls (RPCs) arguments and replies (see `mapreduce/common.go`).
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server side of RPC
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RPC handlers have a particular signature
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DoJob`'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shutdown`'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RunWorker`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rpcs.Register`: register named handlers -- so Call() can find them'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Listen`: create socket on which to listen for RPC requests'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: for distributed implementation, replace "unix" w. "tcp"
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: replace "me" with a `<dns,port>` tuple name
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServeConn`: runs in a separate thread (why?)'
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: serve RPC concurrently
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a RPC may block
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Client side of RPC
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Register()`'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`call()` (see `common.go`)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: make an RPC
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lab code dials for each request
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: typical code uses a network connection for several requests
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: but, real must be prepared to redial anyway
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a network connection failure, doesn't imply a server failure!
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: we also do this to introduce failure scenarios easily
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: intermittent network failures
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: just loosing the reply, but not the request
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The lab 1 master (see mapreduce/master.go)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: You write it
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will have to deal with distributing jobs
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will have to deal with worker failures
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将不得不处理工人的失败。
