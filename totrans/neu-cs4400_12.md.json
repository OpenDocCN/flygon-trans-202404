["```\n(match value\u00a0 [pattern result-expr]\u00a0 ...)\n```", "```\n(match (list 1 2 3)\u00a0 [x x]) ; evaluates to the list\n```", "```\n(match foo\u00a0 ['x \"yes\"]\u00a0 [else \"no\"])\n```", "```\n(match (list 1 2 3)\u00a0 [(list x y z) (+ x y z)]) ; evaluates to 6(match '((1) (2) 3)\u00a0 [(list (list x) (list y) z) (+ x y z)]) ; also 6\n```", "```\n(match '((1 2) (3 4) (5 6) (7 8))\u00a0 [(list (list x y) ...) (append x y)]); evaluates to (1 3 5 7 2 4 6 8)\n```", "```\nid\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 -- matches anything, binds `id' to it_\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  -- matches anything, but does not bind(number: n)\u00a0 \u00a0  -- matches any number and binds it to `n'(symbol: s)\u00a0 \u00a0  -- same for symbols(string: s)\u00a0 \u00a0  -- strings(sexpr: s)\u00a0 \u00a0 \u00a0 -- S-expressions (needed sometimes for Typed Racket)(and pat1 pat2) -- matches both patterns(or pat1 pat2)\u00a0 -- matches either pattern (careful with bindings)\n```", "```\n(match x\u00a0 [(list (symbol: syms) ...) syms])\n```", "```\n> (define (foo x)\u00a0 \u00a0 (match x\u00a0 \u00a0 \u00a0 [(list (list (symbol: s) (number: n) ...) ...)\u00a0 \u00a0 \u00a0  (list 'symbols: s 'numbers: n)]))> (foo (list (list 'x 1 2 3) (list 'y 4 5)))'(symbols: (x y) numbers: ((1 2 3) (4 5)))\n```", "```\n> (define (foo x)\u00a0 \u00a0 (match x\u00a0 \u00a0 \u00a0 [(list (or 1 2 3)) 'single]\u00a0 \u00a0 \u00a0 [(list (and x (list 1 _)) 2) x]\u00a0 \u00a0 \u00a0 [(or (list 1 x) (list 2 x)) x]))> (foo (list 3))'single> (foo (list (list 1 99) 2))'(1 99)> (foo (list 1 10))10> (foo (list 2 10))10\n```"]