- en: 'WAE: Adding Bindings to AETuesday, January 24th'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'WAE: 向 AETuesday 添加绑定, January 24th'
- en: '[PLAI §3](plai.pdf#chapter.3 "Substitution")'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §3](plai.pdf#chapter.3 "Substitution")'
- en: 'To add this to our language, we start with the BNF. We now call our language
    “WAE” (With+AE):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这个添加到我们的语言中，我们从BNF开始。我们现在将我们的语言称为“WAE”（With+AE）：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that we had to introduce two new rules: one for introducing an identifier,
    and one for using it. This is common in many language specifications, for example
    `define-type` introduces a new type, and it comes with `cases` that allows us
    to destruct its instances.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不得不引入两个新规则：一个用于引入标识符，另一个用于使用它。这在许多语言规范中都很常见，例如 `define-type` 引入了一个新类型，并且它带有
    `cases`，允许我们解构其实例。
- en: 'For `<id>` we need to use some form of identifiers, the natural choice in Racket
    is to use symbols. We can therefore write the corresponding type definition:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `<id>`，我们需要使用某种形式的标识符，在Racket中的自然选择是使用符号。因此，我们可以写出相应的类型定义：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The parser is easily extended to produce these syntax objects:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器很容易扩展以产生这些语法对象：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But note that this parser is inconvenient — if any of these expressions:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，这个解析器很不方便 —— 如果这些表达式中的任何一个：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'would result in a “bad syntax” error, which is not very helpful. To make things
    better, we can add another case for `with` expressions that are malformed, and
    give a more specific message in that case:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 会导致“bad syntax”错误，这并不是很有帮助。为了改进情况，我们可以为 `with` 表达式添加另一个情况，即格式不正确的情况，并在这种情况下给出更具体的消息：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'and finally, to group all of the parsing code that deals with `with` expressions
    (both valid and invalid ones), we can use a single case for both of them:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了将所有与 `with` 表达式相关的解析代码（无论是有效还是无效的）分组，我们可以对它们使用一个单独的情况：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And now we’re done with the syntactic part of the `with` extension.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了 `with` 扩展的语法部分。
- en: Quick note — why would we indent `With` like a normal function in code like
    this
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 快速说明 —— 为什么我们会像在这样的代码中一样对 `With` 进行缩进
- en: ''
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: instead of an indentation that looks like a `let`
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 而不是一个看起来像 `let` 的缩进
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ''
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '?'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ？
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The reason for this is that the second indentation looks like a binding construct
    (eg, the indentation used in a `let` expression), but `With` is *not* a binding
    form — it’s a *plain function* because it’s at the Racket level. You should therefore
    keep in mind the huge difference between that `With` and the `with` that appears
    in WAE programs:'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这样做的原因是第二个缩进看起来像是一个绑定结构（例如，在 `let` 表达式中使用的缩进），但 `With` *不是* 一个绑定形式 —— 它是一个 *普通函数*，因为它在Racket级别上。因此，您应该记住
    `With` 与出现在WAE程序中的 `with` 之间的巨大差异：
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Another way to look at it: imagine that we intend for the language to be used
    by Spanish or Chinese speakers. In this case we would translate “`with`”:'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另一种看待它的方式：想象一下，我们打算让这种语言被西班牙或中文使用者使用。在这种情况下，我们将翻译 “`with`”：
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: but we will *not* do the same for `With` if we (the language implementors) are
    English speakers.
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但是，如果我们（语言实现者）是英语人士，我们将 *不会* 对 `With` 做同样的操作。
