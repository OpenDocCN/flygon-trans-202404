- en: Operators - grouping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Operators Grouping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: buffer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The signature of `buffer()` operator is :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Buffer itself means we wait with emitting any values until the `breakObservable`
    happens. An example of that is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this case the values 0,1,2,3 is emitted all at once.
  prefs: []
  type: TYPE_NORMAL
- en: Business case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Auto complete**'
  prefs: []
  type: TYPE_NORMAL
- en: The most obvious case when dealing with the `buffer()` operator is an `auto
    complete`. But how does `auto complete` work? Let's look at it in steps
  prefs: []
  type: TYPE_NORMAL
- en: user enter keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'search is made base on those keystrokes The important thing though is that
    the search itself is carried out as you are typing, either it''s carried out because
    you typed x number of characters or the more common approach is to let you finish
    typing and do the search, you could be editing as you type. So let''s take our
    first step into such a solution:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We capture `keyup` events. We also use a `debounce()` operator that essentially
    says; I will emit values once you stopped typing for x miliseconds. This solution
    is just a first step on the way however as it is reporting the exact keys being
    typed. A better solution would be to capture the input element''s actual content
    and also to perform an ajax call, so let''s look at a more refined solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s call this one `auto complete on steroids`. The reason for the name is
    that we save every single interaction the user does before finally deciding on
    the final input that should become an Ajax call. So a result from the above could
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see we could potentially store a whole lot more about a user than
    just the fact that they made an auto complete search, we can store how they type
    and that may or may not be interesting..
  prefs: []
  type: TYPE_NORMAL
- en: '**Double click**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example above I''ve showed how it could be interesting to capture groups
    of keys but another group of UI events of possible interests are mouse clicks,
    namely for capturing single, double or triple clicks. This is quite inelegant
    code to write if not in Rxjs but with it, it''s a breeze:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to the `debounce()` operator we are able to express wait for 300ms before
    emitting anything. This is quite few lines and it's easy for us to decide what
    our filter should look like.
  prefs: []
  type: TYPE_NORMAL
- en: bufferTime
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The signature of `bufferTime()` is
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The idea is to record everything that happens during that time slice and output
    all the values. Below is an example of recording all activities on an input in
    1 second time slices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case you will get an output looking like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Not so usable maybe so we probably need to make it nice with a `filter()` to
    see what was actually typed, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Also note I changed event to `keyup`. Now we are able to see all `keyup` events
    that happened for a sec.
  prefs: []
  type: TYPE_NORMAL
- en: Business case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The example above could be quite usable if you want to record what another user
    on the site is doing and want to replay all the interactions they ever did or
    if they started to type and you want to send this info over a socket. The last
    is something of a standard functionality nowadays that you see a person typing
    on the other end. So there are definitely use cases for this.
  prefs: []
  type: TYPE_NORMAL
- en: groupBy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TODO
  prefs: []
  type: TYPE_NORMAL
