- en: Operators - grouping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符 - 分组
- en: Operators Grouping
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符分组
- en: buffer
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓冲
- en: 'The signature of `buffer()` operator is :'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`buffer()`运算符的签名是：'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Buffer itself means we wait with emitting any values until the `breakObservable`
    happens. An example of that is the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Buffer本身意味着我们等待直到`breakObservable`发生才发出任何值。一个例子是以下内容：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case the values 0,1,2,3 is emitted all at once.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，值0,1,2,3一次性发出。
- en: Business case
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: '**Auto complete**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动完成**'
- en: The most obvious case when dealing with the `buffer()` operator is an `auto
    complete`. But how does `auto complete` work? Let's look at it in steps
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 处理`buffer()`运算符时最明显的情况是`自动完成`。但是`自动完成`是如何工作的呢？让我们逐步看一下
- en: user enter keys
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户输入按键
- en: 'search is made base on those keystrokes The important thing though is that
    the search itself is carried out as you are typing, either it''s carried out because
    you typed x number of characters or the more common approach is to let you finish
    typing and do the search, you could be editing as you type. So let''s take our
    first step into such a solution:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于这些按键击键进行搜索。然而，重要的是搜索本身是在您输入时进行的，无论是因为您输入了x个字符还是更常见的方法是让您完成输入并进行搜索，您可能正在输入时进行编辑。因此，让我们迈出这样一个解决方案的第一步：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We capture `keyup` events. We also use a `debounce()` operator that essentially
    says; I will emit values once you stopped typing for x miliseconds. This solution
    is just a first step on the way however as it is reporting the exact keys being
    typed. A better solution would be to capture the input element''s actual content
    and also to perform an ajax call, so let''s look at a more refined solution:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们捕获`keyup`事件。我们还使用了一个`debounce()`运算符，它基本上表示; 一旦您停止输入x毫秒，我将发出值。然而，这个解决方案只是迈出的第一步，因为它报告了实际键入的确切键。一个更好的解决方案是捕获输入元素的实际内容，并执行一个ajax调用，所以让我们看一个更精细的解决方案：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s call this one `auto complete on steroids`. The reason for the name is
    that we save every single interaction the user does before finally deciding on
    the final input that should become an Ajax call. So a result from the above could
    look like the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们称之为`超级自动完成`。之所以取这个名字是因为我们保存用户最终决定成为Ajax调用之前所做的每一个交互。因此，上面的结果可能如下所示：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see we could potentially store a whole lot more about a user than
    just the fact that they made an auto complete search, we can store how they type
    and that may or may not be interesting..
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们可能存储有关用户的更多信息，而不仅仅是他们进行了自动完成搜索的事实，我们可以存储他们的输入方式，这可能有趣也可能无趣..
- en: '**Double click**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**双击**'
- en: 'In the example above I''ve showed how it could be interesting to capture groups
    of keys but another group of UI events of possible interests are mouse clicks,
    namely for capturing single, double or triple clicks. This is quite inelegant
    code to write if not in Rxjs but with it, it''s a breeze:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我展示了如何捕获键的组可能是有趣的，但另一组可能感兴趣的UI事件是鼠标点击，即捕获单击、双击或三击。如果不使用Rxjs，编写这样的代码会相当不优雅，但使用Rxjs，就像轻而易举一样：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Thanks to the `debounce()` operator we are able to express wait for 300ms before
    emitting anything. This is quite few lines and it's easy for us to decide what
    our filter should look like.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了`debounce()`运算符，我们能够表达在发出任何内容之前等待300毫秒。这是相当少的行数，我们很容易决定我们的过滤器应该是什么样子。
- en: bufferTime
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bufferTime
- en: The signature of `bufferTime()` is
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`bufferTime()`的签名是'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The idea is to record everything that happens during that time slice and output
    all the values. Below is an example of recording all activities on an input in
    1 second time slices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是记录在那个时间片段内发生的一切并输出所有值。下面是在1秒时间片段内记录输入上的所有活动的示例。
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this case you will get an output looking like:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您将得到一个看起来像这样的输出：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Not so usable maybe so we probably need to make it nice with a `filter()` to
    see what was actually typed, like so:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可能不太可用，所以我们可能需要使用`filter()`来查看实际输入的内容，就像这样：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Also note I changed event to `keyup`. Now we are able to see all `keyup` events
    that happened for a sec.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意我将事件更改为`keyup`。现在我们能够看到发生的所有`keyup`事件。
- en: Business case
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: The example above could be quite usable if you want to record what another user
    on the site is doing and want to replay all the interactions they ever did or
    if they started to type and you want to send this info over a socket. The last
    is something of a standard functionality nowadays that you see a person typing
    on the other end. So there are definitely use cases for this.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例在以下情况下可能非常有用：如果您想记录站点上另一个用户正在做什么，并想重放他们曾经做过的所有交互，或者如果他们开始输入，您想通过套接字发送此信息。最后一种情况是现在的标准功能之一，您可以看到对方正在输入。因此，这绝对有其用途。
- en: groupBy
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: groupBy
- en: TODO
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: TODO
