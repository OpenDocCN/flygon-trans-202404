- en: 'Chapter 5: Types in Depth'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：深入类型
- en: Complex Types Using Interfaces
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用接口的复杂类型
- en: What's Covered
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含内容
- en: We're going to start off this chapter by introducing TypeScript *interfaces*.
    This chapter examines interfaces in the context of JavaScript "data" objects and
    their fields/properties. As many of you know, interfaces play an over-sized role
    in many common design patterns (think SOLID^([1](#fn_1))). We will talk about
    interfaces in that context in Chapter 9\.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过介绍 TypeScript *接口* 来开始本章。本章将在 JavaScript“数据”对象及其字段/属性的上下文中研究接口。正如许多人所知，接口在许多常见设计模式中扮演着超大的角色（想想
    SOLID^([1](#fn_1))）。我们将在第9章中讨论接口在这个背景下的作用。
- en: 'TypeScript provides other more advanced typing support that you may have come
    across in C# and Java. This chapter covers some of them, including:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 提供了其他更高级的类型支持，您可能在 C# 和 Java 中遇到过。本章涵盖了其中一些，包括：
- en: '***A Note About Generics***'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '***关于泛型的说明***'
- en: 'Generics offer a very powerful data typing capability. They look and act a
    lot like generics in C# and are a very effective tool helping you adhere to the
    Don''t Repeat Yourself (DRY) principle. If you aren''t familiar with DRY, here''s
    one place you could start: [http://deviq.com/don-t-repeat-yourself/](http://deviq.com/don-t-repeat-yourself/)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型提供了非常强大的数据类型能力。它们看起来和行为很像 C# 中的泛型，并且是一个非常有效的工具，帮助您遵循不要重复自己（DRY）原则。如果您不熟悉 DRY，这里是您可以开始的地方：[http://deviq.com/don-t-repeat-yourself/](http://deviq.com/don-t-repeat-yourself/)
- en: Although generics are part of the type system, the tend to go hand in hand with
    classes, so we'll hold off on describing them until chapter 10 after you've had
    a chance to read about and digest TypeScript classes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管泛型是类型系统的一部分，但它们往往与类一起使用，因此我们将在第10章中描述它们，让您有机会阅读和消化 TypeScript 类之后再介绍它们。
- en: 'Enumerations: Attach a human-friendly label to a number.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举：将一个人类友好的标签附加到一个数字。
- en: 'Unions: A variable can be a "number" or "string" or "MyBrandShinyNewObject"
    but not anything else.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联合类型：一个变量可以是“数字”或“字符串”或“MyBrandShinyNewObject”，但不能是其他任何类型。
- en: 'Custom types: Think classes but without a constructor. (If you don''t know
    about classes, don''t worry, you''ll learn a it about them in chapter 9).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义类型：类似类但没有构造函数。（如果您不了解类，不用担心，您将在第9章中学到一些关于它们的知识）。
- en: Interfaces as Data Describers
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接口作为数据描述符
- en: 'Declare a TypeScript interface like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 声明 TypeScript 接口如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That code defines a new interface called "myInterface". It's an empty interface,
    but nonetheless valid^([2](#fn_2)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码定义了一个名为“myInterface”的新接口。它是一个空接口，但仍然有效^([2](#fn_2))。
- en: 'Variables can now declare their type as being that interface:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 变量现在可以声明它们的类型为该接口：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Although there are some use cases for empty interfaces, you'll normally use
    them this way to describe complex objects. Let's consider a business scenario
    and implement a supporting data structure in plain JavaScript.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有一些空接口的用例，但通常您会以这种方式使用它们来描述复杂对象。让我们考虑一个业务场景，并在纯 JavaScript 中实现一个支持数据结构。
- en: 'Your client owns a book store and you''re developing a simple app that lets
    your client''s customers view a listing of all available books. In JavaScript
    object terms, a "book" has these properties:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您的客户拥有一家书店，您正在开发一个简单的应用程序，让您的客户的客户查看所有可用书籍的列表。在 JavaScript 对象术语中，一个“书籍”具有以下属性：
- en: Author
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作者
- en: Title
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题
- en: Genre (e.g. biography, history, sci-fi)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型（例如 传记，历史，科幻）
- en: Short Description
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简短描述
- en: Total Pages
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总页数
- en: Condition (e.g. New, Great, OK, Not Great)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件（例如 新的，很棒，好，不太好）
- en: 'In pure JavaScript, we might model a book this way:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯 JavaScript 中，我们可以这样建模一本书：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That''s simple enough. We have an object called "bookModel." The developer''s
    intent is pretty clear, although there''s actually plenty of room for improvement.
    If you want to re-use `bookModel` in pure JavaScript, you could clone it^([3](#fn_3)):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这就足够简单了。我们有一个名为“bookModel”的对象。开发者的意图非常明确，尽管实际上还有很大的改进空间。如果您想在纯 JavaScript 中重用`bookModel`，您可以克隆它^([3](#fn_3))：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In TypeScript, we can use interfaces to define a better shape and even self-document
    the model. Here is one way to do it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TypeScript 中，我们可以使用接口来定义一个更好的形状，甚至可以自我记录模型。以下是一种方法：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When we want an actual book instance, we define it like this in TypeScript:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要一个实际的书籍实例时，在 TypeScript 中我们这样定义它：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This interface shows three immediate advantages TypeScript provides over JavaScript:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接口展示了 TypeScript 相对于 JavaScript 提供的三个立即优势：
- en: The developer's intent is much clearer. You can tell that TotalPages is meant
    to hold numeric values while the rest are meant to hold strings^([4](#fn_4)).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发者的意图更加清晰。您可以看出 TotalPages 应该保存数值，而其余的应该保存字符串^([4](#fn_4))。
- en: Spot-on intellisense.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准确的智能感知。
- en: '*It''s really a model*. It''s not a JavaScript variable masquerading as model.
    In fact, when you compile a TypeScript interface, it produces no JavaScript at
    all. Only the compiler knows about the interface. There is no run-time artifact.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*这真的是一个模型*。它不是一个伪装成模型的 JavaScript 变量。事实上，当你编译 TypeScript 接口时，它根本不会生成任何 JavaScript。只有编译器知道这个接口。没有运行时的产物。'
- en: 'Let''s assume you agree that TypeScript conveys the the dev''s intent more
    clearly than the pure JS example^([5](#fn_5)). Here''s a short 40 second video
    showing VS Code intellisense at work:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您同意 TypeScript 比纯 JS 示例更清晰地传达了开发人员的意图^([5](#fn_5))。这里有一个短短 40 秒的视频展示了 VS Code
    智能感知的工作：
- en: '[https://www.youtube.com/embed/o_wxodLGT34](https://www.youtube.com/embed/o_wxodLGT34)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/o_wxodLGT34](https://www.youtube.com/embed/o_wxodLGT34)'
- en: '(Depending on you''re reading the book, that video may not appear. In that
    case, [click this link](https://www.youtube.com/watch?v=o_wxodLGT34&feature=youtu.be)
    or go directly to the YouTube video with this link: [https://youtu.be/o_wxodLGT34](https://youtu.be/o_wxodLGT34)).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: (根据您阅读书籍的方式，该视频可能不会出现。在这种情况下，[点击此链接](https://www.youtube.com/watch?v=o_wxodLGT34&feature=youtu.be)或直接使用以下链接访问
    YouTube 视频：[https://youtu.be/o_wxodLGT34](https://youtu.be/o_wxodLGT34))。
- en: 'Here are some key takeaways from the video:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是视频中的一些关键要点：
- en: Once you define an interface, it becomes another candidate data type. Use it
    the same way as the built-in data types, such as string, boolean, number, etc.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦定义了一个接口，它就成为另一个候选数据类型。使用它的方式与内置数据类型（如字符串、布尔值、数字等）相同。
- en: 'Once you define a variable with an interface data type, you must usually include
    all of the interface fields. NOTE: As you''ll soon see, it''s possible to define
    optional interface components as well.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您用接口数据类型定义一个变量，通常必须包含所有接口字段。注意：正如您很快会看到的，也可以定义可选的接口组件。
- en: It's not enough to add all of the interface fields to the "aBook" variable.
    You must also add them with the correct type. In the video, I tried to assign
    a string value to "TotalPages" field but the IDE told me that was not allowed.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不仅要将所有接口字段添加到"aBook"变量中，还必须以正确的类型添加它们。在视频中，我试图将字符串值分配给"TotalPages"字段，但 IDE 告诉我不允许这样做。
- en: Refactoring with Interfaces
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过接口进行重构
- en: Interfaces give us even more meaningful information and it's particularly useful
    when we refactor our code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接口为我们提供了更多有意义的信息，在重构代码时特别有用。
- en: Let's imagine that we need to change our book model. When we started, we didn't
    realize that many books have multiple authors. As a result, we need to refactor
    the model and make Author an array of strings, not just a scalar / single string.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一下，我们需要更改我们的书籍模型。当我们开始时，我们没有意识到许多书籍有多个作者。因此，我们需要重构模型，并将作者改为字符串的数组，而不仅仅是一个标量/单个字符串。
- en: 'In pure JS, we don''t need to do anything special. We just start writing code
    like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯 JS 中，我们不需要做任何特殊的事情。我们只需开始编写这样的代码：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It's a very simple change to make, but it's quite difficult to find all the
    places where you need to make the change. You mostly have to do a global search
    in your IDE to find instances of "Author" and refactor where you find them.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的更改，但很难找到需要进行更改的所有地方。您大多数时候必须在 IDE 中进行全局搜索，找到"Author"的实例并在找到它们的地方进行重构。
- en: 'Contrast this with TypeScript:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与 TypeScript 相比：
- en: '[https://www.youtube.com/embed/fNtcCTeMAhQ](https://www.youtube.com/embed/fNtcCTeMAhQ)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/fNtcCTeMAhQ](https://www.youtube.com/embed/fNtcCTeMAhQ)'
- en: '(Depending on how you''re reading the book, you may not be able to see the
    video. In that case, [try clicking here](https://youtu.be/fNtcCTeMAhQ) or use
    the following URL in your favorite web browser: [https://youtu.be/fNtcCTeMAhQ](https://youtu.be/fNtcCTeMAhQ))'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: (根据您阅读书籍的方式，您可能无法看到视频。在这种情况下，[请点击这里](https://youtu.be/fNtcCTeMAhQ)或在您喜欢的网络浏览器中使用以下网址：[https://youtu.be/fNtcCTeMAhQ](https://youtu.be/fNtcCTeMAhQ))
- en: When I changed Author from `string` to `string[]`, I invalidated every instance
    of every book model in the code. I can't run a successful build until I fix it.
    I still have a potentially tricky refactoring task on my hands - after all, I
    still need to fix every place in the code that references Author. However, the
    compiler won't let me miss any of those changes. That is powerful stuff.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我将作者从`string`更改为`string[]`时，我使代码中每个书籍模型的每个实例都失效了。在我修复之前，我无法成功构建。我仍然需要处理一个潜在棘手的重构任务
    - 毕竟，我仍然需要修复代码中引用作者的每个地方。然而，编译器不会让我错过任何这些更改。这是非常强大的东西。
- en: Nested Objects and Interfaces
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌套对象和接口
- en: Although `BookModel` is technically a complex object, it's not *very* complex.
    Let's spice things up and take another look at "Author." We've already refactored
    the model to account for multiple authors. Authors are normal people, just like
    the rest of us, and in the United States and elsewhere, they usually have both
    a first and last name. In addition, authors *love* feedback. To this end, we want
    the author's preferred email for feedback.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: This next bit of code shows the new `AuthorModel` and refactors `BookModel`
    to use it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, TypeScript supports nested objects quite nicely.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: If you're using VSCode or Visual Studio, try copying in the above code. Hover
    your mouse over the Authors field in either Example 1 or Example 2 and then press
    F12\. This will bring you to the definition of the object. This is very handy
    when trying to understand the underlying definition of a given type/interface.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Interfaces - Mapping a REST Response
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll wrap up the discussion on interfaces by reverse engineering a REST response.
    In this scenario, I''m making a call out to a SharePoint REST endpoint asking
    for a "user"^([6](#fn_6)). When I make the call, I get back a lot of information,
    starting with the HTTP wrapper around what I really want:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '!["HTTP Wrapper"](RestInterface1.JPG "HTTP Wrapper")'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'Figure: HTTP Wrapper'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTTP wrapper consists of:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: config (complex object)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data (complex object)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: headers (complex object)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: status (number)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: statusText (string)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can define an interface that matches that:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The above example is a bit lazy - it''s not trying to model the data underlying
    `config` or `headers`. I''m waving my hands in their general direction by using
    "any." I certainly could model those objects but I''m going to focus on `data`
    instead. You''ll notice that "data" is missing from the interface. Lets link that
    in. But first we need to define an interface that models the data portion of the
    REST response. To start, I need to know what the REST response is giving me:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '!["Data Portion of REST Response"](RestInterface2.JPG "Data Portion of REST
    Response")'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: 'Figure: Data Portion of REST Response'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'This interface maps things nicely:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note the `odata.editLink` field in the response - if your object's name has
    otherwise invalid characters in it, you can still get and set its values when
    you reference it via its name this way.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to link them in. Here''s the code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice the `extends` keyword. I'm defining a new interface, `userProfileResponse`
    by *extending* the previously defined `httpResponse` interface. The new `userProfileResponse`
    interface contains all the fields and structure of both.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Here's another 40 second video that shows this visually.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/embed/oK3MpqhrVOo](https://www.youtube.com/embed/oK3MpqhrVOo)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '(Depending on how you''re reading the book, you may not see the video. In that
    case, try [clicking here](https://www.youtube.com/watch?v=oK3MpqhrVOo&feature=youtu.be)
    or go to YouTube directly in your web browser: [https://youtu.be/oK3MpqhrVOo](https://youtu.be/oK3MpqhrVOo).)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: The last dozen seconds of the video show you that the IDE understands the structure
    of the new `userProfileResponse` interface.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Summarizing Interfaces
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'TypeScript interfaces are a very useful feature of the language:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: They are very good at demonstrating the developer's intent
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDEs understand their structure and provide great intellisense support.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are better at modeling content than pure JavaScript.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to refactor one of your models, it's much more difficult to miss
    something since everywhere you use the interface breaks.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're not finished with interfaces - they also play a role with classes. That's
    where a significant amount of their pattern-implementation power comes from. Before
    we get to that, we'll cover off several other great typing features - enums, unions
    and custom types.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Enumerations and Union Types
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we''ve covered primitive data types (numbers, boolean, etc.) and how
    you can model complex objects using these primitive types. You can, in fact, create
    deeply nested data models using interfaces themselves. TypeScript provides additional
    ways to describe data. We''ll look at two more of them: enumerations and unions.
    Note that TypeScript provides even more types such as intersection types, generics
    and type aliases. Some of these (e.g. intersections) cater to tools writers more
    than the casual audience I have in mind for this book. Generics, on the other
    hand, deserve their own chapter and work best with classes and methods.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Enumerations
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enumerations allow you to connect a string label to a numeric value. This is
    best shown via example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Use enumerations in your code like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Many languages provide a similar enum syntax and if you've worked with one (like
    C# or Java) this all looks very familiar.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: As with everywhere else in TypeScript, a good IDE supports enumerations with
    intellisense.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'The snippet above example shows that you can match a text label with an arbitrary
    integer value. Sometimes, you don''t care about the value. You just want the convenience
    of a human-readable label to use in your code. In that case, you can define an
    initial value and the compiler will increment it for you behind the scenes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this case, Down, Left and Right are assigned the values 2, 3 and 4 respectively.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Mapping labels, such as "FORBIDDEN" to a number value "403" constitutes the
    main use case for enums. Used this way, they allow you to express yourself more
    clearly in code. *You* may be fully aware that an http 403 is a "forbidden" message
    but other, newer developers may not.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Enums As Objects, Or Not
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unlike interfaces, the TypeScript compiler generates code for enums by default.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the TypeScript Code and the generated JS:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here''s the generated JavaScript:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see, TypeScript wraps the enum inside its own Immediately Invoked
    Function Expression (IIFE) and lives on as a code artifact. Most of the time,
    this isn''t useful. You can skip the code generation and instead declare the enum
    as `const`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，TypeScript 将枚举包装在自己的立即调用的函数表达式 (IIFE) 中，并作为代码工件继续存在。大多数情况下，这是没有用的。您可以跳过代码生成，而是将枚举声明为
    `const`：
- en: Prefer Const Enums
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 更喜欢使用 Const 枚举
- en: You should normally prefer to use const enums. There are probably some good
    use cases for non-const enums but you almost certainly won't encounter them in
    your first weeks and months with the language, if at all. Const enums generate
    less code and that generated code is as easy to understand as the non-const generated
    code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您通常应该更喜欢使用 const 枚举。非 const 枚举可能有一些很好的用例，但在您的第一周或月甚至以后几乎肯定不会遇到它们。const 枚举生成的代码更少，生成的代码与非
    const 生成的代码一样易于理解。
- en: This is also in keeping with the broader "use const first" rule. If you can
    adopt that habit you'll be taking some early steps toward a more functional programming
    style and significantly reduce the risk of unanticipated side effects in your
    code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这也符合更广泛的 "首先使用 const" 规则。如果您能养成这个习惯，您将迈出一些向更功能性编程风格迈出的早期步伐，并显著降低代码中出现意外副作用的风险。
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This results in more compact JavaScript:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致 JavaScript 更加紧凑：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It even puts in some helpful comments describing the the meaning of "403" or
    "200" if you find yourself digging into the generated JS.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 它甚至加入了一些有用的注释，描述了如果您发现自己深入研究生成的 JS 时 "403" 或 "200" 的含义。
- en: Union Types
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 联合类型
- en: 'Union Types allow you to create a define a new entity that is comprised of
    multiple types or even values. Here''s a simple example:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 联合类型允许您创建一个由多个类型或甚至值组成的新实体。这是一个简单的例子：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This bit of code defines a function, "move" that takes a single parameter, "inDirection."
    Intellisense ensures that you don't try to pass in an invalid direction, like
    "sideways." Here's a short video demonstrating that.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码定义了一个函数 "move"，它接受一个参数 "inDirection"。智能提示确保您不会尝试传入无效的方向，比如 "sideways"。这里是一个演示的简短视频。
- en: '[https://www.youtube.com/embed/lfAa1-b-sng](https://www.youtube.com/embed/lfAa1-b-sng)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/lfAa1-b-sng](https://www.youtube.com/embed/lfAa1-b-sng)'
- en: '(If you can''t see the video, try [clicking here](https://youtu.be/lfAa1-b-sng).
    Or, open your preferred web browser and go to it directly: [https://youtu.be/lfAa1-b-sng](https://youtu.be/lfAa1-b-sng))).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: （如果您无法看到视频，请[单击此处](https://youtu.be/lfAa1-b-sng)。或者，打开您喜欢的网络浏览器并直接访问它：[https://youtu.be/lfAa1-b-sng](https://youtu.be/lfAa1-b-sng))）。
- en: 'This isn''t a particularly great example since in cases like this, you would
    probably use an enumeration instead or split it out into five functions (moveLeft,
    moveRight, moveUp, moveDown and lower level "move" function). For a better use
    case, let''s consider legacy code. Let''s say you have built a library of JavaScript
    utility functions and you want to start using that library with a TypeScript project.
    Your library has a function, `calculateCollectionTotal`. This function takes in
    an array of objects and as long as they share a common field in common, "Total",
    it will add them all up and return the result. Here''s what that might look like:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是一个特别好的例子，因为在这种情况下，您可能会使用枚举，或者将其拆分为五个函数（moveLeft、moveRight、moveUp、moveDown
    和较低级别的 "move" 函数）。对于一个更好的用例，让我们考虑遗留代码。假设您已经构建了一个 JavaScript 实用函数库，并且想要在 TypeScript
    项目中开始使用该库。您的库有一个函数，`calculateCollectionTotal`。这个函数接受一个对象数组，并且只要它们有一个共同的字段 "Total"，它就会把它们全部加起来并返回结果。这是它可能看起来的样子：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you''re converting this legacy code to TypeScript, The "correct" approach
    here is to refactor the code, starting with a look at your invoices, orders and
    picking slips objects. Find their common elements, define an interface or possibly
    an abstract base class^([7](#fn_7)). Restructure all the objects and update the
    overall code base. However, that''s a lot of work. Union types can help you right
    away without the need for so much refactoring. Here''s what it could look like:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将此旧代码转换为 TypeScript，则此处的 "正确" 方法是重构代码，首先查看您的发票、订单和拣货单对象。找到它们的共同元素，定义一个接口或可能是一个抽象基类^([7](#fn_7))。重新构造所有对象并更新整个代码库。然而，这是很多工作。联合类型可以立即帮助您，而无需进行如此多的重构。以下是可能的样子：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This bit of TypeScript does the same thing as its plain JS cousin. However,
    it adds in some type safety that your IDE's intellisense feature can use. It's
    also nicely self-documenting. With one look at the signature, it's plain to anyone
    that this function was designed to calculate totals on a specific set of objects
    and no other objects.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这段 TypeScript 代码与其普通的 JS 版本做的事情是一样的。然而，它增加了一些类型安全，你的 IDE 的智能感知功能可以使用。它也很好地自我记录。只需看一眼签名，任何人都可以明白这个函数是设计用来计算特定对象集合的总数，而不是其他对象。
- en: You'll read about a better way to accomplish this using generics but they would
    force you to make a bigger change to your code base.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你将了解到使用泛型来完成这个更好的方法，但这将迫使你对代码库进行更大的更改。
- en: Further Reading
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following articles provide alternative and/or a deeper dive into the topics
    discussed in this chapter:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下文章提供了本章讨论的主题的替代和/或更深入的探讨：
- en: This article plus video covers pretty much the same ground as I do with interfaces
    above, with but with a lot fewer words :). [http://tech.queryhome.com/153271/what-is-interface-in-typescript?utm_source=dlvr.it&utm_medium=twitter](http://tech.queryhome.com/153271/what-is-interface-in-typescript?utm_source=dlvr.it&utm_medium=twitter)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这篇文章加视频基本上涵盖了我在上面关于接口的内容，但用了更少的文字 :). [http://tech.queryhome.com/153271/what-is-interface-in-typescript?utm_source=dlvr.it&utm_medium=twitter](http://tech.queryhome.com/153271/what-is-interface-in-typescript?utm_source=dlvr.it&utm_medium=twitter)
- en: 'A lengthy article that talks about using interfaces and unions to model data:
    [https://www.triplet.fi/blog/different-approaches-to-modeling-data-with-typescript/](https://www.triplet.fi/blog/different-approaches-to-modeling-data-with-typescript/)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一篇长篇文章讨论了使用接口和联合类型来建模数据的方法：[https://www.triplet.fi/blog/different-approaches-to-modeling-data-with-typescript/](https://www.triplet.fi/blog/different-approaches-to-modeling-data-with-typescript/)
- en: 'TypeScript 2.4 (which came out just as I was finished version 1.0 of this book)
    introduces string enums! You can read about them straight from Microsoft''s blog:
    [https://blogs.msdn.microsoft.com/typescript/2017/06/12/announcing-typescript-2-4-rc/](https://blogs.msdn.microsoft.com/typescript/2017/06/12/announcing-typescript-2-4-rc/).
    That blog is a very good source and you should keep an eye on it regularly.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 2.4（就在我完成第1版这本书的时候发布）引入了字符串枚举！你可以直接从微软的博客上了解更多：[https://blogs.msdn.microsoft.com/typescript/2017/06/12/announcing-typescript-2-4-rc/](https://blogs.msdn.microsoft.com/typescript/2017/06/12/announcing-typescript-2-4-rc/)。那个博客是一个非常好的资源，你应该定期关注它。
- en: 'TypeScript provides more sophisticated support for enums. You are not limited
    to assigning integers and in fact, you can assign values that are computed at
    runtime. This is best explained by the TypeScript language handbook web site here:
    [https://www.typescriptlang.org/docs/handbook/enums.html](https://www.typescriptlang.org/docs/handbook/enums.html)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 为枚举提供了更复杂的支持。你不仅限于分配整数，实际上，你可以分配在运行时计算的值。这最好由 TypeScript 语言手册网站在这里解释：[https://www.typescriptlang.org/docs/handbook/enums.html](https://www.typescriptlang.org/docs/handbook/enums.html)
- en: Summary and Recap
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要和总结
- en: This chapter introduced interfaces for the first time in their capacity as data
    describers. Interfaces may be empty, they can describe a collection of primitive
    values (number, string, etc.). You can create one interface and extend it to another.
    They can represent nested objects, including deeply nested objects such as overly
    complex SharePoint JSON payloads.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章首次介绍了接口作为数据描述符的能力。接口可以是空的，它们可以描述一组基本值（数字，字符串等）。你可以创建一个接口并将其扩展到另一个接口。它们可以表示嵌套对象，包括过于复杂的
    SharePoint JSON 负载等深度嵌套对象。
- en: You also read about enumerations and union types. Both of these help make programmer
    intent clear and help you avoid making mistakes in your code by ensuring that
    only certain types of values or objects can be passed into functions.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会了解到枚举和联合类型。这两者都有助于明确程序员的意图，并帮助你避免在代码中犯错，确保只有特定类型的值或对象可以传递给函数。
- en: We're going to pause from heady subjects and diverge into template strings next.
    It's a nice and simple subject before we get into classes.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将暂时离开繁重的主题，转而进入下一个模板字符串。在我们进入类之前，这是一个简单而美好的主题。
- en: '* * *'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ¹. If you aren't familiar with this SOLID acronym, it's probably worth your
    time checking it out. [This scotch.io write-up is a good start](https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design)
    ([https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design](https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design)).
    [↩](#reffn_1 "Jump back to footnote [1] in the text.")
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. 如果你不熟悉 SOLID 这个首字母缩略词，花点时间了解一下可能会很值得。[这篇 scotch.io 的文章是一个很好的开始](https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design)
    ([https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design](https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design))。
    [↩](#reffn_1 "跳回正文中的脚注 [1]")
- en: '². Empty interfaces aren''t typically all that useful, but this article on
    binary searches in TypeScript provides one: [https://blog.hellojs.org/implement-binary-search-in-typescript-using-generics-with-useful-refactorings-a4bcda932d7](https://blog.hellojs.org/implement-binary-search-in-typescript-using-generics-with-useful-refactorings-a4bcda932d7).
    This one may be a little on the complex side given where we are in the book, but
    it''s worth coming back to once you finish. [↩](#reffn_2 "Jump back to footnote
    [2] in the text.")'
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ². 空接口通常并不那么有用，但是 TypeScript 中关于二分搜索的这篇文章提供了一个例外：[https://blog.hellojs.org/implement-binary-search-in-typescript-using-generics-with-useful-refactorings-a4bcda932d7](https://blog.hellojs.org/implement-binary-search-in-typescript-using-generics-with-useful-refactorings-a4bcda932d7)。鉴于我们在书中的进度，这可能有点复杂，但是在完成后回头看一看是值得的。
    [↩](#reffn_2 "跳回正文中的脚注 [2]")
- en: '³. There are a ridiculous number of ways to clone JavaScript objects. The approach
    I used in these examples comes from this clever blog post: [http://heyjavascript.com/4-creative-ways-to-clone-objects/](http://heyjavascript.com/4-creative-ways-to-clone-objects/)
    [↩](#reffn_3 "Jump back to footnote [3] in the text.")'
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ³. 有很多种方法来克隆 JavaScript 对象。我在这些示例中使用的方法来自于这篇巧妙的博文：[http://heyjavascript.com/4-creative-ways-to-clone-objects/](http://heyjavascript.com/4-creative-ways-to-clone-objects/)
    [↩](#reffn_3 "跳回正文中的脚注 [3]")
- en: ⁴. It's pretty obvious that a property named "TotalPages" would be numeric.
    However, as this chapter progresses, you'll see how interface show developer intent
    when describing a less obvious properties. [↩](#reffn_4 "Jump back to footnote
    [4] in the text.")
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ⁴. 很明显，名为"TotalPages"的属性应该是数值型的。然而，随着本章的进行，你会看到在描述不那么明显的属性时，接口如何展示开发者的意图。 [↩](#reffn_4
    "跳回正文中的脚注 [4]")
- en: ⁵. If you don't agree, then I don't know what else I can tell you :). [↩](#reffn_5
    "Jump back to footnote [5] in the text.")
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ⁵. 如果你不同意，那么我不知道我还能告诉你什么 :). [↩](#reffn_5 "跳回正文中的脚注 [5]")
- en: ⁶. If you happen to know anything about SharePoint - I'm not retrieving an SPUser
    here, I'm retrieving an item from a custom list. [↩](#reffn_6 "Jump back to footnote
    [6] in the text.")
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ⁶. 如果你了解 SharePoint 的话 - 我这里并不是检索 SPUser，而是从自定义列表中检索项目。 [↩](#reffn_6 "跳回正文中的脚注
    [6]")
- en: ⁷. Abstract classes, along with interfaces, provide a solid basis for your SOLID
    programming efforts. The book covers abstract classes in chapter 9\. [↩](#reffn_7
    "Jump back to footnote [7] in the text.")
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ⁷. 抽象类以及接口为你的 SOLID 编程工作提供了坚实的基础。本书在第 9 章讨论了抽象类。 [↩](#reffn_7 "跳回正文中的脚注 [7]")
