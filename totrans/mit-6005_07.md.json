["```\nstatic int find[First](int[] arr, int val) {\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == val) return i;\n    }\n    return arr.length;\n} \n```", "```\nstatic int find[Last](int[] arr, int val) {\n    for (int i = arr.length - 1 ; i >= 0; i--) {\n        if (arr[i] == val) return i;\n    }\n    return -1;\n} \n```", "```\nstatic int findExactlyOne(int[] arr, int val)\n  *requires*: val occurs exactly once in arr\n  *effects*:  returns index i such that arr[i] = val\n\n```", "```\nstatic int findOneOrMore,AnyIndex(int[] arr, int val)\n  requires: val occurs in arr\n  effects:  returns index i such that arr[i] = val\n\n```", "```\nstatic int find[First](int[] arr, int val) {\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == val) return i;\n    }\n    return arr.length;\n} \n```", "```\nstatic int find[Last](int[] arr, int val) {\n    for (int i = arr.length - 1 ; i >= 0; i--) {\n        if (arr[i] == val) return i;\n    }\n    return -1;\n} \n```", "```\nstatic int find(int[] arr, int val)\n  *effects*: returns largest index i such that\n             arr[i] = val, or -1 if no such i\n\n```", "```\nstatic int findOneOrMore,AnyIndex(int[] arr, int val)\n  *requires*: val occurs in arr\n  *effects*:  returns index i such that arr[i] = val\n\n```", "```\nstatic int find(int[] arr, int val)\n  *requires*: val occurs exactly once in arr\n  *effects*:  returns index i such that arr[i] = val\n\n```", "```\nstatic int find(int[] arr, int val)\n  effects: returns largest index i such that\n             arr[i] = val, or -1 if no such i\n\n```", "```\nstatic int find(int[] arr, int val)\n  *requires*: val occurs in arr\n  *effects*: returns largest index i such that arr[i] = val\n\n```", "```\nstatic boolean startsWith(String str, String prefix)\n *effects*: returns true if and only if there exists String suffix\n            such that prefix + suffix = str\n\n```", "```\nstatic boolean startsWith(String str, String prefix)\n *effects*: returns true if and only if there exists integer i\n            such that str.substring(0, i) = prefix\n\n```", "```\nstatic boolean startsWith(String str, String prefix)\n *effects*: returns true if the first prefix.length() characters of str\n            are the characters of prefix, false otherwise\n\n```", "```\nstatic String join(String delimiter, String[] elements)\n  *effects*: append together the strings in elements, but at each step,\n             if there are more elements left, insert delimiter\n\n```", "```\nstatic int findExactlyOne(int[] a, int val)\n  *requires*: val occurs exactly once in a\n  *effects*:  returns index i such that a[i] = val\n\n```", "```\nstatic int findOneOrMore,AnyIndex(int[] a, int val)\n  *requires*: val occurs at least once in a\n  *effects*:  returns index i such that a[i] = val\n\n```", "```\nstatic int findOneOrMore,FirstIndex(int[] a, int val)\n  *requires*: val occurs at least once in a\n  *effects*:  returns lowest index i such that a[i] = val\n\n```", "```\nstatic int findCanBeMissing(int[] a, int val)\n  *requires*: nothing\n  *effects*:  returns index i such that a[i] = val,\n              or -1 if no such i\n\n```", "```\nstatic int findExactlyOne(int[] a, int val)\n  *requires:* val occurs exactly once in a\n  *effects:*  returns index i such that a[i] = val\n\n```", "```\n static int findOneOrMore,AnyIndex(int[] a, int val)\n  *requires:* val occurs at least once in a\n  *effects:*  returns index i such that a[i] = val\n\n```", "```\n static int findOneOrMore,FirstIndex(int[] a, int val)\n  *requires:* val occurs at least once in a\n  *effects:*  returns lowest index i such that a[i] = val\n\n```", "```\nstatic int findCanBeMissing(int[] a, int val)\n  *requires:* nothing\n  *effects:*  returns index i such that a[i] = val,\n              or -1 if no such i\n\n```", "```\nstatic int sumFind(int[] a, int[] b, int val)\n  *effects*: returns the sum of all indices in arrays a and b at which\n             val appears\n\n```", "```\npublic static int LONG_WORD_LENGTH = 5;\npublic static String longestWord;\n\n/**\n * Update longestWord to be the longest element of words, and print\n * the number of elements with length > LONG_WORD_LENGTH to the console.\n * @param words list to search for long words\n */\npublic static void countLongWords(List<String> words)\n```", "```\nstatic V put (Map<K,V> map, K key, V val)\n  *requires*: val may be null, and map may contain null values\n  *effects*:  inserts (key, val) into the mapping,\n              overriding any existing mapping for key, and\n              returns old value for key, unless none,\n              in which case it returns null\n\n```", "```\nstatic void addAll(List<T> list1, List<T> list2)\n  *effects*: adds the elements of list2 to list1,\n             unless it encounters a null element,\n             at which point it throws a NullPointerException\n\n```", "```\nstatic File open(String filename)\n  *effects*: opens a file named filename\n\n```", "```\nstatic ArrayList<T> reverse(ArrayList<T> list)\n  *effects*: returns a new list which is the reversal of list, i.e.\n             newList[i] == list[n-i-1]\n             for all 0 <= i < n, where n = list.size()\n\n```", "```\nstatic int find(int[] arr, int val)\n  *requires*: val occurs in arr\n  *effects*:  returns index i such that arr[i] = val\n\n```", "```\nint find(int val)\n  *requires*: val occurs in this array\n  *effects*:  returns index i such that **the value at index i in this array**\n              is val \n```", "```\npublic static int secondToLastIndexOf(int[] arr, int val)\n  *requires*: val appears in arr an odd number of times\n  *effects*:  returns the 2nd-largest i such that arr[i] == val\n\n```", "```\npublic static int secondToLastIndexOf(int[] arr, int val)\n  *requires*: val appears in arr an odd number of times\n  *effects*:  returns the 2nd-largest i such that arr[i] == val\n\n```", "```\npublic static int secondToLastIndexOf(int[] arr, int val)\n  *requires*: val appears in arr an odd number of times\n  *effects*:  returns the 2nd-largest i such that arr[i] == val\n\n```"]