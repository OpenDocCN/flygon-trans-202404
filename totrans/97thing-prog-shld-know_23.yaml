- en: Domain-Specific Languages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 领域特定语言
- en: Domain-Specific Languages
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 领域特定语言
- en: 'Whenever you listen to a discussion by experts in any domain, be it chess players,
    kindergarten teachers, or insurance agents, you''ll notice that their vocabulary
    is quite different from everyday language. That''s part of what domain-specific
    languages (DSLs) are about: A specific domain has a specialized vocabulary to
    describe the things that are particular to that domain.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你听到任何领域的专家讨论时，无论是国际象棋玩家、幼儿园教师还是保险代理人，你都会注意到他们的词汇与日常语言非常不同。这就是领域特定语言（DSL）的一部分：特定领域有一个专门的词汇来描述该领域特有的事物。
- en: In the world of software, DSLs are about executable expressions in a language
    specific to a domain with limited vocabulary and grammar that is readable, understandable,
    and — hopefully — writable by domain experts. DSLs targeted at software developers
    or scientists have been around for a long time. For example, the Unix 'little
    languages' found in configuration files and the languages created with the power
    of LISP macros are some of the older examples.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件世界中，DSL 是关于特定于领域的可执行表达式，具有有限的词汇和语法，可读性强，易于理解，并且 —— 有希望的话 —— 可以被领域专家编写。面向软件开发人员或科学家的
    DSL 已经存在很长时间了。例如，在配置文件中找到的 Unix "小语言" 和利用 LISP 宏的强大功能创建的语言就是一些较旧的例子。
- en: 'DSLs are commonly classified as either *internal* or *external*:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: DSL 通常被分类为 *内部* 或 *外部*：
- en: '**Internal DSLs** are written in a general purpose programming language whose
    syntax has been bent to look much more like natural language. This is easier for
    languages that offer more syntactic sugar and formatting possibilities (e.g.,
    Ruby and Scala) than it is for others that do not (e.g., Java). Most internal
    DSLs wrap existing APIs, libraries, or business code and provide a wrapper for
    less mind-bending access to the functionality. They are directly executable by
    just running them. Depending on the implementation and the domain, they are used
    to build data structures, define dependencies, run processes or tasks, communicate
    with other systems, or validate user input. The syntax of an internal DSL is constrained
    by the host language. There are many patterns — e.g., expression builder, method
    chaining, and annotation — that can help you to bend the host language to your
    DSL. If the host language doesn''t require recompilation, an internal DSL can
    be developed quite quickly working side by side with a domain expert.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部 DSL** 是用通用编程语言编写的，其语法被弯曲得更像自然语言。对于那些提供更多语法糖和格式化可能性的语言（例如 Ruby 和 Scala）来说，这更容易，而对于那些不提供的语言（例如
    Java）来说则不是。大多数内部 DSL 都包装了现有的 API、库或业务代码，并提供了一个包装器，以便更轻松地访问功能。它们可以通过简单运行来直接执行。根据实现和领域，它们用于构建数据结构、定义依赖关系、运行进程或任务、与其他系统通信或验证用户输入。内部
    DSL 的语法受到宿主语言的限制。有许多模式，例如表达式构建器、方法链和注解，可以帮助您将宿主语言弯曲为您的 DSL。如果宿主语言不需要重新编译，那么内部
    DSL 可以与领域专家并行快速开发。'
- en: '**External DSLs** are textual or graphical expressions of the language — although
    textual DSLs tend to be more common than graphical ones. Textual expressions can
    be processed by a tool chain that includes lexer, parser, model transformer, generators,
    and any other type of post-processing. External DSLs are mostly read into internal
    models which form the basis for further processing. It is helpful to define a
    grammar (e.g., in EBNF). A grammar provides the starting point for generating
    parts of the tool chain (e.g., editor, visualizer, parser generator). For simple
    DSLs, a handmade parser may be sufficient — using, for instance, regular expressions.
    Custom parsers can become unwieldy if too much is asked of them, so it makes sense
    to look at tools designed specifically for working with language grammars and
    DSLs — e.g., openArchitectureWare, ANTlr, SableCC, AndroMDA. Defining external
    DSLs as XML dialects is also quite common, although readability is often an issue
    — especially for non-technical readers.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You must always take the target audience of your DSL into account. Are they
    developers, managers, business customers, or end users? You have to adapt the
    technical level of the language, the available tools, syntax help (e.g., intellisense),
    early validation, visualization, and representation to the intended audience.
    By hiding technical details, DSLs can empower users by giving them the ability
    to adapt systems to their needs without requiring the help of developers. It can
    also speed up development because of the potential distribution of work after
    the initial language framework is in place. The language can be evolved gradually.
    There are also different migration paths for existing expressions and grammars
    available.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: By [Michael Hunger](http://programmer.97things.oreilly.com/wiki/index.php/Michael_Hunger)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
