- en: Setting Up Rust
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up Rust
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will talk you through setting up Rust for the first time and also
    how to keep it up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started is incredibly easy but some details vary upon your target platform.
    Rust runs on Windows, Linux and MacOS. In addition you might wish to cross-compile
    code for the consumption of another platform.
  prefs: []
  type: TYPE_NORMAL
- en: Use Rustup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to get started is to download and run `rustup-init` which you
    can do by visiting the [Rustup site](https://www.rustup.rs/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The instructions differ for Windows and Unix-like systems:'
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, rustup-init is an exe installer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Unix / OS X / Linux rust-init is a shell script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Either way, when you follow the instructions the installer will download and
    install put rustc, cargo, and rustup in your bin directory which is `~/.cargo/bin`
    on Unix and `%USERPROFILE%.cargo.\bin` on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: It will also set your `PATH` environment variable so that you can open a terminal
    and type rustc, cargo, rustup etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once `rustup` is installed you can also use the tool for maintenance:'
  prefs: []
  type: TYPE_NORMAL
- en: Install additional Rust toolchains (e.g. if you are cross-compiling or supporting
    multiple targets you may have more than one toolchain)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the default toolchain that is invoked when you type `rustc` or `cargo`.
    Rustup will create symbolic links / scripts that invoke the appropriate toolchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the toolchain when a new version of Rust is released
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetch source and documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unix / Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for running `rustup-init.sh` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal / console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type "curl [https://sh.rustup.rs](https://sh.rustup.rs) -sSf | sh"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will download and execute a script which will examine your environment,
    recommend the toolchain to download, and offer to modify your `PATH` environment
    variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the option 1 to proceed. Or customize if you want to modify something
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for download to complete
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don't have curl, then you must install it first to proceed, or save the
    [shell script](https://sh.rustup.rs) from a browser to disk and execute that.
  prefs: []
  type: TYPE_NORMAL
- en: To install `curl` in Linux you would invoke a command like this to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Debian / Ubuntu - `sudo apt get curl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fedora / Redhat - `sudo dnf install curl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download rustup-init.exe from rustup.rs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double click on the rust-init.exe and a console will open
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the option 1 to proceed. Or customize if you want to modify something
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for download to complete
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you prefer not to go with the defaults, here are some choices you should
    decide upon:'
  prefs: []
  type: TYPE_NORMAL
- en: 32/64 bit version. Most Windows installations are going to be 64-bits these
    days but you may have a reason to choose 32-bit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GNU or MSVC ABI. This depends on what toolchain and runtimes you wish to be
    compatible with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second choice concerns the application binary interface (ABI) you want Rust
    to be compatible with.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't care about linking to anything then choose the GNU ABI. Also choose
    it if you have DLLs produced by MingW / MSYS. The advantage of this ABI is that
    it is more mature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have Visual Studio installed or intend to use Rust against DLLs created
    with Visual Studio, that's the ABI you need. One advantage of this option is that
    you can debug Rust inside of Visual Studio- the compiler will produce .pdb files
    that allow you to step debug Rust.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping Rust up to date
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'New versions of Rust appear in a semi-frequent basis. If you want to update
    your environment to the latest version, it is as simple as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes rustup will get an update of its own in which case you type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Adding Rust source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Rustup installs a rust toolchain but if you''re writing code or debugging you
    probably should also get the Rust source code so you can step into it or look
    at the implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Manual installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you prefer manual installation of Rust then there are packages and instructions
    on the [Rust site](https://www.rust-lang.org/en-US/downloads.html).
  prefs: []
  type: TYPE_NORMAL
- en: Just be aware that Rust has a fairly rapid release cycle so you probably only
    want to do this if you have a reason to choose a specific version of Rust and
    stick with it.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise you may find yourself uninstalling and reinstalling a new version
    6 weeks later all over again.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a debugger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unix / Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Debugging Rust is little different from debugging C or C++.
  prefs: []
  type: TYPE_NORMAL
- en: You must install gdb for your platform and then you may invoke it from a console
    or your favourite front-end to debug Rust code.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Linux systems you would normally install gdb from a package with one of
    these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You may also prefer to use lldb which is a companion project to LLVM (the backend
    compiler used by Rust). Refer to the [lldb website](http://lldb.llvm.org/) for
    information on using it.
  prefs: []
  type: TYPE_NORMAL
- en: Rust comes with a few scripts that wrap gdb and lldb to provide pretty-printing
    to assist with debugging. When debugging, you can invoke `rust-gdb` or `rust-lldb`
    to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have chosen Rust with the MSVC ABI then you can debug through Visual
    Studio with some limitations. When you create a debug build of your code, the
    compile will also create a .pdb file to go with it. You may open your executable
    in Visual Studio and step debug it, inspect variables and so on.
  prefs: []
  type: TYPE_NORMAL
- en: GDB
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: GDB on Windows is available through MSYS / MingW distributions.
  prefs: []
  type: TYPE_NORMAL
- en: For example downloads of the TDM-GCC distribution of MSYS can be found [here](http://tdm-gcc.tdragon.net/download).
    At the time of writing this, there is a standalone gdb-7.9.1-tdm64-2.zip containing
    the Choose the 32 or 64-bit version according to your Rust environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract the zip file to a directory, e.g. `C:\tools\gdb-7.9.1-tdm64-2` and
    add a value to your `PATH` environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can invoke `gdb` from the command line but more normally you'd prefer a
    front end.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, perhaps the best option is Visual Studio Code which
    has plugins for debugging with GDB and for Rust development. So you can edit and
    debug from the same IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Pretty printer
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Rust supplies a pretty printer for variable inspection that you can add to the
    GDB. The pretty printer is a script written in Python that GDB will invoke to
    display variables.
  prefs: []
  type: TYPE_NORMAL
- en: First ensure you have Python 2.7 installed in your path.
  prefs: []
  type: TYPE_NORMAL
- en: The script is bundled with the Rust source code so you need to have installed
    that first.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you installed it with `rustup` then it can be found in your `%USERPROFILE%\.rustup`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: e.g.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Otherwise it can be found wherever you unzipped your Rust source code under
    `src\rust\src\etc`.
  prefs: []
  type: TYPE_NORMAL
- en: Note the fully qualified path its under and edit `C:\tools\gdb-7.9.1-tdm64-2\bin\gdbinit`
    to insert the path using *forward* slashes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Setting up an IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rust is still behind some other languages when it comes to IDE integration but
    there are already plugins that provide much of the functionality you need.
  prefs: []
  type: TYPE_NORMAL
- en: Popular IDEs such as Eclipse, IntelliJ, Visual Studio all have plugins that
    work to varying degrees of integration with Rust.
  prefs: []
  type: TYPE_NORMAL
- en: '[Visual Studio Code](https://code.visualstudio.com/) (not to be confused with
    Visual Studio) is a cross-platform programming editor and has a lot of plugins.
    It can be set up into a complete Rust development environment by following this
    [tutorial](https://sherryummen.in/2016/09/02/debugging-rust-on-windows-using-visual-studio-code/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Rust plugin for IntelliJ IDEA](https://intellij-rust.github.io/) is under
    active development. This plugin has a lot of traction and is turning around new
    versions on a nearly weekly basis. Offers syntax highlighting, autocomplete (via
    built-in parser), cargo builts and eventually other functionality. [IntelliJ](https://www.jetbrains.com/idea/download/#section=windows)
    is a commercial product but it comes in a community edition which is sufficient
    for development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Visual Rust plugin for Microsoft Studio](https://github.com/PistonDevelopers/VisualRust)
    . Offers syntax highlighting, autocompletion, interactive debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RustDT for Eclipse](https://github.com/RustDT/RustDT) is also under active
    development. It adds syntax highlighting, autocomplete (via racer), cargo builds
    and rustfmt functionality to Eclipse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Atom is a popular editor with heaps of plugins. These plugins are very useful
    for Rust:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[language-rust](https://atom.io/packages/language-rust) provides basic syntax
    highlighting'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[racer](https://atom.io/packages/racer) for autocompletion functionality'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[atom-beautify](https://atom.io/packages/atom-beautify) invokes rustfmt to
    make code look pretty.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[build-cargo](https://atom.io/packages/build-cargo) invokes cargo for you showing
    errors and warnings inline.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For other editors and IDEs refer to the [Rust and IDEs](https://forge.rust-lang.org/ides.html)
    page on the Rust website.
  prefs: []
  type: TYPE_NORMAL
- en: Racer / Rustfmt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of the plugins above make use of Racer and Rustfmt.
  prefs: []
  type: TYPE_NORMAL
- en: Racer is used by some plugins to provide autocompletion functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Rustfmt is a source code formatting tool that makes sure your Rust source code
    is pretty to look at, adding spacing, indentation and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You can get both just by typing these commands and waiting for the tools to
    download and build themselves - they're written in Rust and built through cargo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
