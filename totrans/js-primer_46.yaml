- en: ファイルを読み込む
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://jsprimer.net/use-case/nodecli/read-file/](https://jsprimer.net/use-case/nodecli/read-file/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 前のセクションではコマンドライン引数からファイルパスを取得して利用できるようになりました。 このセクションでは渡されたファイルパスを元にMarkdownファイルを読み込んで、標準出力に表示してみましょう。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[](#read-file-by-fs)*`fs`モジュールを使ってファイルを読み込む*'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*前のセクションで取得できるようになったファイルパスを元に、ファイルを読み込みましょう。 Node.jsでファイルの読み書きを行うには、標準モジュールの[`fs`モジュール](https://nodejs.org/api/fs.html)を使います。
    まずは読み込む対象のファイルを作成しましょう。`sample.md`という名前で`main.js`と同じ`nodecli`ディレクトリに配置します。'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: sample.md
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[](#fs-module)*`fs`モジュール*'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`fs`モジュールは、Node.jsでファイルの読み書きを行うための基本的な関数を提供するモジュールです。'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '`fs`モジュールは同期形式と非同期形式の両方が提供されています。 同期APIと非同期APIはどちらも`fs`モジュールに含まれていますが、 非同期形式のAPIは`fs/promises`というモジュール名でも参照できるようになっています。
    この書籍では分かりやすさのために、非同期形式のみのAPIを提供する`fs/promises`モジュールを利用します。'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Node.jsの標準モジュールは`node:fs`のように`node:`プリフィックスをつけてインポートできます。 プリフィックスを付けない`fs`でもインポートできますが、npmからインストールしたサードパーティ製のモジュールとの区別が明確になるため、付けておくことが推奨されます。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードは、ECMAScriptモジュールの`import * as`構文を使って、`fs/promises` モジュール全体を`fs`オブジェクトとしてインポートしています。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: もちろん、次のように名前付きインポートを使って、`fs/promises`モジュール全体ではなく一部のAPIだけを利用することもできます。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`fs/promises`の非同期APIは、モジュール名からもわかるようにPromiseを返します。 ファイルの読み書きといった非同期処理が成功したときには、返された`Promise`インスタンスがresolveされます。
    一方、ファイルの読み書きといった非同期処理が失敗したときには、返された`Promise`インスタンスがrejectされます。'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 次のサンプルコードは、指定したファイルを読み込む`fs/promises`の`readFile`メソッドの例です。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: そして、次のサンプルコードは、同じく指定したファイルを読み込む`fs`モジュールの`readFileSync`メソッドの例です。 Node.jsでは非同期APIと同期APIがどちらもあるAPIには、分かりやすく`Sync`がメソッド名の末尾に含まれています。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Node.jsはシングルスレッドなので、他の処理をブロックしにくい非同期形式のAPIを選ぶことがほとんどです。 Node.jsには`fs/promises`モジュール以外にも多くの非同期APIがあるので、非同期処理に慣れておきましょう。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[](#use-readFile)*readFile関数を使う*'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*それでは`fs/promises`モジュールの`readFile`メソッドを使って`sample.md`ファイルを読み込んでみましょう。 次のように`main.js`を変更し、コマンドライン引数から取得したファイルパスを元にファイルを読み込んでコンソールに出力します。'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: main.js
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`sample.md`を引数に渡した実行結果は次のようになります。 文字列になっていないのは、コールバック関数の第二引数はファイルの中身を表す`Buffer`インスタンスだからです。
    `Buffer`インスタンスはファイルの中身をバイト列として保持しています。 そのため、そのまま`console.log`メソッドに渡しても人間が読める文字列にはなりません。'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`fs.readFile`関数は引数によってファイルの読み込み方を指定できます。 ファイルのエンコードを第二引数であらかじめ指定しておけば、自動的に文字列に変換された状態でコールバック関数に渡されます。
    次のように`main.js`を変更し、読み込まれるファイルをUTF-8として変換させます。'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: main.js
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 先ほどと同じコマンドをもう一度実行すると、実行結果は次のようになります。 `sample.md`ファイルの中身を文字列として出力できました。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[](#error-handling)*エラーハンドリング*'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*ファイルの読み書きは存在の有無や権限、ファイルシステムの違いなどによって例外が発生しやすいので、必ずエラーハンドリング処理を書きましょう。'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 次のように`main.js`を変更し、`readFile`の返り値であるPromiseオブジェクトに対して`catch`メソッドを追加するだけのシンプルなエラーハンドリングです。
    エラーが発生していたときにはエラーメッセージを表示し、`process.exit`関数に終了ステータスを指定してプロセスを終了しています。 ここでは、一般的なエラーを表す終了ステータスの`1`でプロセスを終了しています。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: main.js
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 存在しないファイルである`notfound.md`をコマンドライン引数に渡して実行すると、次のようにエラーが発生して終了します。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: これでコマンドライン引数に指定したファイルを読み込んで標準出力に表示できました。 次のセクションでは読み込んだMarkdownファイルをHTMLに変換する処理を追加していきます。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[](#node-error-first-callbak)*[コラム] Node.jsのエラーファーストコールバック*'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Node.jsが提供する`fs`モジュールは同期APIと非同期APIを提供するという話を紹介しました。 歴史的な経緯もあり、Node.jsではPromiseとエラーファーストコールバックの2種類の非同期APIを提供しているケースもあります。'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '`fs/promises`モジュールでは、`readFile`メソッドは、Promiseを返す非同期APIでした。 一方で、`fs`モジュールにも`readFile`メソッドがあり、このAPIはエラーファーストコールバックを扱う非同期APIです。'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[エラーファーストコールバック](../../../basic/async/#error-first-callback)については、[非同期](../../../basic/async/)の章でも紹介しています。
    エラーファーストコールバックは、PromisesがECMAScriptに入るES2015より前においては、非同期な処理を扱う方法として広く使われていました。
    Node.jsの多くのモジュールは、ES2015より前に作られているため、`fs`モジュールのようにエラーファーストコールバックを扱うAPIもあります。'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[错误优先回调](../../../basic/async/#error-first-callback)也在[异步](../../../basic/async/)章节中介绍。在ES2015之前，错误优先回调被广泛用作处理异步操作的方法，因为Promises在ES2015之前进入ECMAScript之前，许多Node.js模块是在此之前创建的，因此像`fs`模块一样处理错误优先回调的API也存在。'
- en: 一方で、Promiseが非同期APIの主流となったため、Node.jsにもPromiseを扱うためのAPIが追加されました。 しかし、すでにエラーファーストコールバックを提供する同じ名前のメソッドがあったため、`fs`に対して`fs/promises`のようにモジュールとして分けて扱えるようになっています。
    また、Node.jsではエラーファーストコールバックを受け取る非同期APIをPromiseを返す非同期APIへとラップする`util.promisify`というメソッドも提供しています。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于Promise成为异步API的主流，Node.js也添加了用于处理Promise的API。然而，由于已经存在提供错误优先回调的同名方法，因此可以将其拆分为模块，例如对于`fs`，可以使用`fs/promises`。此外，Node.js还提供了一个名为`util.promisify`的方法，用于将接受错误优先回调的异步API包装为返回Promise的异步API。
- en: Node.jsでは、歴史的な経緯からエラーファーストコールバックとPromiseのAPIがどちらも提供されていることがあります。 しかしながら、両方が提供されている場合はPromiseのAPIを利用するべきです。
    Promiseを扱うAPIには、他のPromiseを扱う処理との連携のしやすさ、Async Functionという構文的なサポート、エラーハンドリングの簡潔さなどのメリットがあります。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于历史原因，Node.js可能同时提供错误优先回调和Promise的API。然而，如果两者都提供，则应使用Promise的API。处理Promise的API具有许多优点，如易于与其他处理Promise的操作协作、对Async
    Function的语法支持、简洁的错误处理等。
- en: '[](#section-checklist)*このセクションのチェックリスト*'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#section-checklist)*本节的检查清单*'
- en: '**   `fs/promises`モジュールの`readFile`関数を使ってファイルを読み込んだ'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**   使用`fs/promises`模块的`readFile`函数读取文件'
- en: UTF-8形式のファイルの中身をコンソールに出力した
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将UTF-8格式文件的内容输出到控制台
- en: '`readFile`関数の呼び出しにエラーハンドリング処理を記述した******'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readFile`函数的调用中添加了错误处理逻辑'
