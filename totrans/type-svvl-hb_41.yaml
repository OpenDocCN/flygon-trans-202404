- en: オブジェクトからプロパティの型を生成する
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成对象属性的类型
- en: 原文：[https://typescriptbook.jp/tips/generates-type-from-object-property](https://typescriptbook.jp/tips/generates-type-from-object-property)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tips/generates-type-from-object-property](https://typescriptbook.jp/tips/generates-type-from-object-property)
- en: オブジェクトからプロパティだけ欲しい[​](#オブジェクトからプロパティだけ欲しい "オブジェクトからプロパティだけ欲しい への直接リンク")
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从对象中只想要属性](/tips/generates-type-from-object-property)
- en: '[## 📄️ オブジェクトからキーの型を生成する'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ 生成对象键的类型'
- en: オブジェクトからキーだけ欲しい](/tips/generates-type-from-object-key)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从对象中只想要键](/tips/generates-type-from-object-key)
- en: 前ページとは対照的にオブジェクトからプロパティだけのユニオン型を得ることを目的とします。今回も前回と同様に次のメッセージが定義されているとします。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一页相反，这次的目标是从对象中获取属性而不是键的联合类型。假设这次也定义了以下消息。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 最終的には次のようなユニオン型が今回の目的です。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最终目标是获得以下联合类型。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 今回の問題を解くにあたって[​](#今回の問題を解くにあたって "今回の問題を解くにあたって への直接リンク")
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决这个问题[​](#解决这个问题 "解决这个问题 への直接リンク")
- en: 今回は今まで紹介してきたオブジェクトから型を作り出す方法と Mapped Types の合わせ技で再現することができます。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们将结合前面介绍的从对象中生成类型的方法和映射类型，来实现这个目标。
- en: '[## 📄️ オブジェクトから型を生成する'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ 生成对象的类型'
- en: 多くの言語では型による構造体、オブジェクトの定義をしてからコーディングが始まりますが、元がJavaScriptであるTypeScriptにはそのような決まりがないことも多々あります。](/tips/generates-type-from-object)  [##
    📄️ オブジェクトからキーの型を生成する
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多语言中，定义结构体和对象后才开始编码，但在JavaScript的基础上构建的TypeScript中，往往没有这样的规定。](/tips/generates-type-from-object)  [##
    📄️ 生成对象键的类型
- en: オブジェクトからキーだけ欲しい](/tips/generates-type-from-object-key)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从对象中只想要键](/tips/generates-type-from-object-key)
- en: アプローチの方法としてはまずオブジェクトからキーの型を生成し Mapped Types を使いオブジェクトのプロパティの型を参照、それらをリテラル型で取得します。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方法的方法，首先生成对象的键类型，然后使用映射类型引用对象的属性类型，并以文字类型获取它们。
- en: キーの型を生成する[​](#キーの型を生成する "キーの型を生成する への直接リンク")
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成键的类型[​](#生成键的类型 "生成键的类型 への直接リンク")
- en: キーの型の生成は前のページにあるものと同一です。次のようにすることでキーである言語のユニオン型を取得できます。詳細についてはオブジェクトからキーの値を生成するのページをご覧ください。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 生成键的类型与前一页相同。通过以下方式，您可以获得语言键的联合类型。有关详细信息，请参阅生成对象键值的页面。
- en: '[## 📄️ オブジェクトからキーの型を生成する'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ 生成对象键的类型'
- en: オブジェクトからキーだけ欲しい](/tips/generates-type-from-object-key)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从对象中只想要键](/tips/generates-type-from-object-key)
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'ts`type <data-lsp lsp="type Language = &quot;en&quot; | &quot;fr&quot; | &quot;es&quot;
    | &quot;ja&quot; | &quot;zh&quot;" style="border-bottom:solid 2px lightgrey">Language</data-lsp>
    =  keyof  typeof <data-lsp lsp="const conf: {'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`type <data-lsp lsp="type Language = &quot;en&quot; | &quot;fr&quot; | &quot;es&quot;
    | &quot;ja&quot; | &quot;zh&quot;" style="border-bottom:solid 2px lightgrey">Language</data-lsp>
    =  keyof  typeof <data-lsp lsp="const conf: {'
- en: 'en: string;'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'en: string;'
- en: 'fr: string;'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'fr: string;'
- en: 'es: string;'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'es: string;'
- en: 'ja: string;'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'ja: string;'
- en: 'zh: string;'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zh: string;'
- en: '}">conf</data-lsp>;` `type Language = "en" | "fr" | "es" | "ja" | "zh"`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '}">conf</data-lsp>;` `type Language = "en" | "fr" | "es" | "ja" | "zh"`'
- en: Mapped Types[​](#mapped-types "Mapped Types への直接リンク")
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射类型[​](#映射类型 "映射类型 への直接リンク")
- en: オブジェクトのプロパティの型を参照するために Mapped Types を使います。そのとき元のオブジェクトから型を生成するために`typeof`を使います。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用映射类型来引用对象的属性类型。为了从原始对象生成类型，我们使用`typeof`。
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'ts`type <data-lsp lsp="type ConfirmationMessage = string" style="border-bottom:solid
    2px lightgrey">ConfirmationMessage</data-lsp> = (typeof <data-lsp lsp="const conf:
    {'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`type <data-lsp lsp="type ConfirmationMessage = string" style="border-bottom:solid
    2px lightgrey">ConfirmationMessage</data-lsp> = (typeof <data-lsp lsp="const conf:
    {'
- en: 'en: string;'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'en: string;'
- en: 'fr: string;'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'fr: string;'
- en: 'es: string;'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'es: string;'
- en: 'ja: string;'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'ja: string;'
- en: 'zh: string;'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zh: string;'
- en: '}">conf</data-lsp>)[<data-lsp lsp="type Language = &quot;en&quot; | &quot;fr&quot;
    | &quot;es&quot; | &quot;ja&quot; | &quot;zh&quot;">Language</data-lsp>];` `type
    ConfirmationMessage = string`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '}">conf</data-lsp>)[<data-lsp lsp="type Language = &quot;en&quot; | &quot;fr&quot;
    | &quot;es&quot; | &quot;ja&quot; | &quot;zh&quot;">Language</data-lsp>];` `type
    ConfirmationMessage = string`'
- en: リテラル型を取得するできるようにする[​](#リテラル型を取得するできるようにする "リテラル型を取得するできるようにする への直接リンク")
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许获取文字类型[​](#允许获取文字类型 "允许获取文字类型 への直接リンク")
- en: このままだとオブジェクトから型を生成すると同じように型はリテラル型ではありません。つまりただの`string`型のユニオン型つまり`string`型です。そこで、元のオブジェクト`conf`に`as
    const`をつけます。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果保持原样生成对象的类型，那么类型不是文字类型。换句话说，它只是一个`string`类型的联合类型，即`string`类型。因此，我们在原始对象`conf`上添加`as
    const`。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: まとめ[​](#まとめ "まとめ への直接リンク")
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结[​](#总结 "总结 への直接リンク")
- en: お好みで定義したキーの型`Language`を Mapped Types のキーの部分に代入します。最終的な形は次のようになります。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将您自定义的键类型`Language`分配给映射类型的键部分。最终形式如下所示。
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'ts`const  <data-lsp lsp="const conf: {'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`const  <data-lsp lsp="const conf: {'
- en: 'readonly en: &quot;Are you sure?&quot;;'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly en: &quot;Are you sure?&quot;;'
- en: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
- en: 'readonly es: &quot;está seguro?&quot;;'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly es: &quot;está seguro?&quot;;'
- en: 'readonly ja: &quot;よろしいですか？&quot;;'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly ja: &quot;よろしいですか？&quot;;'
- en: 'readonly zh: &quot;您确定吗？&quot;;'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly zh: &quot;您确定吗？&quot;;'
- en: '}">conf</data-lsp>  = { <data-lsp lsp="(property) en: &quot;Are you sure?&quot;">en</data-lsp>:  "Are
    you sure?", <data-lsp lsp="(property) fr: &quot;Êtes-vous sûr?&quot;">fr</data-lsp>:  "Êtes-vous
    sûr?", <data-lsp lsp="(property) es: &quot;está seguro?&quot;">es</data-lsp>:  "está
    seguro?", <data-lsp lsp="(property) ja: &quot;よろしいですか？&quot;">ja</data-lsp>:  "よろしいですか？",
    <data-lsp lsp="(property) zh: &quot;您确定吗？&quot;">zh</data-lsp>:  "您确定吗？",} as  <data-lsp
    lsp="type const = {'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '}">conf</data-lsp>  = { <data-lsp lsp="(property) en: &quot;Are you sure?&quot;">en</data-lsp>:  "Are
    you sure?", <data-lsp lsp="(property) fr: &quot;Êtes-vous sûr?&quot;">fr</data-lsp>:  "Êtes-vous
    sûr?", <data-lsp lsp="(property) es: &quot;está seguro?&quot;">es</data-lsp>:  "está
    seguro?", <data-lsp lsp="(property) ja: &quot;よろしいですか？&quot;">ja</data-lsp>:  "よろしいですか？",
    <data-lsp lsp="(property) zh: &quot;您确定吗？&quot;">zh</data-lsp>:  "您确定吗？",} as  <data-lsp
    lsp="type const = {'
- en: 'readonly en: &quot;Are you sure?&quot;;'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly en: &quot;Are you sure?&quot;;'
- en: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
- en: 'readonly es: &quot;está seguro?&quot;;'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly es: &quot;está seguro?&quot;;'
- en: 'readonly ja: &quot;よろしいですか？&quot;;'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly ja: &quot;よろしいですか？&quot;;'
- en: 'readonly zh: &quot;您确定吗？&quot;;'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly zh: &quot;您确定吗？&quot;;'
- en: '}">const</data-lsp>;type <data-lsp lsp="type ConfirmationMessage = &quot;Are
    you sure?&quot; | &quot;Êtes-vous sûr?&quot; | &quot;está seguro?&quot; | &quot;よろしいですか？&quot;
    | &quot;您确定吗？&quot;" style="border-bottom:solid 2px lightgrey">ConfirmationMessage</data-lsp>
    = (typeof <data-lsp lsp="const conf: {'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '}">const</data-lsp>;type <data-lsp lsp="type ConfirmationMessage = &quot;Are
    you sure?&quot; | &quot;Êtes-vous sûr?&quot; | &quot;está seguro?&quot; | &quot;よろしいですか？&quot;
    | &quot;您确定吗？&quot;" style="border-bottom:solid 2px lightgrey">ConfirmationMessage</data-lsp>
    = (typeof <data-lsp lsp="const conf: {'
- en: 'readonly en: &quot;Are you sure?&quot;;'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly en: &quot;Are you sure?&quot;;'
- en: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
- en: 'readonly es: &quot;está seguro?&quot;;'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly es: &quot;está seguro?&quot;;'
- en: 'readonly ja: &quot;よろしいですか？&quot;;'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly ja: &quot;よろしいですか？&quot;;'
- en: 'readonly zh: &quot;您确定吗？&quot;;'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly zh: &quot;您确定吗？&quot;;'
- en: '}">conf</data-lsp>)[keyof  typeof <data-lsp lsp="const conf: {'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '}">conf</data-lsp>)[keyof  typeof <data-lsp lsp="const conf: {'
- en: 'readonly en: &quot;Are you sure?&quot;;'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly en: &quot;Are you sure?&quot;;'
- en: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
- en: 'readonly es: &quot;está seguro?&quot;;'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly es: &quot;está seguro?&quot;;'
- en: 'readonly ja: &quot;よろしいですか？&quot;;'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly ja: &quot;よろしいですか？&quot;;'
- en: 'readonly zh: &quot;您确定吗？&quot;;'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly zh: &quot;您确定吗？&quot;;'
- en: '}">conf</data-lsp>];` `type ConfirmationMessage = "Are you sure?" | "Êtes-vous
    sûr?" | "está seguro?" | "よろしいですか？" | "您确定吗？"`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '}">conf</data-lsp>];` `type ConfirmationMessage = "Are you sure?" | "Êtes-vous
    sûr?" | "está seguro?" | "よろしいですか？" | "您确定吗？"`'
- en: '`as const`を忘れないようにしてください。'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`as const`を忘れないようにしてください。'
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
