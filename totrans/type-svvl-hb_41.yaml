- en: オブジェクトからプロパティの型を生成する
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/tips/generates-type-from-object-property](https://typescriptbook.jp/tips/generates-type-from-object-property)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: オブジェクトからプロパティだけ欲しい[​](#オブジェクトからプロパティだけ欲しい "オブジェクトからプロパティだけ欲しい への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[## 📄️ オブジェクトからキーの型を生成する'
  prefs: []
  type: TYPE_NORMAL
- en: オブジェクトからキーだけ欲しい](/tips/generates-type-from-object-key)
  prefs: []
  type: TYPE_NORMAL
- en: 前ページとは対照的にオブジェクトからプロパティだけのユニオン型を得ることを目的とします。今回も前回と同様に次のメッセージが定義されているとします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 最終的には次のようなユニオン型が今回の目的です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 今回の問題を解くにあたって[​](#今回の問題を解くにあたって "今回の問題を解くにあたって への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 今回は今まで紹介してきたオブジェクトから型を作り出す方法と Mapped Types の合わせ技で再現することができます。
  prefs: []
  type: TYPE_NORMAL
- en: '[## 📄️ オブジェクトから型を生成する'
  prefs: []
  type: TYPE_NORMAL
- en: 多くの言語では型による構造体、オブジェクトの定義をしてからコーディングが始まりますが、元がJavaScriptであるTypeScriptにはそのような決まりがないことも多々あります。](/tips/generates-type-from-object)  [##
    📄️ オブジェクトからキーの型を生成する
  prefs: []
  type: TYPE_NORMAL
- en: オブジェクトからキーだけ欲しい](/tips/generates-type-from-object-key)
  prefs: []
  type: TYPE_NORMAL
- en: アプローチの方法としてはまずオブジェクトからキーの型を生成し Mapped Types を使いオブジェクトのプロパティの型を参照、それらをリテラル型で取得します。
  prefs: []
  type: TYPE_NORMAL
- en: キーの型を生成する[​](#キーの型を生成する "キーの型を生成する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: キーの型の生成は前のページにあるものと同一です。次のようにすることでキーである言語のユニオン型を取得できます。詳細についてはオブジェクトからキーの値を生成するのページをご覧ください。
  prefs: []
  type: TYPE_NORMAL
- en: '[## 📄️ オブジェクトからキーの型を生成する'
  prefs: []
  type: TYPE_NORMAL
- en: オブジェクトからキーだけ欲しい](/tips/generates-type-from-object-key)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'ts`type <data-lsp lsp="type Language = &quot;en&quot; | &quot;fr&quot; | &quot;es&quot;
    | &quot;ja&quot; | &quot;zh&quot;" style="border-bottom:solid 2px lightgrey">Language</data-lsp>
    =  keyof  typeof <data-lsp lsp="const conf: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'en: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'fr: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'es: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ja: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'zh: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">conf</data-lsp>;` `type Language = "en" | "fr" | "es" | "ja" | "zh"`'
  prefs: []
  type: TYPE_NORMAL
- en: Mapped Types[​](#mapped-types "Mapped Types への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: オブジェクトのプロパティの型を参照するために Mapped Types を使います。そのとき元のオブジェクトから型を生成するために`typeof`を使います。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'ts`type <data-lsp lsp="type ConfirmationMessage = string" style="border-bottom:solid
    2px lightgrey">ConfirmationMessage</data-lsp> = (typeof <data-lsp lsp="const conf:
    {'
  prefs: []
  type: TYPE_NORMAL
- en: 'en: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'fr: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'es: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ja: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'zh: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">conf</data-lsp>)[<data-lsp lsp="type Language = &quot;en&quot; | &quot;fr&quot;
    | &quot;es&quot; | &quot;ja&quot; | &quot;zh&quot;">Language</data-lsp>];` `type
    ConfirmationMessage = string`'
  prefs: []
  type: TYPE_NORMAL
- en: リテラル型を取得するできるようにする[​](#リテラル型を取得するできるようにする "リテラル型を取得するできるようにする への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: このままだとオブジェクトから型を生成すると同じように型はリテラル型ではありません。つまりただの`string`型のユニオン型つまり`string`型です。そこで、元のオブジェクト`conf`に`as
    const`をつけます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: まとめ[​](#まとめ "まとめ への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: お好みで定義したキーの型`Language`を Mapped Types のキーの部分に代入します。最終的な形は次のようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'ts`const  <data-lsp lsp="const conf: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly en: &quot;Are you sure?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly es: &quot;está seguro?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly ja: &quot;よろしいですか？&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly zh: &quot;您确定吗？&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">conf</data-lsp>  = { <data-lsp lsp="(property) en: &quot;Are you sure?&quot;">en</data-lsp>:  "Are
    you sure?", <data-lsp lsp="(property) fr: &quot;Êtes-vous sûr?&quot;">fr</data-lsp>:  "Êtes-vous
    sûr?", <data-lsp lsp="(property) es: &quot;está seguro?&quot;">es</data-lsp>:  "está
    seguro?", <data-lsp lsp="(property) ja: &quot;よろしいですか？&quot;">ja</data-lsp>:  "よろしいですか？",
    <data-lsp lsp="(property) zh: &quot;您确定吗？&quot;">zh</data-lsp>:  "您确定吗？",} as  <data-lsp
    lsp="type const = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly en: &quot;Are you sure?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly es: &quot;está seguro?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly ja: &quot;よろしいですか？&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly zh: &quot;您确定吗？&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">const</data-lsp>;type <data-lsp lsp="type ConfirmationMessage = &quot;Are
    you sure?&quot; | &quot;Êtes-vous sûr?&quot; | &quot;está seguro?&quot; | &quot;よろしいですか？&quot;
    | &quot;您确定吗？&quot;" style="border-bottom:solid 2px lightgrey">ConfirmationMessage</data-lsp>
    = (typeof <data-lsp lsp="const conf: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly en: &quot;Are you sure?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly es: &quot;está seguro?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly ja: &quot;よろしいですか？&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly zh: &quot;您确定吗？&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">conf</data-lsp>)[keyof  typeof <data-lsp lsp="const conf: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly en: &quot;Are you sure?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly fr: &quot;Êtes-vous sûr?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly es: &quot;está seguro?&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly ja: &quot;よろしいですか？&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly zh: &quot;您确定吗？&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">conf</data-lsp>];` `type ConfirmationMessage = "Are you sure?" | "Êtes-vous
    sûr?" | "está seguro?" | "よろしいですか？" | "您确定吗？"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`as const`を忘れないようにしてください。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
