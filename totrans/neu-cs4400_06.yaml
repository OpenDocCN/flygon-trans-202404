- en: Some StyleTuesday, January 10th
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you have some common value that you need to use in several places, it
    is bad to duplicate it. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What’s bad about it?
  prefs: []
  type: TYPE_NORMAL
- en: It’s longer than necessary, which will eventually make your code less readable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s slower — by the time you reach the last case, you have evaluated the two
    sequences three times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s more prone to bugs — the above code is short enough, but what if it was
    longer so you don’t see the three occurrences on the same page? Will you remember
    to fix all places when you debug the code months after it was written?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, the ability to use names is probably the most fundamental concept
    in computer science — the fact that makes computer programs what they are.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already have a facility to name values: function arguments. We could split
    the above function into two like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: But instead of the awkward solution of coming up with a new function just for
    its names, we have a facility to bind local names — `let`. In general, the syntax
    for a `let` special form is
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'But note that the bindings are done “in parallel”, for example, try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this for the above problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Some notes on writing code (also see the style-guide in the handouts section)
  prefs: []
  type: TYPE_NORMAL
- en: '***Code quality will be graded to in this course!***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use abstractions whenever possible, as said above. This is bad:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'But don’t over abstract: `(define one 1)` or `(define two "two")`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always do test cases (show coverage tool), you might want to comment them, but
    you should always make sure your code works.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not under-document, but also don’t over-document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***INDENTATION!*** (Let DrRacket decide; get used to its rules) –> This is
    part of the culture that was mentioned last time, but it’s done this way for good
    reason: decades of programming experience have shown this to be the most readable
    format. It’s also extremely important to keep good indentation since programmers
    in all Lisps don’t count parens — they look at the structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a general rule, `if` should be either all on one line, or the condition on
    the first and each consequent on a separate line. Similarly for `define` — either
    all on one line or a newline after the object that is being define (either an
    identifier or a an identifier with arguments).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another general rule: you should never have white space after an open-paren,
    or before a close paren (white space includes newlines). Also, before an open
    paren there should be either another open paren or white space, and the same goes
    for after a closing paren.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the tools that are available to you: for example, use `cond` instead of
    nested `if`s (definitely do not force the indentation to make a nested `if` look
    like its C counterpart — remember to let DrRacket indent for you).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another example — do not use `(+ 1 (+ 2 3))` instead of `(+ 1 2 3)` (this might
    be needed in *extremely* rare situations, only when you know your calculus and
    have extensive knowledge about round-off errors).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Another example — do not use `(cons 1 (cons 2 (cons 3 null)))` instead of `(list
    1 2 3)`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Also — don’t write things like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: since it’s the same as just
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A few more of these:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: (Actually the first two are almost the same, for example, `(and 1 2)` will return
    `2`, not `#t`.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use these as examples for many of these issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
