- en: Some StyleTuesday, January 10th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些样式周二，1 月 10 日
- en: 'When you have some common value that you need to use in several places, it
    is bad to duplicate it. For example:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有一些常见的值需要在几个地方使用时，复制它是不好的。例如：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What’s bad about it?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 它有什么不好之处？
- en: It’s longer than necessary, which will eventually make your code less readable.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它比必要的要长，这最终会使你的代码不太可读。
- en: It’s slower — by the time you reach the last case, you have evaluated the two
    sequences three times.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它更慢 —— 当你到达最后一个情况时，你已经评估了两个序列三次。
- en: It’s more prone to bugs — the above code is short enough, but what if it was
    longer so you don’t see the three occurrences on the same page? Will you remember
    to fix all places when you debug the code months after it was written?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它更容易出错 —— 上面的代码足够短，但如果它更长，以至于你看不到同一页上的三个出现？当你在几个月后调试代码时，你会记得修复所有地方吗？
- en: In general, the ability to use names is probably the most fundamental concept
    in computer science — the fact that makes computer programs what they are.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，使用名称的能力可能是计算机科学中最基本的概念 —— 让计算机程序成为它们所是的事实。
- en: 'We already have a facility to name values: function arguments. We could split
    the above function into two like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了一个命名值的设施：函数参数。我们可以像这样将上面的函数分成两个：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But instead of the awkward solution of coming up with a new function just for
    its names, we have a facility to bind local names — `let`. In general, the syntax
    for a `let` special form is
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，与为其名称想出一个新函数的笨拙解决方案不同，我们有一个绑定局部名称的设施 —— `let`。一般来说，`let` 特殊形式的语法是
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For example,
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But note that the bindings are done “in parallel”, for example, try this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，绑定是“并行”进行的，例如，试试这个：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Using this for the above problem:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个来解决上面的问题：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '* * *'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Some notes on writing code (also see the style-guide in the handouts section)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于编写代码的一些注意事项（也请参阅手册部分的风格指南）
- en: '***Code quality will be graded to in this course!***'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '***代码质量将在这门课程中得到评分！***'
- en: 'Use abstractions whenever possible, as said above. This is bad:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能使用抽象，如上所述。这是不好的：
- en: '[PRE6]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'But don’t over abstract: `(define one 1)` or `(define two "two")`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但不要过度抽象：`(define one 1)` 或者 `(define two "two")`
- en: Always do test cases (show coverage tool), you might want to comment them, but
    you should always make sure your code works.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是进行测试用例（显示覆盖工具），你可能想对它们进行注释，但你应该始终确保你的代码能够正常工作。
- en: Do not under-document, but also don’t over-document.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要文档不足，但也不要文档过多。
- en: '***INDENTATION!*** (Let DrRacket decide; get used to its rules) –> This is
    part of the culture that was mentioned last time, but it’s done this way for good
    reason: decades of programming experience have shown this to be the most readable
    format. It’s also extremely important to keep good indentation since programmers
    in all Lisps don’t count parens — they look at the structure.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***缩进！***（让 DrRacket 决定；适应它的规则） —> 这是上次提到的文化的一部分，但这样做是有充分理由的：几十年的编程经验表明这是最可读的格式。保持良好的缩进非常重要，因为所有
    Lisp 的程序员都不统计括号 —— 他们看结构。'
- en: As a general rule, `if` should be either all on one line, or the condition on
    the first and each consequent on a separate line. Similarly for `define` — either
    all on one line or a newline after the object that is being define (either an
    identifier or a an identifier with arguments).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为一般规则，`if` 应该是一行中的全部，或者第一个条件和每个结果在单独的一行上。对于 `define` 也是如此 —— 要么全部在一行上，要么在定义的对象之后换行（要么是标识符，要么是带有参数的标识符）。
- en: 'Another general rule: you should never have white space after an open-paren,
    or before a close paren (white space includes newlines). Also, before an open
    paren there should be either another open paren or white space, and the same goes
    for after a closing paren.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个一般规则：在开放括号后面永远不要有空白，或者在关闭括号前面不要有空白（空白包括换行）。同样，在开放括号之前应该是另一个开放括号或者空白，关闭括号之后也是一样。
- en: 'Use the tools that are available to you: for example, use `cond` instead of
    nested `if`s (definitely do not force the indentation to make a nested `if` look
    like its C counterpart — remember to let DrRacket indent for you).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能使用可用的工具：例如，使用 `cond` 而不是嵌套的 `if`（绝对不要强迫缩进使嵌套的 `if` 看起来像它的 C 对应物 —— 记得让 DrRacket
    为你缩进）。
- en: Another example — do not use `(+ 1 (+ 2 3))` instead of `(+ 1 2 3)` (this might
    be needed in *extremely* rare situations, only when you know your calculus and
    have extensive knowledge about round-off errors).
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个例子 —— 不要使用 `(+ 1 (+ 2 3))` 而是使用 `(+ 1 2 3)`（这可能在*极其*罕见的情况下需要，只有当你了解你的微积分知识并且对舍入误差有广泛的了解时）。
- en: Another example — do not use `(cons 1 (cons 2 (cons 3 null)))` instead of `(list
    1 2 3)`.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个例子 — 不要使用`(cons 1 (cons 2 (cons 3 null)))`来代替`(list 1 2 3)`。
- en: 'Also — don’t write things like:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样 — 不要写类似以下的内容：
- en: '[PRE7]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: since it’s the same as just
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为这与只是
- en: '[PRE8]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A few more of these:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有一些这样的例子：
- en: '[PRE9]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: (Actually the first two are almost the same, for example, `(and 1 2)` will return
    `2`, not `#t`.)
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (实际上前两个几乎是相同的，例如，`(and 1 2)`将返回`2`，而不是`#t`。)
- en: 'Use these as examples for many of these issues:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用这些作为许多这些问题的示例：
- en: '[PRE10]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '* * *'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
