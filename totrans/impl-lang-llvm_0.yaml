- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tutorial Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the “Implementing a language with LLVM” tutorial. This tutorial runs
    through the implementation of a simple language, showing how fun and easy it can
    be. This tutorial will get you up and started as well as help to build a framework
    you can extend to other languages. The code in this tutorial can also be used
    as a playground to hack on other LLVM specific things.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this tutorial is to progressively unveil our language, describing
    how it is built up over time. This will let us cover a fairly broad range of language
    design and LLVM-specific usage issues, showing and explaining the code for it
    all along the way, without overwhelming you with tons of details up front.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: It is useful to point out ahead of time that this tutorial is really about teaching
    compiler techniques and LLVM specifically, not about teaching modern and sane
    software engineering principles. In practice, this means that we’ll take a number
    of shortcuts to simplify the exposition. For example, the code leaks memory, uses
    global variables all over the place, doesn’t use nice design patterns like visitors,
    etc... but it is very simple. If you dig in and use the code as a basis for future
    projects, fixing these deficiencies shouldn’t be hard.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve tried to put this tutorial together in a way that makes chapters easy
    to skip over if you are already familiar with or are uninterested in the various
    pieces. The structure of the tutorial is:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter #1**: Introduction to the Kaleidoscope language, and the definition
    of its Lexer - This shows where we are going and the basic functionality that
    we want it to do. In order to make this tutorial maximally understandable and
    hackable, we choose to implement everything in C++ instead of using lexer and
    parser generators. LLVM obviously works just fine with such tools, feel free to
    use one if you prefer.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chapter #2**: Implementing a Parser and AST - With the lexer in place, we
    can talk about parsing techniques and basic AST construction. This tutorial describes
    recursive descent parsing and operator precedence parsing. Nothing in Chapters
    1 or 2 is LLVM-specific, the code doesn’t even link in LLVM at this point. :)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chapter #3**: Code generation to LLVM IR - With the AST ready, we can show
    off how easy generation of LLVM IR really is.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chapter #4**: Adding JIT and Optimizer Support - Because a lot of people
    are interested in using LLVM as a JIT, we’ll dive right into it and show you the
    3 lines it takes to add JIT support. LLVM is also useful in many other ways, but
    this is one simple and “sexy” way to show off its power. :)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chapter #5**: Extending the Language: Control Flow - With the language up
    and running, we show how to extend it with control flow operations (if/then/else
    and a ‘for’ loop). This gives us a chance to talk about simple SSA construction
    and control flow.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chapter #6**: Extending the Language: User-defined Operators - This is a
    silly but fun chapter that talks about extending the language to let the user
    program define their own arbitrary unary and binary operators (with assignable
    precedence!). This lets us build a significant piece of the “language” as library
    routines.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第6章**：扩展语言：用户定义运算符 - 这是一个愚蠢但有趣的章节，讨论了如何扩展语言以让用户编程定义他们自己的任意一元和二元运算符（可分配优先级！）。这让我们可以将“语言”的一个重要部分构建为库例程。'
- en: '**Chapter #7**: Extending the Language: Mutable Variables - This chapter talks
    about adding user-defined local variables along with an assignment operator. The
    interesting part about this is how easy and trivial it is to construct SSA form
    in LLVM: no, LLVM does not require your front-end to construct SSA form!'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第7章**：扩展语言：可变变量 - 这一章讨论了添加用户定义的局部变量以及赋值运算符。有趣的部分在于在LLVM中构建SSA形式是多么简单和琐碎：不，LLVM不需要你的前端构建SSA形式！'
- en: '**Chapter #8**: Conclusion and other useful LLVM tidbits - This chapter wraps
    up the series by talking about potential ways to extend the language, but also
    includes a bunch of pointers to info about “special topics” like adding garbage
    collection support, exceptions, debugging, support for “spaghetti stacks”, and
    a bunch of other tips and tricks.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第8章**：结论和其他有用的LLVM小贴士 - 这一章通过讨论扩展语言的潜在方法来结束系列，但也包括了一堆关于“特殊主题”的信息，比如添加垃圾回收支持、异常、调试、支持“意大利面条堆栈”以及一堆其他技巧和窍门。'
- en: By the end of the tutorial, we’ll have written a bit less than 700 lines of
    non-comment, non-blank, lines of code. With this small amount of code, we’ll have
    built up a very reasonable compiler for a non-trivial language including a hand-written
    lexer, parser, AST, as well as code generation support with a JIT compiler. While
    other systems may have interesting “hello world” tutorials, I think the breadth
    of this tutorial is a great testament to the strengths of LLVM and why you should
    consider it if you’re interested in language or compiler design.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程结束时，我们将写了不到700行非注释、非空白的代码。通过这少量的代码，我们将为一个非平凡语言构建了一个非常合理的编译器，包括手写的词法分析器、语法分析器、抽象语法树，以及带有JIT编译器的代码生成支持。虽然其他系统可能有有趣的“hello
    world”教程，但我认为本教程的广度是对LLVM优势的一个很好的证明，如果你对语言或编译器设计感兴趣，你应该考虑它。
- en: 'A note about this tutorial: we expect you to extend the language and play with
    it on your own. Take the code and go crazy hacking away at it, compilers don’t
    need to be scary creatures - it can be a lot of fun to play with languages!'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本教程的一点说明：我们希望你扩展这门语言并自己玩耍。拿起代码，疯狂地对其进行修改，编译器不需要是可怕的生物 - 玩转语言可以是一种很有趣的事情！
