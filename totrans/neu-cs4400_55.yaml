- en: 'Recursion: Racket’s `letrec`Tuesday, February 21st'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归：Racket的`letrec`
- en: 'So we want to add recursion to our language, practically. We already know that
    Racket makes it possible to write recursive functions, which is possible because
    of the way it implements its “global environment”: our evaluator can only *extend*
    an environment, while Racket *modifies* its global environment. This means that
    whenever a function is defined in the global environment, the resulting closure
    will have it as its environment “pointer”, but the global environment was not
    extended — it stays the same, and was just modified with one additional binding.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们希望在我们的语言中添加递归，实际上。我们已经知道Racket使得编写递归函数成为可能，这是因为它实现了它的“全局环境”的方式：我们的求值器只能*扩展*一个环境，而Racket*修改*了它的全局环境。这意味着每当一个函数在全局环境中被定义时，生成的闭包将以其作为环境“指针”，但全局环境没有被扩展
    — 它保持不变，并且只是用一个额外的绑定进行了修改。
- en: 'But Racket has another, a bit more organized way of using recursion: there
    is a special local-binding construct that is similar to `let`, but allows a function
    to refer to itself. It is called `letrec`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，Racket有另一种更有组织的使用递归的方式：有一种特殊的本地绑定结构，类似于`let`，但允许函数引用自身。它被称为`letrec`：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Some people may remember that there was a third way for creating recursive
    functions: using local definition in function bodies. For example, we have seen
    things like:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能还记得创建递归函数的第三种方式：在函数体中使用局部定义。例如，我们曾见过这样的东西：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This looks like the same kind of environment magic that happens with a global
    `define` — but actually, Racket defines the meaning of internal definitions using
    `letrec` — so the above code is exactly the same as:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来像是在全局`define`中发生的相同类型的环境魔术 — 但实际上，Racket使用`letrec`定义了内部定义的含义 — 因此上述代码与以下代码完全相同：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The scoping rules for a `letrec` is that the scope of the bound name covers
    both the body *and* the named expression. Furthermore, multiple names can be bound
    to multiple expressions, and the scope of each name covers all named expression
    as well as the body. This makes it easy to define mutually recursive functions,
    such as:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`letrec`的作用域规则是，绑定名称的作用域覆盖了整个表达式*和*命名表达式。此外，可以将多个名称绑定到多个表达式，并且每个名称的作用域覆盖所有命名表达式以及主体。这使得定义相互递归函数变得容易，例如：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But it is not a required functionality — it could be done with a single recursive
    binding that contains several functions:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不是必需的功能 — 它可以通过包含多个函数的单个递归绑定来完成：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is basically the same problem we face if we want to use the Y combinator
    for mutually recursive bindings. The above solution is inconvenient, but it can
    be improved using more `let`s to have easier name access. For example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是我们在想要为相互递归绑定使用Y组合子时所面临的相同问题。上述解决方案不太方便，但可以通过更多的`let`来改进，以便更轻松地访问名称。例如：
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
