- en: Lecture 30 - Power On
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Final exam date: 9.00 August 7 to 11.30 August 9'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Power On
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you turn on the power or press the reset button, what happens before you
    see the `RedBoot>` prompt?
  prefs: []
  type: TYPE_NORMAL
- en: Power on asserts the reset input to the CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is not determined by the instruction set architecture (ISA).
  prefs: []
  type: TYPE_NORMAL
- en: The ISA guarantees only that the CPU will (at some future time) set the pc to
    0x00000000 and start executing instructions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens before that, and what appears at 0x00000000 is determined by the
    design of the system surrounding the CPU on the chip.
  prefs: []
  type: TYPE_NORMAL
- en: Cirrus provides this, not ARM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What Cirrus provides is pretty generic: the steps are the same on others SoCs,
    but the details differ.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two pretty hard resets that can occur.
  prefs: []
  type: TYPE_NORMAL
- en: Turning on the power
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pressing the reset button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Power-on, but with memory refresh running continuously.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: (Jumping to 0x00000000 is a much softer reset.)
  prefs: []
  type: TYPE_NORMAL
- en: Asserting the reset input of the SoC, asserts the reset output of the SoC.
  prefs: []
  type: TYPE_NORMAL
- en: The output reset goes everywhere and resets everything with a power on reset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Negating the reset input starts the boot sequence, with the SoC in its reset
    state. Ten hardware inputs determine how the SoC boots
  prefs: []
  type: TYPE_NORMAL
- en: internal/external
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pre-boot source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: watchdog state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bus width of pre-boot and pre-pre-boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These inputs allow the designer of the board hosting the SoC to determine enough
    characteristics of the boot state that it can be used for many applications
  prefs: []
  type: TYPE_NORMAL
- en: TS-7200 is set up for internal pre-boot with source from the flash on the 32-bit
    AHB
  prefs: []
  type: TYPE_NORMAL
- en: The AHB bus has all the important high-speed components
  prefs: []
  type: TYPE_NORMAL
- en: memory (program and graphics)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ethernet controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB controller, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16Kbytes of mask-programmed ROM at `0x80090000`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initial state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ARM
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following things, which are contolled through the system control co-processor,
    are determined by the CPU architecture. They must be independent of the stuff
    added by Cirrus
  prefs: []
  type: TYPE_NORMAL
- en: MMU flat, but might be different on soft reset
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Caches disabled
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Slow bus clock
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Interrupts disabled
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Little-endian memory system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No access to MMU registers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Normal exception registers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cirrus
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following things, which are described in the EP9302 documentation, are properties
    of hardware Cirrus added. They are independent of how Technologic configured the
    chip when they designed the TS7200.
  prefs: []
  type: TYPE_NORMAL
- en: DRAM controller(s) not initialized
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Flash controller(s) not initialized
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All I/O devices in reset state. (They receive hardware reset inputs from the
    CPU.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Memory map in boot mode
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Technologic
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following things, which are described in the Technologic documentation,
    manual & circuit diagram, are properties of the TS7200
  prefs: []
  type: TYPE_NORMAL
- en: Boot control bits, set to normal boot, 32-bit bus width, sychronous boot device,
    internal, watchdog timer disabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Physical memory map
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 0x80000000 to 0x800fffff, used by Cirrus for on-chip components
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SDRAM chips break memory into 4M blocks. Addresses of 4M blocks are
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00000000` to `0x003fffff`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00400000` to `0x007fffff`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00800000` to `0x00bfffff`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00c00000` to `0x00ffffff`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x01000000` to `0x013fffff`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TS7200 uses 4-bit chip select to divide the memoery into 256 Mbyte blocks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0x00000000 to 0x0fffffff (first 256M) SDRAM, CS0, 32 bus cycles
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x10000000 to 0x1fffffff: CS1, 8 bit bus cycles'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x20000000 to 0x2fffffff: CS2, 16 bit bus cycles.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x60000000 to 0x7fffffff: CS6/7, Flash'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x80000000 to 0x8fffffff: I/O registers including'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x80000000 to 0x807fffff: AHB mapped registers, including'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DMA
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethernet
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: USB
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory controllers
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-pre-boot ROM
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ICU registers
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x80800000 to 0x8fffffff: I/O registers'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SDRAM chips break memory into 4M blocks. Addresses of 4M blocks are
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`0x00000000` to `0x003fffff`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00400000` to `0x007fffff`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00800000` to `0x00bfffff`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00c00000` to `0x00ffffff`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x01000000` to `0x013fffff`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the AHB registers is a 16K block of ROM from `0x80090000` to `0x80093fff`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initially, it is mapped to the entire memory space at 16K intervals.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chip select, and how addressing occurs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chip select of this block is `0x8009[00XXb]XXX`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chip select has two parts
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I/O chip select: `0x8XXXXXXX`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AHB chip select: `0xY00XXXXX`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ROM chip select: `0xYYY9[00XXb]XXX`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The first instruction executed is the one that you find at `0x80090000`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-pre-boot Sequence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jump to `0x80090018.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on LEDs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the CPU completely vanilla. E.g.,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: no caches, physical memory map,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn off watchdog timer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Acquire boot state
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure external clocks (needed for serial boot)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Acquire boot state configuration inputs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are input pins on the EP9302, the state of which is determined by the
    TS7200\.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A couple are user-controllable via jumpers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: They are the only thing the EP9302 knows about the outside world
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using boot state configure
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: flash memory controller
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SDRAM memory controller
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: These are configured with very conservative parameters
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clear boot mode `memory map'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Toggle LEDs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Serial boot on UART1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Output ">"
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Read 2048 bytes starting with CRUS or SURC to the ethernet buffer
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Jump to the start of the ethernet buffer
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Boot from ROM outside SoC
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assert ROM chip selects looking for CRUS
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When found read 2048 bytes from the ROM to ethernet buffer
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Jump to the start of the ethernet buffer
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Boot from flash
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Look for CRUS at possible flash start locations
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When found jump to start location plus `0x4 (account for CRUS)`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If not found
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: load code into ethernet buffer
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: flash LEDs forever
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the first two cases the 2048 bytes contains a memory test followed by a loader.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pre-boot Sequence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This code knows all about the EP9302, and all about the TS7200.
  prefs: []
  type: TYPE_NORMAL
- en: Sets up a stack in the ethernet buffer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sets the CPSR to a vanilla state: no interrupts, svc mode'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copies 260 words of code from flash to the ethernet buffer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initializes memory controllers for the memory it has
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configures GPIO.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turns off the watchdog timer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sets up the appropriate serial port for a monitor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
