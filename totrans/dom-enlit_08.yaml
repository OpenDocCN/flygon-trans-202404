- en: Chapter 3 - Element Nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 3.1 *HTML*Element* object overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Elements in an html document all have a unique nature and as such they all have
    a unique [JavaScript constructor](http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/html.html)
    that instantiates the element as a node object in a DOM tree. For example an *<a>*
    element is created as a DOM node from the *HTMLAnchorElement()* constructor. Below
    we verify that an anchor element is created from *HTMLAnchorElement()*.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/TgcNu](http://jsfiddle.net/domenlightenment/TgcNu)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The point I am trying to express in the previous code example is that each element
    in the DOM is constructed from a unique JavaScript intefaces/constructor. The
    list below (not a [complete list](http://www.whatwg.org/specs/web-apps/current-work/multipage/section-index.html#elements-1))
    should give you a good sense of the interfaces/constructors used to create HTML
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: '*HTMLHtmlElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLHeadElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLLinkElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTitleElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLMetaElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLBaseElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLIsIndexElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLStyleElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLBodyElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLFormElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLSelectElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLOptGroupElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLOptionElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLInputElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTextAreaElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLButtonElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLLabelElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLFieldSetElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLLegendElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLUListElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLOListElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLDListElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLDirectoryElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLMenuElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLLIElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLDivElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLParagraphElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLHeadingElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLQuoteElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLPreElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLBRElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLBaseFontElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLFontElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLHRElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLModElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLAnchorElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLImageElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLObjectElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLParamElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLAppletElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLMapElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLAreaElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLScriptElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableCaptionElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableColElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableSectionElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableRowElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableCellElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLFrameSetElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLFrameElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLIFrameElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep in mind each *HTML*Element* above inherits properties and methods from
    *HTMLElement*, *Element*, *Node*, and *Object*.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 *HTML*Element* object properties and methods (including inherited)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get accurate information pertaining to the available properties and methods
    on an *HTML*Element* node its best to ignore the specification and to ask the
    browser what is available. Examine the arrays created in the code below detailing
    the properties and methods available from  HTML  element nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/vZUHw](http://jsfiddle.net/domenlightenment/vZUHw)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The available properties are many even if the inherited properties were not
    considered. Below I've hand pick a list of note worthy properties and methods
    (inherited as well) for the context of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '*createElement()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*tagName*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*children*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*getAttribute()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*setAttribute()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*hasAttribute()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*removeAttribute()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*classList()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*dataset*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*attributes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a complete list check out the MDN documentation which covers the [general
    properties and methods](https://developer.mozilla.org/en/DOM/element) available
    to most HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Creating Elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Element* nodes are instantiated for us when a browser interputs an HTML document
    and a corresponding DOM is built based on the contents of the document. After
    this fact, its also possible to programaticlly create *Element* nodes using *createElement()*.
    In the code below I create a *<textarea>* element node and then inject that node
    into the live DOM tree.'
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/d3Yvv](http://jsfiddle.net/domenlightenment/d3Yvv)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The value passed to the *createElement()* method is a string that specifices
    the type of element (aka *[tagName](http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-104682815)*)
    to be created.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This value passed to createElement is changed to a lower-case string before
    the element is created.
  prefs: []
  type: TYPE_NORMAL
- en: 3.4 Get the tag name of an element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *tagName* property we can access the name of an element. The *tagName*
    property returns the same value that using *nodeName* would return. Both return
    the value in uppercase regardless of the case in the source HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: Below we get the name of an *<a>* element in the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/YJb3W](http://jsfiddle.net/domenlightenment/YJb3W)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 3.5 Getting a list/collection of element attributes and values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *attributes* property (inherited by element nodes from *Node*) we
    can get a collection of the *[Attr](http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-637646024)*
    nodes that an element currently has defined. The list returned is a *[NameNodeMap](https://developer.mozilla.org/en/DOM/NamedNodeMap)*.
    Below I loop over the attributes collection exposing each *Attr* node object contained
    in the collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/9gVQf](http://jsfiddle.net/domenlightenment/9gVQf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The array returned from accessing the attributes property should be consider
    live. Meaning that its contents can be changed at anytime.
  prefs: []
  type: TYPE_NORMAL
- en: The array that is returned inherits from the *NameNodeMap* which provides methods
    to operate on the array such as *getNamtedItem()*, *setNamedItem()*, and *removeNamedItem()*.
    Operating on *attributes* with these methods should be secondary to using *getAttribute()*,
    *setAttribute()*, *hasAttribute()*, *removeAttribute()*. Its this authors opinion
    that dealing with [Attr](http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-637646024)
    nodes is messy. The only merit in using the *attributes* is found only in its
    funcitonaly for returning a list of live attributes.
  prefs: []
  type: TYPE_NORMAL
- en: The *attributes* property is an array like collection and has a read only *length*
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean attributres (e.g. *<option selected>foo</option>*) show up in the *attributes*
    list but of course have no value unless you provide one (e.g. *<option selected="selected">foo</option>*).
  prefs: []
  type: TYPE_NORMAL
- en: 3.6 Getting, Setting, & Removing an element's attribute value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most consistent way to get, set, or remove an elements [attribute](http://www.whatwg.org/specs/web-apps/current-work/#attributes-1)
    value is to use the *getAttribute(), setAttribute(),* and *removeAttribute()*
    method. In the code below I demonstrate each of these methods for managing element
    attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/wp7rq](http://jsfiddle.net/domenlightenment/wp7rq)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use *removeAttribute()* instead of setting the attribute value to *null* or
    *''* using *setAttribute()*
  prefs: []
  type: TYPE_NORMAL
- en: Some element attributes are available from element nodes as object properties
    (i.e. *document.body.id* or *document.body.className*). This author recommends
    avoiding these properties and using the remove, set, and get attribute methods.
  prefs: []
  type: TYPE_NORMAL
- en: 3.7 Verifying an element has a specific attribute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way to determine (i.e. boolean) if an element has an attribute is to
    use the *hasAttribute()*  method. Below I verify if the *<a>* has a *href*, *title*,
    *style*, *data-foo*, *class*, and *foo* attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/hbCCE](http://jsfiddle.net/domenlightenment/hbCCE)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This method will return *true* if the element contains the attribute even if
    the attribute has no value. For example using *hasAttribute()* we can get a boolean
    response for [boolean attributes](http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2).
    In the code example below we check to see if a checkbox is checked.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/tb6Ja](http://jsfiddle.net/domenlightenment/tb6Ja)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 3.8 Getting a list of class attribute values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *classList* property available on element nodes we can access a list
    (i.e. *[DOMTokenList](http://www.w3.org/TR/dom/#interface-domtokenlist)*) of class
    attribute values that is much easier to work with than a space-delimited string
    value returned from the *className* property. In the code below I contrast the
    use of *classList* with *className*.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/DLJEA](http://jsfiddle.net/domenlightenment/DLJEA)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Given the *classList* is an array like collection it has a read only *length*
    property.
  prefs: []
  type: TYPE_NORMAL
- en: '*classList* is read-only but can be modifyied using the *add()*, *remove()*,
    *contains()*, and *toggle()* methods'
  prefs: []
  type: TYPE_NORMAL
- en: IE9 does not support *classList*. Support will land in [IE10](http://blogs.msdn.com/b/ie/archive/2012/05/31/windows-release-preview-the-sixth-ie10-platform-preview.aspx).
    [Several](https://github.com/eligrey/classList.js) [polyfills](https://gist.github.com/1381839)
    are avaliable.
  prefs: []
  type: TYPE_NORMAL
- en: 3.9 Adding & removing sub-values to a class attribute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *classList.add()* and *classList.remove()* methods its extremely simple
    to edit the value of a class attribute. In the code below I demonstrated adding
    and removing class values.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/YVaUU](http://jsfiddle.net/domenlightenment/YVaUU)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 3.10 Toggling a class attribute value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *classList.toggle()* method we can toggle a sub-value of the class
    attribute. This allows us to add a value if its missing or remove a value if its
    already added. In the code below I toggle the *'visible'* value and the *'grow'*
    value. Which essentially means I remove *'visible'* and add *'grow'* to the class
    attribute value.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/uFp6J](http://jsfiddle.net/domenlightenment/uFp6J)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 3.11 Determining if a class attribute value contains a specific value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *classList.contains()* method its possible to determine (boolean)
    if a class attribute value contains a specific sub-value. In the code below we
    test weather the *<div>* class attribute contains a sub-value of *brown*.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/njyaP](http://jsfiddle.net/domenlightenment/njyaP)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 3.12 Getting & Setting data-* attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *dataset* property of a element node provides an object containing all of
    the attributes of an element that starts with data-*. Because its a simply a JavaScript
    object we can manipulate *dataset* and have the element in the DOM reflect those
    changes
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/ystgj](http://jsfiddle.net/domenlightenment/ystgj)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*### Notes'
  prefs: []
  type: TYPE_NORMAL
- en: '*dataset* contains camel case versions of data attributes. Meaning *data-foo-foo*
    will be listed as the property *fooFoo* in the dataset *DOMStringMap* object.
    The*-* is replaced by camel casing.'
  prefs: []
  type: TYPE_NORMAL
- en: Removing a data-* attribute from the DOM is as simple using the *delete* operator
    on a property of the *datset* (e.g. *delete dataset.fooFoo*)
  prefs: []
  type: TYPE_NORMAL
- en: '*dataset* is not supported in IE9\. A [polyfill](https://github.com/remy/polyfills/blob/master/dataset.js)
    is avaliable. However, you can always just use getAttribute(''data-foo''), removeAttribute(''data-foo''),
    setAttribute(''data-foo''), hasAttribute(''data-foo'').*'
  prefs: []
  type: TYPE_NORMAL
