- en: Chapter 3 - Element Nodes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 3.1 *HTML*Element* object overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Elements in an html document all have a unique nature and as such they all have
    a unique [JavaScript constructor](http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/html.html)
    that instantiates the element as a node object in a DOM tree. For example an *<a>*
    element is created as a DOM node from the *HTMLAnchorElement()* constructor. Below
    we verify that an anchor element is created from *HTMLAnchorElement()*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/TgcNu](http://jsfiddle.net/domenlightenment/TgcNu)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The point I am trying to express in the previous code example is that each element
    in the DOM is constructed from a unique JavaScript intefaces/constructor. The
    list below (not a [complete list](http://www.whatwg.org/specs/web-apps/current-work/multipage/section-index.html#elements-1))
    should give you a good sense of the interfaces/constructors used to create HTML
    elements.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '*HTMLHtmlElement*'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLHeadElement*'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLLinkElement*'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTitleElement*'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLMetaElement*'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLBaseElement*'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLIsIndexElement*'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLStyleElement*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLBodyElement*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLFormElement*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLSelectElement*'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLOptGroupElement*'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLOptionElement*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLInputElement*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTextAreaElement*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLButtonElement*'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLLabelElement*'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLFieldSetElement*'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLLegendElement*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLUListElement*'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLOListElement*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLDListElement*'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLDirectoryElement*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLMenuElement*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLLIElement*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLDivElement*'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLParagraphElement*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLHeadingElement*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLQuoteElement*'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLPreElement*'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLBRElement*'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLBaseFontElement*'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLFontElement*'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLHRElement*'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLModElement*'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLAnchorElement*'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLImageElement*'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLObjectElement*'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLParamElement*'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLAppletElement*'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLMapElement*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLAreaElement*'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLScriptElement*'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableElement*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableCaptionElement*'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableColElement*'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableSectionElement*'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableRowElement*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLTableCellElement*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLFrameSetElement*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLFrameElement*'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*HTMLIFrameElement*'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep in mind each *HTML*Element* above inherits properties and methods from
    *HTMLElement*, *Element*, *Node*, and *Object*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 *HTML*Element* object properties and methods (including inherited)
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get accurate information pertaining to the available properties and methods
    on an *HTML*Element* node its best to ignore the specification and to ask the
    browser what is available. Examine the arrays created in the code below detailing
    the properties and methods available from  HTML  element nodes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/vZUHw](http://jsfiddle.net/domenlightenment/vZUHw)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The available properties are many even if the inherited properties were not
    considered. Below I've hand pick a list of note worthy properties and methods
    (inherited as well) for the context of this chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '*createElement()*'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*tagName*'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*children*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*getAttribute()*'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*setAttribute()*'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*hasAttribute()*'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*removeAttribute()*'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*classList()*'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*dataset*'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*attributes*'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a complete list check out the MDN documentation which covers the [general
    properties and methods](https://developer.mozilla.org/en/DOM/element) available
    to most HTML elements.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Creating Elements
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Element* nodes are instantiated for us when a browser interputs an HTML document
    and a corresponding DOM is built based on the contents of the document. After
    this fact, its also possible to programaticlly create *Element* nodes using *createElement()*.
    In the code below I create a *<textarea>* element node and then inject that node
    into the live DOM tree.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/d3Yvv](http://jsfiddle.net/domenlightenment/d3Yvv)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The value passed to the *createElement()* method is a string that specifices
    the type of element (aka *[tagName](http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-104682815)*)
    to be created.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This value passed to createElement is changed to a lower-case string before
    the element is created.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 3.4 Get the tag name of an element
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *tagName* property we can access the name of an element. The *tagName*
    property returns the same value that using *nodeName* would return. Both return
    the value in uppercase regardless of the case in the source HTML document.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Below we get the name of an *<a>* element in the DOM.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/YJb3W](http://jsfiddle.net/domenlightenment/YJb3W)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 3.5 Getting a list/collection of element attributes and values
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *attributes* property (inherited by element nodes from *Node*) we
    can get a collection of the *[Attr](http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-637646024)*
    nodes that an element currently has defined. The list returned is a *[NameNodeMap](https://developer.mozilla.org/en/DOM/NamedNodeMap)*.
    Below I loop over the attributes collection exposing each *Attr* node object contained
    in the collection.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/9gVQf](http://jsfiddle.net/domenlightenment/9gVQf)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notes
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The array returned from accessing the attributes property should be consider
    live. Meaning that its contents can be changed at anytime.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: The array that is returned inherits from the *NameNodeMap* which provides methods
    to operate on the array such as *getNamtedItem()*, *setNamedItem()*, and *removeNamedItem()*.
    Operating on *attributes* with these methods should be secondary to using *getAttribute()*,
    *setAttribute()*, *hasAttribute()*, *removeAttribute()*. Its this authors opinion
    that dealing with [Attr](http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-637646024)
    nodes is messy. The only merit in using the *attributes* is found only in its
    funcitonaly for returning a list of live attributes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: The *attributes* property is an array like collection and has a read only *length*
    property.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Boolean attributres (e.g. *<option selected>foo</option>*) show up in the *attributes*
    list but of course have no value unless you provide one (e.g. *<option selected="selected">foo</option>*).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 3.6 Getting, Setting, & Removing an element's attribute value
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most consistent way to get, set, or remove an elements [attribute](http://www.whatwg.org/specs/web-apps/current-work/#attributes-1)
    value is to use the *getAttribute(), setAttribute(),* and *removeAttribute()*
    method. In the code below I demonstrate each of these methods for managing element
    attributes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/wp7rq](http://jsfiddle.net/domenlightenment/wp7rq)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notes
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use *removeAttribute()* instead of setting the attribute value to *null* or
    *''* using *setAttribute()*
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Some element attributes are available from element nodes as object properties
    (i.e. *document.body.id* or *document.body.className*). This author recommends
    avoiding these properties and using the remove, set, and get attribute methods.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 3.7 Verifying an element has a specific attribute
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way to determine (i.e. boolean) if an element has an attribute is to
    use the *hasAttribute()*  method. Below I verify if the *<a>* has a *href*, *title*,
    *style*, *data-foo*, *class*, and *foo* attribute.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/hbCCE](http://jsfiddle.net/domenlightenment/hbCCE)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This method will return *true* if the element contains the attribute even if
    the attribute has no value. For example using *hasAttribute()* we can get a boolean
    response for [boolean attributes](http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2).
    In the code example below we check to see if a checkbox is checked.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/tb6Ja](http://jsfiddle.net/domenlightenment/tb6Ja)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 3.8 Getting a list of class attribute values
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *classList* property available on element nodes we can access a list
    (i.e. *[DOMTokenList](http://www.w3.org/TR/dom/#interface-domtokenlist)*) of class
    attribute values that is much easier to work with than a space-delimited string
    value returned from the *className* property. In the code below I contrast the
    use of *classList* with *className*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/DLJEA](http://jsfiddle.net/domenlightenment/DLJEA)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notes
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Given the *classList* is an array like collection it has a read only *length*
    property.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '*classList* is read-only but can be modifyied using the *add()*, *remove()*,
    *contains()*, and *toggle()* methods'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: IE9 does not support *classList*. Support will land in [IE10](http://blogs.msdn.com/b/ie/archive/2012/05/31/windows-release-preview-the-sixth-ie10-platform-preview.aspx).
    [Several](https://github.com/eligrey/classList.js) [polyfills](https://gist.github.com/1381839)
    are avaliable.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 3.9 Adding & removing sub-values to a class attribute
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *classList.add()* and *classList.remove()* methods its extremely simple
    to edit the value of a class attribute. In the code below I demonstrated adding
    and removing class values.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/YVaUU](http://jsfiddle.net/domenlightenment/YVaUU)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 3.10 Toggling a class attribute value
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *classList.toggle()* method we can toggle a sub-value of the class
    attribute. This allows us to add a value if its missing or remove a value if its
    already added. In the code below I toggle the *'visible'* value and the *'grow'*
    value. Which essentially means I remove *'visible'* and add *'grow'* to the class
    attribute value.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*classList.toggle()*方法，我们可以切换类属性的子值。这使我们能够在缺失时添加一个值，或者在已经添加时删除一个值。在下面的代码中，我切换了*'visible'*值和*'grow'*值。这实质上意味着我从类属性值中删除*'visible'*并添加*'grow'*。
- en: 'live code: [http://jsfiddle.net/domenlightenment/uFp6J](http://jsfiddle.net/domenlightenment/uFp6J)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/uFp6J](http://jsfiddle.net/domenlightenment/uFp6J)'
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 3.11 Determining if a class attribute value contains a specific value
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.11 确定类属性值是否包含特定值
- en: Using the *classList.contains()* method its possible to determine (boolean)
    if a class attribute value contains a specific sub-value. In the code below we
    test weather the *<div>* class attribute contains a sub-value of *brown*.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*classList.contains()*方法，可以确定（布尔值）类属性值是否包含特定的子值。在下面的代码中，我们测试*<div>*类属性是否包含*brown*的子值。
- en: 'live code: [http://jsfiddle.net/domenlightenment/njyaP](http://jsfiddle.net/domenlightenment/njyaP)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/njyaP](http://jsfiddle.net/domenlightenment/njyaP)'
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 3.12 Getting & Setting data-* attributes
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.12 获取和设置数据属性*
- en: The *dataset* property of a element node provides an object containing all of
    the attributes of an element that starts with data-*. Because its a simply a JavaScript
    object we can manipulate *dataset* and have the element in the DOM reflect those
    changes
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 元素节点的*dataset*属性提供了一个包含以data-*开头的所有元素属性的对象。因为它只是一个JavaScript对象，我们可以操作*dataset*，并使DOM中的元素反映这些更改。
- en: 'live code: [http://jsfiddle.net/domenlightenment/ystgj](http://jsfiddle.net/domenlightenment/ystgj)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/ystgj](http://jsfiddle.net/domenlightenment/ystgj)'
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*### Notes'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*### 注意事项'
- en: '*dataset* contains camel case versions of data attributes. Meaning *data-foo-foo*
    will be listed as the property *fooFoo* in the dataset *DOMStringMap* object.
    The*-* is replaced by camel casing.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*dataset*包含数据属性的驼峰命名版本。这意味着*data-foo-foo*将在数据集*DOMStringMap*对象的属性*fooFoo*中列出。*-*被驼峰命名替换。'
- en: Removing a data-* attribute from the DOM is as simple using the *delete* operator
    on a property of the *datset* (e.g. *delete dataset.fooFoo*)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在DOM上使用*delete*运算符来删除数据-*属性是非常简单的（例如*delete dataset.fooFoo*）
- en: '*dataset* is not supported in IE9\. A [polyfill](https://github.com/remy/polyfills/blob/master/dataset.js)
    is avaliable. However, you can always just use getAttribute(''data-foo''), removeAttribute(''data-foo''),
    setAttribute(''data-foo''), hasAttribute(''data-foo'').*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*dataset*在IE9中不受支持。有一个[polyfill](https://github.com/remy/polyfills/blob/master/dataset.js)可用。然而，您总是可以使用getAttribute(''data-foo'')，removeAttribute(''data-foo'')，setAttribute(''data-foo'')，hasAttribute(''data-foo'')。'
