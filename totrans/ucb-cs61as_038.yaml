- en: Using Let to Create Local Variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Let 创建局部变量
- en: '**Local variables** are variables that only exist within a local environment.
    Here''s an example:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**局部变量** 是仅存在于局部环境中的变量。这里是一个例子：'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The local environment is the environment created by the function `foo`, and
    the local variable is `a`. Note that `x` is *not* a local variable, even though
    it also cannot be accessed outside of `foo`—it is formally called the parameter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 局部环境是由函数 `foo` 创建的环境，局部变量是 `a`。请注意，`x` *不是* 局部变量，即使它也不能在 `foo` 外部访问—它正式称为参数。
- en: Introduction to `let`
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 `let`
- en: 'The special form `let` is essentially a call to a lambda function, arranged
    differently. For example, take the following lambda function call:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊形式 `let` 本质上是对 lambda 函数的调用，排列不同。例如，看下面的 lambda 函数调用：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is equivalent to the following let statement:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于以下 let 语句：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When will this ever be useful? Two words: local variables. Rarely will we use
    a `let` statement to simply call a lambda function. Instead, we use it create
    local variables inside of a function.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这什么时候会有用呢？两个词：局部变量。我们很少会使用 `let` 语句来简单地调用 lambda 函数。相反，我们使用它在函数内部创建局部变量。
- en: 'An Example: Polynomials'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个例子：多项式
- en: 'Let''s say we want to use Racket to compute the following polynomial with any
    given *x* and *y*:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要使用 Racket 计算给定 *x* 和 *y* 的以下多项式：
- en: '[mathjax]f(x,y) = x(1+xy)^2 + y (1-y) + (1+xy)(1-y)[/mathjax]'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[mathjax]f(x,y) = x(1+xy)^2 + y (1-y) + (1+xy)(1-y)[/mathjax]'
- en: 'Rewriting this ugly polynomial as an ugly procedure:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个丑陋的多项式重写为一个丑陋的过程：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Yuck. Instead, we could use some substitution:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 呸。相反，我们可以使用一些替代：
- en: '[mathjax]\displaystyle a = 1 + xy[/mathjax]'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[mathjax]\displaystyle a = 1 + xy[/mathjax]'
- en: '[mathjax]\displaystyle b = 1 -y[/mathjax]'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[mathjax]\displaystyle b = 1 -y[/mathjax]'
- en: 'So that we get:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以便我们得到：
- en: '[mathjax]\displaystyle f(x,y) = xa^2 + yb + ab[/mathjax]'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[mathjax]\displaystyle f(x,y) = xa^2 + yb + ab[/mathjax]'
- en: 'Okay, I guess that''s better. Writing this in Racket, we will define a helper
    function called `f-helper` so that we can use substitution:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我想这样更好。在 Racket 中编写这个，我们将定义一个名为 `f-helper` 的辅助函数，以便我们可以进行替换：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Take a minute to confirm that this does the same thing as the earlier definition
    of `f`. As we learned in the previous section, we don''t really need an extra
    function definition inside `f`. Instead, we can use a lambda:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 花一分钟确认这是否与之前对 `f` 的定义做的事情相同。正如我们在前一节中学到的，我们实际上不需要在 `f` 中再定义一个额外的函数。相反，我们可以使用
    lambda：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Sadly, even after all this substitution and reorganizing, it's still a bit messy.
    This is where `let` comes in!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，即使经过所有这些替换和重新组织，它仍然有点混乱。这就是 `let` 的用武之地！
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, we get a more readable version of our initial polynomial function `f`.
    We can clearly see that we're assigning a value to `a` and `b`, then plugging
    it into the body of the `let` statement.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们得到了一个更易读的初始多项式函数 `f` 版本。我们清楚地看到我们正在给 `a` 和 `b` 赋值，然后将其插入到 `let` 语句的主体中。
- en: '`let`: General Form'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`let`：一般形式'
- en: The general structure of a let statement is
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: let 语句的一般结构是
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remember, underneath, this is nothing more than a lambda call. The above structure
    is equivalent to
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在底层，这只不过是一个 lambda 调用。上面的结构等同于
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Try out these expressions (and more!) in the Racket interpreter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Racket 解释器中尝试这些表达式（以及更多！）。
- en: '(Note: A semicolon denotes a comment. Racket will ignore the rest of the line
    after a semicolon.)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: （注意：分号表示注释。Racket 将忽略分号后的行的其余部分。）
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
