["```\n((application? exp)\n (apply (actual-value (operator exp) env)\n        (operands exp)\n        env)) \n```", "```\n(define (actual-value exp env)\n  (force-it (eval exp env))) \n```", "```\n(define (apply procedure arguments env)\n  (cond ((primitive-procedure? procedure)\n         (apply-primitive-procedure\n          procedure\n          (list-of-arg-values arguments env)))  ; changed\n        ((compound-procedure? procedure)\n         (eval-sequence\n          (procedure-body procedure)\n          (extend-environment\n           (procedure-parameters procedure)\n           (list-of-delayed-args arguments env) ; changed\n           (procedure-environment procedure))))\n        (else\n         (error\n          \"Unknown procedure type -- APPLY\" procedure)))) \n```", "```\n(define (list-of-arg-values exps env)\n  (if (no-operands? exps)\n      '()\n      (cons (actual-value (first-operand exps) env)\n            (list-of-arg-values (rest-operands exps)\n                                env))))\n(define (list-of-delayed-args exps env)\n  (if (no-operands? exps)\n      '()\n      (cons (delay-it (first-operand exps) env)\n            (list-of-delayed-args (rest-operands exps)\n                                  env)))) \n```", "```\n(define (eval-if exp env)\n  (if (true? (actual-value (if-predicate exp) env))\n      (eval (if-consequent exp) env)\n      (eval (if-alternative exp) env))) \n```", "```\n(define input-prompt \";;; L-Eval input:\")\n(define output-prompt \";;; L-Eval value:\")\n(define (driver-loop)\n  (prompt-for-input input-prompt)\n  (let ((input (read)))\n    (let ((output\n           (actual-value input the-global-environment)))\n      (announce-output output-prompt)\n      (user-print output)))\n  (driver-loop)) \n```", "```\n(define the-global-environment (setup-environment))\n(driver-loop)\n;;; L-Eval input:\n(define (try a b)\n  (if (= a 0) 1 b))\n;;; L-Eval value:\nok\n;;; L-Eval input:\n(try 0 (/ 1 0))\n;;; L-Eval value:\n1 \n```", "```\n(define (force-it obj)\n  (if (thunk? obj)\n      (actual-value (thunk-exp obj) (thunk-env obj))\n      obj)) \n```", "```\n(define (delay-it exp env)\n  (list 'thunk exp env))\n\n(define (thunk? obj)\n  (tagged-list? obj 'thunk))\n\n(define (thunk-exp thunk) (cadr thunk))\n\n(define (thunk-env thunk) (caddr thunk)) \n```", "```\n(define (evaluated-thunk? obj)\n  (tagged-list? obj 'evaluated-thunk))\n\n(define (thunk-value evaluated-thunk)\n  (cadr evaluated-thunk))\n(define (force-it obj)\n  (cond ((thunk? obj)\n         (let ((result (actual-value\n                        (thunk-exp obj)\n                        (thunk-env obj))))\n           (set-car! obj 'evaluated-thunk)\n           (set-car! (cdr obj) result)  ; replace exp with its value\n           (set-cdr! (cdr obj) '())     ; forget unneeded env\n           result))\n        ((evaluated-thunk? obj)\n         (thunk-value obj))\n        (else obj))) \n```"]