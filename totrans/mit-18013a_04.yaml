- en: 'Chapter 3: Vectors, Dot Products, Matrix Multiplication and Distance'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We here introduce vectors and matrices and the notion of dot product and matrix
    multiplication. We notice that the dot product is invariant under coordinate rotations,
    define linear dependence, and describe polar coordinates and their generalizations
    to three dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 3.1  [Vectors](section01.html)
  prefs: []
  type: TYPE_NORMAL
- en: 3.2  [Rotating Coordinates in an Euclidean Space](section02.html)
  prefs: []
  type: TYPE_NORMAL
- en: 3.3  [The Dot Product](section03.html)
  prefs: []
  type: TYPE_NORMAL
- en: 3.4  [Matrix Multiplication](section04.html)
  prefs: []
  type: TYPE_NORMAL
- en: 3.5  [Linear Dependence and Independence](section05.html)
  prefs: []
  type: TYPE_NORMAL
- en: 3.6  [Polar Coordinates](section06.html)
  prefs: []
  type: TYPE_NORMAL
- en: 3.7  [Cylindric and Spherical Coordinates](section07.html)
  prefs: []
  type: TYPE_NORMAL
- en: 3.8  [Digression on Length and Distance in Vector Spaces](section08.html)
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Vectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will call a sequence of numbers of length k **a k-vector.**
  prefs: []
  type: TYPE_NORMAL
- en: We define **addition and subtraction among k-vectors to be termwise addition
    and subtraction, so that for 2-vectors we have**
  prefs: []
  type: TYPE_NORMAL
- en: '**(a, b) + (c, d) = (a + c, b + d)**'
  prefs: []
  type: TYPE_NORMAL
- en: If we choose an origin O in the Euclidean plane we can describe **any point
    in the plane by a vector whose first component is the x coordinate of the point
    and second is the y component, that is, by (x, y), a 2-vector.**
  prefs: []
  type: TYPE_NORMAL
- en: We call the vector with i-th component value = 1 and the rest 0 the basis vector
    in the i-th direction. In ordinary three dimensional space the basis vectors in
    the x, y and z directions are denoted as **i**, **j** and **k** respectively.
    The vector (x, y, z) can also be written as x**i** + y**j** + z**k**.
  prefs: []
  type: TYPE_NORMAL
- en: '**We assume here that basis vectors are perpendicular to one another, and each
    has unit length.**'
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Rotating Coordinates in a Euclidean Space
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**If we rotate basis vectors i'' and j'' by angle ![](../Images/df2942d844a000a508d2690b277f2e01.jpg)
    from i and j, (so that the i'' direction rotates toward j)** the components of
    a fixed vector **v** change as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: v[i] becomes
  prefs: []
  type: TYPE_NORMAL
- en: v[i]' = v[i] cos![](../Images/99b450c47d0816e8df048c6d94c386ee.jpg) +� v[j]
    sin![](../Images/99b450c47d0816e8df048c6d94c386ee.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: and v[j] becomes
  prefs: []
  type: TYPE_NORMAL
- en: v[j]' = - v[i] sin![](../Images/99b450c47d0816e8df048c6d94c386ee.jpg) + v[j]
    cos![](../Images/99b450c47d0816e8df048c6d94c386ee.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: These effects are illustrated in the accompanying applet. You can move the vectors
    and also rotate the basis.
  prefs: []
  type: TYPE_NORMAL
- en: <applet code="RotatingCoordinates" codebase="../applets/" archive="rotatingCoordinates.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 The Dot Product
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Given two vectors **v** and **w** whose components are elements of R, with
    the same number of components, we define their **dot product,** written as **v![](../Images/aaf843a818e698b2dfcaa19d6c9f7dfd.jpg)w
    or (v, w)** as **the sum of the products of corresponding components: *![](../Images/f1de0f8ab24e0a9e14a4e54be3ce8349.jpg).***'
  prefs: []
  type: TYPE_NORMAL
- en: '**Obvious facts:** the dot product is linear in **v** and in **w** and is symmetric
    between them.'
  prefs: []
  type: TYPE_NORMAL
- en: We define the **length of v** to be the positive square root of **(v, v);**
    the **length of v** is usually denoted by **|v|**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Wonderful Fact: the dot product is invariant under rotation of coordinates.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises 3.1 Prove this statement.** [Solution](exercise01.html)'
  prefs: []
  type: TYPE_NORMAL
- en: As a consequence of this fact, in evaluating **v![](../Images/aaf843a818e698b2dfcaa19d6c9f7dfd.jpg)w**,
    we can rotate coordinates so that the first basis vector is in the direction of
    **v** and the second one is perpendicular to it in the plane of **v** and **w**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Then v will have first two coordinates (|v|, 0) and if the angle between
    v and w is ![](../Images/df2942d844a000a508d2690b277f2e01.jpg), w will �have (|w|cos![](../Images/df2942d844a000a508d2690b277f2e01.jpg),
    |w|sin![](../Images/df2942d844a000a508d2690b277f2e01.jpg)) as its similarly defined
    coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: The dot product v****![](../Images/aaf843a818e698b2dfcaa19d6c9f7dfd.jpg)w**
    therefore is **|v||w| cos![](../Images/df2942d844a000a508d2690b277f2e01.jpg),**
    in this coordinate system (that is, with these basis vectors), and hence in any
    coordinate system obtained by rotations from it.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that **the dot product is linear in each of its arguments** is extremely
    important and valuable. It means that you can apply **the distributive law** in
    either argument to express the dot product of a sum or difference as the sum or
    difference of the dot products.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Example**](../chapter03/example01.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises 3.2 Express the square of the area of a� parallelogram with sides
    v and w in terms of dot products.** [Solution](exercise02.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The dot product of **v** and **w** divided by the magnitude of **w**, which
    is **|v|cos![](../Images/df2942d844a000a508d2690b277f2e01.jpg)**, is called **the
    component of v in the direction of w.**
  prefs: []
  type: TYPE_NORMAL
- en: The vector in the **w** direction having magnitude and sign of |**v**|**cos![](../Images/df2942d844a000a508d2690b277f2e01.jpg)**
    is called **the projection of v on w.**
  prefs: []
  type: TYPE_NORMAL
- en: The vector obtained by subtracting the projection of **v** on **w** from **v**
    is called **the projection of v perpendicular to w** or normal to **w**. (By definition
    this projection has zero component in the direction of **w**, and is therefore
    normal to **w**.)
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**3.3 Express the square of the component of v in the direction of w in terms
    of dot products.** [Solution](exercise03.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**3.4 Express the component of v perpendicular to w in terms of dot products.**
    [Solution](exercise04.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**3.5 Write out (v - w)****![](../Images/aaf843a818e698b2dfcaa19d6c9f7dfd.jpg)(v
    - w) using the linearity of the dot product in each of its arguments. What famous
    law does this establish?** [Solution](exercise05.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**3.6 Express the projection of v on w in terms of dot products and the vector
    w.** [Solution](exercise06.html)'
  prefs: []
  type: TYPE_NORMAL
- en: <applet code="OperationsOnVectors" codebase="../applets/" archive="operationsOnVectors.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
  prefs: []
  type: TYPE_NORMAL
- en: 3.4 Matrix Multiplication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A rectangular array of numbers, say n by m, is called a **matrix. The i-j-th
    element of the matrix A is the element in the i-th row and j-th column, and is
    denoted as A[ij].**
  prefs: []
  type: TYPE_NORMAL
- en: Here are examples of matrices one two by two and the other two by three
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1fe933bae20e6ed690f3d2889bedb00e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/8ea8959f2e8b808e463b646ebf4424f9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If matrix A has the same number of columns as B has rows, we define **the product
    matrix, AB to be the matrix whose elements are dot products between the rows of
    A and the columns of B. The element obtained by taking the dot product of the
    i-th row of A and the j-th column of B is described as (AB)[ij].** See also [Section
    32.2](../chapter32/section02.html) for a fuller discussion of matrices and their
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**3.7 Find the product of the two matrices above.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**3.8 Build a spreadsheet that multiplies 4 by 4 matrices.** [Solution](exercise08.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**3.9 In exercise 3.8:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Where is the matrix product AB?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. What appears in columns p, q, r and s in the first four rows?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you change any of the entries in A or B the product will change automatically,
    so you have built an 4 by 4 matrix automatic product finder.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Can you use this to find the product of a 2 by 3 matrix and a 3 by 4
    one? How?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**4\. Find the tenth power of a matrix A using your product finder. (Hint:
    use it for A and for B and look in the right place and you have it.)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**A vector v can be written either as a matrix consisting of a single row,
    or of a single column.** When writing it as a column we will write |**v**> ; as
    a row, <**v**|. The square of the length of **v** can then be written as the matrix
    product <**v**||**v**>.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A vector v is an eigenvector of a matrix M when Mv is a multiple of v. The
    multiple is called the eigenvalue of M having eigenvector v. If the eigenvalue
    is s, then we have Mv = sv.**'
  prefs: []
  type: TYPE_NORMAL
- en: The applet here allows you to enter any 2 by 2 matrix, and move the vector **v**
    around. When M**v** lines up with **v**, **v** is an eigenvector of M with real
    eigenvalue which is given by the ratio of the length of M**v** (called **v'**
    in the applet) to that of **v**, with a sign that is positive when they point
    in the same direction.
  prefs: []
  type: TYPE_NORMAL
- en: <applet code="MultiplicationVectorByMatrix" codebase="../applets/" archive="multiplicationVectorByMatrix.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise** **3.10 Choose a symmetric matrix and use the applet to determine
    the two eigenvectors, approximately. Draw them on a piece of paper. Can you notice
    something about them? What?**'
  prefs: []
  type: TYPE_NORMAL
- en: 3.5 Linear Dependence and Independence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**A linear dependency** among vectors v(1) to v(k) is an equation, ![](../Images/96e1fc5891276f1059a83d43d1d209d2.jpg)
    in which some of the c''s ar not 0\. A set of vectors is said to be **linearly
    independent** if there is no linear dependence among them, and **linearly dependent**
    if there is one or more linear dependence.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example: suppose v(1) = i + j; v(2) =2i; v(3) = 3j.**'
  prefs: []
  type: TYPE_NORMAL
- en: Then v(1), v(2) and v(3) are linearly dependent because there is the relation
  prefs: []
  type: TYPE_NORMAL
- en: 6v(1) = 3v(2) + 2v(3), or 6v(1) - 3v(2) - 2v(3) = 0
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 3.11 Prove: any k + 1 k-vectors are linearly dependent. (You can
    do it by using mathematical induction.) (If you are not familiar with mathematical
    induction read this solution and become familiar with it!)** [Solution](exercise11.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 3.6 Polar Coordinates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**A 2-vector (x, y) can be described by two numbers that are not coefficients
    in a sum: its length, and the angle its vector makes with the x axis.'
  prefs: []
  type: TYPE_NORMAL
- en: The first of these is usually written as r, the second as ![](../Images/df2942d844a000a508d2690b277f2e01.jpg).**
  prefs: []
  type: TYPE_NORMAL
- en: '**These parameters obey ![](../Images/c2d7ab782441c1a8c9e102705b9a01f5.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: the inverse relations are ![](../Images/e30e7b5c1b28df4638e6fc9a5aba0b1d.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: r and ![](../Images/df2942d844a000a508d2690b277f2e01.jpg) are called polar coordinates.**
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the angle ![](../Images/99b450c47d0816e8df048c6d94c386ee.jpg) in
    polar coordinates is a bit tricky; the obvious thing to try is atan(y, x) but
    that is defined only between ![](../Images/d6d5d202cb3530076d261868d7a91172.jpg)and
    ![](../Images/572dac74550f306b13504d610d4887ab.jpg), while ![](../Images/99b450c47d0816e8df048c6d94c386ee.jpg)
    has a domain of size 2![](../Images/cf331488f507fd544e36ee765a48e09b.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is something that works: ![](../Images/90b08785bf739657bb2ff807e795421e.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: This gives theta in the range -![](../Images/cf331488f507fd544e36ee765a48e09b.jpg)
    to ![](../Images/cf331488f507fd544e36ee765a48e09b.jpg). If you want it to have
    range 0 to 2![](../Images/cf331488f507fd544e36ee765a48e09b.jpg) you can add if(y
    < 0,8 * atan(1), 0) to it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6bbdf0ef5de2859a427cb55db463a3d8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 3.7 Cylindrical and Spherical Coordinates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**In three dimensions there are two analogues of polar coordinates.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**In cylindric coordinates, x and y are described by r and ![](../Images/df2942d844a000a508d2690b277f2e01.jpg)**
    exactly as in two dimensions, while the third dimension, z is treated as an ordinary
    coordinate.'
  prefs: []
  type: TYPE_NORMAL
- en: '**r then represents distance from the z axis.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**In spherical coordinates,** a general point is described by two angles and
    one radial variable, ![](../Images/bf090083cff29bc4d7d16ae5d57a1db2.jpg), which
    represents distance to the origin: ![](../Images/8c7612c876052508330f616f9961d90c.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: The two angular variables are related to **longitude and latitude,** but **latitude
    is zero at the equator, and the variable ![](../Images/22fea489d4a662d233f2f71c123c6d40.jpg)
    that we use is 0 on the z axis (which means at the north pole).**
  prefs: []
  type: TYPE_NORMAL
- en: We define ![](../Images/3b4204ec9d9c32df1e14fffa2619afc9.jpg), so that with
    r defined as always here by ![](../Images/376aa59233a59225744dd55e1232de41.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: The longitude angle ![](../Images/99b450c47d0816e8df048c6d94c386ee.jpg) is defined
    by ![](../Images/af2cd9486a0a11439c0bec7d035fa1bb.jpg)**, exactly as in two dimensions.**
    We therefore have ![](../Images/cb5417d290173c1727609b0a408ce6e0.jpg)**, and what
    is y?**
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**3.12 Express the parameters of cylindric and spherical coordinates in terms
    of x, y and z.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**3.13 Construct a spreadsheet converter which takes coordinates x, y and z
    and produces the three parameters of spherical coordinates; and vice versa. Verify
    that they work by substituting the result from one as input into the other.**'
  prefs: []
  type: TYPE_NORMAL
- en: 3.8 �Digression on Length and Distance in Vector Spaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The distance between two vectors **v** and **w** is the length of the difference
    vector **v - w.**
  prefs: []
  type: TYPE_NORMAL
- en: There are many different distance functions that you will encounter in the world.
    We here use "Euclidean Distance" in which we have the Pythagorean theorem.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the concepts of distance and length are used without additional description
    this is what we will� mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The square of the length of a vector w is the sum of the squares (or more
    generally the sum of the absolute values of the squares, when the components are
    complex numbers) of its components. It is the dot product (w, w) or w![](../Images/aaf843a818e698b2dfcaa19d6c9f7dfd.jpg)w).**'
  prefs: []
  type: TYPE_NORMAL
- en: But that is not the only concept of distance you will encounter in life.
  prefs: []
  type: TYPE_NORMAL
- en: What properties should the length of a vector have?
  prefs: []
  type: TYPE_NORMAL
- en: 'The traditional requirements are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It should be positive, and zero for the zero vector.
  prefs: []
  type: TYPE_NORMAL
- en: 'It should obey the triangle inequality: the length of the sum of two vectors
    is no greater than the sum of their lengths.'
  prefs: []
  type: TYPE_NORMAL
- en: It is nice if length 0 means that the vector is the (0) vector.
  prefs: []
  type: TYPE_NORMAL
- en: '**What other concepts of length or distance are around?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Manhattan distance:** the length of a vector is the sum of the absolute values
    of its components.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hamming distance:** length is number of non-zero components.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Maximum component distance:** length is Maximum component absolute value.'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we call the components x[i], and a small quantity of� any of them dx[i],
    and the resulting value of distance with components dx[i] let us call ds.
  prefs: []
  type: TYPE_NORMAL
- en: Then in **Euclidean space** we have **![](../Images/2c983011126e486c3e973829e2de095c.jpg).**We
    define the metric **![](../Images/4c2b441f5b049830efd2db561349d5f4.jpg).**
  prefs: []
  type: TYPE_NORMAL
- en: Euclidean space can then be described as **L[2].**
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 3.14 Which values of j in the definition of L[j] correspond to Hamming,
    Manhattan, and Maximum component size? (Hints: j can be infinite; also for Hamming
    distance the notions are similar but not exactly the same, and only similar in
    a limit.)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Length in Euclidean space when non-rectilinear coordinates are used:**'
  prefs: []
  type: TYPE_NORMAL
- en: When you describe ordinary vectors in Euclidean space by their polar coordinates,
    then these do not obey the linear properties of ordinary rectangular coordinates.
    For example, the length of the sum of two vectors is not the sum of their lengths,
    and the angle made with the x axis of a sum is not the sum of the angles of the
    summands.
  prefs: []
  type: TYPE_NORMAL
- en: We can ask, what is the length of a small vector, whose endpoints differ by
    r coordinate dr and by angle d![](../Images/99b450c47d0816e8df048c6d94c386ee.jpg)
    ?
  prefs: []
  type: TYPE_NORMAL
- en: If we are at a specific point with given coordinates, the r direction is the
    direction pointing away from the origin toward it, and distance in this direction
    is measured just as in the x or y direction. The length of a vector in this direction
    with coordinate dr is |dr|.
  prefs: []
  type: TYPE_NORMAL
- en: The ![](../Images/99b450c47d0816e8df048c6d94c386ee.jpg) direction is perpendicular
    to the r direction, increasing in the counterclockwise direction, but distance
    is not d![](../Images/99b450c47d0816e8df048c6d94c386ee.jpg). The distance around
    a circle is proportional to the radius of the circle, and distance in the angular
    direction in consequence is proportional to r as well.
  prefs: []
  type: TYPE_NORMAL
- en: The result is that distance in polar coordinates is measured by
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5c80232b1e224d053468119d7ad8055b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Length in non-orthonal coordinates:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any k linearly independent k-vectors may be used as a basis: **any other k-vector
    can be expressed as a linear combination of them. (Why? By exercise 3.11 any other
    k-vector is in a linear dependence with them which can be solved for that k-vector
    in terms of the basis.)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, in two dimensions, for example, any two vectors **a** and **b** with
    different directions can form a basis and any vector **v** can be described by
    coordinates that are the coefficients of these two: if **v** = s **a** + t **b**
    then we can describe **v** by the 2-vector (s, t).'
  prefs: []
  type: TYPE_NORMAL
- en: However, if� we are describing Euclidean space and the vectors **a** and **b**
    are not orthogonal� the length of **v** squared will not be s² + t². In general
    though, if we define (s, t) to be **v'**, we get length squared� is <v'|G|v'>
    for some matrix G which depends on the angle between **a** and **b**.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, if **a** and **b** are unit vectors at angle ![](../Images/99b450c47d0816e8df048c6d94c386ee.jpg)
    the matrix G is
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0c876056598a652d9715068cac5175af.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The matrix G is called the metric tensor for the given basis.
  prefs: []
  type: TYPE_NORMAL
- en: '**Different metrics: Minkowski space:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are even vector spaces in which the concept of distance is replaced by
    something that can be positive or imaginary: such is Minkowski space: it has four
    dimensions, three spatial and also time. In it the analog of distance is described
    by��'
  prefs: []
  type: TYPE_NORMAL
- en: ds² = dx² + dy² + dz² �c²dt²
  prefs: []
  type: TYPE_NORMAL
- en: Vectors with s² positive or negative are said to be space-like or time-like
    respectively; those with s² = 0 are said to lie on the "light cone".
  prefs: []
  type: TYPE_NORMAL
- en: '**Why does anyone bother with such things**?'
  prefs: []
  type: TYPE_NORMAL
- en: Linear changes in the coordinates in Euclidean space that have the property
    that they do not alter distances (so that the distance between two points remains
    after the changes exactly what it was before), are rotations in space. Similar
    changes in Minkowski space are symmetries of Maxwell's equations of electrodynamics,
    and correspond to both rotations in space and "Lorentz transformations". Thus
    even this last concept has important physical application. All the others do as
    well, in appropriate contexts.
  prefs: []
  type: TYPE_NORMAL
