["```\n\n    Congratulations: We've made it to the end! \n\n# Looking Back\n\n    We've covered a lot of ground.  Here's a quick review...  \n\n*   *Functional programming*: \n\n    *   \"declarative\" programming style (recursion over persistent data structures, rather than looping over mutable arrays or pointer structures)\n\n    *   higher-order functions\n\n    *   polymorphism\n\n*   *Logic*, the mathematical basis for software engineering: \n\n    ```", "```\n\n    *   inductively defined sets and relations\n\n    *   inductive proofs\n\n    *   proof objects\n\n*   *Coq*, an industrial-strength proof assistant \n\n    *   functional core language\n\n    *   core tactics\n\n    *   automation\n\n*   *Foundations of programming languages* \n\n    *   notations and definitional techniques for precisely specifying \n\n        *   abstract syntax\n\n        *   operational semantics \n\n            *   big-step style\n\n            *   small-step style\n\n        *   type systems \n\n    *   program equivalence \n\n    *   Hoare logic \n\n    *   fundamental metatheory of type systems \n\n        *   progress and preservation \n\n    *   theory of subtyping\n\n```", "```\n\n# Looking Forward\n\n    Some good places to learn more...\n\n*   This book includes several optional chapters covering topics that you may find useful. Take a look at the [table of contents](toc.html) and the [chapter dependency diagram](deps.html) to find them. \n\n*   Cutting-edge conferences on programming languages and formal verification: \n\n    *   Principles of Programming Langauges (POPL)\n\n    *   Programming Language Design and Implementation (PLDI)\n\n    *   SPLASH/OOPSLA\n\n    *   International Conference on Functional Programming (ICFP)\n\n    *   Computer Aided Verification (CAV)\n\n    *   Interactive Theorem Proving (ITP)\n\n    *   Principles in Practice workshop (PiP)\n\n    *   CoqPL workshop \n\n*   More on functional programming \n\n    *   Learn You a Haskell for Great Good, by Miran Lipovaca [[Lipovaca 2011]](Bib.html#Lipovaca 2011).\n\n    *   Real World Haskell, by Bryan O'Sullivan, John Goerzen, and Don Stewart [[O'Sullivan 2008]](Bib.html#O'Sullivan 2008)\n\n    *   ...and many other excellent books on Haskell, OCaml, Scheme, Racket, Scala, F sharp, etc., etc. \n\n*   More on Hoare logic and program verification \n\n    *   The Formal Semantics of Programming Languages: An Introduction, by Glynn Winskel [[Winskel 1993]](Bib.html#Winskel 1993).\n\n    *   Many practical verification tools, e.g. Microsoft's Boogie system, Java Extended Static Checking, etc. \n\n*   More on the foundations of programming languages: \n\n    *   Concrete Semantics with Isabelle/HOL, by Tobias Nipkow and Gerwin Klein [[Nipkow 2014]](Bib.html#Nipkow 2014)\n\n    *   Types and Programming Languages, by Benjamin C. Pierce [[Pierce 2002]](Bib.html#Pierce 2002).\n\n    *   Practical Foundations for Programming Languages, by Robert Harper [[Harper 2016]](Bib.html#Harper 2016).\n\n    *   Foundations for Programming Languages, by John C. Mitchell [[Mitchell 1996]](Bib.html#Mitchell 1996). \n\n*   More on Coq: \n\n    *   Verified Functional Algorithms, by Andrew Appel [[Chlipala 2013]](Bib.html#Chlipala 2013).\n\n    *   Certified Programming with Dependent Types, by Adam Chlipala [[Chlipala 2013]](Bib.html#Chlipala 2013).\n\n    *   Interactive Theorem Proving and Program Development: Coq'Art: The Calculus of Inductive Constructions, by Yves Bertot and Pierre Casteran [[Bertot 2004]](Bib.html#Bertot 2004).\n\n    *   Iron Lambda (http://iron.ouroborus.net/) is a collection of \u200bCoq formalisations for functional languages of increasing complexity. It fills part of the gap between the end of the\u200b Software Foundations course and what appears in current research papers. The collection has at least Progress and Preservation theorems for a number of variants of STLC and the polymorphic lambda-calculus (System F).\n\n```", "```\n\n```", "```\n\n```"]