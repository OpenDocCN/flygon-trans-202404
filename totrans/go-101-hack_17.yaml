- en: Array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Go`, the length is also a part of array type. So the following code declares
    an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'while "`var slice []int`" defines a slice. Because of this characteristic,
    arrays with the same array element type but different length can''t assign values
    each other. I.E.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The compiler will complain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Changing "`var a1 [2]int`" to "`var a1 [3]int`" will make it work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another caveat you should pay attention to is the following code declares an
    array, not a slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify it by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, since in `Go`, the function argument is passed by "value", so
    if you use an array as a function argument, the function just does the operations
    on the copy of the original copy. Check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: From the log, you can see the array's address in `changeArray` function is not
    the same with array's address in `main` function, so the content of original array
    will definitely not be modified. Furthermore, if the array is very large, copying
    them when passing argument to function may generate more overhead than you want,
    you should know about it.
  prefs: []
  type: TYPE_NORMAL
