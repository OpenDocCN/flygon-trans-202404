- en: Array
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: Array
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'In `Go`, the length is also a part of array type. So the following code declares
    an array:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Go`中，长度也是数组类型的一部分。因此，以下代码声明了一个数组：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'while "`var slice []int`" defines a slice. Because of this characteristic,
    arrays with the same array element type but different length can''t assign values
    each other. I.E.:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当"`var slice []int`"定义一个切片时。由于这个特性，具有相同数组元素类型但不同长度的数组不能相互赋值。即：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The compiler will complain:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器会报错：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Changing "`var a1 [2]int`" to "`var a1 [3]int`" will make it work.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将"`var a1 [2]int`"改为"`var a1 [3]int`"就可以使其正常工作。
- en: 'Another caveat you should pay attention to is the following code declares an
    array, not a slice:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个你应该注意的警告是以下代码声明了一个数组，而不是切片：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can verify it by the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下代码进行验证：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output is:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Additionally, since in `Go`, the function argument is passed by "value", so
    if you use an array as a function argument, the function just does the operations
    on the copy of the original copy. Check the following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，在`Go`中，函数参数是按“值”传递的，所以如果你将数组作为函数参数使用，函数只会对原始副本进行操作。查看以下代码：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output is:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为：
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: From the log, you can see the array's address in `changeArray` function is not
    the same with array's address in `main` function, so the content of original array
    will definitely not be modified. Furthermore, if the array is very large, copying
    them when passing argument to function may generate more overhead than you want,
    you should know about it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从日志中可以看到，在`changeArray`函数中数组的地址与`main`函数中数组的地址不同，因此原始数组的内容肯定不会被修改。此外，如果数组非常大，在将参数传递给函数时复制它们可能会产生比你想要的更多的开销，你应该知道这一点。
