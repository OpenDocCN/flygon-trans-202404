- en: 'Chapter 1: Philosophy, Numbers and Functions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We consider the basic context in which our efforts will be concentrated: the
    realms of numbers and functions. We describe "standard functions" which are those
    that will appear most often in your world, and inverse functions'
  prefs: []
  type: TYPE_NORMAL
- en: Topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1.1  [Philosophy](section01.html)
  prefs: []
  type: TYPE_NORMAL
- en: 1.2  [Numbers](section02.html)
  prefs: []
  type: TYPE_NORMAL
- en: 1.3  [Functions](section03.html)
  prefs: []
  type: TYPE_NORMAL
- en: 1.4  [Standard Functions](section04.html)
  prefs: []
  type: TYPE_NORMAL
- en: 1.5  [Other Functions](section05.html)
  prefs: []
  type: TYPE_NORMAL
- en: 1.6  [Inverse Functions](section06.html)
  prefs: []
  type: TYPE_NORMAL
- en: 1.7  [Implicit Functions](section07.html)
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Philosophy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will not dwell on philosophy but merely list some features we hope to encorporate
    in the course.
  prefs: []
  type: TYPE_NORMAL
- en: '**Philosophy of the Course**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Use computers as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Use spreadsheets.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Encourage active learning rather than passive; try to make you think about
    the material.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Integrate one variable calculus into multivariable calculus so that they
    are treated together rather than one after the other.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Ask you to submit homework electronically via email to me when appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Make you redo homework until it is correct.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Feedback an important part of required activity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Philosophy of Learning**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Amount learned is proportional to time put in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Best way to learn is to figure out ideas yourself or teach them to someone
    else.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Second best is to do so with hints from others like your friends or us.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Third best is to get the ideas from reading; but pause in your reading to
    think about them.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Fourth best: unacceptable: don''t get them at all.'
  prefs: []
  type: TYPE_NORMAL
- en: 6\. The object of� a lecture is not so much to inform you of important facts,
    but rather to stimulate you to try to learn about some concept.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. The object of the course is to empower you to use the concepts of calculus
    in any context.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**We start with the basic concept of a number. The Natural Numbers, denoted
    as N,** are the numbers 1,2,3,... These are closed under Addition.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A set that can be put in** [correspondence](definition01.html) **with N or
    a subset of N is called countable.**'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the notion of subtraction makes us enlarge N to get� the **Integers,
    denoted as Z,** positive or negative or 0, so that our numbers are closed under
    the operation of substraction.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 1.1 Is Z countable?** [Solution](exercise01.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Z is closed under multiplication; which is to say that the product of two integers
    is an integer.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain a set of numbers closed under Division: we must enlarge Z to get
    the **Rational Numbers Q,** which are fractions of the form ![](../Images/07a9bf071fac73cce46767170ea9cd5e.jpg)
    where a is in Z and b is in N.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**1.2 Is Q countable?** (See picture for hint.) [Solution](exercise02.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/741df25d3b57dc5cbe66975e9dba8e67.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**1.3 Prove or disprove: a countable set of countable sets is countable.**
    [Solution](exercise03.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Decimal form of numbers**'
  prefs: []
  type: TYPE_NORMAL
- en: The numbers between 0 and 1 can each be represented as a decimal point followed
    by an infinite string of digits, each digit being one of 1, 2, 3, ..., 9, 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rational numbers repeat themselves endlessly after some point: (for example
    1 / 4 is .250* or also .249* where the star means that you repeat the starred
    digit endlessly) 1 / 3 is .3*, 1 / 7 = .(142857)*, 57 / 100 = .570*.'
  prefs: []
  type: TYPE_NORMAL
- en: Irrational numbers do not do so.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**1.4 Prove that rational numbers repeat the same finite sequence of digits
    endlessly, and that irrational numbers do not.** [Solution](exercise04.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**1.5 Are there non-rational decimal digit sequences?** [Solution](exercise05.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**1.6 Are all such sequences countable?** (See picture for hint.) [Solution](exercise06.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5927803d403b844ae2993696f96c9d3f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**A number which differs from the number in the k-th position on the list in
    its k-th decimal digit, cannot be in any position on the list of numbers!**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Algebraic numbers** are solutions to polynomial equations, with integer coefficients.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 1.7 Are algebraic numbers countable?** [Solution](exercise07.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The **Real Numbers R** are **all distinct infinite sequences of digits, having
    a sign and a finite number of digits in front of the decimal point.**
  prefs: []
  type: TYPE_NORMAL
- en: You can add subtract multiply and divide them except dividing by 0 is not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Are there other sets that we might dignify by calling numbers?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Yes! There are "Numbers mod x". These are remainders of Z or Q or R obtained
    when you divide by x.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**There are also complex numbers, which form the set C. These are expressions
    of the form a + ib where i² = -1, a and b are in R, and multiplication and division
    are as in R with the additional rule above.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Comment - More on Complex Numbers**](comment01.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A **Set** is a primitive notion. We start with set (or another word for it:
    **collection**) as a basic notion.'
  prefs: []
  type: TYPE_NORMAL
- en: An Ordered Countable Set is also called a **sequence.** 1, 2, 3, ... is a sequence.
  prefs: []
  type: TYPE_NORMAL
- en: If it has two elements it is called an **ordered pair.** (3, 4) is such a pair.
  prefs: []
  type: TYPE_NORMAL
- en: A **function** is a collection of ordered pairs whose first elements are all
    different.
  prefs: []
  type: TYPE_NORMAL
- en: The first elements are called **arguments** the second **values.**
  prefs: []
  type: TYPE_NORMAL
- en: The set of arguments is called its **domain.**
  prefs: []
  type: TYPE_NORMAL
- en: The set of values is called its **range.**
  prefs: []
  type: TYPE_NORMAL
- en: We describe each pair in the function f� by **f(argument) = value.**
  prefs: []
  type: TYPE_NORMAL
- en: '**![](../Images/1f5f96dd551bdfa9be58fb4e48900025.jpg)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is perfectly OK for f to have the same value for two different arguments:
    say for f(d) and f(e) to be identical.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can describe a function by listing its pairs, or by drawing a graph of representative
    pairs in the usual way: if **f(a) = b** *put a point at the intersection of the
    vertical line through a on the x axis and the horizontal line through b on the
    y axis*.'
  prefs: []
  type: TYPE_NORMAL
- en: However we cannot list all the pairs in any function having an infinite or huge
    domain.
  prefs: []
  type: TYPE_NORMAL
- en: Instead we define such a function by giving a procedure you can use to construct
    its value for any argument you choose in its domain. This procedure is often called
    a "formula" for the function.
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 Standard Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **standard function** is one defined on an interval of R that is obtained
    by a finite sequence of **standard operations** starting from any combination
    of **three basic functions**.
  prefs: []
  type: TYPE_NORMAL
- en: '**What are the basic functions**?'
  prefs: []
  type: TYPE_NORMAL
- en: '**The identity function f(x) = x**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/60b82fe2a684942f21881e0dbb8f67af.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**The** [exponential function](../chapter02/section01.html) **f(x) = exp(x)**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a00852bf1a6c7f85201e4bce1e20d25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**The** [sine function](../chapter02/section02.html) **f(x) = sin(x)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**![](../Images/8647f623b4575cd7f59f5c867ea9158c.jpg)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**What are the standard operations?**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Multiplication by a number in R, addition, subtraction, multiplication, division,
    substitution of the value of one function as argument of another, and taking the
    "inverse".*'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the functions we encounter will be standard functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples: 4x², x sin(x), ![](../Images/d81d612e77a2121b4d39ed65ffee050b.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: You can enter your favorite standard functions, f and g, in the following applet,
    and observe the effects of combining f and g in various ways, and also look at
    the inverse function to f.
  prefs: []
  type: TYPE_NORMAL
- en: Note that when f has the same value for more than one argument, you must decide
    which of these arguments you want to call the value of the inverse function.
  prefs: []
  type: TYPE_NORMAL
- en: <applet code="OperationsOnFunctions" codebase="../applets/" archive="operationsOnFunctions.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
  prefs: []
  type: TYPE_NORMAL
- en: 1.5 Other Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Are there other functions?**'
  prefs: []
  type: TYPE_NORMAL
- en: Yes but we will mostly be concerned with standard functions.
  prefs: []
  type: TYPE_NORMAL
- en: '**What are the other functions we may meet?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piecewise standard functions:** these are functions that are standard in
    subintervals of their domains but not necessarily the same standard function in
    all of them. The function that is 0 for any negative argument and 1 for positive
    arguments is an example. This is called a step function.'
  prefs: []
  type: TYPE_NORMAL
- en: The absolute value of x, which is -x for negative argument x and +x for positive
    x is another. Its graph looks like a V centered at the origin in x.
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions defined by infinite series:** in particular by a series of powers
    x^n with coefficients that are standard functions of the powers. A simple and
    fundamental example is the geometric series, defined by g(x) = 1 + x + x² + ...
    + x^k + ...'
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions defined using the operations of calculus:** these are typically
    functions defined as derivatives or integrals of standard functions. Such definitions
    can easily be made once those concepts are defined.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A sequence can be considered a function defined with N or a subset of N as
    its domain.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions defined recursively or implicitly:** a recursive definition of
    a function is one that describes it by a procedure for constructing its values
    that requires repeated application in order to define them over its entire domain.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the Fibonacci numbers, f(n) form a sequence according to the following
    rules: f(0) = f(1) = 1; f(n) = f(n - 1) + f(n - 2) for integers n greater than
    1.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a recursive definition of this sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Implicitly defined functions will be discussed in detail in [section 1.7](section07.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions that arise from real phenomena:** these usually start off being
    unknown. They may be anything. It is remarkable how well we can do by treating
    them as if they were standard functions, or as if they were in one of the other
    classes of functions described above.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Why consider standard functions?**'
  prefs: []
  type: TYPE_NORMAL
- en: They are available on calculators and computers.
  prefs: []
  type: TYPE_NORMAL
- en: They have only isolated singularities.
  prefs: []
  type: TYPE_NORMAL
- en: They are infinitely differentiable over most of their domains, except at certain
    singular points which are usually easy to locate.
  prefs: []
  type: TYPE_NORMAL
- en: They can be defined in the complex plane.
  prefs: []
  type: TYPE_NORMAL
- en: They are immensely useful.
  prefs: []
  type: TYPE_NORMAL
- en: We can **add, subtract** or **multiply** any *sequences*, or *functions* that
    are defined on the same domain (whether they are standard or not), and **divide**
    one by another wherever the one divided by is not 0\. To do so, at each argument
    in their domain, add, subtract, multiply or divide their values.
  prefs: []
  type: TYPE_NORMAL
- en: 1.6 Inverse Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What are **inverse functions?**
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a function f: draw its graph in the usual way; interchange x and y axes,
    and you have the graph of the inverse function f ^(-1).'
  prefs: []
  type: TYPE_NORMAL
- en: y = f(x) means x = f ^(-1)(y).
  prefs: []
  type: TYPE_NORMAL
- en: This can be accomplished with a drawing on a piece of paper by turning the paper
    over, orienting so that the old first quadrant appears in the upper right corner,
    and looking through the paper at the old graph.
  prefs: []
  type: TYPE_NORMAL
- en: Do not confuse the inverse with the reciprocal function; they are completely
    different concepts. Careless people may use notation that is the same for both.
    This is a bad thing to do since it promotes confusion.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that if you substitute x = f ^(-1)(y) into y = f(x) you get x = f ^(-1)(f(x)).
    This last equation can be used as an alternate definition of the inverse function
    to f.
  prefs: []
  type: TYPE_NORMAL
- en: There is a problem with defining inverse functions. A function can have only
    one ordered pair for each argument, while the same value can occur many times.
    This means that interchanging arguments and values which is what we do in creating
    an inverse, will create a non-function, unless the original function takes on
    each value exactly once.
  prefs: []
  type: TYPE_NORMAL
- en: When a function takes a value more than once, we have to do extra work to define
    an inverse function for it. Namely, we have to select one of its values to be
    the new argument and throw away the others. This can be done in many different
    ways when f is not single valued, so that there is always some arbitrariness in
    the definition of f^(-1) when f is not single valued.
  prefs: []
  type: TYPE_NORMAL
- en: 'The clearest example for this is the function x². It takes on each positive
    value twice. Both 4 and -4 have the same square. The standard thing to do for
    this function is to define its inverse, x^(1/2), to be the positive square root,
    ignoring the negative one. (The negative square root is then denoted by -x^(1/2).)
    This definition has two virtues: one is that positive numbers are more positive
    than negative ones. The other is, that with this definition (and not had we chosen
    the negative root as inverse) the square root of a product is the product of the
    square roots of its factors.'
  prefs: []
  type: TYPE_NORMAL
- en: In general, you can make the choice of what you want to call the inverse of
    f by looking at the graph of f, selecting a domain on which f is single-valued,
    and making that the range of f ^(-1).
  prefs: []
  type: TYPE_NORMAL
- en: Some interesting pairs:����� ���
  prefs: []
  type: TYPE_NORMAL
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '![](../Images/39ddb231ae27620154e8a099c2b5364c.jpg)                   ![](../Images/053378fb5c692490e406e266d91a0663.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/83b80149068106d026e78eae0341ae46.jpg)                  ![](../Images/c095811b16567767933f452b7f73dc53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Exercises 1.8 For what values can you define the inverse of the function
    cos(sin x). (Hint: set f = cos(sin x) look at its inverse and figure out the answer.)**
    [Solution](exercise08.html)'
  prefs: []
  type: TYPE_NORMAL
- en: <applet code="OperationsOnFunctions" codebase="../applets/" archive="operationsOnFunctions.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
  prefs: []
  type: TYPE_NORMAL
- en: 1.7 Implicit Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An implicit definition of a function is one which does not present an explicit
    formula for its values but rather defines it by giving conditions that it satisfies.
    Thus its values must be inferred as consequences of the definition, so it is defined
    "by implication".
  prefs: []
  type: TYPE_NORMAL
- en: 'An example is: define y(x) by x² + y² =1 and y > 0.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a function as the inverse is another example of an implicit definition.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that you can produce a formula for y(x) in the example here; that formula
    represents an explicit definition of this same function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**1.9 How much of this was familiar to you?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**1.10 The statement cos x is ![](../Images/11483568453085185de1d28fdaaedb24.jpg)implies
    what about arccos y and arcsin y?** [Solution](exercise10.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**1.11 Invent a problem to go here.**'
  prefs: []
  type: TYPE_NORMAL
