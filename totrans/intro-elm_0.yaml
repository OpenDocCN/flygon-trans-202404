- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Introduction to Elm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Elm is a functional language that compiles to JavaScript.** It competes with
    projects like React as a tool for creating websites and web apps. Elm has a very
    strong emphasis on simplicity, ease-of-use, and quality tooling.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This guide will:'
  prefs: []
  type: TYPE_NORMAL
- en: Teach you the fundamentals of programming in Elm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show you how to make interactive apps with *The Elm Architecture*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emphasize the principles and patterns that generalize to programming in any
    language.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end I hope you will not only be able to create great web apps in Elm,
    but also understand the core ideas and patterns that make Elm nice to use.
  prefs: []
  type: TYPE_NORMAL
- en: If you are on the fence, I can safely guarantee that if you give Elm a shot
    and actually make a project in it, you will end up writing better JavaScript and
    React code. The ideas transfer pretty easily!
  prefs: []
  type: TYPE_NORMAL
- en: A Quick Sample
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course *I* think Elm is good, so look for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is [a simple counter](http://elm-lang.org/examples/buttons). If you look
    at the code, it just lets you increment and decrement the counter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `update` and `view` are entirely decoupled. You describe your
    HTML in a declarative way and Elm takes care of messing with the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Why a *functional* language?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Forget what you have heard about functional programming. Fancy words, weird
    ideas, bad tooling. Barf. Elm is about:'
  prefs: []
  type: TYPE_NORMAL
- en: No runtime errors in practice. No `null`. No `undefined` is not a function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Friendly error messages that help you add features more quickly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well-architected code that *stays* well-architected as your app grows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically enforced semantic versioning for all Elm packages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No combination of JS libraries can ever give you this, yet it is all free and
    easy in Elm. Now these nice things are *only* possible because Elm builds upon
    40+ years of work on typed functional languages. So Elm is a functional language
    because the practical benefits are worth the couple hours you'll spend reading
    this guide.
  prefs: []
  type: TYPE_NORMAL
- en: I have put a huge emphasis on making Elm easy to learn and use, so all I ask
    is that you give Elm a shot and see what you think. I hope you will be pleasantly
    surprised!
  prefs: []
  type: TYPE_NORMAL
