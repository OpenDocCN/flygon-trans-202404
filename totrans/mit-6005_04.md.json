["```\npublic static int dayOfYear(int month, int dayOfMonth, int year) {\n    if (month == 2) {\n        dayOfMonth += 31;\n    } else if (month == 3) {\n        dayOfMonth += 59;\n    } else if (month == 4) {\n        dayOfMonth += 90;\n    } else if (month == 5) {\n        dayOfMonth += 31 + 28 + 31 + 30;\n    } else if (month == 6) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31;\n    } else if (month == 7) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30;\n    } else if (month == 8) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31;\n    } else if (month == 9) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31;\n    } else if (month == 10) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30;\n    } else if (month == 11) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31;\n    } else if (month == 12) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 31;\n    }\n    return dayOfMonth;\n}\n```", "```\n/**\n * Compute the hailstone sequence.\n * See http://en.wikipedia.org/wiki/Collatz_conjecture#Statement_of_the_problem\n * @param n starting number of sequence; requires n > 0.\n * @return the hailstone sequence starting at n and ending with 1.\n *         For example, hailstone(3)=[3,10,5,16,8,4,2,1].\n */\npublic static List<Integer> hailstoneSequence(int n) {\n    ...\n}\n```", "```\n// read a web page into a string\n// see http://stackoverflow.com/questions/4328711/read-url-to-string-in-few-lines-of-java-code\nString mitHomepage = new Scanner(new URL(\"http://www.mit.edu\").openStream(), \"UTF-8\").useDelimiter(\"\\\\A\").next();\n```", "```\nwhile (n != 1) { // test whether n is 1   (don't write comments like this!)\n   ++i; // increment i\n   l.add(n); // add n to l\n}\n```", "```\nsendMessage(\"as you wish\"); // this basically says \"I love you\"\n```", "```\n/** @param month month of the year, where January=1 and December=12  [C1] */\npublic static int dayOfYear(int month, int dayOfMonth, int year) {\n    if (month == 2) {      // we're in February  [C2]\n        dayOfMonth += 31;  // add in the days of January that already passed  [C3]\n    } else if (month == 3) {\n        dayOfMonth += 59;  // month is 3 here  [C4]\n    } else if (month == 4) {\n        dayOfMonth += 90;\n    }\n    ...\n    } else if (month == 12) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 31;\n    }\n    return dayOfMonth; // the answer  [C5]\n}\n```", "```\npublic static int dayOfYear(int month, int dayOfMonth, int year) {\n    if (month == 2) {\n        dayOfMonth += 31;\n    } else if (month == 3) {\n        dayOfMonth += 59;\n    } else if (month == 4) {\n        dayOfMonth += 90;\n    } else if (month == 5) {\n        dayOfMonth += 31 + 28 + 31 + 30;\n    } else if (month == 6) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31;\n    } else if (month == 7) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30;\n    } else if (month == 8) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31;\n    } else if (month == 9) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31;\n    } else if (month == 10) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30;\n    } else if (month == 11) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31;\n    } else if (month == 12) {\n        dayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 31;\n    }\n    return dayOfMonth;\n}\n```", "```\ndayOfYear(2, 9, 2019)\n```", "```\ndayOfYear(1, 9, 2019)\n```", "```\ndayOfYear(9, 2, 2019)\n```", "```\ndayOfYear(\"February\", 9, 2019)\n```", "```\ndayOfYear(2019, 2, 9)\n```", "```\ndayOfYear(2, 2019, 9)\n```", "```\npublic static int dayOfYear(String month, int dayOfMonth, int year) { \n    ... \n}\n```", "```\npublic static int dayOfYear(int month, int dayOfMonth, int year) {\n    if (month < 1 || month > 12) {\n        return -1;\n    }\n    ...\n}\n```", "```\npublic static int dayOfYear(int month, int dayOfMonth, int year) {\n    if (month < 1 || month > 12) {\n        throw new IllegalArgumentException();\n    }\n    ...\n}\n```", "```\npublic enum Month { JANUARY, FEBRUARY, MARCH, ..., DECEMBER };\npublic static int dayOfYear(Month month, int dayOfMonth, int year) {\n    ...\n}\n```", "```\npublic static int dayOfYear(int month, int dayOfMonth, int year) {\n    if (month == 1) {\n        ...\n    } else if (month == 2) {\n        ...\n    }\n    ...\n    } else if (month == 12) {\n        ...\n    } else {\n        throw new IllegalArgumentException(\"month out of range\");\n    }\n}\n```", "```\nif (month == 2) { ... }\n```", "```\nturtle.rotate(3);\n```", "```\nfor (int i = 0; i < 5; ++i) {\n    turtle.forward(36);\n    turtle.turn(72);\n}\n```", "```\nfinal int five = 5;\nfinal int thirtySix = 36;\nfinal int seventyTwo = 72;\nfor (int i = 0; i < five; ++i) {\n    turtle.forward(thirtySix);\n    turtle.turn(seventyTwo);\n}\n```", "```\nint[] numbers = new int[] { 5, 36, 72 }; \nfor (int i = 0; i < numbers[0]; ++i) {\n    turtle.forward(numbers[1]);\n    turtle.turn(numbers[2]);\n}\n```", "```\nint x = 5;\nfor (int i = 0; i < x; ++i) {\n    turtle.forward(36);\n    turtle.turn(360.0 / x);\n}\n```", "```\nfinal double fullCircleDegrees = 360.0;\nfinal int numSides = 5;\nfinal int sideLength = 36;\nfor (int i = 0; i < numSides; ++i) {\n    turtle.forward(sideLength);\n    turtle.turn(fullCircleDegrees / numSides);\n}\n```", "```\npublic static int dayOfYear(final int month, final int dayOfMonth, final int year) {\n    ...\n}\n```", "```\npublic static boolean leap(int y) {\n    String tmp = String.valueOf(y);\n    if (tmp.charAt(2) == '1' || tmp.charAt(2) == '3' || tmp.charAt(2) == 5 || tmp.charAt(2) == '7' || tmp.charAt(2) == '9') {\n        if (tmp.charAt(3)=='2'||tmp.charAt(3)=='6') return true; /*R1*/\n        else\n            return false; /*R2*/\n    }else{\n        if (tmp.charAt(2) == '0' && tmp.charAt(3) == '0') {\n            return false; /*R3*/\n        }\n        if (tmp.charAt(3)=='0'||tmp.charAt(3)=='4'||tmp.charAt(3)=='8')return true; /*R4*/\n    }\n    return false; /*R5*/\n}\n```", "```\nleap(2016)\n```", "```\nleap(2017)\n```", "```\nleap(2050)\n```", "```\nleap(10016)\n```", "```\nleap(916)\n```", "```\npublic static boolean isDivisibleBy(int number, int factor) { return number % factor == 0; }\n```", "```\nint tmp = 86400;  // tmp is the number of seconds in a day (don't do this!) \n```", "```\nint secondsPerDay = 86400; \n```", "```\npublic static boolean leap(int y) {\n    String tmp = String.valueOf(y);\n    if (tmp.charAt(2) == '1' || tmp.charAt(2) == '3' || tmp.charAt(2) == 5 || tmp.charAt(2) == '7' || tmp.charAt(2) == '9') {\n        if (tmp.charAt(3)=='2'||tmp.charAt(3)=='6') return true;\n        else\n            return false;\n    }else{\n        if (tmp.charAt(2) == '0' && tmp.charAt(3) == '0') {\n            return false;\n        }\n        if (tmp.charAt(3)=='0'||tmp.charAt(3)=='4'||tmp.charAt(3)=='8')return true;\n    }\n    return false;\n}\n```", "```\npublic static int LONG_WORD_LENGTH = 5;\npublic static String longestWord;\n\npublic static void countLongWords(List<String> words) {\n   int n = 0;\n   longestWord = \"\";\n   for (String word: words) {\n       if (word.length() > LONG_WORD_LENGTH) ++n;\n       if (word.length() > longestWord.length()) longestWord = word;\n   }\n   System.out.println(n);\n}\n```"]