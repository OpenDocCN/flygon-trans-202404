- en: HTTP with libcurl
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用libcurl的HTTP
- en: HTTP with libcurl
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用libcurl的HTTP
- en: HTTP is by far the most commonly used protocol by libcurl users and libcurl
    offers countless ways of modifying such transfers. See the [HTTP protocol basics](http-basics.html)
    for some basics on how the HTTP protocol works.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP是libcurl用户最常用的协议，libcurl提供了无数种修改这种传输的方式。请参阅[HTTP协议基础知识](http-basics.html)了解HTTP协议的基础知识。
- en: HTTPS
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTPS
- en: TBD
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: HTTP proxy
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP代理
- en: TBD
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: HTTP responses
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP响应
- en: HTTP responses
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP响应
- en: Every HTTP request includes a HTTP response. A HTTP response is a set of metadata
    and a response body, where the body can occasionally be zero bytes and thus nonexistent.
    A HTTP response will however always have response headers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个HTTP请求都包含一个HTTP响应。HTTP响应是一组元数据和一个响应主体，其中主体有时可能为零字节，因此不存在。但是HTTP响应始终会有响应头。
- en: The response body will be passed to the [write callback](callback-write.html)
    and the response headers to the [header callback](callback-header.html), but sometimes
    an application just want to know the size of the data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 响应主体将传递给[写回调](callback-write.html)，响应头将传递给[头回调](callback-header.html)，但有时应用程序只想知道数据的大小。
- en: 'The size of a response *as told by the server headers* can be extracted with
    `curl_easy_getinfo()` like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下方式使用`curl_easy_getinfo()`提取服务器头告知的响应大小：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: but if you can wait until after the transfer is already done, which also is
    a more reliable way since not all URLs will provide the size up front (like for
    example for servers that generate content on demand) you can instead ask for the
    amount of downloaded data in the most recent transfer.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您可以等到传输完成后再执行此操作，这也是一种更可靠的方法，因为并非所有URL都会提供立即大小（例如对于按需生成内容的服务器）。您可以询问最近传输的下载数据量。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: HTTP response code
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP响应代码
- en: 'Every HTTP response starts off with a single line that contains the HTTP response
    code. It is a three digit number that contains the server''s idea of the status
    for the request. The numbers are detailed in the HTTP standard specifications
    but they are divided into ranges that basically work like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个HTTP响应都以包含HTTP响应代码的单行开头。它是一个三位数，包含服务器对请求的状态的想法。这些数字在HTTP标准规范中有详细说明，但它们被分成基本上如下工作的范围：
- en: '| Code | Meaning |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 代码 | 含义 |'
- en: '| --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1xx | Transient code, a new one follows |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 1xx | 临时代码，后面跟着一个新的 |'
- en: '| 2xx | Things are OK |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 2xx | 一切正常 |'
- en: '| 3xx | The content is somewhere else |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 3xx | 内容在其他地方 |'
- en: '| 4xx | Failed because of a client problem |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 4xx | 由于客户端问题而失败 |'
- en: '| 5xx | Failed because of a server problem |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 5xx | 由于服务器问题失败 |'
- en: You can extract the response code after a transfer like this
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像这样在传输后提取响应代码
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: About HTTP response code "errors"
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于HTTP响应代码“错误”
- en: While the response code numbers can include numbers (in the 4xx and 5xx ranges)
    which the server uses to signal that there was an error processing the request,
    it is important to realize that this will not cause libcurl to return an error.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然响应代码数字可能包括服务器用于表示处理请求时出现错误的数字（在4xx和5xx范围内），但重要的是要意识到这不会导致libcurl返回错误。
- en: When libcurl is asked to perform a HTTP transfer it will return an error if
    that HTTP transfer fails. However, getting a HTTP 404 or the like back is not
    a problem for libcurl. It is not a HTTP transfer error. A user might very well
    be writing a client for testing a server's HTTP responses.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当要求libcurl执行HTTP传输时，如果该HTTP传输失败，它将返回错误。但是，得到HTTP 404或类似错误对于libcurl来说不是问题。这不是HTTP传输错误。用户很可能正在编写一个用于测试服务器HTTP响应的客户端。
- en: If you insist on curl treating HTTP response codes from 400 and up as errors,
    libcurl offers the `CURLOPT_FAILONERROR` option that if set instructs curl to
    return `CURLE_HTTP_RETURNED_ERROR` in this case. It will then return error as
    soon as possible and not deliver the response body.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您坚持要求curl将400及以上的HTTP响应代码视为错误，libcurl提供了`CURLOPT_FAILONERROR`选项，如果设置了该选项，curl会在这种情况下返回`CURLE_HTTP_RETURNED_ERROR`。然后它会尽快返回错误，而不会传递响应主体。
- en: HTTP requests
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP请求
- en: HTTP Requests
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP请求
- en: A HTTP request is what curl sends to the server when it tells the server what
    to do. When it wants to get data or send data. All transfers involving HTTP starts
    with a HTTP request.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当curl发送告诉服务器要做什么时，curl发送的是HTTP请求。当它想要获取数据或发送数据时。所有涉及HTTP的传输都始于HTTP请求。
- en: A HTTP request contains a method, a path, HTTP version and a set of request
    headers. And of course a libcurl using application can tweak all those fields.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求包含方法、路径、HTTP版本和一组请求头。当然，使用libcurl的应用程序可以调整所有这些字段。
- en: Request method
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求方法
- en: Every HTTP request contains a "method", sometimes referred to as a "verb". It
    is usually something like GET, HEAD, POST or PUT but there are also more esoteric
    ones like DELETE, PATCH and OPTIONS.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 HTTP 请求都包含一个"方法"，有时也称为"动词"。它通常是像 GET、HEAD、POST 或 PUT 这样的东西，但也有更奇特的，像 DELETE、PATCH
    和 OPTIONS。
- en: Usually when you use libcurl to set up and perform a transfer the specific request
    method is implied by the options you use. If you just ask for a URL, it means
    the method will be `GET` while if you set for example `CURLOPT_POSTFIELDS` that
    will make libcurl use the `POST` method. If you set `CURLOPT_UPLOAD` to true,
    libcurl will send a `PUT` method in its HTTP request and so on. Asking for `CURLOPT_NOBODY`
    will make libcurl use `HEAD`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通常当你使用 libcurl 来设置和执行传输时，特定的请求方法会由你使用的选项隐含。如果你只要求一个 URL，这意味着方法将是 `GET`，而如果你设置例如
    `CURLOPT_POSTFIELDS`，那么 libcurl 将使用 `POST` 方法。如果你将 `CURLOPT_UPLOAD` 设置为 true，libcurl
    将在其 HTTP 请求中发送一个 `PUT` 方法，依此类推。要求 `CURLOPT_NOBODY` 将使 libcurl 使用 `HEAD`。
- en: 'However, sometimes those default HTTP methods are not good enough or simply
    not the ones you want your transfer to use. Then you can instruct libcurl to use
    the specific method you like with `CURLOPT_CUSTOMREQUEST`. For example, you want
    to send a `DELETE` method to the URL of your choice:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时这些默认的 HTTP 方法不够好或者根本不是你希望你的传输使用的方法。那么你可以使用 `CURLOPT_CUSTOMREQUEST` 指示 libcurl
    使用你喜欢的特定方法。例如，你想要向你选择的 URL 发送一个 `DELETE` 方法：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The CURLOPT_CUSTOMREQUEST setting should only be the single keyword to use as
    method in the HTTP request line. If you want to change or add additional HTTP
    reuqest headers, see the following section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: CURLOPT_CUSTOMREQUEST 设置应该仅是用作 HTTP 请求行中方法的单个关键字。如果你想要更改或添加额外的 HTTP 请求头部，请参阅以下部分。
- en: Customize HTTP request headers
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义 HTTP 请求头部
- en: When libcurl issues HTTP requests as part of performing the data transfers you've
    asked it to, it will of course send them off with a set of HTTP headers that are
    suitable for fulfilling the task given to it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当 libcurl 发出 HTTP 请求作为执行你要求它执行的数据传输的一部分时，它当然会带着一组适合完成任务的 HTTP 头部发送它们。
- en: 'If just given the URL "[http://localhost/file1.txt](http://localhost/file1.txt)",
    libcurl 7.51.0 would send the following request to the server:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只给出 URL "[http://localhost/file1.txt](http://localhost/file1.txt)"，libcurl
    7.51.0 将向服务器发送以下请求：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you would instead instruct your application to also set `CURLOPT_POSTFIELDS`
    to the string "foobar" (6 letters, the quotes only used for visual delimiters
    here), it would send the following headers:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你相反地指示你的应用程序也将 `CURLOPT_POSTFIELDS` 设置为字符串 "foobar"（6 个字母，引号仅用于视觉定界），它将发送以下头部：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you're not pleased with the default set of headers libcurl sends, the application
    has the power to add, change or remove headers in the HTTP request.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 libcurl 发送的默认头部集合不满意，应用程序可以在 HTTP 请求中添加、更改或删除头部。
- en: Add a header
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个头部
- en: 'To add a header that wouldn''t otherwise be in the request, add it with `CURLOPT_HTTPHEADER`.
    Suppose you want a header called `Name:` that contains `Mr. Smith`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个否则不会在请求中的头部，请使用 `CURLOPT_HTTPHEADER` 添加。假设你想要一个名为 `Name:` 的头部，其中包含 `Mr.
    Smith`：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Change a header
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改头部
- en: 'If one of those default headers aren''t to your satisfaction you can alter
    them. Like if you think the default `Host:` header is wrong (even though it is
    derived from the URL you give libcurl), you can tell libcurl your own:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个默认头部不符合你的要求，你可以修改它们。比如，如果你认为默认的 `Host:` 头部是错误的（即使它是从你给 libcurl 的 URL 衍生出来的），你可以告诉
    libcurl 你自己的：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remove a header
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除一个头部
- en: 'When you think libcurl uses a header in a request that you really think it
    shouldn''t, you can easily tell it to just remove it from the request. Like if
    you want to take away the `Accept:` header. Just provide the header name with
    nothing to the right sight of the colon:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当你认为 libcurl 在请求中使用了一个你认为它不应该使用的头部时，你可以很容易地告诉它将其从请求中移除。比如，如果你想要移除 `Accept:`
    头部。只需在冒号的右侧提供头部名称而不提供任何内容：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Provide a header without contents
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供一个没有内容的头部
- en: 'As you may then have noticed in the above sections, if you try to add a header
    with no contents on the right side of the colon, it will be treated as a removal
    instruction and it will instead completely inhibit that header from being sent.
    If you instead *truly* want to send a header with zero contents on the right side,
    you need to use a special marker. You must provide the header with a semicolon
    instead of a proper colon. Like `Header;`. So if you want to add a header to the
    outgoing HTTP request that is just `Moo:` with nothing following the colon, you
    could write it like:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上面的部分中可能已经注意到的，如果你试图在冒号的右侧添加一个没有内容的头部，它将被视为删除指令，并且它将完全禁止该头部被发送。如果你*真的*想发送一个右侧没有内容的头部，你需要使用一个特殊的标记。你必须在分号而不是正确的冒号后提供头部。比如`Header;`。所以如果你想在发送的HTTP请求中添加一个只有`Moo:`而没有跟随冒号的头部，你可以这样写：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Referrer
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用者
- en: 'The `Referer:` header (yes, it is misspelled) is a standard HTTP header that
    tells the server from which URL the user-agent was directed from when it arrived
    at the URL it now requests. It is a normal header so you can set it yourself with
    the `CURLOPT_HEADER` approach as shown above, or you can use the shortcut known
    as `CURLOPT_REFERER`. Like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Referer:`头部（是的，它拼写错误）是一个标准的HTTP头部，它告诉服务器用户代理从哪个URL被引导到现在请求的URL时的来源。它是一个普通的头部，所以你可以像上面展示的`CURLOPT_HEADER`方法一样自己设置它，或者你可以使用称为`CURLOPT_REFERER`的快捷方式。就像这样： '
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Automatic referrer
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动引用者
- en: 'When libcurl is asked to follow redirects itself with the `CURLOPT_FOLLOWLOCATION`
    option, and you still want to have the `Referer:` header set to the correct previous
    URL from where it did the redirect, you can ask libcurl to set that by itself:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当libcurl被要求使用`CURLOPT_FOLLOWLOCATION`选项自己跟随重定向，并且你仍然希望`Referer:`头设置为正确的前一个URL，从中进行重定向，你可以让libcurl自己设置：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: HTTP versions
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP版本
- en: HTTP versions
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP版本
- en: As any other Internet protocol, the HTTP protocol has kept evolving over the
    years and now there are clients and servers distributed over the world and over
    time that speak different versions with varying levels of success. So in order
    to get libcurl to work with the URLs you pass in libcurl offers ways for you to
    specify which HTTP version that request and transfer should use. libcurl is designed
    in a way so that it tries to use the most common, the most sensible if you want,
    default values first but sometimes that isn't enough and then you may need to
    instruct libcurl what to do.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他互联网协议一样，HTTP协议随着时间的推移而不断发展，现在有分布在世界各地和时间的不同版本和不同成功级别的客户端和服务器。所以为了让libcurl能够处理你在libcurl中传递的URL，libcurl提供了方法让你指定请求和传输应该使用哪个HTTP版本。libcurl被设计成首先尝试使用最常见的，最明智的默认值，但有时这是不够的，那么你可能需要告诉libcurl要做什么。
- en: Since mid 2016, libcurl defaults to use HTTP/2 for HTTPS servers if you have
    a libcurl that has HTTP/2 abilities built-in, libcurl will attempt to use HTTP/2
    automatically or fall down to 1.1 in case the negotiation failed. Non-HTTP/2 capable
    libcurls get 1.1 over HTTPS by default. Plain HTTP requests still default to HTTP/1.1.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 自2016年中期以来，如果你的libcurl具有内置的HTTP/2能力，libcurl默认使用HTTP/2来处理HTTPS服务器，libcurl将尝试自动使用HTTP/2，否则在协商失败时会降级到1.1。不支持HTTP/2的libcurl默认在HTTPS上使用1.1。普通HTTP请求仍然默认使用HTTP/1.1。
- en: If the default behavior isn't good enough for your transfer, the `CURLOPT_HTTP_VERSION`
    option is there for you.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果默认行为对你的传输不够好，`CURLOPT_HTTP_VERSION`选项可以帮助你。
- en: '| Option | Description |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| CURL_HTTP_VERSION_NONE | Reset back to default behavior |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| CURL_HTTP_VERSION_NONE | 重置为默认行为 |'
- en: '| CURL_HTTP_VERSION_1_0 | Enforce use of the legacy HTTP/1.0 protocol version
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| CURL_HTTP_VERSION_1_0 | 强制使用传统的HTTP/1.0协议版本 |'
- en: '| CURL_HTTP_VERSION_1_1 | Do the request using the HTTP/1.1 protocol version
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| CURL_HTTP_VERSION_1_1 | 使用HTTP/1.1协议版本进行请求 |'
- en: '| CURL_HTTP_VERSION_2_0 | Attempt to use HTTP/2 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| CURL_HTTP_VERSION_2_0 | 尝试使用HTTP/2 |'
- en: '| CURL_HTTP_VERSION_2TLS | Attempt to use HTTP/2 on HTTPS connections only,
    otherwise do HTTP/1.1 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| CURL_HTTP_VERSION_2TLS | 仅在HTTPS连接上尝试使用HTTP/2，否则使用HTTP/1.1 |'
- en: '| CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE | Use HTTP/2 straight away without "upgrading"
    from 1.1\. It requires that you know that this server is OK with it. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE | 直接使用HTTP/2，无需从1.1“升级”。这要求你知道这个服务器支持它。'
- en: HTTP ranges
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP范围
- en: HTTP ranges
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP范围
- en: What if the client only wants the first 200 bytes out of a remote resource or
    perhaps 300 bytes somewhere in the middle? The HTTP protocol allows a client to
    ask for only a specific data range. The client asks the server for the specific
    range with a start offset and an end offset. It can even combine things and ask
    for several ranges in the same request by just listing a bunch of pieces next
    to each other. When a server sends back multiple independent pieces to answer
    such a request, you will get them separated with mime boundary strings and it
    will be up to the user application to handle that accordingly. curl will not further
    separate such a response.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端只想要远程资源的前200字节，或者也许是中间某处的300字节怎么办？HTTP协议允许客户端仅请求特定的数据范围。客户端通过指定起始偏移量和结束偏移量向服务器请求特定范围。它甚至可以结合起来，通过只列出一堆相邻的片段来请求同一请求中的几个范围。当服务器发送多个独立的片段以回答此类请求时，您将用mime边界字符串将它们分开，并且将由用户应用程序相应地处理。curl不会进一步分离这样的响应。
- en: However, a byte range is only a request to the server. It does not have to respect
    the request and in many cases, like when the server automatically generates the
    contents on the fly when it is being asked, it will simply refuse to do it and
    it then instead respond with the full contents anyway.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，字节范围只是对服务器的一个请求。它不必遵守请求，在许多情况下，比如当服务器在被请求时自动生成内容时，它会简单地拒绝执行，并且它会以任何方式回应完整的内容。
- en: 'You can make libcurl ask for a range with `CURLOPT_RANGE`. Like if you want
    the first 200 bytes out of something:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以让libcurl使用`CURLOPT_RANGE`请求一个范围。比如，如果你想要从某个地方获取前200字节：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Or everything in the file starting from index 200:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 或者从索引200开始的文件中的所有内容：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Get 200 bytes from index 0 *and* 200 bytes from index 1000:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从索引0获取200字节 *以及* 从索引1000获取200字节：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Cookies with libcurl
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用libcurl处理cookie
- en: Cookies with libcurl
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用libcurl处理cookie
- en: By default and by design, libcurl makes transfers as basic as possible and features
    need to be enabled to get used. One such feature is HTTP cookies, more known as
    just plain and simply "cookies".
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，libcurl使传输尽可能基本，并且需要启用功能才能使用。其中一个功能就是HTTP cookie，更为人所知的是“cookie”。
- en: Cookies are name/value pairs sent by the server (using a `Set-Cookie:` header)
    to be stored in the client, and are then supposed to get sent back again in requests
    that matches the host and path requirements that were specified along with the
    cookie when it came from the server (using the `Cookie:` header). On the modern
    web of today, sites are known to sometimes use very large numbers of cookies.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: cookie是由服务器发送的名称/值对（使用`Set-Cookie：`头）以存储在客户端，并且然后在请求中再次发送，以匹配来自服务器的cookie时指定的主机和路径要求（使用`Cookie：`头）。在当今的现代网络中，网站有时会使用大量的cookie。
- en: Cookie engine
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cookie引擎
- en: When you enable the "cookie engine" for a specific easy handle, it means that
    it will record incoming cookies, store them in the in-memory "cookie store" that
    is associated with the easy handle and subsequently send the proper ones back
    if an HTTP request is made that matches.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为特定的easy句柄启用“cookie引擎”时，这意味着它将记录传入的cookie，将它们存储在与easy句柄关联的内存中的“cookie存储”中，并在随后进行的HTTP请求中发送适当的cookie回来。
- en: 'There are two ways to switch on the cookie engine:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以启用cookie引擎：
- en: Enable cookie engine with reading
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用带有读取功能的cookie引擎
- en: 'Ask libcurl to import cookies into the easy handle from a given file name with
    the `CURLOPT_COOKIEFILE` option:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`CURLOPT_COOKIEFILE`选项，请求libcurl从给定文件名导入cookie到easy句柄中：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A common trick is to just specify a non-existing file name or plain "" to have
    it just activate the cookie engine with a blank cookie store to start with.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的技巧是只需指定一个不存在的文件名或简单的 "" 来激活带有空白cookie存储的cookie引擎。
- en: This option can be set multiple times and then each of the given files will
    be read.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项可以设置多次，然后将读取每个给定文件。
- en: Enable cookie engine with writing
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用带有写入功能的cookie引擎
- en: 'Ask for received cookies to get stored in a file with the `CURLOPT_COOKIEJAR`
    option:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`CURLOPT_COOKIEJAR`选项，请求将接收的cookie存储到文件中：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: when the easy handle is closed later with `curl_easy_cleanup()`, all known cookies
    will be written to the given file. The file format is the well-known "Netscape
    cookie file" format that browsers also once used.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当以后使用`curl_easy_cleanup()`关闭easy句柄时，所有已知的cookie将写入到给定的文件中。文件格式是浏览器曾经使用的众所周知的“Netscape
    cookie文件”格式。
- en: Setting custom cookies
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置自定义cookie
- en: 'A simpler and more direct way to just pass on a set of specific cookies in
    a request that doesn''t add any cookies to the cookie store and doesn''t even
    activate the cookie engine, is to set the set with `CURLOPT_COOKIE:'':'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更简单、更直接的方式，只需在请求中传递一组特定的 cookie，而不向 cookie 存储添加任何 cookie，甚至不激活 cookie 引擎，就是设置
    `CURLOPT_COOKIE:` 参数：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The string you set there is the raw string that would be sent in the HTTP request
    and should be in the format of repeated sequences of `NAME=VALUE;` - including
    the semicolon separator.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您设置的字符串是将在 HTTP 请求中发送的原始字符串，应该是重复序列的格式为 `NAME=VALUE;` - 包括分号分隔符。
- en: Import export
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入导出
- en: The cookie in-memory store can hold a bunch of cookies, and libcurl offers very
    powerful ways for an application to play with them. You can set new cookies, you
    can replace an existing cookie and you can extract existing cookies.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: cookie 内存存储可以容纳一堆 cookie，并且 libcurl 提供了非常强大的方法让应用程序与其交互。您可以设置新的 cookie，可以替换现有的
    cookie，并且可以提取现有的 cookie。
- en: Add a cookie to the cookie store
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向 cookie 存储添加 cookie
- en: 'Add a new cookie to the cookie store by simply passing it into curl with `CURLOPT_COOKIELIST`
    with a new cookie. The format of the input is a single line in the cookie file
    format, or formatted as a `Set-Cookie:` response header, but we recommend the
    cookie file style:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地将其传递给 curl 的 `CURLOPT_COOKIELIST` 参数，向 cookie 存储添加新 cookie。输入的格式是 cookie
    文件格式中的单行，或格式化为 `Set-Cookie:` 响应头，但我们建议使用 cookie 文件样式：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If that given cookie would match an already existing cookie (with the same domain
    and path, etc.), it would overwrite the old one with the new contents.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的 cookie 与已存在的 cookie 匹配（具有相同的域和路径等），它将使用新内容覆盖旧的 cookie。
- en: Get all cookies from the cookie store
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 cookie 存储中获取所有 cookie
- en: 'Sometimes writing the cookie file when you close the handle isn''t enough and
    then your application can opt to extract all the currently known cookies from
    the store like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在关闭句柄时写入 cookie 文件并不足够，那么您的应用程序可以选择像这样从存储中提取当前已知的所有 cookie：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This returns a pointer to a linked list of cookies, and each cookie is (again)
    specified as a single line of the cookie file format. The list is allocated for
    you, so do not forget to call `curl_slist_free_all` when the application is done
    with the information.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个指向 cookie 链表的指针，每个 cookie （再次）指定为 cookie 文件格式的单行。列表已为您分配，因此在应用程序完成处理信息时不要忘记调用
    `curl_slist_free_all`。
- en: Cookie store commands
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cookie 存储命令
- en: 'If setting and extracting cookies isn''t enough, you can also interfere with
    the cookie store in more ways:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置和提取 cookie 不够，您还可以以更多方式干扰 cookie 存储：
- en: 'Wipe the entire in-memory storage clean with:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方式清除整个内存存储区：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Erase all session cookies (cookies without expiry date) from memory:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 从内存中删除所有会话 cookie（没有到期日期的 cookie）：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Force a write of all cookies to the file name previously specified with `CURLOPT_COOKIEJAR`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 强制将所有 cookie 写入之前用 `CURLOPT_COOKIEJAR` 指定的文件名：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Force a reload of cookies from the file name previously specified with `CURLOPT_COOKIEFILE`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 强制从之前用 `CURLOPT_COOKIEFILE` 指定的文件名重新加载 cookie：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Cookie file format
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cookie 文件格式
- en: The cookie file format is text based and stores one cookie per line. Lines that
    start with `#` are treated as comments.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: cookie 文件格式是基于文本的，每行存储一个 cookie。以 `#` 开头的行被视为注释。
- en: Each line that each specifies a single cookie consists of seven text fields
    separated with TAB characters.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 每行指定单个 cookie 的行由七个文本字段组成，用 TAB 字符分隔。
- en: '| Field | Example | Meaning |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 字段 | 示例 | 含义 |'
- en: '| --- | --- | --- |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0 | example.com | Domain name |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 0 | example.com | 域名 |'
- en: '| 1 | FALSE | Include subdomains boolean |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 1 | FALSE | 包括子域布尔值 |'
- en: '| 2 | /foobar/ | Path |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 2 | /foobar/ | 路径 |'
- en: '| 3 | FALSE | Set over a secure transport |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 3 | FALSE | 通过安全传输设置 |'
- en: '| 4 | 1462299217 | Expires at – seconds since Jan 1st 1970, or 0 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 1462299217 | 到期时间 - 自1970年1月1日以来的秒数，或 0 |'
- en: '| 5 | person | Name of the cookie |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 5 | person | cookie 的名称 |'
- en: '| 6 | daniel | Value of the cookie |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 6 | daniel | cookie 的值 |'
- en: Download
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载
- en: libcurl HTTP download
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: libcurl HTTP 下载
- en: 'The GET method is the default method libcurl uses when a HTTP URL is requested
    and no particular other method is asked for. It asks the server for a particular
    resource—the standard HTTP download request:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当 HTTP URL 被请求时，且没有特定的其他方法被要求时，GET 方法是 libcurl 使用的默认方法。它向服务器请求特定资源 - 标准的 HTTP
    下载请求：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Since options set in an easy handle are sticky and remain until changed, there
    may be times when you have asked for another request method than GET and then
    want to switch back to GET again for a subsequent request. For this purpose, there''s
    the `CURLOPT_HTTPGET` option:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在 easy 句柄中设置的选项是黏性的，并且保持不变直到更改，因此在某些情况下，您可能已经请求了另一种请求方法而不是 GET，然后希望为随后的请求切换回
    GET。为此，有 `CURLOPT_HTTPGET` 选项：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Download headers too
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 也下载头部
- en: A HTTP transfer also includes a set of response headers. Response headers are
    metadata associated with the actual payload, called the response body. All downloads
    will get a set of headers too, but when using libcurl you can select whether you
    want to have them downloaded (seen) or not.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 传输还包括一组响应头。响应头是与实际有效载荷（称为响应体）相关联的元数据。所有下载也将获得一组头部，但是使用 libcurl 时，您可以选择是否要下载（查看）它们。
- en: 'You can ask libcurl to pass on the headers to the same "stream" as the regular
    body is, by using `CURLOPT_HEADER`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以要求 libcurl 将头部传递到与常规主体相同的“流”中，方法是使用 `CURLOPT_HEADER`：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Or you can opt to store the headers in a separate download file, by relying
    on the default behaviors of the [write](callback-write.html) and [header callbacks](callback-header.html):'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以选择将头部存储在单独的下载文件中，依赖于 [write](callback-write.html) 和 [header 回调](callback-header.html)
    的默认行为：
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If you only want to casually browse the headers, you may even be happy enough
    with just setting verbose mode while developing as that will show both outgoing
    and incoming headers sent to stderr:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想随意浏览头部，甚至可以在开发时仅设置详细模式，因为这将显示发送到 stderr 的出站和入站头部：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Upload
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传
- en: HTTP upload
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP 上传
- en: Uploads over HTTP can be done in many different ways and it is important to
    notice the differences. They can use different methods, like POST or PUT, and
    when using POST the body formatting can differ.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 HTTP 进行上传可以采用多种不同的方式，重要的是要注意它们之间的区别。它们可以使用不同的方法，比如 POST 或 PUT，在使用 POST 时，请求体的格式可能会有所不同。
- en: In addition to those HTTP differences, libcurl offers different ways to provide
    the data to upload.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些 HTTP 差异之外，libcurl 还提供了不同的方法来提供要上传的数据。
- en: HTTP POST
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP POST
- en: 'POST is typically the HTTP method to pass data to a remote web application.
    A very common way to do that in browsers is by filling in a HTML form and pressing
    submit. It is the standard way for a HTTP request to pass on data to the server.
    With libcurl you normally provide that data as a pointer and a length:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: POST 通常是将数据传递给远程 Web 应用程序的 HTTP 方法。在浏览器中做到这一点的一种非常常见的方法是填写 HTML 表单并按提交按钮。这是
    HTTP 请求向服务器传递数据的标准方式。使用 libcurl，您通常将数据提供为指针和长度：
- en: '[PRE29]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Or you tell libcurl that it is a post but would prefer to have libcurl instead
    get the data by using the regular [read callback](callback-read.html):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您告诉 libcurl 这是一个 post 请求，但更希望 libcurl 通过使用常规的 [read 回调](callback-read.html)
    获取数据：
- en: '[PRE30]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This "normal" POST will also set the request header `Content-Type: application/x-www-form-urlencoded`.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '这个“普通”的 POST 还会设置请求头 `Content-Type: application/x-www-form-urlencoded`。'
- en: HTTP multipart formposts
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP 多部分表单提交
- en: A multipart formpost is still using the same HTTP method POST; the difference
    is only in the formatting of the request body. A multipart formpost is basically
    a series of separate "parts", separated by MIME-style boundary strings. There's
    no limit to how many parts you can send.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 多部分表单提交仍然使用相同的 HTTP 方法 POST；不同之处仅在于请求体的格式。多部分表单提交基本上是一系列由 MIME 样式边界字符串分隔的独立的“部分”。您可以发送的部分数量没有限制。
- en: Each such part has a name, a set of headers and a few other properties.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 每个这样的部分都有一个名称、一组头部和一些其他属性。
- en: 'libcurl offers a convenience function for constructing such a series of parts
    and to send that off to the server. `curl_formadd` is the function to build a
    formpost. Invoke it once for each part, and pass in arguments to it detailing
    the specifics and characteristics of that part. When all parts you want to send
    have been added, you pass in the handle `curl_formadd` returned like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: libcurl 提供了一个方便的函数来构造这样一系列部分，并将其发送到服务器。`curl_formadd` 是用于构建表单提交的函数。为每个部分调用它一次，并向其传递关于该部分的具体和特征的参数。当您添加了要发送的所有部分后，像这样传递由
    `curl_formadd` 返回的句柄：
- en: '[PRE31]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: HTTP PUT
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP PUT
- en: TBD
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
