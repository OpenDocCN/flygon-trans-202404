["```\nfinal char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n```", "```\nvowels = new char[] { 'x', 'y', 'z' }; \nvowels[0] = 'z';\n```", "```\nchar vowel0 = 'a';\nfinal char vowel1 = vowel0;\n\nString vowel2 = vowel1 + \"eiou\";\nfinal String vowel3 = vowel2;\n\nchar[] vowel4 = new char[] { vowel0, 'e', 'i', 'o', 'u' };\nfinal char[] vowel5 = vowel4;\n```", "```\n/**\n * @param x  requires x >= 0\n * @return approximation to square root of x\n */\npublic double sqrt(double x) { ... }\n```", "```\n/**\n * @param x  requires x >= 0\n * @return approximation to square root of x\n */\npublic double sqrt(double x) { \n    if (! (x >= 0)) throw new AssertionError();\n    ...\n}\n```", "```\nassert (x >= 0);\n```", "```\nassert x >= 0;\n```", "```\nassert (x >= 0) : \"x is \" + x;\n```", "```\n@Test(expected=AssertionError.class)\npublic void testAssertionsEnabled() {\n    assert false;\n}\n```", "```\npublic double sqrt(double x) {\n    assert x >= 0;\n    double r;\n    ... // compute result r\n    assert Math.abs(r*r - x) < .0001;\n    return r;\n}\n```", "```\nswitch (vowel) {\n  case 'a':\n  case 'e':\n  case 'i':\n  case 'o':\n  case 'u': return \"A\";\n  default: assert false;\n}\n```", "```\n// don't do this:\nx = y + 1;\nassert x == y+1;\n```", "```\n// don't do this:\nassert list.remove(x);\n```", "```\nboolean found = list.remove(x);\nassert found;\n```", "```\n/**\n * Solves quadratic equation ax^2 + bx + c = 0.\n * \n * @param a quadratic coefficient, requires a != 0\n * @param b linear coefficient\n * @param c constant term\n * @return a list of the real roots of the equation\n */\npublic static List<Double> quadraticRoots(final int a, final int b, final int c) {\n    List<Double> roots = new ArrayList<Double>();\n    // A\n    ... // compute roots \n    // B\n    return roots;\n}\n```", "```\nfor (i = 0; i < 100; ++i) {\n    ...\n    doSomeThings();\n    ...\n}\n```", "```\npublic static int i;\n...\nfor (i = 0; i < 100; ++i) {\n    ...\n    doSomeThings();\n    ...\n}\n```", "```\nfor (int i = 0; i < 100; ++i) {\n    ...\n    doSomeThings();\n    ...\n}\n```", "```\n    int i;\n    for (i = 0; i < 100; ++i) {\n    ```", "```\n    for (int i = 0; i < 100; ++i) {\n    ```", "```\n1  class Apartment {\n2      Apartment(String newAddress) {\n3          this.address = newAddress;\n4          this.roommates = new HashSet<Person>();\n5      }\n6      \n7      String getAddress() {\n8          return address;\n9      }\n10     \n11     void addRoommate(Person newRoommate) {\n12         roommates.add(newRoommate);\n13         if (roommates.size() > MAXIMUM_OCCUPANCY) {\n14             roommates.remove(newRoommate);\n15             throw new TooManyPeopleException();\n16         }\n17     }\n18     \n19     int getMaximumOccupancy() {\n20         return MAXIMUM_OCCUPANCY;\n21     }\n22 }\n```"]