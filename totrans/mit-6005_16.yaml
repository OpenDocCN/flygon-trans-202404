- en: 'Reading 16: Recursive Data Types'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读 16：递归数据类型
- en: Software in 6.005
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.005 软件
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 免受错误侵扰 | 易于理解 | 为变化做好准备 |'
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 今天正确，未来也正确。 | 与未来程序员清晰沟通，包括未来的自己。 | 设计以适应变化而无需重写。 |'
- en: Objectives
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标
- en: Understand recursive datatypes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解递归数据类型
- en: Read and write datatype definitions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读和编写数据类型定义
- en: Understand and implement functions over recursive datatypes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解并实现递归数据类型函数
- en: Understand immutable lists and know the standard operations on immutable lists
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解不可变列表，并了解不可变列表的标准操作
- en: Know and follow a recipe for writing programs with ADTs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解并遵循使用 ADT 编写程序的步骤
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: In this reading we’ll look at recursively-defined types, how to specify operations
    on such types, and how to implement them. Our main example will be *immutable
    lists*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本阅读中，我们将看看递归定义的类型，如何指定这些类型的操作，以及如何实现它们。我们的主要例子将是*不可变列表*。
- en: Then we’ll use another recursive datatype example, *matrix multiplications*,
    to walk through our process for programming with ADTs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将使用另一个递归数据类型的例子，*矩阵乘法*，来演示我们使用 ADT 进行编程的过程。
- en: '[Part 1: Recursive Data Types](recursive/)'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[第一部分：递归数据类型](recursive/)'
- en: '[Part 2: Writing a Program with ADTs](matexpr/)'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[第二部分：使用 ADT 编写程序](matexpr/)'
- en: Summary
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Let’s review how recursive datatypes fit in with the main goals of this course:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下递归数据类型如何符合本课程的主要目标：
- en: '**Safe from bugs**. Recursive datatypes allow us to tackle problems with a
    recursive or unbounded structure. Implementing appropriate data structures that
    encapsulate important operations and maintain their own invariants is crucial
    for correctness.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免受错误侵扰**。递归数据类型使我们能够解决具有递归或无界结构的问题。实现适当的数据结构，封装重要操作并保持自身不变性对于正确性至关重要。'
- en: '**Easy to understand**. Functions over recursive datatypes, specified in the
    abstract type and implemented in each concrete variant, organize the different
    behavior of the type.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于理解**。在抽象类型中指定的递归数据类型函数，并在每个具体变体中实现，组织了类型的不同行为。'
- en: '**Ready for change**. A recursive ADT, like any ADT, separates abstract values
    from concrete representations, making it possible to change low-level code and
    high-level structure of the implementation without changing clients.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为变化做好准备**。递归 ADT，像任何 ADT 一样，将抽象值与具体表示分离，使得可以在不改变客户端的情况下更改低级代码和实现的高级结构。'
