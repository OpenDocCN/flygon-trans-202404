- en: 'Reading 16: Recursive Data Types'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software in 6.005
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  prefs: []
  type: TYPE_TB
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  prefs: []
  type: TYPE_TB
- en: Objectives
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Understand recursive datatypes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read and write datatype definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand and implement functions over recursive datatypes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand immutable lists and know the standard operations on immutable lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know and follow a recipe for writing programs with ADTs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this reading we’ll look at recursively-defined types, how to specify operations
    on such types, and how to implement them. Our main example will be *immutable
    lists*.
  prefs: []
  type: TYPE_NORMAL
- en: Then we’ll use another recursive datatype example, *matrix multiplications*,
    to walk through our process for programming with ADTs.
  prefs: []
  type: TYPE_NORMAL
- en: '[Part 1: Recursive Data Types](recursive/)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Part 2: Writing a Program with ADTs](matexpr/)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s review how recursive datatypes fit in with the main goals of this course:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Safe from bugs**. Recursive datatypes allow us to tackle problems with a
    recursive or unbounded structure. Implementing appropriate data structures that
    encapsulate important operations and maintain their own invariants is crucial
    for correctness.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy to understand**. Functions over recursive datatypes, specified in the
    abstract type and implemented in each concrete variant, organize the different
    behavior of the type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ready for change**. A recursive ADT, like any ADT, separates abstract values
    from concrete representations, making it possible to change low-level code and
    high-level structure of the implementation without changing clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
