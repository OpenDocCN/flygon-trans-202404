["```\nservices.AddDbContext<ApplicationDbContext>(options =>\n    options.UseSqlite(Configuration.GetConnectionString(\"DefaultConnection\"))); \n```", "```\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser>\n{\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\n        : base(options)\n    {\n    }\n\n    protected override void OnModelCreating(ModelBuilder builder)\n    {\n        base.OnModelCreating(builder);\n        // Customize the ASP.NET Identity model and override the defaults if needed.\n        // For example, you can rename the ASP.NET Identity table names and more.\n        // Add your customizations after calling base.OnModelCreating(builder);\n    }\n} \n```", "```\npublic ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\n    : base(options) {\n}\n\npublic DbSet<TodoItem> Items { get; set; }\n\n// ... \n```", "```\ndotnet ef migrations add AddItems \n```", "```\nprotected override void Up(MigrationBuilder migrationBuilder) {\n    // (... some code)\n\n    migrationBuilder.CreateTable(\n        name: \"Items\",\n        columns: table => new\n        {\n            Id = table.Column<Guid>(type: \"BLOB\", nullable: false),\n            DueAt = table.Column<DateTimeOffset>(type: \"TEXT\", nullable: true),\n            IsDone = table.Column<bool>(type: \"INTEGER\", nullable: false),\n            Title = table.Column<string>(type: \"TEXT\", nullable: true)\n        },\n        constraints: table =>\n        {\n            table.PrimaryKey(\"PK_Items\", x => x.Id);\n        });\n\n    // (some code...)\n}\n\nprotected override void Down(MigrationBuilder migrationBuilder) {\n    // (... some code)\n\n    migrationBuilder.DropTable(\n        name: \"Items\");\n\n    // (some code...)\n} \n```", "```\ndotnet ef database update \n```", "```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing AspNetCoreTodo.Data;\nusing AspNetCoreTodo.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace AspNetCoreTodo.Services\n{\n    public class TodoItemService : ITodoItemService\n    {\n        private readonly ApplicationDbContext _context;\n\n        public TodoItemService(ApplicationDbContext context) {\n            _context = context;\n        }\n\n        public async Task<IEnumerable<TodoItem>> GetIncompleteItemsAsync()\n        {\n            var items = await _context.Items\n                .Where(x => x.IsDone == false)\n                .ToArrayAsync();\n\n            return items;\n        }\n    }\n} \n```", "```\nvar items = await _context.Items \n```", "```\n.Where(x => x.IsDone == false) \n```", "```\npublic async Task<IEnumerable<TodoItem>> GetIncompleteItemsAsync()\n{\n    return await _context.Items\n        .Where(x => x.IsDone == false)\n        .ToArrayAsync();\n} \n```", "```\nservices.AddScoped<ITodoItemService, TodoItemService>(); \n```"]