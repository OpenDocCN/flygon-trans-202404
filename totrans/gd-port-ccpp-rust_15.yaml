- en: Debugging Rust
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 Rust
- en: Debugging Rust
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 Rust
- en: Rust compiles into machine code the same as C and benefits from sharing the
    same ABI and compiler backend formats as C/C++.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 编译成机器码与 C 相同，并且从与 C/C++ 相同的 ABI 和编译器后端格式共享的好处。
- en: 'So you can debug Rust in the same way as C/C++. If you built your Rust executable
    in a gcc compatible binary format you can just invoke gdb on it:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以像调试 C/C++ 一样调试 Rust。如果你的 Rust 可执行文件是在兼容 gcc 的二进制格式下构建的，你可以直接调用 gdb：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Rust comes with a gdb wrapper script called `rust-gdb` that loads macros which
    perform syntax highlighting.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 自带一个名为 `rust-gdb` 的 gdb 包装脚本，该脚本加载了执行语法高亮的宏。
- en: Enabling backtrace
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用回溯
- en: If your code is crashing because of a panic!() you can get a backtrace on the
    console by setting the `RUST_BACKTRACE` environment variable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代码因为`panic!()`而崩溃，你可以通过设置`RUST_BACKTRACE`环境变量在控制台上获得回溯。
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Find out your target binary format
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找出你的目标二进制格式
- en: If you are in doubt what you are targeting, you may use `rustup` to show you.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定你的目标是什么，你可以使用 `rustup` 来显示。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or perhaps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The information will tell you which debugger you can use to debug your code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 信息将告诉你可以使用哪个调试器来调试你的代码。
- en: Microsoft Visual Studio
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio
- en: If you have the MSVC toolchain (32 or 64-bit) or the LLVM backend will generate
    a .pdb file and binaries will be compatible with the standard MSVC runtime.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有 MSVC 工具链（32位或64位）或 LLVM 后端将生成一个 .pdb 文件，二进制文件将与标准的 MSVC 运行时兼容。
- en: 'To debug your code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 调试你的代码：
- en: Open Visual Studio
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio
- en: Choose File | Open | Project/Solution...
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 文件 | 打开 | 项目/解决方案...
- en: Select the compiled executable
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择编译后的可执行文件
- en: Open a source file to debug and set a breakpoint
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开要调试的源文件并设置断点
- en: Click the "Start" button
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“开始”按钮
- en: GDB
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GDB
- en: GDB can be invoked directly from the command line or through a plugin / IDE.
    From the command line it's a
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: GDB可以直接从命令行调用，也可以通过插件/IDE调用。从命令行调用它是一个
- en: TODO
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: LLDB
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LLDB
- en: TODO
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
