- en: Navigation
  id: totrans-0
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导航
- en: '[index](genindex.html "General Index")'
  id: totrans-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[索引](genindex.html "总目录")'
- en: '[previous](index.html "A Little Book of Python for Multivariate Analysis")
    |'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[上一页](index.html "Python多元分析小册子") |'
- en: '[A Little Book of Python for Multivariate Analysis 0.1 documentation](index.html)
    »'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python多元分析小册子 0.1 文档](index.html) »'
- en: '# A Little Book of Python for Multivariate Analysis'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '# Python多元分析小册子'
- en: This booklet tells you how to use the Python ecosystem to carry out some simple
    multivariate analyses, with a focus on principal components analysis (PCA) and
    linear discriminant analysis (LDA).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本小册子告诉您如何使用 Python 生态系统进行一些简单的多元分析，重点放在主成分分析（PCA）和线性判别分析（LDA）上。
- en: This booklet assumes that the reader has some basic knowledge of multivariate
    analyses, and the principal focus of the booklet is not to explain multivariate
    analyses, but rather to explain how to carry out these analyses using Python.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本小册子假定读者对多元分析有一些基本知识，小册子的主要重点不是解释多元分析，而是解释如何使用 Python 进行这些分析。
- en: If you are new to multivariate analysis, and want to learn more about any of
    the concepts presented here, there are a number of good resources, such as for
    example Multivariate Data Analysis by Hair et. al. or Applied Multivariate Data
    Analysis by Everitt and Dunn.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是多元分析的新手，并且想要了解这里介绍的任何概念更多信息，有许多良好的资源，例如 Hair 等人的《多元数据分析》或 Everitt 和 Dunn
    的《应用多元数据分析》。
- en: In the examples in this booklet, I will be using data sets from the [UCI Machine
    Learning Repository](http://archive.ics.uci.edu/ml) [http://archive.ics.uci.edu/ml].
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小册子的示例中，我将使用来自 [UCI 机器学习库](http://archive.ics.uci.edu/ml) [http://archive.ics.uci.edu/ml]
    的数据集。
- en: '## Setting up the python environment'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '## 设置 Python 环境'
- en: '### Install Python'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '### 安装 Python'
- en: Although there are a number of ways of getting Python to your system, for a
    hassle free install and quick start using, I highly recommend downloading and
    installing [Anaconda](https://www.continuum.io/downloads) [https://www.continuum.io/downloads]
    by [Continuum](https://www.continuum.io) [https://www.continuum.io], which is
    a Python distribution that contains the core packages plus a large number of packages
    for scientific computing and tools to easily update them, install new ones, create
    virtual environments, and provide IDEs such as this one, the [Jupyter notebook](https://jupyter.org)
    [https://jupyter.org] (formerly known as ipython notebook).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有多种方法可以将 Python 安装到您的系统中，但为了无忧安装和快速启动，我强烈建议下载并安装 [Anaconda](https://www.continuum.io/downloads)
    [https://www.continuum.io/downloads]，这是由 [Continuum](https://www.continuum.io)
    [https://www.continuum.io] 提供的 Python 发行版，包含核心包以及大量用于科学计算的包和工具，可以轻松更新它们，安装新包，创建虚拟环境，并提供诸如这个
    [Jupyter notebook](https://jupyter.org) [https://jupyter.org]（以前称为 ipython notebook）之类的
    IDE。
- en: 'This notebook was created with python 2.7 version. For exact details, including
    versions of the other libraries, see the `%watermark` directive below.  ### Libraries'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '本笔记本是使用 Python 2.7 版本创建的。有关详细信息，包括其他库的版本，请参见下面的 `%watermark` 指令。  ### 库'
- en: '[Python](https://en.wikipedia.org/wiki/Python_%28programming_language%29) [https://en.wikipedia.org/wiki/Python_%28programming_language%29]
    can typically do less out of the box than other languages, and this is due to
    being a genaral programming language taking a more modular approach, relying on
    other packages for specialized tasks.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python](https://en.wikipedia.org/wiki/Python_%28programming_language%29) [https://en.wikipedia.org/wiki/Python_%28programming_language%29]
    通常比其他语言的开箱即用功能少，这是因为它是一种通用编程语言，采用更模块化的方法，依赖其他包来执行专门的任务。'
- en: 'The following libraries are used here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用以下库：
- en: '[pandas](http://pandas.pydata.org) [http://pandas.pydata.org]: The Python Data
    Analysis Library is used for storing the data in dataframes and manipulation.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pandas](http://pandas.pydata.org) [http://pandas.pydata.org]: 用于存储数据框和操作的
    Python 数据分析库。'
- en: '[numpy](http://www.numpy.org) [http://www.numpy.org]: Python scientific computing
    library.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[numpy](http://www.numpy.org) [http://www.numpy.org]: Python 科学计算库。'
- en: '[matplotlib](http://matplotlib.org) [http://matplotlib.org]: Python plotting
    library.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[matplotlib](http://matplotlib.org) [http://matplotlib.org]: Python 绘图库。'
- en: '[seaborn](http://stanford.edu/~mwaskom/software/seaborn/) [http://stanford.edu/~mwaskom/software/seaborn/]:
    Statistical data visualization based on matplotlib.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[seaborn](http://stanford.edu/~mwaskom/software/seaborn/) [http://stanford.edu/~mwaskom/software/seaborn/]:
    基于 matplotlib 的统计数据可视化。'
- en: '[scikit-learn](http://scikit-learn.org/stable/) [http://scikit-learn.org/stable/]:
    Sklearn is a machine learning library for Python.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scikit-learn](http://scikit-learn.org/stable/) [http://scikit-learn.org/stable/]:
    Sklearn是一个用于Python的机器学习库。'
- en: '[scipy.stats](http://docs.scipy.org/doc/scipy/reference/stats.html) [http://docs.scipy.org/doc/scipy/reference/stats.html]:
    Provides a number of probability distributions and statistical functions.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats](http://docs.scipy.org/doc/scipy/reference/stats.html) [http://docs.scipy.org/doc/scipy/reference/stats.html]:
    提供了许多概率分布和统计函数。'
- en: These should have been installed for you if you have installed the Anaconda
    Python distribution.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了Anaconda Python发行版，则应该已经为您安装了这些。
- en: 'The libraries versions are:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 库的版本如下：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]  ### Importing the libraries'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]  ### 导入库'
- en: '[PRE2]  ### Python console'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE2]  ### Python控制台'
- en: A useful tool to have aside a notebook for quick experimentation and data visualization
    is a python console attached. Uncomment the following line if you wish to have
    one.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 用于快速实验和数据可视化的便笺旁边有一个附加的Python控制台是一个有用的工具。如果您希望拥有一个，请取消以下行的注释。
- en: '[PRE3]  ## Reading Multivariate Analysis Data into Python'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE3]  ## 将多元分析数据读入Python'
- en: The first thing that you will want to do to analyse your multivariate data will
    be to read it into Python, and to plot the data. For data analysis an I will be
    using the [Python Data Analysis Library](http://pandas.pydata.org) [http://pandas.pydata.org]
    (pandas, imported as `pd`), which provides a number of useful functions for reading
    and analyzing the data, as well as a `DataFrame` storage structure, similar to
    that found in other popular data analytics languages, such as R.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要分析多元数据，您首先需要做的事情是将其读入Python，并绘制数据。对于数据分析，我将使用[Python数据分析库](http://pandas.pydata.org)
    [http://pandas.pydata.org]（pandas，导入为`pd`），它提供了许多有用的函数用于读取和分析数据，以及一个`DataFrame`存储结构，类似于其他流行的数据分析语言中的结构，例如R。
- en: 'For example, the file http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data
    contains data on concentrations of 13 different chemicals in wines grown in the
    same region in Italy that are derived from three different cultivars. The data
    set looks like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，文件http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data包含了来自意大利同一地区种植的三种不同培育者的葡萄酒中13种不同化学物质的浓度数据。数据集如下所示：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There is one row per wine sample. The first column contains the cultivar of
    a wine sample (labelled 1, 2 or 3), and the following thirteen columns contain
    the concentrations of the 13 different chemicals in that sample. The columns are
    separated by commas, i.e. it is a comma-separated (csv) file without a header
    row.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个葡萄酒样本一行。第一列包含葡萄酒样本的培育者（标记为1、2或3），接下来的十三列包含该样本中13种不同化学物质的浓度。列之间用逗号分隔，即它是一个没有标题行的逗号分隔（csv）文件。
- en: The data can be read in a pandas dataframe using the `read_csv()` function.
    The argument `header=None` tells the function that there is no header in the beginning
    of the file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`read_csv()`函数将数据读入pandas dataframe。参数`header=None`告诉函数文件开头没有标题。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|  | V1 | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|  | V1 | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14
    |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- |'
- en: '| 0 | 1 | 14.23 | 1.71 | 2.43 | 15.6 | 127 | 2.80 | 3.06 | 0.28 | 2.29 | 5.640000
    | 1.04 | 3.92 | 1065 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 14.23 | 1.71 | 2.43 | 15.6 | 127 | 2.80 | 3.06 | 0.28 | 2.29 | 5.640000
    | 1.04 | 3.92 | 1065 |'
- en: '| 1 | 1 | 13.20 | 1.78 | 2.14 | 11.2 | 100 | 2.65 | 2.76 | 0.26 | 1.28 | 4.380000
    | 1.05 | 3.40 | 1050 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 13.20 | 1.78 | 2.14 | 11.2 | 100 | 2.65 | 2.76 | 0.26 | 1.28 | 4.380000
    | 1.05 | 3.40 | 1050 |'
- en: '| 2 | 1 | 13.16 | 2.36 | 2.67 | 18.6 | 101 | 2.80 | 3.24 | 0.30 | 2.81 | 5.680000
    | 1.03 | 3.17 | 1185 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1 | 13.16 | 2.36 | 2.67 | 18.6 | 101 | 2.80 | 3.24 | 0.30 | 2.81 | 5.680000
    | 1.03 | 3.17 | 1185 |'
- en: '| 3 | 1 | 14.37 | 1.95 | 2.50 | 16.8 | 113 | 3.85 | 3.49 | 0.24 | 2.18 | 7.800000
    | 0.86 | 3.45 | 1480 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1 | 14.37 | 1.95 | 2.50 | 16.8 | 113 | 3.85 | 3.49 | 0.24 | 2.18 | 7.800000
    | 0.86 | 3.45 | 1480 |'
- en: '| 4 | 1 | 13.24 | 2.59 | 2.87 | 21.0 | 118 | 2.80 | 2.69 | 0.39 | 1.82 | 4.320000
    | 1.04 | 2.93 | 735 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 1 | 13.24 | 2.59 | 2.87 | 21.0 | 118 | 2.80 | 2.69 | 0.39 | 1.82 | 4.320000
    | 1.04 | 2.93 | 735 |'
- en: '| 5 | 1 | 14.20 | 1.76 | 2.45 | 15.2 | 112 | 3.27 | 3.39 | 0.34 | 1.97 | 6.750000
    | 1.05 | 2.85 | 1450 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 1 | 14.20 | 1.76 | 2.45 | 15.2 | 112 | 3.27 | 3.39 | 0.34 | 1.97 | 6.750000
    | 1.05 | 2.85 | 1450 |'
- en: '| 6 | 1 | 14.39 | 1.87 | 2.45 | 14.6 | 96 | 2.50 | 2.52 | 0.30 | 1.98 | 5.250000
    | 1.02 | 3.58 | 1290 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 1 | 14.39 | 1.87 | 2.45 | 14.6 | 96 | 2.50 | 2.52 | 0.30 | 1.98 | 5.250000
    | 1.02 | 3.58 | 1290 |'
- en: '| 7 | 1 | 14.06 | 2.15 | 2.61 | 17.6 | 121 | 2.60 | 2.51 | 0.31 | 1.25 | 5.050000
    | 1.06 | 3.58 | 1295 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 1 | 14.06 | 2.15 | 2.61 | 17.6 | 121 | 2.60 | 2.51 | 0.31 | 1.25 | 5.050000
    | 1.06 | 3.58 | 1295 |'
- en: '| 8 | 1 | 14.83 | 1.64 | 2.17 | 14.0 | 97 | 2.80 | 2.98 | 0.29 | 1.98 | 5.200000
    | 1.08 | 2.85 | 1045 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 1 | 14.83 | 1.64 | 2.17 | 14.0 | 97 | 2.80 | 2.98 | 0.29 | 1.98 | 5.200000
    | 1.08 | 2.85 | 1045 |'
- en: '| 9 | 1 | 13.86 | 1.35 | 2.27 | 16.0 | 98 | 2.98 | 3.15 | 0.22 | 1.85 | 7.220000
    | 1.01 | 3.55 | 1045 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 1 | 13.86 | 1.35 | 2.27 | 16.0 | 98 | 2.98 | 3.15 | 0.22 | 1.85 | 7.220000
    | 1.01 | 3.55 | 1045 |'
- en: '| ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ...
    | ... | ... |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ...
    | ... | ... |'
- en: '| 168 | 3 | 13.58 | 2.58 | 2.69 | 24.5 | 105 | 1.55 | 0.84 | 0.39 | 1.54 |
    8.660000 | 0.74 | 1.80 | 750 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 168 | 3 | 13.58 | 2.58 | 2.69 | 24.5 | 105 | 1.55 | 0.84 | 0.39 | 1.54 |
    8.660000 | 0.74 | 1.80 | 750 |'
- en: '| 169 | 3 | 13.40 | 4.60 | 2.86 | 25.0 | 112 | 1.98 | 0.96 | 0.27 | 1.11 |
    8.500000 | 0.67 | 1.92 | 630 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 169 | 3 | 13.40 | 4.60 | 2.86 | 25.0 | 112 | 1.98 | 0.96 | 0.27 | 1.11 |
    8.500000 | 0.67 | 1.92 | 630 |'
- en: '| 170 | 3 | 12.20 | 3.03 | 2.32 | 19.0 | 96 | 1.25 | 0.49 | 0.40 | 0.73 | 5.500000
    | 0.66 | 1.83 | 510 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 170 | 3 | 12.20 | 3.03 | 2.32 | 19.0 | 96 | 1.25 | 0.49 | 0.40 | 0.73 | 5.500000
    | 0.66 | 1.83 | 510 |'
- en: '| 171 | 3 | 12.77 | 2.39 | 2.28 | 19.5 | 86 | 1.39 | 0.51 | 0.48 | 0.64 | 9.899999
    | 0.57 | 1.63 | 470 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 171 | 3 | 12.77 | 2.39 | 2.28 | 19.5 | 86 | 1.39 | 0.51 | 0.48 | 0.64 | 9.899999
    | 0.57 | 1.63 | 470 |'
- en: '| 172 | 3 | 14.16 | 2.51 | 2.48 | 20.0 | 91 | 1.68 | 0.70 | 0.44 | 1.24 | 9.700000
    | 0.62 | 1.71 | 660 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 172 | 3 | 14.16 | 2.51 | 2.48 | 20.0 | 91 | 1.68 | 0.70 | 0.44 | 1.24 | 9.700000
    | 0.62 | 1.71 | 660 |'
- en: '| 173 | 3 | 13.71 | 5.65 | 2.45 | 20.5 | 95 | 1.68 | 0.61 | 0.52 | 1.06 | 7.700000
    | 0.64 | 1.74 | 740 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 173 | 3 | 13.71 | 5.65 | 2.45 | 20.5 | 95 | 1.68 | 0.61 | 0.52 | 1.06 | 7.700000
    | 0.64 | 1.74 | 740 |'
- en: '| 174 | 3 | 13.40 | 3.91 | 2.48 | 23.0 | 102 | 1.80 | 0.75 | 0.43 | 1.41 |
    7.300000 | 0.70 | 1.56 | 750 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 174 | 3 | 13.40 | 3.91 | 2.48 | 23.0 | 102 | 1.80 | 0.75 | 0.43 | 1.41 |
    7.300000 | 0.70 | 1.56 | 750 |'
- en: '| 175 | 3 | 13.27 | 4.28 | 2.26 | 20.0 | 120 | 1.59 | 0.69 | 0.43 | 1.35 |
    10.200000 | 0.59 | 1.56 | 835 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 175 | 3 | 13.27 | 4.28 | 2.26 | 20.0 | 120 | 1.59 | 0.69 | 0.43 | 1.35 |
    10.200000 | 0.59 | 1.56 | 835 |'
- en: '| 176 | 3 | 13.17 | 2.59 | 2.37 | 20.0 | 120 | 1.65 | 0.68 | 0.53 | 1.46 |
    9.300000 | 0.60 | 1.62 | 840 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 176 | 3 | 13.17 | 2.59 | 2.37 | 20.0 | 120 | 1.65 | 0.68 | 0.53 | 1.46 |
    9.300000 | 0.60 | 1.62 | 840 |'
- en: '| 177 | 3 | 14.13 | 4.10 | 2.74 | 24.5 | 96 | 2.05 | 0.76 | 0.56 | 1.35 | 9.200000
    | 0.61 | 1.60 | 560 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 177 | 3 | 14.13 | 4.10 | 2.74 | 24.5 | 96 | 2.05 | 0.76 | 0.56 | 1.35 | 9.200000
    | 0.61 | 1.60 | 560 |'
- en: 178 rows × 14 columns
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 178 行 × 14 列
- en: 'In this case the data on 178 samples of wine has been read into the variable
    `data`.  ## Plotting Multivariate Data'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，178个葡萄酒样本的数据已被读入变量`data`。## 绘制多变量数据
- en: Once you have read a multivariate data set into python, the next step is usually
    to make a plot of the data.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将多变量数据集读入python，下一步通常是绘制数据的图表。
- en: '### A Matrix Scatterplot'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '### 矩阵散点图'
- en: One common way of plotting multivariate data is to make a *matrix scatterplot*,
    showing each pair of variables plotted against each other. We can use the `scatter_matrix()`
    function from the `pandas.tools.plotting` package to do this.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 用于绘制多变量数据的一种常见方法是制作*矩阵散点图*，显示每对变量相互绘制。我们可以使用`pandas.tools.plotting`包中的`scatter_matrix()`函数来实现这一点。
- en: 'To use the `scatter_matrix()` function, you need to give it as its input the
    variables that you want included in the plot. Say for example, that we just want
    to include the variables corresponding to the concentrations of the first five
    chemicals. These are stored in columns V2-V6 of the variable `data`. The parameter
    `diagonal` allows us to specify whether to plot a histogram (`"hist"`) or a Kernel
    Density Estimation (`"kde"`) for the variable. We can extract just these columns
    from the variable `data` by typing:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`scatter_matrix()`函数，您需要将要包含在图中的变量作为其输入。例如，假设我们只想包括与前五种化学品浓度对应的变量。这些存储在变量`data`的列V2-V6中。参数`diagonal`允许我们指定是绘制直方图(`"hist"`)还是核密度估计(`"kde"`)。我们可以通过输入以下内容从变量`data`中提取这些列：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|  | V2 | V3 | V4 | V5 | V6 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '|  | V2 | V3 | V4 | V5 | V6 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 0 | 14.23 | 1.71 | 2.43 | 15.6 | 127 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 14.23 | 1.71 | 2.43 | 15.6 | 127 |'
- en: '| 1 | 13.20 | 1.78 | 2.14 | 11.2 | 100 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 13.20 | 1.78 | 2.14 | 11.2 | 100 |'
- en: '| 2 | 13.16 | 2.36 | 2.67 | 18.6 | 101 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 13.16 | 2.36 | 2.67 | 18.6 | 101 |'
- en: '| 3 | 14.37 | 1.95 | 2.50 | 16.8 | 113 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 14.37 | 1.95 | 2.50 | 16.8 | 113 |'
- en: '| 4 | 13.24 | 2.59 | 2.87 | 21.0 | 118 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 13.24 | 2.59 | 2.87 | 21.0 | 118 |'
- en: '| 5 | 14.20 | 1.76 | 2.45 | 15.2 | 112 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 14.20 | 1.76 | 2.45 | 15.2 | 112 |'
- en: '| 6 | 14.39 | 1.87 | 2.45 | 14.6 | 96 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 14.39 | 1.87 | 2.45 | 14.6 | 96 |'
- en: '| 7 | 14.06 | 2.15 | 2.61 | 17.6 | 121 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 14.06 | 2.15 | 2.61 | 17.6 | 121 |'
- en: '| 8 | 14.83 | 1.64 | 2.17 | 14.0 | 97 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 14.83 | 1.64 | 2.17 | 14.0 | 97 |'
- en: '| 9 | 13.86 | 1.35 | 2.27 | 16.0 | 98 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 13.86 | 1.35 | 2.27 | 16.0 | 98 |'
- en: '| ... | ... | ... | ... | ... | ... |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... | ... | ... | ... | ... |'
- en: '| 168 | 13.58 | 2.58 | 2.69 | 24.5 | 105 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 168 | 13.58 | 2.58 | 2.69 | 24.5 | 105 |'
- en: '| 169 | 13.40 | 4.60 | 2.86 | 25.0 | 112 |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 169 | 13.40 | 4.60 | 2.86 | 25.0 | 112 |'
- en: '| 170 | 12.20 | 3.03 | 2.32 | 19.0 | 96 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 170 | 12.20 | 3.03 | 2.32 | 19.0 | 96 |'
- en: '| 171 | 12.77 | 2.39 | 2.28 | 19.5 | 86 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 171 | 12.77 | 2.39 | 2.28 | 19.5 | 86 |'
- en: '| 172 | 14.16 | 2.51 | 2.48 | 20.0 | 91 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 172 | 14.16 | 2.51 | 2.48 | 20.0 | 91 |'
- en: '| 173 | 13.71 | 5.65 | 2.45 | 20.5 | 95 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 173 | 13.71 | 5.65 | 2.45 | 20.5 | 95 |'
- en: '| 174 | 13.40 | 3.91 | 2.48 | 23.0 | 102 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 174 | 13.40 | 3.91 | 2.48 | 23.0 | 102 |'
- en: '| 175 | 13.27 | 4.28 | 2.26 | 20.0 | 120 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 175 | 13.27 | 4.28 | 2.26 | 20.0 | 120 |'
- en: '| 176 | 13.17 | 2.59 | 2.37 | 20.0 | 120 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 176 | 13.17 | 2.59 | 2.37 | 20.0 | 120 |'
- en: '| 177 | 14.13 | 4.10 | 2.74 | 24.5 | 96 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 177 | 14.13 | 4.10 | 2.74 | 24.5 | 96 |'
- en: 178 rows × 5 columns
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 178行×5列
- en: 'To make a matrix scatterplot of just these 5 variables using the `scatter_matrix()`
    function we type:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`scatter_matrix()`函数制作只包含这5个变量的矩阵散点图，我们键入：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![png](_images/a_little_book_of_python_for_multivariate_analysis_17_0.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![png](_images/a_little_book_of_python_for_multivariate_analysis_17_0.png)'
- en: In this matrix scatterplot, the diagonal cells show histograms of each of the
    variables, in this case the concentrations of the first five chemicals (variables
    V2, V3, V4, V5, V6).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个矩阵散点图中，对角线单元格显示了每个变量的直方图，在本例中是前五种化学品的浓度（变量V2、V3、V4、V5、V6）。
- en: 'Each of the off-diagonal cells is a scatterplot of two of the five chemicals,
    for example, the second cell in the first row is a scatterplot of V2 (y-axis)
    against V3 (x-axis).  ### A Scatterplot with the Data Points Labelled by their
    Group'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每个非对角单元格都是五种化学品中的两种之间的散点图，例如，第一行中的第二个单元格是V2（y轴）与V3（x轴）的散点图。### 通过其组标记的散点图
- en: If you see an interesting scatterplot for two variables in the matrix scatterplot,
    you may want to plot that scatterplot in more detail, with the data points labelled
    by their group (their cultivar in this case).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在矩阵散点图中看到两个变量的有趣散点图，你可能想详细绘制该散点图，数据点标记为它们的组别（在本例中为它们的培育品种）。
- en: For example, in the matrix scatterplot above, the cell in the third column of
    the fourth row down is a scatterplot of V5 (x-axis) against V4 (y-axis). If you
    look at this scatterplot, it appears that there may be a positive relationship
    between V5 and V4.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在上述矩阵散点图中，第三列第四行下的单元格是V5（x轴）与V4（y轴）的散点图。如果你看这个散点图，似乎V5和V4之间可能存在正相关关系。
- en: 'We may therefore decide to examine the relationship between `V5` and `V4` more
    closely, by plotting a scatterplot of these two variables, with the data points
    labelled by their group (their cultivar). To plot a scatterplot of two variables,
    we can use the `lmplot` function from the `seaborn` package. The V4 and V5 variables
    are stored in the columns V4 and V5 of the variable `data`. The first two parameters
    in the `lmplot()` function are the columns to be plotted against each other in
    x-y, the third parameter specifies the data, the `hue` parameter is the column
    name used for the labels of the datapoints, i.e. the classes they belong to, lastly,
    the `fit_reg` parameter is set to `False` when we do not want to plot a regression
    model relating to the x-y variables. Therefore, to plot the scatterplot, we type:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可能决定更仔细地研究V5和V4之间的关系，通过绘制这两个变量的散点图，并将数据点标记为它们的组别（在本例中为它们的培育品种）。要绘制两个变量的散点图，我们可以使用`seaborn`包中的`lmplot`函数。变量V4和V5存储在变量`data`的列V4和V5中。`lmplot()`函数中的前两个参数是要在x-y中绘制的列，第三个参数指定数据，`hue`参数是用于数据点标签的列名，即它们所属的类，最后，当我们不想绘制与x-y变量相关的回归模型时，`fit_reg`参数设置为`False`。因此，要绘制散点图，我们键入：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![png](_images/a_little_book_of_python_for_multivariate_analysis_20_0.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![png](_images/a_little_book_of_python_for_multivariate_analysis_20_0.png)'
- en: 'We can see from the scatterplot of V4 versus V5 that the wines from cultivar
    2 seem to have lower values of V4 compared to the wines of cultivar 1.  ### A
    Profile Plot'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从V4与V5的散点图中可以看出，培育品种2的葡萄酒似乎具有较低的V4值，而与培育品种1的葡萄酒相比。### 个人资料图
- en: Another type of plot that is useful is a *profile plot*, which shows the variation
    in each of the variables, by plotting the value of each of the variables for each
    of the samples.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有用的绘图类型是*个人资料图*，它通过绘制每个样本的每个变量的值来显示每个变量的变化。
- en: 'This can be achieved using `pandas` plot facilities, which are built upon `matplotlib`,
    by running the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过使用`pandas`的绘图功能来实现，它建立在`matplotlib`之上，通过运行以下命令：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![png](_images/a_little_book_of_python_for_multivariate_analysis_23_0.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![png](_images/a_little_book_of_python_for_multivariate_analysis_23_0.png)'
- en: 'It is clear from the profile plot that the mean and standard deviation for
    V6 is quite a lot higher than that for the other variables.  ## Calculating Summary
    Statistics for Multivariate Data'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从概要图中可以清楚地看出，V6的均值和标准差比其他变量要高得多。## 计算多元数据的摘要统计
- en: Another thing that you are likely to want to do is to calculate summary statistics
    such as the mean and standard deviation for each of the variables in your multivariate
    data set.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想要做的另一件事是计算多元数据集中每个变量的摘要统计，例如均值和标准差。
- en: This is easy to do, using the `mean()` and `std()` functions in `numpy` and
    applying them to the dataframe using its member function `apply`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易做到，使用`numpy`中的`mean()`和`std()`函数，并将它们应用于数据框架，使用其成员函数`apply`。
- en: Pandas allows to do simple operations directly calling them as methods, for
    example we could do compute the means of a dataframe `df` by calling `df.mean()`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas允许直接调用简单操作作为方法，例如我们可以通过调用`df.mean()`计算数据框架`df`的均值。
- en: An alternative option is to use the `apply` method of the `pandas.DataFrame`
    class, which applies the passed argument function along the input axis of the
    DataFrame. This method is powerful as it allows passing any function we want to
    be applied in our data.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是使用`pandas.DataFrame`类的`apply`方法，它沿着数据框架的输入轴应用传递的参数函数。这种方法非常强大，因为它允许传递任何我们想要应用于数据的函数。
- en: 'For example, say we want to calculate the mean and standard deviations of each
    of the 13 chemical concentrations in the wine samples. These are stored in columns
    V2-V14 of the variable `data`, which has been previously assigned to `X` for convenience.
    So we type:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想计算葡萄酒样本中每种13种化学物质浓度的均值和标准差。这些存储在变量`data`的列V2-V14中，之前为方便起见已经分配给`X`。因此我们输入：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This tells us that the mean of variable V2 is 13.000618, the mean of V3 is 2.336348,
    and so on.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，变量V2的均值为13.000618，V3的均值为2.336348，依此类推。
- en: 'Similarly, to get the standard deviations of the 13 chemical concentrations,
    we type:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，要获取13种化学物质浓度的标准差，我们输入：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can see here that it would make sense to standardise in order to compare
    the variables because the variables have very different standard deviations -
    the standard deviation of V14 is 314.021657, while the standard deviation of V9
    is just 0.124103\. Thus, in order to compare the variables, we need to standardise
    each variable so that it has a sample variance of 1 and sample mean of 0\. We
    will explain below how to standardise the variables.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，为了比较变量，标准化是有意义的，因为变量的标准差非常不同 - V14的标准差为314.021657，而V9的标准差仅为0.124103。因此，为了比较变量，我们需要标准化每个变量，使其具有样本方差为1和样本均值为0。我们将在下面解释如何标准化变量。
- en: '### Means and Variances Per Group'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '### 每组的均值和方差'
- en: It is often interesting to calculate the means and standard deviations for just
    the samples from a particular group, for example, for the wine samples from each
    cultivar. The cultivar is stored in the column V1 of the variable `data`, which
    has been previously assigned to `y` for convenience.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 计算每个组样本的均值和标准差通常很有趣，例如，对于每个品种的葡萄酒样本。品种存储在变量`data`的列V1中，之前为方便起见已经分配给`y`。
- en: 'To extract out the data for just cultivar 2, we can type:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取出仅仅是品种2的数据，我们可以输入：
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can then calculate the mean and standard deviations of the 13 chemicals’
    concentrations, for just the cultivar 2 samples:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以计算13种化学物质浓度的均值和标准差，仅针对品种2样本：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can calculate the mean and standard deviation of the 13 chemicals’ concentrations
    for just cultivar 1 samples, or for just cultivar 3 samples, in a similar way.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以类似地计算13种化学物质浓度的均值和标准差，仅针对品种1样本，或仅针对品种3样本。
- en: 'However, for convenience, you might want to use the function `printMeanAndSdByGroup()`
    below, which prints out the mean and standard deviation of the variables for each
    group in your data set:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了方便起见，您可能希望使用下面的函数`printMeanAndSdByGroup()`，它会打印出数据集中每个组的变量的均值和标准差：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The arguments of the function are the variables that you want to calculate
    means and standard deviations for (`X`), and the variable containing the group
    of each sample (`y`). For example, to calculate the mean and standard deviation
    for each of the 13 chemical concentrations, for each of the three different wine
    cultivars, we type:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的参数是您要计算均值和标准差的变量（`X`），以及包含每个样本组的变量（`y`）。例如，要计算13种化学浓度中每种酒品种的平均值和标准差，我们可以输入：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|  | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14 |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '|  | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14 |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
- en: '| V1 |  |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| V1 |  |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
- en: '| 1 | 13.744746 | 2.010678 | 2.455593 | 17.037288 | 106.338983 | 2.840169 |
    2.982373 | 0.290000 | 1.899322 | 5.528305 | 1.062034 | 3.157797 | 1115.711864
    |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 13.744746 | 2.010678 | 2.455593 | 17.037288 | 106.338983 | 2.840169 |
    2.982373 | 0.290000 | 1.899322 | 5.528305 | 1.062034 | 3.157797 | 1115.711864
    |'
- en: '| 2 | 12.278732 | 1.932676 | 2.244789 | 20.238028 | 94.549296 | 2.258873 |
    2.080845 | 0.363662 | 1.630282 | 3.086620 | 1.056282 | 2.785352 | 519.507042 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 12.278732 | 1.932676 | 2.244789 | 20.238028 | 94.549296 | 2.258873 |
    2.080845 | 0.363662 | 1.630282 | 3.086620 | 1.056282 | 2.785352 | 519.507042 |'
- en: '| 3 | 13.153750 | 3.333750 | 2.437083 | 21.416667 | 99.312500 | 1.678750 |
    0.781458 | 0.447500 | 1.153542 | 7.396250 | 0.682708 | 1.683542 | 629.895833 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 13.153750 | 3.333750 | 2.437083 | 21.416667 | 99.312500 | 1.678750 |
    0.781458 | 0.447500 | 1.153542 | 7.396250 | 0.682708 | 1.683542 | 629.895833 |'
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '|  | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14 |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '|  | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14 |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
- en: '| V1 |  |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| V1 |  |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
- en: '| 1 | 0.458192 | 0.682689 | 0.225233 | 2.524651 | 10.409595 | 0.336077 | 0.394111
    | 0.069453 | 0.408602 | 1.228032 | 0.115491 | 0.354038 | 219.635449 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0.458192 | 0.682689 | 0.225233 | 2.524651 | 10.409595 | 0.336077 | 0.394111
    | 0.069453 | 0.408602 | 1.228032 | 0.115491 | 0.354038 | 219.635449 |'
- en: '| 2 | 0.534162 | 1.008391 | 0.313238 | 3.326097 | 16.635097 | 0.541507 | 0.700713
    | 0.123085 | 0.597813 | 0.918393 | 0.201503 | 0.493064 | 156.100173 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 0.534162 | 1.008391 | 0.313238 | 3.326097 | 16.635097 | 0.541507 | 0.700713
    | 0.123085 | 0.597813 | 0.918393 | 0.201503 | 0.493064 | 156.100173 |'
- en: '| 3 | 0.524689 | 1.076514 | 0.182756 | 2.234515 | 10.776433 | 0.353233 | 0.290431
    | 0.122840 | 0.404555 | 2.286743 | 0.113243 | 0.269262 | 113.891805 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 0.524689 | 1.076514 | 0.182756 | 2.234515 | 10.776433 | 0.353233 | 0.290431
    | 0.122840 | 0.404555 | 2.286743 | 0.113243 | 0.269262 | 113.891805 |'
- en: '[PRE23]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|  | 0 |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '|  | 0 |'
- en: '| --- | --- |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| V1 |  |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| V1 |  |'
- en: '| --- | --- |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '--- | --- |'
- en: '| 1 | 59 |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 59 |'
- en: '| 2 | 71 |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 71 |'
- en: '| 3 | 48 |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 48 |'
- en: 'The function `printMeanAndSdByGroup()` also prints out the number of samples
    in each group. In this case, we see that there are 59 samples of cultivar 1, 71
    of cultivar 2, and 48 of cultivar 3.  ### Between-groups Variance and Within-groups
    Variance for a Variable'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`printMeanAndSdByGroup()`还会输出每个组中的样本数量。在这个例子中，我们看到品种1有59个样本，品种2有71个样本，品种3有48个样本。###
    变量的组间方差和组内方差
- en: 'If we want to calculate the within-groups variance for a particular variable
    (for example, for a particular chemical’s concentration), we can use the function
    `calcWithinGroupsVariance()` below:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要计算特定变量的组内方差（例如，某种化学物质的浓度），我们可以使用下面的函数`calcWithinGroupsVariance()`：
- en: '[PRE24]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `variable` parameter of the function `calcWithinGroupsVariance()` is the
    input variable for which we wish to compute its within-groups variance for the
    groups given in `groupvariable`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`calcWithinGroupsVariance()`的`variable`参数是我们希望为`groupvariable`中给定的组计算其组内方差的输入变量。
- en: 'So for example, to calculate the within-groups variance of the variable V2
    (the concentration of the first chemical), we type:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要计算变量V2（第一种化学物质的浓度）的组内方差，我们可以输入：
- en: '[PRE25]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Thus, the within-groups variance for V2 is 0.2620525.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，变量V2的组内方差为0.2620525。
- en: 'We can calculate the between-groups variance for a particular variable (eg.
    V2) using the function `calcBetweenGroupsVariance()` below:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用下面的函数`calcBetweenGroupsVariance()`来计算特定变量（例如V2）的组间方差：
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Similarly to the parameters of the function `calcWithinGroupsVariance()`, the
    `variable` parameter of the function `calcBetweenGroupsVariance()` is the input
    variable for which we wish to compute its between-groups variance for the groups
    given in `groupvariable`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 与函数`calcWithinGroupsVariance()`的参数类似，函数`calcBetweenGroupsVariance()`的`variable`参数是我们希望计算其组间方差的输入变量，给定在`groupvariable`中的组。
- en: 'So for example, to calculate the between-groups variance of the variable V2
    (the concentration of the first chemical), we type:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，要计算变量V2（第一种化学品的浓度）的组间方差，我们输入：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Thus, the between-groups variance of V2 is 35.397425.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，V2的组间方差为35.397425。
- en: 'We can calculate the *separation* achieved by a variable as its between-groups
    variance devided by its within-groups variance. Thus, the separation achieved
    by V2 is calculated as:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个变量的组间方差除以其组内方差来计算其*分离度*。因此，V2实现的分离度计算如下：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you want to calculate the separations achieved by all of the variables in
    a multivariate data set, you can use the function `calcSeparations()` below:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要计算多元数据集中所有变量实现的分离度，可以使用下面的函数`calcSeparations()`：
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For example, to calculate the separations for each of the 13 chemical concentrations,
    we type:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要计算13种化学品浓度的分离度，我们输入：
- en: '[PRE33]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Thus, the individual variable which gives the greatest separations between
    the groups (the wine cultivars) is V8 (separation 233.9). As we will discuss below,
    the purpose of linear discriminant analysis (LDA) is to find the linear combination
    of the individual variables that will give the greatest separation between the
    groups (cultivars here). This hopefully will give a better separation than the
    best separation achievable by any individual variable (233.9 for V8 here).  ###
    Between-groups Covariance and Within-groups Covariance for Two Variables'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使得组（葡萄酒品种）之间分离度最大的单个变量是V8（分离度233.9）。正如我们将在下文讨论的，线性判别分析（LDA）的目的是找到个体变量的线性组合，以实现组（这里是品种）之间最大的分离度。这有望比任何单个变量实现的最佳分离度（这里是V8的233.9）更好。###
    两个变量的组间协方差和组内协方差
- en: If you have a multivariate data set with several variables describing sampling
    units from different groups, such as the wine samples from different cultivars,
    it is often of interest to calculate the within-groups covariance and between-groups
    variance for pairs of the variables.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个描述来自不同组的采样单位的多元数据集，例如来自不同品种的葡萄酒样本，通常有兴趣计算一对变量的组内协方差和组间方差。
- en: 'This can be done using the following functions:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下函数完成：
- en: '[PRE35]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'For example, to calculate the within-groups covariance for variables V8 and
    V11, we type:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要计算变量V8和V11的组内协方差，我们输入：
- en: '[PRE36]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'For example, to calculate the between-groups covariance for variables V8 and
    V11, we type:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要计算变量V8和V11的组间协方差，我们输入：
- en: '[PRE39]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Thus, for V8 and V11, the between-groups covariance is -60.41 and the within-groups
    covariance is 0.29\. Since the within-groups covariance is positive (0.29), it
    means V8 and V11 are positively related within groups: for individuals from the
    same group, individuals with a high value of V8 tend to have a high value of V11,
    and vice versa. Since the between-groups covariance is negative (-60.41), V8 and
    V11 are negatively related between groups: groups with a high mean value of V8
    tend to have a low mean value of V11, and vice versa.  ### Calculating Correlations
    for Multivariate Data¶'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于V8和V11，组间协方差为-60.41，组内协方差为0.29。由于组内协方差为正值（0.29），这意味着V8和V11在组内呈正相关：对于同一组的个体，V8值高的个体往往具有较高的V11值，反之亦然。由于组间协方差为负值（-60.41），V8和V11在组间呈负相关：具有较高平均V8值的组往往具有较低平均V11值，反之亦然。###
    计算多元数据的相关性
- en: It is often of interest to investigate whether any of the variables in a multivariate
    data set are significantly correlated.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 通常有兴趣研究多元数据集中的变量是否存在显著相关性。
- en: 'To calculate the linear (Pearson) correlation coefficient for a pair of variables,
    you can use the `pearsonr()` function from `scipy.stats` package. For example,
    to calculate the correlation coefficient for the first two chemicals’ concentrations,
    V2 and V3, we type:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算一对变量的线性（皮尔逊）相关系数，可以使用`scipy.stats`包中的`pearsonr()`函数。例如，要计算前两种化学品浓度V2和V3的相关系数，我们输入：
- en: '[PRE41]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This tells us that the correlation coefficient is about 0.094, which is a very
    weak correlation. Furthermore, the *p-value* for the statistical test of whether
    the correlation coefficient is significantly different from zero is 0.21\. This
    is much greater than 0.05 (which we can use here as a cutoff for statistical significance),
    so there is very weak evidence that that the correlation is non-zero.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们相关系数约为0.094，这是一个非常弱的相关性。此外，用于检验相关系数是否显著不同于零的统计检验的*p值*为0.21。这远大于0.05（我们可以将其作为统计显著性的截止值），因此几乎没有证据表���相关性不为零。
- en: If you have a lot of variables, you can use the `pandas.DataFrame` method `corr()`
    to calculate a correlation matrix that shows the correlation coefficient for each
    pair of variables.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有很多变量，可以使用`pandas.DataFrame`方法`corr()`来计算一个相关矩阵，显示每对变量之间的相关系数。
- en: '[PRE43]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '|  | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '|  | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14 |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
- en: '| V2 | 1.000000 | 0.094397 | 0.211545 | -0.310235 | 0.270798 | 0.289101 | 0.236815
    | -0.155929 | 0.136698 | 0.546364 | -0.071747 | 0.072343 | 0.643720 |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| V2 | 1.000000 | 0.094397 | 0.211545 | -0.310235 | 0.270798 | 0.289101 | 0.236815
    | -0.155929 | 0.136698 | 0.546364 | -0.071747 | 0.072343 | 0.643720 |'
- en: '| V3 | 0.094397 | 1.000000 | 0.164045 | 0.288500 | -0.054575 | -0.335167 |
    -0.411007 | 0.292977 | -0.220746 | 0.248985 | -0.561296 | -0.368710 | -0.192011
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| V3 | 0.094397 | 1.000000 | 0.164045 | 0.288500 | -0.054575 | -0.335167 |
    -0.411007 | 0.292977 | -0.220746 | 0.248985 | -0.561296 | -0.368710 | -0.192011
    |'
- en: '| V4 | 0.211545 | 0.164045 | 1.000000 | 0.443367 | 0.286587 | 0.128980 | 0.115077
    | 0.186230 | 0.009652 | 0.258887 | -0.074667 | 0.003911 | 0.223626 |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| V4 | 0.211545 | 0.164045 | 1.000000 | 0.443367 | 0.286587 | 0.128980 | 0.115077
    | 0.186230 | 0.009652 | 0.258887 | -0.074667 | 0.003911 | 0.223626 |'
- en: '| V5 | -0.310235 | 0.288500 | 0.443367 | 1.000000 | -0.083333 | -0.321113 |
    -0.351370 | 0.361922 | -0.197327 | 0.018732 | -0.273955 | -0.276769 | -0.440597
    |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| V5 | -0.310235 | 0.288500 | 0.443367 | 1.000000 | -0.083333 | -0.321113 |
    -0.351370 | 0.361922 | -0.197327 | 0.018732 | -0.273955 | -0.276769 | -0.440597
    |'
- en: '| V6 | 0.270798 | -0.054575 | 0.286587 | -0.083333 | 1.000000 | 0.214401 |
    0.195784 | -0.256294 | 0.236441 | 0.199950 | 0.055398 | 0.066004 | 0.393351 |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| V6 | 0.270798 | -0.054575 | 0.286587 | -0.083333 | 1.000000 | 0.214401 |
    0.195784 | -0.256294 | 0.236441 | 0.199950 | 0.055398 | 0.066004 | 0.393351 |'
- en: '| V7 | 0.289101 | -0.335167 | 0.128980 | -0.321113 | 0.214401 | 1.000000 |
    0.864564 | -0.449935 | 0.612413 | -0.055136 | 0.433681 | 0.699949 | 0.498115 |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| V7 | 0.289101 | -0.335167 | 0.128980 | -0.321113 | 0.214401 | 1.000000 |
    0.864564 | -0.449935 | 0.612413 | -0.055136 | 0.433681 | 0.699949 | 0.498115 |'
- en: '| V8 | 0.236815 | -0.411007 | 0.115077 | -0.351370 | 0.195784 | 0.864564 |
    1.000000 | -0.537900 | 0.652692 | -0.172379 | 0.543479 | 0.787194 | 0.494193 |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| V8 | 0.236815 | -0.411007 | 0.115077 | -0.351370 | 0.195784 | 0.864564 |
    1.000000 | -0.537900 | 0.652692 | -0.172379 | 0.543479 | 0.787194 | 0.494193 |'
- en: '| V9 | -0.155929 | 0.292977 | 0.186230 | 0.361922 | -0.256294 | -0.449935 |
    -0.537900 | 1.000000 | -0.365845 | 0.139057 | -0.262640 | -0.503270 | -0.311385
    |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| V9 | -0.155929 | 0.292977 | 0.186230 | 0.361922 | -0.256294 | -0.449935 |
    -0.537900 | 1.000000 | -0.365845 | 0.139057 | -0.262640 | -0.503270 | -0.311385
    |'
- en: '| V10 | 0.136698 | -0.220746 | 0.009652 | -0.197327 | 0.236441 | 0.612413 |
    0.652692 | -0.365845 | 1.000000 | -0.025250 | 0.295544 | 0.519067 | 0.330417 |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| V10 | 0.136698 | -0.220746 | 0.009652 | -0.197327 | 0.236441 | 0.612413 |
    0.652692 | -0.365845 | 1.000000 | -0.025250 | 0.295544 | 0.519067 | 0.330417 |'
- en: '| V11 | 0.546364 | 0.248985 | 0.258887 | 0.018732 | 0.199950 | -0.055136 |
    -0.172379 | 0.139057 | -0.025250 | 1.000000 | -0.521813 | -0.428815 | 0.316100
    |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| V11 | 0.546364 | 0.248985 | 0.258887 | 0.018732 | 0.199950 | -0.055136 |
    -0.172379 | 0.139057 | -0.025250 | 1.000000 | -0.521813 | -0.428815 | 0.316100
    |'
- en: '| V12 | -0.071747 | -0.561296 | -0.074667 | -0.273955 | 0.055398 | 0.433681
    | 0.543479 | -0.262640 | 0.295544 | -0.521813 | 1.000000 | 0.565468 | 0.236183
    |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| V12 | -0.071747 | -0.561296 | -0.074667 | -0.273955 | 0.055398 | 0.433681
    | 0.543479 | -0.262640 | 0.295544 | -0.521813 | 1.000000 | 0.565468 | 0.236183
    |'
- en: '| V13 | 0.072343 | -0.368710 | 0.003911 | -0.276769 | 0.066004 | 0.699949 |
    0.787194 | -0.503270 | 0.519067 | -0.428815 | 0.565468 | 1.000000 | 0.312761 |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| V13 | 0.072343 | -0.368710 | 0.003911 | -0.276769 | 0.066004 | 0.699949 |
    0.787194 | -0.503270 | 0.519067 | -0.428815 | 0.565468 | 1.000000 | 0.312761 |'
- en: '| V14 | 0.643720 | -0.192011 | 0.223626 | -0.440597 | 0.393351 | 0.498115 |
    0.494193 | -0.311385 | 0.330417 | 0.316100 | 0.236183 | 0.312761 | 1.000000 |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| V14 | 0.643720 | -0.192011 | 0.223626 | -0.440597 | 0.393351 | 0.498115 |
    0.494193 | -0.311385 | 0.330417 | 0.316100 | 0.236183 | 0.312761 | 1.000000 |'
- en: A better graphical representation of the correlation matrix is via a correlation
    matrix plot in the form of a *heatmap*.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 通过*热图*形式的相关矩阵图，可以更好地展示相关矩阵的相关性。
- en: '[PRE44]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '![png](_images/a_little_book_of_python_for_multivariate_analysis_68_0.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![png](_images/a_little_book_of_python_for_multivariate_analysis_68_0.png)'
- en: Or an alternative nice visualization is via a Hinton diagram. The color of the
    boxes determines the sign of the correlation, in this case red for positive and
    blue for negative correlations; while the size of the boxes determines their magnitude,
    the bigger the box the higher the magnitude.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 或者另一种很好的可视化方式是通过 Hinton 图。 方框的颜色确定相关性的符号，本例中红色表示正相关，蓝色表示负相关； 而方框的大小确定其大小，方框越大，其数量越大。
- en: '[PRE45]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![png](_images/a_little_book_of_python_for_multivariate_analysis_70_0.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![png](_images/a_little_book_of_python_for_multivariate_analysis_70_0.png)'
- en: Although the correlation matrix and diagrams are useful for quickly looking
    to identify the strongest correlations, they still require labor work to find
    the top `N` strongest correlations. For this you can use the function `mosthighlycorrelated()`
    below.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管相关矩阵和图表对于快速查找识别最强相关性非常有用，但仍需要劳动工作来查找前 N 个最强相关性。 为此，您可以使用下面的函数 `mosthighlycorrelated()`。
- en: The function `mosthighlycorrelated()` will print out the linear correlation
    coefficients for each pair of variables in your data set, in order of the correlation
    coefficient. This lets you see very easily which pair of variables are most highly
    correlated.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `mosthighlycorrelated()` 将按照相关系数的顺序打印出数据集中每对变量的线性相关系数。 这让您非常容易地看到哪对变量是最高度相关的。
- en: '[PRE46]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The arguments of the function are the variables that you want to calculate the
    correlations for, and the number of top correlation coefficients to print out
    (for example, you can tell it to print out the largest 10 correlation coefficients,
    or the largest 20).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的参数是要计算相关性的变量，以及要打印出的前 N 个相关系数的数量（例如，您可以告诉它打印出最大的 10 个相关系数或最大的 20 个相关系数）。
- en: 'For example, to calculate correlation coefficients between the concentrations
    of the 13 chemicals in the wine samples, and to print out the top 10 pairwise
    correlation coefficients, you can type:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要计算葡萄酒样品中 13 种化学物质浓度之间的相关系数，并打印出前 10 个成对相关系数，您可以键入：
- en: '[PRE47]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '|  | FirstVariable | SecondVariable | Correlation |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '|  | 第一个变量 | 第二个变量 | 相关系数 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 0 | V7 | V8 | 0.864564 |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 0 | V7 | V8 | 0.864564 |'
- en: '| 1 | V8 | V13 | 0.787194 |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| 1 | V8 | V13 | 0.787194 |'
- en: '| 2 | V7 | V13 | 0.699949 |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 2 | V7 | V13 | 0.699949 |'
- en: '| 3 | V8 | V10 | 0.652692 |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| 3 | V8 | V10 | 0.652692 |'
- en: '| 4 | V2 | V14 | 0.643720 |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 4 | V2 | V14 | 0.643720 |'
- en: '| 5 | V7 | V10 | 0.612413 |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 5 | V7 | V10 | 0.612413 |'
- en: '| 6 | V12 | V13 | 0.565468 |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 6 | V12 | V13 | 0.565468 |'
- en: '| 7 | V3 | V12 | -0.561296 |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 7 | V3 | V12 | -0.561296 |'
- en: '| 8 | V2 | V11 | 0.546364 |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 8 | V2 | V11 | 0.546364 |'
- en: '| 9 | V8 | V12 | 0.543479 |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 9 | V8 | V12 | 0.543479 |'
- en: 'This tells us that the pair of variables with the highest linear correlation
    coefficient are V7 and V8 (correlation = 0.86 approximately).  ### Standardising
    Variables'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '这告诉我们，具有最高线性相关系数的变量对是 V7 和 V8（相关性约为 0.86）。 ### 标准化变量'
- en: If you want to compare different variables that have different units, are very
    different variances, it is a good idea to first standardise the variables.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想比较具有不同单位的不同变量，方差非常不同，那么首先标准化变量是一个好主意。
- en: For example, we found above that the concentrations of the 13 chemicals in the
    wine samples show a wide range of standard deviations, from 0.124103 for V9 (variance
    0.015402) to 314.021657 for V14 (variance 98609.60). This is a range of approximately
    6,402,389-fold in the variances.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们发现上面葡萄酒样品中的 13 种化学物质浓度显示出很大范围的标准偏差，从 V9 的 0.124103（方差 0.015402）到 V14 的
    314.021657（方差 98609.60）。 这是方差中约 6,402,389 倍的范围。
- en: As a result, it is not a good idea to use the unstandardised chemical concentrations
    as the input for a principal component analysis (PCA, see below) of the wine samples,
    as if you did that, the first principal component would be dominated by the variables
    which show the largest variances, such as V14.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不建议使用未标准化的化学浓度作为葡萄酒样品主成分分析（PCA，请参见下文）的输入，因为如果这样做，第一个主成分将由显示最大方差的变量主导，例如 V14。
- en: Thus, it would be a better idea to first standardise the variables so that they
    all have variance 1 and mean 0, and to then carry out the principal component
    analysis on the standardised data. This would allow us to find the principal components
    that provide the best low-dimensional representation of the variation in the original
    data, without being overly biased by those variables that show the most variance
    in the original data.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先将变量标准化为方差为1，均值为0可能是一个更好的主意，然后在标准化数据上进行主成分分析。这样可以使我们找到提供原始数据变化最佳低维表示的主成分，而不会被那些在原始数据中显示最大方差的变量过度偏置。
- en: You can standardise variables by using the `scale()` function from the package
    `sklearn.preprocessing`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`sklearn.preprocessing`包中的`scale()`函数对变量进行标准化。
- en: 'For example, to standardise the concentrations of the 13 chemicals in the wine
    samples, we type:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要对葡萄酒样本中的13种化学物质的浓度进行标准化，我们键入：
- en: '[PRE48]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]  ## Principal Component Analysis'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE52]  ## 主成分分析'
- en: The purpose of principal component analysis is to find the best low-dimensional
    representation of the variation in a multivariate data set. For example, in the
    case of the wine data set, we have 13 chemical concentrations describing wine
    samples from three different cultivars. We can carry out a principal component
    analysis to investigate whether we can capture most of the variation between samples
    using a smaller number of new variables (principal components), where each of
    these new variables is a linear combination of all or some of the 13 chemical
    concentrations.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 主成分分析的目的是找到多变量数据集变化的最佳低维表示。例如，在葡萄酒数据集的情况下，我们有13种描述来自三种不同品种葡萄酒样本的化学浓度。我们可以进行主成分分析，以调查我们是否可以使用更少的新变量（主成分）捕获样本之间的大部分变化，其中每个新变量都是所有或部分13种化学浓度的线性组合。
- en: To carry out a principal component analysis (PCA) on a multivariate data set,
    the first step is often to standardise the variables under study using the `scale()`
    function (see above). This is necessary if the input variables have very different
    variances, which is true in this case as the concentrations of the 13 chemicals
    have very different variances (see above).
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要对多变量数据集进行主成分分析（PCA），通常第一步是使用`scale()`函数对研究中的变量进行标准化（请参见上文）。如果输入变量的方差非常不同，则有必要进行这样的标准化，这在这种情况下是正确的，因为13种化学品的浓度具有非常不同的方差（请参见上文）。
- en: Once you have standardised your variables, you can carry out a principal component
    analysis using the `PCA` class from `sklearn.decomposition` package and its `fit`
    method, which fits the model with the data `X`. The default `solver` is Singular
    Value Decomposition (“svd”). For more information you can type `help(PCA)` in
    the python console.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您标准化了变量，就可以使用`sklearn.decomposition`包中的`PCA`类及其`fit`方法进行主成分分析，该方法将数据`X`与模型拟合。默认的`solver`是奇异值分解（“svd”）。有关更多信息，您可以在Python控制台中键入`help(PCA)`。
- en: 'For example, to standardise the concentrations of the 13 chemicals in the wine
    samples, and carry out a principal components analysis on the standardised concentrations,
    we type:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要对葡萄酒样本中的13种化学物质的浓度进行标准化，并对标准化的浓度进行主成分分析，我们键入：
- en: '[PRE53]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You can get a summary of the principal component analysis results using the
    `pca_summary()` function below, which simulates the output of R’s `summary` function
    on a PCA model:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用下面的`pca_summary()`函数来获取主成分分析结果的摘要，该函数模拟了R的`summary`函数对PCA模型的输出：
- en: '[PRE54]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The parameters of the `print_pca_summary` function are:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`print_pca_summary`函数的参数是：'
- en: '`pca`: A PCA object'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pca`：一个PCA对象'
- en: '`standardised_data`: The standardised data'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`standardised_data`：标准化后的数据'
- en: '`out (True)`: Print to standard output'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`out (True)`: 输出到标准输出'
- en: '[PRE55]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '|  | sdev | varprop | cumprop |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '|  | 标准差 | 方差比 | 累积比 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '|  | Standard deviation | Proportion of Variance | Cumulative Proportion |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '|  | 标准差 | 方差比例 | 累积比例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| PC1 | 2.169297 | 0.361988 | 0.361988 |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| PC1 | 2.169297 | 0.361988 | 0.361988 |'
- en: '| PC2 | 1.580182 | 0.192075 | 0.554063 |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| PC2 | 1.580182 | 0.192075 | 0.554063 |'
- en: '| PC3 | 1.202527 | 0.111236 | 0.665300 |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| PC3 | 1.202527 | 0.111236 | 0.665300 |'
- en: '| PC4 | 0.958631 | 0.070690 | 0.735990 |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| PC4 | 0.958631 | 0.070690 | 0.735990 |'
- en: '| PC5 | 0.923704 | 0.065633 | 0.801623 |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| PC5 | 0.923704 | 0.065633 | 0.801623 |'
- en: '| PC6 | 0.801035 | 0.049358 | 0.850981 |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| PC6 | 0.801035 | 0.049358 | 0.850981 |'
- en: '| PC7 | 0.742313 | 0.042387 | 0.893368 |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| PC7 | 0.742313 | 0.042387 | 0.893368 |'
- en: '| PC8 | 0.590337 | 0.026807 | 0.920175 |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| PC8 | 0.590337 | 0.026807 | 0.920175 |'
- en: '| PC9 | 0.537476 | 0.022222 | 0.942397 |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| PC9 | 0.537476 | 0.022222 | 0.942397 |'
- en: '| PC10 | 0.500902 | 0.019300 | 0.961697 |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| PC10 | 0.500902 | 0.019300 | 0.961697 |'
- en: '| PC11 | 0.475172 | 0.017368 | 0.979066 |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| PC11 | 0.475172 | 0.017368 | 0.979066 |'
- en: '| PC12 | 0.410817 | 0.012982 | 0.992048 |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| PC12 | 0.410817 | 0.012982 | 0.992048 |'
- en: '| PC13 | 0.321524 | 0.007952 | 1.000000 |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| PC13 | 0.321524 | 0.007952 | 1.000000 |'
- en: 'This gives us the standard deviation of each component, and the proportion
    of variance explained by each component. The standard deviation of the components
    is stored in a named row called `sdev` of the output variable made by the `pca_summary`
    function and stored in the `summary` variable:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出了每个组分的标准偏差，以及每个组分解释的方差比例。组分的标准偏差存储在由`pca_summary`函数生成的输出变量的名为`sdev`的命名行中，并存储在`summary`变量中：
- en: '[PRE57]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '|  | Standard deviation |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '|  | 标准偏差 |'
- en: '| --- | --- |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| PC1 | 2.169297 |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| PC1 | 2.169297 |'
- en: '| PC2 | 1.580182 |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| PC2 | 1.580182 |'
- en: '| PC3 | 1.202527 |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| PC3 | 1.202527 |'
- en: '| PC4 | 0.958631 |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| PC4 | 0.958631 |'
- en: '| PC5 | 0.923704 |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| PC5 | 0.923704 |'
- en: '| PC6 | 0.801035 |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| PC6 | 0.801035 |'
- en: '| PC7 | 0.742313 |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| PC7 | 0.742313 |'
- en: '| PC8 | 0.590337 |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| PC8 | 0.590337 |'
- en: '| PC9 | 0.537476 |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| PC9 | 0.537476 |'
- en: '| PC10 | 0.500902 |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| PC10 | 0.500902 |'
- en: '| PC11 | 0.475172 |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| PC11 | 0.475172 |'
- en: '| PC12 | 0.410817 |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| PC12 | 0.410817 |'
- en: '| PC13 | 0.321524 |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| PC13 | 0.321524 |'
- en: 'The total variance explained by the components is the sum of the variances
    of the components:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 总方差由各组分的方差之和得出：
- en: '[PRE58]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In this case, we see that the total variance is 13, which is equal to the number
    of standardised variables (13 variables). This is because for standardised data,
    the variance of each standardised variable is 1\. The total variance is equal
    to the sum of the variances of the individual variables, and since the variance
    of each standardised variable is 1, the total variance should be equal to the
    number of variables (13 here).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们看到总方差为13，等于标准化变量的数量（13个变量）。这是因为对于标准化数据，每个标准化变量的方差为1。总方差等于各个变量的方差之和，而每个标准化变量的方差为1，因此总方差应等于变量的数量（此处为13）。
- en: '### Deciding How Many Principal Components to Retain'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '### 决定保留多少主成分'
- en: 'In order to decide how many principal components should be retained, it is
    common to summarise the results of a principal components analysis by making a
    scree plot, which we can do using the `screeplot()` function below:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 为了决定应保留多少主成分，通常可以通过制作一张屏幕图来总结主成分分析的结果，我们可以使用下面的`screeplot()`函数来实现：
- en: '[PRE60]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '![png](_images/a_little_book_of_python_for_multivariate_analysis_92_0.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![png](_images/a_little_book_of_python_for_multivariate_analysis_92_0.png)'
- en: The most obvious change in slope in the scree plot occurs at component 4, which
    is the “elbow” of the scree plot. Therefore, it cound be argued based on the basis
    of the scree plot that the first three components should be retained.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕图中最明显的斜率变化发生在第4个组分，这是屏幕图的“拐点”。因此，基于屏幕图的基础可以主张保留前三个组分。
- en: 'Another way of deciding how many components to retain is to use *Kaiser’s criterion*:
    that we should only retain principal components for which the variance is above
    1 (when principal component analysis was applied to standardised data). We can
    check this by finding the variance of each of the principal components:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种决定保留多少成分的方法是使用*Kaiser准则*：我们只应保留方差大于1的主成分（在对标准化数据进行主成分分析时）。我们可以通过找到每个主成分的方差来检查这一点：
- en: '[PRE61]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '|  | Standard deviation |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '|  | 标准偏差 |'
- en: '| --- | --- |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| PC1 | 4.705850 |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| PC1 | 4.705850 |'
- en: '| PC2 | 2.496974 |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| PC2 | 2.496974 |'
- en: '| PC3 | 1.446072 |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| PC3 | 1.446072 |'
- en: '| PC4 | 0.918974 |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| PC4 | 0.918974 |'
- en: '| PC5 | 0.853228 |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| PC5 | 0.853228 |'
- en: '| PC6 | 0.641657 |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| PC6 | 0.641657 |'
- en: '| PC7 | 0.551028 |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| PC7 | 0.551028 |'
- en: '| PC8 | 0.348497 |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| PC8 | 0.348497 |'
- en: '| PC9 | 0.288880 |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| PC9 | 0.288880 |'
- en: '| PC10 | 0.250902 |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| PC10 | 0.250902 |'
- en: '| PC11 | 0.225789 |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| PC11 | 0.225789 |'
- en: '| PC12 | 0.168770 |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| PC12 | 0.168770 |'
- en: '| PC13 | 0.103378 |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| PC13 | 0.103378 |'
- en: We see that the variance is above 1 for principal components 1, 2, and 3 (which
    have variances 4.71, 2.50, and 1.45, respectively). Therefore, using Kaiser’s
    criterion, we would retain the first three principal components.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到主成分1、2和3的方差都大于1（分别为4.71、2.50和1.45）。因此，根据Kaiser准则，我们将保留前三个主成分。
- en: 'A third way to decide how many principal components to retain is to decide
    to keep the number of components required to explain at least some minimum amount
    of the total variance. For example, if it is important to explain at least 80%
    of the variance, we would retain the first five principal components, as we can
    see from cumulative proportions (`summary.cumprop`) that the first five principal
    components explain 80.2% of the variance (while the first four components explain
    just 73.6%, so are not sufficient).  ### Loadings for the Principal Components'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 决定保留多少主成分的第三种方法是决定保留至少解释总方差的一定最小比例的主成分数量。例如，如果重要的是解释至少80%的方差，我们将保留前五个主成分，因为我们可以从累积比例（`summary.cumprop`）中看到，前五个主成分解释了80.2%的方差（而前四个主成分仅解释了73.6%，因此不足够）。###
    主成分的载荷
- en: The loadings for the principal components are stored in a named element `components_`
    of the variable returned by `PCA().fit()`. This contains a matrix with the loadings
    of each principal component, where the first column in the matrix contains the
    loadings for the first principal component, the second column contains the loadings
    for the second principal component, and so on.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 主成分的载荷存储在由`PCA().fit()`返回的变量的命名元素`components_`中。这包含一个矩阵，其中包含每个主成分的载荷，矩阵的第一列包含第一个主成分的载荷，第二列包含第二个主成分的载荷，依此类推。
- en: 'Therefore, to obtain the loadings for the first principal component in our
    analysis of the 13 chemical concentrations in wine samples, we type:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们对葡萄酒样本中的13种化学浓度进行分析时，要获得第一个主成分的载荷，我们输入：
- en: '[PRE62]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'This means that the first principal component is a linear combination of the
    variables:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着第一个主成分是变量的线性组合：
- en: '[PRE64]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: where Z2, Z3, Z4, ..., Z14 are the standardised versions of the variables V2,
    V3, V4, ..., V14 (that each have mean of 0 and variance of 1).
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 其中Z2、Z3、Z4，...，Z14是变量V2、V3、V4，...，V14的标准化版本（每个版本的均值为0，方差为1）。
- en: 'Note that the square of the loadings sum to 1, as this is a constraint used
    in calculating the loadings:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，载荷的平方和为1，因为这是计算载荷时使用的约束条件：
- en: '[PRE65]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'To calculate the values of the first principal component, we can define our
    own function to calculate a principal component given the loadings and the input
    variables’ values:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算第一个主成分的值，我们可以定义自己的函数，根据载荷和输入变量的值来计算主成分：
- en: '[PRE67]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We can then use the function to calculate the values of the first principal
    component for each sample in our wine data:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用该函数计算我们葡萄酒数据中每个样本的第一个主成分的值：
- en: '[PRE68]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In fact, the values of the first principal component are computed with the
    following, so we can compare those values to the ones that we calculated, and
    they should agree:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，第一个主成分的值是用以下方式计算的，因此我们可以将这些值与我们计算的值进行比较，它们应该一致：
- en: '[PRE70]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: We see that they do agree.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到它们确实一致。
- en: The first principal component has highest (in absolute value) loadings for V8
    (-0.423), V7 (-0.395), V13 (-0.376), V10 (-0.313), V12 (-0.297), V14 (-0.287),
    V9 (0.299), V3 (0.245), and V5 (0.239). The loadings for V8, V7, V13, V10, V12
    and V14 are negative, while those for V9, V3, and V5 are positive. Therefore,
    an interpretation of the first principal component is that it represents a contrast
    between the concentrations of V8, V7, V13, V10, V12, and V14, and the concentrations
    of V9, V3 and V5.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个主成分对V8（-0.423）、V7（-0.395）、V13（-0.376）、V10（-0.313）、V12（-0.297）、V14（-0.287）、V9（0.299）、V3（0.245）和V5（0.239）具有最高（绝对值）的载荷。V8、V7、V13、V10、V12和V14的载荷为负，而V9、V3和V5的载荷为正。因此，第一个主成分的解释是它代表了V8、V7、V13、V10、V12和V14的浓度与V9、V3和V5的浓度之间的对比。
- en: 'Similarly, we can obtain the loadings for the second principal component by
    typing:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以通过输入以下内容来获取第二个主成分的载荷：
- en: '[PRE72]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'This means that the second principal component is a linear combination of the
    variables:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着第二个主成分是变量的线性组合：
- en: '[PRE74]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: where Z1, Z2, Z3, ..., Z14 are the standardised versions of variables V2, V3,
    ..., V14 that each have mean 0 and variance 1.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 其中Z1、Z2、Z3，...，Z14是变量V2、V3，...，V14的标准化版本，每个版本的均值为0，方差为1。
- en: 'Note that the square of the loadings sum to 1, as above:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，载荷的平方和为1，如上所示：
- en: '[PRE75]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The second principal component has highest loadings for V11 (0.530), V2 (0.484),
    V14 (0.365), V4 (0.316), V6 (0.300), V12 (-0.279), and V3 (0.225). The loadings
    for V11, V2, V14, V4, V6 and V3 are positive, while the loading for V12 is negative.
    Therefore, an interpretation of the second principal component is that it represents
    a contrast between the concentrations of V11, V2, V14, V4, V6 and V3, and the
    concentration of V12\. Note that the loadings for V11 (0.530) and V2 (0.484) are
    the largest, so the contrast is mainly between the concentrations of V11 and V2,
    and the concentration of V12.  ### Scatterplots of the Principal Components'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 第二主成分对V11（0.530）、V2（0.484）、V14（0.365）、V4（0.316）、V6（0.300）、V12（-0.279）和V3（0.225）具有最高的载荷。V11、V2、V14、V4、V6和V3的载荷为正，而V12的载荷为负。因此，第二主成分的解释是它代表了V11、V2、V14、V4、V6和V3的浓度与V12的浓度之间的对比。请注意，V11（0.530）和V2（0.484）的载荷最大，因此对比主要在V11和V2的浓度之间，以及V12的浓度之间。###
    主成分的散点图
- en: The values of the principal components can be computed by the `transform()`
    (or `fit_transform()`) method of the `PCA` class. It returns a matrix with the
    principal components, where the first column in the matrix contains the first
    principal component, the second column the second component, and so on.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 主成分的值可以通过`PCA`类的`transform()`（或`fit_transform()`）方法计算。它返回一个包含主成分的矩阵，其中矩阵的第一列包含第一个主成分，第二列包含第二个主成分，依此类推。
- en: Thus, in our example, `pca.transform(standardisedX)[:, 0]` contains the first
    principal component, and `pca.transform(standardisedX)[:, 1]` contains the second
    principal component.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们的示例中，`pca.transform(standardisedX)[:, 0]`包含第一个主成分，`pca.transform(standardisedX)[:,
    1]`包含第二个主成分。
- en: 'We can make a scatterplot of the first two principal components, and label
    the data points with the cultivar that the wine samples come from, by typing:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以制作前两个主成分的散点图，并通过输入以下内容为葡萄酒样本的数据点标记出其来自的品种：
- en: '[PRE77]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '![png](_images/a_little_book_of_python_for_multivariate_analysis_112_0.png)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![png](_images/a_little_book_of_python_for_multivariate_analysis_112_0.png)'
- en: The scatterplot shows the first principal component on the x-axis, and the second
    principal component on the y-axis. We can see from the scatterplot that wine samples
    of cultivar 1 have much lower values of the first principal component than wine
    samples of cultivar 3\. Therefore, the first principal component separates wine
    samples of cultivars 1 from those of cultivar 3.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图将第一个主成分显示在x轴上，将第二个主成分显示在y轴上。从散点图中我们可以看到，品种1的葡萄酒样本的第一个主成分值要低得多，而品种3的葡萄酒样本的第一个主成分值要高。因此，第一个主成分将品种1的葡萄酒样本与品种3的葡萄酒样本分开。
- en: We can also see that wine samples of cultivar 2 have much higher values of the
    second principal component than wine samples of cultivars 1 and 3\. Therefore,
    the second principal component separates samples of cultivar 2 from samples of
    cultivars 1 and 3.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到，品种2的葡萄酒样本的第二主成分值比品种1和3的葡萄酒样本要高得多。因此，第二主成分将品种2的样本与品种1和3的样本分开。
- en: Therefore, the first two principal components are reasonably useful for distinguishing
    wine samples of the three different cultivars.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，前两个主成分对于区分三种不同品种的葡萄酒样本是相当有用的。
- en: 'Above, we interpreted the first principal component as a contrast between the
    concentrations of V8, V7, V13, V10, V12, and V14, and the concentrations of V9,
    V3 and V5\. We can check whether this makes sense in terms of the concentrations
    of these chemicals in the different cultivars, by printing out the means of the
    standardised concentration variables in each cultivar, using the `printMeanAndSdByGroup()`
    function (see above):'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，我们将第一个主成分解释为V8、V7、V13、V10、V12和V14的浓度与V9、V3和V5的浓度之间的对比。我们可以通过使用`printMeanAndSdByGroup()`函数（见上文）打印出每个品种中标准化浓度变量的均值，以检查这在不同品种中的化学物质浓度方面是否合理：
- en: '[PRE78]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '|  | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14 |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '|  | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14 |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
- en: '| V1 |  |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| V1 |  |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
- en: '| 1 | 0.919195 | -0.292342 | 0.325604 | -0.737997 | 0.463226 | 0.873362 | 0.956884
    | -0.578985 | 0.540383 | 0.203401 | 0.458847 | 0.771351 | 1.174501 |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0.919195 | -0.292342 | 0.325604 | -0.737997 | 0.463226 | 0.873362 | 0.956884
    | -0.578985 | 0.540383 | 0.203401 | 0.458847 | 0.771351 | 1.174501 |'
- en: '| 2 | -0.891720 | -0.362362 | -0.444958 | 0.223137 | -0.364567 | -0.058067
    | 0.051780 | 0.014569 | 0.069002 | -0.852799 | 0.433611 | 0.245294 | -0.724110
    |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| 2 | -0.891720 | -0.362362 | -0.444958 | 0.223137 | -0.364567 | -0.058067
    | 0.051780 | 0.014569 | 0.069002 | -0.852799 | 0.433611 | 0.245294 | -0.724110
    |'
- en: '| 3 | 0.189159 | 0.895331 | 0.257945 | 0.577065 | -0.030127 | -0.987617 | -1.252761
    | 0.690119 | -0.766287 | 1.011418 | -1.205382 | -1.310950 | -0.372578 |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 0.189159 | 0.895331 | 0.257945 | 0.577065 | -0.030127 | -0.987617 | -1.252761
    | 0.690119 | -0.766287 | 1.011418 | -1.205382 | -1.310950 | -0.372578 |'
- en: '[PRE80]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '|  | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14 |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '|  | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | V10 | V11 | V12 | V13 | V14 |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
- en: '| V1 |  |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| V1 |  |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- |'
- en: '| 1 | 0.565989 | 0.612825 | 0.823302 | 0.758115 | 0.730892 | 0.538506 | 0.395674
    | 0.559639 | 0.715905 | 0.531210 | 0.506699 | 0.500058 | 0.699428 |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0.565989 | 0.612825 | 0.823302 | 0.758115 | 0.730892 | 0.538506 | 0.395674
    | 0.559639 | 0.715905 | 0.531210 | 0.506699 | 0.500058 | 0.699428 |'
- en: '| 2 | 0.659832 | 0.905196 | 1.144991 | 0.998777 | 1.168006 | 0.867674 | 0.703493
    | 0.991797 | 1.047418 | 0.397269 | 0.884060 | 0.696425 | 0.497100 |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 0.659832 | 0.905196 | 1.144991 | 0.998777 | 1.168006 | 0.867674 | 0.703493
    | 0.991797 | 1.047418 | 0.397269 | 0.884060 | 0.696425 | 0.497100 |'
- en: '| 3 | 0.648130 | 0.966347 | 0.668036 | 0.670991 | 0.756649 | 0.565996 | 0.291583
    | 0.989818 | 0.708814 | 0.989176 | 0.496834 | 0.380317 | 0.362688 |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 0.648130 | 0.966347 | 0.668036 | 0.670991 | 0.756649 | 0.565996 | 0.291583
    | 0.989818 | 0.708814 | 0.989176 | 0.496834 | 0.380317 | 0.362688 |'
- en: '[PRE81]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '|  | 0 |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '|  | 0 |'
- en: '| --- | --- |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| V1 |  |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| V1 |  |'
- en: '| --- | --- |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | 59 |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 59 |'
- en: '| 2 | 71 |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 71 |'
- en: '| 3 | 48 |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 48 |'
- en: Does it make sense that the first principal component can separate cultivar
    1 from cultivar 3? In cultivar 1, the mean values of V8 (0.954), V7 (0.871), V13
    (0.769), V10 (0.539), V12 (0.458) and V14 (1.171) are very high compared to the
    mean values of V9 (-0.577), V3 (-0.292) and V5 (-0.736). In cultivar 3, the mean
    values of V8 (-1.249), V7 (-0.985), V13 (-1.307), V10 (-0.764), V12 (-1.202) and
    V14 (-0.372) are very low compared to the mean values of V9 (0.688), V3 (0.893)
    and V5 (0.575). Therefore, it does make sense that principal component 1 is a
    contrast between the concentrations of V8, V7, V13, V10, V12, and V14, and the
    concentrations of V9, V3 and V5; and that principal component 1 can separate cultivar
    1 from cultivar 3.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 第一主成分能够将品种1与品种3区分开，这是否合理？在品种1中，V8（0.954）、V7（0.871）、V13（0.769）、V10（0.539）、V12（0.458）和V14（1.171）的均值相对于V9（-0.577）、V3（-0.292）和V5（-0.736）的均值非常高。在品种3中，V8（-1.249）、V7（-0.985）、V13（-1.307）、V10（-0.764）、V12（-1.202）和V14（-0.372）的均值相对于V9（0.688）、V3（0.893）和V5（0.575）的均值非常低。因此，第一主成分确实是V8、V7、V13、V10、V12和V14的浓度与V9、V3和V5的浓度之间的对比；第一主成分能够将品种1与品种3区分开。
- en: 'Above, we intepreted the second principal component as a contrast between the
    concentrations of V11, V2, V14, V4, V6 and V3, and the concentration of V12\.
    In the light of the mean values of these variables in the different cultivars,
    does it make sense that the second principal component can separate cultivar 2
    from cultivars 1 and 3? In cultivar 1, the mean values of V11 (0.203), V2 (0.917),
    V14 (1.171), V4 (0.325), V6 (0.462) and V3 (-0.292) are not very different from
    the mean value of V12 (0.458). In cultivar 3, the mean values of V11 (1.009),
    V2 (0.189), V14 (-0.372), V4 (0.257), V6 (-0.030) and V3 (0.893) are also not
    very different from the mean value of V12 (-1.202). In contrast, in cultivar 2,
    the mean values of V11 (-0.850), V2 (-0.889), V14 (-0.722), V4 (-0.444), V6 (-0.364)
    and V3 (-0.361) are much less than the mean value of V12 (0.432). Therefore, it
    makes sense that principal component is a contrast between the concentrations
    of V11, V2, V14, V4, V6 and V3, and the concentration of V12; and that principal
    component 2 can separate cultivar 2 from cultivars 1 and 3.  ## Linear Discriminant
    Analysis'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，我们解释了第二主成分作为 V11、V2、V14、V4、V6 和 V3 的浓度与 V12 浓度之间的对比。根据这些变量在不同品种中的均值，在第二主成分能够将品种
    2 与品种 1 和品种 3 区分开是有意义的吗？在品种 1 中，V11（0.203）、V2（0.917）、V14（1.171）、V4（0.325）、V6（0.462）和
    V3（-0.292）的均值与 V12（0.458）的均值并没有太大差异。在品种 3 中，V11（1.009）、V2（0.189）、V14（-0.372）、V4（0.257）、V6（-0.030）和
    V3（0.893）的均值也与 V12（-1.202）的均值并没有太大差异。相反，在品种 2 中，V11（-0.850）、V2（-0.889）、V14（-0.722）、V4（-0.444）、V6（-0.364）和
    V3（-0.361）的均值要远远小于 V12（0.432）的均值。因此，主成分作为 V11、V2、V14、V4、V6 和 V3 的浓度与 V12 浓度之间的对比是有意义的；主成分
    2 能够将品种 2 与品种 1 和品种 3 区分开。## 线性判别分析
- en: The purpose of principal component analysis is to find the best low-dimensional
    representation of the variation in a multivariate data set. For example, in the
    wine data set, we have 13 chemical concentrations describing wine samples from
    three cultivars. By carrying out a principal component analysis, we found that
    most of the variation in the chemical concentrations between the samples can be
    captured using the first two principal components, where each of the principal
    components is a particular linear combination of the 13 chemical concentrations.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 主成分分析的目的是找到多元数据集变化的最佳低维表示。例如，在葡萄酒数据集中，我们有 13 种化学浓度描述来自三个品种的葡萄酒样本。通过进行主成分分析，我们发现化学浓度样本之间的大部分变化可以用前两个主成分来描述，其中每个主成分是
    13 种化学浓度的特定线性组合。
- en: The purpose of linear discriminant analysis (LDA) is to find the linear combinations
    of the original variables (the 13 chemical concentrations here) that gives the
    best possible separation between the groups (wine cultivars here) in our data
    set. *Linear discriminant analysis* is also known as *canonical discriminant analysis*,
    or simply *discriminant analysis*.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 线性判别分析（LDA）的目的是找到原始变量（这里是 13 种化学浓度）的线性组合，以在数据集中实现群组（这里是葡萄酒品种）之间的最佳分离。*线性判别分析*
    也称为*典型判别分析*，或简称*判别分析*。
- en: If we want to separate the wines by cultivar, the wines come from three different
    cultivars, so the number of groups (G) is 3, and the number of variables is 13
    (13 chemicals’ concentrations; p = 13). The maximum number of useful discriminant
    functions that can separate the wines by cultivar is the minimum of G-1 and p,
    and so in this case it is the minimum of 2 and 13, which is 2\. Thus, we can find
    at most 2 useful discriminant functions to separate the wines by cultivar, using
    the 13 chemical concentration variables.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想按品种分开葡萄酒，那么葡萄酒来自三个不同的品种，所以组数（G）为 3，变量数为 13（13 种化学浓度；p = 13）。能够通过品种将葡萄酒分开的有用判别函数的最大数量是
    G-1 和 p 的最小值，在这种情况下是 2 和 13 的最小值，即 2。因此，我们最多可以找到 2 个有用的判别函数，使用 13 种化学浓度变量来按品种分开葡萄酒。
- en: You can carry out a linear discriminant analysis by using the `LinearDiscriminantAnalysis`
    class model from the module `sklearn.discriminant_analysis` and using its method
    `fit()` to fit our `X, y` data.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 `sklearn.discriminant_analysis` 模块的 `LinearDiscriminantAnalysis` 类模型，并使用其
    `fit()` 方法来适应我们的 `X, y` 数据来进行线性判别分析。
- en: 'For example, to carry out a linear discriminant analysis using the 13 chemical
    concentrations in the wine samples, we type:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，要使用葡萄酒样本中的 13 种化学浓度进行线性判别分析，我们输入以下命令：
- en: '[PRE82]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '### Loadings for the Discriminant Functions'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '### 判别函数的载荷'
- en: 'The values of the loadings of the discriminant functions for the wine data
    are stored in the `scalings_` member of the `lda` object model. For a pretty print
    we can type:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 葡萄酒数据的判别函数的载荷值存储在 `lda` 对象模型的 `scalings_` 成员中。为了漂亮打印，我们可以键入：
- en: '[PRE83]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '|  | LD1 | LD2 |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '|  | LD1 | LD2 |'
- en: '| --- | --- | --- |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| V2 | -0.403400 | 0.871793 |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| V2 | -0.403400 | 0.871793 |'
- en: '| V3 | 0.165255 | 0.305380 |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| V3 | 0.165255 | 0.305380 |'
- en: '| V4 | -0.369075 | 2.345850 |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| V4 | -0.369075 | 2.345850 |'
- en: '| V5 | 0.154798 | -0.146381 |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| V5 | 0.154798 | -0.146381 |'
- en: '| V6 | -0.002163 | -0.000463 |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| V6 | -0.002163 | -0.000463 |'
- en: '| V7 | 0.618052 | -0.032213 |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| V7 | 0.618052 | -0.032213 |'
- en: '| V8 | -1.661191 | -0.491998 |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| V8 | -1.661191 | -0.491998 |'
- en: '| V9 | -1.495818 | -1.630954 |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| V9 | -1.495818 | -1.630954 |'
- en: '| V10 | 0.134093 | -0.307088 |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '| V10 | 0.134093 | -0.307088 |'
- en: '| V11 | 0.355056 | 0.253231 |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| V11 | 0.355056 | 0.253231 |'
- en: '| V12 | -0.818036 | -1.515634 |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '| V12 | -0.818036 | -1.515634 |'
- en: '| V13 | -1.157559 | 0.051184 |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| V13 | -1.157559 | 0.051184 |'
- en: '| V14 | -0.002691 | 0.002853 |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| V14 | -0.002691 | 0.002853 |'
- en: 'This means that the first discriminant function is a linear combination of
    the variables:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着第一个判别函数是变量的线性组合：
- en: '[PRE85]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: where V2, V3, ..., V14 are the concentrations of the 14 chemicals found in the
    wine samples. For convenience, the value for each discriminant function (eg. the
    first discriminant function) are scaled so that their mean value is zero (see
    below).
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 V2、V3、...、V14 是葡萄酒样本中发现的 14 种化学物质的浓度。为方便起见，每个判别函数（例如第一个判别函数）的值都经过缩放，使其平均值为零（见下文）。
- en: Note that these loadings are calculated so that the within-group variance of
    each discriminant function for each group (cultivar) is equal to 1, as will be
    demonstrated below.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些载荷是这样计算的，以使每个组（品种）的每个判别函数的组内方差等于 1，如下所示。
- en: 'As mentioned above, these scalings are stored in the named member `scalings_`
    of the object variable returned by `LinearDiscriminantAnalysis().fit(X, y)`. This
    element contains a numpy array, in which the first column contains the loadings
    for the first discriminant function, the second column contains the loadings for
    the second discriminant function and so on. For example, to extract the loadings
    for the first discriminant function, we can type:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，这些缩放值存储在由 `LinearDiscriminantAnalysis().fit(X, y)` 返回的对象变量的命名成员 `scalings_`
    中。该元素包含一个 numpy 数组，其中第一列包含第一个判别函数的载荷，第二列包含第二个判别函数的载荷，依此类推。例如，要提取第一个判别函数的载荷，我们可以键入：
- en: '[PRE86]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Or for “prettier” print, use the dataframe variable created above:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 或者为了“更漂亮”的打印，使用上面创建的 dataframe 变量：
- en: '[PRE88]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'To calculate the values of the first discriminant function, we can define our
    own function `calclda()`:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算第一个判别函数的值，我们可以定义自己的函数 `calclda()`：
- en: '[PRE90]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The function `calclda()` simply calculates the value of a discriminant function
    for each sample in the data set, for example, for the first disriminant function,
    for each sample we calculate the value using the equation:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `calclda()` 简单地计算数据集中每个样本的判别函数的值，例如，对于第一个判别函数，对于每个样本，我们使用以下方程计算值：
- en: '[PRE91]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Furthermore, the `scale()` command is used within the `calclda()` function in
    order to standardise the value of a discriminant function (eg. the first discriminant
    function) so that its mean value (over all the wine samples) is 0.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`calclda()` 函数内部使用 `scale()` 命令来标准化判别函数的值（例如第一个判别函数），使其均值（在所有葡萄酒样本上）为 0。
- en: 'We can use the function `calclda()` to calculate the values of the first discriminant
    function for each sample in our wine data:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用函数 `calclda()` 来计算我们的葡萄酒数据中每个样本的第一个判别函数的值：
- en: '[PRE92]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'In fact, the values of the first linear discriminant function can be calculated
    using the `transform(X)` or `fit_transform(X, y)` methods of the LDA object, so
    we can compare those to the ones that we calculated, and they should agree:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，可以使用 LDA 对象的 `transform(X)` 或 `fit_transform(X, y)` 方法来计算第一个线性判别函数的值，因此我们可以将其与我们计算的值进行比较，它们应该是一致的：
- en: '[PRE94]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: We see that they do agree.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到它们确实是一致的。
- en: It doesn’t matter whether the input variables for linear discriminant analysis
    are standardised or not, unlike for principal components analysis in which it
    is often necessary to standardise the input variables. However, using standardised
    variables in linear discriminant analysis makes it easier to interpret the loadings
    in a linear discriminant function.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 与主成分分析中需要标准化输入变量不同，线性判别分析中的输入变量是否标准化无关紧要。然而，在线性判别分析中使用标准化的变量使得更容易解释判别函数中的载荷。
- en: 'In linear discriminant analysis, the standardised version of an input variable
    is defined so that it has mean zero and within-groups variance of 1\. Thus, we
    can calculate the “group-standardised” variable by subtracting the mean from each
    value of the variable, and dividing by the within-groups standard deviation. To
    calculate the group-standardised version of a set of variables, we can use the
    function `groupStandardise()` below:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 在线性判别分析中，输入变量的标准化版本被定义为具有零均值和组内方差为1。 因此，我们可以通过从变量的每个值中减去均值，并除以组内标准差来计算“组标准化”变量。
    要计算一组变量的组标准化版本，我们可以使用下面的`groupStandardise()`函数：
- en: '[PRE96]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'For example, we can use the `groupStandardise()` function to calculate the
    group-standardised versions of the chemical concentrations in wine samples:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用`groupStandardise()`函数来计算酒样品中化学浓度的组标准化版本：
- en: '[PRE97]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'We can then use the `LinearDiscriminantAnalysis().fit()` method to perform
    linear disriminant analysis on the group-standardised variables:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后可以使用`LinearDiscriminantAnalysis().fit()`方法对组标准化变量进行线性判别分析：
- en: '[PRE98]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '|  | LD1 | LD2 |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '|  | LD1 | LD2 |'
- en: '| --- | --- | --- |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| V2 | -0.206505 | 0.446280 |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| V2 | -0.206505 | 0.446280 |'
- en: '| V3 | 0.155686 | 0.287697 |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
  zh: '| V3 | 0.155686 | 0.287697 |'
- en: '| V4 | -0.094869 | 0.602989 |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
  zh: '| V4 | -0.094869 | 0.602989 |'
- en: '| V5 | 0.438021 | -0.414204 |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
  zh: '| V5 | 0.438021 | -0.414204 |'
- en: '| V6 | -0.029079 | -0.006220 |'
  id: totrans-448
  prefs: []
  type: TYPE_TB
  zh: '| V6 | -0.029079 | -0.006220 |'
- en: '| V7 | 0.270302 | -0.014088 |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
  zh: '| V7 | 0.270302 | -0.014088 |'
- en: '| V8 | -0.870673 | -0.257869 |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
  zh: '| V8 | -0.870673 | -0.257869 |'
- en: '| V9 | -0.163255 | -0.178004 |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| V9 | -0.163255 | -0.178004 |'
- en: '| V10 | 0.066531 | -0.152364 |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
  zh: '| V10 | 0.066531 | -0.152364 |'
- en: '| V11 | 0.536701 | 0.382783 |'
  id: totrans-453
  prefs: []
  type: TYPE_TB
  zh: '| V11 | 0.536701 | 0.382783 |'
- en: '| V12 | -0.128011 | -0.237175 |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
  zh: '| V12 | -0.128011 | -0.237175 |'
- en: '| V13 | -0.464149 | 0.020523 |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '| V13 | -0.464149 | 0.020523 |'
- en: '| V14 | -0.463854 | 0.491738 |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| V14 | -0.463854 | 0.491738 |'
- en: It makes sense to interpret the loadings calculated using the group-standardised
    variables rather than the loadings for the original (unstandardised) variables.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 用组标准化变量解释计算出的载荷而不是原始（未标准化）变量的载荷是有意义的。
- en: In the first discriminant function calculated for the group-standardised variables,
    the largest loadings (in absolute) value are given to V8 (-0.871), V11 (0.537),
    V13 (-0.464), V14 (-0.464), and V5 (0.438). The loadings for V8, V13 and V14 are
    negative, while those for V11 and V5 are positive. Therefore, the discriminant
    function seems to represent a contrast between the concentrations of V8, V13 and
    V14, and the concentrations of V11 and V5.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 在为组标准化变量计算的第一个判别函数中，绝对值最大的载荷分别为V8（-0.871）、V11（0.537）、V13（-0.464）、V14（-0.464）和V5（0.438）。
    V8、V13和V14的载荷为负，而V11和V5的载荷为正。 因此，判别函数似乎代表了V8、V13和V14的浓度与V11和V5的浓度之间的对比。
- en: 'We saw above that the individual variables which gave the greatest separations
    between the groups were V8 (separation 233.93), V14 (207.92), V13 (189.97), V2
    (135.08) and V11 (120.66). These were mostly the same variables that had the largest
    loadings in the linear discriminant function (loading for V8: -0.871, for V14:
    -0.464, for V13: -0.464, for V11: 0.537).'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上面看到，给出各组之间最大分离的个体变量是V8（分离度233.93）、V14（207.92）、V13（189.97）、V2（135.08）和V11（120.66）。
    这些大部分是在线性判别函数中具有最大载荷的变量（V8的载荷：-0.871，V14的载荷：-0.464，V13的载荷：-0.464，V11的载荷：0.537）。
- en: We found above that variables V8 and V11 have a negative between-groups covariance
    (-60.41) and a positive within-groups covariance (0.29). When the between-groups
    covariance and within-groups covariance for two variables have opposite signs,
    it indicates that a better separation between groups can be obtained by using
    a linear combination of those two variables than by using either variable on its
    own.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现上面的变量V8和V11具有负的组间协方差（-60.41）和正的组内协方差（0.29）。 当两个变量的组间协方差和组内协方差的符号相反时，表明通过使用这两个变量的线性组合可以获得比仅使用其中一个变量更好的组别分离。
- en: Thus, given that the two variables V8 and V11 have between-groups and within-groups
    covariances of opposite signs, and that these are two of the variables that gave
    the greatest separations between groups when used individually, it is not surprising
    that these are the two variables that have the largest loadings in the first discriminant
    function.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，考虑到两个变量V8和V11的组间和组内协方差符号相反，并且这两个变量在单独使用时给出了最大的组别分离，因此并不奇怪这两个变量在第一个判别函数中具有最大的载荷。
- en: 'Note that although the loadings for the group-standardised variables are easier
    to interpret than the loadings for the unstandardised variables, the values of
    the discriminant function are the same regardless of whether we standardise the
    input variables or not. For example, for wine data, we can calculate the value
    of the first discriminant function calculated using the unstandardised and group-standardised
    variables by typing:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管组标准化变量的载荷比未标准化变量的载荷更容易解释，但判别函数的值不受输入变量是否标准化的影响是相同的。例如，对于酒数据，我们可以计算使用未标准化和组标准化变量计算的第一个判别函数的值，方法是键入：
- en: '[PRE99]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'We can see that although the loadings are different for the first discriminant
    functions calculated using unstandardised and group-standardised data, the actual
    values of the first discriminant function are the same.  ### Separation Achieved
    by the Discriminant Functions'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，虽然使用未标准化数据和组标准化数据计算出的第一判别函数的载荷不同，但第一判别函数的实际值是相同的。### 判别函数达到的分离度
- en: To calculate the separation achieved by each discriminant function, we first
    need to calculate the value of each discriminant function, by substituting the
    values of the variables into the linear combination for the discriminant function
    (eg. `-0.403*V2 - 0.165*V3 - 0.369*V4 + 0.155*V5 - 0.002*V6 + 0.618*V7 - 1.661*V8
    - 1.496*V9 + 0.134*V10 + 0.355*V11 - 0.818*V12 - 1.158*V13 - 0.003*V14` for the
    first discriminant function), and then scaling the values of the discriminant
    function so that their mean is zero.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算每个判别函数实现的分离度，我们首先需要计算每个判别函数的值，方法是将变量的值代入判别函数的线性组合中（例如，对于第一个判别函数，`-0.403*V2
    - 0.165*V3 - 0.369*V4 + 0.155*V5 - 0.002*V6 + 0.618*V7 - 1.661*V8 - 1.496*V9 +
    0.134*V10 + 0.355*V11 - 0.818*V12 - 1.158*V13 - 0.003*V14`），然后缩放判别函数的值，使它们的平均值为零。
- en: 'As mentioned above, we can do this using the `rpredict()` function which simulates
    the output of the `predict()` function in R. For example, to calculate the value
    of the discriminant functions for the wine data, we type:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，我们可以使用`rpredict()`函数来模拟R中`predict()`函数的输出。例如，要计算酒数据的判别函数的值，我们键入：
- en: '[PRE103]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The returned variable has a named element `x` which is a matrix containing
    the linear discriminant functions: the first column of `x` contains the first
    discriminant function, the second column of `x` contains the second discriminant
    function, and so on (if there are more discriminant functions).'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的变量具有一个命名元素`x`，它是包含线性判别函数的矩阵：`x`的第一列包含第一个判别函数，`x`的第二列包含第二个判别函数，依此类推（如果有更多判别函数）。
- en: 'We can therefore calculate the separations achieved by the two linear discriminant
    functions for the wine data by using the `calcSeparations()` function (see above),
    which calculates the separation as the ratio of the between-groups variance to
    the within-groups variance:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用`calcSeparations()`函数（见上文）来计算酒数据的两个线性判别函数所达到的分离度，该函数将分离度计算为组间方差与组内方差之比：
- en: '[PRE105]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: As mentioned above, the loadings for each discriminant function are calculated
    in such a way that the within-group variance (`Vw`) for each group (wine cultivar
    here) is equal to 1, as we see in the output from `calcSeparations()` above.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，每个判别函数的载荷是这样计算的，即每个组（这里是酒的品种）的组内方差（`Vw`）等于1，正如我们在上面从`calcSeparations()`的输出中看到的。
- en: The output from `calcSeparations()` tells us that the separation achieved by
    the first (best) discriminant function is 794.7, and the separation achieved by
    the second (second best) discriminant function is 361.2.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '`calcSeparations()`的输出告诉我们，第一个（最佳的）判别函数实现的分离度为794.7，第二个（次佳的）判别函数实现的分离度为361.2。'
- en: Therefore, the total separation is the sum of these, which is (`794.652200566216+361.241041493455=1155.893`)
    1155.89, rounded to two decimal places. Therefore, the *percentage separation*
    achieved by the first discriminant function is (`794.652200566216*100/1155.893=`)
    68.75%, and the percentage separation achieved by the second discriminant function
    is (`361.241041493455*100/1155.893=`) 31.25%.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总分离度是这些分离度的总和，即（`794.652200566216+361.241041493455=1155.893`）1155.89，保留两位小数。因此，第一个判别函数实现的*百分比分离度*是（`794.652200566216*100/1155.893=`）68.75%，而第二个判别函数实现的百分比分离度是（`361.241041493455*100/1155.893=`）31.25%。
- en: 'The *proportion of trace* (as reported in R by the `lda()` model) is the percentage
    separation achieved by each discriminant function. For example, for the wine data
    we get the same values as just calculated (68.75% and 31.25%). Note that in `sklearn`
    the proportion of trace is reported as `explained_variance_ratio_` in a `LinearDiscriminantAnalysis`
    model and is computed only for an “eigen” solver, while so far we have been using
    the default one, which is “svd” (Singular Value Decomposition):'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '*迹的比例*（在R中由`lda()`模型报告）是每个判别函数实现的百分比分离。例如，对于葡萄酒数据，我们得到与刚刚计算的相同的值（68.75%和31.25%）。请注意，在`sklearn`中，迹的比例报告为`LinearDiscriminantAnalysis`模型中的`explained_variance_ratio_`，仅对“eigen”求解器计算，而到目前为止，我们一直在使用默认求解器，即“svd”（奇异值分解）：'
- en: '[PRE107]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Therefore, the first discriminant function does achieve a good separation between
    the three groups (three cultivars), but the second discriminant function does
    improve the separation of the groups by quite a large amount, so is it worth using
    the second discriminant function as well. Therefore, to achieve a good separation
    of the groups (cultivars), it is necessary to use both of the first two discriminant
    functions.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，第一个判别函数确实在三个组（三个品种）之间实现了很好的分离，但第二个判别函数在很大程度上提高了组的分离程度，因此是否值得也使用第二个判别函数。因此，为了实现组（品种）的良好分离，有必要使用前两个判别函数。
- en: 'We found above that the largest separation achieved for any of the individual
    variables (individual chemical concentrations) was 233.9 for V8, which is quite
    a lot less than 794.7, the separation achieved by the first discriminant function.
    Therefore, the effect of using more than one variable to calculate the discriminant
    function is that we can find a discriminant function that achieves a far greater
    separation between groups than achieved by any one variable alone.  ### A Stacked
    Histogram of the LDA Values'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前发现，任何单个变量（单个化学浓度）的最大分离值为233.9，远远小于794.7，第一个判别函数实现的分离值。因此，使用多个变量来计算判别函数的效果是，我们可以找到一个判别函数，它在组之间的分离要比任何单个变量单独使用的分离要大得多。###
    线性判别分析（LDA）值的堆积直方图
- en: A nice way of displaying the results of a linear discriminant analysis (LDA)
    is to make a stacked histogram of the values of the discriminant function for
    the samples from different groups (different wine cultivars in our example).
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 显示线性判别分析（LDA）结果的一种好方法是制作不同组样本（我们示例中的不同葡萄酒品种）的判别函数值的堆积直方图。
- en: We can do this using the `ldahist()` function defined below.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用下面定义的`ldahist()`函数来做到这一点。
- en: '[PRE109]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'For example, to make a stacked histogram of the first discriminant function’s
    values for wine samples of the three different wine cultivars, we type:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要制作三种不同葡萄酒品种的葡萄酒样本第一个判别函数值的堆积直方图，我们键入：
- en: '[PRE110]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '![png](_images/a_little_book_of_python_for_multivariate_analysis_150_0.png)'
  id: totrans-489
  prefs: []
  type: TYPE_IMG
  zh: '![png](_images/a_little_book_of_python_for_multivariate_analysis_150_0.png)'
- en: We can see from the histogram that cultivars 1 and 3 are well separated by the
    first discriminant function, since the values for the first cultivar are between
    -6 and -1, while the values for cultivar 3 are between 2 and 6, and so there is
    no overlap in values.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从直方图中看到，品种1和3由第一个判别函数很好地分开，因为第一个品种的值介于-6和-1之间，而品种3的值介于2和6之间，因此值之间没有重叠。
- en: However, the separation achieved by the linear discriminant function on the
    training set may be an overestimate. To get a more accurate idea of how well the
    first discriminant function separates the groups, we would need to see a stacked
    histogram of the values for the three cultivars using some unseen “test set”,
    that is, using a set of data that was not used to calculate the linear discriminant
    function.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，线性判别函数在训练集上实现的分离可能是一个高估。为了更准确地了解第一个判别函数如何将组分开，我们需要看到三个品种的值的堆积直方图，使用一些未见的“测试集”，也就是使用未用于计算线性判别函数的数据集。
- en: We see that the first discriminant function separates cultivars 1 and 3 very
    well, but does not separate cultivars 1 and 2, or cultivars 2 and 3, so well.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，第一个判别函数很好地分开了品种1和3，但并没有很好地分开品种1和2，或品种2和3。
- en: 'We therefore investigate whether the second discriminant function separates
    those cultivars, by making a stacked histogram of the second discriminant function’s
    values:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们调查第二个判别函数是否分开了这些品种，方法是制作第二个判别函数值的堆积直方图：
- en: '[PRE111]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '![png](_images/a_little_book_of_python_for_multivariate_analysis_152_0.png)'
  id: totrans-495
  prefs: []
  type: TYPE_IMG
  zh: '![png](_images/a_little_book_of_python_for_multivariate_analysis_152_0.png)'
- en: We see that the second discriminant function separates cultivars 1 and 2 quite
    well, although there is a little overlap in their values. Furthermore, the second
    discriminant function also separates cultivars 2 and 3 quite well, although again
    there is a little overlap in their values so it is not perfect.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到第二个判别函数很好地区分了品种1和2，尽管它们的值有一些重叠。此外，第二个判别函数也很好地区分了品种2和3，尽管它们的值也有一些重叠，所以并不完美。
- en: 'Thus, we see that two discriminant functions are necessary to separate the
    cultivars, as was discussed above (see the discussion of percentage separation
    above).  ### Scatterplots of the Discriminant Functions'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们看到需要两个判别函数来区分这些品种，正如上面讨论的那样（请参阅上面关于百分比分离的讨论）。### 判别函数的散点图
- en: 'We can obtain a scatterplot of the best two discriminant functions, with the
    data points labelled by cultivar, by typing:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过输入以下内容获得最佳两个判别函数的散点图，数据点按品种标记：
- en: '[PRE112]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '![png](_images/a_little_book_of_python_for_multivariate_analysis_155_0.png)'
  id: totrans-500
  prefs: []
  type: TYPE_IMG
  zh: '![png](_images/a_little_book_of_python_for_multivariate_analysis_155_0.png)'
- en: From the scatterplot of the first two discriminant functions, we can see that
    the wines from the three cultivars are well separated in the scatterplot. The
    first discriminant function (x-axis) separates cultivars 1 and 3 very well, but
    doesn’t not perfectly separate cultivars 1 and 3, or cultivars 2 and 3.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 从前两个判别函数的散点图中，我们可以看到三个品种的葡萄酒在散点图中很好地分开。第一个判别函数（x轴）很好地区分了品种1和3，但并不能完全区分品种1和3，或者品种2和3。
- en: The second discriminant function (y-axis) achieves a fairly good separation
    of cultivars 1 and 3, and cultivars 2 and 3, although it is not totally perfect.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个判别函数（y轴）在很大程度上很好地区分了品种1和3，以及品种2和3，尽管并不完全完美。
- en: 'To achieve a very good separation of the three cultivars, it would be best
    to use both the first and second discriminant functions together, since the first
    discriminant function can separate cultivars 1 and 3 very well, and the second
    discriminant function can separate cultivars 1 and 2, and cultivars 2 and 3, reasonably
    well.  ### Allocation Rules and Misclassification Rate'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现三个品种的非常好的区分，最好同时使用第一个和第二个判别函数，因为第一个判别函数可以很好地区分品种1和3，而第二个判别函数可以相当好地区分品种1和2，以及品种2和3。###
    分配规则和误分类率
- en: 'We can calculate the mean values of the discriminant functions for each of
    the three cultivars using the `printMeanAndSdByGroup()` function (see above):'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`printMeanAndSdByGroup()`函数（见上文）计算每个品种的判别函数的均值：
- en: '[PRE113]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '|  | LD1 | LD2 |'
  id: totrans-507
  prefs: []
  type: TYPE_TB
  zh: '|  | LD1 | LD2 |'
- en: '| --- | --- | --- |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| V1 |  |  |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
  zh: '| V1 |  |  |'
- en: '| --- | --- | --- |'
  id: totrans-510
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | -3.422489 | 1.691674 |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
  zh: '| 1 | -3.422489 | 1.691674 |'
- en: '| 2 | -0.079726 | -2.472656 |'
  id: totrans-512
  prefs: []
  type: TYPE_TB
  zh: '| 2 | -0.079726 | -2.472656 |'
- en: '| 3 | 4.324737 | 1.578120 |'
  id: totrans-513
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 4.324737 | 1.578120 |'
- en: '[PRE115]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '|  | LD1 | LD2 |'
  id: totrans-515
  prefs: []
  type: TYPE_TB
  zh: '|  | LD1 | LD2 |'
- en: '| --- | --- | --- |'
  id: totrans-516
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| V1 |  |  |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
  zh: '| V1 |  |  |'
- en: '| --- | --- | --- |'
  id: totrans-518
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | 0.931467 | 1.008978 |'
  id: totrans-519
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0.931467 | 1.008978 |'
- en: '| 2 | 1.076271 | 0.990268 |'
  id: totrans-520
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1.076271 | 0.990268 |'
- en: '| 3 | 0.930571 | 0.971586 |'
  id: totrans-521
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 0.930571 | 0.971586 |'
- en: '[PRE116]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '|  | 0 |'
  id: totrans-523
  prefs: []
  type: TYPE_TB
  zh: '|  | 0 |'
- en: '| --- | --- |'
  id: totrans-524
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| V1 |  |'
  id: totrans-525
  prefs: []
  type: TYPE_TB
  zh: '| V1 |  |'
- en: '| --- | --- |'
  id: totrans-526
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | 59 |'
  id: totrans-527
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 59 |'
- en: '| 2 | 71 |'
  id: totrans-528
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 71 |'
- en: '| 3 | 48 |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 48 |'
- en: We find that the mean value of the first discriminant function is -3.42248851
    for cultivar 1, -0.07972623 for cultivar 2, and 4.32473717 for cultivar 3\. The
    mid-way point between the mean values for cultivars 1 and 2 is (-3.42248851-0.07972623)/2=-1.751107,
    and the mid-way point between the mean values for cultivars 2 and 3 is (-0.07972623+4.32473717)/2
    = 2.122505.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现第一个判别函数的均值为品种1为-3.42248851，品种2为-0.07972623，品种3为4.32473717。品种1和2均值之间的中间点为（-3.42248851-0.07972623）/2=-1.751107，品种2和3均值之间的中间点为（-0.07972623+4.32473717）/2=2.122505。
- en: 'Therefore, we can use the following allocation rule:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用以下分配规则：
- en: if the first discriminant function is <= -1.751107, predict the sample to be
    from cultivar 1
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果第一个判别函数小于等于-1.751107，则预测样本来自品种1
- en: if the first discriminant function is > -1.751107 and <= 2.122505, predict the
    sample to be from cultivar 2
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果第一个判别函数大于-1.751107且小于等于2.122505，则预测样本来自品种2
- en: if the first discriminant function is > 2.122505, predict the sample to be from
    cultivar 3
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果第一个判别函数大于2.122505，则预测样本来自品种3
- en: 'We can examine the accuracy of this allocation rule by using the `calcAllocationRuleAccuracy()`
    function below:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过下面的`calcAllocationRuleAccuracy()`函数来检验这个分配规则的准确性：
- en: '[PRE117]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'For example, to calculate the accuracy for the wine data based on the allocation
    rule for the first discriminant function, we type:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要根据第一个判别函数的分配规则计算葡萄酒数据的准确性，我们输入：
- en: '[PRE118]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'This can be displayed in a *confusion matrix*:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以显示在一个*混淆矩阵*中：
- en: '[PRE120]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '|  | Allocated to group 1 | Allocated to group 2 | Allocated to group 3 |'
  id: totrans-542
  prefs: []
  type: TYPE_TB
  zh: '|  | 分配给第1组 | 分配给第2组 | 分配给第3组 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-543
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Is group 1 | 56 | 3 | 0 |'
  id: totrans-544
  prefs: []
  type: TYPE_TB
  zh: '| 属于第1组 | 56 | 3 | 0 |'
- en: '| Is group 2 | 5 | 65 | 1 |'
  id: totrans-545
  prefs: []
  type: TYPE_TB
  zh: '| 属于第2组 | 5 | 65 | 1 |'
- en: '| Is group 3 | 0 | 0 | 48 |'
  id: totrans-546
  prefs: []
  type: TYPE_TB
  zh: '| 属于第3组 | 0 | 0 | 48 |'
- en: 'There are 3+5+1=9 wine samples that are misclassified, out of (56+3+5+65+1+48=)
    178 wine samples: 3 samples from cultivar 1 are predicted to be from cultivar
    2, 5 samples from cultivar 2 are predicted to be from cultivar 1, and 1 sample
    from cultivar 2 is predicted to be from cultivar 3\. Therefore, the misclassification
    rate is 9/178, or 5.1%. The misclassification rate is quite low, and therefore
    the accuracy of the allocation rule appears to be relatively high.'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 有3+5+1=9 杯葡萄酒样本被错误分类，共有 (56+3+5+65+1+48=) 178 杯葡萄酒样本：1 杯来自品种 1 的样本被预测为来自品种 2，5
    杯来自品种 2 的样本被预测为来自品种 1，1 杯来自品种 2 的样本被预测为来自品种 3。因此，误分类率为 9/178，即 5.1%。误分类率相当低，因此分配规则的准确性似乎相对较高。
- en: However, this is probably an underestimate of the misclassification rate, as
    the allocation rule was based on this data (this is the *training set*). If we
    calculated the misclassification rate for a separate *test set* consisting of
    data other than that used to make the allocation rule, we would probably get a
    higher estimate of the misclassification rate.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这可能是误分类率的低估，因为分配规则是基于这些数据（这是*训练集*）制定的。如果我们针对一个独立的*测试集*计算误分类率，该测试集包含的数据不同于用于制定分配规则的数据，我们可能会得到一个更高的误分类率估计。
- en: '#### The Python way'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '#### Python 的方式'
- en: 'Python allows to do all the above in a much faster way and providing extended
    automatic report capabilities by using the `sklearn.metrics` module. The above
    confusion matrix and reporting typical performance metrics, such as *precision*,
    *recall*, *f1-score* can be done in python as follows:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: Python 允许以更快的方式进行所有上述操作，并通过使用`sklearn.metrics`模块提供扩展的自动报告功能。上述混淆矩阵和报告典型性能指标，如*精确度*、*召回率*、*F1
    分数*可以在 Python 中如下完成：
- en: '[PRE121]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '|  | Allocated to group 1 | Allocated to group 2 | Allocated to group 3 |'
  id: totrans-554
  prefs: []
  type: TYPE_TB
  zh: '|  | 分配给第1组 | 分配给第2组 | 分配给第3组 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-555
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Is group 1 | 56 | 3 | 0 |'
  id: totrans-556
  prefs: []
  type: TYPE_TB
  zh: '| 属于第1组 | 56 | 3 | 0 |'
- en: '| Is group 2 | 5 | 65 | 1 |'
  id: totrans-557
  prefs: []
  type: TYPE_TB
  zh: '| 属于第2组 | 5 | 65 | 1 |'
- en: '| Is group 3 | 0 | 0 | 48 |'
  id: totrans-558
  prefs: []
  type: TYPE_TB
  zh: '| 属于第3组 | 0 | 0 | 48 |'
- en: '![png](_images/a_little_book_of_python_for_multivariate_analysis_168_2.png)  ##
    Links and Further Reading'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '![png](_images/a_little_book_of_python_for_multivariate_analysis_168_2.png)  ##
    链接和进一步阅读'
- en: Here are some info and links for further reading.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些信息和进一步阅读的链接。
- en: 'To learn about multivariate analysis I would recommend the following:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解多元分析，我推荐以下内容：
- en: '[Multivariate Data Analysis](http://www.bookbutler.co.uk/compare?isbn=9781292021904)
    [http://www.bookbutler.co.uk/compare?isbn=9781292021904] by Hair et. al.'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[多元数据分析](http://www.bookbutler.co.uk/compare?isbn=9781292021904) [http://www.bookbutler.co.uk/compare?isbn=9781292021904]，作者是
    Hair 等人。'
- en: '[Applied Multivariate Data Analysis](http://www.bookbutler.co.uk/compare?isbn=9780340741221)
    [http://www.bookbutler.co.uk/compare?isbn=9780340741221] by Everitt and Dunn.'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[应用多元数据分析](http://www.bookbutler.co.uk/compare?isbn=9780340741221) [http://www.bookbutler.co.uk/compare?isbn=9780340741221]，作者是
    Everitt 和 Dunn。'
- en: 'If you are new to python then you can read one of the overwhelming number of
    tutorials that exist on the web. Here are a couple of links:'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 Python 新手，你可以阅读网络上存在的大量教程之一。以下是一些链接：
- en: The [official tutorial](https://docs.python.org/2/tutorial/) [https://docs.python.org/2/tutorial/]
    by the Python organization. Extensive covering pretty much everything in core
    python and with lots of detailed non-interactive examples.
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 组织的[官方教程](https://docs.python.org/2/tutorial/) [https://docs.python.org/2/tutorial/]。内容广泛，几乎涵盖了核心
    Python 的所有内容，并提供了许多详细的非交互式示例。
- en: 'For those that prefer learning by doing through interactive tutorials here
    are some good ones I would recommend:'
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于那些更喜欢通过互动教程学习的人，这里有一些我推荐的好教程：
- en: '[Codeacademy Python tutorial](https://www.codecademy.com/learn/python) [https://www.codecademy.com/learn/python]'
  id: totrans-567
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Codecademy Python 教程](https://www.codecademy.com/learn/python) [https://www.codecademy.com/learn/python]'
- en: '[learnpython.org](http://www.learnpython.org) [http://www.learnpython.org]'
  id: totrans-568
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[learnpython.org](http://www.learnpython.org)'
- en: 'To learn about data analysis and data science using the Python ecosystem I
    would recommend the following:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Python生态系统中的数据分析和数据科学，我建议您参考以下内容：
- en: '[Python for Data Analysis](http://shop.oreilly.com/product/0636920023784.do)
    [http://shop.oreilly.com/product/0636920023784.do] by Wes McKinney'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《Python数据分析》](http://shop.oreilly.com/product/0636920023784.do)由韦斯·麦金尼'
- en: '[Data Science from Scratch](http://shop.oreilly.com/product/0636920033400.do)
    [http://shop.oreilly.com/product/0636920033400.do] by Joel Grus'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《从零开始的数据科学》](http://shop.oreilly.com/product/0636920033400.do)由乔尔·格鲁斯'
- en: 'To learn about doing machine learning in Python using scikit-learn I would
    recommend:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何在Python中使用scikit-learn进行机器学习，我建议您参考：
- en: The [scikit-learn homepage](http://scikit-learn.org) [http://scikit-learn.org]
    not only has excellent documentation and examples, but also provides useful and
    clear resources about machine learning methods.
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scikit-learn首页](http://scikit-learn.org)不仅提供了优秀的文档和示例，还提供了有关机器学习方法的有用且清晰的资源。'
- en: '[Python Machine Learning](https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning)
    [https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning]
    by Sebastian Raschka'
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《Python机器学习》](https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning)由塞巴斯蒂安·拉什卡'
- en: The visualizations here were produced using [matplotlib](http://matplotlib.org)
    [http://matplotlib.org] and [seaborn](http://stanford.edu/~mwaskom/software/seaborn/)
    [http://stanford.edu/~mwaskom/software/seaborn/]. Their homepages have extensive
    documentation about their APIs and tons of examples.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的可视化是使用[matplotlib](http://matplotlib.org)和[seaborn](http://stanford.edu/~mwaskom/software/seaborn/)生成的。它们的首页有关于API的详细文档和大量示例。
- en: 'Although Python is self-sufficient, fairly extensive and probably growing more
    rapidly than any other scientific language, if the need arises that you need to
    use R for whatever reason, then you are able to do so within Python itself via
    the [`rpy2` library](http://rpy2.readthedocs.org) [http://rpy2.readthedocs.org].  ##
    Acknowledgements'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Python是自给自足的，功能相当广泛，而且可能比任何其他科学语言都增长更快，但如果出于任何原因您需要使用R，那么您可以通过[`rpy2`库](http://rpy2.readthedocs.org)在Python中使用它。##
    致谢
- en: I would like to thank [Avril Coghlan](http://www.sanger.ac.uk/research/projects/parasitegenomics/)
    [http://www.sanger.ac.uk/research/projects/parasitegenomics/], Wellcome Trust
    Sanger Institute, Cambridge, U.K. for her excellent resource [A Little Book of
    R for Multivariate Analysis](https://little-book-of-r-for-multivariate-analysis.readthedocs.org)
    [https://little-book-of-r-for-multivariate-analysis.readthedocs.org] and releasing
    it under a [CC-BY-3.0 License](https://creativecommons.org) [https://creativecommons.org],
    hence, allowing this translation from R to Python. All kudos to her.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 我要感谢[艾弗里尔·科克兰](http://www.sanger.ac.uk/research/projects/parasitegenomics/)，英国剑桥的威尔康信托桑格研究所，她的优秀资源《[多元分析的R小书](https://little-book-of-r-for-multivariate-analysis.readthedocs.org)》，并以[CC-BY-3.0许可证](https://creativecommons.org)发布，从而允许从R翻译成Python。向她致敬。
- en: As the original, many of the examples in this booklet are inspired by examples
    in the Open University book, “Multivariate Analysis” (product code M249/03).
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 和原版一样，本手册中的许多示例都受到Open University书籍《多元分析》（产品代码M249/03）中示例的启发。
- en: 'I am also grateful to the UCI Machine Learning Repository, http://archive.ics.uci.edu/ml,
    for making data sets available which were used in the examples in this booklet.  ##
    Contact'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 我也要感谢[UCI机器学习库](http://archive.ics.uci.edu/ml)，提供了本手册中示例中使用的数据集。## 联系方式
- en: 'I will be grateful if you will send me ([Yiannis Gatsoulis](http://gats.me)
    [http://gats.me]) corrections or suggestions for improvements to my email address
    [gatsoulis AT gmail DOT com](mailto:gatsoulis%40gmail.com).  ## License'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能给我([Yiannis Gatsoulis](http://gats.me))发送改正或改进建议至我的邮箱[gatsoulis AT gmail
    DOT com](mailto:gatsoulis%40gmail.com)，我将不胜感激。## 许可证
- en: '[![Creative Commons License](https://i.creativecommons.org/l/by-sa/4.0/88x31.png)](http://creativecommons.org/licenses/by-sa/4.0/)'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '[![知识共享许可协议](https://i.creativecommons.org/l/by-sa/4.0/88x31.png)](http://creativecommons.org/licenses/by-sa/4.0/)'
- en: A Little Book of Python for Multivariate Analysis by Yiannis Gatsoulis is licensed
    under a [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/).
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 由Yiannis Gatsoulis创作的Python多元分析小册子受[知识共享署名-相同方式共享 4.0 国际许可协议](http://creativecommons.org/licenses/by-sa/4.0/)许可。
- en: Based on a work at [A Little Book of R for Multivariate Analysis](https://little-book-of-r-for-multivariate-analysis.readthedocs.org/en/latest/src/multivariateanalysis.html)
    by Avril Coghlan licensed under [CC-BY-3.0](http://creativecommons.org/licenses/by/3.0/)
    [http://creativecommons.org/licenses/by/3.0/]. © Copyright 2016, Yiannis Gatsoulis.
    Created using [Sphinx](http://sphinx-doc.org/) 1.3.4.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Avril Coghlan的作品[A Little Book of R for Multivariate Analysis](https://little-book-of-r-for-multivariate-analysis.readthedocs.org/en/latest/src/multivariateanalysis.html)，在[CC-BY-3.0](http://creativecommons.org/licenses/by/3.0/)许可下授权。
    © 版权所有 2016, Yiannis Gatsoulis。 使用[Sphinx](http://sphinx-doc.org/) 1.3.4创建。
- en: Navigation
  id: totrans-584
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导航
- en: '[index](# "General Index")'
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[索引](# "总目录")'
- en: '[A Little Book of Python for Multivariate Analysis 0.1 documentation](index.html)
    »'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python多元分析小册子 0.1 文档](index.html) »'
- en: Index
  id: totrans-587
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引
- en: © Copyright 2016, Yiannis Gatsoulis. Created using [Sphinx](http://sphinx-doc.org/)
    1.3.4.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: © 版权所有 2016, Yiannis Gatsoulis。 使用[Sphinx](http://sphinx-doc.org/) 1.3.4创建。
