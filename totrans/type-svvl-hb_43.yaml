- en: 配列から全要素の型を生成する
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/tips/generates-type-of-element-from-array](https://typescriptbook.jp/tips/generates-type-of-element-from-array)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 前ページでは、配列から全要素の型を生成する方法が登場しました。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'ts`const  <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"] as  <data-lsp lsp="type const
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]">const</data-lsp>;type <data-lsp lsp="type Currency
    = &quot;CNY&quot; | &quot;EUR&quot; | &quot;GBP&quot; | &quot;JPY&quot; | &quot;KRW&quot;
    | &quot;USD&quot;" style="border-bottom:solid 2px lightgrey">Currency</data-lsp>
    = (typeof <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>)[number];`
    `type Currency = "CNY" | "EUR" | "GBP" | "JPY" | "KRW" | "USD"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`typeof currencies[number]`という書き方は、初めて見ると理解に苦しむコードかもしれません。そのためより詳しく説明します。'
  prefs: []
  type: TYPE_NORMAL
- en: 前ページのコードを観察する[​](#前ページのコードを観察する "前ページのコードを観察する への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 配列からある要素の型を生成するコードについて、前ページに続き通貨の配列でもう一度確認します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'ts`const  <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"] as  <data-lsp lsp="type const
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]">const</data-lsp>;type <data-lsp lsp="type Currency
    = &quot;GBP&quot;" style="border-bottom:solid 2px lightgrey">Currency</data-lsp>
    = (typeof <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>)[2];`
    `type Currency = "GBP"`'
  prefs: []
  type: TYPE_NORMAL
- en: ここで、`typeof currencies[2]`の`2`は、前ページでリテラル型と説明していますが本当でしょうか？次のコードで確認してみます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`2`が値として解釈されるコードではエラーになってしまいました。'
  prefs: []
  type: TYPE_NORMAL
- en: では明確にリテラル型だとわかるコードも試してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'ts`const  <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"] as  <data-lsp lsp="type const
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]">const</data-lsp>;type <data-lsp lsp="type Index
    = 2">Index</data-lsp> =  2;type <data-lsp lsp="type Currency = &quot;GBP&quot;"
    style="border-bottom:solid 2px lightgrey">Currency</data-lsp> = (typeof <data-lsp
    lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;,
    &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>)[<data-lsp
    lsp="type Index = 2">Index</data-lsp>];` `type Currency = "GBP"`'
  prefs: []
  type: TYPE_NORMAL
- en: これで`typeof currencies[2]`の`2`はリテラル型であることがはっきりしました。
  prefs: []
  type: TYPE_NORMAL
- en: 数値のリテラル型と`number`型[​](#数値のリテラル型とnumber型 "数値のリテラル型とnumber型 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`2`のリテラル型と`number`型の関係を集合で表現すると、`2`⊂`number`と書くことができます。他の表現をすると、`0`、`1`、`2`..など数値のリテラル型のいずれかの型として振る舞うのが`number`型です。'
  prefs: []
  type: TYPE_NORMAL
- en: 「いずれかの型」といえばユニオン型の出番です。
  prefs: []
  type: TYPE_NORMAL
- en: '[## 📄️ ユニオン型'
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptのユニオン型(union type)は「いずれかの型」を表現するものです。](/reference/values-types-variables/union)
  prefs: []
  type: TYPE_NORMAL
- en: '`number`型の代わりにリテラルのユニオン型を使ってみましょう。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'ts`const  <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"] as  <data-lsp lsp="type const
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]">const</data-lsp>;type <data-lsp lsp="type Currency
    = &quot;CNY&quot; | &quot;EUR&quot; | &quot;GBP&quot; | &quot;JPY&quot; | &quot;KRW&quot;
    | &quot;USD&quot;" style="border-bottom:solid 2px lightgrey">Currency</data-lsp>
    = (typeof <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>)[0  |  1  |  2  |  3  |  4  |  5];`
    `type Currency = "CNY" | "EUR" | "GBP" | "JPY" | "KRW" | "USD"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0 | 1 | 2 | 3 | 4 | 5`型でも`currencies`配列から全要素の型を生成することができました。このように`number`型は数値のリテラル型のワイルドカードとして振る舞うことがわかります。'
  prefs: []
  type: TYPE_NORMAL
- en: 一般化する[​](#一般化する "一般化する への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: このページの締めくくりに一般化したコードを示します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: ts`type <data-lsp lsp="type List = (string | number | boolean)[]">List</data-lsp>
    = (string  |  number  |  boolean)[];type <data-lsp lsp="type Elem = string | number
    | boolean" style="border-bottom:solid 2px lightgrey">Elem</data-lsp> = <data-lsp
    lsp="type List = (string | number | boolean)[]">List</data-lsp>[number];` `type
    Elem = string | number | boolean`
  prefs: []
  type: TYPE_NORMAL
- en: '`List`型から`List[number]`という書き方ですべての要素の型である`string | number | boolean`が生成できました。'
  prefs: []
  type: TYPE_NORMAL
- en: アンチパターンの紹介[​](#アンチパターンの紹介 "アンチパターンの紹介 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 次のように具体的なインデックスで同じ型を生成することは可能ですが、アンチパターンなので注意してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: ts`type <data-lsp lsp="type List = (string | number | boolean)[]">List</data-lsp>
    = (string  |  number  |  boolean)[];type <data-lsp lsp="type Elem = string | number
    | boolean" style="border-bottom:solid 2px lightgrey">Elem</data-lsp> = <data-lsp
    lsp="type List = (string | number | boolean)[]">List</data-lsp>[0]; // 避けるべき書き方`
    `type Elem = string | number | boolean`
  prefs: []
  type: TYPE_NORMAL
- en: この書き方がアンチパターンである理由は`List`型をタプル型だと混乱させてしまう可能性があるためです。`List[0]`は特定の要素から型を生成しているため、各要素の型が同じ型ではない、つまり`List`が配列型ではなくタプル型だからこの書き方をしていると誤解させる可能性があります。配列型はどの要素の型も同じものとして扱うので、`List[number]`の書き方が適切です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
