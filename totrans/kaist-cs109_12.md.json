["```\nfun join(l: List<Int>): String {\n  var s = \"\"\n  for (e in l) {\n    if (s.isEmpty())\n      s = e.toString()\n    else\n      s = s + \", \" + e.toString()\n  }\n  return s\n}\n\n```", "```\n>>> :load join1.kts\n>>> val s = (1..10).toList()\n>>> join(s)\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n```", "```\nimport java.lang.System.currentTimeMillis\n\nfun join(l: List<Int>): String {\n  var s = \"\"\n  for (e in l) {\n    if (s.isEmpty())\n      s = e.toString()\n    else\n      s = s + \", \" + e.toString()\n  }\n  return s\n}\n\nval n = args[0].toInt()\nval a = (1 .. n).toList()\n\nval t0 = currentTimeMillis()\nval s = join(a)\nval t1 = currentTimeMillis()\n\nprintln(\"Creating a string with ${a.size} integers took ${t1 - t0} milliseconds\")\n\n```", "```\n$ kts join2.kts 100\nCreating a string with 100 integers took 1 milliseconds\n$ kts join2.kts 1000\nCreating a string with 1000 integers took 3 milliseconds\n$ kts join2.kts 10000\nCreating a string with 10000 integers took 529 milliseconds\n$ kts join2.kts 20000\nCreating a string with 20000 integers took 1728 milliseconds\n$ kts join2.kts 40000\nCreating a string with 40000 integers took 6680 milliseconds\n$ kts join2.kts 80000\nCreating a string with 80000 integers took 27939 milliseconds\n\n```", "```\nfun join(l: List<Int>): String {\n  var s = StringBuilder()\n  for (e in l) {\n    if (s.isEmpty())\n      s.append(e.toString())\n    else {\n      s.append(\", \")\n      s.append(e.toString())\n    }\n  }\n  return s.toString()\n}\n\n```", "```\n$ kts join3.kts 80000\nCreating a string with 80000 integers took 35 milliseconds\n$ kts join3.kts 1000000\nCreating a string with 1000000 integers took 113 milliseconds\n\n```"]