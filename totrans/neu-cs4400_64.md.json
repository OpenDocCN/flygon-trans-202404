["```\n(define (make-point x y)\u00a0 (let ([xb (box x)]\u00a0 \u00a0 \u00a0 \u00a0 [yb (box y)])\u00a0 \u00a0 (lambda (msg)\u00a0 \u00a0 \u00a0 (match msg\u00a0 \u00a0 \u00a0 \u00a0 ['getx (unbox xb)]\u00a0 \u00a0 \u00a0 \u00a0 ['gety (unbox yb)]\u00a0 \u00a0 \u00a0 \u00a0 ['incx (set-box! xb (add1 (unbox xb)))]))))\n```", "```\n(define (make-point x y)\u00a0 (let ([xb (box x)]\u00a0 \u00a0 \u00a0 \u00a0 [yb (box y)])\u00a0 \u00a0 (lambda (msg)\u00a0 \u00a0 \u00a0 (match msg\u00a0 \u00a0 \u00a0 \u00a0 ['getx (unbox xb)]\u00a0 \u00a0 \u00a0 \u00a0 ['gety (unbox yb)]\u00a0 \u00a0 \u00a0 \u00a0 ['incx (set-box! xb (add1 (unbox xb)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (update-screen)]))))\n```", "```\n(define (make-point x y)\u00a0 (let ([xb (box x)]\u00a0 \u00a0 \u00a0 \u00a0 [yb (box y)])\u00a0 \u00a0 (lambda (msg)\u00a0 \u00a0 \u00a0 (match msg\u00a0 \u00a0 \u00a0 \u00a0 ['getx (unbox xb)]\u00a0 \u00a0 \u00a0 \u00a0 ['gety (unbox yb)]\u00a0 \u00a0 \u00a0 \u00a0 [(list 'setx newx)\u00a0 \u00a0 \u00a0 \u00a0  (set-box! xb newx)\u00a0 \u00a0 \u00a0 \u00a0  (update-screen)]\u00a0 \u00a0 \u00a0 \u00a0 [(list 'sety newy)\u00a0 \u00a0 \u00a0 \u00a0  (set-box! yb newy)\u00a0 \u00a0 \u00a0 \u00a0  (update-screen)]))))(define (point-x p) (p 'getx))(define (point-y p) (p 'gety))(define (set-point-x! p x) (p (list 'setx x)))(define (set-point-y! p y) (p (list 'sety y)))\n```", "```\n(define (make-colored-point x y color)\u00a0 (let ([p (make-point x y)])\u00a0 \u00a0 (lambda (msg)\u00a0 \u00a0 \u00a0 (match msg\u00a0 \u00a0 \u00a0 \u00a0 ['getcolor color]\u00a0 \u00a0 \u00a0 \u00a0 [else (p msg)]))))\n```", "```\n(defclass point (x y)\u00a0 (public (getx) x)\u00a0 (public (gety) y)\u00a0 (public (setx new) (set! x newx))\u00a0 (public (setx new) (set! x newx)))(defclass colored-point point (c)\u00a0 (public (getcolor) c))\n```"]