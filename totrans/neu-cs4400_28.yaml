- en: Using Functions as ObjectsTuesday, January 31st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用函数作为对象，星期二，1月31日
- en: 'A very important aspect of Racket — using “higher order” functions — functions
    that get and return functions. Here is a very simple example:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Racket 的一个非常重要的方面 — 使用“高阶”函数 — 即获取和返回函数的函数。这里是一个非常简单的例子：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note: what we get is actually an object that remembers (by the substitution
    we’re doing) a number. How about:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我们实际上得到的是一个记住（通过我们正在进行的替换）一个数字的对象。怎么样：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Take this idea to the next level:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个想法提升到下一个级别：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or, with types:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，带有类型的版本：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Even more — why should the internal function expect a boolean and choose what
    to return? We can simply expect a function that will take the two values and return
    one:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步 — 为什么内部函数应该期望一个布尔值并选择返回什么？我们可以简单地期望一个接受两个值并返回一个值的函数：
- en: '[PRE4]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And a typed version, using our own constructor to make it a little less painful:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 而且一个带有类型的版本，使用我们自己的构造函数使其稍微不那么痛苦：
- en: '[PRE5]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that the `Kons` type definition is the same as:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`Kons`类型定义与以下相同：
- en: '[PRE6]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: so `All` is to polymorphic type definitions what `lambda` is for function definitions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`All`对多态类型定义来说就像`lambda`对函数定义一样。
- en: 'Finally in JavaScript:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后在 JavaScript 中：
- en: '[PRE7]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Or with ES6 *arrow functions*, the function definitionss become:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 ES6 *箭头函数*，函数定义变为：
- en: '[PRE8]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
