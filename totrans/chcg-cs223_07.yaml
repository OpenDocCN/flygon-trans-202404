- en: Basic Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本动画
- en: All of our renderings so far have been "static" in the sense that the state,
    or model, values have been independent of time (though they have been dependent
    on other time-varying values, such as mouse position and clicks).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所有的渲染都是“静态”的，即状态或模型值独立于时间（尽管它们依赖于其他变化的值，如鼠标位置和点击）。
- en: We will now work through an example where we will keep track of time in order
    to *animate* what we render. Our goal will be to draw circles around each mouse
    click that fade out gradually over time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将通过一个示例来跟踪时间以*动画化*我们渲染的内容。我们的目标是绘制每个鼠标点击周围逐渐消失的圆圈。
- en: Clicks with Timestamps
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带时间戳的点击
- en: We'll start by defining the `State` in our application to be a list of `Click`s,
    where each value records the `Time` and position of the click.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从在我们的应用程序中定义`State`为`Click`列表开始，其中每个值记录点击的`Time`和位置。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The definitions of the initial `State` as well as the function to update it
    upon each `Click` are both trivial.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 初始`State`的定义以及在每次`Click`时更新它的函数都是微不足道的。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To help during the development process, let's render the most recent `Click`
    to see how the `State` of our application changes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在开发过程中提供帮助，让我们渲染最近的`Click`以查看我们应用程序的`State`如何变化。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We now need to use primitive signals to "drive" our application. In particular,
    we need to track time and mouse clicks. [One way to define time](http://elm-lang.org/edit/examples/Reactive/Fps.elm)
    is to sum the time deltas returned by [`Time.fps`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Time).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要使用原始信号来“驱动”我们的应用程序。特别是，我们需要跟踪时间和鼠标点击。[定义时间的一种方法](http://elm-lang.org/edit/examples/Reactive/Fps.elm)是对[`Time.fps`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Time)返回的时间增量求和。
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we can generate timestamps for clicks by sampling both `time` and `Mouse.position`
    whenever `Mouse.clicks` is updated. Notice how we use the `(<~)` and `(~)` operators
    to call [`Signal.map2`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Signal)
    (with, arguably, nicer syntax) in order to pair time and position values.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以通过在更新`Mouse.clicks`时采样`time`和`Mouse.position`来为点击生成时间戳。请注意，我们如何使用`(<~)`和`(~)`运算符调用[`Signal.map2`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Signal)（带有更好的语法）以配对时间和位置值。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can now base our `State` updates on the `clicks` signal in order to render
    the latest one to the screen.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以根据`clicks`信号更新我们的`State`，以便将最新的一个渲染到屏幕上。
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This pattern of attaching timestamps to time-varying values lends itself to
    the following generalization:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将时间戳附加到变化的值的这种模式适用于以下泛化：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Indeed, the [`Time`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Time)
    library provides a `timestamp` function, albeit with slightly different behavior:
    the timestamps attached to values record system time (via `Time.every`) rather
    than application time (computed via `Time.fps`).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，[`Time`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Time)库提供了一个`timestamp`函数，尽管行为略有不同：附加到值的时间戳记录系统时间（通过`Time.every`），而不是应用程序时间（通过`Time.fps`计算）。
- en: Drawing All Dots
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制所有点
- en: 'We''ll start by drawing circles for all clicks, irrespective of their timestamps.
    There are several factors to consider:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从为所有点击绘制圆圈开始，不考虑它们的时间戳。有几个因素需要考虑：
- en: mouse coordinates (produced by `Mouse.position`) are specified relative to the
    top-left corner of the window,
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标坐标（由`Mouse.position`产生）是相对于窗口左上角指定的，
- en: '`collage` (which we will use to draw the entire window) is centered in the
    middle of the window, and'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collage`（我们将用它来绘制整个窗口）居中于窗口中间，而'
- en: '`move` (supplied with positive arguments) translates `Shapes` in a collage
    up and to the right.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`move`（提供正参数）将`Shapes`在collage中向上和向右移动。'
- en: 'Taking these into account, we draw dots as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些，我们绘制点如下：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The source code for this milestone can be found in [`FadingDots0.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots0.elm),
    and [here](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots0.html)
    is a demo in action.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个里程碑的源代码可以在[`FadingDots0.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots0.elm)找到，并且[这里](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots0.html)是演示示例。
- en: Drawing Recent Dots
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制最近的点
- en: In order to display only the most recent dots, we need to track the current
    time in `State` — there's nowhere else to put it!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了只显示最近的点，我们需要在`State`中跟踪当前时间 —— 没有其他地方可以放置它！
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The upstating function stores the timestamp `t` of a new `Click` as the current
    time (that is, the most recently updated current time).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 更新函数将新的`Click`的时间戳`t`存储为当前时间（即最近更新的当前时间）。
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now that we have the `now` time in our `State`, we can draw dots for only those
    clicks that occurred within the last, say, two seconds. The `tfade` binding allows
    us to twiddle this parameter if desired.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在我们的`State`中有了`now`时间，我们只能为最近的，比如说，两秒内发生的点击绘制点。如果需要，`tfade`绑定允许我们调整此参数。
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The source code for this milestone can be found in [`FadingDots1.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots1.elm),
    and [here](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots1.html)
    is a demo in action.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此里的关键代码可以在[`FadingDots1.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots1.elm)中找到，并且[这里](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots1.html)是演示效果。
- en: This is good progress, but dots can linger for more than two seconds; old dots
    are "discarded" only when the next click occurs, which can be arbitrarily far
    in the future. So, what can we do?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很好的进展，但是点可能会停留超过两秒；旧点只有在下一个点击发生时才会“丢弃”，这可能会是任意远的将来。那么，我们能做些什么呢？
- en: Merging Signals
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并信号
- en: 'The `State` of our application is defined (in `main`) to react only to changes
    in `clicks`, but we also want to react to changes in `time` so that we can promptly
    "discard" old clicks. The following function combines two signals into one:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的`State`（在`main`中）被定义为仅对`clicks`的更改做出反应，但我们还希望对`time`的更改做出反应，以便我们能够及时“丢弃”旧的点击。以下函数将两个信号合并为一个：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We cannot `merge` the signals `time` and `clicks` straight away, because they
    produce different types of values. Not to worry, however, because we can define
    a new datatype to describe values produced by either signal. And our upstating
    function will then handle each kind of value separately.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能立即`merge`信号`time`和`clicks`，因为它们产生不同类型的值。不过，不用担心，因为我们可以定义一个新的数据类型来描述任一信号产生的值。然后，我们的更新函数将分别处理每种类型的值。
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice how both `NewTime` and `NewClick` values carry the new time `t` to track
    in the updated `State`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`NewTime`和`NewClick`值如何携带新时间`t`以跟踪更新的`State`中的时间。
- en: While we're modifying `upstate`, we might as well optimize our `State` representation
    so that it contains only those points that will be rendered. The `pruneOld` function
    below takes advantage of the invariant that the clicks in `State` are ordered
    from youngest to oldest. Therefore, it stops traversing clicks as soon as the
    first "stale" one is found.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们修改`upstate`时，我们也可以优化我们的`State`表示，以便它仅包含将要呈现的那些点。下面的`pruneOld`函数利用了`State`中点击是按年轻到年长排序的不变性。因此，一旦找到第一个“陈旧”的点，它就会停止遍历点击。
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We now update our `main` to `merge` the two signals, where their values are
    appropriately wrapped with the `NewTime` and `NewClick` data constructors.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更新我们的`main`来`merge`这两个信号，其中它们的值适当地使用`NewTime`和`NewClick`数据构造器包装。
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Animation: Fade'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动画：淡出
- en: We have reached the home stretch. Dots will now disappear expediently, but let's
    have them fade out gradually and, at the same time, grow in size to achieve a
    nice diffusion effect.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到了尾声。点现在将迅速消失，但让它们逐渐淡出，并且同时增大尺寸以实现漂亮的扩散效果。
- en: For each mouse click, we define `pct` to be the percentage of time that has
    passed between when the dot first appears (its timestamp `t`) and when it completely
    disappears (`t + tfade`). We use this coefficient to compute the transparency
    of the circle as well its increased radius.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每次鼠标点击，我们将`pct`定义为从点首次出现（其时间戳`t`）到完全消失（`t + tfade`）之间经过的时间百分比。我们使用这个系数来计算圆圈的透明度以及其增加的半径。
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice that `view` no longer needs to filter old dots, because `upstate` has
    already taken care of it. A much more pleasing factoring of work!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`view`不再需要过滤旧点，因为`upstate`已经处理了。更加令人愉快的工作分解！
- en: '[![](../Images/34b82a1328e5ff6ada076d9f967a0287.jpg)](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots2.html)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](../Images/34b82a1328e5ff6ada076d9f967a0287.jpg)](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots2.html)'
- en: Now that we're drawing larger circles, the delay between frames becomes more
    noticeable. So, let's crank it up.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在绘制较大的圆圈，帧之间的延迟变得更加明显。所以，让我们加大它。
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The final version is contained in [`FadingDots2.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots2.elm).
    Check it out [in action](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots2.html)!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最终版本包含在 [`FadingDots2.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots2.elm)
    中。看看它在[action](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots2.html)中的效果！
- en: Different Ways of Tracking Time
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跟踪时间的不同方式
- en: 'Notice that there are two different ways to keep track of how long an Elm application
    has been running: by summing the time deltas produced by `Time.fps` (as we did
    in this example), and by comparing the current value of `Time.every` to its intial
    value. These two approaches do not always yield the same result! To investigate,
    try out the [`Lag.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/Lag.elm)
    example by Stuart Kurtz.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，有两种不同的方法来跟踪 Elm 应用程序运行了多长时间：一种是通过累加由`Time.fps`产生的时间增量（就像我们在这个例子中做的那样），另一种是将`Time.every`的当前值与其初始值进行比较。这两种方法并不总是产生相同的结果！要进行调查，请尝试
    Stuart Kurtz 的[`Lag.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/Lag.elm)
    示例。
