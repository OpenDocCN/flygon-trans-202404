- en: Basic Animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of our renderings so far have been "static" in the sense that the state,
    or model, values have been independent of time (though they have been dependent
    on other time-varying values, such as mouse position and clicks).
  prefs: []
  type: TYPE_NORMAL
- en: We will now work through an example where we will keep track of time in order
    to *animate* what we render. Our goal will be to draw circles around each mouse
    click that fade out gradually over time.
  prefs: []
  type: TYPE_NORMAL
- en: Clicks with Timestamps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll start by defining the `State` in our application to be a list of `Click`s,
    where each value records the `Time` and position of the click.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The definitions of the initial `State` as well as the function to update it
    upon each `Click` are both trivial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To help during the development process, let's render the most recent `Click`
    to see how the `State` of our application changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We now need to use primitive signals to "drive" our application. In particular,
    we need to track time and mouse clicks. [One way to define time](http://elm-lang.org/edit/examples/Reactive/Fps.elm)
    is to sum the time deltas returned by [`Time.fps`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Time).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we can generate timestamps for clicks by sampling both `time` and `Mouse.position`
    whenever `Mouse.clicks` is updated. Notice how we use the `(<~)` and `(~)` operators
    to call [`Signal.map2`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Signal)
    (with, arguably, nicer syntax) in order to pair time and position values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can now base our `State` updates on the `clicks` signal in order to render
    the latest one to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This pattern of attaching timestamps to time-varying values lends itself to
    the following generalization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Indeed, the [`Time`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Time)
    library provides a `timestamp` function, albeit with slightly different behavior:
    the timestamps attached to values record system time (via `Time.every`) rather
    than application time (computed via `Time.fps`).'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing All Dots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll start by drawing circles for all clicks, irrespective of their timestamps.
    There are several factors to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: mouse coordinates (produced by `Mouse.position`) are specified relative to the
    top-left corner of the window,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collage` (which we will use to draw the entire window) is centered in the
    middle of the window, and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`move` (supplied with positive arguments) translates `Shapes` in a collage
    up and to the right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Taking these into account, we draw dots as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The source code for this milestone can be found in [`FadingDots0.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots0.elm),
    and [here](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots0.html)
    is a demo in action.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing Recent Dots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to display only the most recent dots, we need to track the current
    time in `State` â€” there's nowhere else to put it!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The upstating function stores the timestamp `t` of a new `Click` as the current
    time (that is, the most recently updated current time).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the `now` time in our `State`, we can draw dots for only those
    clicks that occurred within the last, say, two seconds. The `tfade` binding allows
    us to twiddle this parameter if desired.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The source code for this milestone can be found in [`FadingDots1.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots1.elm),
    and [here](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots1.html)
    is a demo in action.
  prefs: []
  type: TYPE_NORMAL
- en: This is good progress, but dots can linger for more than two seconds; old dots
    are "discarded" only when the next click occurs, which can be arbitrarily far
    in the future. So, what can we do?
  prefs: []
  type: TYPE_NORMAL
- en: Merging Signals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `State` of our application is defined (in `main`) to react only to changes
    in `clicks`, but we also want to react to changes in `time` so that we can promptly
    "discard" old clicks. The following function combines two signals into one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We cannot `merge` the signals `time` and `clicks` straight away, because they
    produce different types of values. Not to worry, however, because we can define
    a new datatype to describe values produced by either signal. And our upstating
    function will then handle each kind of value separately.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Notice how both `NewTime` and `NewClick` values carry the new time `t` to track
    in the updated `State`.
  prefs: []
  type: TYPE_NORMAL
- en: While we're modifying `upstate`, we might as well optimize our `State` representation
    so that it contains only those points that will be rendered. The `pruneOld` function
    below takes advantage of the invariant that the clicks in `State` are ordered
    from youngest to oldest. Therefore, it stops traversing clicks as soon as the
    first "stale" one is found.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We now update our `main` to `merge` the two signals, where their values are
    appropriately wrapped with the `NewTime` and `NewClick` data constructors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Animation: Fade'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have reached the home stretch. Dots will now disappear expediently, but let's
    have them fade out gradually and, at the same time, grow in size to achieve a
    nice diffusion effect.
  prefs: []
  type: TYPE_NORMAL
- en: For each mouse click, we define `pct` to be the percentage of time that has
    passed between when the dot first appears (its timestamp `t`) and when it completely
    disappears (`t + tfade`). We use this coefficient to compute the transparency
    of the circle as well its increased radius.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `view` no longer needs to filter old dots, because `upstate` has
    already taken care of it. A much more pleasing factoring of work!
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/34b82a1328e5ff6ada076d9f967a0287.jpg)](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots2.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we're drawing larger circles, the delay between frames becomes more
    noticeable. So, let's crank it up.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The final version is contained in [`FadingDots2.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots2.elm).
    Check it out [in action](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/FadingDots2.html)!
  prefs: []
  type: TYPE_NORMAL
- en: Different Ways of Tracking Time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notice that there are two different ways to keep track of how long an Elm application
    has been running: by summing the time deltas produced by `Time.fps` (as we did
    in this example), and by comparing the current value of `Time.every` to its intial
    value. These two approaches do not always yield the same result! To investigate,
    try out the [`Lag.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Animations/Lag.elm)
    example by Stuart Kurtz.'
  prefs: []
  type: TYPE_NORMAL
