- en: Node and npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction to Node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is more then enough documentation out there that supports the question,
    "Why Node?". Something that really rings true with me is not where Node is today,
    but where Node is going. Without a doubt, the Rails community has brought a lot
    to the table, but what made all those awesome ideas hard to swallow was the fact
    that they were locked inside Ruby. As amazing as Ruby is, not everyone wants to
    be a Ruby developer.
  prefs: []
  type: TYPE_NORMAL
- en: I particularly like this quote from *Why The Hell Would I Use Node.js? A Case-by-Case
    Introduction* [[reference](http://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js)]
    by [Tomislav Capan](http://www.toptal.com/resume/tomislav-capan)
  prefs: []
  type: TYPE_NORMAL
- en: '... it’s worth noting that Ryan Dahl, the creator of Node.js, was aiming to
    create real-time websites with push capability, “inspired by applications like
    Gmail”. In Node.js, he gave developers a tool for working in the non-blocking,
    event-driven I/O paradigm.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Install Node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you run any installers, make sure you know what is on your computer.
    To see the version, simply run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Of course to create and run a Node app, you need to have Node installed. To
    install Node, you can run the [installer from their site](http://nodejs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: '[Installing Node and npm](http://www.joyent.com/blog/installing-node-and-npm/)
    is a great article on all the ways to get this set up. Pay attention to Step 4
    where there are some pretty solid opinions on how to set things up.'
  prefs: []
  type: TYPE_NORMAL
- en: A [gist](https://gist.github.com/579814) is made available that illustrates
    a series of ways to install node.
  prefs: []
  type: TYPE_NORMAL
- en: The article does state a personal opinion against using Homebrew. Brew has worked
    for me rather well, but this is an opinion you may need formulate on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Node Package Manager (npm)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: npm is a NodeJS package manager. As its name would imply, you can use it to
    install node programs. Also, if you use it in development, it makes it easier
    to specify and link dependencies.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Learn more](http://howtonode.org/introduction-to-npm) about npm'
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on your install process you may or may not have NPM installed. To
    check, simply run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not have npm installed, run the following:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Note: npm is the package manager for Node, so you can''t use the package manager
    to install the package manager o_O'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using npm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have npm installed, all registered packages are a simple command
    away. For a basic package install, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This install method will install the package in a directory (`node_modules/`)
    relative to your project. At times you will need to install libraries globally
    so that you can access their code from any application that doesn't necessarily
    require them as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, you need to add the `-g` flag n the install process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** Depending on how Node is installed on your system, you may not have
    access to install a global package. To get around this, simply add the `sudo`
    command before the npm install method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using npm with a project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most common use case for npm is to maintain a manifest of dependencies for
    your project. This is maintained with a [package.json](https://www.npmjs.org/doc/json.html)
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can either crate this file yourself, or there are ways to generate this
    file too. In any directory simply run `npm init` and the CLI will walk you through
    a series of questions and out put something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have this in your project adding to it using `npm install` is very
    easy. Simply add the `--save` flag to the command like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding Grunt to the project would update the `package.json` by adding a `dependencies`
    object in the json file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding to this, if you wanted to add a dependency that is only for development
    versus production, you pass in the `-dev` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding Gulp as a development dependency we get the following update to the
    `package.json` file by adding a `devDependencies` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Learn more about npm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: npm is an amazingly complex utility when it comes to package management. See
    this [npm cheatsheet](http://blog.nodejitsu.com/npm-cheatsheet/) for more in-depth
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about package.json
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `package.json` has many features. To learn more about how this all works
    [package.json An interactive guide](http://package.json.nodejitsu.com/#) is an
    amazing tool to learn from.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike other package managers, npm installs these libraries directly into the
    root of your project. Without extra steps, these libraries will easily get committed
    to your version control.
  prefs: []
  type: TYPE_NORMAL
- en: For the most part you probably don't want to do this. Versioning is maintained
    via the `package.json` file and you shouldn't ever really go into the packages
    themselves and edit the code.
  prefs: []
  type: TYPE_NORMAL
- en: Using .gitignore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To keep npm libraries out of your version control, add the following to your
    .gitignore file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Getting the dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `package.json` file is maintaining your app''s dependencies and you are
    not committing your dependencies to your Git repo, those who clone your project
    need to get these install these dependencies. Installing is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After executing that command you should see your CLI downloading the internet!
  prefs: []
  type: TYPE_NORMAL
