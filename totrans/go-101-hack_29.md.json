["```\ntype Interface interface {  \n        // Len is the number of elements in the collection.  \n        Len() int  \n        // Less reports whether the element with  \n        // index i should sort before the element with index j.  \n        Less(i, j int) bool  \n        // Swap swaps the elements with indexes i and j.  \n        Swap(i, j int)  \n} \n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\ntype command struct  {\n    name string\n}\n\ntype byName []command\n\nfunc (a byName) Len() int           { return len(a) }\nfunc (a byName) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a byName) Less(i, j int) bool { return a[i].name < a[j].name }\n\nfunc main() {\n    c := []command{\n        {\"breakpoint\"},\n        {\"help\"},\n        {\"args\"},\n        {\"continue\"},\n    }\n    fmt.Println(\"Before sorting: \", c)\n    sort.Sort(byName(c))\n    fmt.Println(\"After sorting: \", c)\n} \n```", "```\nBefore sorting:  [{breakpoint} {help} {args} {continue}]\nAfter sorting:  [{args} {breakpoint} {continue} {help}] \n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\ntype command struct  {\n    name string\n    help string\n}\n\ntype byName []*command\n\nfunc (a byName) Len() int           { return len(a) }\nfunc (a byName) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a byName) Less(i, j int) bool { return a[i].name < a[j].name }\n\nfunc main() {\n    c := []*command{\n        {\"breakpoint\", \"Set breakpoints\"},\n        {\"help\", \"Show help\"},\n        {\"args\", \"Print arguments\"},\n        {\"continue\", \"Continue\"},\n    }\n    fmt.Println(\"Before sorting: \", c)\n    sort.Sort(byName(c))\n    fmt.Println(\"After sorting: \", c)\n} \n```", "```\nBefore sorting:  [0xc0820066a0 0xc0820066c0 0xc0820066e0 0xc082006700]\nAfter sorting:  [0xc0820066e0 0xc0820066a0 0xc082006700 0xc0820066c0] \n```"]