- en: Homework 0.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Homework 0.1 Intro
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this homework, you'll use what you've learned so far to solve some problems.
    You'll also be doing a bit of reading and introducing yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: you can view the due date for this homework on either the [front
    page](../index.html) or the [deadlines spreadsheet](https://docs.google.com/spreadsheets/u/1/d/1JftJo7ko0wx-jxAEF9_QxYXfzHCYqCNqKeRwOU9K65A/edit?usp=sharing).'
  prefs: []
  type: TYPE_NORMAL
- en: Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A template file provides the basic skeleton for a homework assignment.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re on a lab computer, type the following command into your terminal
    to copy the template to the current directory (note the period at the end):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Or you can download the template [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw0-1.rkt).
  prefs: []
  type: TYPE_NORMAL
- en: Language Declaration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have noticed that the first line says
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This tells the Racket interpreter that your file consists of Racket code. This
    might seem redundant, but the Racket interpreter is also capable of understanding
    other Lisp-family languages, including user-defined ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'The bottom line is that you must include this line at the top of every Racket
    file you write. If you don''t, you''ll see this error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Autograder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An **autograder** is a program that checks the validity of your code for a particular
    assignment.
  prefs: []
  type: TYPE_NORMAL
- en: If you are working on the lab computers, the `grader` command will run the autograder;
    see below for details. If you are working on your own personal machine, you should
    download [grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)
    and the [HW 0-1 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw0-1-tests.rkt).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, introduce yourself to the staff!
  prefs: []
  type: TYPE_NORMAL
- en: 'In your homework file, answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is your name?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is your major?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are you a returning student? (That is, did you take 61AS last semester?)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What made you to take 61AS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tell us some interesting things about yourself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, see if you can find a post on Piazza called "Hello World!". Make a follow-up
    on that post and introduce yourself. Be sure to include:'
  prefs: []
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Major and year
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One interesting fact about yourself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why you're taking the course
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the syntax for defining a procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, you saw how to define a `square` procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After defining it, you can use the procedure `square` to find the square of
    any number you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `square`, define a procedure `sum-of-squares` that takes two arguments
    and returns the sum of the squares of the two arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you test your work!
  prefs: []
  type: TYPE_NORMAL
- en: 'After you''ve written your procedure, run the autograder for this exercise
    and check if you defined your procedure correctly. If you are on the lab computers,
    type the following into your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are working on your own machine, type the following into your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Interlude
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we present the next exercise, we need to cover some more Racket features.
    Students taking Unit 0 should consider this a preview—we'll explore these features
    more in Lesson 0.2.
  prefs: []
  type: TYPE_NORMAL
- en: Words and Sentences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ve shown you some interesting procedures that allow you to do stuff to
    words and sentences:'
  prefs: []
  type: TYPE_NORMAL
- en: '`''` makes a word (e.g., `''pi`) or a sentence (e.g., `''(good morning)`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`first` takes a word and returns the first letter of that word, or it takes
    a sentence and returns the first word of that sentence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`butfirst` (or `bf`) takes a word/sentence and returns everything but the first
    letter/word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep these procedures and concepts in the back of your mind. They'll come back
    in later exercises and lessons.
  prefs: []
  type: TYPE_NORMAL
- en: Special Forms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Racket has some control features that allow you to choose what to do next based
    on a test. These features are examples of *special forms*—procedures with special
    evaluation rules. We'll talk about special forms more later in the course.
  prefs: []
  type: TYPE_NORMAL
- en: '`if`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Racket, `if` is a special form that takes three arguments. `if` always evaluates
    its first argument. If the value of that argument is `true`, then `if` evaluates
    its second argument and returns its value. If the value of the first argument
    is `false`, then if evaluates its third argument and returns that value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of proper if syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The result of this example expression is the word `'yay!`. Because the first
    expression is true, the last argument to `if` is not evaluated, which means we
    don't get a divide-by-zero error.
  prefs: []
  type: TYPE_NORMAL
- en: '`cond`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`cond` is a special form that acts just like `if`, except with multiple options.
    Each condition is tested one at a time until one evaluates to `true`. An `else`
    clause is typically used at the end to capture cases where all prior conditions
    evaluated to `false`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the first two conditions return `false`, so the overall expression
    evaluates to the word `'yay!`.
  prefs: []
  type: TYPE_NORMAL
- en: Some good procedures to use for the test cases are `>`, `<`, and `=`.
  prefs: []
  type: TYPE_NORMAL
- en: '`and`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`and` checks whether *all* of its arguments are `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: (Note that `#t` and `true` can be used interchangeably, as can `#f` and `false`.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Why is `and` a special form? Because it evaluates its arguments and stops as
    soon as it can, returning `false` as soon as any argument evaluates to `false`.
    This turns out to be useful. Suppose we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how the last call didn''t fail. Since `(number? ''aardvark)` evaluates
    to `false`, `and` returns `#f` before evaluating its second argument. Calling
    `(divisible? ''aardvark 4)` would cause an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This message simply says that the procedure `remainder` reported an error because
    it expected an integer but instead got `'aardvark`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A subtle point about `and`: if all its arguments evaluate to `true`, instead
    of simply returning `#t` it will return the value of its last argument.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Anything that is not `#f` is `#t`. So, `100` is `true`, `'foo` is `true`, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: '`or`'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`or` checks whether **any** of its arguments are `true`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Why is `or` a special form? It evaluates its arguments and stops as soon as
    one of its arguments evaluates to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'A subtle point about `or`: like `and`, if any one of its arguments evaluate
    to `true`, `or` returns the value of the evaluated expression rather than just
    simply `#t`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Part a
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take a moment to read through the above and try everything out in the interpreter.
    Then, write a procedure `can-drive` that takes the age of a person as an argument.
    If the age is below 16, return the sentence `'(Not yet)`. Otherwise, return the
    sentence `'(Good to go)`. Make sure to test your code in the interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you''ve finished this exercise, run the autograder on your code to check
    if it''s correct by typing the following into your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, on your own machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Part b
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a procedure `fizzbuzz` that takes a number and outputs the word `'fizz`
    if the number is divisible by 3, `'buzz` if it's divisible by 5, `'fizzbuzz` if
    it's divisible by both 3 and 5, and otherwise, the number itself. You may find
    the function `remainder` useful. Make sure to test your code in the interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you''ve finished this exercise, check your solution by typing the following
    into your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, on your own machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why did the Walrus cross the Serengeti?
  prefs: []
  type: TYPE_NORMAL
- en: To figure out the answer, look on Piazza for the post labeled "Answer to Homework
    0-1 Exercise 3".
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'See what happens when you type the following snippets of code into the interpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we want to see if we can write a procedure that behaves just like `if`.
    Here''s our attempt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It didn't work!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is another example that breaks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Why didn't `new-if` behave like `if`? What can you learn about `if` from this
    example? Think about this and try to figure it out. Expect to see it again.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended Readings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following readings are recommended:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Lecture Notes 1](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SICP 1.1](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%25_sec_1.1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before running the autograder, you should test your code manually in the Racket
    interpreter. This is important because the autograder doesn't always test all
    possible cases.
  prefs: []
  type: TYPE_NORMAL
- en: To load individual definitions into Racket, start the Racket interpreter from
    your terminal by typing
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: then copy and paste definitions from your file into the interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: To load your entire file into Racket, use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Running the Autograder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before submitting any homework, there are two checks you need to make:'
  prefs: []
  type: TYPE_NORMAL
- en: Your homework *must* load into the Racket interpreter. Any submissions that
    do not load will not receive any credit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run your homework through the autograder to check your answers. If you cannot
    get your homework to pass all the autograder tests, don't fret. Submit your homework
    anyway. Remember, homeworks are graded based on effort.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run the autograder, type the following into the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to run the autograder on this homework, type the following into
    the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Submit Your Homework!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  prefs: []
  type: TYPE_NORMAL
