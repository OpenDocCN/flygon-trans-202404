["```\nmodule Pipe : sig = \n  val create : unit -> 'a Reader.t * 'a Writer.t\n  val read : 'a Reader.t -> [ `Eof | `Ok of 'a ] Deferred.t\n  val write : 'a Writer.t -> 'a -> unit Deferred.t\n  ...\nend\n\n```", "```\nval close : 'a Writer.t -> unit\nval close_read : 'a Reader.t -> unit\nval is_closed : ('a, 'b) t -> bool\n\nval map : 'a Reader.t -> f:('a -> 'b) -> 'b Reader.t\nval filter_map' : 'a Reader.t -> f:('a -> 'b option Deferred.t) -> 'b Reader.t\nval transfer : 'a Reader.t -> 'b Writer.t -> f:('a -> 'b) -> unit Deferred.t\nval transfer_id : 'a Reader.t -> 'a Writer.t -> unit Deferred.t\n\n```", "```\n# #require \"core\";;\n# #require \"async\";;\n# open Core.Std;;\n# open Async.Std;;\n# let (r,w) = Pipe.create ();;\nval r : '_a Pipe.Reader.t = <abstr>\nval w : '_a Pipe.Writer.t = <abstr>\n# let d = Pipe.write w \"Hello World!\";;\nval d : unit Deferred.t = <abstr>\n# Pipe.read r;;\n- : [ `Eof | `Ok of string ] = `Ok \"Hello World!\"\n# Deferred.peek d\n- : unit option = Some ()\n\n```", "```\n\n  The function Tcp.Server.create starts a TCP server listening\non the specified port, and invokes handler whenever a new\nclient connects. The handler function is supplied with the address of\nthe client addr and a reader r for receiving data from\nthe client and a writer w for sending data to the client. The\nactual Pipe.Reader.t and Pipe.Writer.t can be\nobtained by invoking Reader.pipe and Writer.pipe on\nthese values. In this instance, the handler function\ntransfers data from one end of the pipe to the other\nusing transfer_id. The deferred\ncomputation Deferred.never () never becomes determined, which\nis appropriate because the server is intended to run forever (or until\nwe kill it). \n\n  Compilation Method 1\n\n  To compile the server, save it in a file `server.ml` and issue the following shell command:\n\n```", "```\n\n  Then, to run the server, issue the following shell command:\n\n```", "```\n\n  Compilation Method 2\n\n  PS5 includes an update to the `cs3110` tool to make building Async code easier. After you've installed that update, you can compile and run as follows:\n\n```", "```\n\n  In a different terminal, you should be able to connect to\nport 3110. Every line of text you type in will be echoed back\non the terminal:\n\n```", "```\n\n  As an extension to this simple server, modify it to capitalize or reverse the strings received as input.\n\n  Exceptions\n\n  In general, it can be difficult to reason about control flow in a program built using `async`'s deferred computations. This is especially true when handling exceptions. The library provides a simple function for dealing with code that might raise an exception:\n\n```", "```\n\n  When writing async code, you will want to use this function\ninstead of OCaml's standard try-with construct.\n\n  As another extension, modify your server so that if creating the server fails (for example, because the TCP port is already in use) the program halts with an intuitive error message.\n\n```"]