- en: Intro to Programming LanguagesTuesday, January 10th
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PLAI §1](plai.pdf#chapter.1 "Modeling Languages")'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Why should we care about programming languages? (Any examples of big projects
    *without* a little language?)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What defines a language?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: syntax
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: semantics
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: libraries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: idioms
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How important is each of these?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: libraries give you the run-time support, not an important part of the language
    itself. (BTW, the line between “a library” and “part of the language” is less
    obvious than it seems.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'idioms originate from both language design and culture. They are often misleading.
    For example, JavaScript programmers will often write:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: or
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: or
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: or
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: or
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'How many JavaScript programmers will know what this does:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'or these:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: ([Real example](https://www.websocket.org/echo.html))
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Compare:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a[25]+5` (Java: exception)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(+ (vector-ref a 25) 5)` (Racket: exception)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a[25]+5` (JavaScript: exception (or NaN))'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a[25]+5` (Python: exception)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$a[25]+5` (Perl: 5)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a[25]+5` (C: ***BOOM***)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: -> syntax is mostly in the cosmetics department; semantics is the real thing.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: How should we talk about semantics?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A few well-known formalisms for semantics.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use programs to explain semantics: the best explanation *is* a program.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ignore possible philosophical issues with circularity (but be aware of them).
    (Actually, they are solved: Scheme has a formal explanation that can be taken
    as a translation from Scheme to logic, which means that things that we write can
    be translated to logic.)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use Racket for many reasons (syntax, functional, practical, simple,
    formal, statically typed, environment).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
