- en: The Boy Scout Rule
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 男童子军规则
- en: The Boy Scout Rule
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 男童子军规则
- en: 'The Boy Scouts have a rule: "Always leave the campground cleaner than you found
    it." If you find a mess on the ground, you clean it up regardless of who might
    have made the mess. You intentionally improve the environment for the next group
    of campers. Actually the original form of that rule, written by Robert Stephenson
    Smyth Baden-Powell, the father of scouting, was "Try and leave this world a little
    better than you found it."'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 男童子军有一条规则：“始终保持营地比你发现时更加清洁。”如果你发现地上有杂乱，无论是谁弄脏的，你都要清理干净。你有意为下一组露营者改善环境。实际上，这条规则的原始形式是由童子军之父罗伯特·史蒂芬森·斯密斯·巴登-鲍尔撰写的：“尽量让这个世界比你发现时更好一点。”
- en: 'What if we followed a similar rule in our code: "Always check a module in cleaner
    than when you checked it out." No matter who the original author was, what if
    we always made some effort, no matter how small, to improve the module. What would
    be the result?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在我们的代码中遵循类似的规则会怎样：“始终在提交模块时比检出时更干净。”无论原始作者是谁，如果我们总是付出一些努力，无论多么微小，来改进模块。结果会是什么呢？
- en: I think if we all followed that simple rule, we'd see the end of the relentless
    deterioration of our software systems. Instead, our systems would gradually get
    better and better as they evolved. We'd also see *teams* caring for the system
    as a whole, rather than just individuals caring for their own small little part.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为如果我们都遵循这个简单的规则，我们将看到我们软件系统无休止恶化的终结。相反，随着系统的演进，我们的系统会逐渐变得越来越好。我们还会看到*团队*关心整个系统，而不仅仅是个体关心自己的小部分。
- en: I don't think this rule is too much to ask. You don't have to make every module
    perfect before you check it in. You simply have to make it a *little bit better*
    than when you checked it out. Of course, this means that any code you *add* to
    a module must be clean. It also means that you clean up at least one other thing
    before you check the module back in. You might simply improve the name of one
    variable, or split one long function into two smaller functions. You might break
    a circular dependency, or add an interface to decouple policy from detail.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这条规则并不过分。你不必在提交之前使每个模块都完美无缺。你只需让它比你检出时*好一点*。当然，这意味着你*添加*到模块的任何代码都必须是干净的。这也意味着在提交模块之前，你要清理至少一件其他事情。你可以简单地改进一个变量的名称，或者将一个长函数拆分为两个更小的函数。你可以打破循环依赖，或者添加一个接口来解耦策略和细节。
- en: Frankly, this just sounds like common decency to me — like washing your hands
    after you use the restroom, or putting your trash in the bin instead of dropping
    it on the floor. Indeed the act of leaving a mess in the code should be as socially
    unacceptable as *littering*. It should be something that *just isn't done*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 坦率地说，这听起来对我来说就像是常识和礼貌一样——比如使用完洗手间后洗手，或者把垃圾扔进垃圾桶而不是扔在地上。事实上，在代码中留下混乱的行为应该像*乱丢垃圾*一样在社会上不被接受。这应该是*不可取的*行为。
- en: But it's more than that. Caring for our own code is one thing. Caring for the
    team's code is quite another. Teams help each other, and clean up after each other.
    They follow the Boy Scout rule because it's good for everyone, not just good for
    themselves.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不仅仅是如此。关心我们自己的代码是一回事。关心团队的代码是另一回事。团队互相帮助，互相清理。他们遵循男童子军规则，因为这对每个人都有好处，而不仅仅对自己有好处。
- en: by [Uncle Bob](http://programmer.97things.oreilly.com/wiki/index.php/Uncle_Bob)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[叔叔鲍勃](http://programmer.97things.oreilly.com/wiki/index.php/Uncle_Bob)
