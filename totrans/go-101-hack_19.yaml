- en: Accessing map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accessing map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Map is a reference type which points to a hash table, and you can use it to
    construct a "key-value" database which is very handy in practice programming.
    E.g., the following code will calculate the count of every element in a slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, according to [Go spec](https://golang.org/ref/spec#Map_types): "A
    map is an **unordered** group of elements of one type, called the element type,
    indexed by a set of unique keys of another type, called the key type.". So if
    you run the above program another time, the output may be different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You must not presume the element order of a map.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key type of the map must can be compared with "`==`" operator: the built-in
    types, such as int, string, etc, satisfy this requirement; while slice not. For
    struct type, if its members all can be compared by "`==`" operator, then this
    struct can also be used as key.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you access a non-exist key of the map, the map will return the `nil` value
    of the element. I.e.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'the value of `m[0]` and `m[2]` are both `false`, so you can''t discriminate
    whether the key is really in map or not. The solution is to use “comma ok” method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: if the key does exit, `ok` will be `true`; else `ok` will be `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, you may not care the values of the map, and use map just as a set.
    In this case, you can declare the value type as an empty struct: `struct{}`. An
    example is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Using built-in `delete` function, you can remove an entry in the map, even
    the key doesn''t exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Effective Go](https://golang.org/doc/effective_go.html);'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Go Programming Language Specification](https://golang.org/ref/spec);'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Go Programming Language](http://www.gopl.io/).'
  prefs: []
  type: TYPE_NORMAL
