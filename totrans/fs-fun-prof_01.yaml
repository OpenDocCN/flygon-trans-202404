- en: Contents of the book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Installing and using F#](index3.html) will get you started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why use F#?](index2.html) An interactive tour of F#.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learning F#](index4.html) has tips to help you learn more effectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Troubleshooting F#](index5.html) for when you have problems getting your code
    to compile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and then you can try...
  prefs: []
  type: TYPE_NORMAL
- en: '[Twenty six low-risk ways to use F# at work](low-risk-ways-to-use-fsharp-at-work1.html).
    You can start right now -- no permission needed!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tutorials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following series are tutorials on the key concepts of F#.
  prefs: []
  type: TYPE_NORMAL
- en: '[Thinking functionally](thinking-functionally.html) starts from basics and
    explains how and why functions work the way they do.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Expressions and syntax](expressions-and-syntax.html) covers the common expressions
    such as pattern matching, and has a post on indentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding F# types](understanding-fsharp-types.html) explains how to define
    and use the various types, including tuples, records, unions, and options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Designing with types](designing-with-types.html) explains how to use types
    as part of the design process, making illegal states unrepresentable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Choosing between collection functions](list-module-functions.html). If you
    are coming to F# from C#, the large number of list functions can be overwhelming,
    so I have written this post to help guide you to the one you want.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Property-based testing](property-based-testing.html): the lazy programmer''s
    guide to writing 1000''s of tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding computation expressions](computation-expressions.html) demystifies
    them and shows how you can create your own.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These posts explain some core patterns in functional programming -- concepts
    such as "map", "bind", monads and more.
  prefs: []
  type: TYPE_NORMAL
- en: '[Railway Oriented Programming](recipe-part2.html): A functional approach to
    error handling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[State Monad](handling-state.html): An introduction to handling state using
    the tale of Dr Frankenfunctor and the Monadster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reader Monad](elevated-world-6.html): Reinventing the Reader monad.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Map, bind, apply, lift, sequence and traverse](map-and-bind-and-apply-oh-my.html):
    A series describing some of the core functions for dealing with generic data types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Monoids without tears](monoids-without-tears.html): A mostly mathless discussion
    of a common functional pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fold and recursive types](recursive-types-and-folds.html): A look at recursive
    types, catamorphisms, tail recursion, the difference between left and right folds,
    and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding Parser Combinators](understanding-parser-combinators1.html):
    Creating a parser combinator library from scratch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Thirteen ways of looking at a turtle](13-ways-of-looking-at-a-turtle.html):
    demonstrates many different techniques for implementing a turtle graphics API,
    including state monads, agents, interpreters, and more!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Worked examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These posts provide detailed worked examples with lots of code!
  prefs: []
  type: TYPE_NORMAL
- en: '[Designing for correctness](designing-for-correctness.html): How to make illegal
    states unrepresentable (a shopping cart example).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stack based calculator](stack-based-calculator.html): Using a simple stack
    to demonstrate the power of combinators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Parsing commmand lines](pattern-matching-command-line.html): Using pattern
    matching in conjunction with custom types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Roman numerals](roman-numerals.html): Another pattern matching example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Calculator Walkthrough](calculator-design.html): The type-first approach to
    designing a Calculator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Enterprise Tic-Tac-Toe](enterprise-tic-tac-toe.html): A walkthrough of the
    design decisions in a purely functional implementation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Writing a JSON Parser](understanding-parser-combinators-4.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific topics in F#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'General:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Four key concepts](key-concepts.html) that differentiate F# from a standard
    imperative language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding F# indentation](fsharp-syntax.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The downsides of using methods](type-extensions.html#downsides-of-methods).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Currying](currying.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Partial Application](partial-application.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Control Flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Match..with expressions](match-expression.html) and [creating folds to hide
    the matching](match-expression.html#folds).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[If-then-else and loops](control-flow-expressions.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exceptions](exceptions.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Option Types](the-option-type.html) especially on why [None is not the same
    as null](the-option-type.html#option-is-not-null).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Record Types](records.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tuple Types](tuples.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Discriminated Unions](the-option-type.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Algebraic type sizes and domain modelling](type-size-and-design.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controversial posts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Is your programming language unreasonable?](is-your-language-unreasonable.html)
    or, why predictability is important.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Commentary on ''Roman Numerals Kata with Commentary''](roman-numeral-kata.html).
    My approach to the Roman Numerals Kata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ten reasons not to use a statically typed functional programming language](ten-reasons-not-to-use-a-functional-programming-language.html).
    A rant against something I don''t get.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[We don''t need no stinking UML diagrams](no-uml-diagrams.html) or, why in
    many cases, using UML for class diagrams is not necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
