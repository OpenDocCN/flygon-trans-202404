- en: Bindings & SubstitutionTuesday, January 24th
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now get to an important concept: substitution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Even in our simple language, we encounter repeated expressions. For example,
    if we want to compute the square of some expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Why would we want to get rid of the repeated sub-expression?
  prefs: []
  type: TYPE_NORMAL
- en: It introduces a redundant computation. In this example, we want to avoid computing
    the same sub-expression a second time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It makes the computation more complicated than it could be without the repetition.
    Compare the above with:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is related to a basic fact in programming that we have already discussed:
    duplicating information is always a bad thing. Among other bad consequences, it
    can even lead to bugs that could not happen if we wouldn’t duplicate code. A toy
    example is “fixing” one of the numbers in one expression and forgetting to fix
    the corresponding one:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Real world examples involve much more code, which make such bugs very difficult
    to find, but they still follow the same principle.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This gives us more expressive power — we don’t just say that we want to multiply
    two expressions that both happen to be `{+ 4 2}`, we say that we multiply the
    `{+ 4 2}` expression by *itself*. It allows us to express identity of two values
    as well as using two values that happen to be the same.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, the normal way to avoid redundancy is to introduce an identifier. Even
    when we speak, we might say: “let x be 4 plus 2, multiply x by x”.'
  prefs: []
  type: TYPE_NORMAL
- en: '(These are often called “variables”, but we will try to avoid this name: what
    if the identifier does not change (vary)?)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get this, we introduce a new form into our language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We expect to be able to reduce this to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: by substituting 6 for `x` in the body sub-expression of `with`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A little more complicated example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
