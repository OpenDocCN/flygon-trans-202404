["```\nclass Pipe(object):\n    def __init__(self, func):\n        self.func = func\n\n    def __ror__(self, other):\n        def generator():\n            for obj in other:\n                if obj is not None:\n                    yield self.func(obj)\n        return generator()\n\n@Pipe\ndef even_filter(num):\n    return num if num % 2 == 0 else None\n\n@Pipe\ndef multiply_by_three(num):\n    return num*3\n\n@Pipe\ndef convert_to_string(num):\n    return 'The Number: %s' % num\n\n@Pipe\ndef echo(item):\n    print item\n    return item\n\ndef force(sqs):\n    for item in sqs: pass\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nforce(nums | even_filter | multiply_by_three | convert_to_string | echo) \n```", "```\nBinary Operators\nOperator    Method\n+   object.__add__(self, other)\n-   object.__sub__(self, other)\n*   object.__mul__(self, other)\n//  object.__floordiv__(self, other)\n/   object.__div__(self, other)\n%   object.__mod__(self, other)\n**  object.__pow__(self, other[, modulo])\n<<  object.__lshift__(self, other)\n>>  object.__rshift__(self, other)\n&   object.__and__(self, other)\n^   object.__xor__(self, other)\n|   object.__or__(self, other)\n\nExtended Assignments\nOperator    Method\n+=  object.__iadd__(self, other)\n-=  object.__isub__(self, other)\n*=  object.__imul__(self, other)\n/=  object.__idiv__(self, other)\n//= object.__ifloordiv__(self, other)\n%=  object.__imod__(self, other)\n**= object.__ipow__(self, other[, modulo])\n<<= object.__ilshift__(self, other)\n>>= object.__irshift__(self, other)\n&=  object.__iand__(self, other)\n^=  object.__ixor__(self, other)\n|=  object.__ior__(self, other)\n\nUnary Operators\nOperator    Method\n-   object.__neg__(self)\n+   object.__pos__(self)\nabs()   object.__abs__(self)\n~   object.__invert__(self)\ncomplex()   object.__complex__(self)\nint()   object.__int__(self)\nlong()  object.__long__(self)\nfloat() object.__float__(self)\noct()   object.__oct__(self)\nhex()   object.__hex__(self\n\nComparison Operators\nOperator    Method\n<   object.__lt__(self, other)\n<=  object.__le__(self, other)\n==  object.__eq__(self, other)\n!=  object.__ne__(self, other)\n>=  object.__ge__(self, other)\n>   object.__gt__(self, other) \n```"]