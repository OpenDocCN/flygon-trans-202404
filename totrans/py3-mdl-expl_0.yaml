- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python 3 Module Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: (c) 2016 Dr. Kristian Rother (krother@academis.eu)
  prefs: []
  type: TYPE_NORMAL
- en: Distributed under the conditions of the Creative Commons Attribution Share-alike
    License 4.0
  prefs: []
  type: TYPE_NORMAL
- en: Sources of this document can be found on [https://github.com/krother/Python3_Module_Examples](https://github.com/krother/Python3_Module_Examples)
  prefs: []
  type: TYPE_NORMAL
- en: Purpose of this e-book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This e-book contains my favourite Python modules. Every module comes with a
    *brief description* and a *code example*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This document is for you if:'
  prefs: []
  type: TYPE_NORMAL
- en: you know a little bit of Python already
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: you would like to know what Python modules are there
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: you find the amount of Python modules overwhelming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: you find the full documentation too heavy to begin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: you would like to try a few simple examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Have fun getting to know Python better!**'
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![25 Modules](module_mindmap.png)'
  prefs: []
  type: TYPE_IMG
- en: csv - reading and writing CSV files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: csv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Read and write *comma-separated-value (CSV)* files.
  prefs: []
  type: TYPE_NORMAL
- en: The `csv` module reads and writes nested lists from/to CSV files. You can set
    a *field delimiter*, *quote character* and *line terminator* character. Note that
    when reading a line, all columns are in string format.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write a table with two rows to a CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the file again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/csv.html](https://docs.python.org/3/library/csv.html)'
  prefs: []
  type: TYPE_NORMAL
- en: json - working with JSON files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Convert Python dictionaries to JSON and back.
  prefs: []
  type: TYPE_NORMAL
- en: The *JavaScript Object Notation (JSON)* is frequently used to send structured
    data around the web or store it painlessly in files. The `json` modules utilizes
    the similarity of the JSON format to Python dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Convert a dictionary to a JSON-formatted string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert JSON string back to a Python dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/json.html](https://docs.python.org/3/library/json.html)'
  prefs: []
  type: TYPE_NORMAL
- en: xml - parsing XML files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Parse XML files.
  prefs: []
  type: TYPE_NORMAL
- en: The `xml` module contains several XML parsers. They produce a tree of DOM objects
    for each tag that can be searched and allow access to attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sample XML data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Read an XML file and extract content from tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/xml.html](https://docs.python.org/3/library/xml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: zipfile - reading and writing .zip files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: zipfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Read and write `.zip` files.
  prefs: []
  type: TYPE_NORMAL
- en: You can add both existing files and strings to a zip file. If you are adding
    strings you need to specify the file name it is written to. When you extract files
    to a folder, the output folder is automatically created.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a new zip archive and add files to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'List contents of the newly created zip file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract a file to a new folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[docs.python.org/3/library/zipfile.html](https://docs.python.org/3/library/zipfile.html)'
  prefs: []
  type: TYPE_NORMAL
- en: numpy - fast matrix calculations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: numpy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: numpy makes it easy to work with matrices in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Because it is implemented in C, `numpy` accelerates many calculations. It is
    also type-safe - all elements of a matrix have the same type. Many of the most
    powerful Python libraries like `pandas`, `scikit-learn` and `PILLOW` have been
    built on top of numpy.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-installed on Anaconda?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: How to install it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating a 4 x 2 matrix and adding 10 to each element
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[http://www.numpy.org/](http://www.numpy.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: pandas - comfortable handling of tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Analyze tabular data.
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas` is an extremely powerful library to analyze, combine and manipulate
    data in many thinkable (and some unthinkable) ways. The tables called *DataFrame*
    have many similarities to R. DataFrames have an index column and functions for
    plotting and reading from CSV or Excel files are included by default. Pandas uses
    `numpy` under the hood.'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'no'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Anaconda
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: How to install it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a table with characters and numbers.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Sorted lines by name, filter by minimum size, print first two values and write
    a CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[http://pandas.pydata.org/](http://pandas.pydata.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: scipy - scientific calculations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: scipy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scientific calculations.
  prefs: []
  type: TYPE_NORMAL
- en: scipy is a Python library for fitting functions and other kinds of numerical
    analyses. You find functions for signal processing, Fourier Transform, generating
    random datasets and many more. Scipy uses `numpy` and `matplotlib`.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'no'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Anaconda
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: How to install it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Define a square function; create noisy X/Y data using `numpy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Fit the parameters of the function with noisy data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot the outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[http://scipy.org/](http://scipy.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: scikit-learn - Machine Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: scikit-learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Machine Learning.
  prefs: []
  type: TYPE_NORMAL
- en: The `scikit-learn` library contains regression and classification methods ranging
    from simple linear regression over logistic regression, Support Vector Machines
    and multiple clustering methods to sophisticated things like Random Forests. In
    addition, rich functions for validating predictions exist.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'no'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Anaconda
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: How to install it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Load one of the example datasets and divide it into a training and test set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Fit a Support Vector Machine model and test it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Do a five-fold cross-validation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[http://scipy.org/](http://scipy.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: matplotlib - plotting diagrams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Plotting diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: '`matplotlib` is capable of producing static images of all common types of diagrams
    in print quality: line plots, scatter plots, bar charts, pie charts, histograms,
    heat maps etc.'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Anaconda
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: 'How to install it:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Plot a square function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![output from matplotlib](matplotlib_output.png)'
  prefs: []
  type: TYPE_IMG
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[http://matplotlib.org/](http://matplotlib.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: pillow - image manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PILLOW
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Image manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: '`PILLOW` is the inofficial successor to the **Python Imaging Library (`PIL`)**.
    It facilitates creating, cutting and applying various filters to pixel-based images.'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'no'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Anaconda
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: How to install it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Convert all `.png` images in the directory to half their size.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://pillow.readthedocs.org](https://pillow.readthedocs.org)'
  prefs: []
  type: TYPE_NORMAL
- en: requests - improved retrieving web pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Retrieving webpages.
  prefs: []
  type: TYPE_NORMAL
- en: '`requests` sends HTTP requests to web pages and allows you to read their content.
    Most standard tasks are a lot easier compared to the standard module `urllib`.
    `requests` can sending data to web forms via HTTP GET and POST, submit files and
    manage cookies.'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'no'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Anaconda
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Read the homepage of the author.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Search scientific articles on PubMed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[http://docs.python-requests.org/en/latest/index.html](http://docs.python-requests.org/en/latest/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: bs4 - parsing HTML pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BeautifulSoup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Parsing HTML pages.
  prefs: []
  type: TYPE_NORMAL
- en: Beautiful soup is much, much easier to use than the default HTML parser installed
    with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'no'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Anaconda
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'no'
  prefs: []
  type: TYPE_NORMAL
- en: How to install it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Parsing list items out of a HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[http://www.crummy.com/software/BeautifulSoup/bs4/doc/](http://www.crummy.com/software/BeautifulSoup/bs4/doc/)'
  prefs: []
  type: TYPE_NORMAL
- en: paramiko - executing commands via SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: paramiko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Executing commands via SSH.
  prefs: []
  type: TYPE_NORMAL
- en: '`paramiko` allows you to execute Unix commands on another machine by logging
    in via SSH. The `fabric` module gives you a comfortable interface built on top
    of `paramiko`.'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'no'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Anaconda
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: List the directory on a remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: WARNING
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Do not hard-code your password inside your Python files. Better read it from
    a configuration file or environment variable. That way it is less likely that
    it gets into wrong hands accidentally**'
  prefs: []
  type: TYPE_NORMAL
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[www.paramiko.org/](http://www.paramiko.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: math - mathematical functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: math
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: math contains mathematical functions similar to a scientific calculator.
  prefs: []
  type: TYPE_NORMAL
- en: In the module, you find various trigonometric and exponential functions. In
    addition the two constants `pi` and `e` are included.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calculating a **square root**, a **sine**, an **exponential function** and a
    **logarithm**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/math.html](https://docs.python.org/3/library/math.html)'
  prefs: []
  type: TYPE_NORMAL
- en: os - working with files and directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: os
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Working with files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: The `os` module provides an easy way to interact with files, directories and
    other parts of your operating system. It contains many functions to list, change,
    copy, remove and examine files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Change directory and list its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether a file exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy a file and remove it afterwards:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/os.html](https://docs.python.org/3/library/os.html)'
  prefs: []
  type: TYPE_NORMAL
- en: random - generating random numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: random
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generate random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '`random` contains generators for the most common distributions.'
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating random integers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One most wanted function is to create random integers in a given range:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Creating random floats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `random()` functin generates float numbers between 0 and 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Generate random numbers from a few distributions.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Shuffle a list
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Creating random lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Random combinations of elements with repetition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'When elements are to be picked without repetition, you would use, the `sample`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/random.html](https://docs.python.org/3/library/random.html)'
  prefs: []
  type: TYPE_NORMAL
- en: re - pattern matching in text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: re
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pattern matching in text.
  prefs: []
  type: TYPE_NORMAL
- en: The `re` module implements **Regular Expression**, a powerful syntax for searching
    patterns in text. Regular Expressions are available in most programming languages.
    You need to learn some special characters to build your own patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Search for `o` and show adjacent characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Search for three-letter words enclosed by whitespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Substitute any of `dflj` by a `w`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Check if `jumps` or `swims` occurs and return details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Online Games
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[regexone.com/](http://regexone.com/) - Learn regular expressions by simple,
    interactive examples. Great place to start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Regex crossword](http://regexcrossword.com/) - Train proper use of single
    characters, wildcards and square brackets. Easy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Regex Practice Quiz 1](http://www.tekdefense.com/news/2013/2/10/regex-practice-quiz-1-understanding-patterns.html)
    - exercises to try offline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Regex golf](http://regex.alf.nu) - Advanced exercises. Match as many phrases
    with as few key strokes as possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reference
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Python Regex HOWTO](https://docs.python.org/3.6/howto/regex.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[docs.python.org/3/library/re.html](https://docs.python.org/3/library/re.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Quick Reference](http://www.night-ray.com/regex.pdf) - a reference sheet for
    looking up metacharacters. Uses the **Python syntax**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Online Regex Testers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Regex 101](http://regex101.com/) - Shows matched text with explanation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pythex](https://pythex.org/) - RegEx tester using the Python `re` module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[regexpal](http://regexpal.com/) - Uses JavaScript to highlight matches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: time - working with dates and times
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Simple handling of times and dates.
  prefs: []
  type: TYPE_NORMAL
- en: The functions in `time` return the time and date in a structured format that
    can be formated to custom strings.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `time` module offers functions for getting the current time and date.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait for two seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The `datetime` module also helps to format dates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Dates can be converted to integer numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: and back
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/time.html](https://docs.python.org/3/library/time.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/time.html](https://docs.python.org/3/library/datetime.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlite3 - a simple SQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sqlite3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create and use a *SQLite* database.
  prefs: []
  type: TYPE_NORMAL
- en: SQLite databases are stored in files. For using the `sqlite3` module you don't
    need to install or set up anything. SQLite is sufficient only for small SQL databases,
    but Python modules for bigger databases look very similar.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a new database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Submit a query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[docs.python.org/3.5/library/sqlite3.html](https://docs.python.org/3.5/library/sqlite3.html)'
  prefs: []
  type: TYPE_NORMAL
- en: sys - settings of the Python interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Settings of the Python interpreter itself.
  prefs: []
  type: TYPE_NORMAL
- en: The `sys` module provides an access point to the Python environment. You find
    there command line arguments, the import path settings, the standard input, output
    and error stream and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Command line parameters used when calling Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Version of the Python interpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Directories in which Python looks for modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Exit Python altogether:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/sys.html](https://docs.python.org/3/library/sys.html)'
  prefs: []
  type: TYPE_NORMAL
- en: itertools - working with lists and generators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: itertools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What it is good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Functions to work with lists and iterators.
  prefs: []
  type: TYPE_NORMAL
- en: Most functions in this module return *iterators*, so you can use their result
    once or convert it to a list.
  prefs: []
  type: TYPE_NORMAL
- en: Installed with Python by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yes'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Concatenate a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Permutations and combinations of list elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Where to learn more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/itertools.html](https://docs.python.org/3/library/itertools.html)'
  prefs: []
  type: TYPE_NORMAL
