- en: Concurrency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lecture Notes for CS 140
  prefs: []
  type: TYPE_NORMAL
- en: Spring 2014
  prefs: []
  type: TYPE_NORMAL
- en: John Ousterhout
  prefs: []
  type: TYPE_NORMAL
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    Chapter 5 up through Section 5.1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Independent and Cooperating Threads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Independent thread: one that can''t affect or be affected by the rest of the
    universe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its state isn't shared in any way by any other thread.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deterministic: input state alone determines results.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reproducible.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can stop and continue with no bad effects (only time varies).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are many different ways in which a collection of independent threads
    might be executed on a computer:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Single-tasking: each thread runs to completion before the next one starts.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Multitasking with one core that is shared among several threads. Does the order
    of dispatching affect the behavior?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multitasking with several cores (multiprocessing): run threads in parallel
    on separate cores.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A given thread runs on only one core at a time.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A thread may run on different core at different times (move state, assume processors
    are identical).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From the standpoint of a thread, can't tell the difference between one core
    and many cores.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cooperating threads: those that share state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Behavior is *nondeterministic*: depends on relative execution sequence and
    cannot be predicted in advance.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Behavior may be *irreproducible*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example: one thread writes "ABC" to a console window, another writes "CBA"
    concurrently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why permit threads to cooperate?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Basic assumption for cooperating threads is that the order of some operations
    is irrelevant; certain operations are independent of certain other operations.
    Examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Thread 1: A = 1;'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Thread 2: B = 2;'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Thread 1: A = B+1;'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Thread 2: B = 2*B;'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Atomic Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can say ANYTHING about cooperating threads, we must know that some
    operation is *atomic*: it either happens in its entirety without interruption,
    or not at all. Cannot be interrupted in the middle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References and assignments are atomic in almost all systems. A=B will always
    read a clean value for B and set a clean value for A (but not necessarily true
    for arrays or records).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In uniprocessor systems, anything between interrupts is atomic.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't have an atomic operation, you can't make one. Fortunately, hardware
    designers give us atomic ops.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have any atomic operation, you can use it to generate higher-level constructs
    and make parallel programs work correctly. This is the approach we'll take in
    this class.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The "Too Much Milk" Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic problem:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What is the correct behavior?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More definitions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Synchronization*: using atomic operations to ensure correct operation of cooperating
    threads.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Critical section*: a section of code, or collection of operations, in which
    only one thread may be executing at a given time. E.g. shopping.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mutual exclusion*: mechanisms used to create critical sections.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Typically, mutual exclusion achieved with a *locking* mechanism: prevent others
    from doing something. For example, before shopping, leave a note on the refrigerator:
    don''t shop if there is a note.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First attempt at computerized milk buying (assume atomic reads and writes):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Second attempt: change meaning of note. A buys if no note, B buys if there
    is a note.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Third attempt: use separate notes for A and B.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Fourth attempt: just need a way to decide who will buy milk when both leave
    notes (somebody has to hang around to make sure that the job gets done):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This solution works but has two disadvantages:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Asymmetric (and complex) code.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: While B is waiting it is consuming resources (*busy-waiting* ).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For a symmetric solution without busy-waiting, see [Peterson's Algorithm](http://en.wikipedia.org/wiki/Peterson%27s_algorithm).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
