- en: Concurrency
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发性
- en: Lecture Notes for CS 140
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CS 140课程讲义
- en: Spring 2014
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年春季
- en: John Ousterhout
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·奥斯特豪特
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    Chapter 5 up through Section 5.1.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本主题的阅读材料来自*操作系统：原理与实践*：第5章至第5.1节。
- en: Independent and Cooperating Threads
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独立和协作线程
- en: 'Independent thread: one that can''t affect or be affected by the rest of the
    universe.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立线程：不能影响或被宇宙的其他部分影响的线程。
- en: Its state isn't shared in any way by any other thread.
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的状态不会以任何方式被其他线程共享。
- en: 'Deterministic: input state alone determines results.'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定性：仅由输入状态确定结果。
- en: Reproducible.
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可重现的。
- en: Can stop and continue with no bad effects (only time varies).
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以停止并继续而没有不良影响（只是时间变化）。
- en: 'There are many different ways in which a collection of independent threads
    might be executed on a computer:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有许多不同的方式可以在计算机上执行一组独立线程：
- en: 'Single-tasking: each thread runs to completion before the next one starts.'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单任务处理：每个线程在下一个开始之前运行完成。
- en: Multitasking with one core that is shared among several threads. Does the order
    of dispatching affect the behavior?
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个核心上的多任务处理，由多个线程共享。调度顺序会影响行为吗？
- en: 'Multitasking with several cores (multiprocessing): run threads in parallel
    on separate cores.'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多核心的多任务处理（多处理）：在单独的核心上并行运行线程。
- en: A given thread runs on only one core at a time.
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定线程一次只在一个核心上运行。
- en: A thread may run on different core at different times (move state, assume processors
    are identical).
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个线程可能在不同时间在不同核心上运行（移动状态，假设处理器是相同的）。
- en: From the standpoint of a thread, can't tell the difference between one core
    and many cores.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从线程的角度来看，无法区分一个核心和多个核心。
- en: 'Cooperating threads: those that share state.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作线程：共享状态的线程。
- en: 'Behavior is *nondeterministic*: depends on relative execution sequence and
    cannot be predicted in advance.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为是*不确定的*：取决于相对执行顺序，无法提前预测。
- en: Behavior may be *irreproducible*.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为可能是*不可重现*的。
- en: 'Example: one thread writes "ABC" to a console window, another writes "CBA"
    concurrently.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例子：一个线程向控制台窗口写入“ABC”，另一个同时写入“CBA”。
- en: Why permit threads to cooperate?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么允许线程合作？
- en: 'Basic assumption for cooperating threads is that the order of some operations
    is irrelevant; certain operations are independent of certain other operations.
    Examples:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作线程的基本假设是某些操作的顺序是无关紧要的；某些操作与其他某些操作无关。例如：
- en: 'Thread 1: A = 1;'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程1：A = 1;
- en: 'Thread 2: B = 2;'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 线程2：B = 2;
- en: 'Thread 1: A = B+1;'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程1：A = B+1;
- en: 'Thread 2: B = 2*B;'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 线程2：B = 2*B;
- en: Atomic Operations
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原子操作
- en: 'Before we can say ANYTHING about cooperating threads, we must know that some
    operation is *atomic*: it either happens in its entirety without interruption,
    or not at all. Cannot be interrupted in the middle.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们讨论任何关于协作线程的事情之前，我们必须知道某些操作是*原子*的：它要么完全发生而没有中断，要么根本不发生。不能在中间被中断。
- en: References and assignments are atomic in almost all systems. A=B will always
    read a clean value for B and set a clean value for A (but not necessarily true
    for arrays or records).
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几乎所有系统中的引用和赋值都是原子的。A=B将始终读取B的干净值，并为A设置一个干净值（但对于数组或记录来说不一定是真的）。
- en: In uniprocessor systems, anything between interrupts is atomic.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单处理器系统中，中断之间的任何操作都是原子的。
- en: If you don't have an atomic operation, you can't make one. Fortunately, hardware
    designers give us atomic ops.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有原子操作，你无法创建一个。幸运的是，硬件设计者给了我们原子操作。
- en: If you have any atomic operation, you can use it to generate higher-level constructs
    and make parallel programs work correctly. This is the approach we'll take in
    this class.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有任何原子操作，你可以用它来生成更高级的结构，并使并行程序正确运行。这是我们在这门课上要采取的方法。
- en: The "Too Much Milk" Problem
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “牛奶太多”问题
- en: 'The basic problem:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本问题：
- en: '[PRE0]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What is the correct behavior?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确的行为是什么？
- en: 'More definitions:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多定义：
- en: '*Synchronization*: using atomic operations to ensure correct operation of cooperating
    threads.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*同步*：使用原子操作确保协作线程的正确操作。'
- en: '*Critical section*: a section of code, or collection of operations, in which
    only one thread may be executing at a given time. E.g. shopping.'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*临界区*：代码段或操作集合，在其中一次只能执行一个线程。例如购物。'
- en: '*Mutual exclusion*: mechanisms used to create critical sections.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*互斥*：用于创建临界区的机制。'
- en: 'Typically, mutual exclusion achieved with a *locking* mechanism: prevent others
    from doing something. For example, before shopping, leave a note on the refrigerator:
    don''t shop if there is a note.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，通过 *锁定* 机制来实现互斥：阻止其他人做某事。例如，在购物之前，在冰箱上留个便条：如果有备注就不要购物。
- en: 'First attempt at computerized milk buying (assume atomic reads and writes):'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一次尝试计算机化购买牛奶（假设原子读写）：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Second attempt: change meaning of note. A buys if no note, B buys if there
    is a note.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二次尝试：更改备注的意义。如果没有备注，A就买，如果有备注，B就买。
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Third attempt: use separate notes for A and B.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三次尝试：A 和 B 使用单独的备注。
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Fourth attempt: just need a way to decide who will buy milk when both leave
    notes (somebody has to hang around to make sure that the job gets done):'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四次尝试：只需找到一种方法来决定当两者都留下备注时谁来买牛奶（必须有人留下来确保任务完成）：
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This solution works but has two disadvantages:'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个解决方案有效，但有两个缺点：
- en: Asymmetric (and complex) code.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不对称（且复杂）的代码。
- en: While B is waiting it is consuming resources (*busy-waiting* ).
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 B 在等待时，它在消耗资源（*忙等待*）。
- en: For a symmetric solution without busy-waiting, see [Peterson's Algorithm](http://en.wikipedia.org/wiki/Peterson%27s_algorithm).
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解一个没有忙等待的对称解决方案，请参阅[彼得森算法](http://en.wikipedia.org/wiki/Peterson%27s_algorithm)。
