- en: ExtractionExtracting ML from Coq
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: (* DROP *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Extraction Language Ocaml.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Require Import Coq.Arith.Arith.
  prefs: []
  type: TYPE_NORMAL
- en: Require Import Coq.Arith.EqNat.
  prefs: []
  type: TYPE_NORMAL
- en: Require Import ImpCEvalFun.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Extraction "imp1.ml" ceval_step.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Controlling Extraction of Specific Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can tell Coq to extract certain Inductive definitions to
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: specific OCaml types.  For each one, we must say
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: how the Coq type itself should be represented in OCaml, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how each constructor should be translated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Also, for non-enumeration types (where the constructors take
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: arguments), we give an OCaml expression that can be used as a
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"recursor" over elements of the type.  (Think Church numerals.)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We can also extract defined constants to specific OCaml terms or
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: operators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Important: It is entirely *your responsibility* to make sure that'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the translations you're proving make sense.  For example, it might
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: be tempting to include this one
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Extraction "imp2.ml" ceval_step.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: A Complete Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use our extracted evaluator to run Imp programs, all we need to
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: add is a tiny driver program that calls the evaluator and prints
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: out the result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For simplicity, we'll print results by dumping out the first four
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: memory locations in the final state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, to make it easier to type in examples, let's extract a
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: parser from the ImpParser Coq module.  To do this, we need a few
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: magic declarations to set up the right correspondence between Coq
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: strings and lists of OCaml characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We also need one more variant of booleans.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The extraction is the same as always.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now let's run our generated Imp evaluator.  First, have a look at
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: impdriver.ml.  (This was written by hand, not extracted.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, compile the driver together with the extracted code and
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: execute it, as follows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: (The -w flags to ocamlc are just there to suppress a few
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: spurious warnings.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: (* /DROP *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
