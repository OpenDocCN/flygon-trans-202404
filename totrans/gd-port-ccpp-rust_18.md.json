["```\nconst int value = 17;\nstd::string value_as_string;\n\n// Nonstandard C itoa() (also not thread safe)\nvalue_as_string = itoa(value);\n\n// OR _itoa()\nchar buffer[16];\n_itoa(value, buffer, 10);\n\n// OR\nsprintf(buffer, \"%d\", value);\n\n// OR\nstringstream ss;\nss << value;\nvalue_as_string = ss.str();\n\n// OR (boost)\nvalue_as_string = boost::lexical_cast<std::string>(ivalue); \n```", "```\nlet value = 17u32;\nlet value_as_string = value.to_string(); \n```", "```\nlet value = 100.00345f32;\nlet value_as_string = value.to_string(); \n```", "```\ndouble value = 1234.66667;\nchar result[32];\nsprintf(result, \"%08.2d\", value); \n```", "```\n// TODO validate\ndouble value = 1234.66667;\nostringstream ss;\nss << setfill('0') << setw(8) << setprecision(2) << value; \n```", "```\nlet value = 1234.66667;\nlet value_as_string = format!(\"{:08.2}\", value);\nprintln!(\"value = {}\", value_as_string); \n```", "```\nvalue = 01234.67 \n```", "```\n int value = atoi(value_as_str); \n```", "```\nlet value_as_str = \"12345\"; \n```", "```\nlet value_as_str = \"12345\";\nlet value = i32::from_str(value_as_str).unwrap(); \n```", "```\nuse std::str::FromStr;\nlet value_as_str = \"12345\";\nlet value = value_as_str.parse::<i32>().unwrap(); \n```", "```\nlet f = 1234.42f32;\nlet i = f as i32;\nprintln!(\"Value = {}\", i); \n```", "```\nValue = 1234 \n```", "```\nfn trim(&self) -> &str\nfn trim_left(&self) -> &str\nfn trim_right(&self) -> &str \n```", "```\nlet untrimmed_str = \" this is test with whitespace    \\t\";\nlet trimmed_str = untrimmed_str.trim();\nprintln!(\"Trimmed str = \\\"{}\\\"\", trimmed_str); \n```", "```\nTrimmed str = \"this is test with whitespace\" \n```", "```\nlet message = \"All good things come to those who wait\";\nprintln!(\"Length = {}\", message.len()); \n```", "```\nlet message = \"\u6587\u5b57\u5217\u306e\u9577\u3055\";\nassert_eq!(message.chars().count(), 6); \n```", "```\nlet input = \"20,30,400,100,21,-1\";\nlet values : Vec<&str> = input.split(\",\").collect();\nfor (i, s) in values.iter().enumerate() {\n    println!(\"Value {} = {}\", i, s);\n} \n```", "```\nValue 0 = 20\nValue 1 = 30\nValue 2 = 400\nValue 3 = 100\nValue 4 = 21\nValue 5 = -1 \n```", "```\nlet (left, right) = \"No Mister Bond I expect you to die\".split_at(14);\nprintln!(\"Left = {}\", left);\nprintln!(\"Right = {}\", right); \n```", "```\n// Split whitespace\nfor s in \" All good   \\n\\n\\tthings  to those who    wait\".split_whitespace() {\n    println!(\"Part - {}\", s);\n} \n```", "```\nPart - All\nPart - good\nPart - things\nPart - to\nPart - those\nPart - who\nPart - wait \n```", "```\nfn to_lowercase(&self) -> String\nfn to_uppercase(&self) -> String \n```", "```\nlet values: [u8; 16384] = [0; 16384]; \n```", "```\nlet my_array = [ \"Cat\", \"Dog\", \"Fish\", \"Donkey\", \"Albatross\" ];\nprintln!(\"{:?}\", my_array); \n```", "```\nlet mut my_array: [&'static str; 5] = [\"\"; 5];\n// Set some values\nmy_array[0] = \"Cat\";\nmy_array[1] = \"Dog\";\nmy_array[2] = \"Fish\";\nmy_array[3] = \"Donkey\";\nmy_array[4] = \"Albatross\";\nprintln!(\"{:?}\", my_array); \n```", "```\nlet mut my_vector = vec![1984, 1985, 1988, 1995, 2001]; \n```", "```\nlet mut my_array = Vec::new();\nmy_array.push(\"Hello\");\nlet my_presized_array = Vec::with_capacity(100); \n```", "```\nlet mut values = vec![ 99, -1, 3, 555, 76];\nvalues.sort();\nprintln!(\"Values = {:?}\", values); \n```", "```\nlet result = DirBuilder::new().recursive(true).create(\"/tmp/work_dir\"); \n```", "```\nuse std::io::prelude::*;\nuse std::fs::File;\n\nlet mut f = try!(File::open(\"myfile.txt\"));\nTODO \n```", "```\nuse std::fs::OpenOptions;\n\nlet file = OpenOptions::new()\n            .read(true)\n            .write(true)\n            .create(true)\n            .open(\"myfile.txt\"); \n```"]