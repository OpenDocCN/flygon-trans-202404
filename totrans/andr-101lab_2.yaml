- en: 'Lab 02: Introduction to ''Donation'''
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lab 02: Introduction to ''Donation'''
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is our first look at the **Donation** case study, and will involve building
    an initial single screen app, with some common Android widgets on our layout.
  prefs: []
  type: TYPE_NORMAL
- en: Objectives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Objectives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this Lab, you will be required to build the first version of our Donation
    Case Study App , called **Donation.1.0**. We will build on this lab (and the Case
    Study) over the following weeks and add in some new features and UI Design along
    the way. In this version we will add in a few UI widgets on a single layout and
    implement some basic event handling.
  prefs: []
  type: TYPE_NORMAL
- en: On completion of this lab you'll be able to
  prefs: []
  type: TYPE_NORMAL
- en: design an initial layout for the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add different widgets (such as a button, text and picker) to a layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implement basic event handling to cause some action on the click of a button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: be able to 'filter' Log messages for testing and debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 01
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Step 01 - Create Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new Android application, as demonstrated in the following 5 screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](firstrun1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](lab2s101.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](lab2s102.png)'
  prefs: []
  type: TYPE_IMG
- en: Note the 'Minimum Required SDK' which may be different from the default (as
    above).
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s103.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](lab2s104.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The opening project perspective is shown below, with the content_donate layout
    open in the visual designer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s105.png)'
  prefs: []
  type: TYPE_IMG
- en: The project will look like this
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s106.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is important to become familiar with the structure and purpose of the three
    panes surrounding the Donation ''canvas'':'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pallette:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](lab2s107.png)'
  prefs: []
  type: TYPE_IMG
- en: Outline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](lab2s108.png)'
  prefs: []
  type: TYPE_IMG
- en: Properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](lab2s109.png)'
  prefs: []
  type: TYPE_IMG
- en: These views are closely related - and you will need to monitor the information
    displayed there continually as you evolve the appearance of your activities screens.
  prefs: []
  type: TYPE_NORMAL
- en: Also, take a quick look at your **build.gradle** file to see the configuration
    and dependencies of your app.
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s110.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 02
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Step 02 - Layout Donation Activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this lab, our objective is to produce an Android App that looks something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](completeappv1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In your **content_donate.xml**, delete the current ''Hello World'' text, and
    drag and drop a new ''LargeText'' form widget onto the canvas, and ''stretch''
    the widget to fill the canvas (like below). Look closely at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s201.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, Double-Click the widget and you will be presented with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s202.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the elipse (on the right hand side, indicated below)
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s203.png)'
  prefs: []
  type: TYPE_IMG
- en: and you will be presented with the Resources Menu
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s204.png)'
  prefs: []
  type: TYPE_IMG
- en: Select a 'New Resource->New String Value, and fill in the values as below
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s205.png)'
  prefs: []
  type: TYPE_IMG
- en: Double-Click the widget again and enter **donteTitle** for the **id** and hit
    return.
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s205a.png)'
  prefs: []
  type: TYPE_IMG
- en: Once completed, you'll have something like this
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s206.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note carefully the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: the guides tyeing the text to the left, top and right corner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in Outline - the name of the control has been changed from a default to 'donateTitle'.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in Properties - check the value for 'text' and notice we have a string reference
    linking to our **strings.xml** (below)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](lab2s207.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Locate the following two files and inspect them closely:'
  prefs: []
  type: TYPE_NORMAL
- en: res/layout/content_dontate.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: res/values/strings.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note the relationship between 'donateTitle' in both files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bring in the following string into the donate activity now - (medium text)
    - and follow the same procedure as above. The designer should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s208.png)'
  prefs: []
  type: TYPE_IMG
- en: 'and our XML files will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Our 'strings.xml' file....
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Step 03
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Step 03 - The 'Donate' Button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Place a button directly on to the activity - attached to the bottom of the
    screen as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s301.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Following a similar procedure as in the previous step, rename the button and
    add an id, both called **donateButton** If all goes as expected, your xml files
    should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: activity_donate.xml
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: strings.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If there is a deviation from the above - retrace your steps (delete the button)
    until you can match the above.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now switch our attention to the Java Activity class Donate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For any 'controls' a user can interact with we usually find it useful to associate
    a class member with that object. Currently we only have one - a Button. The text
    fields we don't consider 'interactive' as such, so we will not include those.
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the following new field into the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The class will have to be imported. The class name will always match the name
    in the Palette:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s302.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are free to call the variable anything we like. However, in order to keep
    confusion to a minimum, always call the variable by the same name you used in
    the Outline view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s303.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In onCreate - we need to initialise this variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We might also add a logging message so we can have some feedback as the app
    launches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the complete activity class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finding the log message can be very difficult, unless you set a filter. In
    the ''LogCat'' view in Android Studio, create a filter like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose "Edit Filter Configuration" on the right-hand-side of the LogCat View
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s304.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter the name and filter as below
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s305.png)'
  prefs: []
  type: TYPE_IMG
- en: 'and if you then select the filter, we should see our message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s306.png)'
  prefs: []
  type: TYPE_IMG
- en: Run the app again, and verify the above message appears.
  prefs: []
  type: TYPE_NORMAL
- en: Step 04
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Step 04 - Documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The android documentation is particularly helpful and well designed. These
    are the two key starting points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/guide/components/index.html](http://developer.android.com/guide/components/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/packages.html](http://developer.android.com/reference/packages.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first is designed to be read though as a guide, perhaps independent of any
    work in Android Studio. You should get into the habit of devoting an hour or two
    a week just reading this section.
  prefs: []
  type: TYPE_NORMAL
- en: The Reference guide should always be open as you are working on labs or projects,
    and you should make a serious effort to get to grips with at least some of the
    information here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking the Button class we have just started using. We can immediately find
    the reference just by knowing the import statement in our Activity class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: .. translates to
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/Button.html](http://developer.android.com/reference/android/widget/Button.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (note the last three segments match the package name). Open this page now. Read
    just as far as the "Button Style" heading. There seems to be two ways of learning
    when an button event occurs. The first method is using the event handler/listener
    - but a second easier method is also available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try this now. Bring in a new method into Donate class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, edit the **content_donate.xml** file - and add a new ''onClick'' attribute
    into the Button xml fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: (the very last entry)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Save everything and execute the app, and monitor the log as you press the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s401.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have our first interaction working!
  prefs: []
  type: TYPE_NORMAL
- en: Step 05
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Step 05 - New Control Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recall the UI we are trying to implement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](completeappv1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need radio buttons, some sort of selection/combo box + a progress bar. These
    can be found in various locations in the pallette:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s107.png) ![](lab2s501.png) ![](lab2s502.png)'
  prefs: []
  type: TYPE_IMG
- en: 'RadioGroup, ProgressBar and NumberPicker seem likely candidates. The names
    of these controls are exactly as advertised, and we can expect them to be in the
    ''widgets'' package. To verify this, try importing them at the top of the Donate
    activity class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '... and we can bring in three fields into the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also open up three pages of documentation - which we can reverse engineer
    from the package/class names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/RadioGroup.html](http://developer.android.com/reference/android/widget/RadioGroup.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/ProgressBar.html](http://developer.android.com/reference/android/widget/ProgressBar.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/NumberPicker.html](http://developer.android.com/reference/android/widget/NumberPicker.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note this time we have gone to the Activity class before actually creating the
    controls. We should do this now - and remember to use the same names (for the
    IDs) as we create the controls.
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s503.png)![](lab2s504.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting the layout +id names as shown above may take some practice. However,
    it is an essential skill to get on top of, even it it takes a lot of trial and
    error.
  prefs: []
  type: TYPE_NORMAL
- en: 'For reference purposes (try to do it yourself first!), these are the relevant
    generated xml files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If we have our naming conventions right - then we can bind to these new controls
    in onCreate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the complete Donate class so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Step 06
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Step 06 - NumberPicker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is our reference documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/NumberPicker.html](http://developer.android.com/reference/android/widget/NumberPicker.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'which is a little overwhelming. Back in the guides:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/guide/components/index.html](http://developer.android.com/guide/components/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: we might find some useful tutorial type introduction to this control - under
    'User Interface' - 'Input Controls'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/guide/topics/ui/controls.html](http://developer.android.com/guide/topics/ui/controls.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .. and this is the page on 'pickers'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/guide/topics/ui/controls/pickers.html](http://developer.android.com/guide/topics/ui/controls/pickers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This documentation is concerned with Fragments - a concept that may be difficult
    to grasp initially, and also explores the usage of date and time pickers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get up and running without this much fuss. Returning to the documentation,
    these three methods should be sufficient initially:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/NumberPicker.html#setMaxValue(int)](http://developer.android.com/reference/android/widget/NumberPicker.html#setMaxValue(int))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/NumberPicker.html#setMinValue(int)](http://developer.android.com/reference/android/widget/NumberPicker.html#setMinValue(int))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/NumberPicker.html#getValue()](http://developer.android.com/reference/android/widget/NumberPicker.html#getValue())'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In onCreate, initialise the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'And in donateButtonPressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Run this now - and verify that it operates as expected (see the actual amounts
    in the log file, as below).
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s601.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 07
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Step 07 - The Radio Buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In *donateButtonPressed()* we need to discover which payment method has been
    selected. Our RadioGroup documentation is here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/RadioGroup.html](http://developer.android.com/reference/android/widget/RadioGroup.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This looks like the method we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[getCheckedRadioButtonId()](http://developer.android.com/reference/android/widget/RadioGroup.html#getCheckedRadioButtonId())'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a revised version of *donateButtonPressed()*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Run it now and verify we are getting the correct logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can simplify it somewhat by reducing the if statement to a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the Java ternary operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://marxsoftware.blogspot.ie/2010/09/how-i-learned-to-stop-worrying-and-love.html](http://marxsoftware.blogspot.ie/2010/09/how-i-learned-to-stop-worrying-and-love.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is the complete activity class so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: So run your app again just to confirm the logCat entries
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s701.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 08
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Step 08 - The Progress Bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The progress bar documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/ProgressBar.html](http://developer.android.com/reference/android/widget/ProgressBar.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: offers us advice on using the progress bar in multi-threaded application. Not
    quite what we are ready for yet! (but file it away for future reference).
  prefs: []
  type: TYPE_NORMAL
- en: 'These two methods are probably what we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/ProgressBar.html#setMax(int)](http://developer.android.com/reference/android/widget/ProgressBar.html#setMax(int))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/ProgressBar.html#setProgress(int)](http://developer.android.com/reference/android/widget/ProgressBar.html#setProgress(int))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First we would need to equip our activity with the ability to remember the
    donation amounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Lets set max progress bar to 10000 in onCreate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '.. and set the progress in donateButtonPressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Try this now and observe the progress bar and logCat
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s801.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the complete class so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is another version of exactly the same class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Examine them carefully. What are the differences? Why make these changes?
  prefs: []
  type: TYPE_NORMAL
- en: 'Not also the careful attention to spacing and alignment in the code. Not just
    correct indentation, but continual attention to structuring each method carefully,
    removing duplication and unnecessary code and formatting/aligning the declarations
    and assignment statements in a table like structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visible here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'and here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'and here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Android code can become very verbose and complex. Carefully formatting is essential
    if you are not to be overwhelmed.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Archive of lab so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Donation.1.0.zip](Donation.1.0.zip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exercise 1:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider an alternative to the NumberPicker - specifically one of the "Text
    Fields" controls:'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are mostly EditView objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/reference/android/widget/EditText.html](http://developer.android.com/reference/android/widget/EditText.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Redesign the activity to take a value from the picker or directly from a text
    view and maintain a "Total so Far" Value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s902.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](lab2s901.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](lab2s903.png)'
  prefs: []
  type: TYPE_IMG
- en: If the number picker is set to zero, then attempt to get a number from the text
    view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a hint (a version of donatButonPressed that does what we want):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 2:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Revise the app such that when the target is achieved (10000) - then no more
    donations accepted, and the user is made aware of this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint - here is how you can display a simple alert:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 3:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modify the colour scheme for our widgets..
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that the Floating Action Button, the Radio Buttons, the Progress
    Bar etc, are all a kind of pink - not really in line with our current colour scheme.
  prefs: []
  type: TYPE_NORMAL
- en: Hint - have a look at your **colors.xml**
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab2s904.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Archive of lab with the above Exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Donation.1.5.zip](Donation.1.5.zip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
