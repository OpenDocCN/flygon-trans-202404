["```\n// cold observable example\nlet stream$ = Rx.Observable.of(1,2,3);\n//subscriber 1: 1,2,3\nstream.subscribe(\n   data => console.log(data),\n   err => console.error(err),\n   () => console.log('completed')\n)\n\n//subscriber 2: 1,2,3\nstream.subscribe(\n   data => console.log(data),\n   err => console.error(err),\n   () => console.log('completed')\n) \n```", "```\nlet liveStreaming$ = Rx.Observable.interval(1000).take(5);\n\nliveStreaming$.subscribe( \n  data => console.log('subscriber from first minute')\n  err => console.log(err),\n  () => console.log('completed')\n)\n\nsetTimeout(() => {\n   liveStreaming$.subscribe( \n  data => console.log('subscriber from 2nd minute')\n  err => console.log(err),\n  () => console.log('completed')\n) \n},2000) \n```", "```\nlet publisher$ = Rx.Observable\n.interval(1000)\n.take(5)\n.publish();\n\npublisher$.subscribe( \n  data => console.log('subscriber from first minute',data),\n  err => console.log(err),\n  () => console.log('completed')\n)\n\nsetTimeout(() => {\n    publisher$.subscribe( \n        data => console.log('subscriber from 2nd minute', data),\n        err => console.log(err),\n        () => console.log('completed')\n    ) \n}, 3000)\n\npublisher$.connect(); \n```", "```\nlet stream$ = Rx.Observable\n.interval(1000)\n.take(4)\n.publish();\n\nstream$.connect();\n\nsetTimeout(() => {\n  stream$.subscribe(data => console.log(data))\n}, 2000); \n```", "```\nlet obs = Rx.Observable.interval(1000).take(3).publish().refCount();\n\nsetTimeout(() => {\n    obs.subscribe(data => console.log('sub1', data));\n},1100)\n\nsetTimeout(() => {\n    obs.subscribe(data => console.log('sub2', data));\n},2100) \n```", "```\nsub1 : 0\nsub1 : 1\nsub2 : 1\nsub1 : 2\nsub2 : 2 \n```", "```\nlet stream$ = Rx.Observable.create((observer) => {\n    observer.next( 1 );\n    observer.next( 2 );\n    observer.next( 3 );\n    observer.complete();\n}).share()\n\nstream$.subscribe(\n    (data) => console.log('subscriber 1', data),\n    err => console.error(err),\n    () => console.log('completed')\n);\nstream$.subscribe(\n    (data) => console.log('subscriber 2', data),\n    err => console.error(err),\n    () => console.log('completed')\n); \n```"]