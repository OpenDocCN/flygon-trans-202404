- en: 'Chapter 7: Functions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：函数
- en: Functions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: 'TypeScript supports JavaScript functions as you already know them. As it often
    does, TypeScript adds new functionality, including:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 支持 JavaScript 函数，就像您已经了解的那样。正如它经常做的那样，TypeScript 添加了新的功能，包括：
- en: Function Types
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数类型
- en: Typed Parameters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型化参数
- en: Optional Parameters
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选参数
- en: Rest Parameters^([1](#fn_1))
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rest 参数^([1](#fn_1))
- en: Arrow Functions (often also called Lambda or Anonymous functions)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箭头函数（通常也称为 Lambda 或匿名函数）
- en: Function Types
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数类型
- en: 'Everything has a type in TypeScript. If you don''t specify a type, TypeScript
    infers a type and for functions, it''s `Function`. You can declare a variable''s
    type to be `Function` as shown:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TypeScript 中，一切都有类型。如果您不指定类型，TypeScript 将推断出一种类型，对于函数，它是 `Function`。您可以声明变量的类型为
    `Function`，如下所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This isn't a terribly useful thing to do but it shows that there is a `Function`
    data type. You'll see down below that Arrow Functions are far more useful.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是一个非常有用的事情，但它显示了有一个`Function`数据类型。您将在下面看到箭头函数更加有用。
- en: Function Parameters
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数参数
- en: 'Most functions take at least one parameter and most useful functions return
    a value^([2](#fn_2)). You can specify a type for each function parameter as well
    as the return type of the function itself. Here''s a more robust `integerAdder()`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数函数至少需要一个参数，并且大多数有用的函数返回一个值^([2](#fn_2))。您可以为每个函数参数以及函数本身的返回类型指定类型。这是一个更健壮的`integerAdder()`：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The code defines a function, `integerAdder`. It takes two parameters and as
    you can see, they are both integer values. Furthermore, the integerAdder function
    itself returns a number.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 代码定义了一个函数，`integerAdder`。它接受两个参数，正如您所看到的，它们都是整数值。此外，integerAdder 函数本身返回一个数字。
- en: 'Here''s a 30 second video showing this in practice:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个演示的 30 秒视频：
- en: '[https://www.youtube.com/embed/zUI2Ygfdhj0](https://www.youtube.com/embed/zUI2Ygfdhj0)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/zUI2Ygfdhj0](https://www.youtube.com/embed/zUI2Ygfdhj0)'
- en: '(If you can''t see the video, try [accessing it via this link](https://youtu.be/zUI2Ygfdhj0)
    or type this url into your web browser: [https://youtu.be/zUI2Ygfdhj0](https://youtu.be/zUI2Ygfdhj0)).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: （如果您看不到视频，请尝试[通过此链接访问](https://youtu.be/zUI2Ygfdhj0)或将此网址键入到您的网络浏览器中：[https://youtu.be/zUI2Ygfdhj0](https://youtu.be/zUI2Ygfdhj0)）。
- en: 'Note that integerAdder specifies both the types of its arguments and the type
    of its return value: `integerAdder(firstNumber: number, secondNumber: number):
    number`. This tells the TypeScript compiler enough information that it prevents
    you from making two mistakes common in the plain JavaScript world:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，integerAdder 指定了其参数的类型以及其返回值的类型：`integerAdder(firstNumber: number, secondNumber:
    number): number`。这告诉 TypeScript 编译器足够的信息，以防止您在纯 JavaScript 世界中犯的两个常见错误：'
- en: You can't pass in non-numeric values to the integerAdder function.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能将非数字值传递给 integerAdder 函数。
- en: The result is numeric. You can't invoke the function and accept its result into
    a non-numeric variable.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果是数字。您不能调用该函数并将其结果接受到非数字变量中。
- en: 'Functions don''t need to return a value. If you want to be explicit (and you
    probably do!), specify a return type of `void`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 函数不需要返回一个值。如果您想要明确（而您可能确实想要！），请指定返回类型为 `void`：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Optional Parameters
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可选参数
- en: We can define functions that take optional parameters. Imagine that you have
    a function, `InitializeDataSet` in your application. Sometimes, you want to initialize
    the data set to a collection of hard coded values (i.e. defaults). In other cases,
    you want to provide some "seed" data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义带有可选参数的函数。想象一下，您的应用程序中有一个名为 `InitializeDataSet` 的函数。有时，您希望将数据集初始化为一组硬编码的值（即默认值）。在其他情况下，您希望提供一些“种子”数据。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Use the question mark (?) to denote an optional parameter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用问号（?）来表示可选参数。
- en: At run-time, client code invokes the function as normal. If that code does not
    supply a value for the optional parameter, its value is `undefined`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，客户端代码像往常一样调用该函数。如果该代码没有为可选参数提供值，其值为 `undefined`。
- en: Default Parameter Values
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认参数值
- en: 'You can specify a default value for your function''s parameters. Here''s the
    previous example re-written to show this syntax and discuss the implication of
    using it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为函数的参数指定默认值。以下是先前示例的重写版本，以显示此语法并讨论使用它的影响：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Note that:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：
- en: The function takes an input parameter, `seedData`. TypeScript infers the parameter's
    type as an object with two string properties.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数接受一个输入参数 `seedData`。TypeScript 推断参数的类型为具有两个字符串属性的对象。
- en: If client code does not pass a value for seedData, it will use the specific
    initial value.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果客户端代码没有传递 seedData 的值，它将使用特定的初始值。
- en: If you pass the value `undefined` to the function, it will also the specified
    initial value.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你向函数传递值`undefined`，它也会返回指定的初始值。
- en: Rest Parameters
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 剩余参数
- en: Sometimes you want to pass an unknown number of parameters to a function. This
    case frequently arises during React development, serializing and deserializing
    data and mapping.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你想要向函数传递未知数量的参数。这种情况在 React 开发、数据序列化和反序列化以及映射过程中经常出现。
- en: 'Let''s consider a logging example. We can always use `console.log()` to log
    out messages to the console. However, it''s a real challenge debugging applications
    at run-time, particularly errors reported by end users. By the time anyone tells
    you about the error, it''s too late for you to do much about it. Let''s add some
    persistent error logging to our toolkit:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个日志记录的例子。我们总是可以使用`console.log()`将消息记录到控制台。然而，在运行时调试应用程序是一个真正的挑战，特别是最终用户报告的错误。当有人告诉你有错误时，你已经无能为力了。让我们在工具包中添加一些持久性错误记录：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The code does the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 代码执行以下操作：
- en: Defines a function, `myLogger`.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义了一个函数，`myLogger`。
- en: 'myLogger takes two parameters: `msgType` and `messages`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: myLogger 接受两个参数：`msgType` 和 `messages`。
- en: msgType is a union data type - client code must pass "INFO" or "ERROR".
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: msgType 是一个联合数据类型 - 客户端代码必须传递"INFO"或"ERROR"。
- en: messages is an array of `any`. Note that `...` preceding the variable name.
    This indicates that all of the remaining arguments will be stuffed into the array.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: messages 是一个`any`类型的数组。注意变量名前面的`...`。这表示所有剩余的参数都将被放入数组中。
- en: You can see how the code invokes the myLogger function, passing in a variable
    number of arguments across its three invocations.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以看到代码如何调用 myLogger 函数，在其三次调用中传递不同数量的参数。
- en: Arrow Functions
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 箭头函数
- en: Arrow functions take their name from their syntax.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数的命名来源于它们的语法。
- en: Many TypeScript developers prefer to call these *lambda* functions and sometimes
    *anonymous* functions. They almost always mean the same thing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 TypeScript 开发者更喜欢称这些*lambda*函数，有时候也称为*匿名*函数。它们几乎总是指同一件事情。
- en: Arrow functions are tremendously useful. They provide a nice syntax shortener
    and more importantly, help reduce confusion over JavaScript scopes by redefining
    the `this` keyword into something more intuitive.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数非常有用。它们提供了一个很好的语法缩写，并且更重要的是，通过将`this`关键字重新定义为更直观的内容，有助于减少对 JavaScript 作用域的混淆。
- en: 'Here''s a very simple example to get us started on the syntax:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个非常简单的示例来帮助我们开始学习语法：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This example defines and then invokes a function named `myHelloFunction`. Since
    myHelloFunction is `const` we need initialize it at definition-time. That''s this
    bit: `{return "Hello!"};` myHelloFunction is now a normal function and we can
    invoke it like any other JavaScript function using the function invocation operator,
    `()`: `myHelloFunction()`;'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子定义然后调用了一个名为`myHelloFunction`的函数。由于 myHelloFunction 是`const`，我们需要在定义时初始化它。这就是这部分内容：`{return
    "Hello!"};` myHelloFunction 现在是一个普通函数，我们可以像调用其他 JavaScript 函数一样使用函数调用运算符`()`来调用它：`myHelloFunction()`;
- en: 'We don''t need to define the function body. For instance, this is perfectly
    good syntax:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要定义函数体。例如，这是完全正确的语法：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first line defines a variable, `myGoodbyeFunction`. myGoodbyeFunction's
    type is a function that takes no parameters and returns a string.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行定义了一个变量，`myGoodbyeFunction`。myGoodbyeFunction 的类型是一个不带参数并返回字符串的函数。
- en: The second line assigns a value to myGoodbyeFunction. In this case, it's the
    function body itself.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行给 myGoodbyeFunction 赋值。在这种情况下，它是函数体本身。
- en: Lastly, the code logs out the result of executing myGoodbyeFunction.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，代码记录执行 myGoodbyeFunction 的结果。
- en: 'Before we go any further, lets look at the transpiled JavaScript. Here''s the
    myHelloFunction''s transpiled JavaScript:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们看一下转译后的 JavaScript。这是 myHelloFunction 的转译后的 JavaScript：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s the line-by-line transformation:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是逐行转换：
- en: '| **TypeScript** | **Transpiled JavaScript** |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| **TypeScript** | **Transpiled JavaScript** |'
- en: '| 1\. let myGoodbyeFunction: () => string; | var myGoodbyeFunction; |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 1\. let myGoodbyeFunction: () => string; | var myGoodbyeFunction; |'
- en: '| 2\. myGoodbyeFunction = () => {return "Good Bye!"} | myGoodbyeFunction =
    function () { return "Good Bye!"; }; |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 2\. myGoodbyeFunction = () => {return "Good Bye!"} | myGoodbyeFunction =
    function () { return "Good Bye!"; }; |'
- en: '| 3\. console.log(myGoodbyeFunction()); | console.log(myGoodbyeFunction());
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 3\. console.log(myGoodbyeFunction()); | console.log(myGoodbyeFunction());
    |'
- en: '`let` transpiles into `var`. The arrow function transpiles into a straight-forward
    `function` definition.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`let`转译为`var`。箭头函数转译为直接的`function`定义。'
- en: Specifying Parameters in Arrow Functions
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在箭头函数中指定参数
- en: 'We specify parameters by inserting them info the `()` portion of the function
    definition. Here''s an adder function that takes two integer inputs and returns
    a numeric result:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将参数插入到函数定义的 `()` 部分来指定参数。以下是一个接受两个整数输入并返回数字结果的加法器函数：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The code defines a new function, `myAdderArrowFunction`, using the arrow syntax.
    myAdderFunction takes two numeric arguments and returns number.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码使用箭头语法定义了一个新函数，`myAdderArrowFunction`。myAdderFunction 接受两个数值参数并返回数字。
- en: It's important to keep in mind that the `let` statement is merely defining a
    typed variable named myAdderFunction. It type happens to be a `Function` with
    typed signature and a typed result.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，`let` 语句只是定义了一个名为 myAdderFunction 的类型化变量。它的类型恰好是带有类型签名和类型结果的 `Function`。
- en: The second line initializes myAdderArrowFunction. Note that I didn't use the
    same names when specifying the input parameters. Again, the `let` statement is
    defining a type - a Function who takes in two arguments and returns a number.
    As long as meet the requirements of the type, the parameter names don't matter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行初始化了 myAdderArrowFunction。请注意，当指定输入参数时，我没有使用相同的名称。同样，`let` 语句正在定义一个类型 - 一个接受两个参数并返回数字的函数。只要满足类型的要求，参数名称就无关紧要。
- en: Arrow function as interface components
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 箭头函数作为接口组件
- en: 'Given that arrow functions can define types independent of their implementation,
    you can use them anywhere else you would use a type, including interfaces. This
    is a very useful capability for many reasons. One reason comes into play when
    you''re working with an external library that was not written in TypeScript. This
    obviously happens a lot in the real world^([3](#fn_3)). Let''s assume that we
    are working with one such library that is responsible to create detailed, highly
    interactive visualizations. We don''t know how it works and we don''t care. We
    consult the library''s documentation and see that it provides a robust JavaScript
    API that includes the following functions:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到箭头函数可以独立于其实现定义类型，您可以在任何需要类型的地方使用它们，包括接口。出于许多原因，这是一种非常有用的能力。其中一个原因是当您使用未使用
    TypeScript 编写的外部库时。这在现实世界中显然经常发生^([3](#fn_3))。让我们假设我们正在使用这样一个库，该库负责创建详细、高度交互式的可视化效果。我们不知道它是如何工作的，也不在乎。我们查阅了库的文档，看到它提供了一个强大的
    JavaScript API，其中包括以下函数：
- en: '`Render`: We provide the ID of a `<div>` tag on our page and it renders the
    visualization there.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Render`：我们提供页面上一个 `<div>` 标签的 ID，它会在那里呈现可视化效果。'
- en: '`SetDimensions`: We can set the height an width with this call.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SetDimensions`：我们可以使用此调用设置高度和宽度。'
- en: '`SaveSettings`: We ask the engine to save the current screen settings for use
    next time.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SaveSettings`：我们要求引擎保存当前屏幕设置以供下次使用。'
- en: 'Here''s some TypeScript that lets inject some strong typing into our code despite
    the fact that the vendor''s API does not:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些 TypeScript，尽管供应商的 API 没有提供，但让我们为我们的代码注入了一些强类型：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is complex example. Let''s unpack it a bit:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个复杂的示例。让我们拆开它：
- en: The code defines an interface, `IVisualizationEngine`.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该代码定义了一个接口，`IVisualizationEngine`。
- en: The interface defines three different functions, one for each of the API calls
    we care about^([4](#fn_4)).
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该接口定义了三个不同的函数，每个函数对应我们关心的 API 调用^([4](#fn_4))。
- en: We get a handle to the engine via the global window object. In order for this
    to work, we had to reference the engine via a script tag in our HTML and the engine
    would have to save itself in the global window.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过全局 window 对象获取了引擎的句柄。为了使这个工作，我们必须通过 HTML 中的 script 标签引用引擎，并且引擎必须保存在全局 window
    中。
- en: At this point, we've done something really nice for ourselves. We now have strongly
    typed access to this third party's API! This allows the IDE to give us the great
    time-saving and error-reducing intellisense we've all grown to love so much.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们为自己做了一件非常好的事情。我们现在可以强类型访问这个第三方的 API！这允许 IDE 为我们提供我们所钟爱的节省时间和减少错误的智能提示。
- en: 'Here''s another video showing these concepts. In this case, we''ll model an
    existing contacts management library that has been in production and stable for
    a long time. The video creates an interface to that plain JS library and then
    uses it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个视频展示了这些概念。在这种情况下，我们将模拟一个已经生产和稳定了很长时间的现有联系人管理库。该视频创建了一个接口到该普通的 JS 库，然后使用它：
- en: '[https://www.youtube.com/embed/e1BGcBO8E6U](https://www.youtube.com/embed/e1BGcBO8E6U)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/e1BGcBO8E6U](https://www.youtube.com/embed/e1BGcBO8E6U)'
- en: '(If you can''t see the video, try [clicking this link](https://youtu.be/e1BGcBO8E6U)
    to see it directly on YouTube. You can also try typing this link into your favorite
    web browser: [https://youtu.be/e1BGcBO8E6U](https://youtu.be/e1BGcBO8E6U).)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: （如果您无法看到视频，请尝试[点击此链接](https://youtu.be/e1BGcBO8E6U)直接在YouTube上观看。您也可以尝试在您喜欢的网络浏览器中键入此链接：[https://youtu.be/e1BGcBO8E6U](https://youtu.be/e1BGcBO8E6U)。）
- en: Arrow Functions as IIFEs
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 箭头函数作为IIFEs
- en: 'As we saw above, arrow functions transpile down to standard JavaScript functions.
    We can invoke functions as they are defined. These are called Immediately Invoked
    Function Expressions (IIFEs). Arrow functions can also be invoked at any time.
    Here''s a contrived example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们上面看到的，箭头函数转译为标准的JavaScript函数。我们可以在定义时调用函数。这些被称为立即调用函数表达式（IIFEs）。箭头函数也可以随时调用。这里有一个刻意的例子：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This code defines a function here: `() => { return "Paul"}`. It encloses that
    line in its own set of parenthesis and then uses the invoke-function operator,
    `()` to immediately invoke the function. This is itself wrapped inside a template
    string and finally, the result is logged out to the console.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码定义了一个函数：`() => { return "Paul"}`。它将该行代码封装在自己的括号中，然后使用调用函数运算符`()`立即调用该函数。这本身被包裹在一个模板字符串中，最后，结果被记录在控制台中。
- en: 'Here''s the transpiled JavaScript:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是转译后的JavaScript：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This (possibly over-produced :)) video shows it live:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个（可能过度制作的 :)) 视频展示了实时演示：
- en: '[https://www.youtube.com/embed/DTBpHxWPf_w](https://www.youtube.com/embed/DTBpHxWPf_w)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/DTBpHxWPf_w](https://www.youtube.com/embed/DTBpHxWPf_w)'
- en: '(If you can''t see the video, [try clicking here](https://youtu.be/DTBpHxWPf_w)
    or typing this URL into your web browser: [https://youtu.be/DTBpHxWPf_w](https://youtu.be/DTBpHxWPf_w).)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: （如果您无法看到视频，请[尝试点击这里](https://youtu.be/DTBpHxWPf_w)或将此URL键入到您的网络浏览器中：[https://youtu.be/DTBpHxWPf_w](https://youtu.be/DTBpHxWPf_w)。）
- en: Arrow Functions for Cleaner Code
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用箭头函数编写更干净的代码
- en: 'The previous example doesn''t show it well, but arrow functions can help you
    do more than teach your IDE about function types. It can also help you write cleaner
    code, although this may admittedly be in the eye of the beholder. Here''s an example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例没有很好地展示出来，但箭头函数可以帮助你做更多事情，而不仅仅是教你的IDE有关函数类型。它还可以帮助你编写更干净的代码，尽管这可能是主观的。这里有一个例子：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, we define an array of numbers, one through ten.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们定义了一个包含1到10的数字的数组。
- en: 'We then define a variable, `evenNumbers`. evenNumbers is the result of filtering
    on the numbers array, passing back only those items where mod two equals zero.
    This is a new form for us:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义一个变量`evenNumbers`。evenNumbers是对数字数组进行过滤的结果，仅返回模二等于零的项目。这对我们来说是一种新形式：
- en: '`(item) => !(item % 2)`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`(item) => !(item % 2)`'
- en: 'We could have written this fully out to:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完全可以将其写成：
- en: '`(item) => { return !(item % 2); }`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`(item) => { return !(item % 2); }`'
- en: It's a bit of shorthand that we're allowed do when you can return a value with
    a single statement.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当您可以用单个语句返回一个值时，我们被允许使用这种简写。
- en: 'The second example adds up all the numbers using the standard `reduce` function.
    Reduce runs against an array and takes a function and initial value as an argument.
    That function is passed the previous value and the current value, defined in the
    example as `(prev: number, curr: number)`^([5](#fn_5)). Note that `reduce` *also*
    passes a 3rd argument, the index of the item in the array. We don''t care about
    that so we don''t bother catching it, so to speak.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '第二个示例使用标准的`reduce`函数将所有数字相加。Reduce针对数组运行，并将函数和初始值作为参数传递。该函数传递了前一个值和当前值，在示例中定义为`(prev:
    number, curr: number)`^([5](#fn_5))。请注意，`reduce`*也*传递第三个参数，即数组中项目的索引。我们不关心这一点，所以我们不会去捕捉它，可以这么说。'
- en: Most TypeScript developers come to find Arrow functions to be very helpful and
    generally cleaner looking than spelling out the word "function" all the time.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数TypeScript开发人员发现箭头函数非常有帮助，通常比一直拼写单词"function"更清晰。
- en: Further Reading
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'This blog post describes most of the same things covered here, along with two
    narrated videos: [http://executeautomation.com/blog/working-with-functions-anonymous-and-arrow-functions-in-typescript/](http://executeautomation.com/blog/working-with-functions-anonymous-and-arrow-functions-in-typescript/)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这篇博文描述了这里涵盖的大部分内容，还有两个叙述视频：[http://executeautomation.com/blog/working-with-functions-anonymous-and-arrow-functions-in-typescript/](http://executeautomation.com/blog/working-with-functions-anonymous-and-arrow-functions-in-typescript/)
- en: This blog post provides a nicely detailed view into Arrow Functions and in particular,
    it explains how `this` works in that context. [http://piotrwalat.net/arrow-function-expressions-in-typescript/](http://piotrwalat.net/arrow-function-expressions-in-typescript/)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这篇博文提供了对箭头函数的详细视角，特别是它解释了在这种情境下 `this` 的工作原理。[http://piotrwalat.net/arrow-function-expressions-in-typescript/](http://piotrwalat.net/arrow-function-expressions-in-typescript/)
- en: Summarizing Functions
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数总结
- en: TypeScript enhances plain JavaScript functions by...
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 通过...增强了普通的 JavaScript 函数。
- en: Defining the types of function parameters (string, boolean, even interface types)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义函数参数的类型（字符串、布尔值，甚至是接口类型）
- en: Defining the return type of a function (not just its parameters)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义函数的返回类型（不仅仅是参数）
- en: Specifying default values for parameters
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为参数指定默认值
- en: Specifying a variable number of parameters via the `rest` operator ("...")
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 `rest` 操作符（"..."）指定可变数量的参数
- en: Like other Typescript artifacts, functions themselves are typed and their type
    is `Function`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他 TypeScript 的产物一样，函数本身也是有类型的，它们的类型是 `Function`。
- en: TypeScript introduces a different kind of function, the Arrow Function. We haven't
    heard the last of arrow functions. We'll revisit them in chapter 9, "Classes in
    Depth" and explore how they help simplify JavaScript closures. In short, they
    work in a more intuitive way with the `this` keyword.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 引入了一种不同类型的函数，箭头函数。我们还没有听到箭头函数的最后一句话。我们将在第9章“深入类”中重新讨论它们，并探索它们如何帮助简化
    JavaScript 闭包。简而言之，它们与 `this` 关键字一起以更直观的方式工作。
- en: That concludes functions. The next chapter gently introduces basic TypeScript
    classes and lays down the foundation for more advanced topics like abstract classes
    and how interfaces work with them.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 函数就讲到这里了。下一章将温柔地介绍基本的 TypeScript 类，并为更高级的主题奠定基础，比如抽象类以及接口与其配合的工作原理。
- en: '* * *'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ¹. Not to be confused with Representational State Transfer. Rest parameters
    are an entirely different thing, as you'll see. [↩](#reffn_1 "Jump back to footnote
    [1] in the text.")
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. 不要与表述性状态转移混淆。如你所见，rest 参数是完全不同的东西。[↩](#reffn_1 "跳回正文中的脚注[1]")
- en: ². If your function doesn't return any value, there's a good chance it's affecting
    some data outside of its scope. This is usually a Bad Thing because it introduces
    the risk of side effects. If you want more convincing, you could [start here](https://softwareengineering.stackexchange.com/questions/15269/why-are-side-effects-considered-evil-in-functional-programming).
    [↩](#reffn_2 "Jump back to footnote [2] in the text.")
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ². 如果你的函数不返回任何值，很可能会影响到其范围之外的一些数据。这通常是一个坏事，因为它引入了副作用的风险。如果你想更有说服力，你可以[从这里开始](https://softwareengineering.stackexchange.com/questions/15269/why-are-side-effects-considered-evil-in-functional-programming)。[↩](#reffn_2
    "跳回正文中的脚注[2]")
- en: ³. This happens so much in the real world that TypeScript provides a significant
    feature set to handle the challenge through the use of "typings files". The first
    cut of this book doesn't address typings in detail but the "Continue Learning"
    chapter will point you in the right direction. [↩](#reffn_3 "Jump back to footnote
    [3] in the text.")
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ³. 在现实世界中这种情况经常发生，TypeScript 通过使用“类型文件”提供了一个重要的功能集来处理这个挑战。本书的初稿没有详细讨论类型文件，但“继续学习”章节会指引你朝着正确的方向前进。[↩](#reffn_3
    "跳回正文中的脚注[3]")
- en: ⁴. In this context, "care about" means that the library might provide other
    useful functions but we don't plan to use them for one reason or another. We don't
    need to map each of them to our interface definition, just the ones we plan to
    use. [↩](#reffn_4 "Jump back to footnote [4] in the text.")
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ⁴. 在这个上下文中，“关心”意味着库可能提供其他有用的函数，但出于某种原因我们不打算使用它们。我们不需要将每一个函数都映射到我们的接口定义中，只需我们计划使用的函数。[↩](#reffn_4
    "跳回正文中的脚注[4]")
- en: ⁵. `Reduce`, along with `filter` and `map` tend to find themselves in code that
    adheres to a functional programming style. I've written a small series of blog
    posts on this subject up on my blog, [https://hackernoon.com/functional-programming-the-examples-series-851421e7ae5b](https://hackernoon.com/functional-programming-the-examples-series-851421e7ae5b).
    [↩](#reffn_5 "Jump back to footnote [5] in the text.")
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ⁵. `Reduce`，以及 `filter` 和 `map` 倾向于出现在遵循函数式编程风格的代码中。我在我的博客上写了一系列关于这个主题的小系列文章，链接在这里：[https://hackernoon.com/functional-programming-the-examples-series-851421e7ae5b](https://hackernoon.com/functional-programming-the-examples-series-851421e7ae5b)。[↩](#reffn_5
    "跳回正文中的脚注[5]")
