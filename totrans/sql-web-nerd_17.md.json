["```\n> For modelling one-to-many relationships, Oracle supports two collection\n> datatypes: varrays and nested tables. For example, a purchase order has\n> an arbitrary number of line items, so you may want to put the line items\n> into a collection.\n> \n>    Varrays have a maximum number of elements, although you can change\n>    the upper bound. The order of elements is defined. Varrays are stored\n>    as opaque objects (that is, raw or BLOB).\n> \n>    Nested tables can have any number of elements, and you can select,\n>    insert, delete, and so on the same as with regular tables. The order\n>    of the elements is not defined. Nested tables are stored in a storage\n>    table with every element mapping to a row in the storage table.\n> \n> If you need to loop through the elements in order, store only a fixed\n> number of items, or retrieve and manipulate the entire collection as a\n> value, then use varrays.\n> \n> If you need to run efficient queries on collections, handle arbitrary\n> numbers of elements, or do mass insert/update/delete operations, then\n> use nested tables. If the collections are very large and you want to\n> retrieve only subsets, you can model the collection as a nested table\n> and retrieve a locator for the result set.\n> \n> For example, a purchase order object may have a nested table of line\n> items, while a rectangle object may contain a varray with 4 coordinates.\n> \n> ```", "```\n> -- one row for every different talk that we give\n> \n> create table talks (\n> \ttalk_id\t\tinteger primary key,\n> \ttalk_title\tvarchar(100) not null,\n> \tdescription\tvarchar(4000),\n> \tspeaker_name\tvarchar(100),\n> \tspeaker_bio\tvarchar(4000)\n> );\n> \n> -- one row for every time that we give a talk\n> \n> create table events (\n>        event_id\t\tinteger primary key,\n>        -- which of the three talks will we give\n>        talk_id\t\treferences talks,\n>        -- Location\n>        venue_name\tvarchar(200) not null,\n>        street_address\tvarchar(200) not null,\n>        city             varchar(100) not null,\n>        -- state if this is in the US\n>        usps_abbrev      char(2),\n>        -- country code is this is a foreign city\n>        iso\t\tchar(2) default 'us',\n>        -- Date and time\n>        start_time\tdate not null,\n>        end_time\t\tdate not null,\n>        ticket_price\tnumber\n> );\n> \n> ```", "```\n> -- one row for every different talk that we give\n> \n> create table talks (\n> \ttalk_id\t\tinteger primary key,\n> \ttalk_title\tvarchar(100) not null,\n> \tdescription\tvarchar(4000),\n> \tspeaker_name\tvarchar(100),\n> \tspeaker_bio\tvarchar(4000)\n> );\n> \n> -- one row for every place where we give a talk\n> \n> create table venues (\n>        venue_id\t\tinteger primary key,\n>        venue_name\tvarchar(200) not null,\n>        street_address\tvarchar(200) not null,\n>        city             varchar(100) not null,\n>        -- state if this is in the US\n>        usps_abbrev      char(2),\n>        -- country code\n>        iso\t\tchar(2) default 'us'\n> );\n> \n> -- one row for every time that we give a talk\n> \n> create table events (\n>        event_id\t\tinteger primary key,\n>        -- which of the three talks will we give\n>        talk_id\t\treferences talks,\n>        -- Location\n>        venue_id\t\treferences venues,\n>        -- Date and time\n>        start_time\tdate not null,\n>        end_time\t\tdate not null,\n>        ticket_price\tnumber\n> );\n> \n> ```", "```\n> create table ticket_price (\n>        up_to_n_minutes\t  \tinteger,\n>        price\t\t\tnumber\n> );\n> \n> ```"]