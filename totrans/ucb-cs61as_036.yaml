- en: Lesson 2 Intro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2课介绍
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: '"I lambda Racket"'
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"我 lambda Racket"'
- en: This week we will learn a new special form, `lambda`, that can make procedures!
    Make sure you learn it well, for it will be used extensively for the rest of this
    course.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本周我们将学习一个新的特殊形式，`lambda`，它可以创建过程！确保你学会它，因为它将在本课程的其余部分中广泛使用。
- en: Prerequisites and What to Expect
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件和预期内容
- en: '**Prerequisites:** Lesson 1 is required before working on this lesson. You
    should be familiar with concepts such as functions, procedures, and calling a
    procedure.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**先决条件：** 在进行本课程之前需要完成第1课。你应该熟悉函数、过程和调用过程等概念。'
- en: '**What to Expect:** In this lesson, we will:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**预期内容：** 在本课程中，我们将：'
- en: explain lambdas and higher order functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释 lambda 和高阶函数
- en: learn a basic concept in Racket, or any other function-oriented programming
    language -- the manipulation of functions using other functions.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习 Racket 中的一个基本概念，或者任何其他面向函数的编程语言 -- 使用其他函数来操作函数。
- en: Readings
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读材料
- en: 'Here are the relevant readings for this lesson:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程的相关阅读如下：
- en: '[SICP 1.3 - Abstractions with Higher-Order Procedures](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP 1.3 - 使用高阶过程进行抽象](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html)'
- en: '[Lecture Notes](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=9)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[讲座笔记](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=9)'
- en: Sneak Peek
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预览
- en: We learned how to create, modify, and call procedures in Lesson 1\. Every procedure
    has a name, its arguments, and a body where we tell the function what to do with
    its arguments.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第1课中学习了如何创建、修改和调用过程。每个过程都有一个名称、它的参数和一个主体，我们在其中告诉函数如何处理它的参数。
- en: 'For instance, here is the procedure `cube`, which takes in one argument `x`
    and returns `x` cubed:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是一个过程 `cube`，它接受一个参数 `x` 并返回 `x` 的立方：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We `define` a procedure whose name is `cube`, argument is `x`, and body is `(*
    x x x)`. You should be able to tell by now that the body multiplies three `x`'s
    together and returns `x` cubed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们`定义`了一个过程，它的名称是 `cube`，参数是 `x`，主体是 `(* x x x)`。你现在应该能够看出，主体将三个 `x` 相乘并返回 `x`
    的立方。
- en: '`cube` is a procedure, or abstraction, that we can treat like a box and throw
    around, just like any other number or symbol. It has a *value* and we can give
    it a *name*.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`cube` 是一个过程，或者抽象，我们可以像盒子一样处理并传递，就像任何其他数字或符号一样。它有一个*值*，我们可以给它一个*名称*。'
- en: 'Now that we think about it, defining `cube` the way we did above is not too
    far off from defining `var` like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想想，像上面那样定义 `cube` 并不比像这样定义 `var` 差太远：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Cubes](https://dl.dropboxusercontent.com/u/16963685/cs61as- edx/cube_diagram.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![立方体](https://dl.dropboxusercontent.com/u/16963685/cs61as-edx/cube_diagram.png)'
- en: In the box `var`, we put `10`. In the box `(cube x)`, we put `(* x x x)`. In
    one box, we put a number, and in the other, we put an expression. Pretty similar,
    right? What if, instead putting a primitive value or expression into the box,
    we put a **function** inside? Inconceivable!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在盒子 `var` 中，我们放置了 `10`。在盒子 `(cube x)` 中，我们放置了 `(* x x x)`。在一个盒子中，我们放置一个数字，而在另一个中，我们放置一个表达式。相当相似，对吧？如果我们不是将原始值或表达式放入盒子中，而是将一个**函数**放入其中呢？难以想象！
- en: 'It''ll probably look something like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能看起来像这样：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`[some function]` is where we would put a lambda. Keep reading to find out
    more!'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`[一些函数]` 是我们将放置 lambda 的地方。继续阅读以了解更多！'
