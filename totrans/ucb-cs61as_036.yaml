- en: Lesson 2 Intro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '"I lambda Racket"'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This week we will learn a new special form, `lambda`, that can make procedures!
    Make sure you learn it well, for it will be used extensively for the rest of this
    course.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites and What to Expect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Prerequisites:** Lesson 1 is required before working on this lesson. You
    should be familiar with concepts such as functions, procedures, and calling a
    procedure.'
  prefs: []
  type: TYPE_NORMAL
- en: '**What to Expect:** In this lesson, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: explain lambdas and higher order functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: learn a basic concept in Racket, or any other function-oriented programming
    language -- the manipulation of functions using other functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Readings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the relevant readings for this lesson:'
  prefs: []
  type: TYPE_NORMAL
- en: '[SICP 1.3 - Abstractions with Higher-Order Procedures](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Lecture Notes](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sneak Peek
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We learned how to create, modify, and call procedures in Lesson 1\. Every procedure
    has a name, its arguments, and a body where we tell the function what to do with
    its arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, here is the procedure `cube`, which takes in one argument `x`
    and returns `x` cubed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We `define` a procedure whose name is `cube`, argument is `x`, and body is `(*
    x x x)`. You should be able to tell by now that the body multiplies three `x`'s
    together and returns `x` cubed.
  prefs: []
  type: TYPE_NORMAL
- en: '`cube` is a procedure, or abstraction, that we can treat like a box and throw
    around, just like any other number or symbol. It has a *value* and we can give
    it a *name*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we think about it, defining `cube` the way we did above is not too
    far off from defining `var` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Cubes](https://dl.dropboxusercontent.com/u/16963685/cs61as- edx/cube_diagram.png)'
  prefs: []
  type: TYPE_IMG
- en: In the box `var`, we put `10`. In the box `(cube x)`, we put `(* x x x)`. In
    one box, we put a number, and in the other, we put an expression. Pretty similar,
    right? What if, instead putting a primitive value or expression into the box,
    we put a **function** inside? Inconceivable!
  prefs: []
  type: TYPE_NORMAL
- en: 'It''ll probably look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`[some function]` is where we would put a lambda. Keep reading to find out
    more!'
  prefs: []
  type: TYPE_NORMAL
