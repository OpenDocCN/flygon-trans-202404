- en: Course Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Q: What will we study in this course?'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There will be two primary themes:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing and analyzing efficient data structures, particularly in the context
    of functional programming languages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Functional reactive programming (FRP) for interactive programs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why? Well, because all of you have seen at least one functional programming
    language before (Racket in 151 or Haskell in 161, and perhaps Standard ML in 221
    or 226x), there's an implicit "Advanced" or "Topics in" that prefixes the "Functional
    Programming" name of this course. So, we need to choose *some* topics to study.
  prefs: []
  type: TYPE_NORMAL
- en: There's certainly plenty of interesting and important topics related to data
    structures, some of which you may have seen in other courses. But probably few
    of you have seen *all* of the data structures and analysis techniques we will
    cover, and fewer still will have spent much time with them in the context of a
    purely functional language. That's one good topic.
  prefs: []
  type: TYPE_NORMAL
- en: Functional reactivity is a neat idea for building interactive programs. It's
    not really mainstream yet, so probably few of you have spent much time with it
    before. That's makes for another good topic.
  prefs: []
  type: TYPE_NORMAL
- en: And as it happens, I have wanted an excuse to learn more about both of these,
    so why not make a course out of it? (I am curious, and so can you!)
  prefs: []
  type: TYPE_NORMAL
- en: 'Q: What language will we use?'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/b3da096a987ed26a87149cc6ccec1a4a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The vehicle we will use for programming is [Elm](http://elm-lang.org/), an exciting,
    new-kid-on-the-block language that features FRP at its core and that compiles
    to JavaScript for browser integration.
  prefs: []
  type: TYPE_NORMAL
- en: The core of Elm, on top of which FRP primitives are built, is a small dialect
    of ML.
  prefs: []
  type: TYPE_NORMAL
- en: Machine Learning... huh?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: No, not *that* ML. In our world, [ML](http://en.wikipedia.org/wiki/ML_%28programming_language%29)
    refers to a family of functional programming languages, developed since the 1970s,
    which has served as seminal work for decades of programming language design and
    engineering work.
  prefs: []
  type: TYPE_NORMAL
- en: I like to think of ML as kind of sitting halfway between Racket and Haskell
    for several reasons.
  prefs: []
  type: TYPE_NORMAL
- en: '*Evaluation Strategy*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like Racket and pretty much every language you may know besides Haskell, Elm
    is *eager* — expressions will be evaluated even when their resulting values are
    not immediately, or ever, needed elsewhere in the program.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Interestingly, however, we will see that *lazy* evaluation is actually crucial
    to building efficient data structures in purely functional languages (i.e. without
    mutable variables).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To bridge this gap, Elm (and most other ML dialects) do provide mechanisms for
    lazy evaluation on top of the eager semantics.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Types*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike Racket but like Haskell, ML has a static type system that rejects programs
    that might possibly (but not necessarily) fail with certain kinds of run-time
    errors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ML type systems feature a bunch of really neat and powerful features — such
    as parametric polymorphism and automatic type inference — but generally do not
    employ mechanisms like Haskell's type classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note: there is a statically typed dialect of Racket called [Typed Racket](http://docs.racket-lang.org/ts-guide/).
    In fact, designing typed dialects of "dynamic" languages like Racket, JavaScript,
    Python, etc. is an active area of programming languages research.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Side Effects*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even when functional programming languages do offer imperative (or *impure*)
    features such as mutable variables, their use is discouraged and typically used
    in small, local ways.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Although both ML and Haskell languages do have features that produce side effects,
    their type systems track such features in very different ways. Such effects typically
    "go outside" an ML type system, whereas in Haskell effects are recorded in types.
    Functions of type `Int -> String` in ML may possibly perform I/O with the user,
    but in Haskell they cannot. Instead, such functions would have type `IO (Int ->
    String)` in Haskell.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Although Elm does not offer mutable variables, we will see other mechanisms
    that it provides which break out of the purely functional paradigm.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What makes Elm a "small" dialect?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Practical languages that build on an ML core typically have many additional
    features — such as objects, modules, threads, exceptions, laziness, and many forms
    of syntactic sugar — that help with real-world programming. Popular full-fledged
    ML dialects include [Standard ML](http://sml-family.org/), [OCaml](https://ocaml.org/),
    and [F#](http://fsharp.org/). Elm, in comparison, is a much smaller ML language
    with fewer additional features beyond those for FRP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Q: What else should I know?'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This course will feature usual things like homeworks, exams, grades, TAs, etc.
    See the [Course Info](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/CourseInfo.html)
    page for details.
  prefs: []
  type: TYPE_NORMAL
- en: If you like programming and math (in other words, if you like computer science),
    I think you will like this course.
  prefs: []
  type: TYPE_NORMAL
- en: If you like only courses that are super-polished, however, then perhaps this
    course is not for you. This is the first time I'm teaching these topics, some
    of which, like I said, I will be grokking for the first time. In addition, although
    the Elm language, libraries, and tools are really coming along nicely, it is still
    a small language with a small (but helpful!) community. As a result of these factors,
    there may be times during the course when you will have to get your hands a bit
    dirty. That said, I think we'll have some fun.
  prefs: []
  type: TYPE_NORMAL
