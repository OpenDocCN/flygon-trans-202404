["```\n# Lab 2 Linear Regression\nimport tensorflow as tf\ntf.set_random_seed(777)  # for reproducibility\n\n# Try to find values for W and b to compute y_data = W * x_data + b\n# We know that W should be 1 and b should be 0\n# But let's use TensorFlow to figure it out\nW = tf.Variable(tf.random_normal([1]), name='weight')\nb = tf.Variable(tf.random_normal([1]), name='bias')\n\n# Now we can use X and Y in place of x_data and y_data\n# # placeholders for a tensor that will be always fed using feed_dict\n# See http://stackoverflow.com/questions/36693740/\nX = tf.placeholder(tf.float32, shape=[None])\nY = tf.placeholder(tf.float32, shape=[None])\n\n# Our hypothesis XW+b\nhypothesis = X * W + b\n\n# cost/loss function\ncost = tf.reduce_mean(tf.square(hypothesis - Y))\n\n# Minimize\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)\ntrain = optimizer.minimize(cost)\n\n# Launch the graph in a session.\nsess = tf.Session()\n# Initializes global variables in the graph.\nsess.run(tf.global_variables_initializer())\n\n# Fit the line\nfor step in range(2001):\n    cost_val, W_val, b_val, _ = \\\n        sess.run([cost, W, b, train],\n                 feed_dict={X: [1, 2, 3], Y: [1, 2, 3]})\n    if step % 20 == 0:\n        print(step, cost_val, W_val, b_val)\n\n# Learns best fit W:[ 1.],  b:[ 0]\n'''\n...\n1980 1.32962e-05 [ 1.00423515] [-0.00962736]\n2000 1.20761e-05 [ 1.00403607] [-0.00917497]\n'''\n\n# Testing our model\nprint(sess.run(hypothesis, feed_dict={X: [5]}))\nprint(sess.run(hypothesis, feed_dict={X: [2.5]}))\nprint(sess.run(hypothesis, feed_dict={X: [1.5, 3.5]}))\n\n'''\n[ 5.0110054]\n[ 2.50091505]\n[ 1.49687922  3.50495124]\n'''\n\n# Fit the line with new training data\nfor step in range(2001):\n    cost_val, W_val, b_val, _ = \\\n        sess.run([cost, W, b, train],\n                 feed_dict={X: [1, 2, 3, 4, 5],\n                            Y: [2.1, 3.1, 4.1, 5.1, 6.1]})\n    if step % 20 == 0:\n        print(step, cost_val, W_val, b_val)\n\n# Testing our model\nprint(sess.run(hypothesis, feed_dict={X: [5]}))\nprint(sess.run(hypothesis, feed_dict={X: [2.5]}))\nprint(sess.run(hypothesis, feed_dict={X: [1.5, 3.5]}))\n\n'''\n1960 3.32396e-07 [ 1.00037301] [ 1.09865296]\n1980 2.90429e-07 [ 1.00034881] [ 1.09874094]\n2000 2.5373e-07 [ 1.00032604] [ 1.09882331]\n[ 6.10045338]\n[ 3.59963846]\n[ 2.59931231  4.59996414]\n''' \n```"]