- en: CurryingTuesday, January 31st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 柯里化星期二，一月31日
- en: 'A *curried* function is a function that, instead of accepting two (or more)
    arguments, accepts only one and returns a function that accepts the rest. For
    example:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*柯里化*函数是一个函数，它不是接受两个（或更多）参数，而是只接受一个参数并返回一个接受剩余参数的函数。例如：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It’s easy to write functions for translating between normal and curried versions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编写用于在普通版本和柯里化版本之间进行转换的函数非常容易。
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Typed version of that, with examples:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有例子的那种类型版本：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Usages — common with H.O. functions like map, where we want to *fix* one argument.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 用法 — 像`map`这样的高阶函数很常见，我们希望*固定*一个参数。
- en: 'When dealing with such higher-order code, the types are very helpful, since
    every arrow corresponds to a function:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理这样的高阶代码时，类型非常有帮助，因为每个箭头对应一个函数：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It is common to make the `->` function type associate to the right, so you
    can find this type written as:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将`->`函数类型右结合是很常见的，所以你会发现这种类型写成：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: or even as
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 或者甚至是
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: but that can be a little confusing…
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但这可能会有点令人困惑…
