- en: Immutable and mutable objects, references and the heap
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不可变和可变对象，引用和堆
- en: An object whose state cannot change after it has been constructed is called
    immutable (unchangable). The methods of an immutable object do not modify the
    state of the object. In Kotlin, all number types, strings, and tuples are immutable.
    The classes Point, Date, Student, and Card we defined above are all immutable.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造后状态无法更改的对象称为不可变（不可更改）。不可变对象的方法不会修改对象的状态。在Kotlin中，所有数字类型、字符串和元组都是不可变的。我们上面定义的Point、Date、Student和Card类都是不可变的。
- en: 'Indeed, if we try to change the coordinates of a Point, we get an error:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，如果我们尝试更改Point的坐标，我们会收到一个错误：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In other words, once a Point object has been created, its fields cannot be modified.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，一旦创建了一个Point对象，其字段就不能被修改。
- en: 'It is possible to define a mutable case class: we need to put the var keyword
    in front of the field names:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 可以定义一个可变的case类：我们需要在字段名称前面加上var关键字：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that we could change the \(x\)-coordinate of the point p even though we
    defined p as a val-variable. Remember that this only means that the name p will
    always refer to the same object. It is possible to change the fields inside this
    object.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使我们将p定义为val变量，我们仍然可以更改点p的\(x\)-坐标。请记住，这只意味着名称p将始终指向相同的对象。可以更改此对象内部的字段。
- en: 'Mutable objects can lead to tricky mistakes. Consider the following code:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可变对象可能导致棘手的错误。考虑以下代码：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'What is the value of p at this point? Surprisingly, p has changed as well:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此时的p的值是多少？令人惊讶的是，p也发生了变化：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'MutableList objects are of course mutable, and so the same effect can appear
    for them:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MutableList对象当然是可变的，因此它们也可能出现相同的效果：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (Note again that even though we have defined a as a val variable, it is possible
    to change the contents of a.)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: （再次注意，即使我们已将a定义为val变量，仍然可以更改a的内容。）
- en: References and the heap
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 引用和堆
- en: Why does this happen? To understand this, we need to understand how variables
    store objects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会发生这种情况？要理解这一点，我们需要了解变量如何存储对象。
- en: All objects are stored in an area of the runtime system called the heap. Objects
    cannot exist anywhere else.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有对象都存储在运行时系统的一个区域中，称为堆。对象不能存在于其他任何地方。
- en: A variable is just a name for an object on the heap. You can think about a variable
    as a reference to the object on the heap. The reference uniquely indicates the
    object on the heap. (If you learnt C, you can think about this reference as a
    pointer. In reality it may not really be a memory address.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 变量只是堆上对象的名称。您可以将变量视为对堆上对象的引用。该引用唯一指示堆上的对象。（如果您学过C，可以将此引用视为指针。实际上，它可能并不真正是内存地址。）
- en: 'An assignment operation (as in val q = p or val b = a above) creates a new
    name for an object on the heap. p and q are in fact two different names for the
    same MPoint object, and a and b are two names for the same MutableList object:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值操作（如上面的`val q = p`或`val b = a`）在堆上为对象创建一个新名称。p和q实际上是同一个MPoint对象的两个不同名称，a和b是同一个MutableList对象的两个名称：
- en: '![Objects with several names](../Images/ea003541d3ff7c76977d7e885234543f.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![具有多个名称的对象](../Images/ea003541d3ff7c76977d7e885234543f.jpg)'
- en: This problem can never happen for immutable objects, and so it is preferable
    to use immutable objects whenever that is possible.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不可变对象，这种问题永远不会发生，因此最好在可能的情况下使用不可变对象。
- en: Local variables
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 局部变量
- en: Now that we know that all objects live in the heap, you may wonder where the
    variable names, that is, the references, are stored.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道所有对象都存储在堆中，您可能想知道变量名称，即引用，存储在哪里。
- en: A reference that is a field of an object (or an element in a list), is stored
    inside that object in the heap.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对象字段（或列表中的元素）的引用存储在堆中的该对象内部。
- en: Most other references are local variables of some function or method. They are
    stored inside a piece of memory called the activation record or stack frame of
    the function. The activation record is created automatically each time the function
    is called. For instance, this function
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数其他引用都是某个函数或方法的局部变量。它们存储在称为激活记录或函数的堆栈帧的一部分内存中。激活记录在每次调用函数时都会自动创建。例如，这个函数
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: has four local variables, namely m, k, s, and a. (The parameters of a method
    are local variables, with the only difference that the runtime system automatically
    copies the argument value into the variable when the method is called.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个局部变量，分别是m、k、s和a。（方法的参数是局部变量，唯一的区别是运行时系统在调用方法时会自动将参数值复制到变量中。）
- en: 'The following shows the activation record of test and the heap when test(13)
    is called, just before the function returns:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了在调用 test(13) 时的 test 激活记录和堆，就在函数返回之前：
- en: '![Result of test(13)](../Images/f679cbdbf43030026dfb2e3a84416e25.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![测试结果(13)](../Images/f679cbdbf43030026dfb2e3a84416e25.jpg)'
- en: Garbage collection
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 垃圾回收
- en: 'Kotlin objects are garbage collected: If the runtime system runs out of memory,
    it will check all the objects on the heap. If an object no longer has any reference
    pointing to it, the object is no longer useful, and will be deleted. It is hard
    to predict when garbage-collection will happen. If you run a small program only,
    probably no garbage-collection at all occurs.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 对象是由垃圾回收的：如果运行时系统内存不足，它将检查堆上的所有对象。如果一个对象不再有任何指向它的引用，那么这个对象就不再有用，将被删除。很难预测垃圾回收会在何时发生。如果只运行一个小程序，则可能根本不会发生垃圾回收。
- en: Garbage collection allows the programmer not to worry about the memory management.
    There are other languages which do not provide an automatic garbage collection.
    For example, in C++ the programmer is responsible for the memory management. It
    is common for C or C++ programs to contain mistakes where objects are created
    but never destroyed, and so more and more unused and unusable objects fill up
    the heap. Such a program is said to contain a memory leak.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 垃圾回收使程序员不必担心内存管理。还有其他一些语言不提供自动垃圾回收。例如，在 C++ 中，程序员负责内存管理。C 或 C++ 程序经常出现错误，即创建但从未销毁对象，因此越来越多的未使用和无法使用的对象填满堆。这样的程序被称为含有内存泄漏。
