- en: 'Lecture 19: Logic'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讲座 19：逻辑
- en: '[Introduction](#intro)'
  id: totrans-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[介绍](#intro)'
- en: '[Propositions](#propositions)'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[命题](#propositions)'
- en: '[Inference Rules](#rules)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[推理规则](#rules)'
- en: '[A sample proof](#proof)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个示例证明](#proof)'
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Can we prove that any given program works for all possible inputs? No, that
    question is undecidable. But can we develop a program for a given computable task
    so that we can prove that it works for all possible inputs? In principle, yes.
    In practice, this approach is too time-consuming to be applied to large programs.
    However, it is useful to look at how proofs of correctness can be constructed:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能证明任何给定的程序对所有可能的输入都有效吗？不，那个问题是不可判定的。但是，我们能开发一个针对给定可计算任务的程序，以便我们可以证明它对所有可能的输入都有效吗？原则上是可以的。实际上，这种方法耗时太长，无法应用于大型程序。但是，看看如何构建正确性证明是有用的：
- en: For short code that absolutely has to work, proofs of correctness are very useful.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于绝对必须有效的简短代码，正确性证明非常有用。
- en: Automatic theorem provers continue to improve, and proving correctness is becoming
    increasingly cost-effective.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动定理证明器继续改进，并且证明正确性变得越来越具有成本效益。
- en: Understanding what it means to prove a program correct helps make you a better
    programmer.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解证明程序正确意味着你成为一个更好的程序员。
- en: 'What is a proof? A completely convincing argument that something is true. For
    an argument to be completely convincing, it should be made up of small steps,
    each of which is obviously true. In fact, each step should be so simple and obvious
    that we could build a computer program to check the proof. Two ingredients are
    required:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是证明？一个完全令人信服的论证，证明某事是真实的。对于一个论证要完全令人信服，它应该由小步骤组成，每一步都是显而易见的。事实上，每一步都应该如此简单和明显，以至于我们可以构建一个计算机程序来检查证明。需要两个要素：
- en: A language for clearly expressing what we want to prove.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于清楚表达我们想要证明的内容的语言。
- en: Rules for building up an argument in steps that are obviously correct.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建显然正确的步骤的论证规则。
- en: A **logic** accomplishes these two goals.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 **逻辑** 实现了这两个目标。
- en: The strategy for proving programs correct will be to convert programs and their
    specifications into a purely logical statement that is either true or false. If
    the statement is true, then the program is correct. But for our proofs to be truly
    convincing, we need a clear understanding of what a proof is.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 证明程序正确的策略将是将程序及其规范转换为纯逻辑语句，该语句要么为真，要么为假。如果该语句为真，则程序是正确的。但是为了使我们的证明真正令人信服，我们需要清楚地理解证明是什么。
- en: Curiously, mathematicians did not really study the proofs that they were constructing
    until the 20th century. Once they did, they discovered that logic itself was a
    deep topic with many implications for the rest of mathematics.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，数学家直到 20 世纪才真正研究他们正在构建的证明。一旦他们这样做了，他们发现逻辑本身是一个深刻的主题，对数学的其余部分有很多影响。
- en: Propositions
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命题
- en: 'We start with **propositional logic**, which is a logic built up from simple
    symbols representing propositions about some world. For our example, we will use
    the letters A, B, C, ... as propositional symbols. For example, these symbols
    might stand for various propositions:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从**命题逻辑**开始，这是一种由简单符号组成的逻辑，表示关于某个世界的命题。对于我们的例子，我们将使用字母 A、B、C、... 作为命题符号。例如，这些符号可能代表各种命题：
- en: A = "got 90% on the final"
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A = "期末考试得了 90%"
- en: B = "attended class every time"
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: B = "每次上课都出席"
- en: C = "got an A in the class"
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C = "在课堂上得了 A"
- en: D = "x + 1 ≤ y"
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D = "x + 1 ≤ y"
- en: E = "e ∈ s"
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: E = "e ∈ s"
- en: It is not the job of *propositional* logic to assign meanings to these symbols.
    However, we use statements to the meanings of D and E to talk about the correctness
    of programs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*命题*逻辑并不是为这些符号分配含义的工作。但是，我们使用语句来表达 D 和 E 的含义，以讨论程序的正确性。'
- en: Syntax of Propositions
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题的语法
- en: 'We define a grammar for **propositions** built up from these symbols. We use
    the letters P, Q, R to represent propositions (or **formulas**):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从这些符号构建的 **命题** 的语法开始。我们使用字母 P、Q、R 来表示命题（或 **公式**）：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note: On some browsers, on some operating systems, in some fonts, the symbol
    for conjunction (and) is rendered incorrectly as a small circle. It should look
    like an upside-down ∨. In this document, it will appear variously as `∧`, ∧, or
    ∧.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注：在某些浏览器上，在某些操作系统上，在某些字体上，连词（and）的符号可能会被错误地渲染为一个小圆圈。它应该看起来像一个倒置的 ∨。在本文档中，它将以
    `∧`、∧ 或 ∧ 的形式出现。
- en: The precedence of these forms decreases as we go down the list, so P ∧ Q ⇒ R
    is the same as (P ∧ Q) ⇒ R. One thing to watch out for is that ⇒ is right-associative
    (like →), so P ⇒ Q ⇒ R is the same as P ⇒ (Q ⇒ R). We will introduce parentheses
    as needed for clarity. We will use the notation for logical negation, but it is
    really just syntactic sugar for the implication P ⇒ ⊥. We also write P ⇔ Q as
    syntactic sugar for (P ⇒ Q) ∧ (Q ⇒ P), meaning that P and Q are logically equivalent.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些形式的优先级随着列表向下减少，所以 P ∧ Q ⇒ R 和 (P ∧ Q) ⇒ R 是相同的。需要注意的一件事是，⇒ 是右结合的（就像 → 一样），所以
    P ⇒ Q ⇒ R 和 P ⇒ (Q ⇒ R) 是相同的。我们将根据需要引入括号以便清晰。我们使用逻辑否定的符号表示，但它实际上只是 ⊥ 的含义 P ⇒ 的句法糖。我们还将
    P ⇔ Q 写成句法糖为 (P ⇒ Q) ∧ (Q ⇒ P)，意味着 P 和 Q 在逻辑上等价。
- en: 'This grammar defines the language of propositions. With suitable propositional
    symbols, we can express various interesting statements, for example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语法定义了命题的语言。通过适当的命题符号，我们可以表达各种有趣的陈述，例如：
- en: A ∧ B ⇒ C
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: A ∧ B ⇒ C
- en: '"If I got a 90% on the final and I attended class, I will get an A"'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '"如果我期末考得了 90 分并且我上了课，我会得到 A"'
- en: ¬C ⇒ (¬A ∨ ¬B)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ¬C ⇒ (¬A ∨ ¬B)
- en: '"If I didn''t get an A in the class, then either I didn''t get a 90% on the
    final or I didn''t attend class"'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '"如果我在课上没得 A，那么我要么期末考没得 90 分，要么我没上课"'
- en: C ∨ ¬A ∨ ¬B
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: C ∨ ¬A ∨ ¬B
- en: '"Either I got an A in the class, or I didn''t get a 90% on the final or I didn''t
    attend class"'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '"我要么在课上得了 A，要么我期末考没得 90 分，要么我没上课"'
- en: In fact, all three of these propositions are logically equivalent, which we
    can determine without knowing about what finals and attendance mean.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这三个命题都是逻辑上等价的，这是我们可以确定的，而不需要知道期末考试和出勤的具体含义。
- en: Proofs
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 证明
- en: Testing whether a proposition is a tautology by testing every possible truth
    assignment is expensive—there are exponentially many. We need a **deductive system**,
    which will allow us to construct proofs of tautologies in a step-by-step fashion.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 测试命题是否是永真式通过测试每一种可能的真值赋值是昂贵的——有指数多种情况。我们需要一个**演绎系统**，它将允许我们逐步构造永真式的证明。
- en: The system we will use is known as **natural deduction**. The system consists
    of a set of **rules of inference** for deriving consequences from premises. One
    builds a proof tree whose root is the proposition to be proved and whose leaves
    are the initial assumptions or axioms (for proof trees, we usually draw the root
    at the bottom and the leaves at the top).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的系统被称为**自然推导**。该系统由一组**推理规则**组成，用于从前提中推导出结果。一个证明树被构建，其根是要证明的命题，其叶子是最初的假设或公理（对于证明树，我们通常将根绘制在底部，将叶子绘制在顶部）。
- en: For example, one rule of our system is known as **modus ponens**. Intuitively,
    this says that if we know P is true, and we know that P implies Q, then we can
    conclude Q.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们系统的一个规则被称为**假言推理**。直觉上，这意味着如果我们知道 P 是真的，而且我们知道 P 意味着 Q，那么我们可以得出 Q。
- en: The propositions above the line are called **premises**; the proposition below
    the line is the **conclusion**. Both the premises and the conclusion may contain
    metavariables (in this case, P and Q) representing arbitrary propositions. When
    an inference rule is used as part of a proof, the metavariables are replaced in
    a consistent way with the appropriate kind of object (in this case, propositions).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命题称为**前提**；线下的命题是**结论**。前提和结论都可能包含元变量（在这种情况下为 P 和 Q），代表任意命题。当推理规则作为证明的一部分使用时，元变量以一致的方式替换为相应类型的对象（在这种情况下为命题）。
- en: During the course of informal proofs, we typically make temporary assumptions.
    In formal proofs, the ⊢ symbol (read "turnstyle") is used to separate these temporary
    assumptions from the statements that we are proving. The assumptions are placed
    to the left of the turnstyle, and the conclusion is placed to the right. The **sequent**
    P ⊢ Q should be read "Q holds under the assumptions P".
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在非正式证明过程中，我们通常做临时假设。在正式证明中， ⊢ 符号（读作"推导符"）用于将这些临时假设与我们正在证明的陈述分开。假设放置在推导符的左侧，结论放置在右侧。**断言**
    P ⊢ Q 应该读作 "在前提 P 下 Q 成立"。
- en: Inference rules
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推理规则
- en: 'Most rules come in one of two flavors: **introduction** or **elimination**
    rules. Introduction rules tell us how to prove a conclusion containing a logical
    operator ("introducing" it into the conclusion) while elimination rules tell us
    how we can use a logical statement once proved ("eliminating" it from the premises).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数规则分为两种类型之一：**引入**规则或**消除**规则。引入规则告诉我们如何证明包含逻辑运算符的结论（"将"其引入到结论中），而消除规则告诉我们如何使用一旦证明的逻辑陈述（"从"前提中消除）。
- en: 'For example, modus ponens is the elimination rule for ⇒: it tells us what we
    can conclude once we''ve proven P ⇒ Q. Here are the introduction and elimination
    rules for the logical connectives described above:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '| rule name | rule | intuition |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| ∧ | intro |  | To prove (under no assumptions) that P∧Q holds, we must prove
    that P holds (⊢P), and we must prove that Q holds (⊢Q). |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| elim |  | If we know P∧Q, we can use it to conclude P. We can also use it
    to conclude Q. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| ∨ | intro |  | We can prove P∨Q by proving P, or we can prove it by proving
    Q. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| elim |  | If we know either P∨Q holds, and we can prove R holds in the case
    that P holds, and we can also prove that R holds when Q holds, then we know R
    holds in either case, so R holds. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| ⇒ | intro |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '&#124; P⊢Q &#124;'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ⊢P⇒Q &#124;'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '| To prove P⇒Q, we first assume P, and under that assumption we must prove
    Q |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| elim |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: '&#124; ⊢P &#124; ⊢ P⇒Q &#124;'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ⊢Q &#124;'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '| If we know P⇒Q, and we know P, then we can conclude Q. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
- en: '| ¬ | intro |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '&#124; ⊢P⇒⊥ &#124;'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ⊢¬P &#124;'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '| ¬P is just shorthand for P⇒⊥, so we have rules for changing between these
    representations. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
- en: '| elim |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
- en: '&#124; ⊢¬P &#124;'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ⊢P⇒⊥ &#124;'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '| T | intro |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: '&#124;  &#124;'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ⊢T &#124;'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '| It''s easy to prove "true"! (But it doesn''t get you much — there is no elimination
    rule) |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| ⊥ | elim |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '&#124; ⊢⊥ &#124;'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ⊢P &#124;'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '| If you manage to prove "false", you can conclude anything you want. (But
    good luck proving it — there is no introduction rule). |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '| assum |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '&#124;  &#124;'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; P⊢P &#124;'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '| You may use your assumptions. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: '| excluded middle |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
- en: '&#124;  &#124;'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ⊢P∨¬P &#124;'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '| Every proposition is either true or false |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
- en: An example proof
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now walk through a formal proof that (A∧B⇒C)⇒(¬C⇒¬A∨¬B). It is often
    easiest to construct these proofs in a "goal directed" fashion — we start with
    the conclusion and build the proof tree above it. Our goal is ⊢(A∧B⇒C)⇒(¬C⇒¬A∨¬B).
    To prove this informally, we would assume the left hand-side of the implication
    and try to prove the RHS. Formally, we apply the ⇒ introduction rule:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; (A∧B⇒C) ⊢ ¬C⇒¬A∨¬B &#124;'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; ⊢ (A∧B⇒C)⇒(¬C⇒¬A∨¬B) &#124;'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '| (⇒ intro) |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
- en: 'Now we must construct a proof of ¬C⇒¬A∨¬B. Again, we apply the ⇒ introduction
    rule since we are trying to prove an implication:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we must show that either ¬A or ¬B holds, but the proof we want to use depends
    on whether A is true or not. So we will use excluded middle to introduce A∨¬A,
    and we will use the ∨ elimination rule to prove our current goal:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'The second of the two remaining subgoals is easy:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus all that remains to prove is (A∧B⇒C), ¬C ⊢ A ⇒ ¬A∨¬B. We will again break
    the proof into cases using the law of the excluded middle, this time with B:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Progress has been made! All that''s left is to prove A∧B⇒C, ¬C, A, B ⊢ ¬A ∨
    ¬B (from the middle branch). At this point we have a contradiction in our assumptions,
    so we will use it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: We have now discharged all of our subgoals, which means we've completed the
    proof. To assemble the final proof, we merely need to snap together the pieces
    that we have constructed above.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有的子目标，这意味着我们已经完成了证明。要组装最终的证明，我们只需将以上构建的各部分连接起来即可。
- en: Formal proofs like this have both advantages and disadvantages compared to the
    informal proofs we have seen earlier in the course. The advantage is that every
    step is completely explicit, and can be checked completely mechanically. The disadvantage
    is that we have to write every step, and the high-level argument for why the theorem
    is true becomes obscured.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在课程中之前看到的非正式证明相比，这样的形式证明既有优点又有缺点。优点在于每一步都是完全明确的，可以完全机械地检查。缺点在于我们必须写下每一步，而且为了证明定理的真实性，高层次的论证变得模糊不清。
