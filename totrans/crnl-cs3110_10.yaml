- en: 'Recitation 5: Folding and tail recursion'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5次复习：折叠和尾递归
- en: Folding
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 折叠
- en: 'Suppose we want to write a function to sum a list of integers.  By now you
    should be able to write the following code:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要编写一个函数来对整数列表求和。到现在为止，你应该能够编写以下代码：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now suppose we want to concatenate a list of strings.  We can write:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们想要连接一个字符串列表。我们可以编写：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that both functions look almost identical.  With the exception of the
    different types and different operation (^ vs +), both functions are equivalent. 
    In both cases, we walk down a list performing some operation with the data at
    each step.  Since we love to reuse code in this class, is there some easier way
    to encode this?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这两个函数看起来几乎完全相同。除了不同的类型和不同的操作（^ vs +）之外，这两个函数是等价的。在这两种情况下，我们都遍历列表，在每一步中执行一些操作。由于我们喜欢在这门课上重用代码，是否有一种更简单的方法来编码这个？
- en: It turns out we can abstract all of the details of traversing a list.  The idea
    is simple.  As we walk across a list, we store an *accumulator*, a value that
    stores some data that is important to us.  For example, if we want to walk across
    a list of integers and sum them, we could store the current sum in the accumulator. 
    We start with the accumulator set to 0.  As we come across each new element, we
    add the element to the accumulator.  When we reach the end, we return the value
    stored in the accumulator.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 结果我们可以将遍历列表的所有细节抽象出来。这个想法很简单。当我们遍历列表时，我们存储一个*累加器*，它存储对我们很重要的一些数据。例如，如果我们想要遍历一个整数列表并对它们求和，我们可以将当前的总和存储在累加器中。我们从累加器设置为0开始。当我们遇到每个新元素时，我们将元素添加到累加器中。当我们到达末尾时，我们返回累加器中存储的值。
- en: Let's try to rewrite the sum function to introduce the idea of an accumulator.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着重写求和函数来引入累加器的概念。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Of course, to get the sum, we must call `sum'` with `0` for the initial `acc`
    value.  Similarly, we can rewrite concat with this concept of the accumulator.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，为了得到总和，我们必须使用初始值为`0`调用`sum'`来计算累加器。类似地，我们可以使用累加器的概念重写`concat`。
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To use this function, we pass in the empty string for the initial accumulator. 
    Now we see even more similarity between the two functions.  We are in a position
    to eliminate any differences between the two by passing in the operator that acts
    on the head of the list and the accumulator.  The result is the most powerful
    list function in the list library:  `List.fold_left`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此函数，我们将空字符串作为初始累加器传递进去。现在我们看到了两个函数之间更多的相似性。我们可以通过传入作用于列表头部和累加器的运算符来消除两者之间的任何差异。结果就是列表库中最强大的列表函数：`List.fold_left`。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now we can rewrite `sum` and `concat` as
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以重写`sum`和`concat`如下：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Given a function `f` of type `'a -> 'b -> 'a`, the expression `List.fold_left
    f b [x1; x2; ...; xn]` evaluates to `f (... (f (f b x1) x2) ...) xn`. The 'left'
    in `List.fold_left` comes from the fact that it walks the list from left to right. 
    Thus, we have to be careful sometimes in applying functions in the right order
    (hence `acc ^ x` and not `x ^ acc` in `concat` above).  There is also a library
    function `List.fold_right` which traverses the list from right to left. Note that
    `List.fold_right` uses a different argument order than `List.fold_left`. The list
    and the accumulator arguments are switched, and the function takes in the accumulator
    as its second curried argument, not its first. So, `List.fold_right f [x1; x2;
    ...; xn] b` evaluates to `f x1 (f x2 (... (f xn b)...))`. The code for `List.fold_right`
    is
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 给定类型为`'a -> 'b -> 'a`的函数`f`，表达式`List.fold_left f b [x1; x2; ...; xn]`的求值结果为`f
    (... (f (f b x1) x2) ...) xn`。`List.fold_left`中的'left'来自于它从左到右遍历列表。因此，我们有时在应用函数时必须注意顺序（因此在上面的`concat`中是`acc
    ^ x`而不是`x ^ acc`）。还有一个库函数`List.fold_right`，它从右到左遍历列表。请注意，`List.fold_right`的参数顺序与`List.fold_left`不同。列表和累加器参数交换了位置，并且函数接受累加器作为其第二个柯里化参数，而不是第一个。因此，`List.fold_right
    f [x1; x2; ...; xn] b`的求值结果为`f x1 (f x2 (... (f xn b)...))`。`List.fold_right`的代码为
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can use `List.fold_right` to write `concat` in the more natural manner.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`List.fold_right`以更自然的方式编写`concat`。
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: But we can still do better.  Remember, both `List.fold_left` and `List.fold_right`
    are curried, so that we can leave out the list argument and write
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们仍然可以做得更好。请记住，`List.fold_left`和`List.fold_right`都是柯里化的，因此我们可以省略列表参数并写成
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can do even better.  OCaml provides a convenient notation to use infix binary
    operators as curried functions by enclosing them in parentheses. So `(+)` is a
    curried function that takes two integers and add them, `(^)` is a curried function
    that takes two strings and concatenates them.  We can write sum and concat one
    last time as
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以做得更好。OCaml提供了一种便捷的表示法，通过将中缀二进制运算符括在括号中，可以将它们作为柯里化函数使用。因此，`(+)`是一个柯里化函数，接受两个整数并将它们相加，`(^)`是一个柯里化函数，接受两个字符串并将它们连接起来。我们可以最后一次编写sum和concat如下：
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now you see the true power of functional programming.  Try rewriting functions
    that sum a list of ints and concatenate a list of strings in 2 short lines of
    Java.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你看到了函数式编程的真正威力。尝试用2行Java代码重写对整数列表求和和对字符串列表进行连接的函数。
- en: Folding is so powerful, that we can write almost every other general list function
    in terms of `List.fold_left` or `List.fold_right`.  For example,
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 折叠是如此强大，以至于我们几乎可以用`List.fold_left`或`List.fold_right`来编写每一个通用的列表函数。例如，
- en: '[PRE10]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When writing code with fold, OCaml's type system can be tremendously helpful. 
    The type of `List.fold_left` is `('a -> 'b -> 'a) -> 'a -> 'b list -> 'a`.  Suppose
    we know we are applying `List.fold_left` to an `int list` and we want to return
    a `string`.  Then `'b` is of type `int` and `'a` is of type `string`.  So right
    away, we know that the function we have to pass into `List.fold_left` is of type
    `string -> int -> string`.  Remember to use your type system to help you in writing
    code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用fold编写代码时，OCaml的类型系统可以极大地帮助。`List.fold_left`的类型是`('a -> 'b -> 'a) -> 'a ->
    'b list -> 'a`。假设我们知道我们将`List.fold_left`应用于`int list`并且想要返回一个`string`，那么`'b`的类型是`int`，`'a`的类型是`string`。因此，我们立即知道我们必须传递给`List.fold_left`的函数的类型是`string
    -> int -> string`。记得要利用你的类型系统来帮助你编写代码。
- en: You should try writing some functions with `List.fold_left` to get a feel for
    it.  It can be incredibly useful.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该尝试使用`List.fold_left`编写一些函数，以便更好地了解它。它可以非常有用。
- en: Tail recursion
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尾递归
- en: A function is *tail recursive* if it calls itself recursively but does not perform
    any computation after the recursive call returns, and immediately returns to its
    caller the value of its recursive call.  Observe the following difference between
    the `sum` and `sum'` functions above:  In the first `sum` function, which is not
    tail recursive, after the recursive call returned its value, we add `x` to it. 
    In the tail recursive `sum'`, after the recursive call returns, we immediately
    return the value without further computation. Notice also that `List.fold_left`
    is tail recursive, whereas `List.fold_right` is not.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个函数在递归调用自身后不执行任何计算，而是立即返回其递归调用的值并将其值立即返回给调用者，则称该函数为*尾递归*。观察上面`sum`和`sum'`函数之间的以下区别：在第一个不是尾递归的`sum`函数中，在递归调用返回其值后，我们将`x`添加到它。而在尾递归`sum'`中，在递归调用返回后，我们立即返回该值，不进行进一步的计算。注意，`List.fold_left`是尾递归的，而`List.fold_right`不是。
- en: 'Why do we care about tail recursion? Performance. Conceptually, there is a
    *call stack*, which is a stack (the data structure with push and pop operations)
    with one element for each function call that has been started but has not yet
    completed. Each element stores things like the value of local variables and what
    part of the function has not been evaluated yet. When the evaluation of one function
    body calls another function, a new element is pushed on the call stack and it
    is popped off when the called function completes. When a function makes a recursive
    call to itself and there is *nothing more for the caller to do* after the callee
    returns (except return the callee''s result), this situation is called a *tail
    call*. Functional languages like OCaml (and even imperative languages like C++)
    typically include an hugely useful optimization: when a call is a tail call, the
    caller''s stack-frame is popped *before* the call—the callee''s stack-frame just
    replaces the caller''s. This makes sense: the caller was just going to return
    the callee''s result anyway. With this optimization, recursion can sometimes be
    as efficient as a `while` loop in imperative languages (such loops don''t make
    the call-stack bigger.) The "sometimes" is exactly when calls are tail calls—something
    both you and the compiler can (often) figure out. With tail-call optimization,
    the space performance of a recursive algorithm can be reduced from O(n) to O(1),
    that is, from one stack frame per call to a single stack frame for all calls.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么关心尾递归？因为性能。从概念上讲，有一个*调用栈*，它是一个栈（具有推送和弹出操作的数据结构），每个已启动但尚未完成的函数调用都有一个元素。每个元素都存储着诸如局部变量的值以及尚未评估的函数部分。当一个函数的评估调用另一个函数时，将在调用栈上推送一个新元素，当被调用的函数完成时，它就会被弹出。当一个函数对自身进行递归调用，并且在调用方在被调用方返回后*没有其他事情要做*（除了返回被调用方的结果）时，这种情况被称为*尾调用*。像OCaml（甚至像C++这样的命令式语言）这样的函数式语言通常包含一个非常有用的优化：当一个调用是尾调用时，调用者的栈帧在调用前被弹出—被调用者的栈帧就替换了调用者的栈帧。这是有道理的：调用者只是要返回被调用者的结果。通过这种优化，递归有时可以像命令式语言中的`while`循环一样高效（这样的循环不会使调用栈变大）。"有时候"指的正是调用是尾调用的时候——你和编译器通常可以（经常）弄清楚。通过尾调用优化，递归算法的空间性能可以从O(n)降低到O(1)，也就是说，从每次调用一个栈帧到所有调用只使用一个栈帧。
- en: 'So when you have a choice between using `List.fold_left` and `List.fold_right`,
    you are likely better off using `List.fold_left` on really long lists. Nonetheless,
    it is sometimes easier to express a computation using `List.fold_right` (notice
    that we wrote `map` in terms of `fold_right` in lecture on map and fold), so there
    is a tradeoff between performance and code clarity. If you want to use `List.fold_right`
    on a very lengthy list, you might instead choose to reverse the list first, then
    use `List.fold_left`. For example, we could have written map as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在使用`List.fold_left`和`List.fold_right`之间做选择时，通常最好在非常长的列表上使用`List.fold_left`。然而，有时候用`List.fold_right`来表达一个计算会更容易（注意我们在关于map和fold的讲座中是如何用`fold_right`来写`map`的），因此在性能和代码清晰度之间存在权衡。如果你想在一个非常长的列表上使用`List.fold_right`，你可能会选择先反转列表，然后再使用`List.fold_left`。例如，我们可以将map写成以下形式：
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That results in a tail recursive hence space efficient implementation. But that
    doesn't mean that a tail-recursive implementation is strictly better. On small
    to medium sized lists, the overhead of reversing the list (both in time and in
    allocating memory for the reversed list) can make the tail-recursive version less
    *time* efficient.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了一个尾递归，从而实现了高效的空间利用。但这并不意味着尾递归实现就一定更好。对于小到中等大小的列表，反转列表的开销（无论是时间上还是为反转列表分配内存）可能会使尾递归版本的效率*降低*。
