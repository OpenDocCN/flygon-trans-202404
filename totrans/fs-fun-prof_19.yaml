- en: Algebraic type sizes and domain modelling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代数类型的大小和域建模
- en: Algebraic type sizes and domain modelling
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代数类型的大小和域建模
- en: In this post, we'll look at how to calculate the "size", or cardinality, of
    an algebraic type, and see how this knowledge can help us with design decisions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将看看如何计算代数类型的“大小”，或基数，并看看这种知识如何帮助我们进行设计决策。
- en: Getting started
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: I'm going to define the "size" of a type by thinking of it as a set, and counting
    the number of possible elements.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我打算通过将其视为一个集合来定义类型的“大小”，并计算可能元素的数量。
- en: For example, there are two possible booleans, so the size of the `Boolean` type
    is two.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，布尔类型有两种可能值，因此 `Boolean` 类型的大小为两个。
- en: 'Is there a type with size one? Yes -- the `unit` type only has one value: `()`.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 是否有大小为一的类型？有 —— `unit` 类型只有一个值：`()`。
- en: Is there a type with size zero? That is, is there a type that has no values
    at all? Not in F#, but in Haskell there is. It is called `Void`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 是否有大小为零的类型？也就是说，是否有一个根本没有值的类型？在 F# 中没有，但在 Haskell 中有。它被称为 `Void`。
- en: 'What about a type like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像这样的类型该如何处理：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What is its size? There are three possible values, so the size is three.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它的大小是多少？有三种可能的值，因此大小为三。
- en: 'What about a type like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像这样的类型又该如何处理：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Obviously, four.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，四种。
- en: I think you get the idea!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我想你已经明白了！
- en: Calculating the size of compound types
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算复合类型的大小
- en: 'Let''s look at calculating the sizes of compound types now. If you remember
    from the [understanding F# types](understanding-fsharp-types.html) series, there
    are two kinds of algebraic types: "product" types such as [tuples](tuples.html)
    and records, and "sum" types, called [discriminated unions](discriminated-unions.html)
    in F#.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来计算复合类型的大小。如果你还记得 [理解 F# 类型](understanding-fsharp-types.html) 系列，你会知道有两种代数类型：“乘积”类型，比如
    [元组](tuples.html) 和记录，以及“和”类型，在 F# 中称为[判别联合](discriminated-unions.html)。
- en: 'For example, let''s say that we have a `Speed` as well as a `Direction`, and
    we combine them into a record type called `Velocity`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个 `Speed` 和一个 `Direction`，我们将它们合并成一个称为 `Velocity` 的记录类型：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What is the size of `Velocity`?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Velocity` 的大小是多少？'
- en: 'Here''s every possible value:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每一个可能的值：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There are eight possible values, one for every possible combination of the two
    `Speed` values and the four `Direction` values.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有八种可能的值，每一种可能性都对应两个 `Speed` 值和四个 `Direction` 值的组合。
- en: 'We can generalize this into a rule:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个概括成一个规则：
- en: '**RULE: The size of a product type is the *product* of the sizes of the component
    types.**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则：乘积类型的大小是组成类型的大小之积。**'
- en: 'That is, given a record type like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，给定这样一个记录类型：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The size is calculated like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 大小是这样计算的：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And similarly for a tuple:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于元组也是一样的：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The size is:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 大小是：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Sum types
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 求和类型
- en: 'Sum types can be analyzed the same way. Given a type `Movement` defined like
    this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 求和类型可以用相同的方式进行分析。给定一个如下所示的类型 `Movement`：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can write out and count all the possibilities:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以列出并计算所有可能性：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So, five in all. Which just happens to be `size(Direction) + 1`. Here''s another
    fun one:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，总共五种。这恰好是 `size(Direction) + 1`。再来一个有趣的例子：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Again, we can write out and count all the possibilities:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们可以列出并计算所有可能性：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There are three possible values in the `YouSay` case, and three possible values
    in the `ISay` case, making six in all.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `YouSay` 情况下有三种可能的值，在 `ISay` 情况下也有三种可能的值，总共六种。
- en: Again, we can make a general rule.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以得出一个通用的规则。
- en: '**RULE: The size of a sum or union type is the *sum* of the sizes of the component
    types.**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则：求和类型或联合类型的大小是组成类型的大小之和。**'
- en: 'That is, given a union type like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，给定这样一个联合类型：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The size is calculated like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 大小是这样计算的：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Working with generic types
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用泛型类型
- en: What happens if we throw generic types into the mix?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将泛型类型混合在一起会发生什么？
- en: 'For example, what is the size of a type like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，像这样的类型的大小是多少：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Well, the first thing to say is that `Optional<'a>` is not a *type* but a *type
    constructor*. `Optional<string>` is a type. `Optional<int>` is a type, but `Optional<'a>`
    isn't.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要说的是 `Optional<'a>` 不是一个*类型*而是一个*类型构造器*。`Optional<string>` 是一种类型。`Optional<int>`
    是一种类型，但 `Optional<'a>` 不是。
- en: Nevertheless, we can still calculate its size by noting that `size(Optional<string>)`
    is just `size(string) + 1`, `size(Optional<int>)` is just `size(int) + 1`, and
    so on.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们仍然可以通过注意到 `size(Optional<string>)` 只是 `size(string) + 1`，`size(Optional<int>)`
    只是 `size(int) + 1`，等等来计算它的大小。
- en: 'So we can say:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以说：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Similarly, for a type with two generics like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，对于像这样具有两个泛型的类型：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'we can say that its size can be calculated using the size of the generic components
    (using the "sum rule" above):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Recursive types
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What about a recursive type? Let's look at the simplest one, a linked list.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'A linked list is either empty, or it has a cell with a tuple: a head and a
    tail. The head is an `''a` and the tail is another list. Here''s the definition:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To calculate the size, let''s assign some names to the various components:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now we can write:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s play with this formula a bit. We start with:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'and let''s substitute the last S with the formula to get:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If we clean this up, we get:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: (where `N^2` means "N squared")
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s substitute the last S with the formula again:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'and clean up again:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can see where this is going! The formula for `S` can be expanded out indefinitely
    to be:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'How can we interpret this? Well, we can say that a list is a union of the following
    cases:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: an empty list(size = 1)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a one element list (size = N)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a two element list (size = N x N)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a three element list (size = N x N x N)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and so on.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And this formula has captured that.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: As an aside, you can calculate `S` directly using the formula `S = 1/(1-N)`,
    which means that a list of `Direction` (size=4) has size "-1/3". Hmmm, that's
    strange! It reminds me of [this "-1/12" video](https://www.youtube.com/watch?v=w-I6XTVZXww).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the size of functions
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What about functions? Can they be sized?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Yes, all we need to do is write down every possible implementation and count
    them. Easy!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: For example, say that we have a function `SuitColor` that maps a card `Suit`
    to a `Color`, red or black.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'One implementation would be to return red, no matter what suit was provided:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Another implementation would be to return red for all suits except `Club`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In fact we can write down all 16 possible implementations of this function:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Another way to think of it is that we can define a record type where each value
    represents a particular implementation: which color do we return for a `Heart`
    input, which color do we return for a `Spade` input, and so on.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'The type definition for the implementations of `SuitColor` would therefore
    look like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: What is the size of this record type?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'There are four `size(Color)` here. In other words, there is one `size(Color)`
    for every input, so we could write this as:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In general, then, given a function type:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The size of the function is `size(output type)` to the power of `size(input
    type)`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Lets codify that into a rule too:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '**RULE: The size of a function type is `size(output type)` to the power of
    `size(input type)`.**'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting between types
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All right, that is all very interesting, but is it *useful*?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Yes, I think it is. I think that understanding sizes of types like this helps
    us design conversions from one type to another, which is something we do a lot
    of!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that we have a union type and a record type, both representing a
    yes/no answer:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How can we map between them?
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'They both have size=2, so we should be able to map each value in one type to
    the other, and vice versa:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This is what you might call a "lossless" conversion. If you round-trip the conversion,
    you can recover the original value. Mathematicians would call this an *isomorphism*
    (from the Greek "equal shape").
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你可能称之为“无损”的转换。如果你往返转换，你可以恢复原始值。数学家会称之为 *同构*（来自希腊语“相等形状”）。
- en: What about another example? Here's a type with three cases, yes, no, and maybe.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子呢？这是一个有三种情况的类型，是、否和可能。
- en: '[PRE38]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Can we losslessly convert this to this type?
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能无损地将这个转换为这种类型吗？
- en: '[PRE39]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Well, what is the size of an `option`? One plus the size of the inner type,
    which in this case is a `bool`. So `size(YesNoOption)` is also three.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，一个 `option` 的大小是多少？一个加上内部类型的大小，这种情况下是一个 `bool`。所以 `size(YesNoOption)` 也是三。
- en: 'Here are the conversion functions:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是转换函数：
- en: '[PRE40]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'So we can make a rule:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以制定一个规则：
- en: '**RULE: If two types have the same size, you can create a pair of lossless
    conversion functions**'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则：如果两个类型的大小相同，你可以创建一对无损转换函数**'
- en: 'Let''s try it out. Here''s a `Nibble` type and a `TwoNibbles` type:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试。这里有一个 `Nibble` 类型和一个 `TwoNibbles` 类型：
- en: '[PRE41]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Can we convert `TwoNibbles` to a `byte` and back?
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能把 `TwoNibbles` 转换为一个 `byte` 再转换回来吗？
- en: The size of `Nibble` is `2 x 2 x 2 x 2` = 16 (using the product size rule),
    and the size of `TwoNibbles` is size(Nibble) x size(Nibble), or `16 x 16`, which
    is 256.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`Nibble` 的大小是 `2 x 2 x 2 x 2` = 16（使用乘积大小规则），而 `TwoNibbles` 的大小是 `size(Nibble)
    x size(Nibble)`，或者 `16 x 16`，即 256。'
- en: So yes, we can convert from `TwoNibbles` to a `byte` and back.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所以是的，我们可以从 `TwoNibbles` 转换为一个 `byte` 再转换回来。
- en: Lossy conversions
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有损转换
- en: What happens if the types are different sizes?
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果类型的大小不同会发生什么？
- en: If the target type is "larger" than the source type, then you can always map
    without loss, but if the target type is "smaller" than the source type, you have
    a problem.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目标类型比源类型“更大”，那么你总是可以无损映射，但如果目标类型比源类型“更小”，你就有问题了。
- en: For example, the `int` type is smaller than the `string` type. You can convert
    an `int` to a `string` accurately, but you can't convert a `string` to an `int`
    easily.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`int` 类型比 `string` 类型小。你可以准确地将一个 `int` 转换为一个 `string`，但是你不能轻易地将一个 `string`
    转换为一个 `int`。
- en: 'If you *do* want to map a string to an int, then some of the non-integer strings
    will have to be mapped to a special, non-integer value in the target type:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你 *确实* 想要将一个字符串映射到一个整数，那么一些非整数字符串将需要被映射到目标类型中的一个特殊的、非整数值：
- en: '![](type-size-1.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](type-size-1.png)'
- en: In other words we know from the sizes that the target type can't just be an
    `int` type, it must be an `int + 1` type. In other words, an Option type!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们从大小上知道目标类型不能只是一个 `int` 类型，它必须是一个 `int + 1` 类型。换句话说，是一个 Option 类型！
- en: Interestingly, the `Int32.TryParse` function in the BCL returns two values,
    a success/failure `bool` and the parsed result as an `int`. In other words, a
    tuple `bool * int`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`Int32.TryParse` 函数在 BCL 中返回两个值，一个表示成功/失败的 `bool` 值，另一个是解析后的结果作为 `int`。换句话说，是一个元组
    `bool * int`。'
- en: The size of that tuple is `2 x int`, many more values that are really needed.
    Option types ftw!
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 那个元组的大小是 `2 x int`，远远超过实际需要的值。Option 类型万岁！
- en: Now let's say we are converting from a `string` to a `Direction`. Some strings
    are valid, but most of them are not. But this time, instead of having one invalid
    case, let's also say that we want to distinguish between empty inputs, inputs
    that are too long, and other invalid inputs.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们要从一个 `string` 转换为一个 `Direction`。有些字符串是有效的，但大多数都不是。但这一次，不只是有一个无效的情况，我们还想区分空输入、输入过长和其他无效输入。
- en: '![](type-size-2.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](type-size-2.png)'
- en: 'We can''t model the target with an Option any more, so let''s design a custom
    type that contains all seven cases:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能再用一个 Option 来建模目标了，所以让我们设计一个包含所有七种情况的自定义类型：
- en: '[PRE42]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: But this design mixes up successful conversions and failed conversions. Why
    not separate them?
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个设计混淆了成功的转换和失败的转换。为什么不把它们分开呢？
- en: '[PRE43]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: What is the size of `StringToDirection_V2`?
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`StringToDirection_V2` 的大小是多少？'
- en: There are 4 choices of `Direction` in the `Success` case, and three choices
    of `ConversionFailure` in the `Failure` case, so the total size is seven, just
    as in the first version.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Success` 案例中有 4 种 `Direction` 的选择，而在 `Failure` 案例中有 三种 `ConversionFailure`
    的选择，所以总大小是七，就像第一个版本一样。
- en: In other words, both of these designs are *equivalent* and we can use either
    one.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，这两种设计都是 *等价的*，我们可以使用任何一种。
- en: Personally, I prefer version 2, but if we had version 1 in our legacy code,
    the good news is that we can losslessly convert from version 1 to version 2 and
    back again. Which in turn means that we can safely refactor to version 2 if we
    need to.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我更喜欢版本 2，但如果我们的遗留代码中有版本 1，好消息是我们可以无损地从版本 1 转换为版本 2，反之亦然。这反过来意味着如果需要，我们可以安全地重构为版本
    2。
- en: Designing the core domain
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计核心域
- en: Knowing that different types can be losslessly converted allows you to tweak
    your domain designs as needed.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 知道不同类型可以无损地转换允许您根据需要调整您的域设计。
- en: 'For example, this type:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这种类型：
- en: '[PRE44]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'can be losslessly converted to this one:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 可以无损地转换为这种类型：
- en: '[PRE45]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'or this one:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 或者这样一个：
- en: '[PRE46]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Here''s a real example:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个真实的例子：
- en: You have a website where some users are registered and some are not.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您有一个网站，其中一些用户已注册，而另一些则没有。
- en: For all users, you have a session id
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对所有用户，您都有一个会话 ID
- en: For registered users only, you have extra information
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅适用于注册用户，您有额外的信息
- en: 'We could model that requirement like this:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样建模该需求：
- en: '[PRE47]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'or alternatively, we can pull the common `SessionId` up to a higher level like
    this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 或者作为替代，我们可以将常见的 `SessionId` 上移至更高级别，如此：
- en: '[PRE48]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Which is better? In one sense, they are both the "same", but obviously the best
    design depends on the usage pattern.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 哪种更好？从某种意义上说，它们都是“相同的”，但显然最佳设计取决于使用模式。
- en: If you care more about the type of user than the session id, then version 1
    is better.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您更关心用户类型而不是会话 ID，则版本 1 更好。
- en: If you are constantly looking at the session id without caring about the type
    of user, then version 2 is better.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您经常查看会话 ID 而不关心用户类型，则版本 2 更好。
- en: The nice thing about knowing that they are isomorphic is that you can define
    *both* types if you like, use them in different contexts, and losslessly map between
    them as needed.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 知道它们是同构的好处在于，如果你喜欢，你可以定义*两种*类型，将它们用于不同的上下文，并根据需要无损地在它们之间进行映射。
- en: Interfacing with the outside world
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与外部世界接口
- en: We have all these nice domain types like `Direction` or `WebsiteUser` but at
    some point we need to interface with the outside world -- store them in a database,
    receive them as JSON, etc.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有所有这些漂亮的域类型，如`Direction`或`WebsiteUser`，但是在某个时候，我们需要与外部世界进行接口 -- 将它们存储在数据库中，以
    JSON 的形式接收它们等等。
- en: 'The problem is that the outside world does not have a nice type system! Everything
    tends to be primitives: strings, ints and bools.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于外部世界没有一个良好的类型系统！一切都倾向于是原始的：字符串，整数和布尔值。
- en: Going from our domain to the outside world means going from types with a "small"
    set of values to types with a "large" set of values, which we can do straightforwardly.
    But coming in from the outside world into our domain means going from a "large"
    set of values to a "small" set of values, which requires validation and error
    cases.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的域到外部世界的过程意味着从具有“小”值集的类型到具有“大”值集的类型，我们可以直接执行。但是从外部世界进入我们的域意味着从具有“大”值集的类型到具有“小”值集的类型，这需要验证和错误情况。
- en: 'For example, a domain type might look like this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，域类型可能如下所示：
- en: '[PRE49]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The values are constrained: max 50 chars for the name, a validated email, an
    age which is between 1 and 129\.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值是受限制的：名称最多 50 个字符，经过验证的电子邮件，年龄在 1 到 129 之间。
- en: 'On the other hand, the DTO type might look like this:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，DTO 类型可能如下所示：
- en: '[PRE50]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The values are unconstrained: any string for the name, a unvalidated email,
    an age that can be any of 2^32 different values, including negative ones.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值是不受限制的：名称可以是任何字符串，邮箱是未经验证的，年龄可以是 2^32 个不同的值之一，包括负值。
- en: This means that we *cannot* create a `CustomerDTO` to `DomainCustomer` mapping.
    We *have* to have at least one other value (`DomainCustomer + 1`) to map the invalid
    inputs onto, and preferably more to document the various errors.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们*无法*创建 `CustomerDTO` 到 `DomainCustomer` 的映射。我们*必须*至少有另一个值（`DomainCustomer
    + 1`）来映射无效的输入，并且最好有更多来记录各种错误。
- en: This leads naturally to the `Success/Failure` model as described in my [functional
    error handling](http://fsharpforfunandprofit.com/rop/) talk,
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这自然导致了我在[函数式错误处理](http://fsharpforfunandprofit.com/rop/)讲座中描述的`Success/Failure`模型，
- en: The final version of the mapping would then be from a `CustomerDTO` to a `SuccessFailure<DomainCustomer>`
    or similar.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，映射的最终版本将是从 `CustomerDTO` 到 `SuccessFailure<DomainCustomer>` 或类似的。
- en: 'So that leads to the final rule:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这导致了最终的规则：
- en: '**RULE: Trust no one. If you import data from an external source, be sure to
    handle invalid input.**'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则：不信任任何人。如果从外部来源导入数据，请务必处理无效输入。**'
- en: 'If we take this rule seriously, it has some knock on effects, such as:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们认真对待这个规则，它会产生一些连锁反应，比如：
- en: Never try to deserialize directly to a domain type (e.g. no ORMs), only to DTO
    types.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要直接尝试将数据反序列化为域类型（例如，不要使用ORM），只能反序列化为DTO类型。
- en: Always validate every record you read from a database or other "trusted" source.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是验证从数据库或其他“可信”来源读取的每条记录。
- en: You might think that having everything wrapped in a `Success/Failure` type can
    get annoying, and this is true (!), but there are ways to make this easier. See
    [this post](elevated-world-5.html#asynclist) for example.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为，把所有东西都包装在`Success/Failure`类型中可能会让人讨厌，而且这是真的！但有办法让这变得更容易。例如参见[这篇帖子](elevated-world-5.html#asynclist)。
- en: Further reading
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The "algebra" of algebraic data types is well known. There is a good recent
    summary in ["The algebra (and calculus!) of algebraic data types"](https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types)
    and a [series by Chris Taylor](https://chris-taylor.github.io/blog/2013/02/13/the-algebra-of-algebraic-data-types-part-iii/).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 关于代数数据类型的“代数”是众所周知的。最近有一篇很好的总结在["The algebra (and calculus!) of algebraic data
    types"](https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types)，还有克里斯·泰勒（Chris
    Taylor）的[系列文章](https://chris-taylor.github.io/blog/2013/02/13/the-algebra-of-algebraic-data-types-part-iii/)。
- en: 'And after I wrote this, I was pointed to two similar posts:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 而我写完这篇之后，有人指出了两篇类似的帖子：
- en: '[One by Tomas Petricek](http://tomasp.net/blog/types-and-math.aspx/) with almost
    the same content!'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Tomas Petricek的一篇](http://tomasp.net/blog/types-and-math.aspx/)，内容几乎相同！'
- en: '[One by Bartosz Milewski](http://bartoszmilewski.com/2015/01/13/simple-algebraic-data-types/)
    in his series on category theory.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bartosz Milewski的一篇](http://bartoszmilewski.com/2015/01/13/simple-algebraic-data-types/)，在他关于范畴论的系列中。'
- en: As some of those posts mention, you can do strange things with these type formulas,
    such as differentiate them!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 有些帖子提到，你可以用这些类型公式做一些奇怪的事情，比如对它们进行微分！
- en: If you like academic papers, you can read the original discussion of derivatives
    in ["The Derivative of a Regular Type is its Type of One-Hole Contexts"](http://strictlypositive.org/diff.pdf)(PDF)
    by Conor McBride from 2001, and a follow up in ["Differentiating Data Structures"](http://www.cs.nott.ac.uk/~txa/publ/jpartial.pdf)(PDF)
    [Abbott, Altenkirch, Ghani, and McBride, 2005].
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢学术论文，你可以阅读康纳·麦克布赖德（Conor McBride）在2001年的论文《["The Derivative of a Regular
    Type is its Type of One-Hole Contexts"](http://strictlypositive.org/diff.pdf)》（PDF）中对导数的原始讨论，以及他在2005年与其他人合著的续篇《["Differentiating
    Data Structures"](http://www.cs.nott.ac.uk/~txa/publ/jpartial.pdf)》（PDF）。
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: This might not be the most exciting topic in the world, but I've found this
    approach both interesting and useful, and I wanted to share it with you.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能不是世界上最令人兴奋的话题，但我发现这种方法既有趣又有用，我想与你分享。
- en: Let me know what you think. Thanks for reading!
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我知道你的想法。谢谢阅读！
