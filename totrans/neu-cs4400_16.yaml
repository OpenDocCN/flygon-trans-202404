- en: Intro to Typed RacketTuesday, January 17th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Typed Racket 简介星期二，1月17日
- en: 'The plan:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 计划：
- en: Why Types?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要使用类型？
- en: Why Typed Racket?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要使用 Typed Racket？
- en: What’s Different about Typed Racket?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typed Racket 有什么不同？
- en: Some Examples of Typed Racket for Course Programs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些课程程序的 Typed Racket 示例
- en: Types
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: Who has used a (statically) typed language?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁使用过（静态）类型语言？
- en: Who has used a typed language that’s not Java?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁使用过不是 Java 的类型语言？
- en: Typed Racket will be both similar to and very different from anything you’ve
    seen before.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Typed Racket 将与您之前见过的任何东西既相似又非常不同。
- en: Why types?
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么要用类型？
- en: Types help structure programs.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型有助于结构化程序。
- en: Types provide enforced and mandatory documentation.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型提供了强制和强制性的文档。
- en: Types help catch errors.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型有助于捕获错误。
- en: –> They *will* help you. A *lot*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: –> 它们 *会* 对你有所帮助。非常 *多*。
- en: Structuring programs
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 程序结构化
- en: Data definitions
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据定义
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Data-first
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据优先
- en: The structure of your program is derived from the structure of your data.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您程序的结构是从数据的结构派生的。
- en: You have seen this in Fundamentals with the design recipe and with templates.
    In this class, we will see it extensively with type definitions and the (cases
    …) form. Types make this pervasive — we have to think about our data before our
    code.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您在基础课程中已经见过这个，设计配方和模板都有。在这门课上，我们将大量使用类型定义和（cases ...）形式。类型使这种普遍 —— 我们必须先考虑我们的数据，再考虑我们的代码。
- en: A language for describing data
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于描述数据的语言
- en: Instead of having an informal language for describing types in contract lines,
    and a more formal description of predicates in a `define-type` form, we will have
    a single, unified language for both of these. Having such a language means that
    we get to be more precise and more expressive (since the typed language covers
    cases that you would otherwise dismiss with some hand waving, like “a function”).
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将不再使用在合同行中描述类型的非正式语言，以及在 `define-type` 形式中描述谓词的更正式描述，我们将拥有一个统一的语言来描述这两者。拥有这样一种语言意味着我们可以更精确、更表达（因为类型语言涵盖了您否则会用一些挥手的手势来解决的情况，比如“一个函数”）。
- en: Why Typed Racket?
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么要使用 Typed Racket？
- en: Racket is the language we all know, and it has the benefits that we discussed
    earlier. Mainly, it is an excellent language for experimenting with programming
    languages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Racket 是我们都知道的语言，它具有我们之前讨论的好处。主要是，它是一个用于尝试编程语言的优秀语言。
- en: Typed Racket allows us to take our Racket programs and typecheck them, so we
    get the benefits of a statically typed language.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typed Racket 允许我们拿我们的 Racket 程序进行类型检查，因此我们可以得到静态类型语言的好处。
- en: Types are an important programming language feature; Typed Racket will help
    us understand them.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型是一个重要的编程语言特性；有类型的 Racket 将帮助我们理解它们。
- en: '[Also: the development of Typed Racket is happening here in Northeastern, and
    will benefit from your feedback.]'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[此外：Typed Racket 的开发正在东北进行，并将受益于您的反馈。]'
- en: How is Typed Racket different from Racket
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Typed Racket 如何与 Racket 不同
- en: Typed Racket will reject your program if there are type errors! This means that
    it does that at compile-time, *before* any code gets to run.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有类型错误，Typed Racket 将拒绝您的程序！这意味着它在编译时就这样做了，在任何代码运行之前 *之前* 。
- en: 'Typed Racket files start like this:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typed Racket 文件的开头是这样的：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'but we will use a variant of the Typed Racket language, which has a few additional
    constructs:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但我们将使用 Typed Racket 语言的一个变体，其中包含一些额外的构造：
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Typed Racket requires you to write the contracts on your functions.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typed Racket 要求您在函数上编写合同。
- en: 'Racket:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Racket：
- en: '[PRE3]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Typed Racket:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Typed Racket：
- en: '[PRE4]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[In the real Typed Racket you can also have the type annotations appear inside
    the definition:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在真实的 Typed Racket 中，您还可以在定义内部显示类型注释：'
- en: '[PRE5]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: but we will not use this form.]
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但我们将不使用这种形式。]
- en: As we’ve seen, Typed Racket uses types, not predicates, in `define-type`.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如我们所见，Typed Racket 在 `define-type` 中使用类型而不是谓词。
- en: '[PRE6]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: versus
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对比
- en: '[PRE7]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There are other differences, but these will suffice for now.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有其他区别，但这些就足够了。
- en: Examples
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: More interesting examples
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更有趣的例子
- en: 'Typed Racket is designed to be a language that is friendly to the kind of programs
    that people write in Racket. For example, it has unions:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Typed Racket 设计成一种对人们在 Racket 中编写的程序友好的语言。例如，它有 unions:'
- en: '[PRE9]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is not common in statically typed languages, which are usually limited
    to only *disjoint* unions. For example, in OCaml you’d write this definition:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这在静态类型语言中并不常见，通常仅限于 *不相交* 联合。例如，在 OCaml 中，您会写下这个定义：
- en: '[PRE10]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And use it with an explicit constructor:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并且使用一个显式的构造函数：
- en: '[PRE11]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that in the Typed Racket case, the language keeps track of information
    that is gathered via predicates — which is why it knows that one `x` is a String,
    and the other is a Number.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，在Typed Racket的情况下，语言通过谓词跟踪收集的信息，这就是为什么它知道一个`x`是一个字符串，另一个是一个数字。
- en: Typed Racket has a concept of subtypes — which is also something that most statically
    typed languages lack. In fact, the fact that it has (arbitrary) unions means that
    it must have subtypes too, since a type is always a subtype of a union that contains
    this type.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typed Racket具有子类型的概念，这也是大多数静态类型语言所缺乏的。事实上，它具有（任意）联合类型意味着它必须也有子类型，因为类型始终是包含该类型的联合类型的子类型。
- en: 'Another result of this feature is that there is an `Any` type that is the union
    of all other types. Note that you can always use this type since everything is
    in it — but it gives you the *least* information about a value. In other words,
    Typed Racket gives you a choice: *you* decide which type to use, one that is very
    restricted but has a lot of information about its values to a type that is very
    permissive but has almost no useful information. This is in contrast to other
    type system (HM systems) where there is always exactly one correct type.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个特性的另一个结果是有一个`Any`类型，它是所有其他类型的联合。请注意，您始终可以使用此类型，因为一切都在其中 - 但它为您提供了关于值的*最少*信息。换句话说，Typed
    Racket给了你一个选择：*你*决定使用哪种类型，一个非常受限制但对其值有很多信息的类型，或者一个非常宽容但几乎没有有用信息的类型。这与其他类型系统（HM系统）形成对比，那里总是只有一个正确的类型。
- en: 'To demonstrate, consider the identity function:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要演示，考虑恒等函数：
- en: '[PRE12]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You could use a type of `(: id : Integer -> Integer)` which is very restricted,
    but you know that the function always returns an integer value.'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '您可以使用`(: id : Integer -> Integer)`类型，这是非常受限制的，但您知道该函数始终返回整数值。'
- en: 'Or you can make it very permissive with a `(: id : Any -> Any)`, but then you
    know nothing about the result — in fact, `(+ 1 (id 2))` will throw a type error.
    It *does* return `2`, as expected, but the type checker doesn’t know the type
    of that `2`. If you wanted to use this type, you’d need to check that the result
    is a number, eg:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '或者您可以使用`(: id : Any -> Any)`使其非常宽容，但然后您对结果一无所知 - 实际上，`(+ 1 (id 2))`将抛出类型错误。它*确实*返回`2`，如预期的那样，但类型检查器不知道那个`2`的类型。如果您想使用此类型，您需要检查结果是否为数字，例如：'
- en: '[PRE13]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This means that for this particular function there is no good specific type
    that we can choose — but we can still create a polymorphic type:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着对于这个特定函数，我们无法选择一个好的具体类型 - 但我们仍然可以创���一个多态类型：
- en: '[PRE14]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: which allows any input type, and its output would be the same, preserving the
    same level of information that you had on its input.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许任何输入类型，并且其输出将是相同的，保留其输入上的相同信息水平。
- en: 'Another interesting thing to look at is the type of `error`: it’s a function
    that returns a type of `Nothing` — a type that is the same as an *empty* union:
    `(U)`. It’s a type that has no values in it — it fits `error` because it *is*
    a function that doesn’t return any value, in fact, it doesn’t return at all. In
    addition, it means that an `error` expression can be used anywhere you want because
    it is a subtype of anything at all.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个有趣的事情是看一下`error`的类型：它是一个返回`Nothing`类型的函数 - 一个与*空*联合相同的类型：`(U)`。它是一个没有值的类型
    - 它适合`error`，因为它*是*一个不返回任何值的函数，实际上，它根本不返回。此外，这意味着`error`表达式可以在任何您想要的地方使用，因为它是任何东西的子类型。
- en: 'An `else` clause in a `cond` expression is almost always needed, for example:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`cond`表达式中几乎总是需要一个`else`子句，例如：
- en: '[PRE15]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: (and if you think that the type checker should know what this is doing, then
    how about
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （如果你认为类型检查器应该知道这是在做什么，那么如何
- en: '[PRE16]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: or
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE17]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: for the last test?)
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于最后一个测试？
- en: 'In some rare cases you will run into one limitation of Typed Racket: it is
    difficult (that is: a generic solution is not known at the moment) to do the right
    inference when polymorphic functions are passed around to higher-order functions.
    For example:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些罕见情况下，您可能会遇到Typed Racket的一个限制：当多态函数传递给高阶函数时，很难（也就是说：目前不知道通用解决方案）进行正确的推断。例如：
- en: '[PRE18]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In such cases, we can use `inst` to *instantiate* a function with a polymorphic
    type to a given type — in this case, we can use it to make it treat `rest` as
    a function that is specific for numeric lists:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以使用`inst`来*实例化*一个具有多态类型的函数为给定类型 - 在这种情况下，我们可以使用它使`rest`被视为特定于数字列表的函数：
- en: '[PRE19]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In other rare cases, Typed Racket will infer a type that is not suitable for
    us — there is another form, `ann`, that allows us to specify a certain type. Using
    this in the `call` example is more verbose:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在其他罕见情况下，Typed Racket会推断出一个对我们不合适的类型 — 还有另一种形式，`ann`，允许我们指定某种类型。在`call`示例中使用这个更冗长：
- en: '[PRE20]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: However, these are going to be rare and will be mentioned explicitly whenever
    they’re needed.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，这些情况将会很少出现，并且在需要时会明确提到。
