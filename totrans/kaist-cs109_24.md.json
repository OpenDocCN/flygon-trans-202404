["```\nimport org.otfried.cs109ui.*\nimport org.otfried.cs109ui.ImageCanvas\nimport org.otfried.cs109.Color\nimport org.otfried.cs109.DrawStyle\n\nimport java.awt.image.BufferedImage\n\nfun draw(image: BufferedImage) {\n  // get ImageCanvas for the image\n  val g = ImageCanvas(image)\n\n  // clear background\n  g.clear(Color.WHITE)\n\n  // draw two filled circles\n  g.setColor(Color.RED)\n  g.drawCircle(50.0, 50.0, 20.0)  // FILL is the default\n  g.setColor(Color.ORANGE)\n  g.drawCircle(250.0, 400.0, 20.0)\n\n  // draw an unfilled circle with a pen of width 3\n  g.setColor(Color.MAGENTA)\n  g.setLineWidth(3.0)\n  g.drawCircle(415.0, 50.0, 15.0, DrawStyle.STROKE)\n\n  // draw a filled and an unfilled Rectangle\n  g.setColor(Color.CYAN)\n  g.drawRectangle(20.0, 400.0, 50.0, 20.0, DrawStyle.FILL)\n  g.drawRectangle(400.0, 400.0, 50.0, 20.0, DrawStyle.STROKE)\n\n  // draw a line\n  g.setLineWidth(1.0)   // reset to default\n  g.setColor(Color(0, 0, 255)) // same as Color.BLUE\n  g.beginShape()\n  g.moveTo(50.0, 50.0)\n  g.lineTo(250.0, 400.0)\n  g.drawShape(DrawStyle.STROKE)\n\n  // draw a non-convex quadrilateral:\n  g.save()              // save current coordinate system\n  g.translate(360.0, 260.0) // move origin to here\n  g.rotate(-30.0)           // rotate 30 degrees counter-clockwise\n  g.beginShape()\n  g.moveTo(0.0, 0.0)\n  g.lineTo(30.0, -40.0)\n  g.lineTo(60.0, 0.0)\n  g.lineTo(30.0, -100.0)\n  g.closePath()\n  g.drawShape()\n  g.restore()           // restore current coordinate system\n\n  // draw some text\n  g.setColor(Color(0, 128, 0)) // a darker green\n  g.setFont(20.0, \"Batang\")\n  g.drawText(\"Hello World!\", 155.0, 225.0)\n  g.drawText(\"\uc548\ub155 \ud558\uc138\uc694\", 175.0, 245.0)\n\n  // done with drawing\n  g.done()\n}\n\nfun main(args: Array<String>) {\n  setTitle(\"CS109 UI Test #1\")\n  val image = BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB)\n  draw(image)\n  show(image)\n}\n\n```", "```\n$ ktc uitest1.kt\n$ kt Uitest1Kt\n\n```", "```\nimport org.otfried.cs109ui.*\nimport org.otfried.cs109ui.ImageCanvas\nimport org.otfried.cs109.Color\nimport org.otfried.cs109.DrawStyle\n\nimport java.awt.image.BufferedImage\n\nfun draw(image: BufferedImage, color: Color) {\n  val g = ImageCanvas(image)\n  g.clear(Color.WHITE)\n  g.setColor(color)\n  g.drawRectangle(100.0, 100.0, 300.0, 300.0)\n  g.done()\n}\n\nfun showWait(image: BufferedImage, color: Color, ms: Int) {\n  draw(image, color)  // draw rectangle\n  show(image)\n  waitForMs(ms)       // wait ms milliseconds\n}\n\nfun main(args: Array<String>) {\n  setTitle(\"CS109 UI Blinking Rectangle\")\n\n  val image = BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB)\n\n  showWait(image, Color.WHITE, 500)  // 0.5 sec white picture\n  showWait(image, Color.RED, 1000)   // 1 sec red rectangle\n  showWait(image, Color.WHITE, 500)  // 0.5 sec white picture\n  showWait(image, Color.BLUE, 1000)  // 1 sec blue rectangle\n  showWait(image, Color.WHITE, 5000) // 5 secs white picture  \n\n  close() // close window and terminate program\n}\n\n```", "```\n$ ktc uitest2.kt\n$ kt Uitest2Kt\n\n```", "```\nimport org.otfried.cs109ui.*\nimport org.otfried.cs109ui.ImageCanvas\nimport org.otfried.cs109.Color\nimport org.otfried.cs109.DrawStyle\n\nimport java.awt.image.BufferedImage\n\nfun draw(image: BufferedImage, x: Double, y: Double) {\n  val g = ImageCanvas(image)\n  g.clear(Color.WHITE)\n  g.setColor(Color.RED)\n  g.drawCircle(x, y, 40.0)\n  g.done()\n}\n\nfun main(args: Array<String>) {\n  setTitle(\"CS109 UI Animation test\")\n\n  val image = BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB)\n\n  var x = 30.0\n  var y = 30.0\n  while (x < 500.0) {\n    draw(image, x, y)\n    x += 2\n    y += 1\n    show(image)\n    waitForMs(10)\n  }\n}\n\n```", "```\nimport org.otfried.cs109ui.*\nimport org.otfried.cs109ui.ImageCanvas\nimport org.otfried.cs109.Color\nimport org.otfried.cs109.DrawStyle\n\nimport java.awt.image.BufferedImage\n\nfun draw(image: BufferedImage, color: Color) {\n  val g = ImageCanvas(image)\n  g.clear(Color.WHITE)\n  g.setColor(color)\n  g.drawRectangle(100.0, 100.0, 300.0, 300.0)\n  g.done()\n}\n\nfun main(args: Array<String>) {\n  setTitle(\"CS109 UI Keyboard Input Test\")\n\n  val image = BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB)\n\n  draw(image, Color.RED)\n  show(image)\n\n  println(\"Now press some keys inside the CS109 UI windows\")\n  println(\"Pressing 'q' will terminate the program\")\n\n  while (true) {\n    val ch = waitKey()\n    println(\"Got character $ch\")\n    if (ch == 'q')\n      close()  // close window and terminate program\n  }\n}\n\n```", "```\n  showMessage(\"This is a message\")\n\n```", "```\n  val yesno: Boolean = askYesNo(\"Do you like this?\")\n\n```", "```\n  val name: String = inputString(\"What is your name?\")\n\n```"]