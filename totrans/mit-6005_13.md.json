["```\n /** Represents an immutable set of elements of type E. */\n    public interface Set<E> {\n        /** make an empty set */\nA       public Set();\n        /** @return true if this set contains e as a member */\n        public boolean contains(E e);\n        /** @return a set which is the union of this and that */\nB       public ArraySet<E> union(Set<E> that);    \n    }\n\n    /** Implementation of Set<E>. */\n    public class ArraySet<E> implements Set<E> {\n        /** make an empty set */\n        public ArraySet() { ... }\n        /** @return a set which is the union of this and that */\n        public ArraySet<E> union(Set<E> that) { ... }\n        /** add e to this set */\n        public void add(E e) { ... }\n    }\n```", "```\n/** An immutable rectangle. */\npublic interface ImmutableRectangle {\n    /** @return the width of this rectangle */\n    public int getWidth();\n    /** @return the height of this rectangle */\n    public int getHeight();\n}\n```", "```\n/** An immutable square. */\npublic class ImmutableSquare {\n    private final int side;\n    /** Make a new side x side square. */\n    public ImmutableSquare(int side) { this.side = side; }\n    /** @return the width of this square */\n    public int getWidth() { return side; }\n    /** @return the height of this square */\n    public int getHeight() { return side; }\n}\n```", "```\n/** A mutable rectangle. */\npublic interface MutableRectangle {\n    // ... same methods as above ...\n    /** Set this rectangle's dimensions to width x height. */\n    public void setSize(int width, int height);\n}\n```", "```\n/** A mutable square. */\npublic class MutableSquare {\n    private final int side;\n    // ... same constructor and methods as above ...\n    // TODO implement setSize(..)\n}\n```", "```\n/** Set this square's dimensions to width x height.\n *  Requires width = height. */\npublic void setSize(int width, int height) { ... }\n```", "```\n/** Set this square's dimensions to width x height.\n *  @throw BadSizeException if width != height */\npublic void setSize(int width, int height) throws BadSizeException { ... }\n```", "```\n/** If width = height, set this square's dimensions to width x height.\n *  Otherwise, new dimensions are unspecified. */\npublic void setSize(int width, int height) { ... }\n```", "```\n/** Set this square's dimensions to side x side. */\npublic void setSize(int side) { ... }\n```", "```\n/** MyString represents an immutable sequence of characters. */\npublic interface MyString { \n\n    // We'll skip this creator operation for now\n    // /** @param b a boolean value\n    //  *  @return string representation of b, either \"true\" or \"false\" */\n    // public static MyString valueOf(boolean b) { ... }\n\n    /** @return number of characters in this string */\n    public int length();\n\n    /** @param i character position (requires 0 <= i < string length)\n     *  @return character at position i */\n    public char charAt(int i);\n\n    /** Get the substring between start (inclusive) and end (exclusive).\n     *  @param start starting index\n     *  @param end ending index.  Requires 0 <= start <= end <= string length.\n     *  @return string consisting of charAt(start)...charAt(end-1) */\n    public MyString substring(int start, int end);\n}\n```", "```\npublic class SimpleMyString implements MyString {\n\n    private char[] a;\n\n    /* Create an uninitialized SimpleMyString. */\n    private SimpleMyString() {}\n\n    /** Create a string representation of b, either \"true\" or \"false\".\n     *  @param b a boolean value */\n    public SimpleMyString(boolean b) {\n        a = b ? new char[] { 't', 'r', 'u', 'e' } \n              : new char[] { 'f', 'a', 'l', 's', 'e' };\n    }\n\n    @Override public int length() { return a.length; }\n\n    @Override public char charAt(int i) { return a[i]; }\n\n    @Override public MyString substring(int start, int end) {\n        SimpleMyString that = new SimpleMyString();\n        that.a = new char[end - start];\n        System.arraycopy(this.a, start, that.a, 0, end - start);\n        return that;\n    }\n}\n```", "```\npublic class FastMyString implements MyString {\n\n    private char[] a;\n    private int start;\n    private int end;\n\n    /* Create an uninitialized FastMyString. */\n    private FastMyString() {}\n\n    /** Create a string representation of b, either \"true\" or \"false\".\n     *  @param b a boolean value */\n    public FastMyString(boolean b) {\n        a = b ? new char[] { 't', 'r', 'u', 'e' } \n              : new char[] { 'f', 'a', 'l', 's', 'e' };\n        start = 0;\n        end = a.length;\n    }\n\n    @Override public int length() { return end - start; }\n\n    @Override public char charAt(int i) { return a[start + i]; }\n\n    @Override public MyString substring(int start, int end) {\n        FastMyString that = new FastMyString();\n        that.a = this.a;\n        that.start = this.start + start;\n        that.end = this.start + end;\n        return that;\n    }\n}\n```", "```\nMyString s = new FastMyString(true);\nSystem.out.println(\"The first character is: \" + s.charAt(0));\n```", "```\nList<String> s = new ArrayList<String>();\n...\n```", "```\npublic interface MyString { \n\n    /** @param b a boolean value\n     *  @return string representation of b, either \"true\" or \"false\" */\n    public static MyString valueOf(boolean b) {\n        return new FastMyString(true);\n    }\n\n    // ...\n```", "```\nMyString s = MyString.valueOf(true);\nSystem.out.println(\"The first character is: \" + s.charAt(0));\n```", "```\n/** A mutable set.\n *  @param <E> type of elements in the set */\npublic interface Set<E> {\n```", "```\n // example creator operation\n    /** Make an empty set.\n     *  @param <E> type of elements in the set\n     *  @return a new set instance, initially empty */\n    public static <E> Set<E> make() { ... } \n```", "```\n // example observer operations\n\n    /** Get size of the set.\n     *  @return the number of elements in this set */\n    public int size();\n\n    /** Test for membership.\n     *  @param e an element\n     *  @return true iff this set contains e */\n    public boolean contains(E e);\n```", "```\n // example mutator operations\n\n    /** Modifies this set by adding e to the set.\n     *  @param e element to add */\n    public void add(E e);\n\n    /** Modifies this set by removing e, if found.\n     *  If e is not found in the set, has no effect.\n     *  @param e element to remove */\n    public void remove(E e);\n```", "```\nSet<String> set = new HashSet<String>();\n```", "```\nset = [Collections.unmodifiableSet](http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#unmodifiableSet-java.util.Set-)(set);\n```", "```\nset = [Collections.singleton](http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#singleton-T-)(\"glorp\");\n```", "```\nset = new Set<String>();\n```", "```\nList<String> list = set;\n```", "```\npublic class CharSet implements Set<Character>\n```", "```\npublic interface Set<E> {\n\n    // ...\n\n    /**\n     * Test for membership.\n     * @param e an element\n     * @return true iff this set contains e\n     */\n    public boolean contains(E e);\n\n    /**\n     * Modifies this set by adding e to the set.\n     * @param e element to add\n     */\n    public void add(E e);\n\n    // ...\n}\n```", "```\npublic class CharSet1 implements Set<Character> {\n\n    private String s = \"\";\n\n    // ...\n\n    @Override\n    public boolean contains(Character e) {\n        checkRep();\n        return s.indexOf(e) != -1;\n    }\n\n    @Override\n    public void add(Character e) {\n        if (!contains(e)) s += e;\n        checkRep();\n    }\n    // ...\n}\n```", "```\npublic interface Set<E> {\n\n    // ...\n\n```", "```\npublic class HashSet<E> implements Set<E> {\n\n    // ...\n\n```", "```\npublic class RatNum {\n    ...\n}\n```", "```\npublic interface RatNum {\n    ...\n}\n\npublic class IntFraction implements RatNum {\n    ...\n}\n```", "```\nprivate int numer;\nprivate int denom;\n```", "```\n//   denom > 0\n//   numer/denom is in reduced form\n```", "```\n//   represents the rational number numer / denom\n```", "```\n /**\n     * @param that another RatNum\n     * @return a RatNum equal to (this / that)\n     */\n```", "```\n public boolean isZero()\n```", "```\n return numer == 0;\n```"]