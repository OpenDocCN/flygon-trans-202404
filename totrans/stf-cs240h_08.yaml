- en: Pipes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pipes
- en: Gabriel Gonzalez
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gabriel Gonzalez
- en: May 1, 2014 - CS240H
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2014年5月1日 - CS240H
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: '**[The problem `pipes` solves]**'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[`pipes`解决的问题]**'
- en: How `pipes` works
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes`如何工作'
- en: Theory behind `pipes`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes`背后的理论'
- en: Tour of the `pipes` API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes` API之旅'
- en: The problem
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Does not work on infinite lists
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不适用于无限列表
- en: You can't consume any results until everything has been processed
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有内容被处理之前，你无法消费任何结果
- en: You have to run the entire computation, even if you don't need every result
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使你不需要每个结果，你也必须运行整个计算
- en: This wastes memory by buffering every result
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这通过缓冲每个结果浪费内存
- en: 'Non-solution: lazy IO'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非解决方案：惰性IO
- en: Only works for `IO`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅适用于`IO`
- en: Only works for effectful sources, not effectful sinks or transformations
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅适用于有副作用的源，不适用于有副作用的接收器或转换
- en: Invalidates equational reasoning by tying effects to evaluation order
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将效果与评估顺序联系起来，使等式推理无效
- en: Admission of defeat ("Monads are too awkward")
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承认失败（“Monad太笨拙了”）
- en: '`pipes` - a coroutine library'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`pipes` - 一个协程库'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Example
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Questions?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题？
- en: Overview
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: The problem `pipes` solves
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes`解决的问题'
- en: '**[How `pipes` works]**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[`pipes`如何工作]**'
- en: Theory behind `pipes`
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes`背后的理论'
- en: Tour of the `pipes` API
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes` API之旅'
- en: '`Producer`'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Producer`'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`stdinLn`'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`stdinLn`'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`for`'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`for`'
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`runEffect`'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`runEffect`'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Questions?
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题？
- en: Overview
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: The problem `pipes` solves
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes`解决的问题'
- en: How `pipes` works
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes`如何工作'
- en: '**[Theory behind `pipes`]**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[`pipes`背后的理论]**'
- en: Tour of the `pipes` API
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes` API之旅'
- en: What makes Haskell unique?
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么使Haskell独特？
- en: Design patterns are inspired by category theory
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计模式受范畴论启发
- en: 'Theory is culturally enshrined in type classes:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理论在类型类中得到文化上的奉献：
- en: '`Monoid`, `Category`, `Applicative`, `Monad`, ...'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Monoid`，`Category`，`Applicative`，`Monad`，...'
- en: '**Goal:** reduce software complexity'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标：**减少软件复杂性'
- en: The problem
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: '![](../Images/445bc2979c85c4ae25ee0ace2d831bcb.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/445bc2979c85c4ae25ee0ace2d831bcb.jpg)'
- en: How do we reduce complexity?
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何减少复杂性？
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`yield`'
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`yield`'
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'A `Producer` that `yield`s exactly one element:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Producer`，`yield`恰好一个元素：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'A `Producer` that `yield`s more than one element:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Producer`，`yield`多于一个元素：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A `Producer` that `yield`s less than one element:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Producer`，`yield`少于一个元素：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Example
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Primitive vs. Derived
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始 vs. 派生
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`(>>)` and `return ()` form a Monoid'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`(>>)`和`return ()`形成一个Monoid'
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Associativity:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 结合性：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Identity:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 身份：
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Categories generalize Monoids
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类别概括了Monoids
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`(>=>)` and `return` form a Category'
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`(>=>)`和`return`形成一个Category'
- en: '[PRE26]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Associativity:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 结合性：
- en: '[PRE27]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Identity:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 身份：
- en: '[PRE28]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Monad Laws
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Monad定律
- en: 'Associativity:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 结合性：
- en: '[PRE29]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Left identity:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 左身份：
- en: '[PRE30]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`(~>)` and `yield` form a Category'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`(~>)`和`yield`形成一个Category'
- en: '[PRE32]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Associativity:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 结合性：
- en: '[PRE33]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Identity:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 身份：
- en: '[PRE34]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`for` loop laws - Part 1'
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`for`循环定律 - 第1部分'
- en: '[PRE35]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`for` loop laws - Part 2'
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`for`循环定律 - 第2部分'
- en: '[PRE39]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Example
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE42]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Reduce the complexity of coroutines
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减少协程的复杂性
- en: '[PRE43]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Questions?
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题？
- en: Overview
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: The problem `pipes` solves
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes`解决的问题'
- en: How `pipes` works
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes`如何工作'
- en: Theory behind `pipes`
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipes`背后的理论'
- en: '**[Tour of the `pipes` API]**'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[`pipes` API之旅]**'
- en: '`Consumer`'
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Consumer`'
- en: A sink that changes over time
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 随时间变化的接收器
- en: '[PRE44]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Example
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE45]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`Consumer`'
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Consumer`'
- en: '[PRE46]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '`await`'
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`await`'
- en: '[PRE47]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'A `Consumer` that `await`s more than one element:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Consumer`，`await`多于一个元素：
- en: '[PRE48]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'A `Consumer` that `await`s zero elements:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Consumer`，`await`零个元素：
- en: '[PRE49]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Example
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE50]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Primitive vs. Derived
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始 vs. 派生
- en: '[PRE51]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '`(>~)`'
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`(>~)`'
- en: '[PRE53]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '`(>~)` and `await` form a Category'
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`(>~)`和`await`形成一个Category'
- en: '[PRE55]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Associativity:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 结合性：
- en: '[PRE56]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Identity:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 身份：
- en: '[PRE57]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Questions?
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题？
- en: Mix `Producer`s and `Consumer`s using `(>->)`
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`(>->)`混合`Producer`和`Consumer`
- en: '[PRE58]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '`Pipe`'
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Pipe`'
- en: '[PRE61]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Example
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE64]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Behavior switching
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行为切换
- en: '[PRE65]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: What the types? - Part 1
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型是什么？- 第1部分
- en: What is the deal?
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 怎么回事？
- en: '[PRE66]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: What the types? - Part 2
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型是什么？- 第2部分
- en: '[PRE69]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Polymorphism
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多态性
- en: '`Consumer` is special case of `Pipe`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`Consumer`是`Pipe`的特例'
- en: '[PRE70]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '`Producer` is (basically) a special case of `Pipe`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`Producer`基本上是`Pipe`的特例'
- en: '[PRE71]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This is "parametric polymorphism" (i.e. generics)
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是“参数多态性”（即泛型）
- en: This is *not* ad-hoc polymorphism (i.e. type classes)
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这*不是*特设多态（即类型类）
- en: '`(>->)` and `cat` form a `Category`'
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`(>->)`和`cat`形成一个`Category`'
- en: '[PRE72]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Associativity:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 结合性：
- en: '[PRE73]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Identity:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 身份：
- en: '[PRE74]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: API inspired by category theory
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 受范畴论启发的API
- en: '| Composition | Identity |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 组合 | 身份 |'
- en: '| :-: | :-: |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| :-: | :-: |'
- en: '| `(>=>)` | `return` |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `(>=>)` | `return` |'
- en: '| `(~>)` | `yield` |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `(~>)` | `yield` |'
- en: '| `(>~)` | `await` |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `(>~)` | `await` |'
- en: '| `(>->)` | `cat` |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `(>->)` | `cat` |'
- en: 'This is just the beginning:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是个开始：
- en: '[PRE75]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '**Goal:** Categorical semantics'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标：**范畴语义'
- en: Conclusion
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Composability keeps software architectures flat
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可组合性使软件架构保持扁平
- en: Small amounts of theory go a very long way
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 少量理论可以走很长的路
- en: 'Exercise #1'
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '练习 #1'
- en: Implement `takeWhile`
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`takeWhile`
- en: '[PRE76]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Solution #1'
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '解决方案 #1'
- en: '[PRE78]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Exercise #2'
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '练习 #2'
- en: Implement `map`
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`map`
- en: '[PRE79]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Solution #2'
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '解决方案 #2'
- en: '[PRE81]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Exercise #3'
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '练习 #3'
- en: What does `mystery` do?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`mystery`是做什么的？'
- en: '[PRE83]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Solution #3'
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '解决方案 #3'
- en: '[PRE84]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Exercise #4'
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '练习 #4'
- en: What does `mystery` do?
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`mystery`是做什么的？'
- en: '[PRE86]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Solution #4'
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '解决方案 #4'
- en: '[PRE87]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Exercise #5'
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '练习 #5'
- en: Implement `grep`
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`grep`
- en: '[PRE88]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Solution #5'
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '解决方案 #5'
- en: '[PRE90]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
