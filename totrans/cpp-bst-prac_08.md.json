["```\n// some header file\nclass MyClass;\n\nvoid doSomething(const MyClass &); \n```", "```\n// some header file\n#include \"MyClass.hpp\"\n\nvoid doSomething(const MyClass &); \n```", "```\ntemplate<typename T> class MyTemplatedType; \n```", "```\n// This\nstd::vector<ModelObject> mos{mo1, mo2};\n\n// -or-\nauto mos = std::vector<ModelObject>{mo1, mo2}; \n```", "```\n// Don't do this\nstd::vector<ModelObject> mos;\nmos.push_back(mo1);\nmos.push_back(mo2); \n```", "```\n// Instead of\nauto mo1 = getSomeModelObject();\nauto mo2 = getAnotherModelObject();\n\ndoSomething(mo1, mo2); \n```", "```\n// consider:\n\ndoSomething(getSomeModelObject(), getAnotherModelObject()); \n```", "```\nModelObject(ModelObject &&) = default; \n```", "```\n// Bad Idea\nstd::string somevalue;\n\nif (caseA) {\n  somevalue = \"Value A\";\n} else {\n  somevalue = \"Value B\";\n} \n```", "```\n// Better Idea\nconst std::string somevalue = caseA ? \"Value A\" : \"Value B\"; \n```", "```\n// Bad Idea\nstd::string somevalue;\n\nif (caseA) {\n  somevalue = \"Value A\";\n} else if(caseB) {\n  somevalue = \"Value B\";\n} else {\n  somevalue = \"Value C\";\n} \n```", "```\n// Better Idea\nconst std::string somevalue = [&](){\n    if (caseA) {\n      return \"Value A\";\n    } else if (caseB) {\n      return \"Value B\";\n    } else {\n      return \"Value C\";\n    }\n  }(); \n```", "```\nstd::shared_ptr<ModelObject_Impl>(new ModelObject_Impl());\n\n// should become\nstd::make_shared<ModelObject_Impl>(); // (it's also more readable and concise) \n```", "```\nstd::make_unique<ModelObject_Impl>(); \n```", "```\nstd::unique_ptr<ModelObject_Impl> factory();\n\nauto shared = std::shared_ptr<ModelObject_Impl>(factory()); \n```", "```\n// Good Idea\nfor (int i = 0; i < 15; ++i)\n{\n  MyObject obj(i);\n  // do something with obj\n}\n\n// Bad Idea\nMyObject obj; // meaningless object initialization\nfor (int i = 0; i < 15; ++i)\n{\n  obj = MyObject(i); // unnecessary assignment operation\n  // do something with obj\n}\n// obj is still taking up memory for no reason \n```", "```\n// Bad Idea\nfor (int i = 0; i < 15; i++)\n{\n  std::cout << i << '\\n';\n}\n\n// Good Idea\nfor (int i = 0; i < 15; ++i)\n{\n  std::cout << i << '\\n';\n} \n```", "```\n// Bad Idea\nstd::cout << someThing() << \"\\n\";\n\n// Good Idea\nstd::cout << someThing() << '\\n'; \n```", "```\n// Bad Idea\nauto f = std::bind(&my_function, \"hello\", std::placeholders::_1);\nf(\"world\");\n\n// Good Idea\nauto f = [](const std::string &s) { return my_function(\"hello\", s); };\nf(\"world\"); \n```"]