- en: Unit Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Exercise 1: Test a Python function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function **main()** in the module **word_counter.py** calculates the number
    of words in a text body.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, the following sentence contains **three** words:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Your task is to prove that the **TextCorpus** class calculates the number of
    words in the sentence correctly with **three**.
  prefs: []
  type: TYPE_NORMAL
- en: Run the example test in **test_unit_test.py** with
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 2: Test proves if code is broken'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The test in the module **test_failing_code.py** fails, because there is a bug
    in the function **word_counter.average_word_length()**. In the sentence
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The words are **four, two,** and **seven** characters long. This gives an average
    of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Fix the code in `test_broken_code.py`, so that the test passes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3: Code proves if tests are broken'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The test in the module **test_broken_test.py** fails, because there is a bug
    in the test file.
  prefs: []
  type: TYPE_NORMAL
- en: Your task is to fix the test, so that the test passes. Use the example in **test_broken_test.py**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4: Test border cases'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'High quality tests cover many different situations. The most common situations
    for the program **word_counter.py** include:'
  prefs: []
  type: TYPE_NORMAL
- en: '| test case | description | example input | expected output |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| empty | input is valid, but empty | "" | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| minimal | smallest reasonable input | "whale" | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| typical | representative input | "whale eats captain" | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| invalid | input is supposed to fail | 777 | *Exception raised* |'
  prefs: []
  type: TYPE_TB
- en: '| maximum | largest reasonable input | *Melville''s entire book* | *more than
    200000* |'
  prefs: []
  type: TYPE_TB
- en: '| sanity | program recycles its own output | *TextBody A created from another
    TextBody B* | *A equals B* |'
  prefs: []
  type: TYPE_TB
- en: '| nasty | difficult example | "That #~&%* program still doesn''t work!" | 6
    |'
  prefs: []
  type: TYPE_TB
- en: Your task is to make all tests in **test_border_cases.py** pass.
  prefs: []
  type: TYPE_NORMAL
