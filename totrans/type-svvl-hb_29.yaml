- en: import、export、require
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/reference/import-export-require](https://typescriptbook.jp/reference/import-export-require)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 実務でアプリケーションを作る場合、複数のJavaScriptファイルを組み合わせて、ひとつのアプリケーションを成すことが多いです。いわゆるモジュール指向の開発です。ここではJavaScriptとTypeScriptでのモジュールと、モジュール同士を組み合わせるための`import`、`export`、`require`について説明します。
  prefs: []
  type: TYPE_NORMAL
- en: スクリプトとモジュール[​](#スクリプトとモジュール "スクリプトとモジュール への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScriptのファイルは大きく分けて、スクリプトとモジュールに分類されます。スクリプトは普通のJavaScriptファイルです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: モジュールは、`import`または`export`を1つ以上含むJavaScriptファイルを言います。`import`は他のモジュールから変数、関数、クラスなどインポートするキーワードです。`export`は他のモジュールに変数、関数、クラスなどを公開するためのキーワードです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: したがって、`import`や`export`が無かったスクリプトファイルでも、後から`import`や`export`を追加すると、それはモジュールファイルになります。
  prefs: []
  type: TYPE_NORMAL
- en: 値の公開と非公開[​](#値の公開と非公開 "値の公開と非公開 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScriptのモジュールは、明示的に`export`をつけた値だけが公開され、他のモジュールから参照できます。たとえば、次の例の`publicValue`は他のモジュールから利用できます。一方、`privateValue`は外部からは利用できません。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: JavaScriptのモジュールでは、デフォルトで変数や関数などは非公開になるわけです。Javaなどの他の言語では、モジュール(パッケージ)のメンバーがデフォルトで公開になり、非公開にしたいものには`private`修飾子をつける言語があります。そういった言語と比べると、JavaScriptは基本方針が真逆なので注意が必要です。
  prefs: []
  type: TYPE_NORMAL
- en: モジュールは常にstrict mode[​](#モジュールは常にstrict-mode "モジュールは常にstrict mode への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: モジュールのJavaScriptは常にstrict modeになります。strict modeでは、さまざまな危険なコードの書き方が禁止されます。たとえば、未定義の変数への代入はエラーになります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: モジュールは`import`時に一度だけ評価される[​](#モジュールはimport時に一度だけ評価される "モジュールはimport時に一度だけ評価される
    への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: モジュールのコードが評価されるのは、1回目の`import`のときだけです。2回目以降の`import`では、最初に評価した内容が使われます。言い換えると、モジュールは初回`import`でキャッシュされるとも言えますし、モジュールはいわゆるシングルトン(singleton)的なものとも言えます。
  prefs: []
  type: TYPE_NORMAL
- en: たとえば、`module.js`というモジュールを3回読み込んだとしても、この`module.js`が評価されるのは最初の1回目だけです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: モジュールの歴史的経緯[​](#モジュールの歴史的経緯 "モジュールの歴史的経緯 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: かつてのJavaScript[​](#かつてのjavascript "かつてのJavaScript への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: かつてJavaScriptがブラウザでのみ動いていた時代は、モジュール分割と言う考え自体はあったもののそれはあくまでもブラウザ上、さらには`html`での管理となっていました。よく使われていた`jQuery`というパッケージがあるとすれば、それは次のように`html`に書く必要がありました。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: もし`jQuery`に依存するパッケージがあるとすれば、`jQuery`の宣言より下に書く必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: パッケージが少なければまだしも、増えてくると依存関係が複雑になります。もしも読み込む順番を間違えるとその`html`では動作しなくなるでしょう。
  prefs: []
  type: TYPE_NORMAL
- en: Node.jsが登場してから[​](#nodejsが登場してから "Node.jsが登場してから への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`npm`が登場してから、使いたいパッケージを持ってきてそのまま使うことが主流になりました。'
  prefs: []
  type: TYPE_NORMAL
- en: '`CommonJS`[​](#commonjs "commonjs への直接リンク")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`require()`[​](#require "require への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Node.jsでは現在でも主流の他の`.js`ファイル(TypeScriptでは`.ts`も)を読み込む機能です。基本は次の構文です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: これは、パッケージの`package1`の内容を定数`package1`に持ってくることを意味しています。このとき`package1`は(組み込みライブラリでなければ)現在のプロジェクトの`node_modules`というディレクトリに存在する必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: 自分で作った他の`.js, .ts`ファイルを読み込むこともできます。呼び出すファイルから見た、読み込みたいファイルの位置を**相対パス**で書きます。たとえ同じ階層にあっても相対パスで書く必要があります。このとき`.js,
    .json`とTypeScriptなら加えて`.ts`を省略することができます。TypeScriptでの開発においては最終的にJavaScriptにコンパイルされることを考慮すると書かないほうが無難です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`.js`を`.ts`と同じ場所に出力するようにしているとTypeScriptにとって同じ名前の読み込ことができるファイルがふたつ存在することになります。このときTypeScriptは`.js`を優先して読み込むので注意してください。いくらTypeScriptのコードを変更しても変更が適用されていないようであればこの問題の可能性があります。'
  prefs: []
  type: TYPE_NORMAL
- en: また指定したパスがディレクトリで、その中に`index.js(index.ts)`があれば、ディレクトリの名前まで書けば`index.js(index.ts)`を読み込んでくれます。
  prefs: []
  type: TYPE_NORMAL
- en: '`module.exports`[​](#moduleexports "moduleexports への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 他のファイルを読む込むためにはそのファイルは何かを出力している必要があります。そのために使うのがこの構文です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: このような`.js`のファイルがあれば同じ階層で読み込みたい時は次のようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: このとき、読み込んだ内容を受ける定数`increment`はこの名前である必要はなく変更が可能です。
  prefs: []
  type: TYPE_NORMAL
- en: この`module.exports`はひとつのファイルでいくらでも書くことができますが、適用されるのは最後のもののみです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`exports`[​](#exports "exports への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`module.exports`だと良くも悪くも出力しているものの名前を変更できてしまいます。それを避けたい時はこの`exports`を使用します。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 読み込み側では次のようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 分割代入を使うこともできます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: こちらは`increment`という名前で使用する必要があります。他のファイルに同じ名前のものがあり、名前を変更する必要がある時は、分割代入のときと同じように名前を変更することができます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`ES Module`[​](#es-module "es-module への直接リンク")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 主にフロントエンド(ブラウザ)で採用されているファイルの読み込み方法です。`ES6`で追加された機能のため、あまりにも古いブラウザでは動作しません。
  prefs: []
  type: TYPE_NORMAL
- en: '`import`[​](#import "import への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`require()`と同じく他の`.js, .ts`ファイルを読み込む機能ですが、`require()`はファイル内のどこにでも書くことができる一方で`import`は**必ずファイルの一番上に書く必要があります**。'
  prefs: []
  type: TYPE_NORMAL
- en: なお、書き方が2通りあります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 使い方に若干差がありますので以下で説明します。
  prefs: []
  type: TYPE_NORMAL
- en: '`export default`[​](#export-default "export-default への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`module.exports`に対応するものです。`module.exports`と異なりひとつのファイルはひとつの`export default`しか許されていなく複数書くと動作しません。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: この`.js`のファイルは次のようにして読み込みます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '`export`[​](#export "export への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`exports`に相当するものです。書き方が2通りあります。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: なお1番目の表記は定数宣言の`const`を使っていますが`let`を使っても読み込み側から定義されている`increment`を書き換えることはできません。
  prefs: []
  type: TYPE_NORMAL
- en: 次のようにして読み込みます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 1番目の場合の`import`で名前を変更するときは、`require`のとき(分割代入)と異なり`as`という表記を使って変更します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '`import()`[​](#import-1 "import-1 への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ES Module`では`import`をファイルの先頭に書く必要があります。これは動的に読み込むファイルを切り替えられないことを意味します。この`import()`はその代替手段にあたります。'
  prefs: []
  type: TYPE_NORMAL
- en: '`require()`と異なる点としては`import()`はモジュールの読み込みを非同期で行います。つまり`Promise`を返します。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Node.jsで`ES Module`を使う[​](#nodejsでes-moduleを使う "nodejsでes-moduleを使う への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 先述のとおりNode.jsでは`CommonJS`が長く使われていますが、`13.2.0`でついに正式に`ES Module`もサポートされました。
  prefs: []
  type: TYPE_NORMAL
- en: しかしながら、あくまでもNode.jsは`CommonJS`で動作することが前提なので`ES Module`を使いたい時はすこし準備が必要になります。
  prefs: []
  type: TYPE_NORMAL
- en: '`.mjs`[​](#mjs "mjs への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ES Module`として動作させたいJavaScriptのファイルをすべて`.mjs`の拡張子に変更します。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 読み込み側は以下です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '`import`で使うファイルの**拡張子が省略できない**ことに注意してください。'
  prefs: []
  type: TYPE_NORMAL
- en: '`"type": "module"`[​](#type-module "type-module への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`package.json`にこの記述を追加するとパッケージ全体が`ES Module`をサポートします。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'このようにすることで拡張子を`.mjs`に変更しなくてもそのまま`.js`で`ES Module`を使えるようになります。なお`"type": "module"`の省略時は`"type":
    "commonjs"`と指定されたとみなされます。これは今までどおりのNode.jsです。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '`.js`ではありますが**読み込む時は拡張子を省略できなくなる**ことに注意してください。'
  prefs: []
  type: TYPE_NORMAL
- en: '`.cjs`[​](#cjs "cjs への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`CommonJS`で書かれたJavaScriptを読み込みたくなったときは`CommonJS`で書かれているファイルをすべて`.cjs`に変更する必要があります。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 読み込み側は次のようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '`ES Module`には`require()`がなく、一手間加えて作り出す必要があります。'
  prefs: []
  type: TYPE_NORMAL
- en: '`"type": "module"`の問題点[​](#type-moduleの問題点 "type-moduleの問題点 への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'すべてを`ES Module`として読み込むこの設定は、多くのパッケージがまだ`"type": "module"`に対応していない現状としては非常に使いづらいです。'
  prefs: []
  type: TYPE_NORMAL
- en: 'たとえば`linter`やテストといった各種開発補助のパッケージの設定ファイルを`.js`で書いていると動作しなくなってしまいます。かといってこれらを`.cjs`に書き換えても、パッケージが設定ファイルの読み込み規則に`.cjs`が含んでいなければそれらのパッケージは設定ファイルがないと見なします。そのため`"type":
    "module"`は現段階では扱いづらいものとなっています。'
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptでは[​](#typescriptでは "TypeScriptでは への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptでは一般的に`ES Module`方式に則った記法で書きます。これは`CommonJS`を使用しないというわけではなく、コンパイル時の設定で`CommonJS,
    ES Module`のどちらにも対応した形式で出力できるのであまり問題はありません。ここまでの経緯などはTypeScriptでは意識することがあまりないでしょう。
  prefs: []
  type: TYPE_NORMAL
- en: また、執筆時(2021/01)ではTypeScriptのコンパイルは`.js`のみを出力でき`.cjs, .mjs`を出力する設定はありません。ブラウザでもサーバーでも使えるJavaScriptを出力したい場合は一手間加える必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: 出力の方法に関してはtsconfig.jsonのページに説明がありますのでそちらをご覧ください。
  prefs: []
  type: TYPE_NORMAL
- en: '[## 📄️ tsconfig.jsonを設定する'
  prefs: []
  type: TYPE_NORMAL
- en: Node.jsはそれ自身ではTypeScriptをサポートしているわけではないため、TypeScriptの導入をする時はTypeScriptの設定ファイルであるtsconfig.jsonが必要です。](/reference/tsconfig/tsconfig.json-settings)
  prefs: []
  type: TYPE_NORMAL
- en: '`require? import?`[​](#require-import "require-import への直接リンク")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ブラウザ用、サーバー用の用途で使い分けてください。ブラウザ用であれば`ES Module`を、サーバー用であれば`CommonJS`が無難な選択肢になります。どちらでも使えるユニバーサルなパッケージであればDual
    Packageを目指すのもよいでしょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[## 📄️ デュアルパッケージ開発者のためのtsconfig'
  prefs: []
  type: TYPE_NORMAL
- en: フロントエンドでもバックエンドでもTypeScriptこれ一本！Universal JSという考えがあります。確かにフロントエンドを動的にしたいのであればほぼ避けて通れないJavaScriptと、バックエンドでも使えるようになったJavaScriptで同じコードを使いまわせれば保守の観点でも異なる言語を触る必要がなくなり、統一言語としての価値が大いにあります。](/reference/advanced-topics/tsconfig-for-dual-package-developers)
  prefs: []
  type: TYPE_NORMAL
- en: '`default export? named export?`[​](#default-export-named-export "default-export-named-export
    への直接リンク")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`module.exports`と`export default`はdefault exportと呼ばれ、`exports`と`export`はnamed
    exportと呼ばれています。どちらも長所と短所があり、たびたび議論になる話題です。どちらか一方を使うように統一するコーディングガイドを持っている企業もあるようですが、どちらかが極端に多いというわけでもないので好みの範疇です。'
  prefs: []
  type: TYPE_NORMAL
- en: default export[​](#default-export "default export への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: default exportのPros[​](#default-exportのpros "default exportのPros への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`import`する時に名前を変えることができる'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: そのファイルが他の`export`に比べ何をもっとも提供したいのかがわかる
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: default exportのCons[​](#default-exportのcons "default exportのCons への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: エディター、IDEによっては入力補完が効きづらい
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 再エクスポートの際に名前をつける必要がある
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: named export[​](#named-export "named export への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: named exportのPros[​](#named-exportのpros "named exportのPros への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: エディター、IDEによる入力補完が効く
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ひとつのファイルから複数`export`できる
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: named exportのCons[​](#named-exportのcons "named exportのCons への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: (名前の変更はできるものの)基本的に決まった名前で`import`して使う必要がある
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`export`しているファイルが名前を変更すると動作しなくなる'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ここで挙がっている**名前を変えることができる**についてはいろいろな意見があります。
  prefs: []
  type: TYPE_NORMAL
- en: ファイルが提供したいもの[​](#ファイルが提供したいもの "ファイルが提供したいもの への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: たとえばある国の会計ソフトウェアを作っていたとして、その国の消費税が8%だったとします。そのときのあるファイルの`export`はこのようになっていました。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: もちろん呼び出し側はそのまま使うことができます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: ここで、ある国が消費税を10%に変更したとします。このときこのシステムでは`taxIncluded.ts`を変更すればこと足ります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: この変更をこのファイル以外は知る必要がありませんし、知ることができません。
  prefs: []
  type: TYPE_NORMAL
- en: 今回の問題点[​](#今回の問題点 "今回の問題点 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: システムが**ある年月日当時の消税率**を元に金額の計算を多用するようなものだとこの暗黙の税率変更は問題になります。過去の金額もすべて現在の消費税率である10%で計算されてしまうからです。
  prefs: []
  type: TYPE_NORMAL
- en: named exportだと[​](#named-exportだと "named exportだと への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: named exportであれば`export`する名称を変更することで呼び出し側の変更を強制させることができます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 税率が10%に変われば次のようにします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 名前を変更したため、呼び出し元も名前の変更が強制されます。これはたとえ`as`を使って名前を変更していたとしても同じく変更する必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: ロジックが変わったこととそれによる修正を強制したいのであればnamed exportを使う方がわかりやすく、そしてエディター、IDEを通して見つけやすくなる利点があります。逆に、公開するパッケージのようにAPIが一貫して明瞭ならばdefault
    exportも価値があります。
  prefs: []
  type: TYPE_NORMAL
