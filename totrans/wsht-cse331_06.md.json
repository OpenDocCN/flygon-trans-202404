["```\n/**\n * This class represents the mathematical concept of a line segment.\n *\n * Specification fields:\n *  @specfield start-point : point // The starting point of the line\n *  @specfield end-point   : point // The ending point of the line\n *\n * Derived specification fields:\n *  @derivedfield length : real // length = sqrt((start-point.x - end-point.x)^2 + (start-point.y - end-point.y)^2)\n *                              // The length of the line\n *\n * Abstract Invariant:\n *  A line's start-point must be different from its end-point.\n */\npublic class Line {\n\n  ... // Fields not shown.\n\n /**\n  * @requires p != null && ! p.equals(start-point)\n  * @modifies this\n  * @effects Sets end-point to p\n  */\n  public void setEndPoint(Point p) {\n    ...\n  }\n\n  ...\n\n}\n\n```", "```\n/**\n * Represents an appointment for a meeting.\n * @specfield date : Date         // The time\n * @specfield room : integer      // The room number of the meeting's location\n * @specfield with : Set<Person>  // Whom the appointment is with\n */\n class Meeting {\n\n```", "```\n/**\n * Represents a square.\n * @specfield length : int // The length of the square's sides\n * @derivedfield area : int // area = length^2\\. The area of the square\n *\n * Abstract Invariant:\n *  length > 0\n */\nclass Square {...}\n\n```", "```\n/**\n * Represents a square.\n * @specfield length : int // The length of the square's sides\n * @derivedfield area : int // area = length^2\\. The area of the square\n *\n * Abstract Invariant:\n *  length > 0\n */\nclass Square {\n\n  /** The length of the square's sides. */\n  int size;\n\n  // Abstraction Function:\n  //  AF(r) = a square, s, with s.length = r.size.\n  //\n  // Representation Invariant:\n  //  size > 0\n\n  /** Creates a new Square with length = len.\n   * @requires len > 0\n   * @effects a new Square s with s.length = len\n   */\n  public Square(int len) {\n    if (len <= 0) throw new IllegalArgumentException(len + \" < 0\");\n    this.size = len;\n  }\n\n  /** Returns the difference in area between this and s.\n   * @return this.area - s.area\n   */\n  public int differenceInArea(Square s) {\n    return (this.size*this.size) - (s.size*s.size);\n  }\n\n  /** Sets this.length to len.\n   * @requires len > 0\n   * @effects sets this.length to len\n   */\n   public void setLength(int len) {\n     if (len <= 0) throw new IllegalArgumentException(len + \" < 0\");\n     size = len;\n   }\n}\n\n```", "```\n/**\n * @requires l.start-point is equal to this.end-point && l != null\n * @return a line segment that is equal to this + l; that is, l appended to this\n */\npublic Line add(Line l) {...}\n\n```", "```\n/**\n * @return true is this.length > l.length\n */\npublic boolean longer(Line l) {...}\n\n```"]