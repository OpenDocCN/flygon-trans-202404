["```\ncp ~cs61as/lib/racket1.rkt . \n```", "```\n;; Load Racket-1 file\n(require \"racket1.rkt\")\n\n;; Start interpreter\n(racket-1) \n```", "```\nRacket> ((lambda (x) (* x x)) (- 2 (* 4 3)))\n100 \n```", "```\n(define (racket-1)\n    (newline)\n    (display \"Racket-1: \")\n    (flush-output)\n    (print (eval-1 (read)))\n    (newline)\n    (racket-1)\n) \n```", "```\n(define (eval-1 exp)\n  (cond ((constant? exp) exp)\n        ((symbol? exp) (eval exp))      ; use underlying Racket's EVAL\n        ((quote-exp? exp) (cadr exp))\n        ((if-exp? exp)\n         (if (eval-1 (cadr exp))\n             (eval-1 (caddr exp))\n             (eval-1 (cadddr exp))))\n        ((lambda-exp? exp) exp)\n        ((pair? exp) (apply-1 (eval-1 (car exp))      ; eval the operator\n                              (map eval-1 (cdr exp))))\n        (else (error \"bad expr: \" exp)))) \n```", "```\n(define (apply-1 proc args)\n  (cond [(procedure? proc)      ; use underlying Racket's APPLY\n          (apply proc args)]\n        [(lambda-exp? proc)\n          (eval-1 (substitute (caddr proc)   ; the body\n                              (cadr proc)    ; the formal parameters\n                              args           ; the actual arguments\n                              '()))]         ; bound-vars\n        [else (error \"bad proc: \" proc)])) \n```", "```\n     ((lambda (x) (+ x 3)) 5) \n    ```", "```\n    Racket-1: \n    ((lambda (f n)  ; this lambda is defining MAP \n        ((lambda (map) (map map f n)) \n        (lambda (map f n) \n            (if (null? n) \n                '() \n                (cons (f (car n)) (map map f (cdr n))) )) )) ;end of lambda defining MAP \n    first              ; the argument f for MAP\n    '(the rain in spain)) ; the argument n for MAP\n\n    (t r i s) \n    ```", "```\n    Racket-1: \n    (map first '(the rain in spain)) \n    Racket-1: \n    (map (lambda (x) (first x)) '(the rain in spain)) \n    ```"]