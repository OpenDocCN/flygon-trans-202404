- en: Check Your Code First before Looking to Blame Others
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在责怪他人之前，先检查你的代码
- en: Check Your Code First before Looking to Blame Others
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在责怪他人之前，先检查你的代码
- en: Developers — all of us! — often have trouble believing our own code is broken.
    It is just so improbable that, for once, it must be the compiler that's broken.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员 —— 我们所有人！ —— 往往难以相信我们自己的代码是错误的。很难想象，这一次，代码是错误的，所以这一定是编译器出错了。
- en: Yet in truth it is very (very) unusual that code is broken by a bug in the compiler,
    interpreter, OS, app server, database, memory manager, or any other piece of system
    software. Yes, these bugs exist, but they are far less common than we might like
    to believe.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事实上，由编译器、解释器、操作系统、应用服务器、数据库、内存管理器或任何其他系统软件中的错误导致代码出错是非常（非常）不寻常的。是的，这些错误存在，但它们远不像我们希望的那样常见。
- en: I once had a genuine problem with a compiler bug optimizing away a loop variable,
    but I have imagined my compiler or OS had a bug many more times. I have wasted
    a lot of my time, support time, and management time in the process only to feel
    a little foolish each time it turned out to be my mistake after all.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经真正遇到一个编译器错误，优化掉了一个循环变量，但我想象过我的编译器或操作系统有很多次错误。在这个过程中，我浪费了大量的时间、支持时间和管理时间，只是每次都发现最后还是我的错，感觉有点愚蠢。
- en: Assuming the tools are widely used, mature, and employed in various technology
    stacks, there is little reason to doubt the quality. Of course, if the tool is
    an early release, or used by only a few people worldwide, or a piece of seldom
    downloaded, version 0.1, Open Source Software, there may be good reason to suspect
    the software. (Equally, an alpha version of commercial software might be suspect.)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这些工具被广泛使用、成熟，并在各种技术栈中使用，就没有理由怀疑其质量。当然，如果这个工具是早期发布的，或者只被全球少数人使用，或者是一种很少下载的软件，版本0.1的开源软件，那么怀疑这个软件可能是有充分理由的。（同样，商业软件的α版本可能会受到怀疑。）
- en: Given how rare compiler bugs are, you are far better putting your time and energy
    into finding the error in your code than proving the compiler is wrong. All the
    usual debugging advice applies, so isolate the problem, stub out calls, surround
    it with tests; check calling conventions, shared libraries, and version numbers;
    explain it to someone else; look out for stack corruption and variable type mismatches;
    try the code on different machines and different build configurations, such as
    debug and release.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于编译器错误的罕见性，将时间和精力放在查找代码中的错误上要比证明编译器错误更好得多。所有通常的调试建议都适用，所以要隔离问题，桩化调用，用测试环绕它；检查调用约定、共享库和版本号；向别人解释它；注意堆栈破坏和变量类型不匹配；在不同的机器和不同的构建配置上尝试代码，比如调试和发布。
- en: Question your own assumptions and the assumptions of others. Tools from different
    vendors might have different assumptions built into them — so too might different
    tools from the same vendor. When someone else is reporting a problem you cannot
    duplicate, go and see what they are doing. They maybe doing something you never
    thought of or are doing something in a different order.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 质疑自己的假设和他人的假设。来自不同供应商的工具可能内置了不同的假设 —— 同一供应商的不同工具也可能如此。当其他人报告你无法复制的问题时，去看看他们在做什么。他们可能在做一些你从未想过的事情，或者以不同的顺序进行某些操作。
- en: As a personal rule if I have a bug I can't pin down, and I'm starting to think
    it's the compiler, then it's time to look for stack corruption. This is especially
    true if adding trace code makes the problem move around.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个个人规则，如果我有一个找不到原因的错误，而我开始认为是编译器的问题，那么是时候寻找堆栈破坏的迹象了。如果添加跟踪代码使问题发生位置变动，尤其如此。
- en: Multi-threaded problems are another source of bugs to turn hair gray and induce
    screaming at the machine. All the recommendations to favor simple code are multiplied
    when a system is multi-threaded. Debugging and unit tests cannot be relied on
    to find such bugs with any consistency, so simplicity of design is paramount.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 多线程问题是另一个导致头发变灰并引发对机器尖叫的错误来源。当系统是多线程时，所有倾向于简化代码的建议都会倍增。调试和单元测试无法始终可靠地找到这些错误，因此设计的简洁性至关重要。
- en: So before you rush to blame the compiler, remember Sherlock Holmes' advice,
    "Once you eliminate the impossible, whatever remains, no matter how improbable,
    must be the truth," and prefer it to Dirk Gently's, "Once you eliminate the improbable,
    whatever remains, no matter how impossible, must be the truth."
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在你急于责怪编译器之前，记住福尔摩斯的建议，“一旦你排除了不可能的，无论其余的是多么不可能，都必然是真相”，并更喜欢它，而不是迪克·金特利的“一旦你排除了不可能的，无论其余的是多么不可能，都必然是真相”。
- en: By [Allan Kelly](http://programmer.97things.oreilly.com/wiki/index.php/Allan_Kelly)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Allan Kelly](http://programmer.97things.oreilly.com/wiki/index.php/Allan_Kelly)撰写。
