- en: Implementing a Circular EnvironmentTuesday, February 21st
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now use this to implement `rec` in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change environments so that instead of values they hold boxes of values: `(Boxof
    VAL)` instead of `VAL`, and whenever `lookup` is used, the resulting boxed value
    is unboxed,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `WRec` case, create the new environment with some temporary binding for
    the identifier — any value will do since it should not be used (when named expressions
    are always `fun` expressions),
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate the expression in the new environment,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the binding of the identifier (the box) to the result of this evaluation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The resulting definition is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Racket has another `let` relative for such cases of multiple-nested `let`s
    — `let*`. This form is a derived form — it is defined as a shorthand for using
    nested `let`s. The above is therefore exactly the same as this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This `let*` form can be read almost as a C/Java-ish kind of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The code can be simpler if we fold the evaluation into the `set-box!` (since
    `value` is used just there), and if use `lookup` to do the mutation — since this
    way there is no need to hold onto the box. This is a bit more expensive, but since
    the binding is guaranteed to be the first one in the environment, the addition
    is just one quick step. The only binding that we need is the one for the new environment,
    which we can do as an internal definition, leaving us with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A complete rehacked version of FLANG with a `rec` binding follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
