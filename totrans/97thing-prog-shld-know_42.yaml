- en: Keep the Build Clean
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持构建干净
- en: Keep the Build Clean
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持构建干净
- en: 'Have you ever looked at a list of compiler warnings the length of an essay
    on bad coding and thought to yourself: "You know, I really should do something
    about that... but I don''t have time just now?" On the other hand, have you ever
    looked at a lone warning that just appeared in a compilation and just fixed it?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有看过一长串编译器警告，就像一篇关于糟糕编码的文章，心里想着：“你知道，我真的应该对此采取措施...但现在我没有时间？”另一方面，你有没有看到一个突然出现在编译中的警告，然后立即修复它？
- en: When I start a new project from scratch, there are no warnings, no clutter,
    no problems. But as the code base grows, if I don't pay attention, the clutter,
    the cruft, the warnings, and the problems can start piling up. When there's a
    lot of noise, it's much harder to find the warning that I really want to read
    among the hundreds of warnings I don't care about.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我从零开始启动一个新项目时，没有警告，没有杂乱，没有问题。但随着代码库的增长，如果我不注意，杂乱、垃圾、警告和问题会开始堆积。当有很多噪音时，要在成百上千个我不关心的警告中找到我真正想读的警告就更加困难。
- en: To make warnings useful again, I try to use a zero-tolerance policy for warnings
    from the build. Even if the warning isn't important, I deal with it. If not critical,
    but still relevant, I fix it. If the compiler warns about a potential null-pointer
    exception, I fix the cause — even if I "know" the problem will never show up in
    production. If the embedded documentation (Javadoc or similar) refers to parameters
    that have been removed or renamed, I clean up the documentation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让警告再次变得有用，我尝试对构建中的警告采取零容忍政策。即使警告不重要，我也会处理它。如果不是关键的，但仍然相关，我会修复它。如果编译器警告可能出现空指针异常，我会修复原因——即使我“知道”这个问题永远不会在生产中出现。如果嵌入式文档（Javadoc或类似文档）引用了已删除或已重命名的参数，我会清理文档。
- en: If it's something I really don't care about and that really doesn't matter,
    I ask the team if we can change our warning policy. For example, I find that documenting
    the parameters and return value of a method in many cases doesn't add any value,
    so it shouldn't be a warning if they are missing. Or, upgrading to a new version
    of the programming language may make code that was previously OK now emit warnings.
    For example, when Java 5 introduced generics, all the old code that didn't specify
    the generic type parameter would give a warning. This is a sort of warning I don't
    want to be nagged about (at least, not yet). Having a set of warnings that are
    out of step with reality does not serve anyone.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是我真的不在乎的东西，而且真的不重要，我会问团队是否可以更改我们的警告政策。例如，我发现在许多情况下记录方法的参数和返回值并没有添加任何价值，因此如果它们缺失就不应该是一个警告。又如，升级到编程语言的新版本可能会导致以前正常的代码现在发出警告。例如，当Java
    5引入泛型时，所有未指定泛型类型参数的旧代码都会发出警告。这是一种我不想被唠叨的警告（至少现在还不想）。拥有一组与现实不符的警告不对任何人有益。
- en: By making sure that the build is always clean, I will not have to decide that
    a warning is irrelevant every time I encounter it. Ignoring things is mental work,
    and I need to get rid of all the unnecessary mental work I can. Having a clean
    build also makes it easier for someone else to take over my work. If I leave the
    warnings, someone else will have to wade through what is relevant and what is
    not. Or more likely, just ignore all the warnings, including the significant ones.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 确保构建始终保持干净，我就不必每次遇到警告时都要决定它是否无关紧要。忽视事物是需要心理努力的，我需要尽量摆脱所有不必要的心理工作。拥有一个干净的构建也使其他人更容易接手我的工作。如果我留下警告，其他人就必须穿过什么是相关的和什么是无关紧要的。或者更可能的是，只是忽略所有警告，包括重要的警告。
- en: 'Warnings from your build are useful. You just need to get rid of the noise
    to start noticing them. Don''t wait for a big clean-up. When something appears
    that you don''t want to see, deal with it right away. Either fix the source of
    the warning, suppress this warning or fix the warning policies of your tool. Keeping
    the build clean is not just about keeping it free of compilation errors or test
    failures: Warnings are also an important and critical part of code hygiene.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程中的警告非常有用。你只需要消除噪音，就可以开始注意到它们。不要等到一次性进行大规模清理。当出现你不想看到的东西时，立即处理。要么修复警告的源，要么抑制此警告，要么修复工具的警告策略。保持构建干净不仅仅是保持它没有编译错误或测试失败：警告也是代码卫生的重要且关键的一部分。
- en: By [Johannes Brodwall](http://programmer.97things.oreilly.com/wiki/index.php/Johannes_Brodwall)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[约翰内斯·布罗德沃尔](http://programmer.97things.oreilly.com/wiki/index.php/Johannes_Brodwall)
