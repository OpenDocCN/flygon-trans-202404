- en: The cURL project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The cURL project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![curl logo](curl-logo.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A funny detail about Open Source projects is that they are called "projects",
    as if they were somehow limited in time or ever can get done. The cURL "project"
    is a number of loosely-coupled individual volunteers working on writing software
    together with a common mission: to do reliable data transfers with Internet protocols.
    And giving away the code for free for anyone to use.'
  prefs: []
  type: TYPE_NORMAL
- en: How it started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How it started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Back in 1996, [Daniel Stenberg](https://daniel.haxx.se/) was writing an IRC
    bot in his spare time, an automated program that would offer services for the
    participants in a chatroom dedicated to the Amiga computer (#amiga on the IRC
    network EFnet). He came to think that it would be fun to get some updated currency
    rates and have his bot offer a service online for the chat room users to get current
    exchange rates, to ask the bot "please exchange 200 USD into SEK" or similar.
  prefs: []
  type: TYPE_NORMAL
- en: In order to have the provided exchange rates as accurate as possible, the bot
    would download the rates daily from a web site that was hosting them. A small
    tool to download data over HTTP was needed for this task. A quick look-around
    at the time had Daniel find a tiny tool named httpget (written by a Brazilian
    named Rafael Sagula). It did the job, almost, just needed a few little a tweaks
    here and there and soon Daniel had taken over maintenance of the few hundred lines
    of code it was.
  prefs: []
  type: TYPE_NORMAL
- en: HttpGet 1.0 was subsequently released on April 8th 1997 with brand new HTTP
    proxy support.
  prefs: []
  type: TYPE_NORMAL
- en: We soon found and fixed support for getting currencies over GOPHER. Once FTP
    download support was added, the name of the project was changed and urlget 2.0
    was released in August 1997\. The http-only days were already passed.
  prefs: []
  type: TYPE_NORMAL
- en: The project slowly grew bigger. When upload capabilities were added and the
    name once again was misleading, a second name change was made and on March 20,
    1998 curl 4 was released. (The version numbering from the previous names was kept.)
  prefs: []
  type: TYPE_NORMAL
- en: We consider **March 20 1998** to be curl's birthday.
  prefs: []
  type: TYPE_NORMAL
- en: The name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Naming things is hard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool was about uploading and downloading data specified with a URL. It
    would show the data (by default). The user would "see" the URL perhaps and "see"
    then spelled with the single letter ''c''. It was also a client-side program,
    a URL client. So ''c'' for Client and URL: **cURL**.'
  prefs: []
  type: TYPE_NORMAL
- en: Nothing more was needed so the name was selected and we never looked back again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Later on, someone suggested that curl could actually be a clever "recursive
    acronym" (where the first letter in the acronym refers back to the same word):
    "Curl URL Request Library"'
  prefs: []
  type: TYPE_NORMAL
- en: While that is awesome, it was actually not the original thought. We sort of
    wish we were that clever though…
  prefs: []
  type: TYPE_NORMAL
- en: There are and were other projects using the name curl in various ways, but we
    were not aware of them by the time our curl came to be.
  prefs: []
  type: TYPE_NORMAL
- en: Confusions and mixups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Soon after curl was first created another "curl" appeared that makes a programming
    language. That curl still [exists](http://www.curl.com).
  prefs: []
  type: TYPE_NORMAL
- en: Several libcurl bindings for various programming languages use the term "curl"
    or "CURL" in part or completely to describe their bindings, so sometimes you will
    find users talking about curl but targeting neither the command-line tool nor
    the library that is made by this project.
  prefs: []
  type: TYPE_NORMAL
- en: As a verb
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '''to curl something'' is sometimes used as a reference to use a non-browser
    tool to download a file or resource from a URL.'
  prefs: []
  type: TYPE_NORMAL
- en: What does curl do?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does curl do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'cURL is a project and its primary purpose and focus is to make two products:'
  prefs: []
  type: TYPE_NORMAL
- en: curl, the command-line tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: libcurl the transfer library with a C API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the tool and the library do Internet transfers for resources specified
    as URLs using Internet protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Everything and anything that is related to Internet protocol transfers can be
    considered curl's business. Things that are not related to that should be avoided
    and be left for other projects and products.
  prefs: []
  type: TYPE_NORMAL
- en: It could be important to also consider that curl and libcurl try to avoid handling
    the actual data that is transferred. It has, for example, no knowledge about HTML
    or anything else of the content that is popular to transfer over HTTP, but it
    knows all about how to transfer such data over HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: Both products are frequently used not only to drive thousands or millions of
    scripts and applications for an Internet connected world, but they are also widely
    used for server testing, protocol fiddling and trying out new things.
  prefs: []
  type: TYPE_NORMAL
- en: 'The library is used in every imaginable sort of embedded device where Internet
    transfers are needed: car infotainment, televisions, Blu-Ray players, set-top
    boxes, printers, routers, game systems, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: Command line tool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Running curl from the command line was natural and Daniel never considered anything
    else than that it would output data on stdout, to the terminal, by default. The
    "everything is a pipe" mantra of standard Unix philosophy was something Daniel
    believed in. curl is like 'cat' or one of the other Unix tools; it sends data
    to stdout to make it easy to chain together with other tools to do what you want.
    That's also why virtually all curl options that allow reading from a file or writing
    to a file, also have the ability to select doing it to stdout or from stdin.
  prefs: []
  type: TYPE_NORMAL
- en: Following that style of what Unix command-line tools worked, it was also never
    any question about that it should support multiple URLs on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: The command-line tool is designed to work perfectly from scripts or other automatic
    means. It doesn't feature any other GUI or UI other than mere text in and text
    out.
  prefs: []
  type: TYPE_NORMAL
- en: The library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the command-line tool came first, the network engine was ripped out and
    converted into a library during the year 2000 and the concepts we still have today
    were introduced with libcurl 7.1 in August 2000\. Since then, the command line
    tool has been a thin layer of logic to make a tool around the library that does
    all the heavy lifting.
  prefs: []
  type: TYPE_NORMAL
- en: libcurl is designed and meant to be available for anyone who wants to add client-side
    file transfer capabilities to their software, on any platform, any architecture
    and for any purpose. libcurl is also extremely liberally licensed to avoid that
    becoming an obstacle.
  prefs: []
  type: TYPE_NORMAL
- en: libcurl is written in traditional and conservative C. Where other languages
    are preferred, people have created libcurl [bindings](bindings.html) for them.
  prefs: []
  type: TYPE_NORMAL
- en: Project communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Project communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: cURL is an Open Source project consisting of voluntary members from all over
    the world, living and working in a large number of the world's time zones. To
    make such a setup actually work, communication and openness is key. We keep all
    communication public and we use open communication channels. Most discussions
    are held on mailing lists, we use bug trackers where all issues are discussed
    and handled with full insight for everyone who cares to look.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to realize that we are all jointly taking care of the project,
    we fix problems and we add features. Sometimes a regular contributor grows bored
    and fades away, sometimes a new eager contributor steps out from the shadows and
    starts helping out more. To keep this ship going forward as well as possible,
    it is important that we maintain open discussions and that's one of the reasons
    why we frown upon users who take discussions privately or try to e-mail individual
    team members about development issues, questions, debugging or whatever.
  prefs: []
  type: TYPE_NORMAL
- en: In this day and age, mailing lists may be considered sort of the old style of
    communication—no fancy web forums or similar. Using a mailing list is therefore
    becoming an art that isn't practised everywhere and may be a bit strange and unusual
    to you. But fear not. It is just about sending emails to an address that then
    sends that e-mail out to all the subscribers. Our mailing lists have at most a
    few thousand subscribers. If you are mailing for the first time, it might be good
    to read a few old mails first to get to learn the culture and what's considered
    good practice.
  prefs: []
  type: TYPE_NORMAL
- en: The mailing lists and the bug tracker have changed hosting providers a few times
    and there are reasons to suspect it might happen again in the future. It is just
    the kind of thing that happens to a project that lives for a long time.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few users also hang out on IRC in the #curl channel on freenode.'
  prefs: []
  type: TYPE_NORMAL
- en: Mailing list etiquette
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mailing list etiquette
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like many communities and subcultures, we have developed guidelines and rules
    of what we think is the right way to behave and how to communicate on the mailing
    lists. The [curl mailing list etiquette](https://curl.haxx.se/mail/etiquette.html)
    follows the style of traditional Open Source projects.
  prefs: []
  type: TYPE_NORMAL
- en: Do not mail a single individual
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Many people send one question directly to one person. One person gets many mails,
    and there is only one person who can give you a reply. The question may be something
    that other people also want to ask. These other people have no way to read the
    reply but to ask the one person the question. The one person consequently gets
    overloaded with mail.
  prefs: []
  type: TYPE_NORMAL
- en: If you really want to contact an individual and perhaps pay for his or her services,
    by all means go ahead, but if it's just another curl question, take it to a suitable
    list instead.
  prefs: []
  type: TYPE_NORMAL
- en: Reply or new mail
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Please do not reply to an existing message as a shortcut to post a message to
    the lists.
  prefs: []
  type: TYPE_NORMAL
- en: Many mail programs and web archivers use information within mails to keep them
    together as "threads", as collections of posts that discuss a certain subject.
    If you don't intend to reply on the same or similar subject, don't just hit reply
    on an existing mail and change subject; create a new mail.
  prefs: []
  type: TYPE_NORMAL
- en: Reply to the list
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When replying to a message from the list, make sure that you do "group reply"
    or "reply to all", and not just reply to the author of the single mail you reply
    to.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are actively discouraging replying back to the single person by setting
    the Reply-To: field in outgoing mails back to the mailing list address, making
    it harder for people to mail the author only by mistake.'
  prefs: []
  type: TYPE_NORMAL
- en: Use a sensible subject
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Please use a subject of the mail that makes sense and that is related to the
    contents of your mail. It makes it a lot easier to find your mail afterwards and
    it makes it easier to track mail threads and topics.
  prefs: []
  type: TYPE_NORMAL
- en: Do not top-post
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you reply to a message, don't use top-posting. Top-posting is when you write
    the new text at the top of a mail and you insert the previous quoted mail conversation
    below. It forces users to read the mail in a backwards order to properly understand
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is why top posting is so bad:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Apart from the screwed-up read order (especially when mixed together in a thread
    when someone responds using the mandated bottom-posting style), it also makes
    it impossible to quote only parts of the original mail.
  prefs: []
  type: TYPE_NORMAL
- en: When you reply to a mail you let the mail client insert the previous mail quoted.
    Then you put the cursor on the first line of the mail and you move down through
    the mail, deleting all parts of the quotes that don't add context for your comments.
    When you want to add a comment you do so, inline, right after the quotes that
    relate to your comment. Then you continue downwards again.
  prefs: []
  type: TYPE_NORMAL
- en: When most of the quotes have been removed and you have added your own words,
    you are done!
  prefs: []
  type: TYPE_NORMAL
- en: HTML is not for mails
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Please switch off those HTML encoded messages. You can mail all those funny
    mails to your friends. We speak plain text mails.
  prefs: []
  type: TYPE_NORMAL
- en: Quoting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Quote as little as possible. Just enough to provide the context you cannot leave
    out. A lengthy description can be found [here](https://www.netmeister.org/news/learn2quote.html).
  prefs: []
  type: TYPE_NORMAL
- en: Digest
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We allow subscribers to subscribe to the "digest" version of the mailing lists.
    A digest is a collection of mails lumped together in one single mail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Should you decide to reply to a mail sent out as a digest, there are two things
    you MUST consider if you really really cannot subscribe normally instead:'
  prefs: []
  type: TYPE_NORMAL
- en: Cut off all mails and chatter that is not related to the mail you want to reply
    to.
  prefs: []
  type: TYPE_NORMAL
- en: Change the subject name to something sensible and related to the subject, preferably
    even the actual subject of the single mail you wanted to reply to.
  prefs: []
  type: TYPE_NORMAL
- en: Please tell us how you solved the problem!
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Many people mail questions to the list, people spend some of their time and
    make an effort in providing good answers to these questions.
  prefs: []
  type: TYPE_NORMAL
- en: If you are the one who asks, please consider responding once more in case one
    of the hints was what solved your problems. The guys who write answers feel good
    to know that they provided a good answer and that you fixed the problem. Far too
    often, the person who asked the question is never heard of again, and we never
    get to know if he/she is gone because the problem was solved or perhaps because
    the problem was unsolvable!
  prefs: []
  type: TYPE_NORMAL
- en: Getting the solution posted also helps other users that experience the same
    problem(s). They get to see (possibly in the web archives) that the suggested
    fixes actually has helped at least one person.
  prefs: []
  type: TYPE_NORMAL
- en: Mailing lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mailing lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of the most important mailing lists are…
  prefs: []
  type: TYPE_NORMAL
- en: curl-users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main mailing list for users and developers of the curl command-line tool,
    for questions and help around curl concepts, command-line options, the protocols
    curl can speak or even related tools. We tend to move development issues or more
    advanced bug fixes discussions over to curl-library instead, since libcurl is
    the engine that drives most of curl.
  prefs: []
  type: TYPE_NORMAL
- en: See [https://cool.haxx.se/mailman/listinfo/curl-users](https://cool.haxx.se/mailman/listinfo/curl-users)
  prefs: []
  type: TYPE_NORMAL
- en: curl-library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main development list, and also for users of libcurl. We discuss how to
    use libcurl in applications as well as development of libcurl itself. You will
    find lots of questions on libcurl behavior, debugging and documentation issues.
  prefs: []
  type: TYPE_NORMAL
- en: See [https://cool.haxx.se/mailman/listinfo/curl-library](https://cool.haxx.se/mailman/listinfo/curl-library)
  prefs: []
  type: TYPE_NORMAL
- en: curl-announce
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This mailing list only gets announcements about new releases and security problems—nothing
    else. This one is for those who want a more casual feed of information from the
    project. [https://cool.haxx.se/mailman/listinfo/curl-announce](https://cool.haxx.se/mailman/listinfo/curl-announce)
  prefs: []
  type: TYPE_NORMAL
- en: Reporting bugs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reporting bugs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The development team does a lot of testing. We have a whole test suite that
    is run frequently every day on numerous platforms to in order to exercise all
    code and make sure everything works as supposed.
  prefs: []
  type: TYPE_NORMAL
- en: Still, there are times when things aren't working the way they should. Then
    we appreciate getting those problems reported.
  prefs: []
  type: TYPE_NORMAL
- en: A bug is a problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any problem can be considered a bug. A weirdly phrased wording in the manual
    that prevents you from understanding something is a bug. A surprising side effect
    of combining multiple options can be a bug—or perhaps it should be better documented?
    Perhaps the option doesn't do at all what you expected it to? That's a problem
    and we should fix it!
  prefs: []
  type: TYPE_NORMAL
- en: Problems must be known to get fixed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This may sound easy and uncomplicated but is a fundamental truth in our and
    other projects. Just because it is an old project and have thousands of users
    doesn't mean that the development team knows about the problem you just fell over.
    Maybe users haven't paid enough attention to details like you, or perhaps it just
    never triggered for anyone else.
  prefs: []
  type: TYPE_NORMAL
- en: We rely on users experiencing problems to report them. We need to learn the
    problems exist so that we can fix them.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the problems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Software engineering is, to a very large degree, about fixing problems. To fix
    a problem a developer needs to understand how to repeat it and to do that the
    debugging person needs to be told what set of circumstances that made the problem
    trigger.
  prefs: []
  type: TYPE_NORMAL
- en: A good bug report
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A good report explains what happened and what you thought was going to happen.
    Tell us exactly what versions of the different components you used and take us
    step by step through what you do to get the problem.
  prefs: []
  type: TYPE_NORMAL
- en: After you submit a bug report, you can expect there to be follow-up questions
    or perhaps requests that you try out varies things and tasks in order for the
    developer to be able to narrow down the suspects and make sure your problem is
    being cornered in properly.
  prefs: []
  type: TYPE_NORMAL
- en: A bug report that is submitted but is abandoned by the submitter risks getting
    closed if the developer fails to understand it, fails to reproduce it or faces
    other problems when working on it. Don't abandon your report!
  prefs: []
  type: TYPE_NORMAL
- en: Report curl bugs in the [curl bug tracker on github](https://github.com/curl/curl/issues)!
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Testing software thoroughly and properly is a lot of work. Testing software
    that runs on dozens on operating systems and dozens of CPU architectures, with
    server implementations with their owns sets of bugs and interpretations of the
    specs, is even more work.
  prefs: []
  type: TYPE_NORMAL
- en: The curl project has a test suite that iterates over all existing test cases,
    runs the test and verifies that the outcome is the correct one and that no other
    problem happened, like a memory leak or something fishy in the protocol layer.
  prefs: []
  type: TYPE_NORMAL
- en: The test suite is meant to be possible to run after you have built curl yourself
    and there are a fair number of volunteers who also help out by running the test
    suite automatically a few times per day to make sure the latest commits get a
    run. This way, we hopefully discover the worst flaws pretty soon after they were
    introduced.
  prefs: []
  type: TYPE_NORMAL
- en: We don't test everything and even when we try to test things there will always
    be subtle details that get through and that we, sometimes years after the fact,
    figure out were wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the nature of different systems and funny use cases on the Internet,
    eventually some of the best testing is done by users when they run the code to
    perform their own use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Another limiting factor with the test suite is that the test setup itself is
    less portable than curl and libcurl so there are in fact platforms where curl
    runs fine but the test suite cannot execute at all.
  prefs: []
  type: TYPE_NORMAL
- en: Releases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Releases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A release in the curl project means packaging up all the source code that is
    in the master branch of the code repository, signing the package, tagging the
    point in time in the code repository, and then putting it up on the web site for
    the world to download.
  prefs: []
  type: TYPE_NORMAL
- en: It is one single source code archive for all platforms curl can run on. It is
    the one and only package for both curl and libcurl.
  prefs: []
  type: TYPE_NORMAL
- en: We never ship any curl or libcurl *binaries* from the project. All the packaged
    binaries that are provided with operating systems or on other download sites are
    done by gracious volunteers outside of the project.
  prefs: []
  type: TYPE_NORMAL
- en: As of a few years back, we make an effort to do our releases on an eight week
    cycle and unless some really serious and urgent problem shows up we stick to this
    schedule. We release on a Wednesday, and then again a Wednesday eight weeks later
    and so it continues. Non-stop.
  prefs: []
  type: TYPE_NORMAL
- en: For every release we tag the source code in the repository with "curl-release
    version" and we update the [changelog](https://curl.haxx.se/changes.html).
  prefs: []
  type: TYPE_NORMAL
- en: We had done 160 curl releases by November 2016, and for all the ones made since
    late 1999 there are lots of release stats available in our [curl release log](https://curl.haxx.se/docs/releases.html).
  prefs: []
  type: TYPE_NORMAL
- en: Daily snapshots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every single change to the source code is committed and pushed to the source
    code repository. This repository is hosted on github.com and is using git these
    days (but hasn't always been this way). When building curl off the repository,
    there are a few things you need to generate and setup that sometimes cause people
    some problems or just friction. To help with that, we provide daily snapshots.
  prefs: []
  type: TYPE_NORMAL
- en: The daily snapshots are generated daily (clever naming, right?) as if a release
    had been made at that point in time. It produces a package of all sources code
    and all files that are normally part of a release and puts it in a package and
    uploads it to a special place ([https://curl.haxx.se/snapshots/](https://curl.haxx.se/snapshots/))
    to allow interested people to get the very latest code to test, to experiment
    or whatever.
  prefs: []
  type: TYPE_NORMAL
- en: The snapshots are only kept for around 20 days until deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security is a primary concern for us in the curl project. We take it seriously
    and we work hard on providing secure and safe implementations of all protocols
    and related code. As soon as we get knowledge about a security related problem
    or just a suspected problem, we deal with it and we will attempt to provide a
    fix and security notice no later than in the next pending release.
  prefs: []
  type: TYPE_NORMAL
- en: We use a responsible disclosure policy, meaning that we prefer to discuss and
    work on security fixes out of the public eye and we alert the vendors on the openwall.org
    list a few days before we announce the problem and fix to the world. This, in
    an attempt to shorten the time span the bad guys can take advantage of a problem
    until a fixed version has been deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Past security problems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the years we have had our fair share of security related problems. We
    work hard on [documenting every problem](https://curl.haxx.se/docs/security.html)
    thoroughly with all details listed and clearly stated to aid users. Users of curl
    should be able to figure out what problems their particular curl versions and
    use cases are vulnerable to.
  prefs: []
  type: TYPE_NORMAL
- en: To help with this, we present [this waterfall chart](https://curl.haxx.se/docs/vulnerabilities.html)
    showing how all vulnerabilities affect which curl versions and we have this complete
    list of all known security problems since the birth of this project.
  prefs: []
  type: TYPE_NORMAL
- en: Trust
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Trust
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a software to conquer the world, it needs to be trusted. It takes trust
    to build more trust and it can all be broken down really fast if the foundation
    is proven to have cracks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the curl project we build trust for our users in a few different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: We are completely transparent about everything. Every decision, every discussion
    as well as every line of code are always public and done in the open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We try hard to write reliable code. We write test cases, we review code, we
    document best practices and we have a style guide that helps us keep code consistent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We stick to promises and guarantees as much as possible. We don't break APIs
    and we don't abandon support for old systems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security is of utmost importance and we take every reported incident very seriously
    and realize that we **must** fix all known problems and we need to do it responsibly.
    We do our best to not endanger our users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We act like adults. We can be silly and we can joke around, but we do it responsibly
    and we follow our [Code of Conduct](opensource-coc.html). Everyone should be able
    to even trust us to behave.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The development team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The development team
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Daniel Stenberg is the founder and self-proclaimed leader of the project. Everybody
    else that participates or contributes in the project has thus arrived at a later
    point in time. Some contributors worked for a while and then left again. Most
    contributors hang around only for a short while to get their bug fixed or feature
    merged or similar. Counting all contributors we know the names of, we have received
    help from more than 1400 individuals.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of people that have repeatedly shown up in discussions and commits
    during the last several years include these stellar individuals:'
  prefs: []
  type: TYPE_NORMAL
- en: Daniel Stenberg
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steve Holme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jay Satiro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dan Fandrich
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marc Hörsken
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kamil Dudka
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alessandro Ghedini
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yang Tse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Günter Knauf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tatsuhiro Tsujikawa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patrick Monnerat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nick Zitzmann
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users of curl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users of curl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![one billion users](one-billion-users.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We used to say that there are a billion users of curl. It makes a good line
    to say but in reality we, of course, don't have any numbers that exact. We just
    estimate and guess based on observations and trends. It also depends on exactly
    what you would consider "a user" to be. Let's elaborate.
  prefs: []
  type: TYPE_NORMAL
- en: Open Source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The project being Open Source and very liberally licensed means that just about
    anyone can redistribute curl in source format or built into binary form.
  prefs: []
  type: TYPE_NORMAL
- en: Counting downloads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The curl command-line tool and the libcurl library are available for download
    for most operating systems via the curl web site, they are provided via third
    party installers to a bunch and and they come installed by default with yet more
    operating systems. This makes counting downloads from the curl web site completely
    inappropriate as a means of measurement.
  prefs: []
  type: TYPE_NORMAL
- en: Finding users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, we can't count downloads and anyone may redistribute it and nobody is forced
    to tell us they use curl. How can we figure out the numbers? How can we figure
    out the users? The answer is that we really can't with any decent level of accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Instead we rely on witness reports, circumstantial evidence, on findings on
    the Internet, the occasional "about box" or license agreement mentioning curl
    or that authors ask for help and tell us about their use.
  prefs: []
  type: TYPE_NORMAL
- en: The curl license says users need to repeat it somewhere, like in the documentation,
    but that's not easy for us to find in many cases and it's also not easy for us
    to do anything about should they decide not to follow the very small license requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line tool users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The command-line tool curl is widely used by programmers around the world in
    shell and batch scripts, to debug servers and to test out things. There's no doubt
    it is used by millions every day.
  prefs: []
  type: TYPE_NORMAL
- en: Embedded library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'libcurl is what makes our project reach the really large volume of users. The
    ability to quickly and easily get client side file transfer abilities into your
    application is desirable for a lot of users, and then libcurl''s great portability
    also helps: you can write more or less the same application on a wide variety
    of platforms and you can still keep using libcurl for transfers.'
  prefs: []
  type: TYPE_NORMAL
- en: libcurl being written in C with no or just a few required dependencies also
    help to get it used in embedded systems.
  prefs: []
  type: TYPE_NORMAL
- en: libcurl is popularly used in smartphone operating systems, in car infotainment
    setups, in television sets, in set-top boxes, in audio and video equipment such
    as Blu-Ray players and higher-end receivers. It is often used in home routers
    and printers.
  prefs: []
  type: TYPE_NORMAL
- en: A fair number of best-selling games are also using libcurl, on Windows and game
    consoles.
  prefs: []
  type: TYPE_NORMAL
- en: In web site backends
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The libcurl binding for PHP was one of, if not the, first bindings for libcurl
    to really catch on and get used widely. It quickly got adopted as a default way
    for PHP users to transfer data and as it has now been in that position for over
    a decade and PHP has turned out to be a fairly popular technology on the Internet
    (recent numbers indicated that something like a quarter of all sites on the Internet
    uses PHP).
  prefs: []
  type: TYPE_NORMAL
- en: A few really high-demand sites are using PHP and are using libcurl in the backend.
    Facebook and Yahoo are two such sites.
  prefs: []
  type: TYPE_NORMAL
- en: Famous users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nothing forces users to tell us they use curl or libcurl in their services or
    in the products. We usually only find out they do by accident, by reading about
    dialogues, documentation and license agreements. Of course some companies also
    just flat out tell us.
  prefs: []
  type: TYPE_NORMAL
- en: We collect names of companies and products on our web site of users that use
    the project's products "in commercial environments". We do this mostly just to
    show-off to other big brands that if these other guys can build products that
    depend on us, maybe you can, too?
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of companies are well over 200 names, but extracting some of the larger
    or more well-known brands, here''s a pretty good list that, of course, is only
    a small selection:'
  prefs: []
  type: TYPE_NORMAL
- en: Adobe, Altera, AOL, Apple, AT&T, BBC, Blackberry, BMW, Bosch, Broadcom, Chevrolet,
    Cisco, Comcast, Facebook, Google, Hitachi, Honeywell, HP, Huawei, HTC, IBM, Intel,
    LG, Mazda, Mercedes-Benz, Motorola, Netflix, Nintendo, Oracle, Panasonic, Philips,
    Pioneer, RBS, Samsung, SanDisk, SAP, SAS Institute, SEB, Sharp, Siemens, Sony,
    Spotify, Sun, Swisscom, Tomtom, Toshiba, VMware, Xilinx, Yahoo, Yamaha
  prefs: []
  type: TYPE_NORMAL
- en: Future
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Future
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![curl future](devgraph-800.png)'
  prefs: []
  type: TYPE_IMG
- en: There's no slowdown in sight in curl's future, bugs reported, development pace
    or how Internet protocols are being developed or updated.
  prefs: []
  type: TYPE_NORMAL
- en: We are looking forward to support for more protocols, support for more features
    within the already supported protocols, and more and better APIs for libcurl to
    allow users to do transfers even better and faster.
  prefs: []
  type: TYPE_NORMAL
- en: The project casually maintains a [TODO](https://curl.haxx.se/docs/todo.html)
    file holding a bunch of ideas that we could work on in the future. It also keeps
    a [KNOWN_BUGS](https://curl.haxx.se/docs/knownbugs.html) document with, a list
    of known problems we would like to fix.
  prefs: []
  type: TYPE_NORMAL
- en: There's a [ROADMAP](https://curl.haxx.se/dev/roadmap.html) document that describe
    some plans for the short-term that some of the active developers thought they
    would work on next. Of course, we can not promise that we will always follow it
    perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: We are highly dependent on developers to join in and work on what they want
    to get done, be it bug fixes or new features.
  prefs: []
  type: TYPE_NORMAL
