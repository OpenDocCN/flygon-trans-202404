- en: 文字列とUnicode
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://jsprimer.net/basic/string-unicode/](https://jsprimer.net/basic/string-unicode/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 「[文字列](../string/)」の章で紹介したように、JavaScriptは文字コードとしてUnicodeを採用し、エンコード方式としてUTF-16を採用しています。
    このUTF-16を採用しているのは、あくまでJavaScriptの内部で文字列を扱う際の文字コード（内部コード）です。 そのため、コードを書いたファイル自体の文字コード（外部コード）は、UTF-8のようにUTF-16以外の文字コードであっても問題ありません。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 「[文字列](../string/)」の章では、これらの文字コードは意識していなかったように、内部的にどのような文字コードで扱っているかは意識せずに文字列処理ができます。
    しかし、JavaScriptのStringオブジェクトにはこの文字コード（Unicode）に特化したAPIもあります。 また、絵文字を含む特定の文字を扱う際や「文字数」を数えるという場合には、内部コードであるUTF-16を意識しないといけない場面があります。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: この章では、文字列におけるUnicodeを意識しないといけない場面について見ていきます。 また、Unicode自体もECMAScriptと同じように歴史がある仕様であり、Unicodeのすべてを紹介するには膨大な文字列が必要になります。
    そのため、この章はJavaScriptにおけるUnicodeとUTF-16に話を限定しています。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Unicodeの歴史を含めた文字コード自体について詳しく知りたい方は「[プログラマのための文字コード技術入門](https://gihyo.jp/book/2019/978-4-297-10291-3)」や「[文字コード「超」研究](https://www.rutles.net/products/detail.php?product_id=298)」等を参照してください。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[](#code-point)*Code Point*'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Unicodeはすべての文字（制御文字などの画面に表示されない文字も含む）に対してIDを定義する目的で策定されている仕様です。 この「文字」に対する「一意のID」のことを**Code
    Point**（符号位置）と呼びます。'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Code Pointを扱うメソッドの多くは、ECMAScript 2015で追加されています。 ES2015で追加されたStringの`codePointAt`メソッドや`String.fromCodePoint`静的メソッドを使うことで、文字列とCode
    Pointを相互変換できます。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Stringの`codePointAt`メソッド^([ES2015])は、文字列の指定インデックスにある文字のCode Pointの値を返します。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 一方の`String.fromCodePoint`メソッド^([ES2015])は、指定したCode Pointに対応する文字を返します。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: また、文字列リテラル中にはUnicodeエスケープシーケンスで、直接Code Pointを書くこともできます。 Code Pointは`\u{Code
    Pointの16進数の値}`のようにエスケープシーケンスとして記述できます。 Unicodeエスケープシーケンスでは、Code Pointの16進数の値が必要となります。
    Numberの`toString`メソッドの引数に基数となる`16`を渡すことで、16進数の文字列を取得できます。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[](#code-point-is-not-code-unit)*Code PointとCode Unitの違い*'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Code Point（符号位置）について紹介しましたが、JavaScriptの文字列の構成要素はUTF-16で変換されたCode Unit（符号単位）です（詳細は「[文字列](../string/)」の章を参照）。
    ある範囲の文字列については、Code Point（符号位置）とCode Unit（符号単位）は結果として同じ値となります。'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、`アオイ`という文字列の各要素をCode PointとCode Unitとして表示しています。 `convertCodeUnits`関数は文字列をCode
    Unitの配列にし、`convertCodePoints`関数は文字列をCode Pointの配列にしています。それぞれの関数の実装はまだ理解しなくても問題ありません。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 実行した結果をまとめてみると、この文字列においてはCode PointとCode Unitが同じ値になっていることがわかります。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![文字列におけるCode UnitとCode Pointの表](../Images/d509219aa230c9091994e155711f62f1.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: しかし、文字列によってはCode PointとCode Unitが異なる値となる場合があります。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 先ほどと同じ関数を使い、`リンゴ🍎`（リンゴの絵文字）という文字列を構成するCode UnitとCode Pointを見比べてみます。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 実行した結果をまとめてみると、この絵文字を含む文字列においてはCode PointとCode Unitが異なる値となることがわかります。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![絵文字を含んだ文字列におけるCode UnitとCode Pointの表](../Images/d20cf51e0c1e366dbe3477309403da4a.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: 具体的には、Code Pointの要素数が4つなのに対して、Code Unitの要素数が5つになっています。 また、Code Pointでは1つのCode
    Pointが`🍎`に対応していますが、Code Unitでは2つのCode Unitで`🍎`に対応しています。JavaScriptでは「文字列はCode Unitが順番に並んだもの」として扱われるためこの文字列の要素数（長さ）はCode
    Unitの個数である5つとなっています。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: ある1つの文字に対応するIDであるCode Pointを、16ビット（2バイト）のCode Unitで表現するのがUTF-16というエンコード方式です。しかし、16ビット（2バイト）で表現できる範囲は、65536種類（2の16乗）です。
    現在、Unicodeに登録されているCode Pointは10万種類を超えているため、すべての文字とCode Unitを1対1の関係で表すことができません。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: このような場合に、UTF-16では2つのCode Unitの組み合わせ（合計4バイト）で1つの文字（1つのCode Point）を表現します。この仕組みを**サロゲートペア**と呼びます。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[](#surrogate-pair)*サロゲートペア*'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*サロゲートペアでは、2つのCode Unitの組み合わせ（合計4バイト）で1つの文字（1つのCode Point）を表現します。UTF-16では、次の範囲をサロゲートペアに利用する領域としています。'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '`\uD800`～`\uDBFF`：上位サロゲートの範囲'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\uDC00`～`\uDFFF`：下位サロゲートの範囲'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 文字列中に上位サロゲートと下位サロゲートのCode Unitが並んだ場合に、2つのCode Unitを組み合わせて1文字（Code Point）として扱います。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、サロゲートペアの文字である「𩸽（ほっけ）」を次の2つのCode Unitで表現しています。 Code Unitのエスケープシーケンス（`\uXXXX`）を2つ並べることで`𩸽`という文字を表現できます。
    一方で、ES2015からはCode Pointのエスケープシーケンス（`\u{XXXX}`）も書けるため、1つのCode Pointで`𩸽`という文字を表現できることもわかります。しかし、Code
    Pointのエスケープシーケンスで書いた場合でも、内部的にCode Unitに変換された値で保持されることは変わりません。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 先ほどの例で登場した`🍎`（リンゴの絵文字）もサロゲートペアで表現される文字です。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: このようにサロゲートペアでは、2つのCode Unitで1つのCode Pointを表現します。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 基本的には、文字列はCode Unitが順番に並んでいるものとして扱われるため、多くの`String`のメソッドはCode Unitごとに作用します。
    また、インデックスアクセスもCode Unitごととなります。そのため、サロゲートペアで表現している文字列では、上位サロゲート（0番目）と下位サロゲート（1番目）へのインデックスアクセスになります。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 絵文字や「𩸽（ほっけ）」などのサロゲートペアで表現される文字が文字列中に含まれると、Code Unitごとに扱う文字列処理は複雑になります。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: たとえば、Stringの`length`プロパティは文字列におけるCode Unitの要素数を数えるため、`"🍎".length`の結果は`2`となります。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: このような場合には、文字列をCode Pointごとに処理することを考える必要があります。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[](#handle-code-point)*Code Pointを扱う*'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*文字列をCode Pointが順番に並んだものとして扱うには、Code Pointに対応したメソッドなどを利用する必要があります。'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: ES2015から文字列をCode Pointごとに扱うメソッドや構文が追加されています。 次に紹介するものは、文字列をCode Pointごとに扱います。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '`CodePoint`を名前に含むメソッド'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`u`（Unicode）フラグが有効化されている正規表現'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 文字列のIteratorを扱うもの（Destructuring、`for...of`、`Array.from`メソッドなど）
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: これらのCode Pointを扱う処理と具体的な使い方を見ていきます。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[](#regexp-unicode)*正規表現の`.`とUnicode*'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*ES2015では、正規表現に`u`（Unicode）フラグが追加されました。 この`u`フラグをつけた正規表現は、文字列をCode Pointが順番に並んだものとして扱います。'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 具体的に`u`フラグの有無による`.`（改行文字以外のどの1文字にもマッチする特殊文字）の動作の違いを見ていきます。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '`/(.)のひらき/`というパターンで`.`にマッチする部分を取り出すことを例に見ていきます。'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: まずは、`u`フラグをつけていない正規表現とStringの`match`メソッドでマッチした範囲を取り出してみます。 `match`メソッドの返す値は`[マッチした全体の文字列,
    キャプチャされた文字列]`です（詳細は「[文字列](../string/)」の章を参照）。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 実際にマッチした結果を見てみると、`.`は`𩸽`の下位サロゲートである`\ude3d`にマッチしていることがわかります（`\ude3d`は単独では表示できないため、文字化けのように表示されます）。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: つまり、`u`フラグをつけていない正規表現は、文字列をCode Unitが順番に並んだものとして扱っています。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: このような意図しない結果を避けるには、正規表現に`u`フラグをつけます。 `u`フラグがついた正規表現は、文字列をCode Pointごとに扱います。
    そのため、任意の1文字にマッチする`.`が`𩸽`という文字（Code Point）にマッチします。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 基本的には正規表現に`u`フラグをつけて問題となるケースは少ないはずです。 なぜなら、サロゲートペアの片方だけにマッチしたい正規表現を書くケースはまれであるためです。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[](#count-of-code-points)*Code Pointの数を数える*'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Stringの`length`プロパティは、文字列を構成するCode Unitの個数を表すプロパティです。 そのためサロゲートペアを含む文字列では、`length`の結果が見た目より大きな値となる場合があります。'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: JavaScriptには、文字列におけるCode Pointの個数を数えるメソッドは用意されていません。 これを行うには、文字列をCode Pointごとに区切った配列へ変換して、配列の長さを数えるのが簡潔です。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '`Array.from`メソッド^([ES2015])は、引数にiterableなオブジェクトを受け取り、それを元にした新しい配列を返します。 iterableオブジェクトとは`Symbol.iterator`という特別な名前のメソッドを実装したオブジェクトの総称で、`for...of`文などで反復処理が可能なオブジェクトです（詳細は「[ループと反復処理のfor...of文](../loop/#for-of-statement)」を参照）。'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 文字列もiterableオブジェクトであるため、`Array.from`メソッドによって1文字（厳密にはCode Point）ごとに区切った配列へと変換できます。先ほども紹介したように、文字列をiterableとして扱う場合はCode
    Pointごとに処理を行います。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: しかし、Code Pointの数を数えた場合でも、直感的な結果にならない場合もあります。 なぜなら、Code Pointには制御文字などの視覚的に見えないものも定義されているためです。
    そのため、文字として数えたくないものは無視するなど、視覚的な**文字列の長さ**を数えるにはさらなる工夫が必要になります。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[](#loop-each-code-point)*Code Pointごとに反復処理をする*'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*先ほど紹介した`Array.from`メソッドを使えば、文字列をCode Pointで区切った文字の配列へと変換できます。 配列にすれば、あとは「[ループと反復処理](../loop/)」の章で学んだ方法を使って、Code
    Pointごとに反復処理ができます。'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、文字列中に登場する`🍎`の個数を数えています。 `countOfCodePoints`関数は、`Array.from`でCode Pointごとの配列にし、配列を`codePoint`でフィルターした結果できた配列の要素数を返します。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码计算了字符串中出现`🍎`的次数。`countOfCodePoints`函数将使用`Array.from`将字符串转换为Code Point数组，并返回由数组过滤器`codePoint`产生的数组的元素数。
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`for...of`による反復処理も文字列をCode Pointごとに扱えます。 これは、`for...of`文が対象をIteratorとして列挙するためです。'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...of`循环也可以按Code Point处理字符串。这是因为`for...of`语句会枚举目标作为迭代器。'
- en: 先ほどのコードと同じ`countOfCodePoints`関数を`for...of`を使って実装してみます。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与之前相同的`countOfCodePoints`函数，但这次使用`for...of`来实现。
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[](#conclusion)*終わりに*'
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)*结论*'
- en: '*この章では、文字列とUnicodeの関係について簡潔に紹介しました。 Unicodeにはこの章で紹介しきれなかった表現もあります。 また、JavaScriptにはUnicodeをキレイに扱うAPIが用意されているとは言い切れない部分もあります。'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章简要介绍了字符串和Unicode之间的关系。Unicode还有一些未在本章介绍的方面。此外，JavaScript并非总是提供处理Unicode的完美API。'
- en: 一方で「[文字列](../string/)」の章で紹介したように、Code UnitやCode Pointを意識しなくても柔軟で強力な文字列処理ができます。
    しかし、近年は絵文字を利用するケースが多くなったため、Code Pointを意識したプログラミングが必要となるケースも増えています。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，正如在“[字符串](../string/)”章节中介绍的那样，即使不考虑Code Unit或Code Point，也可以进行灵活而强大的字符串处理。然而，由于近年来使用表情符号的情况越来越多，因此也越来越需要意识到Code
    Point进行编程的情况。
- en: UnicodeはECMAScriptとは独立した仕様であるため、文字列を扱う悩みはプログラミング言語を問わずに出てくる共通の課題です。 特にJavaはJavaScriptと同じくUTF-16をエンコード方式として採用しているため、類似する問題が見られます。
    そのため、JavaScriptで文字列処理の問題にぶつかった際には、他の言語ではどうしているかを調べることも重要です。********
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode是独立于ECMAScript的规范，因此，处理字符串的问题是所有编程语言都会遇到的共同问题。特别是Java采用了与JavaScript相同的UTF-16编码方式，因此存在类似的问题。因此，在遇到JavaScript中的字符串处理问题时，了解其他语言的处理方式也是很重要的。********
