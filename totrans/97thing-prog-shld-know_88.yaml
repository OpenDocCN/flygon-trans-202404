- en: The Unix Tools Are Your Friends
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unix 工具是你的朋友
- en: The Unix Tools Are Your Friends
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unix 工具是你的朋友
- en: If on my way to exile on a desert island I had to choose between an IDE and
    the Unix toolchest, I'd pick the Unix tools without a second thought. Here are
    the reasons why you should become proficient with Unix tools.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在前往一个荒岛流放的途中，我必须在 IDE 和 Unix 工具箱之间做出选择，我会毫不犹豫地选择 Unix 工具。以下是你应该精通 Unix 工具的原因。
- en: First, IDEs target specific languages, while Unix tools can work with anything
    that appears in textual form. In today's development environment where new languages
    and notations spring up every year, learning to work in the Unix way is an investment
    that will pay off time and again.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，IDE 针对特定语言，而 Unix 工具可以处理任何以文本形式出现的东西。在今天每年涌现出新语言和符号的开发环境中，学习以 Unix 方式工作是一项将一次又一次得到回报的投资。
- en: 'Furthermore, while IDEs offer just the commands their developers conceived,
    with Unix tools you can perform any task you can imagine. Think of them as (classic
    pre-Bionicle) Lego blocks: You create your own commands simply by combining the
    small but versatile Unix tools. For instance, the following sequence is a text-based
    implementation of Cunningham''s signature analysis — a sequence of each file''s
    semicolons, braces, and quotes, which can reveal a lot about the file''s contents.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然 IDE 只提供其开发者构想的命令，但使用 Unix 工具可以执行任何你能想象到的任务。将它们视为（经典的 Bionicle 前）乐高积木：你只需简单地组合这些小巧但多才多艺的
    Unix 工具，就可以创建自己的命令。例如，以下序列是 Cunningham 的签名分析的文本实现 —— 每个文件的分号、大括号和引号序列，可以揭示文件内容的很多信息。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In addition, each IDE operation you learn is specific to that given task; for
    instance, adding a new step in a project's debug build configuration. By contrast,
    sharpening your Unix tool skills makes you more effective at any task. As an example,
    I've employed the sed tool used in the preceding command sequence to morph a project's
    build for cross-compiling on multiple processor architectures.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你学到的每个 IDE 操作都是针对特定任务的；例如，在项目的调试构建配置中添加一个新步骤。相比之下，磨练你的 Unix 工具技能使你在任何任务上都更加有效。举个例子，我曾经使用在前述命令序列中使用的
    sed 工具，将一个项目的构建修改为在多处理器架构上进行交叉编译。
- en: Unix tools were developed in an age when a multiuser computer had 128kB of RAM.
    The ingenuity that went into their design means that nowadays they can handle
    huge data sets extremely efficiently. Most tools work like filters, processing
    just a single line at the time, meaning that there is no upper limit in the amount
    of data they can handle. You want to search for the number of edits stored in
    the half-terabyte English Wikipedia dump? A simple invocation of
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 工具是在多用户计算机只有 128kB RAM 的时代开发的。设计它们的智慧意味着现在它们可以极其高效地处理大数据集。大多数工具都像过滤器一样工作，一次只处理一行，这意味着它们处理数据的数量没有上限。你想搜索存储在半
    TB 英文维基百科转储中的编辑次数？只需简单地调用
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: will give you the answer without sweat. If you find a command sequence generally
    useful, you can easily package it into a shell script, using some uniquely powerful
    programming constructs, such as piping data into loops and conditionals. Even
    more impressively, Unix commands executing as pipelines, like the preceding one,
    will naturally distribute their load among the many processing units of modern
    multicore CPUs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将为你轻松地提供答案。如果你发现一个命令序列通常很有用，你可以很容易地将其打包成一个 shell 脚本，使用一些独特强大的编程构造，比如将数据导入循环和条件语句。更令人印象深刻的是，像前述的
    Unix 命令执行管道一样，它们会自然地将负载分布在现代多核 CPU 的许多处理单元之间。
- en: The small-is-beautiful provenance and open source implementations of the Unix
    tools make them ubiquitously available, even on resource-constrained platforms,
    like my set-top media player or DSL router. Such devices are unlikely to offer
    a powerful graphical user interface, but they often include the BusyBox application,
    which provides the most commonly-used tools. And if you are developing on Windows,
    the Cygwin environment offers you all imaginable Unix tools, both as executables
    and in source code form.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 工具的小而美丽的渊源和开源实现使它们无处不在地可用，即使在资源受限的平台上，例如我的机顶盒媒体播放器或 DSL 路由器。这些设备不太可能提供强大的图形用户界面，但它们通常包含
    BusyBox 应用程序，该程序提供了最常用的工具。如果你在 Windows 上开发，Cygwin 环境会为你提供所有你能想象到的 Unix 工具，无论是可执行文件还是源代码形式。
- en: 'Finally, if none of the available tools match your needs, it''s very easy to
    extend the world of the Unix tools. Just write a program (in any language you
    fancy) that plays by a few simple rules: Your program should perform just a single
    task; it should read data as text lines from its standard input; and it should
    display its results unadorned by headers and other noise on its standard output.
    Parameters affecting the tool''s operation are given in the command line. Follow
    these rules and "yours is the Earth and everything that''s in it."'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果现有的工具都不符合你的需求，那么扩展Unix工具的世界就非常容易。只需编写一个程序（使用你喜欢的任何语言），遵循一些简单的规则即可：你的程序应该只执行一个单一的任务；它应该从标准输入读取数据作为文本行；它应该在标准输出上显示其结果，不加任何标题和其他干扰性内容。影响工具操作的参数在命令行中给出。遵循这些规则，“地球及其中的一切都属于你。”
- en: By [Diomidis Spinellis](http://programmer.97things.oreilly.com/wiki/index.php/Diomidis_Spinellis)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Diomidis Spinellis](http://programmer.97things.oreilly.com/wiki/index.php/Diomidis_Spinellis)
