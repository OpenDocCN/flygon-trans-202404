["```\ncp ~cs61as/lib/data_directed_programming.rkt . \n```", "```\n > (get 'foo 'baz)\n    #f\n    > (put 'foo 'baz 'hello)\n    > (get 'foo 'baz)\n    hello \n```", "```\n(define pi 3.141592654)\n\n;;this is the tagged-data version where types are processed by the generic procedure being called\n(define (make-square side)\n    (attach-tag 'square side))\n\n;;this is the tagged-data version where types are processed by the generic procedure being called\n(define (make-circle radius)\n    (attach-tag 'circle radius))\n\n;;this is the tagged-data version where types are processed by the generic procedure being called\n(define (area shape)\n    (cond ((eq? (type-tag shape) 'square)\n           (* (contents shape) (contents shape)))\n          ((eq? (type-tag shape) 'circle)\n           (* pi (contents shape) (contents shape)))\n          (else (error \"Unknown shape -- AREA\"))))\n\n;;this is the tagged-data version where types are processed by the generic procedure being called\n(define (perimeter shape)\n    (cond ((eq? (type-tag shape) 'square)\n           (* 4 (contents shape)))\n          ((eq? (type-tag shape) 'circle)\n           (* 2 pi (contents shape)))\n          (else (error \"Unknown shape -- PERIMETER\")))) \n```", "```\n;;this is the data-directed version where types and operations \n;;are handled by a data structure that stores the information\n(put 'square 'area (lambda (s) (* s s)))\n(put 'circle 'area (lambda (r) (* pi r r)))\n(put 'square 'perimeter (lambda (s) (* 4 s)))\n(put 'circle 'perimeter (lambda (r) (* 2 pi r))) \n```", "```\n;;this is the data-directed version where types and operations \n;;are handled by a data structure that stores the information    \n(define (area shape-obj)\n    (operate 'area shape-obj))\n\n(define (perimeter shape-obj)\n    (operate 'perimeter shape-obj))\n\n(define (operate op obj)\n    (let ((proc (get (type-tag obj) op)))\n      (if proc\n          (proc (contents obj))\n          (error \"Unknown operator for type\")))) \n```"]