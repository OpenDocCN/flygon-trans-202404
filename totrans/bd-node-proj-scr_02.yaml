- en: Express
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Express, the Node framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Expressjs](http://expressjs.com/) is the web application framework for Node.js
    apps.'
  prefs: []
  type: TYPE_NORMAL
- en: Express is a minimal and flexible node.js web application framework, providing
    a robust set of features for building single and multi-page, and hybrid web applications.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It has a wealth of [APIs](http://expressjs.com/4x/api.html) and is FAST AS HELL!!
  prefs: []
  type: TYPE_NORMAL
- en: Express is well known for NOT following after Rails as far as frameworks go,
    but more so it takes after another Ruby framework called [Sinatra](http://www.sinatrarb.com/).
    The concept is simple, the framework gives you enough to get things up and running
    as fast as possible and all without getting in your way.
  prefs: []
  type: TYPE_NORMAL
- en: For the most part, Express continues to live up to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: For this workshop, we will be using Express as the core tool for getting a web
    app up and running with a server, route support, error pages, loggers, etc ...
  prefs: []
  type: TYPE_NORMAL
- en: Install Express
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing Express with npm is really easy. Keep in mind that there are two
    parts to Express, the library that runs it and an awesome generator.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Express:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Generator version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Express 4.0 was recently released and there are some who are not jiggy with
    that. So, npm has a way of specifying the version of generator you install.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Create a new app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Crate a new Express app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you should be able to go forth and create an app. In this example,
    we will create a Node.js app with Express framework.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this command (using `demo-app` as the example), you should see the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: BOOM! Express takes care of most of the labor. Now, we do what the computer
    says, change directory into the app dir and run `npm install`.
  prefs: []
  type: TYPE_NORMAL
- en: What's in the app?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, you should be able to do a `ls` and see the new structure that
    was created for you.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: app.js
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is the logical starting point for your app. Some of the things in there,
    lets talk about:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines, for this type of app, we don''t need them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Sets the path to the dir where the view files are located:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Sets the path to the dir with static assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Sets the root route for the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: node_modules/
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the dir where all your npm packages will reside.
  prefs: []
  type: TYPE_NORMAL
- en: public/
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Directory for all static assets like images, JavaScript, CSS, fonts, etc ...
  prefs: []
  type: TYPE_NORMAL
- en: views/
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Where all your layout and view Jade files will live.
  prefs: []
  type: TYPE_NORMAL
- en: bin/
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is a single file here, `www` and this is what activate the Node server.
  prefs: []
  type: TYPE_NORMAL
- en: package.json
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Project description, scripts manager and the app manifest. Notice the following
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is the code that allows you to run `npm start` for the app.
  prefs: []
  type: TYPE_NORMAL
- en: routes/
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the directory where you will build out the RESTful routes for your app.
    With a base install there should be two files in there, `index.js` and `users.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fun with Routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `app.VERB()` methods provide the routing functionality in Express, where
    **VERB** is one of the HTTP verbs, such as `app.post()`. Multiple callbacks may
    be given, all are treated equally, and behave just like middleware, with the one
    exception that these callbacks may invoke `next('route')` to bypass the remaining
    route callback(s). This mechanism can be used to perform pre-conditions on a route
    then pass control to subsequent routes when there is no reason to proceed with
    the route matched.
  prefs: []
  type: TYPE_NORMAL
- en: The following snippet illustrates the most simple route definition possible.
    Express translates the path strings to regular expressions, used internally to
    match incoming requests. Query strings are **not** considered when peforming these
    matches, for example `GET /` would match the following route, as would `GET /?name=tobi`.
  prefs: []
  type: TYPE_NORMAL
- en: '[source](http://expressjs.com/4x/api.html#app.VERB)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Lets get into setting up some routes. In the `app.js` file the following line
    is how this comes together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: What's happening here? Basically, Express is setting the `var` of `routes` to
    require the path and file of `./routes.index`.
  prefs: []
  type: TYPE_NORMAL
- en: This var is then used to set the root path of the app
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Another thing we can do is `res.send()` and what ever we put in there will
    get sent directly to the browser. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using the `res.send()` we can do fun things like even send in JSON objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This method allows us to then keep all our routes in the `index.js` file if
    needed. There are better ways to address a more complicated routing solution,
    but for the scope of this workshop, this is great.
  prefs: []
  type: TYPE_NORMAL
- en: What's in the index.js file?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Looking at our `index.js` file you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: router.get
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This is the function that will 'get' the URL path of `/`. Then we need to create
    a function that will make a `req` (request) and `res` (response). The is another
    concept of `next` for chaining events would go here as well, but not shown in
    this example.
  prefs: []
  type: TYPE_NORMAL
- en: What is module.exports?
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This is the object that's actually returned as the result of a require call.
    This is a Node feature, more on this at [nodejs.org/api](http://nodejs.org/api/modules.html#modules_module_exports).
  prefs: []
  type: TYPE_NORMAL
- en: Build a new route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Looking at the syntax pattern, if we wanted to add a new route to the app,
    we can simply do something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep in mind that the value of the URL, `/app`, does not need to be the same
    value of the file itself. If the name of the view was `foo.jade` we could do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: It's a route? It's a controller?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What''s interesting about this is that the route function is containing logic.
    Inside the route is a `res.render` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the view template we see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'These are two examples of how we can pull data from the ''controller/route''
    and display in the view. In this example we get the HTML output of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: All of this seems to be a bleed of concerns as the route may also contain controller
    info? This is true and there is a movement in the community to change the name
    of the dir from `routes` to `controllers`.
  prefs: []
  type: TYPE_NORMAL
- en: A great example of this can be seen at [Holowaychuk](https://github.com/visionmedia/express/tree/master/examples/mvc)'s
    Express MVC example repo.
  prefs: []
  type: TYPE_NORMAL
- en: But for the sake of this workshop and consistency, we will keep the current
    convention.
  prefs: []
  type: TYPE_NORMAL
- en: 404 errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 404 errors?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Errors are already addressed in Express for you. In the `app.js` file, there
    is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Then in the `views/` dir, there is `errors.jade`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Simple. If you want to customize your 404 page, simply edit this view.
  prefs: []
  type: TYPE_NORMAL
