["```\n(define (how-many a b c)\u00a0 (cond [(> (* b b) (* 4 a c)) 2]\u00a0 \u00a0 \u00a0 \u00a0 [(= (* b b) (* 4 a c)) 1]\u00a0 \u00a0 \u00a0 \u00a0 [(< (* b b) (* 4 a c)) 0]))\n```", "```\n(define (how-many-helper b^2 4ac) ; note: valid names!\u00a0 (cond [(> b^2 4ac) 2]\u00a0 \u00a0 \u00a0 \u00a0 [(= b^2 4ac) 1]\u00a0 \u00a0 \u00a0 \u00a0 [else\u00a0 \u00a0 \u00a0 \u00a0 0]))(define (how-many a b c)\u00a0 (how-many-helper (* b b) (* 4 a c)))\n```", "```\n(let ([id expr] ...) expr)\n```", "```\n(let ([x 1] [y 2]) (+ x y))\n```", "```\n(let ([x 1] [y 2])\u00a0 (let ([x y] [y x])\u00a0 \u00a0 (list x y)))\n```", "```\n(define (how-many a b c)\u00a0 (let ([b^2 (* b b)]\u00a0 \u00a0 \u00a0 \u00a0 [4ac (* 4 a c)])\u00a0 \u00a0 (cond [(> b^2 4ac) 2]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [(= b^2 4ac) 1]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [else\u00a0 \u00a0 \u00a0 \u00a0 0])))\n```", "```\n    (define (how-many a b c)\u00a0 (cond\u00a0 \u00a0 [(> (* b b) (* 4 a c)) 2]\u00a0 \u00a0 [(= (* b b) (* 4 a c)) 1]\u00a0 \u00a0 [(< (* b b) (* 4 a c)) 0]))(define (what-kind a b c)\u00a0 (cond\u00a0 \u00a0 [(= a 0) 'degenerate]\u00a0 \u00a0 [(> (* b b) (* 4 a c)) 'two]\u00a0 \u00a0 [(= (* b b) (* 4 a c)) 'one]\u00a0 \u00a0 [(< (* b b) (* 4 a c)) 'none]))\n    ```", "```\n    (if (< x 100) #t #f)\n    ```", "```\n    (< x 100)\n    ```", "```\n    (if x #t y)\u00a0  --same-as-->\u00a0 (or x y)(if x y #f)\u00a0  --same-as-->\u00a0 (and x y)(if x #f #t)\u00a0 --same-as-->\u00a0 (not x)\n    ```", "```\n    (define (interest x)\u00a0 (* x (cond\u00a0 \u00a0 [(and (> x 0) (<= x 1000)) 0.04]\u00a0 \u00a0 [(and (> x 1000) (<= x 5000)) 0.045]\u00a0 \u00a0 [else 0.05])))(define (how-many a b c)\u00a0 (cond ((> (* b b) (* (* 4 a) c))\u00a0 \u00a0 \u00a0 \u00a0  2)\u00a0 \u00a0 \u00a0 \u00a0 ((< (* b b) (* (* 4 a) c))\u00a0 \u00a0 \u00a0 \u00a0  0)\u00a0 \u00a0 \u00a0 \u00a0 (else\u00a0 \u00a0 \u00a0 \u00a0  1)))(define (what-kind a b c)\u00a0 (if (equal? a 0) 'degenerate\u00a0 \u00a0 \u00a0 (if (equal? (how-many a b c) 0) 'zero\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (if (equal? (how-many a b c) 1) 'one\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'two)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 )\u00a0 )(define (interest deposit)\u00a0 (cond\u00a0 [(< deposit 0) \"invalid deposit\"]\u00a0 [(and (>= deposit 0) (<= deposit 1000)) (* deposit 1.04) ]\u00a0 [(and (> deposit 1000) (<= deposit 5000)) (* deposit 1.045)]\u00a0 [(> deposit 5000) (* deposit 1.05)]))(define (interest deposit)\u00a0 (if (< deposit 1001) (* 0.04 deposit)\u00a0 \u00a0 (if (< deposit 5001) (* 0.045 deposit)\u00a0 \u00a0 (* 0.05 deposit))))(define (what-kind a b c) (cond ((= 0 a) 'degenerate)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (else (cond ((> (* b b)(*(* 4 a) c)) 'two)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (else (cond ((= (* b b)(*(* 4 a) c)) 'one)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (else 'none)))))));\n    ```"]