- en: オブジェクト
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: オブジェクト
- en: 原文：[https://jsprimer.net/basic/object/](https://jsprimer.net/basic/object/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/basic/object/](https://jsprimer.net/basic/object/)
- en: オブジェクトはプロパティの集合です。プロパティとは名前（キー）と値（バリュー）が対になったものです。 プロパティのキーには文字列または`Symbol`が利用でき、値には任意のデータを指定できます。
    また、1つのオブジェクトは複数のプロパティを持てるため、1つのオブジェクトで多種多様な値を表現できます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトはプロパティの集合です。プロパティとは名前（キー）と値（バリュー）が対になったものです。 プロパティのキーには文字列または`Symbol`が利用でき、値には任意のデータを指定できます。
    また、1つのオブジェクトは複数のプロパティを持てるため、1つのオブジェクトで多種多様な値を表現できます。
- en: 今までも登場してきた、配列や関数などもオブジェクトの一種です。 JavaScriptには、あらゆるオブジェクトの元となる`Object`というビルトインオブジェクトがあります。
    ビルトインオブジェクトは、実行環境にあらかじめ定義されているオブジェクトのことです。 `Object`というビルトインオブジェクトはECMAScriptの仕様で定義されているため、あらゆるJavaScriptの実行環境で利用できます。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 今までも登場してきた、配列や関数などもオブジェクトの一種です。 JavaScriptには、あらゆるオブジェクトの元となる`Object`というビルトインオブジェクトがあります。
    ビルトインオブジェクトは、実行環境にあらかじめ定義されているオブジェクトのことです。 `Object`というビルトインオブジェクトはECMAScriptの仕様で定義されているため、あらゆるJavaScriptの実行環境で利用できます。
- en: この章では、オブジェクトの作成や扱い方、`Object`というビルトインオブジェクトについて見ていきます。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: この章では、オブジェクトの作成や扱い方、`Object`というビルトインオブジェクトについて見ていきます。
- en: '[](#create-object)*オブジェクトを作成する*'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#create-object)*オブジェクトを作成する*'
- en: '*オブジェクトを作成するには、オブジェクトリテラル（`{}`）を利用します。'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*オブジェクトを作成するには、オブジェクトリテラル（`{}`）を利用します。'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: オブジェクトリテラルでは、初期値としてプロパティを持つオブジェクトを作成できます。 プロパティは、オブジェクトリテラル（`{}`）の中にキーと値を`:`（コロン）で区切って記述します。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトリテラルでは、初期値としてプロパティを持つオブジェクトを作成できます。 プロパティは、オブジェクトリテラル（`{}`）の中にキーと値を`:`（コロン）で区切って記述します。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: オブジェクトリテラルのプロパティ名（キー）はクォート（`"`や`'`）を省略できます。 そのため、次のように書いても同じです。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトリテラルのプロパティ名（キー）はクォート（`"`や`'`）を省略できます。 そのため、次のように書いても同じです。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: ただし、変数名として利用できないプロパティ名はクォート（`"`や`'`）で囲む必要があります。 次の`my-prop`というプロパティ名は、変数名として利用できない`-`が含まれているため定義できません（「[変数と宣言](../variables/
    "変数と宣言")」の章の「[変数名に使える名前のルール](../variables/#variable-name) 」を参照）
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ただし、変数名として利用できないプロパティ名はクォート（`"`や`'`）で囲む必要があります。 次の`my-prop`というプロパティ名は、変数名として利用できない`-`が含まれているため定義できません（「[変数と宣言](../variables/
    "変数と宣言")」の章の「[変数名に使える名前のルール](../variables/#variable-name) 」を参照）
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`my-prop`というプロパティ名を定義する場合は、クォート（`"`や`''`）で囲む必要があります。'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`my-prop`というプロパティ名を定義する場合は、クォート（`"`や`''`）で囲む必要があります。'
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: オブジェクトリテラルでは複数のプロパティ（キーと値の組み合わせ）を持つオブジェクトも作成できます。 複数のプロパティを定義するには、それぞれのプロパティを`,`（カンマ）で区切ります。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトリテラルでは複数のプロパティ（キーと値の組み合わせ）を持つオブジェクトも作成できます。 複数のプロパティを定義するには、それぞれのプロパティを`,`（カンマ）で区切ります。
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: プロパティの値に変数名を指定すれば、そのキーは指定した変数を参照します。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: プロパティの値に変数名を指定すれば、そのキーは指定した変数を参照します。
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: またES2015からは、プロパティ名と値に指定する変数名が同じ場合は`{ name }`のように省略して書けます。 次のコードは、プロパティ名`name`に変数`name`を値にしたプロパティを設定しています。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ��たES2015からは、プロパティ名と値に指定する変数名が同じ場合は`{ name }`のように省略して書けます。 次のコードは、プロパティ名`name`に変数`name`を値にしたプロパティを設定しています。
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: この省略記法は、モジュールや分割代入においても共通した表現です。 そのため、`{}`の中でプロパティ名が単独で書かれている場合は、この省略記法を利用していることに注意してください。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: この省略記法は、モジュールや分割代入においても共通した表現です。 そのため、`{}`の中でプロパティ名が単独で書かれている場合は、この省略記法を利用していることに注意してください。
- en: '[](#object-instance-object)*`{}`は`Object`のインスタンスオブジェクト*'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#object-instance-object)*`{}`は`Object`のインスタンスオブジェクト*'
- en: '*`Object`はJavaScriptのビルトインオブジェクトです。 オブジェクトリテラル（`{}`）は、このビルトインオブジェクトである`Object`を元にして新しいオブジェクトを作成するための構文です。'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Object`はJavaScriptのビルトインオブジェクトです。 オブジェクトリテラル（`{}`）は、このビルトインオブジェクトである`Object`を元にして新しいオブジェクトを作成するための構文です。'
- en: オブジェクトリテラル以外の方法として、`new`演算子を使うことで、`Object`から新しいオブジェクトを作成できます。 次のコードでは、`new Object()`でオブジェクトを作成していますが、これは空のオブジェクトリテラルと同じ意味です。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトリテラル以外の方法として、`new`演算子を使うことで、`Object`から新しいオブジェクトを作成できます。 次のコードでは、`new Object()`でオブジェクトを作成していますが、これは空のオブジェクトリテラルと同じ意味です。
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: オブジェクトリテラルのほうが明らかに簡潔で、プロパティの初期値も指定できるため、`new Object()`を使う利点はありません。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトリテラルのほうが明らかに簡潔で、プロパティの初期値も指定できるため、`new Object()`を使う利点はありません。
- en: '`new Object()`でオブジェクトを作成することは、「`Object`のインスタンスオブジェクトを作成する」と言います。 しかしながら、`Object`やインスタンスオブジェクトなどややこしい言葉の使い分けが必要となってしまいます。
    そのため、この書籍ではオブジェクトリテラルと`new Object`どちらの方法であっても、単に「オブジェクトを作成する」と呼びます。'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`new Object()`でオブジェクトを作成することは、「`Object`のインスタンスオブジェクトを作成する」と言います。 しかしながら、`Object`やインスタンスオブジェクトなどややこしい言葉の使い分けが必要となってしまいます。
    そのため、この書籍ではオブジェクトリテラルと`new Object`どちらの方法であっても、単に「オブジェクトを作成する」と呼びます。'
- en: オブジェクトリテラルは、`Object`から新しいインスタンスオブジェクトを作成していることを意識しておくとよいでしょう。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトリテラルは、`Object`から新しいインスタンスオブジェクトを作成していることを意識しておくとよいでしょう。
- en: '[](#property-access)*プロパティへのアクセス*'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#property-access)*プロパティへのアクセス*'
- en: '*オブジェクトのプロパティにアクセスする方法として、ドット記法（`.`）を使う方法とブラケット記法（`[]`）があります。 それぞれの記法でプロパティ名を指定すると、その名前を持ったプロパティの値を参照できます。'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*オブジェクトのプロパティにアクセスする方法として、**ドット記法**（`.`）を使う方法と**ブラケット記法**（`[]`）があります。 それぞれの記法でプロパティ名を指定すると、その名前を持ったプロパティの値を参照できます。'
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ドット記法（`.`）では、プロパティ名が変数名と同じく識別子の命名規則を満たす必要があります（「[変数と宣言](../variables/ "変数と宣言")」の章の「[変数名に使える名前のルール](../variables/#variable-name)
    」を参照）。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ドット記法（`.`）では、プロパティ名が変数名と同じく識別子の命名規則を満たす必要があります（「[変数と宣言](../variables/ "変数と宣言")」の章の「[変数名に使える名前のルール](../variables/#variable-name)
    」を参照）。
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 一方、ブラケット記法では、`[`と`]`の間に任意の式を書けます。 そのため、識別子の命名規則とは関係なく、任意の文字列をプロパティ名として指定できます。
    ただし、プロパティ名は文字列へと暗黙的に変換されることに注意してください。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一方、**ブラケット記法**では、`[`と`]`の間に任意の式を書けます。 そのため、識別子の命名規則とは関係なく、任意の文字列をプロパティ名として指定できます。
    ただし、プロパティ名は文字列へと暗黙的に変換されることに注意してください。
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: また、ブラケット記法ではプロパティ名に変数も利用できます。 次のコードでは、プロパティ名に`myLang`という変数をブラケット記法で指定しています。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: また、ブラケット記法ではプロパティ名に変数も利用できます。 次のコードでは、プロパティ名に`myLang`という変数をブラケット記法で指定しています。
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: ドット記法ではプロパティ名に変数は利用できないため、プロパティ名に変数を指定したい場合はブラケット記法を利用します。 基本的には簡潔なドット記法（`.`）を使い、ドット記法で書けない場合はブラケット記法（`[]`）を使うとよいでしょう。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: ドット記法ではプロパティ名に変数は利用できないため��プロパティ名に変数を指定したい場合はブラケット記法を利用します。 基本的には簡潔なドット記法（`.`）を使い、ドット記法で書けない場合はブラケット記法（`[]`）を使うとよいでしょう。
- en: '[](#object-destructuring)*[ES2015] オブジェクトと分割代入*'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#object-destructuring)*[ES2015] オブジェクトと分割代入*'
- en: '*同じオブジェクトのプロパティに何度もアクセスする場合に、何度も`オブジェクト.プロパティ名`と書くと冗長となりやすいです。 そのため、短い名前で利用できるように、そのプロパティを変数として定義し直すことがあります。'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*同じオブジェクトのプロパティに何度もアクセスする場合に、何度も`オブジェクト.プロパティ名`と書くと冗長となりやすいです。 そのため、短い名前で利用できるように、そのプロパティを変数として定義し直すことがあります。'
- en: 次のコードでは、変数`ja`と`en`を定義し、その初期値として`languages`オブジェクトのプロパティを代入しています。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、変数`ja`と`en`を定義し、その初期値として`languages`オブジェクトのプロパティを代入しています。
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: このようにオブジェクトのプロパティを変数として定義し直すときには、分割代入（Destructuring assignment）が利用できます。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: このようにオブジェクトのプロパティを変数として定義し直すときには、分割代入（Destructuring assignment）が利用できます。
- en: オブジェクトの分割代入では、左辺にオブジェクトリテラルのような構文で変数名を定義します。 右辺のオブジェクトから対応するプロパティ名が、左辺で定義した変数に代入されます。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトの分割代入では、左辺にオブジェクトリテラルのような構文で変数名を定義します。 右辺のオブジェクトから対応するプロパティ名が、左辺で定義した変数に代入されます。
- en: 次のコードでは、先ほどのコードと同じように`languages`オブジェクトから`ja`と`en`プロパティを取り出して変数として定義しています。 代入演算子のオペランドとして左辺と右辺それぞれに`ja`と`en`と書いていたのが、分割代入では一箇所に書くことができます。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、先ほどのコードと同じように`languages`オブジェクトから`ja`と`en`プロパティを取り出して変数として定義しています。 代入演算子のオペランドとして左辺と右辺それぞれに`ja`と`en`と書いていたのが、分割代入では一箇所に書くことができます。
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[](#add-property)*プロパティの追加*'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*オブジェクトは、一度作成した後もその値自体を変更できるというミュータブル（mutable）の特性を持ちます。 そのため、作成したオブジェクトに対して、後からプロパティを追加できます。'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: プロパティの追加方法は単純で、作成したいプロパティ名へ値を代入するだけです。 そのとき、オブジェクトに指定したプロパティが存在しないなら、自動的にプロパティが作成されます。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: プロパティの追加はドット記法、ブラケット記法どちらでも可能です。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 先ほども紹介したように、ドット記法は変数の識別子として利用可能なプロパティ名しか利用できません。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 一方、ブラケット記法は`object[式]`の`式`の評価結果を文字列にしたものをプロパティ名として利用できます。 そのため、次のものをプロパティ名として扱う場合にはブラケット記法を利用します。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 変数
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 変数の識別子として扱えない文字列
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symbol
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: ブラケット記法を用いたプロパティ定義は、オブジェクトリテラルの中でも利用できます。 オブジェクトリテラル内でのブラケット記法を使ったプロパティ名は**Computed
    property names**と呼ばれます。 Computed property namesはES2015から導入された記法ですが、`式`の評価結果をプロパティ名に使う点はブラケット記法と同じです。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、Computed property namesを使い`key`変数の評価結果である`"key-string"`をプロパティ名にしています。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: JavaScriptのオブジェクトは、作成後にプロパティが変更可能というmutableの特性を持つことを紹介しました。 そのため、関数が受け取ったオブジェクトに対して、勝手にプロパティを追加できてしまいます。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードは、`changeProperty`関数が引数として受け取ったオブジェクトにプロパティを追加している悪い例です。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: このように、プロパティを初期化時以外に追加してしまうと、そのオブジェクトがどのようなプロパティを持っているかがわかりにくくなります。 そのため、できる限り作成後に新しいプロパティは追加しないほうがよいでしょう。
    オブジェクトの作成時のオブジェクトリテラルの中でプロパティを定義することを推奨します。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[](#remove-property)*プロパティの削除*'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*オブジェクトのプロパティを削除するには`delete`演算子を利用します。 削除したいプロパティを`delete`演算子の右辺に指定して、プロパティを削除できます。'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[](#const-and-object)*[コラム] constで定義したオブジェクトは変更可能*'
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*先ほどのコード例で、`const`で宣言したオブジェクトのプロパティがエラーなく変更できていることがわかります。 次のコードを実行してみると、値であるオブジェクトのプロパティが変更できていることがわかります。'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: JavaScriptの`const`は値を固定するのではなく、変数への再代入を防ぐためのものです。 そのため、次のような`obj`変数への再代入は防げますが、変数に代入された値であるオブジェクトの変更は防げません（「[変数と宣言](../variables/
    "変数と宣言")」の[const](../variables/#const)を参照）。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 作成したオブジェクトのプロパティの変更を防止するには`Object.freeze`メソッドを利用する必要があります。 `Object.freeze`はオブジェクトを凍結します。凍結されたオブジェクトでプロパティの追加や変更をすると例外が発生するようになります。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: ただし、`Object.freeze`メソッドを利用する場合は必ずstrict modeと合わせて使います（詳細は「[JavaScriptとは](../introduction/)」の[strict
    mode](../introduction/#strict-mode)を参照）。 strict modeではない場合は、凍結されたオブジェクトのプロパティを変更しても例外が発生せずに単純に無視されます。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[](#confirm-property)*プロパティの存在を確認する*'
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*JavaScriptでは、存在しないプロパティに対してアクセスした場合に例外ではなく`undefined`を返します。 次のコードは、`obj`には存在しない`notFound`プロパティにアクセスしているため、`undefined`という値が返ってきます。'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: このように、JavaScriptでは存在しないプロパティへアクセスした場合に例外が発生しません。 プロパティ名を間違えた場合に単に`undefined`という値を返すため、間違いに気づきにくいという問題があります。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 次のようにプロパティ名を間違えていた場合にも、例外が発生しません。 さらにプロパティ名をネストしてアクセスした場合に、初めて例外が発生します。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`undefined`や`null`はオブジェクトではないため、存在しないプロパティへアクセスすると例外が発生してしまいます。 あるオブジェクトがあるプロパティを持っているかを確認する方法として、次の4つがあります。'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '`undefined`との比較'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in`演算子'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Object.hasOwn`静的メソッド^([ES2022])'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Object.prototype.hasOwnProperty`メソッド'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](#compare-to-undefined)*プロパティの存在確認: undefinedとの比較*'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*存在しないプロパティへアクセスした場合に`undefined`を返すため、実際にプロパティアクセスすることでも判定できそうです。 次のコードでは、`key`プロパティの値が`undefined`ではないという条件式で、プロパティが存在するかを判定しています。'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: しかし、この方法はプロパティの値が`undefined`であった場合に、プロパティそのものが存在するかを区別できないという問題があります。 次のコードでは、`key`プロパティの値が`undefined`であるため、プロパティが存在しているにもかかわらずif文の中は実行されません。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: このような問題があるため、プロパティが存在するかを判定するには`in`演算子か`Object.hasOwn`静的メソッドを利用します。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[](#in-operator)*プロパティの存在確認: in演算子を使う*'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`in`演算子は、指定したオブジェクト上に指定したプロパティがあるかを判定し真偽値を返します。'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 次のコードでは`obj`に`key`プロパティが存在するかを判定しています。 `in`演算子は、プロパティの値は関係なく、プロパティが存在した場合に`true`を返します。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[](#object-hasown-method)*[ES2022] プロパティの存在確認: `Object.hasOwn`静的メソッド*'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`Object.hasOwn`静的メソッドは、対象のオブジェクトが指定したプロパティを持っているかを判定できます。 この`Object.hasOwn`静的メソッドの引数には、オブジェクトとオブジェクトが持っているかを確認したいプロパティ名を渡します。'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Object.hasOwn`静态方法可以确定目标对象是否具有指定的属性。 将要检查的属性名称作为`Object.hasOwn`静态方法的参数传递给它。'
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 次のコードでは`obj`に`key`プロパティが存在するかを判定しています。 `Object.hasOwn`静的メソッドも、プロパティの値は関係なく、オブジェクトが指定したプロパティを持っている場合に`true`を返します。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码判断了`obj`是否具有`key`属性。 `Object.hasOwn`静态方法也是如此，无论属性的值如何，只要对象具有指定的属性，它就会返回`true`。
- en: '[PRE30]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`in`演算子と`Object.hasOwn`静的メソッドは同じ結果を返していますが、厳密には動作が異なるケースもあります。 この動作の違いを知るにはまずプロトタイプオブジェクトという特殊なオブジェクトについて理解する必要があります。
    そのため、`in`演算子と`Object.hasOwn`静的メソッドの違いについては、次の章の「[プロトタイプオブジェクト](../prototype-object/
    "クラス")」で詳しく解説します。'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`in`操作符和`Object.hasOwn`静态方法返回相同的结果，但在严格意义上它们的行为有时会有所不同。 要了解这种行为上的差异，首先需要理解特殊对象——原型对象。
    因此，关于`in`操作符和`Object.hasOwn`静态方法的区别，将在下一章的“[原型对象](../prototype-object/ "类")”中详细解释。'
- en: '[](#hasOwnProperty-method)*プロパティの存在確認: `Object.prototype.hasOwnProperty`メソッド*'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#hasOwnProperty-method)*检查属性是否存在：`Object.prototype.hasOwnProperty`方法*'
- en: '*`Object.hasOwn`静的メソッドはES2022で導入されたメソッドです。 ES2022より前では、`Object.prototype.hasOwnProperty`メソッドというよく似たメソッドが利用されていました。
    `hasOwnProperty`メソッドは、`Object.hasOwn`静的メソッドとよく似ていますが、オブジェクトのインスタンスから呼び出す点が異なります。'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Object.hasOwn`静态方法是在ES2022中引入的。 在ES2022之前，通常使用类似的方法`Object.prototype.hasOwnProperty`。
    `hasOwnProperty`方法与`Object.hasOwn`静态方法非常相似，但它们在调用它们的对象实例方面有所不同。'
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: しかし、`hasOwnProperty`メソッドには欠点があるため、`Object.hasOwn`静的メソッドが利用できる状況では使う理由はありません。
    この欠点もプロトタイプオブジェクトに関係するため、次の章の「[プロトタイプオブジェクト](../prototype-object/ "クラス")」で詳しく解説します。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于`hasOwnProperty`方法存在缺陷，因此在可以使用`Object.hasOwn`静态方法的情况下，没有理由使用它。 由于这个缺陷也与原型对象有关，所以将在下一章的“[原型对象](../prototype-object/
    "类")”中详细解释。
- en: '[](#optional-chaining-operator)*[ES2020] Optional chaining演算子（`?.`）*'
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#optional-chaining-operator)*[ES2020] 可选链操作符（`?.`）*'
- en: '*プロパティの存在を確認する方法として4つの方法を紹介しました。 プロパティが存在するかが重要な場合は、基本的には`in`演算子または`Object.hasOwn`静的メソッドを使います。'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*介绍了4种检查属性是否存在的方法。 如果属性的存在很重要，通常会使用`in`操作符或`Object.hasOwn`静态方法。*'
- en: しかし、最終的に取得したいものがプロパティの値であるならば、if文で`undefined`と比較しても問題ありません。 なぜなら、値を取得したい場合には、プロパティが存在するかどうかとプロパティの値が`undefined`かどうかの違いを区別する意味はないためです。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果最终想要获取的是属性的值，则使用if语句与`undefined`进行比较也没有问题。 因为当需要获取值时，区分属性是否存在以及属性的值是否为`undefined`并没有意义。
- en: 次のコードでは、`widget.window.title`プロパティに値が定義されているなら(`undefined`ではないなら)、そのプロパティの値をコンソールに表示しています。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码如果定义了`widget.window.title`属性的值（不是`undefined`），则将该属性的值显示在控制台上。
- en: '[PRE32]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: この`widget.window.title`のようなネストしたプロパティにアクセスする際には、プロパティの存在を順番に確認してからアクセスする必要があります。
    なぜなら、`widget`オブジェクトが`window`プロパティを持っていない場合は`undefined`という値を返すためです。このときに、さらにネストした`widget.window.title`プロパティにアクセスすると、`undefined.title`という参照となり例外が発生してしまいます。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问嵌套属性（如`widget.window.title`）时，必须逐个检查属性的存在。 这是因为如果`widget`对象不具有`window`属性，则会返回`undefined`。
    在这种情况下，如果进一步访问嵌套的`widget.window.title`属性，则会导致引用`undefined.title`，从而导致异常。
- en: しかし、プロパティへアクセスするたびに`undefined`との比較をAND演算子（`&&`）でつなげて書いていくと冗長です。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每次访问属性时都用AND操作符（`&&`）与`undefined`进行比较会显得冗长。
- en: この問題を解決するために、ES2020ではネストしたプロパティの存在確認とアクセスを簡単に行う構文としてOptional chaining演算子（`?.`）が導入されました。
    Optional chaining演算子（`?.`）は、ドット記法（`.`）の代わりに`?.`をプロパティアクセスに使います。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，在ES2020中引入了一个新的语法，即可选链操作符（`?.`）。 可选链操作符（`?.`）与点表示法（`.`）类似，用于访问属性。
- en: Optional chaining演算子（`?.`）は左辺のオペランドがnullish（`null`または`undefined`）の場合は、それ以上評価せずに`undefined`を返します。一方で、プロパティが存在する場合は、そのプロパティの評価結果を返します。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 可选链操作符（`?.`）在左操作数为nullish（`null`或`undefined`）时不会继续评估并返回`undefined`。 反之，如果属性存在，则返回该属性的值。
- en: つまり、Optional chaining演算子（`?.`）では、存在しないプロパティへアクセスした場合でも例外ではなく、`undefined`という値を返します。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，可选链操作符（`?.`）在访问不存在的属性时不会引发异常，而是返回`undefined`。
- en: '[PRE33]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 先ほどのウィジェットのタイトルを表示する関数もOptional chaining演算子（`?.`）を使うと、if文を使わずに書けます。 次のコードの`printWidgetTitle`関数では、`widget?.window?.title`にアクセスできる場合はその評価結果が変数`title`に入ります。
    プロパティにアクセスできない場合は`undefined`を返すため、Nullish coalescing演算子(`??`)によって右辺の`"未定義"`が変数`title`のデフォルト値となります。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Optional chaining操作符（`?.`）时，甚至不需要使用if语句就可以编写一个函数来显示上述小部件的标题。 在下面的`printWidgetTitle`函数中，如果可以访问`widget?.window?.title`，那么它的评估结果将被赋给变量`title`。
    如果无法访问属性，则返回`undefined`，因此通过Nullish coalescing操作符(`??`)，右侧的`"未定义"`将成为变量`title`的默认值。
- en: '[PRE34]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: また、Optional chaining演算子（`?.`）はブラケット記法（`[]`）と組み合わせることもできます。 ブラケット記法の場合も、左辺のオペランドがnullish（`null`または`undefined`）の場合は、それ以上評価せずに`undefined`を返します。一方で、プロパティが存在する場合は、そのプロパティの評価結果を返します。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可选链操作符（`?.`）也可以与方括号表示法（`[]`）结合使用。 在方括号表示法中，如果左操作数为nullish（`null`或`undefined`），则不会继续评估并返回`undefined`。
    反之，如果属性存在，则返回该属性的值。
- en: '[PRE35]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[](#toString-method)*`toString`メソッド*'
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#toString-method)*`toString`方法*'
- en: '*オブジェクトの`toString`メソッドは、オブジェクト自身を文字列化するメソッドです。 `String`コンストラクタ関数を使うことでも文字列化できます。
    この2つにはどのような違いがあるのでしょうか？（`String`コンストラクタ関数については「[暗黙的な型変換](../implicit-coercion/#to-string)」を参照）'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*对象的`toString`方法是一种将对象本身转换为字符串的方法。 也可以使用`String`构造函数来执行此操作。 那么这两者有什么区别呢？（关于`String`构造函数，请参阅“[隐式强制类型转换](../implicit-coercion/#to-string)”）*'
- en: 実は`String`コンストラクタ関数は、引数に渡されたオブジェクトの`toString`メソッドを呼び出しています。 そのため、`String`コンストラクタ関数と`toString`メソッドの結果はどちらも同じになります。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上`String`构造函数会调用传递给它的对象的`toString`方法。因此，`String`构造函数和`toString`方法的结果都是相同的。
- en: '[PRE36]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: このことは、オブジェクトに`toString`メソッドを再定義してみるとわかります。 独自の`toString`メソッドを定義したオブジェクトを`String`コンストラクタ関数で文字列化してみます。
    すると、再定義した`toString`メソッドの返り値が、`String`コンストラクタ関数の返り値になることがわかります。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点可以通过重新定义对象的`toString`方法来理解。 试着将自定义的`toString`方法定义为对象，然后尝试使用`String`构造函数将其转换为字符串。
    结果会发现，重新定义的`toString`方法的返回值将成为`String`构造函数的返回值。
- en: '[PRE37]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[](#object-property-is-to-string)*[コラム] オブジェクトのプロパティ名は文字列化される*'
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#object-property-is-to-string)*[专栏] 对象属性名会被转换为字符串*'
- en: '*オブジェクトのプロパティへアクセスする際に、指定したプロパティ名は暗黙的に文字列に変換されます。 ブラケット記法では、オブジェクトをプロパティ名に指定することもできますが、これは意図したようには動作しません。
    なぜなら、オブジェクトを文字列化すると`"[object Object]"`という文字列になるためです。'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*在访问对象的属性时，指定的属性名会被隐式转换为字符串。 使用方括号表示法时，可以将对象作为属性名指定，但这并不会按预期工作。 这是因为将对象转换为字符串会得到`"[object
    Object]"`这样的字符串。'
- en: 次のコードでは、`keyObject1`と`keyObject2`をブラケット記法でプロパティ名に指定しています。 しかし、`keyObject1`と`keyObject2`はどちらも文字列化すると`"[object
    Object]"`という同じプロパティ名となります。 そのため、プロパティは意図せず上書きされてしまいます。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码中，使用方括号表示法指定了`keyObject1`和`keyObject2`作为属性名。 但是，`keyObject1`和`keyObject2`都会被转换为相同的`"[object
    Object]"`字符串，导致属性被意外覆盖。
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 唯一の例外として、Symbolだけは文字列化されずにオブジェクトのプロパティ名として扱えます。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 作为唯一的例外，Symbol不会被转换为字符串，可以作为对象的属性名。
- en: '[PRE39]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 基本的にはオブジェクトのプロパティ名は文字列として扱われることを覚えておくとよいでしょう。 また、`Map`というビルトインオブジェクトはオブジェクトをキーとして扱えます（詳細は「[Map/Set](../map-and-set/)」の章で解説します）。
    そのため、オブジェクトをキーに指定したい場合は`Map`を利用します。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，应该记住对象的属性名被视为字符串。 此外，内置对象`Map`可以将对象用作键（详细信息请参阅“[Map/Set](../map-and-set/)”章节）。
    因此，如果要将对象用作键，则应使用`Map`。
- en: '[](#static-method)*オブジェクトの静的メソッド*'
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#static-method)*对象的静态方法*'
- en: '*最後にビルトインオブジェクトである`Object`の静的メソッドについて見ていきましょう。 **静的メソッド**（スタティックメソッド）とは、インスタンスの元となるオブジェクトから呼び出せるメソッドのことです。'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*最后，让我们看一下作为内置对象的`Object`的静态方法。 **静态方法**是可以从实例对象的基础对象调用的方法。'
- en: Objectの`toString`メソッドなどは、`Object`のインスタンスオブジェクトから呼び出すメソッドでした。 これに対して、`Object.hasOwn`静的メソッドのような静的メソッドは`Object`そのものに実装されているメソッドです。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object`的`toString`方法等是从`Object`的实例对象调用的方法。 相反，像`Object.hasOwn`这样的静态方法是`Object`本身实现的方法。'
- en: ここでは、オブジェクトの処理でよく利用されるいくつかの**静的メソッド**を紹介します。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这里介绍了一些在对象处理中常用的**静态方法**。
- en: '[](#enumeration)*オブジェクトの列挙*'
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#enumeration)*对象的枚举*'
- en: '*最初に紹介したように、オブジェクトはプロパティの集合です。 そのオブジェクトのプロパティを列挙する方法として、次の3つの静的メソッドがあります。'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '*正如之前提到的，对象是属性的集合。 有三种静态方法可用于枚举对象的属性。'
- en: '`Object.keys`メソッド: オブジェクトのプロパティ名の配列にして返す'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.keys`方法：返回一个由对象的属性名组成的数组'
- en: '`Object.values`メソッド^([ES2017]): オブジェクトの値の配列にして返す'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.values`方法^([ES2017])：返回对象值的数组'
- en: '`Object.entries`メソッド^([ES2017]): オブジェクトのプロパティ名と値の配列の配列を返す'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.entries`方法^([ES2017])：返回对象属性名和值的数组的数组'
- en: それぞれ、オブジェクトのキー、値、キーと値の組み合わせを配列にして返します。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 分别返回对象的键、值和键值对的数组。
- en: '[PRE40]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: これらのプロパティを列挙する静的メソッドと配列の`forEach`メソッドなどを組み合わせれば、プロパティに対して反復処理ができます。 次のコードでは、`Object.keys`メソッドで取得したプロパティ名の一覧をコンソールへ出力しています。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 结合这些列举属性的静态方法和数组的`forEach`方法，可以对属性进行迭代处理。 下面的代码使用`Object.keys`方法获取属性名列表并将其输出到控制台。
- en: '[PRE41]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[](#copy-and-merge)*オブジェクトのマージと複製*'
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#copy-and-merge)*对象的合并和复制*'
- en: '*`Object.assign`メソッド^([ES2015])は、あるオブジェクトを別のオブジェクトに代入（assign）できます。 このメソッドを使うことで、オブジェクトの複製やオブジェクト同士のマージができます。'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Object.assign`方法^([ES2015])可以将一个对象分配给另一个对象。 使用此方法可以复制对象或合并对象。'
- en: '`Object.assign`メソッドは、`target`オブジェクトに対して、1つ以上の`sources`オブジェクトを指定します。 `sources`オブジェクト自身が持つ列挙可能なプロパティを第一引数の`target`オブジェクトに対してコピーします。
    `Object.assign`メソッドの返り値は、`target`オブジェクトになります。'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.assign`方法用于将一个或多个`sources`对象的可枚举属性复制到`target`对象中。 返回值是`target`对象。'
- en: '[PRE42]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[](#merge)*オブジェクトのマージ*'
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[](#merge)*对象的合并*'
- en: '*具体的なオブジェクトのマージの例を見ていきます。'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '*让我们看一些具体的对象合并示例。'
- en: 次のコードでは、新しく作った空のオブジェクトを`target`にしています。 この空のオブジェクト（`target`）に`objectA`と`objectB`をマージしたものが、`Object.assign`メソッドの返り値となります。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码将创建一个新的空对象作为`target`。 这个空对象（`target`）将合并`objectA`和`objectB`，成为`Object.assign`方法的返回值。
- en: '[PRE43]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 第一引数には空のオブジェクトではなく、既存のオブジェクトも指定できます。 第一引数に既存のオブジェクトを指定した場合は、そのオブジェクトのプロパティが変更されます。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 第一���参数可以是现有对象，而不仅仅是空对象。 如果指定现有对象作为第一个参数，则该对象的属性将被修改。
- en: 次のコードでは、第一引数に指定された`objectA`に対してプロパティが追加されています。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码向指定的`objectA`添加属性。
- en: '[PRE44]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 空のオブジェクトを`target`にすることで、既存のオブジェクトには影響を与えずマージしたオブジェクトを作ることができます。 そのため、`Object.assign`メソッドの第一引数には、空のオブジェクトリテラルを指定するのが典型的な利用方法です。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将空对象作为`target`，可以创建一个合并了对象而不影响现有对象的新对象。 因此，通常将空对象字面量作为`Object.assign`方法的第一个参数是典型用法。
- en: このとき、プロパティ名が重複した場合は、後ろのオブジェクトのプロパティにより上書きされます。 JavaScriptでは、基本的に処理は先頭から後ろへと順番に行います。
    そのため、空のオブジェクトへ`objectA`を代入してから、その結果に`objectB`を代入するという形になります。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当属性名重复时，后一个对象的属性将覆盖前一个对象的属性。 在JavaScript中，通常是按顺序从前到后处理。 因此，可以将`objectA`分配给空对象，然后将`objectB`分配给结果。
- en: '[PRE45]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[](#object-spread-syntax)*[ES2018] オブジェクトのspread構文でのマージ*'
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[](#object-spread-syntax)*[ES2018] 对象的spread構文合并*'
- en: '*ES2018では、オブジェクトのマージを行うオブジェクトの`...`（spread構文）が追加されました。 ES2015で配列の要素を展開する`...`（spread構文）はサポートされていましたが、オブジェクトに対してもES2018でサポートされました。
    オブジェクトのspread構文は、オブジェクトリテラルの中に指定したオブジェクトのプロパティを展開できます。'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*在ES2018中，引入了对象的合并操作符`...`（spread構文）。 在ES2015中，数组元素的展开操作符`...`（spread構文）已经被支持，而在ES2018中也支持了对象。
    对象的spread構文可以展开指定对象的属性到对象字面量中。'
- en: オブジェクトのspread構文は、`Object.assign`とは異なり必ず新しいオブジェクトを作成します。 なぜならspread構文はオブジェクトリテラルの中でのみ記述でき、オブジェクトリテラルは新しいオブジェクトを作成するためです。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的spread構文会创建一个新对象，与`Object.assign`不同。 这是因为spread構文只能在对象字面量中使用，而对象字面量会创建新对象。
- en: 次のコードでは`objectA`と`objectB`をマージした新しいオブジェクトを返します。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码将返回合并了`objectA`和`objectB`的新对象。
- en: '[PRE46]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: プロパティ名が被った場合の優先順位は、後ろにあるオブジェクトが優先されます。 そのため同じプロパティ名を持つオブジェクトをマージした場合には、後ろにあるオブジェクトによってプロパティが上書きされます。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当属性名冲突时，后一个对象将优先。 因此，当合并具有相同属性名的对象时，后一个对象将覆盖属性。
- en: '[PRE47]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[](#copy)*オブジェクトの複製*'
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[](#copy)*对象的复制*'
- en: '*JavaScriptには、オブジェクトを複製する関数は用意されていません。 しかし、新しく空のオブジェクトを作成し、そこへ既存のオブジェクトのプロパティをコピーすれば、それはオブジェクトの複製をしていると言えます。
    次のように、`Object.assign`メソッドを使うことでオブジェクトを複製できます。'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScript中没有提供复制对象的函数。 但是，通过创建一个新的空对象，并将现有对象的属性复制到其中，可以实现对象的复制。 使用`Object.assign`方法可以复制对象。'
- en: '[PRE48]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 注意点として、`Object.assign`メソッドは`sources`オブジェクトのプロパティを浅くコピー（shallow copy）する点です。 shallow
    copyとは、`sources`オブジェクトの直下にあるプロパティだけをコピーするということです。 そのプロパティの値がオブジェクトである場合に、ネストした先のオブジェクトまでも複製するわけではありません。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`Object.assign`方法只会进行浅拷贝（shallow copy）操作，即只会拷贝`sources`对象直接的属性。浅拷贝意味着不会递归地复制嵌套对象的属性。如果属性的值是一个对象，它不会复制嵌套的对象。
- en: '[PRE49]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 逆にプロパティの値までも再帰的に複製してコピーすることを、深いコピー（deep copy）と呼びます。 deep copyは、再帰的にshallow copyすることで実現できます。
    次のコードでは、`deepClone`を`shallowClone`を使うことで実現しています。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果要递归地复制属性值，即进行深拷贝（deep copy），可以通过递归调用浅拷贝来实现。下面的代码示例展示了如何使用`shallowClone`来实现`deepClone`。
- en: '[PRE50]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: このように、JavaScriptのビルトインメソッドは浅い（shallow）実装のみを提供し、深い（deep）実装は提供していないことが多いです。 言語としては最低限の機能を提供し、より複雑な機能はユーザー側で実装するという形式を取るためです。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，JavaScript的内置方法通常只提供浅实现，并且很少提供深实现。这是因为JavaScript作为一种语言只提供了最基本的功能，更复杂的功能需要用户自己实现。
- en: 'JavaScriptは言語仕様で定義されている機能が最低限であるため、それを補うようにユーザーが作成した小さな機能を持つライブラリが数多く公開されています。
    それらのライブラリはnpmと呼ばれるJavaScriptのパッケージ管理ツールで公開され、JavaScriptのエコシステムを築いています。 ライブラリの利用については「[ユースケース:
    Node.jsでCLIアプリケーション](../../use-case/nodecli/)」の章で紹介します。'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript作为语言规范最低限度地定义了功能，因此有很多由用户创建的小型功能库来补充它。这些库通过名为npm的JavaScript包管理工具进行发布，构建了JavaScript生态系统。有关使用库的信息，请参阅“[用例：在Node.js中创建CLI应用程序](../../use-case/nodecli/)”章节。
- en: '[](#conclusion)*まとめ*'
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)*まとめ*'
- en: '*この章では、オブジェクトについて学びました。'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章介绍了对象。*'
- en: '`Object`というビルトインオブジェクトがある'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在名为`Object`的内置对象。
- en: '`{}`（オブジェクトリテラル）でのオブジェクトの作成や更新方法'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`{}`（对象字面量）来创建和更新对象的方法。
- en: プロパティの存在を確認するには`in`演算子か`Object.hasOwn`静的メソッドを使う
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要确认属性是否存在，可以使用`in`操作符或`Object.hasOwn`静态方法。
- en: Optional chaining演算子（`?.`）はネストしたプロパティの存在確認とアクセスを同時に行う記法
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选链操作符（`?.`）允许同时检查嵌套属性的存在并访问它们。
- en: オブジェクトのインスタンスメソッドと静的メソッド
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象的实例方法和静态方法。
- en: JavaScriptの`Object`は他のオブジェクトのベースとなるオブジェクトです。 次の「[プロトタイプオブジェクト](../prototype-object/
    "クラス")」の章では、`Object`がどのようにベースとして動作しているのかを見ていきます。**********************
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的`Object`是其他对象的基础对象。接下来的"[prototype-object](../prototype-object/ "类")"章节将探讨`Object`作为基础对象的运作方式。
