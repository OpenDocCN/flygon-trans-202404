- en: Decorate types to implement io.Reader interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Decorate types to implement io.Reader interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [io package](https://golang.org/pkg/io/) has provided a bunch of handy
    read functions and methods, but unfortunately, they all require the arguments
    satisfy [io.Reader](https://golang.org/pkg/io/#Reader) interface. See the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile above program and an error is generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The [io.ReadFull](https://golang.org/pkg/io/#ReadFull) function requires the
    argument should be compliance with `io.Reader`, but `string` type doesn''t provide
    `Read()` method, so we need to do some tricks on `s` variable. Modify `io.ReadFull(s,
    p)` into `io.ReadFull(strings.NewReader(s), p)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, the compilation is OK, and the running result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[strings.NewReader](https://golang.org/pkg/strings/#NewReader) function converts
    a `string` into a [strings.Reader](https://golang.org/pkg/bytes/#Reader) struct
    which supplies a [read](https://golang.org/pkg/bytes/#Reader.Read) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides `string`, another common operation is to use [bytes.NewReader](https://golang.org/pkg/bytes/#NewReader)
    to convert a byte slice into a [bytes.Reader](https://golang.org/pkg/bytes/#Reader)
    struct which satisfies `io.Reader` interface. Do some modifications on the above
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`bytes.NewReader` converts the `p` slice into a `bytes.Reader` struct. The
    output is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
