- en: Decorate types to implement io.Reader interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 装饰类型以实现io.Reader接口
- en: Decorate types to implement io.Reader interface
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 装饰类型以实现io.Reader接口
- en: 'The [io package](https://golang.org/pkg/io/) has provided a bunch of handy
    read functions and methods, but unfortunately, they all require the arguments
    satisfy [io.Reader](https://golang.org/pkg/io/#Reader) interface. See the following
    example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[io包](https://golang.org/pkg/io/)提供了一堆方便的读取函数和方法，但不幸的是，它们都要求参数满足[io.Reader](https://golang.org/pkg/io/#Reader)接口。看下面的例子：'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Compile above program and an error is generated:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编译上述程序会生成一个错误：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The [io.ReadFull](https://golang.org/pkg/io/#ReadFull) function requires the
    argument should be compliance with `io.Reader`, but `string` type doesn''t provide
    `Read()` method, so we need to do some tricks on `s` variable. Modify `io.ReadFull(s,
    p)` into `io.ReadFull(strings.NewReader(s), p)`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[io.ReadFull](https://golang.org/pkg/io/#ReadFull)函数要求参数应符合`io.Reader`，但`string`类型不提供`Read()`方法，因此我们需要在`s`变量上做一些小技巧。将`io.ReadFull(s,
    p)`修改为`io.ReadFull(strings.NewReader(s), p)`：'
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This time, the compilation is OK, and the running result is:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，编译通过了，运行结果如下：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[strings.NewReader](https://golang.org/pkg/strings/#NewReader) function converts
    a `string` into a [strings.Reader](https://golang.org/pkg/bytes/#Reader) struct
    which supplies a [read](https://golang.org/pkg/bytes/#Reader.Read) method:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[strings.NewReader](https://golang.org/pkg/strings/#NewReader)函数将`string`转换为一个[strings.Reader](https://golang.org/pkg/bytes/#Reader)结构，该结构提供了一个[read](https://golang.org/pkg/bytes/#Reader.Read)方法：'
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Besides `string`, another common operation is to use [bytes.NewReader](https://golang.org/pkg/bytes/#NewReader)
    to convert a byte slice into a [bytes.Reader](https://golang.org/pkg/bytes/#Reader)
    struct which satisfies `io.Reader` interface. Do some modifications on the above
    example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`string`，另一个常见操作是使用[bytes.NewReader](https://golang.org/pkg/bytes/#NewReader)将一个字节切片转换为一个[bytes.Reader](https://golang.org/pkg/bytes/#Reader)结构，该结构满足`io.Reader`接口。对上面的例子进行一些修改：
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`bytes.NewReader` converts the `p` slice into a `bytes.Reader` struct. The
    output is like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes.NewReader`将`p`切片转换为一个`bytes.Reader`结构。输出如下：'
- en: '[PRE6]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
