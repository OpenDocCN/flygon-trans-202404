["```\nlet sillyAdderFunction: Function;\n\nsillyAdderFunction = function(a, b) { return a + b};\n\nconsole.log(sillyAdderFunction(10, 10); \n```", "```\nfunction integerAdder(firstNumber: number, secondNumber: number): number {\n    return firstNumber + secondNumber;\n}\n\nconst TwoPlusTwo = integerAdder(2, 2);\n\n// Error: can't pass string to numeric function argument.\nconst errorAdder1 = integerAdder(\"ham\", \"cheese\");\n\n// Error: errorAdder2 is a string but the function returns an integer.\nconst errorAdder2: string = integerAdder(2, 2); \n```", "```\nfunction noOperation(): void { \n    return; \n} \n```", "```\nfunction InitializeDataSet(seedData?: any) {\n    if (seedData) {\n        // use the seed data to initialize the data set\n    }\n    else {\n        // initialize using some default hard coded values\n    }\n} \n```", "```\nfunction InitializeDataSetWithDefaultValues(seedData = { seedValue1: \"a\", seedValue2: \"b\"}) {\n    // seedData will have valid data so no need to check it.\n\n    /*\n    if (seedData) {\n        // use the seed data to initialize the data set\n    }\n    else {\n        // initialize using some hard coded values\n    }\n    */\n}\n\nInitializeDataSetWithDefaultValues();\nInitializeDataSetWithDefaultValues(undefined);\nInitializeDataSetWithDefaultValues({seedValue1: \"x\", seedValue2: \"y\"}); \n```", "```\nfunction myLogger(msgType: \"INFO\" | \"ERROR\", ...messages: any[]) {\n    if (msgType === \"INFO\") {\n        console.log(messages);\n    }\n    else  {\n        // Save the details to local storage for future analysis/debugging\n        localStorage.setItem(\"lastErrorMessage\", JSON.stringify(messages));\n        console.error(messages);\n    }\n}\n\nmyLogger(\"INFO\",\"Greetings!\");\nmyLogger(\"INFO\", \"Successfully saved the data, results:\", {someResult: \"\", databaseResultCode: 1});\nmyLogger(\"ERROR\", \"ERROR: Failed to save the data, error details follow.\", {errorDetails: \"[some error details object goes here]\"}, \"Error occurred at `${new Date()}`\"); \n```", "```\nconst myHelloFunction = () => { return \"Hello!\"};\n\nmyHelloFunction(); \n```", "```\nlet myGoodbyeFunction: () => string;\nmyGoodbyeFunction = () => {return \"Good Bye!\"}\nconsole.log(myGoodbyeFunction()); \n```", "```\nvar myGoodbyeFunction;\nmyGoodbyeFunction = function () { return \"Good Bye!\"; };\nconsole.log(myGoodbyeFunction()); \n```", "```\nlet myAdderArrowFunction: (arg1: number, arg2: number) => number;\nmyAdderArrowFunction = (firstNumber: number, secondNumber: number) => {\n        return firstNumber + secondNumber;\n    }\nconsole.log(myAdderArrowFunction(2, 2)); \n```", "```\ninterface IVisualizationEngine {\n    Render: (htmlDivName: string) => boolean;\n    SetDimensions: (width: number, height: number) => void;\n    SaveSettings: () => boolean;\n}\n\n// Assume that the visualization engine was already loaded\n// and that we can get a handle to its API set via the global window object.\nconst myVisualizationEngine: IVisualizationEngine = <IVisualizationEngine>window[\"VisualizationEngine\"];\n\nif (myVisualizationEngine.Render(\"myDiv\")) {\n    myVisualizationEngine.SetDimensions(1024, 800);\n    if (myVisualizationEngine.SaveSettings()) {\n        console.log(\"Successfully saved the visualization.\");\n    }\n    else {\n        console.error(\"ERROR: Failed to save the visualization.\");\n    }\n}\nelse {\n    console.error(\"Failed to render the visualization!\");\n} \n```", "```\nconsole.log(`Hello, ${(() => {return \"Paul\";})()}`); \n```", "```\nconsole.log(\"Hello, \" + (function () { return \"Paul\"; })()); \n```", "```\nconst numbers: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst evenNumbers = numbers.filter( (item) => !(item % 2));\nconst sumOfNumbers = numbers.reduce((prev: number, curr: number) => {\n    return prev + curr;\n}, 0); \n```"]