- en: Node.jsでHello World
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js中的Hello World
- en: 原文：[https://jsprimer.net/use-case/nodecli/helloworld/](https://jsprimer.net/use-case/nodecli/helloworld/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/use-case/nodecli/helloworld/](https://jsprimer.net/use-case/nodecli/helloworld/)
- en: 実際にアプリケーションを作成する前に、まずはHello Worldアプリケーションを通じてNode.jsのCLIアプリケーションの基本を学びましょう。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际创建应用程序之前，让我们通过Hello World应用程序来了解Node.js CLI应用程序的基础知识。
- en: '[](#create-project)*プロジェクトディレクトリの作成*'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#create-project)*创建项目目录*'
- en: '*今回作成するNode.jsのCLIアプリケーションでは、JavaScriptやMarkdownなどのファイルを扱います。 そのため、まずそれらのファイルを置くためのディレクトリを作成します。'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本次创建的Node.js CLI应用程序中，我们将处理JavaScript和Markdown等文件。因此，首先创建一个用于存放这些文件的目录。'
- en: ここでは`nodecli`という名前で新しいディレクトリを作成します。 ここからは作成した`nodecli`ディレクトリ以下で作業していきます。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在此创建一个名为`nodecli`的新目录。从现在开始，我们将在创建的`nodecli`目录下进行工作。
- en: またこのプロジェクトで作成するファイルは、必ず文字コード（エンコーディング）を**UTF-8**、改行コードを**LF**にしてファイルを保存します。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，此项目中创建的文件必须以**UTF-8**编码和**LF**换行符保存。
- en: '[](#hello-world)*Hello World*'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#hello-world)*Hello World*'
- en: '*まずはNode.jsでHello Worldアプリケーションを作ってみましょう。 具体的には、実行すると標準出力に`"Hello World!"`という文字列を表示するCLIアプリケーションを記述します。
    はじめに用意するのは、アプリケーションのエントリーポイントとなるJavaScriptファイルです。 `nodecli`ディレクトリに`main.js`という名前でファイルを作成し、次のように記述します。'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，让我们尝试创建一个Node.js的Hello World应用程序。具体来说，我们将编写一个CLI应用程序，当运行时，它将在标准输出中显示字符串`"Hello
    World!"`。首先要准备的是作为应用程序入口的JavaScript文件。在`nodecli`目录中创建一个名为`main.js`的文件，并编写如下内容。'
- en: main.js
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: main.js
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ウェブブラウザの実行環境では、`console.log`メソッドの出力先はブラウザの開発者ツールのコンソールでした。 Node.js環境では、`console.log`メソッドの出力先は標準出力になります。
    このコードは、標準出力に`"Hello World!"`という文字列を出力するものです。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web浏览器环境中，`console.log`方法的输出目标是浏览器开发者工具的控制台。而在Node.js环境中，`console.log`方法的输出目标是标准输出。以下代码将在标准输出中输出字符串`"Hello
    World!"`。
- en: JavaScriptのコードをNode.jsで実行するには、`node`コマンドを使用します。 コマンドラインで`nodecli`ディレクトリに移動し、次のコマンドでNode.jsを使い`main.js`を実行します。
    まだ`node`コマンドの用意ができていなければ、先に「[アプリケーション開発の準備](../../setup-local-env/)」の章を参照してください。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Node.js中执行JavaScript代码，可以使用`node`命令。在命令行中移动到`nodecli`目录，并使用以下命令使用Node.js运行`main.js`。如果尚未准备好`node`命令，请先参阅“[准备应用程序开发](../../setup-local-env/)”章节。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Node.jsでは、エントリーポイントとなるJavaScriptファイルを作成し、そのファイルを`node`コマンドの引数に渡して実行するのが基本です。
    また、ウェブブラウザのJavaScriptと同じく、コードは1行目から順に実行されます。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js中，创建一个作为入口点的JavaScript文件，并将该文件作为`node`命令的参数传递以执行是基本操作。此外，就像在Web浏览器中的JavaScript一样，代码将按顺序从第一行开始执行。
- en: '[](#global-objects)*Node.jsとブラウザのグローバルオブジェクト*'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#global-objects)*Node.js和浏览器的全局对象*'
- en: '*Node.jsは、ウェブブラウザのChromeと同じV8というJavaScriptエンジンを利用しています。 そのため、ECMAScriptで定義されている基本構文はブラウザと同じように使えます。
    しかし、ブラウザ環境とNode.js環境では利用できるグローバルオブジェクトが違うため、アプリケーションを開発するときにはその違いを理解しなくてはなりません。'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*Node.js使用了与Web浏览器Chrome相同的V8 JavaScript引擎。因此，基本的ECMAScript语法与在浏览器中的使用方式相同。然而，由于浏览器环境和Node.js环境具有不同的全局对象，因此在开发应用程序时必须理解这些差异。'
- en: ECMAScriptで定義されているグローバルオブジェクトはブラウザとNode.jsどちらの環境にも存在します。 たとえば`Boolean`や`String`などのラッパーオブジェクト、`Map`や`Promise`のようなビルトインオブジェクトはどちらの環境にも存在します。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript中定义的全局对象存在于浏览器和Node.js两个环境中。例如，诸如`Boolean`和`String`之类的包装对象以及诸如`Map`和`Promise`之类的内置对象都存在于这两个环境中。
- en: しかし、実行環境によって異なるオブジェクトもあります。 たとえばウェブブラウザ環境のグローバルオブジェクトは`window`オブジェクトですが、Node.jsでは[global](https://nodejs.org/docs/latest-v20.x/api/globals.html)と呼ばれるオブジェクトがグローバルオブジェクトになります。
    ブラウザの`window`オブジェクトには、次のようなプロパティや関数があります。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，也存在着因执行环境不同而不同的对象。例如，Web浏览器环境的全局对象是`window`对象，但在Node.js中称为[global](https://nodejs.org/docs/latest-v20.x/api/globals.html)的对象是全局对象。在浏览器的`window`对象中，存在着以下类似的属性和函数。
- en: '[document](https://developer.mozilla.org/ja/docs/Web/API/Document)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[文档](https://developer.mozilla.org/ja/docs/Web/API/Document)'
- en: '[XMLHttpRequest](https://developer.mozilla.org/ja/docs/Web/API/XMLHttpRequest)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[XMLHttpRequest](https://developer.mozilla.org/ja/docs/Web/API/XMLHttpRequest)'
- en: 一方、Node.jsの`global`オブジェクトには、たとえば次のようなプロパティや関数があります。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Node.js的`global`对象具有诸如下列之类的属性和函数。
- en: '[process](https://nodejs.org/docs/latest-v20.x/api/process.html#process_process)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[process](https://nodejs.org/docs/latest-v20.x/api/process.html#process_process)'
- en: '[Buffer](https://nodejs.org/docs/latest-v20.x/api/buffer.html)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Buffer](https://nodejs.org/docs/latest-v20.x/api/buffer.html)'
- en: それぞれのグローバルオブジェクトにあるプロパティなどは、同じ名前でグローバル変数や関数としてアクセスできます。 たとえば`window.document`プロパティは、グローバル変数の`document`としてもアクセスできます。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 各种全局对象的属性等可以通过相同的名称作为全局变量或函数进行访问。例如，`window.document`属性也可以作为全局变量的`document`进行访问。
- en: また、ECMAScriptで定義されたものではありませんが、ほぼ同等の機能と名前を持つプロパティや関数がブラウザとNode.jsのどちらにもある場合があります。
    たとえば次のようなAPIは同等の機能を提供しますが、メソッドの種類や返り値が異なります。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然并非由ECMAScript定义，但几乎在两个环境中都存在具有相同名称和功能的属性或函数。例如，下面的API提供了相同的功能，但方法类型和返回值可能不同。
- en: Console API
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台API
- en: '`setTimeout`関数'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setTimeout`函数'
- en: これらを踏まえた上で、次のセクションからCLIアプリケーションの開発をはじめていきましょう。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，让我们从下一节开始开发CLI应用程序。
- en: '[](#section-checklist)*このセクションのチェックリスト*'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#section-checklist)*本节的清单*'
- en: '**   `main.js`ファイルを作成した'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**   创建了`main.js`文件'
- en: '`node`コマンドで`main.js`を実行し、標準出力にログが出力されるのを確認した'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`node`命令执行`main.js`，并确认在标准输出中看到了日志。
- en: グローバルオブジェクトについて、ウェブブラウザとNode.jsで実行環境による違いがあることを理解した****
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解了关于全局对象的情况，包括在Web浏览器和Node.js中执行环境之间的差异****
