["```\ntypescript`function  sum(a:  number, b:  number):  number {  return a + b;}`\n```", "```\ntypescript`function sum(a:  number, b:  number):  number {  return a + b;}`\n```", "```\ntypescript`function  <data-lsp lsp=\"function identity<T>(arg: T): T\">identity</data-lsp><<data-lsp lsp=\"(type parameter) T in identity<T>(arg: T): T\">T</data-lsp>>(<data-lsp lsp=\"(parameter) arg: T\">arg</data-lsp>:  <data-lsp lsp=\"(type parameter) T in identity<T>(arg: T): T\">T</data-lsp>):  <data-lsp lsp=\"(type parameter) T in identity<T>(arg: T): T\">T</data-lsp> {  return <data-lsp lsp=\"(parameter) arg: T\">arg</data-lsp>;}`\n```", "```\ntypescript`function <data-lsp lsp=\"function identity<T>(arg: T): T\">identity</data-lsp><<data-lsp lsp=\"(type parameter) T in identity<T>(arg: T): T\">T</data-lsp>>(<data-lsp lsp=\"(parameter) arg: T\">arg</data-lsp>: <data-lsp lsp=\"(type parameter) T in identity<T>(arg: T): T\">T</data-lsp>): <data-lsp lsp=\"(type parameter) T in identity<T>(arg: T): T\">T</data-lsp> {  return <data-lsp lsp=\"(parameter) arg: T\">arg</data-lsp>;}`\n```", "```\n    typescript`type  NullableString  =  string  |  null;`\n    ```", "```\n    typescript`type NullableString =  string  |  null;`\n    ```", "```\n    typescript`type  Point2D  = [number,  number];`\n    ```", "```\n    typescript`type Point2D = [number,  number];`\n    ```", "```\ntypescript`interface  <data-lsp lsp=\"interface Person\">Person</data-lsp> { <data-lsp lsp=\"(property) Person.firstName: string\">firstName</data-lsp>:  string; <data-lsp lsp=\"(property) Person.lastName: string\">lastName</data-lsp>:  string;}class  <data-lsp lsp=\"class Employee\">Employee</data-lsp>  implements  <data-lsp lsp=\"interface Person\">Person</data-lsp> { <data-lsp lsp=\"(property) Employee.firstName: string\">firstName</data-lsp>:  string; <data-lsp lsp=\"(property) Employee.lastName: string\">lastName</data-lsp>:  string;  constructor(<data-lsp lsp=\"(parameter) firstName: string\">firstName</data-lsp>:  string, <data-lsp lsp=\"(parameter) lastName: string\">lastName</data-lsp>:  string) {  this.<data-lsp lsp=\"(property) Employee.firstName: string\">firstName</data-lsp> = <data-lsp lsp=\"(parameter) firstName: string\">firstName</data-lsp>;  this.<data-lsp lsp=\"(property) Employee.lastName: string\">lastName</data-lsp> = <data-lsp lsp=\"(parameter) lastName: string\">lastName</data-lsp>; }}`\n```", "```\ntypescript`interface <data-lsp lsp=\"interface Person\">Person</data-lsp> { <data-lsp lsp=\"(property) Person.firstName: string\">firstName</data-lsp>:  string; <data-lsp lsp=\"(property) Person.lastName: string\">lastName</data-lsp>:  string;}class <data-lsp lsp=\"class Employee\">Employee</data-lsp> implements <data-lsp lsp=\"interface Person\">Person</data-lsp> { <data-lsp lsp=\"(property) Employee.firstName: string\">firstName</data-lsp>:  string; <data-lsp lsp=\"(property) Employee.lastName: string\">lastName</data-lsp>:  string;  constructor(<data-lsp lsp=\"(parameter) firstName: string\">firstName</data-lsp>:  string, <data-lsp lsp=\"(parameter) lastName: string\">lastName</data-lsp>:  string) {  this.<data-lsp lsp=\"(property) Employee.firstName: string\">firstName</data-lsp> = <data-lsp lsp=\"(parameter) firstName: string\">firstName</data-lsp>;  this.<data-lsp lsp=\"(property) Employee.lastName: string\">lastName</data-lsp> = <data-lsp lsp=\"(parameter) lastName: string\">lastName</data-lsp>; }}`\n```", "```\ntypescript`async  function  <data-lsp lsp=\"function fetchData(): Promise<void>\">fetchData</data-lsp>():  <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><void> {  try {  const  <data-lsp lsp=\"const response: Response\">response</data-lsp>  =  await  <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.example.com/data\");  const  <data-lsp lsp=\"const data: any\">data</data-lsp>  =  await  <data-lsp lsp=\"const response: Response\">response</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const data: any\">data</data-lsp>); } catch (<data-lsp lsp=\"(local var) error: unknown\">error</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.error(message?: any, ...optionalParams: any[]): void (+1 overload)\">error</data-lsp>(\"Error fetching data:\", <data-lsp lsp=\"(local var) error: unknown\">error</data-lsp>); }}`\n```", "```\ntypescript`async  function <data-lsp lsp=\"function fetchData(): Promise<void>\">fetchData</data-lsp>(): <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><void> {  try {  const  <data-lsp lsp=\"const response: Response\">response</data-lsp>  =  await <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.example.com/data\");  const  <data-lsp lsp=\"const data: any\">data</data-lsp>  =  await  <data-lsp lsp=\"const response: Response\">response</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const data: any\">data</data-lsp>); } catch (<data-lsp lsp=\"(local var) error: unknown\">error</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.error(message?: any, ...optionalParams: any[]): void (+1 overload)\">error</data-lsp>(\"Error fetching data:\", <data-lsp lsp=\"(local var) error: unknown\">error</data-lsp>); }}`\n```"]