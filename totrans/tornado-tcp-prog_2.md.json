["```\nimport errno\nimport functools\nimport tornado.ioloop\nimport socket\n\ndef connection_ready(sock, fd, events):\n    while True:\n        try:\n            connection, address = sock.accept()\n        except socket.error as e:\n            if e.args[0] not in (errno.EWOULDBLOCK, errno.EAGAIN):\n                raise\n            return\n        connection.setblocking(0)\n        handle_connection(connection, address)\n\nif __name__ == '__main__':\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.setblocking(0)\n    sock.bind((\"\", port))\n    sock.listen(128)\n\n    io_loop = tornado.ioloop.IOLoop.current()\n    callback = functools.partial(connection_ready, sock)\n    io_loop.add_handler(sock.fileno(), callback, io_loop.READ)\n    io_loop.start() \n```", "```\n@gen.coroutine\ndef main():\n    # do sth...\n\nif __name__ == '__main__':\n    IOLoop.current().run_sync(main) \n```", "```\nio_loop = ioloop.IOLoop.instance()\nio_loop.add_callback(load_rank_list)\nio_loop.start() \n```"]