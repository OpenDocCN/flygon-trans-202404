- en: Zippers and lenses
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拉链和镜头
- en: Let’s talk about well-behaved Haskell programs for a bit.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微谈谈良好行为的 Haskell 程序。
- en: 'So well-typed but non-terminating constructs such as the following are forbidden:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，像以下这样的良好类型但不终止的结构是被禁止的：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Back to basics
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回到基础知识
- en: How many values can we construct from the following type?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从以下类型构造多少个值？
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Ordering
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序
- en: 'Another well-known type:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个众所周知的类型：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Clearly we can construct three different values of this type.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们可以构造三种不同类型的值。
- en: A zero-valued type
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个零值类型
- en: 'In Haskell 2010, we can create types from which *no* values can be constructed:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Haskell 2010 中，我们可以创建无法构造任何值的类型：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This type has no value constructors (and we can’t use `deriving` syntax on it).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型没有值构造函数（我们不能在其上使用 `deriving` 语法）。
- en: “Why?” you may ask. For programming with types while compiling.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “为什么？”你可能会问。用类型进行编程时编译。
- en: Zero, one, two…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 零、一、二…
- en: 'So big deal, we can create types with zero or more constructors:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以没什么大不了的，我们可以创建具有零个或多个构造函数的类型：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding some parameters
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一些参数
- en: 'Given these:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这些：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here’s another type to ponder.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个值得思考的类型。
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Spend a minute working out how many values this can have. We’ll do a quick poll.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 花一分钟计算这个可以有多少个值。我们来做一个快速调查。
- en: Abstracting I
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象 I
- en: Now how many values can this familiar type have?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个熟悉类型可以有多少个值？
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Abstracting II
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象 II
- en: Now how many values can this familiar type have?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个熟悉类型可以有多少个值？
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Algebra I
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代数 I
- en: Why do we refer to these as *product* types?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们将这些称为*乘积*类型？
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'They can hold a number of values equal to:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以容纳的值的数量等于：
- en: '*a* × *b* × *c*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*a* × *b* × *c*'
- en: Algebra II
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代数 II
- en: 'The same holds for the naming of *sum* types:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*和*类型的命名也是一样的：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'They can hold a number of values equal to:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以容纳的值的数量等于：
- en: '*a* + *b* + *c*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*a* + *b* + *c*'
- en: Working with nested data
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理嵌套数据
- en: Suppose we’re writing a benchmarking tool. We’ll take criterion as an example.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在编写一个基准测试工具。我们以 criterion 为例。
- en: Measurements produce noisy samples.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 测量产生嘈杂的样本。
- en: The effect of outliers
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常值的影响
- en: We want to understand how outliers in our sample data affect the sample mean
    and standard deviation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要了解样本数据中的异常值如何影响样本均值和标准差。
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Our `OutlierEffect` type is embedded in another type that carries extra information.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `OutlierEffect` 类型嵌入在另一个携带额外信息的类型中。
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: More nesting
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多嵌套
- en: And `OutlierVariance` is buried in another type.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 而 `OutlierVariance` 嵌入在另一个类型中。
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Which is nested in *yet another* type.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它嵌套在*另一个*类型中。
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Accessing data is easy
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问数据很容易
- en: Even with three levels of nesting, it’s easy to access an `OutlierEffect` given
    a `Payload`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有三层嵌套，也很容易在给定 `Payload` 的情况下访问 `OutlierEffect`。
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These record accessor functions are handy!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些记录访问器函数很方便！
- en: Updates, not so much
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新，不那么多
- en: OK, so suppose we want to “*modify*” an `OutlierEffect` buried in a `Payload`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，假设我们想要“*修改*”一个嵌入在 `Payload` 中的 `OutlierEffect`。
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is hideous! It hardly even looks like Haskell.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这太可怕了！它几乎看起来不像 Haskell。
- en: What was this?
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是什么？
- en: We just saw Haskell’s record update syntax in action.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了 Haskell 的记录更新语法的实际操作。
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This notation means:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个符号意味着：
- en: Make a complete copy of the record `addr`.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全复制记录 `addr`。
- en: When copying, set the `addrZip` field to `zip`.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制时，将 `addrZip` 字段设置为 `zip`。
- en: It’s a way of “editing” a value that leaves the original unchanged, but doesn’t
    require us to specify every field to copy.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种“编辑”值的方式，保持原始值不变，但不需要我们指定要复制的每个字段。
- en: It’s also a very non-composable hack, as we saw.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，这也是一种非常不可组合的技巧。
- en: What we actually want
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们实际想要的是
- en: 'Our demands:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的要求：
- en: Access fields within records.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问记录中的字段。
- en: Compose *accesses*, so that we can inspect fields within nested records.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组合*访问*，以便我们可以检查嵌套记录中的字段。
- en: Update fields within records.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新记录中的字段。
- en: Compose *updates*, so that we can modify fields within nested records.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组合*更新*，以便我们可以修改嵌套记录中的字段。
- en: 'With Haskell’s record syntax, we get #1 and #2, sort of #3 (if we squint),
    and #4 is hideous.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '使用 Haskell 的记录语法，我们得到 #1 和 #2，有点像 #3（如果我们眯起眼睛），#4 很可怕。'
- en: What to do?
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 该怎么办？
- en: Suppose we have a pair.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一对。
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We’d like to edit its second element.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想编辑它的第二个元素。
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let’s refer to the fact that we’re interested in the second element *focusing*
    on it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们提到我们对第二个元素感兴趣，*专注*于它。
- en: It’s equally easy to edit the first element.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑第一个元素同样容易。
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Holes
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空位
- en: Let’s refer to the slot we want to fill when editing a tole as a *hole*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当编辑一个 tole 时，让我们称要填充的插槽为*空位*。
- en: Here, the hole is in the second position.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，空位在第二个位置。
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: And here, it’s in the first.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 而在这里，它在第一个。
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Counting holes
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算空位
- en: If we drop the `b` from `(a,b)`, how many values does the resulting pseudo-type
    have?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从 `(a,b)` 中去掉 `b`，那么得到的伪类型有多少个值？
- en: Counting holes
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算洞的数量
- en: If we drop the `b` from `(a,b)`, how many values does the resulting pseudo-type
    have?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从 `(a,b)` 中去掉 `b`，那么得到的伪类型有多少个值？
- en: What if we drop `a` from `(a,b)`?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从 `(a,b)` 中去掉 `a`，会怎样？
- en: Counting holes
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算洞的数量
- en: If we drop the `b` from `(a,b)`, how many values does the resulting pseudo-type
    have?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从 `(a,b)` 中去掉 `b`，那么得到的伪类型有多少个值？
- en: What if we drop `a` from `(a,b)`?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从 `(a,b)` 中去掉 `a`，会怎样？
- en: If we want to drop some arbitrary field from `(a,b,c)`, we can represent this
    via a type.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想从 `(a,b,c)` 中删除一些任意字段，我们可以通过类型表示这一点。
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Counting holes
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算洞的数量
- en: We can write the number of values of `(x,x,x)` as *x* × *x* × *x*, or *x*³.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 `(x,x,x)` 的值的数量写为 *x* × *x* × *x*，或者 *x*³。
- en: If we substitute `x` for `a`, `b`, and `c` below, how many different values
    of type `Hole3` can there be?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在下面的 `a`、`b` 和 `c` 中用 `x` 替换，那么类型 `Hole3` 会有多少不同的值？
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Counting holes
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算洞的数量
- en: We can write the number of values of `(x,x,x)` as *x* × *x* × *x*, or *x*³.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 `(x,x,x)` 的值的数量写为 *x* × *x* × *x*，或者 *x*³。
- en: If we substitute `x` for `a`, `b`, and `c` below, how many different values
    of type `Hole3` can there be?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在下面的 `a`、`b` 和 `c` 中用 `x` 替换，那么类型 `Hole3` 会有多少不同的值？
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Hmm, that’s 3*x*².
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，那是 3*x*²。
- en: Does this remind you of symbolic differentiation?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否让你想起了符号微分？
- en: Back to pairs
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回到对
- en: Here’s a hole type for pairs.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一种对的洞类型。
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If we pull a value out of the hole, we need to store it somewhere so we can
    work with it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从洞中取出一个值，我们需要将其存储在某个地方，以便我们可以处理它。
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Why do we have an extra type parameter `c`?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们有一个额外的类型参数 `c`？
- en: So we can choose what type of value to store in the hole later.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，我们可以选择稍后在洞中存储什么类型的值。
- en: Quick exercise
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速练习
- en: Please provide bodies for the two undefined functions below.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请为下面的两个未定义函数提供函数体。
- en: You have one minute.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一分钟。
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Skeleton: [http://cs240h.scs.stanford.edu/Hole1.hs](http://cs240h.scs.stanford.edu/Hole1.hs)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 骨架：[http://cs240h.scs.stanford.edu/Hole1.hs](http://cs240h.scs.stanford.edu/Hole1.hs)
- en: My solution
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我的解决方案
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: A nice thing about this?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的一个好处？
- en: The polymorphism forces there to be only one possible implementation.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多态性强制只能有一种可能的���现。
- en: The inverse conversion
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逆转换
- en: We obviously also need to be able to convert from a zipper back to a pair.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们还需要能够从拉链器转换回一对。
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Accessing the focused value
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问专注值
- en: Now that we have focus functions to get the first or second element of a pair,
    we can write a generic accessor function for our zipper type.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有专注函数来获取一对的第一个或第二个元素，我们可以为我们的拉链器类型编写一个通用访问器函数。
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Try in `ghci`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ghci` 中尝试：
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Editing the focused value
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑专注值
- en: This is the more fun part.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更有趣的部分。
- en: '[PRE35]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Once again in `ghci`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '再次在 `ghci` 中： '
- en: '[PRE36]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Editing part deux
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑第二部分
- en: What will this print in `ghci`?
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 `ghci` 中会打印什么？
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Editing part deux
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑第二部分
- en: What will this print in `ghci`?
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 `ghci` 中会打印什么？
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: It’s a type error! `over` is not polymorphic enough.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个类型错误！`over` 不够多态。
- en: 'Bad version:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 不好的版本：
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The good version allows editing to change the type of the field being edited:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 好版本允许编辑以更改正在编辑的字段的类型：
- en: '[PRE40]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Hmm
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嗯
- en: This approach has problems.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法存在问题。
- en: We have to specify what field we’re focusing at both ends of the “pipeline”.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须指定我们在“管道”的两端专注的字段。
- en: This is repetitive.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是重复的。
- en: Can we compose these so that we can ‘focusFst’ then ‘focusSnd’ to get another
    zipper?
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能否组合这些，以便我们可以先“focusFst”，然后“focusSnd”以获得另一个拉链器？
- en: No.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不。
- en: Gluing things together
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将事物粘合在一起
- en: Instead of keeping `focusFst` and `unfocusFst` separate and wiring them together
    by hand, let’s manage them automatically.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 与其保持 `focusFst` 和 `unfocusFst` 分开，并手动将它们连接在一起，不如自动管理它们。
- en: '[PRE41]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'A `Focused` is a pair consisting of:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `Focused` 是一个由以下组成的对：
- en: The focused element
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专注的元素
- en: A function that knows how to reconstitute the original value
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个知道如何重建原始值的函数
- en: '[PRE42]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: A `Focuser` is a function that takes a value and gives us a `Focused`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `Focuser` 是一个接受一个值并给我们一个 `Focused` 的函数。
- en: Why so polymorphic?
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么这么多态？
- en: Recall that our original definition of `over` wasn’t polymorphic enough.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，我们最初的 `over` 定义不够多态。
- en: We could not change the type of the first element while editing a pair.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法在编辑对时更改第一个元素的类型。
- en: '[PRE43]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Well, `Focused` and `Focuser` have so many type parameters to give exactly this
    generality.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，`Focused` 和 `Focuser` 有很多类型参数，以确保这种通用性。
- en: Another look
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另一个视角
- en: '[PRE44]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '`Focused` is in effect saying:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`Focused` 实际上表示：'
- en: I am focusing on an `a`
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我正在专注于一个 `a`
- en: I might change its type to `b`
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我可能会将其类型更改为 `b`
- en: When I am eventually done focusing, I will give you back a `t` (which is `s`
    with every `a` replaced with `b`)
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我最终完成专注时，我会给你一个`t`（这是`s`，每个`a`替换为`b`的`s`）
- en: Another look
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 再看一遍
- en: '[PRE45]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The “meaning” of `Focuser` is:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: “Focuser”的“含义”是：
- en: You give me an `s`
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你给我一个`s`
- en: I will focus on an `a`
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我将专注于一个`a`
- en: I might change its type to `b`
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我可能会将其类型更改为`b`
- en: When I’m done focusing, I might change the thing I give you back from `s` to
    `t` (once again `s` with every `a` replaced with `b`)
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我完成专注时，我可能会将我给你的东西从`s`改为`t`（再次是每个`a`替换为`b`的`s`）
- en: Some machinery
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些机制
- en: 'Functions for working with these types:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 用于处理这些类型的函数：
- en: '[PRE46]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Our friends `focusFst` and `focusSnd` recast in this framework:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的朋友`focusFst`和`focusSnd`在这个框架中重新定义：
- en: '[PRE47]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Your turn
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的回合
- en: 'Here’s your scaffolding:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的脚手架：
- en: '[PRE48]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Take two minutes to implement this:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 花两分钟来实现这个：
- en: '[PRE49]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'It should focus on the head of a list, such that we can run this in `ghci`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该专注于列表的头部，这样我们就可以在`ghci`中运行这个：
- en: '[PRE50]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Skeleton: [http://cs240h.scs.stanford.edu/Focus.hs](http://cs240h.scs.stanford.edu/Focus.hs)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 骨架：[http://cs240h.scs.stanford.edu/Focus.hs](http://cs240h.scs.stanford.edu/Focus.hs)
- en: Abstracting again
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 再次抽象
- en: Our two most interesting functions have a lot in common.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最有趣的两个函数有很多共同之处。
- en: '[PRE51]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How could we unify these types?
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何统一这些类型？
- en: By using abstraction to decide what type to use.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过抽象来决定使用什么类型。
- en: '[PRE52]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Type-level fun
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型级别的乐趣
- en: Here, `f` is a type-level function.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`f`是一个类型级别的函数。
- en: '[PRE53]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If we supply the type-level identity function, `f` disappears and we get out
    the type of `over`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们提供类型级别的恒等函数，`f`消失了，我们得到了`over`的类型：
- en: '[PRE54]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'With the type-level `const a` function, we get the type of `view`:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类型级别的`const a`函数，我们得到了`view`的类型：
- en: '[PRE55]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Type-level identity
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型级别的恒等
- en: 'Defined in [`Data.Functor.Identity`](http://hackage.haskell.org/package/transformers/docs/Data-Functor-Identity.html):'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Data.Functor.Identity`](http://hackage.haskell.org/package/transformers/docs/Data-Functor-Identity.html)中定义：
- en: '[PRE56]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Type-level const
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型级别的const
- en: 'Defined in [`Control.Applicative`](http://hackage.haskell.org/package/base/docs/Control-Applicative.html#v:Const):'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Control.Applicative`](http://hackage.haskell.org/package/base/docs/Control-Applicative.html#v:Const)中定义：
- en: '[PRE57]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Our final type
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的最终类型
- en: '[PRE58]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'From our perspective as lens library writers:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们作为透镜库编写者的角度：
- en: We use `forall` here to make it clear that *we control* the `Functor` we use,
    not our caller.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用`forall`来明确表示*我们控制*我们使用的`Functor`，而不是我们的调用者。
- en: We choose `Identity` or `Const a` to get the right types for `over` and `view`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择`Identity`或`Const a`来获取`over`和`view`的正确类型。
- en: Our final type
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的最终类型
- en: '[PRE59]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'From our perspective as lens library writers:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们作为透镜库编写者的角度：
- en: We have to explain this type to users.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须向用户解释这个类型。
- en: Give me an `s`, and I will focus on its elements of type `a`
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给我一个`s`，我会专注于其类型为`a`的元素
- en: If you use `over` to edit, you can change those `a` types to `b`
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用`over`进行编辑，你可以将那些`a`类型改为`b`
- en: Once you’re done editing, you’ll get back a `t`, which (if you didn’t change
    `a` to `b`) will be `s`
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑完成后，你会得到一个`t`，如果你没有将`a`改为`b`，那么它将是`s`
- en: New machinery
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新机制
- en: '[PRE60]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Tuple sections
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元组部分
- en: 'If we turn on this:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开这个：
- en: '[PRE61]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'And write this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 并写下这个：
- en: '[PRE62]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'It’s equivalent to this:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 它等同于这个：
- en: '[PRE63]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: More machinery
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多机制
- en: '[PRE64]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Composing access
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合访问
- en: 'In `ghci`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ghci`中：
- en: '[PRE65]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Why is this different from the traditional order of composition?
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这与传统的组合顺序不同？
- en: '[PRE66]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Composition of lenses
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 透镜的组合
- en: What is a lens even *for*?
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 透镜到底是*用来做什么*的？
- en: It turns an action on a *part* of a structure into an action on the *whole*
    structure.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将对结构的*部分*的操作转换为对*整个*结构的操作。
- en: 'Thus:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 因此：
- en: '`_1` and `_2` are *not* “just getters”, they take an *entire pair* and focus
    on its first or second element.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_1`和`_2`并*不*只是“获取器”，它们获取一个*完整对*并专注于其第一个或第二个元素。'
- en: It’s `view` and `over` that then determine getter-or-setter nature.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就是`view`和`over`决定了获取器或设置器的性质。
- en: What does it then mean to compose lenses?
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 那么组合透镜意味着什么？
- en: 'If you write `_1 . _head`, you are:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你写`_1 . _head`，你正在：
- en: Taking the entire pair, and focusing on its first element
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取整个对，并专注于它的第一个元素
- en: Taking the entire pair, and focusing on the head of the list *inside the first
    element of the pair*
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取整个对，并专注于列表头部*在对的第一个元素内*
- en: Composing modifications
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合修改
- en: Let’s work out how we would use the lens machinery to give us a pair with an
    uppercased first name.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想想如何使用透镜机制来给我们一个名字首字母大写的对。
- en: '[PRE67]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '1: Why are lenses composable?'
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1: 为什么透镜是可组合的？'
- en: 'At first glance, it’s hard to tell why `_1 . _head` even typechecks:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，很难说出为什么`_1 . _head`甚至能通过类型检查：
- en: '[PRE68]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: And especially—why can we compose using `.` for function composition?
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是——为什么我们可以使用`.`进行函数组合？
- en: '2: Why are lenses composable?'
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2: 为什么透镜是可组合的？'
- en: 'The key: remembering that a function of 2 arguments is really a function of
    1 arg that returns a function.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于记住，一个带有2个参数的函数实际上是一个返回函数的1个参数的函数。
- en: '[PRE69]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: What next?
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: 'The best place to start is with the gateway drug:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的开始地方是从“入门级”开始：
- en: The [lens-family-core package](http://hackage.haskell.org/package/lens-family-core)
    is the easiest to learn
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[lens-family-core包](http://hackage.haskell.org/package/lens-family-core)是最容易学习的'
- en: 'Also has the easiest source to read: highly recommended!'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也有最容易阅读的源代码：强烈推荐！
- en: 'The full monty:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的操作：
- en: The [lens package](http://lens.github.io/) is *way* more powerful, more abstract,
    more difficult to learn
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[lens包](http://lens.github.io/)更加强大，更加抽象，更加难以学习。'
- en: A little controversial due to being huge
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于庞大而有些争议
- en: 'Becoming more widely used in practice:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中变得越来越广泛使用：
- en: My [wreq HTTP library](http://www.serpentine.com/wreq)
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的[wreq HTTP库](http://www.serpentine.com/wreq)
- en: Spotter’s guide to lens operators
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 镜头操作符的指南
- en: '`^.` is `view` (think “getter”)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`^.`是`view`（类似于“getter”）'
- en: '`%~` is `over` (think “editor”)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`%~`是`over`（类似于“编辑器”）'
- en: '`.~` is `over` – but accepts a *value* instead of a *function* (think “setter”)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`.~`是`over` – 但接受一个*值*而不是*函数*（类似于“setter”）'
- en: '`&` is just `$` with arguments flipped'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`&`只是带有翻转参数的`$`'
- en: 'Used as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 使用如下：
- en: '[PRE70]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: (“Thing being modified, followed by modifiers in a chain.”)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: （“被修改的事物，后跟链式修饰符。”）
