- en: Postscript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: logic                        calculus
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '--------------------   ~   ----------------------------'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: software engineering       mechanical/civil engineering
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Looking Around
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Large-scale applications of these core topics can be found
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: everywhere, both in ongoing research projects and in real-world
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: software systems.  Here are a few recent examples involving
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: formal, machine-checked verification of real-world software and
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: hardware systems, to give a sense of what is being done
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: today...
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CompCert
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*CompCert* is a fully verified optimizing compiler for almost all'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: of the ISO C[90] / ANSI C language, generating code for x[86], ARM,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and PowerPC processors.  The whole of CompCert is is written in
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Gallina and extracted to an efficient OCaml program using Coq's
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extraction facilities.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"The CompCert project investigates the formal verification of'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: realistic compilers usable for critical embedded software. Such
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: verified compilers come with a mathematical, machine-checked proof
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: that the generated executable code behaves exactly as prescribed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: by the semantics of the source program. By ruling out the
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: possibility of compiler-introduced bugs, verified compilers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: strengthen the guarantees that can be obtained by applying formal
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: methods to source programs."
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In 2011, CompCert was included in a landmark study on fuzz-testing
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a large number of real-world C compilers using the CSmith tool.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The CSmith authors wrote:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The striking thing about our CompCert results is that the middle-end bugs we
    found in all other compilers are absent. As of early 2011, the under-development
    version of CompCert is the only compiler we have tested for which Csmith cannot
    find wrong-code errors. This is not for lack of trying: we have devoted about
    six CPU-years to the task. The apparent unbreakability of CompCert supports a
    strong argument that developing compiler optimizations within a proof framework,
    where safety checks are explicit and machine-checked, has tangible benefits for
    compiler users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://compcert.inria.fr](http://compcert.inria.fr)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: seL4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*seL4* is a fully verified microkernel, considered to be the'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: world's first OS kernel with an end-to-end proof of implementation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: correctness and security enforcement.  It is implemented in C and
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ARM assembly and specified and verified using Isabelle.  The code
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is available as open source.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"seL4 has been comprehensively formally verified: a rigorous'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: process to prove mathematically that its executable code, as it
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: runs on hardware, correctly implements the behaviour allowed by
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the specification, and no others. Furthermore, we have proved that
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the specification has the desired safety and security
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: properties (integrity and confidentiality)... The verification was
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: achieved at a cost that is significantly less than that of
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: traditional high-assurance development approaches, while giving
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: guarantees traditional approaches cannot provide."
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://sel4.systems](https://sel4.systems).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CertiKOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*CertiKOS* is a clean-slate, fully verified hypervisor, written in'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CompCert C and verified in Coq.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"The CertiKOS project aims to develop a novel and practical'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: programming infrastructure for constructing large-scale certified
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: system software. By combining recent advances in programming
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: languages, operating systems, and formal methods, we hope to
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'attack the following research questions: (1) what OS kernel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: structure can offer the best support for extensibility, security,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and resilience? (2) which semantic models and program logics can
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: best capture these abstractions? (3) what are the right
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: programming languages and environments for developing such
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: certified kernels? and (4) how to build automation facilities to
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: make certified software development really scale?"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://flint.cs.yale.edu/certikos/](http://flint.cs.yale.edu/certikos/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ironclad
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Ironclad Apps* is a collection of fully verified web'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: applications, including a "notary" for securely signing
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: statements, a password hasher, a multi-user trusted counter, and a
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: differentially-private database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The system is coded in the verification-oriented programming
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: language Dafny and verified using Boogie, a verification tool
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: based on Hoare logic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"An Ironclad App lets a user securely transmit her data to a'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: remote machine with the guarantee that every instruction executed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: on that machine adheres to a formal abstract specification of the
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: appâ€™s behavior. This does more than eliminate implementation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vulnerabilities such as buffer overflows, parsing errors, or data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: leaks; it tells the user exactly how the app will behave at all
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: times. We provide these guarantees via complete, low-level
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: software verification. We then use cryptography and secure
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: hardware to enable secure channels from the verified software to
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: remote users."
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/Microsoft/Ironclad/tree/master/ironclad-apps](https://github.com/Microsoft/Ironclad/tree/master/ironclad-apps)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Verdi
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Verdi* is a framework for implementing and formally verifying'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: distributed systems.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Verdi supports several different fault models ranging from'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: idealistic to realistic. Verdi's verified system
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: transformers (VSTs) encapsulate common fault tolerance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: techniques. Developers can verify an application in an idealized
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fault model, and then apply a VST to obtain an application that is
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: guaranteed to have analogous properties in a more adversarial
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: environment.  Verdi is developed using the Coq proof assistant,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and systems are extracted to OCaml for execution. Verdi systems,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: including a fault-tolerant key-value store, achieve comparable
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: performance to unverified counterparts."
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://verdi.uwplse.org](http://verdi.uwplse.org)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: DeepSpec
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*The Science of Deep Specification* is an NSF "Expedition"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: project (running from 2016 to 2020) that focuses on the
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: specification and verification of full functional correctness of
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: both software and hardware.  It also sponsors workshops and summer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schools.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Website: [http://deepspec.org/](http://deepspec.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Overview presentations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://deepspec.org/about/](http://deepspec.org/about/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=IPNdsnRWBkk](https://www.youtube.com/watch?v=IPNdsnRWBkk)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: REMS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*REMS* is a european project on Rigorous Engineering of Mainstream'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Systems.  It has produced detailed formal specifications of a wide
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: range of critical real-world interfaces, protocols, and APIs,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: including
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the C language,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the ELF linker format,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the ARM, Power, MIPS, CHERI, and RISC-V instruction sets,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the weak memory models of ARM and Power processors, and
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: POSIX filesystems.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"The project is focussed on lightweight rigorous methods: precise'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: specification (post hoc and during design) and testing against
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: specifications, with full verification only in some cases. The
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: project emphasises building useful (and reusable) semantics and
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: tools. We are building accurate full-scale mathematical models of
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: some of the key computational abstractions (processor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: architectures, programming languages, concurrent OS interfaces,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and network protocols), studying how this can be done, and
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: investigating how such models can be used for new verification
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: research and in new systems and programming language
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: research. Supporting all this, we are also working on new
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: specification tools and their foundations."
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.cl.cam.ac.uk/~pes20/rems/](http://www.cl.cam.ac.uk/~pes20/rems/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Others
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There''s much more.  Other projects worth checking out include:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Vellvm (formal specification and verification of LLVM optimization passes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zach Tatlock's formally certified browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tobias Nipkow's formalization of most of Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CakeML verified ML compiler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greg Morrisett's formal specification of the x[86] instruction set and the RockSalt
    Software Fault Isolation tool (a better, faster, more secure version of Google's
    Native Client)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ur/Web, a programming language for verified web applications embedded in Coq
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the Princeton Verified Software Toolchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: (*Â $Date:Â 2016-12-08Â 16:57:10Â -0500Â (Thu,Â 08Â DecÂ 2016)Â $Â *)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
