- en: Postscript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: logic                        calculus
  id: totrans-2
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '--------------------   ~   ----------------------------'
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: software engineering       mechanical/civil engineering
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Looking Around
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Large-scale applications of these core topics can be found
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: everywhere, both in ongoing research projects and in real-world
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: software systems.  Here are a few recent examples involving
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: formal, machine-checked verification of real-world software and
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: hardware systems, to give a sense of what is being done
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: today...
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CompCert
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*CompCert* is a fully verified optimizing compiler for almost all'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: of the ISO C[90] / ANSI C language, generating code for x[86], ARM,
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and PowerPC processors.  The whole of CompCert is is written in
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Gallina and extracted to an efficient OCaml program using Coq's
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extraction facilities.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"The CompCert project investigates the formal verification of'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: realistic compilers usable for critical embedded software. Such
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: verified compilers come with a mathematical, machine-checked proof
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: that the generated executable code behaves exactly as prescribed
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: by the semantics of the source program. By ruling out the
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: possibility of compiler-introduced bugs, verified compilers
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: strengthen the guarantees that can be obtained by applying formal
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: methods to source programs."
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In 2011, CompCert was included in a landmark study on fuzz-testing
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a large number of real-world C compilers using the CSmith tool.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The CSmith authors wrote:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The striking thing about our CompCert results is that the middle-end bugs we
    found in all other compilers are absent. As of early 2011, the under-development
    version of CompCert is the only compiler we have tested for which Csmith cannot
    find wrong-code errors. This is not for lack of trying: we have devoted about
    six CPU-years to the task. The apparent unbreakability of CompCert supports a
    strong argument that developing compiler optimizations within a proof framework,
    where safety checks are explicit and machine-checked, has tangible benefits for
    compiler users.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://compcert.inria.fr](http://compcert.inria.fr)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: seL4
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*seL4* is a fully verified microkernel, considered to be the'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: world's first OS kernel with an end-to-end proof of implementation
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: correctness and security enforcement.  It is implemented in C and
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ARM assembly and specified and verified using Isabelle.  The code
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is available as open source.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"seL4 has been comprehensively formally verified: a rigorous'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: process to prove mathematically that its executable code, as it
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: runs on hardware, correctly implements the behaviour allowed by
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the specification, and no others. Furthermore, we have proved that
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the specification has the desired safety and security
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: properties (integrity and confidentiality)... The verification was
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: achieved at a cost that is significantly less than that of
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: traditional high-assurance development approaches, while giving
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: guarantees traditional approaches cannot provide."
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://sel4.systems](https://sel4.systems).'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CertiKOS
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*CertiKOS* is a clean-slate, fully verified hypervisor, written in'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CompCert C and verified in Coq.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"The CertiKOS project aims to develop a novel and practical'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: programming infrastructure for constructing large-scale certified
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: system software. By combining recent advances in programming
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: languages, operating systems, and formal methods, we hope to
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'attack the following research questions: (1) what OS kernel'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: structure can offer the best support for extensibility, security,
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and resilience? (2) which semantic models and program logics can
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: best capture these abstractions? (3) what are the right
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: programming languages and environments for developing such
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: certified kernels? and (4) how to build automation facilities to
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: make certified software development really scale?"
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://flint.cs.yale.edu/certikos/](http://flint.cs.yale.edu/certikos/)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ironclad
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Ironclad Apps* is a collection of fully verified web'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: applications, including a "notary" for securely signing
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: statements, a password hasher, a multi-user trusted counter, and a
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: differentially-private database.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The system is coded in the verification-oriented programming
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: language Dafny and verified using Boogie, a verification tool
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: based on Hoare logic.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"An Ironclad App lets a user securely transmit her data to a'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: remote machine with the guarantee that every instruction executed
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: on that machine adheres to a formal abstract specification of the
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: app’s behavior. This does more than eliminate implementation
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vulnerabilities such as buffer overflows, parsing errors, or data
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: leaks; it tells the user exactly how the app will behave at all
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: times. We provide these guarantees via complete, low-level
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: software verification. We then use cryptography and secure
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: hardware to enable secure channels from the verified software to
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: remote users."
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/Microsoft/Ironclad/tree/master/ironclad-apps](https://github.com/Microsoft/Ironclad/tree/master/ironclad-apps)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Verdi
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Verdi* is a framework for implementing and formally verifying'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: distributed systems.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Verdi supports several different fault models ranging from'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: idealistic to realistic. Verdi's verified system
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: transformers (VSTs) encapsulate common fault tolerance
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: techniques. Developers can verify an application in an idealized
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fault model, and then apply a VST to obtain an application that is
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: guaranteed to have analogous properties in a more adversarial
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: environment.  Verdi is developed using the Coq proof assistant,
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and systems are extracted to OCaml for execution. Verdi systems,
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: including a fault-tolerant key-value store, achieve comparable
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: performance to unverified counterparts."
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://verdi.uwplse.org](http://verdi.uwplse.org)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: DeepSpec
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*The Science of Deep Specification* is an NSF "Expedition"'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: project (running from 2016 to 2020) that focuses on the
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: specification and verification of full functional correctness of
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: both software and hardware.  It also sponsors workshops and summer
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schools.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Website: [http://deepspec.org/](http://deepspec.org/)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Overview presentations:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://deepspec.org/about/](http://deepspec.org/about/)'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=IPNdsnRWBkk](https://www.youtube.com/watch?v=IPNdsnRWBkk)'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/watch?v=IPNdsnRWBkk](https://www.youtube.com/watch?v=IPNdsnRWBkk)'
- en: REMS
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: REMS
- en: '*REMS* is a european project on Rigorous Engineering of Mainstream'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*REMS*是一个关于主流严格工程的欧洲项目'
- en: Systems.  It has produced detailed formal specifications of a wide
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 系统。它已经制定了广泛的正式规范
- en: range of critical real-world interfaces, protocols, and APIs,
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一系列关键的现实世界接口、协议和API，
- en: including
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包括
- en: the C language,
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C语言，
- en: the ELF linker format,
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ELF链接器格式，
- en: the ARM, Power, MIPS, CHERI, and RISC-V instruction sets,
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ARM、Power、MIPS、CHERI和RISC-V指令集，
- en: the weak memory models of ARM and Power processors, and
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ARM和Power处理器的弱内存模型，以及
- en: POSIX filesystems.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: POSIX文件系统。
- en: '"The project is focussed on lightweight rigorous methods: precise'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “该项目专注于轻量级严格方法：精确
- en: specification (post hoc and during design) and testing against
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规范（事后和设计期间）和针对
- en: specifications, with full verification only in some cases. The
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规范，在某些情况下进行全面验证。该
- en: project emphasises building useful (and reusable) semantics and
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 项目强调构建有用（和可重用）的语义和
- en: tools. We are building accurate full-scale mathematical models of
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 工具。我们正在构建准确的全尺度数学模型
- en: some of the key computational abstractions (processor
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些关键的计算抽象（处理器
- en: architectures, programming languages, concurrent OS interfaces,
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 架构、编程语言、并发操作系统接口，
- en: and network protocols), studying how this can be done, and
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和网络协议），研究如何实现这一点，以及
- en: investigating how such models can be used for new verification
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 研究如何利用这些模型进行新的验证
- en: research and in new systems and programming language
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 研究和新的系统和编程语言
- en: research. Supporting all this, we are also working on new
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 研究。为了支持所有这些，我们还在研究新的
- en: specification tools and their foundations."
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规范工具及其基础。
- en: '[http://www.cl.cam.ac.uk/~pes20/rems/](http://www.cl.cam.ac.uk/~pes20/rems/)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.cl.cam.ac.uk/~pes20/rems/](http://www.cl.cam.ac.uk/~pes20/rems/)'
- en: Others
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: 'There''s much more.  Other projects worth checking out include:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有更多。其他值得关注的项目包括：
- en: Vellvm (formal specification and verification of LLVM optimization passes)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vellvm（LLVM优化通道的形式化规范和验证）
- en: Zach Tatlock's formally certified browser
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扎克·塔特洛克的正式认证的浏览器
- en: Tobias Nipkow's formalization of most of Java
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托比亚斯·尼普考对大部分Java的形式化
- en: The CakeML verified ML compiler
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CakeML验证ML编译器
- en: Greg Morrisett's formal specification of the x[86] instruction set and the RockSalt
    Software Fault Isolation tool (a better, faster, more secure version of Google's
    Native Client)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格雷格·莫里塞特对x[86]指令集和RockSalt软件故障隔离工具（谷歌原生客户端的更好、更快、更安全版本）的正式规范
- en: Ur/Web, a programming language for verified web applications embedded in Coq
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ur/Web，一种用于在Coq中嵌入的验证Web应用程序的编程语言
- en: the Princeton Verified Software Toolchain
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普林斯顿验证软件工具链
- en: '[PRE2]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (* $Date: 2016-12-08 16:57:10 -0500 (Thu, 08 Dec 2016) $ *)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: (* $Date: 2016-12-08 16:57:10 -0500 (Thu, 08 Dec 2016) $ *)
- en: '[PRE3]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
