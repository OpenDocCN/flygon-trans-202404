["```\n// the \"state\"\nvar isDown = false;\n\n// the \"view\" of the state\nfunction printIsDown() { mainElement.innerHTML = isDown.toString(); }\n\n// event handlers to update the state\nfunction handleMouseDown() { isDown = true;  printIsDown(); }\nfunction handleMouseUp()   { isDown = false; printIsDown(); }\n\n// the \"controller\" that maps events to handlers\nelement.addEventListener(\"mousedown\", handleMouseDown);\nelement.addEventListener(\"mouseup\",   handleMouseUp); \n```", "```\nSignal.map : (a -> b) -> Signal a -> Signal b \n```", "```\nisUp = Signal.map (fun curValIsDown -> not curValIsDown) Mouse.isDown \n```", "```\nisUp = Signal.map not Mouse.isDown \n```", "```\nimport Text (plainText)\nimport Graphics.Element (Element)\n\nmain : Element\nmain =\n  plainText \"Hello, world!\" \n```", "```\nSignal.constant : a -> Signal a \n```", "```\nmain : Signal Element\nmain =\n  Signal.constant (plainText \"Hello, world!\") \n```", "```\nimport Text (plainText)\nimport Graphics.Element (Element)\nimport Mouse\nimport Signal\n\nisUp = Signal.map not Mouse.isDown\n\nmain : Signal Element\nmain =\n  Signal.map (\\b -> plainText (toString b)) isUp \n```", "```\n(\\b -> b |> toString |> plainText) \n```", "```\n(toString >> plainText) \n```", "```\n(\\b -> plainText <| toString <| b) \n```", "```\n(plainText << toString) \n```", "```\nMouse.clicks : Signal () \n```", "```\n    type alias State = Int\n\n    initState : State\n    initState = 0 \n    ```", "```\n    view : State -> Element\n    view s = asText s \n    ```", "```\n    view = asText \n    ```", "```\n    Signal.foldp : (a -> b -> b) -> b -> Signal a -> Signal b \n    ```", "```\n    List.foldl : (a -> b -> b) -> b -> List a -> b\n    List.foldr : (a -> b -> b) -> b -> List a -> b \n    ```", "```\n    step : a -> State -> State\n    step _ i = i + 1\n\n    main : Signal Element\n    main =\n      Signal.map view (Signal.foldp step initState Mouse.clicks) \n    ```", "```\nmain = Signal.map VIEW (Signal.foldp UPDATE INIT_STATE BASE_SIGNAL) \n```", "```\nmain =\n  Signal.map view (Signal.foldp step initState (Time.every Time.second)) \n```", "```\n    isUp = not <~ Mouse.isDown \n    ```"]