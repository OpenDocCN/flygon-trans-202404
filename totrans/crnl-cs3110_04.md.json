["```\nopen Assertions \nlet t = assert_true true\nlet inc x = x+1\nlet u = assert_true ((inc 0) = 0) (* raises an exception *)\n\n```", "```\nFatal error: exception Assertions.Assert_true(\"false is not true\")\nRaised at file \"assertions/assertions.ml\", line 4, characters 18-49\nCalled from file \"test.ml\", line 4, characters 8-33\nError (exit code 2)\n\n```", "```\nlet is_prime : int -> bool = \n  fun x -> x=3 || x=5 || x=7\n\n```", "```\nopen Prime\nopen Assertions\n\nTEST_UNIT \"test_prime_one\" = assert_true (is_prime 3)\nTEST_UNIT \"test_prime_two\" = assert_true (is_prime 7)\nTEST_UNIT \"test_not_prime_eight\" = assert_false (is_prime 8)\n\nlet () = Pa_ounit_lib.Runtime.summarize()\n\n```", "```\ncs3110 compile prime_test.ml\ncs3110 test prime_test.ml\n\n```", "```\n3 tests ran, 0 test_modules ran\n\n```", "```\n Turn on Javascript to see the program. \n```", "```\n Turn on Javascript to see the program. \n```", "```\ntype day = Sunday | Monday | Tuesday | Wednesday \n         | Thursday | Friday | Saturday\n\n```", "```\nlet next_weekday (d:day) = Sunday\n\n```", "```\nTEST_UNIT \"next_weekday_test1\" = assert_true (next_weekday(Monday) = Tuesday)\n\n```", "```\nlet next_weekday (d:day) = \n  match d with \n    Monday -> Tuesday\n  | _ -> Sunday\n\n```", "```\nTEST_UNIT \"next_weekday_test2\" = assert_true (next_weekday(Tuesday) = Wednesday)\nTEST_UNIT \"next_weekday_test3\" = assert_true (next_weekday(Wednesday) = Thursday)\nTEST_UNIT \"next_weekday_test4\" = assert_true (next_weekday(Thursday) = Friday)\n\n```", "```\nlet next_weekday (d:day) = \n  match d with \n    Monday -> Tuesday\n  | Tuesday -> Wednesday\n  | Wednesday -> Thursday\n  | Thursday -> Friday\n  | _ -> Sunday\n\n```", "```\nlet next_weekday (d:day) = \n  match d with \n    Monday -> Tuesday\n  | Tuesday -> Wednesday\n  | Wednesday -> Thursday\n  | Thursday -> Friday\n  | Friday -> Saturday\n  | Saturday -> Sunday\n  | Sunday -> Monday\n\n```", "```\nTEST_UNIT \"next_weekday_test5\" = assert_true (next_weekday(Friday) = Monday)\nTEST_UNIT \"next_weekday_test6\" = assert_true (next_weekday(Saturday) = Monday)\nTEST_UNIT \"next_weekday_test7\" = assert_true (next_weekday(Sunday) = Monday)\n\n```", "```\nlet next_weekday (d:day) = \n  match d with \n    Monday -> Tuesday\n  | Tuesday -> Wednesday\n  | Wednesday -> Thursday\n  | Thursday -> Friday\n  | Friday -> Monday\n  | Saturday -> Monday\n  | Sunday -> Monday\n\nTEST_UNIT \"next_weekday_test1\" = assert_true (next_weekday(Monday) = Tuesday)\nTEST_UNIT \"next_weekday_test2\" = assert_true (next_weekday(Tuesday) = Wednesday)\nTEST_UNIT \"next_weekday_test3\" = assert_true (next_weekday(Wednesday) = Thursday)\nTEST_UNIT \"next_weekday_test4\" = assert_true (next_weekday(Thursday) = Friday)\nTEST_UNIT \"next_weekday_test5\" = assert_true (next_weekday(Friday) = Monday)\nTEST_UNIT \"next_weekday_test6\" = assert_true (next_weekday(Saturday) = Monday)\nTEST_UNIT \"next_weekday_test7\" = assert_true (next_weekday(Sunday) = Monday)\n\n```", "```\n(* requires: a <> 0.0\n * returns: SOME (f1,f2) if there exists an f1 and f2 such that\n *   each fi is a root of ax^2 + bx + c.  Or NONE if no real\n *   roots exist. *)\nlet qroots((a:int),(b:int),(c:int)) : (float*float) option = ...\n\n```", "```\nlet qroots((a:float),(b:float),(c:float)) : (float*float) option = \n  let d = (b *. b) -. (4.0 *. a *. c) in\n    if d < 0.0\n    then None\n    else Some ((~-. b +. (sqrt d)) /. (2.0 *. a), \n               (~-. b -. (sqrt d)) /. (2.0 *. a))\n\n```", "```\nTEST_UNIT \"qroots_test1\" = assert_true ((qroots(1.0,3.0,-4.0) = Some (1.0,-4.0)))\nTEST_UNIT \"qroots_test2\" = assert_true (qroots(3.0,4.0,2.0) = None)\n\n```", "```\n    let inc x = \n      x+1\n\n    ```", "```\n    let inc x = \n      let () = print_int(x) in  (* added *)\n        x+1\n\n    ```", "```\n    let rec fib x = if x<=1 then 1 else fib(x-1) + fib(x-2)\n    #trace fib;;\n    ```", "```\n    fib <-- 0=\"\" 2=\"\" fib=\"\" <--=\"\" --=\"\"> 1                                                                       \n    fib <-- 1=\"\" fib=\"\" --=\"\"> 1\n    fib --> 2\n\n    ```"]