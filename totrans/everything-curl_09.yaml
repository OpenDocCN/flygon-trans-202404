- en: Building and installing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building and installing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source code for this project is written in a way that allows it to get compiled
    and built on just about any operating system and platform, with as few restraints
    and requirements as possible.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a 32bit (or larger) CPU architecture, if you have a C89 compliant
    compiler and if you have roughly a POSIX supporting sockets API, then you can
    most likely build curl and libcurl for your target system.
  prefs: []
  type: TYPE_NORMAL
- en: For the most popular platforms, the curl project comes with build systems already
    done and prepared to allow you to easily build it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: There are also friendly people and organizations who put together binary packages
    of curl and libcurl and make them available for download. The different options
    will be explored below.
  prefs: []
  type: TYPE_NORMAL
- en: The latest version?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Looking at the curl web site at [https://curl.haxx.se](https://curl.haxx.se)
    you can see the latest curl and libcurl version released from the project. That's
    the latest source code package you can get.
  prefs: []
  type: TYPE_NORMAL
- en: When you opt for a prebuilt and prepackaged version for your operating system
    or distribution of choice, you may not always find the latest version but you
    might have to either be satisfied with the latest version someone has packaged
    for your environment, or you need to build it yourself from source.
  prefs: []
  type: TYPE_NORMAL
- en: 'The curl project also provides info about the latest version in a somewhat
    more machine-readable format on this URL: `https://curl.haxx.se/info`.'
  prefs: []
  type: TYPE_NORMAL
- en: off git!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course, when building from source you can also always opt to build the very
    latest version that exist in the [git repository](https://github.com/curl/curl).
    It could however be a bit more fragile and probably requires slightly more attention
    to detail.
  prefs: []
  type: TYPE_NORMAL
- en: Installing prebuilt binaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing prebuilt binaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many friendly people and organizations who put together binary packages
    of curl and libcurl and make them available for download.
  prefs: []
  type: TYPE_NORMAL
- en: Many operating systems offer a "package repository" that is populated with software
    packages for you to install. From the [curl download page](https://curl.haxx.se/download.html)
    you can also follow links to plain binary packages for popular operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Installing from your package repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: curl and libcurl have been around for a very long time and most Linux distributions,
    BSD versions and other *nix versions have package repositories that allow you
    to install curl packages.
  prefs: []
  type: TYPE_NORMAL
- en: The most common ones are described below.
  prefs: []
  type: TYPE_NORMAL
- en: apt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`apt` is a tool to install prebuilt packages on Debian Linux and Ubuntu Linux
    distributions and derivates.'
  prefs: []
  type: TYPE_NORMAL
- en: To install the curl command-line tool, you usually just
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: â€¦and that then makes sure the dependencies are installed and usually libcurl
    is then also installed as an individual package.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to build applications against libcurl, you need a development package
    installed to get the include headers and some additional documentation, etc. You
    can then select a libcurl with the TLS backend you prefer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: yum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With Redhat Linux and CentOS Linux derivates, you use `yum` to install packages.
    Install the command-line tool with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You install the libcurl development package (with include files and some docs,
    etc.) with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: (The Redhat family of Linux systems usually ship curl built to use NSS as TLS
    backend.)
  prefs: []
  type: TYPE_NORMAL
- en: nix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Nix](https://nixos.org/nix/) is a package manager default to the NixOS distribution,
    but it can also be used on any Linux distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install command-line tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: homebrew
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Homebrew](https://brew.sh/) is an OSX package manager. It does not come by
    default, but one can install it easily.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the command-line tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: cygwin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TBD
  prefs: []
  type: TYPE_NORMAL
- en: Binary packages for Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TBD
  prefs: []
  type: TYPE_NORMAL
- en: Build from source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build from source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The curl project creates source code that can be built to produce the two products
    curl and libcurl. The conversion from source code to binaries is often referred
    to as "building". You build curl and libcurl from source.
  prefs: []
  type: TYPE_NORMAL
- en: The curl project doesn't provide any built binaries at all, it only ships the
    source code. The binaries which can be found on the download page of the curl
    web and installed from other places on the Internet are all built and provided
    to the world by other friendly people and organizations.
  prefs: []
  type: TYPE_NORMAL
- en: The source code consists of a large number of files containing C code. Generally
    speaking, the same set of files are used to build binaries for all platforms and
    computer architectures that curl supports. curl can be built and run on a vast
    number of different platforms. If you use a rare operating system yourself, chances
    are that building curl from source is the easiest or perhaps the only way to get
    curl.
  prefs: []
  type: TYPE_NORMAL
- en: Making it easy to build curl is a priority to the curl project, although we
    don't always necessarily succeed!
  prefs: []
  type: TYPE_NORMAL
- en: git vs tarballs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When release tarballs are created, a few files are generated and included in
    the final release file. Those generated files are not present in the git repository,
    because they are generated and there is no need to store them in git.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you want to build curl from git you need to generate some of those files
    yourself before you can build. On Linux and Unix systems, do this by running `./buildconf`
    and on Windows you run `buildconf.bat`.
  prefs: []
  type: TYPE_NORMAL
- en: On Linux and Unix-like systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two distinctly different ways to build curl on Linux and other Unix-like
    systems. There's the one using the configure script and there's the CMake approach.
  prefs: []
  type: TYPE_NORMAL
- en: There are two different build environments to cater for people's different opinions
    and tastes. The configure based build is arguably the more mature and more complete
    build system and should probably be considered the default one.
  prefs: []
  type: TYPE_NORMAL
- en: Autotools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The "Autotools" is a collection of different tools that used together generate
    the `configure` script. The configure script is run by the user who wants to build
    curl and it does a whole bunch of things:'
  prefs: []
  type: TYPE_NORMAL
- en: it checks for features and functions present in your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it offers command-line options so that you as a builder can decide what to enable
    and disable in the build. Features and protocols, etc., can be toggled on/off.
    Or even compiler warning levels and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it offers command-line options to let the builder point to specific installation
    paths for various third-party dependencies that curl can be built to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: specifies on which file path the generated installation should be placed when
    ultimately the build is made and "make install" is invoked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the most basic usage, just running `./configure` in the source directory
    is enough. When the script completes, it outputs a summary of what options it
    has detected/enabled and what features that are still disabled, some of them possibly
    because it failed to detect the presence of necessary third-party dependencies
    that are needed for those functions to work.
  prefs: []
  type: TYPE_NORMAL
- en: Then you invoke `make` to build the entire thing and `make install` to install
    curl, libcurl and associated things. `make install` requires that you have the
    correct rights in your system to create and write files in the installation directory
    or you will get some errors.
  prefs: []
  type: TYPE_NORMAL
- en: cross-compiling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cross-compiling means that you build the source on one architecture but the
    output is created to be run on a different one. For example, you could build the
    source on a Linux machine but have the output work to run on a Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: For cross-compiling to work, you need a dedicated compiler and build system
    setup for the particular target system for which you want to build. How to get
    and install that system is not covered in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a cross compiler, you can instruct configure to use that compiler
    instead of the "native" compiler when it builds curl so that the end result then
    can be moved over and used on the other machine.
  prefs: []
  type: TYPE_NORMAL
- en: CMake
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TBD
  prefs: []
  type: TYPE_NORMAL
- en: static linking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TBD
  prefs: []
  type: TYPE_NORMAL
- en: On Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TBD
  prefs: []
  type: TYPE_NORMAL
- en: make
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TBD
  prefs: []
  type: TYPE_NORMAL
- en: CMake
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TBD
  prefs: []
  type: TYPE_NORMAL
- en: other compilers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TBD
  prefs: []
  type: TYPE_NORMAL
- en: On other systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TBD
  prefs: []
  type: TYPE_NORMAL
- en: Porting curl to non-supported systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TBD
  prefs: []
  type: TYPE_NORMAL
- en: Select TLS backend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The configure based build offers the user to select from a wide variety of different
    TLS libraries when building. You select them by using the correct command line
    options.
  prefs: []
  type: TYPE_NORMAL
- en: The default OpenSSL configure check will also detect and use BoringSSL or libressl.
  prefs: []
  type: TYPE_NORMAL
- en: 'GnuTLS: `--without-ssl --with-gnutls`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cyassl: `--without-ssl --with-cyassl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NSS: `--without-ssl --with-nss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PolarSSL: `--without-ssl --with-polarssl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'mbedTLS: `--without-ssl --with-mbedtls`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'axTLS: `--without-ssl --with-axtls`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'schannel: `--without-ssl --with-winssl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'secure transport: `--with-winssl --with-darwinssl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key to making good software is to build on top of other great software. By
    using libraries that many others use, we reinvent the same things fewer times
    and we get more reliable software as there are more people using the same code.
  prefs: []
  type: TYPE_NORMAL
- en: A whole slew of features that curl provides require that it is built to use
    one or more external libraries. They are then dependencies of curl. None of them
    are *required*, but most users will want to use at least some of them.
  prefs: []
  type: TYPE_NORMAL
- en: zlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://zlib.net/](http://zlib.net/)'
  prefs: []
  type: TYPE_NORMAL
- en: curl can do automatic decompression of data transferred over HTTP if built with
    zlib. Getting compressed data over the wire will use less bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: c-ares
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://c-ares.haxx.se/](https://c-ares.haxx.se/)'
  prefs: []
  type: TYPE_NORMAL
- en: curl can be built with c-ares to be able to do asynchronous name resolution.
    Another option to enable asynchronous name resolution is to build curl with the
    threaded name resolver backend, which will then instead create a separate helper
    thread for each name resolve. c-ares does it all within the same thread.
  prefs: []
  type: TYPE_NORMAL
- en: libssh2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://libssh2.org/](https://libssh2.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: When curl is built with libssh2, it enables support for the SCP and SFTP protocols.
  prefs: []
  type: TYPE_NORMAL
- en: nghttp2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://nghttp2.org/](https://nghttp2.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a library for handling HTTP/2 framing and is a prerequisite for curl
    to support HTTP version 2.
  prefs: []
  type: TYPE_NORMAL
- en: openldap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.openldap.org/](https://www.openldap.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: This library is one option to allow curl to get support for the LDAP and LDAPS
    URL schemes. On Windows, you can also opt to build curl to use the winssl library.
  prefs: []
  type: TYPE_NORMAL
- en: librtmp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://rtmpdump.mplayerhq.hu/](https://rtmpdump.mplayerhq.hu/)'
  prefs: []
  type: TYPE_NORMAL
- en: To enable curl's support for the RTMP URL scheme, you must build curl with the
    librtmp library that comes from the RTMPDump project.
  prefs: []
  type: TYPE_NORMAL
- en: libmetalink
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://launchpad.net/libmetalink](https://launchpad.net/libmetalink)'
  prefs: []
  type: TYPE_NORMAL
- en: Build curl with libmetalink to have it support the [metalink](http://www.metalinker.org/)
    format, which allows curl to download the same file from multiple places. It includes
    checksums and more. See curl's [--metalink](https://curl.haxx.se/docs/manpage.html#--metalink)
    option.
  prefs: []
  type: TYPE_NORMAL
- en: libpsl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://rockdaboot.github.io/libpsl/](https://rockdaboot.github.io/libpsl/)'
  prefs: []
  type: TYPE_NORMAL
- en: When you build curl with support for libpsl, the cookie parser will know about
    the Public Suffix List and thus handle such cookies appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: libidn2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.gnu.org/software/libidn/libidn2/manual/libidn2.html](https://www.gnu.org/software/libidn/libidn2/manual/libidn2.html)'
  prefs: []
  type: TYPE_NORMAL
- en: curl handles International Domain Names (IDN) with the help of the libidn2 library.
  prefs: []
  type: TYPE_NORMAL
- en: TLS libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many different TLS libraries to choose from, so they are covered in
    a [separate section](building-tls.html).
  prefs: []
  type: TYPE_NORMAL
- en: TLS libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build to use a TLS library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make curl support TLS based protocols, such as HTTPS, FTPS, SMTPS, POP3S,
    IMAPS and more, you need to build with a third-party TLS library since curl doesn't
    implement the TLS protocol itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'curl is written to work with a large number of TLS libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: BoringSSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GSkit (OS/400 specific)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GnuTLS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure Transport (native macOS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WolfSSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: axTLS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: libressl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mbedTLS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schannel (native Windows)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you build curl and libcurl to use one of these libraries, it is important
    that you have the library and its include headers installed on your build machine.
  prefs: []
  type: TYPE_NORMAL
- en: configure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below, you will learn how to tell configure to use the different libraries.
    Note that for all libraries except OpenSSL and its siblings, you must *disable*
    the check for OpenSSL by using `--without-ssl`.
  prefs: []
  type: TYPE_NORMAL
- en: OpenSSL, BoringSSL, libressl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'configure will detect OpenSSL in its default path by default. You can optionally
    point configure to a custom install path prefix where it can find openssl:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The alternatives [BoringSSL](building-boringssl.html) and libressl look similar
    enough that configure will detect them the same way as OpenSSL but it will use
    some additional measures to find out which of the particular flavors it is using.
  prefs: []
  type: TYPE_NORMAL
- en: GnuTLS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'configure will detect GnuTLS in its default path by default. You can optionally
    point configure to a custom install path prefix where it can find gnutls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: NSS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'configure will detect NSS in its default path by default. You can optionally
    point configure to a custom install path prefix where it can find nss:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: WolfSSL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '(cyassl was the former name of the library) configure will detect WolfSSL in
    its default path by default. You can optionally point configure to a custom install
    path prefix where it can find WolfSSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: axTLS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'configure will detect axTLS in its default path by default. You can optionally
    point configure to a custom install path prefix where it can find axTLS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: mbedTLS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'configure will detect mbedTLS in its default path by default. You can optionally
    point configure to a custom install path prefix where it can find mbedTLS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Secure Transport
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '(DarwinSSL is an alternative name for Secure Transport) configure will detect
    Secure Transport in its default path by default. You can optionally point configure
    to a custom install path prefix where it can find DarwinSSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Schannel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '(WinSSL is an alternative name for Schannel) configure will detect Schannel
    in its default path by default. You can optionally point configure to a custom
    install path prefix where it can find WinSSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: BoringSSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build curl with boringssl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: build boringssl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: $HOME/src is where I put the code in this example. You can pick wherever you
    like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: set up the build tree to get detected by curl's configure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the boringssl source tree root, make sure there's a `lib` and an `include`
    dir. The `lib` dir should contain the two libs (I made them symlinks into the
    build dir). The `include` dir is already present by default. Make and populate
    `lib` like this (commands issued in the source tree root, not in the `build/`
    subdirectory).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: configure curl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`LIBS=-lpthread ./configure --with-ssl=$HOME/src/boringssl` (where I point
    out the root of the boringssl tree)'
  prefs: []
  type: TYPE_NORMAL
- en: Verify that at the end of the configuration, it says it detected BoringSSL to
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: build curl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run `make` in the curl source tree.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can install curl normally with `make install` etc.
  prefs: []
  type: TYPE_NORMAL
