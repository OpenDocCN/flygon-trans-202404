["```\n>>> list_var = [0, 1, 2, 3]\n>>> list_var[0]\n0\n>>> list_var[1]\n1 \n```", "```\n>>> empty_dict = {}\n>>> full_dict = {\"January\": 31, \"February\":28, \"March\": 31} \n```", "```\n>>> empty_dict[\"April\"] #should error because there is no \"April\" key in this dictionary \nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'April'\n>>> full_dict[\"January\"] #should return the value associated with \"January\" key\n31 \n```", "```\n>>> empty_dict[\"April\"] = 30 #adding a new key,value pair\n>>> empty_dict\n{'April': 30}\n>>> full_dict[\"February\"] = 29 #changing an existing key's value\n>>> full_dict #note that there is no order to the entries of the dictionary\n{'March': 31, 'February': 29, 'January': 31} \n```", "```\n>>> len(full_dict)\n3 \n```", "```\n>>> print (\"dictionary as string: \" + str(full_dict)) #str returns a printable string representation\ndictionary as string: {'January': 31, 'March': 31, 'February': 29} \n```", "```\n>>> full_dict.get(\"April\", default=False) #returns default if key is not in dictionary\nFalse\n>>> full_dict.has_key(\"January\")\nTrue\n>>> \"January\" in full_dict #same as has_key operation\nTrue \n```", "```\n>>> full_dict.update(empty_dict) #adds all of empty_dict's key,values into full_dict\n>>> full_dict\n{'January': 31, 'March': 31, 'February': 29, 'April': 30} \n```", "```\n>>> all_months = \"\"\n>>> total_days = 0\n>>> for key in full_dict:\n...    all_months += key\n...    all_months += \" \"\n...    total_days += full_dict[key]\n...\n>>> total_days\n121\n>>> all_months\n'January March February April ' \n```", "```\n>>> total_days = 0\n>>> for val in full_dict.values():\n...    total_days += val\n...\n>>> total_days\n121 \n```", "```\n>>> del empty_dict['April']; # remove entry with key 'Name'\n>>> empty_dict.clear();     # remove all entries in dict\n>>> del empty_dict ;        # delete entire dictionary \n```", "```\ndef fib(n):\n    return n if n < 2 else fib(n-2) + fib(n-1) \n```", "```\nfib_cache = {}\ndef fib(n):\n    if n in fib_cache:\n        return fib_cache[n]\n    else:\n        fib_cache[n] = n if n < 2 else fib(n-2) + fib(n-1)\n        return fib_cache[n] \n```", "```\ndef memo_fib(n):\n    fib_cache = {}\n    def fib(n):\n        if n in fib_cache:\n            return fib_cache[n]\n        else:\n            fib_cache[n] = n if n < 2 else fib(n-2) + fib(n-1)\n            return fib_cache[n]\n    return fib(n) \n```"]