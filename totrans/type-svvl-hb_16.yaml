- en: 簡単な関数を作ってみよう
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/tutorials/make-a-simple-function-via-cli](https://typescriptbook.jp/tutorials/make-a-simple-function-via-cli)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: このチュートリアルではTypeScriptで簡単な関数を作る体験を通じて、TypeScriptの型がJavaScriptのどのような問題を解決するのか、コンパイラはどのような役割を果たすのかを学びます。
  prefs: []
  type: TYPE_NORMAL
- en: このチュートリアルに必要なもの[​](#このチュートリアルに必要なもの "このチュートリアルに必要なもの への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: このチュートリアルをやるに当たり、必要なツールがあります。次にリストアップするものを準備しておいてください。
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VS CodeやWebStormなどのエディター
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tsc(TypeScriptコンパイラ)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[## 📄️ 開発環境の準備'
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptの開発に必要になるNode.jsとTypeScriptコンパイラ、エディタをインストールしましょう。](/tutorials/setup)
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptで発生しうる問題[​](#javascriptで発生しうる問題 "JavaScriptで発生しうる問題 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: まず、次のJavaScriptファイルをローカル環境に作ります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: increment.jsjs`function increment(num) {  return num +  1;}``console.log(increment(999));`
  prefs: []
  type: TYPE_NORMAL
- en: このプログラムは引数をインクリメントして返すだけのものです。これをNode.jsで実行してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 問題なく動いたと思います。つづいて、`increment`関数の引数を`999`からstring型の`"999"`に書き換えてみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: increment.jsjs`function increment(num) {  return num +  1;}``console.log(increment("999"));//                    ^^^^^`
  prefs: []
  type: TYPE_NORMAL
- en: この小さな変更で実行結果は大きく変わってしまいます。実行してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 出力結果は1000から9991に変わったはずです。この理由は、引数`num`が文字列になったせいで、`+`演算子が足し算ではなく文字列結合になったからです。JavaScriptは`"999"
    + 1`を`"999" + "1"`と解釈します。この解釈の詳細を知るには型強制の説明をご覧ください。
  prefs: []
  type: TYPE_NORMAL
- en: '[## 📄️ 型強制'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptにはデータ型がありますが、型が異なる2つの値に対し演算してもエラーにならない場合があります。たとえば、string型の"1"からnumber型の1を減算した場合、number型の0が計算結果として出てきます。](/reference/values-types-variables/type-coercion)
  prefs: []
  type: TYPE_NORMAL
- en: 引数は`999`と`"999"`という型の微妙な違いだけです。もしもこれが金額の計算だったら大問題です。`increment`関数は引数`num`がnumber型のときだけ正しい動きをします。しかし、関数を呼び出すときは、制約なしにさまざまな型を渡せてしまいます。引数にnumber型のみ代入できるように制約するには、どのようにしたらよいのでしょうか。ここでTypeScriptの出番になります。
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptをTypeScriptに変換する[​](#javascriptをtypescriptに変換する "JavaScriptをTypeScriptに変換する
    への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScriptをTypeScriptにする第一歩は、ファイルの拡張子を`.js`から`.ts`に変更することです。TypeScriptはざっくり言って、JavaScriptに型関連の構文を追加したにすぎない言語です。なので、JavaScriptのコードはそのままでもTypeScriptとして扱えます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: コンパイラを働かせる[​](#コンパイラを働かせる "コンパイラを働かせる への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptの目玉機能はなんと言ってもコンパイラです。コンパイラの役割のひとつは、上例のような型の問題をチェックし、発見した問題点をプログラマに報告することです。TypeScriptコンパイラはとても賢く、ノーヒントでも型の問題を指摘してくれます。しかし、ヒントを十分に与えたほうが、コンパイラはもっと緻密なチェックをしてくれます。
  prefs: []
  type: TYPE_NORMAL
- en: 'コンパイラに与えるヒントのことを「型注釈(type annotation)」と言います。それでは、`increment`関数の引数`num`に型注釈を書いてみましょう。型注釈は`num`の右に`:
    number`と書きます。これを書くことで「引数`num`はnumber型だけが代入できます」という意味になります。コンパイラはこれをヒントに関数呼び出しコードをチェックするようになります。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 型注釈を書いたら、TypeScriptコンパイラにチェックをさせてみましょう。TypeScriptコンパイラのコマンドは`tsc`です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: すると、次のエラーが報告されるはずです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: このエラーの内容は、「引数`num`はnumber型しか代入できないはずだが、関数呼び出しではstring型を代入している。本当に問題ないか？」という指摘です。
  prefs: []
  type: TYPE_NORMAL
- en: エラーというと望まれないものというイメージがあるかもしれません。しかし、コンパイラが報告するエラーはむしろ歓迎されるものです。なぜなら、自分の代わりにコードに潜んでいる危険を、コーディング時点で知らせてくれるからです。
  prefs: []
  type: TYPE_NORMAL
- en: コンパイルを通す[​](#コンパイルを通す "コンパイルを通す への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: コンパイラが指摘する問題点をすべて解消する作業のことを「コンパイルを通す」といいます。上のコードをコンパイルが通るコードに直してみましょう。直し方は単純に、関数呼び出しの引数をnumber型にするだけです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 直したら再びコンパイルしてみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 今度は何も表示されずに処理が終わるはずです。コンパイル成功です。
  prefs: []
  type: TYPE_NORMAL
- en: 生成されたJavaScript[​](#生成されたjavascript "生成されたJavaScript への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここまでの手順で、increment.jsというファイルができていることに気づいたかもしれません。そのファイルの内容は次のようになっていると思います。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: これは、increment.tsをコンパイルする過程でコンパイラが生成したJavaScriptファイルです。TypeScriptのコードと比べてみると、引数`num`から型注釈が取り除かれていることがわかります。
  prefs: []
  type: TYPE_NORMAL
- en: 型注釈の部分はTypeScript固有のものです。それが書いてあるとブラウザやNode.jsでは実行できません。なので、TypeScriptコンパイラはJavaScript実行環境で動かす用のJavaScriptファイルを生成してくれます。開発者はこの成果物のJavaScriptファイルを本番環境にデプロイすることになります。
  prefs: []
  type: TYPE_NORMAL
- en: 学びをシェアする
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: ・JavaScriptからTypeScriptへの書き換えは拡張子を.tsにする
  prefs: []
  type: TYPE_NORMAL
- en: ・コンパイラは型の問題を教えてくれる
  prefs: []
  type: TYPE_NORMAL
- en: ・型注釈を書き加えると、コンパイラはより細かいチェックをしてくれる
  prefs: []
  type: TYPE_NORMAL
- en: ・コンパイラが生成したJSをデプロイして使う
  prefs: []
  type: TYPE_NORMAL
- en: 『サバイバルTypeScript』より
  prefs: []
  type: TYPE_NORMAL
- en: '[この内容をツイートする](https://twitter.com/intent/tweet?text=%E3%83%BBJavaScript%E3%81%8B%E3%82%89TypeScript%E3%81%B8%E3%81%AE%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%AF%E6%8B%A1%E5%BC%B5%E5%AD%90%E3%82%92.ts%E3%81%AB%E3%81%99%E3%82%8B%0A%E3%83%BB%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E3%81%AF%E5%9E%8B%E3%81%AE%E5%95%8F%E9%A1%8C%E3%82%92%E6%95%99%E3%81%88%E3%81%A6%E3%81%8F%E3%82%8C%E3%82%8B%0A%E3%83%BB%E5%9E%8B%E6%B3%A8%E9%87%88%E3%82%92%E6%9B%B8%E3%81%8D%E5%8A%A0%E3%81%88%E3%82%8B%E3%81%A8%E3%80%81%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E3%81%AF%E3%82%88%E3%82%8A%E7%B4%B0%E3%81%8B%E3%81%84%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%92%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%82%8B%0A%E3%83%BB%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E3%81%8C%E7%94%9F%E6%88%90%E3%81%97%E3%81%9FJS%E3%82%92%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%97%E3%81%A6%E4%BD%BF%E3%81%86%0A%0A%E3%80%8E%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABTypeScript%E3%80%8F%E3%82%88%E3%82%8A)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
