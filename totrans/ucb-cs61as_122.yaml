- en: Homework 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can copy the template for this homework by typing in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can also download it by clicking [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw10.scm).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Read [SICP 3.5.1](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_3.5.1),
    then answer the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the type of the value of `(delay (+ 1 27))`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the type of the value of `(force (delay (+ 1 27)))`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Evaluating this expression produces an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Explain why.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What's the difference between the following two expressions?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An unsolved problem in number theory concerns the following algorithm for creating
    a sequence of positive integers [mathjaxinline]s_1, s_2, \ldots[/mathjaxinline]
    where [mathjaxinline]s_1[/mathjaxinline] is some positive integer and, for all
    [mathjaxinline]n > 1[/mathjaxinline],
  prefs: []
  type: TYPE_NORMAL
- en: if [mathjaxinline]s_n[/mathjaxinline] is odd, then [mathjaxinline]s_{n+1} =
    3s_n+1[/mathjaxinline];
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if [mathjaxinline]s_n[/mathjaxinline] is even, then [mathjaxinline]s_{n+1} =
    s_n \div 2[/mathjaxinline].
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No matter what starting value [mathjaxinline]s_1[/mathjaxinline] is chosen,
    the sequence (called a *hailstone sequence*) always seems to end with the repeating
    values 1, 4, 2, 1, 4, 2, 1, .... However, it is not known if this is always the
    case.
  prefs: []
  type: TYPE_NORMAL
- en: Write a procedure `num-seq` that, given a positive integer `n` as argument,
    returns the hailstone sequence for `n`. For example, `(num-seq 7)` should return
    the stream representing the sequence 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10,
    5, 16, 8, 4, 2, 1, 4, 2, 1, ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a procedure `seq-length` that, given a stream produced by `num-seq`, returns
    the number of values that occur in the sequence up to and including the first
    1\. For example, `(seq-length (num-seq 7))` should return 17\. You should assume
    that there is a 1 somewhere in the sequence.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's that time of the homeworkâ€”SICP!
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete the following: [3.50, 3.51, 3.52](http://mitpress.mit.edu/sicp/full-
    text/book/book-Z-H-24.html#%_thm_3.50), [3.53, 3.54, 3.55, 3.56](http://mitpress.mit.edu/sicp/full-
    text/book/book-Z-H-24.html#%_thm_3.53), [3.64](http://mitpress.mit.edu/sicp /full-text/book/book-Z-H-24.html#%25_thm_3.64),
    [3.66, 3.68](http://mitpress.mit.edu/sicp/full- text/book/book-Z-H-24.html#%25_thm_3.66).'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write and test two functions to manipulate nonnegative proper fractions.
  prefs: []
  type: TYPE_NORMAL
- en: The first function, `fract-stream`, will take as its argument a list of two
    nonnegative integers, the numerator and the denominator, in which the numerator
    is less than the denominator. It will return an infinite stream of decimal digits
    representing the decimal expansion of the fraction.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second function, `approximation`, will take two arguments: a fraction stream
    and a nonnegative integer numdigits. It will return a list (not a stream) containing
    the first numdigits digits of the decimal expansion.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(fract-stream ''(1 7))` should return the stream representing the decimal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expansion of 1/7, which is 0.142857142857142857...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(stream-car (fract-stream ''(1 7)))` should return `1`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(stream-car (stream-cdr (stream-cdr (fract-stream ''(1 7)))))` should return'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(approximation (fract-stream ''(1 7)) 4)` should return `(1 4 2 8)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(approximation (fract-stream ''(1 2)) 4)` should return `(5 0 0 0)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submit Your Homework!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  prefs: []
  type: TYPE_NORMAL
