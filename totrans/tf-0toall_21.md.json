["```\n# https://www.tensorflow.org/api_guides/python/array_ops\nimport tensorflow as tf\nimport numpy as np\nimport pprint\ntf.set_random_seed(777)  # for reproducibility\n\npp = pprint.PrettyPrinter(indent=4)\nsess = tf.InteractiveSession() \n```", "```\nt = np.array([0., 1., 2., 3., 4., 5., 6.])\npp.pprint(t)\nprint(t.ndim) # rank\nprint(t.shape) # shape\nprint(t[0], t[1], t[-1])\nprint(t[2:5], t[4:-1])\nprint(t[:2], t[3:]) \n```", "```\narray([ 0.,  1.,  2.,  3.,  4.,  5.,  6.])\n(7,) 1\n0.0 1.0 6.0\n[ 2\\.  3\\.  4.] [ 4\\.  5.]\n[ 0\\.  1.] [ 3\\.  4\\.  5\\.  6.] \n```", "```\nt = np.array([[1., 2., 3.], [4., 5., 6.], [7., 8., 9.], [10., 11., 12.]])\npp.pprint(t)\nprint(t.ndim) # rank\nprint(t.shape) # shape \n```", "```\narray([[  1.,   2.,   3.],\n       [  4.,   5.,   6.],\n       [  7.,   8.,   9.],\n       [ 10.,  11.,  12.]])\n2\n(4, 3) \n```", "```\nt = tf.constant([1,2,3,4])\ntf.shape(t).eval() \n```", "```\narray([4], dtype=int32) \n```", "```\nt = tf.constant([[1,2],\n                 [3,4]])\ntf.shape(t).eval() \n```", "```\narray([2, 2], dtype=int32) \n```", "```\nt = tf.constant([[[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],[[13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]]]])\ntf.shape(t).eval() \n```", "```\narray([1, 2, 3, 4], dtype=int32) \n```", "```\n[\n    [\n        [\n            [1,2,3,4], \n            [5,6,7,8],\n            [9,10,11,12]\n        ],\n        [\n            [13,14,15,16],\n            [17,18,19,20], \n            [21,22,23,24]\n        ]\n    ]\n] \n```", "```\n[[[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],\n  [[13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]]]] \n```", "```\nmatrix1 = tf.constant([[3., 3.]])\nmatrix2 = tf.constant([[2.],[2.]])\ntf.matmul(matrix1, matrix2).eval() \n```", "```\narray([[ 12.]], dtype=float32) \n```", "```\n(matrix1*matrix2).eval() \n```", "```\narray([[ 6.,  6.],\n       [ 6.,  6.]], dtype=float32) \n```", "```\nmatrix1 = tf.constant([[3., 3.]])\nmatrix2 = tf.constant([[2.],[2.]])\n(matrix1+matrix2).eval() \n```", "```\narray([[ 5.,  5.],\n       [ 5.,  5.]], dtype=float32) \n```", "```\nmatrix1 = tf.constant([[3., 3.]])\nmatrix2 = tf.constant([[2., 2.]])\n(matrix1+matrix2).eval() \n```", "```\narray([[ 5.,  5.]], dtype=float32) \n```", "```\ntf.random_normal([3]).eval() \n```", "```\narray([ 2.20866942, -0.73225045,  0.33533147], dtype=float32) \n```", "```\ntf.random_uniform([2]).eval() \n```", "```\narray([ 0.08186948,  0.42999184], dtype=float32) \n```", "```\ntf.random_uniform([2, 3]).eval() \n```", "```\narray([[ 0.43535876,  0.76933432,  0.65130949],\n       [ 0.90863407,  0.06278825,  0.85073185]], dtype=float32) \n```", "```\ntf.reduce_mean([1, 2], axis=0).eval() \n```", "```\n1 \n```", "```\nx = [[1., 2.],\n     [3., 4.]]\n\ntf.reduce_mean(x).eval() \n```", "```\n2.5 \n```", "```\ntf.reduce_mean(x, axis=0).eval() \n```", "```\narray([ 2.,  3.], dtype=float32) \n```", "```\ntf.reduce_mean(x, axis=1).eval() \n```", "```\narray([ 1.5,  3.5], dtype=float32) \n```", "```\ntf.reduce_mean(x, axis=-1).eval() \n```", "```\narray([ 1.5,  3.5], dtype=float32) \n```", "```\ntf.reduce_sum(x).eval() \n```", "```\n10.0 \n```", "```\ntf.reduce_sum(x, axis=0).eval() \n```", "```\narray([ 4.,  6.], dtype=float32) \n```", "```\ntf.reduce_sum(x, axis=-1).eval() \n```", "```\narray([ 3.,  7.], dtype=float32) \n```", "```\ntf.reduce_mean(tf.reduce_sum(x, axis=-1)).eval() \n```", "```\n5.0 \n```", "```\nx = [[0, 1, 2],\n     [2, 1, 0]]\ntf.argmax(x, axis=0).eval() \n```", "```\narray([1, 0, 0]) \n```", "```\ntf.argmax(x, axis=1).eval() \n```", "```\narray([2, 0]) \n```", "```\ntf.argmax(x, axis=-1).eval() \n```", "```\narray([2, 0]) \n```", "```\nt = np.array([[[0, 1, 2], \n               [3, 4, 5]],\n\n              [[6, 7, 8], \n               [9, 10, 11]]])\nt.shape \n```", "```\n(2, 2, 3) \n```", "```\ntf.reshape(t, shape=[-1, 3]).eval() \n```", "```\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11]]) \n```", "```\ntf.reshape(t, shape=[-1, 1, 3]).eval() \n```", "```\narray([[[ 0,  1,  2]],\n\n       [[ 3,  4,  5]],\n\n       [[ 6,  7,  8]],\n\n       [[ 9, 10, 11]]]) \n```", "```\ntf.squeeze([[0], [1], [2]]).eval() \n```", "```\narray([0, 1, 2], dtype=int32) \n```", "```\ntf.expand_dims([0, 1, 2], 1).eval() \n```", "```\narray([[0],\n       [1],\n       [2]], dtype=int32) \n```", "```\ntf.one_hot([[0], [1], [2], [0]], depth=3).eval() \n```", "```\narray([[[ 1.,  0.,  0.]],\n\n       [[ 0.,  1.,  0.]],\n\n       [[ 0.,  0.,  1.]],\n\n       [[ 1.,  0.,  0.]]], dtype=float32) \n```", "```\nt = tf.one_hot([[0], [1], [2], [0]], depth=3)\ntf.reshape(t, shape=[-1, 3]).eval() \n```", "```\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.],\n       [ 1.,  0.,  0.]], dtype=float32) \n```", "```\ntf.cast([1.8, 2.2, 3.3, 4.9], tf.int32).eval() \n```", "```\narray([1, 2, 3, 4], dtype=int32) \n```", "```\ntf.cast([True, False, 1 == 1, 0 == 1], tf.int32).eval() \n```", "```\narray([1, 0, 1, 0], dtype=int32) \n```", "```\nx = [1, 4]\ny = [2, 5]\nz = [3, 6]\n\n# Pack along first dim.\ntf.stack([x, y, z]).eval() \n```", "```\narray([[1, 4],\n       [2, 5],\n       [3, 6]], dtype=int32) \n```", "```\ntf.stack([x, y, z], axis=1).eval() \n```", "```\narray([[1, 2, 3],\n       [4, 5, 6]], dtype=int32) \n```", "```\nx = [[0, 1, 2],\n     [2, 1, 0]]\n\ntf.ones_like(x).eval() \n```", "```\narray([[1, 1, 1],\n       [1, 1, 1]], dtype=int32) \n```", "```\ntf.zeros_like(x).eval() \n```", "```\narray([[0, 0, 0],\n       [0, 0, 0]], dtype=int32) \n```", "```\nfor x, y in zip([1, 2, 3], [4, 5, 6]):\n    print(x, y) \n```", "```\n1 4\n2 5\n3 6 \n```", "```\nfor x, y, z in zip([1, 2, 3], [4, 5, 6], [7, 8, 9]):\n    print(x, y, z) \n```", "```\n1 4 7\n2 5 8\n3 6 9 \n```", "```\nt = np.array([[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]])\npp.pprint(t.shape)\npp.pprint(t) \n```", "```\n(2, 2, 3)\narray([[[ 0,  1,  2],\n        [ 3,  4,  5]],\n\n       [[ 6,  7,  8],\n        [ 9, 10, 11]]]) \n```", "```\nt1 = tf.transpose(t, [1, 0, 2])\npp.pprint(sess.run(t1).shape)\npp.pprint(sess.run(t1)) \n```", "```\n(2, 2, 3)\narray([[[ 0,  1,  2],\n        [ 6,  7,  8]],\n\n       [[ 3,  4,  5],\n        [ 9, 10, 11]]]) \n```", "```\nt = tf.transpose(t1, [1, 0, 2])\npp.pprint(sess.run(t).shape)\npp.pprint(sess.run(t)) \n```", "```\n(2, 2, 3)\narray([[[ 0,  1,  2],\n        [ 3,  4,  5]],\n\n       [[ 6,  7,  8],\n        [ 9, 10, 11]]]) \n```", "```\nt2 = tf.transpose(t, [1, 2, 0])\npp.pprint(sess.run(t2).shape)\npp.pprint(sess.run(t2)) \n```", "```\n(2, 3, 2)\narray([[[ 0,  6],\n        [ 1,  7],\n        [ 2,  8]],\n\n       [[ 3,  9],\n        [ 4, 10],\n        [ 5, 11]]]) \n```", "```\nt = tf.transpose(t2, [2, 0, 1])\npp.pprint(sess.run(t).shape)\npp.pprint(sess.run(t)) \n```", "```\n(2, 2, 3)\narray([[[ 0,  1,  2],\n        [ 3,  4,  5]],\n\n       [[ 6,  7,  8],\n        [ 9, 10, 11]]]) \n```"]