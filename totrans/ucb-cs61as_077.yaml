- en: Homework 6
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业 6
- en: 'Type the following command at the terminal to copy the template file to the
    current directory (note the period at the end):'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端键入以下命令将模板文件复制到当前目录（注意末尾的句点）：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Or you can download the template [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw6.rkt).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以在[这里](http://inst.eecs.berkeley.edu/~cs61as/templates/hw6.rkt)下载模板。
- en: Autograder
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动评分程序
- en: To run the autograder on your computer, download the test file [here](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw6-tests.rkt).
    Follow the instructions from previous lessons.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要在计算机上运行自动评分程序，请在此处下载测试文件：[here](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw6-tests.rkt)。按照之前课程的说明操作。
- en: Exercise 0
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 0
- en: '**Exercise 0 consists of problems from the lesson. Highly recommended to do.
    This is NOT for credit.**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 0 包括来自课程的问题。强烈建议完成。这不计入学分。**'
- en: Load the racket-1 interpreter from the file
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件中加载 racket-1 解释器
- en: '`~cs61as/lib/racket1.rkt`'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`~cs61as/lib/racket1.rkt`'
- en: 'To start the interpreter, type `(racket-1)`. Familiarize yourself with it by
    evaluating some expressions. Remember: you have all the Racket primitives for
    arithmetic and list manipulation; you have lambda but not higher-order functions;
    you don''t have define. To stop the racket-1 interpreter and return to Racket,
    just evaluate an illegal expression, such as `()`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动解释器，请键入`(racket-1)`。通过评估一些表达式来熟悉它。记住：你有所有 Racket 的算术和列表操作原语；你有 lambda 但没有高阶函数；你没有定义。要停止
    racket-1 解释器并返回 Racket，只需评估一个非法表达式，例如`()`。
- en: 0a. Trace in detail how a simple procedure call such as
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 0a. 详细跟踪一个简单的过程调用，例如
- en: '`((lambda (x) (+ x 3)) 5)`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`((lambda (x) (+ x 3)) 5)`'
- en: is handled in racket-1.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 racket-1 中处理。
- en: '0b. Try inventing higher-order procedures; since you don''t have define you''ll
    have to use the Y-combinator trick, like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 0b. 尝试发明高阶过程；由于你没有定义，你将不得不使用 Y 组合子技巧，就像这样：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '0c. Since all the Racket primitives are automatically available in racket-1,
    you might think you could use Racket''s primitive map function. Try these examples:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 0c. 由于 racket-1 中自动可用所有 Racket 原语，你可能认为可以使用 Racket 的原始 map 函数。尝试这些示例：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Explain the results.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 解释结果。
- en: '0d. Modify the interpreter to add the and special form. Test your work. Be
    sure that as soon as a false value is computed, your and returns #f without evaluating
    any further arguments.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '0d. 修改解释器以添加 and 特殊形式。测试你的工作。确保一旦计算出 false 值，你的 and 会返回 #f 而不再评估任何其他参数。'
- en: Exercise 1
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1
- en: 'Complete the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下内容：
- en: Abelson & Sussman, exercises [2.74, 2.75, 2.76](http://mitpress.mit.edu/sicp
    /full-text/book/book-Z-H-17.html#%25_thm_2.74), [2.77, 2.79, 2.80](http://mitpress.mit.edu/sicp/full-
    text/book/book-Z-H-18.html#%25_thm_2.77), [2.81, 2.83](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-18.html#%25_thm_2.81)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 阿贝尔森与苏斯曼，练习 [2.74, 2.75, 2.76](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-17.html#%25_thm_2.74)，[2.77,
    2.79, 2.80](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-18.html#%25_thm_2.77)，[2.81,
    2.83](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-18.html#%25_thm_2.81)
- en: 'Note: Some of these are thought-exercises; you needn''t actually run any Scheme
    programs for them! (Some don''t ask you to write procedures at all; others ask
    for modifications to a program that isn''t online.)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：其中一些是思考练习；你不需要实际运行任何 Scheme 程序！（有些不要求你编写过程；其他要求修改不在线上的程序。）
- en: Exercise 2
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2
- en: Write a `map` primitive for `racket-1` (call it `map-1` so you and Racket don't
    get confused about which is which) that works correctly for all mapped procedures.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为 `racket-1` 编写一个 `map` 原语（称为 `map-1`，以便你和 Racket 不会混淆哪个是哪个），它对所有映射过程都能正确工作。
- en: Exercise 3
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3
- en: 'Modify the `racket-1` interpreter to add the `let` special form. Hint: Like
    a procedure call, `let` will have to use `substitute` to replace certain variables
    with their values. Don''t forget to evaluate the expressions that provide those
    values!'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 修改 `racket-1` 解释器以添加 `let` 特殊形式。提示：像过程调用一样，`let` 将必须使用 `substitute` 替换某些变量为它们的值。不要忘记评估提供这些值的表达式！
- en: Exercise 4
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4
- en: '[SICP ex. 2.62](http://mitpress.mit.edu/sicp/full- text/book/book-Z-H-16.html#%25_thm_2.62)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[SICP 练习 2.62](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-16.html#%25_thm_2.62)'
- en: 'This will help: [SICP 2.3.3](http://mitpress.mit.edu/sicp/full- text/book/book-Z-H-16.html#%_sec_2.3.3)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这会有所帮助：[SICP 2.3.3](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-16.html#%_sec_2.3.3)
- en: Exercise 5
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 5
- en: The file `~cs61as/lib/bst.scm` contains the binary search tree procedures from
    SICP 2.3.3\. Using adjoin-set, construct the [trees shown on page 156](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-16.html#%_fig_2.16).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`~cs61as/lib/bst.scm`包含了SICP 2.3.3中的二叉搜索树过程。使用adjoin-set，构建[第156页上显示的树](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-16.html#%_fig_2.16)。
- en: 'Extra for Experts: Exercise 6'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专家专用：练习6
- en: '**Do this if you want to. This is NOT for credit.**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你愿意的话可以做这个。这不计入学分。**'
- en: 'Another approach to the problem of type-handling is type inference. If, for
    instance, a procedure includes the expression `(+ n k)`, one can infer that `n`
    and `k` have numeric values. Similarly, the expression`(f a b)` indicates that
    the value of f is a procedure. Write a procedure called inferred-types that, given
    a definition of a Scheme procedure as argument, returns a list of information
    about the parameters of the procedure. The information list should contain one
    element per parameter; each element should be a two-element list whose first element
    is the parameter name and whose second element is a word indicating the type inferred
    for the parameter. Possible types:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 处理类型问题的另一种方法是类型推断。例如，如果一个过程包括表达式`(+ n k)`，则可以推断`n`和`k`具有数值。类似地，表达式`(f a b)`表明f的值是一个过程。编写一个名为inferred-types的过程，给定一个Scheme过程的定义作为参数，返回有关过程参数的信息列表。信息列表应该对应每个参数一个元素；每个元素应该是一个包含参数名称和推断参数类型的两个元素列表。可能的类型：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should assume for this problem that the body of the procedure to be examined
    does not contain any occurrences of `if` or `cond`, although it may contain arbitrarily
    nested and quoted expressions. (A more ambitious inference procedure both would
    examine a more comprehensive set of procedures and could infer conditions like
    "�nonempty list"�.) Here's an example of what your inference procedure should
    return.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题，你应该假设要检查的过程体中不包含任何`if`或`cond`的出现，尽管它可能包含任意嵌套和引用的表达式。（一个更雄心勃勃的推断过程既会检查更全面的一组过程，还可以推断条件，比如“非空列表”。）以下是你的推断过程应该返回的示例。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: should return
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 应该返回
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you're really ambitious, you could maintain a database of inferred argument
    types and use it when a procedure you've seen is invoked by another procedure
    you're examining!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的雄心勃勃，你可以维护一个推断参数类型的数据库，并在你正在检查的过程被另一个过程调用时使用它！
- en: Submit Your Homework!
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交你的作业！
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有关说明，请参阅[此指南](../submit.html)。它涵盖了基本的终端命令和作业提交。
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在提交作业时遇到任何问题，请不要犹豫向助教求助！
