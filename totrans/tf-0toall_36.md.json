["```\n# Lab 10 MNIST and High-level TF API\nfrom tensorflow.contrib.layers import fully_connected, batch_norm, dropout\nfrom tensorflow.contrib.framework import arg_scope\nimport tensorflow as tf\nimport random\n# import matplotlib.pyplot as plt\n\nfrom tensorflow.examples.tutorials.mnist import input_data\n\ntf.set_random_seed(777)  # reproducibility\n\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n# Check out https://www.tensorflow.org/get_started/mnist/beginners for\n# more information about the mnist dataset\n\n# parameters\nlearning_rate = 0.01  # we can use large learning rate using Batch Normalization\ntraining_epochs = 15\nbatch_size = 100\nkeep_prob = 0.7\n\n# input place holders\nX = tf.placeholder(tf.float32, [None, 784])\nY = tf.placeholder(tf.float32, [None, 10])\ntrain_mode = tf.placeholder(tf.bool, name='train_mode')\n\n# layer output size\nhidden_output_size = 512\nfinal_output_size = 10\n\nxavier_init = tf.contrib.layers.xavier_initializer()\nbn_params = {\n    'is_training': train_mode,\n    'decay': 0.9,\n    'updates_collections': None\n}\n\n# We can build short code using 'arg_scope' to avoid duplicate code\n# same function with different arguments\nwith arg_scope([fully_connected],\n               activation_fn=tf.nn.relu,\n               weights_initializer=xavier_init,\n               biases_initializer=None,\n               normalizer_fn=batch_norm,\n               normalizer_params=bn_params\n               ):\n    hidden_layer1 = fully_connected(X, hidden_output_size, scope=\"h1\")\n    h1_drop = dropout(hidden_layer1, keep_prob, is_training=train_mode)\n    hidden_layer2 = fully_connected(h1_drop, hidden_output_size, scope=\"h2\")\n    h2_drop = dropout(hidden_layer2, keep_prob, is_training=train_mode)\n    hidden_layer3 = fully_connected(h2_drop, hidden_output_size, scope=\"h3\")\n    h3_drop = dropout(hidden_layer3, keep_prob, is_training=train_mode)\n    hidden_layer4 = fully_connected(h3_drop, hidden_output_size, scope=\"h4\")\n    h4_drop = dropout(hidden_layer4, keep_prob, is_training=train_mode)\n    hypothesis = fully_connected(h4_drop, final_output_size, activation_fn=None, scope=\"hypothesis\")\n\n# define cost/loss & optimizer\ncost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=hypothesis, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)\n\n# initialize\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n\n# train my model\nfor epoch in range(training_epochs):\n    avg_cost = 0\n    total_batch = int(mnist.train.num_examples / batch_size)\n\n    for i in range(total_batch):\n        batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n        feed_dict_train = {X: batch_xs, Y: batch_ys, train_mode: True}\n        feed_dict_cost = {X: batch_xs, Y: batch_ys, train_mode: False}\n        opt = sess.run(optimizer, feed_dict=feed_dict_train)\n        c = sess.run(cost, feed_dict=feed_dict_cost)\n        avg_cost += c / total_batch\n\n    print(\"[Epoch: {:>4}] cost = {:>.9}\".format(epoch + 1, avg_cost))\n    #print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n\nprint('Learning Finished!')\n\n# Test model and check accuracy\ncorrect_prediction = tf.equal(tf.argmax(hypothesis, 1), tf.argmax(Y, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint('Accuracy:', sess.run(accuracy, feed_dict={\n      X: mnist.test.images, Y: mnist.test.labels, train_mode: False}))\n\n# Get one and predict\nr = random.randint(0, mnist.test.num_examples - 1)\nprint(\"Label: \", sess.run(tf.argmax(mnist.test.labels[r:r + 1], 1)))\nprint(\"Prediction: \", sess.run(\n    tf.argmax(hypothesis, 1), feed_dict={X: mnist.test.images[r:r + 1], train_mode: False}))\n\n# plt.imshow(mnist.test.images[r:r + 1].\n#           reshape(28, 28), cmap='Greys', interpolation='nearest')\n# plt.show()\n\n'''\n[Epoch:    1] cost = 0.519417209\n[Epoch:    2] cost = 0.432551052\n[Epoch:    3] cost = 0.404978843\n[Epoch:    4] cost = 0.392039919\n[Epoch:    5] cost = 0.382165317\n[Epoch:    6] cost = 0.377987834\n[Epoch:    7] cost = 0.372577601\n[Epoch:    8] cost = 0.367208552\n[Epoch:    9] cost = 0.365525589\n[Epoch:   10] cost = 0.361964276\n[Epoch:   11] cost = 0.359540287\n[Epoch:   12] cost = 0.356423751\n[Epoch:   13] cost = 0.354478216\n[Epoch:   14] cost = 0.353212552\n[Epoch:   15] cost = 0.35230893\nLearning Finished!\nAccuracy: 0.9826\n''' \n```"]