- en: Denotational Explanation of RecursionTuesday, February 14th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归的Denotational解释Tuesday, February 14th
- en: 'Note: This explanation is similar to the one you can find in “The Little Schemer”
    called “(Y Y) Works!”, by Dan Friedman and Matthias Felleisen.'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注：此解释类似于您可以在《The Little Schemer》中找到的解释，作者是Dan Friedman和Matthias Felleisen，名为“(Y
    Y) Works!”。
- en: 'The explanation that we have now for how to derive the `make-recursive` definition
    is fine — after all, we did manage to get it working. But this explanation was
    done from a kind of an operational point of view: we knew a certain trick that
    can make things work and we pushed things around until we got it working like
    we wanted. Instead of doing this, we can re-approach the problem from a more declarative
    point of view.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们对如何导出`make-recursive`定义的解释已经很好了 —— 毕竟，我们确实设法让它工作了。但这种解释是从一种操作性的角度出发的：我们知道一种可以使事情运作的技巧，然后我们将事情推来推去，直到我们按我们想要的方式让它工作。与其这样做，我们可以从更声明性的角度重新解决问题。
- en: 'So, start again from the same broken code that we had (using the broken-scope
    language):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从我们之前使用的相同破碎的代码重新开始（使用破碎的作用域语言）：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is as broken as it was when we started: the occurrence of `fact` in the
    body of the function is free, which means that this code is meaningless. To avoid
    the compilation error that we get when we run this code, we can substitute *anything*
    for that `fact` — it’s even better to use a replacement that will lead to a runtime
    error:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们开始时一样混乱：函数主体中的`fact`出现是自由的，这意味着这段代码毫无意义。为了避免运行此代码时出现的编译错误，我们可以将*任何东西*替换为`fact`
    —— 最好使用一个会导致运行时错误的替代项：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This function will not work in a similar way to the original one — but there
    is one case where it *does* work: when the input value is `0` (since then we do
    not reach the bogus application). We note this by calling this function `fact0`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数不会像原始函数那样工作 —— 但有一种情况它 *会* 工作：当输入值为`0`时（因为然后我们不会达到虚假的应用）。我们通过称此函数为`fact0`来注意到这一点：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that we have this function defined, we can use it to write `fact1` which
    is the factorial function for arguments of `0` or `1`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了这个函数，我们可以使用它来编写`fact1`，这是参数为`0`或`1`的阶乘函数：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And remember that this is actually just shorthand for:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 而且记住，这实际上只是以下的简写形式：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can continue in this way and write `fact2` that will work for n<=2:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续这样做，并编写适用于n<=2的`fact2`：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'or, in full form:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，以完整形式表达：
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we continue this way, we *will* get the true factorial function, but the
    problem is that to handle *any* possible integer argument, it will have to be
    an infinite definition! Here is what it is supposed to look like:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们继续这样做，我们 *将* 得到真正的阶乘函数，但问题是为了处理 *任何* 可能的整数参数，它将必须是一个无限的定义！这是它应该看起来的样子：
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The true factorial function is `fact-infinity`, with an infinite size. So, we’re
    back at the original problem…
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的阶乘函数是`fact-infinity`，具有无限大小。因此，我们又回到了最初的问题……
- en: 'To help make things more concise, we can observe the repeated pattern in the
    above, and extract a function that abstracts this pattern. This function is the
    same as the `fact-core` that we have seen previously:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助使事情更简洁，我们可以观察上面的重复模式，并提取一个抽象化此模式的函数。这个函数与我们之前看到的`fact-core`相同：
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'which is actually:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上是：
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Do this a little differently — rewrite `fact0` as:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微换个方式 —— 将`fact0`重写为：
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Similarly, `fact1` is written as:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`fact1`被写成：
- en: '[PRE11]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'and so on, until the real factorial, which is still infinite at this stage:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 依此类推，直到真正的阶乘，这在这个阶段仍然是无限的：
- en: '[PRE12]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, look at that `(lambda (mk) ...)` — it is an infinite expression, but for
    every actual application of the resulting factorial function we only need a finite
    number of `mk` applications. We can guess how many, and as soon as we hit an application
    of `777` we know that our guess is too small. So instead of `777`, we can try
    to use the maker function to create and use the next.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看看那个`(lambda (mk) ...)` —— 它是一个无限表达式，但对于结果阶乘函数的每一次实际应用，我们只需要有限数量的`mk`应用。我们可以猜测有多少，一旦我们达到`777`的应用，我们就知道我们的猜测太小了。所以，我们可以尝试使用制造函数来创建并使用下一个。
- en: 'To make things more explicit, here is the expression that is our `fact0`, without
    the definition form:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更明确，这里是我们的`fact0`的表达式，没有定义形式：
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This function has a very low guess — it works for 0, but with 1 it will run
    into the `777` application. At this point, we want to somehow invoke `mk` again
    to get the next level — and since `777` *does* get applied, we can just replace
    it with `mk`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的猜测非常低 —— 对于 0，它能工作，但对于 1，它会遇到 `777` 应用。在这一点上，我们想要以某种方式再次调用 `mk` 以获得下一个级别
    —— 而由于 `777` *确实*被应用了，我们可以直接将其替换为 `mk`：
- en: '[PRE14]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The resulting function works just the same for an input of `0` because it does
    not attempt a recursive call — but if we give it `1`, then instead of running
    into the error of applying `777`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 结果函数对于输入 `0` 的效果完全相同，因为它不会尝试递归调用 —— 但如果我们给它 `1`，那么它不会遇到应用 `777` 的错误：
- en: '[PRE15]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'we get to apply `fact-core` there:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在那里应用 `fact-core`：
- en: '[PRE16]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'and this is still wrong, because `fact-core` expects a function as an input.
    To see what happens more clearly, write `fact-core` explicitly:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 而这仍然是错误的，因为 `fact-core` 期望的是一个函数作为输入。为了更清楚地看到发生了什么，明确地写出 `fact-core`：
- en: '[PRE17]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The problem is in what we’re going to pass into `fact-core` — its `fact` argument
    will not be the factorial function, but the `mk` function constructor. Renaming
    the `fact` argument as `mk` will make this more obvious (but not change the meaning):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于我们将传递给 `fact-core` 的内容 —— 其 `fact` 参数不会是阶乘函数，而是 `mk` 函数构造器。将 `fact` 参数重命名为
    `mk` 将使这一点更加明显（但不改变含义）：
- en: '[PRE18]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It should now be obvious that this application of `mk` will not work, instead,
    we need to apply it on some function and *then* apply the result on `(- n 1)`.
    To get what we had before, we can use `777` as a bogus function:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该很明显，这个 `mk` 的应用不会起作用，相反，我们需要在某个函数上应用它，*然后*将结果应用在 `(- n 1)` 上。为了得到我们之前的结果，我们可以使用
    `777` 作为一个虚构的函数：
- en: '[PRE19]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will allow one recursive call — so the definition works for both inputs
    of `0` and `1` — but not more. But that `777` is used as a maker function now,
    so instead, we can just use `mk` itself again:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许一个递归调用 —— 所以该定义对 `0` 和 `1` 的输入都有效 —— 但不再多。但现在 `777` 被用作一个制造函数，所以我们可以再次只使用
    `mk` 本身：
- en: '[PRE20]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And this is a *working* version of the real factorial function, so make it
    into a (non-magical) definition:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个*可工作*的真实阶乘函数版本，所以将其转换为（非魔法的）定义：
- en: '[PRE21]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: But we’re not done — we “broke” into the factorial code to insert that `(mk
    mk)` application — that’s why we dragged in the actual value of `fact-core`. We
    now need to fix this. The expression on that last line
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们还没结束 —— 我们“闯入”了阶乘代码以插入那个 `(mk mk)` 应用 —— 这就是为什么我们引入了 `fact-core` 的实际值。我们现在需要修复这个问题。那最后一行的表达式
- en: '[PRE22]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'is close enough — it is `(fact-core (mk mk))`. So we can now try to rewrite
    our `fact` as:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 足够接近 —— 它是 `(fact-core (mk mk))`。所以我们现在可以尝试重写我们的 `fact`：
- en: '[PRE23]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '… and would fail in a familiar way! If it’s not familiar enough, just rename
    all those `mk`s as `x`s:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: … 以熟悉的方式失败！如果不够熟悉，只需将所有的 `mk` 重命名为 `x`：
- en: '[PRE24]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We’ve run into the eagerness of our language again, as we did before. The solution
    is the same — the `(x x)` is the factorial function, so protect it as we did before,
    and we have a working version:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次遇到了语言的急切性，就像之前一样。解决方案是一样的 —— `(x x)` 就是阶乘函数，所以像之前一样保护它，我们就有了一个可工作的版本：
- en: '[PRE25]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The rest should not be surprising now… Abstract the recursive making bit in
    a new `make-recursive` function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 其余部分现在不应该让人感到意外了… 在一个新的 `make-recursive` 函数中将递归生成部分抽象出来：
- en: '[PRE26]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'and now we can do the first reduction inside `make-recursive` and write the
    `fact-core` expression explicitly:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在 `make-recursive` 中进行第一次简化，并明确地写出 `fact-core` 表达式：
- en: '[PRE27]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: and this is the same code we had before.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 而这正是我们之前的相同代码。
