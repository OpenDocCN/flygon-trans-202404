- en: ラッパーオブジェクト
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ラッパーオブジェクト
- en: 原文：[https://jsprimer.net/basic/wrapper-object/](https://jsprimer.net/basic/wrapper-object/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/basic/wrapper-object/](https://jsprimer.net/basic/wrapper-object/)
- en: JavaScriptのデータ型はプリミティブ型とオブジェクトに分けられます（詳細は「[データ型とリテラル](../data-type/ "データ型とリテラル")」を参照）。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptのデータ型はプリミティブ型とオブジェクトに分けられます（詳細は「[データ型とリテラル](../data-type/ "データ型とリテラル")」を参照）。
- en: 次のコードでは文字列リテラルでプリミティブ型の値である文字列を定義しています。 プリミティブ型の値である文字列は`String`オブジェクトのインスタンスではありません。
    しかし、プリミティブ型の文字列においても、`String`オブジェクトのインスタンスメソッドである`toUpperCase`メソッドを呼び出せます。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは文字列リテラルでプリミティブ型の値である文字列を定義しています。 プリミティブ型の値である文字列は`String`オブジェクトのインスタンスではありません。
    しかし、プリミティブ型の文字列においても、`String`オブジェクトのインスタンスメソッドである`toUpperCase`メソッドを呼び出せます。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: プリミティブ型である文字列が`String`のインスタンスメソッドを呼び出せるのは一見不思議です。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: プリミティブ型である文字列が`String`のインスタンスメソッドを呼び出せるのは一見不思議です。
- en: この章では、プリミティブ型の値がなぜオブジェクトのメソッドを呼び出せるのかについて解説します。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: この章では、プリミティブ型の値がなぜオブジェクトのメソッドを呼び出せるのかについて解説します。
- en: '[](#primitive-type-and-wrapper-object)*プリミティブ型とラッパーオブジェクト*'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#primitive-type-and-wrapper-object)*プリミティブ型とラッパーオブジェクト*'
- en: '*プリミティブ型のデータのうち、真偽値（Boolean）、数値（Number） 、BigInt、文字列（String）、シンボル（Symbol）にはそれぞれ対応するオブジェクトが存在します。たとえば、文字列に対応するオブジェクトとして、`String`オブジェクトがあります。'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*プリミティブ型のデータのうち、真偽値（Boolean）、数値（Number） 、BigInt、文字列（String）、シンボル（Symbol）にはそれぞれ対応するオブジェクトが存在します。たとえば、文字列に対応するオブジェクトとして、`String`オブジェクトがあります。'
- en: この`String`オブジェクトを`new`することで`String`オブジェクトのインスタンスを作れます。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: この`String`オブジェクトを`new`することで`String`オブジェクトのインスタンスを作れます。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: このようにインスタンス化されたものは、プリミティブ型の値を包んだ（ラップした）オブジェクトと言えます。 そのため、このようなオブジェクトをプリミティブ型の値に対しての**ラッパーオブジェクト**と呼びます。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: このようにインスタンス化されたものは、プリミティブ型の値を包んだ（ラップした）オブジェクトと言えます。 そのため、このようなオブジェクトをプリミティブ型の値に対しての**ラッパーオブジェクト**と呼びます。
- en: ラッパーオブジェクトとプリミティブ型の対応は次のとおりです。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ラッパーオブジェクトとプリミティブ型の対応は次のとおりです。
- en: '| ラッパーオブジェクト | プリミティブ型 | 例 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| ラッパーオブジェクト | プリミティブ型 | 例 |'
- en: '| --- | --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Boolean` | 真偽値 | `true`や`false` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `Boolean` | 真偽値 | `true`や`false` |'
- en: '| `Number` | 数値 | `1`や`2` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `Number` | 数値 | `1`や`2` |'
- en: '| `BigInt` | BigInt | `1n`や`2n` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `BigInt` | 大整数 | `1n`や`2n` |'
- en: '| `String` | 文字列 | `"文字列"` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `String` | 文字列 | `"文字列"` |'
- en: '| `Symbol` | シンボル | `Symbol("説明")` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `Symbol` | シンボル | `Symbol("説明")` |'
- en: '注記: `undefined`と`null`に対応するラッパーオブジェクトはありません。'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '注記: `undefined`と`null`に対応するラッパーオブジェクトはありません。'
- en: 注意点として、ラッパーオブジェクトは名前のとおりオブジェクトです。 そのため、次のように`typeof`演算子でラッパーオブジェクトを見ると`"object"`です。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意点として、ラッパーオブジェクトは名前のとおりオブジェクトです。 そのため、次のように`typeof`演算子でラッパーオブジェクトを見ると`"object"`です。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[](#convert-primitive-to-wrapper)*プリミティブ型の値からラッパーオブジェクトへの自動変換*'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#convert-primitive-to-wrapper)*プリミティブ型の値からラッパーオブジェクトへの自動変換*'
- en: '*JavaScriptでは、プリミティブ型の値に対してプロパティアクセスするとき、自動で対応するラッパーオブジェクトに変換されます。 たとえば`"string"`という文字列は、自動的に`new
    String("string")`のようなラッパーオブジェクトへ変換されています。 これにより、プリミティブ型の値である文字列が`String`のインスタンスメソッドを呼び出せるようになります。'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScriptでは、プリミティブ型の値に対してプロパティアクセスするとき、自動で対応するラッパーオブジェクトに変換されます。 たとえば`"string"`という文字列は、自動的に`new
    String("string")`のようなラッパーオブジェクトへ変換されています。 これにより、プリミティブ型の値である文字列が`String`のインスタンスメソッドを呼び出せるようになります。'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: このように、プリミティブ型の値からラッパーオブジェクトへの変換は自動的に行われます。^([1](#fn_1))
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: このように、プリミティブ型の値からラッパーオブジェクト���の変換は自動的に行われます。^([1](#fn_1))
- en: 一方、明示的に作成したラッパーオブジェクトからプリミティブ型の値を取り出すこともできます。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一方、明示的に作成したラッパーオブジェクトからプリミティブ型の値を取り出すこともできます。
- en: '`ラッパーオブジェクト.valueOf`メソッドを呼び出すことで、ラッパーオブジェクトから値を取り出せます。 たとえば、次のように文字列のラッパーオブジェクトから`valueOf`メソッドで文字列を取り出せます。'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`ラッパーオブジェクト.valueOf`メソッドを呼び出すことで、ラッパーオブジェクトから値を取り出せます。 たとえば、次のように文字列のラッパーオブジェクトから`valueOf`メソッドで文字列を取り出せます。'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: JavaScriptには、リテラルを使ったプリミティブ型の文字列とラッパーオブジェクトを使った文字列オブジェクトがあります（真偽値や数値についても同様です）。
    この2つを明示的に使い分ける利点はないため、常にリテラルを使うことを推奨します。 理由として次の3つが挙げられます。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptには、リテラルを使ったプリミティブ型の文字列とラッパーオブジェクトを使った文字列オブジェクトがあります（真偽値や数値についても同様です）。
    この2つを明示的に使い分ける利点はないため、常にリテラルを使うことを推奨します。 理由として次の3つが挙げられます。
- en: 必要に応じて、プリミティブ型の文字列は自動的にラッパーオブジェクトに変換されるため
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必要に応じて、プリミティブ型の文字列は自動的にラッパーオブジェクトに変換されるため
- en: '`new String("string")`のようにラッパーオブジェクトのインスタンスを扱う利点がないため'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new String("string")`のようにラッパーオブジェクトのインスタンスを扱う利点がないため'
- en: ラッパーオブジェクトを`typeof`演算子で評価した結果が、プリミティブ型ではなく`"object"`となり混乱を生むため
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ラッパーオブジェクトを`typeof`演算子で評価した結果が、プリミティブ型ではなく`"object"`となり混乱を生むため
- en: これらの理由などから、プリミティブ型のデータにはリテラルを使います。 常にリテラルを使うことでラッパーオブジェクトを意識する必要がなくなります。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: これらの理由などから、プリミティブ型のデータにはリテラルを使います。 常にリテラルを使うことでラッパーオブジェクトを意識する必要がなくなります。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[](#wrapper-object-summary)*まとめ*'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#wrapper-object-summary)*まとめ*'
- en: '*この章では、プリミティブ型の値がなぜメソッド呼び出しできるのかについて解説しました。 その仕組みの背景にはプリミティブ型に対応したラッパーオブジェクトの存在があります。
    プリミティブ型の値のプロパティへアクセスする際に、自動的にラッパーオブジェクトへ変換されることでメソッド呼び出しなどが可能となっています。'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*この章では、プリミティブ型の値がなぜメソッド呼び出しできるのかについて解説しました。 その仕組みの背景にはプリミティブ型に対応したラッパーオブジェクトの存在があります。
    プリミティブ型の値のプロパティへアクセスする際に、自動的にラッパーオブジェクトへ変換されることでメソッド呼び出しなどが可能となっています。'
- en: 「JavaScriptはすべてがオブジェクトである」と言われることがあります。 プリミティブ型はオブジェクトではありませんが、プリミティブ型に対応したラッパーオブジェクトが用意されています（`null`と`undefined`を除く）。
    そのため、「すべてがオブジェクトのように見える」というのが正しい認識となるでしょう。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 「JavaScriptはすべてがオブジェクトである」と言われることがあります。 プリミティブ型はオブジェクトではありませんが、プリミティブ型に対応したラッパーオブジェクトが用意されています（`null`と`undefined`を除く）。
    そのため、「すべてがオブジェクトのように見える」というのが正しい認識となるでしょう。
- en: ¹. このようなプリミティブ型からオブジェクト型への変換はボックス化（ボクシング）、逆にオブジェクト型からプリミティブ型への変換はボックス化解除（アンボクシング）と呼ばれます。
    [↩](#reffn_1 "Jump back to footnote [1] in the text.")***
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. このようなプリミティブ型からオブジェクト型への変換はボックス化（ボクシング）、逆にオブジェクト型からプリミティブ型への変換はボックス化解除（アンボクシング）と呼ばれます。
    [↩](#reffn_1 "Jump back to footnote [1] in the text.")***
