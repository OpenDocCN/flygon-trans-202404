["```\nretry([times]) \n```", "```\nlet stream$ = Rx.Observable.of(1,2,3)\n.map(value => {\n   if(value > 2) { throw 'error' }\n});\n\nstream$.subscribe(\n   data => console.log(data),\n   err => console.log(err)\n) \n```", "```\nlet stream$ = Rx.Observable.of(1,2,3)\n.map(value => {\n   if(value > 2) { throw 'error' }\n})\nretry(5) \n```", "```\nlet urlsToHit$ = Rx.Observable.of(url, url2,url3); \n```", "```\nretryWhen( stream => {\n   // return it in a better condition, hopefully\n}) \n```", "```\nlet values$ = Rx.Observable\n.of( 1,2,3,4 )\n.map(val => {\n    if(val === 2) { throw 'err'; }\n    else return val;\n})\n.retryWhen( stream => {\n    return stream;\n} );\n\nvalues$.subscribe(\n    data => console.log('Retry when - data',data),\n    err => console.error('Retry when - Err',err)\n) \n```", "```\nlet values$ = Rx.Observable.interval(1000).take(5);\nlet errorFixed = false;\n\nvalues$\n.map((val) => {\n   if(errorFixed) { return val; }\n   else if( val > 0 && val % 2 === 0) {\n      errorFixed = true;\n      throw { error : 'error' };\n\n   } else {\n      return val;\n   }\n})\n.retryWhen((err) => {\n    console.log('retrying the entire sequence');\n    return err;\n})\n.subscribe((val) => { console.log('value',val) })\n\n// 0 1 'wait 200ms' retrying the whole sequence 0 1 2 3 4 \n```", "```\n.retryWhen((err) => {\n    console.log('retrying the entire sequence');\n    return err.delay(200)\n}) \n```", "```\nlet ATTEMPT_COUNT = 3;\nlet DELAY = 1000;\nlet delayWithTimes$ = Rx.Observable.of(1,2,3)\n.map( val => {\n  if(val === 2) throw 'err'\n  else return val;\n})\n.retryWhen(e => e.scan((errorCount, err) => {\n    if (errorCount >= ATTEMPT_COUNT) {\n        throw err;\n    }\n    return errorCount + 1;\n}, 0).delay(DELAY));\n\ndelayWithTimes$.subscribe(\n    val => console.log('delay and times - val',val),\n    err => console.error('delay and times - err',err)\n) \n```", "```\nlet error$ = Rx.Observable.throw('crash');\n\nerror$.subscribe( \n  data => console.log( data ),\n  err => console.log( err ),\n  () => console.log('complete')\n) \n```", "```\nlet errorPatched$ = error$.catch(err => { return Rx.Observable.of('Patched' + err) });\nerrorPatched$.subscribe((data) => console.log(data) ); \n```", "```\nlet badStream$ = Rx.Observable.throw('crash');\nlet goodStream$ = Rx.Observable.of(1,2,3,);\n\nlet merged$ = Rx.Observable.merge(\n  badStream$,\n  goodStream$\n);\n\nmerged$.subscribe(\n   data => console.log(data),\n   err => console.error(err),\n   () => console.log('merge completed') \n) \n```", "```\nlet mergedPatched$ = Rx.Observable.merge(\n    badStream$,\n    goodStream$\n).catch(err => Rx.Observable.of(err));\n\nmergedPatched$.subscribe(\n    data => console.log(data),\n    err => console.error(err),\n    () => console.log('patchedMerged completed')\n) \n```", "```\nlet preMergedPatched$ = Rx.Observable.merge(\n    badStream$.catch(err => Rx.Observable.of(err)),\n    goodStream$\n).catch(err => Rx.Observable.of(err));\n\npreMergedPatched$.subscribe(\n    data => console.log(data),\n    err => console.error(err),\n    () => console.log('pre patched merge completed')\n) \n```", "```\nlet secondBadStream$ = Rx.Observable.throw('bam');\nlet gloriaGaynorStream$ = Rx.Observable.of('I will survive');\n\nlet emitSurviving = Rx.Observable.onErrorResumeNext(\n    badStream$,\n    secondBadStream$,\n    gloriaGaynorStream$\n);\n\nemitSurviving.subscribe(\n    data => console.log(data),\n    err => console.error(err),\n    () => console.log('Survival of the fittest, completed')\n) \n```"]