- en: Running the Evaluator
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行评估器
- en: Running the Evaluator
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行评估器
- en: Let's look at how Scheme runs the evaluator. So far, we learned how the Scheme
    expressions are evaluated using `mc-eval` and `mc-apply`. Then how is the evaluator
    program running?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Scheme如何运行评估器。到目前为止，我们已经学习了如何使用`mc-eval`和`mc-apply`评估Scheme表达式。那么评估器程序是如何运行的呢？
- en: What our evaluator program does is to reduce all the expressions to the application
    of primitive procedures. So all we need to run the evaluator is to create a mechanism
    that uses the underlying Scheme system for the application of primitive procedures.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的评估器程序的作用是将所有表达式简化为原始过程的应用。因此，我们运行评估器所需的全部就是创建一个机制，使用底层Scheme系统进行原始过程的应用。
- en: There must be a binding for each primitive procedure name, so that when `mc-eval`
    evaluates the operator of an application of a primitive, it will find an object
    to pass to `mc-apply`. We thus set up a global environment that associates unique
    objects with the names of the primitive procedures that can appear in the expressions
    we will be evaluating (for example, we'll bind `+` to the underlying Scheme procedure
    with the same name). The global environment also includes bindings for the symbols
    `true` and `false`, so that they can be used as variables in expressions to be
    evaluated.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每个原始过程名称都必须有一个绑定，这样当`mc-eval`评估原始应用的操作数时，它将找到一个对象传递给`mc-apply`。因此，我们设置一个全局环境，将唯一对象与我们将要评估的表达式中可能出现的原始过程名称相关联（例如，我们将`+`绑定到具有相同名称的底层Scheme过程）。全局环境还包括`true`和`false`符号的绑定，以便它们可以用作要评估的表达式中的变量。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For convenience in running the metacircular evaluator, we provide a **driver
    loop** that models the read-eval-print loop (or REPL) of the underlying Scheme
    system. It prints a **prompt**, reads an input expression, evaluates this expression
    in the global environment, and prints the result. We precede each printed result
    by an **output prompt** so as to distinguish the value of the expression from
    other output that may be printed.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便运行元循环评估器，我们提供了一个**驱动循环**，模拟底层Scheme系统的读取-评估-打印循环（或REPL）。它打印一个**提示**，读取一个输入表达式，在全局环境中评估这个表达式，并打印结果。我们在每个打印的结果前加上一个**输出提示**，以区分表达式的值和可能打印的其他输出。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We use a special printing procedure, `user-print`, to avoid printing the environment
    part of a compound procedure, which may be a very long list (or may even contain
    cycles).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个特殊的打印过程`user-print`，以避免打印复合过程的环境部分，这可能是一个非常长的列表（甚至可能包含循环）。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now all we need to do to run the evaluator is to initialize the global environment
    and start the driver loop. Here is a sample interaction:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要初始化全局环境并启动驱动循环就可以运行评估器。以下是一个示例交互：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Wait, I still don''t get it. How can we evaluate Scheme code with an evaluator
    that is written in Scheme?*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*等等，我还是不明白。我们如何用Scheme编写的评估器来评估Scheme代码？*'
- en: It's because Scheme is powerful enough to handle a program as data, and to let
    us construct data structures that are both hierarchical and circular. I have an
    analogy for you in the next section.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Scheme足够强大，可以处理程序作为数据，并让我们构建既是分层又是循环的数据结构。我在下一节给你一个类比。
- en: Data as Programs
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据作为程序
- en: 'To understand interpreting Scheme expression with the interpreter written in
    Scheme, think of a program as a description of an abstract machine. For example,
    you can think of the program to compute factorials:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解用Scheme编写的解释器解释Scheme表达式，可以将程序视为抽象机器的描述。例如，您可以将计算阶乘的程序视为：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'as the description of a machine containing parts that decrement, multiply,
    and test for equality, together with a two-position switch and another factorial
    machine. (The factorial machine is infinite because it contains another factorial
    machine within it -- recursion!) So the machine will look like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 描述了一个包含递减、乘法和相等测试部分的机器，还有一个两位置开关和另一个阶乘机器。（阶乘机器是无限的，因为它内部包含另一个阶乘机器 -- 递归！）因此，这台机器看起来像这样：
- en: '![](../Images/e573237fc15c3c41936fac8959325d54.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e573237fc15c3c41936fac8959325d54.jpg)'
- en: Like `factorial`, the evaluator is a very special machine that takes a description
    of other machine as input, and then configures itself to emulate the given machine.
    For example, if we give the evaluator the definition of `factorial`, the evaluator
    will emulate it and be able to compute factorials.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 像`阶乘`一样，评估器是一个非常特殊的机器，它以其他机器的描述作为输入，然后配置自身以模拟给定的机器。例如，如果我们给评估器阶乘的定义，评估器将模拟它并能够计算阶乘。
- en: '![](../Images/747dece8f01e6a003704c21c47f7d1e5.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/747dece8f01e6a003704c21c47f7d1e5.jpg)'
- en: So our evaluator is just a universal machine that mimics all other machines!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们的评估器只是一个模仿所有其他机器的通用机器！
- en: If you'd like to know more about the machines, ask for Unit 5.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于这些机器的信息，请询问第5单元。
- en: Takeaways
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: In this subsection, you learned how the evaluator works.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一小节中，你学会了评估器的工作原理。
- en: What's Next?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Go do your homework! You should also start on Project 4, where you'll learn
    the Python programming language.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 去做你的家庭作业！你也应该开始进行第4个项目，你将学习Python编程语言。
