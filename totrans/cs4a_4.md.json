["```\n>>> ord('*')\n42\n>>> ord('9')\n57\n\n```", "```\n>>> False + 42\n42\n>>> True + 2\n3\n\n```", "```\nadd r3, r1, r2\n\n```", "```\n#\n# Calculate the approximate area of a triangle.\n#\n# First input: base\n# Second input: height\n# Output: area\n#\n\n0\tread\tr1\t # Get base\n1\tread\tr2\t # Get height\n2\tmul\tr1 r1 r2 # b times h into r1\n3\tsetn\tr2 2\n4\tdiv\tr1 r1 r2 # Divide by 2\n5\twrite\tr1\n6\thalt\n\n```", "```\nadd r1,r2,r3\n\nADD R1 R2 R3\n\nADD R1,r2, R3\n\naDd R1,,R2,       ,R3\n\n```", "```\n% ./hmmmAssembler.py\nEnter input file name: triangle1.hmmm\nEnter output file name: triangle1.hb\n\n----------------------\n| ASSEMBLY SUCCESSFUL |\n----------------------\n\n0 : 0000 0001 0000 0001        0        read    r1       # Get base\n1 : 0000 0010 0000 0001        1        read    r2       # Get height\n2 : 1000 0001 0001 0010        2        mul     r1 r1 r2 # b times h into r1\n3 : 0001 0010 0000 0010        3        setn    r2 2\n4 : 1001 0001 0001 0010        4        div     r1 r1 r2 # Divide by 2\n5 : 0000 0001 0000 0010        5        write   r1\n6 : 0000 0000 0000 0000        6        halt\n\n```", "```\n% ./hmmmSimulator.py\nEnter binary input file name: triangle1.hb\nEnter debugging mode? n\nEnter number: 4\nEnter number: 5\n10\n% ./hmmmSimulator.py\nEnter binary input file name: triangle1.hb\nEnter debugging mode? n\nEnter number: 5\nEnter number: 5\n12\n```", "```\n#\n# Calculate the approximate areas of many triangles.\n#\n# First input: base\n# Second input: height\n# Output: area\n#\n\n0\tread\tr1\t # Get base\n1\tread\tr2\t # Get height\n2\tmul\tr1 r1 r2 # b times h into r1\n3\tsetn\tr2 2\n4\tdiv\tr1 r1 r2 # Divide by 2\n5\twrite\tr1\n6\tjumpn\t0\n\n```", "```\n% ./hmmSimulator.py\nEnter binary input file name: triangle2.hb\nEnter debugging mode? n\nEnter number: 4\nEnter number: 5\n10\nEnter number: 5\nEnter number: 5\n12\nEnter number: ^C\n\nInterrupted by user, halting program execution...\n```", "```\n#\n# Calculate the approximate areas of many triangles.\n# Stop when a base or height of zero is given.\n#\n# First input: base\n# Second input: height\n# Output: area\n#\n\n0\tread\tr1\t # Get base\n1\tjeqzn\tr1 9\t # Jump to halt if base is zero\n2\tread\tr2\t # Get height\n3\tjeqzn\tr2 9\t # Jump to halt if height is zero\n4\tmul\tr1 r1 r2 # b times h into r1\n5\tsetn\tr2 2\n6\tdiv\tr1 r1 r2 # Divide by 2\n7\twrite\tr1\n8\tjumpn\t0\n9\thalt\n\n```", "```\n% ./hmmmSimulator.py\nEnter binary input file name: triangle3.hb\nEnter debugging mode? n\nEnter number: 4\nEnter number: 5\n10\nEnter number: 5\nEnter number: 5\n12\nEnter number: 0\n```", "```\n#\n# Calculate N factorial.\n#\n# Input: N\n# Output: N!\n#\n# Register usage:\n#\n#\tr1\tN\n#\tr2\tRunning product\n#\n\n0\tread\tr1\t # Get N\n1\tsetn\tr2,1\n2\tjeqzn\tr1,6\t # Quit if N has reached zero\n3\tmul\tr2,r1,r2 # Update product\n4\taddn\tr1,-1\t # Decrement N\n5\tjumpn\t2\t # Back for more\n\n6\twrite\tr2\n7\thalt\n\n```", "```\n#\n# Calculate C(n,k) = n!/k!(n-k)!.\n#\n# First input: N\n# Second input: K\n# Output: C(N,K)\n#\n# Register usage:\n#\n#\tr1\tInput to factorial function\n#\tr2\tr1 factorial\n#\tr3\tN\n#\tr4\tK\n#\tr5\tC(N,K)\n#\n# Factorial function starts at address 15\n#\n\n0\tread\tr3\t # Get N\n1\tread\tr4\t # Get K\n\n2\tcopy\tr1,r3\t # Calculate N!\n3\tcalln\tr14,15\t # ...\n4\tcopy\tr5,r2\t # Save N! as C(N,K)\n\n5\tcopy\tr1,r4\t # Calculate K!\n6\tcalln\tr14,15\t # ...\n7\tdiv\tr5,r5,r2 # N!/K!\n\n8\tsub\tr1,r3,r4 # Calculate (N-K)!\n9\tcalln\tr14,15\t # ...\n10\tdiv\tr5,r5,r2 # C(N,K)\n\n11\twrite\tr5\t # Write answer\n12\thalt\n\n13\tnop\t\t # Waste some space\n14\tnop\n\n# Factorial function.  N is in R1\\. Result is R2.\n# Return address is in R14.\n15\tsetn\tr2,1\t # Initial product\n16\tjeqzn\tr1,20\t # Quit if N has reached zero\n17\tmul\tr2,r1,r2 # Update product\n18\taddn\tr1,-1\t # Decrement N\n19\tjumpn\t16\t # Back for more\n\n20\tjumpr\tr14\t # Done; return to caller\n\n```", "```\naddn r15,1      # Point to a new location\nstorer r4,r15   # Store r4 on the stack\n\n```", "```\nloadr r3,r15    # Load r3 from the stack\naddn r15,-1     # Point to new top of stack\n\n```", "```\n# Calculate N factorial, recursively\n#\n# Input: N\n# Output: N!\n#\n# Register usage:\n#\n#\tr1\tN! (returned by called function)\n#\tr2\tN\n\n0\tsetn\tr15,100\t # Initialize stack pointer\n1\tread\tr2\t # Get N\n2\tcalln\tr14,5\t # Recursive function finds N!\n3\twrite\tr1\t # Write result\n4\thalt\n\n# Function to compute N factorial recursively\n#\n# Inputs:\n#\n#\tr2\tN\n#\n# Outputs:\n#\n#\tr1\tN!\n#\n# Register usage:\n#\n#\tr1\tN! (from recursive call)\n#\tr2\tN (for multiplication)\n\n5\tjeqzn\tr2,18\t # Test for base case (0!)\n\n6\taddn\tr15,1\t # Save precious possessions\n7\tstorer\tr2,r15\t # ...\n8\taddn\tr15,1\t # ...\n9\tstorer\tr14,r15\t # ...\n\n10\taddn\tr2,-1\t # Calculate N-1\n11\tcalln\tr14,5\t # Call ourselves recursively to get (N-1)!\n\n12\tloadr\tr14,r15\t # Recover precious possessions\n13\taddn\tr15,-1\t # ...\n14\tloadr\tr2,r15\t # ...\n15\taddn\tr15,-1\t # ...\n\n16\tmul\tr1,r1,r2 # (N-1)! times N\n17\tjumpr\tr14\t # Return to caller\n\n# Base case: 0! is always 1\n18\tsetn\tr1,1\n19\tjumpr\tr14\t # Return to caller\n\n```"]