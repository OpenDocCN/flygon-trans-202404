- en: Homework 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Type the following into the terminal to copy the template file to the current
    directory (note the period at the end):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Or you can download it from [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw7.scm).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modify the `person` class given in the template to add a `repeat` method, which
    repeats the last thing said. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This exercise introduces you to `usual`.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that we want to define a class called `double-talker` to represent people
    that always say things twice. For example, take a look at the following dialog.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following three definitions for the double-talker class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Determine which of these definitions work as intended. Determine also for which
    messages the three versions would respond differently.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For a statistical project you need to compute lots of random numbers in various
    ranges. (Recall that `(random 10)` returns a random number between 0 and 9.) Also,
    you need to keep track of how many random numbers are computed in each range.
    You decide to use object-oriented programming. Objects of the class random-generator
    will accept two messages: `number` and `count`. The message `number` means "give
    me a random number in your range" while `count` means "how many number requests
    have you had?" The class has an instantiation argument that specifies the range
    of random numbers for this object, so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: will create an object such that `(ask r10 'number)` will return a random number
    between 0 and 9, while `(ask r10 'count)` will return the number of random numbers
    `r10` has created.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Define the class `coke-machine`. The instantiation arguments for a `coke-machine`
    are the number of Cokes that can fit in the machine and the price (in cents) of
    a Coke. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'creates a machine that can hold 80 Cokes and sells them for 70 cents each.
    `coke-machine` objects must accept the following messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(ask my-machine ''deposit 25)` means deposit 25 cents. You can deposit several
    coins and the machine should remember the total.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(ask my-machine ''coke)` means push the button for a Coke. The machine then
    either 1) prints "Not enough money", 2) prints "Machine empty", or 3) returns
    the amount of change you get. The error messages should be printed using `display`
    (for example, `(display "Machine empty")`). (After a successful transaction, no
    money is left in the machine; i.e., change does not stay in the machine.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(ask my-machine ''fill 60)` means add 60 Cokes to the machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You may assume that a Coke machine has an infinite supply of change and initially
    contains zero Cokes.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to use objects to represent decks of cards. You are given the
    list `ordered-deck` containing 52 cards in standard order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You are also given a function to shuffle the elements of a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'A `deck` object responds to two messages: `deal` and `empty?`. It responds
    to `deal` by returning the top card of the deck, after removing that card from
    the deck; if the deck is empty, it responds to `deal` by returning `()`. It responds
    to `empty?` by returning `#t` or `#f`, according to whether all cards have been
    dealt. Write a class definition for `deck`. When instantiated, a `deck` object
    should contain a shuffled deck of 52 cards.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to promote politeness among our objects. Write a class `miss-manners`
    that takes an object as its instantiation argument. The new `miss-manners` object
    should accept only one message, namely `please`. The arguments to the `please`
    message should be, first, a message understood by the original object, and second,
    an argument to that message. **(Assume that all messages to the original object
    require exactly one additional argument.)**
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example using the person class from the upcoming adventure game
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Extra for Experts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do these if you want an extra challenge. These are *not* for credit.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The technique of multiple inheritance is described on pages 9 and 10 of ["Object-Oriented
    Programming - Above-the-line view"](http://www-inst.eecs.berkeley.edu/~cs61as/reader/aboveline.pdf).
    That section discusses the problem of resolving ambiguous patterns of inheritance,
    and mentions in particular that it might be better to choose a method inherited
    directly from a second-choice parent over one inherited from a first-choice grandparent.
  prefs: []
  type: TYPE_NORMAL
- en: Devise an example of such a situation. Describe the inheritance hierarchy of
    your example, listing the methods that each class provides. Also describe why
    it would be more appropriate in this example for an object to inherit a given
    method from its second-choice parent rather than its first-choice grandparent.
  prefs: []
  type: TYPE_NORMAL
- en: Submit Your Homework!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  prefs: []
  type: TYPE_NORMAL
