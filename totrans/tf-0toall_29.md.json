["```\n# lab 9.XOR-back_prop\nimport tensorflow as tf\nimport numpy as np\n\ntf.set_random_seed(777)  # for reproducibility\nlearning_rate = 0.1\n\nx_data = [[0, 0],\n          [0, 1],\n          [1, 0],\n          [1, 1]]\ny_data = [[0],\n          [1],\n          [1],\n          [0]]\n\nx_data = np.array(x_data, dtype=np.float32)\ny_data = np.array(y_data, dtype=np.float32)\n\nX = tf.placeholder(tf.float32, [None, 2])\nY = tf.placeholder(tf.float32, [None, 1])\n\nW1 = tf.Variable(tf.random_normal([2, 2]), name='weight1')\nb1 = tf.Variable(tf.random_normal([2]), name='bias1')\nl1 = tf.sigmoid(tf.matmul(X, W1) + b1)\n\nW2 = tf.Variable(tf.random_normal([2, 1]), name='weight2')\nb2 = tf.Variable(tf.random_normal([1]), name='bias2')\nY_pred = tf.sigmoid(tf.matmul(l1, W2) + b2)\n\n# cost/loss function\ncost = -tf.reduce_mean(Y * tf.log(Y_pred) + (1 - Y) *\n                       tf.log(1 - Y_pred))\n\n# Network\n#          p1     a1           l1     p2     a2           l2 (y_pred)\n# X -> (*) -> (+) -> (sigmoid) -> (*) -> (+) -> (sigmoid) -> (loss)\n#       ^      ^                   ^      ^\n#       |      |                   |      |\n#       W1     b1                  W2     b2\n\n# Loss derivative\nd_Y_pred = (Y_pred - Y) / (Y_pred * (1.0 - Y_pred) + 1e-7)\n\n# Layer 2\nd_sigma2 = Y_pred * (1 - Y_pred)\nd_a2 = d_Y_pred * d_sigma2\nd_p2 = d_a2\nd_b2 = d_a2\nd_W2 = tf.matmul(tf.transpose(l1), d_p2)\n\n# Mean\nd_b2_mean = tf.reduce_mean(d_b2, axis=[0])\nd_W2_mean = d_W2 / tf.cast(tf.shape(l1)[0], dtype=tf.float32)\n\n# Layer 1\nd_l1 = tf.matmul(d_p2, tf.transpose(W2))\nd_sigma1 = l1 * (1 - l1)\nd_a1 = d_l1 * d_sigma1\nd_b1 = d_a1\nd_p1 = d_a1\nd_W1 = tf.matmul(tf.transpose(X), d_a1)\n\n# Mean\nd_W1_mean = d_W1 / tf.cast(tf.shape(X)[0], dtype=tf.float32)\nd_b1_mean = tf.reduce_mean(d_b1, axis=[0])\n\n# Weight update\nstep = [\n  tf.assign(W2, W2 - learning_rate * d_W2_mean),\n  tf.assign(b2, b2 - learning_rate * d_b2_mean),\n  tf.assign(W1, W1 - learning_rate * d_W1_mean),\n  tf.assign(b1, b1 - learning_rate * d_b1_mean)\n]\n\n# Accuracy computation\n# True if hypothesis > 0.5 else False\npredicted = tf.cast(Y_pred > 0.5, dtype=tf.float32)\naccuracy = tf.reduce_mean(tf.cast(tf.equal(predicted, Y), dtype=tf.float32))\n\n# Launch graph\nwith tf.Session() as sess:\n    # Initialize TensorFlow variables\n    sess.run(tf.global_variables_initializer())\n\n    print(\"shape\", sess.run(tf.shape(X)[0], feed_dict={X: x_data}))\n\n    for i in range(10001):\n        sess.run([step, cost], feed_dict={X: x_data, Y: y_data})\n        if i % 1000 == 0:\n            print(i, sess.run([cost, d_W1], feed_dict={\n                  X: x_data, Y: y_data}), sess.run([W1, W2]))\n\n    # Accuracy report\n    h, c, a = sess.run([Y_pred, predicted, accuracy],\n                       feed_dict={X: x_data, Y: y_data})\n    print(\"\\nHypothesis: \", h, \"\\nCorrect: \", c, \"\\nAccuracy: \", a)\n\n'''\nHypothesis:  [[ 0.01338224]\n [ 0.98166382]\n [ 0.98809403]\n [ 0.01135806]]\nCorrect:  [[ 0.]\n [ 1.]\n [ 1.]\n [ 0.]]\nAccuracy:  1.0\n''' \n```"]