["```\n<fieldset>\n  <label><input type=\"checkbox\">Email Notifications</label>\n  <label><input type=\"checkbox\">Video Autoplay</label>\n  <label><input type=\"checkbox\">Use Location</label>\n</fieldset> \n```", "```\ntype alias Model =\n  { notifications : Bool\n  , autoplay : Bool\n  , location : Bool\n  } \n```", "```\ntype Msg\n  = ToggleNotifications\n  | ToggleAutoplay\n  | ToggleLocation\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    ToggleNotifications ->\n      { model | notifications = not model.notifications }\n\n    ToggleAutoplay ->\n      { model | autoplay = not model.autoplay }\n\n    ToggleLocation ->\n      { model | location = not model.location } \n```", "```\nview : Model -> Html Msg\nview model =\n  fieldset []\n    [ label []\n        [ input [ type_ \"checkbox\", onClick ToggleNotifications ] []\n        , text \"Email Notifications\"\n        ]\n    , label []\n        [ input [ type_ \"checkbox\", onClick ToggleAutoplay ] []\n        , text \"Video Autoplay\"\n        ]\n    , label []\n        [ input [ type_ \"checkbox\", onClick ToggleLocation ] []\n        , text \"Use Location\"\n        ]\n    ] \n```", "```\nview : Model -> Html Msg\nview model =\n  fieldset []\n    [ checkbox ToggleNotifications \"Email Notifications\"\n    , checkbox ToggleAutoplay \"Video Autoplay\"\n    , checkbox ToggleLocation \"Use Location\"\n    ]\n\ncheckbox : msg -> String -> Html msg\ncheckbox msg name =\n  label []\n    [ input [ type_ \"checkbox\", onClick msg ] []\n    , text name\n    ] \n```", "```\n<fieldset>\n  <label><input type=\"radio\">Small</label>\n  <label><input type=\"radio\">Medium</label>\n  <label><input type=\"radio\">Large</label>\n</fieldset> \n```", "```\ntype alias Model =\n  { fontSize : FontSize\n  , content : String\n  }\n\ntype FontSize = Small | Medium | Large \n```", "```\ntype Msg\n  = SwitchTo FontSize\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    SwitchTo newFontSize ->\n      { model | fontSize = newFontSize } \n```", "```\nview : Model -> Html Msg\nview model =\n  div []\n    [ fieldset []\n        [ label []\n            [ input [ type_ \"radio\", onClick (SwitchTo Small) ] []\n            , text \"Small\"\n            ]\n        , label []\n            [ input [ type_ \"radio\", onClick (SwitchTo Medium) ] []\n            , text \"Medium\"\n            ]\n        , label []\n            [ input [ type_ \"radio\", onClick (SwitchTo Large) ] []\n            , text \"Large\"\n            ]\n        ]\n    , section [] [ text model.content ]\n    ] \n```", "```\nview : Model -> Html Msg\nview model =\n  div []\n    [ fieldset []\n        [ radio (SwitchTo Small) \"Small\"\n        , radio (SwitchTo Medium) \"Medium\"\n        , radio (SwitchTo Large) \"Large\"\n        ]\n    , section [] [ text model.content ]\n    ]\n\nradio : msg -> String -> Html msg\nradio msg name =\n  label []\n    [ input [ type_ \"radio\", onClick msg ] []\n    , text name\n    ] \n```", "```\nview : Model -> Html Msg\nview model =\n  div []\n    [ viewPicker\n        [ (\"Small\", SwitchTo Small)\n        , (\"Medium\", SwitchTo Medium)\n        , (\"Large\", SwitchTo Large)\n        ]\n    , section [] [ text model.content ]\n    ]\n\nviewPicker : List (String, msg) -> Html msg\nviewPicker options =\n  fieldset [] (List.map radio options)\n\nradio : (String, msg) -> Html msg\nradio (name, msg) =\n  label []\n    [ input [ type_ \"radio\", onClick msg ] []\n    , text name\n    ] \n```", "```\nviewPicker : String -> List (String, msg) -> Html msg\nviewPicker pickerClass options =\n  fieldset [ class pickerClass ] (List.map radio options) \n```", "```\nviewPicker : List (Attribute msg) -> List (String, msg) -> Html msg\nviewPicker attributes options =\n  fieldset attributes (List.map radio options) \n```", "```\nmodule Optional exposing (..)\n\ntype Optional a = Some a | None\n\nisNone : Optional a -> Bool\nisNone optional =\n  case optional of\n    Some _ ->\n      False\n\n    None ->\n      True \n```", "```\nmodule Optional exposing ( Optional(..), isNone ) \n```", "```\n> module Main exposing (..) \n> ```", "```\nimport Optional\n\nnoService : Optional.Optional a -> Optional.Optional a -> Bool\nnoService shoes shirt =\n  Optional.isNone shoes && Optional.isNone shirt \n```", "```\nimport Optional as Opt\n\nnoService : Opt.Optional a -> Opt.Optional a -> Bool\nnoService shoes shirt =\n  Opt.isNone shoes && Opt.isNone shirt \n```", "```\nimport Facebook.News.Story as Story \n```", "```\nimport Optional exposing (Optional)\n\nnoService : Optional a -> Optional a -> Bool\nnoService shoes shirt =\n  Optional.isNone shoes && Optional.isNone shirt \n```", "```\nimport Optional as Opt exposing (Optional)\n\nnoService : Optional a -> Optional a -> Bool\nnoService shoes shirt =\n  Opt.isNone shoes && Opt.isNone shirt \n```", "```\n{\n    \"version\": \"1.0.0\",\n    \"summary\": \"helpful summary of your project, less than 80 characters\",\n    \"repository\": \"https://github.com/user/project.git\",\n    \"license\": \"BSD3\",\n    \"source-directories\": [\n        \"src\",\n        \"benchmarks/src\"\n    ],\n    \"exposed-modules\": [],\n    \"dependencies\": {\n        \"elm-lang/core\": \"4.0.2 <= v < 5.0.0\",\n        \"elm-lang/html\": \"1.1.0 <= v < 2.0.0\"\n    },\n    \"elm-version\": \"0.17.0 <= v < 0.18.0\"\n} \n```", "```\nmy-project/elm-package.json\nmy-project/src/Main.elm\nmy-project/src/Optional.elm \n```", "```\ncd my-project\nelm-make src/Main.elm \n```"]