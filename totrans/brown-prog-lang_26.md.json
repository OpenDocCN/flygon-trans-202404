["```\nfun double(x): x + x end\n\nfun quad(x): double(double(x)) end\n\nfun const5(_): 5 end\n```", "```\ndata FunDefC:\n  | fdC(name :: String, arg :: String, body :: ExprC)\nend\n```", "```\nfun double(x): x + y end\n```", "```\nfun subst(w :: ExprC, at :: String, in :: ExprC) -> ExprC:\n  ...\nend\n```", "```\nfun subst(w :: Value, at :: String, in :: ExprC) -> ExprC:\n  ...\nend\n```", "```\ndata Binding:\n  | bind(name :: String, value :: Value)\nend\n\ntype Environment = List<Binding>\nmt-env = empty\nxtnd-env = link\n```", "```\nfun f1(x): f2(4) end\nfun f2(y): x + y end\n\nf1(3)\n```", "```\nif moon-visible():\n  f1(10)\nelse:\n  f2(10)\nend\n```", "```\ncheck:\n  f1 = fdC(\"double\", \"x\", plusC(idC(\"x\"), idC(\"x\")))\n  f2 = fdC(\"quad\", \"x\", appC(f1, appC(f1, idC(\"x\"))))\n  f3 = fdC(\"const5\", \"_\", numC(5))\n  f4 = fdC(\"f4\", \"x\", s2p2d(\"(if x 1 0)\"))\n  fun i(e): interp(e, mt-env) end\n\n  i(plusC(numC(5), appC(f2, numC(3)))) is numV(17)\n  i(multC(appC(f3, numC(3)), numC(4))) is numV(20)\n  i(plusC(numC(10), appC(f3, numC(10)))) is numV(10 + 5)\n  i(plusC(numC(10), appC(f1, plusC(numC(1), numC(2)))))\n    is numV(10 + 3 + 3)\n  i(plusC(numC(10), appC(f2, plusC(numC(1), numC(2)))))\n    is numV(10 + 3 + 3 + 3 + 3)\nend\n```", "```\ninner-fun = fdC(\"x\", plusC(idC(\"x\"), idC(\"x\")))\nouter-fun = fdC(\"x\", inner-fun)\n```", "```\nfdC(\"x\", fdC(\"x\", plusC(idC(\"x\"), idC(\"x\"))))\n```", "```\nfdC(\"x\", plusC(idC(\"x\"), idC(\"x\")))\n```", "```\nappC(fdC(\"x\", fdC(\"y\", plusC(idC(\"x\"), idC(\"y\")))), numC(4))\n```", "```\nfdC(\"y\", plusC(idC(\"x\"), idC(\"y\")))\n```", "```\nappC(fdC(\"x\", fdC(\"x\", plusC(idC(\"x\"), idC(\"x\")))), numC(4))\n```", "```\nfdC(\"x\", plusC(idC(\"x\"), idC(\"x\")))\n```", "```\nappC(fdC(\"x\", fdC(\"y\", plusC(idC(\"x\"), idC(\"y\")))), numC(4))\n```", "```\nfdC(\"y\", plusC(numC(4), idC(\"y\")))\n```", "```\nfun double(x): x + x end\ndouble(10)\n```", "```\ndouble = lam(x): x + x end\ndouble(10)\n```", "```\nfun something():\n  double = lam(x): x + x end\n  double(10)\nend\n```", "```\nil = fdC(\"inf-loop\", \"x\", appC(\"inf-loop\", numC(0)))\n```", "```\ninterp(appC(\"inf-loop\", numC(0)), [list: il])\n```", "```\nfun loop-forever(): loop-forever() end\nloop-forever()\n```", "```\nlittle-omega = lam(x): x(x) end\n```", "```\nomega = little-omega(little-omega)\n```", "```\n(lam(x): x(x) end)(lam(x): x(x) end)\n```"]