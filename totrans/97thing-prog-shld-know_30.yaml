- en: Don't Repeat Yourself
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Don't Repeat Yourself
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of all the principles of programming, Don't Repeat Yourself (DRY) is perhaps
    one of the most fundamental. The principle was formulated by Andy Hunt and Dave
    Thomas in *The Pragmatic Programmer*, and underlies many other well-known software
    development best practices and design patterns. The developer who learns to recognize
    duplication, and understands how to eliminate it through appropriate practice
    and proper abstraction, can produce much cleaner code than one who continuously
    infects the application with unnecessary repetition.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Duplication is waste
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every line of code that goes into an application must be maintained, and is
    a potential source of future bugs. Duplication needlessly bloats the codebase,
    resulting in more opportunities for bugs and adding accidental complexity to the
    system. The bloat that duplication adds to the system also makes it more difficult
    for developers working with the system to fully understand the entire system,
    or to be certain that changes made in one location do not also need to be made
    in other places that duplicate the logic they are working on. DRY requires that
    "every piece of knowledge must have a single, unambiguous, authoritative representation
    within a system."
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Repetition in process calls for automation
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many processes in software development are repetitive and easily automated.
    The DRY principle applies in these contexts as well as in the source code of the
    application. Manual testing is slow, error-prone, and difficult to repeat, so
    automated test suites should be used, if possible. Integrating software can be
    time consuming and error-prone if done manually, so a build process should be
    run as frequently as possible, ideally with every check-in. Wherever painful manual
    processes exist that can be automated, they should be automated and standardized.
    The goal is to ensure there is only one way of accomplishing the task, and it
    is as painless as possible.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Repetition in logic calls for abstraction
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Repetition in logic can take many forms. Copy-and-paste *if-then* or *switch-case*
    logic is among the easiest to detect and correct. Many design patterns have the
    explicit goal of reducing or eliminating duplication in logic within an application.
    If an object typically requires several things to happen before it can be used,
    this can be accomplished with an Abstract Factory or a Factory Method. If an object
    has many possible variations in its behavior, these behaviors can be injected
    using the Strategy pattern rather than large *if-then* structures. In fact, the
    formulation of design patterns themselves is an attempt to reduce the duplication
    of effort required to solve common problems and discuss such solutions. In addition,
    DRY can be applied to structures, such as database schema, resulting in normalization.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: A Matter of principle
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Other software principles are also related to DRY. The Once and Only Once principle,
    which applies only to the functional behavior of code, can be thought of as a
    subset of DRY. The Open/Closed Principle, which states that "software entities
    should be open for extension, but closed for modification," only works in practice
    when DRY is followed. Likewise, the well-known Single Responsibility Principle
    requires that a class have "only one reason to change," relies on DRY.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 其他软件原则也与DRY有关。Once and Only Once原则，仅适用于代码的功能行为，可以被视为DRY的一个子集。开闭原则指出“软件实体应该对扩展开放，但对修改关闭”，只有在遵循DRY原则时才能实际运作。同样，众所周知的单一责任原则要求一个类只有“一个变化的理由”，依赖于DRY。
- en: When followed with regard to structure, logic, process, and function, the DRY
    principle provides fundamental guidance to software developers and aids the creation
    of simpler, more maintainable, higher-quality applications. While there are scenarios
    where repetition can be necessary to meet performance or other requirements (e.g.,
    data denormalization in a database), it should be used only where it directly
    addresses an actual rather than an imagined problem.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当遵循结构、逻辑、过程和功能方面的原则时，DRY原则为软件开发人员提供了基本指导，并有助于创建更简单、更易维护、更高质量的应用程序。虽然有些情况下重复可能是必要的，以满足性能或其他要求（例如，在数据库中进行数据去规范化），但应仅在直接解决实际问题而非想象问题的情况下使用。
- en: By [Steve Smith](http://programmer.97things.oreilly.com/wiki/index.php/Steve_Smith)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[史蒂夫·史密斯](http://programmer.97things.oreilly.com/wiki/index.php/Steve_Smith)
