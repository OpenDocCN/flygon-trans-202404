- en: Lecture 14 - Serial I/O, Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Assignment 4
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performance measurements
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Serial I/O
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [pdf](../../s10/pdf/sio.pdf).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: FIFO
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Why do FIFOs exist in UARTS?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The Big Blunder
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use the FIFO effectively you must be able to turn off the transmitter & receiver
    independently.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: But look at UARTE in UARTxCtrl
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: UART Enable.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this bit is set to 1, the UART is enabled.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data transmission and reception occurs for UART signals.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Little Blunder
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`It is assumed that various configuration registers for the UART are not written
    more than once in quick succession, in order to insure proper synchronization
    of configuration information across the implementation. Such registers include
    UART1Ctrl and UART1LinCtrlHigh. ... In between the two writes, at least two UARTCLK
    periods must occur. Under worst case conditions, at least 55 HCLK periods must
    separate the two writes. The simplest way to due [sic] this is to separate the
    two writes by 55 NOPs.'''
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Why does this occur?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: CPU clocked by CPU clock
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System buses clocked by several different clocks
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UART clocked by its own clock
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The clocks were not suitably synchronized
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why doesn't anybody care?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: UARTs are used at the beginning of the development process
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once other I/O (ethernet, USB, etc.) is working, UARTs are no longer used, except
    possibly by the boot loader
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interrupts
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Five interrupts in the device
  id: totrans-26
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: These interrupts are separately enabled and disabled.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Transmit
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: FIFO enabled
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Asserted when transmit FIFO is less than half full.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleared when transmit FIFO is more than half full.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: FIFO disabled
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Asserted when holding register is empty
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleared on write to the holding register
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not conditioned by enable.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Receive
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: FIFO enabled
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Asserted when receive FIFO is half full
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleared when receive FIFO is read to less than half full.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: FIFO disabled
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Asserted when receive buffer is full
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleared when receive buffer is read
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Modem status
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Asserted when hardware flow control bits change
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleared when the modem status register is written
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Receive timeout
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Asserted when receive FIFO is not empty and 32 bit periods pass with no new
    data
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleared when all data has been read from FIFO
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Combined
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OR of the four above interrupts
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Asserted when at least one of the above interrupts is asserted
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleared when all the above interrupts are not asserted.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Three inputs to the ICU
  id: totrans-53
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Transmit
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Receive
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combined
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are adequate for interacting with the terminal, but not for interacting
    with the train controller.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Easy way to use interrupts
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Enable only combined; read UART registers to decide what to do.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Think of the receive and transmit parts of the UART as separate state machines
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Base the state machine on bits in the status registers
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a separate state machine for flow control
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practical Advice
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Until now you have been using busy-wait I/O for getting debugging output. You
    would like to continue to have debugging output while you are implementing interrupt-mediated
    I/O.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: There are two UART ports on the ARM board.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect each one to a different terminal window on the terminal.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do busy-wait I/O to one for debugging while getting interrupt-mediated I/O working
    on the other.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then do debugging I/O on the working serial server while you create and debig
    the other server.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Hint**. The serial server for the terminal must be a lot more complex than
    the esrial server for the train controller.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Real-time Programs
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most common set of debugging tools used by experienced programmers is the
    oldest: printf, grep & stack trace.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: The power of these tools is greatly enhanced by strong conventions in code formatting.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging real-time programs, at its base, is just the same as any other debugging,
    and just the same as empirical science.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Gather data.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a model that explains the data
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the model
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the model is not correct, go to 1.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remember that the model is ALWAYS provisional: data collected later may invalidate
    it, no matter how much data has confirmed it.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But real-time programs are harder to debug. Very few programs are entirely free
    of critical races, which are the worst type of bug, lurking for weeks months or
    years in seemingly correct code, then appearing when innocuous, unconnected changes
    occur.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Critical Races
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no known method for eliminating critical races.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Synchronizing everything, which seems to be an obvious solution, kills performance
    because it removes flexibility from the execution.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is, in principle, impossible to test away critical races. Why?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: When three trains run continuously for ten minutes, how many events occur in
    the real world?
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many possible orders are there for these events?
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Re-ordering isn't even necessary for a critical race to occur, just getting
    too close in time.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RedBoot
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The memory contents are not wiped by reset. Some of the most difficult errors
    can be detected only by using the contents of memory after a reset. Produce useful
    results by inserting
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: many places in your code. Then, with the assistance of a load map, you can find
    out where you were in which code when the problem occurred.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: In RedBoot you can, in principle, trace any of the kernel
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Stack Trace
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In single-threaded programs this is often the most useful tool.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Anything that terminates execution abnormally prints the set of active stack
    frames
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimal version
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: name of calling function
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: line number of call
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Extreme version
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: values of arguments
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: values of local variables
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the equivalent of a stack trace in a real-time multi-tasking environment?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: How would you implement it?
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two basic questions to answer.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When is it produced?
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What should be in it?
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you make it readable?
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breakpoint
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What does it do?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: snapshot of the system
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that computation, including respose to interrupts, must stop, or
    it isn't a snapshot.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: provides interactive tools for examining kernel data structures, such as
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: task descriptors
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lists and queues
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: stacks, including the program counter and local variables, of individual tasks
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: restart system immediately afterwards
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to continue where processing stopped you must make certain that
    all state is saved when you enter Beakpoint and restored when you leave it. What
    about pending interrupts? You can't stop the entire universe!
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果要继续处理停止的地方，必须确保在进入Beakpoint时保存所有状态，并在离开时恢复。挂起的中断怎么办？你不能停止整个宇宙！
- en: Otherwise you can re-enter RedBoot.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，你可以重新进入RedBoot。
- en: How do you get it started?
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如何启动它？
- en: function call, which you insert in your code when compiling.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数调用，在编译代码时插入。
- en: The easiest and fastest form to implement.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现的最简单和最快的形式。
- en: Having the call as part of ASSERT is common.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将呼叫作为ASSERT的一部分是常见的。
- en: Has to exit to RedBoot. (Jump to x00.)
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须退出到RedBoot。（跳转到x00。）
- en: system call instead of function call, which respects the kernel/user distinction.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统调用而不是函数调用，尊重内核/用户区分。
- en: an exception triggered externally
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部触发的异常
- en: at initialization
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在初始化时
- en: Set up the system so that the external event will generate an exception
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置系统，使外部事件会产生异常。
- en: E.g. attach a button to PDIO on the third connector, set up ICU.
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，将按钮连接到第三个连接器上的PDIO，设置ICU。
- en: at run-time
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时
- en: Trigger the interrupt
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 触发中断
- en: Switch to Breakpoint in the event handler
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件处理程序中切换到断点
- en: Either exit to RedBoot,
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要么退出到RedBoot，
- en: Or clean up pending interrupts and resume execution.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或清理挂起的中断并恢复执行。
- en: Breakpoint is a special case of a particular sort of tool that is very common.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 断点是一种非常常见的特定工具的特例。
- en: condition occurs => information is made available
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件发生 => 信息可用
- en: breakpoint provides the information interactively (`interactively' = `on the
    time scale of the user')
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断点提供交互式信息（`交互式' = `用户时间尺度上的'）
- en: it can stop the system completely. How?
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以完全停止系统。怎么做？
- en: but it has limited ability to stop the real world
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但它有限的停止现实世界的能力
- en: i.e., it hides some bugs
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即，它隐藏了一些错误
- en: Getting information closer to real-time.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 获取更接近实时的信息。
- en: '* * *'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Return to:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到：
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan在s12的CS452讲座笔记](index.html)'
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan的2012年春季CS452页面](../index.html)'
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan的CS452页面](../../index.html)'
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan的教学页面](../../../index.html)'
- en: '[Bill Cowan''s home page](../../../../index.html)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan的主页](../../../../index.html)'
