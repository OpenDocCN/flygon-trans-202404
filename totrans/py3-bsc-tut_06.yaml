- en: Reading data from files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件中读取数据
- en: Reading data from files
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件中读取数据
- en: In this section, you will learn to extract information from simple text files.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习从简单文本文件中提取信息。
- en: For the next exercises, you will need the complete archive of baby names (the
    shorter one not grouped by states). You can download the files from [http://www.ssa.gov/oact/babynames/limits.html](http://www.ssa.gov/oact/babynames/limits.html).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于接下来的练习，您将需要完整的婴儿名字档案（未按州分组的较短档案）。您可以从[http://www.ssa.gov/oact/babynames/limits.html](http://www.ssa.gov/oact/babynames/limits.html)下载文件。
- en: Reading a simple text file
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取一个简单的文本文件
- en: Reading simple text files
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取简单文本文件
- en: Exercise 1
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 1
- en: 'Create a text file `bigbang.txt` in a text editor, containing the following
    data:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中创建一个名为`bigbang.txt`的文本文件，其中包含以下数据：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Exercise 1:'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1：
- en: Make the program work by inserting `close`, `line`, `bigbang.txt`, `print` into
    the gaps.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在空格中插入`close`，`line`，`bigbang.txt`，`print`，使程序正常运行。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Hint:'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提示：
- en: Depending on your editor, you may need to insert the complete path to the file.
    If the program does not work, a wrong file name or location are the most probable
    reasons.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的编辑器，您可能需要插入文件的完整路径。如果程序无法运行，则错误的文件名或位置是最有可能的原因。
- en: Exercise 3
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 3
- en: How many different *girls names* were there in 2015?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 2015 年有多少不同的*女孩名字*？
- en: '**Sort** the following code lines and **indent them correctly**:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**对**以下代码行进行**排序**并**正确缩进**：'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Exercise 4
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4
- en: Extend the program from the previous exercise such that boys and girls names
    are counted separately.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展上一个练习的程序，使男孩和女孩的名字分别计数。
- en: Exercise 5
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 5
- en: Which of the following commands are correct?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪些命令是正确的？
- en: '`for char in "ABCD":`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for char in "ABCD":`'
- en: '`for i in range(10):`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for i in range(10):`'
- en: '`for number in [4, 6, 8]:`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for number in [4, 6, 8]:`'
- en: '`for k in 3+7:`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for k in 3+7:`'
- en: '`for (i=0; i<10; i++):`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for (i=0; i<10; i++):`'
- en: '`for var in open(''bigbang.txt''):`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for var in open(''bigbang.txt''):`'
- en: Exercise 6
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 6
- en: Write a program that reads lines from the file `yob2015.txt`. Identify all lines
    containing your name and print them to the screen.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，从文件`yob2015.txt`中读��行。识别所有包含您姓名的行并将其打印到屏幕上。
- en: Extracting data from text
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文本中提取数据
- en: Parsing data from text
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文本中解析数据
- en: Most text files contain both text and numbers. Extracting these data fields
    from a file and storing them in reasonably *structured* variables is called **parsing**.
    To parse files, we need methods of strings, lists and **type conversions**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数文本文件包含文本和数字。从文件中提取这些数据字段并将它们存储在合理*结构化*的变量中称为**解析**。要解析文件，我们需要字符串、列表和**类型转换**的方法。
- en: Exercise 1
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 1
- en: 'Insert the following pieces into the code, so that all commands are executed
    correctly: `age`, `int(age)`, `name`, `str(born)`, `2000`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下片段插入代码中，以便所有命令都能正确执行：`age`，`int(age)`，`name`，`str(born)`，`2000`
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Exercise 2
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 2
- en: The following program collects names in a list that occur at least 10000 times.
    Unfortunately, the program contains **four errors**. Find and fix these.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序在列表中收集至少出现 10000 次的名字。不幸的是，程序包含**四个错误**。找出并修复这些错误。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Exercise 3
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 3
- en: Write a program that calculates the total number of babys for the year 2015
    and writes it to the screen. Compare that number with the year 1915.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，计算 2015 年的婴儿总数并将其写入屏幕。将该数字与 1915 年进行比较。
- en: Exercise 4
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4
- en: Write a program that finds the *three most frequent* names for boys and girls
    in a given year and writes them to the screen.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，找到给定年份男孩和女孩的*三个最常见*名字，并将它们写入屏幕。
- en: '**Hint:** The three most frequent names are on top of the list.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：**前三个最常见的名字在列表的顶部。'
- en: Exercise 5
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 5
- en: Write a program that calculates the percentage of the 10 most frequent names
    for the year 2015 and writes it to the screen.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，计算 2015 年前 10 个最常见名字的百分比，并将其写入屏幕。
- en: Writing files
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入文件
- en: Writing Files
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入文件
- en: Exercise 1
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 1
- en: Form pairs of Python commands and their meanings.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 形成 Python 命令及其含义的配对。
- en: '![file exercise](files.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![文件练习](files.png)'
- en: Exercise 2
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 2
- en: Execute the following program. Explain what happens.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下程序。解释发生了什么。
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Exercise 3
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 3
- en: Remove the `+ '\n'` from the program and execute it again. What happens?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从程序中删除`+ '\n'`并再次执行。会发生什么？
- en: Exercise 4
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4
- en: Complete the following statements by `int()` or `str()` so that all of them
    work.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`int()`或`str()`完成以下语句，以使它们全部正常工作。
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Exercise 5
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 5
- en: Write a program that writes the following data into a two-column text file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，将以下数据写入一个两列文本文件。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Processing multiple files
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理多个文件
- en: Processing multiple files
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理多个文件
- en: Exercise 1
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 1
- en: The following program calculates the total number of births during the past
    130 years.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: The code contains a *subtle semantic bug*. Execute the program. Inspect the
    output. Find and fix the bug.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Exercise 2
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a program that finds lines containing your name in the years 1880 to 2014.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extend the program in such a way that the gender is being checked as well. Print
    only lines with matching `'M'` or `'F'`, respectively.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Collect all matches in a list.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If no matches were found in a given year, add a `0` to the result.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Screen output
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Screen output
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will explor the `print()` function to write text to the screen.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Which `print` statements are correct?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '`print("9" + "9")`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print "nine"`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(str(9) + "nine")`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(9 + 9)`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(nine)`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 2
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Explain the following statement:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Exercise 3
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some babies have names similar to celebrities. Write a program producing the
    following output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Exercise 4
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Expand the previous exercise so that:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: only a single `print` statement is used.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the names are stored in a variable before building the string.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String methods
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: String methods
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Determine what the expressions do to the string in the center.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '![string exercise](strings.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: Exercise 2
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following program identifies names used for both girls and boys and writes
    them to a file.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Complete the code to dissect lines to columns, so that the variables `name`
    and `gender` are defined.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Format strings
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Format Strings
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Try the following expressions in a Python shell:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Exercise 2
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write a `for` loop producing the following string:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Exercise 3
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You have the following two lists:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Write a program that creates a table with two vertically aligned columns.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Dictionaries
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dictionaries
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find out what each of the expressions does to the dictionary in the center.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![dict exercise](dicts.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: Exercise 2
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do the following commands produce?
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`False`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"B"`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 3
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do these commands produce?
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`1`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"B"`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 4
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do these commands produce?
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`True`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[''A'', 1, True]`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[1, ''B'', ''A'']`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 5
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do these commands produce?
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`[1, ''B'', ''A'']`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[''A'', ''B'', 1]`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[1, ''A'', ''B'']`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`The order may vary`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 6
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do these commands produce?
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`None`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''C''`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`an Error`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 7
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do these commands produce?
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`3`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''C''`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`None`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`an Error`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuples
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tuples
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A tuple is a sequence of elements that cannot be modified. They are useful to
    group elements of different type.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In contrast to lists, tuples can also be used as keys in dictionaries.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which are correct tuples?
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[ ] `(1, 2, 3)`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `("Jack", "Knife")`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `(''blue'', [0, 0, 255])`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `[1, "word"]`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 2
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What can you do with tuples?
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[ ] `group data of different kind`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `change the values in them`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `run a for loop over them`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `sort them`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading from the keyboard
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reading from the keyboard
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will connect the keyboard to our program.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Warming up
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What happens when you write the follwing lines in the IPython shell:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Exercise 1
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which `input` statements are correct?
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[ ] `a = input()`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `a = input("enter a number")`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `a = input(enter your name)`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `a = input(3)`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Challenge: Enter a baby name'
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Write a program that asks for a *name* and an *age*, then writes a sentence
    with the entered data:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Extra challenge:'
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add 1 to the age entered.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting numbers to text and back
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Converting numbers to text and back
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you know how to store numbers and how to store text. Being able to convert
    the two into each other will come in handy. For that, we will use *type conversions*.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Warming up
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we are going to combine strings with integer numbers.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Insert into the following items into the code, so that all statements are working:
    `age`, `int(age)`, name, `str(born)`, `2000`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can you leave `str(born)` and `int(age)` away?
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What do `str()` and `int()` do?
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Exercise 1:'
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is the result of the following statements?
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Exercise 2:'
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Change the statements above by adding int() or str() to each of them, so that
    the result is 18 or '99', respectively.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3:'
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Explain the result of the following operations?
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Exercise 4:'
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write Python statements that create the following string:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The Challenge: A data record with types'
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| field | value | type |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
- en: '| first name | Andrew | string |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
- en: '| last name | O''Malley | string |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
- en: '| gender | M | string |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
- en: '| year of birth | 2000 | integer |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
- en: '| age | 15 | integer |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
- en: Write the values from each row of the table into string or integer variables,
    then combine them to a single one-line string.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Structuring programs
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Structuring programs
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Python, you can structure programs on four different levels: with functions,
    classes, modules and packages. Of these, classes are the most complicated to use.
    Therefore they are skipped in this tutorial.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Goals
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learn to write functions
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn to write modules
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn to write packages
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know some standard library modules
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know some installable modules
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing your own functions
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functions
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python 3.5 has 72 builtin functions. To start writing useful programs, knowing
    about 25 of them is sufficient. Many of these functions are useful shortcuts that
    make your programs shorter.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a module?
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any Python file (ending .py) can be imported from another Python script. A single
    Python file is also called a module.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Importing modules
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To import from a module, its name (without .py) needs to be given in the import
    statement. Import statements can look like this:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: It is strongly recommended to list the imported variables and functions explicitly
    instead of using the *import ** syntax. This makes debugging a lot easier.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: When importing, Python generates intermediate code files (in the ***pycache***
    directory) that help to execute programs faster. They are managed automatically,
    and dont need to be updated.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Introspection
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introspection
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Warming up
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Try the following on the interactive shell:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: What does the code do?
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'The Challenge: a Baby name generator'
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战：婴儿姓名生成器
- en: Write a program that will generate a random baby name from a list of possible
    names.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，从可能的姓名列表中随机生成一个婴儿姓名。
- en: Use the Python module `random`
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 模块`random`
- en: 'Extra challenges:'
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外挑战：
- en: let the user choose the gender of the babies.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让用户选择婴儿的性别。
- en: let the user enter how many babies they want to have.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让用户输入他们想要拥有多少个婴儿。
- en: load baby names from a file.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件中加载婴儿姓名。
- en: Working with directories
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理目录
- en: Working with directories
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理目录
- en: To process bigger amounts of data, you will need to work on more than one file.
    Sometimes you don't know all the files in advance.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理更多数据，你需要处理多个文件。有时你事先不知道所有的文件。
- en: Warming up
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 热身
- en: Fill in the gaps
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 填补空白
- en: '![os exercise](os.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![os 练习](os.png)'
- en: Exercise 1
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1
- en: 'Explain the following code:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 解释以下代码：
- en: '[PRE30]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Exercise 1
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1
- en: Write a program that counts the number of files in the unzipped set of baby
    names. Have the program print that number.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，计算解压缩的婴儿姓名集中的文件数量。让程序打印出该数字。
- en: Verify that the number is correct.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 验证数字是否正确。
- en: Exercise 2
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2
- en: How many entries (lines) does the entire name dataset have?
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 整个姓名数据集有多少条目（行）？
- en: '**Hint**: Generate a message that tells you which file the program is reading.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**：生成一条消息，告诉你程序正在读取哪个文件。'
- en: Exercise 3
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3
- en: Write a program that finds the *most frequently occuring name* in each year
    and prints it.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，找到每年出现最频繁的姓名并打印出来。
- en: The Challenge
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战
- en: Find and print your name and the according number in each of the files, so that
    you can see how the number changes over time.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 查找并打印你的姓名及其在每个文件中对应的数字，这样你就可以看到数字随时间的变化。
