- en: Reading data from files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reading data from files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn to extract information from simple text files.
  prefs: []
  type: TYPE_NORMAL
- en: For the next exercises, you will need the complete archive of baby names (the
    shorter one not grouped by states). You can download the files from [http://www.ssa.gov/oact/babynames/limits.html](http://www.ssa.gov/oact/babynames/limits.html).
  prefs: []
  type: TYPE_NORMAL
- en: Reading a simple text file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reading simple text files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a text file `bigbang.txt` in a text editor, containing the following
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 1:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make the program work by inserting `close`, `line`, `bigbang.txt`, `print` into
    the gaps.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Hint:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Depending on your editor, you may need to insert the complete path to the file.
    If the program does not work, a wrong file name or location are the most probable
    reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How many different *girls names* were there in 2015?
  prefs: []
  type: TYPE_NORMAL
- en: '**Sort** the following code lines and **indent them correctly**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extend the program from the previous exercise such that boys and girls names
    are counted separately.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Which of the following commands are correct?
  prefs: []
  type: TYPE_NORMAL
- en: '`for char in "ABCD":`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for i in range(10):`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for number in [4, 6, 8]:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for k in 3+7:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for (i=0; i<10; i++):`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for var in open(''bigbang.txt''):`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a program that reads lines from the file `yob2015.txt`. Identify all lines
    containing your name and print them to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting data from text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Parsing data from text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most text files contain both text and numbers. Extracting these data fields
    from a file and storing them in reasonably *structured* variables is called **parsing**.
    To parse files, we need methods of strings, lists and **type conversions**.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Insert the following pieces into the code, so that all commands are executed
    correctly: `age`, `int(age)`, `name`, `str(born)`, `2000`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following program collects names in a list that occur at least 10000 times.
    Unfortunately, the program contains **four errors**. Find and fix these.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a program that calculates the total number of babys for the year 2015
    and writes it to the screen. Compare that number with the year 1915.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a program that finds the *three most frequent* names for boys and girls
    in a given year and writes them to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hint:** The three most frequent names are on top of the list.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a program that calculates the percentage of the 10 most frequent names
    for the year 2015 and writes it to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Writing files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Form pairs of Python commands and their meanings.
  prefs: []
  type: TYPE_NORMAL
- en: '![file exercise](files.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Execute the following program. Explain what happens.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remove the `+ '\n'` from the program and execute it again. What happens?
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following statements by `int()` or `str()` so that all of them
    work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a program that writes the following data into a two-column text file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Processing multiple files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Processing multiple files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following program calculates the total number of births during the past
    130 years.
  prefs: []
  type: TYPE_NORMAL
- en: The code contains a *subtle semantic bug*. Execute the program. Inspect the
    output. Find and fix the bug.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a program that finds lines containing your name in the years 1880 to 2014.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extend the program in such a way that the gender is being checked as well. Print
    only lines with matching `'M'` or `'F'`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Collect all matches in a list.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If no matches were found in a given year, add a `0` to the result.
  prefs: []
  type: TYPE_NORMAL
- en: Screen output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Screen output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will explor the `print()` function to write text to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Which `print` statements are correct?
  prefs: []
  type: TYPE_NORMAL
- en: '`print("9" + "9")`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print "nine"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(str(9) + "nine")`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(9 + 9)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(nine)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Explain the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some babies have names similar to celebrities. Write a program producing the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Expand the previous exercise so that:'
  prefs: []
  type: TYPE_NORMAL
- en: only a single `print` statement is used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the names are stored in a variable before building the string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: String methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Determine what the expressions do to the string in the center.
  prefs: []
  type: TYPE_NORMAL
- en: '![string exercise](strings.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following program identifies names used for both girls and boys and writes
    them to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Complete the code to dissect lines to columns, so that the variables `name`
    and `gender` are defined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Format strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Format Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Try the following expressions in a Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write a `for` loop producing the following string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You have the following two lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Write a program that creates a table with two vertically aligned columns.
  prefs: []
  type: TYPE_NORMAL
- en: Dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find out what each of the expressions does to the dictionary in the center.
  prefs: []
  type: TYPE_NORMAL
- en: '![dict exercise](dicts.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do the following commands produce?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"B"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do these commands produce?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"B"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do these commands produce?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`True`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[''A'', 1, True]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[1, ''B'', ''A'']`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do these commands produce?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`[1, ''B'', ''A'']`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[''A'', ''B'', 1]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[1, ''A'', ''B'']`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`The order may vary`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do these commands produce?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`None`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''C''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`an Error`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What do these commands produce?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '`3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''C''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`None`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`an Error`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A tuple is a sequence of elements that cannot be modified. They are useful to
    group elements of different type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In contrast to lists, tuples can also be used as keys in dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which are correct tuples?
  prefs: []
  type: TYPE_NORMAL
- en: '[ ] `(1, 2, 3)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `("Jack", "Knife")`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `(''blue'', [0, 0, 255])`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `[1, "word"]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What can you do with tuples?
  prefs: []
  type: TYPE_NORMAL
- en: '[ ] `group data of different kind`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `change the values in them`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `run a for loop over them`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `sort them`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading from the keyboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reading from the keyboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will connect the keyboard to our program.
  prefs: []
  type: TYPE_NORMAL
- en: Warming up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What happens when you write the follwing lines in the IPython shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which `input` statements are correct?
  prefs: []
  type: TYPE_NORMAL
- en: '[ ] `a = input()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `a = input("enter a number")`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `a = input(enter your name)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] `a = input(3)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Challenge: Enter a baby name'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Write a program that asks for a *name* and an *age*, then writes a sentence
    with the entered data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Extra challenge:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add 1 to the age entered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting numbers to text and back
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Converting numbers to text and back
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you know how to store numbers and how to store text. Being able to convert
    the two into each other will come in handy. For that, we will use *type conversions*.
  prefs: []
  type: TYPE_NORMAL
- en: Warming up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we are going to combine strings with integer numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert into the following items into the code, so that all statements are working:
    `age`, `int(age)`, name, `str(born)`, `2000`'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can you leave `str(born)` and `int(age)` away?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What do `str()` and `int()` do?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Exercise 1:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is the result of the following statements?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 2:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Change the statements above by adding int() or str() to each of them, so that
    the result is 18 or '99', respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Explain the result of the following operations?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 4:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write Python statements that create the following string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The Challenge: A data record with types'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| field | value | type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| first name | Andrew | string |'
  prefs: []
  type: TYPE_TB
- en: '| last name | O''Malley | string |'
  prefs: []
  type: TYPE_TB
- en: '| gender | M | string |'
  prefs: []
  type: TYPE_TB
- en: '| year of birth | 2000 | integer |'
  prefs: []
  type: TYPE_TB
- en: '| age | 15 | integer |'
  prefs: []
  type: TYPE_TB
- en: Write the values from each row of the table into string or integer variables,
    then combine them to a single one-line string.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Structuring programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Python, you can structure programs on four different levels: with functions,
    classes, modules and packages. Of these, classes are the most complicated to use.
    Therefore they are skipped in this tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: Goals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learn to write functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn to write modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn to write packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know some standard library modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know some installable modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing your own functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python 3.5 has 72 builtin functions. To start writing useful programs, knowing
    about 25 of them is sufficient. Many of these functions are useful shortcuts that
    make your programs shorter.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a module?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any Python file (ending .py) can be imported from another Python script. A single
    Python file is also called a module.
  prefs: []
  type: TYPE_NORMAL
- en: Importing modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To import from a module, its name (without .py) needs to be given in the import
    statement. Import statements can look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: It is strongly recommended to list the imported variables and functions explicitly
    instead of using the *import ** syntax. This makes debugging a lot easier.
  prefs: []
  type: TYPE_NORMAL
- en: When importing, Python generates intermediate code files (in the ***pycache***
    directory) that help to execute programs faster. They are managed automatically,
    and dont need to be updated.
  prefs: []
  type: TYPE_NORMAL
- en: Introspection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introspection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Warming up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Try the following on the interactive shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: What does the code do?
  prefs: []
  type: TYPE_NORMAL
- en: 'The Challenge: a Baby name generator'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a program that will generate a random baby name from a list of possible
    names.
  prefs: []
  type: TYPE_NORMAL
- en: Use the Python module `random`
  prefs: []
  type: TYPE_NORMAL
- en: 'Extra challenges:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: let the user choose the gender of the babies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: let the user enter how many babies they want to have.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: load baby names from a file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To process bigger amounts of data, you will need to work on more than one file.
    Sometimes you don't know all the files in advance.
  prefs: []
  type: TYPE_NORMAL
- en: Warming up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fill in the gaps
  prefs: []
  type: TYPE_NORMAL
- en: '![os exercise](os.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Explain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a program that counts the number of files in the unzipped set of baby
    names. Have the program print that number.
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the number is correct.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How many entries (lines) does the entire name dataset have?
  prefs: []
  type: TYPE_NORMAL
- en: '**Hint**: Generate a message that tells you which file the program is reading.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a program that finds the *most frequently occuring name* in each year
    and prints it.
  prefs: []
  type: TYPE_NORMAL
- en: The Challenge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find and print your name and the according number in each of the files, so that
    you can see how the number changes over time.
  prefs: []
  type: TYPE_NORMAL
