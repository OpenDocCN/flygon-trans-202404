- en: Lecture 8 - Create, Initialization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8讲 - 创建，初始化
- en: Pubilc Service Annoucements
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共服务公告
- en: Due date for assignment 1
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作业1的截止日期
- en: Victoria Day holiday
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 维多利亚日假期
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Initializing the Kernel
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化内核
- en: Set up the Hardware
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置硬件
- en: busy-wait io
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 繁忙等待io
- en: low memory
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 低内存
- en: Where is the kernel entry?
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核入口在哪里？
- en: Turn off interrupts in the ICU
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ICU中关闭中断
- en: This should be unnecessary, but what if the previous kernel turned them on?
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这应该是不必要的，但如果之前的内核打开了它们呢？
- en: Later you will initialize the ICU differently.
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以后你会以不同的方式初始化ICU。
- en: Prepare the Kernel Data Structures
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 准备内核数据结构
- en: Where is the kernel's stack pointer, right now? What does the stack look like?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 内核的堆栈指针现在在哪里？堆栈是什么样子的？
- en: Do you want it there? Would you rather have it somewhere else?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想把它放在那里吗？你宁愿把它放在别的地方吗？
- en: This is your last chance to change it. (If you decide to change it you might
    want to keep what you are replacing around. Why?)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是你最后一次改变它的机会。（如果你决定改变它，你可能想保留你要替换的东西。为什么？）
- en: The kernel data structures
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 内核数据结构
- en: an array of empty ready queues
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个空的就绪队列数组
- en: a poimter to the TD of the active task
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 活动任务的TD的指针
- en: an array of TDs
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个TD数组
- en: a free list of pointers to free TDs
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个指向空闲TD的指针的空闲列表
- en: Prepare the Memory to be Used by Tasks
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 准备任务使用的内存
- en: task memory
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务内存
- en: Create the First User Task
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建第一个用户任务
- en: Can run with interrupts turned off for now (belt and braces) but will need to
    be turned on later.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以在关闭中断的情况下运行（保险起见），但以后需要打开。
- en: Reminder. The place where the kernel starts executing has the global name main,
    which cannot be re-used.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒。内核开始执行的地方具有全局名称main，不能重新使用。
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Creating a Task
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个任务
- en: In creating a task you have to do two things
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建任务时，你必须做两件事
- en: Get and initialize resources needed by the task
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并初始化任务所需的资源
- en: TD
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TD
- en: memory
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存
- en: Make the task look as if it had just entered the kernel
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使任务看起来好像刚进入内核
- en: it's ready to execute when it's scheduled
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当计划好时，它就准备好执行了
- en: Things you need to do
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你需要做的事情
- en: Allocate resources
  id: totrans-36
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 分配资源
- en: Get an unused TD and unused memory for its stack
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一个未使用的TD和未使用的内存用于其堆栈
- en: actually a form of constant time memory allocation
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际上是一种常数时间内存分配
- en: Initialize resources
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 初始化资源
- en: Mostly filling in fields in the TD. Here are the ones that ought to be in the
    TD.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 主要是填写TD中的字段。这些应该在TD中的字段在这里。
- en: task id
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务ID
- en: priority
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优先级
- en: stack pointer
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 堆栈指针
- en: parent tid
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 父任务ID
- en: the active task
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动任务
- en: state
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 状态
- en: READY
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就绪
- en: install in the ready queues
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装在就绪队列中
- en: pointers in the TD
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TD中的指针
- en: This looks like six words, which could be squeezed into fewer. (There will be
    more later.)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来像是六个词，可以压缩成更少的词。（稍后会有更多。）
- en: If you are thinking about the cache, how can you make the array of task descriptors
    so that they are cache-aligned.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在考虑缓存，如何使任务描述符数组对齐缓存。
- en: Here are the ones that could be in the TD, or could be on the stack.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可能在TD中，也可能在堆栈中。
- en: SPSR
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SPSR
- en: link register
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 链接寄存器
- en: return value
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回值
- en: Initialize the stack
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 初始化堆栈
- en: exactly as if the task had just done a kernel entry
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就好像任务刚刚执行了内核入口一样
- en: look carefully at what your kernel exit code will do
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仔细看看你的内核退出代码会做什么
- en: At the end stack pointer must correspond to stack contents
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后堆栈指针必须对应堆栈内容
- en: I initialize the stack pointer to the top of allocated memory
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我将堆栈指针初始化为分配内存的顶部
- en: my stacks grow down
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的堆栈向下增长
- en: then change it as I push stuff onto the stack
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后随着我将东西推到堆栈上而改变它
- en: imitating the context switch code
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟上下文切换代码
- en: Here's something I always do.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我总是做的事情。
- en: Put distinctive values into registers to start off with, like 00000000, 11111111,
    22222222, etc.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将独特的值放入寄存器中，如00000000，11111111，22222222等。
- en: This makes solving pointer misalignment problems easier
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这使得解决指针不对齐问题更容易
- en: '* * *'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The Create Function
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建函数
- en: You also need a `int Create( int priority, void (*code) ( ) )` function to call
    from user tasks.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个`int Create( int priority, void (*code) ( ) )`函数供用户任务调用。
- en: Although it's no more than a wrapper there are a few problems to solve.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它不过是一个包装器，但有一些问题需要解决。
- en: Passing arguments
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传递参数
- en: On entry the arguments are somewhere, usually r0 & r1
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入时，参数通常在某处，通常是r0和r1。
- en: You have to put them where the kernel can find them.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你必须把它们放在内核能找到的地方。
- en: gcc's function extry code immediately puts them on the stack.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: gcc的函数入口代码立即将它们放在堆栈上。
- en: In assembly you can find them using the frame pointer.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在汇编中，你可以使用帧指针找到它们。
- en: Jumping into the kernel
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳入内核
- en: Getting the return value from the kernel and returning it.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从内核获取返回值并返回它。
- en: You find it where the kernel put it
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在内核放置的地方找到它
- en: gcc's function exit code expects it to be indexed off the frame pointer
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: gcc的函数退出代码期望它从帧指针索引
- en: from where it does into r0
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从那里进入r0
- en: '* * *'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Other Primitives
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他原语
- en: These primitives exist mostly so that we, which includes you, can ensure that
    task creation and scheduling are working when there is not much else implemented.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些原语主要存在是为了我们，也包括你，可以确保任务创建和调度在没有太多其他实现时正常工作。
- en: '`Tid MyTid( )`'
  id: totrans-84
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '`Tid MyTid( )`'
- en: Self-explanatory
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 自解释
- en: Doesn't block, but does reschedule.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不会阻塞，但会重新调度。
- en: A question, to which there is a correct answer, or more specifically, a correct
    (answer, reason) pair.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题，有一个正确答案，或更具体地说，一个正确的（答案，原因）对。
- en: Should the Tid be stored in user space?
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tid是否应存储在用户空间？
- en: '`Tid MyParentTid( )`'
  id: totrans-89
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '`Tid MyParentTid( )`'
- en: Self-explanatory
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 自解释
- en: Doesn't block, but does reschedule.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不会阻塞，但会重新调度。
- en: Where is the parent Tid, and how does the kernel find it?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 父Tid在哪里，内核如何找到它？
- en: '`void Pass( )`'
  id: totrans-93
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '`void Pass( )`'
- en: 'Doesn''t block: task calling `Pass( )` remains ready to execute.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 不会阻塞：调用`Pass( )`的任务仍然准备执行。
- en: Does reschedule.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 重新调度。
- en: When is `Pass( )` a `NOP`?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pass( )`何时是`NOP`？'
- en: '`void Exit( )`'
  id: totrans-97
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '`void Exit( )`'
- en: Calling task is removed from all queues, but its resources are not reclaimed
    or reused.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 调用任务从所有队列中移除，但其资源不会被回收或重用。
- en: That is, the task goes into a zombie state, in which it cannot be active or
    ready, but continues to own all its resources.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，任务进入僵尸状态，无法处于活动或准备就绪状态，但仍然拥有所有资源。
- en: How Should Execution Terminate?
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行应该如何终止？
- en: Nicely.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。
- en: When there are no tasks left on the ready queues, it goes back to RedBoot.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当准备队列中没有剩余任务时，它会返回到RedBoot。
- en: This behaviour changes when hardware interrupts are implemented.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当硬件中断实现时，此行为会发生变化。
- en: '* * *'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Return to:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到：
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩（Bill Cowan）在s12为CS452的讲座笔记](index.html)'
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩（Bill Cowan）2012年春季CS452页面](../index.html)'
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩（Bill Cowan）的CS452页面](../../index.html)'
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩（Bill Cowan）的教学页面](../../../index.html)'
- en: '[Bill Cowan''s home page](../../../../index.html)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩（Bill Cowan）的主页](../../../../index.html)'
