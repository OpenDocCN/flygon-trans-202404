- en: TypeScriptの特徴
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript的特点
- en: 原文：[https://typescriptbook.jp/overview/features](https://typescriptbook.jp/overview/features)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/overview/features](https://typescriptbook.jp/overview/features)
- en: TypeScriptは、Microsoftにより2012年10月1日に初めて発表された、スケーラブルなJavaScriptの上位互換言語です。スケーラブルな言語は、プロジェクトの規模や開発チームの人数が増えても、うまく機能し続けることができる言語のことで、TypeScriptはその特性から大規模プロジェクトにも適しています。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是由微软于2012年10月1日首次宣布的，可扩展的JavaScript的超集语言。可扩展的语言是指在项目规模或开发团队规模增加时仍然能够正常工作的语言，而TypeScript由于其特性而适用于大型项目。
- en: TypeScriptはJavaScriptの上位互換であり、JavaScriptに静的な型付けが追加されています。TypeScriptで書かれたコードは純粋なJavaScriptにコンパイルされ、ブラウザ、サーバーなどJavaScriptが実行できるすべての実行環境で動作します。さらに、オープンソースプロジェクトであり、Apache
    License 2.0で提供されています。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是JavaScript的超集，为JavaScript添加了静态类型。TypeScript编写的代码可以编译为纯粹的JavaScript，在浏览器、服务器等所有支持JavaScript的执行环境中运行。此外，它是一个开源项目，使用Apache
    License 2.0提供。
- en: JavaScriptの上位互換[​](#javascriptの上位互換 "JavaScriptの上位互換 への直接リンク")
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript的超集[​](#javascriptの上位互換 "直接链接到JavaScript的超集")
- en: TypeScriptはJavaScriptに型が追加され、それ以外の部分は基本的に互換性があります。これまでJavaScriptに慣れ親しんできた方であれば時間をかけずに習得できます。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript在添加类型的同时保留了与JavaScript的基本兼容性。因此，熟悉JavaScript的人可以很快学会它。
- en: トランスパイル[​](#トランスパイル "トランスパイル への直接リンク")
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译[​](#トランスパイル "直接链接到编译")
- en: 'TypeScriptコードは、さまざまなJavaScriptのバージョン（例: ES5, ES6）へトランスパイルすることができます。これにより、ブラウザや実行環境の互換性問題を回避できます。'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript代码可以转译为各种JavaScript版本（例如：ES5、ES6）。这样一来，就可以避免浏览器和执行环境的兼容性问题。
- en: 静的型付け[​](#静的型付け "静的型付け への直接リンク")
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态类型检查[​](#静的型付け "直接链接到静态类型检查")
- en: TypeScriptは[静的型付け](/overview/static-type)を持つ言語で、変数や関数の引数に型を指定することで、コードの安全性が向上し、バグが発見しやすくなります。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是一种具有[静态类型检查](/overview/static-type)的语言，通过为变量和函数参数指定类型，可以提高代码的安全性并更容易地发现错误。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 型推論[​](#型推論 "型推論 への直接リンク")
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型推断[​](#型推論 "直接链接到类型推断")
- en: TypeScriptは、型注釈がついていない変数でもコンテキストに基づいて自動的に型を推測します。これにより、開発者は型を明示しなくても安全性が向上します。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript会根据上下文自动推断未带类型注解的变量的类型。这样一来，即使开发者没有显式指定类型，代码的安全性也会得到提升。
- en: 構造的部分型システム[​](#構造的部分型システム "構造的部分型システム への直接リンク")
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构化部分类型系统[​](#構造的部分型システム "直接链接到结构化部分类型系统")
- en: TypeScriptは[構造的部分型](/reference/values-types-variables/structural-subtyping)システムを採用しており、オブジェクトの形状（つまり、オブジェクトがどのようなプロパティとメソッドを有しているか）に基づいて型を判断します。したがって、公称型ではなく、構造的部分型に基づいて動作します。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript采用[结构化部分类型](/reference/values-types-variables/structural-subtyping)系统，根据对象的形状（即对象具有哪些属性和方法）来推断类型。因此，它基于结构部分类型而不是名义类型。
- en: ジェネリクス[​](#ジェネリクス "ジェネリクス への直接リンク")
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 泛型[​](#ジェネリクス "直接链接到泛型")
- en: TypeScriptは[ジェネリクス](/reference/generics)をサポートしており、汎用的で再利用可能なコードを書くことができます。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript支持[泛型](/reference/generics)，可以编写通用且可重用的代码。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 高度な型表現[​](#高度な型表現 "高度な型表現 への直接リンク")
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级类型表示[​](#高度な型表現 "直接链接到高级类型表示")
- en: TypeScriptでは、高度な型システムを用いて複雑な型を表現できます。これにより、アプリケーションのロジックをより堅牢で表現豊かな形で開発できます。以下は、TypeScriptで利用可能な高度な型表現のいくつかの例です。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript使用高级类型系统来表示复杂的类型。这使得可以以更强大和丰富的方式开发应用程序逻辑。以下是TypeScript中可用的一些高级类型表示的示例。
- en: '**ユニオン型**: 複数の型のどれかを表すことができます。たとえば、初期値が`null`の変数を処理する場合、ユニオン型を使うことができます。'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**联合类型**：可以表示多种类型中的任何一种。例如，处理初始值为`null`的变量时，可以使用联合类型。'
- en: '[PRE4]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**タプル型**: 配列の各要素に異なる型を指定できる型です。これにより、異なる型の組み合わせを簡潔に表現できます。'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**元组类型**：可以指定数组的每个元素的不同类型。这样一来，可以简洁地表示不同类型的组合。'
- en: '[PRE6]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 複数の言語パラダイムのサポート[​](#複数の言語パラダイムのサポート "複数の言語パラダイムのサポート への直接リンク")
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持多种语言范式[​](#複数の言語パラダイムのサポート "直接链接到支持多种语言范式")
- en: TypeScriptは、オブジェクト指向プログラミング (OOP) と関数型プログラミング (FP) の両方をサポートしています。これにより、開発者は柔軟で強力なプログラムを構築することができます。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript支持面向对象编程（OOP）和函数式编程（FP）的两种范式。这使得开发者可以构建灵活且强大的程序。
- en: クラスとインターフェース[​](#クラスとインターフェース "クラスとインターフェース への直接リンク")
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类与接口[​](#クラスとインターフェース "直接链接到类与接口")
- en: TypeScriptはクラスベースのオブジェクト指向プログラミングとインターフェースをサポートします。これにより、コードの再利用や継承が容易になり、大規模なプロジェクトを管理する際に役立ちます。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript支持基于类的面向对象编程和接口。这使得代码重用和继承变得更加容易，有助于管理大型项目。
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: メモリ管理[​](#メモリ管理 "メモリ管理 への直接リンク")
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存管理[​](#メモリ管理 "直接链接到内存管理")
- en: TypeScriptは、基本的にJavaScriptと同様のメモリ管理を行います。JavaScriptエンジンがガベージコレクションを用いて、自動的にメモリを解放します。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript基本上执行与JavaScript相同的内存管理。JavaScript引擎使用垃圾收集来自动释放内存。
- en: 非同期処理[​](#非同期処理 "非同期処理 への直接リンク")
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步处理[​](#非同期処理 "直接链接到异步处理")
- en: TypeScriptは、JavaScriptと同様にイベント駆動型の非同期プログラミングをサポートしています。Promiseやasync/awaitを用いて、非同期処理を簡潔かつ効率的に実装できます。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript与JavaScript一样支持基于事件的异步编程模型。通过Promise和async/await，可以简洁高效地实现异步处理。
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: シングルスレッドモデル[​](#シングルスレッドモデル "シングルスレッドモデル への直接リンク")
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单线程模型[​](#シングルスレッドモデル "直接链接到单线程模型")
- en: TypeScript (およびJavaScript) はシングルスレッドモデルを採用しています。シングルスレッドモデルは、シンプルで分かりやすいコードを実現し、イベントループと非同期処理で効率的なタスク処理をサポートします。一方で、Web
    Workersを利用してバックグラウンドで実行されるスレッドを作成し、マルチタスクを実現することもできます。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript（以及JavaScript）采用单线程模型。单线程模型实现了简单易懂的代码，并通过事件循环和异步处理支持高效的任务处理。另一方面，还可以利用Web
    Workers创建在后台运行的线程，实现多任务处理。
- en: 強力な開発環境[​](#強力な開発環境 "強力な開発環境 への直接リンク")
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强大的开发环境[​](#強力な開発環境 "直接链接到强大的开发环境")
- en: TypeScriptは強力な開発環境を提供しています。開発者が良質な開発体験を享受できるよう、インテリセンスとリアルタイムエラー表示の機能をエディターに提供しています。これにより、自動補完や型情報が手に入るため、開発がスムーズに進み、型の誤りや不整合が早い段階で検出され、確かなコードを書きやくなっています。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript提供了强大的开发环境。开发者可以在编辑器中获得智能感知和实时错误显示功能，以享受优质的开发体验。这使得开发过程更加顺畅，可以在早期发现类型错误和不一致，编写出更可靠的代码。
- en: オープンソース[​](#オープンソース "オープンソース への直接リンク")
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源[​](#オープンソース "直接链接到开源")
- en: TypeScriptは、オープンソースで開発されており、[TypeScript GitHubリポジトリ](https://github.com/microsoft/TypeScript)でソースコードやドキュメントが公開されています。開発者は、GitHubリポジトリを介してTypeScriptプロジェクトに寄与することができます。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是一个开源项目，可以在[TypeScript GitHub存储库](https://github.com/microsoft/TypeScript)上找到其源代码和文档。开发者可以通过GitHub存储库为TypeScript项目做出贡献。
- en: まとめ[​](#まとめ "まとめ への直接リンク")
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结[​](#まとめ "直接链接到总结")
- en: これらの特徴により、TypeScriptは現代のWeb開発において非常に魅力的な選択肢となっています。静的型付けと高度な型システムを導入したことで、大規模プロジェクトや、オブジェクト指向プログラミングおよび関数型プログラミングなど、多様な開発スタイルに対応しており、堅牢で柔軟なコードが実現できます。そして、オープンソースでありながら、Microsoftの強力なバックアップがあることも魅力のひとつです。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些特点，TypeScript在现代Web开发中成为了非常有吸引力的选择。通过引入静态类型和高级类型系统，它可以适用于大型项目，面向对象编程和函数式编程等多种开发风格，实现了健壮且灵活的代码。此外，作为开源项目，又得到了微软强大的支持，这也是其魅力之一。
