- en: Implementing an EvaluatorTuesday, January 17th
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now continue to implement the semantics of our syntax — we express that through
    an `eval` function that evaluates an expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use a basic programming principle — splitting the code into two layers,
    one for parsing the input, and one for doing the evaluation. Doing this avoids
    the mess we’d get into otherwise, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is messy because it combines two very different things — syntax and semantics
    — into a single lump of code. For this particular kind of evaluator it looks simple
    enough, but this is only because it’s simple enough that all we do is replace
    constructors by arithmetic operations. Later on things will get more complex,
    and bundling the evaluator with the parser will be more problematic. (Note: the
    fact that we can replace constructors with the run-time operators mean that we
    have a very simple, calculator-like language, and that we can, in fact, “compile”
    all programs down to a number.)'
  prefs: []
  type: TYPE_NORMAL
- en: If we split the code, we can easily include decisions like making
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: syntactically invalid. (Which is not, BTW, what Racket does…) (Also, this is
    like the distinction between XML syntax and well-formed XML syntax.)
  prefs: []
  type: TYPE_NORMAL
- en: An additional advantage is that by using two separate components, it is simple
    to replace each one, making it possible to change the input syntax, and the semantics
    independently — we only need to keep the same interface data (the AST) and things
    will work fine.
  prefs: []
  type: TYPE_NORMAL
- en: Our `parse` function converts an input syntax to an abstract syntax tree (AST).
    It is abstract exactly because it is independent of any actual concrete syntax
    that you type in, print out etc.
  prefs: []
  type: TYPE_NORMAL
