["```\n(define (element-of-set? x set)\n  (cond ((null? set) #f)\n        ((equal? x (car set)) #t)\n        (else (element-of-set? x (cdr set))))) \n```", "```\n(element-of-set? (car set1) set2) \n```", "```\n(define (adjoin-set x set)\n  (if (element-of-set? x set)\n      set\n      (cons x set))) \n```", "```\n(define (intersection-set set1 set2)\n  (cond ((or (null? set1) (null? set2)) '())\n        ((element-of-set? (car set1) set2)        \n         (cons (car set1)\n               (intersection-set (cdr set1) set2)))\n        (else (intersection-set (cdr set1) set2)))) \n```", "```\n(intersection-set set1 set2) \n```", "```\n(define (element-of-set? x set)\n  (cond ((null? set) false)\n        ((= x (car set)) true)\n        ((< x (car set)) false)\n        (else (element-of-set? x (cdr set))))) \n```", "```\n(element-of-set? (car set1) set2) \n```", "```\n(define (intersection-set set1 set2)\n  (if (or (null? set1) (null? set2))\n      '()    \n      (let ((x1 (car set1)) (x2 (car set2)))\n        (cond ((= x1 x2)\n               (cons x1\n                     (intersection-set (cdr set1)\n                                       (cdr set2))))\n              ((< x1 x2)\n               (intersection-set (cdr set1) set2))\n              ((< x2 x1)\n               (intersection-set set1 (cdr set2))))))) \n```", "```\n(intersection-set set1 set2) \n```", "```\n(define (entry tree) (car tree))\n(define (left-branch tree) (cadr tree))\n(define (right-branch tree) (caddr tree))\n(define (make-tree entry left right)\n  (list entry left right)) \n```", "```\n(define (element-of-set? x set)\n  (cond ((null? set) false)\n        ((= x (entry set)) true)\n        ((< x (entry set))\n         (element-of-set? x (left-branch set)))\n        ((> x (entry set))\n         (element-of-set? x (right-branch set))))) \n```", "```\n(define (adjoin-set x set)\n  (cond ((null? set) (make-tree x '() '()))\n        ((= x (entry set)) set)\n        ((< x (entry set))\n         (make-tree (entry set) \n                    (adjoin-set x (left-branch set))\n                    (right-branch set)))\n        ((> x (entry set))\n         (make-tree (entry set)\n                    (left-branch set)\n                    (adjoin-set x (right-branch set)))))) \n```"]