- en: Basic Data Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As experienced programmers, we''ll be speeding through the basics so you can
    dive in. But a few rules before we begin:'
  prefs: []
  type: TYPE_NORMAL
- en: Python is case sensitive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indentation via Spaces or tabs are used to structure Python code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spaces and tabs are not interchangeable so pick one and stick to it (spaces
    are recommended)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if you are using sublime, under View > Indentation please check "Indentation
    Using Spaces"
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: if you ever run into errors, under View > Indentation try converting all indentation
    to spaces and double check your spacing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Parentheses can be used to clarify order of evaluation (like in math)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (1 + 2) * 3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A # will comment out anything that follows it on the same line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Math and Numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Numbers are self-evaluating (will return themselves). Numerical operations can
    be performed on numbers, variables holding numerical value, and numerical return
    values. Here is a table of most of the built in Python numerical operations. Feel
    free to input these expressions directly into the Python interpreter and examine
    the results.
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Expression | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Addition | 1 + 2 + 3 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| Subtraction | 7 - 1 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| Multiplication | 2 * 3 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| Division (Floating Point) | 5 / 2 | 2.5 |'
  prefs: []
  type: TYPE_TB
- en: '| Division (Floor) | 5 // 2 | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Modulo (remainder) | 5 % 2 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Less than | 5 < 7 | True |'
  prefs: []
  type: TYPE_TB
- en: '| Greater than | 5 > 7 | False |'
  prefs: []
  type: TYPE_TB
- en: '| Check Equals | 5 == 5 | True |'
  prefs: []
  type: TYPE_TB
- en: '| Less than or equals | 5 <= 2 | False |'
  prefs: []
  type: TYPE_TB
- en: '| Greater than or equals | 5 >= 2 | True |'
  prefs: []
  type: TYPE_TB
- en: Boolean Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Boolean values are encoded by `True` and `False`. Boolean values are again self-evaluating
    (will return themselves). The following operations return boolean values and when
    used with other data types will consider them to be true (anything that is not
    `False` is true).
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Expression | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| true | `True` | `True` |'
  prefs: []
  type: TYPE_TB
- en: '| false | `False` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| not | not `True` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| and | 1 and `True` | `True` |'
  prefs: []
  type: TYPE_TB
- en: '| or | `False` or not `True` | `False` |'
  prefs: []
  type: TYPE_TB
- en: Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Strings are another self-evaluating data type. They constructed as a sequence
    of characters between matching quotes (you can use either single or double quotes
    but you cannot mix and match them within a string).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Characters inside of the opening and closing quotes are not evaluated. So you
    can have quote characters inside of a string as long as they are not matching
    to the open and close quotes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Homework Problem 1: Naughty Strings**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What is the error message returned when you improperly use quotes inside of
    strings?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Provide an example and explain the error message.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here are some useful operations on string and/or returning strings
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Expression | Result | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Print | print(“hello”) | Prints to output | also works on numbers |'
  prefs: []
  type: TYPE_TB
- en: '| Selection | “hello”[0] | ‘h’ | is zero-indexed |'
  prefs: []
  type: TYPE_TB
- en: '| Selection | “hello”[-1] | ‘o’ | can also be negative |'
  prefs: []
  type: TYPE_TB
- en: '| Slicing | “hello”[1:3] | ‘el’ | is inclusive of the start; exclusive of the
    end |'
  prefs: []
  type: TYPE_TB
- en: '| Slicing | “hello”[1:] | ‘ello’ | end defaults to length of string; but first
    operation |'
  prefs: []
  type: TYPE_TB
- en: '| Slicing | “hello”[:-1] | ‘hell’ | start defaults to zero; but last operation
    |'
  prefs: []
  type: TYPE_TB
- en: '| Concatenation | “hello” + " world" | ‘hello world’ | cannot mix with numbers
    creates a new string! |'
  prefs: []
  type: TYPE_TB
- en: '| Convert | str(1) | ‘1’ | useful for concatenation of numbers and strings
    |'
  prefs: []
  type: TYPE_TB
- en: '| Repetition | “hello” * 3 | ‘hellohellohello’ |  |'
  prefs: []
  type: TYPE_TB
- en: '| Contains | ‘h’ in “hello” | `True` |  |'
  prefs: []
  type: TYPE_TB
- en: '| Get Length | len(“hello”) | 4 |  |'
  prefs: []
  type: TYPE_TB
- en: Lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lists and strings are similar! Strings are lists of characters, but for the
    sake of abstraction, we distinguish the two. **Don't** violate our data abstraction
    barrier when you use strings vs lists, but do use their similarities to wrap your
    head around how to approach either. (One big difference is that you can't set
    elements of a string, but you can with a list!)
  prefs: []
  type: TYPE_NORMAL
- en: Surprise, surprise... Lists are self-evaluating! Lists are declared by enumerating
    comma separated elements between square brackets. Similarly to strings, access
    list values using indices (indexing starts at 0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Line 1: Set up a list and assign it to a variable named test_list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 2: Check what the variable test_list is'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 3: [''this'', ''is'', ''a'', ''list'', 1 , 2 , 3] is returned (the list
    we created!)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 4: Get the fourth element of the list (index = 3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 5: ''list'' is returned (the fourth element)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And again, here is a compilation of list indexing and operations!
  prefs: []
  type: TYPE_NORMAL
- en: '**For the table below, assume x = ["this", "is", "a", "list"]**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Expression | Results | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Print | print([1,2,3]) | Prints to output | also works on numbers & strings
    |'
  prefs: []
  type: TYPE_TB
- en: '| Selection | x[0] | ‘this’ | is zero-indexed |'
  prefs: []
  type: TYPE_TB
- en: '| Selection | x[-1] | ‘list’ | can also be negative |'
  prefs: []
  type: TYPE_TB
- en: '| Slicing | x[1:3] | [''is'', ''a''] | is inclusive of the start; exclusive
    of the end |'
  prefs: []
  type: TYPE_TB
- en: '| Slicing | x[1:] | [''is'', ''a'', ''list''] | end defaults to length of string;
    but first operation |'
  prefs: []
  type: TYPE_TB
- en: '| Slicing | x[:-1] | [''this'', is'', ''a''] | start defaults to zero; but
    last operation |'
  prefs: []
  type: TYPE_TB
- en: '| Concatenation | [1, 2, 3] + [4, 5, 6] | [1, 2, 3, 4, 5, 6] |  |'
  prefs: []
  type: TYPE_TB
- en: '| Concatenation | >>> x = [1, 2, 3] >>> x += [4, 5, 6]'
  prefs: []
  type: TYPE_NORMAL
- en: '>>> x | [1, 2, 3, 4, 5, 6] |  |'
  prefs: []
  type: TYPE_NORMAL
- en: '| Repetition | [‘Hi!’] * 4 | [‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’] |  |'
  prefs: []
  type: TYPE_TB
- en: '| Contains | 3 in [1, 2, 3] | `True` |  |'
  prefs: []
  type: TYPE_TB
- en: '| Iteration (more on this in the control section!) | for i in [1, 2, 3]: print(i)
    | 1 2'
  prefs: []
  type: TYPE_NORMAL
- en: 3 |  |
  prefs: []
  type: TYPE_NORMAL
- en: '| Get Length | len([1, 2, 3]) | 3 |  |'
  prefs: []
  type: TYPE_TB
- en: '**Homework Problem 2: Fruits and Vegetables**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`x = ["apple", "banana", "carrot"]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write one line of code that when executed returns "apples bananas and carrots".
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
