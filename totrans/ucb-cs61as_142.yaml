- en: Basic Data Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本数据类型
- en: Basics
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础知识
- en: 'As experienced programmers, we''ll be speeding through the basics so you can
    dive in. But a few rules before we begin:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为经验丰富的程序员，我们将快速浏览基础知识，以便您可以深入了解。但在开始之前，请遵守一些规则：
- en: Python is case sensitive
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python区分大小写
- en: Indentation via Spaces or tabs are used to structure Python code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过空格或制表符缩进用于构造Python代码的结构
- en: Spaces and tabs are not interchangeable so pick one and stick to it (spaces
    are recommended)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空格和制表符不可互换，因此选择一种并坚持使用（建议使用空格）
- en: if you are using sublime, under View > Indentation please check "Indentation
    Using Spaces"
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用Sublime，请在“视图”>“缩进”下检查“使用空格缩进”
- en: if you ever run into errors, under View > Indentation try converting all indentation
    to spaces and double check your spacing
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您遇到错误，请在“视图”>“缩进”下尝试将所有缩进���换为空格，并仔细检查您的间距
- en: Parentheses can be used to clarify order of evaluation (like in math)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 括号可用于澄清评估顺序（就像数学中一样）
- en: (1 + 2) * 3
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: (1 + 2) * 3
- en: 'A # will comment out anything that follows it on the same line'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 井号（#）将注释掉同一行后面的任何内容
- en: Math and Numbers
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学和数字
- en: Numbers are self-evaluating (will return themselves). Numerical operations can
    be performed on numbers, variables holding numerical value, and numerical return
    values. Here is a table of most of the built in Python numerical operations. Feel
    free to input these expressions directly into the Python interpreter and examine
    the results.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 数字是自我评估的（将返回它们自己）。可以对数字、保存数字值的变量以及数字返回值执行数值操作。以下是大多数内置Python数值操作的表格。随时将这些表达式直接输入Python解释器并检查结果。
- en: '| Operation | Expression | Result |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 表达式 | 结果 |'
- en: '| --- | --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Addition | 1 + 2 + 3 | 6 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 加法 | 1 + 2 + 3 | 6 |'
- en: '| Subtraction | 7 - 1 | 6 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 减法 | 7 - 1 | 6 |'
- en: '| Multiplication | 2 * 3 | 6 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 乘法 | 2 * 3 | 6 |'
- en: '| Division (Floating Point) | 5 / 2 | 2.5 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 除法（浮点数） | 5 / 2 | 2.5 |'
- en: '| Division (Floor) | 5 // 2 | 2 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 除法（地板除） | 5 // 2 | 2 |'
- en: '| Modulo (remainder) | 5 % 2 | 1 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 取模（余数） | 5 % 2 | 1 |'
- en: '| Less than | 5 < 7 | True |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 小于 | 5 < 7 | True |'
- en: '| Greater than | 5 > 7 | False |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 大于 | 5 > 7 | False |'
- en: '| Check Equals | 5 == 5 | True |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 检查相等 | 5 == 5 | True |'
- en: '| Less than or equals | 5 <= 2 | False |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 小于或等于 | 5 <= 2 | False |'
- en: '| Greater than or equals | 5 >= 2 | True |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 大于或等于 | 5 >= 2 | True |'
- en: Boolean Values
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔值
- en: Boolean values are encoded by `True` and `False`. Boolean values are again self-evaluating
    (will return themselves). The following operations return boolean values and when
    used with other data types will consider them to be true (anything that is not
    `False` is true).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值由`True`和`False`编码。布尔值再次是自我评估的（将返回它们自己）。以下操作返回布尔值，当与其他数据类型一起使用时，将考虑它们为真（任何不是`False`的东西都是真）。
- en: '| Operation | Expression | Result |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 表达式 | 结果 |'
- en: '| --- | --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| true | `True` | `True` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 真 | `True` | `True` |'
- en: '| false | `False` | `False` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 假 | `False` | `False` |'
- en: '| not | not `True` | `False` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 非 | 非 `True` | `False` |'
- en: '| and | 1 and `True` | `True` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 与 | 1 and `True` | `True` |'
- en: '| or | `False` or not `True` | `False` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 或 | `False` or not `True` | `False` |'
- en: Strings
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串
- en: Strings are another self-evaluating data type. They constructed as a sequence
    of characters between matching quotes (you can use either single or double quotes
    but you cannot mix and match them within a string).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是另一种自我评估的数据类型。它们构造为在匹配引号之间的字符序列（您可以使用单引号或双引号，但不能在字符串中混合使用它们）。
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Characters inside of the opening and closing quotes are not evaluated. So you
    can have quote characters inside of a string as long as they are not matching
    to the open and close quotes
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 开头和结尾引号内的字符不会被评估。因此，只要它们不匹配开放和关闭引号，您就可以在字符串中使用引号字符
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Homework Problem 1: Naughty Strings**'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**作业问题1：淘气字符串**'
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What is the error message returned when you improperly use quotes inside of
    strings?
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当您在字符串中不正确使用引号时返回的错误消息是什么？
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Provide an example and explain the error message.
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提供一个示例并解释错误消息。
- en: Here are some useful operations on string and/or returning strings
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些对字符串进行有用操作和/或返回字符串的操作
- en: '| Operation | Expression | Result | Notes |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 表达式 | 结果 | 注释 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Print | print(“hello”) | Prints to output | also works on numbers |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 打印 | print(“hello”) | 打印到输出 | 也适用于数字 |'
- en: '| Selection | “hello”[0] | ‘h’ | is zero-indexed |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 选择 | “hello”[0] | ‘h’ | 从零开始索引 |'
- en: '| Selection | “hello”[-1] | ‘o’ | can also be negative |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 选择 | “hello”[-1] | ‘o’ | 也可以是负数 |'
- en: '| Slicing | “hello”[1:3] | ‘el’ | is inclusive of the start; exclusive of the
    end |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 切片 | “hello”[1:3] | ‘el’ | 包括开始；不包括结束 |'
- en: '| Slicing | “hello”[1:] | ‘ello’ | end defaults to length of string; but first
    operation |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 切片 | "hello"[1:] | ''ello'' | 结束默认为字符串长度；但是第一个操作 |'
- en: '| Slicing | “hello”[:-1] | ‘hell’ | start defaults to zero; but last operation
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 切片 | "hello"[:-1] | ''hell'' | 开始默认为零；但是最后一个操作 |'
- en: '| Concatenation | “hello” + " world" | ‘hello world’ | cannot mix with numbers
    creates a new string! |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 连接 | "hello" + " world" | ''hello world'' | 不能与数字混合创建新字符串！ |'
- en: '| Convert | str(1) | ‘1’ | useful for concatenation of numbers and strings
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 转换 | str(1) | ''1'' | 用于数字和字符串的连接 |'
- en: '| Repetition | “hello” * 3 | ‘hellohellohello’ |  |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 重复 | "hello" * 3 | ''hellohellohello'' |  |'
- en: '| Contains | ‘h’ in “hello” | `True` |  |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 包含 | ''h'' in "hello" | `True` |  |'
- en: '| Get Length | len(“hello”) | 4 |  |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 获取长度 | len("hello") | 4 |  |'
- en: Lists
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表
- en: Lists and strings are similar! Strings are lists of characters, but for the
    sake of abstraction, we distinguish the two. **Don't** violate our data abstraction
    barrier when you use strings vs lists, but do use their similarities to wrap your
    head around how to approach either. (One big difference is that you can't set
    elements of a string, but you can with a list!)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 列表和字符串相似！字符串是字符列表，但为了抽象化，我们区分了两者。使用字符串与列表时，请不要违反我们的数据抽象屏障，但是可以利用它们的相似之处来理解如何处理它们。
    （一个重大区别是你不能设置字符串的元素，但是可以用列表！）
- en: Surprise, surprise... Lists are self-evaluating! Lists are declared by enumerating
    comma separated elements between square brackets. Similarly to strings, access
    list values using indices (indexing starts at 0).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 惊不惊喜... 列表是自我评估的！ 列表通过在方括号之间枚举逗号分隔的元素来声明。 与字符串类似，使用索引访问列表值（索引从 0 开始）。
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Line 1: Set up a list and assign it to a variable named test_list'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 1 行：设置一个列表并将其赋给名为 test_list 的变量
- en: 'Line 2: Check what the variable test_list is'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 2 行：检查变量 test_list 是什么
- en: 'Line 3: [''this'', ''is'', ''a'', ''list'', 1 , 2 , 3] is returned (the list
    we created!)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 3 行：返回 ['this', 'is', 'a', 'list', 1 , 2 , 3]（我们创建的列表！）
- en: 'Line 4: Get the fourth element of the list (index = 3)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 4 行：获取列表的第四个元素（索引 = 3）
- en: 'Line 5: ''list'' is returned (the fourth element)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 5 行：'list' 被返回（第四个元素）
- en: And again, here is a compilation of list indexing and operations!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这里是列表索引和操作的汇编！
- en: '**For the table below, assume x = ["this", "is", "a", "list"]**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于下表，假设 x = ["this", "is", "a", "list"]**'
- en: '| Operation | Expression | Results | Notes |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 表达式 | 结果 | 注释 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Print | print([1,2,3]) | Prints to output | also works on numbers & strings
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 打印 | print([1,2,3]) | 打印到输出 | 也适用于数字和字符串 |'
- en: '| Selection | x[0] | ‘this’ | is zero-indexed |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 选择 | x[0] | ''this'' | 索引从零开始 |'
- en: '| Selection | x[-1] | ‘list’ | can also be negative |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 选择 | x[-1] | ''list'' | 也可以是负数 |'
- en: '| Slicing | x[1:3] | [''is'', ''a''] | is inclusive of the start; exclusive
    of the end |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 切片 | x[1:3] | [''is'', ''a''] | 包括开始；不包括结束 |'
- en: '| Slicing | x[1:] | [''is'', ''a'', ''list''] | end defaults to length of string;
    but first operation |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 切片 | x[1:] | [''is'', ''a'', ''list''] | 结束默认为字符串长度；但是第一个操作 |'
- en: '| Slicing | x[:-1] | [''this'', is'', ''a''] | start defaults to zero; but
    last operation |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 切片 | x[:-1] | [''this'', is'', ''a''] | 开始默认为零；但是最后一个操作 |'
- en: '| Concatenation | [1, 2, 3] + [4, 5, 6] | [1, 2, 3, 4, 5, 6] |  |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 连接 | [1, 2, 3] + [4, 5, 6] | [1, 2, 3, 4, 5, 6] |  |'
- en: '| Concatenation | >>> x = [1, 2, 3] >>> x += [4, 5, 6]'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '| 连接 | >>> x = [1, 2, 3] >>> x += [4, 5, 6]'
- en: '>>> x | [1, 2, 3, 4, 5, 6] |  |'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x | [1, 2, 3, 4, 5, 6] |  |'
- en: '| Repetition | [‘Hi!’] * 4 | [‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’] |  |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 重复 | [''Hi!''] * 4 | [''Hi!'', ''Hi!'', ''Hi!'', ''Hi!''] |  |'
- en: '| Contains | 3 in [1, 2, 3] | `True` |  |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 包含 | 3 in [1, 2, 3] | `True` |  |'
- en: '| Iteration (more on this in the control section!) | for i in [1, 2, 3]: print(i)
    | 1 2'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '| 迭代（控制部分中将更多介绍！） | for i in [1, 2, 3]: print(i) | 1 2'
- en: 3 |  |
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 3 |  |
- en: '| Get Length | len([1, 2, 3]) | 3 |  |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 获取长度 | len([1, 2, 3]) | 3 |  |'
- en: '**Homework Problem 2: Fruits and Vegetables**'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**作业问题 2：水果和蔬菜**'
- en: ''
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`x = ["apple", "banana", "carrot"]`'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`x = ["apple", "banana", "carrot"]`'
- en: ''
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write one line of code that when executed returns "apples bananas and carrots".
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 写一行代码，执行后返回 "apples bananas and carrots"。
