["```\n\n    The presentation of Hoare logic in chapter [Hoare](Hoare.html) could be\n    described as \"model-theoretic\": the proof rules for each of the\n    constructors were presented as *theorems* about the evaluation\n    behavior of programs, and proofs of program correctness (validity\n    of Hoare triples) were constructed by combining these theorems\n    directly in Coq.\n\n    Another way of presenting Hoare logic is to define a completely\n    separate proof system \u2014 a set of axioms and inference rules that\n    talk about commands, Hoare triples, etc. \u2014 and then say that a\n    proof of a Hoare triple is a valid derivation in *that* logic.  We\n    can do this by giving an inductive definition of *valid derivations* in this new logic.\n\n    This chapter is optional.  Before reading it, you'll want to read\n    the [ProofObjects](ProofObjects.html) chapter.\n\n```", "```\n\n# Definitions\n\n```", "```\n\n    We don't need to include axioms corresponding to\n    hoare_consequence_pre or hoare_consequence_post, because \n    these can be proven easily from H_Consequence.\n\n```", "```\n\n    As an example, let's construct a proof object representing a\n    derivation for the hoare triple\n\n```", "```\nExample sample_proof :\n\u00a0\u00a0hoare_proof\n\u00a0\u00a0\u00a0\u00a0(assn_sub X (APlus (AId X) (ANum 1))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(assn_sub X (APlus (AId X) (ANum 2))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(fun st \u21d2 st X = 3) ))\n\u00a0\u00a0\u00a0\u00a0(X ::= APlus (AId X) (ANum 1);; (X ::= APlus (AId X) (ANum 2)))\n\u00a0\u00a0\u00a0\u00a0(fun st \u21d2 st X = 3).\nProof.\n\u00a0\u00a0eapply H_Seq; apply H_Asgn.\nQed.\n\n(* Print\u00a0sample_proof. ====> \u00a0\u00a0H_Seq \u00a0\u00a0\u00a0\u00a0(assn_sub\u00a0X\u00a0(APlus\u00a0(AId\u00a0X)\u00a0(ANum\u00a01)) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(assn_sub\u00a0X\u00a0(APlus\u00a0(AId\u00a0X)\u00a0(ANum\u00a02)) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(fun\u00a0st\u00a0:\u00a0state\u00a0=>\u00a0st\u00a0X\u00a0=\u00a0VNat\u00a03))) \u00a0\u00a0\u00a0\u00a0(X\u00a0::=\u00a0APlus\u00a0(AId\u00a0X)\u00a0(ANum\u00a01)) \u00a0\u00a0\u00a0\u00a0(assn_sub\u00a0X\u00a0(APlus\u00a0(AId\u00a0X)\u00a0(ANum\u00a02))\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(fun\u00a0st\u00a0:\u00a0state\u00a0=>\u00a0st\u00a0X\u00a0=\u00a0VNat\u00a03)) \u00a0\u00a0\u00a0\u00a0(X\u00a0::=\u00a0APlus\u00a0(AId\u00a0X)\u00a0(ANum\u00a02))\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(fun\u00a0st\u00a0:\u00a0state\u00a0=>\u00a0st\u00a0X\u00a0=\u00a0VNat\u00a03) \u00a0\u00a0\u00a0\u00a0(H_Asgn \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(assn_sub\u00a0X\u00a0(APlus\u00a0(AId\u00a0X)\u00a0(ANum\u00a02))\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(fun\u00a0st\u00a0:\u00a0state\u00a0=>\u00a0st\u00a0X\u00a0=\u00a0VNat\u00a03)) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X\u00a0(APlus\u00a0(AId\u00a0X)\u00a0(ANum\u00a01))) \u00a0\u00a0\u00a0\u00a0(H_Asgn\u00a0(fun\u00a0st\u00a0:\u00a0state\u00a0=>\u00a0st\u00a0X\u00a0=\u00a0VNat\u00a03)\u00a0X\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(APlus\u00a0(AId\u00a0X)\u00a0(ANum\u00a02))) *)\n\n```", "```\nTheorem hoare_proof_sound : \u2200P c Q,\n\u00a0\u00a0hoare_proof P c Q \u2192 {{P}} c {{Q}}.\nProof.\n\u00a0\u00a0(*\u00a0FILL\u00a0IN\u00a0HERE\u00a0*) Admitted.\n\n```", "```\nTheorem H_Post_True_deriv:\n\u00a0\u00a0\u2200c P, hoare_proof P c (fun _ \u21d2 True).\nProof.\n\u00a0\u00a0intro c.\n\u00a0\u00a0induction c; intro P.\n\u00a0\u00a0- (*\u00a0SKIP\u00a0*)\n\u00a0\u00a0\u00a0\u00a0eapply H_Consequence.\n\u00a0\u00a0\u00a0\u00a0apply H_Skip.\n\u00a0\u00a0\u00a0\u00a0intros. apply H.\n\u00a0\u00a0\u00a0\u00a0(*\u00a0Proof\u00a0of\u00a0True\u00a0*)\n\u00a0\u00a0\u00a0\u00a0intros. apply I.\n\u00a0\u00a0- (*\u00a0::=\u00a0*)\n\u00a0\u00a0\u00a0\u00a0eapply H_Consequence_pre.\n\u00a0\u00a0\u00a0\u00a0apply H_Asgn.\n\u00a0\u00a0\u00a0\u00a0intros. apply I.\n\u00a0\u00a0- (*\u00a0;;\u00a0*)\n\u00a0\u00a0\u00a0\u00a0eapply H_Consequence_pre.\n\u00a0\u00a0\u00a0\u00a0eapply H_Seq.\n\u00a0\u00a0\u00a0\u00a0apply (IHc1 (fun _ \u21d2 True)).\n\u00a0\u00a0\u00a0\u00a0apply IHc2.\n\u00a0\u00a0\u00a0\u00a0intros. apply I.\n\u00a0\u00a0- (*\u00a0IFB\u00a0*)\n\u00a0\u00a0\u00a0\u00a0apply H_Consequence_pre with (fun _ \u21d2 True).\n\u00a0\u00a0\u00a0\u00a0apply H_If.\n\u00a0\u00a0\u00a0\u00a0apply IHc1.\n\u00a0\u00a0\u00a0\u00a0apply IHc2.\n\u00a0\u00a0\u00a0\u00a0intros. apply I.\n\u00a0\u00a0- (*\u00a0WHILE\u00a0*)\n\u00a0\u00a0\u00a0\u00a0eapply H_Consequence.\n\u00a0\u00a0\u00a0\u00a0eapply H_While.\n\u00a0\u00a0\u00a0\u00a0eapply IHc.\n\u00a0\u00a0\u00a0\u00a0intros; apply I.\n\u00a0\u00a0\u00a0\u00a0intros; apply I.\nQed.\n\n```", "```\nLemma False_and_P_imp: \u2200P Q,\n\u00a0\u00a0False \u2227 P \u2192 Q.\nProof.\n\u00a0\u00a0intros P Q [CONTRA HP].\n\u00a0\u00a0destruct CONTRA.\nQed.\n\nTactic Notation \"pre_false_helper\" constr(CONSTR) :=\n\u00a0\u00a0eapply H_Consequence_pre;\n\u00a0\u00a0\u00a0\u00a0[eapply CONSTR | intros ? CONTRA; destruct CONTRA].\n\nTheorem H_Pre_False_deriv:\n\u00a0\u00a0\u2200c Q, hoare_proof (fun _ \u21d2 False) c Q.\nProof.\n\u00a0\u00a0intros c.\n\u00a0\u00a0induction c; intro Q.\n\u00a0\u00a0- (*\u00a0SKIP\u00a0*) pre_false_helper H_Skip.\n\u00a0\u00a0- (*\u00a0::=\u00a0*) pre_false_helper H_Asgn.\n\u00a0\u00a0- (*\u00a0;;\u00a0*) pre_false_helper H_Seq. apply IHc1. apply IHc2.\n\u00a0\u00a0- (*\u00a0IFB\u00a0*)\n\u00a0\u00a0\u00a0\u00a0apply H_If; eapply H_Consequence_pre.\n\u00a0\u00a0\u00a0\u00a0apply IHc1. intro. eapply False_and_P_imp.\n\u00a0\u00a0\u00a0\u00a0apply IHc2. intro. eapply False_and_P_imp.\n\u00a0\u00a0- (*\u00a0WHILE\u00a0*)\n\u00a0\u00a0\u00a0\u00a0eapply H_Consequence_post.\n\u00a0\u00a0\u00a0\u00a0eapply H_While.\n\u00a0\u00a0\u00a0\u00a0eapply H_Consequence_pre.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0apply IHc.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0intro. eapply False_and_P_imp.\n\u00a0\u00a0\u00a0\u00a0intro. simpl. eapply False_and_P_imp.\nQed.\n\n```", "```\nDefinition wp (c:com) (Q:Assertion) : Assertion :=\n\u00a0\u00a0fun s \u21d2 \u2200s', c / s \u21d3 s' \u2192 Q s'.\n\n```", "```\nLemma wp_is_precondition: \u2200c Q,\n\u00a0\u00a0{{wp c Q}} c {{Q}}.\n(*\u00a0FILL\u00a0IN\u00a0HERE\u00a0*) Admitted.\n\n```", "```\nLemma wp_is_weakest: \u2200c Q P',\n\u00a0\u00a0\u00a0{{P'}} c {{Q}} \u2192 \u2200st, P' st \u2192 wp c Q st.\n(*\u00a0FILL\u00a0IN\u00a0HERE\u00a0*) Admitted.\n\n```", "```\nLemma bassn_eval_false : \u2200b st, \u00ac bassn b st \u2192 beval st b = false.\nProof.\n\u00a0\u00a0intros b st H. unfold bassn in H. destruct (beval st b).\n\u00a0\u00a0\u00a0\u00a0exfalso. apply H. reflexivity.\n\u00a0\u00a0\u00a0\u00a0reflexivity.\nQed.\n\n```", "```\nTheorem hoare_proof_complete: \u2200P c Q,\n\u00a0\u00a0{{P}} c {{Q}} \u2192 hoare_proof P c Q.\nProof.\n\u00a0\u00a0intros P c. generalize dependent P.\n\u00a0\u00a0induction c; intros P Q HT.\n\u00a0\u00a0- (*\u00a0SKIP\u00a0*)\n\u00a0\u00a0\u00a0\u00a0eapply H_Consequence.\n\u00a0\u00a0\u00a0\u00a0\u00a0eapply H_Skip.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0intros. eassumption.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0intro st. apply HT. apply E_Skip.\n\u00a0\u00a0- (*\u00a0::=\u00a0*)\n\u00a0\u00a0\u00a0\u00a0eapply H_Consequence.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eapply H_Asgn.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0intro st. apply HT. econstructor. reflexivity.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0intros; assumption.\n\u00a0\u00a0- (*\u00a0;;\u00a0*)\n\u00a0\u00a0\u00a0\u00a0apply H_Seq with (wp c[2] Q).\n\u00a0\u00a0\u00a0\u00a0\u00a0eapply IHc1.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0intros st st' E[1] H. unfold wp. intros st'' E[2].\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eapply HT. econstructor; eassumption. assumption.\n\u00a0\u00a0\u00a0\u00a0\u00a0eapply IHc2. intros st st' E[1] H. apply H; assumption.\n\u00a0\u00a0(*\u00a0FILL\u00a0IN\u00a0HERE\u00a0*) Admitted.\n\n```", "```\n\n```"]