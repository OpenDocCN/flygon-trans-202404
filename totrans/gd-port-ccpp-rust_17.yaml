- en: 'Rust''s std:: library'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rust's standard library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The core functionality in Rust is provided by a module called `std`. This is
    the standard runtime library.
  prefs: []
  type: TYPE_NORMAL
- en: As with its C++ namesake, everything can be referenced through a `std::` namespace
    prefix or via a `use std::{foo}` import.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of std is implicitly available by a special [`std::prelude`](https://doc.rust-lang.org/beta/std/prelude/)
    that is automatically used (along with a reference to the std crate) without declaration.
    The prelude contains functionality that virtually all code is likely to use and
    therefore Rust spares code from having to import it:'
  prefs: []
  type: TYPE_NORMAL
- en: String and ToString trait
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterators traits of various kinds - Iterator, Exten, IntoIterator etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Result<> and Option<> enums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversion traits AsRef, AsMut, Into, From
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vec heap allocated vector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other traits such as Drop, Fn, FnMut, FnOnce, Box, Clone, Copy, Send, Sized,
    Sync, PartialEq, PartialOrd etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Macros such as println!, format!, assert! etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'There are various sub-modules under std that concern themselves with aspects
    of development. Here are just some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: clone – the Clone trait
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: cmp – Eq, Ord, PartialEq, PartialOrd traits. These traits are used for equality
    and ordering functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: collections - contains the standard collection types for sequences, maps, sets,
    and miscellaneous. e.g. Vec and HashMap are members of this module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: env – environmental helpers - command line arguments, status codes, environment
    variables, temporary folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: fmt – utilities for formatting and printing strings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: fs - filesystem manipulation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: io – Read and Write traits that are implemented by streams / buffers in file
    system and networking, stdio functionality
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: mem – memory primitives
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: net – networking
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: path – path manipulation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: process – spawn, fork, exec etc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C / C++ lib to Rust lib cross reference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TODO
  prefs: []
  type: TYPE_NORMAL
- en: Note that Rust's std namespace contains a lot of stuff not in the standard C
    or C++ libraries and a lot of things are not directly analogous. For example the
    standard C / C++ library have very little to say about sockets, or path manipulation,
    or atomically incrementing numbers, or creating threads.
  prefs: []
  type: TYPE_NORMAL
- en: '| C | C++ | Rust |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| T [S], e.g. char foo[20] | std::array (C++11) | [T; S], e.g. let foo: [u8;
    20] = [0; 20] |'
  prefs: []
  type: TYPE_TB
- en: '| char * or char[] with functions such as strcmp, strcpy, strstr, strdup etc.
    Plus wide equivalents to these. | std::string, std::wstring, std::u16string (C++11),
    std::u32string (C++11) | &str or String as appropriate |'
  prefs: []
  type: TYPE_TB
- en: '| - | std::vector | std::vec::Vec or std::collections::VecDeque |'
  prefs: []
  type: TYPE_TB
- en: '| - | std::list | std::collections::LinkedList |'
  prefs: []
  type: TYPE_TB
- en: '| - | std::set | std::collections::HashSet, std::collections::BTreeSet |'
  prefs: []
  type: TYPE_TB
- en: '| - | std::map | std::collections::HashMap, std::collections::BTreeMap |'
  prefs: []
  type: TYPE_TB
- en: '| fopen, fclose, fread / fwrite, fseek etc. | std::ofstream, std::ifstream,
    std::fstream | TODO |'
  prefs: []
  type: TYPE_TB
- en: '| Math functions such as cos, sin, tan, acos, asin, atan, pow, abs, log, log10,
    floor, ceil are defined in<math.h class="hljs-meta"></math.h> | - | Math functions
    are direction accessible from f64\. f32 types., e.g. 1.0f64.cos(). |'
  prefs: []
  type: TYPE_TB
- en: Note that because due to the decimal point being used on a float, you have to
    prefix f32 or f64 to literals when you call them so the compiler can figure out
    what you're doing.
  prefs: []
  type: TYPE_NORMAL
- en: Standard Traits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some traits are system defined and in some cases can be derived automatically.
  prefs: []
  type: TYPE_NORMAL
- en: In others they cause the compiler to generate additional code for you such as
    the Drop trait (described in class destructor section)
  prefs: []
  type: TYPE_NORMAL
- en: Drop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Drop trait allows you do something when an object is dropped, such as add
    additional logging or whatever.
  prefs: []
  type: TYPE_NORMAL
- en: Copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A struct implementing a Copy trait can be copied through assignment, i.e. if
    you assign a to b then a and b now how copies of the object, independent of each
    other. The Copy trait really only useful when you have small amounts of data that
    represent a type or value of some kind. TODO copy example, e.g. struct PlayingCard
    { suit: Suit, rank: Rank } If you find yourself with a type that is larger, or
    contains heap allocated memory then you should use clone.'
  prefs: []
  type: TYPE_NORMAL
- en: Clone
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A struct implementing the Clone trait has a .clone() method. Unlike Copy you
    must explicitly .clone() the instance to create another. TODO clone example
  prefs: []
  type: TYPE_NORMAL
- en: Eq, PartialEq
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TODO equality
  prefs: []
  type: TYPE_NORMAL
- en: Ord, PartialOrd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TODO ordering
  prefs: []
  type: TYPE_NORMAL
