["```\n$ ktc\nWelcome to Kotlin version 1.0.1-2 (JRE 1.7.0_95-b00)\nType :help for help, :quit for quit\n>>> :load triangle.kts\n>>> triangle(3)\n*\n**\n***\n>>> triangle(5)\n*\n**\n***\n****\n*****\n\n```", "```\n5 16 8 4 2 1\n34 17 52 26 13 40 20 10 5 16 8 4 2 1\n7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1\n672 336 168 84 42 21 64 32 16 8 4 2 1\n\n```", "```\nfun next(n: Int): Int = \n  if (n % 2 == 0)\n    n / 2\n  else\n    3 * n + 1\n\n```", "```\n$ ktc\nWelcome to Kotlin version 1.0.1-2 (JRE 1.7.0_95-b00)\nType :help for help, :quit for quit\n>>> :load collatz.kts\n>>> next(1)\n4\n>>> next(4)\n2\n>>> next(2)\n1\n>>> next(5)\n16\n>>> next(16)\n8\n>>> next(52)\n26\n>>> next(123417432)\n61708716\n>>> next(123417431)\n370252294\n\n```", "```\nfun collatz(n0: Int) {\n  var n = n0\n  while (n != 1) {\n    print(n)\n    print(\" \")\n    n = next(n)\n  }\n}\n\n```", "```\n>>> :load collatz.kts\n>>> collatz(5)\n5 16 8 4 2\n\n```", "```\nfun collatz(n0: Int) {\n  var n = n0\n  while (n != 1) {\n    print(n)\n    print(\" \")\n    n = next(n)\n  }\n  println(1)\n}\n\n```", "```\n>>> :load collatz.kts\n>>> collatz(5)\n5 16 8 4 2 1\n>>> collatz(16)\n16 8 4 2 1\n>>> collatz(17)\n17 52 26 13 40 20 10 5 16 8 4 2 1\n>>> collatz(27)\n27 82 41 124 62 31 94 47 142 71 214 107 322 161 484 242 121 364 182 91\n274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186\n593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425\n1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644\n1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732\n866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160\n80 40 20 10 5 16 8 4 2 1\n\n```", "```\nfun collatzCount(n0: Int): Int {\n  var n = n0\n  var count = 0\n  while (n != 1) {\n    n = next(n)\n    count += 1\n  }\n  return count\n}\n\n```", "```\n>>> :load collatz.kts\n>>> collatz(5)\n5 16 8 4 2 1\n>>> collatzCount(5)\n5\n>>> collatz(16); collatzCount(16)\n16 8 4 2 1\n4\n\n```", "```\nfun findMax(n: Int) {\n  var maxCount = 0\n  var maxStart = 1\n  for (i in 2 .. n) {\n    val count = collatzCount(i)\n    if (count > maxCount) {\n      maxCount = count\n      maxStart = i\n    }\n  }\n  println(\"Starting at $maxStart needs $maxCount steps.\")\n}\n\n```", "```\n>>> :load collatz3.kts\n>>> findMax(100)\nStarting at 97 needs 118 steps.\n>>> findMax(500)\nStarting at 327 needs 143 steps.\n>>> findMax(1000)\nStarting at 871 needs 178 steps.\n>>> findMax(2000)\nStarting at 1161 needs 181 steps.\n>>> findMax(4000)\nStarting at 3711 needs 237 steps.\n>>> findMax(10000)\nStarting at 6171 needs 261 steps.\n>>> findMax(20000)\nStarting at 17647 needs 278 steps.\n>>> findMax(40000)\nStarting at 35655 needs 323 steps.\n>>> findMax(80000)\nStarting at 77031 needs 350 steps.\n\n```"]