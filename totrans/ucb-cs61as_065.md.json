["```\n(define (sum-odd-squares tree)\n  (cond ((null? tree) 0)  \n        ((not (pair? tree))\n         (if (odd? tree) (square tree) 0))\n        (else (+ (sum-odd-squares (car tree))\n                 (sum-odd-squares (cdr tree)))))) \n```", "```\n(define (even-fibs n)\n  (define (next k)\n    (if (> k n)\n        nil\n        (let ((f (fib k)))\n          (if (even? f)\n              (cons f (next (+ k 1)))\n              (next (+ k 1))))))\n  (next 0)) \n```", "```\n(define (filter predicate sequence)\n  (cond ((null? sequence) nil)\n        ((predicate (car sequence))\n         (cons (car sequence)\n               (filter predicate (cdr sequence))))\n        (else (filter predicate (cdr sequence))))) \n```", "```\n(filter (lambda (x) (= (remainder x 2) 0)) (list 0 1 2 3 4 5)) \n```", "```\n(filter equal? '(bongo celia momo laval laburrita bongo)) \n```", "```\n> (accumulate + 0 '(1 2 3 4 5))\n15\n> (accumulate append null '((1 2) (3 4) (5 6)))\n(1 2 3 4 5 6) \n```", "```\n(define (accumulate op initial sequence)\n  (if (null? sequence)\n      initial\n      (op (car sequence)\n          (accumulate op initial (cdr sequence))))) \n```", "```\n(define (enumerate-interval low high)\n  (if (> low high)\n      nil\n      (cons low (enumerate-interval (+ low 1) high)))) \n```", "```\n(define (enumerate-tree tree)\n  (cond ((null? tree) nil)\n        ((not (pair? tree)) (list tree))\n        (else (append (enumerate-tree (car tree))\n                      (enumerate-tree (cdr tree)))))) \n```", "```\n(define (sum-odd-squares tree)\n  (accumulate +\n              0\n              (map square\n                   (filter odd?\n                           (enumerate-tree tree))))) \n```", "```\n(define (even-fibs n)\n  (accumulate cons\n              nil\n              (filter even?\n                      (map fib\n                           (enumerate-interval 0 n))))) \n```"]