- en: Command line basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行基础知识
- en: Command line basics
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行基础知识
- en: curl started out as a command-line tool and it has been invoked from shell prompts
    and from within scripts by thousands of users over the years. curl has established
    itself as one of those trusty tools that is there for you to help you get your
    work done.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: curl 最初是作为一个命令行工具启动的，多年来已经被成千上万的用户从 shell 提示符和脚本中调用。curl 已经确立了自己作为一种可靠工具的地位，它会在那里帮助你完成工作。
- en: Binaries and different platforms
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二进制文件和不同的平台
- en: The command-line tool "curl" is a binary executable file. The curl project does
    not by itself distribute or provide binaries. Binary files are highly system specific
    and oftentimes also bound to specific system versions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行工具 "curl" 是一个二进制可执行文件。curl 项目本身不会分发或提供二进制文件。二进制文件高度特定于系统，并且通常也与特定的系统版本绑定在一起。
- en: To get a curl for your platform and your system, you need to get a curl executable
    from somewhere. Many people build their own from the source code provided by the
    curl project, lots of people install it using a package tool for their operating
    system and yet another portion of users download binary install packages from
    sources they trust.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得适用于你的平台和系统的 curl，你需要从某个地方获取一个 curl 可执行文件。许多人通过使用 curl 项目提供的源代码构建自己的版本，许多人使用操作系统的包工具安装它，还有一部分用户从他们信任的源下载二进制安装包。
- en: No matter how you do it, make sure you are getting your version from a trusted
    source and that you verify digital signatures or the authenticity of the packages
    in other ways.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你如何做，请确保从可信任的源获取你的版本，并验证数字签名或包的其他验证方式的真实性。
- en: Also, remember that curl is often built to use third-party libraries to perform
    and unless curl is built to use them statically you must also have those third-party
    libraries installed; the exact set of libraries will vary depending on the particular
    build you get.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请记住，curl 通常是构建为使用第三方库执行任务的，除非 curl 被构建为静态使用这些库，否则你必须也安装这些第三方库；精确的库集合将取决于你所获得的特定构建版本。
- en: Command lines, quotes and aliases
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令行、引号和别名
- en: There are many different command lines, shells and prompts in which curl can
    be used. They all come with their own sets of limitations, rules and guidelines
    to follow. The curl tool is designed to work with any of them without causing
    troubles but there may be times when your specific command line system doesn't
    match what others use or what is otherwise documented.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的命令行、shell 和提示符可以使用 curl。它们都有自己的限制、规则和指南要遵循。curl 工具被设计为能够在任何情况下都能正常工作，但在某些情况下，你的特定命令行系统可能与其他人使用的或者其他文档记录的不匹配。
- en: One way that command-line systems differ, for example, is how you can put quotes
    around arguments such as to embed spaces or special symbols. In most Unix-like
    shells you use double quotes (") and single quotes (') depending if you want to
    allow variable expansions or not within the quoted string, but on Windows there's
    no support for the single quote version.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行系统之间的一个差异，例如，是如何在参数周围放置引号，以嵌入空格或特殊符号。在大多数类 Unix 的 shell 中，你可以使用双引号 (") 和单引号
    (')，具体取决于你是否想在引号字符串中允许变量扩展，但在 Windows 上，没有对单引号版本的支持。
- en: 'In some environments, like PowerShell on Windows, the authors of the command
    line system decided they know better and "help" the user to use another tool instead
    of curl when `curl` is typed, by providing an alias that takes precedence when
    a command line is executed. In order to use curl properly with PowerShell, you
    need to type in its full name including the extension: "curl.exe".'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些环境中，比如在 Windows 上的 PowerShell 中，命令行系统的作者决定他们更清楚，并在用户输入 `curl` 时“帮助”用户使用另一个工具，提供一个在执行命令行时优先的别名。为了在
    PowerShell 中正确使用 curl，你需要输入其完整的名称，包括扩展名：“curl.exe”。
- en: Different command-line environments will also have different maximum command
    line lengths and force the users to limit how large amount of data that can be
    put into a single line. curl adapts to this by offering a way to provide command-line
    options through a file—or from stdin—using the -K option.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的命令行环境也会有不同的最大命令行长度，并强制用户限制可以放入单行的数据量。curl 通过提供一种通过文件或从 stdin 提供命令行选项的方法来适应这一点，使用
    -K 选项。
- en: Garbage in, garbage out
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 垃圾进，垃圾出
- en: curl has very little will of its own. It tries to please you and your wishes
    to a very large extent. It also means that it will try to play with what you give
    it. If you misspell an option, it might do something unintended. If you pass in
    a slightly illegal URL, chances are curl will still deal with it and proceed.
    It means that you can pass in crazy data in some options and you can have curl
    pass on that crazy data in its transfer operation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: curl 几乎没有自己的意志。它试图在很大程度上满足您和您的愿望。这也意味着它会尝试使用您给定的内容。如果您拼写错误一个选项，它可能会执行意想不到的操作。如果您传入一个略微不合法的
    URL，curl 仍然可能会处理它并继续进行。这意味着您可以在某些选项中传入疯狂的数据，而且您可以让 curl 在其传输操作中传递这些疯狂的数据。
- en: This is a design choice, as it allows you to really tweak how curl does its
    protocol communications and you can have curl massage your server implementations
    in the most creative ways.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个设计选择，因为它允许您真正调整 curl 如何进行协议通信，您可以让 curl 以最有创意的方式对服务器实现进行处理。
- en: Command line options
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行选项
- en: Command line options
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令行选项
- en: When telling curl to do something, you invoke curl with zero, one or several
    command-line options to accompany the URL or set of URLs you want the transfer
    to be about. curl supports over two hundred different options.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当告诉 curl 要做某事时，您会在 URL 或一组 URL 之后调用 curl，并附带零个、一个或多个命令行选项，这些选项指定了您希望进行的传输。curl
    支持超过两百种不同的选项。
- en: Short options
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 短选项
- en: 'Command line options pass on information to curl about how you want it to behave.
    Like you can ask curl to switch on verbose mode with the -v option:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行选项向 curl 传递有关您希望其行为的信息。比如，您可以使用 `-v` 选项要求 curl 启用详细模式：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '-v is here used as a "short option". You write those with the minus symbol
    and a single letter immediately following it. Many options are just switches that
    switches something on or changes something between two known states. They can
    be used with just that option name. You can then also combine several single-letter
    options after the minus. To ask for both verbose mode and that curl follows HTTP
    redirects:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`-v` 在这里被用作“短选项”。你用减号符号和紧跟其后的一个单个字母编写这些选项。许多选项只是开关，用于开启某项功能或在两种已知状态之间切换。它们可以仅使用该选项名称。然后你也可以在减号后组合几个单个字母选项。要求同时启用详细模式和
    curl 遵循 HTTP 重定向：'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The command-line parser in curl always parses the entire line and you can put
    the options anywhere you like; they can also appear after the URL:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: curl 中的命令行解析器始终解析整行，并且您可以在任何位置放置选项；它们也可以出现在 URL 之后：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Long options
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 长选项
- en: Single-letter options are convenient since they are quick to write and use,
    but as there are only a limited number of letters in the alphabet and there are
    many things to control, not all options are available like that. Long option names
    are therefore provided for those. Also, as a convenience and to allow scripts
    to become more readable, most short options have longer name aliases.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 单个字母选项很方便，因为它们写起来快速且使用方便，但是由于字母表中只有有限的字母数，并且有许多要控制的东西，因此并非所有选项都像那样可用。因此，为这些选项提供了长选项名称。另外，为了方便起见并使脚本更易读，大多数短选项都有更长的名称别名。
- en: 'Long options are always written with *two* minuses (or *dashes*, whichever
    you prefer to call them) and then the name and you can only write one option name
    per double-minus. Asking for verbose mode using the long option format looks like:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 长选项总是用 *两个* 减号（或 *破折号*，你喜欢怎么称呼它们）写的，然后是名称，您每个双减号只能写一个选项名称。使用长选项格式请求详细模式看起来像：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and asking for HTTP redirects as well using the long format looks like:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 并且使用长格式请求 HTTP 重定向看起来像：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Arguments to options
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项参数
- en: 'Not all options are just simple boolean flags that enable or disable features.
    For some of them you need to pass on data, like perhaps a user name or a path
    to a file. You do this by writing first the option and then the argument, separated
    with a space. Like, for example, if you want to send an arbitrary string of data
    in an HTTP POST to a server:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是所有的选项都只是简单的布尔标志，用于启用或禁用功能。对于其中一些选项，您需要传递数据，例如用户名或文件路径。您可以通过先写选项然后写参数，用空格分隔开来来执行此操作。比如，如果您想要在
    HTTP POST 请求中向服务器发送任意数据字符串：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'and it works the same way even if you use the long form of the option:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您使用选项的长形式，它的工作方式也是相同的：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you use the short options with arguments, you can, in fact, also write
    the data without the space separator:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用带有参数的短选项时，实际上您也可以不使用空格分隔符写入数据：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Arguments with spaces
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有空格的参数
- en: 'At times you want to pass on an argument to an option, and that argument contains
    one or more spaces. For example you want to set the user-agent field curl uses
    to be exactly `I am your father`, including those three spaces. Then you need
    to put quotes around the string when you pass it to curl on the command line.
    The exact quotes to use varies depending on your shell/command prompt, but generally
    it will work with double quotes in most places:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您想要将参数传递给选项，而该参数包含一个或多个空格。例如，您想要将 curl 使用的用户代理字段设置为`I am your father`，包括这三个空格。那么当您将其传递给
    curl 命令行时，您需要在字符串周围加上引号。要使用的确切引号取决于您的 shell/命令提示符，但通常在大多数地方使用双引号都可以：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Failing to use quotes, like if you would write the command line like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未使用引号，例如如果您将命令行编写为：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: … will make curl only use 'I' as a user-agent string, and the following strings,
    'am', your, etc will instead all be treated as separate URLs since they don't
    start with `-` to indicate that they're options and curl only ever handles options
    and URLs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: …将使 curl 仅使用 'I' 作为用户代理字符串，而以下字符串，'am'、your 等，将被视为单独的 URLs，因为它们没有以 `-` 开头以指示它们是选项，并且
    curl 只处理选项和 URLs。
- en: 'To make the string itself contain double quotes, which is common when you for
    example want to send a string of JSON to the server, you may need to use single
    quotes (except on Windows, where single quotes doesn''t work the same way). Send
    the JSON string `{ "name": "Darth" }`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '要使字符串本身包含双引号，这在您例如想要将 JSON 字符串发送到服务器时很常见，您可能需要使用单引号（在 Windows 上除外，单引号的工作方式不同）。发送
    JSON 字符串`{ "name": "Darth" }`：'
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Or if you want to avoid the single quote thing, you may prefer to send the
    data to curl via a file, which then doesn''t need the extra quoting. Assuming
    we call the file ''json'' that contains the above mentioned data:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您想要避免单引号的问题，您可能更喜欢通过文件将数据发送到 curl，这样就不需要额外的引号了。假设我们将包含上述数据的文件称为'json'：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Negative options
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 负选项
- en: 'For options that switch on something, there is also a way to switch it off.
    You then use the long form of the option with an initial "no-" prefix before the
    name. As an example, to switch off verbose mode:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开启某些功能的选项，还有一种关闭它的方法。然后您使用选项的长格式，在名称前加上 "no-" 前缀。例如，要关闭详细模式：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Options depend on version
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项取决于版本
- en: Options depend on version
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项取决于版本
- en: '`curl` was first typed on a command line back in the glorious year of 1998\.
    It already then worked on the specified URL and none, one or more command-line
    options given to it.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl` 是在 1998 年这个辉煌的年份首次在命令行上键入的。当时它已经在指定的 URL 上工作，并且没有给它传递任何、一个或多个命令行选项。'
- en: Since then we have added more options. We add options as we go along and almost
    every new release of curl has one or a few new options that allow users to modify
    certain aspects of its operation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从那时起，我们添加了更多选项。我们在进行操作时添加选项，并且几乎每个新版本的 curl 都有一个或几个新选项，允许用户修改其操作的某些方面。
- en: With the curl project's rather speedy release chain with a new release shipping
    every eight weeks, it is almost inevitable that you are at least not always using
    the very latest released version of curl. Sometimes you may even use a curl version
    that is a few years old.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 curl 项目的发布周期相当迅速，每八周发布一个新版本，几乎不可避免地您至少不总是使用最新发布的 curl 版本。有时甚至您可能使用几年前的 curl
    版本。
- en: All command-line options described in this book were, of course, added to curl
    at some point in time, and only a very small portion of them were available that
    fine spring day in 1998 when curl first shipped. You may have reason to check
    your version of curl and crosscheck with the curl man page for when certain options
    were added. This is especially important if you want to take a curl command line
    using a modern curl version back to an older system that might be running an older
    installation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本书描述的所有命令行选项当然都是在某个时间点添加到 curl 中的，只有很小一部分在 curl 首次发布时的 1998 年那个美好的春天是可用的。如果您想要将使用现代
    curl 版本的 curl 命令行带回运行较旧的系统，这一点尤为重要，因为可能运行的是较旧的安装。
- en: The developers of curl are working hard to not change existing behavior though.
    Command lines written to use curl in 1998, 2003 or 2010 should all be possible
    to run unmodified even today.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl` 的开发人员正在努力保持现有行为不变。编写于 1998 年、2003 年或 2010 年的使用 curl 的命令行应该都可以在今天运行而不需要修改。'
- en: URLs
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URLs
- en: URLs
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URLs
- en: curl is called curl because a substring in its name is URL (Uniform Resource
    Locator). It operates on URLs. URL is the name we casually use for the web address
    strings, like the ones we usually see prefixed with http:// or starting with www.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: curl之所以被称为curl，是因为其名称中包含URL（统一资源定位符）的子字符串。它操作的是URL。URL是我们通常用于Web地址字符串的名称，比如我们通常看到的以http://为前缀或以www开头的字符串。
- en: URL is, strictly speaking, the former name for these. URI (Uniform Resource
    Identifier) is the more modern and correct name for them. Their syntax is defined
    in [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，URL是这些的旧名称。URI（统一资源标识符）是更现代和正确的名称。它们的语法在[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)中定义。
- en: Where curl accepts a "URL" as input, it is then really a "URI". Most of the
    protocols curl understands also have a corresponding URI syntax document that
    describes how that particular URI format works.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当curl接受“URL”作为输入时，实际上是一个“URI”。curl理解的大多数协议也有相应的URI语法文档，描述了特定URI格式的工作原理。
- en: curl assumes that you give it a valid URL and it only does limited checks of
    the format in order to extract the information it deems necessary to perform its
    operation. You can, for example, most probably pass in illegal characters in the
    URL without curl noticing or caring and it will just pass them on.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: curl假设您提供了一个有效的URL，并且仅对格式进行有限检查，以提取它认为执行操作所需的信息。例如，您很可能可以在URL中传递非法字符，而curl不会注意或在乎，它只会将它们传递下去。
- en: Scheme
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Scheme
- en: URLs start with the "scheme", which is the official name for the "http://" part.
    That tells which protocol the URL uses. The scheme must be a known one that this
    version of curl supports or it will show an error message and stop. Additionally,
    the scheme must neither start with nor contain any whitespace.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: URL以“scheme”开头，这是“http://”部分的官方名称。这告诉URL使用哪种协议。该scheme必须是此版本的curl支持的已知scheme，否则将显示错误消息并停止。此外，scheme既不能以空格开头，也不能包含任何空格。
- en: The scheme separator
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: scheme分隔符
- en: 'The scheme identifier is separated from the rest of the URL by the "://" sequence.
    That is a colon and two forward slashes. There exists URL formats with only one
    slash, but curl doesn''t support any of them. There are two additional notes to
    be aware of, about the number of slashes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: scheme标识符与URL的其余部分之间由“://”序列分隔。这是一个冒号和两个正斜杠。存在只有一个斜杠的URL格式，但curl不支持任何这些格式。关于斜杠数量还有两点需要注意：
- en: curl allow some illegal syntax and try to correct it internally; so it will
    also understand and accept URLs with one or three slashes, even though they are
    in fact not properly formed URLs. curl does this because the browsers started
    this practice so it has lead to such URLs being used in the wild every now and
    then.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: curl允许一些非法语法并尝试在内部进行更正；因此，它也将理解和接受具有一个或三个斜杠的URL，即使它们实际上不是正确形式的URL。curl之所以这样做，是因为浏览器开始了这种做法，因此偶尔会在实际应用中使用这样的URL。
- en: '`file://` URLs are written as `file://<hostname>/<path>` but the only hostnames
    that are okay to use are `localhost`, `127.0.0.1` or a blank (nothing at all):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`file://` URL写作`file://<hostname>/<path>`，但可以使用的唯一主机名是`localhost`、`127.0.0.1`或空白（什么都不写）：'
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Inserting any other host name in there will make recent versions of curl to
    return an error.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中插入任何其他主机名将导致curl的最新版本返回错误。
- en: 'Pay special attention to the third example above (`file:///path/to/file`).
    That is *three* slashes before the path. That is again an area with common mistakes
    and where browsers allow users to use the wrong syntax so as a special exception,
    curl on Windows also allows this incorrect format:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意上面的第三个示例（`file:///path/to/file`）。路径前有*三个*斜杠。这是一个常见错误的地方，浏览器允许用户使用错误的语法，因此作为特殊例外，Windows上的curl也允许这种不正确的格式：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: … where X is a windows-style drive letter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: …其中X是Windows风格的驱动器号。
- en: Without scheme
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有scheme
- en: As a convenience, curl also allows users to leave out the scheme part from URLs.
    Then it guesses which protocol to use based on the first part of the host name.
    That guessing is very basic as it just checks if the first part of the host name
    matches one of a set of protocols, and assumes you meant to use that protocol.
    This heuristic is based on the fact that servers traditionally used to be named
    like that. The protocols that are detected this way are FTP, DICT, LDAP, IMAP,
    SMTP and POP3\. Any other host name in a scheme-less URL will make curl default
    to HTTP.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种便利，curl 也允许用户从 URL 中省略方案部分。然后，它根据主机名的第一部分猜测使用哪种协议。这种猜测非常基本，因为它只是检查主机名的第一部分是否与一组协议之一匹配，并假定您想使用该协议。这种启发式方法基于服务器传统上被命名为这种方式的事实。以这种方式检测到的协议有
    FTP、DICT、LDAP、IMAP、SMTP 和 POP3。在没有方案的 URL 中的任何其他主机名将使 curl 默认为 HTTP。
- en: You can modify the default protocol to something other than HTTP with the `--proto-default`
    option.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`--proto-default`选项修改默认协议为除 HTTP 外的其他协议。
- en: Name and password
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称和密码
- en: 'After the scheme, there can be a possible user name and password embedded.
    The use of this syntax is usually frowned upon these days since you easily leak
    this information in scripts or otherwise. For example, listing the directory of
    an FTP server using a given name and password:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在方案之后，可以嵌入可能的用户名和密码。这种语法的使用在今天通常是不受欢迎的，因为您很容易在脚本或其他情况下泄露这些信息。例如，使用给定的名称和密码列出
    FTP 服务器的目录：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The presence of user name and password in the URL is completely optional. curl
    also allows that information to be provide with normal command-line options, outside
    of the URL.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: URL 中的用户名和密码的存在完全是可选的。curl 也允许使用常规命令行选项提供这些信息，而不是在 URL 中。
- en: Host name or address
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主机名或地址
- en: 'The host name part of the URL is, of course, simply a name that can be resolved
    to an numerical IP address, or the numerical address itself. When specifying a
    numerical address, use the dotted version for IPv4 addresses:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: URL 的主机名部分，当然，只是一个可以解析为数值 IP 地址或数值地址本身的名字。在指定数值地址时，对于 IPv4 地址使用点分版本：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '…and for IPv6 addresses the numerical version needs to be within square brackets:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: …而对于 IPv6 地址，数值版本需要在方括号内：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When a host name is used, the converting of the name to an IP address is typically
    done using the system's resolver functions. That normally lets a sysadmin provide
    local name lookups in the `/etc/hosts` file (or equivalent).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用主机名时，将名称转换为 IP 地址通常使用系统的解析器功能。这通常允许系统管理员在 `/etc/hosts` 文件（或等效文件）中提供本地名称查找。
- en: Port number
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 端口号
- en: 'Each protocol has a "default port" that curl will use for it, unless a specified
    port number is given. The optional port number can be provided within the URL
    after the host name part, as a colon and the port number written in decimal. For
    example, asking for an HTTP document on port 8080:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每个协议都有一个“默认端口”，curl 将在其中使用它，除非给定了一个指定的端口号。可选的端口号可以在 URL 的主机名部分之后作为十进制数的冒号和端口号提供。例如，在端口
    8080 上请求 HTTP 文档：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the name specified as an IPv4 address:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用指定为 IPv4 地址的名称：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With the name given as an IPv6 address:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以 IPv6 地址作为名称给出时：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Path
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路径
- en: Every URL contains a path. If there's none given, "/" is implied. The path is
    sent to the specified server to identify exactly which resource that is requested
    or that will be provided.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 URL 都包含一个路径。如果没有给出路径，则默认为“/”。该路径将发送到指定的服务器，以准确识别所请求的或将要提供的资源。
- en: 'The exact use of the path is protocol dependent. For example, getting a file
    README from the default anonymous user from an FTP server:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 路径的确切使用取决于协议。例如，从默认匿名用户的 FTP 服务器获取文件 README：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For the protocols that have a directory concept, ending the URL with a trailing
    slash means that it is a directory and not a file. Thus asking for a directory
    list from an FTP server is implied with such a slash:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有目录概念的协议，以斜杠结尾的 URL 表示这是一个目录而不是文件。因此，通过这样的斜杠请求从 FTP 服务器获取目录列表是隐含的：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: FTP type
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FTP 类型
- en: This is not a feature that is widely used.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个广泛使用的功能。
- en: URLs that identify files on FTP servers have a special feature that allows you
    to also tell the client (curl in this case) which file type the resource is. This
    is because FTP is a little special and can change mode for a transfer and thus
    handle the file differently than if it would use another mode.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 识别 FTP 服务器上文件的 URL 具有一个特殊功能，允许您还告诉客户端（在本例中为 curl）资源的文件类型。这是因为 FTP 有点特殊，可以为传输更改模式，因此可以处理文件与使用其他模式时不同的方式。
- en: 'You tell curl that the FTP resource is an ASCII type by appending ";type=A"
    to the URL. Getting the ''foo'' file from example.com''s root directory using
    ASCII could then be made with:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在URL后附加“;type=A”来告诉curl FTP资源是ASCII类型。然后，可以使用ASCII从example.com的根目录获取“foo”文件，如下所示：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And while curl defaults to binary transfers for FTP, the URL format allows
    you to also specify the binary type with type=I:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然curl默认为FTP进行二进制传输，但URL格式允许您还可以使用type=I指定二进制类型：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, you can tell curl that the identified resource is a directory if the
    type you pass is D:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果传递的类型是D，则您可以告诉curl所识别的资源是一个目录：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: …this can then work as an alternative format, instead of ending the path with
    a trailing slash as mentioned above.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: …这样可以作为一种替代格式，而不是像上面提到的以斜杠结尾的路径。
- en: Fragment
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 片段
- en: URLs offer a "fragment part". That's usually seen as a hash symbol (#) and a
    name for a specific name within a web page in browsers. curl supports fragments
    fine when a URL is passed to it, but the fragment part is never actually sent
    over the wire so it doesn't make a difference to curl's operations whether it
    is present or not.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: URLs提供了“片段部分”。在浏览器中，通常以哈希符号（#）和网页中特定名称的名称表示。当URL传递给curl时，curl会很好地支持片段，但片段部分实际上从未发送到网络，因此无论它是否存在，对于curl的操作都没有任何区别。
- en: Browsers' "address bar"
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浏览器的“地址栏”
- en: It is important to realize that when you use a modern web browser, the "address
    bar" they tend to feature at the top of their main windows are not using "URLs"
    or even "URIs". They are in fact mostly using IRIs, which is a superset of URIs
    to allow internationalization like non-Latin symbols and more, but it usually
    goes beyond that, too, as they tend to, for example, handle spaces and do magic
    things on percent encoding in ways none of these mentioned specifications say
    a client should do.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用现代网络浏览器时，重要的是要意识到它们主窗口顶部通常显示的“地址栏”并非使用的是“URLs”甚至是“URIs”。实际上，它们大多数情况下使用的是IRIs，这是URI的超集，允许国际化，如非拉丁符号等，但通常还会超越这一点，因为它们往往会，例如，处理空格，并以某种方式对百分比编码进行魔术操作，而这些提到的规范中都没有说明客户端应该这样做。
- en: The address bar is quite simply an interface for humans to enter and see URI-like
    strings.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 地址栏只是一个供人类输入和查看类似URI的字符串的界面。
- en: Sometimes the differences between what you see in a browser's address bar and
    what you can pass in to curl is significant.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，浏览器地址栏中看到的内容与您可以传递给curl的内容之间的差异是显著的。
- en: Many options and URLs
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 许多选项和URLs
- en: As mentioned above, curl supports hundreds of command-line options and it also
    supports an unlimited number of URLs. If your shell or command-line system supports
    it, there's really no limit to how long a command line you can pass to curl.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，curl支持数百个命令行选项，还支持无限数量的URLs。如果您的Shell或命令行系统支持，那么您可以传递给curl的命令行长度实际上没有限制。
- en: curl will parse the entire command line first, apply the wishes from the command-line
    options used, and then go over the URLs one by one (in a left to right order)
    to perform the operations.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: curl将首先解析整个命令行，应用使用的命令行选项的愿望，然后逐个（从左到右）处理URLs以执行操作。
- en: For some options (for example `-o` or `-O` that tell curl where to store the
    transfer), you may want to specify one option for each URL on the command line.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些选项（例如告诉curl在哪里存储传输的“-o”或“-O”选项），您可能希望在命令行上的每个URL指定一个选项。
- en: curl will return an exit code for its operation on the last URL used. If you
    instead rather want curl to exit with an error on the first URL in the set that
    fails, use the `--fail-early` option.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: curl将返回其对最后一个使用的URL的操作的退出代码。如果您希望curl在失败的第一个URL处出现错误而不是退出，请使用`--fail-early`选项。
- en: Separate options per URL
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个URL分别设置选项
- en: In previous sections we described how curl always parses all options in the
    whole command line and applies those to all the URLs that it transfers.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们描述了curl始终解析整个命令行中的所有选项，并将其应用于它传输的所有URLs。
- en: 'That was a simplification: curl also offers an option (-;, --next) that inserts
    a sort of boundary between a set of options and URLs for which it will apply the
    options. When the command-line parser finds a --next option, it applies the following
    options to the next set of URLs. The --next option thus works as a *divider* between
    a set of options and URLs. You can use as many --next options as you please.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简化：curl还提供了一个选项（-;, --next），它在一组选项和URL之间插入一种边界，以便将其应用于这些选项。当命令行解析器找到一个--next选项时，它会将后续选项应用于下一组URLs。因此，--next选项在一组选项和URL之间起到了一种*分隔符*的作用。您可以根据需要使用任意多个--next选项。
- en: 'As an example, we do an HTTP GET to a URL and follow redirects, we then make
    a second HTTP POST to a different URL and we round it up with a HEAD request to
    a third URL. All in a single command line:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，我们对一个 URL 进行 HTTP GET 请求并跟随重定向，然后我们对不同的 URL 进行第二个 HTTP POST 请求，最后我们用 HEAD
    请求对第三个 URL 进行请求。所有这些在一个单独的命令行中完成：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Trying something like that *without* the --next options on the command line
    would generate an illegal command line since curl would attempt to combine both
    a POST and a HEAD:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上尝试类似这样的操作*不*使用 --next 选项会生成一个非法的命令行，因为 curl 会尝试组合一个 POST 和一个 HEAD：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Connection reuse
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接重用
- en: Setting up a TCP connection and especially a TLS connection can be a slow process,
    even on high bandwidth networks.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 建立 TCP 连接，特别是 TLS 连接可能是一个缓慢的过程，即使在高带宽网络上也是如此。
- en: It can be useful to remember that curl has a connection pool internally which
    keeps previously used connections alive and around for a while after they were
    used so that subsequent requests to the same hosts can reuse an already established
    connection.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 curl 具有内部连接池，它会保持之前使用的连接活动一段时间，以便在它们被使用后的一段时间内重新使用已经建立的连接。
- en: Of course, they can only be kept alive for as long as the curl tool is running,
    but it is a very good reason for trying to get several transfers done within the
    same command line instead of running several independent curl command line invocations.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，它们只能在 curl 工具运行的时间内保持活动，但这是一个很好的理由，尝试在同一个命令行中完成多个传输，而不是运行几个独立的 curl 命令行调用。
- en: URL globbing
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URL globbing
- en: URL globbing
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URL globbing
- en: At times you want to get a range of URLs that are mostly the same, with only
    a small portion of it changing between the requests. Maybe it is a numeric range
    or maybe a set of names. curl offers "globbing" as a way to specify many URLs
    like that easily.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你想要获取一系列基本相同的 URL，只有一小部分在请求之间发生变化。也许是一个数字范围，或者一组名称。curl 提供了 "globbing" 来轻松地指定这样多个
    URL。
- en: The globbing uses the reserved symbols [] and {} for this, symbols that normally
    cannot be part of a legal URL (except for numerical IPv6 addresses but curl handles
    them fine anyway). If the globbing gets in your way, disable it with `-g, --globoff`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: globbing 使用了保留的符号 [] 和 {}，这些符号通常不能成为合法 URL 的一部分（除了数字 IPv6 地址，但是 curl 无论如何都可以处理它们）。如果
    globbing 影响了你的操作，请使用 `-g, --globoff` 禁用它。
- en: While most transfer related functionality in curl is provided by the libcurl
    library, the URL globbing feature is not!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 curl 中大部分与传输相关的功能是由 libcurl 库提供的，但 URL globbing 功能不是！
- en: Numerical ranges
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字范围
- en: 'You can ask for a numerical range with [N-M] syntax, where N is the start index
    and it goes up to and including M. For example, you can ask for 100 images one
    by one that are named numerically:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 [N-M] 语法请求一个数字范围，其中 N 是起始索引，直到 M（包括 M）。例如，你可以一个接一个地请求命名为数字的 100 张图像：
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'and it can even do the ranges with zero prefixes, like if the number is three
    digits all the time:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 它甚至可以对零前缀进行范围，比如数字始终是三位数的情况：
- en: '[PRE29]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Or maybe you only want even numbered images so you tell curl a step counter
    too. This example range goes from 0 to 100 with an increment of 2:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你只想要偶数编号的图片，所以你告诉 curl 也步进计数。这个例子的范围是从 0 到 100，步进为 2：
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Alphabetical ranges
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字母范围
- en: 'curl can also do alphabetical ranges, like when a site has sections named a
    to z:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: curl 也可以做字母范围，比如当一个站点的部分命名为 a 到 z 时：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: A list
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个列表
- en: 'Sometimes the parts don''t follow such an easy pattern, and then you can instead
    give the full list yourself but then within the curly braces instead of the brackets
    used for the ranges:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候部件不遵循这样简单的模式，这时你可以给出完整的列表，但是在花括号中而不是在用于范围的方括号中：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Combinations
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组合
- en: 'You can use several globs in the same URL which then will make curl iterate
    over those, too. To download the images of Ben, Alice and Frank, in both the resolutions
    100x100 and 1000x1000, a command line could look like:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在同一个 URL 中使用多个 glob，这样 curl 也会迭代这些 glob。要下载 Ben、Alice 和 Frank 的图像，分辨率分别为
    100x100 和 1000x1000，命令行可能如下所示：
- en: '[PRE33]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Or download all the images of a chess board, indexed by two coordinates ranged
    0 to 7:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 或者下载一个象棋棋盘的所有图像，由两个坐标索引，范围从 0 到 7：
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'And you can, of course, mix ranges and series. Get a week''s worth of logs
    for both the web server and the mail server:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以混合范围和系列。获取一个星期的网站和邮件服务器的日志：
- en: '[PRE35]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Output variables for globbing
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于 globbing 的输出变量
- en: In all the globbing examples previously in this chapter we have selected to
    use the `-O / --remote-name` option, which makes curl save the target file using
    the file name part of the used URL.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中之前的所有通配符示例中，我们选择使用`-O / --remote-name`选项，这使得curl使用URL的文件名部分保存目标文件。
- en: 'Sometimes that is not enough. You are downloading multiple files and maybe
    you want to save them in a different subdirectory or create the saved file names
    differently. curl, of course, has a solution for these situations as well: output
    file name variables.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 有时这还不够。你正在下载多个文件，也许你想将它们保存在不同的子目录中或以不同的方式创建保存的文件名。curl当然也为这些情况提供了解决方案：输出文件名变量。
- en: Each "glob" used in a URL gets a separate variable. They are referenced as '#[num]'
    - that means the single letter '#' followed by the glob number which starts with
    1 for the first glob and ends with the last glob.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在URL中使用的每个“通配符”都会得到一个单独的变量。它们被引用为“#[num]” - 这意味着以单个字母“#”开头，后面跟着通配符号码，从第一个通配符开始为1，直到最后一个通配符结束。
- en: 'Save the main pages of two different sites:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 保存两个不同网站的主页：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Save the outputs from a command line with two globs in a subdirectory;
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 用两个通配符在子目录中保存命令行的输出；
- en: '[PRE37]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: List options
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出选项
- en: List all command-line options
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出所有命令行选项
- en: curl has more than two hundred command-line options and the number of options
    keep increasing over time. Chances are the number of options will reach 250 within
    a few years.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: curl有超过两百个命令行选项，而且选项的数量随着时间的推移而不断增加。很可能在未来几年内，选项的数量将达到250个。
- en: In order to find out which options you need to perform as certain action, you
    can, of course, list all options, scan through the list and pick the one you are
    looking for. `curl --help` or simply `curl -h` will get you a list of all existing
    options with a brief explanation. If you don't really know what you are looking
    for, you probably won't be entirely satisfied.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找出执行某个操作所需的选项，你当然可以列出所有选项，浏览列表并选择你正在寻找的选项。`curl --help`或简单地`curl -h`将为您提供所有现有选项的列表及简要说明。如果你不太清楚自己在寻找什么，你可能不会完全满意。
- en: Then you can instead opt to use `curl --manual` which will output the entire
    man page for curl plus an appended tutorial for the most common use cases. That
    is a very thorough and complete document on how each option works amassing several
    thousand lines of documentation. To wade through that is also a tedious work and
    we encourage use of a search function through those text masses. Some people will
    appreciate the man page in its [web version](https://curl.haxx.se/docs/manpage.html).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以选择使用`curl --manual`，它将输出curl的整个man页面以及最常见用例的附加教程。这是一个非常详尽和完整的文档，解释了每个选项的工作原理，总共有数千行文档。浏览这些内容也是一项繁琐的工作，我们鼓励使用搜索功能来浏览这些文本内容。有些人会欣赏man页面的[网页版本](https://curl.haxx.se/docs/manpage.html)。
- en: Config file
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件
- en: Config file
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件
- en: You can easily end up with curl command lines that use a very large number of
    command-line options, making them rather hard to work with. Sometimes the length
    of the command line you want to enter even hits the maximum length your command-line
    system allows. The Microsoft Windows command prompt being an example of something
    that has a fairly small maximum line length.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现curl命令行使用了大量的命令行选项，使得它们变得相当难以处理。有时，你要输入的命令行长度甚至达到了命令行系统允许的最大长度。微软Windows命令提示符就是一个具有相当小最大行长度的例子。
- en: To aid such situations, curl offers a feature we call "config file". It basically
    allows you to write command-line options in a text file instead and then tell
    curl to read options from that file in addition to the command line.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助这种情况，curl提供了一个我们称之为“配置文件”的功能。基本上，它允许你将命令行选项写入一个文本文件中，然后告诉curl从该文件中读取选项，除了命令行之外。
- en: 'You tell curl to read more command-line options from a specific file with the
    -K/--config option, like this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以告诉curl从一个特定文件中读取更多的命令行选项，使用`-K / --config`选项，就像这样：
- en: '[PRE38]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '…and in the `cmdline.txt` file (which, of course, can use any file name you
    please) you enter each command line per line:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: …并在`cmdline.txt`文件中（当然，可以使用任何你喜欢的文件名）每行输入一个命令行：
- en: '[PRE39]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The config file accepts both short and long options, exactly as you would write
    them on a command line. As a special extra feature, it also allows you to write
    the long format of the options without the leading two dashes to make it easier
    to read. Using that style, the config file shown above can alternatively be written
    as:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件接受短选项和长选项，正如你在命令行上编写它们一样。作为一个特殊的额外功能，它还允许你写长格式的选项，而不需要前导的两个破折号，以使阅读更容易。使用这种风格，上面显示的配置文件也可以替代地写为：
- en: '[PRE40]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Command line options that take an argument must have its argument provided on
    the same line as the option. For example changing the User-Agent HTTP header can
    be done with
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 带有参数的命令行选项必须在同一行上提供其参数。例如，可以通过以下方式更改User-Agent HTTP标头：
- en: '[PRE41]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To allow the config files to look even more like a true config file, it also
    allows you to use ''='' or '':'' between the option and its argument. As you see
    above it isn''t necessary, but some like the clarity it offers. Setting the user-agent
    option again:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使配置文件看起来更像真正的配置文件，它还允许你在选项和其参数之间使用'='或':'。就像你上面看到的那样，这并不是必需的，但有些人喜欢它所提供的清晰度。再次设置用户代理选项：
- en: '[PRE42]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The argument to an option can be specified without double quotes and then curl
    will treat the next space or newline as the end of the argument. So if you want
    to provide an argument with embedded spaces you must use double quotes.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 选项的参数可以指定为不带双引号，然后curl将把下一个空格或换行符视为参数的结束。所以如果你想提供一个包含嵌入空格的参数，你必须使用双引号。
- en: 'The user agent string example we have used above has no white spaces and therefore
    it can also be provided without the quotes like:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面使用的用户代理字符串示例没有空格，因此它也可以不用引号提供，就像：
- en: '[PRE43]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Finally, if you want to provide a URL in a config file, you must do that the
    `--url` way, or just with `url`, and not like on the command line where basically
    everything that isn''t an option is assumed to be a URL. So you provide a URL
    for curl like this:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你想在配置文件中提供一个URL，你必须以`--url`的方式进行，或者只需使用`url`，而不像在命令行上那样，基本上所有不是选项的东西都被假定为是一个URL。所以你提供一个URL给curl就像这样：
- en: '[PRE44]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Default config file
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认配置文件
- en: When curl is invoked, it always (unless `-q` is used) checks for a default config
    file and uses it if found. The file name it checks for is `.curlrc` on Unix-like
    systems and `_curlrc` on Windows.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用curl时，它总是（除非使用了`-q`）检查默认配置文件并在找到时使用它。它检查的文件名是类Unix系统上的.curlrc和Windows上的_curlrc。
- en: 'The default config file is checked for in the following places in this order:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 默认配置文件按以下顺序在以下位置检查：
- en: 'curl tries to find the "home directory": It first checks for the CURL_HOME
    and then the HOME environment variables. Failing that, it uses `getpwuid()` on
    Unix-like systems (which returns the home directory given the current user in
    your system). On Windows, it then checks for the APPDATA variable, or as a last
    resort the ''%USERPROFILE%\Application Data''.'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: curl尝试找到"主目录"：首先检查CURL_HOME，然后检查HOME环境变量。如果失败，它会在类Unix系统上使用`getpwuid()`（它返回给定系统中当前用户的主目录）。在Windows上，它然后检查APPDATA变量，或者作为最后的手段检查'%USERPROFILE%\Application
    Data'。
- en: On Windows, if there is no _curlrc file in the home directory, it checks for
    one in the same directory the curl executable is placed. On Unix-like systems,
    it will simply try to load .curlrc from the determined home directory.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上，如果在主目录中没有_curlrc文件，则检查curl可执行文件所在的同一目录中是否存在一个文件。在类Unix系统上，它将简单地尝试从确定的主目录中加载.curlrc。
- en: Passwords
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码
- en: Passwords and snooping
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码和窥探
- en: Passwords are tricky and sensitive. Leaking a password can make someone else
    than you access the resources and the data otherwise protected.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 密码是棘手而敏感的。泄漏密码可以使其他人访问受保护的资源和数据，而不是你。
- en: curl offers several ways to receive passwords from the user and then subsequently
    pass them on or use them to something else.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: curl提供了几种从用户那里接收密码然后随后传递它们或将它们用于其他用途的方法。
- en: 'The most basic curl authentication option is `-u / --user`. It accepts an argument
    that is the user name and password, colon separated. Like when alice wants to
    request a page requiring HTTP authentication and her password is ''12345'':'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的curl身份验证选项是`-u / --user`。它接受一个参数，即用户名和密码，用冒号分隔。就像当alice想请求一个需要HTTP身份验证的页面，并且她的密码是'12345'时：
- en: $ curl -u alice:12345 [http://example.com/](http://example.com/)
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: $ curl -u alice:12345 [http://example.com/](http://example.com/)
- en: Command line leakage
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令行泄露
- en: Several potentially bad things are going on here. First, we are entering a password
    on the command line and the command line might be readable for other users on
    the same system (assuming you have a multi-user system). curl will help minimize
    that risk by trying to blank out passwords from process listings.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几件可能不好的事情正在发生。首先，我们在命令行上输入密码，而命令行可能对同一系统上的其他用户可读（假设你有一个多用户系统）。curl会尝试通过尽量在进程列表中隐藏密码来最小化这种风险。
- en: One way to avoid passing the user name and password on the command line is to
    instead use a [.netrc file](usingcurl-netrc.html) or a [config file](cmdline-configfile.html).
    You can also use the `-u` option without specifying the password, and then curl
    will instead prompt the user for it when it runs.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在命令行上传递用户名和密码的一种方法是使用[.netrc文件](usingcurl-netrc.html)或[配置文件](cmdline-configfile.html)。你也可以使用`-u`选项而不指定密码，然后curl会在运行时提示用户输入密码。
- en: Network leakage
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络泄漏
- en: Secondly, this command line sends the user credentials to an HTTP server, which
    is a clear-text protocol that is open for man-in-the-middle or other snoopers
    to spy on the connection and see what is sent. In this command line example, it
    makes curl use HTTP Basic authentication and that is completely insecure.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，此命令行将用户凭据发送到HTTP服务器，这是一种明文协议，容易受到中间人或其他窃听者的监听并查看发送的内容。在此命令行示例中，它使curl使用HTTP基本认证，这是完全不安全的。
- en: There are several ways to avoid this, and the key is, of course, then to avoid
    protocols or authentication schemes that sends credentials in the plain over the
    network. Easiest is perhaps to make sure you use encrypted versions of protocols.
    Use HTTPS instead of HTTP, use FTPS instead of FTP and so on.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种避免这种情况的方法，关键当然是避免在网络上传送明文凭据的协议或身份验证方案。最简单的方法可能是确保你使用协议的加密版本。使用HTTPS代替HTTP，使用FTPS代替FTP等等。
- en: If you need to stick to a plain text and insecure protocol, then see if you
    can switch to using an authentication method that avoids sending the credentials
    in the clear. If you want HTTP, such methods would include Digest (`--digest`),
    Negotiate (`--negotiate.`) and NTLM (`--ntlm`).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要坚持使用纯文本和不安全的协议，那么请看看是否可以切换到使用避免明文发送凭据的身份验证方法。如果你需要HTTP，这样的方法包括摘要(`--digest`)、协商(`--negotiate`)和NTLM(`--ntlm`)。
- en: Progress meter
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进度条
- en: The progress meter
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进度条
- en: curl has a built-in progress meter. When curl is invoked to transfer data (either
    uploading or downloading) it can show that meter in the terminal screen to show
    how the transfer is progressing, namely the current transfer speed, how long it
    has been going on and how long it thinks it might be left until completion.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: curl有一个内置的进度条。当curl被调用来传输数据（上传或下载）时，它可以在终端屏幕上显示进度条，显示传输进度，即当前传输速度，传输已经进行了多长时间，估计还需多长时间才能完成。
- en: The progress meter is inhibited if curl deems that there is output going to
    the terminal, as then would the progress meter interfere with that output and
    just mess up what gets displayed. A user can also forcibly switch off the progress
    meter with the `-s / --silent` option, which tells curl to hush.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果curl认为输出被发送到终端，则会抑制进度条，因为这样进度条就会干扰输出，并且只会搞乱显示的内容。用户也可以使用`-s / --silent`选项强制关闭进度条，告诉curl保持安静。
- en: If you invoke curl and don't get the progress meter, make sure your output is
    directed somewhere other than the terminal.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你调用curl却没有看到进度条，确保你的输出被重定向到终端之外的地方。
- en: curl also features an alternative and simpler progress meter that you enable
    with `-# / --progress-bar`. As the long name implies, it instead shows the transfer
    as progress bar.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: curl还提供了一种替代和更简单的进度条，你可以用`-# / --progress-bar`启用它。正如其长名称所示，它会以进度条的形式显示传输进度。
- en: At times when curl is asked to transfer data, it can't figure out the total
    size of the requested operation and that then subsequently makes the progress
    meter contain fewer details and it cannot, for example, make forecasts for transfer
    times, etc.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些时候，当curl被要求传输数据时，它可能无法确定所请求操作的总大小，这就导致进度条包含较少的细节，例如不能对传输时间做出预测等。
- en: Units
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单位
- en: The progress meter displays bytes and bytes per second.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 进度条显示字节和字节每秒。
- en: 'It will also use suffixes for larger amounts of bytes, using the 1024 base
    system so 1024 is one kilobyte (1K), 2048 is 2K, etc. curl supports these:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会使用后缀来表示更大量级的字节，使用1024进制系统，因此1024字节是一千字节（1K），2048字节是2K，依此类推。curl支持以下这些后缀：
- en: '| Suffix | Amount | Name |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| 后缀 | 量级 | 名称 |'
- en: '| --- | --- | --- |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| K | 2^10 | kilobyte |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| K | 2^10 | 千字节 |'
- en: '| M | 2^20 | megabyte |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| M | 2^20 | 兆字节 |'
- en: '| G | 2^30 | gigabyte |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| G | 2^30 | 吉字节 |'
- en: '| T | 2^40 | terabyte |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| T | 2^40 | 太字节 |'
- en: '| P | 2^50 | petabyte |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| P | 2^50 | 佩比字节 |'
- en: The times are displayed using H:MM:SS for hours, minutes and seconds.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 时间以时:分:秒显示。
- en: Progress meter legend
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进度条图例
- en: 'The progress meter exists to show a user that something actually is happening.
    The different fields in the output have the following meaning:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 进度条存在的目的是向用户显示确实有事情正在发生。输出中的不同字段具有以下含义：
- en: '[PRE45]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'From left to right:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右：
- en: '| Title | Meaning |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| Title | 含义 |'
- en: '| --- | --- |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| % | Percentage completed of the whole transfer |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| % | 整个传输的完成百分比 |'
- en: '| Total | Total size of the whole expected transfer (if known) |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| Total | 整个预期传输的总大小（如果已知） |'
- en: '| % | Percentage completed of the download |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| % | 下载完成百分比 |'
- en: '| Received | Currently downloaded number of bytes |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| Received | 目前已下载的字节数 |'
- en: '| % | Percentage completed of the upload |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| % | 上传完成百分比 |'
- en: '| Xferd | Currently uploaded number of bytes |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| Xferd | 目前已上传的字节数 |'
- en: '| Average Speed Dload | Average transfer speed of the entire download so far,
    in number of bytes per second |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| Average Speed Dload | 到目前为止整个下载的平均传输速度，以每秒字节数表示 |'
- en: '| Average Speed Upload | Average transfer speed of the entire upload so far,
    in number of bytes per second |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| Average Speed Upload | 到目前为止整个上传的平均传输速度，以每秒字节数表示 |'
- en: '| Time Total | Expected time to complete the operation, in HH:MM:SS notation
    for hours, minutes and seconds |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| Time Total | 完成操作的预期时间，以时:分:秒表示 |'
- en: '| Time Current | Time passed since the start of the transfer, in HH:MM:SS notation
    for hours, minutes and seconds |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| Time Current | 传输开始后经过的时间，以时:分:秒表示 |'
- en: '| Time Left | Expected time left to completion, in HH:MM:SS notation for hours,
    minutes and seconds |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| Time Left | 预计剩余完成时间，以时:分:秒表示 |'
- en: '| Curr.Speed | Average transfer speed over the last 5 seconds (the first 5
    seconds of a transfer is based on less time, of course) in number of bytes per
    second |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| Curr.Speed | 过去 5 秒的平均传输速度（传输的前 5 秒当然基于较短的时间）以每秒字节数表示 |'
