- en: 'Lectures 16: Advanced Async'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Lectures 16: Advanced Async'
- en: Last time we saw how to describe concurrent computations using `bind` (often
    written `>>=`) and `return` primitives. The `return` function takes a value and
    returns a deferred computation that is determined immediately, while `d >>= f`
    waits for `d` to become determined, and then passes the resulting value to `f`,
    which also computes a deferred value. In general, there may be many deferred computations
    executing concurrently, and we will need to coordinate and synchronize their behavior.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 上次我们讨论了如何使用`bind`（通常写作`>>=`）和`return`原语描述并发计算。`return`函数接受一个值并返回一个立即确定的延迟计算，而`d
    >>= f`则等待`d`确定，然后将结果值传递给`f`，后者也计算一个延迟值。通常情况下，可能会有许多延迟计算同时执行，我们需要协调和同步它们的行为。
- en: These notes build on material and code examples originally developed in [Real
    World OCaml Chapter 18](https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些笔记基于原本在[Real World OCaml 第18章](https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html)中开发的材料和代码示例。
- en: An echo server
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个回声服务器
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'val both : ''a Deferred.t -> ''b Deferred.t -> (''a * ''b) Deferred.t'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 'val both : ''a Deferred.t -> ''b Deferred.t -> (''a * ''b) Deferred.t'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'let both (d1:''a Deferred.t) (d2:''b Deferred.t) : (''a * ''b) Deferred.t ='
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 'let both (d1:''a Deferred.t) (d2:''b Deferred.t) : (''a * ''b) Deferred.t ='
- en: d1 >>= (fun v1 ->
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: d1 >>= (fun v1 ->
- en: d2 >>= (fun v2 ->
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: d2 >>= (fun v2 ->
- en: return (v1,v2)))
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: return (v1,v2)))
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'val all : (''a Deferred.t) list -> (''a list) Deferred.t'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 'val all : (''a Deferred.t) list -> (''a list) Deferred.t'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'let rec all (l:(''a Deferred.t) list) : (''a list) Deferred.t ='
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 'let rec all (l:(''a Deferred.t) list) : (''a list) Deferred.t ='
- en: List.fold_right
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: List.fold_right
- en: (fun x acc ->
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (fun x acc ->
- en: x >>= (fun h ->
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: x >>= (fun h ->
- en: acc >>= (fun t ->
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: acc >>= (fun t ->
- en: return (h::t))))
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return (h::t))))
- en: l (return [])
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: l (return [])
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'val any : (''a Deferred.t) list -> ''a Deferred.t'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 'val any : (''a Deferred.t) list -> ''a Deferred.t'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'val after : Core.Span.t -> unit Deferred.t'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 'val after : Core.Span.t -> unit Deferred.t'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'val sec : float -> Core.Span.t'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'val sec : float -> Core.Span.t'
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: after (sec 5.3)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: after (sec 5.3)
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: let timeout (thunk:unit -> 'a Deferred.t) (n:float)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: let timeout (thunk:unit -> 'a Deferred.t) (n:float)
- en: ': (''a option) Deferred.t'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ': (''a option) Deferred.t'
- en: = Deferred.any
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: = Deferred.any
- en: '[ after (sec n) >>| (fun () -> None) ;'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ after (sec n) >>| (fun () -> None) ;'
- en: thunk () >>| (fun x -> Some x) ]
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: thunk () >>| (fun x -> Some x) ]
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'module IVar : sig'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'module IVar : sig'
- en: type 'a t
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: type 'a t
- en: 'val create : unit -> ''a t'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 'val create : unit -> ''a t'
- en: 'val fill : ''a t -> ''a -> unit'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 'val fill : ''a t -> ''a -> unit'
- en: 'val fill_if_empty : ''a t -> ''a -> unit'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'val fill_if_empty : ''a t -> ''a -> unit'
- en: 'val is_empty : ''a t -> bool'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'val is_empty : ''a t -> bool'
- en: 'val is_full : ''a t -> bool'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'val is_full : ''a t -> bool'
- en: 'val read : ''a t -> ''a Deferred.t'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 'val read : ''a t -> ''a Deferred.t'
- en: '...'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: end =
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: end =
- en: struct
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: struct
- en: '...'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: end
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'upon : ''a Deferred.t -> (''a -> unit) -> unit'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'upon : ''a Deferred.t -> (''a -> unit) -> unit'
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: module type DELAYER = sig
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: module type DELAYER = sig
- en: type t
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: type t
- en: 'val create : float -> t'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 'val create : float -> t'
- en: 'val schedule : t -> (unit -> ''a Deferred.t) -> ''a Deferred.t'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'val schedule : t -> (unit -> ''a Deferred.t) -> ''a Deferred.t'
- en: end
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'module Delayer : DELAYER = struct'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 'module Delayer : DELAYER = struct'
- en: 'type t = { delay: Core.Span.t;'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 'type t = { delay: Core.Span.t;'
- en: 'jobs: (unit -> unit) Core.Std.Queue.t }'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'jobs: (unit -> unit) Core.Std.Queue.t }'
- en: let create n =
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: let create n =
- en: '{ delay = Core.Time.Span.of_sec n;'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{ delay = Core.Time.Span.of_sec n;'
- en: jobs = Core.Std.Queue.create () }
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: jobs = Core.Std.Queue.create () }
- en: let schedule t thunk =
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: let schedule t thunk =
- en: let ivar = Ivar.create () in
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let ivar = Ivar.create () in
- en: Core.Std.Queue.enqueue t.jobs (fun () ->
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Core.Std.Queue.enqueue t.jobs (fun () ->
- en: upon (thunk ()) (fun x -> Ivar.fill ivar x));
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: upon (thunk ()) (fun x -> Ivar.fill ivar x));
- en: upon (after t.delay) (fun () ->
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: upon (after t.delay) (fun () ->
- en: (Core.Std.Queue.dequeue_exn t.jobs) ());
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (Core.Std.Queue.dequeue_exn t.jobs) ());
- en: Ivar.read ivar
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Ivar.read ivar
- en: end
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: type Deferred.choice
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: type Deferred.choice
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'val choice : ''a Deferred.t -> (''a -> ''b) -> ''b Deferred.choice'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 'val choice : ''a Deferred.t -> (''a -> ''b) -> ''b Deferred.choice'
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'val choose : (''a Deferred.choice) list -> ''a Deferred.t'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 'val choose : (''a Deferred.choice) list -> ''a Deferred.t'
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
