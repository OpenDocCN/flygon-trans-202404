- en: 'Lecture 18: Verification'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讲座 18：验证
- en: We will use the term **verification** to refer to a process that generates high
    assurance code that works on all inputs and in all environments. Testing is a
    good, cost-effective way of getting assurance, but it is not a verification process
    in this sense because there is no guarantee that the coverage of the tests is
    sufficient for all uses of the code. Verification generates a proof (sometimes
    only implicitly) that all inputs will result in outputs that conform to the specification.
    In this lecture, we look at verification based on explicitly but somewhat informally
    proving correctness of the code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用术语**验证**来指代一个生成高度保证的代码，能够在所有输入和所有环境下运行的过程。测试是一种很好的、具有成本效益的获取保证的方法，但在这个意义上它不是一个验证过程，因为无法保证测试的覆盖范围足以满足代码的所有用途。验证生成一个（有时是隐含的）证明，证明所有输入都将产生符合规范的输出。在这次讲座中，我们将基于明确但在某种程度上不太正式的证明代码的正确性来进行验证。
- en: Verification tends to be expensive and to require thinking carefully about and
    deeply understanding the code to be verified. In practice, it tends to be applied
    to code that is important and relatively short. Verification is particularly valuable
    for critical systems where testing is less effective. Because their execution
    is not deterministic, concurrent programs are hard to test, and sometimes subtle
    bugs can only be found by attempting to verify the code formally. In fact, tools
    to help prove programs correct have been getting increasingly effective and some
    large systems have been fully verified, including compilers, processors and processor
    emulators, and key pieces of operating systems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 验证往往是昂贵的，需要仔细考虑和深入理解待验证的代码。在实践中，它往往被应用于重要且相对较短的代码。验证对于测试效果较差的关键系统尤其有价值。由于它们的执行不确定性，同时运行的程序很难测试，有时微妙的错误只能通过尝试形式化验证代码来发现。事实上，帮助证明程序正确的工具已经变得越来越有效，一些大型系统已经完全经过验证，包括编译器、处理器和处理器仿真器，以及关键的操作系统部件。
- en: Another benefit to studying verification is that when you understand what it
    takes to prove code correct, it will help you reason about your own code (or others')
    and to write code that is correct more likely to be correct, based on specs that
    are more precise and useful.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 学习验证的另一个好处是，当你了解证明代码正确所需的步骤时，它将帮助你推理你自己的代码（或他人的代码），并编写更有可能正确的代码，基于更精确和有用的规范。
- en: In recent years, techniques have been developed that combine ideas from verification
    and testing have been developed that can sometimes give the best of both worlds.
    These ideas, **model checking** and **abstract interpretation**, can give the
    same level of assurance as formal verification at lower cost, or more assurance
    than testing at similar cost. However, in this lecture, we'll look at verification
    in the classic sense.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，已经发展出一些技术，将验证和测试的思想结合起来，有时可以同时兼顾两者的优点。这些想法，**模型检查**和**抽象解释**，可以以更低的成本提供与正式验证相同级别的保证，或者比测试提供更多的保证。然而，在这次讲座中，我们将从经典意义上来看待验证。
- en: A Simple Example
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的例子
- en: 'Let''s prove a short piece of code correct in a slightly informal but hopefully
    convincing way. Here is a slightly odd implementation of the `max` function on
    integers, using `abs`, whose spec is also given:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一种稍微不太正式但希望能令人信服的方式证明一段代码的正确性。这里是一个对整数使用 `abs` 的稍微奇怪的 `max` 函数的实现，同时也给出了它的规范：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Because this implementation doesn't use `if` (assuming `abs` doesn't), it's
    conceivable that this could be faster than the obvious implementation!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个实现没有使用 `if`（假设 `abs` 没有使用），这可能比显而易见的实现更快！
- en: To verify a function like this `max`, we'll use two ideas. First, we'll consider
    the possible executions of the code starting from an arbitrary call satisfying
    the precondition. As execution proceeds, we'll accumulate facts we know about
    the current execution. Second, at some points during execution we won't know enough
    about what is supposed to happen, and we'll have to consider some possible cases.
    We have to argue that the postcondition of the function is satisfied no matter
    which case is taken.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证类似这样的函数 `max`，我们将使用两个想法。首先，我们将考虑从满足前置条件的任意调用开始的代码的可能执行。随着执行的进行，我们将积累关于当前执行的已知事实。其次，在执行过程中的某些时刻，我们对于应该发生的事情还不清楚，我们将不得不考虑一些可能的情况。我们必须论证无论采取哪种情况，函数的后置条件都得到满足。
- en: 'We start by considering an evaluation of `max x y`, where `x` and `y` represent
    are integers satisfying the precondition. We record the precondition as an assumption
    in the right column. As a shorthand, we''ll use PRE to represent the precondition,
    (min_int ≤ x ≤ max_int and min_int ≤ y ≤ max_int). One thing we need to know is
    that the OCaml operators `+` and `−` act like mathematical addition and subtraction
    as long as the mathematical result is within the range `min_int` to `max_int`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始考虑对 `max x y` 进行评估，其中 `x` 和 `y` 表示满足前提条件的整数。我们将前提条件记录为右列的假设。为简洁起见，我们将使用
    PRE 表示前提条件，(min_int ≤ x ≤ max_int 且 min_int ≤ y ≤ max_int)。我们需要知道的一件事是，OCaml 运算符
    `+` 和 `−` 的作用就像数学加法和减法一样，只要数学结果在范围 `min_int` 到 `max_int` 内：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we proceed with the proof, which is organized as a table in which each row
    represents another evaluation step.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们按照表格的形式进行证明，每一行代表一个评估步骤。
- en: '| Expression | Assumptions | Justification |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 表达式 | 假设条件 | 证明 |'
- en: '| `max x y` | PRE | We consider an arbitary legal application of `max`. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `max x y` | PRE | 我们考虑 `max` 的任意合法应用。 |'
- en: '| `(x+y+abs(y-x))/2` | PRE | Substitute the actuals for the formals in the
    function body. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `(x+y+abs(y-x))/2` | PRE | 在函数体中将形式参数替换为实际参数。 |'
- en: '| `(n1+abs(y-x))/2` | PRE n1 = x + y | x+y evaluates to some number n1\. PRE
    says that x and y are both less than half of min_int or max_int, so their sum
    must be a valid integer; therefore there can''t be overflow when they are added.
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `(n1+abs(y-x))/2` | PRE n1 = x + y | x+y 评估为某个数 n1。PRE 表示 x 和 y 都小于 min_int
    或 max_int 的一半，因此它们的和必须是一个有效的整数；因此当它们相加时不会发生溢出。 |'
- en: '| `(n1+abs(n2))/2` | PRE n1 = x + y'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '| `(n1+abs(n2))/2` | PRE n1 = x + y'
- en: n2 = y − x | y−x evaluates to some number n2\. Again, we can't have an overflow
    doing this subtraction. But now we don't know the result of `abs`. We use the
    spec of `abs`, but separately consider the cases where y ≥ x and where y < x.
    |
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: n2 = y − x | y−x 评估为某个数 n2。同样，我们在进行减法时不会发生溢出。但是现在我们不知道 `abs` 的结果。我们使用 `abs`
    的规范，但分别考虑了 y ≥ x 和 y < x 的情况。 |
- en: '| Case: y ≥ x |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 情况：y ≥ x |'
- en: '| `(n1+n2)/2` | PRE n1 = x + y'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '| `(n1+n2)/2` | PRE n1 = x + y'
- en: n2 = y − x
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: n2 = y − x
- en: y≥x | Since y≥x, abs(n2) = n2. |
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: y≥x | 由于 y≥x，abs(n2) = n2。 |
- en: '| `n3/2` | PRE n1 = x + y'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '| `n3/2` | PRE n1 = x + y'
- en: n2 = y − x
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: n2 = y − x
- en: y≥x
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: y≥x
- en: n3 = n1+n2 = 2y | n1+n2 = x+y + (y−x) = 2y. Because y ≤ max_int/2, we can't
    get an overflow here either. |
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: n3 = n1+n2 = 2y | n1+n2 = x+y + (y−x) = 2y。因为 y ≤ max_int/2，所以这里也不会发生溢出。 |
- en: '| `y` | PRE y≥x'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '| `y` | PRE y≥x'
- en: '| n1+n2 = x+y + (y−x) = 2y. Since y≥x, the answer we got (y) is the correct
    one according to the spec. Now we consider the other case, which is symmetrical.
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| n1+n2 = x+y + (y−x) = 2y。由于 y≥x，根据规范，我们得到的答案（y）是正确的。现在我们考虑另一种情况，这是对称的。 |'
- en: '| Case: y < x |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 情况：y < x |'
- en: '| `(n1+n2)/2` | PRE n1 = x + y'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '| `(n1+n2)/2` | PRE n1 = x + y'
- en: n2 = y − x
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: n2 = y − x
- en: y<x | Since y<x, abs(n2) = −n2 = x−y |
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: y<x | 由于 y<x，abs(n2) = −n2 = x−y |
- en: '| `n3/2` | PRE n1 = x + y'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '| `n3/2` | PRE n1 = x + y'
- en: n2 = y − x
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: n2 = y − x
- en: y<x
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: y<x
- en: n3 = n1−n2 = 2x | n1+n2 = x+y - (y−x) = 2x. Since x ≤ max_int/2, we can't get
    an overflow here either. |
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: n3 = n1−n2 = 2x | n1+n2 = x+y - (y−x) = 2x。由于 x ≤ max_int/2，所以这里也不会发生溢出。 |
- en: '| `x` | PRE y<x'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '| `x` | PRE y<x'
- en: '| n1+n2 = x+y - (y−x) = 2x. Because y<x, the answer we got (x) is the correct
    one according to the spec. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| n1+n2 = x+y - (y−x) = 2x。因为 y<x，根据规范，我们得到的答案（x）是正确的。 |'
- en: '| QED |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 证毕 | '
- en: 'The rule of the game here is that we can make an evaluation step on the left
    column as long as we have enough information in our assumptions to know what evaluation
    step is taken. And we can introduce fresh variables like n1, n2, n3 to represent
    unknown values that are computed. We can apply functions, such as `abs`, if their
    preconditions are satisfied. If we don''t have enough information in our current
    set of assumptions (the middle column), then we can break our analysis into a
    set of cases as long as the cases are exhaustive. An analysis by cases acts like
    a stack: each case is a separate assumption or assumptions that create a hypothetical
    world that we must reason about. The indenting in the table above indicates when
    we are in such a hypothetical world. Once we arrive at a result, we need to be
    able to show that result satisfies the postcondition, using information available
    in the current set of assumptions.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的游戏规则是，只要我们的假设中有足够的信息来知道采取了哪种评估步骤，我们就可以在左列上进行评估步骤。我们可以引入新的变量，如n1、n2、n3，来表示计算得到的未知值。如果满足它们的前提条件，我们可以应用函数，比如`abs`。如果我们在当前假设集中没有足够的信息（中间列），那么我们可以将我们的分析分解为一组情况，只要这些情况是穷尽的。按情况进行分析就像一个堆栈：每种情况都是一个单独的假设或假设，它们创建了一个我们必须进行推理的假设世界。上表中的缩进表示我们何时处于这样的假设世界中。一旦我们得出结果，我们需要能够证明该结果满足后置条件，使用当前假设集中可用的信息。
- en: Modular Verification
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块化验证
- en: In our proof that `max` met its spec, we assumed that the `abs` met *its* spec.
    This was good because we didn't have to look at the code of `abs`. This was an
    example of **modular verification**, in which we were able to verify one small
    unit of code at a time. Function specifications, abstraction functions, and rep
    invariants make it possible to verify modules one function at a time, without
    looking at the code of other functions. If modules have no cyclic dependencies,
    which OCaml enforces, then the proof of each module can be constructed assuming
    that every other module satisfies the specs in its interface. The proof of the
    entire software system is then built from the bottom up.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们证明`max`符合其规范时，我们假设`abs`符合了*它的*规范。这很好，因为我们不需要查看`abs`的代码。这是**模块化验证**的一个例子，我们能够一次验证一个小的代码单元。函数规范、抽象函数和表示不变量使得能够逐个函数验证模块，而无需查看其他函数的代码。如果模块之间没有循环依赖关系，这是OCaml所执行的，那么每个模块的证明都可以假定每个其他模块都满足其接口中的规范。整个软件系统的证明然后是自底向上构建的。
- en: Refinement
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 细化
- en: 'Sometimes one specification is stronger than another specification. For example,
    consider two possible specifications for `find`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有时一个规范比另一个规范更强。例如，考虑`find`的两种可能规范：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here specification B is strictly **stronger** than specification A: given a
    particular input to function as specified by B, the set of possible results or
    outcomes is smaller than it is for A. Compared to A, specification B reduces the
    amount of nondeterminism. In this case we say that specification B **refines**
    specification A. In general, specification B refines specification A if any implementation
    of B is a valid implementation of A.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 规范B比规范A严格**强大**：给定规范B指定的特定函数输入，可能结果或结果集较A小。与A相比，规范B减少了非确定性的数量。在这种情况下，我们说规范B**细化了**规范A。通常情况下，如果B的任何实现都是A的有效实现，则规范B细化了规范A。
- en: 'The interaction between refinement and preconditions can be confusing at first.
    Suppose that specifications A and B have the same postcondition (results clause),
    but specification A has a stronger precondition. In the example A above, we might
    require not only that x is in lst, but that it is in the list exactly once. In
    this case B still refines A: it has a stronger (more restrictive) postcondition
    and a *weaker* (less restrictive) precondition, which means that an implementation
    of B satisfies the spec of A. Thinking about this from the viewpoint of a client
    who expects A but actually gets B may be helpful. The client makes calls that
    satisfy A''s precondition, and therefore satisfy B''s precondition to. The client
    gets back results that satisfy B''s postcondition, and therefore satisfy A''s
    postcondition too.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，细化和前置条件之间的交互可能会令人困惑。假设规范 A 和 B 具有相同的后置条件（结果子句），但规范 A 具有更强的前置条件。在上面的例子 A
    中，我们可能要求 x 不仅在 lst 中，而且在列表中确切地出现一次。在这种情况下，B 仍然细化 A：它具有更强的（更具限制性的）后置条件和*较弱*的（不太具限制性的）前置条件，这意味着
    B 的实现满足 A 的规范。从期望 A 但实际上得到 B 的客户的角度考虑这一点可能会有所帮助。客户进行的调用满足 A 的前置条件，因此也满足 B 的前置条件。客户收到满足
    B 的后置条件的结果，因此也满足 A 的后置条件。
- en: 'There are other ways to refine a specification. For example, if specification
    A contains a requires clause, and specification B is identical but changes the
    requires clause to a checks clause, B refines A: it more precisely describes the
    behavior of the specified function.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他方式可以细化规范。例如，如果规范 A 包含一个要求子句，并且规范 B 与之相同但将要求子句更改为检查子句，则 B 细化 A：它更精确地描述了指定函数的行为。
- en: We can think of the actual code implementing the function as another specification
    of the computation to be performed. This implementation-derived specification
    must be at least as strong as the specification written in the comment; otherwise,
    the implementation may do things that the specification forbids. In other words,
    *any correct implementation must refine its specification*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将实际实现函数的代码视为要执行的计算的另一个规范。这个基于实现的规范必须至少和注释中编写的规范一样强；否则，实现可能会执行规范禁止的操作。换句话说，*任何正确的实现必须细化其规范*。
- en: Automatic verification
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动验证
- en: We've been looking at how to write human-readable specifications. It is possible
    to write specifications in a formal language that permits the computer to read
    them. These machine-readable specifications can be used to perform **formal verification**
    of the program. Using a formal specification, an automatic theorem prover can
    *prove* that the program as a whole actually does what it says it does. Formal
    program verification is an attractive technology because it can be used to guarantee
    that programs do not contain bugs!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在探讨如何编写易读的规范。可以使用形式语言编写允许计算机阅读的规范。这些机器可读的规范可用于对程序进行**形式验证**。利用形式规范，自动定理证明器可以*证明*整个程序实际上执行了它所说的。形式程序验证是一项吸引人的技术，因为它可以用来保证程序不包含错误！
