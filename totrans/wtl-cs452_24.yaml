- en: Lecture 24 - Reservations I
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Slightly improved p1.pdf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to Give a Demo
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Friday, 29 June, in class.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When you will give you demo
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tuesday, 3 July.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I will put a sign-up schedule in the lab with fifteen minute slots at different
    times on Tuesday morning. Choose which is the most convenient for you.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Route Finding
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First demo
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Afterwards
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to describe track locations
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Landmark plus XX centimetres
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Measurement procedures
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A landmark's position needs strong conventions about its local origin.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Multi-Train Control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By the end of the week-end you should be able to drive one train on the track,
    knowing exactly where it is.
  prefs: []
  type: TYPE_NORMAL
- en: '''Exactly'' means within a tolerance that you know.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the following milestone you will be able to control two trains at the same
    time. For each train
  prefs: []
  type: TYPE_NORMAL
- en: the train finds itself
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'you give it a destination: a destination is a location on the track'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the train starts travelling toward the destination
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: it reaches the destination without colliding with the other train
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: both trains move at the same time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: otherwise there is a trivial solution
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: it might be worth implementing the trivial solution as a start
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensor Attribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first hard problem occurs when you receive a sensor report. Which train
    triggered the sensor?
  prefs: []
  type: TYPE_NORMAL
- en: As long as the trains are sufficiently far apart this is not too hard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the meaning of `sufficiently' in practice?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensor attribution must function correctly in the face of single failures,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of sensors, or
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: of turn-outs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Collision Avoidance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This would not be too hard if the trains stopped instantaneously, but they don't.
  prefs: []
  type: TYPE_NORMAL
- en: You must plan ahead,
  prefs: []
  type: TYPE_NORMAL
- en: at least as long as it takes the two trains to stop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is usually your method of collision avoidance that limits the number of trains
    that can run simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: N trains start running.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, after a while they get frozen and won't move.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each is waiting for another to move.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If N is large freezing usually occurs because the route finder can't find a
    route for any train.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I like distributed solutions, where each train operates -- plans, drives, make
    decisions, etc -- as though there are no other trains on the track. Why do I like
    this?
  prefs: []
  type: TYPE_NORMAL
- en: The code is simple.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each task has a well-defined role. E.g.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track monitor knows the current state of the track.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Route planner uses track monitor input to provide a feasible route.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Train driver gets a route and follows it switching turn-outs ahead of itself
    as it drives.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Protocols for inter-task communication arise naturally from the roles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solutions usually scale well, as long as the track length grows at least
    linearly with the number of trains.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Reservations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Somebody has been doing something right for the last century. The answer is
    reservations.
  prefs: []
  type: TYPE_NORMAL
- en: Two Level Train Control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The two levels are completely independent of one another.
  prefs: []
  type: TYPE_NORMAL
- en: On heavily used sections of track the lower level is done completely by hardware
    with no possibility (almost) of human intervention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upper Level
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Train asks despatcher for a route
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Despatcher provides a route that he/she thinks to be conflict free
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Train follows the route, reporting back to the despatcher as landmarks (sensors)
    are passed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The despatcher gets two reports
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One from the hardware
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: One from the engineer
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It is up to the despatcher to make certain that they do not conflict.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What is to come on the route is communicated to the train driver by the lights
    along the track
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lower Level
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The lower level is encoded in the coloured lights you see along the track. In
    cases of conflict between the upper and lower levels, the lower level wins.
  prefs: []
  type: TYPE_NORMAL
- en: Everything is rigidly enforced by hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The human enters the loop only in that the lights tell the engineer what he/she
    is allowed to do
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The engineer loses his licence, FOREVER, if he/she ever goes through a red light.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the system detects a violation of its rules or a state that should never
    occur it enters a failsafe mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All lights go red.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Something Essential that You Must Do
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Design your reservation system before coding it.
  prefs: []
  type: TYPE_NORMAL
- en: Before coding your reservation system work it out on paper and make sure that
    it works for all the generic cases you can think of
  prefs: []
  type: TYPE_NORMAL
- en: One train following another
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Two trains on a collision course
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are one or more switches in the path
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
