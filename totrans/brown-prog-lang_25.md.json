["```\n    data ExprC:\n      | trueC\n      | falseC\n      | numC(n :: Number)\n      | plusC(l :: ExprC, r :: ExprC)\n      | multC(l :: ExprC, r :: ExprC)\n      | ifC(c :: ExprC, t :: ExprC, e :: ExprC)\n    end\n    ```", "```\ntrueC\n```", "```\ndata Value:\n  | numV(n :: Number)\n  | boolV(b :: Boolean)\nend\n```", "```\n| plusC(l, r) =>\n  numV(interp(l).n + interp(r).n)\n```", "```\ninterp(l).n\n```", "```\nfun arith-binop(op :: (Number, Number -> Number),\n    l :: ExprC,\n    r :: ExprC) -> Value:\n  l-v = interp(l)\n  r-v = interp(r)\n  if is-numV(l-v) and is-numV(r-v):\n    numV(op(l-v.n, r-v.n))\n  else:\n    raise('argument not a number')\n  end\nend\n```"]