- en: Observable wrapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Observable wrapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have just learned in [Observable Anatomy](observable-anatomy.html) that the
    key operators `next()` , `error()` and `complete` is what makes our Observable
    tick, if we define it ourselves. We have also learned that these methods triggers
    a corresponding callback on our subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping something in an observable means we take something that is NOT an Observable
    and turn it into one, so it can play nice with other Observables. It also means
    that it can now use [Operators](operators.html).
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping an ajax call
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Three things we need to do here `emit data`, `handle errors` and `close the
    stream`
  prefs: []
  type: TYPE_NORMAL
- en: Emit the data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Handle potential errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Close the stream
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping a speech audio API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Speech recognition stream
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This activates the microphone in the browser and records us
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This essentially sets up the speech recognition API. We wait for one response
    and after that we complete the stream, much like the first example with AJAX.
  prefs: []
  type: TYPE_NORMAL
- en: Note also that a function is defined for cleanup
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: so that we can call `speechRecognition.unsubscribe()` to clean up resources
  prefs: []
  type: TYPE_NORMAL
- en: Speech synthesis utterance, say
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is responsible for uttering what you want it to utter ( say ).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: main stream hey$
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Logic should be read as follows `heyClick$` is activated on a click on a button.
    `speechRecognition` is listening for what we say and sends that result into `heyClick$`
    where the switching logic determines an appropriate response that is uttered by
    `say` Observable.
  prefs: []
  type: TYPE_NORMAL
- en: all credit due to @ladyleet and @benlesh
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One easier Ajax wrapping and one a little more advanced Speech API has been
    wrapped into an Observable. The mechanics are still the same though: 1) where
    data is emitted, add a call to `next()` 2) if there is NO more data to emit call
    `complete` 3) if there is a need for it, define a function that can be called
    upon `unsubscribe()` 4) Handle errors through calling `.error()` in the appropriate
    place. (only done in the first example)'
  prefs: []
  type: TYPE_NORMAL
