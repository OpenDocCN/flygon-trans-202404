["```\nfun f(x, y):\n  if x:\n    y + 1\n  else:\n    y - 1\n  end\nend\n```", "```\nfun f(x :: Boolean, y :: Number): ...\n```", "```\nfun f(x :: ___, y :: ___): ...\n```", "```\nlam(x :: Number) -> String: x end\n```", "```\nlam(x): x end\n```", "```\nlam(x :: Number) -> Number: x end\n```", "```\ndata TyCon: tyeq(l :: TyCHS, r :: TyCHS) end\n\ndata TyCHS:\n  | t-expr(e :: TyExprC)\n  | t-con(name :: String, fields :: List<TyCHS>)\nend\n```", "```\nnumeric-t-con = t-con(\"num\", empty)\nboolean-t-con = t-con(\"bool\", empty)\nfun mk-fun-t-con(a, r):\n  t-con(\"fun\", [list: a, r])\nend\n```", "```\nfun generate-arith-binop(e :: TyExprC, l :: TyExprC, r :: TyExprC) -> List<TyCon>:\n  [list: tyeq(t-expr(e), numeric-t-con),\n    tyeq(t-expr(l), numeric-t-con),\n    tyeq(t-expr(r), numeric-t-con)] +\n  generate(l) +\n  generate(r)\nend\n```", "```\nfun subst(to-rep :: TyCHS%(is-t-expr), rep-with :: TyCHS, in :: List<TyCon>)\n    -> List<TyCon>:\n  cases (List) in:\n    | empty => empty\n    | link(f, r) =>\n      lhs = f.l\n      rhs = f.r\n      link(\n        tyeq(\n          if lhs == to-rep: rep-with else: lhs end,\n          if rhs == to-rep: rep-with else: rhs end),\n        subst(to-rep, rep-with, r))\n  end\nend\n```"]