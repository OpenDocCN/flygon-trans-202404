["```\n    struct lock l;\n    ...\n    lock_acquire(&l);\n    if (milk == 0) {\n      buy_milk();\n    }\n    lock_release(&l);\n\n    ```", "```\n        char buffer[SIZE];\n        int count = 0, putIndex = 0, getIndex = 0;\n        struct lock l;\n        lock_init(&l);\n\n        void put(char c) {\n            lock_acquire(&l);\n            count++;\n            buffer[putIndex] = c;\n            putIndex++;\n            if (putIndex == SIZE) {\n                putIndex = 0;\n            }\n            lock_release(&l);\n        }\n\n        char get() {\n            char c;\n            lock_acquire(&l);\n            count--;\n            c = buffer[getIndex];\n            getIndex++;\n            if (getIndex == SIZE) {\n                getIndex = 0;\n            }\n            lock_release(&l);\n            return c;\n        }\n\n        ```", "```\n        char buffer[SIZE];\n        int count = 0, putIndex = 0, getIndex = 0;\n        struct lock l;\n        lock_init(&l);\n\n        void put(char c) {\n            lock_acquire(&l);\n            while (count == SIZE) {\n                lock_release(&l);\n                lock_acquire(&l);\n            }\n            count++;\n            buffer[putIndex] = c;\n            putIndex++;\n            if (putIndex == SIZE) {\n                putIndex = 0;\n            }\n            lock_release(&l);\n        }\n\n        char get() {\n            char c;\n            lock_acquire(&l);\n            while (count == 0) {\n                lock_release(&l);\n                lock_acquire(&l);\n            }\n            count--;\n            c = buffer[getIndex];\n            getIndex++;\n            if (getIndex == SIZE) {\n                getIndex = 0;\n            }\n            lock_release(&l);\n            return c;\n        }\n\n        ```", "```\n    char buffer[SIZE];\n    int count = 0, putIndex = 0, getIndex = 0;\n    struct lock l;\n    struct condition dataAvailable;\n    struct condition spaceAvailable;\n\n    lock_init(&l);\n    cond_init(&dataAvailable);\n    cond_init(&spaceAvailable);\n\n    void put(char c) {\n        lock_acquire(&l);\n        while (count == SIZE) {\n            cond_wait(&spaceAvailable, &l);\n        }\n        count++;\n        buffer[putIndex] = c;\n        putIndex++;\n        if (putIndex == SIZE) {\n            putIndex = 0;\n        }\n        cond_signal(&dataAvailable, &l);\n        lock_release(&l);\n    }\n\n    char get() {\n        char c;\n        lock_acquire(&l);\n        while (count == 0) {\n            cond_wait(&dataAvailable, &l);\n        }\n        count--;\n        c = buffer[getIndex];\n        getIndex++;\n        if (getIndex == SIZE) {\n            getIndex = 0;\n        }\n        cond_signal(&spaceAvailable, &l);\n        lock_release(&l);\n        return c;\n    }\n\n    ```"]