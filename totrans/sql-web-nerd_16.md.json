["```\n> select patients.first_names, patients.last_name, stock_quotes.percent_change\n> from patients, employers, stock_quotes\n> where patients.employer_id = employers.employer_id\n> and employers.ticker_symbol = stock_quotes.ticker_symbol\n> and stock_quotes.percent_change < -0.10\n> order by stock_quotes.percent_change\n> \n> ```", "```\n> 10\\. NO RESALE OF SERVICE\n> \n> You agree not to reproduce, duplicate, copy, sell, resell or exploit for\n> any commercial purposes, any portion of the Service, use of the Service,\n> or access to the Service.\n> \n> ```", "```\n> call checker.stock_quotes( 0.5 )\n> \n> select patients.first_names, patients.last_name, stock_quotes.percent_change ...\n> \n> ```", "```\n> call checker.stock_quotes( 0.5, 'IBM' )\n> \n> ```", "```\n> create table stock_quotes (\n> \tticker_symbol\t\tvarchar(20) primary key,\n> \tlast_trade\t\tnumber,\n>         -- the time when the last trade occurred (reported by Yahoo)\n> \tlast_trade_time\t\tdate,\n> \tpercent_change \t\tnumber,\n>         -- the time when we pulled this data from Yahoo\n> \tlast_modified\t\tdate not null\t\n> );\n> \n> ```", "```\n> bash-2.03$ loadjava -user *username/password* -resolve -force StockUpdater.java\n>     ORA-29535: source requires recompilation\n>     StockUpdater:171: Class Perl5Util not found.\n>     StockUpdater:171: Class Perl5Util not found.\n>     StockUpdater:218: Class PatternMatcherInput not found.\n>     StockUpdater:218: Class PatternMatcherInput not found.\n>      Info: 4 errors\n> loadjava: 6 errors\n> bash-2.03$ \n> \n> ```", "```\n> bash-2.03$ loadjava -user *username/password* -resolve jakarta-oro-2.0.jar\n> bash-2.03$ loadjava -user *username/password* -resolve -force StockUpdater.java\n> bash-2.03$ \n> \n> ```", "```\n> SELECT RPAD(object_name,31) ||\n>        RPAD(object_type,14) ||\n>        RPAD(status,8)\n>        \"Java User Objects\"\n>   FROM user_objects\n>  WHERE object_type LIKE 'JAVA %';\n> \n> ```", "```\n> Java User Objects\n> ----------------------------------------------------\n> StockUpdater\t\t       JAVA CLASS    VALID\n> StockUpdater\t\t       JAVA SOURCE   VALID\n> org/apache/oro/text/awk/OrNode JAVA CLASS    VALID\n> org/apache/oro/text/regex/Util JAVA CLASS    VALID\n> org/apache/oro/util/Cache      JAVA CLASS    VALID\n> org/apache/oro/util/CacheFIFO  JAVA CLASS    VALID\n> ...\n> \n> ```", "```\n>     PROCEDURE stock_quotes_spec ( interval IN number )\n>       \tAS LANGUAGE JAVA\n>       \tNAME 'StockUpdater.checkAll( double )';\n> \n> ```", "```\n> CREATE OR REPLACE PACKAGE checker AS\n>     PROCEDURE stock_quotes( interval IN number );\n>     PROCEDURE stock_quotes( interval IN number, ticker_symbol IN varchar );\n> END checker;\n> /\n> show errors\n> \n> CREATE OR REPLACE PACKAGE BODY checker AS\n> \n>     -- Autonomous transaction wrappers\n>     PROCEDURE stock_quotes ( interval IN number )\n>     IS\n>         PRAGMA AUTONOMOUS_TRANSACTION;\n>     BEGIN\n>         stock_quotes_spec( interval );\n>     END;\n>     \n>     PROCEDURE stock_quotes ( interval IN number, ticker_symbol IN varchar )\n>     IS\n>         PRAGMA AUTONOMOUS_TRANSACTION;\n>     BEGIN\n>         stock_quotes_spec( interval, ticker_symbol );\n>     END;\n> \n>     -- Call specs\n>     PROCEDURE stock_quotes_spec ( interval IN number )\n>       \tAS LANGUAGE JAVA\n>       \tNAME 'StockUpdater.checkAll( double )';\n>     \n>     PROCEDURE stock_quotes_spec ( interval IN number, ticker_symbol IN varchar )\n>       \tAS LANGUAGE JAVA\n>       \tNAME 'StockUpdater.checkOne( double, java.lang.String )';\n> \n> END checker;\n> /\n> show errors\n> \n> ```", "```\n> // Standard Java2 classes, already included in Oracle\n> import java.sql.*;\n> import java.util.*;\n> import java.io.*;\n> import java.net.*;\n> \n> // Regular expression classes\n> import org.apache.oro.text.perl.*;\n> import org.apache.oro.text.regex.*;\n> \n> public class StockUpdater {\n> \n> ```", "```\n>     public static void checkAll( double interval ) \n>     throws SQLException {\n> \t\n> \t// Query the database for the ticker symbols that haven't\n> \t// been updated recently\n> \tString sql = new String( \"SELECT ticker_symbol \" +\n>                                  \"FROM stock_quotes \" +\n> \t\t\t\t \"WHERE (sysdate - last_modified) > \" + \n> \t\t\t\t    String.valueOf( interval ) );\n> \n> \t// Build a Java List of the ticker symbols\n> \n> \t// Use JDBC to execute the given SQL query.\n> \tConnection conn = getConnection();\n> \tStatement stmt = conn.createStatement();\n> \tstmt.execute( sql );\n> \tResultSet res = stmt.getResultSet();\n> \t\n> \t// Go through each row of the result set and accumulate a list\n> \tList tickerList = new ArrayList();\n> \twhile ( res.next() ) {\n> \t    String symbol = res.getString( \"ticker_symbol\" );\n> \t    if ( symbol != null ) {\n> \t\ttickerList.add( symbol );\n> \t    }\n> \t}\n> \tstmt.close();\n> \n> \tSystem.out.println( \"Found a list of \" + tickerList.size() + \" symbols.\");\n> \t\t\n> \t// Pass the List of symbols on to the fetcher\n> \tfetchList( tickerList );\n>     }\n> \n> ```", "```\n> SET SERVEROUTPUT ON\n> CALL dbms_java.set_output(5000);\n> \n> ```", "```\n>     public static void checkOne( double interval, String tickerSymbol ) \n>     throws SQLException {\n> \n>         // Set up a list in case we need it\n>         List tickerList = new ArrayList();\n> \ttickerList.add( tickerSymbol );\n> \n> \t// Query the database to see if there's recent data for this tickerSymbol\n> \tString sql = new String( \"SELECT \" +\n>                                  \"  ticker_symbol, \" +\n>                                  \"  (sysdate - last_modified) as staleness \" +\n> \t\t\t\t \"FROM stock_quotes \" +\n> \t\t\t\t \"WHERE ticker_symbol = '\" + tickerSymbol + \"'\");\n> \tConnection conn = getConnection();\n> \tStatement stmt = conn.createStatement();\n> \tstmt.execute( sql );\n> \tResultSet res = stmt.getResultSet();\n> \t\n> \tif ( res.next() ) {\n> \t    // A row came back, so the ticker is in the DB\n> \t    // Is the data recent?\n> \t    if ( res.getDouble(\"staleness\") > interval ) {\n> \t\t// Fetch fresh data\n> \t\tfetchList( tickerList );\n> \t    }\n> \n> \t} else {\n> \t    // The stock isn't in the database yet\n> \t    // Insert a blank entry\n> \t    stmt.executeUpdate( \"INSERT INTO stock_quotes \" +\n> \t\t\t\t\"(ticker_symbol, last_modified) VALUES \" +\n> \t\t\t\t\"('\" + tickerSymbol + \"', sysdate)\" );\n> \t    conn.commit();\n> \t    \n> \t    // Now refresh the blank entry to turn it into a real entry\n>             fetchList( tickerList );\n> \t}\n> \tstmt.close();\n>     }\n> \n> ```", "```\n>     /** Accepts a list of stock tickers and retrieves stock quotes from Yahoo Finance\n> \tat http://quote.yahoo.com/\n>     */\n>     private static void fetchList( List tickerList ) \n>     throws SQLException {\n> \t\n> \t// We need to pass Yahoo a string containing ticker symbols separated by \"+\"\n> \tString tickerListStr = joinList( tickerList, \"+\" );\n> \n> \tif ( tickerListStr.length() == 0 ) {\n> \t    // We don't bother to fetch a page if there are no ticker symbols\n> \t    System.out.println(\"Fetcher: no ticker symbols were supplied\");\n> \t    return;\n> \t}\n> \n> \ttry {\n> \t    // Go get the Web page\n> \t    String url = \"http://quote.yahoo.com/q?s=\" + tickerListStr;\n> \t    String yahooPage = getPage( url );\n> \n> ```", "```\n>             // ... continuing the definition of fetchList ...\n> \n> \t    // Get a regular expression matcher\n> \t    Perl5Util regexp = new Perl5Util();\n> \n> \t    // Break the page into sections using </table> tags as boundaries\n> \t    Vector allSections = regexp.split( \"/<\\\\/table>/\", yahooPage );\n> \n> \t    // Pick out the section which contains the word \"Symbol\"\n> \t    String dataSection = \"\";\n> \t    boolean foundSymbolP = false;\n> \t    Iterator iter = allSections.iterator();\n> \t    while ( iter.hasNext() ) {\n> \t\tdataSection = (String) iter.next();\n> \t\tif ( regexp.match( \"/<th.*?>Symbol<\\\\/th>/\", dataSection )) {\n> \t\t    foundSymbolP = true;\n> \t\t    break;\n> \t\t}\n> \t    }\n> \n> \t    // If we didn't find the section we wanted, throw an error\n> \t    if ( ! foundSymbolP ) {\n> \t\tthrow new SQLException( \"Couldn't find the word 'Symbol' in \" + url );\n> \t    }\n> \n> ```", "```\n> \t    OracleDate fetchDate = matchFetchDate( dataSection );\n> \t    if ( fetchDate == null ) {\n> \t\tthrow new SQLException(\"Couldn't find the date in \" + url);\n> \t    }\n> \t    System.out.println(\"The date appears to be: '\" + fetchDate.getDate() + \"'\");\t    \n> \n> ```", "```\n> \t    String update_sql = \"UPDATE stock_quotes SET \" + \n> \t\t\"last_trade = ?, \" +\n> \t\t\"last_trade_time = to_date(?, ?), \" +\n> \t\t\"percent_change = ?, \" +\n> \t\t\"last_modified = sysdate \" +\n> \t\t\"WHERE ticker_symbol = ? \";\n> \t    Connection conn = getConnection();\n> \t    PreparedStatement stmt = conn.prepareStatement( update_sql );\n> \n> ```", "```\n> \t    // Use a special object to make the regexp search run repeatedly\n> \t    PatternMatcherInput matchInput = new PatternMatcherInput( dataSection );\n> \n> \t    // Search for one table row after another\n> \t    while ( regexp.match( \"/<tr.*?>.*?\" +\n> \t\t\t\t  \"<td nowrap.*?>(.*?)<\\\\/td>.*?\" + \n> \t\t\t\t  \"<td nowrap.*?>(.*?)<\\\\/td>.*?\" + \n> \t\t\t\t  \"<td nowrap.*?>(.*?)<\\\\/td>.*?\" + \n> \t\t\t\t  \"<td nowrap.*?>(.*?)<\\\\/td>.*?\" + \n> \t\t\t\t  \"<td nowrap.*?>(.*?)<\\\\/td>.*?\" + \n> \t\t\t\t  \"<\\\\/tr>/s\" , matchInput )) {\n> \t\t// Save the regexp groups into variables\n> \t\tString tickerSymbol = regexp.group(1);\n> \t\tString timeStr = regexp.group(2);\n> \t\tString lastTrade = regexp.group(3);\n> \t\tString percentChange = regexp.group(5);\n> \n> \t\t// Filter the HTML from the ticker symbol\t\t\n> \t\ttickerSymbol = regexp.substitute(\"s/<.*?>//g\", tickerSymbol);\n> \t\tstmt.setString( 5, tickerSymbol );\n> \n> \t\t// Parse the time stamp\n> \t\tOracleDate quoteDate = matchQuoteDate( timeStr, fetchDate );\n> \t\tif ( quoteDate == null ) {\n> \t\t    throw new SQLException(\"Bad date format\");\n> \t\t}\n> \t\tstmt.setString( 2, quoteDate.getDate() );\n> \t\tstmt.setString( 3, quoteDate.getDateFormat() );\n> \t\t\n> \t\t// Parse the lastTrade value, which may be a fraction\n> \t\tstmt.setFloat( 1, parseFraction( lastTrade ));\n> \n> \t\t// Filter HTML out of percentChange, and remove the % sign\n> \t\tpercentChange = regexp.substitute( \"s/<.*?>//g\", percentChange);\n> \t\tpercentChange = regexp.substitute( \"s/%//g\", percentChange);\n> \t\tstmt.setFloat( 4, Float.parseFloat( percentChange ));\n> \n> \t\t// Do the database update\n> \t\tstmt.execute();\n> \t    }\n> \n> \t    stmt.close();\n>             // Commit the changes to the database\n> \t    conn.commit();\n> \n> \t} catch ( Exception e ) { \n> \t    throw new SQLException( e.toString() );\n> \t}\n>     } // End of the fetchList method\n> \n> ```", "```\n>     /** Fetch the text of a Web page using HTTP GET\n>      */\n>     private static String getPage( String urlString ) \n>     throws MalformedURLException, IOException {\n> \tURL url = new URL( urlString );\n> \tBufferedReader pageReader = \n> \t    new BufferedReader( new InputStreamReader( url.openStream() ) );\n> \tString oneLine;\n> \tString page = new String();\n> \twhile ( (oneLine = pageReader.readLine()) != null ) {\n> \t    page += oneLine + \"\\n\";\n> \t}\n> \treturn page;\n>     }\n> \n> ```", "```\n>     /** A class which represents Oracle timestamps. */\n>     private static class OracleDate {\n> \t/** A string representation of the date */\t\n> \tprivate String date;\n> \t/** The date format, in Oracle's notation */\n> \tprivate String dateFormat;\n> \n> \t/** Methods for accessing the date and the format */\n> \tString getDate() { return date; }\n> \tString getDateFormat() { return dateFormat; }\n> \tvoid setDate( String newDate ) { date = newDate; }\n> \tvoid setDateFormat( String newFormat ) { dateFormat = newFormat; }\n> \n> \t/** A constructor that builds a new OracleDate */\n> \tOracleDate( String newDate, String newFormat ) {\n> \t    setDate( newDate );\n> \t    setDateFormat( newFormat );\n> \t}    \t\n>     }\n> \n> ```", "```\n>     /** Search through text from a Yahoo quote page to find a date stamp */\n>     private static OracleDate matchFetchDate( String text ) {\n> \tPerl5Util regexp = new Perl5Util();\n> \n> \tif ( regexp.match(\"/<p>\\\\s*(\\\\S+\\\\s+\\\\S+\\\\s+\\\\d+\\\\s+\\\\d\\\\d\\\\d\\\\d)\\\\s+[0-9:]+[aApP][mM][^<]*<table>/\", text) ) {\n> \t    return new OracleDate( regexp.group(1), \"Day, Month DD YYYY\" );\n> \n> \t} else {\n> \t    return null;\n> \t}\n>     }\n> \t\n> \n>     /** Search through the time column from a single Yahoo stock quote\n> \tand set the time accordingly.  */\n>     private static OracleDate matchQuoteDate( String timeText, OracleDate fetchDate ) {\n> \tPerl5Util regexp = new Perl5Util();\n> \n> \tif ( regexp.match(\"/\\\\d?\\\\d:\\\\d\\\\d[aApP][mM]/\", timeText) ) {\n> \t    // When the time column of the stock quote doesn't include the day,\n> \t    // the day is pulled from the given fetchDate.\n> \t    String date = fetchDate.getDate() + \" \" + timeText;\n> \t    String format = fetchDate.getDateFormat() + \" HH:MIam\";\n> \t    return new OracleDate( date, format );\n> \n> \t} else if ( regexp.match(\"/[A-Za-z]+ +\\\\d\\\\d?/\", timeText )) {\n> \t    // After midnight but before the market opens, Yahoo reports the date\n> \t    // rather than the time. \n> \t    return new OracleDate( timeText, \"Mon DD\" );\n> \n> \t} else {\n> \t    return null;\n> \t}\n>     }\n> \n> ```", "```\n>     /** Convert some HTML from the Yahoo quotes page to a float, handling\n> \tfractions if necessary */\n>     private static float parseFraction( String s ) {\t\n> \tPerl5Util regexp = new Perl5Util();\n> \tif ( regexp.match( \"/^\\\\D+(\\\\d+)\\\\s*<sup>(\\\\d*)</sup>/<sub>(\\\\d*)</sub>/\", s)) {\n> \t    // There's a fraction\n> \t    float whole_num = Float.parseFloat( regexp.group(1) );\n> \t    float numerator = Float.parseFloat( regexp.group(2) );\n> \t    float denominator = Float.parseFloat( regexp.group(3) );\n> \t    return whole_num + numerator / denominator;\n> \t    \n> \t} else {\n> \t    // There is no fraction\n> \t    // strip the HTML and go\n> \t    return Float.parseFloat( regexp.substitute( \"s/<.*?>//g\", s) );\n> \t}\n>     }\n> \n> ```", "```\n>     public static Connection getConnection() \n>     throws SQLException {\n> \n> \tConnection conn;\n> \n> \t// In a real program all of these constants should \n> \t// be pulled from a properties file:\n> \tString driverClass = \"oracle.jdbc.driver.OracleDriver\";\n> \tString connectString = \"jdbc:oracle:oci8:@ora8i_ipc\";\n> \tString databaseUser = \"username\";\n> \tString databasePassword = \"password\";\n> \t\n> \ttry {\n> \t    // Figure out what environment we're running in\n> \t    if ( System.getProperty(\"oracle.jserver.version\") == null ) {\n> \t\t// We're not running inside Oracle\n> \t\tDriverManager.registerDriver( (java.sql.Driver) Class.forName(driverClass).newInstance() );\n> \t\tconn = DriverManager.getConnection( connectString, databaseUser, databasePassword );\n> \t\t\n> \t    } else {\n> \t\t// We're running inside Oracle\n> \t\tconn = DriverManager.getConnection( \"jdbc:default:connection:\" );\n> \t    }\n> \t    \n> \t    // The Oracle JVM automatically has autocommit=false,\n> \t    // and we want to be consistent with this if we're in an external JVM\n> \t    conn.setAutoCommit( false );\n> \t    \n> \t    return conn;\n> \n> \t} catch ( Exception e ) {\n> \t    throw new SQLException( e.toString() );\n> \t}\n>     }\n> \n> ```", "```\n>     /** This method allows us to call the class from the command line\n>      */\n>     public static void main(String[] args)\n>     throws SQLException {\n> \tif ( args.length == 1 ) {\n> \t    checkAll( Double.parseDouble( args[0] ));\n> \t} else if ( args.length == 2 ) {\n> \t    checkOne( Double.parseDouble(args[0]), args[1] );\n> \t} else {\n> \t    System.out.println(\"Usage: java StockUpdater update_interval [stock_ticker]\");\n> \t}\n>     }\n> \n> ```", "```\n>     /** Builds a single string by taking a list of strings\n>         and sticking them together with the given separator.\n> \tIf any of the elements of the list is not a String,\n>         an empty string in inserted in place of that element.\n>     */\n>     public static String joinList( List stringList, String separator ) {\n> \t\n> \tStringBuffer joinedStr = new StringBuffer();\n> \n> \tIterator iter = stringList.iterator();\n> \tboolean firstItemP = true;\t\n> \twhile ( iter.hasNext() ) {\t    \n> \t    if ( firstItemP ) {\n> \t\tfirstItemP = false;\n> \t    } else {\n> \t\tjoinedStr.append( separator );\n> \t    }\n> \n>             Object s = iter.next();\n>             if ( s != null && s instanceof String ) {\n>                 joinedStr.append( (String) s );\n>             }\n> \t}\n> \treturn joinedStr.toString();\n>     }\n> } // End of the StockUpdater class\n> \n> ```", "```\n> SQL> select ticker_symbol, last_trade,\n>      (sysdate - last_modified)*24 as hours_old\n>      from stock_quotes;\n> \n> TICKER_SYMBOL\t     LAST_TRADE  HOURS_OLD\n> -------------------- ---------- ----------\n> AAPL\t\t\t22.9375 3.62694444\n> IBM\t\t\t112.438 3.62694444\n> MSFT\t\t\t  55.25 3.62694444\n> \n> ```", "```\n> SQL> call checker.stock_quotes( 1/24 );\n> \n> Call completed.\n> \n> SQL> select ticker_symbol, last_trade,\n>      (sysdate - last_modified)*24 as hours_old\n>      from stock_quotes;\n> \n> TICKER_SYMBOL\t     LAST_TRADE  HOURS_OLD\n> -------------------- ---------- ----------\n> AAPL\t\t\t 23.625 .016666667\n> IBM\t\t\t114.375 .016666667\n> MSFT\t\t\t55.4375 .016666667\n> \n> ```", "```\n> SQL> call checker.stock_quotes( 1/24, 'INTC' );\n> \n> Call completed.\n> \n> SQL> select ticker_symbol, last_trade,\n>      (sysdate - last_modified)*24 as hours_old\n>      from stock_quotes;\n> \n> TICKER_SYMBOL\t     LAST_TRADE  HOURS_OLD\n> -------------------- ---------- ----------\n> AAPL\t\t\t 23.625 .156666667\n> IBM\t\t\t114.375 .156666667\n> MSFT\t\t\t55.4375 .156666667\n> INTC\t\t\t     42 .002777778\n> \n> ```"]