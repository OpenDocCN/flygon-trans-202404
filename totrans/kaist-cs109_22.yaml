- en: Image processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To process images such as photos, we need to be able to load photo files into
    an image object, read and set pixels values of the image, and save the image back
    into a photo file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the class [java.awt.image.BufferedImage](http://docs.oracle.com/javase/7/docs/api/java/awt/image/BufferedImage.html)
    to store image data. You can create such an object by saying:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can load an image from a file using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this call is a again a BufferedImage object. You can find the
    width and height of this image using the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can save an image object into a file using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'or, if you prefer PNG format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The pixels of a BufferedImage object can be read and changed using the getRGB
    and setRGB methods, see below.
  prefs: []
  type: TYPE_NORMAL
- en: Example script
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following small script reads a file photo.jpg, get its dimensions, creates
    a new empty image of the same size, copies the pixels from the old image img to
    the new image out (by mirroring them horizontally), draws a red line diagonally
    across the photo, and finally saves the new image in a file test.jpg ([image.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/90-image/image.kts)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Colors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The method getRGB(x: Int, y: Int): Int returns the color of the pixel at position
    (x, y), the method setRGB(x: Int, y: Int, color: Int) sets the color of this pixel.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Colors are represented as Int objects. The three components red, green, and
    blue are "packed" together into one integer. Each component has 8 bits, and therefore
    can have a value between 0 and 255\. The packed color is a 32-bit integer, whose
    bits look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The top 8 bits are either zero, or represent the "transparency" of the pixel.
    We will not use these transparency bits. The next 8 bits represent red, the next
    8 bits represent green, and the last 8 bits represent blue. This is why this representation
    is called "RGB".
  prefs: []
  type: TYPE_NORMAL
- en: 'Given red, green, and blue components with values in the range 0 to 255, we
    can pack them together like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Given a packed integer color, we can extract the three components as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: (The and operator here is the bitwise-and operator. It makes sure that only
    the bits we are interested in are used.)
  prefs: []
  type: TYPE_NORMAL
