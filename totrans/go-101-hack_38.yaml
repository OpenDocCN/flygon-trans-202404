- en: Unbuffered and buffered channels
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无缓冲和有缓冲的通道
- en: Unbuffered and buffered channels
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无缓冲和有缓冲的通道
- en: 'The channel is divided into two categories: unbuffered and buffered.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通道分为两类：无缓冲和有缓冲。
- en: (1) Unbuffered channel
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: (1) 无缓冲通道
- en: 'For unbuffered channel, the sender will block on the channel until the receiver
    receives the data from the channel, whilst the receiver will also block on the
    channel until sender sends data into the channel. Check the following example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于无缓冲通道，发送者会在通道上阻塞，直到接收者从通道接收数据，而接收者也会在通道上阻塞，直到发送者将数据发送到通道中。请查看以下示例：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The running result likes this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 运行结果如下：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After the `main` goroutine is launched, it will sleep immediately("`Main goroutine
    sleeps 2 seconds`" is printed), and this will cause `main` goroutine relinquishes
    the `CPU` to the `func` goroutine("`Func goroutine begins sending data`" is printed).
    But since the `main` goroutine is sleeping and can't receive data from the channel,
    so `ch <- 1` operation in `func` goroutine can't complete until `d := <- ch` in
    `main` goroutine is executed(The final `3` logs are printed).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动`main`协程之后，它会立即进入睡眠（打印"`Main goroutine sleeps 2 seconds`"），这会导致`main`协程让出`CPU`给`func`协程（打印"`Func
    goroutine begins sending data`"）。但由于`main`协程正在睡眠，无法从通道接收数据，所以`func`协程中的`ch <-
    1`操作无法完成，直到`main`协程中的`d := <- ch`被执行（打印最后的`3`条日志）。
- en: (2) Buffered channel
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: (2) 有缓冲通道
- en: 'Compared with unbuffered counterpart, the sender of buffered channel will block
    when there is **no** empty slot of the `channel`, while the receiver will block
    on the channel when it is empty. Modify the above example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与无缓冲通道相比，有缓冲通道的发送者将在`通道`没有空槽位时阻塞，而接收者将在通道为空时阻塞。修改上述示例：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The executing result is as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 执行结果如下：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this sample, since the channel has `2` slots, so the `func` goroutine will
    not block until it sends the third element.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，由于通道有`2`个槽位，所以`func`协程在发送第三个元素之前不会阻塞。
- en: P.S., "`make(chan int, 0)`" is equal to "`make(chan int)`", and it will create
    an unbuffered `int` channel too.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: P.S.，“`make(chan int, 0)`”等同于“`make(chan int)`”，它也会创建一个无缓冲的`int`通道。
