- en: Namespacing With Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模块进行命名空间
- en: Namespacing With Modules
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模块进行命名空间
- en: C++ namespaces allow you to group your functions, variables and classes into
    logical blocks and allow the compiler to disambiguate them from other functions,
    variables and classes that might otherwise have the same name.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 的命名空间允许你将函数、变量和类分组到逻辑块中，并允许编译器将它们与其他可能具有相同名称的函数、变量和类加以区分。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Namespacing in C++ is completely optional which means some code may use nest
    namespaces while other code may be content to cover its entire codebase with a
    single namespace. Some code might even put its code into the global namespace.
    Other code might control the use of namespaces with macros.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C++ 中，命名空间是完全可选的，这意味着某些代码可能会使用嵌套命名空间，而其他代码可能会满足于将其整个代码库放入一个命名空间中。有些代码甚至可能将其代码放入全局命名空间中。其他代码可能会使用宏来控制命名空间的使用。
- en: The equivalent to a namespace in Rust is a module and serves a similar purpose.
    Unlike C++ though you get namespacing automatically from the structure of your
    files. Each file is a module in its own right.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 中与命名空间相当的是模块，并且起着类似的作用。但与 C++ 不同的是，你可以从文件的结构中自动获得命名空间。每个文件本身就是一个模块。
- en: So if we may have a file myapp.rs
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我们可能有一个文件 myapp.rs
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Everything in myapp.rs is automatically a module called myapp. That means modules
    are implicit and you don't have to do anything except name your file something
    meaningful.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: myapp.rs 中的所有内容都会自动成为一个名为 myapp 的模块。这意味着模块是隐式的，你不需要做任何事情，只需给你的文件起一个有意义的名字。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You could also just bring in the whole of the mod if you like:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以选择将整个模块都引入进来：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or just the types and functions within it that you use:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 或者只是你使用的其中的类型和函数：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: But if you want an explicit module you may also write it in the code. So perhaps
    myapp doesn't justify being a separate file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你想要一个显式模块，你也可以在代码中编写它。所以也许 myapp 并不适合作为一个单独的文件。
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Modules can be nested so a combination of implicit modules (from file names)
    and explicit modules can be used together.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可以嵌套，因此可以同时使用隐式模块（来自文件名）和显式模块。
- en: Splitting modules across files
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨文件拆分模块
- en: Namespacing with modules is pretty easy, But sometimes you might have lots of
    files in a module and you don't want the outside world to see a single module
    namespace.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模块进行命名空间相当简单，但有时你可能有很多文件在一个模块中，而你不希望外界看到单个模块命名空间。
- en: In these cases you’re more likely to use the myapp/mod.rs form. In this instance
    the mod.rs file may pull
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，你更可能使用 myapp/mod.rs 形式。在这种情况下，mod.rs 文件可能会拉取
- en: in subordinate files
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在从属文件中
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, the module pulls in submodules `helpers` and `gui`. Neither
    is marked as `pub mod` so they are private to the module.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，模块引入了子模块 `helpers` 和 `gui`。两者都没有标记为 `pub mod`，所以它们对于模块来说是私有的。
- en: However the module also says `pub use helpers::Helper` which allows the outside
    to reference `myapp::Helper`. Thus a module can act as a gatekeeper to the things
    it references, keeping them private or selectively making parts public.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，模块还说 `pub use helpers::Helper`，这允许外部引用 `myapp::Helper`。因此，模块可以充当对其引用的事物的门卫，保持它们私有或选择性地公开部分内容。
- en: We haven't mentioned the other module here `tests`. The attribute `#[cfg(test)]`
    indicates it is only pulled in when a unit test executable is being built. The
    `cfg` attribute is used for [conditional compliation](https://doc.rust-lang.org/book/conditional-compilation.html).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有提到这里的另一个模块 `tests`。属性 `#[cfg(test)]` 表示它只在构建单元测试可执行文件时才被引入。`cfg` 属性用于[条件编译](https://doc.rust-lang.org/book/conditional-compilation.html)。
- en: Using a module
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模块
- en: Modules can be used once they are defined.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了之后就可以使用模块。
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that the use command is relative to the toplevel `main` or `lib` module.
    So if you declare a `mod helpers` at the top, then the corresponding `use helpers`
    will retrieve it. You can also use relative `use` commands with the `super` and
    `self` keywords.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，use 命令是相对于顶层 `main` 或 `lib` 模块的。所以如果你在顶部声明了一个 `mod helpers`，那么相应的 `use helpers`
    将会检索到它。你也可以使用相对 `use` 命令来使用 `super` 和 `self` 关键字。
- en: // TODOs
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: // TODOs
- en: Module aliasing
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块别名
- en: TODO
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: TODO
- en: External crates
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外部 crate
- en: TODO
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: TODO
