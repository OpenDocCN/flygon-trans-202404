- en: エントリーポイント
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://jsprimer.net/use-case/todoapp/entrypoint/](https://jsprimer.net/use-case/todoapp/entrypoint/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: エントリーポイントとは、アプリケーションの中で一番最初に呼び出される部分のことです。
  prefs: []
  type: TYPE_NORMAL
- en: 「[Ajax通信:エントリーポイント](../../ajaxapp/entrypoint/)」のユースケースでは、エントリーポイントはHTML（`index.html`）のみでした。
    まずHTMLが読み込まれ、次にHTMLの中に書かれている`script`要素で指定したJavaScriptファイルが読み込まれます。
  prefs: []
  type: TYPE_NORMAL
- en: 今回のTodoアプリはJavaScriptの処理をモジュール化し、それぞれのモジュールを別々のJavaScriptファイルとして作成していきます。 JavaScriptモジュールはHTMLから`<script
    type="module">`で読み込むことができますが、`script`要素ごとに別々のモジュールスコープを持ちます。 モジュールスコープとは、モジュールのトップレベルに自動的に作成されるスコープで、グローバルスコープの下に作られます。
    JavaScriptモジュールを別々の`script`要素で読み込むと、モジュール同士でスコープが異なるため、モジュール同士で連携できません。
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードは、それぞれの`<script type="module">`同士のスコープが異なるため、別の`script`要素で定義した変数にアクセスできないことを示しています。
    これはJavaScriptモジュールをファイルにして`src`属性で読み込んだ場合も同様です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: このようにモジュールを別々の`script`要素で扱うとモジュール同士は連携できません。 そのため、HTMLでは`script`要素で`index.js`のみを読み込み、この`index.js`から`import`文で他のモジュールを読み込みます。
    `import`文を使うことで、モジュール間は1つの`<script type="module">`のスコープ内に収まるため、モジュール同士で連携できます。
    このHTMLから読み込むJavaScriptファイル（`index.js`）をJavaScriptにおけるエントリーポイントとします。
  prefs: []
  type: TYPE_NORMAL
- en: つまり、今回作成するTodoアプリではエントリーポイントとしてHTMLとJavaScriptの2つを用意します。
  prefs: []
  type: TYPE_NORMAL
- en: '`index.html`: 最初に読み込まれるファイル、`index.js`を読み込む'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.js`: `index.html`から読み込まれるファイル、JavaScriptでは最初に読み込まれる'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: このセクションでは、この2つのエントリーポイントを作成して読み込むところまでを確認します。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#project-directory)*プロジェクトディレクトリを作成*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*今回作成するアプリには、HTMLやJavaScriptなど複数のファイルが必要となります。 そのため、まずそれらのファイルを置くためのディレクトリを作成します。'
  prefs: []
  type: TYPE_NORMAL
- en: ここでは`todoapp`という名前で新しいディレクトリを作成します。 ここからは作成した`todoapp`ディレクトリ以下で作業していきます。
  prefs: []
  type: TYPE_NORMAL
- en: またこのプロジェクトで作成するファイルは、必ず文字コード（エンコーディング）を**UTF-8**、改行コードを**LF**にしてファイルを保存します。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#preparing-html)*HTMLファイルの用意*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*エントリーポイントとして、まずは最低限の要素だけを配置したHTMLファイルを作成しましょう。 エントリーポイントとなるHTMLとして`index.html`を`todoapp`ディレクトリに作成し、次のような内容にします。
    `body`要素の一番下で`script`要素を使って読み込んでいる`index.js`が、今回のアプリケーションの処理を記述するJavaScriptファイルです。'
  prefs: []
  type: TYPE_NORMAL
- en: index.html
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 次に`index.js`を`todoapp`ディレクトリに作成し、次のような内容にします。 `index.js`にはスクリプトが正しく読み込まれたことを確認できるように、コンソールにログを出力する処理だけを書いておきます。
  prefs: []
  type: TYPE_NORMAL
- en: index.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: ここまでの`todoapp`ディレクトリのファイル配置は次のようになっています。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 次はこの`index.html`をブラウザで開いて、コンソールにログが出力されることを確認していきます。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#local-server)*ローカルサーバーでHTMLを確認する*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*ウェブブラウザで`index.html`を開く前に、開発用のローカルサーバーを準備します。 ローカルサーバーを立ち上げずに直接HTMLファイルを開くこともできますが、その場合`file:///`からはじまるURLになります。
    `file`スキーマでは[Same Origin Policy](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)により、JavaScriptモジュールが正しく動作しません。
    そのため、本章ではローカルサーバーを立ち上げた上で、`http`からはじまるURLでアクセスすることを前提としています。'
  prefs: []
  type: TYPE_NORMAL
- en: コマンドラインで`todoapp`ディレクトリへ移動し、次のコマンドでローカルサーバーを起動します。 `npx`コマンドを使って、この書籍用に作成された`@js-primer/local-server`というローカルサーバーモジュールをダウンロードと同時に実行します。
    まだ`npx`コマンドが用意できていなければ、先に「[アプリケーション開発の準備](../../setup-local-env/)」の章を参照してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '起動したローカルサーバーのURL（`http://localhost:3000`）へブラウザでアクセスしてみましょう。 ブラウザには`index.html`の内容が表示され、開発者ツールのコンソールに`index.js:
    loaded`というログが出力されていることが確認できます。'
  prefs: []
  type: TYPE_NORMAL
- en: '![Webコンソールにログが表示されている](../Images/c033f8a07de6770d0a4a364a4a65cebe.png)'
  prefs: []
  type: TYPE_IMG
- en: '[](#view-console-log-in-dev-tools)*開発者ツールでのコンソールログの確認方法*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Console APIで出力したログを確認するには、ウェブブラウザの開発者ツールを開く必要があります。 ほとんどのブラウザに開発者ツールが同梱されていますが、本章ではFirefoxを使って確認します。
    開発者ツールの**コンソール**タブを開くとConsole APIで出力したログを確認できます。'
  prefs: []
  type: TYPE_NORMAL
- en: Firefoxの開発者ツールは次のいずれかの方法で開きます。
  prefs: []
  type: TYPE_NORMAL
- en: Firefox メニュー（メニューバーがある場合や macOS では、ツールメニュー）の "ブラウザーツール"のサブメニューから "ウェブ開発ツール"
    を選択する
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: キーボードショートカット`Ctrl+Shift+K`（macOSでは`Command+Option+K`）を押下する
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 詳細は「[ブラウザーの開発者ツールとは？](https://developer.mozilla.org/ja/docs/Learn/Common_questions/What_are_browser_developer_tools)」を参照してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#error-not-display-console-log)*コンソールログが表示されない*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*HTMLは表示されるがコンソールログに`index.js: loaded`が表示されない場合は、次のような問題に該当してないかを確認してください。'
  prefs: []
  type: TYPE_NORMAL
- en: '[](#fail-to-load-javascript-module)*[エラー例] `index.js`の読み込みに失敗している*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*`script`要素の`src`属性に指定した`index.js`のパスにファイルが存在しているかを確認してください。 `<script type="module"
    src="index.js">`とした場合は`index.html`と`index.js`は同じディレクトリに配置する必要があります。'
  prefs: []
  type: TYPE_NORMAL
- en: また、*CORS policy Invalid*のようなエラーがコンソールに表示されている場合は、[Same Origin Policy](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)により`index.js`の読み込みが失敗しています。
    先ほども紹介したように、`file:`からはじまるページ上からはJavaScriptモジュールは正しく動作しません。 そのため、ローカルサーバーを起動し、ローカルサーバー（`http:`からはじまるURL）にアクセスしていることを確認してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#unsupport-javascript-module)*[エラー例] JavaScriptモジュールに非対応のブラウザを利用している*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*JavaScriptモジュールはまだ新しい機能であるため、バージョンが60以上のFirefoxが必要です。 バージョンが60未満のFirefoxでは、JavaScriptモジュールである`index.js`が読み込めないためコンソールログは出力されません。'
  prefs: []
  type: TYPE_NORMAL
- en: 今回のTodoアプリでは、ネイティブでJavaScriptモジュールに対応しているブラウザが必要です。 [Can I Use](https://caniuse.com/#feat=es6-module)にネイティブでJavaScriptモジュールに対応しているブラウザがまとめられています。
    非対応のブラウザでもBundlerと呼ばれるツールを使うことで対応できますが、本章では省略します。
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[](#module-entry-point)*モジュールのエントリーポイントの作成*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*最後にエントリーポイントとなる`index.js`から別のJavaScriptファイルをモジュールとして読み込んでみましょう。 このアプリではJavaScriptモジュールが複数登場するため`src/`というディレクトリを作り、`src/`の下にJavaScriptモジュールを書くことにします。
    今回は`src/App.js`というファイルを作成し、これを`index.js`からモジュールとして読み込みます。'
  prefs: []
  type: TYPE_NORMAL
- en: 次のようなファイル配置となるように`src/App.js`を作成します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`src/App.js`ファイルを作成し、次のような内容のJavaScriptモジュールとします。 `App.js`は`App`というクラスを名前つきエクスポートしているモジュールです。
    また、`App`クラスのコンストラクタにはコンソールログを出力するコードを確認用に書いておきます。'
  prefs: []
  type: TYPE_NORMAL
- en: src/App.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 次に、この`src/App.js`を`index.js`から利用するために`import`します。 `index.js`を次のように書き換え、`App.js`から`App`クラスをインポートしてインスタンス化します。
  prefs: []
  type: TYPE_NORMAL
- en: index.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 再度ローカルサーバーのURL（`http://localhost:3000`）にブラウザでアクセスし、リロードしてみましょう。 コンソールログには、次のように処理の順番どおりのログが出力されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: まず`index.js`から`src/App.js`が名前つきエクスポートしている`App`クラスを名前つきインポートしています。 次に`App`クラスがインスタンス化されていることがログから確認できます。
  prefs: []
  type: TYPE_NORMAL
- en: これでHTMLとJavaScriptそれぞれのエントリーポイントの作成と動作を確認できました。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#error-import-app-js)*App.jsの読み込みに失敗する*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*ここまでのJavaScriptモジュールの読み込みでエラーが発生して動かない場合には、次のことを確認します。'
  prefs: []
  type: TYPE_NORMAL
- en: ディレクトリ構造や`import`文で指定したファイルパスが異なると、ファイルを読み込むことができずにエラーとなってしまいます。 この場合は開発者ツールを開き、コンソールにエラーが出ていないかを確認してみてください。
  prefs: []
  type: TYPE_NORMAL
- en: '`import`文を使ったJavaScriptのモジュール読み込み時に起きる典型的なエラーと対処を次にまとめています。'
  prefs: []
  type: TYPE_NORMAL
- en: '[](#syntax-error-import-declarations)*[エラー例] SyntaxError: import declarations
    may only appear at top level of a module*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*「`import`宣言はモジュールのトップレベルでしか利用できません」というエラーが出ています。 このエラーが出ているということは、`import`文を使える条件を満たしていないということです。
    つまり、`import`文がトップレベルではないところに書かれている、またはモジュールではない実行コンテキストで実行されているということです。'
  prefs: []
  type: TYPE_NORMAL
- en: 関数の中などに`import`宣言していると、`import`宣言がトップレベルではないためエラーが発生します。 この場合は`import`文をトップレベル（プログラムの直下）に移動させてみてください。
  prefs: []
  type: TYPE_NORMAL
- en: モジュールではない実行コンテキストで実行されているというのは、裏を返せば実行コンテキストがScriptとなっているということです。 JavaScriptには実行コンテキストとしてScriptとModuleがあります。
    `import`文は実行コンテキストがModuleでないと利用できません。 そのため、`script`要素の`type`属性に`module`指定を忘れていないかをチェックしてみてください。
  prefs: []
  type: TYPE_NORMAL
- en: 実行コンテキストをモジュールとして実行するには`<script type="module" src="index.js">`のように`type=module`を指定する必要があります
    （`index.js`から`import`文で読み込んだ`App.js`は実行コンテキストを引き継ぐため、モジュールの実行コンテキストで処理されます）。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#fail-to-load-src-app)*[エラー例] モジュールのソース “[http://localhost:3000/src/App”](http://localhost:3000/src/App”)
    の読み込みに失敗しました。*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*`App.js`を読み込めないというエラーが出ています。 エラーメッセージをよく見ると`App`となっていて`App.js`ではありません。'
  prefs: []
  type: TYPE_NORMAL
- en: '`import`文では、読み込むファイルの拡張子を省略しません。 そのため、`App`のように拡張子（`.js`）を省略して書いている場合はこのエラーが発生します。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 正しくは次のように拡張子まで含めたパスを記述します。 また指定したパス（`./src/App.js`）にファイルが存在するかを確認してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[](#conclusion)*まとめ*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*このセクションでは、エントリーポイントとなるHTMLを作成し、JavaScriptモジュールのエントリーポイントとなるJavaScriptファイルを読み込むところまでを実装しました。'
  prefs: []
  type: TYPE_NORMAL
- en: '[](#section-checklist)*このセクションのチェックリスト*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**   `todoapp`という名前のプロジェクトディレクトリを作成した'
  prefs: []
  type: TYPE_NORMAL
- en: エントリーポイントとなる`index.html`を作成した
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScriptのエントリーポイントとなる`index.js`を作成し`index.html`から読み込んだ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ローカルサーバーを使って`index.html`を表示した
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/App.js`を作成し、`index.js`から`import`文で読み込めるのを確認した'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ここまでのTodoアプリは次のURLで確認できます。
  prefs: []
  type: TYPE_NORMAL
- en: '[https://jsprimer.net/use-case/todoapp/entrypoint/module-entry/](https://jsprimer.net/use-case/todoapp/entrypoint/module-entry/)*************'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
