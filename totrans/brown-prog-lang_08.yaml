- en: 8Collections of Structured Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|     [8.1 Lists as Collective Data](#%28part._.Lists_as_.Collective_.Data%29)
    |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
- en: '|     [8.2 Sets as Collective Data](#%28part._sets-as-collections%29) |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
- en: '|       [8.2.1 Picking Elements from Sets](#%28part._.Picking_.Elements_from_.Sets%29)
    |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
- en: '|       [8.2.2 Computing with Sets](#%28part._.Computing_with_.Sets%29) |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
- en: '|     [8.3 Combining Structured and Collective Data](#%28part._.Combining_.Structured_and_.Collective_.Data%29)
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
- en: 'As we were looking at structured data [[Introduction to Structured Data](intro-struct-data.html)],
    we came across several situations where we have not one but many data: not one
    song but a playlist of them, not one animal but a zoo full of them, not one notification
    but several, not just one message (how we wish!) but many in our inbox, and so
    on. In general, then, we rarely have just a single structured datum: One notable
    exception: consider the configuration or preference information for a system.
    This might be stored in a file and updated through a user interface. Even though
    there is (usually) only one configuration at a time, it may have so many pieces
    that we won’t want to clutter our program with a large number of variables; instead,
    we might create a structure representing the configuration, and load just one
    instance of it. In effect, what would have been unconnected variables now become
    a set of linked fields. if we know we have only one, we might just have a few
    separate variables representing the pieces without going to the effort of creating
    and taking apart a structure. In general, therefore, we want to talk about collections
    of structured. Here are more examples:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: The set of messages matching a tag.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of messages in a conversation.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The set of friends of a user.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do Now!
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How are collective data different from structured data?
  id: totrans-12
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: In structured data, we have a fixed number of possibly different kinds of values.
    In collective data, we have a variable number the same kind of value. For instance,
    we don’t say up front how many songs must be in a playlist or how many pages a
    user can have; but every one of them must be a song or a page. (A page may, of
    course, may be conditionally defined, but ultimately everything in the collection
    is still a page.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Observe that we’ve mentioned both sets and lists above. The difference between
    a set and a list is that a set has no order, but a list has an order. This distinction
    is not vital now but we will return to it later [REF].
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, sets and lists are not the only kinds of collective data we can
    have. Here are some more:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: A family tree of people.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The filesystem on your computer.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A seating chart at a party.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A social network of pages.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and so on. For the most part these are just as easy to program and manipulate
    as the earlier collective data once we have some experience, though some of them
    [REF] can involve more subtlety.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: We have already seen tables [[Introduction to Tabular Data](intro-tabular-data.html)],
    which are a form of collective, structured data. Now we will look at a few more,
    and how to program them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过表格了[[Introduction to Tabular Data](intro-tabular-data.html)], 这是一种集体的、结构化的数据形式。现在我们将看一些更多的例子，以及如何对它们进行编程。
- en: 8.1Lists as Collective Data
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.1 列表作为集体数据
- en: 'We have already seen one example of a collection in some depth before: lists.
    A list is not limited to numbers or strings; it can contain any kind of value,
    including structured ones. For instance, using our examples from earlier [[Defining
    and Creating Structured Data](intro-struct-data.html#%28part._struct-data-eg%29)],
    we can make a list of songs:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经深入研究了一个集合的例子：列表。列表不仅限于数字或字符串；它可以包含任何类型的值，包括结构化的值。例如，使用我们之前的例子[[Defining
    and Creating Structured Data](intro-struct-data.html#%28part._struct-data-eg%29)],
    我们可以制作一个歌曲列表：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is a three-element list where each element is a song:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含三个元素的列表，每个元素都是一首歌曲：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Thus, what we have seen earlier about building functions over lists [[Processing
    Lists](processing-lists.html)] applies here too. To illustrate, suppose we wish
    to write the function oldest-song-age, which consumes a list of songs and produces
    the oldest song in the list. (There may be more than one song from the same year;
    the age—<wbr>by our measure—<wbr>of all those songs will be the same. If this
    happens, we just pick one of the songs from the list. Because of this, however,
    it would be more accurate to say “an” rather than “the” oldest song.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们之前看到的关于在列表上构建函数的内容[[Processing Lists](processing-lists.html)] 在这里也适用。举例说明，假设我们希望编写函数oldest-song-age，它接受一个歌曲列表并产生列表中最老的歌曲。（可能有多首来自同一年的歌曲；按照我们的标准，这些歌曲的年龄将是相同的。如果发生这种情况，我们只需从列表中选择一首歌曲。然而，由于这个原因，更准确地说“一个”而不是“最老的”歌曲。）
- en: Let’s work through this with examples. To keep our examples easy to write, instead
    of writing out the full data for the songs, we’ll refer to them just by their
    variable names. Clearly, the oldest song in our list is bound to lvar.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过例子来详细说明。为了使我们的例子易于编写，我们将仅通过它们的变量名来引用歌曲，而不是写出歌曲的完整数据。显然，我们列表中最老的歌曲是绑定到lvar的。
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'What do we write in the last case? Recall that we saw this problem earlier
    [[my-max: Examples](processing-lists.html#%28part._my-max%29)]: there is no answer
    in the empty case. In fact, the computation here is remarkably similar to that
    of my-max, because it is essentially the same computation, just asking for the
    minimum year (which would make the song the oldest).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '在最后一种情况下我们写什么？回想一下我们之前看到这个问题[[my-max: Examples](processing-lists.html#%28part._my-max%29)]:
    空情况下没有答案。实际上，这里的计算与my-max的计算非常相似，因为本质上是相同的计算，只是询问最小年份（这将使歌曲最老）。'
- en: From our examples, we can see a solution structure echoing that of my-max. For
    the empty list, we signal an error. Otherwise, we compute the oldest song in the
    rest of the list, and compare its year against that of the first. Whichever has
    the older year is the answer.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的例子中，我们可以看到一个解决方案结构与my-max相似。对于空列表，我们发出一个错误信号。否则，我们计算列表中其余歌曲中最老的歌曲，并将其年份与第一个歌曲的年份进行比较。年份较老的那首歌曲就是答案。
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that there is no guarantee there will be only oldest song, and this is
    reflected in the possibility that osr.year may equal f.year. However, our problem
    statement allowed us to pick just one such song, which is what we’ve done.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，不能保证只有最老的歌曲，这在osr.year可能等于f.year的情况中反映出来。然而，我们的问题陈述允许我们选择一首这样的歌曲，这就是我们所做的。
- en: Do Now!
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在开始！
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Modify the solution above to oldest-song-age, which computes the age of the
    oldest song(s).
  id: totrans-36
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 修改上面的解决方案为oldest-song-age，计算最老歌曲的年龄。
- en: 'Haha, just kidding! You shouldn’t modify the previous solution at all! Instead,
    you should leave it alone—<wbr>it may come in handy for other purposes—<wbr>and
    instead build a new function to use it:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 哈哈，开玩笑的！你不应该修改之前的解决方案！相反，你应��保持不变—<wbr>它可能对其他目的有用—<wbr>而是构建一个新的函数来使用它：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 8.2Sets as Collective Data
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.2 集合作为集体数据
- en: 'As we’ve already seen, for some problems we don’t care about the order of inputs,
    nor about duplicates. Here are more examples where we don’t care about order or
    duplicates:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，对于一些问题，我们不关心输入的顺序，也不关心重复。以下是更多我们不关心顺序或重复的例子：
- en: Your Web browser records which Web pages you’ve visited, and some Web sites
    use this information to color visited links differently than ones you haven’t
    seen. This color is typically independent of how many times you have visited the
    page.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的网络浏览器记录了你访问过的网页，一些网站利用这些信息将已访问的链接着色与未访问的链接区分开。这种颜色通常与你访问页面的次数无关。
- en: During an election, a poll agent might record that you have voted, but does
    not need to record how many times you have voted, and does not care about the
    order in which people vote.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在选举期间，一名投票代理可能会记录你已经投票，但不需要记录你投票的次数，并且不关心人们投票的顺序。
- en: 'For such problems a list is a bad fit relative to a set. Here we will see how
    Pyret’s built-in sets work. Later [[Sets Appeal](set-representations.html)] we
    will see how we can build sets for ourselves.First, we can define sets just as
    easily as we can lists:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样的问题，相对于列表，列表是一个不合适的选择。在这里我们将看到 Pyret 内置的集合是如何工作的。稍后我们将看到如何为自己构建集合。首先，我们可以像定义列表一样轻松地定义集合：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Of course, due to the nature of the language’s syntax, we have to list the elements
    in some order. Does it matter?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，由于语言语法的性质，我们必须以某种顺序列出元素。这重要吗？
- en: Do Now!
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就做！
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How can we tell whether Pyret cares about the order?
  id: totrans-48
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们如何判断 Pyret 是否在意顺序？
- en: 'Here’s the simplest way to check:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是检查的最简单方法：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we want to be especially cautious, we can write down all the other orderings
    of the elements as well, and see that Pyret doesn’t care.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要特别谨慎，我们可以写下所有其他元素的排序方式，并查看 Pyret 是否在意。
- en: Exercise
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How many different orders are there?
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有多少种不同的顺序？
- en: 'Similarly for duplicates:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于重复的情况也是一样：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can again try several different kinds of duplication and confirm that sets
    ignore them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以再次尝试几种不同类型的重复，并确认集合会忽略它们。
- en: 8.2.1Picking Elements from Sets
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.2.1 从集合中选择元素
- en: This lack of an ordering, however, poses a problem. With lists, it was meaningful
    to talk about the “first” and corresponding “rest”. By definition, with sets there
    is not “first” element. In fact, Pyret does not even offer fields similar to first
    and rest. In its place is something a little more accurate but complex.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种无序性带来了一个问题。对于列表，谈论“第一个”和相应的“其余部分”是有意义的。根据定义，对于集合来说没有“第一个”元素。事实上，Pyret 甚至没有类似于
    first 和 rest 的字段。取而代之的是一些更准确但复杂的东西。
- en: The function set-pick returns a random element of a set. It produces a value
    of type Pick (which we get from the pick library). When we pick an element, there
    are two possibilities. One is that the set is empty (analogous to a list being
    empty), which gives us a pick-none value. The other option is called pick-some,
    which gives us an actual member of the set.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 set-pick 返回集合的随机元素。它产生一个 Pick 类型的值（我们从 pick 库中获取）。当我们选择一个元素时，有两种可能性。一种是集合为空（类似于列表为空），这会给我们一个
    pick-none 值。另一种选择是称为 pick-some，它给我们一个实际的集合成员。
- en: 'The pick-some variant of Pick has two fields, not one. To understand why takes
    a moment’s work. Let’s explore it by choosing an element of a set:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Pick 的 pick-some 变体有两个字段，而不是一个。要理解原因需要花一点时间。让我们通过选择集合中的一个元素来探索一下：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: (Notice that we aren’t using the r field in the pick-some case.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: （注意，在 pick-some 情况下我们没有使用 r 字段。）
- en: Do Now!
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就做！
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Can you guess why we didn’t write examples for an-elt?
  id: totrans-66
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你能猜到为什么我们没有为 an-elt 写例子吗？
- en: Do Now!
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就做！
- en: ''
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Run an-elt(song-set). What element do you get?
  id: totrans-69
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 运行 an-elt(song-set)。你得到了什么元素？
- en: ''
  id: totrans-70
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Run it again. Run it five more times.
  id: totrans-71
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 再次运行。再运行五次。
- en: ''
  id: totrans-72
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Do you get the same element every time?
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每次都得到相同的元素吗？
- en: 'No you don’t!Well, actually, it’s impossible to be certain you don’t. There
    is a very, very small likelihood you get the exact same element on every one of
    six runs. If it happens to you, keep running it more times! Pyret is designed
    to not always return the same element when picking from a set. This is on purpose:
    it’s to drive home the random nature of choosing from a set, and to prevent your
    program from accidentally depending on a particular order that Pyret might use.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不，你没有！嗯，实际上，无法确定你没有。有极小的可能性你在六次运行中每次都得到完全相同的元素。如果这种情况发生在你身上，继续运行更多次！Pyret 设计为在从集合中选择时不总是返回相同的元素。这是有意为之的：它是为了强调从集合中选择的随机性，并防止你的程序意外依赖
    Pyret 可能使用的特定顺序。
- en: Do Now!
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就做！
- en: ''
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Given that an-elt does not return a predictable element, what if any tests can
    we write for it?
  id: totrans-77
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 鉴于 an-elt 不返回可预测的元素，我们能为它写什么测试呢？
- en: Observe that though we can’t predict which element an-elt will produce, we do
    not it will produce an element of the set. Therefore, what we can write are tests
    that ensure the resulting element is a member of the set—<wbr>though in this case,
    that would not be particularly surprising.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 8.2.2Computing with Sets
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once we have picked an element from a set, it’s often useful to obtain the
    set consisting of the remaining elements. We have already seen that choosing the
    first field of a pick-some is similar to taking the “first” of a set. We therefore
    want a way to get the “rest” of the set. However, we want the rest to what we
    obtain after excluding this particular “first”. That’s what the second field of
    a pick-some is: what’s left of the set.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Given this, we can write functions over sets that look roughly analogous to
    functions over lists. For instance, suppose we want to compute the size of a set.
    The function looks similar to my-len [[Some Example Exercises](processing-lists.html#%28part._my-len%29)]:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Though the process of deriving this is similar to that we used for my-len, the
    random nature of picking elements makes it harder to write examples that the actual
    function’s behavior will match.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 8.3Combining Structured and Collective Data
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the above examples illustrate, a program’s data organization will often involve
    multiple kinds of compound data, often deeply intertwined. Let’s first think of
    these in pairs.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Come up with examples that combine:'
  id: totrans-88
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-89
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: structured and conditional data,
  id: totrans-90
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  id: totrans-91
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-92
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: structured and collective data, and
  id: totrans-93
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  id: totrans-94
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-95
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: conditional and collective data.
  id: totrans-96
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  id: totrans-97
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-98
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-99
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: You’ve actually seen examples of each of these above. Identify them.
  id: totrans-100
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Finally, we might even have all three at once. For instance, a filesystem is
    usually a list (collective) of files and folders (conditional) where each file
    has several attributes (structured). Similarly, a social network has a set of
    pages (collective) where each page is for a person, organization, or other thing
    (conditional), and each page has several attributes (structured). Therefore, as
    you can see, combinations of these arise naturally in all kinds of applications
    that we deal with on a daily basis.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Take three of your favorite Web sites or apps. Identify the kinds of data they
    present. Classify these as structured, conditional, and collective. How do they
    combine these data?
  id: totrans-104
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
