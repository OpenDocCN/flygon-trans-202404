["```\nx ::= y z     an x is a y followed by a z \n```", "```\nx ::= y*      an x is zero or more y \n```", "```\nx ::= y | z     an x is a y or a z \n```", "```\nx ::=  y?      an x is a y or is the empty sentence\n```", "```\nx ::= y+       an x is one or more y\n               (equivalent to  x ::= y y* )\n```", "```\nx ::= [abc]  is equivalent to  x ::= 'a' | 'b' | 'c' \n\nx ::= [^b]   is equivalent to  x ::= 'a' | 'c' | 'd' | 'e' | 'f' \n                                         | ... (all other characters)\n```", "```\nx ::=  (y z | a b)*   an x is zero or more y-z or a-b pairs\n```", "```\nS ::= (B C)* T\nB ::= M+ | P B P\nC ::= B | E+\n```", "```\nroot ::= 'a'+ 'b'* 'c'?\n```", "```\nroot    ::= integer ('-' integer)+\ninteger ::= [0-9]+\n```", "```\nroot   ::= (A B)+\nA      ::= [Aa]\nB      ::= [Bb]\n```", "```\nhttp://mit.edu/\n```", "```\nurl ::= 'http://mit.edu/'\n```", "```\nhttp://stanford.edu/\nhttp://google.com/\n```", "```\nurl ::= 'http://' [a-z]+ '.' [a-z]+  '/'\n```", "```\nurl ::= 'http://' hostname '/'\nhostname ::= word '.' word\nword ::= [a-z]+\n```", "```\nhttp://didit.csail.mit.edu:4949/\n```", "```\nurl ::= 'http://' hostname (':' port)? '/' \nhostname ::= word '.' hostname | word '.' word\nport ::= [0-9]+\nword ::= [a-z]+\n```", "```\nhostname ::= (word '.')+ word\n```", "```\nhttps://websis.mit.edu/\nftp://ftp.athena.mit.edu/\n```", "```\nptth://web.mit.edu/\nmailto:bitdiddle@mit.edu\n```", "```\nurl ::= protocol '://' hostname (':' port)? '/' \nprotocol ::= TODO\nhostname ::= word '.' hostname | word '.' word\nport ::= [0-9]+\nword ::= [a-z]+\n```", "```\nThis is _italic_.\n```", "```\nHere is an <i>italic</i> word.\n```", "```\nmarkdown ::=  ( normal | italic ) *\nitalic ::= '_' normal '_'\nnormal ::= text\ntext ::= [^_]*\n```", "```\nhtml ::=  ( normal | italic ) *\nitalic ::= '<i>' html '</i>'\nnormal ::= text\ntext ::= [^<>]*\n```", "```\nurl ::= 'http://' ([a-z]+ '.')+ [a-z]+ (':' [0-9]+)? '/' \n```", "```\nmarkdown ::= ([^_]* | '_' [^_]* '_' )*\n```", "```\nhtml ::=  ( [^<>]* | '<i>' html '</i>' )*\n```", "```\n([^_]*|_[^_]*_)*\n```", "```\n.       any single character\n\n\\d      any digit, same as [0-9]\n\\s      any whitespace character, including space, tab, newline\n\\w      any word character, including letters and digits\n\n\\., \\(, \\), \\*, \\+, ...\n        escapes an operator or special character so that it matches literally\n```", "```\nhttp://([a-z]+\\.)+[a-z]+(:[0-9]+)/\n```", "```\n[A-G]+(\u266d|\u266f)?\n```", "```\nString singleSpacedString = string.replaceAll(\" +\", \" \");\n```", "```\nPattern regex = Pattern.compile(\"http://([a-z]+\\\\.)+[a-z]+(:[0-9]+)?/\");\nMatcher m = regex.matcher(string);\nif (m.matches()) {\n    // then string is a url\n}\n```", "```\nPattern regex = Pattern.compile(\"<a href=['\\\"]([^']*)['\\\"]>\");\nMatcher m = regex.matcher(string);\nif (m.matches()) {\n    String url = m.group(1); \n    // Matcher.group(n) returns the nth parenthesized part of the regex\n}\n```", "```\nString input = \"The <b>Good</b>, the <i>Bad</i>, and the <strong>Ugly</strong>\";\nString regex = \"TODO\";\nString output = input.replaceAll(regex, \"\");\n```", "```\nstatement ::= \n  '{' statement* '}'\n| 'if' '(' expression ')' statement ('else' statement)?\n| 'for' '(' forinit? ';' expression? ';' forupdate? ')' statement\n| 'while' '(' expression ')' statement\n| 'do' statement 'while' '(' expression ')' ';'\n| 'try' '{' statement* '}' ( catches | catches? 'finally' '{' statement* '}' )\n| 'switch' '(' expression ')' '{' switchgroups '}'\n| 'synchronized' '(' expression ')' '{' statement* '}'\n| 'return' expression? ';'\n| 'throw' expression ';' \n| 'break' identifier? ';'\n| 'continue' identifier? ';'\n| expression ';' \n| identifier ':' statement\n| ';'\n```"]