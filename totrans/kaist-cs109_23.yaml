- en: Drawing images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To draw something, you first need a canvas to draw on. We will use [java.awt.image.BufferedImage](http://docs.oracle.com/javase/7/docs/api/java/awt/image/BufferedImage.html),
    a bitmapped image that you create by providing the desired width and height in
    pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Then we use a small package I've written to draw to this image. (You could of
    course use standard java.awt functions for doing this. But the java.awt interface
    is somewhat old-fashioned, and using the cs109ui package has the advantage that
    you can later reuse the exact same drawing code in Javascript and on Android.)
  prefs: []
  type: TYPE_NORMAL
- en: When you are done drawing, you can save the image to a file using the javax.imageio.ImageIO.write
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a complete example that shows some drawing functions ([drawing.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/92-drawing/drawing.kts)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated drawing looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The resulting drawing](../Images/9e5f240218f16e02ef1d2f847608e6af.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Colors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Colors are specified using an org.otfried.cs109.Color object. There are some
    predefined colors:'
  prefs: []
  type: TYPE_NORMAL
- en: Color.BLACK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.BLUE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.CYAN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.DARK_GRAY
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.GRAY
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.GREEN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.LIGHT_GRAY
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.MAGENTA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.ORANGE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.PINK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.RED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.WHITE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color.YELLOW
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create another color, provide its red, green, and blue components, as integers
    between 0 and 255:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also construct a color from a 24-bit integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Drawing style
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Every shape can be drawn in two ways: either as a filled shape, or by drawing
    with a "pen" along the outline of the shape (or both).'
  prefs: []
  type: TYPE_NORMAL
- en: You select the drawing style with one of the constants
  prefs: []
  type: TYPE_NORMAL
- en: DrawStyle.STROKE to draw the outline of the shape (in this case the line width
    is important);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DrawStyle.FILL to fill the shape (this is the default and can always be omitted);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DrawStyle.STROKE_AND_FILL to do both.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text font and alignment
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To draw text, you need to set a font on the ImageCanvas using setFont. You
    can just provide a point size like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'or set a different typeface by using one of the standard names "Monospaced",
    "Serif", or "SansSerif", or the name of a real font installed on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When calling drawText, you have the choice to align the text at its left edge,
    the right edge, or its horizontal center. The alignment is selected with the constants
  prefs: []
  type: TYPE_NORMAL
- en: TextAlign.LEFT (this is the default and can be omitted);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TextAlign.CENTER;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TextAlign.RIGHT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ImageCanvas
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The org.otfried.cs109ui.ImageCanvas object does all the drawing. You can use
    its width and height properties to inquire the size of the canvas (but of course
    you can also check the original BufferedImage).
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic methods of ImageCanvas are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'clear(c: Color) clears the entire canvas to the given color;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'setColor(color: Color) sets the color for future drawing operations (see above
    for the Color type);'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'setLineWidth(width: Double) sets the pen width for outline drawing;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'drawRectangle(x: Double, y: Double, width: Double, height: Double, s: DrawStyle)
    draws a rectangle;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'drawCircle(x: Double, y: Double, radius: Double, s: DrawStyle) draws a circle
    with center at \((x,y)\) and radius \(r\);'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'setFont(size: Double, face: String) sets the font for text drawing operations
    (see examples above);'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'drawText(text: String, x: Double, y: Double, a: TextAlign) draws the string
    aligned at position \((x, y)\);'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: done() it is recommended to call this method when you are done with drawing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More complicated shapes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To draw shapes other than rectangles and circles, you need to use the shape
    methods of ImageCanvas:'
  prefs: []
  type: TYPE_NORMAL
- en: You describe the shape by walking along the outline. First, call beginShape(),
    then moveTo(x, y) to go to the starting point of the outline. Now make a sequence
    of lineTo(x, y) calls to describe the boundary of the shape. You can complete
    the outline by calling closePath(), this returns to the starting point (which
    you set when you called moveTo(x, y)). For filled shapes you normally want to
    call closePath, for outlined (stroked) shapes it depends if you want the shape
    to be a closed curve or not.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, call drawShape to draw the shape.
  prefs: []
  type: TYPE_NORMAL
- en: Transformations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can modify the coordinate system to make it easier to specify your objects:'
  prefs: []
  type: TYPE_NORMAL
- en: 'translate(x: Double, y: Double) makes the point \((x, y)\) the origin of the
    new coordinate system;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'rotate(degrees: Double) rotates the coordinate system clockwise;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'scale(sx: Double, sy: Double) scales the coordinate system in the \(x\)- and
    \(y\)-direction (so calling scale(2.0, 2.0) doubles the size of your drawing).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Often you only want to modify the coordinate system temporarily, and return
    to the original coordinate system when you are done with some part of the drawing
    (see the quadrilateral in the code above). This is achieved by calling save()
    before changing the coordinate system, and restore() when you want to return to
    the previous settings.
  prefs: []
  type: TYPE_NORMAL
- en: Transparency
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Normally, shapes that are drawn later cover shapes that have been drawn before
    (the so-called "painter's model" of computer graphics).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you can call setAlpha(alpha) to set a transparency for future drawing
    operations. When alpha == 255, drawing is opaque and completely covers what was
    drawn before. When alpha == 128, you are drawing with 50% transparency: The result
    is a blend of half the original color and half the newly drawn color.'
  prefs: []
  type: TYPE_NORMAL
- en: Measuring text
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The method textWidth(text: String) returns the width of the text if you were
    to draw it now with the current transformation and font settings.'
  prefs: []
  type: TYPE_NORMAL
