["```\n(define #t (lambda (x y) x))(define #f (lambda (x y) y))\n```", "```\n(define if (lambda (c t e) (c t e)))\n```", "```\n(+ '1 '2)\n```", "```\n(if #t (+ 4 5) (+ 1 2))\n```", "```\n(if #f ((lambda (x) (x x)) (lambda (x) (x x))) 3)\n```", "```\n(define or (lambda (a b) (if a #t (if b #t #f))))\n```", "```\n(define or (lambda (a b) (if a #t b)))\n```", "```\n(define or (lambda (a b) (if a a b)))\n```", "```\n(define or (lambda (a b) (a a b)))\n```", "```\n(define and (lambda (a b) (a b a)))\n```", "```\n(->bool (or #f #f))(->bool (or #f #t))(->bool (or #t #f))(->bool (or #t #t))\n```", "```\n(->bool (and #f #f))(->bool (and #f #t))(->bool (and #t #f))(->bool (and #t #t))\n```", "```\n(define not (lambda (a) (a #f #t)))\n```", "```\n(define not (lambda (a) (lambda (x y) (a y x))))\n```", "```\n(define not (lambda (a x y) (a y x)))\n```", "```\n(define zero? (lambda (n) (n (lambda (x) #f) #t)))(test (->bool (and (zero? 0) (not (zero? 3)))) => '#t)\n```", "```\n(zero? 0) --> ((lambda (f n) n) (lambda (x) #f) #t) -> #t\n```", "```\n(zero? 2) --> ((lambda (f n) (f (f n))) (lambda (x) #f) #t)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --> ((lambda (x) #f) ((lambda (x) #f) #t))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --> #f\n```", "```\n(define cons (lambda (x y) (lambda (s) (s x y))))\n```", "```\n(define cons (lambda (x y s) (s x y)))\n```", "```\n(define car (lambda (x) (x #t)))(define cdr (lambda (x) (x #f)))(->nat (+ (car (cons 2 3)) (cdr (cons 2 3))))\n```", "```\n(define 1st car)(define 2nd (lambda (l) (car (cdr l))))(define 3rd (lambda (l) (car (cdr (cdr l)))))(define 4th (lambda (l) (car (cdr (cdr (cdr l))))))(define 5th (lambda (l) (car (cdr (cdr (cdr (cdr l)))))))\n```", "```\n(define list-ref (lambda (l n) (car (n cdr l))))\n```", "```\n(define null (lambda (s) #t))\n```", "```\n(define l123 (cons 1 (cons 2 (cons 3 null))))(->nat (2nd l123))\n```", "```\n((->listof ->nat) l123)\n```", "```\n(->listof ->nat l123)\n```", "```\n(->listof (->listof ->nat) (cons l123 (cons l123 null)))\n```", "```\n(define null? (lambda (x) (x (lambda (x y) #f))))\n```", "```\n(null? (cons A B))\u00a0 --> ((lambda (x) (x (lambda (x y) #f))) (lambda (s) (s A B)))\u00a0 --> ((lambda (s) (s A B)) (lambda (x y) #f))\u00a0 --> ((lambda (x y) #f) A B)\u00a0 --> #f(null? null)\u00a0 --> ((lambda (x) (x (lambda (x y) #f))) (lambda (s) #t))\u00a0 --> ((lambda (s) #t) (lambda (x y) #f))\u00a0 --> #t\n```", "```\n(define Y\u00a0 (lambda (f)\u00a0 \u00a0 ((lambda (x) (x x)) (lambda (x) (f (x x))))))(rewrite (define/rec f E) => (define f (Y (lambda (f) E))))\n```", "```\n(define/rec length\u00a0 (lambda (l)\u00a0 \u00a0 (if (null? l)\u00a0 \u00a0 \u00a0 0\u00a0 \u00a0 \u00a0 (add1 (length (cdr l))))))(->nat (length l123))\n```", "```\n(define inccons (lambda (p) (cons (cdr p) (add1 (cdr p)))))(define sub1 (lambda (n) (car (n inccons (cons 0 0)))))(->nat (sub1 5))\n```", "```\n(define - (lambda (m n) (n sub1 m)))(test (->nat (- 3 2)) => '1)(test (->nat (- (* 4 (* 5 5)) 5)) => '95)\n```", "```\n(define/rec fact\u00a0 (lambda (x)\u00a0 \u00a0 (if (zero? x) 1 (* x (fact (sub1 x))))))(test (->nat (fact 5)) => '120)(define/rec fib\u00a0 (lambda (x)\u00a0 \u00a0 (if (or (zero? x) (zero? (sub1 x)))\u00a0 \u00a0 \u00a0 1\u00a0 \u00a0 \u00a0 (+ (fib (- x 1)) (fib (- x 2))))))(test (->nat (fib (* 5 2))) => '89)\n```", "```\n(->nat (fib (nat-> '10)))\n```", "```\n[\u25b6](church.rkt \"church.rkt\");; Making Schlac into a practical language (not an interpreter)#lang pl schlac(define identity (lambda (x) x));; Natural numbers(define 0 (lambda (f x) x))(define add1 (lambda (n) (lambda (f x) (f (n f x)))));; same as:;;\u00a0  (define add1 (lambda (n) (lambda (f x) (n f (f x)))))(define 1 (add1 0))(define 2 (add1 1))(define 3 (add1 2))(define 4 (add1 3))(define 5 (add1 4))(test (->nat (add1 (add1 5))) => '7)(define + (lambda (m n) (m add1 n)))(test (->nat (+ 4 5)) => '9);; (define * (lambda (m n) (m (+ n) 0)))(define * (lambda (m n f) (m (n f))))(test (->nat (* 4 5)) => '20)(test (->nat (+ 4 (* (+ 2 5) 5))) => '39);; (define ^ (lambda (m n) (n (* m) 1)))(define ^ (lambda (m n) (n m)))(test (->nat (^ 3 4)) => '81);; Booleans(define #t (lambda (x y) x))(define #f (lambda (x y) y))(define if (lambda (c t e) (c t e))) ; not really needed(test (->nat (if #t 1 2)) => '1)(test (->nat (if #t (+ 4 5) (+ '1 '2))) => '9)(define and (lambda (a b) (a b a)))(define or\u00a0 (lambda (a b) (a a b)));; (define not (lambda (a) (a #f #t)))(define not (lambda (a x y) (a y x)))(test (->bool (and #f #f)) => '#f)(test (->bool (and #t #f)) => '#f)(test (->bool (and #f #t)) => '#f)(test (->bool (and #t #t)) => '#t)(test (->bool (or\u00a0 #f #f)) => '#f)(test (->bool (or\u00a0 #t #f)) => '#t)(test (->bool (or\u00a0 #f #t)) => '#t)(test (->bool (or\u00a0 #t #t)) => '#t)(test (->bool (not #f)) => '#t)(test (->bool (not #t)) => '#f)(define zero? (lambda (n) (n (lambda (x) #f) #t)))(test (->bool (and (zero? 0) (not (zero? 3)))) => '#t);; Lists(define cons (lambda (x y s) (s x y)))(define car (lambda (x) (x #t)))(define cdr (lambda (x) (x #f)))(test (->nat (+ (car (cons 2 3)) (cdr (cons 2 3)))) => '5)(define 1st car)(define 2nd (lambda (l) (car (cdr l))))(define 3rd (lambda (l) (car (cdr (cdr l)))))(define 4th (lambda (l) (car (cdr (cdr (cdr l))))))(define 5th (lambda (l) (car (cdr (cdr (cdr (cdr l)))))))(define null (lambda (s) #t))(define null? (lambda (x) (x (lambda (x y) #f))))(define l123 (cons 1 (cons 2 (cons 3 null))));; Note that `->listof' is a H.O. converter(test ((->listof ->nat) l123) => '(1 2 3))(test (->listof ->nat l123) => '(1 2 3))\u00a0 ; same as the above(test (->listof (->listof ->nat) (cons l123 (cons l123 null)))\u00a0 \u00a0 \u00a0 => '((1 2 3) (1 2 3)));; Subtraction is tricky(define inccons (lambda (p) (cons (cdr p) (add1 (cdr p)))))(define sub1 (lambda (n) (car (n inccons (cons 0 0)))))(test (->nat (sub1 5)) => '4)(define - (lambda (a b) (b sub1 a)))(test (->nat (- 3 2)) => '1)(test (->nat (- (* 4 (* 5 5)) 5)) => '95)(test (->nat (- 2 4)) => '0) ; this is \"natural subtraction\";; Recursive functions(define Y\u00a0 (lambda (f)\u00a0 \u00a0 ((lambda (x) (x x)) (lambda (x) (f (x x))))))(rewrite (define/rec f E) => (define f (Y (lambda (f) E))))(define/rec length\u00a0 (lambda (l)\u00a0 \u00a0 (if (null? l)\u00a0 \u00a0 \u00a0 0\u00a0 \u00a0 \u00a0 (add1 (length (cdr l))))))(test (->nat (length l123)) => '3)(define/rec fact\u00a0 (lambda (x)\u00a0 \u00a0 (if (zero? x) 1 (* x (fact (sub1 x))))))(test (->nat (fact 5)) => '120)(define/rec fib\u00a0 (lambda (x)\u00a0 \u00a0 (if (or (zero? x) (zero? (sub1 x)))\u00a0 \u00a0 \u00a0 1\u00a0 \u00a0 \u00a0 (+ (fib (sub1 x)) (fib (sub1 (sub1 x)))))))(test (->nat (fib (* 5 2))) => '89)#|;; Fully-expanded Fibonacci(define fib\u00a0 ((lambda (f)\u00a0 \u00a0  ((lambda (x) (x x)) (lambda (x) (f (x x)))))\u00a0  (lambda (f)\u00a0 \u00a0  (lambda (x)\u00a0 \u00a0 \u00a0  ((lambda (c t e) (c t e))\u00a0 \u00a0 \u00a0 \u00a0 ((lambda (a b) (a a b))\u00a0 \u00a0 \u00a0 \u00a0  ((lambda (n)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (n (lambda (x) (lambda (x y) y)) (lambda (x y) x)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x)\u00a0 \u00a0 \u00a0 \u00a0  ((lambda (n)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (n (lambda (x) (lambda (x y) y)) (lambda (x y) x)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((lambda (n)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x) (x (lambda (x y) x)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (n (lambda (p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x y s) (s x y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((lambda (x) (x (lambda (x y) y))) p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((lambda (n) (lambda (f x) (f (n f x))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x) (x (lambda (x y) y))) p))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x y s) (s x y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (f x) x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (f x) x)))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0  x)))\u00a0 \u00a0 \u00a0 \u00a0 ((lambda (n) (lambda (f x) (f (n f x)))) (lambda (f x) x))\u00a0 \u00a0 \u00a0 \u00a0 ((lambda (x y)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (x (lambda (n) (lambda (f x) (f (n f x)))) y))\u00a0 \u00a0 \u00a0 \u00a0  (f ((lambda (n)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x) (x (lambda (x y) x)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (n (lambda (p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x y s) (s x y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((lambda (x) (x (lambda (x y) y))) p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((lambda (n) (lambda (f x) (f (n f x))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x) (x (lambda (x y) y))) p))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x y s) (s x y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (f x) x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (f x) x)))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  x))\u00a0 \u00a0 \u00a0 \u00a0  (f ((lambda (n)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x) (x (lambda (x y) x)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (n (lambda (p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x y s) (s x y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((lambda (x) (x (lambda (x y) y))) p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((lambda (n) (lambda (f x) (f (n f x))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x) (x (lambda (x y) y))) p))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x y s) (s x y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (f x) x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (f x) x)))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (n)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((lambda (x) (x (lambda (x y) x)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (n (lambda (p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((lambda (x y s) (s x y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (x) (x (lambda (x y) y))) p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((lambda (n) (lambda (f x) (f (n f x))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((lambda (x) (x (lambda (x y) y))) p))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((lambda (x y s) (s x y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (lambda (f x) x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (lambda (f x) x)))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x)))))))));; The same after reducing all immediate function applications(define fib\u00a0 ((lambda (f)\u00a0 \u00a0  ((lambda (x) (x x)) (lambda (x) (f (x x)))))\u00a0  (lambda (f)\u00a0 \u00a0  (lambda (x)\u00a0 \u00a0 \u00a0  (((x (lambda (x) (lambda (x y) y)) (lambda (x y) x))\u00a0 \u00a0 \u00a0 \u00a0  (x (lambda (x) (lambda (x y) y)) (lambda (x y) x))\u00a0 \u00a0 \u00a0 \u00a0  (((x (lambda (p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (s)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (s (p (lambda (x y) y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (lambda (f x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (f ((p (lambda (x y) y)) f x))))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (s)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (s (lambda (f x) x) (lambda (f x) x))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (lambda (x y) x))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (x) (lambda (x y) y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (x y) x)))\u00a0 \u00a0 \u00a0 \u00a0 (lambda (f x) (f x))\u00a0 \u00a0 \u00a0 \u00a0 ((f ((x (lambda (p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (s)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (s (p (lambda (x y) y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (lambda (f x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (f ((p (lambda (x y) y)) f x))))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (y s)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (s (lambda (f x) x) (lambda (f x) x))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (lambda (x y) x)))\u00a0 \u00a0 \u00a0 \u00a0  (lambda (n) (lambda (f x) (f (n f x))))\u00a0 \u00a0 \u00a0 \u00a0  (f ((((x (lambda (p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (s)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (s (p (lambda (x y) y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (lambda (f x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (f ((p (lambda (x y) y)) f x))))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (s)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (s (lambda (f x) x) (lambda (f x) x))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (lambda (x y) x))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (s)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (s (p (lambda (x y) y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (lambda (f x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (f ((p (lambda (x y) y)) f x))))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (lambda (s)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (s (lambda (f x) x) (lambda (f x) x))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (lambda (x y) x)))))))));; Cute reformatting of the above:(define fib((lambda(f)((lambda(x)(x x))(lambda(x)(f(x x)))))(lambda(f)(lambda(x)(((x(lambda(x)(lambda(x y)y))(lambda(x y)x))(x(lambda(x)(lambda(x y)y))(lambda(x y) x))(((x(lambda(p)(lambda(s)(s(p(lambda(xy)y))(lambda(f x)(f((p(lambda(x y)y))f x))))))(lambda(s) (s(lambda(fx)x)(lambda(f x)x))))(lambda(x y)x))(lambda(x)(lambda(x y)y))(lambda(x y)x)))(lambda(f x)(f x))((f((x(lambda(p)(lambda(s)(s(p(lambda(x y)y))(lambda(f x)(f((p(lambda(x y)y))f x))))))(lambda(y s)(s(lambda(fx)x)(lambda(f x)x))))(lambda(x y)x)))(lambda(n)(lambda(f x)(f(n f x))))(f((((x(lambda(p)(lambda(s)(s(p (lambda(x y)y))(lambda(f x)(f((p(lambda(x y) y))f x))))))(lambda(s)(s(lambda(f x)x)(lambda(f x)x))))(;;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^;;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `---------------(cons 0 0)---------------'lambda(x y)x))(lambda(p)(lambda(s)(s(p(lambda(x y)y))(lambda(f x)(f((p(lambda(x y)y))f x))))))(lambda(s)(s(lambda(f x)x)(lambda(f x)x))))(lambda(x y)x)))))))))And for extra fun:\u00a0 \u00a0 \u00a0 \u00a0  (\u03bb(f)(\u03bb\u00a0 \u00a0 \u00a0 \u00a0  (x)(((x(\u03bb(\u00a0 \u00a0 \u00a0 \u00a0  x)(\u03bb(x y)y)\u00a0 \u00a0 \u00a0 \u00a0  )(\u03bb(x y)x))(\u00a0 \u00a0 \u00a0 \u00a0  x(\u03bb(x)(\u03bb(x y)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  y))(\u03bb(x y\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  )x))(((\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x(\u03bb(p)(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  \u03bb(s)(s\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (p (\u03bb(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  x y)y))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (\u03bb(f x\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )(f((p(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  \u03bb(x y)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  y))f x\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ))))))(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  \u03bb(s)(s(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u03bb(f x)x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (\u03bb(f x)x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  )))(\u03bb(x y)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  x))(\u03bb(x)(\u03bb(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  x y)y)) (\u03bb(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x y) x)))(\u03bb(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 f x)(f x))((f\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ((x(\u03bb(p )(\u03bb (s\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  )(s(p(\u00a0 \u03bb(x y)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 y))(\u03bb (\u00a0 f x)(f(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (p (\u03bb(\u00a0 \u00a0 x y)y)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  )f x)))\u00a0 \u00a0 )))(\u03bb(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  y s)(s\u00a0 \u00a0  (\u03bb (f x\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  )x)(\u03bb(\u00a0 \u00a0 \u00a0 f x)x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )))(\u03bb(\u00a0 \u00a0 \u00a0  x y)x))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )(\u03bb(n)\u00a0 \u00a0 \u00a0 \u00a0 (\u03bb (f\u00a0 \u00a0 \u00a0 \u00a0 \u00a0  x)(f (n\u00a0 \u00a0 \u00a0 \u00a0 f x)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0  )(f(((\u00a0 \u00a0 \u00a0 \u00a0  (x(\u03bb(p)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (\u03bb(s)(s\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (p( \u03bb(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x y )y\u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ))(\u03bb(f\u00a0 \u00a0 \u00a0 \u00a0  x) (f((\u00a0 \u00a0 \u00a0 \u00a0 \u00a0  p(\u03bb(x y\u00a0 \u00a0 \u00a0 \u00a0  )y)) f\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  x)))))\u00a0 \u00a0 \u00a0 \u00a0 )(\u03bb(s)(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  s(\u03bb(f x\u00a0 \u00a0 \u00a0 \u00a0 )x)(\u03bb(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  f x)x)\u00a0 \u00a0 \u00a0 \u00a0 ))) (\u03bb\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (x y)x\u00a0 \u00a0 \u00a0  ))(\u03bb(p\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )(\u03bb(s)(\u00a0 \u00a0 \u00a0  s(p(\u03bb(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  x y)y)\u00a0 \u00a0 \u00a0 )(\u03bb (f\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x)(f((\u00a0 \u00a0 \u00a0 p(\u03bb (x\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 y)y)) f\u00a0 \u00a0  x))))))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (\u03bb(s)(\u00a0 \u00a0  s(\u03bb (f\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x)x)(\u03bb\u00a0 \u00a0 (f x)x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  )))(\u03bb(\u00a0 \u00a0 x y)x)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ))))))|#\n```"]