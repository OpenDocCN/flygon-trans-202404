["```\n(define (integers-starting-from n)\n  (cons-stream n (integers-starting-from (+ n 1))))\n\n(define integers (integers-starting-from 1)) \n```", "```\n(define (divisible? x y)\n  (= (remainder x y) 0))\n(define no-sevens\n  (stream-filter (lambda (x) (not (divisible? x 7)))\n                 integers)) \n```", "```\n-> (stream-ref no-sevens 100)\n117 \n```", "```\n(define ones (cons-stream 1 ones)) \n```", "```\n(define (add-streams s1 s2)\n  (stream-map + s1 s2) \n```", "```\n(define integers (cons-stream 1 (add-streams ones integers))) \n```", "```\n-> (define x (cons-stream 1 (cons-stream 2 (cons-stram 3 the-empty-stream))))\n-> (stream-map square x)\n(1 #[stream with car 4]) \n```", "```\n-> (stream-map + x x)\n(2 #[stream with car 4]) \n```", "```\n(define fibs\n  (cons-stream 0\n               (cons-stream 1\n                            (add-streams (stream-cdr fibs) fibs)))) \n```", "```\n(define (scale-stream strm factor)\n  (stream-map (lambda (x) (* x factor)) strm)) \n```", "```\n(define doubles (cons-stream 1 (scale-stream doubles 2))) \n```", "```\n(define primes\n  (cons-stream 2\n               (stream-filter prime?\n                              (integers-starting-from 3)))) \n```", "```\n(define (prime? n)\n  (define (iter ps)\n    (cond ((> (square (stream-car ps)) n) #t)\n          ((divisible? n (stream-car ps)) #f)\n          (else (iter (stream-cdr ps)))))\n  (iter primes)) \n```"]