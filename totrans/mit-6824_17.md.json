["```\nRegion R1                        Region R2\n---------                        ---------\n\n W1 Mesage broker                 W1 Message broker\n W2     (replicated)              W2     (replicated)\n W3                               W3\n ..         Tablet controller     ..         Tablet controller\n                (replicated)                     (replicated)\n\n    Router1 Router2 ...              Router1 Router2 ...     \n\n    SU1 SU2 SU3 ...                  SU1 SU2 SU3 ... \n```", "```\nName        Where       What\n----        -----       ----\nAlice       home        asleep\nBob \n```", "```\n read-any(key) -> fast read, just executes the read on the SU and does\n                   not wait for any writes to propagate\n\n    read-critical(key, ver) -> returns the read record where ver(record) >= ver\n     - useful for reading your own writes\n     - true when you have one webpage in a single tab\n     - if you update your shopping cart in one tab, then the other tab\n       will not be aware of that version number from the first tab\n\n    read-latest(key) -> will always go to the master copy and read the latest\n                      data there \n```", "```\n test-and-set-write(ver, key, newvalue) -> always gets sent to the master\n        region for the key. look at the version and if it matches provided\n        one then update the record with the new value\n\n        // implementing v[k]++\n        while true:\n            (x, v) = read-latest(k)\n            if test-and-set-write(k, v, x+1)\n                break \n```", "```\nAlice   |   ACL     | List of photos\n-------- ----------- ----------------\n            mom         p7, p99 \n```", "```\n[world, browsers, data centers] \n```", "```\n3 regions, browsers, web apps, tablet ctlrs, routers, storage units, MBs] \n```", "```\n while(1):\n    (x, ver) = read-latest(k)\n    if(t-a-s-w(k, ver, x+1))\n      break \n```"]