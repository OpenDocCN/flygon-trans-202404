["```\n(Add (Sub (Num 3) (Num 4)) (Num 7))\n```", "```\n(define-type AE\u00a0 [Num Number]\u00a0 [Add AE AE]\u00a0 [Sub AE AE])\n```", "```\n(: parse-sexpr : Sexpr -> AE);; parses s-expressions into AEs(define (parse-sexpr sexpr)\u00a0 (cond [(number? sexpr) (Num sexpr)]\u00a0 \u00a0 \u00a0 \u00a0 [(and (list? sexpr) (= 3 (length sexpr)))\u00a0 \u00a0 \u00a0 \u00a0  (let ([make-node\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (match (first sexpr)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ['+ Add]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ['- Sub]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [else (error 'parse-sexpr \"unknown op: ~s\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (first sexpr))])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 #| the above is the same as:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (cond [(equal? '+ (first sexpr)) Add]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [(equal? '- (first sexpr)) Sub]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [else (error 'parse-sexpr \"unknown op: ~s\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (first sexpr))])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |#])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (make-node (parse-sexpr (second sexpr))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (parse-sexpr (third sexpr))))]\u00a0 \u00a0 \u00a0 \u00a0 [else (error 'parse-sexpr \"bad syntax in ~s\" sexpr)]))\n```", "```\n(: parse-sexpr : Sexpr -> AE);; parses s-expressions into AEs(define (parse-sexpr sexpr)\u00a0 (match sexpr\u00a0 \u00a0 [(number: n) (Num n)]\u00a0 \u00a0 [(list '+ left right)\u00a0 \u00a0  (Add (parse-sexpr left) (parse-sexpr right))]\u00a0 \u00a0 [(list '- left right)\u00a0 \u00a0  (Sub (parse-sexpr left) (parse-sexpr right))]\u00a0 \u00a0 [else (error 'parse-sexpr \"bad syntax in ~s\" sexpr)]))\n```", "```\n(: parse : String -> AE);; parses a string containing an AE expression to an AE(define (parse str)\u00a0 (parse-sexpr (string->sexpr str)))\n```"]