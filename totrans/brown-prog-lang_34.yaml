- en: 34Pyret for Racketeers and Schemers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 34适用于Racket和Schemers的Pyret
- en: '|     [34.1 Numbers, Strings, and Booleans](#%28part._.Numbers__.Strings__and_.Booleans%29)
    |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|     [34.1 数字、字符串和布尔值](#%28part._.Numbers__.Strings__and_.Booleans%29) |'
- en: '|     [34.2 Infix Expressions](#%28part._.Infix_.Expressions%29) |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|     [34.2 中缀表达式](#%28part._.Infix_.Expressions%29) |'
- en: '|     [34.3 Function Definition and Application](#%28part._.Function_.Definition_and_.Application%29)
    |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|     [34.3 函数定义和应用](#%28part._.Function_.Definition_and_.Application%29) |'
- en: '|     [34.4 Variable Names](#%28part._.Variable_.Names%29) |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|     [34.4 变量名](#%28part._.Variable_.Names%29) |'
- en: '|     [34.5 Data Definitions](#%28part._.Data_.Definitions%29) |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|     [34.5 数据定义](#%28part._.Data_.Definitions%29) |'
- en: '|     [34.6 Conditionals](#%28part._.Conditionals%29) |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|     [34.6 条件语句](#%28part._.Conditionals%29) |'
- en: '|     [34.7 Annotations](#%28part._.Annotations%29) |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|     [34.7 注释](#%28part._.Annotations%29) |'
- en: '|     [34.8 What Else?](#%28part._.What_.Else_%29) |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|     [34.8 还有什么？](#%28part._.What_.Else_%29) |'
- en: If you’ve programmed before in a language like Scheme or the student levels
    of Racket (or the WeScheme programming environment), or for that matter even in
    certain parts of OCaml, Haskell, Scala, Erlang, Clojure, or other languages, you
    will find many parts of Pyret very familiar. This chapter is specifically written
    to help you make the transition from (student) Racket/Scheme/WeScheme (abbreviated
    “RSW”) to Pyret by showing you how to convert the syntax. Most of what we say
    applies to all these languages, though in some cases we will refer specifically
    to Racket (and WeScheme) features not found in Scheme.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前在Scheme或Racket的学生级别（或WeScheme编程环境）中编程过，或者在OCaml、Haskell、Scala、Erlang、Clojure或其他语言的某些部分中编程过，您会发现Pyret的许多部分非常熟悉。本章专门编写，以帮助您从（学生）Racket/Scheme/WeScheme（简称“RSW”）过渡到Pyret，向您展示如何转换语法。我们说的大部分内容都适用于所有这些语言，尽管在某些情况下，我们会具体提到Racket（和WeScheme）中的特性，这些特性在Scheme中找不到。
- en: In every example below, the two programs will produce the same results.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的每个示例中，这两个程序将产生相同的结果。
- en: 34.1Numbers, Strings, and Booleans
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 34.1数字、字符串和布尔值
- en: Numbers are very similar between the two. Like Scheme, Pyret implements arbitrary-precision
    numbers and rationals. Some of the more exotic numeric systems of Scheme (such
    as complex numbers) aren’t in Pyret; Pyret also treats imprecise numbers slightly
    differently.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 两者之间的数字非常相似。与Scheme一样，Pyret实现了任意精度的数字和有理数。一些Scheme中更奇特的数字系统（如复数）不在Pyret中；Pyret也稍微不同地处理不精确的数字。
- en: '| RSW | Pyret |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| 1 | 1 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 |'
- en: '| RSW | Pyret |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| 1/2 | 1/2 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 1/2 | 1/2 |'
- en: '| RSW | Pyret |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| #i3.14 | ~3.14 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| #i3.14 | ~3.14 |'
- en: Strings are also very similar, though Pyret allows you to use single-quotes
    as well.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串也非常相似，尽管Pyret也允许您使用单引号。
- en: '| RSW | Pyret |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| "Hello, world!" | "Hello, world!" |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| "你好，世界！" | "Hello, world!" |'
- en: '| RSW | Pyret |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| "\"Hello\", he said" | "\"Hello\", he said" |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| "\"Hello\", he said" | "\"Hello\", he said" |'
- en: '| RSW | Pyret |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| "\"Hello\", he said" | ''"Hello", he said'' |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| "\"Hello\", he said" | ''"Hello", he said'' |'
- en: 'Booleans have the same names:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值具有相同的名称：
- en: '| RSW | Pyret |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| true | true |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| true | true |'
- en: '| RSW | Pyret |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| false | false |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| false | false |'
- en: 34.2Infix Expressions
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 34.2中缀表达式
- en: 'Pyret uses an infix syntax, reminiscent of many other textual programming languages:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Pyret使用中缀语法，让人想起许多其他文本编程语言：
- en: '| RSW | Pyret |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| (+ 1 2) | 1 + 2 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| (+ 1 2) | 1 + 2 |'
- en: '| RSW | Pyret |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| (* (- 4 2) 5) | (4 - 2) * 5 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| (* (- 4 2) 5) | (4 - 2) * 5 |'
- en: 'Note that Pyret does not have rules about orders of precedence between operators,
    so when you mix operators, you have to parenthesize the expression to make your
    intent clear. When you chain the same operator you don’t need to parenthesize;
    chaining associates to the left in both languages:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Pyret没有关于运算符优先级顺序的规则，因此当您混合运算符时，必须用括号括起表达式以明确您的意图。当您链接相同的运算符时，您不需要使用括号；在这两种语言中，链接都是向左关联的：
- en: '| RSW | Pyret |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| (/ 1 2 3 4) | 1 / 2 / 3 / 4 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| (/ 1 2 3 4) | 1 / 2 / 3 / 4 |'
- en: These both evaluate to 1/24.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者都计算为1/24。
- en: 34.3Function Definition and Application
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 34.3函数定义和应用
- en: 'Function definition and application in Pyret have an infix syntax, more reminiscent
    of many other textual programming languages. Application uses a syntax familiar
    from conventional algebra books:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Pyret中的函数定义和应用具有中缀语法，更像许多其他文本编程语言。应用使用了一种熟悉的语法，类似于传统代数书籍：
- en: '| RSW | Pyret |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| (dist 3 4) | dist(3, 4) |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| (dist 3 4) | dist(3, 4) |'
- en: 'Application correspondingly uses a similar syntax in function headers, and
    infix in the body:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 应用在函数头部使用类似的语法，而在主体中使用中缀：
- en: '| RSW | Pyret |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '|'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '&#124; (define (dist x y) &#124;'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124; (define (dist x y) &#124;'
- en: '&#124;   (sqrt (+ (* x x) &#124;'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124;   (sqrt (+ (* x x) &#124;'
- en: '&#124;            (* y y)))) &#124;'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124;            (* y y)))) &#124;'
- en: '|'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 34.4Variable Names
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 34.4 变量名
- en: 'Both languages have a fairly permissive system for naming variables. While
    you can use CamelCase and under_scores in both, it is conventional to instead
    use what is known as [kebab-case](http://c2.com/cgi/wiki?KebabCase).This name
    is inaccurate. The word “kebab” just means “meat”. The skewer is the “shish”.
    Therefore, it ought to at least be called “shish kebab case”. Thus:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种语言对于变量命名都有相当宽松的系统。虽然在两种语言中都可以使用 CamelCase 和 under_scores，但习惯上使用所谓的 [kebab-case](http://c2.com/cgi/wiki?KebabCase)。这个名字是不准确的。单词
    “kebab” 只是意味着 “肉”。串是 “shish”。因此，它至少应该被称为 “shish kebab case”。因此：
- en: '| RSW | Pyret |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| this-is-a-name | this-is-a-name |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| this-is-a-name | this-is-a-name |'
- en: Even though Pyret has infix subtraction, the language can unambiguously tell
    apart this-name (a variable) from this - name (a subtraction expression) because
    the - in the latter must be surrounded by spaces.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Pyret 具有中缀减法，但语言可以明确区分此名称（一个变量）和此 - 名称（一个减法表达式），因为后者中的 - 必须被空格包围。
- en: Despite this spacing convention, Pyret does not permit some of the more exotic
    names permitted by Scheme. For instance, one can write
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这种空格约定，但 Pyret 不允许 Scheme 允许的一些更奇特的名称。例如，人们可以写
- en: '| (define e^i*pi -1) |'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define e^i*pi -1) |'
- en: in Scheme but that is not a valid variable name in Pyret.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Scheme 中，但这不是 Pyret 中的有效变量名。
- en: 34.5Data Definitions
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 34.5 数据定义
- en: 'Pyret diverges from Racket (and even more so from Scheme) in its handling of
    data definitions. First, we will see how to define a structure:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Pyret 在处理数据定义时与 Racket（甚至是 Scheme）不同。首先，我们将看到如何定义一个结构：
- en: '| RSW | Pyret |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| (define-struct pt (x y)) |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| (define-struct pt (x y)) |'
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'This might seem like a fair bit of overkill, but we’ll see in a moment why
    it’s useful. Meanwhile, it’s worth observing that when you have only a single
    kind of datum in a data definition, it feels unwieldy to take up so many lines.
    Writing it on one line is valid, but now it feels ugly to have the | in the middle:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有点过度，但我们很快就会看到为什么这很有用。同时，值得注意的是，当您在数据定义中只有一种数据时，占用这么多行会让人感觉不方便。写在一行上是有效的，但现在在中间加上
    | 看起来很难看：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Therefore, Pyret permits you to drop the initial |, resulting in the more readable
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Pyret 允许您删除初始 |，从而得到更易读的结果
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now suppose we have two kinds of points. In the student languages of Racket,
    we would describe this with a comment:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们有两种类型的点。在 Racket 的学生语言中，我们会用注释来描述这一点：
- en: '| ;; A Point is either |'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ;; A Point is either |'
- en: '| ;; - (pt number number), or |'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ;; - (pt number number)，或者 |'
- en: '| ;; - (pt3d number number number) |'
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ;; - (pt3d number number number) |'
- en: 'In Pyret, we can express this directly:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pyret 中，我们可以直接表达这一点：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In short, Racket optimizes for the single-variant case, whereas Pyret optimizes
    for the multi-variant case. As a result, it is difficult to clearly express the
    multi-variant case in Racket, while it is unwieldy to express the single-variant
    case in Pyret.For structures, both Racket and Pyret expose constructors, selectors,
    and predicates. Constructors are just functions:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Racket 优化了单变量情况，而 Pyret 优化了多变量情况。因此，在 Racket 中清晰地表达多变量情况很困难，而在 Pyret 中表达单变量情况则很不方便。对于结构，Racket
    和 Pyret 都公开了构造函数、选择器和谓词。构造函数只是函数：
- en: '| RSW | Pyret |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| (pt 1 2) | pt(1, 2) |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| (pt 1 2) | pt(1, 2) |'
- en: 'Predicates are also functions with a particular naming scheme:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词也是具有特定命名方案的函数：
- en: '| RSW | Pyret |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| (pt? x) | is-pt(x) |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| (pt? x) | is-pt(x) |'
- en: 'and they behave the same way (returning true if the argument was constructed
    by that constructor, and false otherwise). In contrast, selection is different
    in the two languages (and we will see more about selection below, with cases):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的行为方式相同（如果参数由该构造函数构造，则返回 true，否则返回 false）。相比之下，在这两种语言中选择是不同的（我们将在下面更多地看到关于选择的内容，以及用例）：
- en: '| RSW | Pyret |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '| (pt-x v) | v.x |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| (pt-x v) | v.x |'
- en: Note that in the Racket case, pt-x checks that the parameter was constructed
    by pt before extracting the value of the x field. Thus, pt-x and pt3d-x are two
    different functions and neither one can be used in place of the other. In contast,
    in Pyret, .x extracts an x field of any value that has such a field, without attention
    to how it was constructed. Thus, we can use .x on a value whether it was constructed
    by pt or pt3d (or indeed anything else with that field). In contrast, cases does
    pay attention to this distinction.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 Racket 的情况下，pt-x 检查参数是否由 pt 构造，然后提取 x 字段的值。因此，pt-x 和 pt3d-x 是两个不同的函数，两者都不能互换使用。相比之下，在
    Pyret 中，.x 提取任何具有该字段的值的 x 字段，而不关注它是如何构造的。因此，我们可以在值上使用 .x，无论它是由 pt 还是 pt3d 构造的（或者实际上是任何具有该字段的东西）。相比之下，cases
    确实关注这种区别。
- en: 34.6Conditionals
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 34.6条件
- en: There are several kinds of conditionals in Pyret, one more than in the Racket
    student languages.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Pyret 中有几种类型的条件，比 Racket 学生语言多一个。
- en: General conditionals can be written using if, corresponding to Racket’s if but
    with more syntax.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通用条件可以使用 if 来编写，对应于 Racket 的 if，但具有更多的语法。
- en: '| RSW | Pyret |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '|'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '&#124; (if full-moon &#124;'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124; (if full-moon &#124;'
- en: '&#124;     "howl" &#124;'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124;     "howl" &#124;'
- en: '&#124;     "meow") &#124;'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124;     "meow") &#124;'
- en: '|'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| RSW | Pyret |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| RSW | Pyret |'
- en: '|'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '&#124; (if full-moon &#124;'
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124; (if full-moon &#124;'
- en: '&#124;     "howl" &#124;'
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124;     "howl" &#124;'
- en: '&#124;     (if new-moon &#124;'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124;     (if new-moon &#124;'
- en: '&#124;         "bark" &#124;'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124;         "bark" &#124;'
- en: '&#124;         "meow")) &#124;'
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124;         "meow")) &#124;'
- en: '|'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Note that if includes else if, which makes it possible to list a collection
    of questions at the same level of indentation, which if in Racket does not have.
    The corresponding code in Racket would be written
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果包含 else if，这使得可能在相同缩进级别上列出一系列问题，而 Racket 中的 if 没有这种可能性。Racket 中的相应代码将被编写为
- en: '| (cond |'
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (cond |'
- en: '|   [full-moon "howl"] |'
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [full-moon "howl"] |'
- en: '|   [new-moon "bark"] |'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [new-moon "bark"] |'
- en: '|   [else "meow"]) |'
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [else "meow"]) |'
- en: 'to restore the indentation. There is a similar construct in Pyret called ask,
    designed to parallel cond:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以恢复缩进。Pyret 中有一个类似的构造，称为 ask，旨在与 cond 平行：
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In Racket, we also use cond to dispatch on a datatype:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Racket 中，我们还使用 cond 来分派数据类型：
- en: '| (cond |'
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (cond |'
- en: '|   [(pt? v)   (+ (pt-x v) (pt-y v))] |'
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [(pt? v)   (+ (pt-x v) (pt-y v))] |'
- en: '|   [(pt3d? v) (+ (pt-x v) (pt-z v))]) |'
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [(pt3d? v) (+ (pt-x v) (pt-z v))]) |'
- en: 'We could write this in close parallel in Pyret:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Pyret 中写出与之紧密平行的内容：
- en: '[PRE8]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'or even as:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 或者甚至是：
- en: '[PRE9]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '(As in Racket student languages, the Pyret versions will signal an error if
    no branch of the conditional matched.)However, Pyret provides a special syntax
    just for data definitions:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: （与 Racket 学生语言一样，在 Pyret 版本中，如果条件的任何分支都不匹配，将会发出错误信号。）然而，Pyret 提供了一个专门的语法用于数据定义：
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This checks that v is a Point, provides a clean syntactic way of identifying
    the different branches, and makes it possible to give a concise local name to
    each field position instead of having to use selectors like .x. In general, in
    Pyret we prefer to use cases to process data definitions. However, there are times
    when, for instance, there many variants of data but a function processes only
    very few of them. In such cases, it makes more sense to explicitly use predicates
    and selectors.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这检查 v 是否为 Point，提供了一种清晰的语法方式来识别不同的分支，并且可以给每个字段位置提供简洁的本地名称，而不必使用 .x 这样的选择器。一般来说，在
    Pyret 中，我们更喜欢使用 cases 处理数据定义。然而，有时候，例如，当数据的变体很多但函数只处理其中很少一部分时。在这种情况下，明确使用谓词和选择器更合理。
- en: 34.7Annotations
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 34.7注释
- en: 'In student Racket languages, annotations are usually written as comments:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在学生 Racket 语言中，注释通常写作注释：
- en: '| ; square: Number -> Number |'
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ; square: Number -> Number |'
- en: '| ; sort-nums: List<Number> -> List<Number> |'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ; sort-nums: List<Number> -> List<Number> |'
- en: '| ; sort: List<T> * (T * T -> Boolean) -> List<T> |'
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ; sort: List<T> * (T * T -> Boolean) -> List<T> |'
- en: In Pyret, we can write the annotations directly on the parameters and return
    values. Pyret will check them to a limited extent dynamically, and can check them
    statically with its type checker. The corresponding annotations to those above
    would be written as
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pyret 中，我们可以直接在参数和返回值上写注释。Pyret 将动态地在有限的程度上检查它们，并且可以使用其类型检查器静态地检查它们。以上相应的注释将被编写为
- en: '[PRE11]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Though Pyret does have a notation for writing annotations by themselves (analogous
    to the commented syntax in Racket), they aren’t currently enforced by the language,
    so we don’t include it here.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Pyret 确实有一种写注释的表示法（类似于 Racket 中的注释语法），但目前语言中没有强制执行，因此我们在此不包括它。
- en: 34.8What Else?
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 34.8还有什么？
- en: If there are other parts of Scheme or Racket syntax that you would like to see
    translated, please [let us know](http://cs.brown.edu/~sk/Contact/).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望看到 Scheme 或 Racket 语法的其他部分的翻译，请[告诉我们](http://cs.brown.edu/~sk/Contact/)。
