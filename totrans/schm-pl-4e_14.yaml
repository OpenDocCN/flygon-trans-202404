- en: Answers to Selected Exercises
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选定练习的答案
- en: '**Exercise [2.2.1](start.html#g7). **(page [20](start.html#./start:s34))'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.2.1](start.html#g7). **(第 [20](start.html#./start:s34) 页)'
- en: '| *  a*. | `(+ (* 1.2 (- 2 1/3)) -8.7)` |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| *  a*. | `(+ (* 1.2 (- 2 1/3)) -8.7)` |'
- en: '| *  b*. | `(/ (+ 2/3 4/9) (- 5/11 4/3))` |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| *  b*. | `(/ (+ 2/3 4/9) (- 5/11 4/3))` |'
- en: '| *  c*. | `(+ 1 (/ 1 (+ 2 (/ 1 (+ 1 1/2)))))` |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| *  c*. | `(+ 1 (/ 1 (+ 2 (/ 1 (+ 1 1/2)))))` |'
- en: '| *  d*. | `(* (* (* (* (* (* 1 -2) 3) -4) 5) -6) 7)` or `(* 1 -2 3 -4 5 -6 7)`
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| *  d*. | `(* (* (* (* (* (* 1 -2) 3) -4) 5) -6) 7)` 或 `(* 1 -2 3 -4 5 -6 7)`
    |'
- en: '**Exercise [2.2.2](start.html#g8). **(page [20](start.html#./start:s35))'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.2.2](start.html#g8). **(第 [20](start.html#./start:s35) 页)'
- en: See Section [6.4](objects.html#g110).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 参见第 [6.4](objects.html#g110) 节。
- en: '**Exercise [2.2.3](start.html#g9). **(page [20](start.html#./start:s36))'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.2.3](start.html#g9). **(第 [20](start.html#./start:s36) 页)'
- en: '| *  a*. | `(car . cdr)` |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| *  a*. | `(car . cdr)` |'
- en: '| *  b*. | `(this (is silly))` |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| *  b*. | `(this (is silly))` |'
- en: '| *  c*. | `(is this silly?)` |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| *  c*. | `(is this silly?)` |'
- en: '| *  d*. | `(+ 2 3)` |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| *  d*. | `(+ 2 3)` |'
- en: '| *  e*. | `(+ 2 3)` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| *  e*. | `(+ 2 3)` |'
- en: '| *  f*. | `+` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| *  f*. | `+` |'
- en: '| *  g*. | `(2 3)` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| *  g*. | `(2 3)` |'
- en: '| *  h*. | `#<procedure>` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| *  h*. | `#<procedure>` |'
- en: '| *  i*. | `cons` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| *  i*. | `cons` |'
- en: '| *  j*. | `''cons` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| *  j*. | `''cons` |'
- en: '| *  k*. | `quote` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| *  k*. | `quote` |'
- en: '| *  l*. | `5` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| *  l*. | `5` |'
- en: '| *  m*. | `5` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| *  m*. | `5` |'
- en: '| *  n*. | `5` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| *  n*. | `5` |'
- en: '| *  o*. | `5` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| *  o*. | `5` |'
- en: '**Exercise [2.2.4](start.html#g10). **(page [21](start.html#./start:s37))'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.2.4](start.html#g10). **(第 [21](start.html#./start:s37) 页)'
- en: '`(car (cdr (car ''((a b) (c d))))) ![<graphic>](ch2_0.gif) b'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`(car (cdr (car ''((a b) (c d))))) ![<graphic>](ch2_0.gif) b'
- en: (car (car (cdr '((a b) (c d))))) ![<graphic>](ch2_0.gif) c
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: (car (car (cdr '((a b) (c d))))) ![<graphic>](ch2_0.gif) c
- en: (car (cdr (car (cdr '((a b) (c d)))))) ![<graphic>](ch2_0.gif) d`
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: (car (cdr (car (cdr '((a b) (c d)))))) ![<graphic>](ch2_0.gif) d`
- en: '**Exercise [2.2.5](start.html#g11). **(page [21](start.html#./start:s38))'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.2.5](start.html#g11). **(第 [21](start.html#./start:s38) 页)'
- en: '`''((a . b) ((c) d) ())`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`''((a . b) ((c) d) ())`'
- en: '**Exercise [2.2.6](start.html#g12). **(page [21](start.html#./start:s39))'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.2.6](start.html#g12). **(第 [21](start.html#./start:s39) 页)'
- en: '![<graphic>](ans_50.gif)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![<graphic>](ans_50.gif)'
- en: '**Exercise [2.2.7](start.html#g13). **(page [21](start.html#./start:s40))'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.2.7](start.html#g13). **(第 [21](start.html#./start:s40) 页)'
- en: '`(car ''((a b) (c d))) ![<graphic>](ch2_0.gif) (a b)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`(car ''((a b) (c d))) ![<graphic>](ch2_0.gif) (a b)'
- en: (car (car '((a b) (c d)))) ![<graphic>](ch2_0.gif) a
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: (car (car '((a b) (c d)))) ![<graphic>](ch2_0.gif) a
- en: (cdr (car '((a b) (c d)))) ![<graphic>](ch2_0.gif) (b)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: (cdr (car '((a b) (c d)))) ![<graphic>](ch2_0.gif) (b)
- en: (car (cdr (car '((a b) (c d))))) ![<graphic>](ch2_0.gif) b
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: (car (cdr (car '((a b) (c d))))) ![<graphic>](ch2_0.gif) b
- en: (cdr (cdr (car '((a b) (c d))))) ![<graphic>](ch2_0.gif) ()
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: (cdr (cdr (car '((a b) (c d))))) ![<graphic>](ch2_0.gif) ()
- en: (cdr '((a b) (c d))) ![<graphic>](ch2_0.gif) ((c d))
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: (cdr '((a b) (c d))) ![<graphic>](ch2_0.gif) ((c d))
- en: (car (cdr '((a b) (c d)))) ![<graphic>](ch2_0.gif) (c d)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: (car (cdr '((a b) (c d)))) ![<graphic>](ch2_0.gif) (c d)
- en: (car (car (cdr '((a b) (c d))))) ![<graphic>](ch2_0.gif) c
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: (car (car (cdr '((a b) (c d))))) ![<graphic>](ch2_0.gif) c
- en: (cdr (car (cdr '((a b) (c d))))) ![<graphic>](ch2_0.gif) (d)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: (cdr (car (cdr '((a b) (c d))))) ![<graphic>](ch2_0.gif) (d)
- en: (car (cdr (car (cdr '((a b) (c d)))))) ![<graphic>](ch2_0.gif) d
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: (car (cdr (car (cdr '((a b) (c d))))) ![<graphic>](ch2_0.gif) d
- en: (cdr (cdr (car (cdr '((a b) (c d)))))) ![<graphic>](ch2_0.gif) ()
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: (cdr (cdr (car (cdr '((a b) (c d))))) ![<graphic>](ch2_0.gif) ()
- en: (cdr (cdr '((a b) (c d)))) ![<graphic>](ch2_0.gif) ()`
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: (cdr (cdr '((a b) (c d)))) ![<graphic>](ch2_0.gif) ()
- en: '**Exercise [2.2.8](start.html#g14). **(page [21](start.html#./start:s41))'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.2.8](start.html#g14). **(第 [21](start.html#./start:s41) 页)'
- en: See Section [2.3](start.html#g15).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 参见第 [2.3](start.html#g15) 节。
- en: '**Exercise [2.3.1](start.html#g16). **(page [23](start.html#./start:s49))'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.3.1](start.html#g16). **(第 [23](start.html#./start:s49) 页)'
- en: Evaluate the variables `list`, `+`, `-`, `*`, and `/`, yielding the list, addition,
    subtraction, multiplication, and division procedures.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估变量`list`、`+`、`-`、`*`和`/`，得到列表、加法、减法、乘法和除法过程。
- en: Apply the list procedure to the addition, subtraction, multiplication, and division
    procedures, yielding a list containing these procedures in order.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将加法、减法、乘法和除法过程应用于列表过程，得到按顺序包含这些过程的列表。
- en: Evaluate the variable `cdr`, yielding the cdr procedure.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估变量`cdr`，得到cdr过程。
- en: Apply the cdr procedure to the list produced in step [2](answers.html#g252),
    yielding a list containing the subtraction, multiplication, and division procedures.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将步骤 [2](answers.html#g252) 中生成的列表应用于cdr过程，得到包含减法、乘法和除法过程的列表。
- en: Evaluate the variable `car`, yielding the car procedure.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估变量`car`，得到car过程。
- en: Apply the car procedure to the list produced in step [4](answers.html#g254),
    yielding the subtraction procedure.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将步骤 [4](answers.html#g254) 中生成的列表应用于car过程，得到减法过程。
- en: Evaluate the constants `17` and `5`, yielding `17` and `5`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估常量`17`和`5`，得到`17`和`5`。
- en: Apply the subtraction procedure to `17` and `5`, yielding `12`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将减法过程应用于`17`和`5`，得到`12`。
- en: Other orders are possible. For example, the variable `car` could have been evaluated
    before its argument.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 其他顺序也是可能的。例如，变量`car`可能在其参数之前被评估。
- en: '**Exercise [2.4.1](start.html#g18). **(page [25](start.html#./start:s57))'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.4.1](start.html#g18). **(页 [25](start.html#./start:s57))'
- en: '| *  a*. | `(let ([x (* 3 a)]) (+ (- x b) (+ x b)))` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| *  a*. | `(let ([x (* 3 a)]) (+ (- x b) (+ x b)))` |'
- en: '| *  b*. | `(let ([x (list a b c)]) (cons (car x) (cdr x)))` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| *  b*. | `(let ([x (list a b c)]) (cons (car x) (cdr x)))` |'
- en: '**Exercise [2.4.2](start.html#g19). **(page [25](start.html#./start:s58))'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.4.2](start.html#g19). **(页 [25](start.html#./start:s58))'
- en: The value is 54\. The outer `let` binds `x` to 9, while the inner `let` binds
    `x` to 3 (9/3). The inner `let` evaluates to 6 (3 + 3), and the outer `let` evaluates
    to 54 (9 × 6).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 值为54。外部`let`将`x`绑定到9，而内部`let`将`x`绑定到3（9/3）。内部`let`评估为6（3 + 3），外部`let`评估为54（9
    × 6）。
- en: '**Exercise [2.4.3](start.html#g20). **(page [26](start.html#./start:s59))'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.4.3](start.html#g20). **(页 [26](start.html#./start:s59))'
- en: '| *  a*. | `(let ([x0 ''a] [y0 ''b])   (list (let ([x1 ''c]) (cons x1 y0))'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '| *  a*. | `(let ([x0 ''a] [y0 ''b])   (list (let ([x1 ''c]) (cons x1 y0))'
- en: (let ([y1 'd]) (cons x0 y1))))` |
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([y1 'd]) (cons x0 y1))))` |
- en: '| *  b*. | `(let ([x0 ''((a b) c)])   (cons (let ([x1 (cdr x0)])'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '| *  b*. | `(let ([x0 ''((a b) c)])   (cons (let ([x1 (cdr x0)]) |'
- en: (car x1))
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: (car x1))
- en: (let ([x2 (car x0)])
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([x2 (car x0)])
- en: (cons (let ([x3 (cdr x2)])
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: (cons (let ([x3 (cdr x2)])
- en: (car x3))
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: (car x3))
- en: (cons (let ([x4 (car x2)])
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: (cons (let ([x4 (car x2)])
- en: x4)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: x4)
- en: (cdr x2))))))` |
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: (cdr x2))))))` |
- en: '**Exercise [2.5.1](start.html#g22). **(page [30](start.html#./start:s72))'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.5.1](start.html#g22). **(页 [30](start.html#./start:s72))'
- en: '| *  a*. | `a` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| *  a*. | `a` |'
- en: '| *  b*. | `(a)` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| *  b*. | `(a)` |'
- en: '| *  c*. | `a` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| *  c*. | `a` |'
- en: '| *  d*. | `()` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| *  d*. | `()` |'
- en: '**Exercise [2.5.2](start.html#g23). **(page [30](start.html#./start:s73))'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.5.2](start.html#g23). **(页 [30](start.html#./start:s73))'
- en: See page [31](start.html#defn:list).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅页 [31](start.html#defn:list)。
- en: '**Exercise [2.5.3](start.html#g24). **(page [30](start.html#./start:s74))'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.5.3](start.html#g24). **(页 [30](start.html#./start:s74))'
- en: '| *  a*. | no free variables |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| *  a*. | 没有自由变量 |'
- en: '| *  b*. | `+` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| *  b*. | `+` |'
- en: '| *  c*. | `f` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| *  c*. | `f` |'
- en: '| *  d*. | `cons`, `f`, and `y` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| *  d*. | `cons`、`f` 和 `y` |'
- en: '| *  e*. | `cons` and `y` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| *  e*. | `cons` 和 `y` |'
- en: '| *  f*. | `cons`, `y`, and `z` (`y` also appears as a bound variable) |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| *  f*. | `cons`、`y` 和 `z`（`y`也作为绑定变量出现） |'
- en: '**Exercise [2.6.1](start.html#g26). **(page [34](start.html#./start:s91))'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.6.1](start.html#g26). **(页 [34](start.html#./start:s91))'
- en: The program would loop indefinitely.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 程序将无限循环。
- en: '**Exercise [2.6.2](start.html#g27). **(page [34](start.html#./start:s92))'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.6.2](start.html#g27). **(页 [34](start.html#./start:s92))'
- en: '`(define compose'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define compose'
- en: (lambda (p1 p2)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (p1 p2)
- en: (lambda (x)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (x)
- en: (p1 (p2 x)))))
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: (p1 (p2 x)))))
- en: (define cadr (compose car cdr))
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: (define cadr (compose car cdr))
- en: (define cddr (compose cdr cdr))`
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: (define cddr (compose cdr cdr))`
- en: '**Exercise [2.6.3](start.html#g28). **(page [34](start.html#./start:s96))'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.6.3](start.html#g28). **(页 [34](start.html#./start:s96))'
- en: '`(define caar (compose car car))'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define caar (compose car car))'
- en: (define cadr (compose car cdr))
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: (define cadr (compose car cdr))
- en: (define cdar (compose cdr car))
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: (define cdar (compose cdr car))
- en: (define cddr (compose cdr cdr))
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: (define cddr (compose cdr cdr))
- en: (define caaar (compose car caar))
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: (define caaar (compose car caar))
- en: (define caadr (compose car cadr))
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: (define caadr (compose car cadr))
- en: (define cadar (compose car cdar))
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: (define cadar (compose car cdar))
- en: (define caddr (compose car cddr))
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: (define caddr (compose car cddr))
- en: (define cdaar (compose cdr caar))
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: (define cdaar (compose cdr caar))
- en: (define cdadr (compose cdr cadr))
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: (define cdadr (compose cdr cadr))
- en: (define cddar (compose cdr cdar))
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: (define cddar (compose cdr cdar))
- en: (define cdddr (compose cdr cddr))
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: (define cdddr (compose cdr cddr))
- en: (define caaaar (compose caar caar))
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: (define caaaar (compose caar caar))
- en: (define caaadr (compose caar cadr))
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: (define caaadr (compose caar cadr))
- en: (define caadar (compose caar cdar))
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: (define caadar (compose caar cdar))
- en: (define caaddr (compose caar cddr))
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: (define caaddr (compose caar cddr))
- en: (define cadaar (compose cadr caar))
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: (define cadaar (compose cadr caar))
- en: (define cadadr (compose cadr cadr))
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: (define cadadr (compose cadr cadr))
- en: (define caddar (compose cadr cdar))
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: (define caddar (compose cadr cdar))
- en: (define cadddr (compose cadr cddr))
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: (define cadddr (compose cadr cddr))
- en: (define cdaaar (compose cdar caar))
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: (define cdaaar (compose cdar caar))
- en: (define cdaadr (compose cdar cadr))
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: (define cdaadr (compose cdar cadr))
- en: (define cdadar (compose cdar cdar))
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: (define cdadar (compose cdar cdar))
- en: (define cdaddr (compose cdar cddr))
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: (define cdaddr (compose cdar cddr))
- en: (define cddaar (compose cddr caar))
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: (define cddaar (compose cddr caar))
- en: (define cddadr (compose cddr cadr))
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: (define cddadr (compose cddr cadr))
- en: (define cdddar (compose cddr cdar))
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: (define cdddar (compose cddr cdar))
- en: (define cddddr (compose cddr cddr))`
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: (define cddddr (compose cddr cddr))`
- en: '**Exercise [2.7.1](start.html#g30). **(page [41](start.html#./start:s126))'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.7.1](start.html#g30). **(页 [41](start.html#./start:s126))'
- en: '`(define atom?'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define atom?'
- en: (lambda (x)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (x)
- en: (not (pair? x))))`
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: (not (pair? x))))`
- en: '**Exercise [2.7.2](start.html#g31). **(page [41](start.html#./start:s128))'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.7.2](start.html#g31). **(第[41](start.html#./start:s128)页)'
- en: '`(define shorter'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define shorter'
- en: (lambda (ls1 ls2)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ls1 ls2)
- en: (if (< (length ls2) (length ls1))
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: (if (< (length ls2) (length ls1))
- en: ls2
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: ls2
- en: ls1)))`
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ls1)))`
- en: '**Exercise [2.8.1](start.html#g33). **(page [46](start.html#./start:s149))'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.8.1](start.html#g33). **(第[46](start.html#./start:s149)页)'
- en: The structure of the output would be the mirror image of the structure of the
    input. For example, `(a . b)` would become `(b . a)` and `((a . b) . (c . d))`
    would become `((d . c) . (b . a))`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的结构将是输入结构的镜像。例如，`(a . b)`将变为`(b . a)`，`((a . b) . (c . d))`将变为`((d . c) . (b . a))`。
- en: '**Exercise [2.8.2](start.html#g34). **(page [46](start.html#./start:s150))'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.8.2](start.html#g34). **(第[46](start.html#./start:s150)页)'
- en: '`(define append'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define append'
- en: (lambda (ls1 ls2)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ls1 ls2)
- en: (if (null? ls1)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: (if (null? ls1)
- en: ls2
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ls2
- en: (cons (car ls1) (append (cdr ls1) ls2)))))`
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: (cons (car ls1) (append (cdr ls1) ls2)))))`
- en: '**Exercise [2.8.3](start.html#g35). **(page [46](start.html#./start:s152))'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.8.3](start.html#g35). **(第[46](start.html#./start:s152)页)'
- en: '`(define make-list'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define make-list'
- en: (lambda (n x)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (n x)
- en: (if (= n 0)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: (if (= n 0)
- en: '''()'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '''()'
- en: (cons x (make-list (- n 1) x)))))`
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: (cons x (make-list (- n 1) x)))))`
- en: '**Exercise [2.8.4](start.html#g36). **(page [47](start.html#./start:s154))'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.8.4](start.html#g36). **(第[47](start.html#./start:s154)页)'
- en: See the description of `list-ref` on page [160](objects.html#defn:list-ref)
    and the description of `list-tail` on page [160](objects.html#defn:list-tail).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 查看第[160](objects.html#defn:list-ref)页上`list-ref`的描述以及第[160](objects.html#defn:list-tail)页上`list-tail`的描述。
- en: '**Exercise [2.8.5](start.html#g37). **(page [47](start.html#./start:s155))'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.8.5](start.html#g37). **(第[47](start.html#./start:s155)页)'
- en: '`(define shorter?'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define shorter?'
- en: (lambda (ls1 ls2)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ls1 ls2)
- en: (and (not (null? ls2))
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: (and (not (null? ls2))
- en: (or (null? ls1)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: (or (null? ls1)
- en: (shorter? (cdr ls1) (cdr ls2))))))
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: (shorter? (cdr ls1) (cdr ls2))))))
- en: (define shorter
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: (define shorter
- en: (lambda (ls1 ls2)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ls1 ls2)
- en: (if (shorter? ls2 ls1)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: (if (shorter? ls2 ls1)
- en: ls2
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: ls2
- en: ls1)))`
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: ls1)))`
- en: '**Exercise [2.8.6](start.html#g38). **(page [47](start.html#./start:s158))'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.8.6](start.html#g38). **(第[47](start.html#./start:s158)页)'
- en: '`(define even?'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define even?'
- en: (lambda (x)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (x)
- en: (or (= x 0)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: (or (= x 0)
- en: (odd? (- x 1)))))
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: (odd? (- x 1)))))
- en: (define odd?
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: (define odd?
- en: (lambda (x)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (x)
- en: (and (not (= x 0))
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: (and (not (= x 0))
- en: (even? (- x 1)))))`
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: (even? (- x 1)))))`
- en: '**Exercise [2.8.7](start.html#g39). **(page [47](start.html#./start:s161))'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.8.7](start.html#g39). **(第[47](start.html#./start:s161)页)'
- en: '`(define transpose'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define transpose'
- en: (lambda (ls)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ls)
- en: (cons (map car ls) (map cdr ls))))`
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: (cons (map car ls) (map cdr ls))))`
- en: '**Exercise [2.9.1](start.html#g41). **(page [54](start.html#./start:s186))'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.9.1](start.html#g41). **(第[54](start.html#./start:s186)页)'
- en: '`(define make-counter'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define make-counter'
- en: (lambda (init incr)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (初始化 增量)
- en: (let ([next init])
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([next init])
- en: (lambda ()
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda ()
- en: (let ([v next])
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([v next])
- en: (set! next (+ next incr))
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: (set! next (+ next incr))
- en: v)))))`
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: v)))))`
- en: '**Exercise [2.9.2](start.html#g42). **(page [55](start.html#./start:s188))'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.9.2](start.html#g42). **(第[55](start.html#./start:s188)页)'
- en: '`(define make-stack'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define make-stack'
- en: (lambda ()
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda ()
- en: (let ([ls '()])
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([ls '()])
- en: (lambda (msg . args)
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (msg . args)
- en: (case msg
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: (case msg
- en: '[(empty? mt?) (null? ls)]'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[(empty? mt?) (null? ls)]'
- en: '[(push!) (set! ls (cons (car args) ls))]'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[(push!) (set! ls (cons (car args) ls))]'
- en: '[(top) (car ls)]'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[(top) (car ls)]'
- en: '[(pop!) (set! ls (cdr ls))]'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[(pop!) (set! ls (cdr ls))]'
- en: '[else "oops"])))))`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[else "oops"])))))`'
- en: '**Exercise [2.9.3](start.html#g43). **(page [55](start.html#./start:s191))'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.9.3](start.html#g43). **(第[55](start.html#./start:s191)页)'
- en: '`(define make-stack'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define make-stack'
- en: (lambda ()
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda ()
- en: (let ([ls '()])
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([ls '()])
- en: (lambda (msg . args)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (msg . args)
- en: (case msg
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: (case msg
- en: '[(empty? mt?) (null? ls)]'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[(empty? mt?) (null? ls)]'
- en: '[(push!) (set! ls (cons (car args) ls))]'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[(push!) (set! ls (cons (car args) ls))]'
- en: '[(top) (car ls)]'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[(top) (car ls)]'
- en: '[(pop!) (set! ls (cdr ls))]'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[(pop!) (set! ls (cdr ls))]'
- en: '[(ref) (list-ref ls (car args))]'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[(ref) (list-ref ls (car args))]'
- en: '[(set!) (set-car! (list-tail ls (car args)) (cadr args))]'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[(set!) (set-car! (list-tail ls (car args)) (cadr args))]'
- en: '[else "oops"])))))`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[else "oops"])))))`'
- en: '**Exercise [2.9.4](start.html#g44). **(page [55](start.html#./start:s192))'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.9.4](start.html#g44). **(第[55](start.html#./start:s192)页)'
- en: '`(define make-stack'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define make-stack'
- en: (lambda (n)
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (n)
- en: (let ([v (make-vector n)] [i -1])
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([v (make-vector n)] [i -1])
- en: (lambda (msg . args)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (msg . args)
- en: (case msg
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: (case msg
- en: '[(empty? mt?) (= i -1)]'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[(empty? mt?) (= i -1)]'
- en: '[(push!)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[(push!)'
- en: (set! i (+ i 1))
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: (set! i (+ i 1))
- en: (vector-set! v i (car args))]
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: (vector-set! v i (car args))]
- en: '[(top) (vector-ref v i)]'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[(top) (vector-ref v i)]'
- en: '[(pop!) (set! i (- i 1))]'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[(pop!) (set! i (- i 1))]'
- en: '[(ref) (vector-ref v (- i (car args)))]'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[(ref) (vector-ref v (- i (car args)))]'
- en: '[(set!) (vector-set! v (- i (car args)) (cadr args))]'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[(set!) (vector-set! v (- i (car args)) (cadr args))]'
- en: '[else "oops"])))))`'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[else "oops"])))))`'
- en: '**Exercise [2.9.5](start.html#g45). **(page [56](start.html#./start:s194))'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [2.9.5](start.html#g45). **(第[56](start.html#./start:s194)页)'
- en: '`(define emptyq?'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define emptyq?'
- en: (lambda (q)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (q)
- en: (eq? (car q) (cdr q))))
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: (eq? (car q) (cdr q))))
- en: (define getq
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: (define getq
- en: (lambda (q)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: (if (emptyq? q)
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: (assertion-violation 'getq "the queue is empty")
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: (car (car q)))))
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: (define delq!
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: (lambda (q)
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: (if (emptyq? q)
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: (assertion-violation 'delq! "the queue is empty")
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: (set-car! q (cdr (car q))))))`
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise [2.9.6](start.html#g46). **(page [56](start.html#./start:s195))'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '`(define make-queue'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: (lambda ()
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: (cons '() '())))
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: (define putq!
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: (lambda (q v)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: (let ([p (cons v '())])
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: (if (null? (car q))
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: (begin
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: (set-car! q p)
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: (set-cdr! q p))
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: (begin
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: (set-cdr! (cdr q) p)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: (set-cdr! q p))))))
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: (define getq
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: (lambda (q)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: (car (car q))))
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: (define delq!
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: (lambda (q)
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: (if (eq? (car q) (cdr q))
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: (begin
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: (set-car! q '())
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: (set-cdr! q '()))
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: (set-car! q (cdr (car q))))))`
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise [2.9.7](start.html#g47). **(page [56](start.html#./start:s196))'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: When asked to print a cyclic structure, some implementations print a representation
    of the output that reflects its cyclic structure. Other implementations do not
    detect the cycle and produce either no output or an infinite stream of output.
    When `length` is passed a cyclic list, an exception is raised, likely with a message
    indicating that the list is not proper. The definition of `length` on page [42](start.html#defn:simplelength)
    will, however, simply loop indefinitely.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise [2.9.8](start.html#g48). **(page [56](start.html#./start:s199))'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '`(define race'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: (lambda (hare tortoise)
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: (if (pair? hare)
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: (let ([hare (cdr hare)])
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: (if (pair? hare)
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: (and (not (eq? hare tortoise))
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: (race (cdr hare) (cdr tortoise)))
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: (null? hare)))
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: (null? hare))))
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: (define list?
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: (lambda (x)
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: (race x x)))`
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise [3.1.1](further.html#g51). **(page [64](further.html#./further:s25))'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '`(let ([x (memv ''a ls)]) (and x (memv ''b x))) ![<graphic>](ans_9.gif)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: ((lambda (x) (and x (memv 'b x))) (memv 'a ls)) ![<graphic>](ans_9.gif)
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: ((lambda (x) (if x (and (memv 'b x)) #f)) (memv 'a ls)) ![<graphic>](ans_9.gif)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: ((lambda (x) (if x (memv 'b x) #f)) (memv 'a ls))`
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise [3.1.2](further.html#g52). **(page [64](further.html#./further:s26))'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '`(or (memv x ''(a b c)) (list x)) ![<graphic>](ans_9.gif)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: (let ((t (memv x '(a b c)))) (if t t (or (list x)))) ![<graphic>](ans_9.gif)
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: ((lambda (t) (if t t (or (list x)))) (memv x '(a b c))) ![<graphic>](ans_9.gif)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: ((lambda (t) (if t t (list x))) (memv x '(a b c)))`
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise [3.1.3](further.html#g53). **(page [64](further.html#./further:s27))'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: See page [97](binding.html#defn:let*).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise [3.1.4](further.html#g54). **(page [64](further.html#./further:s29))'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '`(define-syntax when'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: (syntax-rules ()
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '[(_ e0 e1 e2 ...)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: (if e0 (begin e1 e2 ...))]))
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: (define-syntax unless
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: (syntax-rules ()
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[(_ e0 e1 e2 ...)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: (when (not e0) e1 e2 ...)]))`
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise [3.2.1](further.html#g56). **(page [72](further.html#./further:s52))'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: 'Tail-recursive: `even?` and `odd?`, `race`, `fact` in second definition of
    `factorial`, `fib` in second version of `fibonacci`. Nontail-recursive: `sum`,
    `factorial`, `fib` in first version of `fibonacci`. Both: `factor`.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise [3.2.2](further.html#g57). **(page [72](further.html#./further:s53))'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '`(define factor'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: (lambda (n)
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: (λ (n)
- en: (letrec ([f (lambda (n i)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: (letrec ([f (λ (n i)
- en: (cond
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: (条件
- en: '[(>= i n) (list n)]'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[(>= i n) (列表 n)]'
- en: '[(integer? (/ n i))'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '[(整数? (/ n i))'
- en: (cons i (f (/ n i) i))]
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: (cons i (f (/ n i) i))]
- en: '[else (f n (+ i 1))]))])'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '[否则 (f n (+ i 1))]))])'
- en: (f n 2))))`
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: (f n 2))))`
- en: '**Exercise [3.2.3](further.html#g58). **(page [72](further.html#./further:s55))'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.2.3](further.html#g58). **(页 [72](further.html#./further:s55))'
- en: Yes, but we need two named `let` expressions, one for `even?` and one for `odd?`.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，但我们需要两个命名的`let`表达式，一个用于`even?`，一个用于`odd?`。
- en: '`(let even? ([x 20])'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`(让 even? ([x 20])'
- en: (or (= x 0)
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: (或 (= x 0)
- en: (let odd? ([x (- x 1)])
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: (让 odd? ([x (- x 1)])
- en: (and (not (= x 0))
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: (和 (不 (= x 0))
- en: (even? (- x 1))))))`
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: (even? (- x 1))))))`
- en: '**Exercise [3.2.4](further.html#g59). **(page [72](further.html#./further:s56))'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.2.4](further.html#g59). **(页 [72](further.html#./further:s56))'
- en: '`(define fibcount1 0)'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`(定义 fibcount1 0)'
- en: (define fibonacci1
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: (定义 fibonacci1
- en: (lambda (n)
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: (λ (n)
- en: (let fib ([i n])
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: (让 fib ([i n])
- en: (set! fibcount1 (+ fibcount1 1))
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: (set! fibcount1 (+ fibcount1 1))
- en: (cond
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: (条件
- en: '[(= i 0) 0]'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '[(= i 0) 0]'
- en: '[(= i 1) 1]'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '[(= i 1) 1]'
- en: '[else (+ (fib (- i 1)) (fib (- i 2)))]))))'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '[否则 (+ (fib (- i 1)) (fib (- i 2)))]))))'
- en: (define fibcount2 0)
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: (定义 fibcount2 0)
- en: (define fibonacci2
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: (定义 fibonacci2
- en: (lambda (n)
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: (λ (n)
- en: (if (= n 0)
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: (如果 (= n 0)
- en: '0'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: (let fib ([i n] [a1 1] [a2 0])
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: (让 fib ([i n] [a1 1] [a2 0])
- en: (set! fibcount2 (+ fibcount2 1))
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: (set! fibcount2 (+ fibcount2 1))
- en: (if (= i 1)
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: (如果 (= i 1)
- en: a1
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: a1
- en: (fib (- i 1) (+ a1 a2) a1))))))`
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: (fib (- i 1) (+ a1 a2) a1))))))`
- en: The counts for `(fibonacci 10)` are 177 and 10, for `(fibonacci 20)` are 21891
    and 20, and for `(fibonacci 30)` are 2692537 and 30\. While the number of calls
    made by the second is directly proportional to the input, the number of calls
    made by the first grows rapidly (exponentially, in fact) as the input value increases.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`(斐波那契数 10`的计数为177和10，`斐波那契数 20`的计数为21891和20，`斐波那契数 30`的计数为2692537和30\. 第二个调用的次数与输入成正比，而第一个调用的次数随着输入值的增加而迅速增长（事实上是指数增长）。'
- en: '**Exercise [3.2.5](further.html#g60). **(page [73](further.html#./further:s57))'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.2.5](further.html#g60). **(页 [73](further.html#./further:s57))'
- en: See page [312](syntax.html#defn:let).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见页 [312](syntax.html#defn:let)。
- en: '**Exercise [3.2.6](further.html#g61). **(page [73](further.html#./further:s58))'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.2.6](further.html#g61). **(页 [73](further.html#./further:s58))'
- en: A call in the last subexpression of an `or` expression in tail position would
    not be a tail call with the modified definition of `or`. For the `even?`/`odd?`
    example, the resulting definition of `even?` would no longer be tail-recursive
    and for very large inputs might exhaust available space.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在`or`表达式的最后子表达式中的调用不是尾调用，因为`or`的修改定义。对于`even?`/`odd?`的例子，`even?`的结果定义将不再是尾递归的，对于非常大的输入可能会耗尽可用空间。
- en: 'The expansion performed by this definition is incorrect in another way, which
    has to do with multiple return values (Section [5.8](control.html#g104)): if the
    last subexpression returns multiple values, the `or` expression should return
    multiple values, but with the incorrect definition, each subexpression appears
    on the right-hand side of a `let`, which expects a single return value. The simpler
    and incorrect definition of `and` has the same problem.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 此定义执行的扩展在另一方面是不正确的，这与多返回值有关（第 [5.8](control.html#g104) 节）：如果最后一个子表达式返回多个值，则`or`表达式应返回多个值，但使用不正确的定义，每个子表达式都出现在`let`的右侧，`let`期望单个返回值。简单且不正确的`and`定义也有同样的问题。
- en: '**Exercise [3.2.7](further.html#g62). **(page [73](further.html#./further:s59))'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.2.7](further.html#g62). **(页 [73](further.html#./further:s59))'
- en: The first of the three versions of `factor` below directly addresses the identified
    problems by stopping at ![<graphic>](ans_10.gif), avoiding the redundant division,
    and skipping the even factors after 2\. Stopping at ![<graphic>](ans_10.gif) probably
    yields the biggest savings, followed by skipping even factors greater than 2\.
    Avoiding the redundant division is less important, since it occurs only when a
    factor is found.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 以下三个版本中的第一个直接解决了识别出的问题，停在![<graphic>](ans_10.gif)，避免了冗余的除法，并在2之后跳过偶数因子。停在![<graphic>](ans_10.gif)可能带来最大的节省，其次是跳过大于2的偶数因子。避免冗余的除法不那么重要，因为只有在找到因子时才会发生。
- en: '`(define factor'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`(定义 factor'
- en: (lambda (n)
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: (λ (n)
- en: (let f ([n n] [i 2] [step 1])
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: (让 f ([n n] [i 2] [step 1])
- en: (if (> i (sqrt n))
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: (如果 (> i (sqrt n))
- en: (list n)
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: (列表 n)
- en: (let ([n/i (/ n i)])
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: (让 ([n/i (/ n i)])
- en: (if (integer? n/i)
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: (如果 (整数? n/i)
- en: (cons i (f n/i i step))
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: (cons i (f n/i i step))
- en: (f n (+ i step) 2)))))))`
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: (f n (+ i step) 2)))))))`
- en: The second version replaces `(> i (sqrt n))` with `(> (* i i) n)`, since `*`
    is typically much faster than `sqrt`.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个版本用`(* i i)`替换了`(> i (sqrt n))`，因为`*`通常比`sqrt`快得多。
- en: '`(define factor'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`(定义 factor'
- en: (lambda (n)
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: (λ (n)
- en: (let f ([n n] [i 2] [step 1])
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: (让 f ([n n] [i 2] [step 1])
- en: (if (> (* i i) n)
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: (如果 (> (* i i) n)
- en: (list n)
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: (列表 n)
- en: (let ([n/i (/ n i)])
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([n/i (/ n i)])
- en: (if (integer? n/i)
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: (if (integer? n/i)
- en: (cons i (f n/i i step))
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: (cons i (f n/i i step))
- en: (f n (+ i step) 2)))))))`
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: (f n (+ i step) 2)))))))`
- en: The third version uses `gcd` (see page [179](objects.html#page:gcd)) to avoid
    most of the divisions, since `gcd` should be faster than `/`.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个版本使用 `gcd`（参见第 [179](objects.html#page:gcd) 页）来避免大部分除法，因为 `gcd` 应该比 `/` 更快。
- en: '`(define factor'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define factor'
- en: (lambda (n)
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (n)
- en: (let f ([n n] [i 2] [step 1])
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: (let f ([n n] [i 2] [step 1])
- en: (if (> (* i i) n)
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: (if (> (* i i) n)
- en: (list n)
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: (list n)
- en: (if (= (gcd n i) 1)
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: (if (= (gcd n i) 1)
- en: (f n (+ i step) 2)
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: (f n (+ i step) 2)
- en: (cons i (f (/ n i) i step)))))))`
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: (cons i (f (/ n i) i step)))))))`
- en: To see the difference these changes make, time each version of `factor`, including
    the original, in your Scheme system to see which performs better. Try a variety
    of inputs, including larger ones like `(+ (expt 2 100) 1)`.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这些更改带来的差异，请在您的 Scheme 系统中计时每个 `factor` 版本，包括原始版本，以查看哪个性能更好。尝试各种输入，包括像 `(+ (expt 2 100) 1)`
    这样的更大输入。
- en: '**Exercise [3.3.1](further.html#g70). **(page [77](further.html#./further:s66))'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.3.1](further.html#g70). **(页码 [77](further.html#./further:s66))'
- en: '`(let ([k.n (call/cc (lambda (k) (cons k 0)))])'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`(let ([k.n (call/cc (lambda (k) (cons k 0)))])'
- en: (let ([k (car k.n)] [n (cdr k.n)])
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([k (car k.n)] [n (cdr k.n)])
- en: (write n)
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: (write n)
- en: (newline)
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: (newline)
- en: (k (cons k (+ n 1)))))`
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: (k (cons k (+ n 1)))))`
- en: 'Or with multiple values (see Section [5.8](control.html#g104)):'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用多值（参见第 [5.8](control.html#g104) 节）：
- en: '`(call-with-values'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`(call-with-values'
- en: (lambda () (call/cc (lambda (k) (values k 0))))
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda () (call/cc (lambda (k) (values k 0))))
- en: (lambda (k n)
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (k n)
- en: (write n)
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: (write n)
- en: (newline)
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: (newline)
- en: (k k (+ n 1))))`
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: (k k (+ n 1))))`
- en: '**Exercise [3.3.2](further.html#g71). **(page [77](further.html#./further:s67))'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.3.2](further.html#g71). **(页码 [77](further.html#./further:s67))'
- en: '`(define product'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define product'
- en: (lambda (ls)
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ls)
- en: (if (null? ls)
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: (if (null? ls)
- en: '1'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: (if (= (car ls) 0)
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: (if (= (car ls) 0)
- en: '0'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: (let ([n (product (cdr ls))])
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([n (product (cdr ls))])
- en: (if (= n 0) 0 (* n (car ls))))))))`
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: (if (= n 0) 0 (* n (car ls))))))))`
- en: '**Exercise [3.3.3](further.html#g72). **(page [77](further.html#./further:s68))'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.3.3](further.html#g72). **(页码 [77](further.html#./further:s68))'
- en: If one of the processes returns without calling `pause`, it returns to the call
    to `pause` that first caused it to run, or to the original call to `start` if
    it was the first process in the list. Here is a reimplementation of the system
    that allows a process to `quit` explicitly. If other processes are active, the
    `lwp` system continues to run. Otherwise, control returns to the continuation
    of the original call to `start`.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个进程在不调用 `pause` 的情况下返回，则返回到首次运行它的 `pause` 调用，或者如果它是列表中的第一个进程，则返回到原始的 `start`
    调用。以下是允许进程显式 `quit` 的系统的重新实现。如果其他��程仍在活动，则 `lwp` 系统继续运行。否则，控制返回到原始 `start` 调用的延续。
- en: '`(define lwp-list ''())'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define lwp-list ''())'
- en: (define lwp
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: (define lwp
- en: (lambda (thunk)
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (thunk)
- en: (set! lwp-list (append lwp-list (list thunk)))))
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: (set! lwp-list (append lwp-list (list thunk)))))
- en: (define start
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: (define start
- en: (lambda ()
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda ()
- en: (call/cc
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: (call/cc
- en: (lambda (k)
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (k)
- en: (set! quit-k k)
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: (set! quit-k k)
- en: (next)))))
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: (next)))))
- en: (define next
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: (define next
- en: (lambda ()
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda ()
- en: (let ([p (car lwp-list)])
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([p (car lwp-list)])
- en: (set! lwp-list (cdr lwp-list))
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: (set! lwp-list (cdr lwp-list))
- en: (p))))
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: (p))))
- en: (define pause
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: (define pause
- en: (lambda ()
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda ()
- en: (call/cc
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: (call/cc
- en: (lambda (k)
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (k)
- en: (lwp (lambda () (k #f)))
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: (lwp (lambda () (k #f)))
- en: (next)))))
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: (next)))))
- en: (define quit
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: (define quit
- en: (lambda (v)
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (v)
- en: (if (null? lwp-list)
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: (if (null? lwp-list)
- en: (quit-k v)
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: (quit-k v)
- en: (next))))`
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: (next))))`
- en: '**Exercise [3.3.4](further.html#g73). **(page [77](further.html#./further:s69))'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.3.4](further.html#g73). **(页码 [77](further.html#./further:s69))'
- en: '`(define lwp-queue (make-queue))'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define lwp-queue (make-queue))'
- en: (define lwp
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: (define lwp
- en: (lambda (thunk)
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (thunk)
- en: (putq! lwp-queue thunk)))
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: (putq! lwp-queue thunk)))
- en: (define start
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: (define start
- en: (lambda ()
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda ()
- en: (let ([p (getq lwp-queue)])
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([p (getq lwp-queue)])
- en: (delq! lwp-queue)
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: (delq! lwp-queue)
- en: (p))))
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: (p))))
- en: (define pause
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: (define pause
- en: (lambda ()
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda ()
- en: (call/cc
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: (call/cc
- en: (lambda (k)
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (k)
- en: (lwp (lambda () (k #f)))
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: (lwp (lambda () (k #f)))
- en: (start)))))`
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: (start)))))`
- en: '**Exercise [3.4.1](further.html#g76). **(page [80](further.html#./further:s75))'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.4.1](further.html#g76). **(页码 [80](further.html#./further:s75))'
- en: '`(define reciprocal'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define reciprocal'
- en: (lambda (n success failure)
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (n success failure)
- en: (if (= n 0)
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: (if (= n 0)
- en: (failure)
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: (failure)
- en: (success (/ 1 n)))))`
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: (success (/ 1 n)))))`
- en: '**Exercise [3.4.2](further.html#g77). **(page [80](further.html#./further:s77))'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.4.2](further.html#g77). **(页码 [80](further.html#./further:s77))'
- en: '`(define retry #f)'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define retry #f)'
- en: (define factorial
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: (define factorial
- en: (lambda (x)
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (x)
- en: (let f ([x x] [k (lambda (x) x)])
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: (let f ([x x] [k (λ (x) x)])
- en: (if (= x 0)
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: (if (= x 0)
- en: (begin (set! retry k) (k 1))
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: (begin (set! retry k) (k 1))
- en: (f (- x 1) (lambda (y) (k (* x y))))))))`
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: (f (- x 1) (lambda (y) (k (* x y))))))))`
- en: '**Exercise [3.4.3](further.html#g78). **(page [80](further.html#./further:s79))'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.4.3](further.html#g78). **(页码 [80](further.html#./further:s79))'
- en: '`(define map/k'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define map/k'
- en: (lambda (p ls k)
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (p ls k)
- en: (if (null? ls)
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: (if (null? ls)
- en: (k '())
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: (k '())
- en: (p (car ls)
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: (p (car ls)
- en: (lambda (x)
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (x)
- en: (map/k p (cdr ls)
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: (map/k p (cdr ls)
- en: (lambda (ls)
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ls)
- en: (k (cons x ls)))))))))
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: (k (cons x ls)))))))))
- en: (define reciprocals
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: (define reciprocals
- en: (lambda (ls)
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ls)
- en: (map/k (lambda (x k) (if (= x 0) "zero found" (k (/ 1 x))))
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: (map/k (lambda (x k) (if (= x 0) "找到零" (k (/ 1 x))))
- en: ls
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: ls
- en: (lambda (x) x))))`
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (x) x))))`
- en: '**Exercise [3.5.1](further.html#g80). **(page [85](further.html#./further:s86))'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.5.1](further.html#g80). **(页码 [85](further.html#./further:s86))'
- en: '`(define-syntax complain'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define-syntax complain'
- en: (syntax-rules ()
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: (syntax-rules ()
- en: '[(_ ek msg expr) (ek (list msg expr))]))`'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '[(_ ek msg expr) (ek (list msg expr))]))`'
- en: '**Exercise [3.5.2](further.html#g81). **(page [85](further.html#./further:s87))'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.5.2](further.html#g81). **(页码 [85](further.html#./further:s87))'
- en: '`(define calc'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define calc'
- en: (lambda (expr)
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (expr)
- en: (call/cc
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: (call/cc
- en: (lambda (ek)
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ek)
- en: (define do-calc
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: (define do-calc
- en: (lambda (expr)
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (expr)
- en: (cond
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: (cond
- en: '[(number? expr) expr]'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '[(number? expr) expr]'
- en: '[(and (list? expr) (= (length expr) 3))'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '[(and (list? expr) (= (length expr) 3))'
- en: (let ([op (car expr)] [args (cdr expr)])
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([op (car expr)] [args (cdr expr)])
- en: (case op
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: (case op
- en: '[(add) (apply-op + args)]'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[(add) (apply-op + args)]'
- en: '[(sub) (apply-op - args)]'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '[(sub) (apply-op - args)]'
- en: '[(mul) (apply-op * args)]'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '[(mul) (apply-op * args)]'
- en: '[(div) (apply-op / args)]'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '[(div) (apply-op / args)]'
- en: '[else (complain "invalid operator" op)]))]'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[else (complain "无效的运算符" op)]))]'
- en: '[else (complain "invalid expression" expr)])))'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '[else (complain "无效的表达式" expr)])))'
- en: (define apply-op
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: (define apply-op
- en: (lambda (op args)
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (op args)
- en: (op (do-calc (car args)) (do-calc (cadr args)))))
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: (op (do-calc (car args)) (do-calc (cadr args)))))
- en: (define complain
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: (define complain
- en: (lambda (msg expr)
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (msg expr)
- en: (ek (list msg expr))))
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: (ek (list msg expr))))
- en: (do-calc expr)))))`
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: (do-calc expr)))))`
- en: '**Exercise [3.5.3](further.html#g82). **(page [85](further.html#./further:s88))'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.5.3](further.html#g82). **(页码 [85](further.html#./further:s88))'
- en: '`(define calc #f)'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define calc #f)'
- en: (let ()
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: (let ()
- en: (define do-calc
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: (define do-calc
- en: (lambda (expr)
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (expr)
- en: (cond
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: (cond
- en: '[(number? expr) expr]'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '[(number? expr) expr]'
- en: '[(and (list? expr) (= (length expr) 3))'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '[(and (list? expr) (= (length expr) 3))'
- en: (let ([op (car expr)] [args (cdr expr)])
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([op (car expr)] [args (cdr expr)])
- en: (case op
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: (case op
- en: '[(add) (apply-op + args)]'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '[(add) (apply-op + args)]'
- en: '[(sub) (apply-op - args)]'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '[(sub) (apply-op - args)]'
- en: '[(mul) (apply-op * args)]'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '[(mul) (apply-op * args)]'
- en: '[(div) (apply-op / args)]'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '[(div) (apply-op / args)]'
- en: '[else (complain "invalid operator" op)]))]'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '[else (complain "无效的运算符" op)]))]'
- en: '[else (complain "invalid expression" expr)])))'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '[else (complain "无效的表达式" expr)])))'
- en: (define apply-op
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: (define apply-op
- en: (lambda (op args)
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (op args)
- en: (op (do-calc (car args)) (do-calc (cadr args)))))
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: (op (do-calc (car args)) (do-calc (cadr args)))))
- en: (define complain
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: (define complain
- en: (lambda (msg expr)
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (msg expr)
- en: (assertion-violation 'calc msg expr)))
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: (assertion-violation 'calc msg expr)))
- en: (set! calc
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: (set! calc
- en: (lambda (expr)
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (expr)
- en: (do-calc expr))))`
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: (do-calc expr))))`
- en: '**Exercise [3.5.4](further.html#g83). **(page [85](further.html#./further:s89))'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.5.4](further.html#g83). **(页码 [85](further.html#./further:s89))'
- en: This adds `sqrt`, `times` (an alias for `mul`), and `expt` along with `minus`.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 这里添加了 `sqrt`, `times`（`mul`的别名）和 `expt` 以及 `minus`。
- en: '`(let ()'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '`(let ()'
- en: (define do-calc
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: (define do-calc
- en: (lambda (ek expr)
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ek expr)
- en: (cond
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: (cond
- en: '[(number? expr) expr]'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '[(number? expr) expr]'
- en: '[(and (list? expr) (= (length expr) 2))'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '[(and (list? expr) (= (length expr) 2))'
- en: (let ([op (car expr)] [args (cdr expr)])
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([op (car expr)] [args (cdr expr)])
- en: (case op
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: (case op
- en: '[(minus) (apply-op1 ek - args)]'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '[(minus) (apply-op1 ek - args)]'
- en: '[(sqrt) (apply-op1 ek sqrt args)]'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '[(sqrt) (apply-op1 ek sqrt args)]'
- en: '[else (complain ek "invalid unary operator" op)]))]'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '[else (complain ek "无效的一元运算符" op)]))]'
- en: '[(and (list? expr) (= (length expr) 3))'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '[(and (list? expr) (= (length expr) 3))'
- en: (let ([op (car expr)] [args (cdr expr)])
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([op (car expr)] [args (cdr expr)])
- en: (case op
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: (case op
- en: '[(add) (apply-op2 ek + args)]'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '[(add) (apply-op2 ek + args)]'
- en: '[(sub) (apply-op2 ek - args)]'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '[(sub) (apply-op2 ek - args)]'
- en: '[(mul times) (apply-op2 ek * args)]'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '[(mul times) (apply-op2 ek * args)]'
- en: '[(div) (apply-op2 ek / args)]'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '[(div) (apply-op2 ek / args)]'
- en: '[(expt) (apply-op2 ek expt args)]'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '[(expt) (apply-op2 ek expt args)]'
- en: '[else (complain ek "invalid binary operator" op)]))]'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '[else (complain ek "无效的二元运算符" op)]))]'
- en: '[else (complain ek "invalid expression" expr)])))'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '[else (complain ek "无效的表达式" expr)])))'
- en: (define apply-op1
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: (define apply-op1
- en: (lambda (ek op args)
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ek op args)
- en: (op (do-calc ek (car args)))))
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: (op (do-calc ek (car args)))))
- en: (define apply-op2
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: (define apply-op2
- en: (lambda (ek op args)
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ek op args)
- en: (op (do-calc ek (car args)) (do-calc ek (cadr args)))))
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: (op (do-calc ek (car args)) (do-calc ek (cadr args)))))
- en: (define complain
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: (define complain
- en: (lambda (ek msg expr)
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ek msg expr)
- en: (ek (list msg expr))))
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: (ek (list msg expr))))
- en: (set! calc
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: (set! calc
- en: (lambda (expr)
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (expr)
- en: (call/cc
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: (call/cc
- en: (lambda (ek)
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ek)
- en: (do-calc ek expr))))))`
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: (do-calc ek expr))))))`
- en: '**Exercise [3.6.1](further.html#g85). **(page [87](further.html#./further:s90))'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.6.1](further.html#g85). **(页码 [87](further.html#./further:s90))'
- en: This version of `gpa` returns `x` when all of the input letter grades are `x`.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的 `gpa` 在所有输入的字母等级都是 `x` 时返回 `x`。
- en: '`(define-syntax gpa'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define-syntax gpa'
- en: (syntax-rules ()
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: (syntax-rules ()
- en: '[(_ g1 g2 ...)'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '[(_ g1 g2 ...)'
- en: (let ([ls (map letter->number (remq 'x '(g1 g2 ...)))])
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: (let ([ls (map letter->number (remq 'x '(g1 g2 ...)))])
- en: (if (null? ls)
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: (if (null? ls)
- en: '''x'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '''x'
- en: (/ (apply + ls) (length ls))))]))`
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: (/ (apply + ls) (length ls))))]))`
- en: '**Exercise [3.6.2](further.html#g86). **(page [87](further.html#./further:s91))'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.6.2](further.html#g86)。**（页 [87](further.html#./further:s91)）'
- en: 'After defining `$distribution` and `distribution` within the library as follows:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 在库中定义了如下的`$distribution`和`distribution`之后：
- en: '`(define $distribution'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define $distribution'
- en: (lambda (ls)
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (ls)
- en: (let loop ([ls ls] [a 0] [b 0] [c 0] [d 0] [f 0])
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: (let loop ([ls ls] [a 0] [b 0] [c 0] [d 0] [f 0])
- en: (if (null? ls)
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: (if (null? ls)
- en: (list (list a 'a) (list b 'b) (list c 'c)
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: (list (list a 'a) (list b 'b) (list c 'c)
- en: (list d 'd) (list f 'f))
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: (list d 'd) (list f 'f))
- en: (case (car ls)
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: (case (car ls)
- en: '[(a) (loop (cdr ls) (+ a 1) b c d f)]'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '[(a) (loop (cdr ls) (+ a 1) b c d f)]'
- en: '[(b) (loop (cdr ls) a (+ b 1) c d f)]'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '[(b) (loop (cdr ls) a (+ b 1) c d f)]'
- en: '[(c) (loop (cdr ls) a b (+ c 1) d f)]'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '[(c) (loop (cdr ls) a b (+ c 1) d f)]'
- en: '[(d) (loop (cdr ls) a b c (+ d 1) f)]'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '[(d) (loop (cdr ls) a b c (+ d 1) f)]'
- en: '[(f) (loop (cdr ls) a b c d (+ f 1))]'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '[(f) (loop (cdr ls) a b c d (+ f 1))]'
- en: ; ignore x grades, per preceding exercise
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: ; 忽略x等级，参照前述练习
- en: '[(x) (loop (cdr ls) a b c d f)]'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '[(x) (loop (cdr ls) a b c d f)]'
- en: '[else (assertion-violation ''distribution'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '[else (assertion-violation ''distribution'
- en: '"unrecognized grade letter"'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '"未识别的成绩等级"'
- en: (car ls))])))))
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: (car ls))])))))
- en: (define-syntax distribution
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: (define-syntax distribution
- en: (syntax-rules ()
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: (syntax-rules ()
- en: '[(_ g1 g2 ...)'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '[(_ g1 g2 ...)'
- en: ($distribution '(g1 g2 ...))]))`
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: ($distribution '(g1 g2 ...))]))`
- en: modify the `export` line to add `distribution` (but not `$distribution`).
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`export`行以添加`distribution`（但不添加`$distribution`）。
- en: '**Exercise [3.6.3](further.html#g87). **(page [87](further.html#./further:s92))'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 [3.6.3](further.html#g87)。**（页 [87](further.html#./further:s92)）'
- en: 'After defining `histogram` as follows:'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了以下`histogram`之后：
- en: '`(define histogram'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define histogram'
- en: (lambda (port distr)
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (port distr)
- en: (for-each
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: (for-each
- en: (lambda (n g)
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: (lambda (n g)
- en: (put-datum port g)
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: (put-datum port g)
- en: (put-string port ": ")
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: (put-string port ": ")
- en: (let loop ([n n])
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: (let loop ([n n])
- en: (unless (= n 0)
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: (unless (= n 0)
- en: (put-char port #\*)
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: (put-char port #\*)
- en: (loop (- n 1))))
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: (loop (- n 1))))
- en: (put-string port "\n"))
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: (put-string port "\n"))
- en: (map car distr)
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: (map car distr)
- en: (map cadr distr))))`
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: (map cadr distr))))`
- en: modify the `export` line to add `histogram`. The solution uses `for-each`, which
    is described on page [118](control.html#desc:for-each)
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`export`行以添加`histogram`。该解决方案使用`for-each`，在[118](control.html#desc:for-each)页上描述了该方法。
