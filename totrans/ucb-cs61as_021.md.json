["```\n(define (square-sent sent)\n  (if (empty? sent) `\n      '()\n      (se (square (first sent))\n          (square-sent (bf sent))))) \n```", "```\n(define (pigl-sent sent)\n  (if (empty? sent)\n      '()\n      (se (pigl (first sent))\n          (pigl-sent (bf sent))))) \n```", "```\n-> (initials '(if i needed someone))\n'(i i n s)\n```", "```\n-> (define (keep-three-letter-words sent)\n     (cond ((empty? sent) '())\n           ((= (count (first sent)) 3)\n             (se (first sent) (keep-three-letter-words (bf sent))))\n           (else\n             (keep-three-letter-words (bf sent)))))\n\n-> (keep-three-letter-words '(one two three four five six seven))\n'(one two six) \n```", "```\n-> (define (keep-vowels wd)\n     (cond ((empty? wd) \"\")\n           ((vowel? (first wd))\n             (word (first wd) (keep-vowels (bf wd))))\n           (else\n             (keep-vowels (bf wd)))))\n\n-> (keep-vowels 'napoleon)\n'aoeo \n```", "```\n-> (numbers '(76 trombones and 110 cornets))\n'(76 110)\n```", "```\n-> (define (addup nums)\n     (if (empty? nums)\n         0\n         (+ (first nums)\n            (addup (bf nums)))))\n-> (addup '(8 3 6 1 10))\n28\n\n-> (define (scrunch-words sent)\n     (if (empty? sent)\n         \"\" ; This is an empty word\n         (word (first sent)\n               (scrunch-words (bf sent)))))\n-> (scrunch-words '(ack now ledge able))\n'acknowledgeable \n```", "```\n(define (pigl wd)\n  (if (pl-done? wd)\n      (word wd 'ay)\n      (pigl (word (bf wd) (first wd)))))\n\n(define (count-ums sent)\n  (cond ((empty? sent) 0)\n        ((um? (first sent)) (+ 1 (count-ums (bf sent))))\n        (else (count-ums (bf sent)))))\n\n(define (fib n)\n  (cond ((= n 0) 0)\n        ((= n 1) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n```"]