- en: 12Representation Decisions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12表示决策
- en: Go back and look again at our interpreter for function as values [REF]. Do you
    see something curiously non-uniform about it?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 回头再看看我们对函数作为值的解释器[REF]。你是否发现了一些奇怪的不一致之处？
- en: Do Now!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就做！
- en: No, really, do. Do you?
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不，真的，做吧。你会吗？
- en: 'Consider how we chose to represent our two different kinds of values: numbers
    and functions. Ignoring the superficial numV and closV wrappers, focus on the
    underlying data representations. We represented the interpreted language’s numbers
    as Racket numbers, but we did not represent the interpreted language’s functions
    (closures) as Racket functions (closures).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我们选择如何表示我们两种不同类型的值：数字和函数。忽略表面的numV和closV包装，关注底层数据表示。我们将解释语言的数字表示为Racket数字，但我们没有将解释语言的函数（闭包）表示为Racket函数（闭包）。
- en: That’s our non-uniformity. It would have been more uniform to use Racket’s representations
    for both, or also to not use Racket’s representation for either. So why did we
    make this particular choice?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的不一致性。使用Racket的表示形式来表示两者更加一致，或者干脆两者都不使用Racket的表示形式会更加一致。那么为什么我们做出了这个特定的选择呢？
- en: We were trying to illustrate and point, and that point is what we will explore
    right now.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们试图阐明和指出，而这一点就是我们现在要探讨的。
- en: 12.1Changing Representations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.1改变表示
- en: 'For a moment, let’s explore numbers. Racket’s numbers make a good target for
    reuse because they are so powerful: we get arbitrary-sized integers (bignums),
    rationals (which benefit from the bignum representation of integers), complex
    numbers, and so on. Therefore, they can represent most ordinary programming language
    number systems. However, that doesn’t mean they are what we want: they could be
    too little or too much.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时探讨一下数字。Racket的数字是一个很好的重用目标，因为它们非常强大：我们可以得到任意大小的整数（大整数），有理数（受益于整数的大整数表示），复数等等。因此，它们可以表示大多数普通编程语言的数字系统。然而，这并不意味着它们就是我们想要的：它们可能太少或太多。
- en: They are too much if what we want is a more restricted number system. For instance,
    Java prescribes a very specific set of fixed-size representations (e.g., int is
    specified to be 32-bit). Numbers that fall outside these sets cannot be directly
    represented as numbers, and arithmetic must respect these sets (e.g., overflowing
    so that adding 1 to 2147483647 does not produce 2147483648).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们想要一个更受限制的数字系统，这些就太多了。例如，Java规定了一个非常具体的固定大小表示集合（例如，int被指定为32位）。超出这些集合范围的数字不能直接表示为数字，算术运算必须遵守这些集合（例如，溢出，使得将1加到2147483647不会产生2147483648）。
- en: They are too little if we want even richer numbers, whether quaternions or numbers
    with associated probabilities.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们想要更丰富的数字，无论是四元数还是带有相关概率的数字，它们就太少了。
- en: Worse, we didn’t even stop and ask what we wanted, but blithely proceeded with
    Racket numbers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，我们甚至没有停下来问自己我们想要什么，而是轻率地继续使用Racket数字。
- en: The reason we did so is because we weren’t really interested in the study of
    numbers; rather, we were interested in programming language features such as functions-as-values.
    As language designers, however, you should be sure to ask these hard questions
    up front.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做的原因是因为我们并不真正关心数字的研究；相反，我们对函数作为值等编程语言特性感兴趣。然而，作为语言设计者，你应该确保提出这些艰难的问题。
- en: Now let’s talk about our representation of closures. We could have instead represented
    closures by exploiting Racket’s corresponding concept, and correspondingly, function
    application with unvarnished Racket application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们谈谈我们对闭包的表示。我们本可以通过利用Racket的相应概念来表示闭包，相应地，使用Racket应用来表示函数应用。
- en: Do Now!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就做！
- en: Replace the closure data structure with Racket functions representing functions-as-values.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用代表函数作为值的Racket函数替换闭包数据结构。
- en: 'Here we go:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了：
- en: '| (define-type Value |'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define-type Value |'
- en: '|   [numV (n : number)] |'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [numV (n : number)] |'
- en: '|   [closV (f : (Value -> Value))]) |'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [closV (f : (Value -> Value))]) |'
- en: '|   |'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   |'
- en: '| (define (interp [expr : ExprC] [env : Env]) : Value |'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (interp [expr : ExprC] [env : Env]) : Value |'
- en: '|   (type-case ExprC expr |'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (type-case ExprC expr |'
- en: '|     [numC (n) (numV n)] |'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [numC (n) (numV n)] |'
- en: '|     [idC (n) (lookup n env)] |'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [idC (n) (lookup n env)] |'
- en: '|     [appC (f a) (local ([define f-value (interp f env)] |'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [appC (f a) (local ([define f-value (interp f env)] |'
- en: '|                         [define a-value (interp a env)]) |'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                         [define a-value (interp a env)]) |'
- en: '|                   ((closV-f f-value) a-value))] |'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                   ((closV-f f-value) a-value))] |'
- en: '|     [plusC (l r) (num+ (interp l env) (interp r env))] |'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [plusC (l r) (num+ (interp l env) (interp r env))] |'
- en: '|     [multC (l r) (num* (interp l env) (interp r env))] |'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [multC (l r) (num* (interp l env) (interp r env))] |'
- en: '|     [lamC (a b) (closV (lambda (arg-val) |'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [lamC (a b) (closV (lambda (arg-val) |'
- en: '|                          (interp b |'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                          (interp b |'
- en: '|                                  (extend-env (bind a arg-val) |'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                                  (extend-env (bind a arg-val) |'
- en: '|                                              env))))])) |'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                                              env))))])) |'
- en: Exercise
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: Observe a curious shift. In our previous implementation, the environment was
    extended in the appC case. Here, it’s extended in the lamC case. Is one of these
    incorrect? If not, why did this change occur?
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意一个奇怪的变化。在我们之前的实现中，环境在appC情况下被扩展。在这里，它在lamC情况下被扩展。其中一个是错误的吗？如果不是，为什么会发生这种变化？
- en: 'This is certainly concise, but we’ve lost something very important: understanding.
    Saying that a source language function corresponds to lambda tells us virtually
    nothing: if we already knew precisely what lambda does we might not be studying
    it, and if we didn’t, this mapping would teach us absolutely nothing (and might,
    in fact, pile confusion on top of our ignorance). For the same reason, we did
    not use Racket’s state to understand the varieties of stateful operators [REF].'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实很简洁，但我们失去了非常重要的东西：理解。说源语言函数对应于lambda几乎告诉我们什么都没有：如果我们已经准确知道lambda做什么，我们可能不会学习它，如果我们不知道，这种映射将完全教会我们什么都不知道（实际上，可能会在我们的无知之上增加混乱）。出于同样的原因，我们没有使用Racket的状态来理解有状态操作符的各种变体[参考]。
- en: 'Once we’ve understood the feature, however, we should feel to use it as a representation.
    Indeed, doing so might yield much more concise interpreters because we aren’t
    doing everything manually. In fact, some later interpreters [REF] will become
    virtually unreadable if we did not exploit these richer representations.It’s a
    little like saying, “Now that we understand addition in terms of increment-by-one,
    we can use addition to define multiplication: we don’t have to use only increment-by-one
    to define it.” Nevertheless, exploiting host language features has perils that
    we should safeguard against.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们理解了这个特性，我们应该感到可以将其用作表示。事实上，这样做可能会产生更简洁的解释器，因为我们不是手动做所有事情。事实上，一些后续的解释器[参考]如果我们没有利用这些更丰富的表示，将变得几乎无法阅读。这有点像说，“现在我们理解了递增一的加法，我们可以使用加法来定义乘法：我们不必只使用递增一来定义它。”然而，利用宿主语言特性存在危险，我们应该加以防范。
- en: 12.2Errors
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.2错误
- en: When programs go wrong, programmers need a careful presentation of errors. Using
    host language features runs the risk that users will see host language errors,
    which they will not understand. Therefore, we have to carefully translate error
    conditions into terms that the user of our language will understand, without letting
    the host language “leak through”.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序出错时，程序员需要仔细呈现错误。使用宿主语言特性会导致用户看到宿主语言错误的风险，而他们将无法理解。因此，我们必须仔细地将错误条件转化为我们语言的用户能理解的术语，而不让宿主语言“泄漏出来”。
- en: Worse, programs that should error might not! For instance, suppose we decide
    that functions should only appear in top-level positions. If we fail to expressly
    check for this, desugaring into the more permissive lambda may result in an interpreter
    that produces answers where it should have halted with an error. Therefore, we
    have to take great care to permit only the intended surface language to be mapped
    to the host language.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，应该出错的程序可能不会出错！例如，假设我们决定函数只能出现在顶层位置。如果我们未明确检查这一点，将宏展开为更宽松的lambda可能会导致解释器产生应该出错而未出错的答案。因此，我们必须非常小心，只允许预期的表面语言映射到宿主语言。
- en: As another example, consider the different mutation operations. In our language,
    attempting to mutate an unbound variable produces an error. In some languages,
    doing so results in the variable being defined. Failing to pin down our intended
    semantics is a common language designer error, saying instead, “It is whatever
    the implementation does”. This attitude (a) is lazy and sloppy, (b) may yield
    unexpected and negative consequences, and (c) makes it hard for you to move your
    language from one implementation platform to another. Don’t ever make this mistake!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑不同的变异操作。在我们的语言中，尝试变异未绑定的变量会产生错误。在一些语言中，这样做会导致变量被定义。未明确确定我们的预期语义是常见的语言设计错误，而是说，“它是实现所做的任何事情”。这种态度(a)��惰和马虎，(b)可能会产生意想不到的负面后果，(c)使您难以将您的语言从一个实现平台移动到另一个。永远不要犯这个错误！
- en: 12.3Changing Meaning
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.3意义的改变
- en: 'Mapping functions-as-values to lambda works especially because we intend for
    the two to have the same meaning. However, this makes it difficult to change the
    meaning of what a function does. Lemme give ya’ a hypothetic: suppose we wanted
    our language to implement dynamic scope.Don’t let this go past the hypothetical
    stage, please. In our original interpreter, this was easy (almost too easy, as
    history shows). But try to make the interpreter that uses lambda implement dynamic
    scope. It can similarly be difficult or at least subtle to map eager evaluation
    onto a language with lazy application [REF].'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将函数作为值映射到lambda的工作特别适用，因为我们打算让这两者具有相同的含义。然而，这使得更改函数的含义变得困难。让我举个例子：假设我们希望我们的语言实现动态作用域。请不要让这超出假设阶段。在我们最初的解释器中，这很容易（几乎太容易了，正如历史所显示的那样）。但是尝试使使用lambda的解释器实现动态作用域。将急切求值映射到具有惰性应用的语言中可能同样困难或至少微妙[REF]。
- en: Exercise
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: Convert the above interpreter to use dynamic scope.
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将上述解释器转换为使用动态作用域。
- en: The point is that the raw data structure representation does not make anything
    especially easy, but it usually doesn’t get in the way, either. In contrast, mapping
    to host language features can make some intents—<wbr>mainly, those match what
    the host language already does!—<wbr>especially easy, and others subtle or difficult.
    There is the added danger that we may not be certain of what the host language’s
    feature does (e.g., does its “lambda” actually implement static scope?).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 重点是，原始数据结构表示并不特别简单，但通常也不会妨碍。相比之下，映射到主机语言特性可以使一些意图——<wbr>主要是与主机语言已经做的事情匹配的那些！——<wbr>特别容易，而其他一些则可能微妙或困难。还有一个额外的危险，我们可能不确定主机语言的特性是什么（例如，它的“lambda”是否实际实现了静态作用域？）。
- en: The moral is that this is a good property to exploit only we want to “pass through”
    the base language’s meaning—<wbr>-and then it is especially wise because it ensures
    that we don’t accidentally change its meaning. If, however, we want to exploit
    a significant part of the base language and only augment its meaning, perhaps
    other implementation strategies [REF] will work just as well instead of writing
    an interpreter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 结论是，这是一个很好的特性，只有当我们想要“穿透”基础语言的含义时才能利用它——<wbr>-这样做尤其明智，因为它确保我们不会意外改变其含义。然而，如果我们想要利用基础语言的一个重要部分并仅增强其含义，也许其他实现策略[REF]会起到同样好的作用，而不是编写一个解释器。
- en: 12.4One More Example
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.4另一个例子
- en: Let’s consider one more representation change. What is an environment?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑另一个表示更改。什么是环境？
- en: 'An environment is a map from names to values (or locations, once we have mutation).
    We’ve chosen to implement the mapping through a data structure, but...do we have
    another way to represent maps? As functions, of course! An environment, then,
    is a function that takes a name as an argument and return its bound value (or
    an error):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 环境是从名称到值（或位置，一旦我们有了变异）的映射。我们选择通过数据结构实现映射，但是...我们有另一种表示映射的方式吗？当然可以用函数！因此，环境是一个函数，它以名称作为参数并返回其绑定的值（或错误）：
- en: '| (define-type-alias Env (symbol -> Value)) |'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define-type-alias Env (symbol -> Value)) |'
- en: 'What is the empty environment? It’s the one that returns an error no matter
    what name you try to look up:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是空环境？无论您尝试查找什么名称，它都会返回错误：
- en: '| (define (mt-env [name : symbol]) |'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (mt-env [name : symbol]) |'
- en: '|   (error ''lookup "name not found")) |'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (error ''lookup "name not found")) |'
- en: '(In principle we should put a type annotation on the return, and it should
    be Value, except of course thiis is vacuous.) Extending an environment with a
    binding creates a function that takes a name and checks whether it is the name
    just extended; if so it returns the corresponding value, otherwise it punts to
    the environment being extended:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: （原则上，我们应该在返回值上放置一个类型注释，它应该是Value，除非当然这是空洞的。）通过绑定扩展环境会创建一个函数，它接受一个名称并检查它是否是刚刚扩展的名称；如果是，则返回相应的值，否则将其传递给被扩展的环境：
- en: '| (define (extend-env [b : Binding] [e : Env]) |'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (extend-env [b : Binding] [e : Env]) |'
- en: '|   (lambda ([name : symbol]) : Value |'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (lambda ([name : symbol]) : Value |'
- en: '|     (if (symbol=? name (bind-name b)) |'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     (if (symbol=? name (bind-name b)) |'
- en: '|         (bind-val b) |'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|         (bind-val b) |'
- en: '|         (lookup name e)))) |'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|         (lookup name e)))) |'
- en: Finally, how do we look up a name in an environment? We simply apply the environment!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们如何在环境中查找名称？我们只需应用环境！
- en: '| (define (lookup [n : symbol] [e : Env]) : Value |'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (lookup [n : symbol] [e : Env]) : Value |'
- en: '|   (e n)) |'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (e n)) |'
- en: And with that, we’re done!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们完成了！
