- en: CSE 331 Software Design and Implementation
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: CSE 331软件设计与实现
- en: Class and Method Specifications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类和方法规范
- en: 'Contents:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 内容：
- en: '[Introduction](#Introduction)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[介绍](#Introduction)'
- en: '[Abstract Values and Abstract State](#AbstractValuesAndAbstractState)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[抽象值和抽象状态](#AbstractValuesAndAbstractState)'
- en: '[Mathematical Abstract Values](#MAV)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数学抽象值](#MAV)'
- en: '[Specification Fields](#SpecificationFields)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[规范字段](#SpecificationFields)'
- en: '[Derived Fields](#DerivedFields)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[派生字段](#DerivedFields)'
- en: '[Method Specifications](#Method_Specifications)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[方法规范](#Method_Specifications)'
- en: '[Preconditions](#Preconditions)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[前置条件](#Preconditions)'
- en: '[Postconditions](#Postconditions)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[后置条件](#Postconditions)'
- en: '[Using Spec Fields for Specifications](#UsingSpecFields)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用规范字段进行规范](#UsingSpecFields)'
- en: '[Using Derived Spec Fields for Specifications](#UsingDerivedSpecFields)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用派生规范字段进行规范](#UsingDerivedSpecFields)'
- en: '[Subclasses and overridden methods](#subclassing)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[子类和重写方法](#subclassing)'
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: This handout describes how to document the specifications of classes and methods.
    This document focuses on practical issues.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本手册描述了如何记录类和方法的规范。本文侧重于实际问题。
- en: This document uses a `Line` class as an example. We do not provide fields or
    method bodies in our example. This document covers *specifying* the behavior of
    classes and methods (what they should do), not their *implementation* (what they
    actually do and how they do it).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本文以`Line`类为例。我们的示例中不提供字段或方法体。本文涵盖了*指定*类和方法的行为（它们应该做什么），而不是它们的*实现*（它们实际上做什么以及如何做到）。
- en: '[Abstraction Functions and Representation Invariants](abstraction-functions-and-rep-invariants.html)
    covers how to document a class''s implementation.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[抽象函数和表示不变量](abstraction-functions-and-rep-invariants.html)介绍了如何记录类的实现。'
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Because several concepts discussed here are interrelated, let's starts with
    a short list of definitions before diving into the details.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这里讨论的几个概念是相互关联的，让我们在深入细节之前先列出一些定义的简要列表。
- en: '*Abstract Value*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*抽象值*'
- en: What an instance of a class is supposed to represent. For example, each instance
    of `Line` represents some line segment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 类的实例应该代表什么。例如，`Line`的每个实例代表某条线段。
- en: '*Abstract State*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*抽象状态*'
- en: The information that defines the abstract value. For example, each abstract
    line has a start point and an end point.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 定义抽象值的信息。例如，每个抽象线都有一个起点和一个终点。
- en: '*Specification Fields*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*规范字段*'
- en: Describes components of the abstract state of a class. For example, the abstract
    state of a `Line` is made up by the specification fields `start-point` and `end-point`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 描述类的抽象状态的组件。例如，`Line`的抽象状态由规范字段`start-point`和`end-point`组成。
- en: '*Derived Specification Fields*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*派生规范字段*'
- en: Information that can be derived from specification fields but is useful to give
    a name to. For example, `Line` has the derived field `length`, which describes
    the length of the line segment.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从规范字段派生但有用的信息。例如，`Line`具有派生字段`length`，描述线段的长度。
- en: '*Abstract Invariant*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*抽象不变量*'
- en: A condition that must stay true over the abstract state of all instances of
    a class. For example, `Line` requires that no instance has the same start and
    end point. Abstract invariants are expressed in terms of the abstract state. Note
    that this is not the same as the Representation Invariant (RI) that describes
    properties of the concrete representation. An abstract invariant, if one is present,
    specifies constraints on abstract values only.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在类的所有实例的抽象状态上保持真实的条件。例如，`Line`要求没有实例具有相同的起点和终点。抽象不变量是以抽象状态为基础表达的。请注意，这与描述具体表示属性的表示不变量（RI）不同。如果存在抽象不变量，则它仅指定对抽象值的约束。
- en: '*Method Specifications*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*方法规范*'
- en: Describe a method's behaviors in terms of abstract state. For example, `Line`'s
    `setEndPoint` method updates the `end-point` specification field.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以抽象状态的术语描述方法的行为。例如，`Line`的`setEndPoint`方法更新`end-point`规范字段。
- en: The above concepts are included in a class's external specification (in Javadoc).
    They help document for clients how to use the class.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述概念包含在类的外部规范（在Javadoc中）。它们帮助客户端文档化如何使用该类。
- en: The rest of this document is organized as follows. First, it explains how to
    document what a class abstractly represents using [abstract state](#AbstractValuesAndAbstractState),
    [specification fields](#SpecificationFields) and [derived fields](#DerivedFields).
    Then, it explains how to [specify method behavior](#Method_Specifications), in
    terms of abstract state.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档的其余部分组织如下。首先，它解释了如何使用[抽象状态](#AbstractValuesAndAbstractState)、[规范字段](#SpecificationFields)和[派生字段](#DerivedFields)来记录类抽象地代表的内容。然后，它解释了如何根据抽象状态来[指定方法行为](#Method_Specifications)。
- en: Abstract Values and Abstract State
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象值和抽象状态
- en: The abstract value of an object is the information that clients use when reasoning
    about an object. For example, a line segment is defined in terms of a start point
    and an end point. This does *not* necessarily imply that the concrete reprsentation
    of the object has two point fields. That is one representation, but there are
    others, such as a start point, an angle, and a length. Abstract values are typically
    at a less detailed level than an implementation because this helps clients reason
    about only what matters to them. For example, clients of some representation of
    strings just need to know that a string is a sequence of characters, not whether
    that sequence is implemented with an array, a linked list, a combination of the
    two, or some completely different way. The notion of *sequence* is more abstract
    than particular ways to reprsent sequences.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的抽象值是客户端在推理对象时使用的信息。例如，一条线段是根据起点和终点定义的。这并*不*一定意味着对象的具体表示具有两个点字段。那只是一种表示，但还有其他表示，比如起点、角度和长度。抽象值通常比实现的细节级别低，因为这有助于客户端只关注对他们重要的内容。例如，某些字符串表示的客户端只需要知道字符串是字符序列，而不需要知道该序列是用数组、链表、两者的组合还是完全不同的方式实现的。*序列*的概念比表示序列的特定方式更抽象。
- en: Mathematical Abstract Values
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学抽象值
- en: 'For some ADTs, the abstract values are well-described by concepts and notation
    that are common in mathematics and well-understood by software developers. Examples
    include:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些ADT，抽象值由数学中常见且软件开发人员熟悉的概念和符号描述得很好。例如：
- en: a *set* of integers
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个*整数集*
- en: a *sequence* of characters (i.e., a string)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个*字符序列*（即，一个字符串）
- en: a *pair* of real numbers (or a triple, or in general a *tuple*)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一对实数（或三元组，或一般的*元组*）
- en: 'If you are specifying such a class, then you''re in luck. You can use conventional
    notation for specifyng the class''s abstract values and methods. Such notation
    includes:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在指定这样一个类，那么您很幸运。您可以使用传统符号来指定类的抽象值和方法。这样的符号包括：
- en: '*set comprehension*: **{ x | P(x) }** denotes the set of all elements *x* that
    satisfy the property *P*. More generally, **{ f(x) | P(x) }** denotes the set
    of values of the expression *f(x)* for all *x* that satisfy the property *P*.
    For example, **{ x * x | x > 10 }** represents the set of all numbers whose square
    root is greater than 10.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*集合推导式*：**{ x | P(x) }**表示满足属性*P*的所有元素*x*的集合。更一般地，**{ f(x) | P(x) }**表示对所有满足属性*P*的*x*的表达式*f(x)*的值的集合。例如，**{
    x * x | x > 10 }**表示所有平方根大于10的数字的集合。'
- en: '*set union*: **x ∪ y** denotes the union of two sets *x* and *y*. (This can
    also be written **x + y** when there''s no danger of confusion with addition.)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*集合并*：**x ∪ y**表示两个集合*x*和*y*的并集。（当不会与加法混淆时，也可以写成**x + y**。）'
- en: '*set membership*: **a ∈ x** or **a in x** tests whether *a* is an element of
    the set *x*.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*集合成员*：**a ∈ x**或**a in x**测试*a*是否是集合*x*的元素。'
- en: '*sequence construction:* **[a, b, c]** denotes a sequence of three elements.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*序列构造*：**[a, b, c]**表示三个元素的序列。'
- en: '*sequence concatenation*: **x : y** denotes the concatenation of two sequences
    *x* and *y*. (This can also be written **x + y** when there''s no danger of confusion
    with addition or union.)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*序列连接*：**x : y**表示两个序列*x*和*y*的连接。（当不会与加法或并集混淆时，也可以写成**x + y**。）'
- en: '*sequence indexing*: **x[i]** denotes the *i*^(th) element of a sequence *x*.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*序列索引*：**x[i]**表示序列*x*的第*i*个元素。'
- en: '*set or sequence size*: **|x|** denotes the number of elements in a set or
    sequence *x*.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*集合或序列大小*：**|x|**表示集合或序列*x*中的元素数量。'
- en: '*tuple construction*: **<a, b, c>** is a tuple of three elements. This is also
    written **(a, b, c)**. Unlike sequences, tuples are fixed-length, so we don''t
    normally think about concatenating them.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*元组构造*：**<a, b, c>**是三个元素的元组。这也可以写成**(a, b, c)**。与序列不同，元组是固定长度的，所以我们通常不考虑将它们连接起来。'
- en: 'You aren''t obliged to use this syntax. Some of it is more standard than the
    rest: set-comprehension syntax is standard in just about all of mathematics, but
    sequence concatenation isn''t particularly standardized. You may find it clearer
    to write sequence concatenation as a function like **concat(x, y)**. What really
    matters is clarity and lack of ambiguity, so if you have any doubt whether your
    reader will understand you, just define it: “...where **concat(x,y)** is the concatenation
    of two sequences **x** and **y**.”'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您并不一定要使用这种语法。其中一些比其他更标准：集合推导语法在几乎所有数学中都是标准的，但序列连接并没有特别标准化。您可能会发现将序列连接写为像**concat(x,
    y)**这样的函数更清晰。真正重要的是清晰和没有歧义，所以如果您对读者是否能理解您有任何疑问，只需定义它：“...其中**concat(x,y)**是两个序列**x**和**y**的连接。”
- en: Specification Fields
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规范字段
- en: Usually, abstract values are not only simple mathematical objects like numbers
    or sets. In these cases, it's more useful to think about the abstract value as
    if it were an object with fields. For example, a line has a *start* and an *end*;
    a mailing address has a *number*, *street*, *city*, and *zipcode*; and a URL has
    a *protocol*, *host name*, and *resource name*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，抽象值不仅仅是简单的数值或集合等数学对象。在这些情况下，将抽象值视为具有字段的对象更有用。例如，一条线有一个*起点*和一个*终点*；一个邮寄地址有一个*号码*、*街道*、*城市*和*邮政编码*；一个URL有一个*协议*、*主机名*和*资源名*。
- en: Mathematically, this is the same as a *tuple*; it's just a tuple whose parts
    have useful names for humans, rather than simply parts in some order without names.
    So even though we could use tuples, it's convenient, and more readable, to break
    the abstraction state into named parts, where each part is a *specification field*.
    (Specification fields are more commonly called *abstract fields*, because they're
    fields of the abstract value, as opposed to *rep fields* which are fields of the
    representation value. Unfortunately, *abstract* has another meaning in Java, so
    we will avoid that potentially confusing terminology.)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学上讲，这与一个*元组*是相同的；它只是一个元组，其部分对于人类来说具有有用的名称，而不仅仅是没有名称的某种顺序的部分。因此，即使我们可以使用元组，将抽象状态分解为具有命名部分的部分，其中每个部分都是*规范字段*，这样做更方便，更可读。（规范字段通常被称为*抽象字段*，因为它们是抽象值的字段，而不是*表示值*的字段。不幸的是，在Java中，*抽象*有另一个含义，因此我们将避免那种可能令人困惑的术语。）
- en: 'Specification fields often (but not always) correspond to observers or getters
    on the abstract data type. Because the structure of abstract values is a matter
    of interest to the clients of your class, the specification fields should be listed
    in the class overview. In CSE 331, we have a Javadoc convention for describing
    them: `@specfield *name* : *type* // *description*`. Here''s an example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '规范字段通常（但并非总是）对应于抽象数据类型上的观察者或获取器。由于抽象值的结构对于您的类的客户端是感兴趣的，规范字段应该在类概述中列出。在CSE 331中，我们有一个Javadoc约定来描述它们：`@specfield
    *name* : *type* // *description*`。这里有一个例子：'
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By convention, in specification fields, lowercase types like *sequence* or *set*
    refer to mathematical entities. Capitalized types refer to other ADTs (classes
    or interfaces). Where you have a choice, prefer a mathematical entity as the type
    of a spec field; it is better to use sequence than List, for example. It's more
    elegant, and reduces the coupling between your specification and particular Java
    types.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，在规范字段中，像*序列*或*集合*这样的小写类型指的是数学实体。大写类型指的是其他ADT（类或接口）。在有选择的情况下，最好将数学实体作为规范字段的类型；例如，最好使用序列而不是List。这样更加优雅，减少了规范与特定Java类型之间的耦合。
- en: 'The presence of a specification field does not imply anything about the interface
    or implementation of the class. Although spec fields often correspond to observer
    methods, that''s not always true. (An observer method is one that computes a value
    without performing any side effects. All getter methods are observers, but not
    all observers are getters.) The interface might not provide any observers that
    query the spec field''s state, so clients of the class might not have access to
    the information stored in the spec field. (An example is that a stack implementation
    might have a spec field for the elements of the stack, but a client might only
    be able to push and pop rather than being able to obtain the full state of the
    stack.) Likewise, the implementation might not actually have a concrete field
    of the spec field''s type: that information may be computed from multiple concrete
    fields, or it might not be available at all. The point is that specification fields
    are useful for giving method specifications in terms of the abstraction being
    provided.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 规范字段的存在并不意味着类的接口或实现方面的任何事情。虽然规范字段通常对应于观察者方法，但并不总是如此。（观察者方法是指计算值而不执行任何副作用的方法。所有的getter方法都是观察者，但并非所有的观察者都是getter。）接口可能不提供任何查询规范字段状态的观察者，因此类的客户端可能无法访问存储在规范字段中的信息。（一个示例是栈实现可能有一个用于存储栈元素的规范字段，但客户端可能只能推入和弹出而无法获取栈的完整状态。）同样，实现可能实际上没有规范字段类型的具体字段：该信息可以从多个具体字段计算出，或者根本无法获取。重点是规范字段有助于以提供的抽象的术语给出方法规范。
- en: Derived Fields
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 衍生字段
- en: 'Derived fields are information that can be derived from the specification fields
    that it is useful to give a name to. For example, consider this class:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 衍生字段是可以从规范字段中推导出的信息，给出一个名称是有用的。例如，考虑这个类：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The derived field `area` can be derived by squaring the `length` specification
    field. A derived field's documentation should state how it is derived from the
    specification fields.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 衍生字段`area`可以通过对`length`规范字段进行平方来得到。衍生字段的文档应说明它是如何从规范字段衍生出来的。
- en: 'A derived field''s purpose is to help with writing method specifications, abstraction
    functions, and representation invariants: It is easier to write and understand
    `area` than `length^2`. They are a shorthand that can make class and method specifications
    easier to understand. Because a derived field is defined entirely in terms of
    specification fields (or other derived fields), method specifications do not need
    to state a method''s effects on a derived fields. For example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 衍生字段的目的是帮助编写方法规范、抽象函数和表示不变式：写和理解`area`比写和理解`length^2`更容易。它们是一种简写，可以使类和方法的规范更容易理解。因为衍生字段完全是根据规范字段（或其他衍生字段）定义的，方法规范不需要说明方法对衍生字段的影响。例如：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice how the method specification of `differenceInArea` uses the derived field
    `area` to make it easier to explain what it returns.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`differenceInArea`方法规范如何使用衍生字段`area`，以便更容易解释它返回的内容。
- en: It is never necessary for a method specification to indicate its effect on a
    derived specification field because the class documentation has defined the derived
    specification field in terms of specification fields. Since `area` is a derived
    field, the constructor does not need to say what the newly constructed `Square`'s
    `area` is. Similarly, the method specification for `setLength` does not need to
    document its effect on `area`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不需要方法规范指示它对衍生规范字段的影响，因为类文档已根据规范字段定义了衍生规范字段。由于`area`是一个衍生字段，构造函数不需要说明新构造的`Square`的`area`是多少。同样，`setLength`的方法规范不需要说明它对`area`的影响。
- en: When we relate concrete implementations to abstract values using [Abstraction
    Functions](abstraction-functions-and-rep-invariants.html#AbstractionFunctions),
    we will similarly only need to describe the abstraction in terms of specification
    fields and then the derived fields will follow from the specification fields.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用[抽象函数](abstraction-functions-and-rep-invariants.html#AbstractionFunctions)将具体实现与抽象值相关联时，我们只需要根据规范字段描述抽象，然后衍生字段将根据规范字段而来。
- en: Note that one could have made `area` a specification field instead of a derived
    field. This would relieve the programmer from the responsibility of documenting
    how `area` can be derived from the specification fields. However, in this case,
    the constructor and `setLength` would be required to specify their effects on
    `area`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，可以将`area`作为规范字段而不是派生字段。这将使程序员免除记录如何从规范字段派生`area`的责任。但是，在这种情况下，构造函数和`setLength`将需要指定它们对`area`的影响。
- en: Suppose you have a derived specification field `f`. It is permissible for there
    to be a concrete field in the implementation that stores the value of `f`, or
    for there to be a method that computes the value of `f`, or for there to be no
    such field or method. That is an implementation detail that is of no interest
    to clients of the specification.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个派生规范字段`f`。在实现中可以有一个具体字段存储`f`的值，或者有一个计算`f`值的方法，或者没有这样的字段或方法。这是一个对规范的客户端无关的实现细节。
- en: Method Specifications
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法规范
- en: Method specifications describe the behavior of a method in terms of its preconditions
    and postconditions. Note that method specifications may only refer to specification
    fields, method arguments, and global variables (also known as public static fields),
    never to the concrete fields of the implementation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 方法规范描述了方法的行为，涉及其前提条件和后置条件。请注意，方法规范只能引用规范字段、方法参数和全局变量（也称为公共静态字段），而不能引用实现的具体字段。
- en: Preconditions
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前提条件
- en: Preconditions are properties that must be true when the method is called. It
    is the responsibility of the caller to guarantee that these properties hold. If
    the preconditions do not hold, the method is allowed to behave in absolutely any
    fashion, including crashing the program, continuing with incorrect results, informing
    the user of the problem, or gracefully recovering from the problem. Callers should
    always assume that preconditions are not checked by a method. However, it is good
    practice — though not required — for an implementation to check its preconditions
    (if the check can be performed efficiently) and throw an exception if they are
    not satisfied.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 前提条件是方法调用时必须为真的属性。调用者有责任保证这些属性成立。如果前提条件不成立，方法可以以任何方式行为，包括崩溃程序、继续以不正确的结果进行、通知用户问题或从问题中优雅地恢复。调用者应始终假定方法不会检查前提条件。但是，对于一个实现来说，检查其前提条件（如果检查可以高效地执行）并在不满足时抛出异常是一个好的做法，尽管不是必需的。
- en: Preconditions are indicated by the "**requires**" clause in a method specification.
    If a "requires" clause is omitted from the method specification, it is assumed
    that the method does not have any preconditions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 前提条件在方法规范中由“**requires**”子句指示。如果方法规范中省略了“requires”子句，则假定该方法没有任何前提条件。
- en: '**requires** (default: no constraints)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**requires**（默认：无约束）'
- en: The preconditions that must be met by the method's caller
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 方法调用者必须满足的前提条件
- en: Postconditions
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后置条件
- en: Postconditions are properties that a method guarantees will hold when the method
    exits. However, if the precondition did not hold when the method was called, then
    nothin else is relevant, and the method may behave in any fashion whatsoever.
    In particular, if the precondition does not hold upon method entry, then the postcondition
    need not hold on method exit.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 后置条件是方法保证在方法退出时将成立的属性。但是，如果前提条件在方法调用时不成立，则其他任何事情都不相关，方法可以以任何方式行为。特别是，如果前提条件在方法进入时不成立，则后置条件在方法退出时不需要成立。
- en: A postcondition can be written as a single complex logical formula, but it is
    convenient to separate it into logically distinct parts. CSE 331 uses "return",
    "effects", "throws", and "modifies". (In the descriptions below, "default" indicates
    what is assumed if that clause is omitted from the method specification.)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 后置条件可以写成一个复杂的逻辑公式，但将其分解为逻辑上不同的部分更为方便。CSE 331 使用“return”、“effects”、“throws”和“modifies”。（在下面的描述中，“default”表示如果该子句在方法规范中被省略，则假定什么。）
- en: '**return** (default: no constraint on what is returned)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**return**（默认：对返回内容没有约束）'
- en: The value returned by the method, if any
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 方法返回的值（如果有）
- en: '**throws** (default: none, which means that no exceptions are ever thrown)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**throws**（默认：无，这意味着从不抛出异常）'
- en: The exceptions that may be raised, and under which conditions. The specification
    should not make guarantees about the behavior when the preconditions are not satisfied.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可能引发的异常及其条件。规范不应对前提条件不满足时的行为做出保证。
- en: '**modifies** (default: nothing, which means that there are no side effects)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**修改**（默认：无，表示没有副作用）'
- en: 'Variables whose value *may* be modified by the procedure: They are not guaranteed
    to be modified, unless otherwise indicated by the effects clause. If object `x`
    has specification fields `f`, `g`, and `h`, then "`modifies x`" means that any
    combination of `x.f`, `x.g`, and `x.h` might be modified. "`modifies x.g, x.h`"
    would be more restrictive. Often, programmers are more interested in quantities
    that are *not* listed in the modifies clause, since those are guaranteed not to
    be changed by the method.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可能由过程修改的值的变量：除非在影响子句中另有说明，否则不能保证会被修改。如果对象`x`具有规范字段`f`、`g`和`h`，那么“`修改x`”表示`x.f`、`x.g`和`x.h`的任何组合可能被修改。“`修改x.g,
    x.h`”将更为严格。通常，程序员更感兴趣的是未在修改子句中列出的数量，因为这些数量保证不会被方法更改。
- en: '**effects** (default: true, which means "can have any effect" on the references
    listed under modifies)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**影响**（默认：true，表示对修改列表中列出的引用可能产生“任何影响”）'
- en: 'The side effects of the method, such as changes to the state of the current
    object, to parameters, or to objects held in global variables: If a specification
    field is listed in the modifies clause but not in the effects clause, then it
    may take on any value allowed by the abstract invariants of this class of objects.
    The difference between the modifies and effects causes is that modifies lists
    everything that may change and effects indicates what changes occur.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的副作用，例如更改当前对象的状态、参数或全局变量中保存的对象：如果规范字段在修改子句中列出但不在影响子句中，则它可以取得此类对象的抽象不变式允许的任何值。修改和影响之间的区别在于修改列出可能发生变化的所有内容，而影响指示发生了什么变化。
- en: Using Spec Fields for Specifications
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用规范字段进行规范
- en: 'Specification fields are useful for writing specifications of the ADT''s operations.
    Here''s a specification for a method on the [`Line`](#LineDef) class:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 规范字段对于编写ADT操作的规范非常有用。以下是[`Line`](#LineDef)类方法的规范：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Specifications may refer to specification fields (such as `start-point` and
    `end-point`), but never to representation fields. Rep fields depend on a particular
    implementation, so we don't want to expose them in a specification, which can
    be implemented in many different ways.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 规范可以引用规范字段（例如`start-point`和`end-point`），但不能引用表示字段。表示字段取决于特定的实现，因此我们不希望在规范中公开它们，因为可以以许多不同的方式实现规范。
- en: Using Derived Spec Fields for Specifications
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用派生规范字段进行规范
- en: 'When you''re writing specifications for operations, you may find it useful
    to use [*derived* spec fields](#DerivedFields). A derived spec field is just a
    spec field that can be written in terms of other spec fields. In other words,
    it''s a shorthand. You can freely use derived spec fields in a method specification
    (and easing such specifications is the point of derived spec fields):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为操作编写规范时，可能会发现使用[*派生*规范字段](#DerivedFields)很有用。派生规范字段只是可以用其他规范字段来表示的规范字段。换句话说，它是一种简写。您可以在方法规范中自由使用派生规范字段（并且简化这些规范是派生规范字段的目的）：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Subclasses and overridden methods
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子类和重写方法
- en: A subclass often has a different (stronger) specification than its superclass,
    and often has a larger abstract state than its superclass. When the specification
    and abstract state are identical to those of the parent (for instance, an implementation
    of an abstract class), then there is no need to repeat them in the subclass. However,
    it is helpful to include a brief note indicating that the superclass documentation
    should be used instead. That note helps readers to distinguish whether the specification
    is the same, or the author simply didn't document the class.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 子类通常具有比其超类更强的规范，并且通常具有比其超类更大的抽象状态。当规范和抽象状态与父类相同（例如，抽象类的实现）时，就不需要在子类中重复它们。但是，包含一段简短的说明，指示应该使用超类文档会很有帮助。该说明有助于读者区分规范是否相同，或者作者只是没有记录该类。
- en: When the specifications differ, then you have two options. The first option
    is to repeat, in the subclass, the full superclass documentation. The advantage
    is that everything is in one place, which may improve understanding. The second
    option is to augment the existing specification -- for example, to add a few new
    specification fields and constraints on them. Whichever you do, make sure that
    you clearly indicate your approach.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当规格不同时，你有两个选择。第一个选择是在子类中重复完整的父类文档。优点是所有内容都在一个地方，这可能提高理解。第二个选择是增补现有规格 -- 例如，在一些新的规格字段和对它们的约束。无论你选择哪种方式，一定要清楚地指明你的方法。
- en: Similar rules hold for a method that overrides another method. It is acceptable
    to leave the Javadoc blank if the specification is identical. (The generated HTML
    will use the overridden method's Javadoc documentation, but a normal Java comment
    is a good hint to someone who is reading the source code.) Otherwise, it is usually
    better to give the complete specification. If you merely augment the overridden
    method's specification, be sure to refer to it in the documentation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于覆盖另一个方法的方法，相似的规则适用。如果规格相同，将Javadoc留空是可以接受的。（生成的HTML将使用被覆盖方法的Javadoc文档，但对于阅读源代码的人来说，一个正常的Java注释是一个很好的提示。）否则，通常最好提供完整的规格。如果仅增补被覆盖方法的规格，请确保在文档中引用它。
