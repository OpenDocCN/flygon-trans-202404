["```\n# Lab 4 Multi-variable linear regression\nimport tensorflow as tf\nimport numpy as np\ntf.set_random_seed(777)  # for reproducibility\n\nxy = np.loadtxt('data-01-test-score.csv', delimiter=',', dtype=np.float32)\nx_data = xy[:, 0:-1]\ny_data = xy[:, [-1]]\n\n# Make sure the shape and data are OK\nprint(x_data.shape, x_data, len(x_data))\nprint(y_data.shape, y_data)\n\n# placeholders for a tensor that will be always fed.\nX = tf.placeholder(tf.float32, shape=[None, 3])\nY = tf.placeholder(tf.float32, shape=[None, 1])\n\nW = tf.Variable(tf.random_normal([3, 1]), name='weight')\nb = tf.Variable(tf.random_normal([1]), name='bias')\n\n# Hypothesis\nhypothesis = tf.matmul(X, W) + b\n\n# Simplified cost/loss function\ncost = tf.reduce_mean(tf.square(hypothesis - Y))\n\n# Minimize\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=1e-5)\ntrain = optimizer.minimize(cost)\n\n# Launch the graph in a session.\nsess = tf.Session()\n# Initializes global variables in the graph.\nsess.run(tf.global_variables_initializer())\n\nfor step in range(2001):\n    cost_val, hy_val, _ = sess.run(\n        [cost, hypothesis, train], feed_dict={X: x_data, Y: y_data})\n    if step % 10 == 0:\n        print(step, \"Cost: \", cost_val, \"\\nPrediction:\\n\", hy_val)\n\n# Ask my score\nprint(\"Your score will be \", sess.run(\n    hypothesis, feed_dict={X: [[100, 70, 101]]}))\n\nprint(\"Other scores will be \", sess.run(hypothesis,\n                                        feed_dict={X: [[60, 70, 110], [90, 100, 80]]}))\n\n'''\nYour score will be  [[ 181.73277283]]\nOther scores will be  [[ 145.86265564]\n [ 187.23129272]]\n\n''' \n```"]