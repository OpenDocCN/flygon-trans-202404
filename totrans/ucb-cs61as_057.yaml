- en: Violating Data Abstraction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 违反数据抽象
- en: So, creating abstract data types is handy, and it's nice to be able write programs
    without worrying about implementation details. But, what's actually stopping us
    from crossing the abstraction barrier and use the underlying implementation?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，创建抽象数据类型很方便，而且能够编写程序而不用担心实现细节很好。但是，是什么阻止我们越过抽象屏障并使用底层实现呢？
- en: 'Nothing, actually. Racket will not complain if you use `cons` instead of `make-rational`,
    or if you use `car` instead of `numerator`. We''ve reproduced the code for the
    rational numbers ADT below:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上什么也不会发生。如果您使用`cons`而不是`make-rational`，或者使用`car`而不是`numerator`，Racket不会抱怨。我们在下面重新复制了有理数ADT的代码：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Technically, if we make the following calls, the selectors will still return
    what we expect:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，如果我们进行以下调用，选择器仍然会返回我们期望的内容：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So, why would we want to use the selector if we can just use `car` instead?
    This works for now, but problems arise when we later change our implementation
    of our constructors and selectors. Going under the abstraction and making assumptions
    on how the data structure was implemented is called a **data abstraction violation
    (DAV)**.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果我们可以使用`car`而不是选择器，为什么我们要使用选择器呢？现在这样做没有问题，但是当我们以后更改构造器和选择器的实现时会出现问题。在抽象层下并假设数据结构的实现方式被称为**数据抽象违规（DAV）**。
- en: 'Example: Violating the Data Abstraction'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子：违反数据抽象
- en: 'Let''s say we write a new function, `expt-rat`, that takes a rational number
    and the power to which we exponentiate the rational number and returns another
    rational number to that power. This is the procedure we wrote:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们编写一个新函数`expt-rat`，它接受一个有理数和我们对该有理数取幂的指数，并返回另一个有理数到该指数的幂。这是我们编写的过程：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Can you spot the DAV? Given our current implementation of rational numbers,
    `expt-rat` should work with no problems:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你能发现DAV吗？根据我们当前的有理数实现，`expt-rat`应该可以无问题地工作：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But this is dangerous! You can''t guarantee your code will work if, later on,
    you decide to change your implementation. Let''s say we rewrite the implementation
    this way:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是危险的！如果以后决定更改实现，无法保证代码能正常工作。假设我们以这种方式重写实现：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What happens now when we call `expt-rat`?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在调用`expt-rat`时会发生什么？
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We get an error! Our code for `expt-rat` above assumes that we store the rational
    number as a pair, and foolishly calls `car` to retrieve the numerator and `cdr`
    for the denominator. And thus, Racket throws a fit when we try calling these procedures
    on a lambda function.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们出现了错误！我们上面的`expt-rat`代码假设我们将有理数存储为一对，并愚蠢地调用`car`来检索分子和`cdr`来检索分母。因此，当我们尝试在lambda函数上调用这些过程时，Racket会抛出错误。
- en: Abstraction Barriers
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象屏障
- en: '![A window into a lab with a warning tape that says "ABSTRACTION BARRIER DO
    NOT CROSS"](../Images/cfc0410d7103ae1832929b2a1f146bc3.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![实验室的窗户上贴着警告标语"抽象屏障 请勿跨越"](../Images/cfc0410d7103ae1832929b2a1f146bc3.jpg)'
- en: We defined the rational-number operations in terms of a constructor `make-rat`
    and selectors `numerator` and `denominator`. In general, the underlying idea of
    data abstraction is to identify for each type of data object a basic set of operations
    (e.g. the constructors and selectors) in terms of which all manipulations of data
    objects of that type will be expressed, and then to use only those operations
    in manipulating the data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用构造器`make-rat`和选择器`numerator`和`denominator`来定义了有理数操作。一般来说，数据抽象的基本思想是为每种类型的数据对象确定一组基本操作（例如构造器和选择器），通过这些操作表达该类型的所有数据对象的操作，然后在操作数据时只使用这些操作。
- en: 'We can envision the structure of the rational-number system as shown in the
    figure below. The horizontal lines represent abstraction barriers that isolate
    different "levels" of the system. At each level, the barrier separates the programs
    (above) that use the data abstraction from the programs (below) that implement
    the data abstraction. Programs that use rational numbers manipulate them solely
    in terms of the procedures supplied "for public use" by the rational-number package:
    `add-rat`, `sub-rat`, `mul-rat`, `div-rat`, and `equal-rat?`. These, in turn,
    are implemented solely in terms of the constructor and selectors `make-rat`, `numerator`,
    and `denominator`, which themselves are implemented in terms of pairs. The details
    of how pairs are implemented are irrelevant to the rest of the rational-number
    package so long as pairs can be manipulated by the use of `cons`, `car`, and `cdr`.
    In effect, procedures at each level are the interfaces that define the abstraction
    barriers and connect the different levels.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将有理数系统的结构构想成下图所示。水平线代表隔离不同“层级”的抽象障碍。在每个层级，该障碍将使用数据抽象的程序（上方）与实现数据抽象的程序（下方）分开。使用有理数的程序仅通过有理数包提供的“公共使用”程序来操纵它们：`add-rat`、`sub-rat`、`mul-rat`、`div-rat`和`equal-rat?`。而这些程序则完全通过构造函数和选择器`make-rat`、`numerator`和`denominator`来实现，它们本身是通过对成对元素的操作实现的。成对元素的具体实现细节对于有理数包的其余部分是无关紧要的，只要能通过`cons`、`car`和`cdr`来操作成对元素即可。实际上，每个层级的程序都是定义抽象障碍并连接不同层级的接口。
- en: '![Abstraction diagram for numbers](../Images/c376acb8db3b346d44ab34d025fd955f.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![数字的抽象图示](../Images/c376acb8db3b346d44ab34d025fd955f.jpg)'
- en: This simple idea has many advantages. One advantage is that it makes programs
    much easier to maintain and to modify. Any complex data structure can be represented
    in a variety of ways with the primitive data structures provided by a programming
    language.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的想法有很多优点。其中一个优点是使程序更容易维护和修改。任何复杂的数据结构都可以用编程语言提供的原始数据结构的各种方式来表示。
- en: To understand why this is so important, consider a world where data abstraction
    didn't exist. Of course, the choice of representation influences the programs
    that operate on it; thus, if the representation were to be changed at some later
    time, all such programs might have to be modified accordingly. This task could
    be time-consuming and expensive in the case of large programs unless the dependence
    on the representation were to be confined by design to a very few program modules.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解为什么这一点如此重要，考虑一下在没有数据抽象的世界。当然，表示的选择会影响操作它的程序；因此，如果表示在以后某个时候发生变化，所有这样的程序可能都必须相应地进行修改。在大型程序的情况下，这个任务可能是耗时且昂贵的，除非按设计将对表示的依赖性限制在非常少的程序模块中。
- en: Luckily, if the data was implemented without any violation of data abstraction,
    it would be very easy to modify the entire program -- you only need to modify
    constructors and selectors.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，如果数据在不违反数据抽象的情况下实现，那么修改整个程序将会非常容易 -- 你只需要修改构造函数和选择器。
