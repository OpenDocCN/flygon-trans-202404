- en: Lecture 27 - Demos, Reservations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Final exam date: 9.00 August 7 to 11.30 August 9'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The gold standard for milestone 2 is
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: two trains on the track
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: each receiving a new, random destination each time it reaches its current destination
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: running for five minutes or so
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: A Typical Reservation System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A reservation system is not the only way to keep trains from hitting one another.
  prefs: []
  type: TYPE_NORMAL
- en: The reservation system described below is not the only reservation system that
    works. I created it to illustrate the type of problems you must solve in order
    to keep trains from colliding.
  prefs: []
  type: TYPE_NORMAL
- en: In past terms, students have succeeded using
  prefs: []
  type: TYPE_NORMAL
- en: systems similar to the one described below
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: systems that didn't break the track into blocks but gave out reservations of
    arbitrary size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: systems that gave reservation that were areas covered by the track rather than
    lines the length of the track..
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing the need for communication with the train controller by doing more
    computation on the CPU consistenly outperform.
  prefs: []
  type: TYPE_NORMAL
- en: Hard Conditions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Needed to avoid collisions
  prefs: []
  type: TYPE_NORMAL
- en: '**Every train must have a reservation for the track it occupies.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Every train must travel at a low enough velocity that it can stop before
    the end of the track it has reserved.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Every train should reserve enough to handle single sensor or (exclusive)
    single switch errors.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**No piece of track should ever be reserved by more than one train.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Soft Conditions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Needed to keep the trains moving
  prefs: []
  type: TYPE_NORMAL
- en: Every train must release blocks it no longer occupies and will not occupy in
    the immediate future.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Every reservation held by a train must be contiguous
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Trains should release unneeded blocks in front of themselves if they slow down
    or stop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A stopped train will hold either one or two blocks.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Your system will behave perfectly well with only two trains if you do not enforce
    this condition, but it will often spontaneously thaw when a freeze occurs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Who enforces these conditions?
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Nobody does so explicitly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are constraints derived from the conditions above, such as
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reservation server always gives out reservations that are contiguous.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The reservation server never gives out an already reserved piece of track.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The reservation server never revokes a reservation.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The train always travels slowly enough that it can stop within its current reservation
    if a request for extension is refused.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: And so on.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enforcement is provided by a protocol that every task obeys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a situation in which the conditions cannot be enforced?
  prefs: []
  type: TYPE_NORMAL
- en: What is it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here's how it works in theory
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Train gets a route from the route finder, and looks ahead along the route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Train has a desired speed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Train asks reservation system for several blocks of track along the route
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Blocks usually end at switches and/or sensors
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are ending blocks at switches you must know well enough where the train
    is to be confident it is completely clear of the switch.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reservation system grants the blocks if they are available
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grants imply the condition that the train must travel so that it can come to
    a complete stop without leaving any reserved block.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Grants must be provided in the correct order
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Here's one way for it to work in practice
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A train receives a reservation that will allow it to travel at its desired speed
    for one or more blocks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The reservation includes enough track at the end of these blocks so that the
    train can stop before reaching the end of its reservation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each time the train leaves a block it frees the reservation it had for that
    block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before reaching the end of the blocks on which it can travel at speed, it requests
    an extention of its reservation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the request is granted AND it can stop within the reservation, it continues
    travelling at speed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise it stops
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Or slows down enough to stop before the end of its reservation.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Reservation Implementation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might decide that reservation negotiation will take place every time the
    train receives a sensor report.
  prefs: []
  type: TYPE_NORMAL
- en: Just requesting reservations whenever they're needed has a problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Train drivers are likely to poll
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polling is extremely priority-dependent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Priority-dependent bugs are hard to find, harder to fix.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every time a train receives a sensor report it does its reservation procedure
  prefs: []
  type: TYPE_NORMAL
- en: Release the reservation just vacated
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test stopping within the reservation at the next request time (sensor report).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If okay, finished
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If no, how much do I need beyond my current reservation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Request what's needed, possibly more
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Indicate the order in which you want the reservations (contiguity).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This depends on the direction in which you are travelling, which it's not necessary
    for the reservation server to know.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It could be deduced by the reservation server, but why bother.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reservation server gives as much as it can
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Train rechecks stopping condition using the complete reservation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If okay, finished
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If no, either
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: stop,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: or
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: slow down enough to satisfy the stopping condition
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comment.** We like slowing down, which we consider to be a more intelligent
    and aesthetic response to following a slow train than stop-start driving.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Problems I Have Seen More than Once
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Common Multi-train Tracking Problems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Two trains waiting on the same sensor report
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Symptom: trains split and/or merge'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One is bound to get inconsistent state
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Should be solved by the reservation system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Spurious sensor reports that a train is actually expecting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Most often for a secondary prediction,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: because the temporal window for a secondary prediction can precede the time
    window for the primary one.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tightening temporal windows helps this
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: but can't eliminate it
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Could look further ahead so that secondary predictions alway lag behind primary
    ones
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Recover from such an error by back-tracking
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Permanently malfunctioning turn outs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can't be switched or always derails
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Alter track graph
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Important to be able to alter the track graph from the prompt
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Partly for testing, but don't disable it in your demo version because it can
    rescue a demo.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Permanently malfunctioning sensors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Usually fail on because of sticking
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unstick by hand
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Alter track graph and mask reports
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: See above for track graph
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mask at as low a level as possible
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful debugging aids
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Alter the track graph from the prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Simulate sensor-triggering from the prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From a low level log events that change track state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are they consistent with the track state shown in your UI?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Common Reservation System Problems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: System freezes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reservations branch out ahead and cover a lot of the track
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Trains give back unneeded reservations as they slow down
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reservations are not released.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Usually shows itself only when the project is well advanced
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Looks as though there are phantom trains in the system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually most of a reservation is released, but not all.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reservation leap-frogging
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Two trains are approaching one another; each gets a reservation behind the other.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Has also been seen when one train is following another.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask for and/or give out reservations in the right order
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful debugging aids
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Insert/remove reservations by hand from the prompt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Query reservations (and who holds them) from the prompt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Track map showing reservations in real-time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One partner watches the map while the other observes the trains
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Trains can get sensor reports only for sensors with the reservations they hold.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is often the earliest symptom of a train getting lost. (Editor's comment.
    It doesn't seem to me that `a train is getting lost', but that `a train **is**
    lost'.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforce in the reservation server that all reservations must be contiguous.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Non-contiguous reservation requests are an early symptom of reservation system
    failure.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Common Route-Finding/Following Bugs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Train derails on turn-out after train changes direction
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Improve acceleration/deceleration calibration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch turn-outs for both directions of travel
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Train derails on turn-out as turn-out switches
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Improve acceleration/deceleration calibration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve train tracking
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch turn-outs too late
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Treat command latencies systematically
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Train collides with stationary train
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be certain that stationary trains have reservations
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert/remove reservations by hand from the prompt
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful debugging aids
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: All the above, plus
  prefs: []
  type: TYPE_NORMAL
- en: Add/subtract switches, sections of track from graph by hand from the prompt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By modifying the route-finder you can confine all routes to a subset of the
    tracks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This allows you to solve the common problems without being affetced by uncommon
    ones.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Early Signs of Problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Frequent train finding. (You should not be refinding trains every time they
    stop.)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
