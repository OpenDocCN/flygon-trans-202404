- en: 'Reading 2: Basic Java'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Due the night before class:** you must complete the reading exercises in
    this reading by Thursday, September 8 at 10:00 pm. The reading exercises are graded
    solely on completion, never on correctness, as described in the [course general
    info](../../general/#classes_readings_and_nanoquizzes).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Getting credit for reading exercises:** on the right is a big red ***log
    in*** button. You will only receive credit for reading exercises if you are logged
    in when you do them.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Due before class:** you must complete [Problem Set 0 Part I](../../psets/ps0/)
    before class on Friday, September 9 at 1:00 pm.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Due Sunday:** you must complete the [*Basic Java* exercises in the Java Tutor](../../getting-started/java-tutor/#required)
    by Sunday, September 11 at 10:00 pm.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Optionally, due Monday:** complete [the first three levels of Java Tutor
    exercises](../../getting-started/java-tutor/#optional) by Monday, September 12
    at 10:00 pm to earn a free slack day on [Problem Set 0](../../psets/ps0/).'
  prefs: []
  type: TYPE_NORMAL
- en: Objectives
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Learn basic Java syntax and semantics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transition from writing Python to writing Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software in 6.005
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  prefs: []
  type: TYPE_TB
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  prefs: []
  type: TYPE_TB
- en: Getting started with the Java Tutorials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next few sections link to the **[Java Tutorials](http://docs.oracle.com/javase/tutorial/index.html)**
    web site to get you up to speed with the basics, with reading exercises to check
    your understanding.
  prefs: []
  type: TYPE_NORMAL
- en: After reading the tutorial pages and trying these reading exercises, use 6.005’s
    **[Java Tutor](../../getting-started/java-tutor/)** in Eclipse to practice what
    you’ve learned.
  prefs: []
  type: TYPE_NORMAL
- en: This reading and other resources will frequently refer you to the [Java API
    documentation](http://docs.oracle.com/javase/8/docs/api/) which describes all
    the classes built in to Java.
  prefs: []
  type: TYPE_NORMAL
- en: Language basics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Read **[Language Basics](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/index.html)**.
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to answer the questions on the *Questions and Exercises*
    pages for all four of the langage basics topics.
  prefs: []
  type: TYPE_NORMAL
- en: '[Questions: Variables](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_variables.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Questions: Operators](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_operators.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Questions: Expressions, Statements, Blocks](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_expressions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Questions: Control Flow](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_flow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that each *Questions and Exercises* page has a link at the bottom to solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also check your understanding by answering some questions about how the basics
    of Java compare to the basics of Python:'
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Language basics
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we’re editing the body of a function in Java, declaring and using local
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>1</option>,<option>2</option>,<option>3</option>,<option>4</option>,<option>5</option>,<option>6</option>,<option>7</option></select>(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Fix the bug(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Who are you again?(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Numbers and strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Read **[Numbers and Strings](http://docs.oracle.com/javase/tutorial/java/data/index.html)**.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry if you find the `Number` wrapper classes confusing. They are.
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to answer the questions on both *Questions and Exercises*
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: '[Questions: Numbers](http://docs.oracle.com/javase/tutorial/java/data/QandE/numbers-questions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Questions: Characters, Strings](http://docs.oracle.com/javase/tutorial/java/data/QandE/characters-questions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Numbers and strings
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Double shot(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Fit to print(missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Classes and objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Read **[Classes and Objects](http://docs.oracle.com/javase/tutorial/java/javaOO/index.html)**.
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to answer the questions on the first two *Questions and Exercises*
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: '[Questions: Classes](http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/creating-questions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Questions: Objects](http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/objects-questions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t worry if you don’t understand everything in *Nested Classes* and *Enum
    Types* right now. You can go back to those constructs later in the semester when
    we see them in class.
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Classes and objects
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>public Tortoise()</option>,<option>new
    Tortoise()</option>,<option>Tortoise t = new Tortoise()</option>,<option>public
    class Tortoise</option>,<option>public class MyTortoise implements Tortoise</option></select>(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Under construction
  prefs: []
  type: TYPE_NORMAL
- en: In Python we declare an `__init__` function to initialize new objects.
  prefs: []
  type: TYPE_NORMAL
- en: <select class="form-control"><option>public Tortoise()</option>,<option>new
    Tortoise()</option>,<option>Tortoise t = new Tortoise()</option>,<option>public
    class Tortoise</option>,<option>public class MyTortoise implements Tortoise</option></select>(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: <select class="form-control"><option>public Tortoise()</option>,<option>new
    Tortoise()</option>,<option>Tortoise t = new Tortoise()</option>,<option>public
    class Tortoise</option>,<option>public class MyTortoise implements Tortoise</option></select>(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Methodical
  prefs: []
  type: TYPE_NORMAL
- en: 'To declare the `forward` method on `Tortoise` objects in Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: On your mark
  prefs: []
  type: TYPE_NORMAL
- en: In Python, we used `self.position = 0` to give `Tortoise` objects a `position`
    that starts at zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Java, we can do this either in one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '(missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer) … or in a combination of lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)
    (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Hello, world!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Read **[Hello World!](http://docs.oracle.com/javase/tutorial/getStarted/application/index.html)**
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to create a new `HelloWorldApp.java` file, enter the code
    from that tutorial page, and compile and run the program to see `Hello World!`
    on the console.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Snapshot diagrams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many readings include optional videos from the MITx version of 6.005\.
  prefs: []
  type: TYPE_NORMAL
- en: '[More info about the videos](../../general/#classes_readings_and_nanoquizzes)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: this video uses a **different version** of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '[**▶ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_2_basic_java,snapshot_diagrams/nLk1sWJthcg)'
  prefs: []
  type: TYPE_NORMAL
- en: It will be useful for us to draw pictures of what’s happening at runtime, in
    order to understand subtle questions. **Snapshot diagrams** represent the internal
    state of a program at runtime – its stack (methods in progress and their local
    variables) and its heap (objects that currently exist).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s why we use snapshot diagrams in 6.005:'
  prefs: []
  type: TYPE_NORMAL
- en: To talk to each other through pictures (in class and in team meetings)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To illustrate concepts like primitive types vs. object types, immutable values
    vs. immutable references, pointer aliasing, stack vs. heap, abstractions vs. concrete
    representations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To help explain your design for your team project (with each other and with
    your TA).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To pave the way for richer design notations in subsequent courses. For example,
    snapshot diagrams generalize into object models in 6.170.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although the diagrams in this course use examples from Java, the notation can
    be applied to any modern programming language, e.g., Python, Javascript, C++,
    Ruby.
  prefs: []
  type: TYPE_NORMAL
- en: Primitive values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![primitive values in snapshot diagram](../Images/8ffc744796b72355996d948ed89a79bf.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Primitive values are represented by bare constants. The incoming arrow is a
    reference to the value from a variable or an object field.
  prefs: []
  type: TYPE_NORMAL
- en: Object values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![object values in snapshot diagram](../Images/f5986785ea4e0ffd958409cf0ca2acbe.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An object value is a circle labeled by its type. When we want to show more detail,
    we write field names inside it, with arrows pointing out to their values. For
    still more detail, the fields can include their declared types. Some people prefer
    to write `x:int` instead of `int x`, but both are fine.
  prefs: []
  type: TYPE_NORMAL
- en: Mutating values vs. reassigning variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Snapshot diagrams give us a way to visualize the distinction between changing
    a variable and changing a value:'
  prefs: []
  type: TYPE_NORMAL
- en: When you assign to a variable or a field, you’re changing where the variable’s
    arrow points. You can point it to a different value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you assign to the contents of a mutable value – such as an array or list
    – you’re changing references inside that value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reassignment and immutable values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![reassigning a variable](../Images/c8ea1836cff0d824cdbaa220bd352469.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For example, if we have a [`String`](http://docs.oracle.com/javase/8/docs/api/?java/lang/String.html)
    variable `s`, we can reassign it from a value of `"a"` to `"ab"`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`String` is an example of an *immutable* type, a type whose values can never
    change once they have been created. Immutability (immunity from change) is a major
    design principle in this course, and we’ll talk much more about it in future readings.'
  prefs: []
  type: TYPE_NORMAL
- en: Immutable objects (intended by their designer to always represent the same value)
    are denoted in a snapshot diagram by a double border, like the `String` objects
    in our diagram.
  prefs: []
  type: TYPE_NORMAL
- en: Mutable values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![mutating an object](../Images/13735d91ebf80ad8f461f5a12fc35103.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By contrast, [`StringBuilder`](http://docs.oracle.com/javase/8/docs/api/?java/lang/StringBuilder.html)
    (another built-in Java class) is a *mutable* object that represents a string of
    characters, and it has methods that change the value of the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'These two snapshot diagrams look very different, which is good: the difference
    between mutability and immutability will play an important role in making our
    code *safe from bugs*.'
  prefs: []
  type: TYPE_NORMAL
- en: Immutable references
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Java also gives us immutable references: variables that are assigned once and
    never reassigned. To make a reference immutable, declare it with the keyword `final`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![final reference is a double arrow](../Images/abee6b9961349e677c3fdbf95e62d277.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the Java compiler isn’t convinced that your `final` variable will only be
    assigned once at runtime, then it will produce a compiler error. So `final` gives
    you static checking for immutable references.
  prefs: []
  type: TYPE_NORMAL
- en: In a snapshot diagram, an immutable reference (`final`) is denoted by a double
    arrow. Here’s an object whose `id` never changes (it can’t be reassigned to a
    different number), but whose `age` can change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that we can have an *immutable reference* to a *mutable value* (for
    example: `final StringBuilder sb`) whose value can change even though we’re pointing
    to the same object.'
  prefs: []
  type: TYPE_NORMAL
- en: We can also have a *mutable reference* to an *immutable value* (like `String
    s`), where the value of the variable can change because it can be re-pointed to
    a different object.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Java Collections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The very first Language Basics tutorial discussed [**arrays**](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html),
    which are *fixed-length* containers for a sequence of objects or primitive values.
    Java provides a number of more powerful and flexible tools for managing *collections*
    of objects: the **Java Collections Framework**.'
  prefs: []
  type: TYPE_NORMAL
- en: Lists, Sets, and Maps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A [Java `List`](http://docs.oracle.com/javase/8/docs/api/?java/util/List.html)
    is similar to a [Python list](https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range).**
    A `List` contains an ordered collection of zero or more objects, where the same
    object might appear multiple times. We can add and remove items to and from the
    `List`, which will grow and shrink to accomodate its contents.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example `List` operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Java | description | Python |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `int count = lst.size();` | count the number of elements | `count = len(lst)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lst.add(e);` | append an element to the end | `lst.append(e)` |'
  prefs: []
  type: TYPE_TB
- en: '| `if (lst.isEmpty()) ...` | test if the list is empty | `if not lst: ...`
    |'
  prefs: []
  type: TYPE_TB
- en: 'In a snapshot diagram, we represent a `List` as an object with indices drawn
    as fields:'
  prefs: []
  type: TYPE_NORMAL
- en: This list of `cities` might represent a trip from Boston to Bogotá to Barcelona.
  prefs: []
  type: TYPE_NORMAL
- en: '**A [`Set`](http://docs.oracle.com/javase/8/docs/api/?java/util/Set.html) is
    an unordered collection of zero or more unique objects.** Like a mathematical
    *set* or a [Python set](https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset)
    – and unlike a `List` – an object cannot appear in a set multiple times. Either
    it’s in or it’s out.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example `Set` operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Java | description | Python |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `s1.contains(e)` | test if the set contains an element | `e in s1` |'
  prefs: []
  type: TYPE_TB
- en: '| `s1.containsAll(s2)` | test whether *s1 ⊇ s2* | `s1.issuperset(s2)` `s1 >=
    s2` |'
  prefs: []
  type: TYPE_TB
- en: '| `s1.removeAll(s2)` | remove *s2* from *s1* | `s1.difference_update(s2)` `s1
    -= s2` |'
  prefs: []
  type: TYPE_TB
- en: 'In a snapshot diagram, we represent a `Set` as an object with no-name fields:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we have a set of integers, in no particular order: 42, 1024, and -7.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A [`Map`](http://docs.oracle.com/javase/8/docs/api/?java/util/Map.html) is
    similar to a [Python dictionary](https://docs.python.org/3/library/stdtypes.html#mapping-types-dict).**
    In Python, the **keys** of a map must be [hashable](https://docs.python.org/3/glossary.html#term-hashable).
    Java has a similar requirement that we’ll discuss when we confront how equality
    works between Java objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example `Map` operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Java | description | Python |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `map.put(key, val)` | add the mapping *key → val* | `map[key] = val` |'
  prefs: []
  type: TYPE_TB
- en: '| `map.get(key)` | get the value for a key | `map[key]` |'
  prefs: []
  type: TYPE_TB
- en: '| `map.containsKey(key)` | test whether the map has a key | `key in map` |'
  prefs: []
  type: TYPE_TB
- en: '| `map.remove(key)` | delete a mapping | `del map[key]` |'
  prefs: []
  type: TYPE_TB
- en: 'In a snapshot diagram, we represent a `Map` as an object that contains key/value
    pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This `turtles` map contains `Turtle` objects assigned to `String` keys: Bob,
    Buckminster, and Buster.'
  prefs: []
  type: TYPE_NORMAL
- en: '### Literals'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python provides convenient syntax for creating lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Java does not.** It does provide a literal syntax for arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'But this creates an *array*, not a `List`. We can use [the utility function
    `Arrays.asList`](http://docs.oracle.com/javase/8/docs/api/?java/util/Arrays.html)
    to create a `List` from the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '… or directly from arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A `List` created with `Arrays.asList` does come with a restriction: its length
    is fixed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generics: declaring List, Set, and Map variables'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unlike Python collection types, with Java collections we can restrict the type
    of objects contained in the collection. When we add an item, the compiler can
    perform *static checking* to ensure we only add items of the appropriate type.
    Then, when we pull out an item, we are guaranteed that its type will be what we
    expect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the syntax for declaring some variables to hold collections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Because of the way generics work, we cannot create a collection of primitive
    types. For example, `Set<int>` does *not* work. However, as we saw earlier, `int`s
    have an `Integer` wrapper we can use (e.g. `Set<Integer> numbers`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make it easier to use collections of these wrapper types, Java
    does some automatic conversion. If we have declared `List<Integer> sequence`,
    this code works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'ArrayLists and LinkedLists: creating Lists'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we’ll see soon enough, Java helps us distinguish between the *specification*
    of a type – what does it do? – and the *implementation* – what is the code?
  prefs: []
  type: TYPE_NORMAL
- en: '`List`, `Set`, and `Map` are all *interfaces*: they define how these respective
    types work, but they don’t provide implementation code. There are several advantages,
    but one potential advantage is that we, the users of these types, get to choose
    different implementations in different situations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to create some actual `List`s:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If the generic type parameters are the same on the left and right, Java can
    infer what’s going on and save us some typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[`ArrayList`](http://docs.oracle.com/javase/8/docs/api/?java/util/ArrayList.html)
    and [`LinkedList`](http://docs.oracle.com/javase/8/docs/api/?java/util/LinkedList.html)
    are two implementations of `List`. Both provide all the operations of `List`,
    and those operations must work as described in the documentation for `List`. In
    this example, `firstNames` and `lastNames` will behave the same way; if we swapped
    which one used `ArrayList` vs. `LinkedList`, our code will not break.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, this ability to choose is also a burden: we didn’t care how
    Python lists worked, why should we care whether our Java lists are `ArrayLists`
    or `LinkedLists`? Since the only difference is performance, for 6.005 *we don’t*.'
  prefs: []
  type: TYPE_NORMAL
- en: When in doubt, use `ArrayList`.
  prefs: []
  type: TYPE_NORMAL
- en: 'HashSets and HashMaps: creating Sets and Maps'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`HashSet`](http://docs.oracle.com/javase/8/docs/api/?java/util/HashSet.html)
    is our default choice for `Set`s:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Java also provides [sorted sets](http://docs.oracle.com/javase/8/docs/api/?java/util/SortedSet.html)
    with the [`TreeSet`](http://docs.oracle.com/javase/8/docs/api/?java/util/TreeSet.html)
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'And for a `Map` the default choice is [`HashMap`](http://docs.oracle.com/javase/8/docs/api/?java/util/HashMap.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Iteration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So maybe we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A very common task is iterating through our cities/numbers/turtles/etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Java provides a similar syntax for iterating over the items in `List`s and `Set`s.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We can’t iterate over `Map`s themselves this way, but we can iterate over the
    keys as we did in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Under the hood this kind of `for` loop uses an [`Iterator`](http://docs.oracle.com/javase/8/docs/api/?java/util/Iterator.html),
    a design pattern we’ll see later in the class.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating with indices
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you want to, Java provides different `for` loops that we can use to iterate
    through a list using its indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Unless we actually need the index value `ii`, this code is verbose and has more
    places for bugs to hide. Avoid.
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Collections
  prefs: []
  type: TYPE_NORMAL
- en: Rewrite these variable declarations using `List` instead of arrays. We’re only
    declaring the variables, not initializing them with any value.
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: X marks the spot
  prefs: []
  type: TYPE_NORMAL
- en: Java `Map`s work like Python dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we run this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: What is the value of…
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: Java API documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous section has a number of links to documentation for classes that
    are part of the [Java platform API](http://docs.oracle.com/javase/8/docs/api/).
  prefs: []
  type: TYPE_NORMAL
- en: API stands for *application programming interface*. If you want to program an
    app that talks to Facebook, Facebook publishes an API (more than one, in fact,
    for different languages and frameworks) you can program against. The Java API
    is a large set of generally useful tools for programming pretty much anything.
  prefs: []
  type: TYPE_NORMAL
- en: '[**`java.lang.String`**](http://docs.oracle.com/javase/8/docs/api/?java/lang/String.html)
    is the full name for `String`. We can create objects of type `String` just by
    using `"double quotes"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**`java.lang.Integer`**](http://docs.oracle.com/javase/8/docs/api/?java/lang/Integer.html)
    and the other primitive wrapper classes. Java automagically converts between primitive
    and wrapped (or “boxed”) types in most situations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**`java.util.List`**](http://docs.oracle.com/javase/8/docs/api/?java/util/List.html)
    is like a Python list, but in Python, lists are part of the language. In Java,
    `List`s are implemented in… Java!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**`java.util.Map`**](http://docs.oracle.com/javase/8/docs/api/?java/util/Map.html)
    is like a Python dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**`java.io.File`**](http://docs.oracle.com/javase/8/docs/api/?java/io/File.html)
    represents a file on disk. Take a look at the methods provided by `File`: we can
    test whether the file is readable, delete the file, see when it was last modified…'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**`java.io.FileReader`**](http://docs.oracle.com/javase/8/docs/api/?java/io/FileReader.html)
    lets us read text files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**`java.io.BufferedReader`**](http://docs.oracle.com/javase/8/docs/api/?java/io/BufferedReader.html)
    lets us read in text efficiently, and it also provides a very useful feature:
    reading an entire line at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take a closer look at the documentation for [`BufferedReader`](http://docs.oracle.com/javase/8/docs/api/?java/io/BufferedReader.html).
    There are many things here that relate to features of Java we haven’t discussed!
    Keep your head and focus on the **things in bold** below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/199701b51a34b8053327da2a91c21ceb.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At the top of the page is the *class hierarchy* for `BufferedReader` and a list
    of *implemented interfaces*. A `BufferedReader` object has all of the methods
    of all those types (plus its own methods) available to use.
  prefs: []
  type: TYPE_NORMAL
- en: Next we see *direct subclasses*, and for an interface, *implementing classes*.
    This can help us find, for example, that [`HashMap`](http://docs.oracle.com/javase/8/docs/api/?java/util/HashMap.html)
    is an implementation of [`Map`](http://docs.oracle.com/javase/8/docs/api/?java/util/Map.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up: **a description of the class**. Sometimes these descriptions are a
    little obtuse, but **this is the first place you should go** to understand a class.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/86bcd1d0cd9b53ee3f64a07a2493f077.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you want to make a new `BufferedReader` the **constructor summary** is the
    first place to look. Constructors aren’t the only way to get a new object in Java,
    but they are the most common.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/070b096486c3385b73dec63f73760ca3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next: **the method summary lists all the methods we can call** on a `BufferedReader`
    object.'
  prefs: []
  type: TYPE_NORMAL
- en: Below the summary are detailed descriptions of each method and constructor.
    **Click a constructor or method to see the detailed description.** This is the
    first place you should go to understand what a method does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each detailed description includes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **method signature**: we see the return type, the method name, and the
    parameters. We also see *exceptions*. For now, those usually mean errors the method
    can run into.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full **description**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameters**: descriptions of the method arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And a description of what the method **returns**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These detailed descriptions are **specifications**. They allow us to use tools
    like `String`, `Map`, or `BufferedReader` *without* having to read or understand
    the code that implements them.
  prefs: []
  type: TYPE_NORMAL
- en: Reading, writing, understanding, and analyzing specifications will be one of
    our first major undertakings in 6.005, starting in a few classes.
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Reading Javadocs
  prefs: []
  type: TYPE_NORMAL
- en: Use the Java API docs to answer…
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have a class `TreasureChest`. After we run this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Avast!
  prefs: []
  type: TYPE_NORMAL
- en: 'After we run this code, where `???` is the appropriate type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Reading exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point you should have completed all the reading exercises above.
  prefs: []
  type: TYPE_NORMAL
- en: To check your reading exercise status, see [classes/02-basic-java on Omnivore](https://omni.csail.mit.edu/6.005/fa16/user/classes/02-basic-java).
  prefs: []
  type: TYPE_NORMAL
- en: Completing the reading exercises prepares you for the *nanoquiz* at the beginning
    of each class meeting, and submitting the exercises is required by 10pm the evening
    before class.
  prefs: []
  type: TYPE_NORMAL
