- en: Sort
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sort
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`sort` package defines an [interface](https://golang.org/pkg/sort/#Interface)
    whose name is `Interface`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For slice, or any other collection types, provided that it implements the `Len()`,
    `Less` and `Swap` functions, you can use `sort.Sort()` function to arrange the
    elements in the order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To avoid losing focus of demonstrating how to use `sort.Interface`, the `command`
    struct is simplified to only contain one `string` member: `name`. The comparison
    method (`Less`) is just contrasting the `name` in alphabetic order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the running result of the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can see after sorting, the items in `c` are rearranged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, if you pick at the performance, you may define a slice whose
    type is the pointer, because switching pointer is much quicker if the size of
    element is very big. Modify the above example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the executing result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can see the pointers are reordered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Go Programming Language](http://www.gopl.io/).'
  prefs: []
  type: TYPE_NORMAL
