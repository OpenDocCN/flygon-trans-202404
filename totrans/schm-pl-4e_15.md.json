["```, the unquotation marks `,` and `,@`, the syntax quotation marks `#'` and `#``, and the syntax unquotation marks `#,` and `#,@`.\n\n*Whitespace* consists of space, tab, newline, form-feed, carriage-return, and next-line characters along with any additional characters categorized as Zs, Zl, or Zp by the Unicode standard\u00a0[[30](bibliography.html#g248)]. A newline character is also called a linefeed character. Some whitespace characters or character sequences serve as *line endings*, which are recognized as part of the syntax of line comments and strings. A line ending is a newline character, a next-line character, a line-separator character, a carriage-return character followed by a newline character, a carriage return followed by a next-line character, or a carriage return not followed by a newline or next-line character. A different set of whitspace characters serve as *intraline whitespace*, which are recognized as part of the syntax of strings. Intraline whitespace includes spaces, tabs, and any additional Unicode characters whose general category is Zs. The sets of intraline whitespace characters and line endings are disjoint, and there are other whitespace characters, such as form feed, that are not in either set.\n\n*Comments* come in three flavors: line comments, block comments, and datum comments. A line comment consists of a semicolon (\u00a0`;`\u00a0) followed by any number of characters up to the next line ending or end of input. A block comment consists of a `#|` prefix, any number of characters and nested block comments, and a `|#` suffix. A datum comment consists of a `#;` prefix followed by any datum.\n\nSymbols, numbers, characters, booleans, and the dotted pair marker (\u00a0`.`\u00a0) must be delimited by the end the input, whitespace, the start of a comment, an open or close parenthesis, an open or close bracket, a string quote (\u00a0`\"`\u00a0), or a hash mark (\u00a0`#`\u00a0). Any token may be preceded or followed by any number of whitespace characters and comments.\n\nCase is significant in the syntax of characters, strings, and symbols except within a hex scalar value, where the hexadecimal digits \"a\" through \"f\" may be written in either upper or lower case. (Hex scalar values are hexadecimal numbers denoting Unicode scalar values.) Case is insignificant in the syntax of booleans and numbers. For example, `Hello` is distinct from `hello`, `#\\A` is distinct from `#\\a`, and `\"String\"` is distinct from `\"string\"`, while `#T` is equivalent to `#t`, `#E1E3` is equivalent to `#e1e3`, `#X2aBc` is equivalent to `#x2abc`, and `#\\x3BA` is equivalent to `#\\x3ba`.\n\nA conforming implementation of the Revised\u2076 Report is not permitted to extend the syntax of datums, with one exception: it is permitted to recognize any token starting with the prefix `#!` as a flag indicating certain extensions are valid in the text following the flag. So, for example, an implementation might recognize the flag `#!braces` and switch to a mode in which lists may be enclosed in braces as well as in parentheses and brackets.\n\n`#!braces\u00a0'{a\u00a0b\u00a0c}\u00a0![<graphic>](ch2_0.gif)\u00a0(a\u00a0b\u00a0c)`\n\nThe flag `#!r6rs` may be used to declare that the subsequent text is written in R6RS syntax. It is good practice to include `#!r6rs` at the start of any file containing a portable library or top-level program to specify that R6RS syntax is being used, in the event that future reports extend the syntax in ways that are incompatible with the text of the library or program. `#!r6rs` is otherwise treated as a comment.\n\nIn the grammars appearing below, <empty> stands for an empty sequence of characters. An item followed by an asterisk (\u00a0*\u00a0) represents zero or more occurrences of the item, and an item followed by a raised plus sign (\u00a0^+\u00a0) represents one or more occurrences. Spacing between items within a production appears for readability only and should be treated as if it were not present.\n\n**Datums.**\u00a0\u00a0A datum is a boolean, character, symbol, string, number, list, vector, or bytevector.\n\n| <datum> | ![<graphic>](gra_8.gif) | <boolean> |\n|  | &#124; | <character> |\n|  | &#124; | <symbol> |\n|  | &#124; | <string> |\n|  | &#124; | <number> |\n|  | &#124; | <list> |\n|  | &#124; | <vector> |\n|  | &#124; | <bytevector> |\n\nLists, vectors, and bytevectors are compound datums formed from groups of tokens possibly separated by whitespace and comments. The others are single tokens.\n\n**Booleans.**\u00a0\u00a0Boolean false is written `#f`. While all other values count as true, the canonical true value (and only other value to be considered a boolean value by the `boolean?` predicate) is written `#t`.\n\n| <boolean> | ![<graphic>](gra_8.gif) | `#t` &#124; `#f` |\n\nCase is not significant in the syntax of booleans, so these may also be written as `#T` and `#F`.\n\n**Characters.**\u00a0\u00a0A character object is written as the prefix `#\\` followed by a single character, a character name, or a sequence of characters specifying a Unicode scalar value.\n\n| <character> | ![<graphic>](gra_8.gif) | `#\\` <any character> &#124; `#\\` <character name> &#124; `#\\x` <hex scalar value> |\n| <character name> | ![<graphic>](gra_8.gif) | `alarm` &#124; `backspace` &#124; `delete` &#124; `esc` &#124;`linefeed` |\n|  | &#124; | `newline` &#124; `page` &#124; `return` &#124; `space` &#124; `tab` &#124; `vtab` |\n| <hex scalar value> | ![<graphic>](gra_8.gif) | <digit 16>^+ |\n\nThe named characters correspond to the Unicode characters alarm (Unicode scalar value 7, i.e., U+0007), backspace (U+0008), delete (U+007F), esc (U+001B), linefeed (U+000A; same as newline), newline (U+000A), page (U+000C), return (U+000D), space (U+0020), tab (U+0009) and vertical tab (U+000B).\n\nA hex scalar value represents a Unicode scalar value *n*, ![<graphic>](gra_51.gif) or ![<graphic>](gra_52.gif). The <digit 16> nonterminal is defined under **Numbers** below.\n\nA `#\\` prefix followed by a character name is always interpreted as a named character, e.g., `#\\page` is treated as `#\\page` rather than `#\\p` followed by the symbol `age`. Characters must also be delimited, as described above, so that `#\\pager` is treated as a syntax error rather than as the character `#\\p` followed by the symbol `ager` or the character `#\\page` followed by the symbol `r`.\n\nCase is significant in the syntax of character objects, except within a hex scalar value.\n\n**Strings.**\u00a0\u00a0A string is written as a sequence of string elements enclosed in string quotes (double quotes). Any character other than a string quote or backslash can appear as a string element. A string element can also consist of a backslash followed by a single character, a backslash followed by sequence of characters specifying a Unicode scalar value, or a backslash followed by sequence of intraline whitespace characters that includes a single line ending.\n\n| <string> | ![<graphic>](gra_8.gif) | `\"` <string character>* `\"` |\n| <string element> | ![<graphic>](gra_8.gif) | <any character except `\"` or `\\`> |\n|  | &#124; | `\\\"` &#124; `\\\\` &#124; `\\a` &#124; `\\b` &#124; `\\f` &#124; `\\n` &#124; `\\r` &#124; `\\t` &#124; `\\v` |\n|  | &#124; | `\\x` <hex scalar value> `;` |\n|  | &#124; | `\\` <intraline whitespace>* <line ending> <intraline whitespace>* |\n\nA string element consisting of a single character represents that character, except that any single character or pair of characters representing a line ending represents a single newline character. A backslash followed by a double quote represents a double quote, while a backslash followed by a backslash represents a backslash. A backslash followed by `a` represents the alarm character (U+0007); by `b`, backspace (U+0008); by `f`, form feed (U+000C); by `n`, newline (U+000A); by `r`, carriage return (U+000D); by `t`, tab (U+0009); and by `v`, vertical tab (U+000B). A backslash followed by `x`, a hex scalar value, and a semi-colon (\u00a0`;`\u00a0) represents the Unicode character specified by the scalar value. The <hex scalar value> nonterminal is defined under **Characters** above. Finally, a sequence of characters consisting of a backslash followed by intraline whitespace that includes a single line ending represents no characters.\n\nCase is significant in the syntax of strings, except within a hex scalar value.\n\n**Symbols.**\u00a0\u00a0A symbol is written either as an \"initial\" character followed by a sequence of \"subsequent\" characters or as a \"peculiar symbol.\" Initial characters are letters, certain special characters, an additional set of Unicode characters, or arbitrary characters specified by Unicode scalar values. Subsequent characters are initial characters, digits, certain additional special characters, and a set of additional Unicode characters. The peculiar symbols are `+`, `-`, `...`, and any sequence of subsequent characters prefixed by `->`.\n\n| <symbol> | ![<graphic>](gra_8.gif) | <initial> <subsequent>* |\n| <initial> | ![<graphic>](gra_8.gif) | <letter> &#124; `!` &#124; `$` &#124; `%` &#124; `&` &#124; `*` &#124; `/` &#124; `:` &#124; `<` &#124; `=` &#124; `>` &#124; `?` &#124; `~` &#124; `_` &#124; `^` |\n|  | &#124; | <Unicode Lu, Ll, Lt, Lm, Lo, Mn, Nl, No, Pd, Pc, Po, Sc, Sm, Sk, So, or Co> |\n|  | &#124; | `\\x` <hex scalar value> `;` |\n| <subsequent> | ![<graphic>](gra_8.gif) | <initial> &#124; <digit 10> &#124; `.` &#124; `+` &#124; `-` &#124; `@` &#124; <Unicode Nd, Mc, or Me> |\n| <letter> | ![<graphic>](gra_8.gif) | `a` &#124; `b` &#124; ... &#124; `z` &#124; `A` &#124; `B` &#124; ... &#124; `Z` |\n\n<Unicode Lu, Ll, Lt, Lm, Lo, Mn, Nl, No, Pd, Pc, Po, Sc, Sm, Sk, So, or Co> represents any character whose Unicode scalar value is greater than 127 and whose Unicode category is one of the listed categories. <Unicode Nd, Mc, or Me> represents any character whose Unicode category is one of the listed categories. The <hex scalar value> nonterminal is defined under **Characters** above, and <digit 10> is defined under **Numbers** below.\n\nCase is significant in symbols.\n\n**Numbers.**\u00a0\u00a0Numbers can appear in one of four radices: 2, 8, 10, and 16, with 10 the default. Several of the productions below are parameterized by the radix, `*r*`, and each represents four productions, one for each of the four possible radices. Numbers that contain radix points or exponents are constrained to appear in radix 10, so <decimal `*r*`> is valid only when `*r*` is 10.\n\n| <number> | ![<graphic>](gra_8.gif) | <num 2> &#124; <num 8> &#124; <num 10> &#124; <num 16> |\n| <num `*r*`> | ![<graphic>](gra_8.gif) | <prefix `*r*`> <complex `*r*`> |\n| <prefix `*r*`> | ![<graphic>](gra_8.gif) | <radix `*r*`> <exactness> &#124; <exactness> <radix `*r*`> |\n| <radix 2> | ![<graphic>](gra_8.gif) | `#b` |\n| <radix 8> | ![<graphic>](gra_8.gif) | `#o` |\n| <radix 10> | ![<graphic>](gra_8.gif) | <empty> &#124; `#d` |\n| <radix 16> | ![<graphic>](gra_8.gif) | `#x` |\n| <exactness> | ![<graphic>](gra_8.gif) | <empty> &#124; `#i` &#124; `#e` |\n| <complex `*r*`> | ![<graphic>](gra_8.gif) | <real `*r*`> &#124; <real `*r*`> @ <real `*r*`> |\n|  | &#124; | <real `*r*`> `+` <imag `*r*`> &#124; <real `*r*`> `-` <imag `*r*`> |\n|  | &#124; | `+` <imag `*r*`> &#124; `-` <imag `*r*`> |\n| <real `*r*`> | ![<graphic>](gra_8.gif) | <sign> <ureal `*r*`> &#124; `+nan.0` &#124; `-nan.0` &#124; `+inf.0` &#124; `-inf.0` |\n| <imag `*r*`> | ![<graphic>](gra_8.gif) | `i` &#124; <ureal `*r*`> `i` &#124; `inf.0` `i` &#124; `nan.0` `i` |\n| <ureal `*r*`> | ![<graphic>](gra_8.gif) | <uinteger `*r*`> &#124; <uinteger `*r*`> `/` <uinteger `*r*`> &#124; <decimal `*r*`> <suffix> |\n| <uinteger `*r*`> | ![<graphic>](gra_8.gif) | <digit `*r*`>^+ |\n| <decimal 10> | ![<graphic>](gra_8.gif) | <uinteger 10> <suffix> |\n|  | &#124; | `.` <digit 10>^+ <suffix> |\n|  | &#124; | <digit 10>^+ `.` <digit 10>* <suffix> |\n| <suffix> | ![<graphic>](gra_8.gif) | <exponent> <mantissa width> |\n| <exponent> | ![<graphic>](gra_8.gif) | <empty> &#124; <exponent marker> <sign> <digit 10>^+ |\n| <exponent marker> | ![<graphic>](gra_8.gif) | `e` &#124; `s` &#124; `f` &#124; `d` &#124; `l` |\n| <mantissa width> | ![<graphic>](gra_8.gif) | <empty> &#124; `&#124;` <digit 10>^+ |\n| <sign> | ![<graphic>](gra_8.gif) | <empty> &#124; `+` &#124; `-` |\n| <digit 2> | ![<graphic>](gra_8.gif) | `0` &#124; `1` |\n| <digit 8> | ![<graphic>](gra_8.gif) | `0` &#124; `1` &#124; `2` &#124; `3` &#124; `4` &#124; `5` &#124; `6` &#124; `7` |\n| <digit 10> | ![<graphic>](gra_8.gif) | `0` &#124; `1` &#124; `2` &#124; `3` &#124; `4` &#124; `5` &#124; `6` &#124; `7` &#124; `8` &#124; `9` |\n| <digit 16> | ![<graphic>](gra_8.gif) | <digit 10> &#124; `a` &#124; `b` &#124; `c` &#124; `d` &#124; `e` &#124; `f` |\n\nA number written as above is inexact if it is prefixed by `#i` or if it is not prefixed by `#e` and contains a decimal point, nonempty exponent, or nonempty mantissa width. Otherwise, it is exact.\n\nCase is not significant in the syntax of numbers.\n\n**Lists.**\u00a0\u00a0Lists are compound datums formed from groups of tokens and possibly involving other datums, including other lists. Lists are written as a sequence of datums within parentheses or brackets; as a nonempty sequence of datums, dotted-pair marker (\u00a0.\u00a0), and single datum enclosed within parentheses or brackets; or as an abbreviation.\n\n| <list> | ![<graphic>](gra_8.gif) | `(`<datum>*`)` &#124; `[`<datum>*`]` |\n|  | &#124; | `(`<datum>^+ `.` <datum>`)` &#124; `[`<datum>^+ `.` <datum>`]` |\n|  | &#124; | <abbreviation> |\n| <abbreviation> | ![<graphic>](gra_8.gif) | `'` <datum> &#124; ```"]