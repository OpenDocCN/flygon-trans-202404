- en: Evaluating Combinations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估组合
- en: What Does Evaluate Mean?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估是什么意思？
- en: When we type a Racket expression such as `(+ 2 3)` into the interpreter, we
    as humans know immediately that that is really just `5`. But all the computer
    sees is open parentheses, plus, two, three, close parentheses. How does it get
    from the Racket expression to the value `5`? It *evaluates* the expression and
    gets the value 5 from there. How does it evaluate it?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在解释器中键入类似`(+ 2 3)`的 Racket 表达式时，我们作为人类立即知道这实际上就是`5`。但计算机所看到的只是开括号、加号、两、三、闭括号。它是如何从
    Racket 表达式得到值`5`的呢？它*评估*表达式并从中得到值`5`。它是如何评估的呢？
- en: How the Interpreter Evaluates Things
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释器如何评估事物
- en: The way the interpreter evaluates things can be a little confusing at first,
    but will make sense soon. To evaluate a Racket expression, first evaluate the
    subexpressions of the expression. In other words, you first evaluate the operands
    fully, and then apply the operator. When you reach a procedure call, apply the
    operator to the operands and repeat. Note that evaluation is recursive--in order
    to evaluate an expression, we need to first evaluate its subexpressions. In order
    to evaluate the subexpressions, we need to evaluate *their* subexpressions, and
    so on until we reach a procedure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器评估事物的方式一开始可能有点令人困惑，但很快就会讲得通。要评估一个 Racket 表达式，首先要评估表达式的子表达式。换句话说，你首先要完全评估操作数，然后应用运算符。当你到达一个过程调用时，将运算符应用于操作数并重复。请注意，评估是递归的--为了评估一个表达式，我们需要首先评估其子表达式。为了评估子表达式，我们需要评估*它们的*子表达式，依此类推，直到达到一个过程。
- en: 'Example: A Recursion Tree'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子：一个递归树
- en: 'Let''s try evaluating the following expression:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试评估以下表达式：
- en: '`(* (+ 2 (* 4 6))`'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`(* (+ 2 (* 4 6))`'
- en: '`(+ 3 5 7))`'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 3 5 7))`'
- en: This is a fairly complicated expression, and without recursion it would be very
    difficult to evaluate. Evaluating this requires that the evaluation rule be applied
    four different times. If we represent the evaluation process as a tree, it becomes
    a little easier to understand. This tree, unlike real trees, has its roots in
    the air and its branches sticking into the ground.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当复杂的表达式，如果没有递归，将很难评估。评估这需要应用评估规则四次。如果我们将评估过程表示为一棵树，那么就会变得更容易理解。这棵树，不像真实的树，它的根在空中，它的分支伸入地面。
- en: Each combination is represented by a node with branches corresponding to a subexpression.
    The end branches are operators or numbers. We can imagine that the values of the
    operands swim upwards, starting at the bottom of the tree, getting evaluated at
    each branch, and resulting in a new value which is further evaluated at a higher
    level.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组合由一个具有对应子表达式的分支的节点表示。末端分支是运算符或数字。我们可以想象操作数的值向上游动，从树的底部开始，在每个分支处进行评估，并导致一个新值，该值在更高级别进一步评估。
- en: '![Recursion Tree](../Images/ec7ad933748d031f908ecb610b8aa307.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![递归树](../Images/ec7ad933748d031f908ecb610b8aa307.jpg)'
- en: A more detailed explanation is given in the [wiki entry](https://edge.edx.org/courses/uc-berkeley/cs61as-1x/SICP/wiki/cs61as-
    1x/eval/) for eval, and it will be further explained in the sections about the
    substitution model.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[wiki entry](https://edge.edx.org/courses/uc-berkeley/cs61as-1x/SICP/wiki/cs61as-1x/eval/)中对
    eval 给出了更详细的解释，并将在关于替换模型的部分进一步解释。'
- en: Define?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义？
- en: What about `define`? It turns out that the ordinary evaluation rules don't work
    for `define`, since `(define x 3)` doesn't apply `define` to two arguments; it
    instead stores the value of `x` as 3\. Define is what is known as a [special form](https://edge.edx.org/courses/uc-berkeley/cs61as-1x/SICP/wiki
    /cs61as-1x/special-form/), and special forms are the only exceptions to the rules
    of evaluation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么`define`呢？原来，普通的评估规则对`define`不起作用，因为`(define x 3)`不将`define`应用于两个参数；它实际上将`x`的值存储为3。Define
    是所谓的[特殊形式](https://edge.edx.org/courses/uc-berkeley/cs61as-1x/SICP/wiki/cs61as-1x/special-form/)，特殊形式是评估规则的唯一例外。
- en: Which of the following is not a primitive function in Racket?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪个不是 Racket 中的原始函数？
