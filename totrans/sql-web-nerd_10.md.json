["```\n>  set selection [ns_db select $db \"select * from news where sysdate between release_date and expiration_date and approved_p = 't' order by release_date desc, creation_date desc\"] while { [ns_db getrow $db $selection] } { set_variables_after_query # we use the luxury of Tcl to format the date nicely ns_write \"<li>[util_AnsiDatetoPrettyDate $release_date]: \" if { $counter <= 3 && [string length $body] < 300 } { # it is one of the top three items and it is rather short # so, let's consider displaying it right here # first, let's go back to Oracle to find out if there are any # comments on this item set n_comments [database_to_tcl_string $db_sub \"select count(*) from general_comments where on_what_id = $news_id and on_which_table = 'news'\"] if { $n_comments > 0 } { # there are some comments; just show the title ns_write \"<a href=\\\"item.tcl?news_id=$news_id\\\">$title</a>\\n\" } else { # let's show the whole news item ns_write \"$title\\n<blockquote>\\n[util_maybe_convert_to_html $body $html_p]\\n\" if [ad_parameter SolicitCommentsP news 1] { ns_write \"<br><br>\\n<A HREF=\\\"comment-add.tcl?news_id=$news_id\\\">comment</a>\\n\" } ns_write \"</blockquote>\\n\" } } else { ns_write \"<a href=\\\"item.tcl?news_id=$news_id\\\">$title</a>\\n\" } } \n> ```", "```\n>  select count(*) from chemical where upper(edf_chem_name) like upper('%benzene%'); COUNT(*) ---------- 328 \n> ```", "```\n>  select edf_chem_name, edf_substance_id, score_chem_name_match_score(upper(edf_chem_name),upper('%benzene%')) as match_score from chemical where upper(edf_chem_name) like upper('%benzene%'); order by score_chem_name_match_score(upper(edf_chem_name),upper('benzene')), score_chem_name_for_sorting(edf_chem_name) \n> ```", "```\n>  create or replace function score_chem_name_match_score (chem_name IN varchar, query_string IN varchar) return integer AS BEGIN IF chem_name = query_string THEN return 0; ELSIF instr(chem_name,query_string) = 1 THEN return 1; ELSE return 2; END IF; END score_chem_name_match_score; \n> ```", "```\n>  create or replace function score_chem_name_for_sorting (chem_name IN varchar) return varchar AS stripped_chem_name chem_hazid_ref.edf_chem_name%TYPE; BEGIN stripped_chem_name := ltrim(chem_name,'1234567890-+()[],'' #'); return stripped_chem_name; END score_chem_name_for_sorting; \n> ```", "```\n>  -- note that we prefix the incoming arg with v_ to keep it -- distinguishable from the database column of the same name -- this is a common PL/SQL convention create or replace function user_group_name_from_id (v_group_id IN integer) return varchar IS -- instead of worrying about how many characters to -- allocate for this local variable, we just tell -- Oracle \"make it the same type as the group_name -- column in the user_groups table\" v_group_name user_groups.group_name%TYPE; BEGIN if v_group_id is null then return ''; end if; -- note the usage of INTO below, which pulls a column -- from the table into a local variable select group_name into v_group_name from user_groups where group_id = v_group_id; return v_group_name; END; / show errors \n> ```"]