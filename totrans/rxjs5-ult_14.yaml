- en: Operators - Observable in an Observable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Observable in an Observable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quite often you come to a point where you start with one type of Observable
    and you want it to turn into something else.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: So here we have a case of starting with values 1,2,3 and wanting those to lead
    up to an ajax call each
  prefs: []
  type: TYPE_NORMAL
- en: --1------2-----3------> --json-- json--json -->
  prefs: []
  type: TYPE_NORMAL
- en: The reason for us NOT doing it like this with a `.map()` operator
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'is that it would not give the result we want instead the result would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: because we have created a list of observables, so three different streams. The
    `flatMap()` operator however is able to flatten these three streams into one stream
    called a `metastream`. There is however another interesting operator that we should
    be using when dealing with ajax generally and it's called `switchMap()`. Read
    more about it here [Cascading calls](cascading-calls.html)
  prefs: []
  type: TYPE_NORMAL
