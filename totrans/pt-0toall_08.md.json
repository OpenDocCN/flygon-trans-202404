["```\n # References\n# https://github.com/yunjey/pytorch-tutorial/blob/master/tutorials/01-basics/pytorch_basics/main.py\n# http://pytorch.org/tutorials/beginner/data_loading_tutorial.html#dataset-class\nimport torch\nimport numpy as np\nfrom torch.autograd import Variable\nfrom torch.utils.data import Dataset, DataLoader\n\nclass DiabetesDataset(Dataset):\n    \"\"\" Diabetes dataset.\"\"\"\n\n    # Initialize your data, download, etc.\n    def __init__(self):\n        xy = np.loadtxt('./data/diabetes.csv.gz',\n                        delimiter=',', dtype=np.float32)\n        self.len = xy.shape[0]\n        self.x_data = torch.from_numpy(xy[:, 0:-1])\n        self.y_data = torch.from_numpy(xy[:, [-1]])\n\n    def __getitem__(self, index):\n        return self.x_data[index], self.y_data[index]\n\n    def __len__(self):\n        return self.len\n\ndataset = DiabetesDataset()\ntrain_loader = DataLoader(dataset=dataset,\n                          batch_size=32,\n                          shuffle=True,\n                          num_workers=2)\n\nclass Model(torch.nn.Module):\n\n    def __init__(self):\n        \"\"\"\n        In the constructor we instantiate two nn.Linear module\n        \"\"\"\n        super(Model, self).__init__()\n        self.l1 = torch.nn.Linear(8, 6)\n        self.l2 = torch.nn.Linear(6, 4)\n        self.l3 = torch.nn.Linear(4, 1)\n\n        self.sigmoid = torch.nn.Sigmoid()\n\n    def forward(self, x):\n        \"\"\"\n        In the forward function we accept a Variable of input data and we must return\n        a Variable of output data. We can use Modules defined in the constructor as\n        well as arbitrary operators on Variables.\n        \"\"\"\n        out1 = self.sigmoid(self.l1(x))\n        out2 = self.sigmoid(self.l2(out1))\n        y_pred = self.sigmoid(self.l3(out2))\n        return y_pred\n\n# our model\nmodel = Model()\n\n# Construct our loss function and an Optimizer. The call to model.parameters()\n# in the SGD constructor will contain the learnable parameters of the two\n# nn.Linear modules which are members of the model.\ncriterion = torch.nn.BCELoss(size_average=True)\noptimizer = torch.optim.SGD(model.parameters(), lr=0.1)\n\n# Training loop\nfor epoch in range(2):\n    for i, data in enumerate(train_loader, 0):\n        # get the inputs\n        inputs, labels = data\n\n        # wrap them in Variable\n        inputs, labels = Variable(inputs), Variable(labels)\n\n        # Forward pass: Compute predicted y by passing x to the model\n        y_pred = model(inputs)\n\n        # Compute and print loss\n        loss = criterion(y_pred, labels)\n        print(epoch, i, loss.data[0])\n\n        # Zero gradients, perform a backward pass, and update the weights.\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step() \n```"]