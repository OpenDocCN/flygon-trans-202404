- en: Common Recursive Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的递归模式
- en: The "Every" Pattern
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “Every”模式
- en: 'Here''s a procedure to square every number in a sentence of numbers:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个将句子中的每个数字平方的过程：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s a procedure to translate every word of a sentence into Pig Latin:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个将句子中的每个单词翻译为Pig Latin的过程：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The pattern here is pretty clear. Our recursive case will do something straightforward
    to the `first` of the sentence, such as `square`ing it or `pigl`ing it, and we'll
    combine that with the result of a recursive call on the `butfirst` of the sentence.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的模式非常清晰。我们的递归情况将对句子的`第一个`进行一些简单的操作，比如将其`平方`或`pigl`，然后将其与对句子的`butfirst`进行递归调用的结果结合起来。
- en: '**Test Your Understanding**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: '**Note:** This is Exercise 5 on your Homework.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 这是你的作业中的第5题。'
- en: 'Write a procedure called `initials` that takes in a sentence as its argument
    and returns a sentence of the first letter of each word in the sentence. For example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`initials`的过程，该过程以句子作为参数，并返回句子中每个单词的首字母组成的句子。例如：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The "Keep" Pattern
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “保留”模式
- en: 'In the "every" pattern, we collect the results of transforming each element
    of a word or sentence into something else. This time we''ll consider a different
    kind of problem: choosing some of the elements and filtering out the others.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在“every”模式中，我们收集将单词或句子的每个元素转换为其他内容的结果。这次我们将考虑一种不同类型的问题：选择一些元素并过滤掉其他元素。
- en: 'First, here is a procedure to select the three-letter words from a sentence:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这里是一个从句子中选择三个字母单词的过程：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, here is a procedure to select the vowels from a word:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，这里是一个从单词中选择元音字母的过程：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s look at the differences between the "every" pattern and the "keep" pattern.
    First of all, the "keep" procedures have three cases, instead of just two as in
    most of the "every" procedures. In the "every" pattern, we only have to distinguish
    between the base case and the recursive case. In the "keep" pattern, there is
    still a base case, but there are two recursive cases: we have to decide whether
    or not to keep the first available element in the return value. When we do keep
    an element, we keep the element itself, not some function of the element.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看“every”模式和“keep”模式之间的区别。首先，“keep”过程有三种情况，而不像大多数“every”过程那样只有两种情况。在“every”模式中，我们只需区分基本情况和递归情况。在“keep”模式中，仍然有一个基本情况，但有两个递归情况：我们必须决定是否保留返回值中的第一个可用元素。当我们保留一个元素时，我们保留元素本身，而不是元素的某个函数。
- en: '**Test Your Understanding**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: Write a procedure called `numbers` that takes a sentence as its argument and
    returns another sentence containing only the numbers in the sentence. You may
    find the `number?` predicate useful.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`numbers`的过程，该过程以句子作为参数，并返回另一个只包含句子中数字的句子。您可能会发现`number?`谓词有用。
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The "Accumulate" Pattern
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “累积”模式
- en: 'Here are two recursive procedures for functions that follow the "accumulate"
    pattern, which combines all of the elements of the argument into a single result:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个遵循“累积”模式的函数的递归过程，它将参数的所有元素组合成一个单一结果：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What's the pattern? We're using some combiner (`+` or `word`) to connect the
    word we're up to with the result of the recursive call. The base case tests for
    an empty argument, but the base case return value must be the identity element
    of the combiner function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 模式是什么？我们使用一些组合器（`+`或`word`）将我们正在处理的单词与递归调用的结果连接起来。基本情况测试空参数，但基本情况的返回值必须是组合器函数的单位元素。
- en: '**Test Your Understanding**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: In this subsection, we went through various functions as an example of recursion.
    Which of these functions below follow the accumulate pattern? Select all that
    apply.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个小节中，我们通过各种函数作为递归的示例。以下哪些函数符合累积模式？选择所有符合条件的。
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
