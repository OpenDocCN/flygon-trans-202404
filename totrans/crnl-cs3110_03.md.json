["```\nlet max1 (r1, r2) : float =\n  if r1 < r2 then r2 else r1\n\n```", "```\nmax1 (3.1415, 2.718)\n\n```", "```\nmax1 (3.1415, 2.718)\n\n```", "```\nlet args = (3.1415, 2.178)\n\n```", "```\nmax1 args (* evaluates to 3.1415 *)\n\n```", "```\nlet max1 (pair : float * float) : float =\n  if (fst pair) < (snd pair) then (snd pair) else (fst pair)\n\n```", "```\nlet max1 (pair : float * float) : float =\n  let r1 = fst pair in\n  let r2 = snd pair in\n    if r1 < r2 then r2 else r1\n\n```", "```\nlet max1 (pair : float * float) : float =\n  let (r1, r2) = pair in\n    if r1 < r2 then r2 else r1\n\n```", "```\nlet max1 (r1, r2) : float =\n  if r1 < r2 then r2 else r1\n\n```", "```\nlet minmax (a, b) : float * float =\n  if a < b then (a, b) else (b, a)\n\n```", "```\nlet (mn, mx) = minmax (2.0, 1.0)\n\n```", "```\ntype account = {first:string; last:string; age:int; balance:float}\n\n```", "```\n{first=\"John\"; last=\"Doe\"; age=150; balance=0.12}\n\n```", "```\n{balance=0.12; age=150; first=\"John\"; last=\"Doe\"}\n\n```", "```\n# let pers = { last = \"Doe\";\n              age = 150; balance = 0.12;  first = \"John\" };;\n*val pers : account = {first = \"John\"; last = \"Doe\"; age = 150; balance = 0.12}*\n\n```", "```\nlet {first=first; last=last; age=age; balance=balance} = pers\n\n```", "```\n*val first : string = \"John\" val last : string = \"Doe\" val age : int = 150 val balance : float = 0.12*\n\n```", "```\nlet full_name {first=first; last=last; age=age; balance=balance} : string =\n  first ^ \" \" ^ last (* ^ is the string concatenation operator *)\n\n```", "```\ntype mybool = Mytrue | Myfalse\n\n```", "```\ntype bool = true | false\n\n```", "```\ntype day = Sun | Mon | Tue | Wed | Thu | Fri | Sat\n\n```", "```\nlet int_to_day (i : int) : day =\n  if i mod 7 = 0 then Sun else\n  if i mod 7 = 1 then Mon else\n  if i mod 7 = 2 then Tue else\n  if i mod 7 = 3 then Wed else\n  if i mod 7 = 4 then Thu else\n  if i mod 7 = 5 then Fri else Sat\n\n```", "```\nlet int_to_day (i : int) : day =\n   match i mod 7 with\n     0 -> Sun\n   | 1 -> Mon\n   | 2 -> Tue\n   | 3 -> Wed\n   | 4 -> Thu\n   | 5 -> Fri\n   | _ -> Sat\n\n```", "```\nswitch (i % 7) {\n  case 0: return Sun;\n  case 1: return Mon;\n  case 2: return Tue;\n  case 3: return Wed;\n  case 4: return Thu;\n  case 5: return Fri;\n  default: return Sat;\n}\n\n```", "```\nlet day_to_int (d : day) : int =\n   match d with\n     Sun -> 0\n   | Mon -> 1\n   | Tue -> 2\n   | Wed -> 3\n   | Thu -> 4\n   | Fri -> 5\n   | Sat -> 6\n\n```", "```\nmatch *exp1* with\n  true -> *exp2*\n| false -> *exp3*\n\n```", "```\ntype num = Int_num of int | Real_num of float\n\n```", "```\nlet num_to_float (n : num) : float =\n   match n with\n     Int_num i -> float_of_int i\n   | Real_num r -> r\n\n```", "```\nlet max1 (n1, n2) : num =\n  let r1 : float = num_to_float n1 in\n  let r2 : float = num_to_float n2 in\n    if r1 >= r2 then Real_num r1 else Real_num r2\n\n```", "```\nlet max2 (n1, n2) : num =\n  let r1 : float = num_to_float n1 in\n  let r2 : float = num_to_float n2 in\n    Real_num (if r1 >= r2 then r1 else r2)\n\n```", "```\nlet rec max2 (n1, n2) : num =\n  match (n1, n2) with\n     (Real_num r1, Real_num r2) -> Real_num (max r1 r2)\n   | (Int_num i1, Int_num i2) -> Int_num (max i1 i2)\n   | (_, Int_num i2) -> max2 (n1, Real_num (float_of_int i2))\n   | (Int_num i1, _) -> max2 (n2, Real_num (float_of_int i1))\n\n```", "```\nlet rec max3 (n1, n2) : num =\n  match (n1, n2) with\n     (Int_num i1, Int_num i2) -> Int_num (max i1 i2)\n   | (_, Int_num i2) -> max3 (n1, Real_num (float_of_int i2))\n   | (Int_num i1, _) -> max3 (n2, Real_num (float_of_int i1))\n\n```", "```\nlet rec max2 (n1, n2) : num =\n  match(n1, n2) with\n     (Real_num r1, Real_num r2) -> Real_num(max r1 r2)\n   | (Int_num i1, Int_num i2) -> Int_num (max i1 i2)\n   | (_, Int_num i2) -> max2 (n1, Real_num (float_of_int i2))\n   | (Int_num i1, _) -> max2 (n2, Real_num (float_of_int i1))\n   | (_, _) -> n1\n\n```"]