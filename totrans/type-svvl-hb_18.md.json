["```\nshell`npm install -g yarn`\n```", "```\nshell`npm install -g yarn`\n```", "```\nsh`yarn create next-app --example with-typescript random-cat`\n```", "```\nsh`yarn create next-app --example with-typescript random-cat`\n```", "```\nsh`cd random-cat`\n```", "```\nsh`cd random-cat`\n```", "```\ntext`.\u251c\u2500\u2500 components ---- \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u251c\u2500\u2500 interfaces ---- \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u251c\u2500\u2500 node_modules -- \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u251c\u2500\u2500 pages --------- \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u251c\u2500\u2500 utils --------- \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u251c\u2500\u2500 README.md\u251c\u2500\u2500 next-env.d.ts\u251c\u2500\u2500 package.json\u251c\u2500\u2500 tsconfig.json\u2514\u2500\u2500 yarn.lock`\n```", "```\ntext`.\u251c\u2500\u2500 components ---- \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u251c\u2500\u2500 interfaces ---- \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u251c\u2500\u2500 node_modules -- \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u251c\u2500\u2500 pages --------- \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u251c\u2500\u2500 utils --------- \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u251c\u2500\u2500 README.md\u251c\u2500\u2500 next-env.d.ts\u251c\u2500\u2500 package.json\u251c\u2500\u2500 tsconfig.json\u2514\u2500\u2500 yarn.lock`\n```", "```\nsh`yarn dev`\n```", "```\nsh`yarn dev`\n```", "```\nsh`rm -rf pages utils interfaces components`\n```", "```\nsh`rm -rf pages utils interfaces components`\n```", "```\nsh`mkdir pages`\n```", "```\nsh`mkdir pages`\n```", "```\nsh`touch pages/index.tsx`\n```", "```\nsh`touch pages/index.tsx`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";const  <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>:  <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp>  = () => {  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>\u732b\u753b\u50cf\u4e88\u5b9a\u5730</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;};export  default <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>;`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";const <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>: <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> = () => {  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>\u732b\u753b\u50cf\u4e88\u5b9a\u5730</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;};export  default <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>;`\n```", "```\ntsx`import { <data-lsp lsp=\"(alias) interface ReactElement<P = any, T extends string | React.JSXElementConstructor<any> = string | React.JSXElementConstructor<any>>\nimport ReactElement\">ReactElement</data-lsp> } from  \"react\";export  default  function  <data-lsp lsp=\"function IndexPage(): ReactElement<any, any> | null\">IndexPage</data-lsp>():  <data-lsp lsp=\"(alias) interface ReactElement<P = any, T extends string | React.JSXElementConstructor<any> = string | React.JSXElementConstructor<any>>\nimport ReactElement\">ReactElement</data-lsp><any,  any> |  null {  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>\u732b\u753b\u50cf\u4e88\u5b9a\u5730</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;}`\n```", "```\ntsx`import { <data-lsp lsp=\"(alias) interface ReactElement<P = any, T extends string | React.JSXElementConstructor<any> = string | React.JSXElementConstructor<any>>\nimport ReactElement\">ReactElement</data-lsp> } from  \"react\";export  default  function <data-lsp lsp=\"function IndexPage(): ReactElement<any, any> | null\">IndexPage</data-lsp>(): <data-lsp lsp=\"(alias) interface ReactElement<P = any, T extends string | React.JSXElementConstructor<any> = string | React.JSXElementConstructor<any>>\nimport ReactElement\">ReactElement</data-lsp><any,  any> |  null {  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>\u732b\u753b\u50cf\u4e88\u5b9a\u5730</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;}`\n```", "```\nThe Cat API\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b5\u30f3\u30d7\u30ebjson`[ {  \"id\":  \"co9\",  \"url\":  \"https://cdn2.thecatapi.com/images/co9.jpg\",  \"width\":  900,  \"height\":  600 }]`\n```", "```\nThe Cat API\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b5\u30f3\u30d7\u30ebjson`[ {  \"id\":  \"co9\",  \"url\":  \"https://cdn2.thecatapi.com/images/co9.jpg\",  \"width\":  900,  \"height\":  600 }]`\n```", "```\nts`const  <data-lsp lsp=\"const fetchImage: () => Promise<any>\">fetchImage</data-lsp>  =  async () => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await  <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};`\n```", "```\nts`const <data-lsp lsp=\"const fetchImage: () => Promise<any>\">fetchImage</data-lsp> =  async () => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";const  <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>:  <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp>  = () => {  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>\u732b\u753b\u50cf\u4e88\u5b9a\u5730</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;};export  default <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>;const  <data-lsp lsp=\"const fetchImage: () => Promise<any>\">fetchImage</data-lsp>  =  async () => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await  <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};<data-lsp lsp=\"const fetchImage: () => Promise<any>\">fetchImage</data-lsp>(); // \u8ffd\u52a0`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";const <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>: <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> = () => {  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>\u732b\u753b\u50cf\u4e88\u5b9a\u5730</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;};export  default <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>;const <data-lsp lsp=\"const fetchImage: () => Promise<any>\">fetchImage</data-lsp> =  async () => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};<data-lsp lsp=\"const fetchImage: () => Promise<any>\">fetchImage</data-lsp>(); // \u8ffd\u52a0`\n```", "```\nts`const  <data-lsp lsp=\"const fetchImage: () => Promise<any>\" style=\"border-bottom:solid 2px lightgrey\">fetchImage</data-lsp>  =  async () => {` `const fetchImage: () => Promise<any>  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await  <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};<data-lsp lsp=\"const fetchImage: () => Promise<any>\">fetchImage</data-lsp>().<data-lsp lsp=\"(method) Promise<any>.then<void, never>(onfulfilled?: ((value: any) => void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null | undefined): Promise<...>\">then</data-lsp>((<data-lsp lsp=\"(parameter) image: any\" style=\"border-bottom:solid 2px lightgrey\">image</data-lsp>) => {` `(parameter) image: any  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(parameter) image: any\">image</data-lsp>.<data-lsp lsp=\"any\">alt</data-lsp>); // \u5b58\u5728\u3057\u306a\u3044\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53c2\u7167\u3057\u3066\u3044\u308b});`\n\n```", "```\nts`type  <data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>  = { <data-lsp lsp=\"(property) url: string\">url</data-lsp>:  string;};const  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>  =  async ():  <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><<data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>> => {  //                       ^^^^^^^^^^^^^^^^\u578b\u6ce8\u91c8  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await  <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};`\n```", "```\nts`type <data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp> = { <data-lsp lsp=\"(property) url: string\">url</data-lsp>:  string;};const <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp> =  async (): <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><<data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>> => {  //                       ^^^^^^^^^^^^^^^^\u578b\u6ce8\u91c8  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};`\n```", "```\nts`<data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>().<data-lsp lsp=\"(method) Promise<Image>.then<void, never>(onfulfilled?: ((value: Image) => void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null | undefined): Promise<...>\">then</data-lsp>((<data-lsp lsp=\"(parameter) image: Image\" style=\"border-bottom:solid 2px lightgrey\">image</data-lsp>) => {` `(parameter) image: Image  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(parameter) image: Image\">image</data-lsp>.<data-err><data-lsp lsp=\"any\">alt</data-lsp></data-err>); // \u5b58\u5728\u3057\u306a\u3044\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53c2\u7167\u3057\u3066\u3044\u308bProperty 'alt' does not exist on type 'Image'.2339Property 'alt' does not exist on type 'Image'.});`\n\n```", "```\nts`const  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>  =  async ():  <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><<data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>> => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await  <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: unknown\">images</data-lsp>:  unknown  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  // \u914d\u5217\u3068\u3057\u3066\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u304b\uff1f  if (!<data-lsp lsp=\"var Array: ArrayConstructor\">Array</data-lsp>.<data-lsp lsp=\"(method) ArrayConstructor.isArray(arg: any): arg is any[]\">isArray</data-lsp>(<data-lsp lsp=\"const images: unknown\">images</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"\u732b\u306e\u753b\u50cf\u304c\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\"); }  const  <data-lsp lsp=\"const image: unknown\">image</data-lsp>:  unknown  = <data-lsp lsp=\"const images: any[]\">images</data-lsp>[0];  // Image\u306e\u69cb\u9020\u3092\u306a\u3057\u3066\u3044\u308b\u304b\uff1f  if (!<data-lsp lsp=\"const isImage: (value: unknown) => value is Image\">isImage</data-lsp>(<data-lsp lsp=\"const image: unknown\">image</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"\u732b\u306e\u753b\u50cf\u304c\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\"); }  return <data-lsp lsp=\"const image: Image\">image</data-lsp>;};// \u578b\u30ac\u30fc\u30c9\u95a2\u6570const  <data-lsp lsp=\"const isImage: (value: unknown) => value is Image\">isImage</data-lsp>  = (<data-lsp lsp=\"(parameter) value: unknown\">value</data-lsp>:  unknown): <data-lsp lsp=\"(parameter) value: unknown\">value</data-lsp> is  <data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>  => {  // \u5024\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306a\u306e\u304b\uff1f  if (!<data-lsp lsp=\"(parameter) value: unknown\">value</data-lsp> ||  typeof <data-lsp lsp=\"(parameter) value: {}\">value</data-lsp> !==  \"object\") {  return  false; }  // url\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5b58\u5728\u3057\u3001\u304b\u3064\u3001\u305d\u308c\u304c\u6587\u5b57\u5217\u306a\u306e\u304b\uff1f  return  \"url\"  in <data-lsp lsp=\"(parameter) value: object\">value</data-lsp> &&  typeof  <data-lsp lsp=\"(parameter) value: object &amp; Record<&quot;url&quot;, unknown>\">value</data-lsp>.<data-lsp lsp=\"(property) url: unknown\">url</data-lsp> ===  \"string\";};`\n```", "```\nts`const <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp> =  async (): <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><<data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>> => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: unknown\">images</data-lsp>:  unknown  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  // \u914d\u5217\u3068\u3057\u3066\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u304b\uff1f  if (!<data-lsp lsp=\"var Array: ArrayConstructor\">Array</data-lsp>.<data-lsp lsp=\"(method) ArrayConstructor.isArray(arg: any): arg is any[]\">isArray</data-lsp>(<data-lsp lsp=\"const images: unknown\">images</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"\u732b\u306e\u753b\u50cf\u304c\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\"); }  const  <data-lsp lsp=\"const image: unknown\">image</data-lsp>:  unknown  = <data-lsp lsp=\"const images: any[]\">images</data-lsp>[0];  // Image\u306e\u69cb\u9020\u3092\u306a\u3057\u3066\u3044\u308b\u304b\uff1f  if (!<data-lsp lsp=\"const isImage: (value: unknown) => value is Image\">isImage</data-lsp>(<data-lsp lsp=\"const image: unknown\">image</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"\u732b\u306e\u753b\u50cf\u304c\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\"); }  return <data-lsp lsp=\"const image: Image\">image</data-lsp>;};// \u578b\u30ac\u30fc\u30c9\u95a2\u6570const <data-lsp lsp=\"const isImage: (value: unknown) => value is Image\">isImage</data-lsp> = (<data-lsp lsp=\"(parameter) value: unknown\">value</data-lsp>:  unknown): <data-lsp lsp=\"(parameter) value: unknown\">value</data-lsp> is <data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp> => {  // \u5024\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306a\u306e\u304b\uff1f  if (!<data-lsp lsp=\"(parameter) value: unknown\">value</data-lsp> ||  typeof <data-lsp lsp=\"(parameter) value: {}\">value</data-lsp> !==  \"object\") {  return  false; }  // url\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5b58\u5728\u3057\u3001\u304b\u3064\u3001\u305d\u308c\u304c\u6587\u5b57\u5217\u306a\u306e\u304b\uff1f  return  \"url\"  in <data-lsp lsp=\"(parameter) value: object\">value</data-lsp> &&  typeof  <data-lsp lsp=\"(parameter) value: object &amp; Record<&quot;url&quot;, unknown>\">value</data-lsp>.<data-lsp lsp=\"(property) url: unknown\">url</data-lsp> ===  \"string\";};`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";import { <data-lsp lsp=\"(alias) function useEffect(effect: EffectCallback, deps?: DependencyList): void\nimport useEffect\">useEffect</data-lsp>, <data-lsp lsp=\"(alias) function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>] (+1 overload)\nimport useState\">useState</data-lsp> } from  \"react\";const  <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>:  <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp>  = () => {  // \u2776 useState\u3092\u4f7f\u3063\u3066\u72b6\u614b\u3092\u5b9a\u7fa9\u3059\u308b  const [<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>,  <data-lsp lsp=\"const setImageUrl: React.Dispatch<React.SetStateAction<string>>\">setImageUrl</data-lsp>] =  <data-lsp lsp=\"(alias) useState<string>(initialState: string | (() => string)): [string, React.Dispatch<React.SetStateAction<string>>] (+1 overload)\nimport useState\">useState</data-lsp>(\"\");  const [<data-lsp lsp=\"const loading: boolean\">loading</data-lsp>,  <data-lsp lsp=\"const setLoading: React.Dispatch<React.SetStateAction<boolean>>\">setLoading</data-lsp>] =  <data-lsp lsp=\"(alias) useState<boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch<React.SetStateAction<boolean>>] (+1 overload)\nimport useState\">useState</data-lsp>(true);  // \u2777 \u30de\u30a6\u30f3\u30c8\u6642\u306b\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u5ba3\u8a00  <data-lsp lsp=\"(alias) useEffect(effect: React.EffectCallback, deps?: React.DependencyList | undefined): void\nimport useEffect\">useEffect</data-lsp>(() => {  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>().<data-lsp lsp=\"(method) Promise<Image>.then<void, never>(onfulfilled?: ((value: Image) => void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null | undefined): Promise<...>\">then</data-lsp>((<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>) => {  <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>); // \u753b\u50cfURL\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b  <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); // \u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b }); }, []);  // \u2778 \u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u4e2d\u3067\u306a\u3051\u308c\u3070\u3001\u753b\u50cf\u3092\u8868\u793a\u3059\u308b  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>{<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp>  <data-lsp lsp=\"(property) ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} />}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;};export  default <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>;type  <data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>  = { <data-lsp lsp=\"(property) url: string\">url</data-lsp>:  string;};const  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>  =  async ():  <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><<data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>> => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await  <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";import { <data-lsp lsp=\"(alias) function useEffect(effect: EffectCallback, deps?: DependencyList): void\nimport useEffect\">useEffect</data-lsp>, <data-lsp lsp=\"(alias) function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>] (+1 overload)\nimport useState\">useState</data-lsp> } from  \"react\";const <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>: <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> = () => {  // \u2776 useState\u3092\u4f7f\u3063\u3066\u72b6\u614b\u3092\u5b9a\u7fa9\u3059\u308b  const [<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>,  <data-lsp lsp=\"const setImageUrl: React.Dispatch<React.SetStateAction<string>>\">setImageUrl</data-lsp>] = <data-lsp lsp=\"(alias) useState<string>(initialState: string | (() => string)): [string, React.Dispatch<React.SetStateAction<string>>] (+1 overload)\nimport useState\">useState</data-lsp>(\"\");  const [<data-lsp lsp=\"const loading: boolean\">loading</data-lsp>,  <data-lsp lsp=\"const setLoading: React.Dispatch<React.SetStateAction<boolean>>\">setLoading</data-lsp>] = <data-lsp lsp=\"(alias) useState<boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch<React.SetStateAction<boolean>>] (+1 overload)\nimport useState\">useState</data-lsp>(true);  // \u2777 \u30de\u30a6\u30f3\u30c8\u6642\u306b\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u5ba3\u8a00 <data-lsp lsp=\"(alias) useEffect(effect: React.EffectCallback, deps?: React.DependencyList | undefined): void\nimport useEffect\">useEffect</data-lsp>(() => { <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>().<data-lsp lsp=\"(method) Promise<Image>.then<void, never>(onfulfilled?: ((value: Image) => void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null | undefined): Promise<...>\">then</data-lsp>((<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>) => { <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>); // \u753b\u50cfURL\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); // \u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b }); }, []);  // \u2778 \u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u4e2d\u3067\u306a\u3051\u308c\u3070\u3001\u753b\u50cf\u3092\u8868\u793a\u3059\u308b  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>{<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp> <data-lsp lsp=\"(property) ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} />}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;};export  default <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>;type <data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp> = { <data-lsp lsp=\"(property) url: string\">url</data-lsp>:  string;};const <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp> =  async (): <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><<data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>> => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};`\n```", "```\ntsx`const [<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>,  <data-lsp lsp=\"const setImageUrl: React.Dispatch<React.SetStateAction<string>>\">setImageUrl</data-lsp>] =  <data-lsp lsp=\"(alias) useState<string>(initialState: string | (() => string)): [string, React.Dispatch<React.SetStateAction<string>>] (+1 overload)\nimport useState\">useState</data-lsp>(\"\");const [<data-lsp lsp=\"const loading: boolean\">loading</data-lsp>,  <data-lsp lsp=\"const setLoading: React.Dispatch<React.SetStateAction<boolean>>\">setLoading</data-lsp>] =  <data-lsp lsp=\"(alias) useState<boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch<React.SetStateAction<boolean>>] (+1 overload)\nimport useState\">useState</data-lsp>(true);`\n```", "```\ntsx`const [<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>,  <data-lsp lsp=\"const setImageUrl: React.Dispatch<React.SetStateAction<string>>\">setImageUrl</data-lsp>] = <data-lsp lsp=\"(alias) useState<string>(initialState: string | (() => string)): [string, React.Dispatch<React.SetStateAction<string>>] (+1 overload)\nimport useState\">useState</data-lsp>(\"\");const [<data-lsp lsp=\"const loading: boolean\">loading</data-lsp>,  <data-lsp lsp=\"const setLoading: React.Dispatch<React.SetStateAction<boolean>>\">setLoading</data-lsp>] = <data-lsp lsp=\"(alias) useState<boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch<React.SetStateAction<boolean>>] (+1 overload)\nimport useState\">useState</data-lsp>(true);`\n```", "```\ntsx`<data-lsp lsp=\"(alias) useEffect(effect: React.EffectCallback, deps?: React.DependencyList | undefined): void\nimport useEffect\">useEffect</data-lsp>(() => {  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>().<data-lsp lsp=\"(method) Promise<Image>.then<void, never>(onfulfilled?: ((value: Image) => void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null | undefined): Promise<...>\">then</data-lsp>((<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>) => {  <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>); // \u753b\u50cfURL\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b  <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); // \u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b });}, []);`\n```", "```\ntsx`<data-lsp lsp=\"(alias) useEffect(effect: React.EffectCallback, deps?: React.DependencyList | undefined): void\nimport useEffect\">useEffect</data-lsp>(() => { <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>().<data-lsp lsp=\"(method) Promise<Image>.then<void, never>(onfulfilled?: ((value: Image) => void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null | undefined): Promise<...>\">then</data-lsp>((<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>) => { <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>); // \u753b\u50cfURL\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); // \u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b });}, []);`\n```", "```\nts`<data-lsp lsp=\"const useEffect: any\">useEffect</data-lsp>(async () => {  const  <data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>  =  await  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>();  <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>);  <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false);}, []);`\n```", "```\nts`<data-lsp lsp=\"const useEffect: any\">useEffect</data-lsp>(async () => {  const  <data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>  =  await <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>(); <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>); <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false);}, []);`\n```", "```\nts`<data-lsp lsp=\"(alias) useEffect(effect: React.EffectCallback, deps?: React.DependencyList | undefined): void\nimport useEffect\">useEffect</data-lsp>(async () => {Argument of type '() => Promise<void>' is not assignable to parameter of type 'EffectCallback'.\n  Type 'Promise<void>' is not assignable to type 'void | Destructor'.2345Argument of type '() => Promise<void>' is not assignable to parameter of type 'EffectCallback'.\n  Type 'Promise<void>' is not assignable to type 'void | Destructor'.  /* \u4e2d\u7565 */}, []);`\n```", "```\nts`<data-lsp lsp=\"(alias) useEffect(effect: React.EffectCallback, deps?: React.DependencyList | undefined): void\nimport useEffect\">useEffect</data-lsp>(async () => {Argument of type '() => Promise<void>' is not assignable to parameter of type 'EffectCallback'.\n  Type 'Promise<void>' is not assignable to type 'void | Destructor'.2345Argument of type '() => Promise<void>' is not assignable to parameter of type 'EffectCallback'.\n  Type 'Promise<void>' is not assignable to type 'void | Destructor'.  /* \u4e2d\u7565 */}, []);`\n```", "```\ntsx `return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>{<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp>  <data-lsp lsp=\"(property) React.ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} />}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;`\n```", "```\ntsx `return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>{<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp> <data-lsp lsp=\"(property) React.ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} />}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;`\n```", "```\nJSX\u306e\u5f0f\u306b\u306f\u6587\u304c\u4f7f\u3048\u306a\u3044tsx`<<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>{<data-err>if</data-err> (!loading) { <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp> <data-lsp lsp=\"(property) React.ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} /> }<data-err>}</data-err></<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>Expression expected.\nUnexpected token. Did you mean `{'}'}` or `}`?1109\n1381Expression expected.\nUnexpected token. Did you mean `{'}'}` or `}`?`\n```", "```\nJSX\u306e\u5f0f\u306b\u306f\u6587\u304c\u4f7f\u3048\u306a\u3044tsx`<<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>{<data-err>if</data-err> (!loading) { <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp> <data-lsp lsp=\"(property) React.ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} /> }<data-err>}</data-err></<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>Expression expected.\nUnexpected token. Did you mean `{'}'}` or `}`?1109\n1381Expression expected.\nUnexpected token. Did you mean `{'}'}` or `}`?`\n```", "```\ntsx`<<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> {<data-lsp lsp=\"const loaded: boolean\">loaded</data-lsp> && <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp>  <data-lsp lsp=\"(property) React.ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>=\"...\" />} \u2500\u2500 \u8ad6\u7406\u7a4d\u6f14\u7b97\u5b50 {<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp>  <data-lsp lsp=\"(property) React.ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>=\"...\" />} \u2500\u2500 \u8ad6\u7406\u548c\u6f14\u7b97\u5b50 {<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> ?  \"\u8aad\u307f\u8fbc\u307f\u4e2d\"  : <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp>  <data-lsp lsp=\"(property) React.ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>=\"...\" />} \u2500\u2500 \u4e09\u9805\u6f14\u7b97\u5b50</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;`\n```", "```\ntsx`<<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> {<data-lsp lsp=\"const loaded: boolean\">loaded</data-lsp> && <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp> <data-lsp lsp=\"(property) React.ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>=\"...\" />} \u2500\u2500 \u8ad6\u7406\u7a4d\u6f14\u7b97\u5b50 {<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp> <data-lsp lsp=\"(property) React.ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>=\"...\" />} \u2500\u2500 \u8ad6\u7406\u548c\u6f14\u7b97\u5b50 {<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> ?  \"\u8aad\u307f\u8fbc\u307f\u4e2d\"  : <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp> <data-lsp lsp=\"(property) React.ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>=\"...\" />} \u2500\u2500 \u4e09\u9805\u6f14\u7b97\u5b50</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";import { <data-lsp lsp=\"(alias) function useEffect(effect: EffectCallback, deps?: DependencyList): void\nimport useEffect\">useEffect</data-lsp>, <data-lsp lsp=\"(alias) function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>] (+1 overload)\nimport useState\">useState</data-lsp> } from  \"react\";const  <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>:  <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp>  = () => {  const [<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>,  <data-lsp lsp=\"const setImageUrl: React.Dispatch<React.SetStateAction<string>>\">setImageUrl</data-lsp>] =  <data-lsp lsp=\"(alias) useState<string>(initialState: string | (() => string)): [string, React.Dispatch<React.SetStateAction<string>>] (+1 overload)\nimport useState\">useState</data-lsp>(\"\");  const [<data-lsp lsp=\"const loading: boolean\">loading</data-lsp>,  <data-lsp lsp=\"const setLoading: React.Dispatch<React.SetStateAction<boolean>>\">setLoading</data-lsp>] =  <data-lsp lsp=\"(alias) useState<boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch<React.SetStateAction<boolean>>] (+1 overload)\nimport useState\">useState</data-lsp>(true);  <data-lsp lsp=\"(alias) useEffect(effect: React.EffectCallback, deps?: React.DependencyList | undefined): void\nimport useEffect\">useEffect</data-lsp>(() => {  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>().<data-lsp lsp=\"(method) Promise<Image>.then<void, never>(onfulfilled?: ((value: Image) => void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null | undefined): Promise<...>\">then</data-lsp>((<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>) => {  <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>);  <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); }); }, []);  // \u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u51e6\u7406  const  <data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp>  =  async () => {  <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(true); // \u8aad\u8fbc\u4e2d\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b  const  <data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>  =  await  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>();  <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>); // \u753b\u50cfURL\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b  <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); // \u8aad\u8fbc\u4e2d\u30d5\u30e9\u30b0\u3092\u5012\u3059 };  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>  <data-lsp lsp=\"(property) DOMAttributes<HTMLButtonElement>.onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined\">onClick</data-lsp>={<data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp>}>\u4ed6\u306e\u306b\u3083\u3093\u3053\u3082\u898b\u308b</<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>{<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp>  <data-lsp lsp=\"(property) ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} />}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );};export  default <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>;type  <data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>  = { <data-lsp lsp=\"(property) url: string\">url</data-lsp>:  string;};const  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>  =  async ():  <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><<data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>> => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await  <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";import { <data-lsp lsp=\"(alias) function useEffect(effect: EffectCallback, deps?: DependencyList): void\nimport useEffect\">useEffect</data-lsp>, <data-lsp lsp=\"(alias) function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>] (+1 overload)\nimport useState\">useState</data-lsp> } from  \"react\";const <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>: <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> = () => {  const [<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>,  <data-lsp lsp=\"const setImageUrl: React.Dispatch<React.SetStateAction<string>>\">setImageUrl</data-lsp>] = <data-lsp lsp=\"(alias) useState<string>(initialState: string | (() => string)): [string, React.Dispatch<React.SetStateAction<string>>] (+1 overload)\nimport useState\">useState</data-lsp>(\"\");  const [<data-lsp lsp=\"const loading: boolean\">loading</data-lsp>,  <data-lsp lsp=\"const setLoading: React.Dispatch<React.SetStateAction<boolean>>\">setLoading</data-lsp>] = <data-lsp lsp=\"(alias) useState<boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch<React.SetStateAction<boolean>>] (+1 overload)\nimport useState\">useState</data-lsp>(true); <data-lsp lsp=\"(alias) useEffect(effect: React.EffectCallback, deps?: React.DependencyList | undefined): void\nimport useEffect\">useEffect</data-lsp>(() => { <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>().<data-lsp lsp=\"(method) Promise<Image>.then<void, never>(onfulfilled?: ((value: Image) => void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null | undefined): Promise<...>\">then</data-lsp>((<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>) => { <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"(parameter) newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>); <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); }); }, []);  // \u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u51e6\u7406  const <data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp> =  async () => { <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(true); // \u8aad\u8fbc\u4e2d\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b  const  <data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>  =  await <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>(); <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>); // \u753b\u50cfURL\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); // \u8aad\u8fbc\u4e2d\u30d5\u30e9\u30b0\u3092\u5012\u3059 };  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp> <data-lsp lsp=\"(property) DOMAttributes<HTMLButtonElement>.onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined\">onClick</data-lsp>={<data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp>}>\u4ed6\u306e\u306b\u3083\u3093\u3053\u3082\u898b\u308b</<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>{<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp> <data-lsp lsp=\"(property) ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} />}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );};export  default <data-lsp lsp=\"const IndexPage: NextPage\">IndexPage</data-lsp>;type <data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp> = { <data-lsp lsp=\"(property) url: string\">url</data-lsp>:  string;};const <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp> =  async (): <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><<data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>> => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type GetServerSideProps<P extends { [key: string]: any; } = { [key: string]: any; }, Q extends ParsedUrlQuery = ParsedUrlQuery, D extends PreviewData = PreviewData> = (context: GetServerSidePropsContext<Q, D>) => Promise<GetServerSidePropsResult<P>>\nimport GetServerSideProps\">GetServerSideProps</data-lsp>, <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";import { <data-lsp lsp=\"(alias) function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>] (+1 overload)\nimport useState\">useState</data-lsp> } from  \"react\";// getServerSideProps\u304b\u3089\u6e21\u3055\u308c\u308bprops\u306e\u578btype  <data-lsp lsp=\"type Props = {\n    initialImageUrl: string;\n}\">Props</data-lsp>  = { <data-lsp lsp=\"(property) initialImageUrl: string\">initialImageUrl</data-lsp>:  string;};// \u30da\u30fc\u30b8\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u95a2\u6570\u306bprops\u3092\u53d7\u3051\u53d6\u308b\u5f15\u6570\u3092\u8ffd\u52a0\u3059\u308bconst  <data-lsp lsp=\"const IndexPage: NextPage<Props>\">IndexPage</data-lsp>:  <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp><<data-lsp lsp=\"type Props = {\n    initialImageUrl: string;\n}\">Props</data-lsp>> = ({ <data-lsp lsp=\"(parameter) initialImageUrl: string\">initialImageUrl</data-lsp> }) => {  const [<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>,  <data-lsp lsp=\"const setImageUrl: React.Dispatch<React.SetStateAction<string>>\">setImageUrl</data-lsp>] =  <data-lsp lsp=\"(alias) useState<string>(initialState: string | (() => string)): [string, React.Dispatch<React.SetStateAction<string>>] (+1 overload)\nimport useState\">useState</data-lsp>(<data-lsp lsp=\"(parameter) initialImageUrl: string\">initialImageUrl</data-lsp>); // \u521d\u671f\u5024\u3092\u6e21\u3059  const [<data-lsp lsp=\"const loading: boolean\">loading</data-lsp>,  <data-lsp lsp=\"const setLoading: React.Dispatch<React.SetStateAction<boolean>>\">setLoading</data-lsp>] =  <data-lsp lsp=\"(alias) useState<boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch<React.SetStateAction<boolean>>] (+1 overload)\nimport useState\">useState</data-lsp>(false); // \u521d\u671f\u72b6\u614b\u306ffalse\u306b\u3057\u3066\u304a\u304f  // useEffect(() => {  //   fetchImage().then((newImage) => {  //     setImageUrl(newImage.url);  //     setLoading(false);  //   });  // }, []);  const  <data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp>  =  async () => {  <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(true);  const  <data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>  =  await  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>();  <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>);  <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); };  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>  <data-lsp lsp=\"(property) DOMAttributes<HTMLButtonElement>.onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined\">onClick</data-lsp>={<data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp>}>\u4ed6\u306e\u306b\u3083\u3093\u3053\u3082\u898b\u308b</<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>{<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp>  <data-lsp lsp=\"(property) ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} />}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );};export  default <data-lsp lsp=\"const IndexPage: NextPage<Props>\">IndexPage</data-lsp>;// \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u5b9f\u884c\u3059\u308b\u51e6\u7406export  const  <data-lsp lsp=\"const getServerSideProps: GetServerSideProps<Props>\">getServerSideProps</data-lsp>:  <data-lsp lsp=\"(alias) type GetServerSideProps<P extends { [key: string]: any; } = { [key: string]: any; }, Q extends ParsedUrlQuery = ParsedUrlQuery, D extends PreviewData = PreviewData> = (context: GetServerSidePropsContext<Q, D>) => Promise<GetServerSidePropsResult<P>>\nimport GetServerSideProps\">GetServerSideProps</data-lsp><<data-lsp lsp=\"type Props = {\n    initialImageUrl: string;\n}\">Props</data-lsp>> =  async () => {  const  <data-lsp lsp=\"const image: Image\">image</data-lsp>  =  await  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>();  return { <data-lsp lsp=\"(property) props: Props | Promise<Props>\">props</data-lsp>: { <data-lsp lsp=\"(property) initialImageUrl: string\">initialImageUrl</data-lsp>:  <data-lsp lsp=\"const image: Image\">image</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>, }, };};type  <data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>  = { <data-lsp lsp=\"(property) url: string\">url</data-lsp>:  string;};const  <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>  =  async ():  <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><<data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>> => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await  <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type GetServerSideProps<P extends { [key: string]: any; } = { [key: string]: any; }, Q extends ParsedUrlQuery = ParsedUrlQuery, D extends PreviewData = PreviewData> = (context: GetServerSidePropsContext<Q, D>) => Promise<GetServerSidePropsResult<P>>\nimport GetServerSideProps\">GetServerSideProps</data-lsp>, <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";import { <data-lsp lsp=\"(alias) function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>] (+1 overload)\nimport useState\">useState</data-lsp> } from  \"react\";// getServerSideProps\u304b\u3089\u6e21\u3055\u308c\u308bprops\u306e\u578btype <data-lsp lsp=\"type Props = {\n    initialImageUrl: string;\n}\">Props</data-lsp> = { <data-lsp lsp=\"(property) initialImageUrl: string\">initialImageUrl</data-lsp>:  string;};// \u30da\u30fc\u30b8\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u95a2\u6570\u306bprops\u3092\u53d7\u3051\u53d6\u308b\u5f15\u6570\u3092\u8ffd\u52a0\u3059\u308bconst <data-lsp lsp=\"const IndexPage: NextPage<Props>\">IndexPage</data-lsp>: <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp><<data-lsp lsp=\"type Props = {\n    initialImageUrl: string;\n}\">Props</data-lsp>> = ({ <data-lsp lsp=\"(parameter) initialImageUrl: string\">initialImageUrl</data-lsp> }) => {  const [<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>,  <data-lsp lsp=\"const setImageUrl: React.Dispatch<React.SetStateAction<string>>\">setImageUrl</data-lsp>] = <data-lsp lsp=\"(alias) useState<string>(initialState: string | (() => string)): [string, React.Dispatch<React.SetStateAction<string>>] (+1 overload)\nimport useState\">useState</data-lsp>(<data-lsp lsp=\"(parameter) initialImageUrl: string\">initialImageUrl</data-lsp>); // \u521d\u671f\u5024\u3092\u6e21\u3059  const [<data-lsp lsp=\"const loading: boolean\">loading</data-lsp>,  <data-lsp lsp=\"const setLoading: React.Dispatch<React.SetStateAction<boolean>>\">setLoading</data-lsp>] = <data-lsp lsp=\"(alias) useState<boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch<React.SetStateAction<boolean>>] (+1 overload)\nimport useState\">useState</data-lsp>(false); // \u521d\u671f\u72b6\u614b\u306ffalse\u306b\u3057\u3066\u304a\u304f  // useEffect(() => {  //   fetchImage().then((newImage) => {  //     setImageUrl(newImage.url);  //     setLoading(false);  //   });  // }, []);  const <data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp> =  async () => { <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(true);  const  <data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>  =  await <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>(); <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>); <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); };  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp> <data-lsp lsp=\"(property) DOMAttributes<HTMLButtonElement>.onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined\">onClick</data-lsp>={<data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp>}>\u4ed6\u306e\u306b\u3083\u3093\u3053\u3082\u898b\u308b</<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>{<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp> <data-lsp lsp=\"(property) ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} />}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );};export  default <data-lsp lsp=\"const IndexPage: NextPage<Props>\">IndexPage</data-lsp>;// \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u5b9f\u884c\u3059\u308b\u51e6\u7406export  const <data-lsp lsp=\"const getServerSideProps: GetServerSideProps<Props>\">getServerSideProps</data-lsp>: <data-lsp lsp=\"(alias) type GetServerSideProps<P extends { [key: string]: any; } = { [key: string]: any; }, Q extends ParsedUrlQuery = ParsedUrlQuery, D extends PreviewData = PreviewData> = (context: GetServerSidePropsContext<Q, D>) => Promise<GetServerSidePropsResult<P>>\nimport GetServerSideProps\">GetServerSideProps</data-lsp><<data-lsp lsp=\"type Props = {\n    initialImageUrl: string;\n}\">Props</data-lsp>> =  async () => {  const  <data-lsp lsp=\"const image: Image\">image</data-lsp>  =  await <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp>();  return { <data-lsp lsp=\"(property) props: Props | Promise<Props>\">props</data-lsp>: { <data-lsp lsp=\"(property) initialImageUrl: string\">initialImageUrl</data-lsp>:  <data-lsp lsp=\"const image: Image\">image</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>, }, };};type <data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp> = { <data-lsp lsp=\"(property) url: string\">url</data-lsp>:  string;};const <data-lsp lsp=\"const fetchImage: () => Promise<Image>\">fetchImage</data-lsp> =  async (): <data-lsp lsp=\"interface Promise<T>\">Promise</data-lsp><<data-lsp lsp=\"type Image = {\n    url: string;\n}\">Image</data-lsp>> => {  const  <data-lsp lsp=\"const res: Response\">res</data-lsp>  =  await <data-lsp lsp=\"function fetch(input: RequestInfo | URL, init?: RequestInit | undefined): Promise<Response>\">fetch</data-lsp>(\"https://api.thecatapi.com/v1/images/search\");  const  <data-lsp lsp=\"const images: any\">images</data-lsp>  =  await  <data-lsp lsp=\"const res: Response\">res</data-lsp>.<data-lsp lsp=\"(method) Body.json(): Promise<any>\">json</data-lsp>();  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const images: any\">images</data-lsp>);  return <data-lsp lsp=\"const images: any\">images</data-lsp>[0];};`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type GetServerSideProps<P extends { [key: string]: any; } = { [key: string]: any; }, Q extends ParsedUrlQuery = ParsedUrlQuery, D extends PreviewData = PreviewData> = (context: GetServerSidePropsContext<Q, D>) => Promise<GetServerSidePropsResult<P>>\nimport GetServerSideProps\">GetServerSideProps</data-lsp>, <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";import { <data-lsp lsp=\"(alias) function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>] (+1 overload)\nimport useState\">useState</data-lsp> } from  \"react\";import <data-lsp lsp=\"(alias) const styles: {\n    readonly [key: string]: string;\n}\nimport styles\">styles</data-lsp> from  \"./index.module.css\";const  <data-lsp lsp=\"const IndexPage: NextPage<Props>\">IndexPage</data-lsp>:  <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp><<data-lsp lsp=\"type Props = {\n    initialImageUrl: string;\n}\">Props</data-lsp>> = ({ <data-lsp lsp=\"(parameter) initialImageUrl: string\">initialImageUrl</data-lsp> }) => {  // \u4e2d\u7565  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>  <data-lsp lsp=\"(property) HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"(alias) const styles: {\n    readonly [key: string]: string;\n}\nimport styles\">styles</data-lsp>.<data-lsp lsp=\"(index) classes[string]: string\">page</data-lsp>}> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>  <data-lsp lsp=\"(property) DOMAttributes<HTMLButtonElement>.onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined\">onClick</data-lsp>={<data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp>} <data-lsp lsp=\"(property) HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"(alias) const styles: {\n    readonly [key: string]: string;\n}\nimport styles\">styles</data-lsp>.<data-lsp lsp=\"(index) classes[string]: string\">button</data-lsp>}> \u4ed6\u306e\u306b\u3083\u3093\u3053\u3082\u898b\u308b </<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>  <data-lsp lsp=\"(property) HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"(alias) const styles: {\n    readonly [key: string]: string;\n}\nimport styles\">styles</data-lsp>.<data-lsp lsp=\"(index) classes[string]: string\">frame</data-lsp>}> {<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp>  <data-lsp lsp=\"(property) ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} <data-lsp lsp=\"(property) HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"(alias) const styles: {\n    readonly [key: string]: string;\n}\nimport styles\">styles</data-lsp>.<data-lsp lsp=\"(index) classes[string]: string\">img</data-lsp>} />} </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );};// \u4ee5\u4e0b\u7565`\n```", "```\npages/index.tsxtsx`import { <data-lsp lsp=\"(alias) type GetServerSideProps<P extends { [key: string]: any; } = { [key: string]: any; }, Q extends ParsedUrlQuery = ParsedUrlQuery, D extends PreviewData = PreviewData> = (context: GetServerSidePropsContext<Q, D>) => Promise<GetServerSidePropsResult<P>>\nimport GetServerSideProps\">GetServerSideProps</data-lsp>, <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp> } from  \"next\";import { <data-lsp lsp=\"(alias) function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>] (+1 overload)\nimport useState\">useState</data-lsp> } from  \"react\";import <data-lsp lsp=\"(alias) const styles: {\n    readonly [key: string]: string;\n}\nimport styles\">styles</data-lsp> from  \"./index.module.css\";const <data-lsp lsp=\"const IndexPage: NextPage<Props>\">IndexPage</data-lsp>: <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp><<data-lsp lsp=\"type Props = {\n    initialImageUrl: string;\n}\">Props</data-lsp>> = ({ <data-lsp lsp=\"(parameter) initialImageUrl: string\">initialImageUrl</data-lsp> }) => {  // \u4e2d\u7565  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp> <data-lsp lsp=\"(property) HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"(alias) const styles: {\n    readonly [key: string]: string;\n}\nimport styles\">styles</data-lsp>.<data-lsp lsp=\"(index) classes[string]: string\">page</data-lsp>}> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp> <data-lsp lsp=\"(property) DOMAttributes<HTMLButtonElement>.onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined\">onClick</data-lsp>={<data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp>} <data-lsp lsp=\"(property) HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"(alias) const styles: {\n    readonly [key: string]: string;\n}\nimport styles\">styles</data-lsp>.<data-lsp lsp=\"(index) classes[string]: string\">button</data-lsp>}> \u4ed6\u306e\u306b\u3083\u3093\u3053\u3082\u898b\u308b </<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp> <data-lsp lsp=\"(property) HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"(alias) const styles: {\n    readonly [key: string]: string;\n}\nimport styles\">styles</data-lsp>.<data-lsp lsp=\"(index) classes[string]: string\">frame</data-lsp>}> {<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp> <data-lsp lsp=\"(property) ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} <data-lsp lsp=\"(property) HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"(alias) const styles: {\n    readonly [key: string]: string;\n}\nimport styles\">styles</data-lsp>.<data-lsp lsp=\"(index) classes[string]: string\">img</data-lsp>} />} </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );};// \u4ee5\u4e0b\u7565`\n```", "```\nsh`yarn build && yarn start`\n```", "```\nsh`yarn build && yarn start`\n```", "```\n\n```", "```\n\n```"]