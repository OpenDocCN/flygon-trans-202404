- en: Reactでいいねボタンを作ろう
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/tutorials/react-like-button-tutorial](https://typescriptbook.jp/tutorials/react-like-button-tutorial)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: このチュートリアルでは、TypeScriptとReactの両方を用いて、SNSでよく見かける「いいねボタン」のUIを実装します。
  prefs: []
  type: TYPE_NORMAL
- en: 本チュートリアルは、TypeScriptとReactによるコーディングの体験をすることを主眼に置いています。そのため、TSとReactの理論的な説明は省きます。「TypeScriptとReactでUIを開発するにはどのような流れになるのか」を感じ取って頂くことを目的としています。
  prefs: []
  type: TYPE_NORMAL
- en: Reactの専門書と比べて、本書の解説は詳しさや正確さは劣ります。それでも、初めてReactに触れる方でも読み進められるよう、Reactについて随時ワンポイント解説をしていくので、安心してお読みください。
  prefs: []
  type: TYPE_NORMAL
- en: このチュートリアルで作成するいいねボタンの最終的な成果物は[デモサイト](https://like-button.typescriptbook.jp)で確認できます。チュートリアルを開始する前に事前に触ってみることで、各ステップでどんな実装をしているかのイメージが掴みやすくなります。また、完成形のソースコードは[GitHub](https://github.com/yytypescript/like-button)で確認することができます。
  prefs: []
  type: TYPE_NORMAL
- en: Reactとは？[​](#reactとは "Reactとは？ への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ReactはFacebook社が開発した、ウェブアプリケーションのUIを作るためのパッケージです。JavaScriptやTypeScriptだけでもインタラクティブなUIは実装できます。しかし、UIが複雑になるとReactなしではコードの記述量が増大したり、可読性が悪くなったりと難易度が上がります。なんといっても、UIが今どのような状態なのかを管理するのは、プログラマが把握しきれない複雑さになることがあります。Reactを使うと、複雑なUIやインタラクションを短く簡潔に読みやすく書けるようになり、状態の管理も分かりやすくなります。
  prefs: []
  type: TYPE_NORMAL
- en: Reactの3大特徴[​](#reactの3大特徴 "Reactの3大特徴 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reactはどのような特徴を持ったパッケージなのでしょうか？ここではReactの特徴を3つに分けて説明します。Reactについて多少の予備知識を得たい方は、このセクションをお読みください。今すぐコードを書きたいという方は、ここは読み飛ばしても問題ありません。
  prefs: []
  type: TYPE_NORMAL
- en: '特徴その1: 仮想DOM[​](#特徴その1-仮想dom "特徴その1: 仮想DOM への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reactは仮想DOM(virtual DOM)という考えを採用しています。仮想DOMを理解するには、仮想ではない普通のDOMが何かを知る必要があります。DOM(document
    object model)とは、HTMLをJavaScriptから参照・操作する仕組みです。これのおかげで、HTMLを文字列操作ではなく、オブジェクトとして処理できます。DOMはHTMLを操作するためのAPIのようなものです。
  prefs: []
  type: TYPE_NORMAL
- en: プログラマがDOMを操作すると、間接的にHTMLが書き換えられ、その結果が画面に描画されます。多くの動的なUIはDOM操作で成り立っています。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: DOMは必ずしもプログラマにとって使いやすいAPIではありません。上の例のようなスタイルを少し変更するくらいなら実用的です。しかし、複雑なUIを作ろうとすると途端に難しくなります。注意深く実装しないと、表示や状態の変更し忘れといったバグを生みやすくなります。操作の方法が悪くパフォーマンス面で問題が出たりします。
  prefs: []
  type: TYPE_NORMAL
- en: 仮想DOMはリアルDOMのプロキシのようなものです。リアルDOMと比べて、状態管理上のバグを起こしにくい設計になっています。加えて、パフォーマンス面では描画処理の最適化もします。プログラマにとっては、リアルDOMを扱うときのような慎重さが不要になります。画面表示を変えたければ、仮想DOMを操作します。仮想DOMに起こった変更はリアルDOMに伝わり、画面に現れてきます。仮想DOMは、複雑なUIを苦労せずに実装するための仕組みと言えます。
  prefs: []
  type: TYPE_NORMAL
- en: '特徴その2: 宣言的UI[​](#特徴その2-宣言的ui "特徴その2: 宣言的UI への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reactの2つ目の特徴はUIを宣言的に書ける点です。Reactを使わずにUIを実装すると、命令的なコードになります。命令的なコードでは、何かを表示したい場合でもどのように表示するかのhowの部分を細かく書く必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: 次の簡単なHTMLのリストを表示するために、命令的なコードと宣言的なコードで書き方がどう違うかを見ていきましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: まず、命令的なコードでは、次のようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: この処理を日本語に書き下すと、次のようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '`ul`要素を作り、変数`list`に代入する'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`li`要素を作り、変数`apple`に代入する'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`apple`のテキストは「リンゴ」にする'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list`に`apple`を追加する'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`li`要素を作り、変数`orange`に代入する'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orange`のテキストは「オレンジ」にする'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list`に`orange`を追加する'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3つの果物のリストのような簡単なUIでも、どのように作ったらいいかを細かく記述しなければなりません。これを見るだけでも、UIを命令的に書くのは大変で、保守していくことも考えると望ましい書き方には思えないのではないでしょうか。
  prefs: []
  type: TYPE_NORMAL
- en: 今度は宣言的な書き方を見てみましょう。次はReactでの書き方です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 見てのとおり、どのように表示するかの部分はなく、「このような表示になってほしい」という目標だけが書かれています。
  prefs: []
  type: TYPE_NORMAL
- en: 宣言的UIでは、実装の細部やアルゴリズムを気にしなくてよいです。「どんなUIにしたいか」の一点に集中してコードを書けるようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '特徴その3: コンポーネントベース[​](#特徴その3-コンポーネントベース "特徴その3: コンポーネントベース への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reactの3つ目の特徴は、コンポーネントベースです。コンポーネントというのはUIの部品のことです。たとえば、小さいもので言えばボタンや入力欄、より大きめの部品だとフォーム、さらに大きい部品ではページもコンポーネントです。
  prefs: []
  type: TYPE_NORMAL
- en: Reactには、小さいコンポーネントを組み合わせ、大きなアプリケーションを成すという思想があります。ここがReactがコンポーネントベースと言われるゆえんです。
  prefs: []
  type: TYPE_NORMAL
- en: コンポーネントベースのメリットは、同じコンポーネントを再利用できる点です。たとえば、ボタンコンポーネントを1つ作っておけば、それをアプリケーションの至るところで使い回せます。プログラマは同じコードを何度も書かなくて済み、開発効率が良くなります。
  prefs: []
  type: TYPE_NORMAL
- en: 加えて、オープンソースのコンポーネントも数多く公開されています。プログラマは自分でゼロからコンポーネントを作らなくても、公開されているコンポーネントを利用することもできます。カレンダーUIのような自力で作ると面倒なコンポーネントも種類豊富に公開されているので、開発者はオープンソースのコンポーネントを使うとより手軽にアプリケーションが作れます。
  prefs: []
  type: TYPE_NORMAL
- en: このチュートリアルに必要なもの[​](#このチュートリアルに必要なもの "このチュートリアルに必要なもの への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: このチュートリアルをやるに当たって、必要なツールがあります。それらはここにリストアップしておくのであらかじめ用意しておいてください。
  prefs: []
  type: TYPE_NORMAL
- en: Node.js (このチュートリアルではv18.15.0で動作確認しています)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yarn v1系 (このチュートリアルはv1.22.19で動作確認しています)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VS CodeやWebStormなどのエディター
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yarnのインストール[​](#yarnのインストール "Yarnのインストール への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: チュートリアルではパッケージ管理ツールとして Yarn を利用しているので、最初にインストールをしておきます。
  prefs: []
  type: TYPE_NORMAL
- en: すでにインストール済みの方はここのステップはスキップして大丈夫です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: プロジェクトを作る[​](#プロジェクトを作る "プロジェクトを作る への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: まず、`yarn create`コマンドでReactプロジェクトのひながたを生成します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 1分ほどするとひながたの生成が完了します。like-buttonディレクトリが生成されるので、次のコマンドを実行してそのディレクトリに移動すると、ひながたが生成されているのが分かります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`yarn create react-app`ではReactのインストールも自動で行われます。インストールされたReactのバージョンを確認するには次のコマンドを用います。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: このディレクトリにて`yarn start`を実行すると、Reactのローカル開発サーバーが起動します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 開発サーバーが起動すると自動的にブラウザが開かれ、ひながたアプリの様子が確認できます。ブラウザが起動しない場合は、ターミナルに表示されているURLをブラウザで開いてください。
  prefs: []
  type: TYPE_NORMAL
- en: '![ひながた初期状態の画面](../Images/940efb79352dea6bd89223ae243ee499.png)'
  prefs: []
  type: TYPE_IMG
- en: Reactのローカル開発サーバーを停止する場合は、Ctrl + Cキーを押してください。
  prefs: []
  type: TYPE_NORMAL
- en: CtrlキーとCキーを同時に押すと、コマンドを中断することができます。
  prefs: []
  type: TYPE_NORMAL
- en: ここからは実際にコードを書いて行きますので、生成したlike-buttonプロジェクトをお好みのエディターで開いてください。
  prefs: []
  type: TYPE_NORMAL
- en: ひながた初期状態の上のページはsrc/App.tsxの内容が描画されています。ためしに、src/App.tsxを変更してみましょう。App.tsxの`<header>`要素の中身を消して、「TypeScriptはいいぞ」に書き換えてみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'ワンポイント解説: .tsxって何？TypeScriptの中にHTMLが書ける？'
  prefs: []
  type: TYPE_NORMAL
- en: App.tsxを見てこのような疑問を持ったのではないでしょうか。このHTMLに見える部分はJSXと言われるものです。JSXはJavaScriptを拡張した言語で、JavaScriptの中にXMLを直接書けるようにしたものです。XMLとHTMLは厳密には異なりますが、ここでは同じものと考えてください。
  prefs: []
  type: TYPE_NORMAL
- en: UIを実装しようとするとHTMLと密接に関わるコードを書くことになりますが、JavaScriptの構文だけでHTMLを表現しようとすると、可読性が低くなりがちです。ReactではJSXを採用することで可読性の問題を解決しました。JSXは、HTMLをほぼありのままに書けるので、可読性の高いコードになります。
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptとJSXは本来無関係の言語ですが、開発者の利便性のために、TypeScriptでもJSXが書けるようになっています。
  prefs: []
  type: TYPE_NORMAL
- en: JSXを書いたJavaScriptファイルは拡張子を.jsxにします。同様にTypeScriptファイルは.tsxにします。
  prefs: []
  type: TYPE_NORMAL
- en: '[## 📄️ JSX'
  prefs: []
  type: TYPE_NORMAL
- en: JSX（JavaScript XML）は、コンポーネント指向のJavaScriptライブラリやフレームワーク（特にReact）で一般的に採用されている、JavaScriptの拡張構文です。JSXを用いると、JavaScriptのコード内にHTMLタグのような構文が埋め込み可能となり、より直感的かつ読みやすい形でUIのコードを表現することができます。それによって、開発者のコーディング体験や開発、デバッグの効率が上がります。](/reference/jsx)
  prefs: []
  type: TYPE_NORMAL
- en: 書き換えたらファイルを保存し、ブラウザで確認してみてください。ブラウザに書いた文言が表示されていればOKです。
  prefs: []
  type: TYPE_NORMAL
- en: '![変更が反映された状態](../Images/94f8dd4f32d77c29facc5c3e6bab0de8.png)'
  prefs: []
  type: TYPE_IMG
- en: ボタンを作る場所を用意する[​](#ボタンを作る場所を用意する "ボタンを作る場所を用意する への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここからは、いいねボタンを実際に作っていきます。まずは、いいねボタンを実装する場所を作ります。
  prefs: []
  type: TYPE_NORMAL
- en: まず、先ほど「TypeScriptはいいぞ」と書いたところを`<LikeButton />`に変えます。次に、`LikeButton`関数を作ります。次のコードのようになるようにしてください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: この`LikeButton`関数が、これからいいねボタンを作っていく場所になります。
  prefs: []
  type: TYPE_NORMAL
- en: 'ワンポイント解説: 関数コンポーネント'
  prefs: []
  type: TYPE_NORMAL
- en: ReactのJSXでは、HTMLタグの`div`や`header`が使えるだけでなく、自分で定義した関数もタグとして使うことができます。上で定義した`LikeButton`関数はその一例です。JSXを戻り値として返す関数だけがタグとして使えます。上の例では、`span`タグが戻り値になっているのがわかると思います。
  prefs: []
  type: TYPE_NORMAL
- en: JSXを戻り値にする関数をReact用語で「関数コンポーネント」と言います。Reactを使ったフロントエンドアプリケーション開発では、関数コンポーネントをうまく使うことがポイントになります。画面の部品をコンポーネントにしておくと、再利用できたり変更が一箇所で済んだりと、開発や保守がしやすくなります。
  prefs: []
  type: TYPE_NORMAL
- en: 'ワンポイント解説: JSXのセルフクロージング要素'
  prefs: []
  type: TYPE_NORMAL
- en: 先ほども書いたように、JSXはJavaScriptの拡張構文であり、厳密にはHTMLと異なるものです。そのため、JSXにはHTMLとは異なる書き方や制約があります。
  prefs: []
  type: TYPE_NORMAL
- en: '`<LikeButton />`のようにスラッシュをタグに含める書き方も、JSXならではの書き方です。これはセルフクロージング要素(self-closing
    element)と呼ばれます。自己閉じ要素、自己完結型要素と呼ばれることもあります。`<LikeButton></LikeButton>`のように子要素などを持たない場合に、`<LikeButton
    />`のように末尾に`/`をつけることで、短く表現できる書き方です。'
  prefs: []
  type: TYPE_NORMAL
- en: JSXとHTMLのその他の違いについては、[Reactの公式ドキュメント](https://beta.reactjs.org/learn/writing-markup-with-jsx)を参照してください。
  prefs: []
  type: TYPE_NORMAL
- en: ボタンのビジュアルを作り込む[​](#ボタンのビジュアルを作り込む "ボタンのビジュアルを作り込む への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: いいねボタンの実装場所が確保できたので、ここではボタンのタグを変更したり、CSSを書いたりして、ボタンの見た目を作っていきます。今回作るボタンは次の図のようなシンプルなものです。
  prefs: []
  type: TYPE_NORMAL
- en: '![今回実装するいいねボタン](../Images/d2610e9c2efbb429994f738d6726922e.png)'
  prefs: []
  type: TYPE_IMG
- en: まずは、`LikeButton`関数の`span`タグのテキストを`♥ {count}`にします。この`count`は変数なので、その変数も一緒に定義します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`count`変数は固定値になっていますが、あとでクリックしたときに増減するように変えるので今はこれで構いません。JSX内では`{}`で囲まれた部分には、JavaScriptの変数や式が書けます。上の例は変数名だけですが、`{count
    + 1}`のような式も有効です。'
  prefs: []
  type: TYPE_NORMAL
- en: 次に、CSSのクラスを割り当てるために、`span`タグに`className`属性を追加します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'ワンポイント解説: class属性は使わない？'
  prefs: []
  type: TYPE_NORMAL
- en: HTMLではCSSクラスを指定するのに`class`属性を用いるので、ここで`className`属性にしていることに驚いたのではないでしょうか。これは初期のReactがDOMプロパティに直接値をセットしていた名残りです。DOMでは、HTMLの`class`属性が`className`プロパティになります。現在は、ReactがDOMプロパティを直接セットすることがなくなったので、`className`属性に縛られる技術的理由はないのですが、React開発陣は`class`属性への乗り換えは慎重のようです。これまで作られたコンポーネントが動かなくなるかも知れないからです。また、両方サポートする気もないようです。`class`と`className`のどちらもOKとなると混乱を招くからです。
  prefs: []
  type: TYPE_NORMAL
- en: 続いて、`likeButton`クラスのCSSを書いていきます。Reactではスタイルシートを実装するのにいくつか方法がありますが、ここではApp.cssにCSSを書く方法にします。次のCSSをApp.cssの最後に追加してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: App.cssに上の内容を書いたら、ブラウザで確認してみましょう。スタイルが効いていれば、次の図のような表示になっているはずです。
  prefs: []
  type: TYPE_NORMAL
- en: '![スタイルが効いている様子](../Images/7ace47743e005ab71f89502abd4dda86.png)'
  prefs: []
  type: TYPE_IMG
- en: トラブルシューティング
  prefs: []
  type: TYPE_NORMAL
- en: App.cssはApp.tsxで`import`しているので特に何もしなくても`LikeButton`コンポーネントのスタイルに反映されます。もし、スタイルが反映されていないようなら、App.tsxにApp.cssを`import`するコードがあるか確認してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: ここまでで、ボタンのビジュアルの作り込みは一旦完了です。
  prefs: []
  type: TYPE_NORMAL
- en: ボタンに機能をつける[​](#ボタンに機能をつける "ボタンに機能をつける への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: このままでは、ボタンを押しても何も起きません。ここからは、ボタンを押したときに999がひとつ増えて1,000にカウントアップされる機能を作っていきます。
  prefs: []
  type: TYPE_NORMAL
- en: 現状のボタンは`count`変数を表示していますが、この変数は固定値になっています。この値が変動できるように、Reactの`useState`関数を使い、カウント数の状態をReactに管理させるようにします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: この`useState`は関数コンポーネントに状態を持たせるためのReactの機能です。`useState`の戻り値を`count`と`setCount`の2つの変数に代入しています。`count`には`999`のような値が代入され、`setCount`には`count`の値を変更する関数が代入されます。
  prefs: []
  type: TYPE_NORMAL
- en: 次に、`span`要素をクリックしたときに、`count`の値を増加する`handleClick`関数を実装します。この関数では、現在の`count`の値に1を足した値を`setCount`関数に渡すようにします。そして、`span`要素の`onClick`属性に`handleClick`関数を渡します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: これで、ボタンをクリックしたらいいねの数が増えるようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3f2758c6c550d7cc86dcba3eeea9ccb.png)'
  prefs: []
  type: TYPE_IMG
- en: 以上でTypeScriptで作るReactいいねボタンは完成です。
  prefs: []
  type: TYPE_NORMAL
