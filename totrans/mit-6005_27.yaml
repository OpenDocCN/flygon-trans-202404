- en: 'Reading 27: Team Version Control'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software in 6.005
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  prefs: []
  type: TYPE_TB
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  prefs: []
  type: TYPE_TB
- en: Objectives
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Review Git basics and the commit graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice multi-user Git scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve been using Git for problem sets and in-class exercises for a while now.
    Most of the time, you haven’t had to coordinate with other people pushing and
    pulling to and from the same repository as you at the same time. For the group
    projects, that will change.
  prefs: []
  type: TYPE_NORMAL
- en: In this reading, prepare for some in-class Git exercises by reviewing what you
    know and brushing up on some commands. Now that you’re more comfortable with Git
    basics, it’s a good time to go back and review some of the resources from the
    beginning of the semester.
  prefs: []
  type: TYPE_NORMAL
- en: 'Review [Inventing version control](../05-version-control/#inventing_version_control):
    one developer, multiple developers, and branches.'
  prefs: []
  type: TYPE_NORMAL
- en: If you need to, review [Learn the Git workflow](../../getting-started/#git)
    from the *Getting Started* page.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing commit history
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Review **[2.3 Viewing the Commit History](http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History)**
    from *Pro Git*.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t need to remember all the different command-line options presented
    in the book! Instead, learn what’s possible so you know what to search for when
    you need it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the example repo from [*Version Control*](../05-version-control/#copy_an_object_graph_with_git_clone):'
  prefs: []
  type: TYPE_NORMAL
- en: '**`https://github.com/mit6005/fa16-ex05-hello-git.git`**'
  prefs: []
  type: TYPE_NORMAL
- en: Use `log` commands to make sure you understand the history of the repo.
  prefs: []
  type: TYPE_NORMAL
- en: Graph of commits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Recall that the history recorded in a Git repository is a directed acyclic graph.
    The history of any particular branch in the repo (such as the default `master`
    branch) starts at some initial commit, and then its history may split apart and
    come back together, if multiple developers made changes in parallel (or if a single
    developer worked on two different machines without committing-pushing-pulling
    before the switch).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the output of [`git lol`](../../getting-started/#config-git) for the
    example repository, which shows an ASCII-art graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is a diagram of the DAG:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](http://web.mit.edu/6.005/www/fa16/classes/27-team-version-control../05-version-control/figures/hello-git-history-trees.png)'
  prefs: []
  type: TYPE_IMG
- en: In the `ex05-hello-git` example repo, make sure you can explain where the history
    of `master` splits apart, and where it comes back together.
  prefs: []
  type: TYPE_NORMAL
- en: Review [Merging](../05-version-control/#merging) from the *Version Control*
    reading.
  prefs: []
  type: TYPE_NORMAL
- en: You should understand every step of the process, and how it relates to the result
    in the example repo.
  prefs: []
  type: TYPE_NORMAL
- en: Review the [Getting Started section on merges](../../getting-started/#merges),
    including merging and merge conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Merge
  prefs: []
  type: TYPE_NORMAL
- en: 'Alice and Bob both start with the same Java file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '| Alice changes `greet(..)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '| Bob changes `greeting()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Dangerous Merge Ahead
  prefs: []
  type: TYPE_NORMAL
- en: 'Same starting program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '| Alice changes `greeting()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '| Bob changes how the functions work together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Continue Merging
  prefs: []
  type: TYPE_NORMAL
- en: 'Same starting program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Alice changes `greet(..)` to return instead of print:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Bob creates a new file, `Main.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Using version control in a team
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every team develops its own standards for version control, and the size of
    the team and the project they’re working on is a major factor. Here are some guidelines
    for a small-scope team project of the kind you will undertake in 6.005:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Communicate.** Tell your teammates what you’re going to work on. Tell them
    that you’re working on it. And tell them that you worked on it. Communication
    is the best way to avoid wasted time and effort cleaning up broken code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write specs.** Necessary for the things we care about in 6.005, and part
    of good communication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write tests.** Don’t wait for a giant pile of code to accumulate before you
    try to test it. Avoid having one person write tests while another person writes
    implementation (unless the implementation is a prototype you plan to throw away).
    Write tests first to make sure you agree on the specs. Everyone should take responsibility
    for the correctness of their code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run the tests.** Tests can’t help you if you don’t run them. Run them before
    you start working, run them again before you commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automate.** You’ve already automated your tests with a tool like JUnit, but
    now you want to automate running those tests whenever the project changes. For
    6.005 group projects, we provide Didit as a way to automatically run your tests
    every time a team member pushes to Athena. This also removes “it worked on my
    machine” from the equation: either it works in the automated build, or it needs
    to be fixed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Review what you commit.** Use `git diff --staged` or a GUI program to see
    what you’re about to commit. Run the tests. Don’t use `commit -a`, that’s a great
    way to fill your repo with `println`s and other stuff you didn’t mean to commit.
    Don’t annoy your teammates by committing code that doesn’t compile, spews debug
    output, isn’t actually used, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pull before you start working.** Otherwise, you probably don’t have the latest
    version as your starting point — you’re editing an old version of the code! You’re
    guaranteed to have to merge your changes later, and you’re in danger of having
    to waste time resolving a merge conflict.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sync up.** At the end of a day or at the end of a work session, make sure
    everyone has pushed and pulled all the changes, you’re all at the same commit,
    and everyone is satisfied with the state of the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We don’t recommend using features like branching or rebasing for 6.005-sized
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: We do strongly recommend working together in the same place at the same time,
    especially if this is your first group software engineering experience.
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Team version control
  prefs: []
  type: TYPE_NORMAL
- en: Which of these demonstrate good team software development practice?
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Team project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most class times during the project phase will be devoted to group work.
  prefs: []
  type: TYPE_NORMAL
- en: These classes are required, just as normal classes are, and you must check in
    with your project mentor TA during class.
  prefs: []
  type: TYPE_NORMAL
