["```\nstring : Decoder String\nint : Decoder Int\nfloat : Decoder Float\nbool : Decoder Bool \n```", "```\ndecodeString : Decoder a -> String -> Result String a \n```", "```\n> import Json.Decode exposing (..)\n\n> decodeString int \"42\"\nOk 42 : Result String Int\n\n> decodeString float \"3.14159\"\nOk 3.14159 : Result String Float\n\n> decodeString bool \"true\"\nOk True : Result String Bool\n\n> decodeString int \"true\"\nErr \"Expecting an Int but instead got: true\" : Result String Int \n```", "```\nlist : Decoder a -> Decoder (List a) \n```", "```\n> import Json.Decode exposing (..)\n\n> int\n<decoder> : Decoder Int\n\n> list int\n<decoder> : Decoder (List Int)\n\n> decodeString (list int) \"[1,2,3]\"\nOk [1,2,3] : Result String (List Int)\n\n> decodeString (list string) \"\"\"[\"hi\", \"yo\"]\"\"\"\nOk [\"hi\", \"yo\"] : Result String (List String) \n```", "```\n> decodeString (list (list int)) \"[ [0], [1,2,3], [4,5] ]\"\nOk [[0],[1,2,3],[4,5]] : Result String (List (List Int)) \n```", "```\nfield : String -> Decoder a -> Decoder a \n```", "```\n> import Json.Decode exposing (..)\n\n> field \"x\" int\n<decoder> : Decoder Int\n\n> decodeString (field \"x\" int) \"\"\"{ \"x\": 3, \"y\": 4 }\"\"\"\nOk 3 : Result String Int\n\n> decodeString (field \"y\" int) \"\"\"{ \"x\": 3, \"y\": 4 }\"\"\"\nOk 4 : Result String Int \n```", "```\nmap2 : (a -> b -> value) -> Decoder a -> Decoder b -> Decoder value \n```", "```\n> import Json.Decode exposing (..)\n\n> type alias Point = { x : Int, y : Int }\n\n> Point\n<function> : Int -> Int -> Point\n\n> pointDecoder = map2 Point (field \"x\" int) (field \"y\" int)\n<decoder> : Decoder Point\n\n> decodeString pointDecoder \"\"\"{ \"x\": 3, \"y\": 4 }\"\"\"\nOk { x = 3, y = 4 } : Result String Point \n```", "```\nimport Json.Decode exposing (Decoder, int)\nimport Json.Decode.Pipeline exposing (decode, required)\n\ntype alias Point = { x : Int, y : Int }\n\npointDecoder : Decoder Point\npointDecoder =\n  decode Point\n    |> required \"x\" int\n    |> required \"y\" int \n```", "```\nelm-make src/Main.elm \n```", "```\nelm-make src/Main.elm --output=main.js \n```", "```\n<div id=\"main\"></div>\n<script src=\"main.js\"></script>\n<script> var node = document.getElementById('main');\n    var app = Elm.Main.embed(node);\n    // Note: if your Elm module is named \"MyThing.Root\" you\n    // would call \"Elm.MyThing.Root.embed(node)\" instead. </script> \n```", "```\nport module Spelling exposing (..)\n\n...\n\n-- port for sending strings out to JavaScript\nport check : String -> Cmd msg\n\n-- port for listening for suggestions from JavaScript\nport suggestions : (List String -> msg) -> Sub msg\n\n... \n```", "```\n<div id=\"spelling\"></div>\n<script src=\"spelling.js\"></script>\n<script> var app = Elm.Spelling.fullscreen();\n\n    app.ports.check.subscribe(function(word) {\n        var suggestions = spellCheck(word);\n        app.ports.suggestions.send(suggestions);\n    });\n\n    function spellCheck(word) {\n        // have a real implementation!\n        return [];\n    } </script> \n```", "```\ntype alias Flags =\n  { user : String\n  , token : String\n  } \n```", "```\ninit : Flags -> ( Model, Cmd Msg )\ninit flags =\n  ...\n\nmain =\n  programWithFlags { init = init, ... } \n```", "```\n// if you want it to be fullscreen\nvar app = Elm.MyApp.fullscreen({\n    user: 'Tom',\n    token: '12345'\n});\n\n// if you want to embed your app\nvar node = document.getElementById('my-app');\nvar app = Elm.MyApp.embed(node, {\n    user: 'Tom',\n    token: '12345'\n}); \n```"]