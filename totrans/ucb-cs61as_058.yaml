- en: Homework 4
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业 4
- en: Template
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板
- en: 'Type the following into the terminal to copy the template file to the current
    directory (note the period at the end):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中键入以下内容，将模板文件复制到当前目录（注意末尾的句点）：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Or you can download the template [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw4.rkt).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以在这里下载模板[here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw4.rkt)。
- en: Autograder
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动评分程序
- en: If you are working on the lab computers, the `grader` command will run the autograder.
    If you are working on your own personal machine, you should download [grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)
    and the [HW 4 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw4-tests.rkt).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在实验室计算机上工作，`grader`命令将运行自动评分程序。如果你在自己的个人机器上工作，你应该下载[grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)和[HW
    4 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw4-tests.rkt)。
- en: Warm-up
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 热身
- en: 'Try and predict what the following expressions will return, then check your
    answers with the Racket interpreter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试预测以下表达式将返回什么结果，然后用 Racket 解释器检查你的答案：
- en: '`(define x (cons 4 5))`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(define x (cons 4 5))`'
- en: '`(car x)`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(car x)`'
- en: '`(cdr x)`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(cdr x)`'
- en: '`(define y (cons ''hello ''goodbye))`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(define y (cons ''hello ''goodbye))`'
- en: '`(define z (cons x y))`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(define z (cons x y))`'
- en: '`(car (cdr z))`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(car (cdr z))`'
- en: '`(cdr (cdr z))`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(cdr (cdr z))`'
- en: '`(cdr (car z))`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(cdr (car z))`'
- en: '`(car (cons 8 3))`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(car (cons 8 3))`'
- en: '`(car z)`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(car z)`'
- en: '`(car 3)`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(car 3)`'
- en: Exercise 1
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1
- en: The first few exercises refer to [SICP 2.1.4](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-14.html#%_sec_2.1.4).
    See the text for details about interval arithmetic.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 前几个练习涉及到[SICP 2.1.4](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-14.html#%_sec_2.1.4)。有关区间算术的详细信息，请参阅文本。
- en: SICP 2.7
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SICP 2.7
- en: 'Alyssa''s program is incomplete because she has not specified the implementation
    of the interval abstraction. Here is a definition of the interval constructor:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 艾莉莎的程序不完整，因为她没有指定区间抽象的实现。这是区间构造函数的定义：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Define selectors `upper-bound` and `lower-bound` to complete the implementation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 定义选择器`upper-bound`和`lower-bound`以完成实现。
- en: SICP 2.8
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SICP 2.8
- en: Using reasoning analogous to Alyssa's, describe how the difference of two intervals
    may be computed. Define a corresponding subtraction procedure, called `sub-interval`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类似于艾莉莎的推理，描述如何计算两个区间的差。定义一个相应的减法过程，称为`sub-interval`。
- en: SICP 2.10
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SICP 2.10
- en: Ben Bitdiddle, an expert systems programmer, looks over Alyssa's shoulder and
    comments that it is not clear what it means to divide by an interval that spans
    zero. Modify Alyssa's code to check for this condition and to signal an error
    if it occurs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 专家系统程序员本·比特迪德尔（Ben Bitdiddle）看着艾莉莎的代码，并评论说不清楚什么意思是通过跨越零的区间进行除法。修改艾莉莎的代码以检查这种情况，并在发生时发出错误信号。
- en: '**Note:** Spans zero means that one bound is <= zero and the other is >= zero!'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 跨越零意味着一个边界<=零，另一个边界>=零！'
- en: SICP 2.12
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SICP 2.12
- en: Define a constructor `make-center-percent` that takes a center and a percentage
    tolerance and produces the desired interval. You must also define a selector `percent`
    that produces the percentage tolerance for a given interval. The `center` selector
    is the same as the one shown above.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个构造函数`make-center-percent`，它接受一个中心和一个百分比容差，并生成所需的区间。你还必须定义一个选择器`percent`，为给定区间产生百分比容差。`center`选择器与上面显示的相同。
- en: SICP 2.17
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SICP 2.17
- en: 'Define a procedure `last-pair` that returns the list that contains only the
    last element of a given (nonempty) list:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个过程`last-pair`，返回只包含给定（非空）列表的最后一个元素的列表：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: SICP 2.20
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SICP 2.20
- en: The procedures `+`, `*`, and `list` take arbitrary numbers of arguments. One
    way to define such procedures is to use `define` with **dotted-tail notation**.
    In a procedure definition, a parameter list that has a dot before the last parameter
    name indicates that, when the procedure is called, the initial parameters (if
    any) will have as values the initial arguments, as usual, but the final parameter's
    value will be a list of any remaining arguments. For instance, given the definition
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 过程`+`、`*`和`list`接受任意数量的参数。定义这样的过程的一种方法是使用带有**点尾符号**的`define`。在过程定义中，最后一个参数名之前有一个点的参数列表表示，当调用过程时，初始参数（如果有）将像往常一样具有初始参数的值，但最后一个参数的值将是任何剩余参数的列表。例如，给定定义
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: the procedure `f` can be called with two or more arguments. If we evaluate
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 过程`f`可以接受两个或更多个参数。如果我们评估
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: then in the body of `f`, `x` will be `1`, `y` will be `2`, and `z` will be the
    list `'(3 4 5 6)`. Given the definition
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在`f`的主体中，`x`将是`1`，`y`将是`2`，`z`将是列表`'(3 4 5 6)`。鉴于定义
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: the procedure `g` can be called with zero or more arguments. If we evaluate
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 过程`g`可以不带参数或带一个或多个参数调用。如果我们评估
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: then in the body of `g`, `w` will be the list `'(1 2 3 4 5 6)`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在`g`的主体中，`w`将是列表`'(1 2 3 4 5 6)`。
- en: Use this notation to write a procedure `same-parity` that takes one or more
    integers and returns a list of all the arguments that have the same even-odd parity
    as the first argument. For example,
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种表示法编写一个过程`same-parity`，它接受一个或多个整数，并返回与第一个参数具有相同奇偶性的所有参数的列表。例如，
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: SICP 2.22
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SICP 2.22
- en: 'Louis Reasoner tries to rewrite the first `square-list` procedure of Exercise
    2.21 so that it evolves an iterative process:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 路易斯·里森尼试图重写练习2.21的第一个`square-list`过程，以便演变出一个迭代过程：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Unfortunately, defining `square-list` this way produces the answer list in the
    reverse order of the one desired. Why?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，以这种方式定义`square-list`会产生与所需顺序相反的答案列表。为什么？
- en: 'Louis then tries to fix his bug by interchanging the arguments to `cons`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后路易斯尝试通过交换`cons`的参数来修复他的错误：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This doesn't work either. Explain.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这也不起作用。请解释。
- en: Exercise 2
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2
- en: 'Write a procedure `my-substitute` that takes three arguments: a list, an old
    word, and a new word. It should return a copy of the list, but with every occurrence
    of the old word replaced by the new word, even in sublists. For example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个过程`my-substitute`，它接受三个参数：一个列表，一个旧单词和一个新单词。它应返回列表的副本，但是将每个旧单词的出现替换为新单词，即使在子列表中也是如此。例如：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You might find the procedure `list?` useful:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现过程`list?`很有用：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Exercise 3
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3
- en: 'Now write `my-substitute2` that takes a list, a list of old words, and a list
    of new words; the last two lists should be the same length. It should return a
    copy of the first argument, but with each word that occurs in the second argument
    replaced by the corresponding word of the third argument:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在编写`my-substitute2`，它接受一个列表，一个旧单词列表和一个新单词列表；最后两个列表应该具有相同的长度。它应返回第一个参数的副本，但将出现在第二个参数中的每个单词替换为第三个参数中对应的单词：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Extra for Experts
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专家专用
- en: Do these if you want an extra challenge. These are *not* for credit.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想挑战自己，可以尝试这些。这些*不*计入学分。
- en: Exercise 4
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习4
- en: Write the procedure `cxr-function` that takes as its argument a word starting
    with c, ending with r, and having a string of letters a and/or d in between, such
    as `cdddadaadar`. It should return the corresponding function.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 编写过程`cxr-function`，其参数是以c开头，以r结尾，并在中间有一串字母a和/或d的单词，例如`cdddadaadar`。它应返回相应的函数。
- en: Exercise 5
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习5
- en: '[SICP Ex. 2.6](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-14.html#%_thm_2.4).
    Besides addition, invent multiplication and exponentiation of nonnegative integers.
    If you''re really enthusiastic, see if you can invent subtraction. (Remember,
    the rule of this game is that you have only lambda as a starting point.) Read
    `~cs61as/lib/church-hint` for some suggestions.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[SICP Ex. 2.6](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-14.html#%_thm_2.4)。除了加法，还要发明非负整数的乘法和指数运算。如果你真的很热情，看看能否发明减法。（记住，这个游戏的规则是你只有lambda作为起点。）阅读`~cs61as/lib/church-hint`以获取一些建议。'
- en: Exercise 6
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习6
- en: '[SICP Ex. 2.18](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_thm_2.18);
    this should take some thought, and you should make sure you get it right, but
    don''t get stuck on it for a whole hour. Note: Your solution should reverse lists,
    not sentences! That is, you should be using `cons`, `car`, and `cdr`, not `first`,
    `sentence`, etc.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[SICP Ex. 2.18](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_thm_2.18)；这需要一些思考，你应确保做对，但不要为此卡壳一个小时。注意：你的解决方案应该颠倒列表，而不是句子！也就是说，你应该使用`cons`、`car`和`cdr`，而不是`first`、`sentence`等。'
- en: Submit Your Homework!
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交你的作业！
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有关说明，请参阅[此指南](../submit.html)。它涵盖了基本的终端命令和作业提交。
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在提交作业时遇到任何问题，请不要犹豫向助教求助！
