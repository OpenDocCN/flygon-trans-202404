- en: Recursion without the MagicTuesday, February 14th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无魔法递归Tuesday, February 14th
- en: '[PLAI §22.4](plai.pdf#section.22.4 "Eliminating Recursion") (we go much deeper)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §22.4](plai.pdf#section.22.4 "消除递归")（我们深入探讨了这个问题）'
- en: 'Note: This explanation is similar to the one you can find in “The Why of Y”,
    by Richard Gabriel.'
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：这个解释类似于理查德·加布里埃尔所写的《Y的奥秘》中的解释。
- en: 'To implement recursion without the `define` magic, we first make an observation:
    this problem does *not* come up in a dynamically-scoped language. Consider the
    `let`-version of the problem:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现无需`define`魔法的递归，我们首先观察到：在动态作用域语言中不会出现这个问题。考虑问题的`let`版本：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This works fine — because by the time we get to evaluate the body of the function,
    `fact` is already bound to itself in the current dynamic scope. (This is another
    reason why dynamic scope is perceived as a convenient approach in new languages.)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做没有问题 —— 因为在我们评估函数体时，`fact`在当前动态作用域中已经绑定到了自身。（这是动态作用域被认为是一种便捷方法的另一个原因。）
- en: Regardless, the problem that we have with lexical scope is still there, but
    the way things work in a dynamic scope suggest a solution that we can use now.
    Just like in the dynamic scope case, when `fact` is called, it does have a value
    — the only problem is that this value is inaccessible in the lexical scope of
    its body.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们在词法作用域中遇到的问题仍然存在，但动态作用域的工作方式提示了我们现在可以使用的解决方案。就像在动态作用域情况下一样，当调用`fact`时，它确实有一个值
    —— 唯一的问题是该值在其体的词法作用域中是不可访问的。
- en: 'Instead of trying to get the value in via lexical scope, we can imitate what
    happens in the dynamically scoped language by passing the `fact` value to itself
    so it can call itself (going back to the original code in the broken-scope language):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不要试图通过词法作用域来传递值，我们可以模仿动态作用域语言中发生的情况，通过将`fact`的值传递给自身，这样它就可以调用自己（回到破损作用域语言中的原始代码）：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'except that now the recursive call should still send itself along:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了现在递归调用仍然应该发送自身以外：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The problem is that this required rewriting calls to `fact` — both outside and
    recursive calls inside. To make this an acceptable solution, calls from both places
    should not change. Eventually, we should be able to get a working `fact` definition
    that uses just
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，这需要重写对`fact`的调用 —— 包括外部和内部递归调用。为了使这成为一个可接受的解决方案，来自两个地方的调用都不应该改变。最终，我们应该能够得到一个工作正常的`fact`定义，只使用了
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first step in resolving this problem is to curry the `fact` definition.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的第一步是对`fact`的定义进行柯里化。
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now `fact` is no longer our factorial function — it’s a function that constructs
    it. So call it `make-fact`, and bind `fact` to the actual factorial function.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`fact`不再是我们的阶乘函数 —— 它是一个构造它的函数。所以将其称为`make-fact`，并将`fact`绑定到实际的阶乘函数。
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can try to do the same thing in the body of the factorial function: instead
    of calling `(self self)`, just bind `fact` to it:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试在阶乘函数的体中做同样的事情：不是调用`(self self)`，而是将`fact`绑定到它自己：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This works fine, but if we consider our original goal, we need to get that
    local `fact` binding outside of the `(lambda (n) ...)` — so we’re left with a
    definition that uses the factorial expression as is. So, swap the two lines:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做没有问题，但是如果考虑我们的原始目标，我们需要将本地的`fact`绑定移到`(lambda (n) ...)`之外 —— 因此我们得到一个使用阶乘表达式的定义。所以，交换这两行：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'But the problem is that this gets us into an infinite loop because we’re trying
    to evaluate `(self self)` too early. In fact, if we ignore the body of the `let`
    and other details, we basically do this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但问题在于这会让我们陷入无限循环，因为我们试图太早地评估`(self self)`。事实上，如果我们忽略`let`的主体和其他细节，我们基本上是这样做的：
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And this expression has an interesting property: it reduces to itself, so evaluating
    it gets stuck in an infinite loop.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 而这个表达式有一个有趣的属性：它会归约为自身，因此评估它会陷入无限循环。
- en: 'So how do we solve this? Well, we know that `(self self)` *should* be the same
    value that is the factorial function itself — so it must be a one-argument function.
    If it’s such a function, we can use a value that is equivalent, except that it
    will not get evaluated until it is needed, when the function is called. The trick
    here is the observation that `(lambda (n) (add1 n))` is really the same function
    as `add1`, except that the `add1` part doesn’t get evaluated until the function
    is called. Applying this trick to our code produces a version that does not get
    stuck in the same infinite loop:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们该如何解决这个问题呢？嗯，我们知道`(self self)` *应该*是阶乘函数本身的相同值 —— 所以它必须是一个单参数函数。如果它是这样一个函数，我们可以使用一个等效的值，除非在函数被调用时它不会被评估，否则它不会被评估。这里的诀窍在于观察到`(lambda
    (n) (add1 n))`实际上与`add1`相同的函数，只是`add1`部分直到函数被调用时才被评估。将这个技巧应用到我们的代码中产生一个不会陷入相同无限循环的版本：
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Continuing from here — we know that
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里继续 —— 我们知道
- en: '[PRE10]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '(remember how we derived `fun` from a `with`), so we can turn that `let` into
    the equivalent function application form:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: （记住我们是如何从`with`导出`fun`的），所以我们可以将那个`let`转换为等价的函数应用形式：
- en: '[PRE11]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And note now that the (lambda (fact) …) expression is everything that we need
    for a recursive definition of `fact` — it has the proper factorial body with a
    plain recursive call. It’s almost like the usual value that we’d want to define
    `fact` as, except that we still have to abstract on the recursive value itself.
    So lets move this code into a separate definition for `fact-core`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在注意，`(lambda (fact) …)`表达式是我们需要的递归定义`fact`的一切 —— 它具有合适的阶乘体和一个普通的递归调用。它几乎就像我们想要将`fact`定义为的通常值，只是我们仍然需要对递归值本身进行抽象。所以让我们将这段代码移到一个单独的`fact-core`定义中：
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can now proceed by moving the `(make-fact make-fact)` self application into
    its own function which is what creates the real factorial:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续通过将`(make-fact make-fact)`自应用移到它自己的函数中，这就是创建真正阶乘的函数：
- en: '[PRE13]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Rewrite the `make-fact` definition using an explicit `lambda`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用显式的`lambda`重写`make-fact`定义：
- en: '[PRE14]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'and fold the functionality of `make-fact` and `make-real-fact` into a single
    `make-fact` function by just using the value of `make-fact` explicitly instead
    of through a definition:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 并通过直接使用`make-fact`的值而不是通过定义来将`make-fact`和`make-real-fact`的功能合并到一个`make-fact`函数中：
- en: '[PRE15]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can now observe that `make-real-fact` has nothing that is specific to factorial
    — we can make it take a “core function” as an argument:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以观察到`make-real-fact`没有任何特定于阶乘的东西 —— 我们可以将其作为“核心函数”作为参数：
- en: '[PRE16]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'and call it `make-recursive`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其称为`make-recursive`：
- en: '[PRE17]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We’re almost done now — there’s no real need for a separate `fact-core` definition,
    just use the value for the definition of `fact`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们几乎完成了 —— 没有一个单独的`fact-core`定义的真正需要，只需使用该值来定义`fact`：
- en: '[PRE18]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'turn the `let` into a function form:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将`let`转换为函数形式：
- en: '[PRE19]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'do some renamings to make things simpler — `make` and `self` turn to `x`, and
    `core` to `f`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 进行一些重命名使事情变得更简单 —— `make`和`self`变成了`x`，`core`变成了`f`：
- en: '[PRE20]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'or we can manually expand that first (lambda (x) (x x)) application to make
    the symmetry more obvious (not really surprising because it started with a `let`
    whose purpose was to do a self-application):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以手动展开第一个`(lambda (x) (x x))`应用，使对称性更明显（并不令人惊讶，因为它始于一个目的是执行自应用的`let`）：
- en: '[PRE21]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And we finally got what we were looking for: a general way to define *any*
    recursive function without any magical `define` tricks. This also work for other
    recursive functions:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后我们终于得到了我们正在寻找的东西：一种通用的方法来定义*任何*递归函数，而没有任何神奇的`define`技巧。这对于其他递归函数也适用：
- en: '[PRE22]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'A convenient tool that people often use on paper is to perform a kind of a
    syntactic abstraction: “assume that whenever I write (twice foo) I really meant
    to write (foo foo)”. This can often be done as plain abstractions (that is, using
    functions), but in some cases — for example, if we want to abstract over definitions
    — we just want such a rewrite rule. (More on this towards the end of the course.)
    The broken-scope language does provide such a tool — `rewrite` extends the language
    with a rewrite rule. Using this, and our `make-recursive`, we can make up a recursive
    definition form:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '人们经常在纸上使用的一个方便的工具是进行一种句法抽象: “假设当我写(twice foo)时，我真的想写(foo foo)”。这通常可以作为普通的抽象完成（也就是使用函数），但在某些情况下
    —— 例如，如果我们想要抽象定义 —— 我们只是想要这样一个重写规则。（在课程结束时更多讨论此问题。）破碎范围语言确实提供了这样一个工具 —— `rewrite`用一个重写规则扩展了语言。使用这个，以及我们的`make-recursive`，我们可以制定一个递归定义形式：'
- en: '[PRE23]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In other words, we’ve created our own “magical definition” form. The above
    code can now be written in almost the same way it is written in plain Racket:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们创建了自己的“魔法定义”形式。现在，上面的代码几乎可以以与在普通Racket中编写的方式相同的方式编写：
- en: '[PRE24]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Finally, note that make-recursive is limited to 1-argument functions only because
    of the protection from eager evaluation. In any case, it can be used in any way
    you want, for example,
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意，由于对急切求值的保护，make-recursive仅限于1个参数函数。无论如何，它可以按照您想要的任何方式使用，例如，
- en: '[PRE25]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'is a function that *returns* itself rather than calling itself. Using the rewrite
    rule, this would be:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个函数，*返回*自身而不是调用自身。使用重写规则，这将是：
- en: '[PRE26]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'which is the same as:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这与以下相同：
- en: '[PRE27]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: in plain Racket.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在普通的Racket中。
