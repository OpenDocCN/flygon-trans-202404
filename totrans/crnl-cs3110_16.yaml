- en: 'Lecture 11: Abstraction Functions and Representation Invariants'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 讲：抽象函数和表示不变量
- en: We have observed that the most important use of the "comment" feature of programming
    languages is to provide specifications of the behavior of declared functions,
    so that program modules can be used without inspecting their code (*modular programming*).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察到编程语言的“注释”功能最重要的用途是提供已声明函数行为的规范，以便程序模块可以在不检查其代码的情况下使用（*模块化编程*）。
- en: Let us now consider the use of comments in module *implementations*. The first
    question we must ask ourselves is who is going to read the comments written in
    module implementations. Because we are going to work hard to allow module users
    to program against the module while reading only its interface, clearly users
    are not the intended audience. Rather, the purpose of implementation comments
    is to explain the implementation to other implementers or maintainers of the module.
    This is done by writing comments that convince the reader that the implementation
    correctly implements its interface.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑在模块*实现*中使用注释。我们必须问自己的第一个问题是谁将阅读模块实现中编写的注释。因为我们将努力使模块用户只需阅读其接口即可编写针对模块的程序，显然用户不是预期的受众。相反，实现注释的目的是向其他实现者或模块维护者解释实现。这是通过编写能够使读者确信实现正确地实现了其接口的注释来实现的。
- en: It is inappropriate to copy the specifications of functions found in the module
    interface into the module implementation. Copying runs the risk of introducing
    inconsistency as the program evolves, because programmers don't keep the copies
    in sync. Copying code and specifications is a major source (if not *the* major
    source) of program bugs.  In any case, implementers can always look at the interface
    for the specification.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将模块接口中发现的函数规范复制到模块实现中是不合适的。复制可能会在程序演变过程中引入不一致性，因为程序员不会同步复制品。复制代码和规范是程序错误的一个主要来源（如果不是*主要*的来源）。在任何情况下，实现者都可以查看接口以获取规范。
- en: Implementation comments fall into two categories. The first category arises
    because a module implementation may define new types and functions that are purely
    internal to the module. If their significance is not obvious, these types and
    functions should be documented in much the same style that we have suggested for
    documenting interfaces. Often, as the code is written, it becomes apparent that
    the new types and functions defined in the module form an internal data abstraction
    or at least a collection of functionality that makes sense as a module in its
    own right. This is a signal that the internal data abstraction might be moved
    to a separate module and manipulated only through its operations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 实现注释分为两类。第一类是因为模块实现可能定义了对模块内部完全私有的新类型和函数。如果它们的重要性不明显，则应该以与我们建议用于文档化接口的方式文档化这些类型和函数。通常，在编写代码时，很明显地会发现模块中定义的新类型和函数形成了内部数据抽象或至少是一组作为独立模块的功能集合。这表明内部数据抽象可能会被移动到一个单独的模块，并且只能通过其操作来操作。
- en: 'The second category of implementation comments is associated with the use of
    *data abstraction*. Suppose we are implementing an abstraction for a set of items
    of type `''a`. The interface might look something like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 实现注释的第二类与*数据抽象*的使用相关。假设我们正在为类型为`'a`的一组项目实现一个抽象。接口可能看起来像这样：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In a real signature for sets, we''d want operations such as `map` and `fold`
    as well, but let''s omit these for now for simplicity. There are many ways to
    implement this abstraction. One easy way is as a list:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实的集合签名中，我们希望像`map`和`fold`这样的操作，但为了简单起见，我们现在省略这些。有许多实现此抽象的方法。一种简单的方法是作为一个列表：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This implementation has the advantage of simplicity. For small sets that tend
    not to have duplicate elements, it will be a fine choice. Its performance will
    be poor for large sets or applications with many duplicates but for some applications
    that's not an issue.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实现具有简单性的优势。对于很少具有重复元素的小集合来说，它将是一个不错的选择。对于具有大量重复项或具有许多重复项的应用程序，其性能将很差，但对于某些应用程序来说，这并不是问题。
- en: Notice that the types of the functions do not need to be written down in the
    implementation. They aren't needed because they're already present in the signature,
    just like the specifications that are also in the signature don't need to be replicated
    in the structure.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，函数的类型不需要在实现中写下。这是因为它们已经存在于签名中，就像签名中的规范也不需要在结构中复制一样。
- en: Here is another implementation of `SET` that also uses `'a list` but requires
    the lists to contain no duplicates. This implementation is also correct (and also
    slow for large sets). Notice that we are using the same representation type, yet
    some important aspects of the implementation are quite different.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一种使用`'a list`的`SET`实现，但要求列表不包含重复项。这个实现也是正确的（对于大型集合也很慢）。请注意，我们使用相同的表示类型，但实现的一些重要方面是完全不同的。
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Another implementation might use some kind of tree structure (which we will
    cover later in the semester). You may be able to think of more complicated ways
    to implement sets that are (usually) better than any of these. We'll talk about
    issues of selecting good implementations in lectures coming up soon.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种实现可能会使用某种树结构（我们将在本学期后期讨论）。你可能会想到比这些更复杂的实现方式（通常更好）。我们将很快在讲座中讨论选择良好实现的问题。
- en: 'An important reason why we introduced the writing of function specifications
    was to enable *local reasoning*: once a function has a spec, we can judge whether
    the function does what it is supposed to without looking at the rest of the program.
    We can also judge whether the rest of the program works without looking at the
    code of the function. However, we cannot reason locally about the individual functions
    in the three module implementations just given. The problem is that we don''t
    have enough information about the relationship between the concrete types (e.g.,
    `int list`, `bool vector`) and the corresponding abstract type (`set`). This lack
    of information can be addressed by adding two new kinds of comments to the implementation:
    the *abstraction function* and the *representation invariant* for the abstract
    data type.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入函数规范的一个重要原因是为了实现*局部推理*：一旦函数有了规范，我们就可以判断函数是否按照预期工作，而无需查看程序的其余部分。我们还可以判断程序的其余部分是否正常工作，而无需查看函数的代码。然而，我们无法对刚刚给出的三个模块实现中的各个函数进行局部推理。问题在于我们对具体类型（例如`int
    list`、`bool vector`）和相应的抽象类型（`set`）之间的关系缺乏足够的信息。通过向实现添加两种新类型的注释：*抽象函数*和抽象数据类型的*表示不变量*，可以解决这种信息不足的问题。
- en: Abstraction Functions
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象函数
- en: 'The user of any `SET` implementation should not be able to distinguish it from
    any other implementation based on its functional behavior. As far as the user
    can tell, the operations act like operations on the mathematical ideal of a set.
    In the first implementation, the lists `[3; 1]`, `[1; 3]`, and `[1; 1; 3]` are
    distinguishable to the implementer, but not to the user. To the user, they all
    represent the abstract set {1, 3} and cannot be distinguished by any of the operations
    of the `SET` signature. From the point of view of the user, the abstract data
    type describes a set of abstract values and associated operations. The implementers
    knows that these abstract values are represented by concrete values that may contain
    additional information invisible from the user''s view. This loss of information
    is described by the *abstraction function*, which is a mapping from the space
    of concrete values to the abstract space. The abstraction function for the implementation
    `Set1` looks like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 任何`SET`实现的用户不应该能够根据其功能行为将其与其他实现区分开。就用户而言，操作就像对数学理想中的集合进行操作一样。在第一个实现中，列表`[3;
    1]`、`[1; 3]`和`[1; 1; 3]`对于实现者是可以区分的，但对于用户来说不是。对用户而言，它们都代表抽象集合{1, 3}，并且不能通过`SET`签名的任何操作来区分。从用户的角度看，抽象数据类型描述了一组抽象值和相关操作。实现者知道这些抽象值由可能包含用户视图中看不到的附加信息的具体值表示。这种信息的丢失由*抽象函数*描述，它是从具体值空间到抽象空间的映射。实现`Set1`的抽象函数如下：
- en: '![](../Images/fdf4ea3599c79f40473c51ab5ba3245b.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fdf4ea3599c79f40473c51ab5ba3245b.jpg)'
- en: Notice that several concrete values may map to a single abstract value; that
    is, the abstraction function may be *many-to-one*. It is also possible that some
    concrete values do not map to any abstract value; the abstraction function may
    be *partial*. That is not the case with `Set1`, but it might be with other implementations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，几个具体值可能映射到一个抽象值；即，抽象函数可能是*多对一*的。也有可能一些具体值不映射到任何抽象值；抽象函数可能是*部分的*。这在`Set1`中并不是这种情况，但在其他实现中可能会发生。
- en: 'The abstraction function is important for deciding whether an implementation
    is correct, therefore it belongs as a comment in the implementation of any abstract
    data type. For example, in the `Set1` module, we could document the abstraction
    function as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象函数对于确定实现是否正确非常重要，因此它应该作为任何抽象数据类型实现中的注释。例如，在`Set1`模块中，我们可以将抽象函数描述如下：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This comment explicitly points out that the list may contain duplicates, which
    is helpful as a reinforcement of the first sentence. Similarly, the case of an
    empty list is mentioned explicitly for clarity, although it is redundant.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此注释明确指出列表可能包含重复项，这有助于加强第一句的内容。同样，空列表的情况被明确提及以确保清晰，尽管这是多余的。
- en: 'The abstraction function for the second implementation, which does not allow
    duplicates, hints at an important difference: we can write the abstraction function
    for this second representation a bit more simply because we know that the elements
    are distinct.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不允许重复项的第二个实现的抽象函数，暗示了一个重要的区别：我们可以更简单地为这个第二个表示写出抽象函数，因为我们知道元素是不同的。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In practice the phrase "Abstraction function" is usually omitted. However, it
    is not a bad idea to include it, because it is a useful reminder of what you are
    doing when you are writing comments like the ones above. Whenever you write code
    to implement what amounts to an abstract data type, you should write down the
    abstraction function explicitly, and certainly keep it in mind.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，“抽象函数”这个短语通常被省略。然而，包含它并不是一个坏主意，因为它是一个有用的提醒，当你编写像上面那样的注释时，你正在做什么。每当你编写代码来实现所谓的抽象数据类型时，你都应该明确写下抽象函数，并当然要记住它。
- en: Commutative diagrams
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可交换图表
- en: 'Using the abstraction function, we can now talk about what it means for an
    implementation of an abstraction to be *correct*. It is correct exactly when every
    operation that takes place in the concrete space makes sense when mapped by the
    abstraction function into the abstract space. This can be visualized as a *commutative
    diagram*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用抽象函数，我们现在可以谈论抽象实现何时*正确*。当且仅当在具体空间中发生的每个操作通过抽象函数映射到抽象空间时都是合理的时，它才是正确的。这可以被可视化为一个*可交换图表*：
- en: '![](../Images/01bc71c61bc2b2faa014e793f59f99a9.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/01bc71c61bc2b2faa014e793f59f99a9.jpg)'
- en: A commutative diagram means that if we take the two paths around the diagram,
    we have to get to the same place. Suppose that we start from a concrete value
    and apply the actual implementation of some operation to it to obtain a new concrete
    value or values. When viewed abstractly, a concrete result should be an abstract
    value that is a possible result of applying the function *as described in its
    specification* to the abstract view of the actual inputs. For example, consider
    the union function from the implementation of sets as lists with repeated elements
    covered last time. When this function is applied to the concrete pair [1; 3],
    [2; 2], it corresponds to the lower-left corner of the diagram. The result of
    this operation is the list [2; 2; 1; 3], whose corresponding abstract value is
    the list {1, 2, 3}. Note that if we apply the abstraction function AF to the input
    lists [1; 3] and [2; 2], we have the sets {1, 3} and {2}. The commutative diagram
    requires that in this instance the union of {1, 3} and {2} is {1, 2, 3}, which
    is of course true.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可交换图表意味着如果我们沿着图表的两条路径前进，我们必须到达相同的地方。假设我们从一个具体值开始，并对其应用某些操作的实际实现以获得新的具体值或值。在抽象上看，具体结果应该是一个抽象值，它是将抽象视图作为实际输入的描述按照规范应用函数的可能结果。例如，考虑上次讨论的使用重复元素列表实现的集合的并函数。当将此函数应用于具体对[1;
    3]、[2; 2]时，它对应于图表的左下角。这个操作的结果是列表[2; 2; 1; 3]，其对应的抽象值是集合{1, 2, 3}。请注意，如果我们将输入列表[1;
    3]和[2; 2]应用到抽象函数AF上，我们将得到集合{1, 3}和{2}。可交换图表要求在这种情况下{1, 3}和{2}的并集是{1, 2, 3}，这当然是正确的。
- en: Representation Invariants
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示不变性
- en: Some missing information
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些缺失的信息
- en: 'The abstraction function explains how information within the module is viewed
    abstractly by module clients. However, this is not all we need to know to ensure
    correctness of the implementation. Consider the `size` function in each of the
    two implementations. For `Set2`, in which the lists of integers have no duplicates,
    the size is just the length of the list:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象函数解释了模块内部信息如何被模块客户端抽象地看待。然而，这并不是确保实现正确性所需的全部信息。考虑两种实现中的`size`函数。对于`Set2`，其中整数列表没有重复项，大小就是列表的长度：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But for `Set1`, which allows duplicates, we need to be sure not to double-count
    duplicate elements:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但对于`Set1`，允许重复的情况，我们需要确保不重复计算重复元素：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How we know that we don't need to do this check in `Set2`? Since the code does
    not explicitly say that there are no duplicates, implementers will not be able
    to reason locally about whether functions like `size` are implemented correctly.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何知道在`Set2`中不需要进行此检查？因为代码没有明确说明没有重复项，实现者将无法就`size`等函数是否正确实现进行局部推理。
- en: 'The issue here is that in the `Set2` representation, not all concrete data
    items represent abstract data items. That is, the *domain* of the abstraction
    function does not include all possible lists. There are some lists, such as `[1;
    1; 2]`, that contain duplicates and must never occur in the representation of
    a set in the `Set2` implementation; the abstraction function is undefined on such
    lists. We need to include a second piece of information, the *representation invariant*
    (or *rep invariant*, or *RI*), to determine which concrete data items are valid
    representations of abstract data items. For sets represented as lists without
    duplicates, we write this as part of the comment together with the abstraction
    function:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是，在`Set2`表示中，并非所有具体数据项都代表抽象数据项。也就是说，抽象函数的*域*不包括所有可能的列表。有一些列表，比如`[1; 1;
    2]`，包含重复项，绝不能出现在`Set2`实现中集合的表示中；抽象函数在这些列表上是未定义的。我们需要包含第二个信息，*表示不变量*（或*rep invariant*，或*RI*），以确定哪些具体数据项是抽象数据项的有效表示。对于以不重复列表表示的集合，我们将其作为注释的一部分与抽象函数一起写出：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we think about this issue in terms of the commutative diagram, we see that
    there is a crucial property that is necessary to ensure correctness: namely, that
    all concrete operations preserve the representation invariant. If this constraint
    is broken, functions such as `size` will not return the correct answer. The relationship
    between the representation invariant and the abstraction function is depicted
    in this figure:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从可交换图的角度思考这个问题，我们会发现确保正确性所必需的一个关键属性：即，所有具体操作都保持表示不变量。如果这个约束被打破，诸如`size`之类的函数将无法返回正确答案。表示不变量和抽象函数之间的关系在这个图中描述如下：
- en: '![](../Images/46d15175a415b650daa91a93f19ec97d.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/46d15175a415b650daa91a93f19ec97d.jpg)'
- en: 'We can use the rep invariant and abstraction function to judge whether the
    implementation of a single operation is correct *in isolation from the rest of
    the module*. It is correct if, assuming that:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用表示不变量和抽象函数来判断单个操作的实现是否正确*与模块的其余部分隔离开来*。如果假设：
- en: the function's preconditions hold of the argument values
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数的前提条件适用于参数值
- en: the concrete representations of the arguments satisfy the rep invariant
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参数的具体表示满足表示不变量
- en: we can show that
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以证明
- en: all new representation values created satisfy the rep invariant, and
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有创建的新表示值都满足表示不变量，并且
- en: the commutative diagram holds.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可交换图成立。
- en: The rep invariant makes it easier to write code that is provably correct, because
    it means that we don't have to write code that works for all possible incoming
    concrete representations—only those that satisfy the rep invariant. For example,
    in the implementation `Set2`, we do not care what the code does on lists that
    contain duplicate elements. However, we do need to be concerned that on return,
    we only produce values that satisfy the rep invariant. As suggested in the figure
    above, if the rep invariant holds for the input values, then it should hold for
    the output values, which is why we call it an *invariant*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 表示不变量使得编写可证明正确的代码变得更容易，因为这意味着我们不必为所有可能的传入具体表示编写代码——只需满足表示不变量的那些。例如，在实现`Set2`中，我们不关心代码在包含重复元素的列表上的操作。然而，我们确实需要关注的是，在返回时，我们只生成满足表示不变量的值。如上图所示，如果表示不变量对输入值成立，那么对输出值也应该成立，这就是为什么我们称之为*不变量*。
- en: repOK
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: repOK
- en: When implementing a complex abstract data type, it is often helpful to write
    an internal function that can be used to check that the rep invariant holds of
    a given data item. By convention we will call this function `repOK`. If the module
    accepts values of the abstract type that are created outside the module, say by
    exposing the implementation of the type in the signature, then `repOK` should
    be applied to these to ensure the representation invariant is satisfied. In addition,
    if the implementation creates any new values of the abstract type, `repOK` can
    be applied to them as a sanity check. With this approach, bugs are caught early,
    and a bug in one function is less likely to create the appearance of a bug in
    another.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当实现一个复杂的抽象数据类型时，编写一个内部函数通常很有帮助，该函数可用于检查给定数据项的表示不变量是否成立。按照惯例，我们将这个函数称为`repOK`。如果模块接受在模块外部创建的抽象类型的值，比如通过在签名中公开类型的实现，那么应该对这些值应用`repOK`以确保表示不变量得到满足。此外，如果实现创建了任何新的抽象类型的值，可以将`repOK`应用于它们作为健全性检查。通过这种方法，可以早期捕获错误，并且一个函数中的错误不太可能造成另一个函数中出现错误的现象。
- en: repOK as an identity function
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`repOK`作为一个恒等函数'
- en: A convenient way to write `repOK` is to make it an identity function that just
    returns the input value if the rep invariant holds and raises an exception if
    it fails.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方便编写`repOK`的方法是将其设置为一个恒等函数，如果表示不变量成立，则只返回输入值，如果失败则引发异常。
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here is an implementation of `SET` that uses the same data representation as
    `Set2`, but includes copious `repOK` checks. Note that `repOK` is applied to all
    input sets and to any set that is ever created. This ensures that if a bad set
    representation is created, it will be detected immediately. In case we somehow
    missed a check on creation, we also apply `repOK` to incoming set arguments. If
    there is a bug, these checks will help us quickly figure out where the rep invariant
    is being broken.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用与`Set2`相同的数据表示的`SET`的实现，但包含大量的`repOK`检查。请注意，`repOK`应用于所有输入集合和任何被创建的集合。这确保了如果创建了一个错误的集合表示，则会立即检测到。如果我们在创建时不小心错过了一个检查，我们还将`repOK`应用于传入的集合参数。如果有错误，这些检查将帮助我们快速找出表示不变量被破坏的地方。
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Production vs. development code
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生产代码与开发代码
- en: Calling `repOK` on every argument can be too expensive for the production version
    of a program. The `repOK` above is quite expensive (though it could be implemented
    more cheaply). For production code, it may be more appropriate to use a version
    of `repOK` that only checks the parts of the rep invariant that are cheap to check.
    When there is a requirement that there be no run-time cost, `repOK` can be changed
    to an identity function (or macro) so the compiler optimizes away the calls to
    it. However, it is a good idea to keep around the full code of `repOK` (perhaps
    in a comment) so it can be easily reinstated during future debugging.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对生产版本的程序在每个参数上调用`repOK`可能过于昂贵。上面的`repOK`非常昂贵（尽管可以更便宜地实现）。对于生产代码，可能更适合使用一个只检查易于检查的表示不变量部分的`repOK`版本。当有要求不要有运行时成本时，可以将`repOK`更改为恒等函数（或宏），以便编译器优化掉对它的调用。但是，最好保留`repOK`的完整代码（也许在注释中），以便在未来调试时可以轻松地恢复。
- en: Some languages provide support for conditional compilation, such as the `assert`
    statements in Java and OCaml. These constructs are ideal for checking representation
    invariants and other types of sanity checks. There is a compiler option that allows
    such assertions to be turned on during development and turned off for the final
    production version.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一些语言提供对条件编译的支持，比如Java和OCaml中的`assert`语句。这些构造非常适合检查表示不变量和其他类型的健全性检查。有一个编译器选项，允许在开发过程中打开此类断言，并在最终的生产版本中关闭它们。
- en: Module Invariants
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块不变式
- en: Invariants on data are useful even when writing modules that are not easily
    considered to be providing abstract data types. Sometimes it is difficult to identify
    an abstract view of data that is provided by the module, and there may not be
    any abstract type at all. Invariants are important even without an abstraction
    function, because they document the legal states and representations that the
    code is expected to handle correctly. In general we refer to **module invariants**
    as invariants enforced by modules. In the case of an ADT, the rep invariant is
    a module invariant. Module invariants are useful for understanding how the code
    works, and also for maintenance, because the maintainer can avoid changes to the
    code that violate the module invariant.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 即使编写的模块不容易被视为提供抽象数据类型，对数据的不变式也是有用的。有时很难确定模块提供的数据的抽象视图，并且可能根本没有任何抽象类型。即使没有抽象函数，不变式也很重要，因为它们记录了代码预期正确处理的合法状态和表示。一般情况下，我们将**模块不变式**称为模块强制执行的不变式。在ADT的情况下，表示不变式是模块不变式。模块不变式对于理解代码的工作方式非常有用，也对维护很重要，因为维护者可以避免违反模块不变式的代码更改。
- en: Module invariants and code evolution
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块不变式与代码演变
- en: A strong module invariant is not always the best choice, because it restricts
    future changes to the module. We described interface specifications as a contract
    between the implementer of a module and the user. A module invariant is a contract
    among the various implementers of the module, present and future. Once an invariant
    is established, ADT operations may be implemented assuming that the rep invariant
    holds. If the rep invariant is ever weakened (made more permissive), some parts
    of the implementation may break. Thus, *one of the most important purposes of
    the rep invariant is to document exactly what may and what may not be safely changed
    about a module implementation*. A weak invariant forces the implementer to work
    harder to produce a correct implementation, because less can be assumed about
    concrete representation values, but conversely it gives maximum flexibility for
    future changes to the code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 强模块不变式并不总是最佳选择，因为它限制了对模块的未来更改。我们将接口规范描述为模块实现者与用户之间的契约。模块不变式是模块各个实现者之间的契约，包括当前和未来。一旦建立了不变式，ADT（抽象数据类型）操作可以实现，假定表示不变式保持不变。如果表示不变式曾被削弱（变得更宽松），则可能会破坏实现的某些部分。因此，*表示不变式最重要的目的之一是准确记录模块实现可安全更改的内容*。弱不变式会迫使实现者更加努力地生成正确的实现，因为对具体表示值的假设较少，但反之，它为将来的代码更改提供了最大的灵活性。
- en: Modularity and module invariants
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块化与模块不变式
- en: A sign of good code design is that invariants on program data are enforced in
    a localized way, within modules, so that programmers can reason about whether
    the invariant is enforced without thinking about the rest of the program. To do
    this it is necessary to figure out just the right operations to be exposed by
    the various modules, so that useful functionality can be provided while also ensuring
    that invariants are maintained.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 良好代码设计的一个标志是对程序数据的不变式在模块内以局部化的方式强制执行，这样程序员就可以推理出不变式是否得到了执行，而无需考虑程序的其余部分。要做到这一点，必须找出各个模块暴露的恰当操作，以便提供有用的功能同时确保不变式得到维护。
- en: 'Conversely, a common design error is to break up a program into a set of modules
    that simply encapulate data and provide low-level accessor operations, while putting
    all the interesting logic of the program in one main module. The problem with
    this design is that all the interesting (and hard!) code still lives in one place,
    and the main module is responsible for enforcing many complex invariants among
    the data. This kind of design does not break the program into simpler parts that
    can be reasoned about independently. It shows the big danger sign that the abstractions
    aren''t right: all the code is either boring code, or overly complex code that
    is hard to reason about.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，常见的设计错误是将程序分解为一组简单封装数据并提供低级访问操作的模块，同时将程序的所有有趣逻辑都放在一个主模块中。这种设计的问题在于所有有趣（且难！）的代码仍然集中在一个地方，而主模块负责在数据之间执行许多复杂的不变式。这种设计没有将程序分解为可以独立推理的较简单部分。它显示了抽象不正确的重大危险信号：所有代码都是无聊的代码，或者是难以推理的过于复杂的代码。
- en: For example, suppose we are implementing a graphical chess game. The game state
    includes a board and a bunch of pieces. We might want to keep track of where each
    piece is, as well as what is on each board square. And there may be a good deal
    of state in the graphical display too. A good design would ensure that the board,
    the pieces, and the graphical display stay in sync with each other in code that
    is separate from that which handles the detailed rules of the game of chess.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设我们正在实现一个图形化的国际象棋游戏。游戏状态包括一个棋盘和一堆棋子。我们可能想要追踪每个棋子的位置，以及每个棋盘方格上的内容。图形显示中可能也有很多状态。一个良好的设计应该确保棋盘、棋子和图形显示在代码中与国际象棋游戏的详细规则处理代码分离的情况下保持同步。
- en: Principles for modular design
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块化设计原则
- en: 'Given a large programming task, we want to divide it into modules in an effective
    way. There are several goals. To make the user of the software happy, we want
    a program that is correct, secure, and has acceptable performance. But to keep
    the cost of development and maintenance low, and to increase the likelihood that
    the program is correct, we want a modular design that has loose coupling and permits
    local reasoning. These goals are in tension. We can roughly characterize design
    tradeoffs along an axis between loose and tight coupling:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个大的编程任务，我们希望以有效的方式将其分解为模块。有几个目标。为了让软件的用户满意，我们希望程序是正确的、安全的，并且性能可以接受。但为了降低开发和维护成本，以及增加程序正确性的可能性，我们需要一个具有松散耦合并允许局部推理的模块化设计。这些目标是有张力的。我们可以在松散耦合和紧密耦合之间的轴线上粗略地划分设计权衡：
- en: '| Issue | Loose coupling | Tight coupling |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 问题 | 松散耦合 | 紧密耦合 |'
- en: '| Size of interface | *narrow* interface: few operations | *wide* interface:
    many operations |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 接口大小 | *窄*接口：少量操作 | *宽*接口：多量操作 |'
- en: '| Complexity | Simple specifications | Complex specifications |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 复杂性 | 简单的规范 | 复杂的规范 |'
- en: '| Invariants | Local | Global |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 不变性 | 局部 | 全局 |'
- en: '| Pre/post-conditions | Weak, nondeterministic | Strong, deterministic |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 先/后条件 | 弱，非确定性 | 强，确定性 |'
- en: '| Correctness | Easier to get right | Harder to get right |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 正确性 | 更容易做对 | 更难做对 |'
- en: '| Performance | May sacrifice performance | May expose optimizations |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 性能 | 可能会牺牲性能 | 可能会暴露出优化 |'
- en: Thus, if we want software that is very modular and relatively easy to build
    correctly, we should design modules that have simple, narrow interfaces with relatively
    few operations with simple specifications. In some cases we may need more performance
    than an aggressively modular design offers, and may need to make our specification
    more complex or add new operations.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们想要非常模块化且相对容易构建正确的软件，我们应该设计具有简单、窄接口以及相对较少操作、简单规范的模块。在某些情况下，我们可能需要比积极模块化设计提供的性能更多，并且可能需要使我们的规范更复杂或添加新操作。
- en: A good rule of thumb is to start with as modular and simple a design as possible.
    Interfaces should be narrow, exposing only as many operations as are necessary
    for clients to carry out their tasks. Invariants should be simple and enforced
    locally. Avoid premature optimization that results in complex, tightly coupled
    programs, because very often the performance bottlenecks are not what is expected.
    You don't want to pay the price for complexity that turns out to be unnecessary.
    If performance becomes a problem, a simple, clean design is usually a good starting
    point for refinements that improve performance.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的经验法则是尽可能以模块化和简单的设计开始。接口应该是窄的，只暴露出客户端执行任务所需的操作。不变性应该简单且在本地执行。避免过早进行会导致程序复杂、耦合紧密的优化，因为很多时候性能瓶颈并非所预期的那样。你不想为后来证明是不必要的复杂性付出代价。如果性能成为问题，一个简单、清晰的设计通常是改进性能的良好起点。
- en: In general, the right choice along this axis depends on the system being built,
    and engineering judgment is required. Software designers must balance issues of
    cost, performance, correctness, usability, and security. They are expected all
    the time to make judgment calls that trade off among these issues. The key to
    good software engineering is to realize when you need to make these judgments
    and to know the consequences of your choices.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，沿着这个轴线的正确选择取决于正在构建的系统，需要工程判断。软件设计师必须平衡成本、性能、正确性、可用性和安全性等问题。他们一直被期望做出在这些问题之间权衡的判断调用。良好软件工程的关键在于意识到何时需要做出这些判断，并了解选择的后果。
