- en: Todoアイテムの追加を実装する
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现添加Todo项目的功能
- en: 原文：[https://jsprimer.net/use-case/todoapp/form-event/](https://jsprimer.net/use-case/todoapp/form-event/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/use-case/todoapp/form-event/](https://jsprimer.net/use-case/todoapp/form-event/)
- en: ここからはJavaScriptでTodoアプリの機能を作成していきます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用JavaScript创建Todo应用程序的功能。
- en: このセクションでは、前のセクションでHTMLに目印をつけたTodoリスト（`#js-todo-list`）に対してTodoアイテムを追加する処理を実装します。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，将实现在前一节中已标记了的Todo列表（`#js-todo-list`）上添加Todo项目的功能。
- en: '[](#add-todo-item)*Todoアイテムの追加*'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#add-todo-item)*添加Todo项目*'
- en: '*まず、Todoアプリではどのような操作をしたら、Todoアイテムを追加できるかを見ていきます。'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，我们将看看在Todo应用程序中，执行哪些操作会添加Todo项目。'
- en: Todoアプリでは、ユーザーが次のような操作をした場合に、Todoアイテムを追加します。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在Todo应用程序中，当用户执行以下操作时，将添加Todo项目。
- en: 入力欄にTodoアイテムのタイトルを入力する
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在输入框中输入Todo项目的标题
- en: 入力欄でEnterキーを押して送信する
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在输入框中按Enter键提交
- en: TodoリストにTodoアイテムが追加される
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Todo项目添加到Todo列表中
- en: これをJavaScriptで実現するには次のことが必要です。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，需要：
- en: Todoアイテムのタイトルを取得するために、input要素（入力欄）から内容を取得する
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了获取Todo项目的标题，需要从input元素（输入框）中获取内容
- en: Enterキーで送信されたことを知るために、form要素の`submit`イベント（送信）を監視する
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了知道已使用Enter键进行了提交，需要监视form元素的`submit`事件（提交）
- en: 入力内容をタイトルにしたTodoアイテムを作成し、Todoリスト（`#js-todo-list`）にTodoアイテム要素を追加する
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建以输入内容为标题的Todo项目，并将Todo项目元素添加到Todo列表（`#js-todo-list`）中
- en: まずは、form要素から送信されたイベントを受け取り、入力内容をコンソールログに表示してみることからはじめてみましょう。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从表单元素接收提交事件，并尝试在控制台日志中显示输入内容。
- en: '[](#input-to-console)*入力内容をコンソールに表示する*'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#input-to-console)*将输入内容显示在控制台中*'
- en: '*form要素でEnterキーを押して送信すると`submit`イベントが発生します。 この`submit`イベントはHTML要素の`addEventListener`メソッドを利用することで受け取れます。'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*当在表单元素中按下Enter键进行提交时，将触发`submit`事件。 可以使用HTML元素的`addEventListener`方法来接收此`submit`事件。'
- en: 次のコードでは、指定したform要素から`submit`イベントが発生したときに呼び出されるコールバック関数を登録しています。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码注册了一个回调函数，当指定的表单元素触发`submit`事件时调用。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: このようなイベントが発生した際に呼ばれるコールバック関数のことを**イベントリスナー**（イベントをリッスンするものという意味）と呼びます。 またイベントリスナーはイベントハンドラーとも呼ばれることがありますが、この書籍ではこの2つの言葉は同じ意味として扱います。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生这样的事件时，被调用的回调函数称为**事件监听器**（监听事件的东西）。 另外，事件监听器有时也称为事件处理程序，但在本书中，这两个词语具有相同的含义。
- en: フォームが送信されたときに入力内容をコンソールに表示するには、 `addEventListener`コールバック関数内で入力内容をConsole APIで出力すればよいことになります。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在表单提交时将输入内容显示在控制台中，只需在`addEventListener`回调函数内使用Console API输出输入内容即可。
- en: 入力内容はinput要素の`value`プロパティから取得できます。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从input元素的`value`属性中获取输入内容。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: これらを組み合わせて`App.js`に「入力内容をコンソールに表示」する機能を実装してみましょう。 `App`クラスに`mount`というメソッドを定義して、その中に処理を書いていきましょう。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些组合起来，实现在`App.js`中将输入内容显示在控制台的功能。 定义一个名为`mount`的方法，并在其中编写处理逻辑。
- en: 次のコードでは、フォーム（`#js-form`）をEnterで送信すると、input要素（`#js-form-input`）の内容をコンソールへ表示する処理を実装しています。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码注册了一个回调函数，当表单（`#js-form`）按Enter键提交时，将input元素（`#js-form-input`）的内容显示在控制台上。
- en: src/App.js
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: src/App.js
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: このままでは、Appの`mount`メソッドは呼び出されないため何も行われません。 そのため、`index.js`も変更して、`App`クラスの`mount`メソッドを呼び出すようにします。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此时尚未调用App的`mount`方法，因此不会执行任何操作。 因此，还需要更改`index.js`以调用`App`类的`mount`方法。
- en: index.js
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: これらの変更後にブラウザでページをリロードすると、Appの`mount`メソッドが実行されるようになります。 `submit`イベントがリッスンされているので、入力欄に何か入力してEnterで送信してみるとその内容がコンソールに表示されます。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行这些更改后，刷新页面，将执行App的`mount`方法。 因为已经监听了`submit`事件，所以尝试在输入框中输入内容并按Enter键提交，该内容将显示在控制台中。
- en: '![入力内容がコンソールに表示される](../Images/4136a4c8ddc2954ea1cb3c3881e4e949.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![输入内容在控制台中显示](../Images/4136a4c8ddc2954ea1cb3c3881e4e949.png)'
- en: 先ほどのAppの`mount`メソッドでは、`submit`イベントのイベントリスナー内で`event.preventDefault`メソッドを呼び出しています。
    `event.preventDefault`メソッドは、`submit`イベントの発生元であるフォームが持つデフォルトの動作をキャンセルするメソッドです。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述App的`mount`方法中，调用了`event.preventDefault`方法来取消`submit`事件的默认行为。 `event.preventDefault`方法用于取消表单所在的默认操作。
- en: フォームが持つデフォルトの動作とは、フォームの内容を指定したURLへ送信するという動作です。 ここでは`form`要素に送信先が指定されていないため、現在のURLに対してフォームの内容を送信します。
    しかしこの動作は邪魔になるため、`event.preventDefault`メソッドを呼び出すことで、このデフォルトの動作をキャンセルしています。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 表单的默认行为是将表单内容提交到指定的URL。 由于在这里没有为`form`元素指定目标，因此将表单内容提交到当前URL。 但是，由于这种行为会干扰，因此调用`event.preventDefault`方法来取消此默认行为。
- en: src/App.jsより抜粋
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 摘自src/App.js
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 現在のURLに対してフォームの送信が行われると、結果的にページがリロードされてしまいます。 そのため、`event.preventDefault()`を呼び出し、デフォルトの動作をキャンセルしていました。
    `event.preventDefault()`をコメントアウトすると、ページがリロードされてしまうことが確認できます。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交到当前URL时，页面将被重新加载。 因此，调用了`event.preventDefault()`来取消默认行为。 如果取消注释`event.preventDefault()`，则可以确认页面将被重新加载。
- en: src/App.jsから一部をコメントアウトした例
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中摘自src/App.js的部分
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ここまでで`todoapp`ディレクトリに、次のような変更を加えました。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 已经在`todoapp`目录下做出如下更改。
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ここまでのTodoアプリは次のURLで確認できます。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在以下URL中查看到此Todo应用程序。
- en: '[https://jsprimer.net/use-case/todoapp/form-event/prevent-event/](https://jsprimer.net/use-case/todoapp/form-event/prevent-event/)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://jsprimer.net/use-case/todoapp/form-event/prevent-event/](https://jsprimer.net/use-case/todoapp/form-event/prevent-event/)'
- en: '[](#input-to-todolist)*入力内容をTodoリストに表示する*'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#input-to-todolist)*将输入内容显示在Todo列表中*'
- en: '*フォーム送信時に入力内容を取得する方法がわかったので、次はその入力内容をTodoリスト（`#js-todo-list`）に表示します。'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*已经了解到如何获取表单提交时的输入内容，接下来将在Todo列表（`#js-todo-list`）中显示这些输入内容。'
- en: HTMLではリストのアイテムを記述する際には`<li>`タグを使います。 また後ほどTodoリストに表示するTodoアイテムの要素には、完了状態を表すチェックボックスや削除ボタンなども含めたいです。
    これらの要素を含むものを手続き的にDOM APIで作成すると見通しが悪くなるため、HTML文字列からHTML要素を生成するユーティリティモジュールを作成しましょう。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML中，要描述列表项，需要使用`<li>`标签。 另外，希望包含有表示完成状态的复选框和删除按钮等的Todo项目元素。 由于从DOM API以程序方式创建这些元素会使代码难以阅读，因此创建一个从HTML字符串生成HTML元素的实用程序模块。
- en: 次の`html-util.js`というファイルを`src/view/html-util.js`というパスに作成します。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将名为`html-util.js`的文件创建在路径`src/view/html-util.js`下。
- en: 'この`html-util.js`は「[ajaxapp: HTML文字列をDOMに追加する](../../ajaxapp/display/#html-to-dom)」でも利用した`escapeSpecialChars`をベースにしています。
    ajaxappでの`escapeHTML`タグ関数では出力は**HTML文字列**でしたが、今回作成する`element`タグ関数の出力は**HTML要素**（Element）です。'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '此`html-util.js`基于在「[ajaxapp: 将HTML字符串添加到DOM](../../ajaxapp/display/#html-to-dom)」中使用的`escapeSpecialChars`。
    在ajaxapp中，`escapeHTML`函数的输出是**HTML字符串**，而本次创建的`element`函数的输出是**HTML元素**（Element）。'
- en: Todoリスト（`#js-todo-list`）というすでに存在する要素に対して要素を**追加**するには、HTML文字列ではなくHTML要素が必要になります。
    また、HTML文字列に対しては`addEventListener`でイベントをリッスンできません。 そのため、チェックボックスの状態が変わったことや削除ボタンが押されたことを知る必要があるTodoアプリではHTML要素が必要になります。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Todoリスト（`#js-todo-list`）というすでに存在する要素に対して要素を**追加**するには、HTML文字列ではなくHTML要素が必要になります。
    また、HTML文字列に対しては`addEventListener`でイベントをリッスンできません。 そのため、チェックボックスの状態が変わったことや削除ボタンが押されたことを知る必要があるTodoアプリではHTML要素が必要になります。
- en: src/view/html-util.js
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: src/view/html-util.js
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`element`タグ関数では、同じファイルに定義した`htmlToElement`関数を使ってHTML文字列からHTML要素を作成しています。 `htmlToElement`関数の中で利用している[template要素](https://developer.mozilla.org/ja/docs/Web/HTML/Element/template)はHTML5で追加された、HTML文字列の断片からHTML要素を作成できる要素です。'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`element`タグ関数では、同じファイルに定義した`htmlToElement`関数を使ってHTML文字列からHTML要素を作成しています。 `htmlToElement`関数の中で利用している[template要素](https://developer.mozilla.org/ja/docs/Web/HTML/Element/template)はHTML5で追加された、HTML文字列の断片からHTML要素を作成できる要素です。'
- en: この`element`タグ関数を使うことで、次のようにHTML文字列からHTML要素を作成できます。 作成した要素は、`appendChild`メソッドなどで既存の要素に子要素として追加できます。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: この`element`タグ関数を使うことで、次のようにHTML文字列からHTML要素を作成できます。 作成した要素は、`appendChild`メソッドなどで既存の要素に子要素として追加できます。
- en: elementタグ関数のサンプルコード
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: elementタグ関数のサンプルコード
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ブラウザが提供する`appendChild`メソッドは子要素を追加するだけなので、すでに別の要素がある場合は末尾に追加されます。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ブラウザが提供する`appendChild`メソッドは子要素を追加するだけなので、すでに別の要素がある場合は末尾に追加されます。
- en: '`render`関数は指定したコンテナ要素（親となる要素）の子要素を上書きする関数となります。 動作的には一度子要素をすべて消したあとに`appendChild`で子要素として追加しています。'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`render`関数は指定したコンテナ要素（親となる要素）の子要素を上書きする関数となります。 動作的には一度子要素をすべて消したあとに`appendChild`で子要素として追加しています。'
- en: render関数のサンプルコード
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: render関数のサンプルコード
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 実際に、この`element`タグ関数と`render`関数を使って、フォームから送信された入力内容をTodoリストに要素として追加してみます。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 実際に、この`element`タグ関数と`render`関数を使って、フォームから送信された入力内容をTodoリストに要素として追加してみます。
- en: まず最初に、`App.js`から先ほど作成した`html-util.js`の`element`タグ関数と`render`関数を`import`します。
    次に、Todoアイテムをまとめるリストを`todoListElement`として定義し、表示されているTodoアイテムの数を`todoItemCount`として定義します。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: まず最初に、`App.js`から先ほど作成した`html-util.js`の`element`タグ関数と`render`関数を`import`します。
    次に、Todoアイテムをまとめるリストを`todoListElement`として定義し、表示されているTodoアイテムの数を`todoItemCount`として定義します。
- en: '`submit`イベントのリスナー関数で、入力された内容をもとにTodoリストとTodoアイテム数の表示を更新していきます。 Todoアイテムを表現する要素を作成し、Todoリストの子要素として追加（`appendChild`）して、`render`関数を使ってコンテナ要素の中身にTodoリストで上書きしています。
    最後にTodoアイテムの数を1増やして、Todoアイテム数（`#js-todo-count`）のテキスト（`textContent`）を更新します。'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`submit`イベントのリスナー関数で、入力された内容をもとにTodoリストとTodoアイテム数の表示を更新していきます。 Todoアイテムを表現する要素を作成し、Todoリストの子要素として追加（`appendChild`）して、`render`関数を使ってコンテナ要素の中身にTodoリストで上書きしています。
    最後にTodoアイテムの数を1増やして、Todoアイテム数（`#js-todo-count`）のテキスト（`textContent`）を更新します。'
- en: src/App.js
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: src/App.js
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: これらの変更後にブラウザでページをリロードし、フォームに入力してからEnterを押すとTodoリストに**Todoアイテムが追加**されます。 また、入力内容を送信するたびに`todoItemCount`が加算され、**Todoアイテム数**の表示も更新されます。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: これらの変更後にブラウザでページをリロードし、フォームに入力してからEnterを押すとTodoリストに**Todoアイテムが追加**されます。 また、入力内容を送信するたびに`todoItemCount`が加算され、**Todoアイテム数**の表示も更新されます。
- en: '![Todoリストへアイテムを追加](../Images/58a9588c28aa0887c5a618769da1c5fa.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Todoリストへアイテムを追加](../Images/58a9588c28aa0887c5a618769da1c5fa.png)'
- en: このセクションでの変更点は次のとおりです。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: このセクションでの変更点は次のとおりです。
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: ここまでのTodoアプリは次のURLで確認できます。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ここまでのTodoアプリは次のURLで確認できます。
- en: '[https://jsprimer.net/use-case/todoapp/form-event/add-todo-item/](https://jsprimer.net/use-case/todoapp/form-event/add-todo-item/)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://jsprimer.net/use-case/todoapp/form-event/add-todo-item/](https://jsprimer.net/use-case/todoapp/form-event/add-todo-item/)'
- en: '[](#conclusion)*まとめ*'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)*まとめ*'
- en: '*このセクションではform要素の`submit`イベントをリッスンし、入力内容を元にTodoアイテムを作成し、これをTodoリストに追加する機能を実装しました。
    今回のTodoアイテムの追加のように、多くのウェブアプリは何らかのイベントをリッスンして表示を更新します。 このような、イベントが発生したことを元に処理を進める方法を**イベント駆動**（イベントドリブン）と呼びます。'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*このセクションではform要素の`submit`イベントをリッスンし、入力内容を元にTodoアイテムを作成し、これをTodoリストに追加する機能を実装しました。
    今回のTodoアイテムの追加のように、多くのウェブアプリは何らかのイベントをリッスンして表示を更新します。 このような、イベントが発生したことを元に処理を進める方法を**イベント駆動**（イベントドリブン）と呼びます。'
- en: 今回のTodoアイテムの追加では、`submit`イベントを入力にして、Todoリスト要素を**直接HTML要素として追加**するという方法を取っていました。
    このように直接DOMを更新するという方法はコードが短くなりますが、DOMのみにしか状態が残らないため柔軟性がなくなるという問題があります。 次のセクションでは、実際に起きる問題やそれを解決するための仕組みを見ていきます。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 今回のTodoアイテムの追加では、`submit`イベントを入力にして、Todoリスト要素を**直接HTML要素として追加**するという方法を取っていました。
    このように直接DOMを更新するという方法はコードが短くなりますが、DOMのみにしか状態が残らないため柔軟性がなくなるという問題があります。 次のセクションでは、実際に起きる問題やそれを解決するための仕組みを見ていきます。
- en: '[](#section-checklist)*このセクションのチェックリスト*'
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#section-checklist)*このセクションのチェックリスト*'
- en: '**   フォームの送信を`submit`イベントで受け取り、入力内容を確認した'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**   フォームの送信を`submit`イベントで受け取り、入力内容を確認した'
- en: HTML文字列からHTML要素を作成する`html-util.js`を実装した
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML文字列からHTML要素を作成する`html-util.js`を実装した
- en: フォームからTodoアイテムを追加した
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: フォームからTodoアイテムを追加した
- en: Todoアイテムの追加に合わせてTodoアイテム数を更新した
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Todoアイテムの追加に合わせてTodoアイテム数を更新した
- en: このセクションで、TodoアプリにTodoアイテムを追加する機能が実装できました。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: このセクションで、TodoアプリにTodoアイテムを追加する機能が実装できました。
- en: Todoアイテムを追加できる
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Todoアイテムを追加できる
- en: Todoアプリに実装する残りの機能は次のとおりです。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Todoアプリに実装する残りの機能は次のとおりです。
- en: Todoアイテムの完了状態を更新できる
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Todoアイテムの完了状態を更新できる
- en: Todoアイテムを削除できる*****
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Todoアイテムを削除できる*****
