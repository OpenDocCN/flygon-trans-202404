- en: '"go get" command'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '"go get"命令'
- en: '"go get" command'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '"go get"命令'
- en: '"`go get`" command is the standard way of downloading and installing packages
    and related dependencies, and let''s check the particulars of it through an example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '"`go get`"命令是下载和安装包及其相关依赖项的标准方式，让我们通过一个示例来查看它的细节：'
- en: (1) Create a [playstack](https://github.com/NanXiao/playstack) repository in
    github;
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: (1) 在github中创建一个[playstack](https://github.com/NanXiao/playstack)仓库；
- en: (2) There is a `LICENSE` file and `play` directory in `playstack` folder;
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: (2) 在`playstack`文件夹中有一个`LICENSE`文件和一个`play`目录；
- en: '(3) The `play` directory includes one `main.go` file:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: (3) `play`目录包括一个`main.go`文件：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `main` package has one dependency package: [stack](https://github.com/NanXiao/stack).
    Actually, the `main()` function doesn''t play anything meaningful, and we just
    use this project as a sample. So the directory structure of `playstack` looks
    like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`包有一个依赖包：[stack](https://github.com/NanXiao/stack)。实际上，`main()`函数并没有执行任何有意义的操作，我们只是用这个项目作为一个示例。所以`playstack`的目录结构如下：'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Clean the `$GOPATH` directory, and use "`go get`" command to download `playstack`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 清理`$GOPATH`目录，并使用"`go get`"命令下载`playstack`：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '"`go get`" command complains "`no buildable Go source files in ...`", and it
    is because the objects which "`go get`" works are **packages**, not **repositories**.There
    is no `*.go` source files in `playstack`, so it is not a valid package.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '"`go get`"命令抱怨"`no buildable Go source files in ...`"，这是因为"`go get`"操作的对象是**包**，而不是**仓库**。在`playstack`中没有`*.go`源文件，因此它不是一个有效的包。'
- en: 'Tidy up `$GOPATH` folder, and execute "`go get github.com/NanXiao/playstack/play`"
    instead:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 整理`$GOPATH`文件夹，并执行"`go get github.com/NanXiao/playstack/play`"：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can see not only `playstack` and its dependency (`stack`) are all downloaded,
    but also the command (`play`) and library (`stack`) are all installed in the right
    place.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到不仅下载了`playstack`及其依赖项（`stack`），而且命令（`play`）和库（`stack`）都安装在了正确的位置。
- en: 'The mechanism behind "`go get`" command is it will fetch the repositories of
    packages and dependencies (E.g., use "`git clone`".), and you can check the detailed
    workflow by "`go get -x`":'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '"`go get`"命令背后的机制是它将获取包和依赖项的仓库（例如，使用"`git clone`"）。您可以通过"`go get -x`"来查看详细的工作流程：'
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: From the above output, we can see `playstack` repository is cloned first, then
    `stack`, At last the compilation and installation are executed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的输出中，我们可以看到首先克隆了`playstack`仓库，然后是`stack`，最后执行编译和安装。
- en: 'If you only want to download the source files, and not compile and install,
    using "`go get -d`" command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想下载源文件，而不编译和安装，可以使用"`go get -d`"命令：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can also use "`go get -u`" to update packages and their dependencies.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用"`go get -u`"来更新包及其依赖项。
- en: 'Reference:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：
- en: '[Command go](https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies);'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[Command go](https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies);'
- en: '[How does "go get" command know which files should be downloaded?](https://groups.google.com/forum/#!topic/golang-nuts/-V9QR8ncf4w).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[“go get”命令如何知道应该下载哪些文件？](https://groups.google.com/forum/#!topic/golang-nuts/-V9QR8ncf4w)。'
