- en: '"go get" command'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"go get" command'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '"`go get`" command is the standard way of downloading and installing packages
    and related dependencies, and let''s check the particulars of it through an example:'
  prefs: []
  type: TYPE_NORMAL
- en: (1) Create a [playstack](https://github.com/NanXiao/playstack) repository in
    github;
  prefs: []
  type: TYPE_NORMAL
- en: (2) There is a `LICENSE` file and `play` directory in `playstack` folder;
  prefs: []
  type: TYPE_NORMAL
- en: '(3) The `play` directory includes one `main.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `main` package has one dependency package: [stack](https://github.com/NanXiao/stack).
    Actually, the `main()` function doesn''t play anything meaningful, and we just
    use this project as a sample. So the directory structure of `playstack` looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Clean the `$GOPATH` directory, and use "`go get`" command to download `playstack`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '"`go get`" command complains "`no buildable Go source files in ...`", and it
    is because the objects which "`go get`" works are **packages**, not **repositories**.There
    is no `*.go` source files in `playstack`, so it is not a valid package.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tidy up `$GOPATH` folder, and execute "`go get github.com/NanXiao/playstack/play`"
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can see not only `playstack` and its dependency (`stack`) are all downloaded,
    but also the command (`play`) and library (`stack`) are all installed in the right
    place.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mechanism behind "`go get`" command is it will fetch the repositories of
    packages and dependencies (E.g., use "`git clone`".), and you can check the detailed
    workflow by "`go get -x`":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: From the above output, we can see `playstack` repository is cloned first, then
    `stack`, At last the compilation and installation are executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you only want to download the source files, and not compile and install,
    using "`go get -d`" command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can also use "`go get -u`" to update packages and their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Command go](https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies);'
  prefs: []
  type: TYPE_NORMAL
- en: '[How does "go get" command know which files should be downloaded?](https://groups.google.com/forum/#!topic/golang-nuts/-V9QR8ncf4w).'
  prefs: []
  type: TYPE_NORMAL
