["```\nts`export  type  <data-lsp lsp=\"type Rectangle = {\n    height: number;\n    width: number;\n}\">Rectangle</data-lsp>  = { <data-lsp lsp=\"(property) height: number\">height</data-lsp>:  number; <data-lsp lsp=\"(property) width: number\">width</data-lsp>:  number;};export  const  <data-lsp lsp=\"const Rectangle: {\n    from(height: number, width: number): Rectangle;\n}\">Rectangle</data-lsp>  = {  <data-lsp lsp=\"(method) from(height: number, width: number): Rectangle\">from</data-lsp>(<data-lsp lsp=\"(parameter) height: number\">height</data-lsp>:  number, <data-lsp lsp=\"(parameter) width: number\">width</data-lsp>:  number):  <data-lsp lsp=\"type Rectangle = {\n    height: number;\n    width: number;\n}\">Rectangle</data-lsp> {  return { <data-lsp lsp=\"(property) height: number\">height</data-lsp>, <data-lsp lsp=\"(property) width: number\">width</data-lsp>, }; },};`\n```", "```\nts`export  type <data-lsp lsp=\"type Rectangle = {\n    height: number;\n    width: number;\n}\">Rectangle</data-lsp> = { <data-lsp lsp=\"(property) height: number\">height</data-lsp>:  number; <data-lsp lsp=\"(property) width: number\">width</data-lsp>:  number;};export  const  <data-lsp lsp=\"const Rectangle: {\n    from(height: number, width: number): Rectangle;\n}\">Rectangle</data-lsp>  = { <data-lsp lsp=\"(method) from(height: number, width: number): Rectangle\">from</data-lsp>(<data-lsp lsp=\"(parameter) height: number\">height</data-lsp>:  number, <data-lsp lsp=\"(parameter) width: number\">width</data-lsp>:  number): <data-lsp lsp=\"type Rectangle = {\n    height: number;\n    width: number;\n}\">Rectangle</data-lsp> {  return { <data-lsp lsp=\"(property) height: number\">height</data-lsp>, <data-lsp lsp=\"(property) width: number\">width</data-lsp>, }; },};`\n```", "```\nts`import { <data-lsp lsp=\"(alias) type Rectangle = {\n    height: number;\n    width: number;\n}\n(alias) const Rectangle: {\n    from(height: number, width: number): Rectangle;\n}\nimport Rectangle\">Rectangle</data-lsp> } from  \"./rectangle\";const  <data-lsp lsp=\"const rec: Rectangle\">rec</data-lsp>:  <data-lsp lsp=\"(alias) type Rectangle = {\n    height: number;\n    width: number;\n}\nimport Rectangle\">Rectangle</data-lsp>  =  <data-lsp lsp=\"(alias) const Rectangle: {\n    from(height: number, width: number): Rectangle;\n}\nimport Rectangle\">Rectangle</data-lsp>.<data-lsp lsp=\"(method) from(height: number, width: number): Rectangle\">from</data-lsp>(1,  3);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const rec: Rectangle\">rec</data-lsp>.<data-lsp lsp=\"(property) height: number\">height</data-lsp>);1<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const rec: Rectangle\">rec</data-lsp>.<data-lsp lsp=\"(property) width: number\">width</data-lsp>);3`\n```", "```\nts`import { <data-lsp lsp=\"(alias) type Rectangle = {\n    height: number;\n    width: number;\n}\n(alias) const Rectangle: {\n    from(height: number, width: number): Rectangle;\n}\nimport Rectangle\">Rectangle</data-lsp> } from  \"./rectangle\";const  <data-lsp lsp=\"const rec: Rectangle\">rec</data-lsp>: <data-lsp lsp=\"(alias) type Rectangle = {\n    height: number;\n    width: number;\n}\nimport Rectangle\">Rectangle</data-lsp> =  <data-lsp lsp=\"(alias) const Rectangle: {\n    from(height: number, width: number): Rectangle;\n}\nimport Rectangle\">Rectangle</data-lsp>.<data-lsp lsp=\"(method) from(height: number, width: number): Rectangle\">from</data-lsp>(1,  3);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const rec: Rectangle\">rec</data-lsp>.<data-lsp lsp=\"(property) height: number\">height</data-lsp>);1<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const rec: Rectangle\">rec</data-lsp>.<data-lsp lsp=\"(property) width: number\">width</data-lsp>);3`\n```"]