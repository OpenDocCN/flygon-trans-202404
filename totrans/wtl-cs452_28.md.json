["```\n            FOREVER {\n                Send( A, request, result )\n                ...\n            }\n            ```", "```\n            FOREVER {\n                Send( A, result, request )\n                ...\n            }\n            ```", "```\n            FOREVER {\n                Send( A, result, request )\n                result.data = AwaitEvent( request.event )\n                ...\n            }\n            ```", "```\n            FOREVER {\n                Send( A1, request, result )\n                Send( A2, result, request )\n            }\n            ```", "```\n        Send( prop1, getres1, ... );\n        Send( prop2, getres2, ... );\n        // Use the resources and release them\n        ```", "```\n        Send( prop2, getres2, ... );\n        Send( prop1, getres1, ... );\n        // Use the resources and release them\n        ```", "```\n        FOREVER {\n           Receive( &clientTid, req, ... );\n           switch ( req-type ) {\n           case REQUEST:\n              if( available ) { \n                 Reply( clientTid, use-it, ... );\n                 available = false;\n              }\n              else enqueue( clientTid );\n           case RELEASE:\n              available = true;\n              Reply( clientTid, \"thanks\", ... );\n              if( !empty( Q ) ) {\n                 available = false;\n                 Reply( dequeue( ), use-it, ... );\n              }\n           }\n        }\n        ```", "```\n    FOREVER {\n       Receive( &clientTid, req, ... );\n       switch ( req-type ) {\n       case REQUEST:\n          if( available ) { \n             Reply( clientTid, use-it, ... );\n             available = false;\n          }\n          else Reply( clientTid, \"sorry\", ...);\n       case RELEASE:\n          available = true;\n          Reply( clientTid, \"thanks\", ... );\n       }\n    }\n    ```", "```\n    while ( Send( prop1, getr1, ... ) != GotIt ) ; \n    while ( Send( prop2, getr2, ... ) != GotIt ) ; \n    // Use the resources\n    ```", "```\nWhile ( no resources ) {\n   Send( prop1, getres1, result );\n   while ( result == \"sorry\" ) {\n   if ( result == \"sorry\" ) {\n      Delay( ... );\n      Send( prop1, getres1, result );\n   }\n   Send( prop2, getres2, result );\n   if ( result == \"sorry\" ) {\n      Send( prop1, relres1, ... );\n      Delay( ... );\n   } else {\n      break; \n   }\n}\n```"]