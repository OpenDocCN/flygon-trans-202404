- en: IndPrinciplesInduction Principles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 归纳原则归纳原则
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Require Export ProofObjects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导出证明对象。
- en: '[PRE1]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Check nat_ind.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 nat_ind。
- en: '(*  ===> nat_ind :            forall P : nat -> Prop,               P 0  ->
                  (forall n : nat, P n -> P (S n))  ->               forall n : nat, P n  *)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '(* ===> nat_ind : forall P : nat -> Prop, P 0 -> (forall n : nat, P n -> P
    (S n)) -> forall n : nat, P n *)'
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Theorem mult_0_r'' : ∀n:nat,'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '定理 mult_0_r'' : ∀n:nat，'
- en: n * 0 = 0.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: n * 0 = 0。
- en: Proof.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: apply nat_ind.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 nat_ind。
- en: '- (* n = O *) reflexivity.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* n = O *) reflexivity。'
- en: '- (* n = S n'' *) simpl. intros n'' IHn''. rewrite → IHn''.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* n = S n'' *) 简化。 引入 n''。 重写 → IHn''。'
- en: reflexivity. Qed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: reflexivity。Qed。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Theorem plus_one_r'' : ∀n:nat,'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '定理 plus_one_r'' : ∀n:nat，'
- en: n + 1 = S n.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: n + 1 = S n。
- en: Proof.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填入 *) 已证明。
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: t_ind : ∀P : t → Prop,
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: t_ind ：∀P：t→Prop，
- en: '... case for c[1] ... →'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '... 对于 c[1] 的情况 ... →'
- en: '... case for c[2] ... → ...'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '... 对于 c[2] 的情况 ... → ...'
- en: '... case for cn ... →'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '... 对于 cn 的情况 ... →'
- en: ∀n : t, P n
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '∀n : t, P n'
- en: The specific shape of each case depends on the arguments to the
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每种情况的具体形式取决于参数的数量
- en: corresponding constructor.  Before trying to write down a general
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相应的构造函数。 在尝试写下一般规则之前
- en: rule, let's look at some more examples. First, an example where
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规则，让我们看一些更多的例子。 首先是一个例子
- en: 'the constructors take no arguments:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构造函数不带参数：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Exercise: 1 star, optional (rgb)'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：1星，可选（rgb）
- en: Write out the induction principle that Coq will generate for the
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 写出 Coq 将为以下定义生成的归纳原理
- en: following datatype.  Write down your answer on paper or type it
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来的数据类型。 （同样，请在纸上写下或
- en: into a comment, and then compare it with what Coq prints.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其键入注释中，然后与 Coq 的输出进行比较。
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ☐
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: Here's another example, this time with one of the constructors
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是另一个例子，这次使用其中一个构造函数
- en: taking some arguments.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 采取一些参数。
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Exercise: 1 star, optional (natlist1)'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：1星，可选（natlist1）
- en: Suppose we had written the above definition a little
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设我们稍微修改了上述定义
- en: 'differently:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不同地：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now what will the induction principle look like?  ☐
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在归纳原理会是什么样子呢？ ☐
- en: 'From these examples, we can extract this general rule:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从这些例子中，我们可以提取出这个通用规则：
- en: The type declaration gives several constructors; each corresponds to one clause
    of the induction principle.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型声明提供了几个构造函数； 每个对应于归纳原理的一个子句。
- en: Each constructor c takes argument types a[1] ... an.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个构造函数 c 都带有参数类型 a[1] ... an。
- en: Each ai can be either t (the datatype we are defining) or some other type s.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 ai 可以是正在定义的数据类型 t，也可以是其他类型 s。
- en: 'The corresponding case of the induction principle says:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相应的归纳原理的情况是：
- en: '"For all values x[1]...xn of types a[1]...an, if P holds for each of the inductive
    arguments (each xi of type t), then P holds for c x[1] ... xn".'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “对于类型 a[1]...an 的所有值 x[1]...xn，如果 P 对归纳参数（每个类型为 t 的 xi）都成立，则 P 对 c x[1] ...
    xn 也成立”。
- en: 'Exercise: 1 star, optional (byntree_ind)'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：1星，可选（byntree_ind）
- en: Write out the induction principle that Coq will generate for the
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 写出 Coq 将为以下定义生成的归纳原理
- en: following datatype.  (Again, write down your answer on paper or
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来的数据类型。 （再次，请在纸上写下或
- en: type it into a comment, and then compare it with what Coq
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其键入注释中，然后与 Coq 的输出进行比较
- en: prints.)
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出）
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ☐
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 1 star, optional (ex_set)'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：1星，可选（ex_set）
- en: Here is an induction principle for an inductively defined
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个归纳原理，适用于一个归纳定义的
- en: set.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 集。
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Inductive ExSet : Type :='
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '归纳 ExSet : Type :='
- en: (* FILL IN HERE *)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填入 *)
- en: .
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Inductive list (X:Type) : Type :=
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 形式化列表（X:Type）：类型 :=
- en: '| nil : list X'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '| nil : list X'
- en: '| cons : X → list X → list X.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '| cons : X → list X → list X.'
- en: is very similar to that of natlist.  The main difference is
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 natlist 非常相似。 主要区别在于
- en: 'that, here, the whole definition is *parameterized* on a set X:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即，这里整个定义是在集合 X 上 *参数化* 的：
- en: that is, we are defining a *family* of inductive types list X,
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也就是说，我们正在定义一个 *族* 的归纳类型 list X，
- en: one for each X.  (Note that, wherever list appears in the body
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个 X 都有一个。 （请注意，在构造函数中出现 list 的地方
- en: of the declaration, it is always applied to the parameter X.)
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在声明的情况下，它总是应用于参数 X。）
- en: 'The induction principle is likewise parameterized on X:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 归纳原理也是在 X 上 *参数化* 的：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Inductive tree (X:Type) : Type :='
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳 tree（X：Type）：Type :=
- en: '| leaf : X → tree X'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '| leaf : X → tree X'
- en: '| node : tree X → tree X → tree X.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '| node : tree X → tree X → tree X。'
- en: Check tree_ind.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 tree_ind。
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'mytype_ind :'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 'mytype_ind :'
- en: ∀(X : Type) (P : mytype X → Prop),
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ∀（X：Type）（P：mytype X → Prop），
- en: (∀x : X, P (constr1 X x)) →
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '(∀x : X, P (constr1 X x)) →'
- en: (∀n : nat, P (constr2 X n)) →
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '(∀n : nat, P (constr2 X n)) →'
- en: (∀m : mytype X, P m →
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '(∀m : mytype X, P m →'
- en: ∀n : nat, P (constr3 X m n)) →
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '∀n : nat, P (constr3 X m n)) →'
- en: ∀m : mytype X, P m
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '∀m : mytype X, P m'
- en: ☐
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 1 star, optional (foo)'
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：1星，可选（foo）
- en: Find an inductive definition that gives rise to the
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 找到导致
- en: 'following induction principle:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是归纳原理：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Inductive foo'' (X:Type) : Type :='
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'Inductive foo'' (X:Type) : Type :='
- en: '| C[1] : list X → foo'' X → foo'' X'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '| C[1] : list X → foo'' X → foo'' X'
- en: '| C[2] : foo'' X.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '| C[2] : foo'' X。'
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'foo''_ind :'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'foo''_ind :'
- en: ∀(X : Type) (P : foo' X → Prop),
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ∀(X : Type) (P : foo' X → Prop),
- en: (∀(l : list X) (f : foo' X),
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: (∀(l : list X) (f : foo' X),
- en: _______________________ →
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: _______________________ →
- en: _______________________   ) →
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: _______________________   ) →
- en: ___________________________________________ →
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ___________________________________________ →
- en: ∀f : foo' X, ________________________
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ∀f : foo' X, ________________________
- en: ☐
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: ∀P : nat → Prop,
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ∀P : nat → Prop,
- en: P 0  →
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: P 0  →
- en: (∀n : nat, P n → P (S n))  →
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: (∀n : nat, P n → P (S n))  →
- en: ∀n : nat, P n
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ∀n : nat, P n
- en: is a generic statement that holds for all propositions
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是一个适用于所有命题的通用陈述
- en: P (or rather, strictly speaking, for all families of
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: P（或者更准确地说，对于所有的命题族
- en: propositions P indexed by a number n).  Each time we
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 命题P以数字n为索引）。每次我们
- en: use this principle, we are choosing P to be a particular
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个原理，我们选择P为一个特定的
- en: expression of type nat→Prop.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 类型为nat→Prop的表达式。
- en: We can make proofs by induction more explicit by giving
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过给出更明确的归纳原理来使归纳证明更加明确
- en: this expression a name.  For example, instead of stating
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 给这个表达式一个名称。例如，不是陈述
- en: the theorem mult_0_r as "∀ n, n * 0 = 0," we can
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 定理mult_0_r为“∀ n, n * 0 = 0”，我们可以
- en: write it as "∀ n, P_m0r n", where P_m0r is defined
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将其写为“∀ n, P_m0r n”，其中P_m0r被定义为
- en: as...
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如...
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '... or equivalently:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...或者等价地：'
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now it is easier to see where P_m0r appears in the proof.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在更容易看到P_m0r在证明中的出现位置。
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This extra naming step isn't something that we do in
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个额外的命名步骤并不是我们在
- en: normal proofs, but it is useful to do it explicitly for an example
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正常的证明，但对于一个例子来说，明确地这样做是有用的
- en: or two, because it allows us to see exactly what the induction
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或两个，因为这样可以让我们准确地看到归纳的过程
- en: hypothesis is.  If we prove ∀ n, P_m0r n by induction on
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设是。如果我们通过对n进行归纳证明∀ n, P_m0r n
- en: n (using either induction or apply nat_ind), we see that the
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: n（使用归纳或应用nat_ind），我们看到
- en: first subgoal requires us to prove P_m0r 0 ("P holds for
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个子目标要求我们证明P_m0r 0（“P对0成立”）。
- en: zero"), while the second subgoal requires us to prove ∀ n', P_m0r n' → P_m0r
    (S n') (that is "P holds of S n' if it
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: zero”），而第二个子目标要求我们证明∀ n'，P_m0r n' → P_m0r (S n')（即“如果P对S n'成立，则P对n'成立”）。每次我们
- en: holds of n'" or, more elegantly, "P is preserved by S").
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对n成立”或者更优雅地说“P被S保持”）。
- en: The *induction hypothesis* is the premise of this latter
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 归纳假设是后者的前提
- en: implication — the assumption that P holds of n', which we are
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 蕴含关系 —— 假设P对n'成立，我们
- en: allowed to use in proving that P holds for S n'.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在证明P对S n'成立时允许使用
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Theorem plus_assoc'' : ∀n m p : nat,'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 定理plus_assoc'：∀n m p：nat，
- en: n + (m + p) = (n + m) + p.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: n + (m + p) = (n + m) + p.
- en: Proof.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: (* ...we first introduce all 3 variables into the context,      which amounts to saying "Consider an arbitrary n, m, and
         p..." *)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: (* ...我们首先将所有3个变量引入上下文，这相当于说“考虑任意的n，m和p...”*)
- en: intros n m p.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: intros n m p.
- en: (* ...We now use the induction tactic to prove P n (that      is, n + (m + p)
    = (n + m) + p) for _all_ n,      and hence also for the particular n that is in the context
         at the moment. *)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: (* ...现在我们使用归纳策略证明P n（即，n + (m + p) = (n + m) + p）对所有n成立，因此也对此刻上下文中的特定n成立。*)
- en: induction n as [| n'].
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对n进行归纳，如 [| n']。
- en: '- (* n = O *) reflexivity.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* n = O *) reflexivity.'
- en: '- (* n = S n'' *)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* n = S n'' *)'
- en: (* In the second subgoal generated by induction -- the        "inductive step" -- we must prove that P
    n' implies        P (S n') for all n'.  The induction tactic        automatically introduces n' and P
    n' into the context        for us, leaving just P (S n') as the goal. *)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在归纳生成的第二个子目标中，即“归纳步骤”中，我们必须证明对所有n'，P n' 蕴含 P (S n')。归纳策略会自动将n'和P n'引入上下文，只留下P
    (S n')作为目标。*)
- en: simpl. rewrite → IHn'. reflexivity. Qed.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 简化。rewrite → IHn'。reflexivity。Qed。
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Theorem plus_comm'' : ∀n m : nat,'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 定理plus_comm'：∀n m：nat，
- en: n + m = m + n.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: n + m = m + n。
- en: Proof.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: induction n as [| n'].
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对n进行归纳，如 [| n']。
- en: '- (* n = O *) intros m. rewrite ← plus_n_O. reflexivity.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* n = O *) intros m. rewrite ← plus_n_O. reflexivity.'
- en: '- (* n = S n'' *) intros m. simpl. rewrite → IHn''.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* n = S n'' *) intros m. simpl. rewrite → IHn''.'
- en: rewrite ← plus_n_Sm. reflexivity. Qed.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: rewrite ← plus_n_Sm. reflexivity. Qed.
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Theorem plus_comm'''' : ∀n m : nat,'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 定理plus_comm''：∀n m：nat，
- en: n + m = m + n.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: n + m = m + n.
- en: Proof.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: (* Let's do induction on m this time, instead of n... *)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: (* 这次我们对m进行归纳，而不是n...*)
- en: induction m as [| m'].
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对m进行归纳，如 [| m']。
- en: '- (* m = O *) simpl. rewrite ← plus_n_O. reflexivity.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* m = O *) simpl. rewrite ← plus_n_O。reflexivity。'
- en: '- (* m = S m'' *) simpl. rewrite ← IHm''.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* m = S m'' *) simpl. rewrite ← IHm''.'
- en: rewrite ← plus_n_Sm. reflexivity. Qed.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: rewrite ← plus_n_Sm。reflexivity。Qed。
- en: '[PRE23]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: (* FILL IN HERE *)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写*)
- en: '[PRE24]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Induction Principles in Prop
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Proposition中的归纳原理
- en: Earlier, we looked in detail at the induction principles that Coq
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 早些时候，我们详细研究了Coq的归纳原理
- en: generates for inductively defined *sets*.  The induction
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成用于归纳定义的*集合*的。归纳
- en: principles for inductively defined *propositions* like ev are a
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于归纳定义的*命题*的原则如ev是a
- en: tiny bit more complicated.  As with all induction principles, we
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 稍微复杂一些。与所有归纳原理一样
- en: want to use the induction principle on ev to prove things by
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 想要使用ev的归纳原理来证明事实
- en: inductively considering the possible shapes that something in ev
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 归纳考虑了ev中的可能形状
- en: can have.  Intuitively speaking, however, what we want to prove
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以有。直觉上讲，但我们要证明的是
- en: are not statements about *evidence* but statements about
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不是关于*证据*的陈述，而是关于
- en: '*numbers*: accordingly, we want an induction principle that lets'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*数字*：因此，我们希望一个归纳原理'
- en: us prove properties of numbers by induction on evidence.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们通过证据归纳来证明数字的属性。
- en: For example, from what we've said so far, you might expect the
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，从我们到目前为止所说的，您可能会期望
- en: inductive definition of ev...
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ev的归纳定义...
- en: '[PRE25]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: ev_ind_max : ∀P : (∀n : nat, ev n → Prop),
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ev_ind_max：∀P：（∀n：nat，ev n → Prop），
- en: P O ev_0 →
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: P O ev_0 →
- en: (∀(m : nat) (E : ev m),
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: （∀（m ： nat）（E ：ev m），
- en: P m E →
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: P m E →
- en: P (S (S m)) (ev_SS m E)) →
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: P（S（S m））（ev_SS m E））→
- en: ∀(n : nat) (E : ev n),
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: ∀（n ： nat）（E ：ev n），
- en: P n E
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: P n E
- en: '... because:'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...因为：'
- en: Since ev is indexed by a number n (every ev object E is a piece of evidence
    that some particular number n is even), the proposition P is parameterized by
    both n and E — that is, the induction principle can be used to prove assertions
    involving both an even number and the evidence that it is even.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于ev由数字n索引（每个ev对象E是某个特定数字n为偶数的证据），所以命题P参数化为n和E两者-也就是说，归纳原理可用于证明涉及偶数和证据的断言。
- en: 'Since there are two ways of giving evidence of evenness (ev has two constructors),
    applying the induction principle generates two subgoals:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于有两种提供偶数证据的方法（ev有两个构造函数），应用归纳原理会生成两个子目标：
- en: We must prove that P holds for O and ev_0.
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们必须证明P适用于O和ev_0。
- en: We must prove that, whenever n is an even number and E is an evidence of its
    evenness, if P holds of n and E, then it also holds of S (S n) and ev_SS n E.
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们必须证明，无论何时n是一个偶数，E是其偶数性的证据，如果P对n和E成立，则它也对S（S n）和ev_SS n E成立。
- en: If these subgoals can be proved, then the induction principle tells us that
    P is true for *all* even numbers n and evidence E of their evenness.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这些子目标可以证明，那么归纳原则告诉我们，P对*所有*偶数n及其偶数性的证据E都成立。
- en: 'This is more flexibility than we normally need or want: it is'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这比我们通常需要或想要的灵活性更大：
- en: giving us a way to prove logical assertions where the assertion
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给我们一种证明逻辑断言的方式
- en: involves properties of some piece of *evidence* of evenness, while
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 涉及某些偶数证据的性质，而不是
- en: all we really care about is proving properties of *numbers* that
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们真正关心的只是证明*数字*的属性
- en: are even — we are interested in assertions about numbers, not
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是偶数-我们对数字的断言感兴趣，而不是
- en: about evidence.  It would therefore be more convenient to have an
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于证据。因此，更方便的是
- en: induction principle for proving propositions P that are
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于证明命题P的归纳原理
- en: parameterized just by n and whose conclusion establishes P for
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数化只是通过n并且其结论为P
- en: 'all even numbers n:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有偶数n：
- en: '[PRE26]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Check ev_ind.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 检查ev_ind。
- en: (* ===> ev_ind         : forall P : nat -> Prop,           P 0 ->           (forall n : nat, ev n -> P n -> P (S (S n))) ->
              forall n : nat,           ev n -> P n *)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: （* ===> ev_ind ：对于所有P：nat -> Prop，P 0 -> （对于所有n：nat，ev n -> P n -> P（S（S n）））->
    对于所有n：nat，ev n -> P n *）
- en: '[PRE27]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Theorem ev_ev'' : ∀n, ev n → ev'' n.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 定理ev_ev'：∀n，ev n → ev' n。
- en: Proof.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: apply ev_ind.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 应用ev_ind。
- en: '- (* ev_0 *)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '- （* ev_0 *）'
- en: apply ev'_0.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 应用ev'_0。
- en: '- (* ev_SS *)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '- （* ev_SS *）'
- en: intros m Hm IH.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: intros m Hm IH。
- en: apply (ev'_sum 2 m).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 应用（ev'_sum 2 m）。
- en: + apply ev'_2.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: + 应用ev'_2。
- en: + apply IH.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: + 应用IH。
- en: Qed.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Qed。
- en: '[PRE28]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: (* Inductive le : nat -> nat -> Prop :=      | le_n : forall n, le n n      | le_S : forall n m, (le n m) -> (le n (S m)). *)
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: （* Inductive le：nat -> nat -> Prop：= | le_n：forall n，le n n | le_S：forall n
    m，（le n m）→（le n（S m））。*）
- en: '[PRE29]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Inductive le (n:nat) : nat → Prop :='
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳le（n：nat）：nat → Prop：=
- en: '| le_n : le n n'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '| le_n：le n n'
- en: '| le_S : ∀m, (le n m) → (le n (S m)).'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '| le_S：∀m，（le n m）→（le n（S m））。'
- en: Notation "m ≤ n" := (le m n).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 符号“m ≤ n”：=（le m n）。
- en: '[PRE30]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Check le_ind.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 检查le_ind。
- en: (* ===>  forall (n : nat) (P : nat -> Prop),            P n ->            (forall m : nat, n <= m -> P m -> P (S m)) ->
               forall n[0] : nat, n <= n[0] -> P n[0] *)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: （* === >  forall（n：nat）（P：nat -> Prop），P n -> （对于所有m：nat，n <= m -> P m -> P（S
    m））-> 对于所有n [0]：nat，n <= n [0] -> P n [0] *）
- en: '[PRE31]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: length l = length (x::l') = S (length l'),
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 长度 l = 长度 (x::l') = S (长度 l')，
- en: it suffices to show that
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只需证明
- en: '[PRE32]'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
