- en: Crash Course in Asymptotic Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渐近分析速成班
- en: Let us review the basic mathematical techniques for describing the time- and
    space-efficiency of algorithms. The "costs" of algorithmic operations are typically
    specified as functions of (properties of) their inputs. As a result, tools are
    required to "compare" functions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下描述算法的时间和空间效率的基本数学技巧。算法操作的“成本”通常被指定为它们输入的函数（属性）的函数。因此，需要工具来“比较”函数。
- en: Big-O Notation
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大-Oh符号
- en: '*f(n)* is *O(g(n))* if there exist constants *c > 0* and *N > 0* such that
    for all *n ≥ N*, *f(n) ≤ c·g(n)*. This is read "*f(n)* is Big-O of *g(n)*". Definitions
    sometimes vary in their uses of *>, ≥, <, and ≤*, but these differences do not
    matter much.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在常数 *c > 0* 和 *N > 0*，使得对于所有 *n ≥ N*，*f(n) ≤ c·g(n)*，则 *f(n)* 是 *O(g(n))*。这被称为“*f(n)*
    是 *g(n)* 的大-Oh”。定义有时在使用 *>, ≥, <,* 和 *≤* 时有所不同，但这些差异并不重要。
- en: '**Example**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**'
- en: '*f[1](n) = n/100*'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*f[1](n) = n/100*'
- en: '*f[2](n) = 100n*'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*f[2](n) = 100n*'
- en: '*f[3](n) = 100n + 23*'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*f[3](n) = 100n + 23*'
- en: '*f[1](n) is O(n)* because'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*f[1](n) 是 O(n)* 因为'
- en: '*f[1](n) ≤ n* for all *n ≥ 0*.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*f[1](n) ≤ n* 对于所有 *n ≥ 0*。'
- en: '*f[2](n) is O(n)* because'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*f[2](n) 是 O(n)* 因为'
- en: '*f[2](n) ≤ 100·n* for all *n ≥ 0*.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*f[2](n) ≤ 100·n* 对于所有 *n ≥ 0*。'
- en: '*f[3](n) is O(n)* because'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*f[3](n) 是 O(n)* 因为'
- en: '*f[3](n) ≤ 101·n* for all *n ≥ 23*, or'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*f[3](n) ≤ 101·n* 对于所有 *n ≥ 23*，或者'
- en: '*f[3](n) ≤ 102·n* for all *n ≥ 12*, or'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*f[3](n) ≤ 102·n* 对于所有 *n ≥ 12*，或者'
- en: '*f[3](n) ≤ 111·n* for all *n ≥ 3*, or'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*f[3](n) ≤ 111·n* 对于所有 *n ≥ 3*，或者'
- en: '*f[3](n) ≤ 200·n* for all *n ≥ 0*, or ...'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*f[3](n) ≤ 200·n* 对于所有 *n ≥ 0*，或...'
- en: Terminology
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 术语
- en: In computer science settings, *g(n)* is often referred to as Big-Omega of *f(n)*
    (written *g(n)* is *Ω(f(n))*) if *f(n)* is *O(g(n))*. However, this definition
    conflicts with [other definitions of Big-Omega](http://en.wikipedia.org/wiki/Big_O_notation#Related_asymptotic_notations).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学环境中，*g(n)* 经常被称为 *f(n)* 的大-Ω（写作 *g(n)* 是 *Ω(f(n))*）如果 *f(n)* 是 *O(g(n))*。然而，这个定义与[大-Ω的其他定义](http://en.wikipedia.org/wiki/Big_O_notation#Related_asymptotic_notations)冲突。
- en: Tight Bounds
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 紧界
- en: A Big-O relationship specifies an asymptotic upper bound but provides no information
    about how "tight" the bound is. For example, *n²* is *O(n⁴)*, but this bound is
    not as informative as other valid upper bounds.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 大-Oh关系指定了一个渐近上界，但不提供关于界有多“紧”的信息。例如，*n²* 是 *O(n⁴)*，但这个界限不如其他有效的上界信息丰富。
- en: It is often useful to establish a lower bound *L(n)* for a function *f(n)* (such
    that *L(n)* is *O(f(n))*) in addition to an upper bound *U(n)* (such that *f(n)*
    is *O(U(n))*). When *L = U*, the bound is referred to as tight.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 常常有必要为函数 *f(n)* 建立下界 *L(n)*（使得 *L(n)* 是 *O(f(n))*）除了上界 *U(n)*（使得 *f(n)* 是 *O(U(n))*）。当
    *L = U* 时，界被称为紧的。
- en: Tight bounds are described by Big-Theta notation. That is, *f(n)* is *Θ(g(n))*
    if *f(n)* is *O(g(n))* and *g(n)* is *O(f(n))*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 紧界由大-Theta符号描述。也就是说，如果 *f(n)* 是 *O(g(n))* 且 *g(n)* 是 *O(f(n))*，则 *f(n)* 是 *Θ(g(n))*。
- en: '**Optional Exercise** — Prove that for all *i* and *j*, *log[i](n)* is *O(log[j](n))*.
    Hint: for all *b*, *log[b](x) = (ln x) / (ln b)*.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选练习** — 证明对于所有 *i* 和 *j*，*log[i](n)* 是 *O(log[j](n))*。提示：对于所有 *b*，*log[b](x)
    = (ln x) / (ln b)*。'
- en: Unless otherwise noted, we write *O(log(n))* as shorthand for *O(log[2](n))*.
    Considering the fact above, this convention is justified with respect to asymptotic
    growth rates.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，我们将 *O(log(n))* 缩写为 *O(log[2](n))*。考虑到以上事实，这种约定在渐近增长率方面是合理的。
- en: '**Optional Exercise** — Define an ordering *[f[1], f[2], f[3,]...]* of the
    functions below such that for all *i* and *j*, *i < j* implies *f[i]* is *O(f[j])*.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选练习** — 定义一个 *[f[1], f[2], f[3,]...]* 函数的排序，以便对于所有 *i* 和 *j*，*i < j* 意味着
    *f[i]* 是 *O(f[j])*。'
- en: '*2^n*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*2^n*'
- en: '*n*'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*n*'
- en: '*4*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*4*'
- en: '*sqrt(n)*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*sqrt(n)*'
- en: '*n²+3n*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*n²+3n*'
- en: '*log(n)*'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*log(n)*'
- en: '*n·log(n)*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*n·log(n)*'
- en: '*n!*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*n!*'
- en: '*n⁵ - n⁴*'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*n⁵ - n⁴*'
- en: '*1.5^n*'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*1.5^n*'
- en: Recurrence Relations
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 递归关系
- en: We will consider a couple simple algorithms that traverse data structures looking
    for a particular element.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将考虑几个简单的算法，遍历数据结构查找特定元素。
- en: Lookup in Lists
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在列表中查找
- en: 'Here is a simple `find` function that traverses the list `xs`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的 `find` 函数，遍历列表 `xs`：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We want to define a function *T(n)* to describe the time cost of `find`, where
    *n* is the size of (i.e. number of elements in) the `xs` list.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要定义一个函数 *T(n)* 来描述 `find` 的时间成本，其中 *n* 是 `xs` 列表的大小（即元素数量）。
- en: 'There are three cases to consider:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种情况需要考虑：
- en: If `xs` is `[]`, then `find` returns after some constant *c1* amount of work
    for the pattern matching. So, *T(n) = c1*.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `xs` 是 `[]`，那么 `find` 在进行一些常量 *c1* 的模式匹配工作后就会返回。因此，*T(n) = c1*。
- en: If the head `y` of the list equals `x`, then `find` returns after some constant
    *c2* amount of work for the pattern matching and equality test (note that we are
    assuming that `(==)` is a constant-time operation, which may not always be a reasonable
    assumption). So, *T(n) = c2*.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果列表的头`y`等于`x`，则在进行一些常数*c2*的模式匹配和相等测试的工作后，`find`返回（请注意，我们假设`(==)`是一个常数时间操作，这可能并不总是一个合理的假设）。所以，*T(n)
    = c2*。
- en: Otherwise, `find` performs some constant *c3* amount of work for the pattern
    matching and comparison *and* also recursively calls `find` with the rest of the
    list `xs'`. So, *T(n) = c3 + T(n-1)*.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，`find`执行一些常数*c3*的工作进行模式匹配和比较*并且*还递归调用剩余列表`xs'`的`find`。因此，*T(n) = c3 + T(n-1)*。
- en: 'To compute an upper bound on the running time of `find`, we must consider the
    worst case, which means traversing the entire list without finding the desired
    element `x`. By unrolling the three cases above for the entire list, we obtain
    the following recurrence relation below:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算`find`的运行时间的上限，我们必须考虑最坏情况，这意味着在找不到所需元素`x`的情况下遍历整个列表。通过展开上述三种情况以获取整个列表的递归关系，我们得到以下递归关系：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To compute a closed form solution for *T(n)*, we sum the system of equations
    and obtain:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '要计算*T(n)*的闭式解，我们对方程组求和并得到：  '
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Because, *T(n)* is *O(n)*, we say that `find` runs in worst-case *O(n)* time.
    It is hardly more work to show that *T(n)* is *Θ(n)*, which is the kind of tight
    bound that we are usually interested in. However, it is common to informally refer
    to Big-O even when a Big-Theta bound is known.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因为，*T(n)*是*O(n)*，我们说`find`在最坏情况下运行时间为*O(n)*。展示*T(n)*是*Θ(n)*也不是更多的工作，这是我们通常感兴趣的严格界限。然而，即使已知Big-Theta界限，通常也会非正式地参考Big-O。
- en: What about the running time of `find` if the input list `xs` is sorted? Even
    so, the worst case for the function is that `x` is absent from the list, and the
    only way to be sure is to traverse all of its elements.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入列表`xs`是排序的，`find`的运行时间如何？即便如此，函数的最坏情况是`x`不在列表中，而确保的唯一方法是遍历其所有元素。
- en: Note that this *linear search* algorithm is guided by the constraint that, in
    a purely functional language, only the *head* of a list can be accessed at once.
    In a language with pointers or references, *arbitrary* elements of a list can
    be accessed in constant-time (such lists are usually called arrays). The cost
    of the *binary search* algorithm on arrays has a much smaller asymptotic growth
    rate. (Later, we will see how purely functional languages typically provide an
    array data structure.)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这种*线性搜索*算法受到的约束是，在纯函数语言中，只能一次访问列表的*头部*。在具有指针或引用的语言中，可以在常量时间内访问列表的*任意*元素（这样的列表通常称为数组）。二进制搜索算法在数组上的成本具有更小的渐近增长率。（稍后，我们将看到纯函数语言通常如何提供数组数据结构。）
- en: Lookup in Binary Trees
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 二叉树中的查找
- en: 'An analogous lookup function on binary trees:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉树上的类似查找函数：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Without knowing anything about the structure of the tree, `findBT` must search
    the entire tree, by recursively traversing the `left` and `right` subtrees in
    the worst case. If the size of `t` = `Node y left right` is *n*, then the combined
    size of `left` and `right` is *n-1*. Therefore, making both recursive calls takes
    time *T(n-1)* in total. This leads to the following recurrence relation, where
    we make use of constants *c* and *c'* for operations involved in the worst (requiring
    both recursive calls) and best (inspecting the `Empty` tree) cases, respectively.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在不知道树结构的情况下，`findBT`必须在最坏情况下搜索整个树，通过递归遍历最坏情况下的`left`和`right`子树。如果`t`的大小=`Node
    y left right`是*n*，则`left`和`right`的组合大小为*n-1*。因此，进行两个递归调用总共需要时间*T(n-1)*。这导致以下递归关系，其中我们使用常数*c*和*c'*来表示最坏情况（需要两个递归调用）和最佳情况（检查`Empty`树）中涉及的操作。
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As a result, `findBT` runs in worst-case *O(n)* time (in fact, in *Θ(n)* time).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`findBT`在最坏情况下运行时间为*O(n)*（实际上是*Θ(n)*时间）。
- en: Lookup in Binary Search Trees
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 二叉搜索树中的查找
- en: A binary tree satisfies the *binary search order* property if for every subtree
    of the form `Node x left right`, all `Node`s in `left` store values `y` such that
    `y < x` and all `Node`s in `right` store values `y` such that `x < y`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对于形式为`Node x left right`的每个子树，二叉树满足*二进制搜索顺序*属性，则`Node`中的所有`Node`都存储值`y`，使得`y
    < x`且`right`中的所有`Node`都存储值`y`，使得`x < y`。
- en: 'Assuming that a tree `t` satisfies this ordering property, `findBST` is defined
    to look *only* in the subtree that contain the desired element `x`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设树`t`满足此排序属性，则`findBST`被定义为仅查找包含所需元素`x`的子树：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The recurrence relation for `findBST`, however, looks just like the one for
    `findBT`; even though only one recursive call is made in the worst case (either
    to `left` or `right`), the worst case size of the traversed subtree is *n-1*.
    Therefore, `findBST` runs in *O(n)* time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`findBST` 的递归关系与 `findBT` 的递归关系看起来很像；即使在最坏情况下只进行了一次递归调用（要么到`left`，要么到`right`），遍历的子树的最坏情况大小也是
    *n-1*。因此，`findBST` 的运行时间为 *O(n)*。
- en: Lookup in Balanced Binary Search Trees
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 平衡二叉搜索树中的查找
- en: 'If a binary-search ordered tree is also *balanced*, where every subtree''s
    children are roughly the same size (there are various reasonable definitions,
    as we will see later in the course), then the recurrence relation for `findBST`
    is:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果二分搜索有序树也是 *平衡的*，即每个子树的子树大致相同大小（我们将在课程后面看到各种合理的定义），那么 `findBST` 的递归关系为：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As opposed to *n* recursive calls in the worst case before, there are now at
    most *log[2](n)* recursive calls, because each child tree is (roughly) half the
    size. Therefore, `findBST` runs in worst-case *O(n·log[2](n)* time when the tree
    is balanced.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前最坏情况下的 *n* 递归调用相比，现在最多只有 *log[2](n)* 个递归调用，因为每个子树（大致上）都是原大小的一半。因此，当树平衡时，`findBST`
    的最坏情况运行时间为 *O(n·log[2](n)*。
- en: Notice that we are not being thorough in tracking exactly what the sizes of
    subtrees are, and we are simply taking them to be half the size of the entire
    tree. Although this can and should be rigorously worked out, in the end it does
    not matter, because of the wiggle room provided by the constants and inequalities
    in the definitions of rates of growth. If you are not already comfortable with
    this material, you may wish to read more background on these topics.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们没有详细追踪子树的确切大小，而是简单地将它们视为整个树大小的一半。尽管这可以且应该严格计算出来，但最终并不重要，因为定义增长率的常数和不等式提供了调整空间。如果您对此材料尚不熟悉，您可能希望阅读更多关于这些主题的背景知识。
- en: Reading
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: Optional
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 可选
- en: A more long-winded primer on asymptotic analysis and recurrence relations (using
    Java programming examples) can be found in Chapters 7 and 8 of [these notes](http://people.cs.uchicago.edu/~rchugh/static/classes/introhwandsw.pdf).
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[这些笔记](http://people.cs.uchicago.edu/~rchugh/static/classes/introhwandsw.pdf)的第7和第8章中，可以找到更详细的渐近分析和递归关系的介绍（使用
    Java 编程示例）。
- en: A comprehensive presentation of these topics can be found in the classic [CLRS
    textbook](http://mitpress.mit.edu/books/introduction-algorithms).
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些主题的全面介绍可在经典的[CLRS 教材](http://mitpress.mit.edu/books/introduction-algorithms)中找到。
