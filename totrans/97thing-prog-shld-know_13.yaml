- en: Code Layout Matters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码布局很重要
- en: Code Layout Matters
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码布局很重要
- en: An infeasible number of years ago I worked on a Cobol system where staff weren't
    allowed to change the indentation unless they already had a reason to change the
    code, because someone once broke something by letting a line slip into one of
    the special columns at the beginning of a line. This applied even if the layout
    was misleading, which it sometimes was, so we had to read the code very carefully
    because we couldn't trust it. The policy must have cost a fortune in programmer
    drag.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 很多年前，我曾经在一个 Cobol 系统上工作过，员工们不被允许改变缩进，除非他们已经有理由改变代码，因为曾经有人让一行代码滑入了行首的特殊列中，导致某些事情出错。即使布局具有误导性，有时我们也必须非常仔细地阅读代码，因为我们不能相信它。这个政策肯定花了大量的程序员精力。
- en: There's research to show the we all spend much more of our programming time
    navigating and reading code — finding *where* to make the change — than actually
    typing, so that's what we want to optimize for.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有研究表明，我们所有人花在导航和阅读代码上的时间要比实际输入的时间多得多 —— 找到*在哪里*进行更改 —— 所以这是我们要优化的。
- en: '*Easy to scan.* People are really good at visual pattern matching (a leftover
    from the time when we had to spot lions on the savannah), so I can help myself
    by making everything that isn''t directly relevant to the domain, all the "accidental
    complexity" that comes with most commercial languages, fade into the background
    by standardizing it. If code that behaves the same looks the same, then my perceptual
    system will help me pick out the differences. That''s why I also observe conventions
    about how to lay out the parts of a class within a compilation unit: constants,
    fields, public methods, private methods.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*易于扫描。* 人类在视觉模式匹配方面非常擅长（这是我们在草原上必须发现狮子的时代的遗留物），所以我可以通过标准化所有与领域无关的东西来帮助自己，所有与大多数商业语言一起出现的“偶发复杂性”都会淡化成背景。如果行为相同的代码看起来相同，那么我的感知系统将帮助我找出差异。这就是为什么我也遵循关于如何在编译单元中布局类的部分的约定：常量、字段、公共方法、私有方法。'
- en: '*Expressive layout.* We''ve all learned to take the time to find the right
    names so that our code expresses as clearly as possible what it does, rather than
    just listing the steps — right? The code''s layout is part of this expressiveness
    too. A first cut is to have the team agree on an automatic formatter for the basics,
    then I might make adjustments by hand while I''m coding. Unless there''s active
    dissension, a team will quickly converge on a common "hand-finished" style. A
    formatter cannot understand my intentions (I should know, I once wrote one), and
    it''s more important to me that the line breaks and groupings reflect the intention
    of the code, not just the syntax of the language. (Kevin McGuire freed me from
    my bondage to automatic code formatters.)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*表达布局。* 我们都学会了花时间找到正确的名称，以便我们的代码尽可能清晰地表达它的功能，而不仅仅是列出步骤 —— 对吧？代码的布局也是这种表现力的一部分。首先，团队要就基本的自动格式化程序达成一致，然后在编码时我可能会手动进行调整。除非存在积极的分歧，一个团队会很快达成共识，采用一种共同的“手工完成”的风格。一个格式化程序无法理解我的意图（我应该知道，我曾经写过一个），对我来说更重要的是，行断和分组反映了代码的意图，而不仅仅是语言的语法。（Kevin
    McGuire 使我摆脱了对自动代码格式化程序的束缚。）'
- en: '*Compact format.* The more I can get on a screen, the more I can see without
    breaking context by scrolling or switching files, which means I can keep less
    state in my head. Long procedure comments and lots of whitespace made sense for
    8-character names and line printers, but now I live in an IDE that does syntax
    coloring and cross linking. Pixels are my limiting factor so I want every one
    to contribute towards my understanding of the code. I want the layout to help
    me understand the code, but no more than that.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*紧凑的格式。* 我在屏幕上能看到的越多，就能在不通过滚动或切换文件的情况下保持上下文，这意味着我可以减少脑海中的状态。长的过程注释和大量的空白对于
    8 个字符的名称和行打印机是有意义的，但现在我生活在一个可以做语法着色和交叉链接的 IDE 中。像素是我的限制因素，所以我希望每一个像素都有助于我理解代码。我希望布局能帮助我理解代码，但不要超过这个范围。'
- en: A non-programmer friend once remarked that code looks like poetry. I get that
    feeling from really good code, that everything in the text has a purpose and that
    it's there to help me understand the idea. Unfortunately, writing code doesn't
    have the same romantic image as writing poetry.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非程序员朋友曾经评论说代码看起来像诗。我从真正优秀的代码中感受到这种感觉，即文本中的每个内容都有一个目的，并且它们都是为了帮助我理解这个想法。不幸的是，编写代码并没有写诗的浪漫形象。
- en: By [Steve Freeman](http://programmer.97things.oreilly.com/wiki/index.php/Steve_Freeman)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Steve Freeman](http://programmer.97things.oreilly.com/wiki/index.php/Steve_Freeman)
