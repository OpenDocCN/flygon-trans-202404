["```\nupdate : List a -> Int -> a -> List a\nupdate xs i y =\n  case (xs, i) of\n    ([],     _) -> []\n    (x::xs', 0) -> y :: xs'\n    (x::xs', _) -> x :: update xs' (i-1) y \n```", "```\nappend : List a -> List a -> List a\nappend xs ys =\n  case xs of\n    []     -> ys\n    x::xs' -> x :: append xs' ys \n```", "```\ninsert : comparable -> Tree comparable -> Tree comparable\ninsert x t = case t of\n  Empty -> Node x Empty Empty\n  Node y left right ->\n    if | x == y -> t\n       | x <  y -> Node y (insert x left) right\n       | x >  y -> Node y left (insert x right) \n```"]