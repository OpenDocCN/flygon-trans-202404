- en: '`Boxof`’s Lack of SubtypingTuesday, February 21st'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Boxof`的子类型缺乏星期二，2月21日'
- en: The lack of any subtype relations between `(Boxof T)` and `(Boxof S)` regardless
    of `S` and `T` can roughly be explained as follows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 不管 `S` 和 `T` 如何，`(Boxof T)` 与 `(Boxof S)` 之间都没有任何子类型关系，这大致可以解释为以下原因。
- en: 'First, a box is a container that you can pull a value out of — which makes
    it similar to lists. In the case of lists, we have:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，一个盒子是一个容器，你可以从中取出一个值 — 这使它类似于列表。 在列表的情况下，我们有：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is true for all such containers that you can pull a value out of: if you
    expect to pull a `T` but is given a container of a subtype `S` , then things are
    still fine. Such “containers” include functions that produce a value — for example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有这样的容器，你可以从中取出一个值：如果你期望取出一个 `T` 但给出的是一个子类型 `S` 的容器，则事情仍然是好的。 这样的“容器”包括生成值的函数
    — 例如：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'However, functions also have the other side, where things are different — instead
    of a side of some *produced* value, it’s the side of the *consumed* value. We
    get the opposite rule there:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，函数也有另一面，其中的情况不同 — 而不是某个 *生成* 值的一侧，而是 *消耗* 值的一侧。 我们在那里得到相反的规则：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To see why this is right, use `Number` and `Integer` for `S` and `T`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到这是正确的，使用 `Number` 和 `Integer` 分别作为 `S` 和 `T`：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: so — if you expect a function that takes a number is a *subtype* of one that
    takes an integer; in other words, every function that takes a number is also a
    function that takes an integer, but not the other way.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 — 如果你期望一个接受数字的函数是一个整数的 *子类型*；换句话说，每一个接受数字的函数也是一个接受整数的函数，但反之则不成立。
- en: To summarize all of this, when you make the output type of a function “smaller”
    (more constrained), the resulting type is smaller, but on the input side things
    are flipped — a bigger input type means a more constrained function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 总结所有这些，当你使函数的输出类型“更小”（更受限制）时，结果类型就更小，但在输入方面的情况则不同 — 更大的输入类型意味着更受限制的函数。
- en: Now, a `(Boxof T)` is a producer of `T` when you pull a value out of the box,
    but it’s also a consumer of `T` when you put such a value in it. This means that
    — using the above analogy — the `T` is on both sides of the arrow. This means
    that
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一个 `(Boxof T)` 当你从盒子中取出一个值时就是 `T` 的生产者，但当你把这样一个值放进去时它也是 `T` 的消费者。 这意味着 —
    使用上述类比 — `T` 在箭头的两侧。 这意味着
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'which is actually:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A different way to look at this conclusion is to consider the function type
    of `(A -> A)`: when is it a subtype of some other `(B -> B)`? Only when `A` is
    a subtype of `B` and `B` is a subtype of `A`, which means that this happens only
    when `A` and `B` are the same type.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从另一个角度来看这个结论是考虑 `(A -> A)` 的函数类型是某种其他 `(B -> B)` 的子类型的情况：只有当 `A` 是 `B` 的子类型，而
    `B` 又是 `A` 的子类型时才会发生，这意味着只有当 `A` 和 `B` 是相同类型时才会发生。
- en: '(Side note: this is related to the fact that in logic, `P => Q` is roughly
    equivalent to `not(P) or Q` — the left side, `P`, is inside a negation. It also
    explains why in `((S -> T) -> Q)` the `S` obeys the first rule, as if it was on
    the right side — because it’s negated twice.)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: （旁注：这与逻辑中的 `P => Q` 大致等同于 `not(P) or Q` 有关 — 左侧的 `P` 在否定之中。 这也解释了为什么在 `((S ->
    T) -> Q)` 中 `S` 遵守第一条规则，就好像它在右侧 — 因为它被否定了两次。）
- en: The following piece of code makes the analogy to function types more formally.
    Boxes behave as if their contents is on both sides of a function arrow — on the
    right because they’re readable, and on the left because they’re writable, which
    the conclusion that a `(Boxof A)` type is a subtype of itself and no other `(Boxof
    B)`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段更正式地将函数类型的类比关系。 盒子的行为就好像它们的内容同时位于函数箭头的两侧 — 右侧因为它们是可读的，左侧因为它们是可写的，这就得出结论
    `(Boxof A)` 类型是它自身和没有其他 `(Boxof B)` 的子类型。
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
