- en: CSE 331 Software Design and Implementation
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: CSE 331 软件设计与实现
- en: A Guide to Testing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试指南
- en: 'Contents:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 内容：
- en: '[Types of Tests](#Types_of_Tests)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试类型](#Types_of_Tests)'
- en: '[How much is tested](#How_much_is_tested)'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试了多少](#How_much_is_tested)'
- en: '[The level of specifications being tested](#The_level_of_specifications_being_tested)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[正在测试的规范级别](#The_level_of_specifications_being_tested)'
- en: '[Do you know the implementation?](#black_box_vs_clear_box)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你知道实现吗？](#black_box_vs_clear_box)'
- en: '[Black box tests](#Black_box_tests)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[黑盒测试](#Black_box_tests)'
- en: '[Clear box tests](#Clear_box_tests)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[白盒测试](#Clear_box_tests)'
- en: '[Discussion](#Discussion)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[讨论](#Discussion)'
- en: '[Relating the ways to classify tests](#test-classification-compared)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将测试分类方式进行比较](#test-classification-compared)'
- en: '[How to test a private method](#private-method)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何测试私有方法](#private-method)'
- en: '[Testing Methodology](#Testing_Methodology)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试方法论](#Testing_Methodology)'
- en: '[Before you start writing code](#Before_you_start_writing_code)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始编写代码之前](#Before_you_start_writing_code)'
- en: '[As/after you write your implementation](#After_implementation)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编写实现代码后](#After_implementation)'
- en: '[Hints for testing](#Hints-testing)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试提示](#Hints-testing)'
- en: '[Test code reuse](#Test-code-reuse)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试代码重用](#Test-code-reuse)'
- en: Testing increases our confidence that our code behaves correctly (i.e., meets
    the provided specifications). However, testing can only prove that errors **do**
    exist, not that a program is free from errors. In practice, testing is often the
    most practical and effective way to find bugs in your program.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 测试增加了我们对代码行为正确（即符合提供的规范）的信心。然而，测试只能证明错误**存在**，而不能证明程序没有错误。实际上，测试通常是在程序中找到错误的最实际和有效的方法。
- en: Debugging is a distinct activity from testing.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是与测试不同的活动。
- en: Types of Tests
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试类型
- en: 'Tests can be classified in various ways, according to:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 测试可以根据各种方式进行分类，包括：
- en: 'How much code is tested: unit tests vs. system tests'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试了多少代码：单元测试 vs. 系统测试
- en: 'The level of specifications being tested: specification tests vs. implementation
    tests'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在测试的规范级别：规范测试 vs. 实现测试
- en: 'Whether you know the implementation when you are writing your tests: black
    box tests vs. clear box tests'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编写测试时，你是否知道实现：黑盒测试 vs. 白盒测试
- en: How much is tested
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试了多少
- en: 'A **unit test** is a test for one component. If a unit test fails, you don''t
    have to spend a lot of time localizing the defect, because you know exactly where
    the defect is: in the component being tested. Unit tests help you ensure that
    you are building your system out of reliable building blocks. Commonly, a unit
    test tests one method of one class. However, a test can be a unit test if it focuses
    its attention on one class, or one package — so long as that is smaller than the
    overall system being tested.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**单元测试**是对一个组件的测试。如果一个单元测试失败，你不必花费很多时间来定位缺陷，因为你确切地知道缺陷在哪里：在被测试的组件中。单元测试帮助你确保你正在用可靠的构件构建系统。通常，一个单元测试测试一个类的一个方法。然而，如果一个测试将注意力集中在一个类或一个包上，那么它也可以是一个单元测试
    — 只要它比正在测试的整个系统小即可。'
- en: '**System tests** or **integration tests** are tests of whether the system as
    a whole works — whether the (individually correct, unit-tested) modules fit together
    to achieve correct functionality. A system test usually involves more complicated
    operations than unit tests. An example is the practice of reading in a file that
    defines some operations, performing those operations, writing out a result file,
    and comparing the result file to a version (called the *goal file* or *golden
    file*) that has been hand-inspected and verified to be correct.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统测试**或**集成测试**是对整个系统是否正常工作的测试 — 即（单独正确、经过单元测试的）模块是否组合在一起实现了正确的功能。系统测试通常涉及比单元测试更复杂的操作。一个例子是读取定义了一些操作的文件，执行这些操作，写出一个结果文件，并将结果文件与经过手工检查和验证为正确的版本（称为*目标文件*或*黄金文件*）进行比较。'
- en: You should run unit tests first, and then system tests only when all the unit
    tests succeed. It is often a good idea to write system tests first, even before
    you know how you will modularize your implementation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该先运行单元测试，然后只有在所有单元测试成功时才运行系统测试。通常最好先编写系统测试，甚至在你知道如何将实现模块化之前。
- en: The level of specifications being tested
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正在测试的规范级别
- en: When you write a component, you write it to satisfy some externally-visible
    need, and it has behavior that clients can depend on. This is its specification.
    The tests that you deliver with your system help a client to have confidence that
    your implementation meets its public specification.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写一个组件时，你是为了满足一些外部可见的需求，并且它具有客户端可以依赖的行为。这就是它的规范。你随系统交付的测试帮助客户端确信你的实现符合其公共规范。
- en: The implementation might actually satisfy a stronger specification.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 实现实际上可能满足更强的规范。
- en: The implementation may be designed to strengthen some parts of the public specification.
    For example, a routine that is allowed to return a list in arbitrary order might
    always return the list in sorted order. Or, an implementation might have well-defined
    behavior for inputs that are outside the public precondition (`requires` clause).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现可能被设计来加强公共规范的某些部分。例如，一个允许以任意顺序返回列表的例程可能总是以排序顺序返回列表。或者，一个实现可能对超出公共前置条件（`requires`子句）的输入有明确定义的行为。
- en: An implementation might have more components than the specification requires.
    For example, a class might have additional methods. Or, the implementation might
    have helper classes. Each helper class has its own specification, but the client
    is not aware of, nor can the client use or depend on, these helper classes.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实现可能比规范要求的组件更多。例如，一个类可能有额外的方法。或者，实现可能有辅助类。每个辅助类都有自己的规范，但客户端不知道，也不能使用或依赖这些辅助类。
- en: The client cannot depend on extra properties of the implementation, and generally
    doesn't even know them! However, you might like to ensure that your implementation
    satisfies those properties, as a double-check that it meets your design. Such
    tests should not be exposed to the client — they are an internal debugging aid
    for the implementor.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端不能依赖于实现的额外属性，通常甚至不知道它们！然而，你可能希望确保你的实现满足这些属性，作为确保它符合你的设计的双重检查。这样的测试不应该暴露给客户端
    — 它们是实现者的内部调试辅助。
- en: Another way to think of this is that specifications have different levels of
    visibility. For example, a client may only care that files are read and written
    in a specific format. This forms one level of specification. In designing the
    program to read and write these files, engineers should write specifications for
    each public method in each class they use (i.e., via Javadoc-style code comments).
    This forms another level of specification, which is stronger than the client's
    specification. You should test your code at each level of specification.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种思考方式是规范具有不同的可见级别。例如，客户端可能只关心文件以特定格式读取和写入。这形成了一个规范级别。在设计程序以读取和写入这些文件时，工程师应该为他们使用的每个类中的每个公共方法编写规范（即通过Javadoc风格的代码注释）。这形成了另一个规范级别，比客户端规范更强。你应该在每个规范级别测试你的代码。
- en: In CSE 331, any tests on the level of the client's (the staff's) specification
    should be called by `SpecificationTests.java`. Any tests for specifications not
    handed out by the staff (the ones that you design) should go in `ImplementationTests.java`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSE 331中，对于客户端（员工）规范级别的任何测试都应该由`SpecificationTests.java`调用。对于员工没有提供的规范的测试（即你设计的规范），应该放在`ImplementationTests.java`中。
- en: 'Here is a good guideline: If your test could compile and run as a valid test
    against any other student''s code, then it should go in `SpecificationTests.java`.
    Otherwise, it should go in `ImplementationTests.java`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个很好的指导原则：如果你的测试可以编译并运行作为对任何其他学生代码的有效测试，那么它应该放在`SpecificationTests.java`中。否则，它应该放在`ImplementationTests.java`中。
- en: If the implementation changes, your implementation tests may become invalid.
    However, your specification tests will remain valid so long as the specification
    does not change. They remain valid, but you might want to add new black-box specification
    tests to ensure that you specification tests have good coverage of your implementation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实现发生变化，你的实现测试可能会变得无效。然而，只要规范不变，你的规范测试将保持有效。它们保持有效，但你可能希望添加新的黑盒规范测试，以确保你的规范测试对你的实现有良好的覆盖率。
- en: You should generally write specification tests first. Then, add implementation
    tests to cover important functionality that is not covered by your specification
    tests. Sometimes, a component does not need implementation tests because there
    isn't anything extra about the implementation that is not covered by the specification
    tests; that's fine, and you need not duplicate test functionality. Sometimes,
    a component does not have specification tests because it is not visible in the
    specification.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常应首先编写规范测试。然后，添加实现测试以覆盖规范测试未涵盖的重要功能。有时，一个组件不需要实现测试，因为实现中没有任何规范测试未涵盖的额外内容；这是可以接受的，你不需要重复测试功能。有时，一个组件没有规范测试，因为在规范中看不到它。
- en: Do you know the implementation?
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你知道实现吗？
- en: Black box tests
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 黑盒测试
- en: Black box tests are written without knowledge of anything except for a specification.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试是在除规范外不了解任何内容的情况下编写的。
- en: Their advantage over clear box tests is that they are unlikely to be biased
    by the same misunderstandings with respect to the specification that might have
    caused a bug in the implementation. In many circumstances, black box tests are
    written by people who are not the ones who write the implementation. Black box
    tests can be written before, or concurrently with, the implementation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与透明盒测试相比，它们的优势在于，它们不太可能受到与规范相关的误解的影响，这可能导致实现中的错误。在许多情况下，黑盒测试是由不是编写实现的人编写的。黑盒测试可以在实现之前或同时编写。
- en: Black box tests should be written first, but they are typically not sufficient
    on their own. A black box test may not cover (that is, exercise or execute) all
    parts of an implementation, and therefore it may miss bugs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试应该首先编写，但通常单独编写的测试通常不足够。黑盒测试可能不覆盖（即，执行或执行）实现的所有部分，因此可能会错过错误。
- en: They also fail to test specifics of the implementation where the implementation
    is stronger than the specification. (Doing so requires writing an [implementation](#The_level_of_specifications_being_tested)
    test.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还未能测试实现比规范更强的地方的具体内容。（这需要编写一个[实现](#The_level_of_specifications_being_tested)测试。）
- en: Clear box tests
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 透明盒测试
- en: Clear box tests are written with full knowledge of an implementation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 透明盒测试是在完全了解实现的情况下编写的。
- en: Clear box tests of the specification have the advantage of being able to test
    that special cases in the implementation conform to the specification, even if
    those cases are not particularly special according to the specification alone.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 规范的透明盒测试具有一个优势，即能够测试实现中的特殊情况是否符合规范，即使这些情况在规范中并不特别。
- en: The disadvantage of clear box tests is that people are likely to make the same
    mistakes when writing the clear box tests as they made when writing the methods
    that are being tested. This can result in the tests passing when the specification
    is not actually being accurately followed. Also, if an implementation changes,
    then the lcar-box specification tests remain valid tests, but they may no longer
    provide good coverage.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 透明盒测试的缺点在于，人们在编写透明盒测试时很可能会犯与编写被测试方法时相同的错误。这可能导致测试通过，而实际上规范并未被准确遵循。此外，如果实现更改，则透明盒规范测试仍然是有效的测试，但可能不再提供良好的覆盖。
- en: Discussion
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 讨论
- en: A black box test and a clear box test are testing the *same* specification.
    Each one is valid for any implementation of that specification. The only difference
    is the methodology you used for deciding the test inputs. It is perfectly fine
    to re-use clear box tests when your implementation changes. (Why throw away tests?)
    You probably need to add some additional clear box tests to ensure good coverage
    of the new implementation, however.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试和透明盒测试测试*相同*的规范。每个测试对于该规范的任何实现都是有效的。唯一的区别是您用于决定测试输入的方法。当您的实现更改时，重复使用透明盒测试是完全可以的。（为什么要丢弃测试？）但是，您可能需要添加一些额外的透明盒测试以确保对新实现的良好覆盖。
- en: You should write black box tests first, and then add clear box tests as needed
    if there is implementation behavior that is not exercised by the black box tests.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该首先编写黑盒测试，然后根据需要添加透明盒测试，如果黑盒测试未涵盖实现行为。
- en: Relating the ways to classify tests
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于测试分类的关系
- en: The notions of unit vs. system testing, specification vs. implementation testing,
    and black box vs. clear box testing are **completely orthogonal**. You can have
    all 8 varieties of tests — though you probably won't explicitly segregate all
    those 8 varieties in your test suite.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试与系统测试、规范测试与实现测试以及黑盒测试与白盒测试的概念是**完全正交**的。您可以有所有 8 种测试的变体 —— 尽管您可能不会在测试套件中明确地区分所有这些
    8 种变体。
- en: Oftentimes but not always, unit tests are implementation tests and system tests
    are specification tests. However, it is possible to have a unit specification
    test (if the specification is sufficiently detailed), and to have a system implementation
    test (if your implementation has a stronger overall specification than the public
    documentation requires). Black-box and clear-box approaches for generating test
    input data are always appropriate, no matter the other details about your tests.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试通常但不总是是实现测试，系统测试是规范测试。然而，如果规范足够详细，可以进行单元规范测试，并进行系统实现测试（如果您的实现比公共文档要求的规范更强）。无论测试的其他细节如何，都可以采用黑盒和白盒方法来生成测试输入数据。
- en: How to test a private method
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何测试私有方法
- en: Tests are written in a separate class from the code being tested — this separates
    distinct concerns, and it keeps the tests from cluttering the code. However, this
    makes it impossible to directly test private methods, which are not accessible
    outside the class in which they appear. (When the tests are in a separate package
    than the code being tested, a similar problem occurs for methods with protected
    or default accessibility. In JUnit 4, it's possible to test protected (but not
    private) methods of non-final classes by using subclassing.)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是在与被测试代码不同的类中编写的 —— 这样可以区分不同的关注点，并且使得测试不会使代码混乱。然而，这样做将无法直接测试私有方法，因为它们在所在的类之外是不可访问的。（当测试位于与被测试代码不同的包中时，对具有受保护或默认可访问性的方法也会出现类似的问题。在
    JUnit 4 中，通过使用子类化，可以测试非 final 类的受保护（但不是私有）方法。）
- en: Suppose you want to test a private method. There isn't really a good way to
    do this. Four approaches are [suggested by Bill Venners](http://www.artima.com/suiterunner/private.html).
    (This is a rewording of his summary, for clarity.) The first one tests the private
    methods indirectly, and the last three test the private method directly.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想测试一个私有方法。真的没有一个好方法来做到这一点。Bill Venners 提出了四种方法（http://www.artima.com/suiterunner/private.html
    提出了建议）。（这是对他总结的重新措辞，以便更清晰。）第一种方法间接测试私有方法，后三种方法直接测试私有方法。
- en: Devise tests of the public methods that exercise all the functionality of the
    private methods.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计测试公共方法，以练习私有方法的所有功能。
- en: Make the methods non-private, and write normal tests.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将方法设为非私有，并编写正常的测试。
- en: Write the tests inside the class, where they have access to the private method.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类内部编写测试，其中可以访问私有方法。
- en: Use reflection to circumvent Java's access restrictions on private methods.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用反射来规避 Java 对私有方法的访问限制。
- en: We recommend the first approach. It creates a specification test that will continue
    to be useful even if your implementation changes. Since the private method is
    designed for a particular, specific purpose, it should be possible to exercise
    all its functionality just via calls to the public methods. If there is more functionality
    in the private methods, then it is irrelevant to the behavior of the system, and
    it should perhaps be removed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们推荐第一种方法。它创建了一个规范测试，即使您的实现发生变化，它也将继续有用。由于私有方法设计用于特定目的，应该可以通过对公共方法的调用来练习其所有功能。如果私有方法中有更多功能，则与系统行为无关，可能应该删除。
- en: To use the third approach, you would write the tests in the same class as the
    method itself, in a method with greater visibility. For instance, to test private
    method `foo`, you would write a public method named `testFoo`. The specification
    of `testFoo` is the same as that of `checkRep` (another public method that tests
    private, inaccessible details of the class). Each of these takes no arguments
    and return no results, but throws an exception if any of its tests fail.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用第三种方法，您将在与方法本身相同的类中编写测试，使用更高的可见性的方法。例如，要测试私有方法 `foo`，您将编写一个名为 `testFoo` 的公共方法。`testFoo`
    的规范与 `checkRep`（另一个公共方法，测试类的私有、不可访问的细节）相同。这两者都不接受任何参数，也不返回任何结果，但如果其任何测试失败，则抛出异常。
- en: Other approaches are less desirable. Making the method public breaks modularity,
    and clients could come to depend on it, restricting the flexibility of the implementer.
    Using reflection to temporarily make the method public is ugly and hard to understand.
    Not testing the method is even worse, as bugs in a helper method may be much harder
    to debug when they are exposed only by incorrect behavior of a method that calls
    them.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 其他方法不太理想。将方法设为公共会破坏模块化，客户端可能会依赖于它，限制实现者的灵活性。使用反射暂时将方法设为公共是丑陋且难以理解的。不测试方法甚至更糟，因为在仅通过调用它们的方法的不正确行为暴露时，辅助方法中的错误可能更难调试。
- en: If you choose to test the private methods directly, using one of the last three
    approaches, then be sure to put those in your implementation tests, not your specification
    tests.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择直接测试私有方法，使用最后三种方法之一，那么请确保将其放在实现测试中，而不是规范测试中。
- en: Additionally, it's always a good idea to write assertions (including checkRep)
    within all your methods. Writing assertions is orthogonal to writing test cases.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在所有方法中编写断言（包括checkRep）总是一个好主意。编写断言与编写测试用例是正交的。
- en: Testing Methodology
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试方法论
- en: Before you start writing code
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在开始编写代码之前
- en: 'Use the specification to identify the abstract-value domain of each non-trivial
    public method: what is the set of objects that the method can be called on, and
    the set of allowed inputs?'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用规范来确定每个非平凡的公共方法的抽象值域：该方法可以在哪些对象上调用，以及允许的输入��合是什么？
- en: Partition each domain into "similar cases." For example, if the domain contains
    a number, does the method operate only on positive numbers, odd numbers, etc...?
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将每个领域划分为“相似案例”。例如，如果领域包含一个数字，那么该方法是否仅在正数、奇数等上操作？
- en: Write black box unit tests for each non-trivial public method in `SpecificationTests.java`.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`SpecificationTests.java`中的每个非平凡的公共方法编写黑盒单元测试。
- en: As/after you write your implementation
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在编写实现后
- en: As one of the first things you implement, write a private `checkRep()` method
    and call it on entrance and exit from every non-trivial public non-constructor
    method (and on exit from all constructors). If you use only immutable objects
    and `final` fields, then you can just call `checkRep()` after the constructor.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为您实现的第一件事之一，编写一个私有的`checkRep()`方法，并在每个非平凡的公共非构造方法的入口和出口处调用它（以及在所有构造函数的出口处）。如果只使用不可变对象和`final`字段，那么您可以在构造函数之后直接调用`checkRep()`。
- en: Whenever reasonable, write clear box tests for both your specification and implementation
    in `ImplementationTests.java`.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在合理的情况下，为`ImplementationTests.java`中的规范和实现编写清晰的盒子测试。
- en: Hints for testing
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试提示
- en: In the contructor for the class defining the test suite, do *not* include (defining
    or running) any actual tests. In fact, the test-suite constructor should not even
    construct instances of the class(es) being tested — leave that to the code defining
    the tests. The test-suite constructor should set up only any bookkeeping useful
    across all the tests and it is fine if there is not any.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在定义测试套件的类的构造函数中，*不要*包含（定义或运行）任何实际测试。实际上，测试套件构造函数甚至不应构造被测试的类的实例 —— 将其留给定义测试的代码。测试套件构造函数应该设置任何在所有测试中有用的记账信息，如果没有也没关系。
- en: Write small tests. That way, if the test fails, you will have an idea of what
    was happening at the time.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写小测试。这样，如果测试失败，您将知道当时发生了什么。
- en: Choose good names for your tests, use the proper instance of the assert method,
    and write good messages. This will ensure that all the information you need to
    debug a test failure is present.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的测试选择好的名称，使用适当的断言方法的实例，并编写好的消息。这将确保您需要调试测试失败时所需的所有信息都存在。
- en: Think carefully about each test. Don't write a specification test but accidentally
    call it an implementation test. Don't just use your solution as an oracle, but
    think carefully whether alternative solutions are correct (e.g., is there more
    than one shortest path for the given graph?).
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仔细考虑每个测试。不要编写规范测试，但意外地将其称为实现测试。不要仅将您的解决方案用作预言，而要仔细考虑替代解决方案是否正确（例如，对于给定图形是否存在多个最短路径？）。
- en: Remember that testing requires writing clear, concise, and targeted tests, not
    just coming up with an arbitrary number of random examples.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记住，测试需要编写清晰、简洁和有针对性的测试，而不仅仅是提出任意数量的随机示例。
- en: Test code reuse
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试代码重用
- en: Just as abstraction and re-use are good in your program, they are also good
    in your tests. We encourage you to re-use!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在程序中抽象和重用是好的一样，在测试中也是好的。我们鼓励您重复使用！
- en: Just be careful that you do not end up obscuring the cause of an error. That
    could happen because you have no test that tests one particular method in isolation,
    so it is hard to isolate the code error (or the error in the test). If you build
    up your tests carefully, you can avoid this problem.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 只需注意不要掩盖错误的原因。这可能发生是因为你没有测试一个特定的方法，所以很难隔离代码错误（或测试中的错误）。如果你仔细构建你的测试，你可以避免这个问题。
