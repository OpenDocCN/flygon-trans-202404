["```\n# Lab 7 Learning rate and Evaluation\nimport tensorflow as tf\nimport random\nimport matplotlib.pyplot as plt\ntf.set_random_seed(777)  # for reproducibility\n\nfrom tensorflow.examples.tutorials.mnist import input_data\n# Check out https://www.tensorflow.org/get_started/mnist/beginners for\n# more information about the mnist dataset\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\nnb_classes = 10\n\n# MNIST data image of shape 28 * 28 = 784\nX = tf.placeholder(tf.float32, [None, 784])\n# 0 - 9 digits recognition = 10 classes\nY = tf.placeholder(tf.float32, [None, nb_classes])\n\nW = tf.Variable(tf.random_normal([784, nb_classes]))\nb = tf.Variable(tf.random_normal([nb_classes]))\n\n# Hypothesis (using softmax)\nhypothesis = tf.nn.softmax(tf.matmul(X, W) + b)\n\ncost = tf.reduce_mean(-tf.reduce_sum(Y * tf.log(hypothesis), axis=1))\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)\n\n# Test model\nis_correct = tf.equal(tf.arg_max(hypothesis, 1), tf.arg_max(Y, 1))\n# Calculate accuracy\naccuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))\n\n# parameters\ntraining_epochs = 15\nbatch_size = 100\n\nwith tf.Session() as sess:\n    # Initialize TensorFlow variables\n    sess.run(tf.global_variables_initializer())\n    # Training cycle\n    for epoch in range(training_epochs):\n        avg_cost = 0\n        total_batch = int(mnist.train.num_examples / batch_size)\n\n        for i in range(total_batch):\n            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n            c, _ = sess.run([cost, optimizer], feed_dict={\n                            X: batch_xs, Y: batch_ys})\n            avg_cost += c / total_batch\n\n        print('Epoch:', '%04d' % (epoch + 1),\n              'cost =', '{:.9f}'.format(avg_cost))\n\n    print(\"Learning finished\")\n\n    # Test the model using test sets\n    print(\"Accuracy: \", accuracy.eval(session=sess, feed_dict={\n          X: mnist.test.images, Y: mnist.test.labels}))\n\n    # Get one and predict\n    r = random.randint(0, mnist.test.num_examples - 1)\n    print(\"Label: \", sess.run(tf.argmax(mnist.test.labels[r:r + 1], 1)))\n    print(\"Prediction: \", sess.run(\n        tf.argmax(hypothesis, 1), feed_dict={X: mnist.test.images[r:r + 1]}))\n\n    plt.imshow(\n        mnist.test.images[r:r + 1].reshape(28, 28),\n        cmap='Greys',\n        interpolation='nearest')\n    plt.show()\n\n'''\nEpoch: 0001 cost = 2.868104637\nEpoch: 0002 cost = 1.134684615\nEpoch: 0003 cost = 0.908220728\nEpoch: 0004 cost = 0.794199896\nEpoch: 0005 cost = 0.721815854\nEpoch: 0006 cost = 0.670184430\nEpoch: 0007 cost = 0.630576546\nEpoch: 0008 cost = 0.598888191\nEpoch: 0009 cost = 0.573027079\nEpoch: 0010 cost = 0.550497213\nEpoch: 0011 cost = 0.532001859\nEpoch: 0012 cost = 0.515517795\nEpoch: 0013 cost = 0.501175288\nEpoch: 0014 cost = 0.488425370\nEpoch: 0015 cost = 0.476968593\nLearning finished\nAccuracy:  0.888\n''' \n```"]