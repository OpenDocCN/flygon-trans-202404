- en: ImpParserLexing and Parsing in Coq
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ImpParserLexing 和 Coq 中的解析
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (* DROP *)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: (* 删除 *)
- en: '[PRE1]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Require Import Coq.Strings.String.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导入 Coq.Strings.String.
- en: Require Import Coq.Strings.Ascii.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导入 Coq.Strings.Ascii.
- en: Require Import Coq.Arith.Arith.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导入 Coq.Arith.Arith.
- en: Require Import Coq.Arith.EqNat.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导入 Coq.Arith.EqNat.
- en: Require Import Coq.Lists.List.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导入 Coq.Lists.List.
- en: Import ListNotations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 ListNotations.
- en: Require Import Maps.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导入 Maps.
- en: Require Import Imp.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导入 Imp.
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Definition isWhite (c : ascii) : bool :='
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 isWhite (c : ascii) : bool :='
- en: let n := nat_of_ascii c in
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让 n := nat_of_ascii c
- en: orb (orb (beq_nat n 32)   (* space *)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: orb (orb (beq_nat n 32)   (* 空格 *)
- en: (beq_nat n 9))   (* tab *)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: (beq_nat n 9))   (* 制表符 *)
- en: (orb (beq_nat n 10)   (* linefeed *)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: (orb (beq_nat n 10)   (* 换行符 *)
- en: (beq_nat n 13)). (* Carriage return. *)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: (beq_nat n 13)). (* 回车符 *)
- en: Notation "x '<=?' y" := (leb x y)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 记号 "x '<=?' y" := (leb x y)
- en: '(at level 70, no associativity) : nat_scope.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '(在第70级，不结合) : nat_scope.'
- en: 'Definition isLowerAlpha (c : ascii) : bool :='
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 isLowerAlpha (c : ascii) : bool :='
- en: let n := nat_of_ascii c in
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让 n := nat_of_ascii c
- en: andb (97 <=? n) (n <=? 122).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: andb (97 <=? n) (n <=? 122).
- en: 'Definition isAlpha (c : ascii) : bool :='
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 isAlpha (c : ascii) : bool :='
- en: let n := nat_of_ascii c in
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让 n := nat_of_ascii c
- en: orb (andb (65 <=? n) (n <=? 90))
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: orb (andb (65 <=? n) (n <=? 90))
- en: (andb (97 <=? n) (n <=? 122)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: (andb (97 <=? n) (n <=? 122)).
- en: 'Definition isDigit (c : ascii) : bool :='
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 isDigit (c : ascii) : bool :='
- en: let n := nat_of_ascii c in
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让 n := nat_of_ascii c
- en: andb (48 <=? n) (n <=? 57).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: andb (48 <=? n) (n <=? 57).
- en: Inductive chartype := white | alpha | digit | other.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳 chartype := white | alpha | digit | other.
- en: 'Definition classifyChar (c : ascii) : chartype :='
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 classifyChar (c : ascii) : chartype :='
- en: if isWhite c then
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是空格 c then
- en: white
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 白色
- en: else if isAlpha c then
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 否则如果是字母 c then
- en: alpha
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 字母
- en: else if isDigit c then
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 否则如果是数字 c then
- en: digit
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 数字
- en: else
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 否则
- en: other.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: other.
- en: 'Fixpoint list_of_string (s : string) : list ascii :='
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '修复 list_of_string (s : string) : list ascii :='
- en: match s with
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 s 时
- en: '| EmptyString ⇒ []'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '| EmptyString ⇒ []'
- en: '| String c s ⇒ c :: (list_of_string s)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '| String c s ⇒ c :: (list_of_string s)'
- en: end.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 结束.
- en: 'Fixpoint string_of_list (xs : list ascii) : string :='
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '修复 string_of_list (xs : list ascii) : string :='
- en: fold_right String EmptyString xs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: fold_right String EmptyString xs.
- en: Definition token := string.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 token := string.
- en: 'Fixpoint tokenize_helper (cls : chartype) (acc xs : list ascii)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '修复 tokenize_helper (cls : chartype) (acc xs : list ascii)'
- en: ': list (list ascii) :='
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ': list (list ascii) :='
- en: let tk := match acc with [] ⇒ [] | _::_ ⇒ [rev acc] end in
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让 tk := 匹配 acc 时 [] ⇒ [] | _::_ ⇒ [反转 acc] 结束 in
- en: match xs with
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 xs 时
- en: '| [] ⇒ tk'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '| [] ⇒ tk'
- en: '| (x::xs'') ⇒'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '| (x::xs'') ⇒'
- en: match cls, classifyChar x, x with
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 cls, classifyChar x, x 时
- en: '| _, _, "("      ⇒'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '| _, _, "("      ⇒'
- en: tk ++ ["("]::(tokenize_helper other [] xs')
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: tk ++ ["("]::(tokenize_helper other [] xs')
- en: '| _, _, ")"      ⇒'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '| _, _, ")"      ⇒'
- en: tk ++ [")"]::(tokenize_helper other [] xs')
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: tk ++ [")"]::(tokenize_helper other [] xs')
- en: '| _, white, _    ⇒'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '| _, 白色, _    ⇒'
- en: tk ++ (tokenize_helper white [] xs')
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: tk ++ (tokenize_helper white [] xs')
- en: '| alpha,alpha,x  ⇒'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '| alpha,alpha,x  ⇒'
- en: tokenize_helper alpha (x::acc) xs'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: tokenize_helper alpha (x::acc) xs'
- en: '| digit,digit,x  ⇒'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '| digit,digit,x  ⇒'
- en: tokenize_helper digit (x::acc) xs'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: tokenize_helper digit (x::acc) xs'
- en: '| other,other,x  ⇒'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '| other,other,x  ⇒'
- en: tokenize_helper other (x::acc) xs'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: tokenize_helper other (x::acc) xs'
- en: '| _,tp,x         ⇒'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '| _,tp,x         ⇒'
- en: tk ++ (tokenize_helper tp [x] xs')
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: tk ++ (tokenize_helper tp [x] xs')
- en: end
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 结束
- en: end %char.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 结束 %char.
- en: 'Definition tokenize (s : string) : list string :='
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 tokenize (s : string) : list string :='
- en: map string_of_list (tokenize_helper white [] (list_of_string s)).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: map string_of_list (tokenize_helper white [] (list_of_string s)).
- en: 'Example tokenize_ex[1] :'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 tokenize_ex[1] :'
- en: tokenize "abc12==3  223*(3+(a+c))" %string
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: tokenize "abc12==3  223*(3+(a+c))" %string
- en: = ["abc"; "12"; "=="; "3"; "223";
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: = ["abc"; "12"; "=="; "3"; "223";
- en: '"*"; "("; "3"; "+"; "(";'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '"*"; "("; "3"; "+"; "(";'
- en: '"a"; "+"; "c"; ")"; ")"]%string.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '"a"; "+"; "c"; ")"; ")"]%string.'
- en: Proof. reflexivity. Qed.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明. 反射性. 完成.
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Inductive optionE (X:Type) : Type :='
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '归纳 optionE (X:Type) : Type :='
- en: '| SomeE : X → optionE X'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '| SomeE : X → optionE X'
- en: '| NoneE : string → optionE X.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '| NoneE : string → optionE X.'
- en: Implicit Arguments SomeE [[X]].
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式参数 SomeE [[X]].
- en: Implicit Arguments NoneE [[X]].
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式参数 NoneE [[X]].
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notation "'DO' ( x , y ) <== e1 ; e2"
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 记号 "'DO' ( x , y ) <== e1 ; e2"
- en: := (match e[1] with
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: := (匹配 e[1] 时
- en: '| SomeE (x,y) ⇒ e[2]'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '| SomeE (x,y) ⇒ e[2]'
- en: '| NoneE err ⇒ NoneE err'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '| NoneE err ⇒ NoneE err'
- en: end)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 结束)
- en: (right associativity, at level 60).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: (右结合，级别为60).
- en: Notation "'DO' ( x , y ) <-- e1 ; e2 'OR' e3"
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 记号 "'DO' ( x , y ) <-- e1 ; e2 'OR' e3"
- en: := (match e[1] with
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: := (匹配 e[1] 时
- en: '| SomeE (x,y) ⇒ e[2]'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '| SomeE (x,y) ⇒ e[2]'
- en: '| NoneE err ⇒ e[3]'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '| NoneE err ⇒ e[3]'
- en: end)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 结束)
- en: (right associativity, at level 60, e[2] at next level).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: (右结合，级别为60，e[2]在下一个级别).
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Open Scope string_scope.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 string_scope.
- en: 'Definition parser (T : Type) :='
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 parser (T : Type) :='
- en: list token → optionE (T * list token).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 token → optionE (T * 列表 token).
- en: 'Fixpoint many_helper {T} (p : parser T) acc steps xs :='
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '修复 many_helper {T} (p : parser T) acc steps xs :='
- en: match steps, p xs with
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 steps, p xs 时
- en: '| 0, _ ⇒'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0, _ ⇒'
- en: NoneE "Too many recursive calls"
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: NoneE "递归调用太多"
- en: '| _, NoneE _ ⇒'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '| _, NoneE _ ⇒'
- en: SomeE ((rev acc), xs)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE ((反转 acc), xs)
- en: '| S steps'', SomeE (t, xs'') ⇒'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '| S steps'', SomeE (t, xs'') ⇒'
- en: many_helper p (t::acc) steps' xs'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: many_helper p (t::acc) steps' xs'
- en: end.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Fixpoint many {T} (p : parser T) (steps : nat) : parser (list T) :='
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fixpoint many {T} (p : parser T) (steps : nat) : parser (list T) :='
- en: many_helper p [] steps.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: many_helper p [] steps.
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Definition firstExpect {T} (t : token) (p : parser T)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 'Definition firstExpect {T} (t : token) (p : parser T)'
- en: ': parser T :='
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ': parser T :='
- en: fun xs ⇒ match xs with
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: fun xs ⇒ match xs with
- en: '| x::xs'' ⇒'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '| x::xs'' ⇒'
- en: if string_dec x t
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: if string_dec x t
- en: then p xs'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: then p xs'
- en: else NoneE ("expected '" ++ t ++ "'.")
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: else NoneE ("expected '" ++ t ++ "'.")
- en: '| [] ⇒'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '| [] ⇒'
- en: NoneE ("expected '" ++ t ++ "'.")
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: NoneE ("expected '" ++ t ++ "'.")
- en: end.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Definition expect (t : token) : parser unit :='
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'Definition expect (t : token) : parser unit :='
- en: firstExpect t (fun xs ⇒ SomeE(tt, xs)).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect t (fun xs ⇒ SomeE(tt, xs)).
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Definition parseIdentifier (xs : list token)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 'Definition parseIdentifier (xs : list token)'
- en: ': optionE (id * list token) :='
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ': optionE (id * list token) :='
- en: match xs with
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: match xs with
- en: '| [] ⇒ NoneE "Expected identifier"'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '| [] ⇒ NoneE "Expected identifier"'
- en: '| x::xs'' ⇒'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '| x::xs'' ⇒'
- en: if forallb isLowerAlpha (list_of_string x) then
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: if forallb isLowerAlpha (list_of_string x) then
- en: SomeE (Id x, xs')
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (Id x, xs')
- en: else
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: NoneE ("Illegal identifier:'" ++ x ++ "'")
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: NoneE ("Illegal identifier:'" ++ x ++ "'")
- en: end.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: '[PRE10]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Definition parseNumber (xs : list token)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 'Definition parseNumber (xs : list token)'
- en: ': optionE (nat * list token) :='
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: ': optionE (nat * list token) :='
- en: match xs with
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: match xs with
- en: '| [] ⇒ NoneE "Expected number"'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '| [] ⇒ NoneE "Expected number"'
- en: '| x::xs'' ⇒'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '| x::xs'' ⇒'
- en: if forallb isDigit (list_of_string x) then
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: if forallb isDigit (list_of_string x) then
- en: SomeE (fold_left
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (fold_left
- en: (fun n d ⇒
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: (fun n d ⇒
- en: 10 * n + (nat_of_ascii d -
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 10 * n + (nat_of_ascii d -
- en: nat_of_ascii "0"%char))
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: nat_of_ascii "0"%char))
- en: (list_of_string x)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: (list_of_string x)
- en: 0,
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 0,
- en: xs')
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: xs')
- en: else
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: NoneE "Expected number"
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: NoneE "Expected number"
- en: end.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: '[PRE11]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Fixpoint parsePrimaryExp (steps:nat)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Fixpoint parsePrimaryExp (steps:nat)
- en: '(xs : list token)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '(xs : list token)'
- en: ': optionE (aexp * list token) :='
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: ': optionE (aexp * list token) :='
- en: match steps with
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: match steps with
- en: '| 0 ⇒ NoneE "Too many recursive calls"'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 ⇒ NoneE "Too many recursive calls"'
- en: '| S steps'' ⇒'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '| S steps'' ⇒'
- en: DO (i, rest) <-- parseIdentifier xs ;
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: DO (i, rest) <-- parseIdentifier xs ;
- en: SomeE (AId i, rest)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (AId i, rest)
- en: OR DO (n, rest) <-- parseNumber xs ;
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: OR DO (n, rest) <-- parseNumber xs ;
- en: SomeE (ANum n, rest)
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (ANum n, rest)
- en: OR (DO (e, rest) <== firstExpect "("
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: OR (DO (e, rest) <== firstExpect "("
- en: (parseSumExp steps') xs;
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: (parseSumExp steps') xs;
- en: DO (u, rest') <== expect ")" rest ;
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: DO (u, rest') <== expect ")" rest ;
- en: SomeE(e,rest'))
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE(e,rest'))
- en: end
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: with parseProductExp (steps:nat)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: with parseProductExp (steps:nat)
- en: '(xs : list token) :='
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '(xs : list token) :='
- en: match steps with
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: match steps with
- en: '| 0 ⇒ NoneE "Too many recursive calls"'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 ⇒ NoneE "Too many recursive calls"'
- en: '| S steps'' ⇒'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '| S steps'' ⇒'
- en: DO (e, rest) <==
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: DO (e, rest) <==
- en: parsePrimaryExp steps' xs ;
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: parsePrimaryExp steps' xs ;
- en: DO (es, rest') <==
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: DO (es, rest') <==
- en: many (firstExpect "*" (parsePrimaryExp steps'))
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: many (firstExpect "*" (parsePrimaryExp steps'))
- en: steps' rest;
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: steps' rest;
- en: SomeE (fold_left AMult es e, rest')
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (fold_left AMult es e, rest')
- en: end
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: 'with parseSumExp (steps:nat) (xs : list token)  :='
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 'with parseSumExp (steps:nat) (xs : list token)  :='
- en: match steps with
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: match steps with
- en: '| 0 ⇒ NoneE "Too many recursive calls"'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 ⇒ NoneE "Too many recursive calls"'
- en: '| S steps'' ⇒'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '| S steps'' ⇒'
- en: DO (e, rest) <==
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: DO (e, rest) <==
- en: parseProductExp steps' xs ;
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: parseProductExp steps' xs ;
- en: DO (es, rest') <==
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: DO (es, rest') <==
- en: many (fun xs ⇒
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: many (fun xs ⇒
- en: DO (e,rest') <--
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: DO (e,rest') <--
- en: firstExpect "+"
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect "+"
- en: (parseProductExp steps') xs;
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: (parseProductExp steps') xs;
- en: SomeE ( (true, e), rest')
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE ( (true, e), rest')
- en: OR DO (e,rest') <==
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: OR DO (e,rest') <==
- en: firstExpect "-"
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect "-"
- en: (parseProductExp steps') xs;
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: (parseProductExp steps') xs;
- en: SomeE ( (false, e), rest'))
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE ( (false, e), rest'))
- en: steps' rest;
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: steps' rest;
- en: SomeE (fold_left (fun e[0] term ⇒
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (fold_left (fun e[0] term ⇒
- en: match term with
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: match term with
- en: (true,  e) ⇒ APlus e[0] e
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: (true,  e) ⇒ APlus e[0] e
- en: '| (false, e) ⇒ AMinus e[0] e'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '| (false, e) ⇒ AMinus e[0] e'
- en: end)
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: end)
- en: es e,
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: es e,
- en: rest')
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: rest')
- en: end.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Definition parseAExp := parseSumExp.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Definition parseAExp := parseSumExp.
- en: '[PRE12]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Fixpoint parseAtomicExp (steps:nat)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Fixpoint parseAtomicExp (steps:nat)
- en: '(xs : list token)  :='
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '(xs : list token)  :='
- en: match steps with
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: match steps with
- en: '| 0 ⇒ NoneE "Too many recursive calls"'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 ⇒ NoneE "Too many recursive calls"'
- en: '| S steps'' ⇒'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '| S steps'' ⇒'
- en: DO    (u,rest) <-- expect "true" xs;
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: DO    (u,rest) <-- expect "true" xs;
- en: SomeE (BTrue,rest)
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (BTrue,rest)
- en: OR DO (u,rest) <-- expect "false" xs;
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: OR DO (u,rest) <-- expect "false" xs;
- en: SomeE (BFalse,rest)
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (BFalse,rest)
- en: OR DO (e,rest) <--
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: OR DO (e,rest) <--
- en: firstExpect "not"
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect "not"
- en: (parseAtomicExp steps')
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: (parseAtomicExp steps')
- en: xs;
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: xs;
- en: SomeE (BNot e, rest)
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (BNot e, rest)
- en: OR DO (e,rest) <--
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: OR DO (e,rest) <--
- en: firstExpect "("
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect "("
- en: (parseConjunctionExp steps') xs;
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: (parseConjunctionExp steps') xs;
- en: (DO (u,rest') <== expect ")" rest;
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: (DO (u,rest') <== expect ")" rest;
- en: SomeE (e, rest'))
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (e, rest'))
- en: OR DO (e, rest) <== parseProductExp steps' xs;
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: OR DO (e, rest) <== parseProductExp steps' xs;
- en: (DO (e', rest') <--
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: (DO (e', rest') <--
- en: firstExpect "=="
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect "=="
- en: (parseAExp steps') rest;
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: (parseAExp steps') rest;
- en: SomeE (BEq e e', rest')
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (BEq e e', rest')
- en: OR DO (e', rest') <--
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: OR DO (e', rest') <--
- en: firstExpect "≤"
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect "≤"
- en: (parseAExp steps') rest;
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: (parseAExp steps') rest;
- en: SomeE (BLe e e', rest')
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (BLe e e', rest')
- en: OR
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: OR
- en: NoneE
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: NoneE
- en: '"Expected ''=='' or ''≤'' after arithmetic expression")'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '"Expected ''=='' or ''≤'' after arithmetic expression")'
- en: end
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: with parseConjunctionExp (steps:nat)
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: with parseConjunctionExp (steps:nat)
- en: '(xs : list token) :='
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '(xs : list token) :='
- en: match steps with
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: match steps with
- en: '| 0 ⇒ NoneE "Too many recursive calls"'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 ⇒ NoneE "递归调用太多"'
- en: '| S steps'' ⇒'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '| S steps'' ⇒'
- en: DO (e, rest) <==
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: DO (e, rest) <==
- en: parseAtomicExp steps' xs ;
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: parseAtomicExp steps' xs ;
- en: DO (es, rest') <==
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: DO (es, rest') <==
- en: many (firstExpect "&&"
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: many (firstExpect "&&"
- en: (parseAtomicExp steps'))
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: (parseAtomicExp steps'))
- en: steps' rest;
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: steps' rest;
- en: SomeE (fold_left BAnd es e, rest')
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (fold_left BAnd es e, rest')
- en: end.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Definition parseBExp := parseConjunctionExp.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Definition parseBExp := parseConjunctionExp.
- en: Check parseConjunctionExp.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Check parseConjunctionExp.
- en: 'Definition testParsing {X : Type}'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 'Definition testParsing {X : Type}'
- en: '(p : nat →'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '(p : nat →'
- en: list token →
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: list token →
- en: optionE (X * list token))
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: optionE (X * list token))
- en: '(s : string) :='
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '(s : string) :='
- en: let t := tokenize s in
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: let t := tokenize s in
- en: p 100 t.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: p 100 t.
- en: (* Eval compute in    testParsing parseProductExp "x*y*(x*x)*x". Eval compute in 
      testParsing parseConjunctionExp "not((x==x||x*x<=(x*x)*x)&&x==x".  *)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: (* 计算 parse "   testParsing parseProductExp "x*y*(x*x)*x". 计算 parse "   testParsing parseConjunctionExp "not((x==x||x*x<=(x*x)*x)&&x==x". 
    *)
- en: '[PRE13]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Fixpoint parseSimpleCommand (steps:nat)
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Fixpoint parseSimpleCommand (steps:nat)
- en: '(xs : list token) :='
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '(xs : list token) :='
- en: match steps with
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: match steps with
- en: '| 0 ⇒ NoneE "Too many recursive calls"'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 ⇒ NoneE "递归调用太多"'
- en: '| S steps'' ⇒'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '| S steps'' ⇒'
- en: DO (u, rest) <-- expect "SKIP" xs;
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: DO (u, rest) <-- expect "SKIP" xs;
- en: SomeE (SKIP, rest)
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE (SKIP, rest)
- en: OR DO (e,rest) <--
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: OR DO (e,rest) <--
- en: firstExpect "IF" (parseBExp steps') xs;
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect "IF" (parseBExp steps') xs;
- en: DO (c,rest')  <==
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: DO (c,rest')  <==
- en: firstExpect "THEN"
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect "THEN"
- en: (parseSequencedCommand steps') rest;
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: (parseSequencedCommand steps') rest;
- en: DO (c',rest'') <==
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: DO (c',rest'') <==
- en: firstExpect "ELSE"
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect "ELSE"
- en: (parseSequencedCommand steps') rest';
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: (parseSequencedCommand steps') rest';
- en: DO (u,rest''') <==
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: DO (u,rest''') <==
- en: expect "END" rest'';
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: expect "END" rest'';
- en: SomeE(IFB e THEN c ELSE c' FI, rest''')
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE(IFB e THEN c ELSE c' FI, rest''')
- en: OR DO (e,rest) <--
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: OR DO (e,rest) <--
- en: firstExpect "WHILE"
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect "WHILE"
- en: (parseBExp steps') xs;
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: (parseBExp steps') xs;
- en: DO (c,rest') <==
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: DO (c,rest') <==
- en: firstExpect "DO"
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect "DO"
- en: (parseSequencedCommand steps') rest;
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: (parseSequencedCommand steps') rest;
- en: DO (u,rest'') <==
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: DO (u,rest'') <==
- en: expect "END" rest';
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: expect "END" rest';
- en: SomeE(WHILE e DO c END, rest'')
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE(WHILE e DO c END, rest'')
- en: OR DO (i, rest) <==
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: OR DO (i, rest) <==
- en: parseIdentifier xs;
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: parseIdentifier xs;
- en: DO (e, rest') <==
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: DO (e, rest') <==
- en: firstExpect ":=" (parseAExp steps') rest;
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect ":=" (parseAExp steps') rest;
- en: SomeE(i ::= e, rest')
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE(i ::= e, rest')
- en: end
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: with parseSequencedCommand (steps:nat)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: with parseSequencedCommand (steps:nat)
- en: '(xs : list token) :='
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '(xs : list token) :='
- en: match steps with
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: match steps with
- en: '| 0 ⇒ NoneE "Too many recursive calls"'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 ⇒ NoneE "递归调用太多"'
- en: '| S steps'' ⇒'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '| S steps'' ⇒'
- en: DO (c, rest) <==
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: DO (c, rest) <==
- en: parseSimpleCommand steps' xs;
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: parseSimpleCommand steps' xs;
- en: DO (c', rest') <--
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: DO (c', rest') <--
- en: firstExpect ";"
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: firstExpect ";"
- en: (parseSequencedCommand steps') rest;
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: (parseSequencedCommand steps') rest;
- en: SomeE(c ;; c', rest')
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE(c ;; c', rest')
- en: OR
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: OR
- en: SomeE(c, rest)
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: SomeE(c, rest)
- en: end.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: Definition bignumber := 1000.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: Definition bignumber := 1000.
- en: 'Definition parse (str : string) : optionE (com * list token) :='
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 'Definition parse (str : string) : optionE (com * list token) :='
- en: let tokens := tokenize str in
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: let tokens := tokenize str in
- en: parseSequencedCommand bignumber tokens.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: parseSequencedCommand bignumber tokens.
- en: '[PRE14]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: (* Compute parse "   IF x == y + 1 + 2 - y * 6 + 3 THEN     x := x * 1;;     y := 0
      ELSE     SKIP   END  ". ====>   SomeE      (IFB BEq (AId (Id 0))               (APlus
                     (AMinus (APlus (APlus (AId (Id 1)) (ANum 1)) (ANum 2))                     (AMult (AId (Id 1)) (ANum 6)))
                     (ANum 3))       THEN Id 0 ::= AMult (AId (Id 0)) (ANum 1);; Id 1 ::= ANum 0
          ELSE SKIP FI, ) *)
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: (* 计算 parse "   IF x == y + 1 + 2 - y * 6 + 3 THEN     x := x * 1;;     y := 0
      ELSE     SKIP   END  ". ====>   SomeE      (IFB BEq (AId (Id 0))               (APlus
                     (AMinus (APlus (APlus (AId (Id 1)) (ANum 1)) (ANum 2))                     (AMult (AId (Id 1)) (ANum 6)))
                     (ANum 3))       THEN Id 0 ::= AMult (AId (Id 0)) (ANum 1);; Id 1 ::= ANum 0
          ELSE SKIP FI, ) *)
- en: (* Compute parse "   SKIP;;   z:=x*y*(x*x);;   WHILE x==x DO     IF z <= z*z && not x == 2 THEN
          x := z;;       y := z     ELSE       SKIP     END;;     SKIP   END;;   x:=z  ".
    ====>   SomeE      (SKIP;;       Id 0 ::= AMult (AMult (AId (Id 1)) (AId (Id 2)))
                         (AMult (AId (Id 1)) (AId (Id 1)));;       WHILE BEq (AId (Id 1)) (AId (Id 1)) DO
            IFB BAnd (BLe (AId (Id 0)) (AMult (AId (Id 0)) (AId (Id 0))))                   (BNot (BEq (AId (Id 1)) (ANum 2)))
               THEN Id 1 ::= AId (Id 0);; Id 2 ::= AId (Id 0)            ELSE SKIP FI;;
            SKIP       END;;       Id 1 ::= AId (Id 0),      ) *)
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: (* 计算 parse "   SKIP;;   z:=x*y*(x*x);;   WHILE x==x DO     IF z <= z*z && not x == 2 THEN
          x := z;;       y := z     ELSE       SKIP     END;;     SKIP   END;;   x:=z  ".
    ====>   SomeE      (SKIP;;       Id 0 ::= AMult (AMult (AId (Id 1)) (AId (Id 2)))
                         (AMult (AId (Id 1)) (AId (Id 1)));;       WHILE BEq (AId (Id 1)) (AId (Id 1)) DO
            IFB BAnd (BLe (AId (Id 0)) (AMult (AId (Id 0)) (AId (Id 0))))                   (BNot (BEq (AId (Id 1)) (ANum 2)))
     ��         THEN Id 1 ::= AId (Id 0);; Id 2 ::= AId (Id 0)            ELSE SKIP FI;;
            SKIP       END;;       Id 1 ::= AId (Id 0),      ) *)
- en: (* Compute parse "   SKIP;;   z:=x*y*(x*x);;   WHILE x==x DO     IF z <= z*z && not x == 2 THEN
          x := z;;       y := z     ELSE       SKIP     END;;     SKIP   END;;   x:=z  ".
    =====>   SomeE      (SKIP;;       Id 0 ::= AMult (AMult (AId (Id 1)) (AId (Id 2)))
                (AMult (AId (Id 1)) (AId (Id 1)));;       WHILE BEq (AId (Id 1)) (AId (Id 1)) DO
            IFB BAnd (BLe (AId (Id 0)) (AMult (AId (Id 0)) (AId (Id 0))))                  (BNot (BEq (AId (Id 1)) (ANum 2)))
              THEN Id 1 ::= AId (Id 0);;                Id 2 ::= AId (Id 0)           ELSE SKIP
            FI;;         SKIP       END;;       Id 1 ::= AId (Id 0),      ). *)
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: (* 计算解析 "   SKIP;;   z:=x*y*(x*x);;   WHILE x==x DO     IF z <= z*z && not x == 2 THEN
          x := z;;       y := z     ELSE       SKIP     END;;     SKIP   END;;   x:=z  ".
    =====>   SomeE      (SKIP;;       Id 0 ::= AMult (AMult (AId (Id 1)) (AId (Id 2)))
                (AMult (AId (Id 1)) (AId (Id 1)));;       WHILE BEq (AId (Id 1)) (AId (Id 1)) DO
            IFB BAnd (BLe (AId (Id 0)) (AMult (AId (Id 0)) (AId (Id 0))))                  (BNot (BEq (AId (Id 1)) (ANum 2)))
              THEN Id 1 ::= AId (Id 0);;                Id 2 ::= AId (Id 0)           ELSE SKIP
            FI;;         SKIP       END;;       Id 1 ::= AId (Id 0),      ). *)
- en: (* /DROP *)
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: (* /DROP *)
- en: '[PRE15]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
