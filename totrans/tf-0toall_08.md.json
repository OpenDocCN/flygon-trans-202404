["```\n# Lab 3 Minimizing Cost\n# This is optional\nimport tensorflow as tf\ntf.set_random_seed(777)  # for reproducibility\n\n# tf Graph Input\nX = [1, 2, 3]\nY = [1, 2, 3]\n\n# Set wrong model weights\nW = tf.Variable(5.)\n\n# Linear model\nhypothesis = X * W\n\n# Manual gradient\ngradient = tf.reduce_mean((W * X - Y) * X) * 2\n\n# cost/loss function\ncost = tf.reduce_mean(tf.square(hypothesis - Y))\n\n# Minimize: Gradient Descent Magic\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)\ntrain = optimizer.minimize(cost)\n\n# Get gradients\ngvs = optimizer.compute_gradients(cost, [W])\n# Optional: modify gradient if necessary\n# gvs = [(tf.clip_by_value(grad, -1., 1.), var) for grad, var in gvs]\n# Apply gradients\napply_gradients = optimizer.apply_gradients(gvs)\n\n# Launch the graph in a session.\nsess = tf.Session()\n# Initializes global variables in the graph.\nsess.run(tf.global_variables_initializer())\n\nfor step in range(100):\n    print(step, sess.run([gradient, W, gvs]))\n    sess.run(apply_gradients)\n    # Same as sess.run(train)\n\n'''\n# Apply gradients\n0 [37.333332, 5.0, [(37.333336, 5.0)]]\n1 [33.848888, 4.6266665, [(33.848888, 4.6266665)]]\n2 [30.689657, 4.2881775, [(30.689657, 4.2881775)]]\n3 [27.825287, 3.9812808, [(27.825287, 3.9812808)]]\n4 [25.228262, 3.703028, [(25.228264, 3.703028)]]\n...\n96 [0.0030694802, 1.0003289, [(0.0030694804, 1.0003289)]]\n97 [0.0027837753, 1.0002983, [(0.0027837753, 1.0002983)]]\n98 [0.0025234222, 1.0002704, [(0.0025234222, 1.0002704)]]\n99 [0.0022875469, 1.0002451, [(0.0022875469, 1.0002451)]]\n''' \n```"]