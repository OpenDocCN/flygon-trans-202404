["```\nshell`npm install -g yarn`\n```", "```\nshell`npm install -g yarn`\n```", "```\nts`<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"OK\")<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"OK\");`\n```", "```\nts`<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"OK\")<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"OK\");`\n```", "```\nts`<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>('OK');<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"OK\");<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`OK`);`\n```", "```\nts`<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>('OK');<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"OK\");<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`OK`);`\n```", "```\nshell`mkdir eslint-tutorialcd eslint-tutorial`\n```", "```\nshell`mkdir eslint-tutorialcd eslint-tutorial`\n```", "```\npackage.jsonjson`{  \"name\":  \"eslint-tutorial\",  \"license\":  \"UNLICENSED\"}`\n```", "```\npackage.jsonjson`{  \"name\":  \"eslint-tutorial\",  \"license\":  \"UNLICENSED\"}`\n```", "```\nshell`yarn add -D 'eslint@^8'`\n```", "```\nshell`yarn add -D 'eslint@^8'`\n```", "```\nshell`npx eslint -vv8.15.0`\n```", "```\nshell`npx eslint -vv8.15.0`\n```", "```\nshell`touch .eslintrc.js`\n```", "```\nshell`touch .eslintrc.js`\n```", "```\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020text`.\u251c\u2500\u2500 .eslintrc.js\u251c\u2500\u2500 node_modules\u251c\u2500\u2500 package.json\u2514\u2500\u2500 yarn.lock`\n```", "```\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020text`.\u251c\u2500\u2500 .eslintrc.js\u251c\u2500\u2500 node_modules\u251c\u2500\u2500 package.json\u2514\u2500\u2500 yarn.lock`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", },};`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", },};`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) rules: {\n    &quot;no-console&quot;: string;\n}\">rules</data-lsp>: {  \"no-console\":  \"error\", },};`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) rules: {\n    &quot;no-console&quot;: string;\n}\">rules</data-lsp>: {  \"no-console\":  \"error\", },};`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n        camelcase: (string | {\n            properties: string;\n        })[];\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n        camelcase: (string | {\n            properties: string;\n        })[];\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) rules: {\n    &quot;no-console&quot;: string;\n    camelcase: (string | {\n        properties: string;\n    })[];\n}\">rules</data-lsp>: {  \"no-console\":  \"error\", <data-lsp lsp=\"(property) camelcase: (string | {\n    properties: string;\n})[]\">camelcase</data-lsp>: [\"error\", { <data-lsp lsp=\"(property) properties: string\">properties</data-lsp>:  \"never\" }], },};`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n        camelcase: (string | {\n            properties: string;\n        })[];\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n        camelcase: (string | {\n            properties: string;\n        })[];\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) rules: {\n    &quot;no-console&quot;: string;\n    camelcase: (string | {\n        properties: string;\n    })[];\n}\">rules</data-lsp>: {  \"no-console\":  \"error\", <data-lsp lsp=\"(property) camelcase: (string | {\n    properties: string;\n})[]\">camelcase</data-lsp>: [\"error\", { <data-lsp lsp=\"(property) properties: string\">properties</data-lsp>:  \"never\" }], },};`\n```", "```\nshell`mkdir src`\n```", "```\nshell`mkdir src`\n```", "```\nshell`touch src/helloWorld.js`\n```", "```\nshell`touch src/helloWorld.js`\n```", "```\ntxt`.\u251c\u2500\u2500 .eslintrc.js\u251c\u2500\u2500 node_modules\u251c\u2500\u2500 package.json\u251c\u2500\u2500 src\u2502\u00a0\u00a0 \u2514\u2500\u2500 helloWorld.js\u2514\u2500\u2500 yarn.lock`\n```", "```\ntxt`.\u251c\u2500\u2500 .eslintrc.js\u251c\u2500\u2500 node_modules\u251c\u2500\u2500 package.json\u251c\u2500\u2500 src\u2502\u00a0\u00a0 \u2514\u2500\u2500 helloWorld.js\u2514\u2500\u2500 yarn.lock`\n```", "```\nsrc/helloWorld.jsjs`export  const  <data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>  =  \"Hello World\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>);`\n```", "```\nsrc/helloWorld.jsjs`export  const  <data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>  =  \"Hello World\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>);`\n```", "```\nsrc\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092ESLint\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308bshell`npx eslint src`\n```", "```\nsrc\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092ESLint\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308bshell`npx eslint src`\n```", "```\nsrc/helloWorld.jsjs`export  const  <data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>  =  \"Hello World\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>);`\n```", "```\nsrc/helloWorld.jsjs`export  const  <data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>  =  \"Hello World\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>);`\n```", "```\nsrc/helloWorld.jsjs`export  const  <data-lsp lsp=\"const helloWorld: &quot;Hello World&quot;\">helloWorld</data-lsp>  =  \"Hello World\";`\n```", "```\nsrc/helloWorld.jsjs`export  const  <data-lsp lsp=\"const helloWorld: &quot;Hello World&quot;\">helloWorld</data-lsp>  =  \"Hello World\";`\n```", "```\nshell`npx eslint src`\n```", "```\nshell`npx eslint src`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n        camelcase: (string | {\n            properties: string;\n        })[];\n        semi: string[];\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n        camelcase: (string | {\n            properties: string;\n        })[];\n        semi: string[];\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) rules: {\n    &quot;no-console&quot;: string;\n    camelcase: (string | {\n        properties: string;\n    })[];\n    semi: string[];\n}\">rules</data-lsp>: {  \"no-console\":  \"error\", <data-lsp lsp=\"(property) camelcase: (string | {\n    properties: string;\n})[]\">camelcase</data-lsp>: [\"error\", { <data-lsp lsp=\"(property) properties: string\">properties</data-lsp>:  \"never\" }], <data-lsp lsp=\"(property) semi: string[]\">semi</data-lsp>: [\"error\",  \"always\"], },};`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n        camelcase: (string | {\n            properties: string;\n        })[];\n        semi: string[];\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    rules: {\n        &quot;no-console&quot;: string;\n        camelcase: (string | {\n            properties: string;\n        })[];\n        semi: string[];\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) rules: {\n    &quot;no-console&quot;: string;\n    camelcase: (string | {\n        properties: string;\n    })[];\n    semi: string[];\n}\">rules</data-lsp>: {  \"no-console\":  \"error\", <data-lsp lsp=\"(property) camelcase: (string | {\n    properties: string;\n})[]\">camelcase</data-lsp>: [\"error\", { <data-lsp lsp=\"(property) properties: string\">properties</data-lsp>:  \"never\" }], <data-lsp lsp=\"(property) semi: string[]\">semi</data-lsp>: [\"error\",  \"always\"], },};`\n```", "```\nsrc/helloWorld.jsjs`export  const  <data-lsp lsp=\"const helloWorld: &quot;Hello World&quot;\">helloWorld</data-lsp>  =  \"Hello World\"`\n```", "```\nsrc/helloWorld.jsjs`export  const  <data-lsp lsp=\"const helloWorld: &quot;Hello World&quot;\">helloWorld</data-lsp>  =  \"Hello World\"`\n```", "```\nshell`npx eslint src`\n```", "```\nshell`npx eslint src`\n```", "```\nshell`npx eslint src --fix`\n```", "```\nshell`npx eslint src --fix`\n```", "```\nshell`yarn add -D \\  'eslint-config-airbnb-base@^15' \\  'eslint-plugin-import@^2'`\n```", "```\nshell`yarn add -D \\  'eslint-config-airbnb-base@^15' \\  'eslint-plugin-import@^2'`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) extends: string[]\">extends</data-lsp>: [\"airbnb-base\"],};`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) extends: string[]\">extends</data-lsp>: [\"airbnb-base\"],};`\n```", "```\nsrc/helloWorld.jsjs`export  const  <data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>  =  \"Hello World\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>);`\n```", "```\nsrc/helloWorld.jsjs`export  const  <data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>  =  \"Hello World\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>);`\n```", "```\nshell`npx eslint src`\n```", "```\nshell`npx eslint src`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) extends: string[]\">extends</data-lsp>: [\"airbnb-base\"], <data-lsp lsp=\"(property) rules: {\n    &quot;import/prefer-default-export&quot;: string;\n}\">rules</data-lsp>: {  \"import/prefer-default-export\":  \"off\", },};`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) extends: string[]\">extends</data-lsp>: [\"airbnb-base\"], <data-lsp lsp=\"(property) rules: {\n    &quot;import/prefer-default-export&quot;: string;\n}\">rules</data-lsp>: {  \"import/prefer-default-export\":  \"off\", },};`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n        quotes: string[];\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n        quotes: string[];\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) extends: string[]\">extends</data-lsp>: [\"airbnb-base\"], <data-lsp lsp=\"(property) rules: {\n    &quot;import/prefer-default-export&quot;: string;\n    quotes: string[];\n}\">rules</data-lsp>: {  \"import/prefer-default-export\":  \"off\", <data-lsp lsp=\"(property) quotes: string[]\">quotes</data-lsp>: [\"error\",  \"double\"], },};`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n        quotes: string[];\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n    };\n    extends: string[];\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n        quotes: string[];\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", }, <data-lsp lsp=\"(property) extends: string[]\">extends</data-lsp>: [\"airbnb-base\"], <data-lsp lsp=\"(property) rules: {\n    &quot;import/prefer-default-export&quot;: string;\n    quotes: string[];\n}\">rules</data-lsp>: {  \"import/prefer-default-export\":  \"off\", <data-lsp lsp=\"(property) quotes: string[]\">quotes</data-lsp>: [\"error\",  \"double\"], },};`\n```", "```\nshell`npx eslint src`\n```", "```\nshell`npx eslint src`\n```", "```\njs`// eslint-disable-next-line camelcaseexport  const  <data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>  =  \"Hello World\";`\n```", "```\njs`// eslint-disable-next-line camelcaseexport  const  <data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>  =  \"Hello World\";`\n```", "```\nshell`mkdir eslint-typescript-tutorialcd eslint-typescript-tutorial/echo  '{\"name\": \"eslint-typescript-tutorial\",\"license\": \"UNLICENSED\"}'  > package.json`\n```", "```\nshell`mkdir eslint-typescript-tutorialcd eslint-typescript-tutorial/echo '{\"name\": \"eslint-typescript-tutorial\",\"license\": \"UNLICENSED\"}'  > package.json`\n```", "```\nshell`yarn add -D 'typescript@^4.6'  '@types/node@^16'`\n```", "```\nshell`yarn add -D 'typescript@^4.6'  '@types/node@^16'`\n```", "```\nshell`touch tsconfig.json`\n```", "```\nshell`touch tsconfig.json`\n```", "```\ntsconfig.jsonjson`{  \"compilerOptions\": {  \"outDir\":  \"dist\" },  \"include\": [\"src\"]}`\n```", "```\ntsconfig.jsonjson`{  \"compilerOptions\": {  \"outDir\":  \"dist\" },  \"include\": [\"src\"]}`\n```", "```\nshell`mkdir srctouch src/helloWorld.ts`\n```", "```\nshell`mkdir srctouch src/helloWorld.ts`\n```", "```\nshell`npx tsc`\n```", "```\nshell`npx tsc`\n```", "```\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210text`.\u251c\u2500\u2500 dist\u2502\u00a0\u00a0 \u2514\u2500\u2500 helloWorld.js\u251c\u2500\u2500 node_modules\u251c\u2500\u2500 package.json\u251c\u2500\u2500 src\u2502\u00a0\u00a0 \u2514\u2500\u2500 helloWorld.ts\u251c\u2500\u2500 tsconfig.json\u2514\u2500\u2500 yarn.lock`\n```", "```\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210text`.\u251c\u2500\u2500 dist\u2502\u00a0\u00a0 \u2514\u2500\u2500 helloWorld.js\u251c\u2500\u2500 node_modules\u251c\u2500\u2500 package.json\u251c\u2500\u2500 src\u2502\u00a0\u00a0 \u2514\u2500\u2500 helloWorld.ts\u251c\u2500\u2500 tsconfig.json\u2514\u2500\u2500 yarn.lock`\n```", "```\nshell`yarn add -D \\  'eslint@^8' \\  '@typescript-eslint/parser@^5' \\  '@typescript-eslint/eslint-plugin@^5'`\n```", "```\nshell`yarn add -D \\  'eslint@^8' \\  '@typescript-eslint/parser@^5' \\  '@typescript-eslint/eslint-plugin@^5'`\n```", "```\nshell`npx eslint -vv8.15.0`\n```", "```\nshell`npx eslint -vv8.15.0`\n```", "```\nshell`yarn add -D \\  'eslint-config-airbnb-base@^15' \\  'eslint-plugin-import@^2' \\  'eslint-config-airbnb-typescript@^17'`\n```", "```\nshell`yarn add -D \\  'eslint-config-airbnb-base@^15' \\  'eslint-plugin-import@^2' \\  'eslint-config-airbnb-typescript@^17'`\n```", "```\nshell`touch tsconfig.eslint.json .eslintrc.js`\n```", "```\nshell`touch tsconfig.eslint.json .eslintrc.js`\n```", "```\n\u4f5c\u6210\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020text`.\u251c\u2500\u2500 .eslintrc.js\u251c\u2500\u2500 dist\u2502\u00a0\u00a0 \u2514\u2500\u2500 helloWorld.js\u251c\u2500\u2500 node_modules\u251c\u2500\u2500 package.json\u251c\u2500\u2500 src\u2502\u00a0\u00a0 \u2514\u2500\u2500 helloWorld.ts\u251c\u2500\u2500 tsconfig.eslint.json\u251c\u2500\u2500 tsconfig.json\u2514\u2500\u2500 yarn.lock`\n```", "```\n\u4f5c\u6210\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020text`.\u251c\u2500\u2500 .eslintrc.js\u251c\u2500\u2500 dist\u2502\u00a0\u00a0 \u2514\u2500\u2500 helloWorld.js\u251c\u2500\u2500 node_modules\u251c\u2500\u2500 package.json\u251c\u2500\u2500 src\u2502\u00a0\u00a0 \u2514\u2500\u2500 helloWorld.ts\u251c\u2500\u2500 tsconfig.eslint.json\u251c\u2500\u2500 tsconfig.json\u2514\u2500\u2500 yarn.lock`\n```", "```\ntsconfig.eslint.jsonjson`{  \"extends\":  \"./tsconfig.json\"}`\n```", "```\ntsconfig.eslint.jsonjson`{  \"extends\":  \"./tsconfig.json\"}`\n```", "```\ntsconfig.eslint.jsonjson`{  \"extends\":  \"./tsconfig.json\",  \"compilerOptions\": {  \"allowJs\":  true },  \"include\": [\"src\",  \".*.js\"]}`\n```", "```\ntsconfig.eslint.jsonjson`{  \"extends\":  \"./tsconfig.json\",  \"compilerOptions\": {  \"allowJs\":  true },  \"include\": [\"src\",  \".*.js\"]}`\n```", "```\ntsconfig.eslint.jsonjson`{  \"extends\":  \"./tsconfig.json\",  \"compilerOptions\": {  \"allowJs\":  true },  \"include\": [\"src\",  \".*.js\",  \"*.js\"]}`\n```", "```\ntsconfig.eslint.jsonjson`{  \"extends\":  \"./tsconfig.json\",  \"compilerOptions\": {  \"allowJs\":  true },  \"include\": [\"src\",  \".*.js\",  \"*.js\"]}`\n```", "```\nshell`npx tsc --showConfig --project tsconfig.eslint.json`\n```", "```\nshell`npx tsc --showConfig --project tsconfig.eslint.json`\n```", "```\ntext`{ \"compilerOptions\": { \"outDir\": \"./dist\", \"allowJs\": true }, \"files\": [ \"./src/helloWorld.ts\", \"./.eslintrc.js\" ], \"include\": [ \"src\", \".*.js\", \"*.js\" ]}`\n```", "```\ntext`{ \"compilerOptions\": { \"outDir\": \"./dist\", \"allowJs\": true }, \"files\": [ \"./src/helloWorld.ts\", \"./.eslintrc.js\" ], \"include\": [ \"src\", \".*.js\", \"*.js\" ]}`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    parser: string;\n    plugins: string[];\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n        project: string;\n        tsconfigRootDir: string;\n    };\n    ignorePatterns: string[];\n    extends: string[];\n    rules: {\n        ...;\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    parser: string;\n    plugins: string[];\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n        project: string;\n        tsconfigRootDir: string;\n    };\n    ignorePatterns: string[];\n    extends: string[];\n    rules: {\n        ...;\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) parser: string\">parser</data-lsp>:  \"@typescript-eslint/parser\", <data-lsp lsp=\"(property) plugins: string[]\">plugins</data-lsp>: [\"@typescript-eslint\"], <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n    project: string;\n    tsconfigRootDir: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", <data-lsp lsp=\"(property) project: string\">project</data-lsp>:  \"./tsconfig.eslint.json\", <data-lsp lsp=\"(property) tsconfigRootDir: string\">tsconfigRootDir</data-lsp>: <data-lsp lsp=\"var __dirname: string\">__dirname</data-lsp>, }, <data-lsp lsp=\"(property) ignorePatterns: string[]\">ignorePatterns</data-lsp>: [\"dist\"], <data-lsp lsp=\"(property) extends: string[]\">extends</data-lsp>: [  \"airbnb-base\",  \"airbnb-typescript/base\",  \"plugin:@typescript-eslint/recommended-requiring-type-checking\", ], <data-lsp lsp=\"(property) rules: {\n    &quot;import/prefer-default-export&quot;: string;\n    &quot;@typescript-eslint/quotes&quot;: string[];\n}\">rules</data-lsp>: {  \"import/prefer-default-export\":  \"off\",  \"@typescript-eslint/quotes\": [\"error\",  \"double\"], },};`\n```", "```\n.eslintrc.jsjs`<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    parser: string;\n    plugins: string[];\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n        project: string;\n        tsconfigRootDir: string;\n    };\n    ignorePatterns: string[];\n    extends: string[];\n    rules: {\n        ...;\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    root: boolean;\n    parser: string;\n    plugins: string[];\n    env: {\n        browser: boolean;\n        es2021: boolean;\n    };\n    parserOptions: {\n        ecmaVersion: string;\n        sourceType: string;\n        project: string;\n        tsconfigRootDir: string;\n    };\n    ignorePatterns: string[];\n    extends: string[];\n    rules: {\n        ...;\n    };\n}\">exports</data-lsp>  = { <data-lsp lsp=\"(property) root: boolean\">root</data-lsp>:  true, <data-lsp lsp=\"(property) parser: string\">parser</data-lsp>:  \"@typescript-eslint/parser\", <data-lsp lsp=\"(property) plugins: string[]\">plugins</data-lsp>: [\"@typescript-eslint\"], <data-lsp lsp=\"(property) env: {\n    browser: boolean;\n    es2021: boolean;\n}\">env</data-lsp>: { <data-lsp lsp=\"(property) browser: boolean\">browser</data-lsp>:  true, <data-lsp lsp=\"(property) es2021: boolean\">es2021</data-lsp>:  true, }, <data-lsp lsp=\"(property) parserOptions: {\n    ecmaVersion: string;\n    sourceType: string;\n    project: string;\n    tsconfigRootDir: string;\n}\">parserOptions</data-lsp>: { <data-lsp lsp=\"(property) ecmaVersion: string\">ecmaVersion</data-lsp>:  \"latest\", <data-lsp lsp=\"(property) sourceType: string\">sourceType</data-lsp>:  \"module\", <data-lsp lsp=\"(property) project: string\">project</data-lsp>:  \"./tsconfig.eslint.json\", <data-lsp lsp=\"(property) tsconfigRootDir: string\">tsconfigRootDir</data-lsp>: <data-lsp lsp=\"var __dirname: string\">__dirname</data-lsp>, }, <data-lsp lsp=\"(property) ignorePatterns: string[]\">ignorePatterns</data-lsp>: [\"dist\"], <data-lsp lsp=\"(property) extends: string[]\">extends</data-lsp>: [  \"airbnb-base\",  \"airbnb-typescript/base\",  \"plugin:@typescript-eslint/recommended-requiring-type-checking\", ], <data-lsp lsp=\"(property) rules: {\n    &quot;import/prefer-default-export&quot;: string;\n    &quot;@typescript-eslint/quotes&quot;: string[];\n}\">rules</data-lsp>: {  \"import/prefer-default-export\":  \"off\",  \"@typescript-eslint/quotes\": [\"error\",  \"double\"], },};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    parser: string;\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    parser: string;\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) parser: string\">parser</data-lsp>:  \"@typescript-eslint/parser\",  // ...};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    parser: string;\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    parser: string;\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) parser: string\">parser</data-lsp>:  \"@typescript-eslint/parser\",  // ...};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    plugins: string[];\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    plugins: string[];\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) plugins: string[]\">plugins</data-lsp>: [\"@typescript-eslint\"],  // ...};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    plugins: string[];\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    plugins: string[];\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) plugins: string[]\">plugins</data-lsp>: [\"@typescript-eslint\"],  // ...};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    parserOptions: {\n        project: string;\n        tsconfigRootDir: string;\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    parserOptions: {\n        project: string;\n        tsconfigRootDir: string;\n    };\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) parserOptions: {\n    project: string;\n    tsconfigRootDir: string;\n}\">parserOptions</data-lsp>: {  // ... <data-lsp lsp=\"(property) project: string\">project</data-lsp>:  \"./tsconfig.eslint.json\", <data-lsp lsp=\"(property) tsconfigRootDir: string\">tsconfigRootDir</data-lsp>: <data-lsp lsp=\"var __dirname: string\">__dirname</data-lsp>, },  // ...};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    parserOptions: {\n        project: string;\n        tsconfigRootDir: string;\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    parserOptions: {\n        project: string;\n        tsconfigRootDir: string;\n    };\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) parserOptions: {\n    project: string;\n    tsconfigRootDir: string;\n}\">parserOptions</data-lsp>: {  // ... <data-lsp lsp=\"(property) project: string\">project</data-lsp>:  \"./tsconfig.eslint.json\", <data-lsp lsp=\"(property) tsconfigRootDir: string\">tsconfigRootDir</data-lsp>: <data-lsp lsp=\"var __dirname: string\">__dirname</data-lsp>, },  // ...};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    ignorePatterns: string[];\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    ignorePatterns: string[];\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) ignorePatterns: string[]\">ignorePatterns</data-lsp>: [\"dist\"],  // ...};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    ignorePatterns: string[];\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    ignorePatterns: string[];\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) ignorePatterns: string[]\">ignorePatterns</data-lsp>: [\"dist\"],  // ...};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    extends: string[];\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    extends: string[];\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) extends: string[]\">extends</data-lsp>: [  \"airbnb-base\",  // \u2460  \"airbnb-typescript/base\",  // \u2461  \"plugin:@typescript-eslint/recommended-requiring-type-checking\",  // \u2462 ],  // ...};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    extends: string[];\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    extends: string[];\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) extends: string[]\">extends</data-lsp>: [  \"airbnb-base\",  // \u2460  \"airbnb-typescript/base\",  // \u2461  \"plugin:@typescript-eslint/recommended-requiring-type-checking\",  // \u2462 ],  // ...};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n        &quot;@typescript-eslint/quotes&quot;: string[];\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n        &quot;@typescript-eslint/quotes&quot;: string[];\n    };\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) rules: {\n    &quot;import/prefer-default-export&quot;: string;\n    &quot;@typescript-eslint/quotes&quot;: string[];\n}\">rules</data-lsp>: {  \"import/prefer-default-export\":  \"off\",  \"@typescript-eslint/quotes\": [\"error\",  \"double\"], },  // ...};`\n```", "```\njs`<data-lsp lsp=\"module export=\n(property) export=: {\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n        &quot;@typescript-eslint/quotes&quot;: string[];\n    };\n}\">module</data-lsp>.<data-lsp lsp=\"module export=\n(property) export=: {\n    rules: {\n        &quot;import/prefer-default-export&quot;: string;\n        &quot;@typescript-eslint/quotes&quot;: string[];\n    };\n}\">exports</data-lsp>  = {  // ... <data-lsp lsp=\"(property) rules: {\n    &quot;import/prefer-default-export&quot;: string;\n    &quot;@typescript-eslint/quotes&quot;: string[];\n}\">rules</data-lsp>: {  \"import/prefer-default-export\":  \"off\",  \"@typescript-eslint/quotes\": [\"error\",  \"double\"], },  // ...};`\n```", "```\nsrc/helloWorld.tsts`export  const  <data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>  =  \"Hello World\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>);`\n```", "```\nsrc/helloWorld.tsts`export  const  <data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>  =  \"Hello World\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const hello_world: &quot;Hello World&quot;\">hello_world</data-lsp>);`\n```", "```\nshell`npx eslint .`\n```", "```\nshell`npx eslint .`\n```", "```\nsrc/helloWorld.tsts`export  const  <data-lsp lsp=\"const helloWorld: &quot;Hello World&quot;\">helloWorld</data-lsp>  =  \"Hello World\";`\n```", "```\nsrc/helloWorld.tsts`export  const  <data-lsp lsp=\"const helloWorld: &quot;Hello World&quot;\">helloWorld</data-lsp>  =  \"Hello World\";`\n```", "```\nshell`npx eslint .`\n```", "```\nshell`npx eslint .`\n```"]