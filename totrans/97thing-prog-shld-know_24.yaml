- en: Don't Be Afraid to Break Things
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要害怕破坏事物
- en: Don't Be Afraid to Break Things
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要害怕破坏事物
- en: Everyone with industry experience has undoubtedly worked on a project where
    the codebase was precarious at best. The system is poorly factored, and changing
    one thing always manages to break another unrelated feature. Whenever a module
    is added, the coder's goal is to change as little as possible, and hold their
    breath during every release. This is the software equivalent of playing Jenga
    with I-beams in a skyscraper, and is bound for disaster.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有行业经验的每个人都无疑曾经参与过一个代码库在最好的情况下都很脆弱的项目。系统的结构很差，改变一件事情总是会导致另一个无关的功能出现问题。每当添加一个模块时，编码人员的目标是尽可能少地进行更改，并在每次发布时屏住呼吸。这就像在摩天大楼中用I形梁玩“掏砖块游戏”，注定会失败。
- en: The reason that making changes is so nerve wracking is because the system is
    sick. It needs a doctor, otherwise its condition will only worsen. You already
    know what is wrong with your system, but you are afraid of breaking the eggs to
    make your omelet. A skilled surgeon knows that cuts have to be made in order to
    operate, but the skilled surgeon also knows that the cuts are temporary and will
    heal. The end result of the operation is worth the initial pain, and the patient
    should heal to a better state than they were in before the surgery.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 进行更改如此令人紧张的原因是因为系统有病。它需要医生，否则它的状况只会变得更糟。您已经知道系统出了什么问题，但您害怕打破鸡蛋来做煎蛋卷。一位技术娴熟的外科医生知道必须切割才能进行手术，但技术娴熟的外科医生也知道这些切口是暂时的，会愈合。手术的最终结果值得最初的痛苦，患者应该康复到比手术前更好的状态。
- en: Don't be afraid of your code. Who cares if something gets temporarily broken
    while you move things around? A paralyzing fear of change is what got your project
    into this state to begin with. Investing the time to refactor will pay for itself
    several times over the life cycle of your project. An added benefit is that your
    team's experience dealing with the sick system makes you all experts in knowing
    how it *should* work. Apply this knowledge rather than resent it. Working on a
    system you hate is not how anybody should have to spend their time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不要害怕您的代码。如果在移动事物时出现暂时的破坏，又有谁会在乎呢？对变化的瘫痪恐惧是导致项目陷入这种状态的原因。投入时间进行重构将在项目的生命周期内多次回报。另一个好处是，您的团队通过处理有问题的系统的经验使您们成为了知道它应该如何工作的专家。利用这些知识而不是怨恨它。在一个你讨厌的系统上工作不是任何人应该花时间的方式。
- en: Redefine internal interfaces, restructure modules, refactor copy–pasted code,
    and simplify your design by reducing dependencies. You can significantly reduce
    code complexity by eliminating corner cases, which often result from improperly
    coupled features. Slowly transition the old structure into the new one, testing
    along the way. Trying to accomplish a large refactor in "one big shebang" will
    cause enough problems to make you consider abandoning the whole effort midway
    through.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 重新定义内部接口，重构模块，重构复制粘贴的代码，并通过减少依赖关系简化设计。通过消除边缘情况，可以显著降低代码复杂性，这些边缘情况通常是由于特性耦合不当而导致的。将旧结构逐步过渡到新结构中，并在过程中进行测试。试图在“一次性大改动”中完成大规模重构将会引发足够多的问题，使您考虑在中途放弃整个努力。
- en: Be the surgeon who isn't afraid to cut out the sick parts to make room for healing.
    The attitude is contagious and will inspire others to start working on those cleanup
    projects they've been putting off. Keep a "hygiene" list of tasks that the team
    feels are worthwhile for the general good of the project. Convince management
    that even though these tasks may not produce visible results, they will reduce
    expenses and expedite future releases. Never stop caring about the general "health"
    of the code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 成为那位不怕切除病变部分为愈合腾出空间的外科医生。这种态度是具有感染力的，会激励其他人开始着手那些一直搁置的清理项目。保持一个团队认为对项目整体利益有益的“卫生”任务清单。说服管理层，即使这些任务可能不会产生明显的结果，它们也会降低开支并加快未来的发布速度。永远不要停止关注代码的整体“健康”。
- en: By [Mike Lewis](http://programmer.97things.oreilly.com/wiki/index.php/Mike_Lewis)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[迈克·刘易斯](http://programmer.97things.oreilly.com/wiki/index.php/Mike_Lewis)
