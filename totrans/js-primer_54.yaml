- en: Todoアイテムの更新と削除を実装する
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://jsprimer.net/use-case/todoapp/update-delete/](https://jsprimer.net/use-case/todoapp/update-delete/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: このセクションではTodoアプリの残りの機能である「Todoアイテムの更新」と「Todoアイテムの削除」を実装していきます。
  prefs: []
  type: TYPE_NORMAL
- en: 「Todoアイテムの更新」とは、チェックボックスをクリックして未完了だったらチェックをつけて完了済みに、逆に完了済みのアイテムを未完了へとトグルする機能のことです。完了状態をTodoアイテムごとに持ち、それぞれのTodoの進捗を管理できる機能です。
  prefs: []
  type: TYPE_NORMAL
- en: 一方の「Todoアイテムの削除」はボタンをクリックしたらTodoアイテムを削除する機能です。 不要となったTodoを削除して完了済みのTodoを取り除くなどに利用できる機能です。
  prefs: []
  type: TYPE_NORMAL
- en: まずは「Todoアイテムの更新」から実装します。その後「Todoアイテムの削除」を実装していきます。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#todo-item-update)*Todoアイテムの更新*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*現時点ではTodoアイテムが完了済みかどうかの状態が表示されていません。 そのため、まずはTodoアイテムが完了済みかを表示する必要があります。 HTMLの[`<input
    type="checkbox">`](https://developer.mozilla.org/ja/docs/Web/HTML/Element/Input/checkbox)要素を使ってチェックボックスを表示し、Todoアイテムごとの完了状態を表現します。'
  prefs: []
  type: TYPE_NORMAL
- en: '`<input type="checkbox">`は`checked`属性がない場合はチェックが外れた状態のチェックボックスとなります。 一方`<input
    type="checkbox" checked>`のように`checked`属性がある場合はチェックがついたチェックボックスとなります。'
  prefs: []
  type: TYPE_NORMAL
- en: '![input要素のchecked属性の違い](../Images/965424f11cf84356abd4925e6a7ab65c.png)'
  prefs: []
  type: TYPE_IMG
- en: まずは確認のため、`src/App.js`にてTodoListModelの`onChange`メソッドで登録したリスナー関数内を書き換え、チェックボックスを表示しています。
  prefs: []
  type: TYPE_NORMAL
- en: Todoアイテム要素である`<li>`要素中に次のように`<input>`要素を追加してチェックボックスを表示に追加します。 チェックボックスである`<input>`要素にはスタイルのために`class`属性を`checkbox`とします。
    合わせて完了済みの場合は`<s>`要素を使って打ち消し線を表示しています。
  prefs: []
  type: TYPE_NORMAL
- en: src/App.jsから変更点を抜粋
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`<input type="checkbox">`要素はクリックするとチェックの表示がトグルします。 しかし、モデルである`TodoItemModel`の`completed`プロパティの状態は自動では切り替わりません。
    これにより表示とモデルの状態が異なってしまうという問題が発生します。'
  prefs: []
  type: TYPE_NORMAL
- en: この問題は次のような操作をしてみると確認できます。
  prefs: []
  type: TYPE_NORMAL
- en: Todoアイテムを追加する
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Todoアイテムのチェックボックスにチェックをつける
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 別の新しいTodoアイテムを追加する
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: すべてのチェックボックスのチェックがリセットされてしまう
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: この問題を避けるためにも、`<input type="checkbox">`要素がチェックされたらモデルの状態を更新する必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: '`<input type="checkbox">`要素はチェックされたときに`change`イベントをディスパッチします。 この`change`イベントをリッスンして、TodoItemモデルの状態を更新すればモデルと表示の状態を同期できます。'
  prefs: []
  type: TYPE_NORMAL
- en: '`input`要素からディスパッチされる`change`イベントをリッスンする処理は次のように書けます。'
  prefs: []
  type: TYPE_NORMAL
- en: まずは`todoItemElement`要素の下にある`input`要素を`querySelector`メソッドで探索します。 以前は`document.querySelector`で`document`以下からCSSセレクタにマッチする要素を探索していました。
    `todoItemElement.querySelector`メソッドを使うことで、`todoItemElement`下にある要素だけを対象に探索できます。
  prefs: []
  type: TYPE_NORMAL
- en: そして、見つけた`input`要素に対して`addEventListener`メソッドで`change`イベントが発生したときに呼ばれるコールバック関数を登録できます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: ここまでをまとめると、Todoアイテムの更新は次の2つのステップで実装できます。
  prefs: []
  type: TYPE_NORMAL
- en: '`TodoListModel`に指定したTodoアイテムの更新処理を追加する'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: チェックボックスの`change`イベントが発生したら、モデルの状態を更新する
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ここから実際にTodoアイテムの更新を`todoapp`プロジェクトに実装していきます。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#TodoListModel-updateTodo)*`TodoListModel`に指定したTodoアイテムの更新処理を追加する*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*まずは、`TodoListModel`に指定したTodoアイテムを更新する`updateTodo`メソッドを追加します。 TodoListModelの`updateTodo`メソッドは、指定したidと一致するTodoアイテムの完了状態（`completed`プロパティ）を更新します。'
  prefs: []
  type: TYPE_NORMAL
- en: src/model/TodoListModel.jsの変更点を抜粋
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[](#onChange-update-model)*チェックボックスの`change`イベントが発生したら、Todoアイテムの完了状態を更新する*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*次に`input`要素の`change`イベントのリスナー関数で、Todoアイテムの完了状態を更新します。'
  prefs: []
  type: TYPE_NORMAL
- en: '`src/App.js`にて、TodoListModelの`onChange`メソッドで登録したリスナー関数内を次のように書き換えます。'
  prefs: []
  type: TYPE_NORMAL
- en: '`App.js`で`todoItemElement`の子要素として`checkbox`というクラス名をつけた`input`要素を追加します。 この`input`要素の`change`イベントが発生したら、TodoListModelの`updateTodo`メソッドを呼び出すようにします。
    チェックがトグルするたびに呼び出されるので、`completed`には現在の状態を反転（トグル）した値を渡します。'
  prefs: []
  type: TYPE_NORMAL
- en: src/App.jsから変更点を抜粋
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: TodoListModelの`updateTodo`メソッド内では`emitChange`メソッドによって、`TodoListModel`の変更が通知されます。
    これによってTodoListModelの`onChange`で登録したイベントリスナーが呼び出され、表示が更新されます。
  prefs: []
  type: TYPE_NORMAL
- en: これで表示とモデルが同期でき「Todoアイテムの更新処理」が実装できました。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#delete)*削除機能*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*次は「Todoアイテムの削除機能」を実装していきます。'
  prefs: []
  type: TYPE_NORMAL
- en: 基本的な流れは「Todoアイテムの更新機能」と同じです。 `TodoListModel`にTodoアイテムを削除する処理を追加します。 そして表示には削除ボタンを追加し、削除ボタンがクリックされたときに指定したTodoアイテムを削除する処理を呼び出します。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#TodoListModel-deleteTodo)*`TodoListModel`に指定したTodoアイテムを削除する処理を追加する*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*まずは、`TodoListModel`に指定したTodoアイテムを削除する`deleteTodo`メソッドを次のように追加します。 TodoListModelの`deleteTodo`メソッドは、指定したidと一致するTodoアイテムを削除します。'
  prefs: []
  type: TYPE_NORMAL
- en: '`items`というTodoアイテムの配列から指定したidと一致するTodoアイテムを取り除くことで削除しています。'
  prefs: []
  type: TYPE_NORMAL
- en: src/model/TodoListModel.jsの変更点を抜粋
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[](#onChange-update-model)*削除ボタンの`click`イベントが発生したら、Todoアイテムを削除する*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*次に削除ボタンを追加し、ボタンをクリックしたらTodoアイテムを削除する処理(`deleteTodo`)を呼び出す実装を`App.js`へと追加します。'
  prefs: []
  type: TYPE_NORMAL
- en: '`src/App.js`にて、TodoListModelの`onChange`メソッドで登録したリスナー関数内を次のように書き換えます。 `todoItemElement`の子要素として`delete`というクラス名をつけた`button`要素を追加します。
    この要素がクリック（`click`）されたときに呼び出されるイベントリスナーを`addEventListener`メソッドで登録します。 このイベントリスナーの中でTodoListModelの`deleteTodo`メソッドを呼び、指定したidのTodoアイテムを削除します。'
  prefs: []
  type: TYPE_NORMAL
- en: src/App.jsから変更点を抜粋
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: TodoListModelの`deleteTodo`メソッド内では`emitChange`メソッドによって、`TodoListModel`の変更が通知されます。
    これにより表示が`TodoListModel`と同期するように更新され、表示からもTodoアイテムが削除できます。
  prefs: []
  type: TYPE_NORMAL
- en: これで「Todoアイテムの削除機能」が実装できました。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#section-checklist)*このセクションのチェックリスト*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**   Todoアイテムの完了状態として`<input type="checkbox">`を表示に追加した'
  prefs: []
  type: TYPE_NORMAL
- en: チェックボックスが更新されたときの`change`イベントのリスナー関数でTodoアイテムを更新した
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Todoアイテムを削除するボタンとして`<button class="delete">x</button>`を表示に追加した
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 削除ボタンの`click`イベントのリスナー関数でTodoアイテムを削除した
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Todoアイテムの追加、更新、削除の機能が動作するのを確認した
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: このセクションでTodoアプリに必要な要件が実装できました。
  prefs: []
  type: TYPE_NORMAL
- en: Todoアイテムを追加できる
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Todoアイテムの完了状態を更新できる
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Todoアイテムを削除できる
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ここまでのTodoアプリは次のURLで確認できます。
  prefs: []
  type: TYPE_NORMAL
- en: '[https://jsprimer.net/use-case/todoapp/update-delete/delete-feature/](https://jsprimer.net/use-case/todoapp/update-delete/delete-feature/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 最後のセクションでは、`App.js`のリファクタリングを行って継続的に開発できるアプリの作り方について見ていきます。*******
  prefs: []
  type: TYPE_NORMAL
