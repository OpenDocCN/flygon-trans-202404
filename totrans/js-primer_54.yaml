- en: Todoアイテムの更新と削除を実装する
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现更新和删除Todo项目
- en: 原文：[https://jsprimer.net/use-case/todoapp/update-delete/](https://jsprimer.net/use-case/todoapp/update-delete/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/use-case/todoapp/update-delete/](https://jsprimer.net/use-case/todoapp/update-delete/)
- en: このセクションではTodoアプリの残りの機能である「Todoアイテムの更新」と「Todoアイテムの削除」を実装していきます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现Todo应用的剩余功能，即“更新Todo项目”和“删除Todo项目”。
- en: 「Todoアイテムの更新」とは、チェックボックスをクリックして未完了だったらチェックをつけて完了済みに、逆に完了済みのアイテムを未完了へとトグルする機能のことです。完了状態をTodoアイテムごとに持ち、それぞれのTodoの進捗を管理できる機能です。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “更新Todo项目”是指单击复选框，如果未完成，则标记为已完成，反之亦然。 它为每个Todo项目保留了一个完成状态，并管理了每个Todo的进度。
- en: 一方の「Todoアイテムの削除」はボタンをクリックしたらTodoアイテムを削除する機能です。 不要となったTodoを削除して完了済みのTodoを取り除くなどに利用できる機能です。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，“删除Todo项目”是指单击按钮后删除Todo项目的功能。 可用于删除不需要的Todo项目或清除已完成的Todo项目等功能。
- en: まずは「Todoアイテムの更新」から実装します。その後「Todoアイテムの削除」を実装していきます。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先实现“更新Todo项目”，然后再实现“删除Todo项目”。
- en: '[](#todo-item-update)*Todoアイテムの更新*'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#todo-item-update)*更新Todo项目*'
- en: '*現時点ではTodoアイテムが完了済みかどうかの状態が表示されていません。 そのため、まずはTodoアイテムが完了済みかを表示する必要があります。 HTMLの[`<input
    type="checkbox">`](https://developer.mozilla.org/ja/docs/Web/HTML/Element/Input/checkbox)要素を使ってチェックボックスを表示し、Todoアイテムごとの完了状態を表現します。'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*目前，Todo项目的完成状态尚未显示。 因此，首先需要显示Todo项目是否已完成。 使用HTML的[`<input type="checkbox">`](https://developer.mozilla.org/ja/docs/Web/HTML/Element/Input/checkbox)元素显示复选框，并表示每个Todo项目的完成状态。'
- en: '`<input type="checkbox">`は`checked`属性がない場合はチェックが外れた状態のチェックボックスとなります。 一方`<input
    type="checkbox" checked>`のように`checked`属性がある場合はチェックがついたチェックボックスとなります。'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`<input type="checkbox">`如果没有`checked`属性，则复选框处于未选中状态。 另一方面，如果有`checked`属性，比如`<input
    type="checkbox" checked>`，则复选框处于选中状态。'
- en: '![input要素のchecked属性の違い](../Images/965424f11cf84356abd4925e6a7ab65c.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![input element checked属性的区别](../Images/965424f11cf84356abd4925e6a7ab65c.png)'
- en: まずは確認のため、`src/App.js`にてTodoListModelの`onChange`メソッドで登録したリスナー関数内を書き換え、チェックボックスを表示しています。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请确保在`src/App.js`中，将TodoListModel的`onChange`方法注册的监听函数内部修改，以显示复选框。
- en: Todoアイテム要素である`<li>`要素中に次のように`<input>`要素を追加してチェックボックスを表示に追加します。 チェックボックスである`<input>`要素にはスタイルのために`class`属性を`checkbox`とします。
    合わせて完了済みの場合は`<s>`要素を使って打ち消し線を表示しています。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在代表Todo项目的`<li>`元素中添加`<input>`元素，以显示复选框。 为复选框`<input>`元素添加`class`属性作为样式`checkbox`。
    同时，如果已完成，则使用`<s>`元素显示删除线。
- en: src/App.jsから変更点を抜粋
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从`src/App.js`中提取更改内容。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`<input type="checkbox">`要素はクリックするとチェックの表示がトグルします。 しかし、モデルである`TodoItemModel`の`completed`プロパティの状態は自動では切り替わりません。
    これにより表示とモデルの状態が異なってしまうという問題が発生します。'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`<input type="checkbox">`元素被点击时，复选框的显示会切换。 但是，模型`TodoItemModel`的`completed`属性状态不会自动切换。
    这会导致显示状态和模型状态不一致的问题。'
- en: この問題は次のような操作をしてみると確認できます。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过尝试以下操作来确认此问题。
- en: Todoアイテムを追加する
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加Todo项目
- en: Todoアイテムのチェックボックスにチェックをつける
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给Todo项目的复选框打勾
- en: 別の新しいTodoアイテムを追加する
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个新的Todo项目
- en: すべてのチェックボックスのチェックがリセットされてしまう
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有复选框的选中状态都将被重置
- en: この問題を避けるためにも、`<input type="checkbox">`要素がチェックされたらモデルの状態を更新する必要があります。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个问题，当`<input type="checkbox">`元素被选中时，需要更新模型的状态。
- en: '`<input type="checkbox">`要素はチェックされたときに`change`イベントをディスパッチします。 この`change`イベントをリッスンして、TodoItemモデルの状態を更新すればモデルと表示の状態を同期できます。'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`<input type="checkbox">`元素在被选中时会触发`change`事件。 监听这个`change`事件，就可以更新TodoItem模型的状态，从而同步模型和显示状态。'
- en: '`input`要素からディスパッチされる`change`イベントをリッスンする処理は次のように書けます。'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 可以如下所示监听`input`元素分派的`change`事件。
- en: まずは`todoItemElement`要素の下にある`input`要素を`querySelector`メソッドで探索します。 以前は`document.querySelector`で`document`以下からCSSセレクタにマッチする要素を探索していました。
    `todoItemElement.querySelector`メソッドを使うことで、`todoItemElement`下にある要素だけを対象に探索できます。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用`querySelector`方法在`todoItemElement`元素下查找`input`元素。 以前，我们使用`document.querySelector`在整个文档中查找与CSS选择器匹配的元素。
    使用`todoItemElement.querySelector`方法，我们可以仅在`todoItemElement`下查找元素。
- en: そして、見つけた`input`要素に対して`addEventListener`メソッドで`change`イベントが発生したときに呼ばれるコールバック関数を登録できます。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以为找到的`input`元素注册一个回调函数，以便在`change`事件发生时调用。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: ここまでをまとめると、Todoアイテムの更新は次の2つのステップで実装できます。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 总结到目前为止，可以通过以下两个步骤实现更新Todo项目。
- en: '`TodoListModel`に指定したTodoアイテムの更新処理を追加する'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`TodoListModel`添加更新指定的Todo项目的处理
- en: チェックボックスの`change`イベントが発生したら、モデルの状態を更新する
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当复选框的`change`事件发生时，更新模型的状态
- en: ここから実際にTodoアイテムの更新を`todoapp`プロジェクトに実装していきます。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始在`todoapp`项目中实现Todo项目的更新。
- en: '[](#TodoListModel-updateTodo)*`TodoListModel`に指定したTodoアイテムの更新処理を追加する*'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#TodoListModel-updateTodo)*向`TodoListModel`添加更新指定的Todo项目的处理*'
- en: '*まずは、`TodoListModel`に指定したTodoアイテムを更新する`updateTodo`メソッドを追加します。 TodoListModelの`updateTodo`メソッドは、指定したidと一致するTodoアイテムの完了状態（`completed`プロパティ）を更新します。'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，在`TodoListModel`中添加一个名为`updateTodo`的方法来更新指定的Todo项目。 TodoListModel的`updateTodo`方法用于更新与指定id匹配的Todo项目的完成状态（`completed`属性）。'
- en: src/model/TodoListModel.jsの変更点を抜粋
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从`src/model/TodoListModel.js`中提取更改内容。
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[](#onChange-update-model)*チェックボックスの`change`イベントが発生したら、Todoアイテムの完了状態を更新する*'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#onChange-update-model)*当复选框的`change`事件发生时，更新Todo项目的完成状态*'
- en: '*次に`input`要素の`change`イベントのリスナー関数で、Todoアイテムの完了状態を更新します。'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*接下来，在`input`元素的`change`事件的监听函数中，更新Todo项目的完成状态。'
- en: '`src/App.js`にて、TodoListModelの`onChange`メソッドで登録したリスナー関数内を次のように書き換えます。'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/App.js`中，将TodoListModel的`onChange`方法注册的监听函数内部修改如下。
- en: '`App.js`で`todoItemElement`の子要素として`checkbox`というクラス名をつけた`input`要素を追加します。 この`input`要素の`change`イベントが発生したら、TodoListModelの`updateTodo`メソッドを呼び出すようにします。
    チェックがトグルするたびに呼び出されるので、`completed`には現在の状態を反転（トグル）した値を渡します。'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.js`中，作为`todoItemElement`的子元素添加一个带有`checkbox`类名的`input`元素。 当此`input`元素的`change`事件发生时，调用TodoListModel的`updateTodo`方法。
    每次切换时都会调用，因此将当前状态的反转（切换）传递给`completed`。
- en: src/App.jsから変更点を抜粋
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从`src/App.js`中提取更改内容。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: TodoListModelの`updateTodo`メソッド内では`emitChange`メソッドによって、`TodoListModel`の変更が通知されます。
    これによってTodoListModelの`onChange`で登録したイベントリスナーが呼び出され、表示が更新されます。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在TodoListModel的`updateTodo`方法内部，通过`emitChange`方法通知`TodoListModel`的更改。 这将触发TodoListModel的`onChange`事件注册的监听器，并更新显示。
- en: これで表示とモデルが同期でき「Todoアイテムの更新処理」が実装できました。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这样显示和模型就同步了，实现了“Todo项目的更新处理”。
- en: '[](#delete)*削除機能*'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#delete)*删除功能*'
- en: '*次は「Todoアイテムの削除機能」を実装していきます。'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*接下来将实现“Todo项目的删除功能”。'
- en: 基本的な流れは「Todoアイテムの更新機能」と同じです。 `TodoListModel`にTodoアイテムを削除する処理を追加します。 そして表示には削除ボタンを追加し、削除ボタンがクリックされたときに指定したTodoアイテムを削除する処理を呼び出します。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 基本流程与“Todo项目的更新功能”相同。 在`TodoListModel`中添加删除Todo项目的处理过程。 然后在显示中添加删除按钮，并在单击删除按钮时调用删除指定Todo项目的处理过程。
- en: '[](#TodoListModel-deleteTodo)*`TodoListModel`に指定したTodoアイテムを削除する処理を追加する*'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#TodoListModel-deleteTodo)*添加删除指定Todo项目的处理过程到`TodoListModel`*'
- en: '*まずは、`TodoListModel`に指定したTodoアイテムを削除する`deleteTodo`メソッドを次のように追加します。 TodoListModelの`deleteTodo`メソッドは、指定したidと一致するTodoアイテムを削除します。'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，将删除指定Todo项目的`deleteTodo`方法添加到`TodoListModel`中。 `TodoListModel`的`deleteTodo`方法将删除与指定id匹配的Todo项目。'
- en: '`items`というTodoアイテムの配列から指定したidと一致するTodoアイテムを取り除くことで削除しています。'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从名为`items`的Todo项目数组中删除与指定id匹配的Todo项目来实现删除。
- en: src/model/TodoListModel.jsの変更点を抜粋
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从src/model/TodoListModel.js中提取更改点
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[](#onChange-update-model)*削除ボタンの`click`イベントが発生したら、Todoアイテムを削除する*'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#onChange-update-model)*当点击删除按钮时，删除Todo项目*'
- en: '*次に削除ボタンを追加し、ボタンをクリックしたらTodoアイテムを削除する処理(`deleteTodo`)を呼び出す実装を`App.js`へと追加します。'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*接下来添加删除按钮，并在单击按钮时调用删除Todo项目的处理过程(`deleteTodo`)的实现添加到`App.js`中。'
- en: '`src/App.js`にて、TodoListModelの`onChange`メソッドで登録したリスナー関数内を次のように書き換えます。 `todoItemElement`の子要素として`delete`というクラス名をつけた`button`要素を追加します。
    この要素がクリック（`click`）されたときに呼び出されるイベントリスナーを`addEventListener`メソッドで登録します。 このイベントリスナーの中でTodoListModelの`deleteTodo`メソッドを呼び、指定したidのTodoアイテムを削除します。'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/App.js`中，将`TodoListModel`的`onChange`方法注册的监听函数内部修改为以下内容。 将`button`元素添加为`todoItemElement`的子元素，并为其添加名为`delete`的类名。
    当单击此元素时（`click`），使用`addEventListener`方法注册调用TodoListModel的`deleteTodo`方法，并删除指定id的Todo项目。
- en: src/App.jsから変更点を抜粋
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从src/App.js中提取更改点
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: TodoListModelの`deleteTodo`メソッド内では`emitChange`メソッドによって、`TodoListModel`の変更が通知されます。
    これにより表示が`TodoListModel`と同期するように更新され、表示からもTodoアイテムが削除できます。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在`TodoListModel`的`deleteTodo`方法中，通过`emitChange`方法通知`TodoListModel`的更改。 这样，显示将与`TodoListModel`同步更新，从而可以从显示中删除Todo项目。
- en: これで「Todoアイテムの削除機能」が実装できました。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就实现了“Todo项目的删除功能”。
- en: '[](#section-checklist)*このセクションのチェックリスト*'
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#section-checklist)*本节的检查清单*'
- en: '**   Todoアイテムの完了状態として`<input type="checkbox">`を表示に追加した'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**   添加了一个用于表示Todo项目完成状态的`<input type="checkbox">`。'
- en: チェックボックスが更新されたときの`change`イベントのリスナー関数でTodoアイテムを更新した
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在复选框更新时的`change`事件监听函数中更新了Todo项目。
- en: Todoアイテムを削除するボタンとして`<button class="delete">x</button>`を表示に追加した
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个用于删除Todo项目的按钮，即`<button class="delete">x</button>`。
- en: 削除ボタンの`click`イベントのリスナー関数でTodoアイテムを削除した
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在删除按钮的`click`事件监听函数中删除了Todo项目。
- en: Todoアイテムの追加、更新、削除の機能が動作するのを確認した
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Todo项目的添加、更新、删除功能已经确认可正常运作。
- en: このセクションでTodoアプリに必要な要件が実装できました。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一节，已经实现了Todo应用程序所需的要求。
- en: Todoアイテムを追加できる
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以添加Todo项目
- en: Todoアイテムの完了状態を更新できる
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以更新Todo项目的完成状态
- en: Todoアイテムを削除できる
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以删除Todo项目
- en: ここまでのTodoアプリは次のURLで確認できます。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下URL中查看到目前的Todo应用程序。
- en: '[https://jsprimer.net/use-case/todoapp/update-delete/delete-feature/](https://jsprimer.net/use-case/todoapp/update-delete/delete-feature/)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://jsprimer.net/use-case/todoapp/update-delete/delete-feature/](https://jsprimer.net/use-case/todoapp/update-delete/delete-feature/)'
- en: 最後のセクションでは、`App.js`のリファクタリングを行って継続的に開発できるアプリの作り方について見ていきます。*******
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节中，我们将看到如何对`App.js`进行重构，以便持续开发可持续的应用程序。*******
