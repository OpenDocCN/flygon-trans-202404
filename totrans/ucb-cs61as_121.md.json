["```\n(stream-filter (lambda (pair)\n                 (prime? (+ (car pair) (cadr pair))))\n               int-pairs) \n```", "```\n(stream-map (lambda (x) (list (stream-car s) x))\n            (stream-cdr t))1 \n```", "```\n(define (pairs s t)\n  (cons-stream (list (stream-car s) (stream-car t))\n               (combine (stream-map (lambda (x) (list (stream-car s) x))\n                                                  (stream-cdr t))\n                                      (pairs (stream-cdr s) (stream-cdr t))))) \n```", "```\n(define (pairs s t)\n  (cons-stream (list (stream-car s) (stream-car t))\n               (interleave (stream-map (lambda (x) (list (stream-car s) x))\n                                       (stream-cdr t))\n               (pairs (stream-cdr s) (stream-cdr t))))) \n```"]