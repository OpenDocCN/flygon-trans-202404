- en: Normal Order and Applicative Order
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正常次序和应用次序
- en: Lazy Evaluator
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 惰性评估器
- en: 'To start, get our version of the lazy evaluator:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请获取我们的惰性评估器版本：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that we have an evaluator expressed as a Lisp program, we can experiment
    with alternative choices in language design simply by modifying the evaluator.
    Indeed, new languages are often invented by first writing an evaluator that embeds
    the new language within an existing high-level language.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将评估器表达为一个Lisp程序，我们可以通过简单修改评估器来尝试语言设计中的替代选择。实际上，新语言通常是通过首先编写一个将新语言嵌入到现有高级语言中的评估器来发明的。
- en: For example, if we wish to discuss some aspect of a proposed modification to
    Lisp with another member of the Lisp community, we can supply an evaluator that
    embodies the change. The recipient can then experiment with the new evaluator
    and send back comments as further modifications. Not only does the high-level
    implementation base make it easier to test and debug the evaluator; in addition,
    the embedding enables the designer to snarf features from the underlying language,
    just as our embedded Lisp evaluator uses primitives and control structure from
    the underlying Lisp. Only later (if ever) need the designer go to the trouble
    of building a complete implementation in a low- level language or in hardware.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们希望与Lisp社区的另一位成员讨论对Lisp的某个方面的拟议修改，我们可以提供一个体现了该变化的评估器。接收者然后可以尝试新的评估器，并将评论作为进一步的修改发送回来。高级别实现基础不仅使得测试和调试评估器更加容易；此外，嵌入还使设计者能够从底层语言中提取功能，就像我们的嵌入式Lisp评估器使用底层Lisp的原语和控制结构一样。设计者只有在以后（如果有的话）才需要费力地在低级语言或硬件中构建完整的实现。
- en: In this section and the next we explore some variations on Scheme that provide
    significant additional expressive power.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节和下一节中，我们探讨了一些提供显著额外表达能力的Scheme变体。
- en: Review of Normal and Applicative Order
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正常和应用次序的回顾
- en: In Lesson 1, where we began our discussion of models of evaluation, we noted
    that Scheme is an applicative-order language, namely, that all the arguments to
    Scheme procedures are evaluated when the procedure is applied. In contrast, normal-order
    languages delay evaluation of procedure arguments until the actual argument values
    are needed. Delaying evaluation of procedure arguments until the last possible
    moment (e.g., until they are required by a primitive operation) is called lazy
    evaluation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1课中，我们开始讨论求值模型时，我们注意到Scheme是一种应用次序语言，即，当应用过程时，Scheme过程的所有参数都会被求值。相比之下，正常次序语言会延迟求值过程参数，直到实际的参数值被需要。延迟求值过程参数直到最后可能的时刻（例如，直到它们被原始操作所需要）被称为惰性求值。
- en: Consider the procedure
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下过程
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Evaluating `(try 0 (/ 1 0))` generates an error in Scheme. With lazy evaluation,
    there would be no error. Evaluating the expression would return 1, because the
    argument `(/ 1 0)` would never be evaluated.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scheme中，评估 `(try 0 (/ 1 0))` 会生成一个错误。使用惰性求值，不会出现错误。评估该表达式会返回1，因为参数 `(/ 1 0)`
    永远不会被求值。
- en: An example that exploits lazy evaluation is the definition of a procedure `unless`
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 利用惰性求值的一个例子是定义一个过程 `unless`
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: that can be used in expressions such as
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它可用于表达式中，如下所示
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This won't work in an applicative-order language because both the usual value
    and the exceptional value will be evaluated before `unless` is called. An advantage
    of lazy evaluation is that some procedures, such as `unless`, can do useful computation
    even if evaluation of some of their arguments would produce errors or would not
    terminate.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用次序语言中，这种做法行不通，因为通常值和异常值都会在调用 `unless` 之前被求值。惰性求值的一个优点是，一些过程（例如 `unless`）可以进行有用的计算，即使它们的一些参数的求值会产生错误或不会终止。
- en: '**Test Your Understanding**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试您的理解**'
- en: 'Consider the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下情况
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In applicative order, how many times does `+` get called?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用次序中，`+` 会被调用多少次？
- en: In normal order, how many times does `+` get called?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常次序中，`+` 会被调用多少次？
- en: Strict vs. Non-Strict
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 严格与非严格
- en: If the body of a procedure is entered before an argument has been evaluated
    we say that the procedure is **non-strict** in that argument. If the argument
    is evaluated before the body of the procedure is entered we say that the procedure
    is **strict** in that argument. In a purely applicative-order language, all procedures
    are strict in each argument. In a purely normal-order language, all compound procedures
    are non-strict in each argument, and primitive procedures may be either strict
    or non-strict. There are also languages (see [SICP Exercise 4.31](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-27.html#%_thm_4.31))
    that give programmers detailed control over the strictness of the procedures they
    define.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在进入过程体之前对参数进行求值，则称该过程在该参数上是**非严格**的。如果在进入过程体之前对参数进行求值，则称该过程在该参数上是**严格**的。在纯应用顺序语言中，所有过程在每个参数上都是严格的。在纯正常顺序语言中，所有复合过程在每个参数上都是非严格的，原始过程可以是严格的或非严格的。还有一些语言（参见[SICP
    Exercise 4.31](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-27.html#%_thm_4.31)）允许程序员对他们定义的过程的严格性进行详细控制。
- en: A striking example of a procedure that can usefully be made non-strict is `cons`
    (or, in general, almost any constructor for data structures). One can do useful
    computation, combining elements to form data structures and operating on the resulting
    data structures, even if the values of the elements are not known. It makes perfect
    sense, for instance, to compute the length of a list without knowing the values
    of the individual elements in the list. We will exploit this idea later in the
    lesson to implement the streams of Lesson 11 as lists formed of non-strict `cons`
    pairs.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个引人注目的例子是一个可以有用地变为非严格的过程是`cons`（或者，一般来说，几乎任何数据结构的构造函数）。即使元素的值未知，我们也可以进行有用的计算，将元素组合成数据结构并对生成的数据结构进行操作。例如，计算列表的长度而不知道列表中各个元素的值是完全有意义的。我们将在后面的课程中利用这个想法，将第11课的流实现为由非严格`cons`对形成的列表。
