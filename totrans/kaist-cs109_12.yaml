- en: StringBuilder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We often want to build up a large string from small pieces. As an example,
    consider the method joinToString of lists and sets. Let''s implement a simple
    version for lists ([join1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/18-stringbuilder/join1.kts)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This works, as can be seen from this test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'However, remember that string objects are immutable. When adding another number
    to the current string s, a completely new string has to be created, and all the
    characters are copied from the old string to the new one. When the length of the
    list is large, this could be a slow operation. Let''s write some code to measure
    the running time of our function join ([join2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/18-stringbuilder/join2.kts)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The output is
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note how the code gets slower and slower: Doubling the number of elements causes
    the runtime to increase by a factor of roughly four.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve this problem, we need a mutable string type: an object where we can
    add more characters at the end without copying everything. The Java library provides
    the data type StringBuilder which is essentially a mutable String. Once the string
    has been fully built, we can convert it to a normal string by calling its toString()
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the new join function ([join3.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/18-stringbuilder/join3.kts)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is much faster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that even a million numbers are no problem now.
  prefs: []
  type: TYPE_NORMAL
- en: 'StringBuilder objects support most string methods, and have some other methods
    that turn them into mutable strings:'
  prefs: []
  type: TYPE_NORMAL
- en: s.append(ch) appends the character ch;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: s.append(t) appends the string t;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: s.append(n) appends the string representation of the number n (which can be
    any number type such as Int, Double, Long, etc.);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: s.append(x) appends the string representation of any object (by calling their
    toString() method);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: s.delete(i, j) deletes characters from index i (inclusive) until j (exclusive);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: s.insert(i, t) inserts the string t at index i;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: s.toString() returns the contents as a normal, immutable string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
