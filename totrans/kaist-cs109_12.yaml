- en: StringBuilder
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StringBuilder
- en: 'We often want to build up a large string from small pieces. As an example,
    consider the method joinToString of lists and sets. Let''s implement a simple
    version for lists ([join1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/18-stringbuilder/join1.kts)):'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常希望从小片段构建一个大字符串。例如，考虑列表和集合的joinToString方法。让我们为列表实现一个简单版本（[join1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/18-stringbuilder/join1.kts)）：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This works, as can be seen from this test:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可行的，可以从这个测试中看出：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'However, remember that string objects are immutable. When adding another number
    to the current string s, a completely new string has to be created, and all the
    characters are copied from the old string to the new one. When the length of the
    list is large, this could be a slow operation. Let''s write some code to measure
    the running time of our function join ([join2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/18-stringbuilder/join2.kts)):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请记住字符串对象是不可变的。当将另一个数字添加到当前字符串s时，必须创建一个全新的字符串，并且所有字符都从旧字符串复制到新字符串中。当列表长度很大时，这可能是一个缓慢的操作。让我们编写一些代码来测量我们的函数join的运行时间（[join2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/18-stringbuilder/join2.kts)）：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The output is
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note how the code gets slower and slower: Doubling the number of elements causes
    the runtime to increase by a factor of roughly four.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意代码如何变得越来越慢：将元素数量翻倍会导致运行时大约增加四倍。
- en: 'To solve this problem, we need a mutable string type: an object where we can
    add more characters at the end without copying everything. The Java library provides
    the data type StringBuilder which is essentially a mutable String. Once the string
    has been fully built, we can convert it to a normal string by calling its toString()
    method.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，我们需要一个可变字符串类型：一个我们可以在末尾添加更多字符而不必复制所有内容的对象。Java库提供了数据类型StringBuilder，它本质上是一个可变的字符串。一旦字符串完全构建完成，我们可以通过调用它的toString()方法将其转换为普通字符串。
- en: 'Here is the new join function ([join3.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/18-stringbuilder/join3.kts)):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是新的join函数（[join3.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/18-stringbuilder/join3.kts)）：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And this is much faster:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这样要快得多：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that even a million numbers are no problem now.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使是一百万个数字现在也不是问题。
- en: 'StringBuilder objects support most string methods, and have some other methods
    that turn them into mutable strings:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: StringBuilder对象支持大多数字符串方法，并且具有一些其他方法，可以将它们转换为可变字符串：
- en: s.append(ch) appends the character ch;
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.append(ch)附加字符ch;
- en: s.append(t) appends the string t;
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.append(t)附加字符串t;
- en: s.append(n) appends the string representation of the number n (which can be
    any number type such as Int, Double, Long, etc.);
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.append(n)附加数字n的字符串表示形式（可以是任何数字类型，如Int、Double、Long等）;
- en: s.append(x) appends the string representation of any object (by calling their
    toString() method);
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.append(x)附加任何对象的字符串表示形式（通过调用它们的toString()方法）;
- en: s.delete(i, j) deletes characters from index i (inclusive) until j (exclusive);
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.delete(i, j)从索引i（包括）到j（不包括）删除字符;
- en: s.insert(i, t) inserts the string t at index i;
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.insert(i, t)在索引i处插入字符串t;
- en: s.toString() returns the contents as a normal, immutable string.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s.toString()以普通的、不可变的字符串形式返回内容。
