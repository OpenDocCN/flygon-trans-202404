["```\n// Check to see if the employee is eligible for full benefits\nif ((employee.flags & HOURLY_FLAG) &&\n(employee.age > 65)) \n```", "```\nif (employee.isEligibleForFullBenefits()) \n```", "```\n// make sure the port is greater or equal to 1024\nif (port < 1024) {\n  throw new InvalidPortError(port);\n} \n```", "```\n// port numbers below 1024 (the privileged or \u201cwell-known ports\u201d)\n// require root access, which we don\u2019t have\nif (port < 1024) {\n  throw new InvalidPortError(port);\n} \n```", "```\nif (requiresRootPrivileges(port)) {\n  throw new InvalidPortError(port);\n}\n\nprivate boolean requiresRootPrivileges(int port) {\n  // port numbers below 1024 (the privileged or \"well-known ports\")\n  // require root access on unix systems\n  return port < 1024;\n} \n```", "```\nfinal static const HIGHEST_PRIVILEDGED_PORT = 1023;\n\nprivate boolean requiresRootPrivileges(int port) {\n  // The privileged or \"well-known ports\" require root access on unix systems\n  return port <= HIGHEST_PRIVILEDGED_PORT;\n} \n```", "```\nclass InheritanceAbuse extends ArrayList<String> {\n\n  public void performBusinessLogic(int i) {\n    // do things with stored strings\n  }\n\n} \n```", "```\nclass UsesComposition {\n\n  private final List<String> values = new ArrayList<String>();\n\n  public void performBusinessLogic(int i) {\n    // do things with stored strings\n  }\n\n  public void add(String value) {\n    this.values.add(value);\n  }\n\n} \n```", "```\nclass MyUntestableClass extends SomeDependency {\n  public void performBusinessLogic(int i) {\n    // do things using methods from SomeDependency\n  }\n} \n```", "```\nclass MyClass {\n  private final SomeDependency dependency;\n\n  MyClass(SomeDependency dependency) {\n    this.dependency = dependency;\n  }\n\n  public void performBusinessLogic(int i) {\n    // do things with dependency\n  }\n} \n```", "```\nclass ProcessorUpperCaseDecorator implements Processor {\n\n  private final Processor child;\n\n  ProcessorUpperCaseDecorator(Processor child) {\n    this.child = child;\n  }\n\n  @Override\n  public void process(String someString) {\n    child.process(someString.toUpperCase());\n  }\n\n} \n```", "```\nclass InheritanceUpperCaseDecorator extends ConcreteProcessor {\n\n  @Override\n  public void process(String someString) {\n    super.process(someString.toUpperCase());\n  }\n\n} \n```", "```\nclass Foo {\n   private int status;\n   private boolean approved;\n\n   foo() {\n     if (status == 12 || approved) {\n       doFoo();\n     }\n   }\n\n   bar() {\n     if (status == 12 || approved) {\n       doBar();\n     }\n   }\n} \n```", "```\nclass Foo {\n   private final static int PRE_APPROVED = 12;\n\n   private int status;\n   private boolean approved;\n\n   foo() {\n     if (isApproved()) {\n       doFoo();\n     }\n   }\n\n   bar() {\n     if (isApproved()) {\n       doBar();\n     }\n   }\n\n   private isApproved() {\n     return status == PRE_APPROVED || approved;\n   }\n} \n```", "```\npublic void doSomething(List<Widget> widgets) {\n  for (Widget widget : widgets) {\n    reportExistence(widget);\n    if (widget.snortles() > 0) {\n      reportDeviance(widget);\n      performSideEffect(widget);\n    }\n  }\n}\n\npublic void doSomethingSimilar(List<Widget> widgets) {\n  for (Widget widget : widgets) {\n    reportExistence(widget);\n    if (widget.snortles() > 0) {\n      reportDeviance(widget);\n      performDifferentSideEffect(widget);\n    }\n  }\n} \n```", "```\npublic void doSomething(List<Widget> widgets) {\n  doThings(widgets, false);\n}\n\npublic void doSomethingSimilar(List<Widget> widgets) {\n  doThings(widgets, true);\n}\n\nprivate void doThings(List<Widget> widgets, boolean doDifferentSideEffect) {\n  for (Widget widget : widgets) {\n    reportExistence(widget);\n    if (widget.snortles() > 0) {\n      reportDeviance(widget);\n      if (doDifferentSideEffect) {\n        performDifferentSideEffect(widget);\n      } else {\n        performSideEffect(widget);\n      }\n    }\n  }\n} \n```", "```\ninterface WidgetAction {\n   void apply(Widget widget);\n} \n```", "```\npublic void doSomething(List<Widget> widgets) {\n  doThings(widgets, performSideEffect());\n}\n\npublic void doSomethingSimilar(List<Widget> widgets) {\n  doThings(widgets, performDifferentSideEffect());\n}\n\nprivate WidgetAction performSideEffect() {\n  return new WidgetAction() {\n    @Override\n    public void apply(Widget widget) {\n      performSideEffect(widget);\n    }\n  };\n}\n\nprivate WidgetAction performDifferentSideEffect() {\n  return new WidgetAction() {\n    @Override\n    public void apply(Widget widget) {\n      performDifferentSideEffect(widget);\n    }\n  };\n}\n\nprivate void doThings(List<Widget> widgets, WidgetAction action ) {\n  for (Widget widget : widgets) {\n    reportExistence(widget);\n    if (widget.snortles() > 0) {\n      reportDeviance(widget);\n      action.apply(widget);\n    }\n  }\n} \n```", "```\npublic void doSomething(List<Widget> widgets) {\n  doThings(widgets, widget -> performSideEffect(widget));\n}\n\npublic void doSomethingSimilar(List<Widget> widgets) {\n  doThings(widgets, widget -> performDifferentSideEffect(widget));\n}\n\nprivate void doThings(List<Widget> widgets, Consumer<Widget> action ) {\n  for (Widget widget : widgets) {\n    reportExistence(widget);\n    if (widget.snortles() > 0) {\n      reportDeviance(widget);\n      action.accept(widget);\n    }\n  }\n} \n```", "```\nprivate void doThings(List<Widget> widgets, Consumer<Widget> action ) {\n  widgets\n  .stream()\n  .peek(widget -> reportExistence(widget))\n  .filter(widget -> widget.snortles() > 0)\n  .peek(widget -> reportDeviance(widget))\n  .forEach(action);\n} \n```", "```\npublic class Foo() {\n  private Bar bar;\n\n  public void doStuff() {\n    bar.doBarThings();\n  }\n\n  public void setBar(Bar bar) {\n    this.bar = bar;\n  }\n} \n```", "```\npublic class Foo() {\n  private final Bar bar;\n\n  public Foo(Bar bar) {\n    this.bar = bar;\n  }\n\n  public void doStuff() {\n    bar.doBarThings();\n  }\n} \n```", "```\npublic class HiddenDependencies {\n  public void doThings() {\n    Connection connection = Database.getInstance().getConnection();\n    // do things with connection\n    ....\n  }\n} \n```", "```\npublic class HiddenDependencies {\n  private final Database database;\n\n  public HiddenDependencies(Database database) {\n    this.database = database;\n  }\n\n  public void doThings() {\n    Connection connection = database.getConnection();\n    // do things with connection\n    ....\n  }\n} \n```", "```\npublic class Database implements IDatabase {\n  private static IDatabase instance = new Database();\n\n  public static IDatabase getInstance() {\n    return instance;\n  }\n\n  public static void setInstanceForTesting(IDatabase database) {\n    instance = database;\n  }\n\n} \n```", "```\npublic class Foo {\n  private Long id;\n\n  public Long getId() {\n    return id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hashCode(id);\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    Foo other = (Foo) obj;\n    return Objects.equals(id, other.id);\n  }\n} \n```", "```\n@Immutable\npublic final class Foo {\n  private final Long id;\n\n  public Foo(Long id) {\n    this.id = id;\n  }\n\n  public Long getId() {\n    return id;\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hashCode(id);\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    Foo other = (Foo) obj;\n    return Objects.equals(id, other.id);\n  }\n} \n```", "```\n@Immutable\npublic final class Bar {\n  private int anInt;\n  private String aString;\n\n  public Bar(int anInt, String aString) {\n    this.anInt = anInt;\n    this.aString = aString;\n  }\n\n  @CheckReturnValue\n  public Bar withAnInt(int anInt) {\n    return new Bar(anInt, this.aString);\n  }\n\n  @CheckReturnValue\n  public Bar withAString(String aString) {\n    return new Bar(this.antInt, aString);\n  }\n} \n```", "```\npublic Bar doThings(Bar bar) {\n  if(someLogic()) {\n    bar.withAnInt(42);\n  }\n  return bar;\n} \n```", "```\npublic Bar doThings(Bar bar) {\n  if(someLogic()) {\n    return bar.withAnInt(42);\n  }\n  return bar;\n} \n```", "```\npublic class Foo {\n  private final int x\n  private final int y;\n\n  @JsonCreator\n  public Foo(@JsonProperty(\"x\") int x, @JsonProperty(\"y\") int y) {\n   this.x = x;\n   this.y = y;\n  }\n} \n```", "```\nclass Example {\n  int[] myArray = {1, 2, 3, 4, 5, 6};\n  int theInt = 1;\n  String someString = \"Hello\";\n  double aDouble = 3.0;\n\n  void foo(int a, int b, int c, int d, int e, int f) {\n    if (f == 5) {\n      System.out.println(\"fnord\");\n    } else {\n      System.out.println(someString);\n    }\n\n    switch (a) {\n      case 0:\n        Other.doFoo();\n        break;\n      default:\n        Other.doBaz();\n    }\n  }\n\n  void bar(List<Integer> v) {\n    for (int i = 0; i < 10; i++) {\n      v.add(new Integer(i));\n    }\n  }\n} \n```", "```\npublic class Layout {\n\n  private int a;\n\n  Layout() {...}\n\n  public static Layout create() {...}\n\n  public void api1() {\n    if (...) {\n      doFoo();\n    }\n  }\n\n  public void api2() {\n    if(...) {\n      doBar();\n    }\n  }\n\n  private void doFoo() {\n    while(...) {\n      handleA();\n      handleB();\n    }\n    leaf();\n  }\n\n  private void handleA() {...}\n\n  private void handleB() {...}\n\n  private static void doBar() {\n    if (...) {\n      leaf();\n    }\n  }\n\n  private void leaf() {...}\n} \n```", "```\nprotected static Map<String, String> getHttpHeaders(HttpServletRequest request) {\n  Map<String, String> httpHeaders = new HashMap<String, String>();\n\n  if (request == null || request.getHeaderNames() == null) {\n    return httpHeaders;\n  }\n\n  Enumeration names = request.getHeaderNames();\n\n  while (names.hasMoreElements()) {\n    String name = (String)names.nextElement();\n    String value = request.getHeader(name);\n    httpHeaders.put(name.toLowerCase(), value);\n  }\n\n  return httpHeaders;\n} \n```", "```\nprotected static Map<String, String> getHttpHeaders(HttpServletRequest request) {\n  if ( isInValidHeader(request) ) {\n    return Collections.emptyMap();\n  }\n  return extractHeaders(request);\n}\n\nprivate static boolean isInValidHeader(HttpServletRequest request) {\n  return (request == null || request.getHeaderNames() == null);\n}\n\nprivate static Map<String, String> extractHeaders(HttpServletRequest request) {\n  Map<String, String> httpHeaders = new HashMap<String, String>();\n  for ( String name : Collections.list(request.getHeaderNames()) ) {\n    httpHeaders.put(name.toLowerCase(), request.getHeader(name));\n  }\n  return httpHeaders;\n} \n```", "```\npublic boolean isFnardy(String item) {\n  if (item.equals(\"AAA\")) {\n    return true;\n  } else if (item.equals(\"ABA\")) {\n    return true;\n  } else if (item.equals(\"CC\")) {\n    return true;\n  } else if (item.equals(\"FWR\")) {\n    return true;\n  } else {\n    return false;\n  }\n} \n```", "```\npublic boolean isFnardy(String item) {\n  return item.equals(\"AAA\")\n      || item.equals(\"ABA\")\n      || item.equals(\"CC\")\n      || item.equals(\"FWR\");\n} \n```", "```\nprivate final static Set<String> FNARDY_STRINGS\n  = ImmutableSet.of(\"AAA\",\n                    \"ABA\",\n                    \"CC\",\n                    \"FWR\");\n\npublic boolean isFnardy(String item) {\n  return FNARDY_STRINGS.contains(item);\n} \n```", "```\nenum ADomainConcept {\n  AAA(true),\n  ABA(true),\n  CC(true),\n  FWR(true),\n  OTHER(false),\n  ANDANOTHER(false);\n\n  private final boolean isFnardy;\n  private ADomainConcept(boolean isFnardy) {\n    this.isFnardy = isFnardy;\n  }\n\n  boolean  isFnardy() {\n    return isFnardy;\n  }\n} \n```", "```\n public void updateFooStatusAndRepository(Foo foo) {\n     if ( foo.hasFjord() ) {\n        this.repository(foo.getIdentifier(), this.collaborator.calculate(foo));\n     }\n\n     if (importantBusinessLogic()) {\n       foo.setStatus(FNAGLED);\n       this.collaborator.collectFnagledState(foo);\n     }\n  } \n```", "```\n public void registerFoo(Foo foo) {\n     handleFjords(foo);\n     updateFnagledState(foo);\n  }\n\n  private void handleFjords(Foo foo) {\n      if ( foo.hasFjord() ) {\n        this.repository(foo.getIdentifier(), this.collaborator.calculate(foo));\n     }\n  }\n\n  private void updateFnagledState(Foo foo) {\n    if (importantBusinessLogic()) {\n       foo.setStatus(FNAGLED);\n       this.collaborator.collectFnagledState(foo);\n     }\n  } \n```", "```\n public void registerFoo(Foo foo) {\n     handleFjords(foo);\n     updateFnagledState(foo);\n  }\n\n  private void handleFjords(Foo foo) {\n      if ( foo.hasFjord() ) {\n        this.repository(foo.getIdentifier(), this.collaborator.calculate(foo));\n     }\n  }\n\n  private void updateFnagledState(Foo foo) {\n    if (importantBusinessLogic()) {\n       updateFooStatus(foo);\n       this.collaborator.collectFnagledState(foo);\n     }\n  }\n\n  private void updateFooStatus(Foo foo) {\n    foo.setStatus(FNAGLED);\n  } \n```", "```\n if ( != null ) {\n    ...\n  } \n```", "```\n<dependency>\n    <groupId>com.google.code.findbugs</groupId>\n    <artifactId>jsr305</artifactId>\n    <version>3.0.1</version>\n</dependency> \n```", "```\n@javax.annotation.ParametersAreNonnullByDefault\npackage com.example.somepackage ; \n```", "```\npublic class Foo {\n  private final String a;\n  private final Integer b;\n  private final Float c;\n\n  public Foo(String value) {\n    this.a = Objects.requireNonNull(value);\n    this.b = 42;\n    this.c = 1.0f;\n  }\n\n  public Foo(Integer value) {\n    this.a = \"\";\n    this.b = Objects.requireNonNull(value);\n    this.c = 1.0f;\n  }\n\n  public Foo(Float value) {\n    this.a = \"\";\n    this.b = 42;\n    this.c = Objects.requireNonNull(value);\n  }\n} \n```", "```\npublic class Foo {\n  private final String a;\n  private final Integer b;\n  private final Float c;\n\n  private Foo(String a, Integer b, Float c) {\n    this.a = Objects.requireNonNull(a);\n    this.b = Objects.requireNonNull(b);\n    this.c = Objects.requireNonNull(c);\n  }\n\n  public Foo(String value) {\n    this(value, 42, 1.0f);\n  }\n\n  public Foo(Integer value) {\n    this(\"\", value, 1.0f);\n  }\n\n  public Foo(Float value) {\n    this(\"\", 42, value);\n  }\n} \n```", "```\ntry {\n  myObject.methodThrowingException();\n} catch (SomeCheckedException e) {\n  throw new RuntimeException(e);\n} \n```", "```\ntry {\n  myObject.methodThrowingException();\n} catch (Exception e) {\n  throw Throwables.propagate(e);\n} \n```"]