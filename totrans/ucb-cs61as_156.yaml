- en: Lesson 14 Intro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14课简介
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简介
- en: In this lesson, we'll discuss the basics of concurrency.z
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这节课中，我们将讨论并发的基础知识。
- en: Prerequisites
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: You should understand assignment and mutable data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该了解赋值和可变数据。
- en: Readings
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读材料
- en: Most of this lesson is based off of [these notes](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=64)
    and [SICP 3.4](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%_sec_3.4).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本课大部分内容基于[这些笔记](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=64)和[SICP
    3.4](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%_sec_3.4)。
- en: Introduction to Concurrency
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发简介
- en: In Unit 3, we saw the power of computational objects with *local state* as tools
    for modeling. But this power came at a price.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3单元中，我们看到了具有*局部状态*的计算对象作为建模工具的强大功能。但是这种能力是有代价的。
- en: 'By introducing assignment we are forced to admit *time* into our computational
    models. Before we introduced assignment, all our programs were timeless, in the
    sense that any expression that has a value always has the same value. In contrast,
    recall the example of modeling withdrawals from a bank account and returning the
    resulting balance, introduced at the beginning of section 3.1.1 in SICP:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引入赋值，我们被迫将*时间*引入到我们的计算模型中。在引入赋值之前，我们所有的程序都是无时无刻的，即任何具有值的表达式总是具有相同的值。相比之下，回想一下在SICP
    3.1.1节开头介绍的模拟从银行账户中提取现金并返回余额的示例：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here successive evaluations of the same expression yield different values. This
    behavior arises from the fact that the execution of assignment statements (in
    this case, assignments to the variable `balance`) delineates moments in time when
    values change. The result of evaluating an expression depends not only on the
    expression itself, but also on whether the evaluation occurs before or after these
    moments. Building models in terms of computational objects with local state forces
    us to confront time as an essential concept in programming.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里对同一表达式的连续求值会产生不同的值。这种行为源于赋值语句（在本例中是对变量`balance`的赋值）的执行，它界定了值改变的时间点。求值表达式的结果不仅取决于表达式本身，还取决于求值是在这些时间点之前还是之后发生的。以具有局部状态的计算对象构建模型迫使我们面对时间作为编程中的一个基本概念。
- en: We can go further in structuring computational models to match our perception
    of the physical world. Objects in the world do not change one at a time in sequence.
    Rather we perceive them as acting concurrently—all at once. So it is often natural
    to model systems as collections of computational processes that execute concurrently.
    Just as we can make our programs modular by organizing models in terms of objects
    with separate local state, it is often appropriate to divide computational models
    into parts that evolve separately and concurrently.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步构建计算模型以匹配我们对物理世界的感知。世界中的对象不是按顺序逐个更改的。相反，我们将它们视为同时行动——一次全部。因此，通常将系统建模为同时执行的计算过程的集合是很自然的。就像我们可以通过组织具有单独局部状态的对象来使程序模块化一样，通常适当将计算模型分成单独且并发地演变的部分。
- en: In addition to making programs more modular, concurrent computation can provide
    a speed advantage over sequential computation. Sequential computers execute only
    one operation at a time, so the amount of time it takes to perform a task is proportional
    to the total number of operations performed. However, if it is possible to decompose
    a problem into pieces that are relatively independent and need to communicate
    only rarely, it may be possible to allocate pieces to separate computing processors,
    producing a speed advantage proportional to the number of processors available.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使程序更加模块化外，并发计算还可以提供比顺序计算更快的速度优势。顺序计算机一次只执行一个操作，因此执行任务所需的时间与执行的总操作数量成正比。然而，如果可以将问题分解为相对独立且仅需要偶尔通信的部分，那么可能可以将部分分配给单独的计算处理器，从而产生与可用处理器数量成正比的速度优势。
- en: Unfortunately, the complexities introduced by assignment become even more problematic
    in the presence of concurrency. The fact of concurrent execution, either because
    the world operates in parallel or because our computers do, entails additional
    complexity in our understanding of time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在并发存在的情况下，赋值引入的复杂性变得更加棘手。并发执行的事实，无论是因为世界是并行运行的还是因为我们的计算机是，并且在我们对时间的理解中引入了额外的复杂性。
