["```\n # Original code is from https://github.com/spro/practical-pytorch\nimport time\nimport math\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader\n\nfrom name_dataset import NameDataset\nfrom torch.nn.utils.rnn import pack_padded_sequence, pad_packed_sequence\n\n# Parameters and DataLoaders\nHIDDEN_SIZE = 100\nN_CHARS = 128  # ASCII\nN_CLASSES = 18\n\nclass RNNClassifier(nn.Module):\n\n    def __init__(self, input_size, hidden_size, output_size, n_layers=1):\n        super(RNNClassifier, self).__init__()\n        self.hidden_size = hidden_size\n        self.n_layers = n_layers\n\n        self.embedding = nn.Embedding(input_size, hidden_size)\n        self.gru = nn.GRU(hidden_size, hidden_size, n_layers)\n        self.fc = nn.Linear(hidden_size, output_size)\n\n    def forward(self, input):\n        # Note: we run this all at once (over the whole input sequence)\n\n        # input = B x S . size(0) = B\n        batch_size = input.size(0)\n\n        # input:  B x S  -- (transpose) --> S x B\n        input = input.t()\n\n        # Embedding S x B -> S x B x I (embedding size)\n        print(\"  input\", input.size())\n        embedded = self.embedding(input)\n        print(\"  embedding\", embedded.size())\n\n        # Make a hidden\n        hidden = self._init_hidden(batch_size)\n\n        output, hidden = self.gru(embedded, hidden)\n        print(\"  gru hidden output\", hidden.size())\n        # Use the last layer output as FC's input\n        # No need to unpack, since we are going to use hidden\n        fc_output = self.fc(hidden)\n        print(\"  fc output\", fc_output.size())\n        return fc_output\n\n    def _init_hidden(self, batch_size):\n        hidden = torch.zeros(self.n_layers, batch_size, self.hidden_size)\n        return Variable(hidden)\n\n# Help functions\n\ndef str2ascii_arr(msg):\n    arr = [ord(c) for c in msg]\n    return arr, len(arr)\n\n# pad sequences and sort the tensor\ndef pad_sequences(vectorized_seqs, seq_lengths):\n    seq_tensor = torch.zeros((len(vectorized_seqs), seq_lengths.max())).long()\n    for idx, (seq, seq_len) in enumerate(zip(vectorized_seqs, seq_lengths)):\n        seq_tensor[idx, :seq_len] = torch.LongTensor(seq)\n    return seq_tensor\n\n# Create necessary variables, lengths, and target\ndef make_variables(names):\n    sequence_and_length = [str2ascii_arr(name) for name in names]\n    vectorized_seqs = [sl[0] for sl in sequence_and_length]\n    seq_lengths = torch.LongTensor([sl[1] for sl in sequence_and_length])\n    return pad_sequences(vectorized_seqs, seq_lengths)\n\nif __name__ == '__main__':\n    names = ['adylov', 'solan', 'hard', 'san']\n    classifier = RNNClassifier(N_CHARS, HIDDEN_SIZE, N_CLASSES)\n\n    for name in names:\n        arr, _ = str2ascii_arr(name)\n        inp = Variable(torch.LongTensor([arr]))\n        out = classifier(inp)\n        print(\"in\", inp.size(), \"out\", out.size())\n\n    inputs = make_variables(names)\n    out = classifier(inputs)\n    print(\"batch in\", inputs.size(), \"batch out\", out.size()) \n```"]