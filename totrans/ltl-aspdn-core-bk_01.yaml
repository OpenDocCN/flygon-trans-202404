- en: Your first application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your first application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ready to build your first web app with ASP.NET Core? You''ll need to gather
    a few things first:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Your favorite code editor.** You can use Atom, Sublime, Notepad, or whatever
    editor you prefer writing code in. If you don''t have a favorite, give Visual
    Studio Code a try. It''s a free, cross-platform code editor that has rich support
    for writing C#, JavaScript, HTML, and more. Just search for "download visual studio
    code" and follow the instructions.'
  prefs: []
  type: TYPE_NORMAL
- en: If you're on Windows, you can also use Visual Studio to build ASP.NET Core applications.
    You'll need Visual Studio 2017 version 15.3 or later (the free Community Edition
    is fine). Visual Studio has great code completion and other features specific
    to C#, although Visual Studio Code is close behind.
  prefs: []
  type: TYPE_NORMAL
- en: '**The .NET Core SDK.** Regardless of the editor or platform you''re using,
    you''ll need to install the .NET Core SDK, which includes the runtime, base libraries,
    and command line tools you need for building ASP.NET Core apps. The SDK can be
    installed on Windows, Mac, or Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you've decided on an editor, you'll need to get the SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Get the SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Get the SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Search for "download .net core" and follow the instructions on Microsoft''s
    download page for your platform. After the SDK has finished installing, open up
    the Terminal (or PowerShell on Windows) and use the `dotnet` command line tool
    (also called a **CLI**) to make sure everything is working:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can get more information about your platform with the `--info` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you see output like the above, you're ready to go!
  prefs: []
  type: TYPE_NORMAL
- en: Hello World in C#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hello World in C#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you dive into ASP.NET Core, try creating and running a simple C# application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do this all from the command line. First, open up the Terminal (or
    PowerShell on Windows). Navigate to the location you want to store your projects,
    such as your Documents directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `dotnet` command to create a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a basic C# program that writes some text to the screen. The program
    is comprised of two files: a project file (with a `.csproj` extension) and a C#
    code file (with a `.cs` extension). If you open the former in a text or code editor,
    you''ll see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`CsharpHelloWorld.csproj`**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The project file is XML-based and defines some metadata about the project. Later,
    when you reference other packages, those will be listed here (similar to a `package.json`
    file for npm). You won't have to edit this file by hand often.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Program.cs`**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`static void Main` is the entry point method of a C# program, and by convention
    it''s placed in a class (a type of code structure or module) called `Program`.
    The `using` statement at the top imports the built-in System classes from .NET
    and makes them available to the code in the class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'From inside the project directory, use `dotnet run` to run the program. You''ll
    see the output written to the console after the code compiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That's all it takes to scaffold and run a .NET program! Next, you'll do the
    same thing for an ASP.NET Core application.
  prefs: []
  type: TYPE_NORMAL
- en: Create an ASP.NET Core project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create an ASP.NET Core project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''re still in the directory you created for the Hello World sample, move
    back up to your Documents or home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a new project with `dotnet new`, this time with some extra options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This creates a new project from the `mvc` template, and adds some additional
    authentication and security bits to the project. (I'll cover security in the *Security
    and identity* chapter.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-o AspNetCoreTodo` flag tells `dotnet new` to create a new directory called
    `AspNetCoreTodo` for all the output files. You''ll see quite a few files show
    up in this project directory. Once you `cd` into the new directory, all you have
    to do is run the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Instead of printing to the console and exiting, this program starts a web server
    and waits for requests on port 5000.
  prefs: []
  type: TYPE_NORMAL
- en: Open your web browser and navigate to `http://localhost:5000`. You'll see the
    default ASP.NET Core splash page, which means your project is working! When you're
    done, press Ctrl-C in the terminal window to stop the server.
  prefs: []
  type: TYPE_NORMAL
- en: The parts of an ASP.NET Core project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `dotnet new mvc` template generates a number of files and directories for
    you. Here are the most important things you get out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Program.cs** and **Startup.cs** files set up the web server and ASP.NET
    Core pipeline. The `Startup` class is where you can add middleware that handles
    and modifies incoming requests, and serves things like static content or error
    pages. It's also where you add your own services to the dependency injection container
    (more on this later).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Models**, **Views**, and **Controllers** directories contain the components
    of the Model-View-Controller (MVC) architecture. You'll explore all three in the
    next chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **wwwroot** directory contains static assets like CSS, JavaScript, and image
    files. By default, the bower tool is used to manage CSS and JavaScript packages,
    but you can use whatever package manager you prefer (npm and yarn are popular
    choices). Files in `wwwroot` will be served as static content, and can be bundled
    and minified automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **appsettings.json** file contains configuration settings ASP.NET Core will
    load on startup. You can use this to store database connection strings or other
    things that you don't want to hard-code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips for Visual Studio Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you''re using Visual Studio Code (or Visual Studio) for the first time,
    here are a couple of helpful tips to get you started:'
  prefs: []
  type: TYPE_NORMAL
- en: '**F5 to run (and debug breakpoints)**: With your project open, press F5 to
    run the project in debug mode. This is the same as `dotnet run` on the command
    line, but you have the benefit of setting breakpoints in your code by clicking
    on the left margin:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Breakpoint in Visual Studio Code](breakpoint.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Lightbulb to fix problems**: If your code contains red squiggles (compiler
    errors), put your cursor on the code that''s red and look for the lightbulb icon
    on the left margin. The lightbulb menu will suggest common fixes, like adding
    a missing `using` statement to your code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Lightbulb suggestions](lightbulb.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Compile quickly**: Use the shortcut `Command-Shift-B` or `Control-Shift-B`
    to run the Build task, which does the same thing as `dotnet build`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A note about Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you use Git or GitHub to manage your source code, now is a good time to do
    `git init` and initialize a Git repository in the project directory. Make sure
    you add a `.gitignore` file that ignores the `bin` and `obj` directories. The
    Visual Studio template on GitHub's gitignore template repo ([https://github.com/github/gitignore](https://github.com/github/gitignore))
    works great.
  prefs: []
  type: TYPE_NORMAL
- en: There's plenty more to explore, so let's dive in and start building an application!
  prefs: []
  type: TYPE_NORMAL
