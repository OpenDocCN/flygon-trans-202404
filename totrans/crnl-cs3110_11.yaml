- en: 'Recitation 7: Examples of evaluation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7节课的例子
- en: 'We started off this course using the **substitution model** to understand how
    OCaml programs evaluate. The basic idea is simple: evaluate subexpressions to
    values, and when you have a function call, *substitute* the argument value for
    the formal parameter within the body of the function, and then evaluate the resulting
    expression.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始本课程时使用**替换模型**来理解 OCaml 程序的评估方式。基本思想很简单：将子表达式评估为值，当你有一个函数调用时，将实际参数值替换为函数体内的形式参数，然后评估结果表达式。
- en: But the substitution model is not without its shortcomings.  It's not a very
    efficient or realistic model of OCaml programs are really evaluated. It's also
    difficult to extend the substitution model to support side effects, which we will
    soon be covering. So last week we introduced a more realistic semantics called
    the **environment model** that is much closer to how OCaml is really implemented.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但是替换模型并不是没有缺点的。它不是 OCaml 程序真正评估的一个非常有效或现实的模型。将替换模型扩展到支持副作用也很困难，我们很快就会介绍。所以上周我们引入了一个更加现实的语义，称为**环境模型**，它更接近于
    OCaml 的实际实现方式。
- en: The environment model
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境模型
- en: 'Let''s review the environment model. We start with a core sublanguage of OCaml:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下环境模型。我们从 OCaml 的一个核心子语言开始：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: where `*e*` represents an expression, `*c*` a constant, `(*op*)` a built-in
    operator, `*x*` and `*f*` an identifier, `*C*` a constructor, and `*p*` a pattern.
    Expressions are evaluated with respect to an *environment*, which is a mapping
    from identifiers to values. We can think of an environment as a set of substitutions
    that we have delayed making.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `*e*` 代表一个表达式，`*c*` 代表一个常量，`(*op*)` 代表一个内置运算符，`*x*` 和 `*f*` 代表一个标识符，`*C*`
    代表一个构造器，`*p*` 代表一个模式。表达式根据一个*环境*进行评估，环境是从标识符到值的映射。我们可以将环境视为一组延迟执行的替换。
- en: '*Values* are, except for *closures*, a syntactic subset of expressions:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*值*，除了*闭包*，是表达式的一种语法子集：'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: where `*env*` is an environment and `<< f, **fun** *x* -> *e*, *env* >>` is
    a recursive closure. The closure records the name `*f*` of a recursive function,
    its implementation `**fun** *x* -> *e*`, and the dynamic environment `*env*` that
    was current at the time the function was defined. If the function is anonymous,
    rather then recursive, then we just leave the name out of the closure, so that
    it looks like `<< **fun** *x* -> *e*, *env* >>`
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `*env*` 是一个环境，`<< f, **fun** *x* -> *e*, *env* >>` 是一个递归闭包。该闭包记录了递归函数的名称
    `*f*`，其实现 `**fun** *x* -> *e*`，以及在函数定义时当前的动态环境 `*env*`。如果函数是匿名的，而不是递归的，则我们只需在闭包中省略名称，使其看起来像
    `<< **fun** *x* -> *e*, *env* >>`。
- en: 'We write `*env* :: *e* --> *v*` to mean that `*e*` evaluates to `*v*` in environment
    `*env*`. We write `*env*(*x*)` to look up the value of `*x*` in `*env*`. We write
    `{}` to mean the empty environment (which is never truly empty, because OCaml
    opens `Pervasives` automatically). We write `*env*+{*x*=*v*}` to mean the same
    environment as `*env*`, except that `*x*` is now bound to `*v*` instead of whatever
    value (if any) it had before.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '我们写 `*env* :: *e* --> *v*` 意味着在环境 `*env*` 中 `*e*` 的值为 `*v*`。我们写 `*env*(*x*)`
    来查找 `*env*` 中 `*x*` 的值。我们用 `{}` 表示空环境（虽然 OCaml 会自动打开 `Pervasives`，所以它从来不是真正的空）。我们写
    `*env*+{*x*=*v*}` 来表示与 `*env*` 相同的环境，只是 `*x*` 现在绑定到 `*v*`，而不是之前的任何值（如果有的话）。'
- en: Evaluation rules in the environment model
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境模型中的评估规则
- en: 'Constants and operators:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 常量和运算符：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Variables:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 变量：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Constructors:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 构造器：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Tuples:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 元组：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let expressions:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Let 表达式：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let rec expressions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Let rec 表达式：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Match expressions:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配表达式：
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Function expressions:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 函数表达式：
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Anonymous function application:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名函数应用：
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Recursive function application:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 递归函数应用：
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Primitive operator application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 原始运算符应用：
- en: '[PRE12]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The evaluation rules above use *lexical scope*, in which the meaning of a variable
    name is determined by *where* the name appears *lexically* in the source code,
    rather than *when* the variable name is dynamically evaluated. The latter would
    be *dynamic scope*. We saw rules for dynamic scope in lecture. OCaml (and nearly
    all modern languages) use lexical scope.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的评估规则使用了*词法作用域*，其中变量名的含义由变量名在源代码中的*词法*位置决定，而不是变量名动态评估的*时间*。后者将是*动态作用域*。我们在讲座中看到了动态作用域的规则。OCaml（以及几乎所有现代语言）使用词法作用域。
- en: You should practice evaluating some expressions using the environment model
    to see how it works.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该练习使用环境模型评估一些表达式，以了解其工作原理。
- en: Example 1.
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子1。
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: because
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因为
- en: The first `let` binds `d` to `2`, creating environment `{d=2}`.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个 `let` 将 `d` 绑定到 `2`，创建环境 `{d=2}`。
- en: The second `let` binds `f` to `<< fun x->x+d, {d=2} >>`, creating environment
    `{d=2, f=<< fun x->x+d, {d=2} >>}`.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个`let`将`f`绑定到`<< fun x->x+d, {d=2} >>`，创建环境`{d=2, f=<< fun x->x+d, {d=2} >>}`。
- en: The third `let` binds `d` to `1`, shadowing the previous binding, and creating
    environment `{d=1, f=<< fun x->x+d, {d=2} >>}`. *Note how the original binding
    of `x` persists in the closure. That's the key insight to take away from this
    example.*
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个`let`将`d`绑定到`1`，遮蔽了先前的绑定，并创建了环境`{d=1, f=<< fun x->x+d, {d=2} >>}`。*请注意原始的`x`绑定如何在闭包中保留。这是从这个示例中得出的关键见解。*
- en: The variable name `f` evaluates to the closure `<< fun x->x+d, {d=2} >>`.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名`f`评估为闭包`<< fun x->x+d, {d=2} >>`。
- en: Applying that closure to `2` creates an environment `{d=2,x=2}`. The function
    body `x+d` is then evaluated in that environment.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将该闭包应用于`2`会创建一个环境`{d=2,x=2}`。然后在该环境中评估函数体`x+d`。
- en: The variable name `d` evaluates to `2`. So does `x`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名`d`评估为`2`。`x`也是如此。
- en: We're left with `2+2`, which is really syntactic sugar for `(+) 2 2`.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们剩下`2+2`，这实际上是`(+) 2 2`的语法糖。
- en: Applying the primitive addition operator to `2` and `2` yields `4`.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将原始加法运算符应用于`2`和`2`得到`4`。
- en: So the entire expression evaluates to `4`.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，整个表达式评估为`4`。
- en: Example 2.
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例2。
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: because
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因为
- en: The `let rec` binds `fact` to a closure `cl = << fact, fun n -> if n = 0 then
    1 else n * (fact (n-1)) , {} >>`.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`let rec`将`fact`绑定到一个闭包`cl = << fact, fun n -> if n = 0 then 1 else n * (fact
    (n-1)) , {} >>`。'
- en: The variable name `fact` evaluates to that closure.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名`fact`评估为该闭包。
- en: Applying that closure to argument `1` creates an environment `env={n=1, fact=<<
    fact, fun n -> if n = 0 then 1 else n * (fact (n-1)) , {} >>}`.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将该闭包应用于参数`1`会创建一个环境`env={n=1, fact=<< fact, fun n -> if n = 0 then 1 else n
    * (fact (n-1)) , {} >>}`。
- en: The code part of the closure `if n = 0 then 1 else n * (fact (n-1))` is evaluated
    in that environment.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闭包的代码部分`if n = 0 then 1 else n * (fact (n-1))`在该环境中被评估。
- en: The guard evaluates to `false` (here we're skipping a couple steps, including
    looking up `n` in the environment, and applying the primitive equality operator).
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护程序评估为`false`（这里我们跳过了几个步骤，包括在环境中查找`n`，并应用原始相等运算符）。
- en: The `if` expression therefore proceeds by evaluating the `else` branch, which
    is `n * (fact (n-1))`, in the environment `env`
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，`if`表达式通过在环境`env`中评估`else`分支`n * (fact (n-1))`来进行。
- en: The right-hand side `fact (n-1)` is evaluated first.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧`fact (n-1)`首先被评估。
- en: The expression `n-1` evaluates to `0`. (Again we're skipping a couple steps.)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式`n-1`评估为`0`。（再次跳过了几个步骤。）
- en: The variable name `fact` evaluates to the closure `cl`.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名`fact`评估为闭包`cl`。
- en: Applying that closure to argument `0` creates an environment `{n=0, fact=<<
    fact, fun n -> if n = 0 then 1 else n * (fact (n-1)) , {} >>}`. *Note how `fact`
    stays around in the environment for recursive calls. That's the key insight to
    take away from this example.*
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将该闭包应用于参数`0`会创建一个环境`{n=0, fact=<< fact, fun n -> if n = 0 then 1 else n * (fact
    (n-1)) , {} >>}`。*请注意`fact`在递归调用中在环境中保留。这是从这个示例中得出的关键见解。*
- en: The code part of the closure `if n = 0 then 1 else n * (fact (n-1))` is evaluated
    in that environment.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闭包的代码部分`if n = 0 then 1 else n * (fact (n-1))`在该环境中被评估。
- en: The guard evaluates to `true` (here we're skipping a couple steps, including
    looking up `n` in the environment, and applying the primitive equality operator).
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护程序评估为`true`（这里我们跳过了几个步骤，包括在环境中查找`n`，并应用原始相等运算符）。
- en: The `if` expression therefore proceeds by evaluating the `then` branch, which
    is `1`.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，`if`表达式通过在环境中评估`then`分支`1`来进行。
- en: The left-hand side `n` is evaluated second. It evaluates to `1` in `env`.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧`n`第二次被评估。在`env`中评估为`1`。
- en: We now have `1*1`, which is a primitive operation and evaluates to `1`.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我们有`1*1`，这是一个原始操作，评估为`1`。
- en: Example 3.
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例3。
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: because
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因为
- en: The `let rec` binds `filter` to a closure `<< filter, fun f -> *F*, {} >>`,
    where `*F*` is the body of `filter` as given above.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`let rec`将`filter`绑定到一个闭包`<< filter, fun f -> *F*, {} >>`，其中`*F*`是上述`filter`的主体。'
- en: The `let` binds `all_gt` to a closure `<< fun n -> *A*, {filter=<< filter, fun
    f -> *F*, {} >>} >>`, where `*A*` is the body of `all_gt` as given above.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`let`将`all_gt`绑定到一个闭包`<< fun n -> *A*, {filter=<< filter, fun f -> *F*, {}
    >>} >>`，其中`*A*`是上述`all_gt`的主体。'
- en: The variable name `all_gt` evaluates to the closure just created.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名`all_gt`评估为刚刚创建的闭包。
- en: The application of that closure to `1` creates an environment `{filter=<< filter,
    fun f -> *F*, {} >>, n=1}`.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将该闭包应用于`1`会创建一个环境`{filter=<< filter, fun f -> *F*, {} >>, n=1}`。
- en: The function body `fun xs -> filter (fun x -> x > n) xs` is evaluated in that
    environment. It evaluates to a new closure `<< fun xs -> filter (fun x -> x >
    n) xs, {filter=<< filter, fun f -> *F*, {} >>, n=1} >>`.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数体`fun xs -> filter (fun x -> x > n) xs`在该环境中被评估。它评估为一个新的闭包`<< fun xs -> filter
    (fun x -> x > n) xs, {filter=<< filter, fun f -> *F*, {} >>, n=1} >>`。
- en: The new closure is applied to `[1;2]`. That creates an environment `{filter=<<
    filter, fun f -> *F*, {} >>, n=1, xs=[1;2]}`.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的闭包应用于`[1;2]`。这创建了一个环境`{filter=<< filter, fun f -> *F*, {} >>, n=1, xs=[1;2]}`。
- en: The function body `filter (fun x -> x > n) xs` is evaluated in that latest environment.
    If we fully parenthesize, that body is `(filter (fun x -> x > n)) xs`. So the
    next step is to evaluate the function application `filter (fun x -> x > n)`. That
    requires first evaluating the argument.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数体`filter (fun x -> x > n) xs`在最新的环境中被评估。如果我们完全加括号，那么这个体是`(filter (fun x ->
    x > n)) xs`。因此，下一步是评估函数应用`filter (fun x -> x > n)`。这首先需要评估参数。
- en: The argument `(fun x -> x > n)` is evaluated. It produces a closure `<< fun
    x -> x > n, {filter=<< filter, fun f -> *F*, {} >>, n=1, xs=[1;2]} >>`. *Note
    how the closure saves the value of `n`. That's the key insight to take away from
    this example.*
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数`(fun x -> x > n)`被评估。它产生一个闭包`<< fun x -> x > n, {filter=<< filter, fun f
    -> *F*, {} >>, n=1, xs=[1;2]} >>`。*注意闭包如何保存`n`的值。这是从这个例子中得出的关键见解。*
- en: '...'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '...'
- en: After many more evaluation steps, we reach `[2]`.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经过许多评估步骤，我们到达了`[2]`。
- en: Those examples get tedious. It's no wonder we have computers to compute them
    for us!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 那些例子变得很烦人。难怪我们有计算机来为我们计算它们！
