- en: 'Chapter A: Series Summing Magic'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose we have a sum of the form
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f084c6353eeba6a43adc2630eba5ed15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: or more generally
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/771173e7e43ba286136bd1bd182ed118.jpg)'
  prefs: []
  type: TYPE_IMG
- en: for
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/58ce73c2c216bd9ee0a4ece06f3525f1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: and want to find its sum.
  prefs: []
  type: TYPE_NORMAL
- en: How should we go about it?
  prefs: []
  type: TYPE_NORMAL
- en: 'Another question: using the first 5 terms in the series only, or the first
    25, how accurately can we sum it?'
  prefs: []
  type: TYPE_NORMAL
- en: The answer is quite amazing. You can get the answer to better than three decimal
    places from the first five terms alone, and to ten decimal places from the first
    25! And with ridiculous ease. (And you can get further accuracy similarly with
    more terms.)
  prefs: []
  type: TYPE_NORMAL
- en: How?
  prefs: []
  type: TYPE_NORMAL
- en: Obviously it is not enough to compute the partial sums of the series up to the
    fifth or twenty fifth term and estimate the series sum as the fifth or twenty
    fifth partial sum. But it is enough to compute these partial sums and estimate
    the sum from them.
  prefs: []
  type: TYPE_NORMAL
- en: How?
  prefs: []
  type: TYPE_NORMAL
- en: You can calculate the partial sums easily with a spreadsheet. (Put A3=A2+1,
    and put B1=your value for x, C1= your y, B3=-(-$B$1)^A3)/(A3)^$C$1 and C3=C2+B3,
    and copy A3, B3 and C3 downward and you will have your partial sums in column
    C.)
  prefs: []
  type: TYPE_NORMAL
- en: Once you have them, you will see that the odd partial sums form a decreasing
    sequence, while the even ones form form an increasing one. The sequence sum is
    therefore trapped between any pair of successive values of the partial sums. Thus,
    the odd ones partial sums give upper bounds on the sequence sum, while the even
    ones give lower bounds; these bounds get better and better, though rather slowly
    for x = 1, y = 1.
  prefs: []
  type: TYPE_NORMAL
- en: This means that if you take the average of two adjacent partial sums, you get
    closer to the answer than the worse of them, since one definitely lies above the
    answer and one below.
  prefs: []
  type: TYPE_NORMAL
- en: 'The curious property possessed by these particular series, and some others,
    is that after averaging the adjacent partial sums, the same property: that the
    odd terms are decreasing and the even terms increasing still holds true when the
    terms are averages of successive partial sums (or averages of averages, etc.,
    of successive partial sums) just as when they are partial sums.'
  prefs: []
  type: TYPE_NORMAL
- en: This means if you average these you get closer to the answer, and if you continue
    to average, you get still closer, forever, or until you have the answer to the
    accuracy of your machine.
  prefs: []
  type: TYPE_NORMAL
- en: How can you do all this averaging? Just enter D3=(C3+C4)/2 and copy D3 into
    the rectangle with corners D3 and AE30.
  prefs: []
  type: TYPE_NORMAL
- en: You can estimate the sum from your entries in row 3\. Of course the estimates
    improve as you go downward, but each time you go down one you use one further
    partial sum, so if you only want to use information up to the k-th partial sum,
    you might as well just go across the third row k - 1 steps from row C. (You actually
    can do a bit better, but who cares.)
  prefs: []
  type: TYPE_NORMAL
- en: You can do slightly better by averaging this result with its predecessor on
    the same diagonal. Thus, instead of using say G3 as estimate, you do a bit better
    by using (G3+F4)/2\. Both of these use information in E5 and hence D6 and C7 which
    uses information from the first five terms in the series only.
  prefs: []
  type: TYPE_NORMAL
- en: For the original sum, x = 1, y = 1, the best estimates we get using only the
    first k terms in the sequence are as follows
  prefs: []
  type: TYPE_NORMAL
- en: '| k value | Estimate | Source of estimate | True answer | % error |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1 | C3 | 0.693147... | 44.27 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 0.625 | D3/2+C4/2 | 0.693147 | 9.8316 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 0.6825 | E3/2+D4/2 | 0.693147 | 0.8147 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 0.692708 | F3/2+E4/2 | 0.693147 | 0.0633 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 0.693229 | G3/2+F4/2 | 0.693147 | 0.0118 |'
  prefs: []
  type: TYPE_TB
- en: In other words, the error in estimating this sum as noted from its first 5 terms
    is on the order of one hundredth of a percent.
  prefs: []
  type: TYPE_NORMAL
- en: When k is larger you are better off with a slightly different estimate (in a
    higher row; that is, sum several terms, then start averaging), and you can get
    accuracy here to one part in 10^(10) looking only at the first 20 terms of the
    sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Roughly the same or better accuracy appears to be possible for **any** x and
    y in the indicated range.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise A.1 Have a friend pick a value of x and y and compute the first
    five terms in the series whose j-th term is ![](../Images/2698c0e0146e801cb59d83afa039a4ef.jpg).'
  prefs: []
  type: TYPE_NORMAL
- en: Use the method described above to estimate the sum of the series using only
    this information. Then let the friend determine the sum to high accuracy by using
    the indicated method and a k value of 50, and find the error in your estimate.
    (With any kind of luck your answer will be accurate to better than one part in
    a thousand, and your friend will be willing to bet that you cannot achieve such
    accuracy from only five terms.)**
  prefs: []
  type: TYPE_NORMAL
