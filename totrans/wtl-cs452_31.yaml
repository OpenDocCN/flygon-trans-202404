- en: Lecture 31
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 31 讲
- en: '- Power On'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '- 上电'
- en: Public Service Annoucements
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共服务公告
- en: 'Final exam date: 9.00 August 7 to 11.30 August 9'
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 期末考试日期：8月7日上午9点至8月9日上午11点30分
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Power On
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上电
- en: Initial state
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始状态
- en: ARM
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ARM
- en: Cirrus
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Cirrus
- en: Technologic
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Technologic
- en: The following things, which are described in the Technologic documentation,
    manual & circuit diagram, are properties of the TS7200
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下列内容是 TS7200 的特性，描述在 Technologic 文档、手册和电路图中
- en: Boot control bits, set to normal boot, 32-bit bus width, sychronous boot device,
    internal, watchdog timer disabled.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动控制位，设置为正常启动、32 位总线宽度、同步启动设备、内部、关闭看门狗定时器。
- en: Physical memory map
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 物理内存映射
- en: 0x80000000 to 0x800fffff, used by Cirrus for on-chip components
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0x80000000 到 0x800fffff，由 Cirrus 用于片上组件
- en: SDRAM chips break memory into 4M blocks. Addresses of 4M blocks are
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDRAM 芯片将内存分成 4M 块。4M 块的地址为
- en: '`0x00000000` to `0x003fffff`'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x00000000` 到 `0x003fffff`'
- en: '`0x00400000` to `0x007fffff`'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x00400000` 到 `0x007fffff`'
- en: '`0x00800000` to `0x00bfffff`'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x00800000` 到 `0x00bfffff`'
- en: '`0x00c00000` to `0x00ffffff`'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x00c00000` 到 `0x00ffffff`'
- en: '`0x01000000` to `0x013fffff`'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x01000000` 到 `0x013fffff`'
- en: '...'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '...'
- en: TS7200 uses 4-bit chip select to divide the memoery into 256 Mbyte blocks
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TS7200 使用 4 位芯片选择将内存分成 256 M 字节块
- en: 0x00000000 to 0x0fffffff (first 256M) SDRAM, CS0, 32 bus cycles
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x00000000` 到 `0x0fffffff`（前 256M）SDRAM，CS0，32 总线周期'
- en: '0x10000000 to 0x1fffffff: CS1, 8 bit bus cycles'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x10000000` 到 `0x1fffffff`：CS1，8 位总线周期'
- en: '0x20000000 to 0x2fffffff: CS2, 16 bit bus cycles.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0x20000000 到 0x2fffffff：CS2，16 位总线周期。
- en: '0x60000000 to 0x7fffffff: CS6/7, Flash'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0x60000000 到 0x7fffffff：CS6/7，闪存
- en: '0x80000000 to 0x8fffffff: I/O registers including'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0x80000000 到 0x8fffffff：包括 I/O 寄存器
- en: '0x80000000 to 0x807fffff: AHB mapped registers, including'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0x80000000 到 0x807fffff：包括 AHB 映射寄存器
- en: DMA
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DMA
- en: Ethernet
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太网
- en: USB
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB
- en: Memory controllers
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存控制器
- en: Pre-pre-boot ROM
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预启动 ROM
- en: ICU registers
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ICU 寄存器
- en: '0x80800000 to 0x8fffffff: I/O registers'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x80800000` 到 `0x8fffffff`：I/O 寄存器'
- en: SDRAM chips break memory into 4M blocks. Addresses of 4M blocks are
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: SDRAM 芯片将内存分成 4M 块。4M 块的地址为
- en: '`0x00000000` to `0x003fffff`'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x00000000` 到 `0x003fffff`'
- en: '`0x00400000` to `0x007fffff`'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x00400000` 到 `0x007fffff`'
- en: '`0x00800000` to `0x00bfffff`'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x00800000` 到 `0x00bfffff`'
- en: '`0x00c00000` to `0x00ffffff`'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x00c00000` 到 `0x00ffffff`'
- en: '`0x01000000` to `0x013fffff`'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x01000000` 到 `0x013fffff`'
- en: '...'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '...'
- en: In the AHB registers is a 16K block of ROM from `0x80090000` to `0x80093fff`
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AHB 寄存器中有一个 16K 块的 ROM，从 `0x80090000` 到 `0x80093fff`
- en: Initially, it is mapped to the entire memory space at 16K intervals.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最初，它被映射到整个内存空间，间隔为 16K。
- en: Chip select, and how addressing occurs.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 芯片选择和寻址方式。
- en: Chip select of this block is `0x8009[00XXb]XXX`
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此块的芯片选择为 `0x8009[00XXb]XXX`
- en: Chip select has two parts
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 芯片选择有两部分
- en: 'I/O chip select: `0x8XXXXXXX`'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: I/O 芯片选择：`0x8XXXXXXX`
- en: 'AHB chip select: `0xY00XXXXX`'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AHB 芯片选择：`0xY00XXXXX`
- en: 'ROM chip select: `0xYYY9[00XXb]XXX`'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ROM 芯片选择：`0xYYY9[00XXb]XXX`
- en: The first instruction executed is the one that you find at `0x80090000`
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行的第一条指令是在 `0x80090000` 处找到的那一条
- en: Pre-pre-boot Sequence
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预预启动序列
- en: Jump to `0x80090018.`
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳转到 `0x80090018.`
- en: Turn on LEDs
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 LED
- en: Make the CPU completely vanilla. E.g.,
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使 CPU 完全标准。例如，
- en: no caches, physical memory map,
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无缓存，物理内存映射，
- en: Turn off watchdog timer
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭看门狗定时器
- en: Configure external clocks (needed for serial boot)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置外部时钟（串行启动所需）
- en: Acquire boot state configuration inputs
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取启动状态配置输入
- en: These are input pins on the EP9302, the state of which is determined by the
    TS7200\.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些是 EP9302 上的输入引脚，其状态由 TS7200 决定。
- en: A couple are user-controllable via jumpers
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些可以通过跳线控制的用户可控制。
- en: They are the only thing the EP9302 knows about the outside world
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些是 EP9302 对外部世界唯一知道的东西
- en: Using boot state configure
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用启动状态配置
- en: flash memory controller
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闪存存储器控制器
- en: SDRAM memory controller
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDRAM 存储器控制器
- en: These are configured with very conservative parameters
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些配置为非常保守的参数
- en: Clear boot mode `memory map'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除启动模式 `memory map'
- en: Toggle LEDs
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换 LED
- en: Switch
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开关
- en: Serial boot on UART1
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: UART1 上的串行启动
- en: Output ">"
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出 ">"
- en: Read 2048 bytes starting with CRUS or SURC to the Mac FIFO
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 CRUS 或 SURC 开始读取 2048 字节到 Mac FIFO
- en: Jump to the start of the Mac FIFO
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳转到 Mac FIFO 的起始位置
- en: Boot from ROM outside SoC
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 SoC 外部的 ROM 启动
- en: Assert ROM chip selects looking for CRUS
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 断言 ROM 芯片选择以查找 CRUS
- en: When found read 2048 bytes from the ROM to Mac FIFO
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到后从 ROM 读取 2048 字节到 Mac FIFO
- en: Jump to the start of the Mac FIFO
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳转到 Mac FIFO 的起始位置
- en: Boot from flash
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从闪存启动
- en: Look for CRUS at possible flash start locations
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在可能的闪存起始位置查找 CRUS
- en: When found jump to start location plus `0x4 (account for CRUS)`
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到后跳转到起始位置加上 `0x4（考虑 CRUS）`
- en: If not found
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未找到
- en: if 0x0 writable destination is SDRAM else destination is Mac FIFO
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 0x0 可写目的地是 SDRAM，否则目的地是 Mac FIFO
- en: load 20 words into destination
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 20 个字载入目的地
- en: flash LEDs forever
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永久闪烁 LED
- en: In the first two cases the 2048 bytes contains a memory test followed by a loader.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前两种情况下，2048字节包含一个内存测试，然后是一个加载程序。
- en: The Mac FIFO code is used for premature death in the pre-boot also.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Mac FIFO代码也用于预引导中的过早死亡。
- en: Pre-boot Sequence
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预引导序列
- en: This code knows all about the EP9302, and all about the TS7200.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码对EP9302和TS7200了如指掌。
- en: Sets up a stack in the ethernet buffer
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以太网缓冲区中设置一个堆栈
- en: 'Sets the CPSR to a vanilla state: no interrupts, svc mode'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将CPSR设置为普通状态：无中断，svc模式
- en: Copies 80 words of code from flash to the ethernet buffer
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从闪存复制80个字到以太网缓冲区
- en: Initializes memory controllers for the memory it has
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化其拥有的内存控制器
- en: Configures GPIO.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置GPIO。
- en: Turns off the watchdog timer
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭看门狗定时器
- en: Sets up the appropriate serial port for a monitor
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为监视器设置适当的串行端口
- en: loads RedBoot
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载RedBoot
- en: '* * *'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Can Message Passing be Made Type Safe?
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息传递是否可以变得类型安全��
- en: Dynamically
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 动态地
- en: Yes, even including type extension and polymorphism, but
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，甚至包括类型扩展和多态性，但是
- en: What does the program do when it detects a type mismatch?
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当程序检测到类型不匹配时会做什么？
- en: Well, it could send a more informative error message before it dies.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嗯，它在崩溃之前可以发送更多信息的错误消息。
- en: Statically
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 静态地
- en: No,
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 不，
- en: Structured programming depends critically on well-defined scope.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化编程在很大程度上取决于明确定义的范围。
- en: While tasks are scoped internally, there is no inter-task scoping.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然任务在内部有范围，但没有任务间的范围。
- en: In fact, we are happy to be free of scoping, because it allows us to try out
    a wider variety of program structures.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际上，我们很高兴摆脱了范围限制，因为这使我们可以尝试更多种类的程序结构。
- en: CSP
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSP
- en: To formal methods people CSP is a calculus for reasoning about the correctness
    of multi-process/threaded/tasking (MPTT) systems. Active research has been ongoing
    for forty years with several goals
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于正式方法的人来说，CSP是一种用于推理多进程/线程/任务（MPTT）系统正确性的演算法。 过去四十年一直在进行积极的研究，有几个目标
- en: translating other synchronization/communication semantics to and from CSP
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其他同步/通信语义转换为CSP并从CSP转换
- en: finding new methods for reasoning about CSP
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找关于CSP的推理的新方法
- en: scaling everything to make CSP useful for production sized programs
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有内容缩放以使CSP对生产规模的程序有用
- en: During that time many a chicken has left its tracks on the pages of formal methods
    journals and conference proceedings!
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在那段时间里，许多只小鸡在正式方法期刊和会议记录上留下了它们的足迹！
- en: For programmers the claim has been and is made that CSP provides a superior
    method for structuring MPTT systems. (`Superior' in the sense of `easier to design,
    implement and understand'.)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于程序员来说，有人声称并且声称CSP提供了一种优越的方法来构建MPTT系统。（“优越”是指“更容易设计、实现和理解”。）
- en: The claim was first made in the late 1970s/early 1980s.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该主张最初是在1970年代末/1980年代初提出的。
- en: It was made again in the early 1990s, this time with the weight of Bell Labs
    behind it.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在1990年代初再次提出，这次是贝尔实验室的支持。
- en: And has been made yet again in the last few years, this time with the weight
    of Goggle behind it.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且最近几年又一次提出，这次是谷歌的支持。
- en: Primitives
  id: totrans-117
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 原语
- en: In CSP there are two communication primitives. In the notation of occam 2/Go,
    they are
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSP中有两种通信原语。 在occam 2/Go的表示法中，它们是
- en: '**read**'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**read**'
- en: '[PRE0]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: reads from an input channel called `keyboard` and assigns what it reads to the
    variable `ch`
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从名为`keyboard`的输入通道读取内容，并将其赋给变量`ch`
- en: the channel must have an associated type, and the type must match the type of
    the variable.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道必须有一个关联的类型，并且该类型必须与变量的类型匹配。
- en: That is, the channel and the variable must be in the same scope.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也就是说，通道和变量必须在相同的范围内。
- en: read blocks until input is available on the channel
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: read在通道上有输入可用时会阻塞
- en: '**write**'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**write**'
- en: '[PRE1]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: writes the value of the variable `duh` into the channel `keyboard`
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将变量`duh`的值写入通道`keyboard`
- en: write does not block
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: write不会阻塞
- en: Thus, a read/write pair guarantess that read in the reading process occurs simultaneously
    with or after the corresponding write in the writing process.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，读/写对保证了读取过程中的读取与写入过程中的相应写入同时发生或之后发生。
- en: The communication primitives require something new, called a channel.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通信原语需要一种新的东西，称为通道。
- en: '[PRE2]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A channel is a first in/first out silo.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道是先进先出的仓库。
- en: Each channel has a protocol that states the type that messages it handles must
    have.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个通道都有一个协议，规定它处理的消息类型必须是什么。
- en: Knowing the name of a channel is essential for using it.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知道通道的名称对于使用它是至关重要的。
- en: Applications control who can be on the other end of a channel, which is essential
    for security, by controlling who knows the name of the channel.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序控制谁可以在通道的另一端，这对于安全性至关重要，通过控制谁知道通道的名称。
- en: The Transputer
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传输器
- en: Use many co-operating, medium capability microCPUs to do a big job.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用许多合作的、中等能力的微型CPU来完成一项大任务。
- en: An idea whose time has now come.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个时机已经到来的想法。
- en: Google
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌
- en: Problem is communication
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是通信
- en: 'Big granularity (thick client: MS, Google)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大颗粒（厚客户端：微软，谷歌）
- en: minimizes communication
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化通信
- en: maximizes replicated data
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化复制数据
- en: 'The Google approach:'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌的方法：
- en: an opportunity nobody thought about
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个没有人考虑过的机会
- en: a problem nobody thought about.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个没有人考虑过的问题。
- en: Small granularity
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小颗粒
- en: minimizes replicated data
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化复制数据
- en: maximizes communication
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化通信
- en: Your system, like threading solutions, relies on shared memory for communication
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的系统，像线程解决方案一样，依赖于共享内存进行通信
- en: The return of the FORTRAN common block
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FORTRAN公共块的回归
- en: How would you handle caching?
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何处理缓存？
- en: Communication requires either
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通信要求要么
- en: a common bus, star topology
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个共同的总线，星形拓扑结构
- en: system bus (= shared memory)
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统总线（=共享内存）
- en: LAN
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 局域网
- en: a common channel, over which users pass messages in real-time
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个共同的通道，在其中用户实时传递消息
- en: wasteful of bandwidth
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浪费带宽
- en: analogue telephony
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟电话
- en: passing messages along
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沿着传递消息
- en: emphasizes the switches (bridges) that connect common buses
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强调连接共同总线的开关（桥）
- en: really more like a hybrid, which is classified differently based on the level
    of abstraction.
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际上更像是一个混合体，根据抽象级别进行不同分类。
- en: What about real-time?
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 关于实时性怎么样？
- en: lots of timer (countup) hardware
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大量的计时器（计数器）硬件
- en: interaction of countdown and countup to make your clock server
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 倒计时和计时器的交互以制作你的时钟服务器
- en: Instances of timers are not guaranteed to be synchronized
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计时器的实例不能保证同步
- en: How could two timers be synchronized?
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个计时器如何同步？
- en: The transputer was an early, now vanished, example of a real-time system based
    on plentiful small granularity communication. Your kernel is another example.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 传输器是一个早期的、现在已经消失的、基于丰富的小颗粒通信的实时系统的例子。你的内核是另一个例子。
- en: 'Your kernel: communication based on shared memory, which is easy to program,
    hard to make secure.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的内核：基于共享内存的通信，易于编程，难以确保安全。
- en: 'The transputer: communication based on switch mediated packets, which is hard
    to program, easy to make secure.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传输器：基于交换介导的数据包通信，难以编程，易于确保安全。
- en: Transputer hardware
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 传输器硬件
- en: CPU, memory, switch on one chip
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU、内存、一块芯片上的开关
- en: chips connected in an array
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接在一个数组中的芯片
- en: presumably a run-time system decides where tasks will go in order to
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大概是一个运行时系统决定任务将去的地方
- en: maximize CPU throughput
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化CPU吞吐量
- en: minimize communication overhead
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化通信开销
- en: Occam 2
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Occam 2
- en: Basic idea
  id: totrans-178
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 基本思想
- en: processes (tasks)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程（任务）
- en: may be named, take arguments and return values
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能被命名，接受参数并返回值
- en: may be combined
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能被组合
- en: CSP channels
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSP通道
- en: time
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 时间
- en: Combining processes
  id: totrans-184
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 组合进程
- en: sequential
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 顺序
- en: conditional
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有条件的
- en: if/then
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: if/then
- en: selection by case
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按情况选择
- en: looping
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环
- en: without test/break
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有测试/中断
- en: with test/break
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有测试/中断
- en: parallel
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并行
- en: initiated when the keyword PAR occurs.
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当关键字PAR出现时启动。
- en: alternation
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交替
- en: guarded alternatives
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受保护的备选项
- en: if more than one guard is true then select at random
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有多个保护条件为真，则随机选择
- en: can be prioritized
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以优先考虑
- en: Time
  id: totrans-198
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 时间
- en: timer returns time as channel input
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计时器将时间作为通道输入返回
- en: '[PRE3]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`AFTER` can be used to combine times, because there is a total order based
    on time'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AFTER`可以用来组合时间，因为基于时间的总序'
- en: '[PRE4]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`AFTER` can make timer input blocking'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AFTER`可以使计时器输入阻塞'
- en: '[PRE5]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Can you Build a Server with Type-Checking?
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你能用类型检查构建一个服务器吗？
- en: '[PRE6]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Result
  id: totrans-207
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 结果
- en: You can write a type-safe server, BUT
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以编写一个类型安全的服务器，但是
- en: all possible clients must be in the same scope in order to get static type checking
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有可能的客户端必须在同一范围内才能获得静态类型检查
- en: with dynamic, structural type checking you only need to have the tasks written
    in languages having the same type system
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用���态、结构类型检查，你只需要用相同类型系统的语言编写任务
- en: BUT
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 但是
- en: with this structure excessive code in the client weakens synchronization, which
    might not be what you want.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种结构中，客户端中过多的代码会削弱同步，这可能不是你想要的。
- en: '* * *'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Return to:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到：
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩2012年春季CS452讲座笔记](index.html)'
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩2012年春季CS452页面](../index.html)'
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考恩的CS452页面](../../index.html)'
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考文的教学页面](../../../index.html)'
- en: '[Bill Cowan''s home page](../../../../index.html)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·考文的个人主页](../../../../index.html)'
