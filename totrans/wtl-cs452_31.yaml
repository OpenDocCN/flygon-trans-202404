- en: Lecture 31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '- Power On'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Final exam date: 9.00 August 7 to 11.30 August 9'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Power On
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Initial state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ARM
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Cirrus
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Technologic
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following things, which are described in the Technologic documentation,
    manual & circuit diagram, are properties of the TS7200
  prefs: []
  type: TYPE_NORMAL
- en: Boot control bits, set to normal boot, 32-bit bus width, sychronous boot device,
    internal, watchdog timer disabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Physical memory map
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 0x80000000 to 0x800fffff, used by Cirrus for on-chip components
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SDRAM chips break memory into 4M blocks. Addresses of 4M blocks are
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00000000` to `0x003fffff`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00400000` to `0x007fffff`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00800000` to `0x00bfffff`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00c00000` to `0x00ffffff`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x01000000` to `0x013fffff`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TS7200 uses 4-bit chip select to divide the memoery into 256 Mbyte blocks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0x00000000 to 0x0fffffff (first 256M) SDRAM, CS0, 32 bus cycles
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x10000000 to 0x1fffffff: CS1, 8 bit bus cycles'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x20000000 to 0x2fffffff: CS2, 16 bit bus cycles.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x60000000 to 0x7fffffff: CS6/7, Flash'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x80000000 to 0x8fffffff: I/O registers including'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x80000000 to 0x807fffff: AHB mapped registers, including'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DMA
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethernet
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: USB
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory controllers
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-pre-boot ROM
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ICU registers
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '0x80800000 to 0x8fffffff: I/O registers'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SDRAM chips break memory into 4M blocks. Addresses of 4M blocks are
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`0x00000000` to `0x003fffff`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00400000` to `0x007fffff`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00800000` to `0x00bfffff`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x00c00000` to `0x00ffffff`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0x01000000` to `0x013fffff`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the AHB registers is a 16K block of ROM from `0x80090000` to `0x80093fff`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initially, it is mapped to the entire memory space at 16K intervals.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chip select, and how addressing occurs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chip select of this block is `0x8009[00XXb]XXX`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chip select has two parts
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I/O chip select: `0x8XXXXXXX`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AHB chip select: `0xY00XXXXX`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ROM chip select: `0xYYY9[00XXb]XXX`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The first instruction executed is the one that you find at `0x80090000`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-pre-boot Sequence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jump to `0x80090018.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on LEDs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the CPU completely vanilla. E.g.,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: no caches, physical memory map,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn off watchdog timer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure external clocks (needed for serial boot)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Acquire boot state configuration inputs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are input pins on the EP9302, the state of which is determined by the
    TS7200\.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A couple are user-controllable via jumpers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: They are the only thing the EP9302 knows about the outside world
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using boot state configure
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: flash memory controller
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SDRAM memory controller
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: These are configured with very conservative parameters
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clear boot mode `memory map'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Toggle LEDs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Serial boot on UART1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Output ">"
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Read 2048 bytes starting with CRUS or SURC to the Mac FIFO
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Jump to the start of the Mac FIFO
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Boot from ROM outside SoC
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assert ROM chip selects looking for CRUS
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When found read 2048 bytes from the ROM to Mac FIFO
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Jump to the start of the Mac FIFO
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Boot from flash
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Look for CRUS at possible flash start locations
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When found jump to start location plus `0x4 (account for CRUS)`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If not found
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: if 0x0 writable destination is SDRAM else destination is Mac FIFO
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: load 20 words into destination
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: flash LEDs forever
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the first two cases the 2048 bytes contains a memory test followed by a loader.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Mac FIFO code is used for premature death in the pre-boot also.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pre-boot Sequence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This code knows all about the EP9302, and all about the TS7200.
  prefs: []
  type: TYPE_NORMAL
- en: Sets up a stack in the ethernet buffer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sets the CPSR to a vanilla state: no interrupts, svc mode'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copies 80 words of code from flash to the ethernet buffer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initializes memory controllers for the memory it has
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configures GPIO.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turns off the watchdog timer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sets up the appropriate serial port for a monitor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: loads RedBoot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Can Message Passing be Made Type Safe?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dynamically
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Yes, even including type extension and polymorphism, but
  prefs: []
  type: TYPE_NORMAL
- en: What does the program do when it detects a type mismatch?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well, it could send a more informative error message before it dies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statically
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: No,
  prefs: []
  type: TYPE_NORMAL
- en: Structured programming depends critically on well-defined scope.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While tasks are scoped internally, there is no inter-task scoping.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In fact, we are happy to be free of scoping, because it allows us to try out
    a wider variety of program structures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To formal methods people CSP is a calculus for reasoning about the correctness
    of multi-process/threaded/tasking (MPTT) systems. Active research has been ongoing
    for forty years with several goals
  prefs: []
  type: TYPE_NORMAL
- en: translating other synchronization/communication semantics to and from CSP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: finding new methods for reasoning about CSP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scaling everything to make CSP useful for production sized programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During that time many a chicken has left its tracks on the pages of formal methods
    journals and conference proceedings!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For programmers the claim has been and is made that CSP provides a superior
    method for structuring MPTT systems. (`Superior' in the sense of `easier to design,
    implement and understand'.)
  prefs: []
  type: TYPE_NORMAL
- en: The claim was first made in the late 1970s/early 1980s.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was made again in the early 1990s, this time with the weight of Bell Labs
    behind it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And has been made yet again in the last few years, this time with the weight
    of Goggle behind it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primitives
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In CSP there are two communication primitives. In the notation of occam 2/Go,
    they are
  prefs: []
  type: TYPE_NORMAL
- en: '**read**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: reads from an input channel called `keyboard` and assigns what it reads to the
    variable `ch`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the channel must have an associated type, and the type must match the type of
    the variable.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: That is, the channel and the variable must be in the same scope.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: read blocks until input is available on the channel
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**write**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: writes the value of the variable `duh` into the channel `keyboard`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: write does not block
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus, a read/write pair guarantess that read in the reading process occurs simultaneously
    with or after the corresponding write in the writing process.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The communication primitives require something new, called a channel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A channel is a first in/first out silo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each channel has a protocol that states the type that messages it handles must
    have.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing the name of a channel is essential for using it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications control who can be on the other end of a channel, which is essential
    for security, by controlling who knows the name of the channel.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Transputer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use many co-operating, medium capability microCPUs to do a big job.
  prefs: []
  type: TYPE_NORMAL
- en: An idea whose time has now come.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Problem is communication
  prefs: []
  type: TYPE_NORMAL
- en: 'Big granularity (thick client: MS, Google)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: minimizes communication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: maximizes replicated data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Google approach:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: an opportunity nobody thought about
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a problem nobody thought about.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Small granularity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: minimizes replicated data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: maximizes communication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Your system, like threading solutions, relies on shared memory for communication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The return of the FORTRAN common block
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How would you handle caching?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication requires either
  prefs: []
  type: TYPE_NORMAL
- en: a common bus, star topology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: system bus (= shared memory)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: LAN
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a common channel, over which users pass messages in real-time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: wasteful of bandwidth
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: analogue telephony
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: passing messages along
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emphasizes the switches (bridges) that connect common buses
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: really more like a hybrid, which is classified differently based on the level
    of abstraction.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What about real-time?
  prefs: []
  type: TYPE_NORMAL
- en: lots of timer (countup) hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: interaction of countdown and countup to make your clock server
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Instances of timers are not guaranteed to be synchronized
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How could two timers be synchronized?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The transputer was an early, now vanished, example of a real-time system based
    on plentiful small granularity communication. Your kernel is another example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your kernel: communication based on shared memory, which is easy to program,
    hard to make secure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The transputer: communication based on switch mediated packets, which is hard
    to program, easy to make secure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transputer hardware
  prefs: []
  type: TYPE_NORMAL
- en: CPU, memory, switch on one chip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: chips connected in an array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: presumably a run-time system decides where tasks will go in order to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: maximize CPU throughput
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: minimize communication overhead
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Occam 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Basic idea
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: processes (tasks)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: may be named, take arguments and return values
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: may be combined
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CSP channels
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combining processes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: sequential
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: conditional
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if/then
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: selection by case
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: looping
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: without test/break
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with test/break
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: parallel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: initiated when the keyword PAR occurs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: alternation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: guarded alternatives
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: if more than one guard is true then select at random
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: can be prioritized
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Time
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: timer returns time as channel input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`AFTER` can be used to combine times, because there is a total order based
    on time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`AFTER` can make timer input blocking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Can you Build a Server with Type-Checking?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Result
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can write a type-safe server, BUT
  prefs: []
  type: TYPE_NORMAL
- en: all possible clients must be in the same scope in order to get static type checking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with dynamic, structural type checking you only need to have the tasks written
    in languages having the same type system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BUT
  prefs: []
  type: TYPE_NORMAL
- en: with this structure excessive code in the client weakens synchronization, which
    might not be what you want.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
