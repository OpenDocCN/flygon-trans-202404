["```\n(define x-protector (make-serializer))\n(define y-protector (make-serializer))\n(parallel-execute (x-protector (lambda () (set! x (+ x 1))))\n                  (y-protector (lambda () (set! y (+ y 1))))) \n```", "```\n(parallel-execute (x-protector (lambda () (set! x (+ x 1))))\n                  (x-protector (lambda () (set! x (+ x 1))))) \n```", "```\n(define x-protector (make-serializer))\n(define protected-increment-x (x-protector (lambda () (set! x (+ x 1)))))\n> x\n100\n> (protected-increment-x)\n> x\n101 \n```", "```\n(define (make-serializer)\n  (let ((in-use? #f))\n    (lambda (proc)\n      (define (protected-proc . args)\n        (if in-use?\n            (begin\n             (wait-a-while) ; Never mind how to do that.\n             (apply protected-proc args)) ; Try again.\n            (begin\n             (set! in-use? #t) ; Don't let anyone else in.\n             (apply proc args) ; Call the original procedure.\n             (set! in-use? #f)))) ; Finished, let others in again.\n      protected-proc))) \n```", "```\n(if in-use?\n    ....... ; wait and try again\n    (begin (set! in-use #t)   ; Don't let anyone else in. \n           (apply proc args)  ; Call the original procedure.\n           (set! in-use #f))) ; Finished, let others in again. \n```"]