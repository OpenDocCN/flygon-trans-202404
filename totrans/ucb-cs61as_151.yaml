- en: How the Query System Works
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we give an overview that explains the general structure of the
    system independent of low-level implementation details. After describing the implementation
    of the interpreter, we will be in a position to understand some of its limitations
    and some of the subtle ways in which the query language's logical operations differ
    from the operations of mathematical logic.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: It should be apparent that the query evaluator must perform some kind of search
    in order to match queries against facts and rules in the data base. One way to
    do this would be to implement the query system as a nondeterministic program (you
    don't have to worry about this way). Another possibility is to manage the search
    with the aid of streams. Our implementation follows this second approach.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The query system is organized around two central operations called **pattern
    matching** and **unification**. We first describe pattern matching and explain
    how this operation, together with the organization of information in terms of
    streams of frames, enables us to implement both simple and compound queries.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: We next discuss unification, a generalization of pattern matching needed to
    implement rules. Finally, we show how the entire query interpreter fits together
    through a procedure that classifies expressions in a manner analogous to the way
    `eval` classifies expressions for the metacircular evaluator.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Pattern Matching
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A pattern matcher is a program that tests whether some datum fits a specified
    pattern. For example, the data list `((a b) c (a b))` matches the pattern `(?x
    c ?x)` with the pattern variable `?x` bound to `(a b)`. The same data list matches
    the pattern `(?x ?y ?z)` with `?x` and `?z` both bound to `(a b)` and `?y` bound
    to `c`. It also matches the pattern `((?x ?y) c (?x ?y))` with `?x` bound to `a`
    and `?y` bound to `b`. However, it does not match the pattern `(?x a ?y)`, since
    that pattern specifies a list whose second element is the symbol `a`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: The pattern matcher used by the query system takes as inputs a pattern (e.g.,
    `(?x c ?x))`, a datum (e.g., `((a b) c (a b))`), and a frame that specifies bindings
    for various pattern variables. It checks whether the datum matches the pattern
    in a way that is consistent with the bindings already in the frame. If so, it
    returns the given frame augmented by any bindings that may have been determined
    by the match. Otherwise, it indicates that the match has failed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: For example, using the pattern `(?x ?y ?x)` to match the datum `(a b a)` given
    an empty frame will return a frame specifying that `?x` is bound to `a` and `?y`
    is bound to `b`. Trying the match with the same pattern, the same datum, and a
    frame specifying that `?y` is bound to `a` will fail. Trying the match with the
    same pattern, the same datum, and a frame in which`?y` is bound to `b` and`?x`
    is unbound will return the given frame augmented by a binding of `?x` to `a`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The pattern matcher is all the mechanism that is needed to process simple queries
    that don't involve rules. For instance, to process the query
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 模式匹配器是处理不涉及规则的简单查询所需的全部机制。例如，处理查询
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: we scan through all assertions in the data base and select those that match
    the pattern with respect to an initially empty frame. For each match we find,
    we use the frame returned by the match to instantiate the pattern with a value
    for `?x`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扫描数据库中的所有断言，并选择与初始空帧相匹配的那些。对于每个匹配，我们使用匹配返回的帧来为`?x`实例化模式。
- en: Streams of Frames
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 帧流
- en: The testing of patterns against frames is organized through the use of streams.
    Given a single frame, the matching process runs through the data-base entries
    one by one. For each data-base entry, the matcher generates either a special symbol
    indicating that the match has failed or an extension to the frame. The results
    for all the data-base entries are collected into a stream, which is passed through
    a filter to weed out the failures. The result is a stream of all the frames that
    extend the given frame via a match to some assertion in the data base.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用流来组织模式与帧的匹配测试。给定一个单个帧，匹配过程逐个遍历数据库条目。对于每个数据库条目，匹配器生成一个指示匹配失败的特殊符号或帧的扩展。所有数据库条目的结果被收集到一个流中，通过过滤器传递以筛选掉失败。结果是一个通过与数据库中某个断言匹配扩展给定帧的所有帧的流。
- en: In our system, a query takes an input stream of frames and performs the above
    matching operation for every frame in the stream, as indicated in the figure below.
    That is, for each frame in the input stream, the query generates a new stream
    consisting of all extensions to that frame by matches to assertions in the data
    base. All these streams are then combined to form one huge stream, which contains
    all possible extensions of every frame in the input stream. This stream is the
    output of the query.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统中，一个查询接受一个帧流输入，并为流中的每个帧执行上述匹配操作，如下图所示。也就是说，对于输入流中的每个帧，查询通过与数据库中断言的匹配生成一个新的流，其中包含该帧的所有扩展。然后将所有这些流组合在一起形成一个巨大的流，其中包含输入流中每个帧的所有可能扩展。这个流就是查询的输出。
- en: '![](../Images/9ac738a6daef9487f086be9f2bc03ca1.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ac738a6daef9487f086be9f2bc03ca1.jpg)'
- en: To answer a simple query, we use the query with an input stream consisting of
    a single empty frame. The resulting output stream contains all extensions to the
    empty frame (that is, all answers to our query). This stream of frames is then
    used to generate a stream of copies of the original query pattern with the variables
    instantiated by the values in each frame, and this is the stream that is finally
    printed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要回答一个简单的查询，我们使用一个由单个空帧组成的输入流进行查询。生成的输出流包含所有对空帧的扩展（即，对我们查询的所有答案）。然后使用这些帧的流来生成原始查询模式的副本流，其中变量由每个帧中的值实例化，这最终被打印出来。
- en: Compound Queries
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合查询
- en: The real elegance of the stream-of-frames implementation is evident when we
    deal with compound queries. The processing of compound queries makes use of the
    ability of our matcher to demand that a match be consistent with a specified frame.
    For example, to handle the and of two queries, such as
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处理复合查询时，流式帧实现的真正优雅之处显而易见。处理复合查询利用了我们的匹配器要求匹配与指定帧一致的能力。例如，处理两个查询的“and”，如
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (informally, "Find all people who can do the job of a computer programmer trainee"),
    we first find all entries that match the pattern
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: （非正式地说，“找出所有能胜任计算机程序员实习生工作的人”），我们首先找出所有与该模式匹配的条目
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This produces a stream of frames, each of which contains a binding for `?x`.
    Then for each frame in the stream we find all entries that match
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生一个帧流，每个帧都包含`?x`的绑定。然后对流中的每个帧，我们找出所有与之匹配的条目
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: in a way that is consistent with the given binding for `?x`. Each such match
    will produce a frame containing bindings for `?x` and `?person`. The and of two
    queries can be viewed as a series combination of the two component queries, as
    shown in the figure below. The frames that pass through the first query filter
    are filtered and further extended by the second query.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以与`?x`的给定绑定一致的方式。每个这样的匹配将产生一个包含`?x`和`?person`绑定的帧。两个查询的“and”可以被视为两个组件查询的串联组合，如下图所示。通过第一个查询过滤器的帧被第二个查询进一步过滤和扩展。
- en: '![](../Images/1cb369645e5f46b105b86257055a4fdb.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1cb369645e5f46b105b86257055a4fdb.jpg)'
- en: The and combination of two queries is produced by operating on the stream of
    frames in series.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The figure below shows the analogous method for computing the or of two queries
    as a parallel combination of the two component queries. The input stream of frames
    is extended separately by each query. The two resulting streams are then merged
    to produce the final output stream.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01c7e6f54a540e4981002601d065a246.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: The or combination of two queries is produced by operating on the stream of
    frames in parallel and merging the results.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Even from this high-level description, it is apparent that the processing of
    compound queries can be slow. For example, since a query may produce more than
    one output frame for each input frame, and each query in an`and` gets its input
    frames from the previous query, an `and` query could, in the worst case, have
    to perform a number of matches that is exponential in the number of queries. Though
    systems for handling only simple queries are quite practical, dealing with complex
    queries is extremely difficult.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: From the stream-of-frames viewpoint, the not of some query acts as a filter
    that removes all frames for which the query can be satisfied. For instance, given
    the pattern
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: we attempt, for each frame in the input stream, to produce extension frames
    that satisfy `(job ?x (computer programmer))`. We remove from the input stream
    all frames for which such extensions exist. The result is a stream consisting
    of only those frames in which the binding for`?x` does not satisfy `(job ?x (computer
    programmer))`. For example, in processing the query
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: the first clause will generate frames with bindings for `?x` and`?y`. The not
    clause will then filter these by removing all frames in which the binding for
    `?x` satisfies the restriction that `?x` is a computer programmer.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: The `lisp-value` special form is implemented as a similar filter on frame streams.
    We use each frame in the stream to instantiate any variables in the pattern, then
    apply the Lisp predicate. We remove from the input stream all frames for which
    the predicate fails.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Unification
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to handle rules in the query language, we must be able to find the
    rules whose conclusions match a given query pattern. Rule conclusions are like
    assertions except that they can contain variables, so we will need a generalization
    of pattern matching -- called unification -- in which both the "pattern" and the
    "datum" may contain variables.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: A unifier takes two patterns, each containing constants and variables, and determines
    whether it is possible to assign values to the variables that will make the two
    patterns equal. If so, it returns a frame containing these bindings. For example,
    unifying `(?x a ?y)` and `(?y ?z a)` will specify a frame in which`?x, ?y,` and`?z`
    must all be bound to`a`. On the other hand, unifying`(?x ?y a)` and`(?x b ?y)`
    will fail, because there is no value for `?y` that can make the two patterns equal.
    (For the second elements of the patterns to be equal, `?y` would have to be `b`;
    however, for the third elements to be equal, `?y` would have to be`a`.) The unifier
    used in the query system, like the pattern matcher, takes a frame as input and
    performs unifications that are consistent with this frame.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: The unification algorithm is the most technically difficult part of the query
    system. With complex patterns, performing unification may seem to require deduction.
    To unify`(?x ?x)` and `((a ?y c) (a b ?z))`, for example, the algorithm must infer
    that `?x` should be `(a b c)`, `?y` should be `b,` and `?z` should be `c`. We
    may think of this process as solving a set of equations among the pattern components.
    In general, these are simultaneous equations, which may require substantial manipulation
    to solve. For example, unifying `(?x ?x)` and`((a ?y c) (a b ?z))` may be thought
    of as specifying the simultaneous equations
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These equations imply that
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: which in turn implies that
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: and hence that
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In a successful pattern match, all pattern variables become bound, and the values
    to which they are bound contain only constants. This is also true of all the examples
    of unification we have seen so far. In general, however, a successful unification
    may not completely determine the variable values; some variables may remain unbound
    and others may be bound to values that contain variables.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Consider the unification of`(?x a)` and`((b ?y) ?z)`. We can deduce that `?x
    = (b ?y)` and`a = ?z`, but we cannot further solve for `?x` or`?y`. The unification
    doesn't fail, since it is certainly possible to make the two patterns equal by
    assigning values to`?x` and`?y.` Since this match in no way restricts the values`?y`
    can take on, no binding for`?y` is put into the result frame. The match does,
    however, restrict the value of `?x`. Whatever value `?y` has, `?x` must be`(b
    ?y)`. A binding of `?x` to the pattern `(b ?y)` is thus put into the frame. If
    a value for`?y` is later determined and added to the frame (by a pattern match
    or unification that is required to be consistent with this frame), the previously
    bound `?x` will refer to this value.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Applying Rules
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unification is the key to the component of the query system that makes inferences
    from rules. To see how this is accomplished, consider processing a query that
    involves applying a rule, such as
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To process this query, we first use the ordinary pattern-match procedure described
    above to see if there are any assertions in the data base that match this pattern.
    (There will not be any in this case, since our data base includes no direct assertions
    about who lives near whom.) The next step is to attempt to unify the query pattern
    with the conclusion of each rule. We find that the pattern unifies with the conclusion
    of the rule
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理此查询，我们首先使用上面描述的普通模式匹配过程来查看数据库中是否有与此模式匹配的断言。（在这种情况下不会有任何匹配，因为我们的数据库中没有关于谁住在谁附近的直接断言。）下一步是尝试将查询模式与每个规则的结论统一。我们发现模式与规则的结论统一。
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: resulting in a frame specifying that `?person-2` is bound to `(Hacker Alyssa
    P)` and that`?x` should be bound to (have the same value as) `?person-1`. Now,
    relative to this frame, we evaluate the compound query given by the body of the
    rule. Successful matches will extend this frame by providing a binding for `?person-1`,
    and consequently a value for`?x,` which we can use to instantiate the original
    query pattern.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 导致一个指定`?person-2`绑定为`(Hacker Alyssa P)`并且`?x`应该绑定为（具有与）`?person-1`相同值的帧。现在，相对于这个帧，我们评估规则体给出的复合查询。成功匹配将通过为`?person-1`提供绑定来扩展此帧，因此为`?x`提供一个值，我们可以用它来实例化原始查询模式。
- en: 'In general, the query evaluator uses the following method to apply a rule when
    trying to establish a query pattern in a frame that specifies bindings for some
    of the pattern variables:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，查询评估器在尝试在指定了一些模式变量绑定的帧中建立查询模式时使用以下方法应用规则：
- en: Unify the query with the conclusion of the rule to form, if successful, an extension
    of the original frame.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将查询与规则的结论统一，如果成功，形成原始帧的扩展。
- en: Relative to the extended frame, evaluate the query formed by the body of the
    rule.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对于扩展帧，评估由规则体形成的查询。
- en: 'Notice how similar this is to the method for applying a procedure in the eval/apply
    evaluator for Lisp:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这与Lisp的eval/apply评估器中应用过程的方法有多么相似：
- en: Bind the procedure's parameters to its arguments to form a frame that extends
    the original procedure environment.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将过程的参数绑定到其参数以形成扩展原始过程环境的帧。
- en: Relative to the extended environment, evaluate the expression formed by the
    body of the procedure.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对于扩展环境，评估由过程体形成的表达式。
- en: The similarity between the two evaluators should come as no surprise. Just as
    procedure definitions are the means of abstraction in Lisp, rule definitions are
    the means of abstraction in the query language. In each case, we unwind the abstraction
    by creating appropriate bindings and evaluating the rule or procedure body relative
    to these.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 两个评估器之间的相似性应该不足为奇。正如过程定义是Lisp中的抽象手段一样，规则定义是查询语言中的抽象手段。在每种情况下，我们通过创建适当的绑定并相对于这些绑定评估规则或过程体来展开抽象。
- en: Simple Queries
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单查询
- en: We saw earlier in this section how to evaluate simple queries in the absence
    of rules. Now that we have seen how to apply rules, we can describe how to evaluate
    simple queries by using both rules and assertions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节前面看到了如何在没有规则的情况下评估简单查询。现在我们已经看到了如何应用规则，我们可以描述如何通过同时使用规则和断言来评估简单查询。
- en: 'Given the query pattern and a stream of frames, we produce, for each frame
    in the input stream, two streams:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 给定查询模式和一系列帧，我们为输入流中的每个帧生成两个流：
- en: a stream of extended frames obtained by matching the pattern against all assertions
    in the data base (using the pattern matcher), and
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将模式与数据库中的所有断言（使用模式匹配器）进行匹配获得的一系列扩展帧。
- en: a stream of extended frames obtained by applying all possible rules (using the
    unifier).
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过应用所有可能的规则（使用统一器）获得的一系列扩展帧。
- en: Appending these two streams produces a stream that consists of all the ways
    that the given pattern can be satisfied consistent with the original frame. These
    streams (one for each frame in the input stream) are now all combined to form
    one large stream, which therefore consists of all the ways that any of the frames
    in the original input stream can be extended to produce a match with the given
    pattern.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 追加这两个流产生一个流，其中包含给定模式可以满足的所有方式，与原始帧一致。这些流（每个输入流中的一个帧）现在都被组合成一个大流，因此包含了原始输入流中任何帧可以扩展以与给定模式匹配的所有方式。
- en: The Query Evaluator and the Driver Loop
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询评估器和驱动循环
- en: Despite the complexity of the underlying matching operations, the system is
    organized much like an evaluator for any language. The procedure that coordinates
    the matching operations is called`qeval`, and it plays a role analogous to that
    of the eval procedure for Lisp. `qeval` takes as inputs a query and a stream of
    frames. Its output is a stream of frames, corresponding to successful matches
    to the query pattern, that extend some frame in the input stream. Like `eval`,
    `qeval` classifies the different types of expressions (queries) and dispatches
    to an appropriate procedure for each. There is a procedure for each special form
    (`and`, `or`, `not`, and `lisp-value`) and one for simple queries.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管底层匹配操作复杂，但系统的组织方式类似于任何语言的评估器。协调匹配操作的过程称为`qeval`，它的作用类似于Lisp的eval过程。`qeval`的输入是一个查询和一组帧的流。其输出是一组帧的流，对应于成功匹配查询模式的帧，这些帧扩展了输入流中的某个帧。像`eval`一样，`qeval`对不同类型的表达式（查询）进行分类，并为每种类型调度到适当的过程。每个特殊形式（`and`、`or`、`not`和`lisp-value`）都有一个过程，还有一个用于简单查询的过程。
- en: The driver loop, which is analogous to the `driver-loop` procedure for the other
    evaluators in this chapter, reads queries from the terminal. For each query, it
    calls `qeval` with the query and a stream that consists of a single empty frame.
    This will produce the stream of all possible matches (all possible extensions
    to the empty frame). For each frame in the resulting stream, it instantiates the
    original query using the values of the variables found in the frame. This stream
    of instantiated queries is then printed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动循环类似于本章其他评估器的`driver-loop`过程，它从终端读取查询。对于每个查询，它使用查询和由单个空帧组成的流调用`qeval`。这将产生所有可能匹配（所有空帧的所有可能扩展）的流。对于结果流中的每个帧，它使用在帧中找到的变量的值实例化原始查询。然后打印这些实例化查询的流。
- en: The driver also checks for the special command `assert!`, which signals that
    the input is not a query but rather an assertion or rule to be added to the data
    base. For instance,
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动程序还检查特殊命令`assert!`，该命令表示输入不是查询，而是要添加到数据库的断言或规则。例如，
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: An Example
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个例子
- en: 'Here’s an example, partly traced:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个部分追踪的示例：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Since the base-case rule has no body, once we’ve matched it, we can print a
    successful result. (Before printing, we have to look up variables in the environment
    so what we print is variable-free.)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于基本情况规则没有主体，一旦我们匹配成功，就可以打印成功的结果。（在打印之前，我们必须在环境中查找变量，以便打印的内容不包含变量。）
- en: 'Now we unify the original query against the conclusion of the other rule:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将原始查询与另一条规则的结论统一起来：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This was successful, but we’re not ready to print anything yet, because we now
    have to take the body of that rule as a new query. Note the indenting to indicate
    that this call to unify-match is within the pending rule.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步成功了，但我们还没有准备好打印任何东西，因为现在我们必须将该规则的主体作为一个新的查询。请注意缩进，以指示这次调用unify-match是在待处理规则内部进行的。
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Takeaways
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'Here are several takeaways from this subsection:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本小节的几个要点：
- en: Simple queries are processed with the pattern matcher.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单查询使用模式匹配器处理。
- en: To process compound queries, the pattern matcher needs to check if a match is
    consistent with a specified frame.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要处理复合查询，模式匹配器需要检查匹配是否与指定的帧一致。
- en: Rules are handled with unification.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则使用统一处理。
- en: What's Next?
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: In the next subsection, we are going to talk about the relation between logical
    programming and mathematical logic.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一小节中，我们将讨论逻辑编程与数理逻辑之间的关系。
