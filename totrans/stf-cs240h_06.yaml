- en: Coverting tuples to lists
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将元组转换为列表
- en: Let's say you wanted to convert pairs to lists of `Strings`
  id: totrans-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设你想要将一对`Strings`转换为列表
- en: '[PRE0]'
  id: totrans-2
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-3
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now say you want to convert a pair of `Enum`s to a list of `Int`s
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在假设你想要将一对`Enum`转换为`Int`列表
- en: '[PRE2]'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Can we generalize this function? Would like to say:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们能否将这个函数泛化？想要说：
- en: '[PRE3]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Unfortunately, can't pass *methods* as arguments, only *functions*
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不幸的是，不能将*方法*作为参数传递，只能是*函数*
- en: '[PRE4]'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Polymorphism with fundeps
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有fundeps的多态性
- en: Let's represent ad hoc polymorphic methods with a *class*
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们用一个*类*来表示特殊的多态方法
- en: '[PRE5]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Use placeholder singleton types to represent particular methods
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用占位符单例类型来表示特定方法
- en: '[PRE6]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`Function` in action'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Function`的作用'
- en: 'Now singleton types act like method arguments:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在单例类型就像方法参数一样：
- en: '[PRE7]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, what if you wanted `tupleToList` for arbitrary *n*-tuples?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，如果你想要将任意*n*-元组转换为列表怎么办？
- en: 'Can auto-generate instances for a generic tuple fold, e.g.:'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以为通用元组折叠自动生成实例，例如：
- en: '[PRE8]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Works okay for small tuples, craps out around 10-tuple without larger `-fcontext-stack`
    argument
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于小元组效果还可以，但在10元组左右会出问题，需要更大的`-fcontext-stack`参数
- en: Unfortunately, I'm temporarily out of compile-time tricks
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不幸的是，我暂时没有编译时的技巧
- en: An alternative is to use run-time type information (RTTI)
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种方法是使用运行时类型信息（RTTI）
- en: RTTI easier to reason about, but adds runtime overhead and errors
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: RTTI更容易理解，但会增加运行时开销和错误
- en: We will come back to static tricks at end of lecture
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在讲座结束时回到静态技巧
- en: '[`DeriveDataTypeable`](http://www.haskell.org/ghc/docs/latest/html/users_guide/deriving.html#deriving-typeable)
    extension'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`DeriveDataTypeable`](http://www.haskell.org/ghc/docs/latest/html/users_guide/deriving.html#deriving-typeable)
    扩展'
- en: Haskell allows six classes to be automatically derived
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Haskell允许自动派生六个类
- en: '`Show`, `Read`, `Eq`, `Ord`, `Bounded`, `Enum`'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Show`, `Read`, `Eq`, `Ord`, `Bounded`, `Enum`'
- en: '[`DeriveDataTypeable`](http://www.haskell.org/ghc/docs/latest/html/users_guide/deriving.html#deriving-typeable)
    extension adds two more: `Typeable`, `Data`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DeriveDataTypeable`](http://www.haskell.org/ghc/docs/latest/html/users_guide/deriving.html#deriving-typeable)
    扩展添加了另外两个：`Typeable`，`Data`'
- en: '[PRE9]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: These types encode run-time type information in various ways
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些类型以各种方式编码运行时类型信息
- en: '`Data` requires that inner types (`Int`, `String`) also have instances'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data`要求内部类型（`Int`，`String`）也要有实例'
- en: '`Typeable` requires any type parameters to have instances'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Typeable`要求任何类型参数都要有实例'
- en: '[PRE10]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Most standard library types have `Typeable` and `Data` instances
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数标准库类型都有`Typeable`和`Data`实例
- en: Provide programming approach known as "scrap your boilerplate"
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了被称为“scrap your boilerplate”的编程方法
- en: 'GHC''s support described by two papers: [[Boilerplate1]](http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps),
    [[Boilerplate2]](http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/gmap2.ps)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GHC的支持由两篇论文描述：[[Boilerplate1]](http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps),
    [[Boilerplate2]](http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/gmap2.ps)
- en: The [`Typeable`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Typeable.html#t:Typeable)
    class
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`Typeable`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Typeable.html#t:Typeable)
    类'
- en: '`import Data.Typeable` to get `Typeable` class:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import Data.Typeable` 来获取`Typeable`类：'
- en: '[PRE11]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This allows us to compare types for equality
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这使我们能够比较类型是否相等
- en: '[PRE12]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Big Whoop!
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没什么了不起！
- en: Couldn't we already do this at compile time with `OverlappingInstances`?
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们难道不能在编译时使用`OverlappingInstances`来做到这一点吗？
- en: Doing it dynamically is less exciting, but different
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态地进行这个操作不太激动人心，但是不同
- en: And allows one very important function...
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且允许一个非常重要的函数...
- en: Type Casting
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型转换
- en: GHC has a function [`unsafeCoerce`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Unsafe-Coerce.html#v:unsafeCoerce)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GHC有一个名为[`unsafeCoerce`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Unsafe-Coerce.html#v:unsafeCoerce)的函数
- en: '[PRE14]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And note: it doesn''t just return ⊥'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意：它不只是返回⊥
- en: If the name doesn't scare you, the type signature should
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果名称不吓到你，类型签名应该会
- en: Let's use `Typeable` to make a safe `cast` function
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们使用`Typeable`来创建一个安全的`cast`函数
- en: '[PRE15]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Safe if `typeOf` on two different types always returns different `TypeRep`s
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`typeOf`在两种不同类型上始终返回不同的`TypeRep`，则是安全的
- en: Guaranteed by `deriving (Typeable)`; SafeHaskell disallows manual instances
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`deriving (Typeable)`保证；SafeHaskell不允许手动实例
- en: Generalized casting
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 泛化转换
- en: 'To cast monadic computations, etc., use generalized cast, `gcast`:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要转换单子计算等，使用泛化转换，`gcast`：
- en: '[PRE17]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note undefined function `unc` in definition of `gcast`
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意在`gcast`的定义中未定义的函数`unc`
- en: Common idiom--poses no problem because `typeOf` is not strict
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的习惯用法--不会有问题，因为`typeOf`不是严格的
- en: Recall context `Typeable b =>` is like a hidden argument; often use undefined
    functions with type signatures to unpack types and get dictionaries
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回想一下上下文`Typeable b =>`就像一个隐藏的参数；通常使用带有类型签名的未定义函数来解包类型并获取字典
- en: 'Using `Typeable`: `mkT` [[Boilerplate1]](http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps)'
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`Typeable`：`mkT`[[Boilerplate1]](http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps)
- en: '`mkT` ("make transformation") behaves like `id` except on one type'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mkT`（“创建转换”）在一个类型上的行为类似于`id`'
- en: '[PRE19]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Example:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE20]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Exercise: implement `mkT`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习：实现`mkT`
- en: 'Hint: The function type `(->)` is `Typeable`, so `Data.Typeable` exports:'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示：函数类型`(->)`是`Typeable`，因此`Data.Typeable`导出：
- en: '[PRE22]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Solution
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note the magic of Haskell's type inference
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意Haskell类型推断的魔力
- en: '`g` is applied to `a`, so must have type `a -> a`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g`应用于`a`，因此必须具有类型`a -> a`'
- en: Hence `cast f` must have type `Maybe (a -> a)`
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此`cast f`必须具有类型`Maybe (a -> a)`
- en: Hence compiler knows to use `Typeable` dictionary of `(b -> b)` for argument,
    and dictionary `(a -> a)` for return of `cast`
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此编译器知道要使用`(b -> b)`的`Typeable`字典作为参数，以及`(a -> a)`的字典作为`cast`的返回
- en: '[[Jones]](http://web.cecs.pdx.edu/~mpj/thih/) has detailed explanation of Haskell''s
    type inference'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[[Jones]](http://web.cecs.pdx.edu/~mpj/thih/)详细解释了Haskell的类型推断'
- en: Note, a fancier implementation could use standard `maybe` function
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意，更复杂的实现可以使用标准的`maybe`函数
- en: '[PRE24]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Using `Typeable`: `mkQ` [[Boilerplate1]](http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps)'
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`Typeable`：`mkQ`[[Boilerplate1]](http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps)
- en: 'Function that computes over one type or returns default val:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算一个类型或返回默认值的函数：
- en: '[PRE26]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`mkQ` stands for "make query"'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mkQ`代表“创建查询”'
- en: Example
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE27]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Exercise: implement `mkQ`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习：实现`mkQ`
- en: Solution
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Or if you want to get fancy:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者如果你想要变得花哨：
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Functions on multiple types: `extQ`'
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多类型函数：`extQ`
- en: '`mkQ` only works for one type'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mkQ`只适用于一种类型'
- en: Let's extend `mkQ`'s output to work on another type [[Boilerplate1]](http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps)
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们将`mkQ`的输出扩展到另一种类型[[Boilerplate1]](http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps)
- en: '[PRE31]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now can cascade multiple one-type query functions
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以级联多个相同类型的查询函数
- en: '[PRE32]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Recall default associatifity is left (`infixl 9 `extQ``)
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回想默认的结合性是左结合（`infixl 9 `extQ``）
- en: Kind of tedious, but could approximate goal of `tupleToList` at beginning of
    lecture if tuples contain limited number of types
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有点繁琐，但如果元组包含有限数量的类型，可以近似实现讲座开始时的`tupleToList`目标
- en: '[`ExistentialQuantification`](http://www.haskell.org/ghc/docs/latest/html/users_guide/data-type-extensions.html#existential-quantification)
    extension'
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`ExistentialQuantification`](http://www.haskell.org/ghc/docs/latest/html/users_guide/data-type-extensions.html#existential-quantification)扩展'
- en: Lets you introduce type variables on right side of `data` declaration
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许在`data`声明的右侧引入类型变量
- en: '[PRE33]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Given a value of type `Stream a`, there exists a type `s` such that...
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定类型为`Stream a`的值，存在一个类型`s`，使得...
- en: But syntax uses `forall`, not `exists`, to avoid introducing new keyword
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但语法使用`forall`，而不是`exists`，以避免引入新关键字
- en: Very safe extension (`Control.Exception` relies on it)
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常安全的扩展（`Control.Exception`依赖于它）
- en: 'Don''t confuse with [`Rank2Types`](http://www.haskell.org/ghc/docs/latest/html/users_guide/other-type-extensions.html#universal-quantification),
    where `forall` means for all types `s`:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要与[`Rank2Types`](http://www.haskell.org/ghc/docs/latest/html/users_guide/other-type-extensions.html#universal-quantification)混淆，其中`forall`表示所有类型`s`：
- en: '[PRE34]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Contexts on existential variables like hidden dictionary fields
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于存在变量的上下文，就像隐藏的字典字段
- en: '[PRE35]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: A `Showable` value has both a value of type `a`, and a dictionary for `Show`
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Showable`值既有类型为`a`的值，也有`Show`的字典
- en: 'Example: Dynamic type'
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子：动态类型
- en: '[`Data.Dynamic`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Dynamic.html)
    has type `Dynamic`, which can hold anything `Typeable`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Data.Dynamic`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Dynamic.html)具有类型`Dynamic`，可以容纳任何`Typeable`'
- en: '[PRE36]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Actual implementation slightly gross
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际实现略显复杂
- en: Uses `unsafeCoerce` to coerce everything to a placeholder `Obj` type
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`unsafeCoerce`将所有内容强制转换为占位符`Obj`类型
- en: 'But easy to implement safely with `ExistentialQuantification`:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但是使用`ExistentialQuantification`可以安全地实现：
- en: '[PRE37]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Example: Extensible exceptions [[Marlow]](http://community.haskell.org/~simonmar/papers/ext-exceptions.pdf)'
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子：可扩展异常[[Marlow]](http://community.haskell.org/~simonmar/papers/ext-exceptions.pdf)
- en: GHC runtime implements primitive, unsafe exceptions
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GHC运行时实现了原始的、不安全的异常
- en: '[PRE38]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Must ensure that, as used, `b` is always same type, otherwise get unsafe coercion
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须确保，如所使用，`b`始终是相同类型，否则会得到不安全的强制转换
- en: In reality, want many exception types, organized into a hierarchy
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际上，希望有许多异常类型，组织成一个层次结构
- en: '[`Control.Exception`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html)
    implements safe, hierarchical exceptions'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Control.Exception`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html)
    实现安全的、分层的异常'
- en: '`raise#` and `catch#` only ever called with one type: `SomeException`'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raise#` 和 `catch#` 只会被一个类型调用：`SomeException`'
- en: '[PRE39]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Throwing and catching exceptions
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抛出和捕获异常
- en: '[PRE40]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: To throw an exception, first convert it to type `SomeException`
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要抛出异常，首先将其转换为类型 `SomeException`
- en: '[PRE41]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: To catch an exception, must ensure it matches desired type
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要捕获异常，必须确保它与所需类型匹配
- en: '[PRE42]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note `handler` makes `fromException se` use `e`'s `Exception` dictionary
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意 `handler` 使 `fromException se` 使用 `e` 的 `Exception` 字典
- en: Making hierarchical exceptions
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作分层异常
- en: Easy to add your own top-level exception type
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很容易添加自己的顶级异常类型
- en: '[PRE43]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: But you can also create a hierarchy of exception types
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但你也可以创建一系列异常类型的层次结构
- en: '[PRE44]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Let's you catch just `Error1`, or any `AppError`
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让你只捕获 `Error1`，或任何 `AppError`
- en: The [`Data`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Data.html#t:Data)
    class
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`Data`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Data.html#t:Data)
    类'
- en: '[PRE45]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`Data` class allows generic traversal and construction of data structures'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data` 类允许对数据结构进行通用遍历和构造'
- en: Defines `gfoldl` and `gunfold` methods like this
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 `gfoldl` 和 `gunfold` 方法如下
- en: '[PRE46]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now can work over all sized tuples! But:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以处理所有大小的元组了！但是：
- en: Once you introduce types, things get uglier [cosmetic]
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦引入类型，事情变得更加丑陋 [cosmetic]
- en: The only dictionaries available are `Data` and `Typeable` [fundamental]
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的唯一字典是 `Data` 和 `Typeable` [fundamental]
- en: All the runtime type checking is slow [fundamental]
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的运行时类型检查都很慢 [fundamental]
- en: Can we do it at compile time?
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们能在编译时做吗？
- en: 'Alternative: push generic programming to compile time [[Magalhães]](http://dreixel.net/research/pdf/gdmh.pdf)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替代方案：将通用编程推到编译时 [[Magalhães]](http://dreixel.net/research/pdf/gdmh.pdf)
- en: Let's look at a simplified implementation
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们看一个简化的实现
- en: '`wget` [`cs240h.stanford.edu/metadata.hs`](http://www.scs.stanford.edu/14sp-cs240h/metadata.hs)'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wget` [`cs240h.stanford.edu/metadata.hs`](http://www.scs.stanford.edu/14sp-cs240h/metadata.hs)'
- en: 'High-level idea: Say you auto-derived instances of `Show`-like class:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高层次思想：假设你自动派生了`Show`类似的实例：
- en: '[PRE47]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Introduce generic `MetaData` class for which compiler can generate instance
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入通用的`MetaData`类，编译器可以生成实例
- en: '[PRE48]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: And a `MyShow`-specific meta-class, such that?
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一个`MyShow`特定的元类，是这样的吗？
- en: '[PRE49]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[`DefaultSignatures`](http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#class-default-signatures)
    extension'
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`DefaultSignatures`](http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#class-default-signatures)
    扩展'
- en: We can do even better using [`DefaultSignatures`](http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#class-default-signatures)
    extension
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用[`DefaultSignatures`](http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#class-default-signatures)
    扩展做得更好
- en: Allows default methods that don't work for all instances
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许不适用于所有实例的默认方法
- en: '[PRE50]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Makes it even easier to declare instances
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使声明实例变得更容易
- en: '[PRE51]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Let's see how we could design such a `MetaData` class
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们看看如何设计这样一个`MetaData`类
- en: '`wget` [`cs240h.stanford.edu/metadata.hs`](http://www.scs.stanford.edu/14sp-cs240h/metadata.hs)'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wget` [`cs240h.stanford.edu/metadata.hs`](http://www.scs.stanford.edu/14sp-cs240h/metadata.hs)'
- en: '[`DeriveGeneric`](http://www.haskell.org/ghc/docs/latest/html/users_guide/generic-programming.html)
    extension'
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`DeriveGeneric`](http://www.haskell.org/ghc/docs/latest/html/users_guide/generic-programming.html)
    扩展'
- en: 'Compiler supports single `Generic` class that converts any datatype to a `Rep`
    that can be computed over generically:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '编译器支持单个`Generic`类，将任何数据类型转换为可以通用计算的`Rep`： '
- en: '[PRE52]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '`type Rep` uses extension called `TypeFamilies`. Can read above as:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type Rep` 使用了称为 `TypeFamilies` 的扩展。可以理解为：'
- en: '[PRE53]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Like our simpler example, except everything of kind ∗ → ∗
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像我们简单的例子一样，除了所有的都是∗ → ∗类型
- en: Why? Maybe so you need a Ph.D. to use the extension?
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么？也许是因为你需要博士学位才能使用这个扩展？
- en: (Allegedly will someday facilitate generic types of kind ∗ → ∗, so can make
    generic `Functor`-like instances)
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: （据说将来会支持种类为∗ → ∗的通用类型，因此可以制作通用的`Functor`类似实例）
- en: '`Rep` of a unit type'
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元类型的`Rep`
- en: '[PRE54]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[`GHC.Generics`](http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.0/GHC-Generics.html)
    contents (part 1)'
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`GHC.Generics`](http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.0/GHC-Generics.html)
    内容（第一部分）'
- en: '[PRE56]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Types with constructor arguments
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有构造函数参数的类型
- en: '[PRE57]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Note selectors are one feature our simpler example didn't have
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意选择器是我们简单示例没有的一个特性
- en: Let's you pick out record names from types
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让你从类型中挑选出记录名称
- en: '[`GHC.Generics`](http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.0/GHC-Generics.html)
    contents (part 2)'
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`GHC.Generics`](http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.0/GHC-Generics.html)
    内容（第2部分）'
- en: '[PRE59]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Again, ignore parameter `p` (there to make types of kind ∗ → ∗)
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次忽略参数`p`（这里是为了使类型的种类为∗ → ∗）
- en: '`M1` exists so a single traversal method can skip over `D1`, `C1`, and `S1`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M1`存在，所以一个单一的遍历方法可以跳过`D1`、`C1`和`S1`'
- en: Could say `newtype Rec0 c p = K1 c`, but some instances use `K1 P`
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以说`newtype Rec0 c p = K1 c`，但有些实例使用`K1 P`
- en: What would a `Generic` instance look like?
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Generic`实例会是什么样子？'
- en: '[PRE60]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: How can we use this?
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何使用这个？
- en: Say we are defining our own `Show`-like class
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设我们正在定义自己的`Show`类似的类
- en: '[PRE61]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Want it to work with all user-defined data types
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 希望它能适用于所有用户定义的数据类型
- en: Let's define a class `Show1` to deal with annoying `p` parameters
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们定义一个类`Show1`来处理烦人的`p`参数
- en: '[PRE62]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: And let's define generic traversal methods
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们定义通用的遍历方法
- en: '[PRE63]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Non-generic instances of `MyShow1`
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`MyShow1`的非通用实例'
- en: When we hit a constructor, want to print the name
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们遇到一个构造函数时，想要打印出名称
- en: '[PRE64]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: We're using OverlappingInstances, since already have `M1` instance
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用`OverlappingInstances`，因为已经有`M1`实例
- en: When we have no constructor args, don't show anything
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当没有构造函数参数时，不显示任何内容
- en: '[PRE65]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: When we have multiple constructor args, show them all
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们有多个构造函数参数时，显示它们全部
- en: '[PRE66]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: When you hit the actual value, show it
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你遇到实际值时，显示它
- en: '[PRE67]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Now we're calling `myShow`, which we haven't yet defined for many types
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我们正在调用`myShow`，但我们还没有为许多类型定义它
- en: Implementing a generic `MyShow`
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现一个通用的`MyShow`
- en: Now can define generic `MyShow` in terms of `MyShow1`
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以根据`MyShow1`来定义通用的`MyShow`
- en: '[PRE68]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Can we avoid `OverlappingInstances`?
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们能避免`OverlappingInstances`吗？
- en: Could have defined separate `D1`, `S1` instances of `Show1` (easy)
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以定义`Show1`的单独的`D1`、`S1`实例（简单）
- en: Could have avoided completely generic instance
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以完全避免通用实例
- en: Recommended use is just to define a *function* `myShowDefault`, then
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 推荐的用法只是定义一个*函数* `myShowDefault`，然后
- en: '[PRE69]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: There's still the problem of different behavior for `[Char]` vs. `[a]`
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仍然存在`[Char]`与`[a]`之间不同行为的问题
