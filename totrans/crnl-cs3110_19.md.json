["```\nmodule type FUN_ARRAY = sig\n  type 'a t\n\n  (* make n x creates an array of length n such that each element is x *)\n  val make : int -> 'a -> 'a t\n  (* get a i returns element i in the array a.\n     Requires: 0 <= i=\"\" <=\"\" length=\"\" a=\"\" *)=\"\" val=\"\" get=\"\" :=\"\" 'a=\"\" t=\"\" -=\"\"> int -> 'a\n\n  (* set a i x is the array a with x inserted at index i\n     Requires: 0 <= i=\"\" <=\"\" length=\"\" a=\"\" *)=\"\" val=\"\" set=\"\" :=\"\" 'a=\"\" t=\"\" -=\"\"> int -> 'a -> 'a t\nend\n\n```", "```\nmodule FunArray : FUN_ARRAY = struct\n  type 'a t = 'a array\n  let make = Array.make \n  let get = Array.get\n  let set (a : 'a t) (i : int) (x : 'a) : 'a t =\n    let a' = Array.copy a in\n      a'.(i) <- x;\n      a'\nend\n```", "```\ntype 'a t = 'a data ref and 'a data = Arr of 'a array | Diff of int * 'a * 'a t \n```", "```\nlet rec get (a : 'a t) (i : int) : 'a =\n    match !a with\n        Arr arr -> arr.(i)\n      | Diff(j, x, a') -> if i = j then x else get a' i\n\n```", "```\nlet set (a : 'a t) (i : int) (x : 'a) : 'a t =\n    match !a with\n        Arr arr ->\n          let a' = ref (Arr arr) in\n            a := Diff(i, arr.(i), a');\n            arr.(i) <- x;=\"\" a'=\"\" |=\"\" diff=\"\" _=\"\" -=\"\"> ref (Diff(i, x, a))\n\n```", "```\n  (* Effects: reverses the list of Diff nodes along the path to the Arr *)\n  let rec reroot (a : 'a t) : unit =\n    match !a with\n        Arr _ -> ()\n      | Diff(i, x, a') ->\n          reroot a';\n          match !a' with\n              Diff _ -> failwith \"impossible\"\n            | Arr(arr) ->\n                a := Arr(arr);\n                a' := Diff(i, arr.(i), a);\n                arr.(i) <- x\n```", "```\nmodule FunArray : FUN_ARRAY = struct\n  type 'a t = 'a data ref\n  and 'a data = Arr of 'a array | Diff of int * 'a * 'a t\n\n  let make (n : int) (x : 'a) : 'a t =\n    ref (Arr (Array.make n x))\n\n  (* Effects: reverses the list of Diff nodes along the path to the Arr *)\n  let rec reroot (a : 'a t) : unit =\n    match !a with\n        Arr _ -> ()\n      | Diff(i, x, a') ->\n          reroot a';\n          match !a' with\n              Diff _ -> failwith \"impossible\"\n            | Arr(arr) ->\n                a := Arr(arr);\n                a' := Diff(i, arr.(i), a);\n                arr.(i) <- x=\"\" let=\"\" rec=\"\" get=\"\" (a=\"\" :=\"\" 'a=\"\" t)=\"\" (i=\"\" int)=\"\" a;=\"\" match=\"\" !a=\"\" with=\"\" diff(j,=\"\" x,=\"\" a')=\"\" -=\"\"> failwith \"impossible\"\n      | Arr arr -> arr.(i)\n\n  let rec set (a : 'a t) (i : int) (x : 'a) : 'a t =\n    reroot a;\n    match !a with\n        Arr arr ->\n          let a' = ref (Arr arr) in\n            a := Diff(i, arr.(i), a');\n            arr.(i) <- x;=\"\" a'=\"\" |=\"\" diff=\"\" _=\"\" -=\"\"> ref (Diff(i, x, a))\nend\n\n```"]