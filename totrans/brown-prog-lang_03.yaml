- en: 3From Repeated Expressions to Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从重复表达式到函数
- en: '|     [3.1 Example: Moon Weight](#%28part._.Example__.Moon_.Weight%29) |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|     [3.1 示例：月球重量](https://wiki.example.org/example_moon_weight) |'
- en: '|     [3.2 Example: Japanese Flag](#%28part._.Example__.Japanese_.Flag%29)
    |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|     [3.2 Example: Japanese Flag](https://wiki.example.org/example_japanese_flag)
    |'
- en: '|     [3.3 Tests: Keeping Track of Examples](#%28part._.Tests__.Keeping_.Track_of_.Examples%29)
    |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|     [3.3 Tests: Keeping Track of Examples](https://wiki.example.org/tests_keeping_track_of_examples)
    |'
- en: '|     [3.4 Type Annotations](#%28part._.Type_.Annotations%29) |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|     [3.4 Type Annotations](https://wiki.example.org/type_annotations) |'
- en: '|     [3.5 Defining Functions in Steps](#%28part._.Defining_.Functions_in_.Steps%29)
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|     [3.5 Defining Functions in Steps](https://wiki.example.org/defining_functions_in_steps)
    |'
- en: '3.1Example: Moon Weight'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1示例：月球重量
- en: Suppose we’re responsible for outfitting a team of astronauts for lunar exploration.
    We have to determine how much each of them will weigh on the Moon’s surface. We
    know how to do this—<wbr>we saw the expression earlier [REF]—<wbr>but it’s boring
    to write it over and over again. Besides, if we copy or re-type an expression
    multiple times, sooner or later we’re bound to make a transcription error.This
    is an instance of the [DRY principle](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).
    Separately, correcting errors is itself an interesting computer science topic,
    which we address much later [REF].
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们负责为一支登月探险队配备装备。我们必须确定他们每个人在月球表面的重量。我们知道如何做到这一点—<wbr>我们之前看到过这个表达式 [REF]—<wbr>但是一遍又一遍地写这个表达式很无聊。此外，如果我们多次复制或重新输入表达式，迟早我们会出现抄写错误。这是
    [DRY 原则](https://zh.wikipedia.org/wiki/不要重复你自己)的一个例子。另外，纠正错误本身就是一个有趣的计算机科学主题，我们稍后会详细讨论
    [REF]。
- en: When looking at our Moon weight calculations—<wbr>say
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当看到我们的月球重量计算时—<wbr>说
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: —<wbr>we see that there are parts that are “fixed” and parts that are “changing”.
    The fixed parts are the ones we don’t want to have to repeat; the changing parts
    are the ones we have no choice about (and want the freedom to vary). It would
    be nice to make a package that makes this difference clear.The way we’ll do it
    is to write a function. A function takes one or more parameters, which are the
    parts that vary. Specifically, the way we create a function is to
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: —<wbr>我们看到有一些部分是“固定的”，有一些部分是“变化的”。固定部分是我们不想重复的部分；变化部分是我们无法选择的部分（并且希望自由变化）。我们很希望能制作一个清晰地表明这种差异的包。我们将这样做的方式是编写一个函数。一个函数接受一个或多个参数，这些参数是变化的部分。具体来说，我们创建函数的方式是
- en: Write down some examples of the desired calculation.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写下所需计算的一些示例。
- en: Identify which parts are fixed (above, * 1/6) and which are changing (above,
    100, 150, 90...).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 辨别哪些部分是固定的（上面，* 1/6），哪些是变化的（上面，100、150、90...）。
- en: For each changing part, give it a name (say earth-weight), which will be the
    parameter that stands for it.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个变化的部分，给它一个名称（比如 earth-weight），它将是代表它的参数。
- en: 'Rewrite the examples to be in terms of this parameter:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新编写示例，以适应这个参数：
- en: '[PRE1]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Do Now!
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在开始！
- en: ''
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Why is there only one expression, when before we had many?
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为什么只有一个表达式，而以前我们有很多个？
- en: We have only one expression because the whole point was to get rid of all the
    changing parts and replace them with parameters.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们只有一个表达式，因为整个重点是摆脱所有变化的部分，并用参数替换它们。
- en: 'Name the function something suggestive: e.g., moon-weight.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给函数取一个有意义的名字：例如，moon-weight。
- en: 'Write the syntax for functions around the expression:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表达式周围编写函数的语法：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: where the expression is called the body of the function.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表达式被称为函数的主体。
- en: 'Wow, that looks like a lot of work! But the end-product is really quite simple:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，那看起来像是很多工作！但最终产品确实非常简单：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will go through the same steps over and over, and eventually they’ll become
    so intuitive that we won’t even remember that we actually took steps to get from
    examples to the function: it’ll become a single, natural step.How do we use this?
    From Pyret’s point of view, moon-weight is just another operator just like num-expt
    or overlay. Thus:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一遍又一遍地进行相同的步骤，最终它们会变得如此直观，以至于我们甚至不会记得我们实际上是如何从示例到函数的：它将成为一个单一的、自然的步骤。我们如何使用这个？从
    Pyret 的角度来看，月球重量只是另一个操作符，就像 num-expt 或 overlay 一样。因此：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: will produce the same answers as the expressions we began with, but we’re not
    going to make any mistakes in the formula due to copying or retyping.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将产生与我们开始的表达式相同的答案，但由于复制或重新输入而在公式中不会出现任何错误。
- en: '3.2Example: Japanese Flag'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2示例：日本国旗
- en: Let’s create another function. Remember our Japanese flag ([REF])? Each time
    we wanted a different-sized flag, we had to change the value of unit and re-run
    the whole program. Instead, we should create a function that generates Japanese
    flags.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另一个函数。还记得我们的日本国旗吗（[REF]）？每次我们想要不同大小的旗帜时，我们都必须更改unit的值并重新运行整个程序。相反，我们应该创建一个生成日本国旗的函数。
- en: 'How many parameters does this function need? Going back to our earlier code,
    we see that the only thing that really changes is unit. Everything else is calculated
    from that. Therefore, we should turn unit into a parameter, and keep the rest
    of the computation (which is already in terms of unit) intact:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数需要多少个参数？回顾我们早期的代码，我们看到唯一真正变化的是单位。其他所有事物都是根据那个计算的。因此，我们应该将单位转换为参数，并保持其余计算（已经以单位为单位）不变：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This function body creates several local [REF] variables, and eventually produces
    the result of the overlay expression, which is the flag shape. We can therefore
    use it many times:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数体创建了几个本地[REF]变量，并最终生成了叠加表达式的结果，即旗帜形状。因此，我们可以多次使用它：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: without having to re-run the program between changes.Note that if the generated
    image is large, Pyret will replace the acutal image with a thumbnail version of
    it. Click on the thumbnail to see the full image.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改之间无需重新运行程序。请注意，如果生成的图像很大，Pyret将用缩略图替换实际图像。点击缩略图查看完整图像。
- en: '3.3Tests: Keeping Track of Examples'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3测试：跟踪示例
- en: In each of the functions above, we’ve started with some examples of what we
    wanted to compute, generalized from there to a generic formula, turned this into
    a function, and then used the function in place of the original expressions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述每个函数中，我们都从要计算的一些示例开始，从中概括出一个通用的公式，然后将其转换为函数，并在原始表达式的位置使用该函数。
- en: 'Now that we’re done, what use are the initial examples? It seems tempting to
    toss them away. However, there’s an important rule about software that you should
    learn: Software Evolves. Over time, any program that has any use will change and
    grow, and as a result may end up producing different values than it did initially.
    Sometimes these are intended, but sometimes these are a result of mistakes (including
    such silly but inevitable mistakes like accidentally adding or deleting text while
    typing). Therefore, it’s always useful to keep those examples around for future
    reference, so you can immediately be alerted if the function deviates from the
    examples it was supposed to generalize.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成了，最初的示例有什么用？扔掉它们似乎很诱人。但是，有一条关于软件的重要规则你应该了解：软件会不断发展。随着时间的推移，任何有用的程序都会发生变化和增长，因此可能最终产生与最初不同的值。有时这些是有意的，但有时这些是错误的结果（包括像在输入时意外添加或删除文本这样愚蠢但不可避免的错误）。因此，将这些示例保留下来以供将来参考总是有用的，这样如果函数偏离了它应该泛化的示例，你就可以立即得到通知。
- en: 'Pyret makes this easy to do. Every function can be accompanied by a where clause
    that records the examples. For instance, our Moon weight can be modified to read:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Pyret使这变得很容易。每个函数都可以附带一个记录示例的where子句。例如，我们的月球重量可以修改为：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When written this way, Pyret will actually check the answers every time you
    run the program, and notify you if you have changed the function to be inconsistent
    with these examples.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当以这种方式编写时，Pyret将在每次运行程序时实际检查答案，并在您将函数更改为与这些示例不一致时通知您。
- en: Do Now!
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Check this! Change the formula—<wbr>for instance, replace the body of the function
    with
  id: totrans-44
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 检查一下！更改公式，例如，用函数的主体替换
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-46
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: and see what happens.
  id: totrans-48
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 看看发生了什么。
- en: Of course, it’s pretty unlikely you will make a mistake with a function this
    simple (except through a typo). After all, the examples are so similar to the
    function’s own body. Later, however, we will see that the examples can be much
    simpler than the body, as a result of which it’s no longer so easy to tell that
    they behave the same way, and we will find that it can be difficult to make the
    body match the examples. In fact, this is such a common in real software production
    that professional programmers always write down such examples—<wbr>called tests—<wbr>to
    make sure their programs are behaving as they expect.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你很难通过这么简单的函数犯错（除非打错字）。毕竟，这些示例与函数自身的主体非常相似。然而，后来我们会发现，这些示例可以比主体简单得多，因此很难确定它们是否表现相同，我们会发现很难使主体与示例匹配。事实上，在真实的软件生产中，这是非常常见的，专业程序员总是写下这些示例，称为测试，以确保他们的程序行为符合他们的期望。
- en: 3.4Type Annotations
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4类型注释
- en: 'Suppose we were to call moon-weight on a string:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要在字符串上调用moon-weight：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Do Now!
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What happens?
  id: totrans-55
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: Pyret generates an error, saying that you can’t multiply a number by a string
    (whoever taught you arithmetic will be pleased to hear that).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Pyret生成一个错误，说你不能用一个字符串乘以一个数字（教你算术的人会很高兴听到这个消息）。
- en: In a function this small, it hardly matters. But if you had a much bigger function,
    it would be frustrating to get a similar error from deep in its bowels. Worse,
    if you get a function that someone else wrote, you need to read the entire function—<wbr>which
    could be quite a bit larger—<wbr>to figure out what kinds of values it consumes
    and produces.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样一个小函数中，这几乎无关紧要。但是如果你有一个更大的函数，从其深处得到类似的错误将令人沮丧。更糟糕的是，如果你得到的函数是别人写的，你需要阅读整个函数——<wbr>这可能要大得多——<wbr>才能弄清它消耗和生成什么样的值。
- en: 'Fortunately, we can do better. Pyret lets you write annotations on functions
    that indicate its values. Specifically, in the case of moon-weight, because it
    consumes and produces numbers, we would write:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以做得更好。Pyret允许你在函数上写注释，指示它的值。具体来说，在moon-weight的情况下，因为它消耗和生成数字，我们将写：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We’ve left out the where examples for brevity, but you can write those too.
    Now, just by reading the function you can tell that it consumes a number (the
    :: Number part) and that it also produces one (the -> Number part).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '为了简洁起见，我们省略了where示例，但你也可以写出来。现在，只需阅读函数，你就可以知道它消耗一个数字（:: Number部分）并且也生成一个数字（->
    Number部分）。'
- en: Do Now!
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What happens now when you run moon-weight("Armstrong")?
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当你运行moon-weight("Armstrong")时会发生什么？
- en: Do Now!
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What would the annotations be on japan-flag?
  id: totrans-66
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: japan-flag的注释会是什么？
- en: 'Because japan-flag consumes a number and produces an image, we write:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因为japan-flag消耗一个数字并产生一个图像，我们写：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Observe that these annotations are clearly optional: until this section, our
    functions had neither. In fact, you can use annotations in one place and not another.
    Also, you can place annotations on any new variable, not only those in parameters:
    for instance, the variables inside japan-flag can also be annotated.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些注释显然是可选的：直到本节为止，我们的函数都没有。实际上，你可以在一个地方使用注释而不在另一个地方使用。此外，你可以在任何新变量上放置注释，而不仅仅是在参数中：例如，japan-flag内部的变量也可以被注释。
- en: Do Now!
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Fill in the annotations in each of the blanks:'
  id: totrans-72
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在每个空白处填上注释：
- en: ''
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-74
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The full-annotated function would be:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 完全注释的函数将是：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Do Now!
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Change one of the annotations to be incorrect: e.g.,'
  id: totrans-79
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更改其中一个注释使其不正确：例如，
- en: ''
  id: totrans-80
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ''
  id: totrans-82
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: When do you get an error? Is it when you click Run or only when you actually
    use japan-flag?
  id: totrans-83
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么时候会出错？是当你点击运行时还是只有当你实际使用japan-flag时？
- en: ''
  id: totrans-84
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-85
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Which part of your program does the error refer to?
  id: totrans-86
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序的哪一部分出错了？
- en: 'The things we put in the annotations—<wbr>Number, String, etc.—<wbr>are called
    types. Types help us tell apart different kinds of data. Every value has a type,
    and no value has more than one type. Thus, 3 is a Number (and no other type),
    "hello" is a String (and no other type), and so on.Later [REF] we will see that
    we can “refine” types so that a value can have more than one refined type: 3 can
    be a number, an odd number, but also a prime number, and so on. In some languages
    [REF], these type annotations are checked before the program runs, so you can
    learn about potential errors before ever running your program. In other languages,
    you only discover them during program execution. Pyret itself aims to provide
    both modes, so you can choose whichever makes most sense for your context.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们放在注释中的东西——<wbr>Number、String等——<wbr>被称为类型。类型帮助我们区分不同类型的数据。每个值都有一个类型，并且没有值有多于一个类型。因此，3是一个Number（没有其他类型），"hello"是一个String（没有其他类型），依此类推。稍后[REF]我们将看到，我们可以“细化”类型，使得一个值可以有多个细化的类型：3可以是一个数字，一个奇数，但也可以是一个质数，等等。在一些语言[REF]中，这些类型注释在程序运行之前被检查，因此你可以在运行程序之前了解可能的错误。在其他语言中，你只能在程序执行期间发现它们。Pyret本身旨在提供两种模式，因此你可以选择在你的上下文中最合适的模式。
- en: 3.5Defining Functions in Steps
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.5逐步定义函数
- en: 'When writing functions, it is useful to write it in stages. First, give it
    a name, make sure you understand its types, and write a little documentation to
    remind your user and reader, who may be unfamiliar with your function—<wbr>in
    a few weeks, this could be you!—<wbr>what it’s meant to do. For instance, here’s
    a function that, given a number of hours worked, computes the corresponding salary:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写函数时，逐步编写是很有用的。首先，给它一个名字，确保你了解它的类型，并写一些文档以提醒你的用户和读者，他们可能对你的函数不熟悉——几周后，可能就是你！——它的用途是什么。例如，这是一个给定工作小时数后计算相应工资的函数：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Note that the purpose statement above leaves implicit when “overtime” kicks
    in; in the USA, this is after 40 hours per week.Next, we write down examples:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述目的陈述未明确指出“加班”何时开始；在美国，这是每周40小时后。接下来，我们写下例子：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Examples should cover at least all the different cases mentioned in the data
    definition. In this case, for example, it’s useful to note that the 40th hour
    doesn’t count towards overtime, but the 41st does. Note that by writing the examples
    the way we have above, it isn’t entirely clear what computation results in those
    answers; in contrast, writing
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 示例应至少涵盖数据定义中提到的所有不同情况。例如，在这种情况下，有必要注意到第40小时不算加班，但第41小时算加班。请注意，通过以上方式编写示例，不太清楚哪种计算会产生这些答案；相比之下，编写
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Note how we’ve written even the 0 as 0 * 10 to make clear we’re using a rate
    of $10 per hour…for zero hours.Of course, we should also work out the calculation
    beyond 40 hours. Now the formula is going to get complicated. For the first 40
    hours, the employee is paid their salary per hour, which contributes 40 * 10 (just
    as in the last example above). For every additional hour (i.e., the total hours
    worked with 40 subtracted), they are paid 1.5 times their salary, i.e., 10 * 1.5.
    Combining these two pieces, we get:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们甚至将 0 写成 0 * 10，以明确我们使用的是每小时$10的费率……当然，我们也应该计算超过40小时的计算。现在，公式将变得复杂起来。前40小时，员工按每小时工资支付工资，这贡献了
    40 * 10（就像上面的最后一个示例中一样）。对于每个额外的小时（即，总工作时间减去40），他们将以1.5倍的工资支付，即，10 * 1.5。结合这两个部分，我们得到：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'From these examples, we can determine the shape of the body:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些例子中，我们可以确定身体的形状：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The hours-to-wages function always assumes an hourly rate of $10/hour. We can
    change it to accommodate a different hourly rate, say $20/hour, by changing the
    constant 10 where it appears representing the hourly rate:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: hours-to-wages 函数始终假定每小时工资为$10。我们可以通过更改常量 10（代表小时工资的地方）来更改它以适应不同的小时工资，例如$20/小时：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We could make another copy of the function for $30/hour workers, and so on.
    However, it’s also possible, and quite straightforward, to change the function
    to work for any hourly wage. We note the shared parts across the implementation
    and lift them out, adding a new parameter to the function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为每小时$30的工人制作另一个函数副本，等等。然而，改变函数以适用于任何小时工资也是可能的，而且相当简单。我们注意到实现中的共享部分，并将其提取出来，向函数添加一个新参数。
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note that we’ll take the convention of adding new parameters at the beginning
    of the argument list. We simply add the new parameter (with an appropriate annotation),
    and replace all instances of the constant with it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将约定在参数列表的开头添加新参数。我们只需添加新参数（带有适当的注释），并用它替换所有常量的实例。
- en: Exercise
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a function called has-overtime that takes a number of hours and returns
    true if the number of hours is greater than 40 and false otherwise.
  id: totrans-106
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写一个名为 has-overtime 的函数，该函数接受小时数，并在小时数大于40时返回 true，否则返回 false。
- en: Exercise
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Working negative hours is nonsense. Write a version of hours-to-wages that uses
    the raise function to throw an error if fewer than 0 hours are reported. Use the
    raises form to test for it (read about raises in [the Pyret documentation](http://www.pyret.org/docs/latest/testing.html#%28part._testing_raises%29)).
  id: totrans-109
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 工作负数小时是没有意义的。编写一个使用 raise 函数在报告少于 0 小时时抛出错误的 hours-to-wages 版本。使用 raises 表单进行测试（阅读有关
    raises 的[Pyret文档](http://www.pyret.org/docs/latest/testing.html#%28part._testing_raises%29)）。
- en: Exercise
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a function called hours-to-wages-ot that takes a number of hours, an hourly
    rate, and an overtime threshold, and produces the total pay. Any hours worked
    beyond the overtime threshold should be credited at 1.5 times the normal rate
    of pay, as before.
  id: totrans-112
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写一个名为 hours-to-wages-ot 的函数，该函数接受小时数、每小时工资和加班阈值，并产生总工资。任何超过加班阈值的工作时间都应以1.5倍的正常工资率计入，与以前一样。
