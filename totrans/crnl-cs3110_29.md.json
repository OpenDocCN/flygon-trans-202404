["```\nFormulas f,g ::=\n          \u22a4             (* true *)\n        | \u22a5             (* false *)\n        | \u00acf            (* negation; syntactic sugar for f \u21d2 \u22a5 *)\n        | f \u2227 f         (* conjunction (and) *)\n        | f \u2228 f         (* disjunction (or) *)\n        | f \u21d2 f         (* implication (if-then) *) \n        | \u2200x.f          (* f is true for all x. f can mention x*)\n        | \u2203x.f          (* There exists some x such that f is true *)\n        | t1 = t2       (* t1 is equal to t2 *)\n        | P(t1,...,tn)  (* n-ary predicate (aka relation) P is true \n                                                 for t1,...,tn *)\n\nTerms t ::=     \n          c             (* constants (integers, tuples, other values) *)\n        | x             (* variables *)\n        | fn(t1,...,tn)  (* result of applying n-ary function fn \n                                                  to t1,...,tn *)\n\n```", "```\nwrite(\n  infer('\u22a2 \u2200x.(x>10 \u2227 x<20) \u21d2 x > 10','(\u2200 intro)',[\n    infer('\u22a2 x>10 \u2227 x<20 \u21d2 x>10','(\u21d2 intro)',[\n      infer('x>10\u2227x<20\u22a2 x>10', '(\u2227 elim)',[\n        infer('x>10\u2227x<20 \u22a2 x>10\u2227x<20', '(assum)', [])\n      ])\n    ])\n  ])\n);\n\n```"]