- en: 静的型付け
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/overview/static-type](https://typescriptbook.jp/overview/static-type)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: プログラミング言語は大きく2つに分類されます。静的型付け言語と動的型付け言語です。静的型付け言語の中には、C言語やJavaがあり、今学んでいるTypeScriptもその仲間です。一方の動的型付け言語には、RubyやPython、PHP、そしてJavaScriptがあります。
  prefs: []
  type: TYPE_NORMAL
- en: もし、読者のあなたが動的型付け言語をずっとやってきて、TypeScriptが初めての静的型付け言語になるなら、きっとこのような疑問を持つはずです。
  prefs: []
  type: TYPE_NORMAL
- en: 「動的型付け言語」と「静的型付け言語」にはどんな違いがあるか？
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 「静的型付け言語」にはどんな利点があるのか？
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ここでは、そんな静的型付け言語に初めて挑戦する読者の疑問を解消していきます。
  prefs: []
  type: TYPE_NORMAL
- en: 動的型付け言語は「実行時」に型が定まる[​](#動的型付け言語は実行時に型が定まる "動的型付け言語は「実行時」に型が定まる への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 静的型付け言語とは何かを考える前に、慣れ親しんだ動的型付け言語とは何だったのか振り返ってみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: たとえばPythonで、与えられた引数から1を引き算して返す関数を例に考えてみます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'python`def minus(x):  return x -  1``print(minus(2))`'
  prefs: []
  type: TYPE_NORMAL
- en: この`minus()`関数には変数`x`があり、ここに整数型の`2`が代入されると問題なく計算され、整数型の`1`が返ります。当たり前ですね。
  prefs: []
  type: TYPE_NORMAL
- en: では、今度は`minus()`関数に`string`型の`"two"`を渡すとどうなるでしょうか。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'python`def minus(x):  return x -  1``print(minus("two"))`'
  prefs: []
  type: TYPE_NORMAL
- en: 'このコードを実行してみると、「TypeError: unsupported operand type(s) for -: ''str'' and ''int''」というエラーが発生します。これは「文字列から整数はマイナスできないよ」という意味です。'
  prefs: []
  type: TYPE_NORMAL
- en: 文字列から数値を引き算するというのは、人間からすると明らかに変です。実行するまでもなく型のおかしさに気づくと思います。
  prefs: []
  type: TYPE_NORMAL
- en: しかし、動的型付け言語ではプログラムを実行するまで型の問題は見過ごされます。プログラムを実行していくと、変数の型が定まっていきます。その過程で問題が発覚して、エラーになるのです。
  prefs: []
  type: TYPE_NORMAL
- en: ここからわかるように、**動的型付け言語の最大の特徴は、変数の型はプログラムを実行するまで定まらない**という点です。この特徴はプログラミングの自由度を高めるという利点でもあります。
  prefs: []
  type: TYPE_NORMAL
- en: 静的型付け言語は「コンパイル時」に型が定まる[​](#静的型付け言語はコンパイル時に型が定まる "静的型付け言語は「コンパイル時」に型が定まる への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: では、静的型付け言語にはどのような特徴があるのでしょうか？先ほどPythonで示した`minus()`関数を静的型付け言語であるTypeScriptで書いてみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 注目すべきは、変数`x`の隣に`number`と書かれている点です。これは、型注釈と呼ばれるもので、変数`x`が`number`型であることを表しています。
  prefs: []
  type: TYPE_NORMAL
- en: この変数`x`に`string`型の`"two"`を代入してコンパイルしてみるとどうなるでしょうか？
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: コンパイル結果はエラーになり、「Argument of type 'string' is not assignable to parameter of
    type 'number'.」という警告が表示されます。この警告の内容は「`number`型のパラメータに`string`型は代入できません」というものです。
  prefs: []
  type: TYPE_NORMAL
- en: Pythonの例でも似たようなエラーが確認できましたが、それは実行時に発生していました。一方、このTypeScriptの例のエラーは、コンパイル時に発生しています。ここが動的型付け言語と静的型付け言語の大きな特徴の違いです。コンパイル時というのは、プログラムを実行するよりも前の工程です。つまり、**型が実行時よりも前のコンパイル時で定まるというのが、静的型付け言語の特徴なのです**。そのおかげで、明らかにおかしな代入を早期発見できるというのが、TypeScriptを始めとした静的型付け言語の大きな利点になるわけです。
  prefs: []
  type: TYPE_NORMAL
- en: 型注釈をコストと考えるか、投資と考えるか[​](#型注釈をコストと考えるか投資と考えるか "型注釈をコストと考えるか、投資と考えるか への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 動的型付け言語では書く必要がなかった型注釈を、TypeScriptでは基本的には変数ごとに書いていくことになります。そのため、動的型の言語からTypeScriptに入ってきた人の中には、コードの記述量が増えて面倒に感じる人がいるかもしれません。型注釈の記述は「コスト」と考えることもできます。(それを省力化する「型推論」という仕組みもありますが、ここではその説明は割愛します。)
  prefs: []
  type: TYPE_NORMAL
- en: そもそも型注釈の目的は何なんでしょうか？それは、プログラマがコンパイラに「この変数の型は何であるか」を教えることです。型注釈があると、たとえば、コンパイラが`minus()`関数を処理するときに、「`x`変数は`number`型でなければならないのか。じゃあ、`string`型を代入するようなコードは間違いだな。エラーにしてプログラマに教えてあげよう」といったような働きをしてくれるのです。
  prefs: []
  type: TYPE_NORMAL
- en: コンパイラは、細かく問題を指摘してくるので、鬱陶しく思うかもしれません。ここは見方を変える必要があります。コンパイラは「あなた専属のコードレビュア」なのだと。バグに気づかずリリースしてしまい、大問題となって発覚するといった経験はないでしょうか？コンパイラはそういったことに至るずっと前の段階で、問題点を教えてくれる頼りになる存在です。
  prefs: []
  type: TYPE_NORMAL
- en: コンパイラも決して全知全能ではありません。ちゃんと型を教えてあげなければ、いいコンパイラに成長しません。逆に型注釈をちゃんとしていけば、多くの問題に気がつく賢いコンパイラに育っていきます。この観点に立つと、型注釈はコストではなく、コンパイラを正しく育て、バグを未然に防ぐための「投資」と考えることができるのではないでしょうか。
  prefs: []
  type: TYPE_NORMAL
- en: まとめ[​](#まとめ "まとめ への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '動的型付け言語: 実行時に変数の型が定まる言語。型にまつわる問題はプログラムを実行してみないと発覚しない。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '静的型付け言語: コンパイル時に変数の型が定まる言語。型にまつわる問題はプログラムを実行しなくても発見できる。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 型注釈は、あなた専属のコードレビュアであるコンパイラを育てるための投資。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
