["```\nval create: \n?on_handler_error:[ `Call of\n                      ([< Import.Socket.Address.t ] as 'a) -> exn -> unit\n                  | `Ignore\n                  | `Raise ] ->\n('a, 'listening_on) Where_to_listen.t ->\n('a -> Import.Reader.t -> Import.Writer.t -> unit Import.Deferred.t) ->\n('a, 'listening_on) t Import.Deferred.t\n\n```", "```\nlet server : (Socket.Address.Inet.t, int) Tcp.Server.t Deferred.t =\n  Tcp.Server.create\n  ~on_handler_error:`Ignore\n  (Tcp.on_port 3110)\n  (fun a r w -> return () (* dummy handler *)) in\nignore (server : (Socket.Address.Inet.t, int) Tcp.Server.t Deferred.t)\n\n```", "```\nnever_returns (Scheduler.go ())\n\n```", "```\nval close : ([< Import.Socket.Address.t ], 'a) t -> unit Import.Deferred.t\n\n```", "```\nval to_host_and_port : string -> int -> Socket.Address.t where_to_connect\nval connect : 'a where_to_connect -> ('a Socket.t * Reader.t * Writer.t) Deferred.t\n\n```", "```\nlet client : unit Deferred.t = \n  Tcp.connect (Tcp.to_host_and_port \"localhost\" 3110) >>= (fun (sock,r,w) -> \n  Writer.write_line w \"Hello World!\";\n  Reader.read_line r >>= (fun x -> \n   (match x with  \n     | `Eof -> ()\n     | `Ok s -> printf \"%s\" s);   \n   Socket.shutdown sock `Both;\n   return ()))\n\n```"]