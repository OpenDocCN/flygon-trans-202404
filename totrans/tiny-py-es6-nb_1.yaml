- en: Tiny Python 3.6 Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From: [mattharrison/Tiny-Python-3.6-Notebook](https://github.com/mattharrison/Tiny-Python-3.6-Notebook)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is not so much an instructional manual, but rather notes, tables, and examples
    for Python syntax. It was created by the author as an additional resource during
    training, meant to be distributed as a physical notebook. Participants (who favor
    the physical characteristics of dead tree material) could add their own notes,
    thoughts, and have a valuable reference of curated examples.
  prefs: []
  type: TYPE_NORMAL
- en: Running Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To check if Python is installed, run the following from a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Otherwise, install Python 3 from the website [[1]](#id2).
  prefs: []
  type: TYPE_NORMAL
- en: '| [[1]](#id1) | [http://python.org](http://python.org) |'
  prefs: []
  type: TYPE_TB
- en: Invoking Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Python executable will behave differently depending on the command line
    options you give it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the Python REPL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `file.py` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `file.py` file, and drop into REPL with namespace of `file.py`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `json/tool.py` module:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Execute `"print('hi')"`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: REPL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the `help` function to read the documentation for a module/class/function.
    As a standalone invocation, you enter the help system and can explore various
    topics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `dir` function to list contents of the namespace, or attributes of an
    object if you pass one in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The majority of code in this book is written as if it were executed in a REPL.
    If you are typing it in, ignore the primary and secondary prompts (`>>>` and `...`).
  prefs: []
  type: TYPE_NORMAL
- en: The Zen of Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following in an interpreter to get an Easter egg that describes some
    of the ethos behind Python. This is also codified in PEP 20:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: These might just seem like silly one liners, but there is a lot of wisdom packed
    in here. It is good for Python programmers to review these every once in a while
    and see if these hold true for their code. (Or to justify their code reviews)
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Python variables are like cattle tags, they point to objects (which can be
    classes, instances, modules, or functions), but variables are not the objects.
    You can reuse variable names for different object types (though you probably shouldn''t):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `#` character denotes the start of a comment. There are no multi-line comments,
    though most editors with Python support can comment out a region.
  prefs: []
  type: TYPE_NORMAL
- en: The figure that follows illustrates how everything is an object in Python and
    variables just point to them.
  prefs: []
  type: TYPE_NORMAL
- en: '[![../Images/rebind.png](../Images/rebind.png)](../Images/rebind.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Illustration of reusing the same variable
  prefs: []
  type: TYPE_NORMAL
- en: Numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Python includes three types of numeric literals: *integers*, *floats*, and
    *complex numbers*. Python 3.6 adds the ability to use underscores to improve readability
    (PEP 515).'
  prefs: []
  type: TYPE_NORMAL
- en: Number types
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Integer | `14` |'
  prefs: []
  type: TYPE_TB
- en: '| Integer (Hex) | `0xe` |'
  prefs: []
  type: TYPE_TB
- en: '| Integer (Octal) | `0o16` |'
  prefs: []
  type: TYPE_TB
- en: '| Integer (Binary) | `0b1110` |'
  prefs: []
  type: TYPE_TB
- en: '| Float | `14.0` |'
  prefs: []
  type: TYPE_TB
- en: '| Float | `1.4e1` |'
  prefs: []
  type: TYPE_TB
- en: '| Complex | `14+0j` |'
  prefs: []
  type: TYPE_TB
- en: '| Underscore | `1_000` |'
  prefs: []
  type: TYPE_TB
- en: There are many built-in functions for manipulating numbers ie. `abs`, `min`,
    `max`, `ceil`. Also see the `math`, `random`, and `statistics` modules in the
    standard library.
  prefs: []
  type: TYPE_NORMAL
- en: Number magic methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Provided By | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `abs(num)` | `__abs__` | Absolute value of `num` |'
  prefs: []
  type: TYPE_TB
- en: '| `num + num2` | `__add__` | Addition |'
  prefs: []
  type: TYPE_TB
- en: '| `bool(num)` | `__bool__` | Boolean conversion |'
  prefs: []
  type: TYPE_TB
- en: '| `num == num2` | `__eq__` | Equality |'
  prefs: []
  type: TYPE_TB
- en: '| `float(num)` | `__float__` | Float conversion |'
  prefs: []
  type: TYPE_TB
- en: '| `num // num2` | `__floordiv__` | Integer division |'
  prefs: []
  type: TYPE_TB
- en: '| `num >= num2` | `__ge__` | Greater or equal |'
  prefs: []
  type: TYPE_TB
- en: '| `num > num2` | `__gt__` | Greater than |'
  prefs: []
  type: TYPE_TB
- en: '| `int(num)` | `__int__` | Integer conversion |'
  prefs: []
  type: TYPE_TB
- en: '| `num <= num2` | `__le__` | Less or equal |'
  prefs: []
  type: TYPE_TB
- en: '| `num < num2` | `__lt__` | Less than |'
  prefs: []
  type: TYPE_TB
- en: '| `num % num2` | `__mod__` | Modulus |'
  prefs: []
  type: TYPE_TB
- en: '| `num * num2` | `__mul__` | Multiplication |'
  prefs: []
  type: TYPE_TB
- en: '| `num != num2` | `__ne__` | Not equal |'
  prefs: []
  type: TYPE_TB
- en: '| `-num` | `__neg__` | Negative |'
  prefs: []
  type: TYPE_TB
- en: '| `+num` | `__pos__` | Positive |'
  prefs: []
  type: TYPE_TB
- en: '| `num ** num2` | `__pow__` | Power |'
  prefs: []
  type: TYPE_TB
- en: '| `round(num)` | `__round__` | Round |'
  prefs: []
  type: TYPE_TB
- en: '| `num.__sizeof__()` | `__sizeof__` | Bytes for internal representation |'
  prefs: []
  type: TYPE_TB
- en: '| `str(num)` | `__str__` | String conversion |'
  prefs: []
  type: TYPE_TB
- en: '| `num - num2` | `__sub__` | Subtraction |'
  prefs: []
  type: TYPE_TB
- en: '| `num / num2` | `__truediv__` | Float division |'
  prefs: []
  type: TYPE_TB
- en: '| `math.trunc(num)` | `__trunc__` | Truncation |'
  prefs: []
  type: TYPE_TB
- en: Integer specific methods and operations
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Provided By | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `num & num2` | `__and__` | Bitwise and |'
  prefs: []
  type: TYPE_TB
- en: '| `math.ceil(num)` | `__ceil__` | Ceiling |'
  prefs: []
  type: TYPE_TB
- en: '| `math.floor(num)` | `__floor__` | Floor |'
  prefs: []
  type: TYPE_TB
- en: '| `~num` | `__invert__` | Bitwise inverse |'
  prefs: []
  type: TYPE_TB
- en: '| `num << num2` | `__lshift__` | Left shift |'
  prefs: []
  type: TYPE_TB
- en: '| `num &#124; num2` | `__or__` | Bitwise or |'
  prefs: []
  type: TYPE_TB
- en: '| `num >> num2` | `__rshift__` | Right shift |'
  prefs: []
  type: TYPE_TB
- en: '| `num ^ num2` | `__xor__` | Bitwise xor |'
  prefs: []
  type: TYPE_TB
- en: '| `num.bit_length()` | `bit_length` | Number of bits necessary |'
  prefs: []
  type: TYPE_TB
- en: Float specific methods and operations
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `f.as_integer_ratio()` | Returns num, denom tuple |'
  prefs: []
  type: TYPE_TB
- en: '| `f.is_integer()` | Boolean if whole number |'
  prefs: []
  type: TYPE_TB
- en: Strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Python 3 strings hold unicode data. Python has a few ways to represent strings.
    There is also a bytes type (PEP 3137):'
  prefs: []
  type: TYPE_NORMAL
- en: String types
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| String | `"hello\tthere"` |'
  prefs: []
  type: TYPE_TB
- en: '| String | `''hello''` |'
  prefs: []
  type: TYPE_TB
- en: '| String | `''''''He said, "hello"''''''` |'
  prefs: []
  type: TYPE_TB
- en: '| Raw string | `r''hello\tthere''` |'
  prefs: []
  type: TYPE_TB
- en: '| Byte string | `b''hello''` |'
  prefs: []
  type: TYPE_TB
- en: Escape Characters
  prefs: []
  type: TYPE_NORMAL
- en: '| Escape Sequence | Output |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `\` newline | Ignore trailing newline in triple quoted string |'
  prefs: []
  type: TYPE_TB
- en: '| `\\` | Backslash |'
  prefs: []
  type: TYPE_TB
- en: '| `\''` | Single quote |'
  prefs: []
  type: TYPE_TB
- en: '| `\"` | Double quote |'
  prefs: []
  type: TYPE_TB
- en: '| `\a` | ASCII Bell |'
  prefs: []
  type: TYPE_TB
- en: '| `\b` | ASCII Backspace |'
  prefs: []
  type: TYPE_TB
- en: '| `\n` | Newline |'
  prefs: []
  type: TYPE_TB
- en: '| `\r` | ASCII carriage return |'
  prefs: []
  type: TYPE_TB
- en: '| `\t` | Tab |'
  prefs: []
  type: TYPE_TB
- en: '| `\u12af` | Unicode 16 bit |'
  prefs: []
  type: TYPE_TB
- en: '| `\U12af89bc` | Unicode 32 bit |'
  prefs: []
  type: TYPE_TB
- en: '| `N{BLACK STAR}` | Unicode name |'
  prefs: []
  type: TYPE_TB
- en: '| `\o84` | Octal character |'
  prefs: []
  type: TYPE_TB
- en: '| `\xFF` | Hex character |'
  prefs: []
  type: TYPE_TB
- en: String operations
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Provided By | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `s + s2` | `__add__` | String concatenation |'
  prefs: []
  type: TYPE_TB
- en: '| `"foo" in s` | `__contains__` | Membership |'
  prefs: []
  type: TYPE_TB
- en: '| `s == s2` | `__eq__` | Equality |'
  prefs: []
  type: TYPE_TB
- en: '| `s >= s2` | `__ge__` | Greater or equal |'
  prefs: []
  type: TYPE_TB
- en: '| `s[0]` | `__getitem__` | Index operation |'
  prefs: []
  type: TYPE_TB
- en: '| `s > s2` | `__gt__` | Greater |'
  prefs: []
  type: TYPE_TB
- en: '| `s <= s2` | `__le__` | Less than or equal |'
  prefs: []
  type: TYPE_TB
- en: '| `len(s)` | `__len__` | Length |'
  prefs: []
  type: TYPE_TB
- en: '| `s < s2` | `__lt__` | Less than |'
  prefs: []
  type: TYPE_TB
- en: '| `s % (1, ''foo'')` | `__mod__` | Formatting |'
  prefs: []
  type: TYPE_TB
- en: '| `s * 3` | `__mul__` | Repetition |'
  prefs: []
  type: TYPE_TB
- en: '| `s != s2` | `__ne__` | Not equal |'
  prefs: []
  type: TYPE_TB
- en: '| `repr(s)` | `__repr__` | Programmer friendly string |'
  prefs: []
  type: TYPE_TB
- en: '| `s.__sizeof__()` | `__sizeof__` | Bytes for internal representation |'
  prefs: []
  type: TYPE_TB
- en: '| `str(s)` | `__str__` | User friendly string |'
  prefs: []
  type: TYPE_TB
- en: String methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `s.capitalize()` | Capitalizes a string |'
  prefs: []
  type: TYPE_TB
- en: '| `s.casefold()` | Lowercase in a unicode compliant manner |'
  prefs: []
  type: TYPE_TB
- en: '| `s.center(w, [char])` | Center a string in `w` spaces with `char` (default
    `" "`) |'
  prefs: []
  type: TYPE_TB
- en: '| `s.count(sub, [start, [end]])` | Count `sub` in `s` between `start` and `end`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s.encode(encoding, errors= ''strict'')` | Encode a string into bytes |'
  prefs: []
  type: TYPE_TB
- en: '| `s.endswith(sub)` | Check for a suffix |'
  prefs: []
  type: TYPE_TB
- en: '| `s.expandtabs( tabsize=8)` | Replaces tabs with spaces |'
  prefs: []
  type: TYPE_TB
- en: '| `s.find(sub, [start, [end]])` | Find substring or return `-1` |'
  prefs: []
  type: TYPE_TB
- en: '| `s.format(*args, **kw)` | Format string |'
  prefs: []
  type: TYPE_TB
- en: '| `s.format_map( mapping)` | Format strings with a mapping |'
  prefs: []
  type: TYPE_TB
- en: '| `s.index(sub, [start, [end]])` | Find substring or raise `ValueError` |'
  prefs: []
  type: TYPE_TB
- en: '| `s.isalnum()` | Boolean if alphanumeric |'
  prefs: []
  type: TYPE_TB
- en: '| `s.isalpha()` | Boolean if alphabetic |'
  prefs: []
  type: TYPE_TB
- en: '| `s.isdecimal()` | Boolean if decimal |'
  prefs: []
  type: TYPE_TB
- en: '| `s.isdigit()` | Boolean if digit |'
  prefs: []
  type: TYPE_TB
- en: '| `s.isidentifier()` | Boolean if valid identifier |'
  prefs: []
  type: TYPE_TB
- en: '| `s.islower()` | Boolean if lowercase |'
  prefs: []
  type: TYPE_TB
- en: '| `s.isnumeric()` | Boolean if numeric |'
  prefs: []
  type: TYPE_TB
- en: '| `s.isprintable()` | Boolean if printable |'
  prefs: []
  type: TYPE_TB
- en: '| `s.isspace()` | Boolean if whitespace |'
  prefs: []
  type: TYPE_TB
- en: '| `s.istitle()` | Boolean if titlecased |'
  prefs: []
  type: TYPE_TB
- en: '| `s.isupper()` | Boolean if uppercased |'
  prefs: []
  type: TYPE_TB
- en: '| `s.join(iterable)` | Return a string inserted between sequence |'
  prefs: []
  type: TYPE_TB
- en: '| `s.ljust(w, [char])` | Left justify in `w` spaces with `char` (default `''
    ''`) |'
  prefs: []
  type: TYPE_TB
- en: '| `s.lower()` | Lowercase |'
  prefs: []
  type: TYPE_TB
- en: '| `s.lstrip([chars])` | Left strip `chars` (default spacing). |'
  prefs: []
  type: TYPE_TB
- en: '| `s.partition(sub)` | Split string at first occurrence of substring, return
    `(before, sub, after)` |'
  prefs: []
  type: TYPE_TB
- en: '| `s.replace(old, new, [count])` | Replace substring with new string |'
  prefs: []
  type: TYPE_TB
- en: '| `s.rfind(sub, [start, [end]])` | Find rightmost substring or return `-1`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s.rindex(sub, [start, [end]])` | Find rightmost substring or raise `ValueError`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s.rjust(w, [char)` | Right justify in w spaces with char (default `" "`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s.rpartition(sub)` | Rightmost partition |'
  prefs: []
  type: TYPE_TB
- en: '| `s.rsplit([sep, [maxsplit=-1])` | Rightmost split by `sep` (defaults to whitespace)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s.rstrip([chars])` | Right strip |'
  prefs: []
  type: TYPE_TB
- en: '| `s.split([sep, [maxsplit=-1]])` | Split a string into sequence around substring
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s.splitlines( keepends=False)` | Break string at line boundaries |'
  prefs: []
  type: TYPE_TB
- en: '| `s.startswith( prefix, [start, [end]])` | Check for prefix |'
  prefs: []
  type: TYPE_TB
- en: '| `s.strip([chars])` | Remove leading and trailing whitespace (default) or
    `chars` |'
  prefs: []
  type: TYPE_TB
- en: '| `s.swapcase()` | Swap casing of string |'
  prefs: []
  type: TYPE_TB
- en: '| `s.title()` | Titlecase string |'
  prefs: []
  type: TYPE_TB
- en: '| `s.translate(table)` | Use a translation table to replace strings |'
  prefs: []
  type: TYPE_TB
- en: '| `s.upper()` | Uppercase |'
  prefs: []
  type: TYPE_TB
- en: '| `s.zfill(width)` | Left fill with `0` so string fills `width` (no truncation)
    |'
  prefs: []
  type: TYPE_TB
- en: Lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Lists are ordered mutable sequences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `in` operator is useful for checking membership on sequences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If we need the index number during iteration, the `enumerate` function gives
    us a tuple of index, item pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can do index operations on most sequences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also do *slicing* operations on most sequences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: List Operations
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Provided By | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `l + l2` | `__add__` | List concatenation (see `.extend`) |'
  prefs: []
  type: TYPE_TB
- en: '| `"name" in l` | `__contains__` | Membership |'
  prefs: []
  type: TYPE_TB
- en: '| `del l[idx]` | `__del__` | Remove item at index `idx` (see `.pop`) |'
  prefs: []
  type: TYPE_TB
- en: '| `l == l2` | `__eq__` | Equality |'
  prefs: []
  type: TYPE_TB
- en: '| `"{}".format(l)` | `__format__` | String format of list |'
  prefs: []
  type: TYPE_TB
- en: '| `l >= l2` | `__ge__` | Greater or equal. Compares items in lists from left
    |'
  prefs: []
  type: TYPE_TB
- en: '| `l[idx]` | `__getitem__` | Index operation |'
  prefs: []
  type: TYPE_TB
- en: '| `l > l2` | `__gt__` | Greater. Compares items in lists from left |'
  prefs: []
  type: TYPE_TB
- en: '| No hash | `__hash__` | Set to `None` to ensure you can''t insert in dictionary
    |'
  prefs: []
  type: TYPE_TB
- en: '| `l += l2` | `__iadd__` | Augmented (mutates `l`) concatenation |'
  prefs: []
  type: TYPE_TB
- en: '| `l *= 3` | `__imul__` | Augmented (mutates `l`) repetition |'
  prefs: []
  type: TYPE_TB
- en: '| `for thing in l:` | `__iter__` | Iteration |'
  prefs: []
  type: TYPE_TB
- en: '| `l <= l2` | `__le__` | Less than or equal. Compares items in lists from left
    |'
  prefs: []
  type: TYPE_TB
- en: '| `len(l)` | `__len__` | Length |'
  prefs: []
  type: TYPE_TB
- en: '| `l < l2` | `__lt__` | Less than. Compares items in lists from left |'
  prefs: []
  type: TYPE_TB
- en: '| `l * 2` | `__mul__` | Repetition |'
  prefs: []
  type: TYPE_TB
- en: '| `l != l2` | `__ne__` | Not equal |'
  prefs: []
  type: TYPE_TB
- en: '| `repr(l)` | `__repr__` | Programmer friendly string |'
  prefs: []
  type: TYPE_TB
- en: '| `reversed(l)` | `__reversed__` | Reverse |'
  prefs: []
  type: TYPE_TB
- en: '| `foo * l` | `__rmul__` | Called if `foo` doesn''t implement `__mul__` |'
  prefs: []
  type: TYPE_TB
- en: '| `l[idx] = ''bar''` | `__setitem__` | Index operation to set value |'
  prefs: []
  type: TYPE_TB
- en: '| `l.__sizeof__()` | `__sizeof__` | Bytes for internal representation |'
  prefs: []
  type: TYPE_TB
- en: '| `str(l)` | `__str__` | User friendly string |'
  prefs: []
  type: TYPE_TB
- en: List Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `l.append(item)` | Append `item` to end |'
  prefs: []
  type: TYPE_TB
- en: '| `l.clear()` | Empty list (mutates `l`) |'
  prefs: []
  type: TYPE_TB
- en: '| `l.copy()` | Shallow copy |'
  prefs: []
  type: TYPE_TB
- en: '| `l.count(thing)` | Number of occurrences of `thing` |'
  prefs: []
  type: TYPE_TB
- en: '| `l.extend(l2)` | List concatenation (mutates `l`) |'
  prefs: []
  type: TYPE_TB
- en: '| `l.index(thing)` | Index of `thing` else `ValueError` |'
  prefs: []
  type: TYPE_TB
- en: '| `l.insert(idx, bar)` | Insert `bar` at index `idx` |'
  prefs: []
  type: TYPE_TB
- en: '| `l.pop([idx])` | Remove last item or item at `idx` |'
  prefs: []
  type: TYPE_TB
- en: '| `l.remove(bar)` | Remove first instance of `bar` else `ValueError` |'
  prefs: []
  type: TYPE_TB
- en: '| `l.reverse()` | Reverse (mutates `l`) |'
  prefs: []
  type: TYPE_TB
- en: '| `l.sort([key=], reverse=False)` | In-place sort, by optional `key` function
    (mutates `l`) |'
  prefs: []
  type: TYPE_TB
- en: Dictionaries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Dictionaries are mutable mappings of keys to values. Keys must be hashable,
    but values can be any object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Magic Dictionary Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Provided By | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `key in d` | `__contains__` | Membership |'
  prefs: []
  type: TYPE_TB
- en: '| `del d[key]` | `__delitem__` | Delete key |'
  prefs: []
  type: TYPE_TB
- en: '| `d == d2` | `__eq__` | Equality. Dicts are equal or not equal |'
  prefs: []
  type: TYPE_TB
- en: '| `"{}".format(d)` | `__format__` | String format of dict |'
  prefs: []
  type: TYPE_TB
- en: '| `d[key]` | `__getitem__` | Get value for `key` (see `.get`) |'
  prefs: []
  type: TYPE_TB
- en: '| `for key in d:` | `__iter__` | Iteration over keys |'
  prefs: []
  type: TYPE_TB
- en: '| `len(d)` | `__len__` | Length |'
  prefs: []
  type: TYPE_TB
- en: '| `d != d2` | `__ne__` | Not equal |'
  prefs: []
  type: TYPE_TB
- en: '| `repr(d)` | `__repr__` | Programmer friendly string |'
  prefs: []
  type: TYPE_TB
- en: '| `d[key] = value` | `__setitem__` | Set `value` for `key` |'
  prefs: []
  type: TYPE_TB
- en: '| `d.__sizeof__()` | `__sizeof__` | Bytes for internal representation |'
  prefs: []
  type: TYPE_TB
- en: Dictionary Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `d.clear()` | Remove all items (mutates `d`) |'
  prefs: []
  type: TYPE_TB
- en: '| `d.copy()` | Shallow copy |'
  prefs: []
  type: TYPE_TB
- en: '| `d.fromkeys(iter, value=None)` | Create dict from iterable with values set
    to value |'
  prefs: []
  type: TYPE_TB
- en: '| `d.get(key, [default])` | Get value for `key` or return default (`None`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `d.items()` | View of (key, value) pairs |'
  prefs: []
  type: TYPE_TB
- en: '| `d.keys()` | View of keys |'
  prefs: []
  type: TYPE_TB
- en: '| `d.pop(key, [default])` | Return value for key or default (`KeyError` if
    not set) |'
  prefs: []
  type: TYPE_TB
- en: '| `d.popitem()` | Return arbitrary (key, value) tuple. `KeyError` if empty
    |'
  prefs: []
  type: TYPE_TB
- en: '| `d.setdefault(k, [default])` | Does `d.get(k, default)`. If `k` missing,
    sets to default |'
  prefs: []
  type: TYPE_TB
- en: '| `d.update(d2)` | Mutate `d` with values of `d2` (dictionary or iterable of
    (key, value) pairs) |'
  prefs: []
  type: TYPE_TB
- en: '| `d.values()` | View of values |'
  prefs: []
  type: TYPE_TB
- en: Tuples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Tuples are immutable sequences. Typically they are used to store *record* type
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that parentheses aren''t usually required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Named tuples can be used in place of normal tuples and allow context (or names)
    to be added to positional members. The syntax for creating them is a little different
    because we are dynamically creating a class first (hence the capitalized variable):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We can access members by position or name (name allows us to be more explicit):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tuple Operations
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Provided | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `t + t2` | `__add__` | Tuple concatenation |'
  prefs: []
  type: TYPE_TB
- en: '| `"name" in t` | `__contains__` | Membership |'
  prefs: []
  type: TYPE_TB
- en: '| `t == t2` | `__eq__` | Equality |'
  prefs: []
  type: TYPE_TB
- en: '| `"{}".format(t)` | `__format__` | String format of tuple |'
  prefs: []
  type: TYPE_TB
- en: '| `t >= t2` | `__ge__` | Greater or equal. Compares items in tuple from left
    |'
  prefs: []
  type: TYPE_TB
- en: '| `t[idx]` | `__getitem__` | Index operation |'
  prefs: []
  type: TYPE_TB
- en: '| `t > t2` | `__gt__` | Greater. Compares items in tuple from left |'
  prefs: []
  type: TYPE_TB
- en: '| `hash(t)` | `__hash__` | For set/dict insertion |'
  prefs: []
  type: TYPE_TB
- en: '| `for thing in t:` | `__iter__` | Iteration |'
  prefs: []
  type: TYPE_TB
- en: '| `t <= t2` | `__le__` | Less than or equal. Compares items in tuple from left
    |'
  prefs: []
  type: TYPE_TB
- en: '| `len(t)` | `__len__` | Length |'
  prefs: []
  type: TYPE_TB
- en: '| `t < t2` | `__lt__` | Less than. Compares items in tuple from left |'
  prefs: []
  type: TYPE_TB
- en: '| `t * 2` | `__mul__` | Repetition |'
  prefs: []
  type: TYPE_TB
- en: '| `t != t2` | `__ne__` | Not equal |'
  prefs: []
  type: TYPE_TB
- en: '| `repr(t)` | `__repr__` | Programmer friendly string |'
  prefs: []
  type: TYPE_TB
- en: '| `foo * t` | `__rmul__` | Called if `foo` doesn''t implement `__mul__` |'
  prefs: []
  type: TYPE_TB
- en: '| `t.__sizeof__()` | `__sizeof__` | Bytes for internal representation |'
  prefs: []
  type: TYPE_TB
- en: '| `str(l)` | `__str__` | User friendly string |'
  prefs: []
  type: TYPE_TB
- en: Tuple Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `t.count(item)` | Count of item |'
  prefs: []
  type: TYPE_TB
- en: '| `t.index(thing)` | Index of `thing` else `ValueError` |'
  prefs: []
  type: TYPE_TB
- en: Sets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A set is a mutable unordered collection that cannot contain duplicates. Sets
    are used to remove duplicates and test for membership:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Sets are useful because they provide *set operations*, such as union (`|`),
    intersection (`&`), difference (`-`), and xor (`^`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no literal syntax for an empty set. You need to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Set Operations
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Provided By | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `s & s2` | `__and__` | Set intersection (see `.intersection`) |'
  prefs: []
  type: TYPE_TB
- en: '| `"name" in s` | `__contains__` | Membership |'
  prefs: []
  type: TYPE_TB
- en: '| `s == s2` | `__eq__` | Equality. Sets are equal or not equal |'
  prefs: []
  type: TYPE_TB
- en: '| `"{}".format(s)` | `__format__` | String format of set |'
  prefs: []
  type: TYPE_TB
- en: '| `s >= s2` | `__ge__` | `s` in `s2` (see `.issuperset`) |'
  prefs: []
  type: TYPE_TB
- en: '| `s > s2` | `__gt__` | Strict superset (`s >= s2` but `s != s2`). |'
  prefs: []
  type: TYPE_TB
- en: '| No hash | `__hash__` | Set to `None` to ensure you can''t insert in dictionary
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s &= s2` | `__iand__` | Augmented (mutates `s`) intersection (see `.intersection_update`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s &#124;= s2` | `__ior__` | Augmented (mutates `s`) union (see `.update`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s -= s2` | `__isub__` | Augmented (mutates `s`) difference (see `.difference_update`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `for thing in s:` | `__iter__` | Iteration |'
  prefs: []
  type: TYPE_TB
- en: '| `s ^= s2` | `__ixor__` | Augmented (mutates `s`) xor (see `.symmetric_difference_update`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s <= s2` | `__le__` | `s2` in `s` (see `.issubset`) |'
  prefs: []
  type: TYPE_TB
- en: '| `len(s)` | `__len__` | Length |'
  prefs: []
  type: TYPE_TB
- en: '| `s < s2` | `__lt__` | Strict subset (`s <= s2` but `s != s2`). |'
  prefs: []
  type: TYPE_TB
- en: '| `s != s2` | `__ne__` | Not equal |'
  prefs: []
  type: TYPE_TB
- en: '| `s &#124; s2` | `__or__` | Set union (see `.union`) |'
  prefs: []
  type: TYPE_TB
- en: '| `foo & s` | `__rand__` | Called if `foo` doesn''t implement `__and__` |'
  prefs: []
  type: TYPE_TB
- en: '| `repr(s)` | `__repr__` | Programmer friendly string |'
  prefs: []
  type: TYPE_TB
- en: '| `foo &#124; s` | `__ror__` | Called if `foo` doesn''t implement `__or__`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `foo - s` | `__rsub__` | Called if `foo` doesn''t implement `__sub__` |'
  prefs: []
  type: TYPE_TB
- en: '| `foo ^ s` | `__rxor__` | Called if `foo` doesn''t implement `__xor__` |'
  prefs: []
  type: TYPE_TB
- en: '| `s.__sizeof__()` | `__sizeof__` | Bytes for internal representation |'
  prefs: []
  type: TYPE_TB
- en: '| `str(s)` | `__str__` | User friendly string |'
  prefs: []
  type: TYPE_TB
- en: '| `s - s2` | `__sub__` | Set difference (see `.difference`) |'
  prefs: []
  type: TYPE_TB
- en: '| `s ^ s2` | `__xor__` | Set xor (see `.symmetric_difference`) |'
  prefs: []
  type: TYPE_TB
- en: Set Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `s.add(item)` | Add `item` to `s` (mutates `s`) |'
  prefs: []
  type: TYPE_TB
- en: '| `s.clear()` | Remove elements from `s` (mutates `s`) |'
  prefs: []
  type: TYPE_TB
- en: '| `s.copy()` | Shallow copy |'
  prefs: []
  type: TYPE_TB
- en: '| `s.difference(s2)` | Return set with elements from `s` and not `s2` |'
  prefs: []
  type: TYPE_TB
- en: '| `s.difference_update(s2)` | Remove `s2` items from `s` (mutates `s`) |'
  prefs: []
  type: TYPE_TB
- en: '| `s.discard(item)` | Remove `item` from s (mutates `s`). No error on missing
    `item` |'
  prefs: []
  type: TYPE_TB
- en: '| `s.intersection(s2)` | Return set with elements from both sets |'
  prefs: []
  type: TYPE_TB
- en: '| `s.intersection_update(s2)` | Update `s` with members of `s2` (mutates `s`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s.isdisjoint(s2)` | `True` if there is no intersection of these two sets
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s.issubset(s2)` | `True` if all elements of `s` are in `s2` |'
  prefs: []
  type: TYPE_TB
- en: '| `s.issuperset(s2)` | `True` if all elements of `s2` are in `s` |'
  prefs: []
  type: TYPE_TB
- en: '| `s.pop()` | Remove arbitrary item from s (mutates `s`). `KeyError` on missing
    `item` |'
  prefs: []
  type: TYPE_TB
- en: '| `s.remove(item)` | Remove `item` from s (mutates `s`). `KeyError` on missing
    `item` |'
  prefs: []
  type: TYPE_TB
- en: '| `s.symmetric_difference(s2)` | Return set with elements only in one of the
    sets |'
  prefs: []
  type: TYPE_TB
- en: '| `s.symmetric_difference_update(s2)` | Update `s` with elements only in one
    of the sets (mutates `s`) |'
  prefs: []
  type: TYPE_TB
- en: '| `s.union(s2)` | Return all elements of both sets |'
  prefs: []
  type: TYPE_TB
- en: '| `s.update(s2)` | Update `s` with all elements of both sets (mutates `s`)
    |'
  prefs: []
  type: TYPE_TB
- en: Built in Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the default namespace you have access to various callables:'
  prefs: []
  type: TYPE_NORMAL
- en: Built in callables
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `abs(x)` | Absolute value protocol (call `x.__abs__()`) |'
  prefs: []
  type: TYPE_TB
- en: '| `all(seq)` | Boolean check if all items in `seq` are truthy |'
  prefs: []
  type: TYPE_TB
- en: '| `any(seq)` | Boolean check if at least one item in `seq` is truthy |'
  prefs: []
  type: TYPE_TB
- en: '| `ascii(x)` | ASCII representation of object |'
  prefs: []
  type: TYPE_TB
- en: '| `bin(i)` | String containing binary version of number (`int(bin(i), 2)` to
    reverse) |'
  prefs: []
  type: TYPE_TB
- en: '| `bool(x)` | Boolean protocol (call `x.__bool__()`) |'
  prefs: []
  type: TYPE_TB
- en: '| `bytearray(x)` | Create a mutable bytearray from iterable of ints, text string,
    bytes, an integer, or pass nothing for an empty bytearray |'
  prefs: []
  type: TYPE_TB
- en: '| `bytes(x)` | Create an immutable bytes from iterable of ints, text string,
    bytes, an integer, or pass nothing for an empty bytes |'
  prefs: []
  type: TYPE_TB
- en: '| `callable(x)` | Boolean check if you can do `x()` (ie `x.__call__` exists)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `chr(i)` | Convert integer codepoint to Unicode string (`ord(chr(i))` to
    reverse) |'
  prefs: []
  type: TYPE_TB
- en: '| `@classmethod` | Use to decorate a method so you can invoke it on the class
    |'
  prefs: []
  type: TYPE_TB
- en: '| `compile(source, fname, mode)` | Compile `source` to code (`fname` used for
    error, `mode` is `exec`: module, `single`: statement, `eval`: expression). Can
    run `eval(code)` on expression, `exec(code)` on statement |'
  prefs: []
  type: TYPE_TB
- en: '| `complex(i, y)` | Create complex number |'
  prefs: []
  type: TYPE_TB
- en: '| `copyright` | Python copyright string |'
  prefs: []
  type: TYPE_TB
- en: '| `credits` | Python credits string |'
  prefs: []
  type: TYPE_TB
- en: '| `delattr(obj, attr)` | Remove attribute from `obj` (`del obj.attr`) |'
  prefs: []
  type: TYPE_TB
- en: '| `dict([x])` | Create a dictionary from a mapping, iterable of k,v tuples,
    named parameters, or pass nothing for an empty dictionary |'
  prefs: []
  type: TYPE_TB
- en: '| `dir([obj])` | List attributes of `obj`, or names in current namespace if
    no `obj` provided |'
  prefs: []
  type: TYPE_TB
- en: '| `divmod(num, denom)` | Return tuple pair of `num//denom` and `num%denom`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `enumerate(seq, [start])` | Return iterator of index, item tuple pairs. Index
    begins at `start` or `0` (default) |'
  prefs: []
  type: TYPE_TB
- en: '| `eval(source, globals=None, locals=None)` | Run `source` (expression string
    or result of `compile`) with globals and locals |'
  prefs: []
  type: TYPE_TB
- en: '| `exec(source, globals=None, locals=None)` | Run `source` (statement string
    or result of `compile`) with globals and locals |'
  prefs: []
  type: TYPE_TB
- en: '| `exit([code])` | Exit Python interpreter and return code (default 0) |'
  prefs: []
  type: TYPE_TB
- en: '| `filter([function], seq)` | Return iterator of items where `function(item)`
    is truthy (or `item` is truthy if `function` is missing) |'
  prefs: []
  type: TYPE_TB
- en: '| `float(x)` | Convert string or number to float (call `x.__float__()`) |'
  prefs: []
  type: TYPE_TB
- en: '| `format(obj, fmt)` | Format protocol (call `obj.__format__(fmt)`) |'
  prefs: []
  type: TYPE_TB
- en: '| `frozenset([seq])` | Create `frozenset` from `seq` (empty if missing) |'
  prefs: []
  type: TYPE_TB
- en: '| `getattr(obj, attr)` | Get attribute from `obj` (`obj.attr`) |'
  prefs: []
  type: TYPE_TB
- en: '| `globals()` | Return *mutable* dictionary with current global variables |'
  prefs: []
  type: TYPE_TB
- en: '| `hasattr(obj, attr)` | Check if attribute on `obj` (`obj.attr` doesn''t throw
    `AttributeError`) |'
  prefs: []
  type: TYPE_TB
- en: '| `hash(x)` | Hash value protocol for object (call `x.__hash__()`) |'
  prefs: []
  type: TYPE_TB
- en: '| `help([x])` | Start interactive help (if no `x`), or print documentation
    for `x` |'
  prefs: []
  type: TYPE_TB
- en: '| `hex(i)` | String containing hexadecimal version of number (`int(hex(i),
    16)` to reverse) |'
  prefs: []
  type: TYPE_TB
- en: '| `id(x)` | Identity of `x` |'
  prefs: []
  type: TYPE_TB
- en: '| `input([prompt])` | Read string from standard input |'
  prefs: []
  type: TYPE_TB
- en: '| `int(x, [base=10])` | Create integer from number or string |'
  prefs: []
  type: TYPE_TB
- en: '| `isinstance(obj, class_or_tuple)` | Boolean check if `obj` is an instance
    or subclass of `class_or_tuple` |'
  prefs: []
  type: TYPE_TB
- en: '| `issubclass(cls, class_or_tuple)` | Boolean check if `cls` is the class or
    derived from `class_or_tuple` |'
  prefs: []
  type: TYPE_TB
- en: '| `iter(seq)` | Iteration protocol (call `seq.__iter__()`) |'
  prefs: []
  type: TYPE_TB
- en: '| `len(seq)` | Number of items in sequence |'
  prefs: []
  type: TYPE_TB
- en: '| `license()` | Display Python licenses |'
  prefs: []
  type: TYPE_TB
- en: '| `list([seq])` | Convert `seq` to list (empty if missing) |'
  prefs: []
  type: TYPE_TB
- en: '| `locals()` | Return dictionary of local attributes (unlike `globals`, not
    guaranteed to update namespace when mutated) |'
  prefs: []
  type: TYPE_TB
- en: '| `map(function, *seqs)` | Call `function(item)` for item in `seqs` (if single
    sequence) or `function(seqs[0][0], seqs[1][0]...)` |'
  prefs: []
  type: TYPE_TB
- en: '| `max(seq, *, [default], [key])` | Return maximum value from `seq`. `default`
    (value if empty `seq`) and `key` (function to determine magnitude) are keyword
    parameters. |'
  prefs: []
  type: TYPE_TB
- en: '| `memoryview(obj)` | Create `memoryview` from `obj` |'
  prefs: []
  type: TYPE_TB
- en: '| `min(seq, *, [default], [key])` | Return minimum value from `seq`. `default`
    (value if empty `seq`) and `key` (function to determine magnitude) are keyword
    parameters. |'
  prefs: []
  type: TYPE_TB
- en: '| `next(iter, [default])` | Get next item from iteration protocol (call `iter.__next__()`),
    if `default` provide return instead of raising `StopIteration` |'
  prefs: []
  type: TYPE_TB
- en: '| `object` | Root base type |'
  prefs: []
  type: TYPE_TB
- en: '| `oct(i)` | String containing octal version of number (`int(oct(i), 8)` to
    reverse) |'
  prefs: []
  type: TYPE_TB
- en: '| `open(filename, [mode], [encoding], [errors])` | Open a file |'
  prefs: []
  type: TYPE_TB
- en: '| `ord(s)` | Convert Unicode string to integer codepoint (`chr(ord(s))` to
    reverse) |'
  prefs: []
  type: TYPE_TB
- en: '| `pow(num, exp, [z])` | Power protocol (call `num.__pow__(exp, z)`) (`num
    ** exp` or `num ** exp % z`) |'
  prefs: []
  type: TYPE_TB
- en: '| `print(val, [val2 ...], *, sep='' '', end=''\n'', file=sys.stdout)` | Print
    values to `file`. Print protocol (call `val.__str__()`) |'
  prefs: []
  type: TYPE_TB
- en: '| `@property` | Decorator to turn a method into an attribute |'
  prefs: []
  type: TYPE_TB
- en: '| `quit()` | Quit interpreter |'
  prefs: []
  type: TYPE_TB
- en: '| `range([start], stop, [step])` | Return range object that iterates from `start`
    (default `0`) to `stop - 1`, by `step` increments (default `1`) |'
  prefs: []
  type: TYPE_TB
- en: '| `repr(x)` | Representation protocol (call `x.__repr__()`) |'
  prefs: []
  type: TYPE_TB
- en: '| `reversed(seq)` | Reverse iterator |'
  prefs: []
  type: TYPE_TB
- en: '| `round(num, [ndigits=0])` | Round to `ndigits` protocol (call `num.__round__()`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `set([seq])` | Create `set` from `seq` (empty if missing) |'
  prefs: []
  type: TYPE_TB
- en: '| `setattr(obj, attr, val)` | Set attribute on `obj` (`obj.attr = val`) |'
  prefs: []
  type: TYPE_TB
- en: '| `slice([start], stop, [step])` | Create `slice` object |'
  prefs: []
  type: TYPE_TB
- en: '| `sorted(seq, * [key=None], [reverse=False])` | Sorted list in ascending order
    (use `key` function to customize sort property) |'
  prefs: []
  type: TYPE_TB
- en: '| `@staticmethod` | Use to decorate a method so you can invoke it on the class
    or instance |'
  prefs: []
  type: TYPE_TB
- en: '| `str(obj)` | Create string (call `obj.__str__()`) |'
  prefs: []
  type: TYPE_TB
- en: '| `str(bytes, [encoding], [errors])` | Create string from bytes (`errors` defaults
    to `strict`) |'
  prefs: []
  type: TYPE_TB
- en: '| `sum(seq, [start=0])` | Sum values from `seq` (use `start` as initial value)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `super()` | Get access to superclass |'
  prefs: []
  type: TYPE_TB
- en: '| `tuple([seq])` | Convert `seq` to tuple (empty if missing) |'
  prefs: []
  type: TYPE_TB
- en: '| `type(name, bases, dict)` | Create a new type of `name`, with base classes
    `bases`, and attributes `dict` |'
  prefs: []
  type: TYPE_TB
- en: '| `type(obj)` | Return type of `obj` |'
  prefs: []
  type: TYPE_TB
- en: '| `vars([obj])` | Return `obj.__dict__` or `locals()` if missing |'
  prefs: []
  type: TYPE_TB
- en: '| `zip(seq1, [seq2, ...])` | Return iterable of tuples of `(seq1[0], seq2[0])`,
    `(seq1[1], seq2[1])`, ... until shortest sequence |'
  prefs: []
  type: TYPE_TB
- en: Unicode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python 3 represents strings as Unicode. We can *encode* strings to a series
    of bytes such as UTF-8\. If we have bytes, we can *decode* them to a Unicode string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have the unicode glyph, you can use that directly. Alternatively, you
    can enter a code point using `\u` followed by the 16-bit hex value xxxx. For larger
    code points, use `\U` followed by xxxxxxxx. If you have the Unicode name (obtained
    by consulting tables at unicode.org), you can use the `\N` syntax. The following
    are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[![../Images/uniencode.png](../Images/uniencode.png)](../Images/uniencode.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Image illustrating *encoding* a Unicode string to a byte representation. In
    this case, we convert to UTF-8\. There are other byte encodings for this string.
    If we have a UTF-8 byte string, we can *decode* it into a Unicode string. Note
    that we should be explicit about the decoding as there are potentially other encodings
    that we could decode to that might give the user erroneous data, or *mojibake*.
  prefs: []
  type: TYPE_NORMAL
- en: String Formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most modern Python code uses the `.format` method (PEP 3101) to create strings
    from other parts. The format method uses `{}` as a placeholder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of the placeholder we can provide different specifiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{0}` - reference first positional argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{}` - reference implicit positional argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{result}` - reference keyword argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{bike.tire}` - reference attribute of argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{names[0]}` - reference first element of argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use *f-strings* in Python 3.6 (see PEP 498):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: F-strings inspect variables that are available and allow you to inline methods,
    or attributes from those variables.
  prefs: []
  type: TYPE_NORMAL
- en: Conversion Flags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can provide a *conversion flag* inside the placeholder.
  prefs: []
  type: TYPE_NORMAL
- en: '`!s` - Call `str()` on argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`!r` - Call `repr()` on argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`!a` - Call `ascii()` on argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Format Specification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can provide a format specification following a colon. The grammar for format
    specification is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The following table lists the field meanings.
  prefs: []
  type: TYPE_NORMAL
- en: '| Field | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| fill | Fills in space with `align` |'
  prefs: []
  type: TYPE_TB
- en: '| align | `<`-left align, `>`-right align, `^`-center align, `=`-put padding
    after sign |'
  prefs: []
  type: TYPE_TB
- en: '| sign | `+`-for all number, `-`-only negative, *space*-leading space for positive,
    sign on negative |'
  prefs: []
  type: TYPE_TB
- en: '| # | Prefix integers. `Ob`-binary, `0o`-octal, `0x`-hex |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | Enable zero padding |'
  prefs: []
  type: TYPE_TB
- en: '| width | Minimum field width |'
  prefs: []
  type: TYPE_TB
- en: '| grouping_option | `,`-Use comma for thousands separator, `_`-Use underscore
    for thousands separator |'
  prefs: []
  type: TYPE_TB
- en: '| .precision | Digits after period (floats). Max string length (non-numerics)
    |'
  prefs: []
  type: TYPE_TB
- en: '| type | `s`-string format (default) see Integer and Float charts |'
  prefs: []
  type: TYPE_TB
- en: The tables below lists the various options we have for formatting integer and
    floating point numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '| Integer Types | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `b` | binary |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | character - convert to unicode character |'
  prefs: []
  type: TYPE_TB
- en: '| `d` | decimal (default) |'
  prefs: []
  type: TYPE_TB
- en: '| `n` | decimal with locale specific separators |'
  prefs: []
  type: TYPE_TB
- en: '| `o` | octal |'
  prefs: []
  type: TYPE_TB
- en: '| `x` | hex (lower-case) |'
  prefs: []
  type: TYPE_TB
- en: '| `X` | hex (upper-case) |'
  prefs: []
  type: TYPE_TB
- en: '| Float Types | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `e`/`E` | Exponent. Lower/upper-case e |'
  prefs: []
  type: TYPE_TB
- en: '| `f` | Fixed point |'
  prefs: []
  type: TYPE_TB
- en: '| `g`/`G` | General. Fixed with exponent for large, and small numbers (`g`
    default) |'
  prefs: []
  type: TYPE_TB
- en: '| `n` | `g` with locale specific separators |'
  prefs: []
  type: TYPE_TB
- en: '| `%` | Percentage (multiplies by 100) |'
  prefs: []
  type: TYPE_TB
- en: Some `format` Examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few examples of using `.format`. Let’s format a string in the center
    of 12 characters surrounded by `*`. `*` is the *fill* character, `^` is the *align*
    field, and `12` is the *width* field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we format a percentage using a width of 10, one decimal place and the
    sign before the width padding. `=` is the *align* field, `10.1` are the *width*
    and *precision* fields, and `%` is the *float type*, which converts the number
    to a percentage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Below is a binary and a hex conversion. The *integer type* field is set to
    `b` and `x` respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `open` function will take a file path and mode as input and return a file
    handle. There are various modes to open a file, depending on the content and your
    needs. If you open the file in binary mode, you will get bytes out. In text mode
    you will get strings back:'
  prefs: []
  type: TYPE_NORMAL
- en: File Modes
  prefs: []
  type: TYPE_NORMAL
- en: '| Mode | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `''r''` | Read text file (default) |'
  prefs: []
  type: TYPE_TB
- en: '| `''w''` | Write text file (truncates if exists) |'
  prefs: []
  type: TYPE_TB
- en: '| `''x''` | Write text file, throw `FileExistsError` if exists. |'
  prefs: []
  type: TYPE_TB
- en: '| `''a''` | Append to text file (write to end) |'
  prefs: []
  type: TYPE_TB
- en: '| `''rb''` | Read binary file |'
  prefs: []
  type: TYPE_TB
- en: '| `''wb''` | Write binary (truncate) |'
  prefs: []
  type: TYPE_TB
- en: '| `''w+b''` | Open binary file for reading and writing |'
  prefs: []
  type: TYPE_TB
- en: '| `''xb''` | Write binary file, throw `FileExistsError` if exists. |'
  prefs: []
  type: TYPE_TB
- en: '| `''ab''` | Append to binary file (write to end) |'
  prefs: []
  type: TYPE_TB
- en: Writing Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use a context manager with a file to ensure that the file is closed when
    the context block exits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Reading Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With an opened text file, you can iterate over the lines. This saves memory
    as the lines are read in as needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: File Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `f.__iter__()` | Support iteration |'
  prefs: []
  type: TYPE_TB
- en: '| `f.__next__()` | Return next item of iteration (line in text) |'
  prefs: []
  type: TYPE_TB
- en: '| `f.__repr__()` | Implementation for `repr(f)` |'
  prefs: []
  type: TYPE_TB
- en: '| `f.buffer` | File buffer |'
  prefs: []
  type: TYPE_TB
- en: '| `f.close()` | Close file |'
  prefs: []
  type: TYPE_TB
- en: '| `f.closed` | Is closed |'
  prefs: []
  type: TYPE_TB
- en: '| `f.detach()` | Detach file buffer from file |'
  prefs: []
  type: TYPE_TB
- en: '| `f.encoding` | The encoding of the file (default is `locale.getpreferredencoding()`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `f.errors` | Error mode of encoding (`''strict''` default) |'
  prefs: []
  type: TYPE_TB
- en: '| `f.fileno()` | Return file descriptor |'
  prefs: []
  type: TYPE_TB
- en: '| `f.flush()` | Write file buffer |'
  prefs: []
  type: TYPE_TB
- en: '| `f.isatty()` | Is interactive file |'
  prefs: []
  type: TYPE_TB
- en: '| `f.linebuffering` | Buffered by lines |'
  prefs: []
  type: TYPE_TB
- en: '| `f.name` | Name of file |'
  prefs: []
  type: TYPE_TB
- en: '| `f.newlines` | End of line characters encountered (tuple or string) |'
  prefs: []
  type: TYPE_TB
- en: '| `f.read( size=-1)` | Read `size` characters (`-1` is whole file) |'
  prefs: []
  type: TYPE_TB
- en: '| `f.readable()` | Is opened for reading |'
  prefs: []
  type: TYPE_TB
- en: '| `f.readline( size=-1)` | Read `size` characters from line (`-1` is whole
    line) |'
  prefs: []
  type: TYPE_TB
- en: '| `f.readlines( hint=-1)` | Read bytes less than `hint` characters of lines
    from file (`-1` is all file) |'
  prefs: []
  type: TYPE_TB
- en: '| `f.seek(cookie, whence=0)` | Change stream location to `cookie` bytes (may
    be negative) offset from `whence` (`0` - start, `1` - current position, `2` -
    end). |'
  prefs: []
  type: TYPE_TB
- en: '| `f.seekable()` | File supports random access |'
  prefs: []
  type: TYPE_TB
- en: '| `f.tell()` | Current stream location |'
  prefs: []
  type: TYPE_TB
- en: '| `f.truncate( pos=None)` | Truncate file to `pos` bytes |'
  prefs: []
  type: TYPE_TB
- en: '| `f.writeable()` | File supports writing |'
  prefs: []
  type: TYPE_TB
- en: '| `f.write(text)` | Write `text` to file |'
  prefs: []
  type: TYPE_TB
- en: '| `f.writelines( lines)` | Write `lines` to file (provide newlines if you want
    them) |'
  prefs: []
  type: TYPE_TB
- en: Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Defining functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Functions may take input, do some processing, and return output. You can provide
    a docstring directly following the name and parameters of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We use whitespace to specify a block in Python. We typically indent following
    a colon. PEP 8 recommends using 4 spaces. Don't mix tabs and spaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create anonymous functions using the `lambda` statement. Because they
    only allow an expression following the colon, it is somewhat crippled in functionality.
    They are commonly used as a `key` argument to `sorted`, `min`, or `max`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Functions can have *default* arguments. Be careful with mutable types here,
    as the default is bound to the function when the function is created, not when
    it is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Functions can support variable positional arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Functions can support variable keyword arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'You can indicate the end of positional parameters by using a single `*`. This
    gives you *keyword only* parameters (PEP 3102):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Calling Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also use `*` and `**` to *unpack* sequence and dictionary arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The following two examples are the equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The following two examples are the equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also combine `*` and `**` on invocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Getting Help
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can get help on a function that has a docstring by using `help`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python supports object oriented programming but doesn''t require you to create
    classes. You can use the built-in data structures to great effect. Here''s a class
    for a simple bike. The class attribute, `num_passengers`, is shared for all instances
    of `Bike`. The instance attributes, `size` and `ratio`, are unique to each instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We can call the constructor (`__init__`), by invoking the class name. Note
    that `self` is the instance, but Python passes that around for us automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We can access both class attributes and instance attributes on the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: If an attribute is not found on the instance, Python will then look for it on
    the class, it will look through the parent classes to continue to try and find
    it. If the lookup is unsuccessful, an `AttributeError` is raised.
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To subclass a class, simply place the parent class name in parentheses following
    the class name in the declaration. We can call the `super` function to gain access
    to parent methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the above example, we used a `\` to indicate that the line continued on the
    following line. This is usually required unless there is an implicit line continuation
    with an opening brace that hasn't been closed (`(`, `[`, or `{`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The instance of the subclass can call methods that are defined on its class
    or the parent class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Class Methods and Static Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `classmethod` decorator is used to create methods that you can invoke directly
    on the class. This allows us to create alternate constructors. Note that the implicit
    first argument is the class, commonly named `cls` (as `class` is a keyword and
    will error out):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the above example, we had an implicit line continuation without a backslash,
    because there was a `(` on the line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `staticmethod` decorator lets you attach functions to a class. (I don''t
    like them, just use a function). Note that they don''t get an implicit first argument.
    It can be called on the instance or the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to have actions occur under the covers on attribute access, you
    can use properties to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Rather than calling the `.name()` method, we access the attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Looping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can loop over objects in a sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The `break` statement will pop you out of a loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The `continue` statement skips over the body of the loop and *continues* at
    the next item of iteration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `else` statement to indicate that every item was looped over,
    and a `break` was never encountered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t loop over index values (`range(len(names))`). Use `enumerate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '`while` Loops'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use `while` loops to create loops as well. If it is an infinite loop,
    you can break out of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Iteration Protocol
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make an iterator implement `__iter__` and `__next__`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the iterator in a loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Unrolling the protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Conditionals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python has an `if` statement with zero or more `elif` statements, and an optional
    `else` statement at the end. In Python, the word `elif` is Dutch for *else if*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Python supports the following tests: `>`, `>=`, `<`, `<=`, `==`, and `!=`.
    For boolean operators use `and`, `or`, and `not` (`&`, `|`, and `^` are the bitwise
    operators).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that Python also supports *range comparisons*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Python does not have a switch statement, often dictionaries are used to support
    a similar construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Truthiness
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can define the `__bool__` method to teach your classes how to act in a boolean
    context. If that doesn't exists, Python will use `__len__`, and finally default
    to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists *truthy* and *falsey* values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Truthy | Falsey |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `True` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| Most objects | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `3.2` | `0.0` |'
  prefs: []
  type: TYPE_TB
- en: '| `[1, 2]` | `[]` (empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `{''a'': 1, ''b'': 2}` | `{}` (empty dict) |'
  prefs: []
  type: TYPE_TB
- en: '| `''string''` | `""` (empty string) |'
  prefs: []
  type: TYPE_TB
- en: '| `''False''` |   |'
  prefs: []
  type: TYPE_TB
- en: '| `''0''` |   |'
  prefs: []
  type: TYPE_TB
- en: Short Circuiting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `and` statement will short circuit if it evaluates to false:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, the `or` statement will short circuit when something evaluates to
    true:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Ternary Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Python has its own ternary operator, called a *conditional expression* (see
    PEP 308). These are handy as they can be used in comprehension constructs and
    `lambda` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Note that this has similar behavior to an `if` statement, but it is an expression,
    and not a statement. Python distinguishes these two. An easy way to determine
    between the two, is to remember that an expression follows a `return` statement.
    Anything you can `return` is an expression.
  prefs: []
  type: TYPE_NORMAL
- en: Exceptions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python can catch one or more exceptions (PEP 3110). You can provide a chain
    of different exceptions to catch if you want to react differently. A few hints:'
  prefs: []
  type: TYPE_NORMAL
- en: Try to keep the block of the `try` statement down to the code that throws exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be specific about the exceptions that you catch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to inspect the exception, use `as` to create a variable to point
    to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use a bare `raise` inside of an `except` block, Python's traceback will
    point back to the location of the original exception, rather than where it is
    raised from.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Raising Exceptions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can raise an exception using the `raise` statement (PEP 3109):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Decorators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A decorator (PEP 318) allows us to insert logic before and after a function
    is called. You can define a decorator with a function that takes a function as
    input and returns a function as output. Here is the identity decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'We can decorate a function with it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'A more useful decorator can inject logic before and after calling the original
    function. To do this we create a function inside of the function and return that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Above, we use print functions to illustrate before/after behavior, otherwise
    this is very similar to identity decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a special syntax for applying the decorator. We put `@` before the
    decorator name and place that on a line directly above the function we wish to
    decorate. Using the `@verbose` line before a function declaration is syntactic
    sugar for re-assigning the variable pointing to the function to the result of
    calling the decorator with the function passed into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'This could also be written as, `sub = verbose(sub)`. Note that our decorated
    function will still call our original function, but add in some `print` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Parameterized Decorators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Because we can use closures to create functions, we can use closures to create
    decorators as well. This is very similar to our decorator above, but now we make
    a function that will return a decorator. Based on the inputs to that function,
    we can control (or parameterize) the behavior of the decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'When you decorate with parameterized decorators, the decoration looks differently,
    because we need to invoke the function to create a decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Class Decorators and Metaclasses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python allows you to dynamically create and modify classes. Class decorators
    and metaclasses are two ways to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Class Decorators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can decorate a class definition with a *class decorator* (PEP 3129). It
    is a function that takes a class as input and returns a class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Creating Classes with `type`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use `type` to determine the type of an object, but you can also provide
    the name, parents, and attributes map, and it will return a class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Metaclasses with Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the class definition you can specify a metaclass (PEP 3115), which can be
    a function or a class. Here is an example of a function that can alter the class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Metaclasses with Classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can define a class decorator and use either `__new__` or `__init__`. Typically
    most use `__new__` as it can alter attributes like `__slots__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Generators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Generators (PEP 255) are functions that suspend their state as you iterate
    over the results of them. Each `yield` statement returns the next item of iteration
    and then *freezes* the state of the function. When iteration is resumed, the function
    continues from the point it was frozen. Note, that the result of calling the function
    is a generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'We can simulate iteration by using the iteration protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Coroutines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `asyncio` library (PEP 3153) provides asynchronous I/O in Python 3\. We
    use `async def` to define a *coroutine function* (see PEP 492). The result of
    calling this is a *coroutine object*. Inside a coroutine we can use `var = await
    future` to suspend the coroutine and wait for `future` to return. We can also
    await another coroutine. A coroutine object may be created but isn''t run until
    an event loop is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'To return an object, use an `asyncio.Future`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`await` and `async` are *soft keywords* in Python 3.6\. You will get a warning
    if you use them for variable names. In Python 3.7, they will be reserved keywords.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For backwards compatibility in Python 3.4:'
  prefs: []
  type: TYPE_NORMAL
- en: '`await` can be replaced with `yield from`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`async def` can be replaced with a function decorated with `@asyncio.coroutine`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asynchronous Generators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Python 3.6 adds asynchronous generators (PEP 525). You can use the `yield`
    statement in an `async def` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Comprehensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Comprehension constructs allow us to combine the functional ideas behind map
    and filter into an easy to read, single line of code. When you see code that is
    aggregating into a list (or dict, set, or generator), you can replace it with
    a list comprehension (or dict, set comprehension, or generator expression). Here
    is an example of the code smell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be specified with a list comprehension (PEP 202):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'To construct a list comprehension:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assign the result (`result`) to brackets. The brackets signal to the reader
    of the code that a list will be returned:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place the *for* loop construct inside the brackets. No colons are necessary:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert any operations that filter the accumulation after the for loop:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the accumulated object (`num*num`) at the front directly following the
    left bracket. Insert parentheses around the object if it is a tuple:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set Comprehensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you replace the `[` with `{`, you will get a set comprehension (PEP 274)
    instead of a list comprehension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Dict Comprehensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you replace the `[` with `{`, and separate the key and value with a colon,
    you will get a dictionary comprehension (PEP 274):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In Python 3.6, dictionaries are now ordered by key entry. Hence the ordering
    above.
  prefs: []
  type: TYPE_NORMAL
- en: Generator Expressions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you replace the `[` with `(`, you will get a generator instead of a list.
    This is called a *generator expression* (PEP 289):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Asynchronous Comprehensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Python 3.6 (PEP 530) gives us *asynchronous comprehensions*. You can add `async`
    following what you are collecting to make it asynchronous. If you had the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'You could replace it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Context Managers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you find code where you need to make sure something happens before *and*
    after a block, a context manager (PEP 343) is a convenient way to enforce that.
    Another code smell that indicates you could be using a context manager is a `try`/`finally`
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Context managers can be created with functions or classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were writing a Python module to write TeX, we might do something like
    this to ensure that the environments are closed properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: This code can use a context manager to be a little cleaner.
  prefs: []
  type: TYPE_NORMAL
- en: Function Based Context Managers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a context manager with a function, decorate with `contextlib.contextmanager`,
    and yield where you want to insert your block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Our code looks better now, and there will always be a closing tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Class Based Context Managers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a class based context manager, implement the `__enter__` and `__exit__`
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'The code looks the same as using the function based context manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Context objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some context managers create objects that we can use while inside of the context.
    The `open` context manager returns a file object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: To create an object in a function based context manager, simply `yield` the
    object. In a class based context manager, return the object in the `__enter__`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Type Annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python 3.6 (PEP 483 and 484) allows you to provide types for input and output
    of functions. They can be used to:'
  prefs: []
  type: TYPE_NORMAL
- en: Allow 3rd party libraries such as mypy [[2]](#id4) to run static typing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assist editors with type inference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aid developers in understanding code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| [[2]](#id3) | [http://mypy-lang.org/](http://mypy-lang.org/) |'
  prefs: []
  type: TYPE_TB
- en: 'Types can be expressed as:'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in classes
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Third party classes
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstract Base Classes
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Types found in the `types` module
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: User-defined classes
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A basic example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that Python does not do type checking, you need to use something like
    mypy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify the types of variables with a comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: The `typing` Module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This module allows you to provide hints for:'
  prefs: []
  type: TYPE_NORMAL
- en: Callback functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generic containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Any` type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To designate a class or function to not type check its annotations, use the
    `@typing.no_type_check` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: Type Checking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Python 3.6 provides no support for type checking. You will need to install
    a tool like `mypy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Scripts, Packages, and Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A script is a Python file that you invoke `python` on. Typically there is a
    line near the bottom that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: This test allows you to change the code path when you execute the code versus
    when you import the code. The `__name__` attribute of a module is set to `'__main__'`
    when you execute that module. Otherwise, if you import the module, it will be
    the name of the module (without `.py`).
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modules are files that end in `.py`. According to PEP 8, we lowercase the module
    name and don't put underscores between the words in them. Any module found in
    the `PYTHONPATH` environment variable or the `sys.path` list, can be imported.
  prefs: []
  type: TYPE_NORMAL
- en: Packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A directory that has a file named `__init__.py` in it is a *package*. A package
    can have modules in it as well as sub packages. The package should be found in
    `PYTHONPATH` or `sys.path` to be imported. An example might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: The `__init__.py` module can be empty or can import code from other modules
    in the package to remove nesting in import statements.
  prefs: []
  type: TYPE_NORMAL
- en: Importing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can import a package or a module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Assume there is a `fib` function in `module1`. You have access to everything
    in the namespace of the module you imported. To use this function you will need
    to use the fully qualified name, `packagename.module1.fib`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'If you only want to import the `fib` function, use the `from` variant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also rename imports using `as`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python 3 includes the `venv` module for creating a sandbox for your project
    or a *virtual environment*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an environment on Unix systems, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'To enter or *activate* the environment on Unix, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Your prompt should have the name of the active virtual environment in parentheses.
    To *deactivate* an environment on both platforms, just run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Installing Packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You should now have a `pip` executable, that will install a package from PyPI
    [[3]](#id6) into your virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '| [[3]](#id5) | [https://pypi.python.org/pypi](https://pypi.python.org/pypi)
    |'
  prefs: []
  type: TYPE_TB
- en: 'To uninstall a package run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: If you are having issues installing a package, you might want to look into alternative
    Python distributions such as Anaconda [[4]](#id8) that have prepackaged many harder
    to install packages.
  prefs: []
  type: TYPE_NORMAL
- en: '| [[4]](#id7) | [https://docs.continuum.io/anaconda/](https://docs.continuum.io/anaconda/)
    |'
  prefs: []
  type: TYPE_TB
