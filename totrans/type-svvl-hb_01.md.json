["```\ntypescript`const  <data-lsp lsp=\"const isReady: boolean\">isReady</data-lsp>:  boolean  =  false;const  <data-lsp lsp=\"const age: number\">age</data-lsp>:  number  =  25;const  <data-lsp lsp=\"const fullName: string\">fullName</data-lsp>:  string  =  \"John Doe\";const  <data-lsp lsp=\"const bigNumber: bigint\">bigNumber</data-lsp>:  bigint  =  100n;const  <data-lsp lsp=\"const uniqueSymbol: symbol\">uniqueSymbol</data-lsp>:  symbol  =  <data-lsp lsp=\"var Symbol: SymbolConstructor\n(description?: string | number | undefined) => symbol\">Symbol</data-lsp>(\"unique\");const  <data-lsp lsp=\"const notDefined: undefined\">notDefined</data-lsp>:  undefined  =  <data-lsp lsp=\"var undefined\">undefined</data-lsp>;const  <data-lsp lsp=\"const empty: null\">empty</data-lsp>:  null  =  null;`\n```", "```\ntypescript`const  <data-lsp lsp=\"const isReady: boolean\">isReady</data-lsp>:  boolean  =  false;const  <data-lsp lsp=\"const age: number\">age</data-lsp>:  number  =  25;const  <data-lsp lsp=\"const fullName: string\">fullName</data-lsp>:  string  =  \"John Doe\";const  <data-lsp lsp=\"const bigNumber: bigint\">bigNumber</data-lsp>:  bigint  =  100n;const  <data-lsp lsp=\"const uniqueSymbol: symbol\">uniqueSymbol</data-lsp>:  symbol  =  <data-lsp lsp=\"var Symbol: SymbolConstructor\n(description?: string | number | undefined) => symbol\">Symbol</data-lsp>(\"unique\");const  <data-lsp lsp=\"const notDefined: undefined\">notDefined</data-lsp>:  undefined  =  <data-lsp lsp=\"var undefined\">undefined</data-lsp>;const  <data-lsp lsp=\"const empty: null\">empty</data-lsp>:  null  =  null;`\n```", "```\ntypescript`const  <data-lsp lsp=\"const a: any\">a</data-lsp>:  any  =  100; // \u4ee3\u5165\u3067\u304d\u308b<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: any\">a</data-lsp> *  3); // \u64cd\u4f5c\u3082\u3067\u304d\u308b300const  <data-lsp lsp=\"const x: unknown\">x</data-lsp>:  unknown  =  100; // \u4ee3\u5165\u306f\u3067\u304d\u308b<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-err><data-lsp lsp=\"const x: unknown\">x</data-lsp></data-err> *  3); // \u64cd\u4f5c\u306f\u3067\u304d\u306a\u3044'x' is of type 'unknown'.18046'x' is of type 'unknown'.// \u623b\u308a\u5024\u306e\u306a\u3044\u95a2\u6570function  <data-lsp lsp=\"function doSomething(): void\">doSomething</data-lsp>():  void {}// \u623b\u308a\u5024\u3092\u8fd4\u3059\u3053\u3068\u304c\u3042\u308a\u3048\u306a\u3044\u95a2\u6570function  <data-lsp lsp=\"function throwError(): never\">throwError</data-lsp>():  never {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>();}`\n```", "```\ntypescript`const  <data-lsp lsp=\"const a: any\">a</data-lsp>:  any  =  100; // \u4ee3\u5165\u3067\u304d\u308b<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: any\">a</data-lsp> *  3); // \u64cd\u4f5c\u3082\u3067\u304d\u308b300const  <data-lsp lsp=\"const x: unknown\">x</data-lsp>:  unknown  =  100; // \u4ee3\u5165\u306f\u3067\u304d\u308b<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-err><data-lsp lsp=\"const x: unknown\">x</data-lsp></data-err> *  3); // \u64cd\u4f5c\u306f\u3067\u304d\u306a\u3044'x' is of type 'unknown'.18046'x' is of type 'unknown'.// \u623b\u308a\u5024\u306e\u306a\u3044\u95a2\u6570function <data-lsp lsp=\"function doSomething(): void\">doSomething</data-lsp>():  void {}// \u623b\u308a\u5024\u3092\u8fd4\u3059\u3053\u3068\u304c\u3042\u308a\u3048\u306a\u3044\u95a2\u6570function <data-lsp lsp=\"function throwError(): never\">throwError</data-lsp>():  never {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>();}`\n```", "```\ntypescript`type  <data-lsp lsp=\"type StringOrNumber = string | number\">StringOrNumber</data-lsp>  =  string  |  number;let <data-lsp lsp=\"let value: StringOrNumber\">value</data-lsp>:  <data-lsp lsp=\"type StringOrNumber = string | number\">StringOrNumber</data-lsp>;<data-lsp lsp=\"let value: StringOrNumber\">value</data-lsp> =  \"hello\"; // string\u578b\u304c\u4ee3\u5165\u53ef\u80fd<data-lsp lsp=\"let value: StringOrNumber\">value</data-lsp> =  123; // number\u578b\u3082\u4ee3\u5165\u53ef\u80fd`\n```", "```\ntypescript`type <data-lsp lsp=\"type StringOrNumber = string | number\">StringOrNumber</data-lsp> =  string  |  number;let <data-lsp lsp=\"let value: StringOrNumber\">value</data-lsp>: <data-lsp lsp=\"type StringOrNumber = string | number\">StringOrNumber</data-lsp>;<data-lsp lsp=\"let value: StringOrNumber\">value</data-lsp> =  \"hello\"; // string\u578b\u304c\u4ee3\u5165\u53ef\u80fd<data-lsp lsp=\"let value: StringOrNumber\">value</data-lsp> =  123; // number\u578b\u3082\u4ee3\u5165\u53ef\u80fd`\n```", "```\ntypescript`type  <data-lsp lsp=\"type Summary = {\n    name: string;\n}\">Summary</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string };type  <data-lsp lsp=\"type Detail = {\n    name: string;\n    age: number;\n}\">Detail</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number };const  <data-lsp lsp=\"const johnDetail: Detail\">johnDetail</data-lsp>:  <data-lsp lsp=\"type Detail = {\n    name: string;\n    age: number;\n}\">Detail</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\", <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  28 };const  <data-lsp lsp=\"const summary: Summary\">summary</data-lsp>:  <data-lsp lsp=\"type Summary = {\n    name: string;\n}\">Summary</data-lsp>  = <data-lsp lsp=\"const johnDetail: Detail\">johnDetail</data-lsp>; // \u4ee3\u5165\u3067\u304d\u308b\u3002\u69cb\u9020\u7684\u90e8\u5206\u578b\u3068\u3057\u3066\u4e92\u63db\u304c\u3042\u308b\u305f\u3081const  <data-lsp lsp=\"const johnSummary: Summary\">johnSummary</data-lsp>:  <data-lsp lsp=\"type Summary = {\n    name: string;\n}\">Summary</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\" };const  <data-err><data-lsp lsp=\"const detail: Detail\">detail</data-lsp></data-err>:  <data-lsp lsp=\"type Detail = {\n    name: string;\n    age: number;\n}\">Detail</data-lsp>  = <data-lsp lsp=\"const johnSummary: Summary\">johnSummary</data-lsp>; // \u4ee3\u5165\u3067\u304d\u306a\u3044\u3002\u69cb\u9020\u7684\u90e8\u5206\u578b\u3068\u3057\u3066\u4e92\u63db\u304c\u306a\u3044\uff08age\u3092\u542b\u307e\u306a\u3044\u305f\u3081\uff09Property 'age' is missing in type 'Summary' but required in type 'Detail'.2741Property 'age' is missing in type 'Summary' but required in type 'Detail'.`\n```", "```\ntypescript`type <data-lsp lsp=\"type Summary = {\n    name: string;\n}\">Summary</data-lsp> = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string };type <data-lsp lsp=\"type Detail = {\n    name: string;\n    age: number;\n}\">Detail</data-lsp> = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number };const  <data-lsp lsp=\"const johnDetail: Detail\">johnDetail</data-lsp>: <data-lsp lsp=\"type Detail = {\n    name: string;\n    age: number;\n}\">Detail</data-lsp> = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\", <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  28 };const  <data-lsp lsp=\"const summary: Summary\">summary</data-lsp>: <data-lsp lsp=\"type Summary = {\n    name: string;\n}\">Summary</data-lsp> = <data-lsp lsp=\"const johnDetail: Detail\">johnDetail</data-lsp>; // \u4ee3\u5165\u3067\u304d\u308b\u3002\u69cb\u9020\u7684\u90e8\u5206\u578b\u3068\u3057\u3066\u4e92\u63db\u304c\u3042\u308b\u305f\u3081const  <data-lsp lsp=\"const johnSummary: Summary\">johnSummary</data-lsp>: <data-lsp lsp=\"type Summary = {\n    name: string;\n}\">Summary</data-lsp> = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\" };const  <data-err><data-lsp lsp=\"const detail: Detail\">detail</data-lsp></data-err>: <data-lsp lsp=\"type Detail = {\n    name: string;\n    age: number;\n}\">Detail</data-lsp> = <data-lsp lsp=\"const johnSummary: Summary\">johnSummary</data-lsp>; // \u4ee3\u5165\u3067\u304d\u306a\u3044\u3002\u69cb\u9020\u7684\u90e8\u5206\u578b\u3068\u3057\u3066\u4e92\u63db\u304c\u306a\u3044\uff08age\u3092\u542b\u307e\u306a\u3044\u305f\u3081\uff09Property 'age' is missing in type 'Summary' but required in type 'Detail'.2741Property 'age' is missing in type 'Summary' but required in type 'Detail'.`\n```", "```\ntypescript`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];`\n```", "```\ntypescript`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];`\n```", "```\ntypescript`let <data-lsp lsp=\"let numbers: number[]\">numbers</data-lsp>:  number[];let <data-lsp lsp=\"let strings: string[]\">strings</data-lsp>:  <data-lsp lsp=\"interface Array<T>\">Array</data-lsp><string>;`\n```", "```\ntypescript`let <data-lsp lsp=\"let numbers: number[]\">numbers</data-lsp>:  number[];let <data-lsp lsp=\"let strings: string[]\">strings</data-lsp>: <data-lsp lsp=\"interface Array<T>\">Array</data-lsp><string>;`\n```", "```\ntypescript`const  <data-lsp lsp=\"const colors: string[]\">colors</data-lsp>  = [\"red\",  \"green\",  \"blue\"];<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const colors: string[]\">colors</data-lsp>[0]);'red'<data-lsp lsp=\"const colors: string[]\">colors</data-lsp>[1] =  \"yellow\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const colors: string[]\">colors</data-lsp>);['red', 'yellow', 'blue']`\n```", "```\ntypescript`const  <data-lsp lsp=\"const colors: string[]\">colors</data-lsp>  = [\"red\",  \"green\",  \"blue\"];<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const colors: string[]\">colors</data-lsp>[0]);'red'<data-lsp lsp=\"const colors: string[]\">colors</data-lsp>[1] =  \"yellow\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const colors: string[]\">colors</data-lsp>);['red', 'yellow', 'blue']`\n```", "```\ntypescript`const  <data-lsp lsp=\"const numbers: readonly number[]\">numbers</data-lsp>:  readonly  number[] = [1,  2,  3];const  <data-lsp lsp=\"const strings: readonly string[]\">strings</data-lsp>:  <data-lsp lsp=\"interface ReadonlyArray<T>\">ReadonlyArray</data-lsp><string> = [\"hello\",  \"world\"];<data-lsp lsp=\"const numbers: readonly number[]\">numbers</data-lsp>[0] =  4; // \u5024\u3092\u5909\u66f4\u3067\u304d\u306a\u3044Index signature in type 'readonly number[]' only permits reading.2542Index signature in type 'readonly number[]' only permits reading.<data-lsp lsp=\"const strings: readonly string[]\">strings</data-lsp>.<data-err><data-lsp lsp=\"any\">push</data-lsp></data-err>(\"!\"); // \u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u306a\u3044Property 'push' does not exist on type 'readonly string[]'.2339Property 'push' does not exist on type 'readonly string[]'.`\n```", "```\ntypescript`const  <data-lsp lsp=\"const numbers: readonly number[]\">numbers</data-lsp>:  readonly  number[] = [1,  2,  3];const  <data-lsp lsp=\"const strings: readonly string[]\">strings</data-lsp>: <data-lsp lsp=\"interface ReadonlyArray<T>\">ReadonlyArray</data-lsp><string> = [\"hello\",  \"world\"];<data-lsp lsp=\"const numbers: readonly number[]\">numbers</data-lsp>[0] =  4; // \u5024\u3092\u5909\u66f4\u3067\u304d\u306a\u3044Index signature in type 'readonly number[]' only permits reading.2542Index signature in type 'readonly number[]' only permits reading.<data-lsp lsp=\"const strings: readonly string[]\">strings</data-lsp>.<data-err><data-lsp lsp=\"any\">push</data-lsp></data-err>(\"!\"); // \u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u306a\u3044Property 'push' does not exist on type 'readonly string[]'.2339Property 'push' does not exist on type 'readonly string[]'.`\n```", "```\ntypescript`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];for (const  <data-lsp lsp=\"const num: number\">num</data-lsp>  of <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const num: number\">num</data-lsp>); // 1, 2, 3\u3068\u51fa\u529b\u3055\u308c\u308b}`\n```", "```\ntypescript`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];for (const  <data-lsp lsp=\"const num: number\">num</data-lsp>  of <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const num: number\">num</data-lsp>); // 1, 2, 3\u3068\u51fa\u529b\u3055\u308c\u308b}`\n```", "```\ntypescript`let <data-lsp lsp=\"let tuple: [string, number]\">tuple</data-lsp>: [string,  number];<data-lsp lsp=\"let tuple: [string, number]\">tuple</data-lsp> = [\"hello\",  10]; // \u4ee3\u5165\u3067\u304d\u308b<data-lsp lsp=\"let tuple: [string, number]\">tuple</data-lsp> = [<data-err>10</data-err>,  <data-err>\"hello\"</data-err>]; // \u9806\u5e8f\u304c\u6b63\u3057\u304f\u306a\u3044\u305f\u3081\u3001\u4ee3\u5165\u3067\u304d\u306a\u3044Type 'number' is not assignable to type 'string'.\nType 'string' is not assignable to type 'number'.2322\n2322Type 'number' is not assignable to type 'string'.\nType 'string' is not assignable to type 'number'.<data-err><data-lsp lsp=\"let tuple: [string, number]\">tuple</data-lsp></data-err> = [\"hello\",  10,  \"world\"]; // \u8981\u7d20\u304c\u591a\u3059\u304e\u308b\u305f\u3081\u4ee3\u5165\u3067\u304d\u306a\u3044Type '[string, number, string]' is not assignable to type '[string, number]'.\n  Source has 3 element(s) but target allows only 2.2322Type '[string, number, string]' is not assignable to type '[string, number]'.\n  Source has 3 element(s) but target allows only 2.`\n```", "```\ntypescript`let <data-lsp lsp=\"let tuple: [string, number]\">tuple</data-lsp>: [string,  number];<data-lsp lsp=\"let tuple: [string, number]\">tuple</data-lsp> = [\"hello\",  10]; // \u4ee3\u5165\u3067\u304d\u308b<data-lsp lsp=\"let tuple: [string, number]\">tuple</data-lsp> = [<data-err>10</data-err>,  <data-err>\"hello\"</data-err>]; // \u9806\u5e8f\u304c\u6b63\u3057\u304f\u306a\u3044\u305f\u3081\u3001\u4ee3\u5165\u3067\u304d\u306a\u3044Type 'number' is not assignable to type 'string'.\nType 'string' is not assignable to type 'number'.2322\n2322Type 'number' is not assignable to type 'string'.\nType 'string' is not assignable to type 'number'.<data-err><data-lsp lsp=\"let tuple: [string, number]\">tuple</data-lsp></data-err> = [\"hello\",  10,  \"world\"]; // \u8981\u7d20\u304c\u591a\u3059\u304e\u308b\u305f\u3081\u4ee3\u5165\u3067\u304d\u306a\u3044Type '[string, number, string]' is not assignable to type '[string, number]'.\n  Source has 3 element(s) but target allows only 2.2322Type '[string, number, string]' is not assignable to type '[string, number]'.\n  Source has 3 element(s) but target allows only 2.`\n```", "```\ntypescript`const  <data-lsp lsp=\"const tuple: [string, number]\">tuple</data-lsp>: [string,  number] = [\"hello\",  10];<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const tuple: [string, number]\">tuple</data-lsp>[0]);'hello'`\n```", "```\ntypescript`const  <data-lsp lsp=\"const tuple: [string, number]\">tuple</data-lsp>: [string,  number] = [\"hello\",  10];<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const tuple: [string, number]\">tuple</data-lsp>[0]);'hello'`\n```", "```\ntypescript`const  <data-lsp lsp=\"const john: {\n    name: string;\n    age: number;\n}\">john</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\", <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  20 };`\n```", "```\ntypescript`const  <data-lsp lsp=\"const john: {\n    name: string;\n    age: number;\n}\">john</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\", <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  20 };`\n```", "```\ntypescript`<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const john: {\n    name: string;\n    age: number;\n}\">john</data-lsp>.<data-lsp lsp=\"(property) name: string\">name</data-lsp>);'John'`\n```", "```\ntypescript`<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const john: {\n    name: string;\n    age: number;\n}\">john</data-lsp>.<data-lsp lsp=\"(property) name: string\">name</data-lsp>);'John'`\n```", "```\ntypescript`let <data-lsp lsp=\"let obj: {\n    name: string;\n    age: number;\n}\">obj</data-lsp>: { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number };`\n```", "```\ntypescript`let <data-lsp lsp=\"let obj: {\n    name: string;\n    age: number;\n}\">obj</data-lsp>: { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number };`\n```", "```\ntypescript`let <data-lsp lsp=\"let obj: {\n    readonly name: string;\n    age: number;\n}\">obj</data-lsp>: { readonly <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number };<data-lsp lsp=\"let obj: {\n    readonly name: string;\n    age: number;\n}\">obj</data-lsp> = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\", <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  20 };<data-lsp lsp=\"let obj: {\n    readonly name: string;\n    age: number;\n}\">obj</data-lsp>.<data-err><data-lsp lsp=\"(property) name: any\">name</data-lsp></data-err> =  \"Tom\";Cannot assign to 'name' because it is a read-only property.2540Cannot assign to 'name' because it is a read-only property.`\n```", "```\ntypescript`let <data-lsp lsp=\"let obj: {\n    readonly name: string;\n    age: number;\n}\">obj</data-lsp>: { readonly <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number };<data-lsp lsp=\"let obj: {\n    readonly name: string;\n    age: number;\n}\">obj</data-lsp> = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\", <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  20 };<data-lsp lsp=\"let obj: {\n    readonly name: string;\n    age: number;\n}\">obj</data-lsp>.<data-err><data-lsp lsp=\"(property) name: any\">name</data-lsp></data-err> =  \"Tom\";Cannot assign to 'name' because it is a read-only property.2540Cannot assign to 'name' because it is a read-only property.`\n```", "```\ntypescript`let <data-lsp lsp=\"let obj: {\n    name: string;\n    age?: number | undefined;\n}\">obj</data-lsp>: { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age?: number | undefined\">age</data-lsp>?:  number };<data-lsp lsp=\"let obj: {\n    name: string;\n    age?: number | undefined;\n}\">obj</data-lsp> = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\" }; // `age`\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u306a\u304f\u3066\u3082\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044`\n```", "```\ntypescript`let <data-lsp lsp=\"let obj: {\n    name: string;\n    age?: number | undefined;\n}\">obj</data-lsp>: { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age?: number | undefined\">age</data-lsp>?:  number };<data-lsp lsp=\"let obj: {\n    name: string;\n    age?: number | undefined;\n}\">obj</data-lsp> = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\" }; // `age`\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u306a\u304f\u3066\u3082\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044`\n```", "```\ntypescript`const  <data-lsp lsp=\"const obj: {\n    a: number;\n    b: number;\n    sum(): number;\n}\">obj</data-lsp>  = { <data-lsp lsp=\"(property) a: number\">a</data-lsp>:  1, <data-lsp lsp=\"(property) b: number\">b</data-lsp>:  2,  <data-lsp lsp=\"(method) sum(): number\">sum</data-lsp>():  number {  return  this.<data-lsp lsp=\"(property) a: number\">a</data-lsp> +  this.<data-lsp lsp=\"(property) b: number\">b</data-lsp>; },};<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const obj: {\n    a: number;\n    b: number;\n    sum(): number;\n}\">obj</data-lsp>.<data-lsp lsp=\"(method) sum(): number\">sum</data-lsp>());3`\n```", "```\ntypescript`const  <data-lsp lsp=\"const obj: {\n    a: number;\n    b: number;\n    sum(): number;\n}\">obj</data-lsp>  = { <data-lsp lsp=\"(property) a: number\">a</data-lsp>:  1, <data-lsp lsp=\"(property) b: number\">b</data-lsp>:  2, <data-lsp lsp=\"(method) sum(): number\">sum</data-lsp>():  number {  return  this.<data-lsp lsp=\"(property) a: number\">a</data-lsp> +  this.<data-lsp lsp=\"(property) b: number\">b</data-lsp>; },};<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const obj: {\n    a: number;\n    b: number;\n    sum(): number;\n}\">obj</data-lsp>.<data-lsp lsp=\"(method) sum(): number\">sum</data-lsp>());3`\n```", "```\ntypescript`let <data-lsp lsp=\"let obj: {\n    [key: string]: number;\n}\">obj</data-lsp>: { [<data-lsp lsp=\"(parameter) key: string\">key</data-lsp>:  string]:  number };<data-lsp lsp=\"let obj: {\n    [key: string]: number;\n}\">obj</data-lsp> = { <data-lsp lsp=\"(property) key1: number\">key1</data-lsp>:  1, <data-lsp lsp=\"(property) key2: number\">key2</data-lsp>:  2 };<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let obj: {\n    [key: string]: number;\n}\">obj</data-lsp>[\"key1\"]);1<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let obj: {\n    [key: string]: number;\n}\">obj</data-lsp>[\"key2\"]);2`\n```", "```\ntypescript`let <data-lsp lsp=\"let obj: {\n    [key: string]: number;\n}\">obj</data-lsp>: { [<data-lsp lsp=\"(parameter) key: string\">key</data-lsp>:  string]:  number };<data-lsp lsp=\"let obj: {\n    [key: string]: number;\n}\">obj</data-lsp> = { <data-lsp lsp=\"(property) key1: number\">key1</data-lsp>:  1, <data-lsp lsp=\"(property) key2: number\">key2</data-lsp>:  2 };<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let obj: {\n    [key: string]: number;\n}\">obj</data-lsp>[\"key1\"]);1<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let obj: {\n    [key: string]: number;\n}\">obj</data-lsp>[\"key2\"]);2`\n```", "```\ntypescript`const  <data-lsp lsp=\"const name: &quot;John&quot;\">name</data-lsp>  =  \"John\";const  <data-lsp lsp=\"const age: 20\">age</data-lsp>  =  20;const  <data-lsp lsp=\"const obj: {\n    name: string;\n    age: number;\n}\">obj</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>, <data-lsp lsp=\"(property) age: number\">age</data-lsp> };<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const obj: {\n    name: string;\n    age: number;\n}\">obj</data-lsp>);{ name: 'John', age: 20 }`\n```", "```\ntypescript`const  <data-lsp lsp=\"const name: &quot;John&quot;\">name</data-lsp>  =  \"John\";const  <data-lsp lsp=\"const age: 20\">age</data-lsp>  =  20;const  <data-lsp lsp=\"const obj: {\n    name: string;\n    age: number;\n}\">obj</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>, <data-lsp lsp=\"(property) age: number\">age</data-lsp> };<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const obj: {\n    name: string;\n    age: number;\n}\">obj</data-lsp>);{ name: 'John', age: 20 }`\n```", "```\ntypescript`function  <data-lsp lsp=\"function printLength(obj: {\n    a?: string;\n}): void\">printLength</data-lsp>(<data-lsp lsp=\"(parameter) obj: {\n    a?: string | undefined;\n}\">obj</data-lsp>: { <data-lsp lsp=\"(property) a?: string | undefined\">a</data-lsp>?:  string }) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(parameter) obj: {\n    a?: string | undefined;\n}\">obj</data-lsp>.<data-lsp lsp=\"(property) a?: string | undefined\">a</data-lsp>?.<data-lsp lsp=\"(property) String.length: number | undefined\">length</data-lsp>);}<data-lsp lsp=\"function printLength(obj: {\n    a?: string;\n}): void\">printLength</data-lsp>({ <data-lsp lsp=\"(property) a?: string | undefined\">a</data-lsp>:  \"hello\" });5<data-lsp lsp=\"function printLength(obj: {\n    a?: string;\n}): void\">printLength</data-lsp>({});undefined`\n```", "```\ntypescript`function <data-lsp lsp=\"function printLength(obj: {\n    a?: string;\n}): void\">printLength</data-lsp>(<data-lsp lsp=\"(parameter) obj: {\n    a?: string | undefined;\n}\">obj</data-lsp>: { <data-lsp lsp=\"(property) a?: string | undefined\">a</data-lsp>?:  string }) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(parameter) obj: {\n    a?: string | undefined;\n}\">obj</data-lsp>.<data-lsp lsp=\"(property) a?: string | undefined\">a</data-lsp>?.<data-lsp lsp=\"(property) String.length: number | undefined\">length</data-lsp>);}<data-lsp lsp=\"function printLength(obj: {\n    a?: string;\n}): void\">printLength</data-lsp>({ <data-lsp lsp=\"(property) a?: string | undefined\">a</data-lsp>:  \"hello\" });5<data-lsp lsp=\"function printLength(obj: {\n    a?: string;\n}): void\">printLength</data-lsp>({});undefined`\n```", "```\ntypescript`const  <data-lsp lsp=\"const map: Map<any, any>\">map</data-lsp>  =  new  <data-lsp lsp=\"var Map: MapConstructor\nnew () => Map<any, any> (+3 overloads)\">Map</data-lsp>();<data-lsp lsp=\"const map: Map<any, any>\">map</data-lsp>.<data-lsp lsp=\"(method) Map<any, any>.set(key: any, value: any): Map<any, any>\">set</data-lsp>(\"name\",  \"John\");<data-lsp lsp=\"const map: Map<any, any>\">map</data-lsp>.<data-lsp lsp=\"(method) Map<any, any>.set(key: any, value: any): Map<any, any>\">set</data-lsp>(\"age\",  \"20\");<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const map: Map<any, any>\">map</data-lsp>.<data-lsp lsp=\"(method) Map<any, any>.get(key: any): any\">get</data-lsp>(\"name\"));'John'`\n```", "```\ntypescript`const  <data-lsp lsp=\"const map: Map<any, any>\">map</data-lsp>  =  new  <data-lsp lsp=\"var Map: MapConstructor\nnew () => Map<any, any> (+3 overloads)\">Map</data-lsp>();<data-lsp lsp=\"const map: Map<any, any>\">map</data-lsp>.<data-lsp lsp=\"(method) Map<any, any>.set(key: any, value: any): Map<any, any>\">set</data-lsp>(\"name\",  \"John\");<data-lsp lsp=\"const map: Map<any, any>\">map</data-lsp>.<data-lsp lsp=\"(method) Map<any, any>.set(key: any, value: any): Map<any, any>\">set</data-lsp>(\"age\",  \"20\");<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const map: Map<any, any>\">map</data-lsp>.<data-lsp lsp=\"(method) Map<any, any>.get(key: any): any\">get</data-lsp>(\"name\"));'John'`\n```", "```\ntypescript`let <data-lsp lsp=\"let people: Map<string, number>\">people</data-lsp>:  <data-lsp lsp=\"interface Map<K, V>\">Map</data-lsp><string,  number>;`\n```", "```\ntypescript`let <data-lsp lsp=\"let people: Map<string, number>\">people</data-lsp>: <data-lsp lsp=\"interface Map<K, V>\">Map</data-lsp><string,  number>;`\n```", "```\ntypescript`for (const [<data-lsp lsp=\"const key: string\">key</data-lsp>,  <data-lsp lsp=\"const value: number\">value</data-lsp>] of <data-lsp lsp=\"const map: Map<string, number>\">map</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const key: string\">key</data-lsp>, <data-lsp lsp=\"const value: number\">value</data-lsp>);}`\n```", "```\ntypescript`for (const [<data-lsp lsp=\"const key: string\">key</data-lsp>,  <data-lsp lsp=\"const value: number\">value</data-lsp>] of <data-lsp lsp=\"const map: Map<string, number>\">map</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const key: string\">key</data-lsp>, <data-lsp lsp=\"const value: number\">value</data-lsp>);}`\n```", "```\ntypescript`const  <data-lsp lsp=\"const set: Set<unknown>\">set</data-lsp>  =  new  <data-lsp lsp=\"var Set: SetConstructor\nnew <unknown>(iterable?: Iterable<unknown> | null | undefined) => Set<unknown> (+1 overload)\">Set</data-lsp>();<data-lsp lsp=\"const set: Set<unknown>\">set</data-lsp>.<data-lsp lsp=\"(method) Set<unknown>.add(value: unknown): Set<unknown>\">add</data-lsp>(1);<data-lsp lsp=\"const set: Set<unknown>\">set</data-lsp>.<data-lsp lsp=\"(method) Set<unknown>.add(value: unknown): Set<unknown>\">add</data-lsp>(2);<data-lsp lsp=\"const set: Set<unknown>\">set</data-lsp>.<data-lsp lsp=\"(method) Set<unknown>.add(value: unknown): Set<unknown>\">add</data-lsp>(2); // \u540c\u3058\u5024\u306f\u8ffd\u52a0\u3055\u308c\u306a\u3044\u3002<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const set: Set<unknown>\">set</data-lsp>);Set {1, 2}`\n```", "```\ntypescript`const  <data-lsp lsp=\"const set: Set<unknown>\">set</data-lsp>  =  new  <data-lsp lsp=\"var Set: SetConstructor\nnew <unknown>(iterable?: Iterable<unknown> | null | undefined) => Set<unknown> (+1 overload)\">Set</data-lsp>();<data-lsp lsp=\"const set: Set<unknown>\">set</data-lsp>.<data-lsp lsp=\"(method) Set<unknown>.add(value: unknown): Set<unknown>\">add</data-lsp>(1);<data-lsp lsp=\"const set: Set<unknown>\">set</data-lsp>.<data-lsp lsp=\"(method) Set<unknown>.add(value: unknown): Set<unknown>\">add</data-lsp>(2);<data-lsp lsp=\"const set: Set<unknown>\">set</data-lsp>.<data-lsp lsp=\"(method) Set<unknown>.add(value: unknown): Set<unknown>\">add</data-lsp>(2); // \u540c\u3058\u5024\u306f\u8ffd\u52a0\u3055\u308c\u306a\u3044\u3002<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const set: Set<unknown>\">set</data-lsp>);Set {1, 2}`\n```", "```\ntypescript`let <data-lsp lsp=\"let numSet: Set<number>\">numSet</data-lsp>:  <data-lsp lsp=\"interface Set<T>\">Set</data-lsp><number>;`\n```", "```\ntypescript`let <data-lsp lsp=\"let numSet: Set<number>\">numSet</data-lsp>: <data-lsp lsp=\"interface Set<T>\">Set</data-lsp><number>;`\n```", "```\ntypescript`for (const  <data-lsp lsp=\"const value: number\">value</data-lsp>  of <data-lsp lsp=\"const set: Set<number>\">set</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const value: number\">value</data-lsp>);}`\n```", "```\ntypescript`for (const  <data-lsp lsp=\"const value: number\">value</data-lsp>  of <data-lsp lsp=\"const set: Set<number>\">set</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const value: number\">value</data-lsp>);}`\n```", "```\ntypescript`enum  <data-lsp lsp=\"enum Color\">Color</data-lsp> { <data-lsp lsp=\"(enum member) Color.Red = 0\">Red</data-lsp>, <data-lsp lsp=\"(enum member) Color.Green = 1\">Green</data-lsp>, <data-lsp lsp=\"(enum member) Color.Blue = 2\">Blue</data-lsp>,}`\n```", "```\ntypescript`enum <data-lsp lsp=\"enum Color\">Color</data-lsp> { <data-lsp lsp=\"(enum member) Color.Red = 0\">Red</data-lsp>, <data-lsp lsp=\"(enum member) Color.Green = 1\">Green</data-lsp>, <data-lsp lsp=\"(enum member) Color.Blue = 2\">Blue</data-lsp>,}`\n```", "```\ntypescript`enum  <data-lsp lsp=\"enum Color\">Color</data-lsp> { <data-lsp lsp=\"(enum member) Color.Red = &quot;red&quot;\">Red</data-lsp> =  \"red\", <data-lsp lsp=\"(enum member) Color.Green = &quot;green&quot;\">Green</data-lsp> =  \"green\", <data-lsp lsp=\"(enum member) Color.Blue = &quot;blue&quot;\">Blue</data-lsp> =  \"blue\",}`\n```", "```\ntypescript`enum <data-lsp lsp=\"enum Color\">Color</data-lsp> { <data-lsp lsp=\"(enum member) Color.Red = &quot;red&quot;\">Red</data-lsp> =  \"red\", <data-lsp lsp=\"(enum member) Color.Green = &quot;green&quot;\">Green</data-lsp> =  \"green\", <data-lsp lsp=\"(enum member) Color.Blue = &quot;blue&quot;\">Blue</data-lsp> =  \"blue\",}`\n```", "```\ntypescript`const  <data-lsp lsp=\"const myColor: Color\">myColor</data-lsp>:  <data-lsp lsp=\"enum Color\">Color</data-lsp>  =  <data-lsp lsp=\"enum Color\">Color</data-lsp>.<data-lsp lsp=\"(enum member) Color.Red = 0\">Red</data-lsp>;`\n```", "```\ntypescript`const  <data-lsp lsp=\"const myColor: Color\">myColor</data-lsp>: <data-lsp lsp=\"enum Color\">Color</data-lsp> =  <data-lsp lsp=\"enum Color\">Color</data-lsp>.<data-lsp lsp=\"(enum member) Color.Red = 0\">Red</data-lsp>;`\n```", "```\ntypescript`let <data-lsp lsp=\"let value: number | boolean\">value</data-lsp>:  boolean  |  number;<data-lsp lsp=\"let value: number | boolean\">value</data-lsp> =  true; // \u4ee3\u5165\u3067\u304d\u308b<data-lsp lsp=\"let value: number | boolean\">value</data-lsp> =  100; // \u4ee3\u5165\u3067\u304d\u308b`\n```", "```\ntypescript`let <data-lsp lsp=\"let value: number | boolean\">value</data-lsp>:  boolean  |  number;<data-lsp lsp=\"let value: number | boolean\">value</data-lsp> =  true; // \u4ee3\u5165\u3067\u304d\u308b<data-lsp lsp=\"let value: number | boolean\">value</data-lsp> =  100; // \u4ee3\u5165\u3067\u304d\u308b`\n```", "```\ntypescript`type  <data-lsp lsp=\"type Triangle = {\n    kind: &quot;triangle&quot;;\n    base: number;\n    height: number;\n}\">Triangle</data-lsp>  = { <data-lsp lsp=\"(property) kind: &quot;triangle&quot;\">kind</data-lsp>:  \"triangle\"; <data-lsp lsp=\"(property) base: number\">base</data-lsp>:  number; <data-lsp lsp=\"(property) height: number\">height</data-lsp>:  number };type  <data-lsp lsp=\"type Rectangle = {\n    kind: &quot;rectangle&quot;;\n    width: number;\n    height: number;\n}\">Rectangle</data-lsp>  = { <data-lsp lsp=\"(property) kind: &quot;rectangle&quot;\">kind</data-lsp>:  \"rectangle\"; <data-lsp lsp=\"(property) width: number\">width</data-lsp>:  number; <data-lsp lsp=\"(property) height: number\">height</data-lsp>:  number };type  <data-lsp lsp=\"type Shape = Triangle | Rectangle\">Shape</data-lsp>  =  <data-lsp lsp=\"type Triangle = {\n    kind: &quot;triangle&quot;;\n    base: number;\n    height: number;\n}\">Triangle</data-lsp>  |  <data-lsp lsp=\"type Rectangle = {\n    kind: &quot;rectangle&quot;;\n    width: number;\n    height: number;\n}\">Rectangle</data-lsp>;function  <data-lsp lsp=\"function getArea(shape: Shape): number\">getArea</data-lsp>(<data-lsp lsp=\"(parameter) shape: Shape\">shape</data-lsp>:  <data-lsp lsp=\"type Shape = Triangle | Rectangle\">Shape</data-lsp>):  number {  // \u5171\u901a\u306e\u30d7\u30ed\u30d1\u30c6\u30a3kind\u3092\u5229\u7528\u3057\u3066\u578b\u3092\u5224\u5b9a\u3059\u308b  switch (<data-lsp lsp=\"(parameter) shape: Shape\">shape</data-lsp>.<data-lsp lsp=\"(property) kind: &quot;triangle&quot; | &quot;rectangle&quot;\">kind</data-lsp>) {  case  \"triangle\":  // \u3053\u306e\u7bc0\u3067\u306fshape\u304cTriangle\u578b\u306b\u7d5e\u308a\u8fbc\u307e\u308c\u308b  return (<data-lsp lsp=\"(parameter) shape: Triangle\">shape</data-lsp>.<data-lsp lsp=\"(property) base: number\">base</data-lsp> *  <data-lsp lsp=\"(parameter) shape: Triangle\">shape</data-lsp>.<data-lsp lsp=\"(property) height: number\">height</data-lsp>) /  2;  case  \"rectangle\":  //  \u3053\u306e\u7bc0\u3067\u306fshape\u304cRectangle\u578b\u306b\u7d5e\u308a\u8fbc\u307e\u308c\u308b  return  <data-lsp lsp=\"(parameter) shape: Rectangle\">shape</data-lsp>.<data-lsp lsp=\"(property) width: number\">width</data-lsp> *  <data-lsp lsp=\"(parameter) shape: Rectangle\">shape</data-lsp>.<data-lsp lsp=\"(property) height: number\">height</data-lsp>; }}`\n```", "```\ntypescript`type <data-lsp lsp=\"type Triangle = {\n    kind: &quot;triangle&quot;;\n    base: number;\n    height: number;\n}\">Triangle</data-lsp> = { <data-lsp lsp=\"(property) kind: &quot;triangle&quot;\">kind</data-lsp>:  \"triangle\"; <data-lsp lsp=\"(property) base: number\">base</data-lsp>:  number; <data-lsp lsp=\"(property) height: number\">height</data-lsp>:  number };type <data-lsp lsp=\"type Rectangle = {\n    kind: &quot;rectangle&quot;;\n    width: number;\n    height: number;\n}\">Rectangle</data-lsp> = { <data-lsp lsp=\"(property) kind: &quot;rectangle&quot;\">kind</data-lsp>:  \"rectangle\"; <data-lsp lsp=\"(property) width: number\">width</data-lsp>:  number; <data-lsp lsp=\"(property) height: number\">height</data-lsp>:  number };type <data-lsp lsp=\"type Shape = Triangle | Rectangle\">Shape</data-lsp> = <data-lsp lsp=\"type Triangle = {\n    kind: &quot;triangle&quot;;\n    base: number;\n    height: number;\n}\">Triangle</data-lsp> | <data-lsp lsp=\"type Rectangle = {\n    kind: &quot;rectangle&quot;;\n    width: number;\n    height: number;\n}\">Rectangle</data-lsp>;function <data-lsp lsp=\"function getArea(shape: Shape): number\">getArea</data-lsp>(<data-lsp lsp=\"(parameter) shape: Shape\">shape</data-lsp>: <data-lsp lsp=\"type Shape = Triangle | Rectangle\">Shape</data-lsp>):  number {  // \u5171\u901a\u306e\u30d7\u30ed\u30d1\u30c6\u30a3kind\u3092\u5229\u7528\u3057\u3066\u578b\u3092\u5224\u5b9a\u3059\u308b  switch (<data-lsp lsp=\"(parameter) shape: Shape\">shape</data-lsp>.<data-lsp lsp=\"(property) kind: &quot;triangle&quot; | &quot;rectangle&quot;\">kind</data-lsp>) {  case  \"triangle\":  // \u3053\u306e\u7bc0\u3067\u306fshape\u304cTriangle\u578b\u306b\u7d5e\u308a\u8fbc\u307e\u308c\u308b  return (<data-lsp lsp=\"(parameter) shape: Triangle\">shape</data-lsp>.<data-lsp lsp=\"(property) base: number\">base</data-lsp> *  <data-lsp lsp=\"(parameter) shape: Triangle\">shape</data-lsp>.<data-lsp lsp=\"(property) height: number\">height</data-lsp>) /  2;  case  \"rectangle\":  //  \u3053\u306e\u7bc0\u3067\u306fshape\u304cRectangle\u578b\u306b\u7d5e\u308a\u8fbc\u307e\u308c\u308b  return  <data-lsp lsp=\"(parameter) shape: Rectangle\">shape</data-lsp>.<data-lsp lsp=\"(property) width: number\">width</data-lsp> *  <data-lsp lsp=\"(parameter) shape: Rectangle\">shape</data-lsp>.<data-lsp lsp=\"(property) height: number\">height</data-lsp>; }}`\n```", "```\ntypescript`type  <data-lsp lsp=\"type Octopus = {\n    swims: boolean;\n}\">Octopus</data-lsp>  = { <data-lsp lsp=\"(property) swims: boolean\">swims</data-lsp>:  boolean };type  <data-lsp lsp=\"type Cat = {\n    nightVision: boolean;\n}\">Cat</data-lsp>  = { <data-lsp lsp=\"(property) nightVision: boolean\">nightVision</data-lsp>:  boolean };type  <data-lsp lsp=\"type Octocat = Octopus &amp; Cat\">Octocat</data-lsp>  =  <data-lsp lsp=\"type Octopus = {\n    swims: boolean;\n}\">Octopus</data-lsp>  &  <data-lsp lsp=\"type Cat = {\n    nightVision: boolean;\n}\">Cat</data-lsp>;const  <data-lsp lsp=\"const octocat: Octocat\">octocat</data-lsp>:  <data-lsp lsp=\"type Octocat = Octopus &amp; Cat\">Octocat</data-lsp>  = { <data-lsp lsp=\"(property) swims: boolean\">swims</data-lsp>:  true, <data-lsp lsp=\"(property) nightVision: boolean\">nightVision</data-lsp>:  true };<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const octocat: Octocat\">octocat</data-lsp>);{ swims: true, nightVision: true }`\n```", "```\ntypescript`type <data-lsp lsp=\"type Octopus = {\n    swims: boolean;\n}\">Octopus</data-lsp> = { <data-lsp lsp=\"(property) swims: boolean\">swims</data-lsp>:  boolean };type <data-lsp lsp=\"type Cat = {\n    nightVision: boolean;\n}\">Cat</data-lsp> = { <data-lsp lsp=\"(property) nightVision: boolean\">nightVision</data-lsp>:  boolean };type <data-lsp lsp=\"type Octocat = Octopus &amp; Cat\">Octocat</data-lsp> = <data-lsp lsp=\"type Octopus = {\n    swims: boolean;\n}\">Octopus</data-lsp> & <data-lsp lsp=\"type Cat = {\n    nightVision: boolean;\n}\">Cat</data-lsp>;const  <data-lsp lsp=\"const octocat: Octocat\">octocat</data-lsp>: <data-lsp lsp=\"type Octocat = Octopus &amp; Cat\">Octocat</data-lsp> = { <data-lsp lsp=\"(property) swims: boolean\">swims</data-lsp>:  true, <data-lsp lsp=\"(property) nightVision: boolean\">nightVision</data-lsp>:  true };<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const octocat: Octocat\">octocat</data-lsp>);{ swims: true, nightVision: true }`\n```", "```\ntypescript`const [<data-lsp lsp=\"const a: number\">a</data-lsp>,  <data-lsp lsp=\"const b: number\">b</data-lsp>] = [1,  2];<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: number\">a</data-lsp>);1<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const b: number\">b</data-lsp>);2`\n```", "```\ntypescript`const [<data-lsp lsp=\"const a: number\">a</data-lsp>,  <data-lsp lsp=\"const b: number\">b</data-lsp>] = [1,  2];<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: number\">a</data-lsp>);1<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const b: number\">b</data-lsp>);2`\n```", "```\ntypescript`const  <data-lsp lsp=\"const obj: {\n    name: string;\n    age: number;\n}\">obj</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\", <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  20,};const { <data-lsp lsp=\"const name: string\">name</data-lsp>,  <data-lsp lsp=\"const age: number\">age</data-lsp> } = <data-lsp lsp=\"const obj: {\n    name: string;\n    age: number;\n}\">obj</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const name: string\">name</data-lsp>);'John'<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const age: number\">age</data-lsp>);20`\n```", "```\ntypescript`const  <data-lsp lsp=\"const obj: {\n    name: string;\n    age: number;\n}\">obj</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"John\", <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  20,};const { <data-lsp lsp=\"const name: string\">name</data-lsp>,  <data-lsp lsp=\"const age: number\">age</data-lsp> } = <data-lsp lsp=\"const obj: {\n    name: string;\n    age: number;\n}\">obj</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const name: string\">name</data-lsp>);'John'<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const age: number\">age</data-lsp>);20`\n```", "```\ntypescript`const  <data-lsp lsp=\"const age: number\">age</data-lsp>:  number  =  20;if (<data-lsp lsp=\"const age: number\">age</data-lsp> >=  20) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"You are an adult.\");} else {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"You are a minor.\");}'You are an adult.'`\n```", "```\ntypescript`const  <data-lsp lsp=\"const age: number\">age</data-lsp>:  number  =  20;if (<data-lsp lsp=\"const age: number\">age</data-lsp> >=  20) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"You are an adult.\");} else {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"You are a minor.\");}'You are an adult.'`\n```", "```\ntypescript`const  <data-lsp lsp=\"const color: string\">color</data-lsp>:  string  =  \"blue\";switch (<data-lsp lsp=\"const color: string\">color</data-lsp>) {  case  \"red\":  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Color is red.\");  break;  case  \"blue\":  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Color is blue.\");  break;  default:  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Color is neither red nor blue.\");}'Color is blue.'`\n```", "```\ntypescript`const  <data-lsp lsp=\"const color: string\">color</data-lsp>:  string  =  \"blue\";switch (<data-lsp lsp=\"const color: string\">color</data-lsp>) {  case  \"red\":  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Color is red.\");  break;  case  \"blue\":  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Color is blue.\");  break;  default:  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Color is neither red nor blue.\");}'Color is blue.'`\n```", "```\ntypescript`let <data-lsp lsp=\"let value: string | number\">value</data-lsp>:  string  |  number;// 50%\u306e\u78ba\u7387\u3067string\u578b\u307e\u305f\u306fnumber\u578b\u306e\u5024\u3092\u4ee3\u5165\u3059\u308b<data-lsp lsp=\"let value: string | number\">value</data-lsp> =  <data-lsp lsp=\"var Math: Math\">Math</data-lsp>.<data-lsp lsp=\"(method) Math.random(): number\">random</data-lsp>() <  0.5  ?  \"Hello\"  :  100;if (typeof <data-lsp lsp=\"let value: string | number\">value</data-lsp> ===  \"string\") {  // \u3053\u306e\u7bc0\u3067\u306fvalue\u306fstring\u578b\u3068\u3057\u3066\u6271\u308f\u308c\u308b  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let value: string\">value</data-lsp>.<data-lsp lsp=\"(method) String.toUpperCase(): string\">toUpperCase</data-lsp>());} else {  // \u3053\u306e\u7bc0\u3067\u306fvalue\u306fnumber\u578b\u3068\u3057\u3066\u6271\u308f\u308c\u308b  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let value: number\">value</data-lsp> *  3);}`\n```", "```\ntypescript`let <data-lsp lsp=\"let value: string | number\">value</data-lsp>:  string  |  number;// 50%\u306e\u78ba\u7387\u3067string\u578b\u307e\u305f\u306fnumber\u578b\u306e\u5024\u3092\u4ee3\u5165\u3059\u308b<data-lsp lsp=\"let value: string | number\">value</data-lsp> =  <data-lsp lsp=\"var Math: Math\">Math</data-lsp>.<data-lsp lsp=\"(method) Math.random(): number\">random</data-lsp>() <  0.5  ?  \"Hello\"  :  100;if (typeof <data-lsp lsp=\"let value: string | number\">value</data-lsp> ===  \"string\") {  // \u3053\u306e\u7bc0\u3067\u306fvalue\u306fstring\u578b\u3068\u3057\u3066\u6271\u308f\u308c\u308b  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let value: string\">value</data-lsp>.<data-lsp lsp=\"(method) String.toUpperCase(): string\">toUpperCase</data-lsp>());} else {  // \u3053\u306e\u7bc0\u3067\u306fvalue\u306fnumber\u578b\u3068\u3057\u3066\u6271\u308f\u308c\u308b  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let value: number\">value</data-lsp> *  3);}`\n```", "```\ntypescript`const  <data-lsp lsp=\"const greet: (name: string) => string\">greet</data-lsp>  = (<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string):  string  => {  return  `Hello ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}`;};<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const greet: (name: string) => string\">greet</data-lsp>(\"John\"));'Hello John'`\n```", "```\ntypescript`const <data-lsp lsp=\"const greet: (name: string) => string\">greet</data-lsp> = (<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string):  string  => {  return  `Hello ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}`;};<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const greet: (name: string) => string\">greet</data-lsp>(\"John\"));'Hello John'`\n```", "```\ntypescript`function  <data-lsp lsp=\"function greet(name: string): string\">greet</data-lsp>(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string):  string {  return  `Hello ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}`;}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function greet(name: string): string\">greet</data-lsp>(\"John\"));'Hello John'`\n```", "```\ntypescript`function <data-lsp lsp=\"function greet(name: string): string\">greet</data-lsp>(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string):  string {  return  `Hello ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}`;}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function greet(name: string): string\">greet</data-lsp>(\"John\"));'Hello John'`\n```", "```\ntypescript`const  <data-lsp lsp=\"const printCoord: ({ x, y }: {\n    x: number;\n    y: number;\n}) => void\">printCoord</data-lsp>  = ({ <data-lsp lsp=\"(parameter) x: number\">x</data-lsp>, <data-lsp lsp=\"(parameter) y: number\">y</data-lsp> }: { <data-lsp lsp=\"(property) x: number\">x</data-lsp>:  number; <data-lsp lsp=\"(property) y: number\">y</data-lsp>:  number }) => {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`Coordinate is (${<data-lsp lsp=\"(parameter) x: number\">x</data-lsp>}, ${<data-lsp lsp=\"(parameter) y: number\">y</data-lsp>})`);};<data-lsp lsp=\"const printCoord: ({ x, y }: {\n    x: number;\n    y: number;\n}) => void\">printCoord</data-lsp>({ <data-lsp lsp=\"(property) x: number\">x</data-lsp>:  10, <data-lsp lsp=\"(property) y: number\">y</data-lsp>:  20 });'Coordinate is (10, 20)'`\n```", "```\ntypescript`const <data-lsp lsp=\"const printCoord: ({ x, y }: {\n    x: number;\n    y: number;\n}) => void\">printCoord</data-lsp> = ({ <data-lsp lsp=\"(parameter) x: number\">x</data-lsp>, <data-lsp lsp=\"(parameter) y: number\">y</data-lsp> }: { <data-lsp lsp=\"(property) x: number\">x</data-lsp>:  number; <data-lsp lsp=\"(property) y: number\">y</data-lsp>:  number }) => {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`Coordinate is (${<data-lsp lsp=\"(parameter) x: number\">x</data-lsp>}, ${<data-lsp lsp=\"(parameter) y: number\">y</data-lsp>})`);};<data-lsp lsp=\"const printCoord: ({ x, y }: {\n    x: number;\n    y: number;\n}) => void\">printCoord</data-lsp>({ <data-lsp lsp=\"(property) x: number\">x</data-lsp>:  10, <data-lsp lsp=\"(property) y: number\">y</data-lsp>:  20 });'Coordinate is (10, 20)'`\n```", "```\ntypescript`function  <data-lsp lsp=\"function isString(value: any): value is string\">isString</data-lsp>(<data-lsp lsp=\"(parameter) value: any\">value</data-lsp>:  any): <data-lsp lsp=\"(parameter) value: any\">value</data-lsp> is  string {  return  typeof <data-lsp lsp=\"(parameter) value: any\">value</data-lsp> ===  \"string\";}function  <data-lsp lsp=\"function printLength(value: any): void\">printLength</data-lsp>(<data-lsp lsp=\"(parameter) value: any\">value</data-lsp>:  any) {  if (<data-lsp lsp=\"function isString(value: any): value is string\">isString</data-lsp>(<data-lsp lsp=\"(parameter) value: any\">value</data-lsp>)) {  // \u3053\u306e\u7bc0\u3067\u306fvalue\u306fstring\u578b\u3068\u3057\u3066\u6271\u308f\u308c\u308b  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(parameter) value: string\">value</data-lsp>.<data-lsp lsp=\"(property) String.length: number\">length</data-lsp>); }}<data-lsp lsp=\"function printLength(value: any): void\">printLength</data-lsp>(\"hello\");5`\n```", "```\ntypescript`function <data-lsp lsp=\"function isString(value: any): value is string\">isString</data-lsp>(<data-lsp lsp=\"(parameter) value: any\">value</data-lsp>:  any): <data-lsp lsp=\"(parameter) value: any\">value</data-lsp> is  string {  return  typeof <data-lsp lsp=\"(parameter) value: any\">value</data-lsp> ===  \"string\";}function <data-lsp lsp=\"function printLength(value: any): void\">printLength</data-lsp>(<data-lsp lsp=\"(parameter) value: any\">value</data-lsp>:  any) {  if (<data-lsp lsp=\"function isString(value: any): value is string\">isString</data-lsp>(<data-lsp lsp=\"(parameter) value: any\">value</data-lsp>)) {  // \u3053\u306e\u7bc0\u3067\u306fvalue\u306fstring\u578b\u3068\u3057\u3066\u6271\u308f\u308c\u308b  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(parameter) value: string\">value</data-lsp>.<data-lsp lsp=\"(property) String.length: number\">length</data-lsp>); }}<data-lsp lsp=\"function printLength(value: any): void\">printLength</data-lsp>(\"hello\");5`\n```", "```\ntypescript`function  <data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>(<data-lsp lsp=\"(parameter) name: string | undefined\">name</data-lsp>?:  string) {  if (<data-lsp lsp=\"(parameter) name: string | undefined\">name</data-lsp> ===  <data-lsp lsp=\"var undefined\">undefined</data-lsp>) {  return  \"Hello!\"; } else {  return  `Hello ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}!`; }}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>(\"John\"));'Hello John!'<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>());'Hello!'`\n```", "```\ntypescript`function <data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>(<data-lsp lsp=\"(parameter) name: string | undefined\">name</data-lsp>?:  string) {  if (<data-lsp lsp=\"(parameter) name: string | undefined\">name</data-lsp> ===  <data-lsp lsp=\"var undefined\">undefined</data-lsp>) {  return  \"Hello!\"; } else {  return  `Hello ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}!`; }}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>(\"John\"));'Hello John!'<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>());'Hello!'`\n```", "```\ntypescript`function  <data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string  =  \"Mystery\") {  return  `Hello ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}!`;}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>(\"John\"));'Hello John!'<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>());'Hello Mystery!'`\n```", "```\ntypescript`function <data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string  =  \"Mystery\") {  return  `Hello ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}!`;}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>(\"John\"));'Hello John!'<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function greet(name?: string): string\">greet</data-lsp>());'Hello Mystery!'`\n```", "```\ntypescript`function  <data-lsp lsp=\"function sum(...numbers: number[]): number\">sum</data-lsp>(...<data-lsp lsp=\"(parameter) numbers: number[]\">numbers</data-lsp>:  number[]) {  return  <data-lsp lsp=\"(parameter) numbers: number[]\">numbers</data-lsp>.<data-lsp lsp=\"(method) Array<number>.reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number (+2 overloads)\">reduce</data-lsp>((<data-lsp lsp=\"(parameter) total: number\">total</data-lsp>, <data-lsp lsp=\"(parameter) num: number\">num</data-lsp>) => <data-lsp lsp=\"(parameter) total: number\">total</data-lsp> + <data-lsp lsp=\"(parameter) num: number\">num</data-lsp>,  0);}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function sum(...numbers: number[]): number\">sum</data-lsp>(1,  2,  3,  4,  5));15`\n```", "```\ntypescript`function <data-lsp lsp=\"function sum(...numbers: number[]): number\">sum</data-lsp>(...<data-lsp lsp=\"(parameter) numbers: number[]\">numbers</data-lsp>:  number[]) {  return  <data-lsp lsp=\"(parameter) numbers: number[]\">numbers</data-lsp>.<data-lsp lsp=\"(method) Array<number>.reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number (+2 overloads)\">reduce</data-lsp>((<data-lsp lsp=\"(parameter) total: number\">total</data-lsp>, <data-lsp lsp=\"(parameter) num: number\">num</data-lsp>) => <data-lsp lsp=\"(parameter) total: number\">total</data-lsp> + <data-lsp lsp=\"(parameter) num: number\">num</data-lsp>,  0);}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function sum(...numbers: number[]): number\">sum</data-lsp>(1,  2,  3,  4,  5));15`\n```", "```\ntypescript`class  <data-lsp lsp=\"class Person\">Person</data-lsp> { <data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>:  number;  constructor(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string, <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>:  number) {  this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp> = <data-lsp lsp=\"(parameter) name: string\">name</data-lsp>;  this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp> = <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>; }  <data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`My name is ${this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>} and I am ${this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>} years old.`); }}const  <data-lsp lsp=\"const john: Person\">john</data-lsp>  =  new  <data-lsp lsp=\"constructor Person(name: string, age: number): Person\">Person</data-lsp>(\"John\",  20);<data-lsp lsp=\"const john: Person\">john</data-lsp>.<data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>();'My name is John and I am 20 years old.'`\n```", "```\ntypescript`class <data-lsp lsp=\"class Person\">Person</data-lsp> { <data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>:  number;  constructor(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string, <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>:  number) {  this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp> = <data-lsp lsp=\"(parameter) name: string\">name</data-lsp>;  this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp> = <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>; } <data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`My name is ${this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>} and I am ${this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>} years old.`); }}const  <data-lsp lsp=\"const john: Person\">john</data-lsp>  =  new <data-lsp lsp=\"constructor Person(name: string, age: number): Person\">Person</data-lsp>(\"John\",  20);<data-lsp lsp=\"const john: Person\">john</data-lsp>.<data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>();'My name is John and I am 20 years old.'`\n```", "```\ntypescript`class  <data-lsp lsp=\"class Person\">Person</data-lsp> {  public <data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>:  string;  private <data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>:  number;  constructor(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string, <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>:  number) {  this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp> = <data-lsp lsp=\"(parameter) name: string\">name</data-lsp>;  this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp> = <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>; }  <data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`My name is ${this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>} and I am ${this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>} years old.`); }}const  <data-lsp lsp=\"const john: Person\">john</data-lsp>  =  new  <data-lsp lsp=\"constructor Person(name: string, age: number): Person\">Person</data-lsp>(\"John\",  20);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const john: Person\">john</data-lsp>.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>); // 'John'\u304c\u51fa\u529b\u3055\u308c\u308b<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const john: Person\">john</data-lsp>.<data-err><data-lsp lsp=\"(property) Person.age: number\">age</data-lsp></data-err>); // \u30a8\u30e9\u30fc\uff08private\u306a\u306e\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\uff09Property 'age' is private and only accessible within class 'Person'.2341Property 'age' is private and only accessible within class 'Person'.`\n```", "```\ntypescript`class <data-lsp lsp=\"class Person\">Person</data-lsp> {  public <data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>:  string;  private <data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>:  number;  constructor(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string, <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>:  number) {  this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp> = <data-lsp lsp=\"(parameter) name: string\">name</data-lsp>;  this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp> = <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>; } <data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`My name is ${this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>} and I am ${this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>} years old.`); }}const  <data-lsp lsp=\"const john: Person\">john</data-lsp>  =  new <data-lsp lsp=\"constructor Person(name: string, age: number): Person\">Person</data-lsp>(\"John\",  20);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const john: Person\">john</data-lsp>.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>); // 'John'\u304c\u51fa\u529b\u3055\u308c\u308b<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const john: Person\">john</data-lsp>.<data-err><data-lsp lsp=\"(property) Person.age: number\">age</data-lsp></data-err>); // \u30a8\u30e9\u30fc\uff08private\u306a\u306e\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\uff09Property 'age' is private and only accessible within class 'Person'.2341Property 'age' is private and only accessible within class 'Person'.`\n```", "```\ntypescript`class  <data-lsp lsp=\"class Person\">Person</data-lsp> {  readonly <data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>:  string;  private  readonly <data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>:  number;  constructor(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string, <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>:  number) {  this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp> = <data-lsp lsp=\"(parameter) name: string\">name</data-lsp>;  this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp> = <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>; }  <data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`My name is ${this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>} and I am ${this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>} years old.`); }}const  <data-lsp lsp=\"const john: Person\">john</data-lsp>  =  new  <data-lsp lsp=\"constructor Person(name: string, age: number): Person\">Person</data-lsp>(\"John\",  20);<data-lsp lsp=\"const john: Person\">john</data-lsp>.<data-err><data-lsp lsp=\"(property) Person.name: any\">name</data-lsp></data-err> =  \"Tom\"; // \u30a8\u30e9\u30fc\uff08readonly\u306e\u305f\u3081\u5909\u66f4\u4e0d\u53ef\uff09Cannot assign to 'name' because it is a read-only property.2540Cannot assign to 'name' because it is a read-only property.`\n```", "```\ntypescript`class <data-lsp lsp=\"class Person\">Person</data-lsp> {  readonly <data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>:  string;  private  readonly <data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>:  number;  constructor(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string, <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>:  number) {  this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp> = <data-lsp lsp=\"(parameter) name: string\">name</data-lsp>;  this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp> = <data-lsp lsp=\"(parameter) age: number\">age</data-lsp>; } <data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`My name is ${this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>} and I am ${this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>} years old.`); }}const  <data-lsp lsp=\"const john: Person\">john</data-lsp>  =  new <data-lsp lsp=\"constructor Person(name: string, age: number): Person\">Person</data-lsp>(\"John\",  20);<data-lsp lsp=\"const john: Person\">john</data-lsp>.<data-err><data-lsp lsp=\"(property) Person.name: any\">name</data-lsp></data-err> =  \"Tom\"; // \u30a8\u30e9\u30fc\uff08readonly\u306e\u305f\u3081\u5909\u66f4\u4e0d\u53ef\uff09Cannot assign to 'name' because it is a read-only property.2540Cannot assign to 'name' because it is a read-only property.`\n```", "```\ntypescript`class  <data-lsp lsp=\"class Person\">Person</data-lsp> {  constructor(public <data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>:  string,  private <data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>:  number) {}  <data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`My name is ${this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>} and I am ${this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>} years old.`); }}const  <data-lsp lsp=\"const john: Person\">john</data-lsp>  =  new  <data-lsp lsp=\"constructor Person(name: string, age: number): Person\">Person</data-lsp>(\"John\",  20);<data-lsp lsp=\"const john: Person\">john</data-lsp>.<data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>();'My name is John and I am 20 years old.'`\n```", "```\ntypescript`class <data-lsp lsp=\"class Person\">Person</data-lsp> {  constructor(public <data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>:  string,  private <data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>:  number) {} <data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`My name is ${this.<data-lsp lsp=\"(property) Person.name: string\">name</data-lsp>} and I am ${this.<data-lsp lsp=\"(property) Person.age: number\">age</data-lsp>} years old.`); }}const  <data-lsp lsp=\"const john: Person\">john</data-lsp>  =  new <data-lsp lsp=\"constructor Person(name: string, age: number): Person\">Person</data-lsp>(\"John\",  20);<data-lsp lsp=\"const john: Person\">john</data-lsp>.<data-lsp lsp=\"(method) Person.introduce(): void\">introduce</data-lsp>();'My name is John and I am 20 years old.'`\n```", "```\ntypescript`class  <data-lsp lsp=\"class Counter\">Counter</data-lsp> { <data-lsp lsp=\"(property) Counter.count: number\">count</data-lsp> =  0; // \u521d\u671f\u5024\u30920\u306b\u8a2d\u5b9a  //    ^^^\u521d\u671f\u5316\u5b50  <data-lsp lsp=\"(method) Counter.increment(): void\">increment</data-lsp>():  void {  this.<data-lsp lsp=\"(property) Counter.count: number\">count</data-lsp>++; }}const  <data-lsp lsp=\"const counter: Counter\">counter</data-lsp>  =  new  <data-lsp lsp=\"constructor Counter(): Counter\">Counter</data-lsp>();<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const counter: Counter\">counter</data-lsp>.<data-lsp lsp=\"(property) Counter.count: number\">count</data-lsp>);0<data-lsp lsp=\"const counter: Counter\">counter</data-lsp>.<data-lsp lsp=\"(method) Counter.increment(): void\">increment</data-lsp>();<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const counter: Counter\">counter</data-lsp>.<data-lsp lsp=\"(property) Counter.count: number\">count</data-lsp>);1`\n```", "```\ntypescript`class <data-lsp lsp=\"class Counter\">Counter</data-lsp> { <data-lsp lsp=\"(property) Counter.count: number\">count</data-lsp> =  0; // \u521d\u671f\u5024\u30920\u306b\u8a2d\u5b9a  //    ^^^\u521d\u671f\u5316\u5b50 <data-lsp lsp=\"(method) Counter.increment(): void\">increment</data-lsp>():  void {  this.<data-lsp lsp=\"(property) Counter.count: number\">count</data-lsp>++; }}const  <data-lsp lsp=\"const counter: Counter\">counter</data-lsp>  =  new <data-lsp lsp=\"constructor Counter(): Counter\">Counter</data-lsp>();<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const counter: Counter\">counter</data-lsp>.<data-lsp lsp=\"(property) Counter.count: number\">count</data-lsp>);0<data-lsp lsp=\"const counter: Counter\">counter</data-lsp>.<data-lsp lsp=\"(method) Counter.increment(): void\">increment</data-lsp>();<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const counter: Counter\">counter</data-lsp>.<data-lsp lsp=\"(property) Counter.count: number\">count</data-lsp>);1`\n```", "```\ntypescript`class  <data-lsp lsp=\"class MyClass\">MyClass</data-lsp> {  static <data-lsp lsp=\"(property) MyClass.x: number\">x</data-lsp> =  0;  static  <data-lsp lsp=\"(method) MyClass.printX(): void\">printX</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"class MyClass\">MyClass</data-lsp>.<data-lsp lsp=\"(property) MyClass.x: number\">x</data-lsp>); }}<data-lsp lsp=\"class MyClass\">MyClass</data-lsp>.<data-lsp lsp=\"(method) MyClass.printX(): void\">printX</data-lsp>();0`\n```", "```\ntypescript`class <data-lsp lsp=\"class MyClass\">MyClass</data-lsp> {  static <data-lsp lsp=\"(property) MyClass.x: number\">x</data-lsp> =  0;  static <data-lsp lsp=\"(method) MyClass.printX(): void\">printX</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"class MyClass\">MyClass</data-lsp>.<data-lsp lsp=\"(property) MyClass.x: number\">x</data-lsp>); }}<data-lsp lsp=\"class MyClass\">MyClass</data-lsp>.<data-lsp lsp=\"(method) MyClass.printX(): void\">printX</data-lsp>();0`\n```", "```\ntypescript`class  <data-lsp lsp=\"class MyClass\">MyClass</data-lsp> { <data-lsp lsp=\"(property) MyClass.value: number\">value</data-lsp> =  1;  <data-lsp lsp=\"(method) MyClass.increment(): this\">increment</data-lsp>():  this {  this.<data-lsp lsp=\"(property) MyClass.value: number\">value</data-lsp>++;  return  this; }  <data-lsp lsp=\"(method) MyClass.add(v: number): this\">add</data-lsp>(<data-lsp lsp=\"(parameter) v: number\">v</data-lsp>:  number):  this {  this.<data-lsp lsp=\"(property) MyClass.value: number\">value</data-lsp> += <data-lsp lsp=\"(parameter) v: number\">v</data-lsp>;  return  this; }  <data-lsp lsp=\"(method) MyClass.print(): this\">print</data-lsp>():  this {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(this.<data-lsp lsp=\"(property) MyClass.value: number\">value</data-lsp>);  return  this; }}new  <data-lsp lsp=\"constructor MyClass(): MyClass\">MyClass</data-lsp>().<data-lsp lsp=\"(method) MyClass.increment(): this\">increment</data-lsp>().<data-lsp lsp=\"(method) MyClass.add(v: number): this\">add</data-lsp>(3).<data-lsp lsp=\"(method) MyClass.print(): this\">print</data-lsp>();5`\n```", "```\ntypescript`class <data-lsp lsp=\"class MyClass\">MyClass</data-lsp> { <data-lsp lsp=\"(property) MyClass.value: number\">value</data-lsp> =  1; <data-lsp lsp=\"(method) MyClass.increment(): this\">increment</data-lsp>():  this {  this.<data-lsp lsp=\"(property) MyClass.value: number\">value</data-lsp>++;  return  this; } <data-lsp lsp=\"(method) MyClass.add(v: number): this\">add</data-lsp>(<data-lsp lsp=\"(parameter) v: number\">v</data-lsp>:  number):  this {  this.<data-lsp lsp=\"(property) MyClass.value: number\">value</data-lsp> += <data-lsp lsp=\"(parameter) v: number\">v</data-lsp>;  return  this; } <data-lsp lsp=\"(method) MyClass.print(): this\">print</data-lsp>():  this {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(this.<data-lsp lsp=\"(property) MyClass.value: number\">value</data-lsp>);  return  this; }}new <data-lsp lsp=\"constructor MyClass(): MyClass\">MyClass</data-lsp>().<data-lsp lsp=\"(method) MyClass.increment(): this\">increment</data-lsp>().<data-lsp lsp=\"(method) MyClass.add(v: number): this\">add</data-lsp>(3).<data-lsp lsp=\"(method) MyClass.print(): this\">print</data-lsp>();5`\n```", "```\ntypescript`class  <data-lsp lsp=\"class Animal\">Animal</data-lsp> { <data-lsp lsp=\"(property) Animal.name: string\">name</data-lsp>:  string;  constructor(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string) {  this.<data-lsp lsp=\"(property) Animal.name: string\">name</data-lsp> = <data-lsp lsp=\"(parameter) name: string\">name</data-lsp>; }  <data-lsp lsp=\"(method) Animal.greet(): string\">greet</data-lsp>():  string {  return  `Hello, my name is ${this.<data-lsp lsp=\"(property) Animal.name: string\">name</data-lsp>}`; }}class  <data-lsp lsp=\"class Dog\">Dog</data-lsp>  extends  <data-lsp lsp=\"class Animal\">Animal</data-lsp> {  <data-lsp lsp=\"(method) Dog.bark(): string\">bark</data-lsp>():  string {  return  \"Woof!\"; }}const  <data-lsp lsp=\"const dog: Dog\">dog</data-lsp>  =  new  <data-lsp lsp=\"constructor Dog(name: string): Dog\">Dog</data-lsp>(\"Max\");<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const dog: Dog\">dog</data-lsp>.<data-lsp lsp=\"(method) Animal.greet(): string\">greet</data-lsp>());'Hello, my name is Max'<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const dog: Dog\">dog</data-lsp>.<data-lsp lsp=\"(method) Dog.bark(): string\">bark</data-lsp>());'Woof!'`\n```", "```\ntypescript`class <data-lsp lsp=\"class Animal\">Animal</data-lsp> { <data-lsp lsp=\"(property) Animal.name: string\">name</data-lsp>:  string;  constructor(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string) {  this.<data-lsp lsp=\"(property) Animal.name: string\">name</data-lsp> = <data-lsp lsp=\"(parameter) name: string\">name</data-lsp>; } <data-lsp lsp=\"(method) Animal.greet(): string\">greet</data-lsp>():  string {  return  `Hello, my name is ${this.<data-lsp lsp=\"(property) Animal.name: string\">name</data-lsp>}`; }}class <data-lsp lsp=\"class Dog\">Dog</data-lsp> extends <data-lsp lsp=\"class Animal\">Animal</data-lsp> { <data-lsp lsp=\"(method) Dog.bark(): string\">bark</data-lsp>():  string {  return  \"Woof!\"; }}const  <data-lsp lsp=\"const dog: Dog\">dog</data-lsp>  =  new <data-lsp lsp=\"constructor Dog(name: string): Dog\">Dog</data-lsp>(\"Max\");<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const dog: Dog\">dog</data-lsp>.<data-lsp lsp=\"(method) Animal.greet(): string\">greet</data-lsp>());'Hello, my name is Max'<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const dog: Dog\">dog</data-lsp>.<data-lsp lsp=\"(method) Dog.bark(): string\">bark</data-lsp>());'Woof!'`\n```", "```\ntypescript`class  <data-lsp lsp=\"class Animal\">Animal</data-lsp> {}class  <data-lsp lsp=\"class Dog\">Dog</data-lsp>  extends  <data-lsp lsp=\"class Animal\">Animal</data-lsp> {}const  <data-lsp lsp=\"const dog: Dog\">dog</data-lsp>  =  new  <data-lsp lsp=\"constructor Dog(): Dog\">Dog</data-lsp>();<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const dog: Dog\">dog</data-lsp> instanceof  <data-lsp lsp=\"class Dog\">Dog</data-lsp>);true<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const dog: Dog\">dog</data-lsp> instanceof  <data-lsp lsp=\"class Animal\">Animal</data-lsp>);true`\n```", "```\ntypescript`class <data-lsp lsp=\"class Animal\">Animal</data-lsp> {}class <data-lsp lsp=\"class Dog\">Dog</data-lsp> extends <data-lsp lsp=\"class Animal\">Animal</data-lsp> {}const  <data-lsp lsp=\"const dog: Dog\">dog</data-lsp>  =  new <data-lsp lsp=\"constructor Dog(): Dog\">Dog</data-lsp>();<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const dog: Dog\">dog</data-lsp> instanceof <data-lsp lsp=\"class Dog\">Dog</data-lsp>);true<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const dog: Dog\">dog</data-lsp> instanceof <data-lsp lsp=\"class Animal\">Animal</data-lsp>);true`\n```", "```\ntypescript`abstract  class  <data-lsp lsp=\"class Animal\">Animal</data-lsp> {  abstract  <data-lsp lsp=\"(method) Animal.makeSound(): void\">makeSound</data-lsp>():  void;  <data-lsp lsp=\"(method) Animal.move(): void\">move</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"roaming the earth...\"); }}class  <data-lsp lsp=\"class Dog\">Dog</data-lsp>  extends  <data-lsp lsp=\"class Animal\">Animal</data-lsp> {  <data-lsp lsp=\"(method) Dog.makeSound(): void\">makeSound</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Woof Woof\"); }}const  <data-lsp lsp=\"const dog: Dog\">dog</data-lsp>  =  new  <data-lsp lsp=\"constructor Dog(): Dog\">Dog</data-lsp>();<data-lsp lsp=\"const dog: Dog\">dog</data-lsp>.<data-lsp lsp=\"(method) Animal.move(): void\">move</data-lsp>();'roaming the earth...'<data-lsp lsp=\"const dog: Dog\">dog</data-lsp>.<data-lsp lsp=\"(method) Dog.makeSound(): void\">makeSound</data-lsp>();'Woof Woof'`\n```", "```\ntypescript`abstract  class <data-lsp lsp=\"class Animal\">Animal</data-lsp> {  abstract <data-lsp lsp=\"(method) Animal.makeSound(): void\">makeSound</data-lsp>():  void; <data-lsp lsp=\"(method) Animal.move(): void\">move</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"roaming the earth...\"); }}class <data-lsp lsp=\"class Dog\">Dog</data-lsp> extends <data-lsp lsp=\"class Animal\">Animal</data-lsp> { <data-lsp lsp=\"(method) Dog.makeSound(): void\">makeSound</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Woof Woof\"); }}const  <data-lsp lsp=\"const dog: Dog\">dog</data-lsp>  =  new <data-lsp lsp=\"constructor Dog(): Dog\">Dog</data-lsp>();<data-lsp lsp=\"const dog: Dog\">dog</data-lsp>.<data-lsp lsp=\"(method) Animal.move(): void\">move</data-lsp>();'roaming the earth...'<data-lsp lsp=\"const dog: Dog\">dog</data-lsp>.<data-lsp lsp=\"(method) Dog.makeSound(): void\">makeSound</data-lsp>();'Woof Woof'`\n```", "```\ntypescript`class  <data-lsp lsp=\"class Circle\">Circle</data-lsp> {  private <data-lsp lsp=\"(property) Circle._radius: number\">_radius</data-lsp>:  number;  constructor(<data-lsp lsp=\"(parameter) radius: number\">radius</data-lsp>:  number) {  this.<data-lsp lsp=\"(property) Circle._radius: number\">_radius</data-lsp> = <data-lsp lsp=\"(parameter) radius: number\">radius</data-lsp>; }  // \u30b2\u30c3\u30bf\u30fc  get  <data-lsp lsp=\"(getter) Circle.radius: number\">radius</data-lsp>():  number {  return  this.<data-lsp lsp=\"(property) Circle._radius: number\">_radius</data-lsp>; }  // \u30bb\u30c3\u30bf\u30fc  set  <data-lsp lsp=\"(setter) Circle.radius: number\">radius</data-lsp>(<data-lsp lsp=\"(parameter) radius: number\">radius</data-lsp>:  number) {  if (<data-lsp lsp=\"(parameter) radius: number\">radius</data-lsp> <=  0) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"Invalid radius value\"); }  this.<data-lsp lsp=\"(property) Circle._radius: number\">_radius</data-lsp> = <data-lsp lsp=\"(parameter) radius: number\">radius</data-lsp>; }}const  <data-lsp lsp=\"const circle: Circle\">circle</data-lsp>  =  new  <data-lsp lsp=\"constructor Circle(radius: number): Circle\">Circle</data-lsp>(5);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const circle: Circle\">circle</data-lsp>.<data-lsp lsp=\"(property) Circle.radius: number\">radius</data-lsp>);5<data-lsp lsp=\"const circle: Circle\">circle</data-lsp>.<data-lsp lsp=\"(property) Circle.radius: number\">radius</data-lsp> =  3;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const circle: Circle\">circle</data-lsp>.<data-lsp lsp=\"(property) Circle.radius: number\">radius</data-lsp>);3<data-lsp lsp=\"const circle: Circle\">circle</data-lsp>.<data-lsp lsp=\"(property) Circle.radius: number\">radius</data-lsp> =  -2;// \u4f8b\u5916: 'Invalid radius value'`\n```", "```\ntypescript`class <data-lsp lsp=\"class Circle\">Circle</data-lsp> {  private <data-lsp lsp=\"(property) Circle._radius: number\">_radius</data-lsp>:  number;  constructor(<data-lsp lsp=\"(parameter) radius: number\">radius</data-lsp>:  number) {  this.<data-lsp lsp=\"(property) Circle._radius: number\">_radius</data-lsp> = <data-lsp lsp=\"(parameter) radius: number\">radius</data-lsp>; }  // \u30b2\u30c3\u30bf\u30fc  get <data-lsp lsp=\"(getter) Circle.radius: number\">radius</data-lsp>():  number {  return  this.<data-lsp lsp=\"(property) Circle._radius: number\">_radius</data-lsp>; }  // \u30bb\u30c3\u30bf\u30fc  set <data-lsp lsp=\"(setter) Circle.radius: number\">radius</data-lsp>(<data-lsp lsp=\"(parameter) radius: number\">radius</data-lsp>:  number) {  if (<data-lsp lsp=\"(parameter) radius: number\">radius</data-lsp> <=  0) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"Invalid radius value\"); }  this.<data-lsp lsp=\"(property) Circle._radius: number\">_radius</data-lsp> = <data-lsp lsp=\"(parameter) radius: number\">radius</data-lsp>; }}const  <data-lsp lsp=\"const circle: Circle\">circle</data-lsp>  =  new <data-lsp lsp=\"constructor Circle(radius: number): Circle\">Circle</data-lsp>(5);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const circle: Circle\">circle</data-lsp>.<data-lsp lsp=\"(property) Circle.radius: number\">radius</data-lsp>);5<data-lsp lsp=\"const circle: Circle\">circle</data-lsp>.<data-lsp lsp=\"(property) Circle.radius: number\">radius</data-lsp> =  3;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const circle: Circle\">circle</data-lsp>.<data-lsp lsp=\"(property) Circle.radius: number\">radius</data-lsp>);3<data-lsp lsp=\"const circle: Circle\">circle</data-lsp>.<data-lsp lsp=\"(property) Circle.radius: number\">radius</data-lsp> =  -2;// \u4f8b\u5916: 'Invalid radius value'`\n```", "```\ntypescript`interface  <data-lsp lsp=\"interface Printable\">Printable</data-lsp> {  <data-lsp lsp=\"(method) Printable.print(): void\">print</data-lsp>():  void;}class  <data-lsp lsp=\"class MyClass\">MyClass</data-lsp>  implements  <data-lsp lsp=\"interface Printable\">Printable</data-lsp> {  <data-lsp lsp=\"(method) MyClass.print(): void\">print</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Hello, world!\"); }}`\n```", "```\ntypescript`interface <data-lsp lsp=\"interface Printable\">Printable</data-lsp> { <data-lsp lsp=\"(method) Printable.print(): void\">print</data-lsp>():  void;}class <data-lsp lsp=\"class MyClass\">MyClass</data-lsp> implements <data-lsp lsp=\"interface Printable\">Printable</data-lsp> { <data-lsp lsp=\"(method) MyClass.print(): void\">print</data-lsp>():  void {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Hello, world!\"); }}`\n```", "```\ntypescript`interface  <data-lsp lsp=\"interface Point\">Point</data-lsp> {  readonly <data-lsp lsp=\"(property) Point.x: number\">x</data-lsp>:  number;  readonly <data-lsp lsp=\"(property) Point.y: number\">y</data-lsp>:  number;  <data-lsp lsp=\"(method) Point.sum(): number\">sum</data-lsp>():  number;}const  <data-lsp lsp=\"const point: Point\">point</data-lsp>:  <data-lsp lsp=\"interface Point\">Point</data-lsp>  = { <data-lsp lsp=\"(property) Point.x: number\">x</data-lsp>:  10, <data-lsp lsp=\"(property) Point.y: number\">y</data-lsp>:  20,  <data-lsp lsp=\"(method) Point.sum(): number\">sum</data-lsp>:  function () {  return  this.<data-lsp lsp=\"(property) Point.x: number\">x</data-lsp> +  this.<data-lsp lsp=\"(property) Point.y: number\">y</data-lsp>; },};`\n```", "```\ntypescript`interface <data-lsp lsp=\"interface Point\">Point</data-lsp> {  readonly <data-lsp lsp=\"(property) Point.x: number\">x</data-lsp>:  number;  readonly <data-lsp lsp=\"(property) Point.y: number\">y</data-lsp>:  number; <data-lsp lsp=\"(method) Point.sum(): number\">sum</data-lsp>():  number;}const  <data-lsp lsp=\"const point: Point\">point</data-lsp>: <data-lsp lsp=\"interface Point\">Point</data-lsp> = { <data-lsp lsp=\"(property) Point.x: number\">x</data-lsp>:  10, <data-lsp lsp=\"(property) Point.y: number\">y</data-lsp>:  20, <data-lsp lsp=\"(method) Point.sum(): number\">sum</data-lsp>:  function () {  return  this.<data-lsp lsp=\"(property) Point.x: number\">x</data-lsp> +  this.<data-lsp lsp=\"(property) Point.y: number\">y</data-lsp>; },};`\n```", "```\ntypescript`interface  <data-lsp lsp=\"interface Point\">Point</data-lsp> {  readonly <data-lsp lsp=\"(property) Point.x: number\">x</data-lsp>:  number;  readonly <data-lsp lsp=\"(property) Point.y: number\">y</data-lsp>:  number;}const  <data-lsp lsp=\"const p1: Point\">p1</data-lsp>:  <data-lsp lsp=\"interface Point\">Point</data-lsp>  = { <data-lsp lsp=\"(property) Point.x: number\">x</data-lsp>:  10, <data-lsp lsp=\"(property) Point.y: number\">y</data-lsp>:  20 };<data-lsp lsp=\"const p1: Point\">p1</data-lsp>.<data-err><data-lsp lsp=\"(property) Point.x: any\">x</data-lsp></data-err> =  5;Cannot assign to 'x' because it is a read-only property.2540Cannot assign to 'x' because it is a read-only property.`\n```", "```\ntypescript`interface <data-lsp lsp=\"interface Point\">Point</data-lsp> {  readonly <data-lsp lsp=\"(property) Point.x: number\">x</data-lsp>:  number;  readonly <data-lsp lsp=\"(property) Point.y: number\">y</data-lsp>:  number;}const  <data-lsp lsp=\"const p1: Point\">p1</data-lsp>: <data-lsp lsp=\"interface Point\">Point</data-lsp> = { <data-lsp lsp=\"(property) Point.x: number\">x</data-lsp>:  10, <data-lsp lsp=\"(property) Point.y: number\">y</data-lsp>:  20 };<data-lsp lsp=\"const p1: Point\">p1</data-lsp>.<data-err><data-lsp lsp=\"(property) Point.x: any\">x</data-lsp></data-err> =  5;Cannot assign to 'x' because it is a read-only property.2540Cannot assign to 'x' because it is a read-only property.`\n```", "```\ntypescript`try {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"An error occurred!\");} catch (<data-lsp lsp=\"var error: unknown\">error</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"var error: unknown\">error</data-lsp>);}`\n```", "```\ntypescript`try {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"An error occurred!\");} catch (<data-lsp lsp=\"var error: unknown\">error</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"var error: unknown\">error</data-lsp>);}`\n```", "```\ntypescript`try {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"Oops, something went wrong.\");} catch (<data-lsp lsp=\"var error: unknown\">error</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"var error: unknown\">error</data-lsp>);} finally {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"This is the finally block. It always gets executed.\");}`\n```", "```\ntypescript`try {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"Oops, something went wrong.\");} catch (<data-lsp lsp=\"var error: unknown\">error</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"var error: unknown\">error</data-lsp>);} finally {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"This is the finally block. It always gets executed.\");}`\n```", "```\ntypescript`class  <data-lsp lsp=\"class CustomError\">CustomError</data-lsp>  extends  <data-lsp lsp=\"var Error: ErrorConstructor\">Error</data-lsp> { <data-lsp lsp=\"(property) CustomError.code: string\">code</data-lsp> =  \"CustomError\";  constructor(<data-lsp lsp=\"(parameter) message: string | undefined\">message</data-lsp>?:  string) {  super(<data-lsp lsp=\"(parameter) message: string | undefined\">message</data-lsp>); }}try {  throw  new  <data-lsp lsp=\"constructor CustomError(message?: string): CustomError\">CustomError</data-lsp>(\"This is a custom error\");} catch (<data-lsp lsp=\"var error: unknown\">error</data-lsp>) {  if (<data-lsp lsp=\"var error: unknown\">error</data-lsp> instanceof  <data-lsp lsp=\"class CustomError\">CustomError</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`${<data-lsp lsp=\"var error: CustomError\">error</data-lsp>.<data-lsp lsp=\"(property) CustomError.code: string\">code</data-lsp>}: ${<data-lsp lsp=\"var error: CustomError\">error</data-lsp>.<data-lsp lsp=\"(property) Error.message: string\">message</data-lsp>}`); }}`\n```", "```\ntypescript`class <data-lsp lsp=\"class CustomError\">CustomError</data-lsp> extends  <data-lsp lsp=\"var Error: ErrorConstructor\">Error</data-lsp> { <data-lsp lsp=\"(property) CustomError.code: string\">code</data-lsp> =  \"CustomError\";  constructor(<data-lsp lsp=\"(parameter) message: string | undefined\">message</data-lsp>?:  string) { super(<data-lsp lsp=\"(parameter) message: string | undefined\">message</data-lsp>); }}try {  throw  new <data-lsp lsp=\"constructor CustomError(message?: string): CustomError\">CustomError</data-lsp>(\"This is a custom error\");} catch (<data-lsp lsp=\"var error: unknown\">error</data-lsp>) {  if (<data-lsp lsp=\"var error: unknown\">error</data-lsp> instanceof <data-lsp lsp=\"class CustomError\">CustomError</data-lsp>) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`${<data-lsp lsp=\"var error: CustomError\">error</data-lsp>.<data-lsp lsp=\"(property) CustomError.code: string\">code</data-lsp>}: ${<data-lsp lsp=\"var error: CustomError\">error</data-lsp>.<data-lsp lsp=\"(property) Error.message: string\">message</data-lsp>}`); }}`\n```", "```\ntypescript`const  <data-lsp lsp=\"const promise: Promise<unknown>\">promise</data-lsp>  =  new  <data-lsp lsp=\"var Promise: PromiseConstructor\nnew <unknown>(executor: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void) => Promise<unknown>\">Promise</data-lsp>((<data-lsp lsp=\"(parameter) resolve: (value: unknown) => void\">resolve</data-lsp>, <data-lsp lsp=\"(parameter) reject: (reason?: any) => void\">reject</data-lsp>) => {  <data-lsp lsp=\"function setTimeout<[]>(callback: () => void, ms?: number | undefined): NodeJS.Timeout (+2 overloads)\nnamespace setTimeout\">setTimeout</data-lsp>(() => {  <data-lsp lsp=\"(parameter) resolve: (value: unknown) => void\">resolve</data-lsp>(\"Promise resolved\"); },  2000);});<data-lsp lsp=\"const promise: Promise<unknown>\">promise</data-lsp>.<data-lsp lsp=\"(method) Promise<unknown>.then<void, never>(onfulfilled?: ((value: unknown) => void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null | undefined): Promise<...>\">then</data-lsp>((<data-lsp lsp=\"(parameter) data: unknown\">data</data-lsp>) => {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(parameter) data: unknown\">data</data-lsp>);});'Promise resolved'`\n```", "```\ntypescript`const  <data-lsp lsp=\"const promise: Promise<unknown>\">promise</data-lsp>  =  new  <data-lsp lsp=\"var Promise: PromiseConstructor\nnew <unknown>(executor: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void) => Promise<unknown>\">Promise</data-lsp>((<data-lsp lsp=\"(parameter) resolve: (value: unknown) => void\">resolve</data-lsp>, <data-lsp lsp=\"(parameter) reject: (reason?: any) => void\">reject</data-lsp>) => { <data-lsp lsp=\"function setTimeout<[]>(callback: () => void, ms?: number | undefined): NodeJS.Timeout (+2 overloads)\nnamespace setTimeout\">setTimeout</data-lsp>(() => { <data-lsp lsp=\"(parameter) resolve: (value: unknown) => void\">resolve</data-lsp>(\"Promise resolved\"); },  2000);});<data-lsp lsp=\"const promise: Promise<unknown>\">promise</data-lsp>.<data-lsp lsp=\"(method) Promise<unknown>.then<void, never>(onfulfilled?: ((value: unknown) => void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null | undefined): Promise<...>\">then</data-lsp>((<data-lsp lsp=\"(parameter) data: unknown\">data</data-lsp>) => {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(parameter) data: unknown\">data</data-lsp>);});'Promise resolved'`\n```", "```\ntypescript`function  <data-lsp lsp=\"function delay(ms: number): Promise<unknown>\">delay</data-lsp>(<data-lsp lsp=\"(parameter) ms: number\">ms</data-lsp>:  number) {  return  new  <data-lsp lsp=\"var Promise: PromiseConstructor\nnew <unknown>(executor: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void) => Promise<unknown>\">Promise</data-lsp>((<data-lsp lsp=\"(parameter) resolve: (value: unknown) => void\">resolve</data-lsp>) =>  <data-lsp lsp=\"function setTimeout(callback: (args: void) => void, ms?: number | undefined): NodeJS.Timeout (+2 overloads)\nnamespace setTimeout\">setTimeout</data-lsp>(<data-lsp lsp=\"(parameter) resolve: (value: unknown) => void\">resolve</data-lsp>, <data-lsp lsp=\"(parameter) ms: number\">ms</data-lsp>));}async  function  <data-lsp lsp=\"function asyncFunction(): Promise<void>\">asyncFunction</data-lsp>() {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Start\");  await  <data-lsp lsp=\"function delay(ms: number): Promise<unknown>\">delay</data-lsp>(2000);  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"End\");}<data-lsp lsp=\"function asyncFunction(): Promise<void>\">asyncFunction</data-lsp>();'Start'// 2\u79d2\u5f8c'End'`\n```", "```\ntypescript`function <data-lsp lsp=\"function delay(ms: number): Promise<unknown>\">delay</data-lsp>(<data-lsp lsp=\"(parameter) ms: number\">ms</data-lsp>:  number) {  return  new  <data-lsp lsp=\"var Promise: PromiseConstructor\nnew <unknown>(executor: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void) => Promise<unknown>\">Promise</data-lsp>((<data-lsp lsp=\"(parameter) resolve: (value: unknown) => void\">resolve</data-lsp>) => <data-lsp lsp=\"function setTimeout(callback: (args: void) => void, ms?: number | undefined): NodeJS.Timeout (+2 overloads)\nnamespace setTimeout\">setTimeout</data-lsp>(<data-lsp lsp=\"(parameter) resolve: (value: unknown) => void\">resolve</data-lsp>, <data-lsp lsp=\"(parameter) ms: number\">ms</data-lsp>));}async  function <data-lsp lsp=\"function asyncFunction(): Promise<void>\">asyncFunction</data-lsp>() {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"Start\");  await <data-lsp lsp=\"function delay(ms: number): Promise<unknown>\">delay</data-lsp>(2000);  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(\"End\");}<data-lsp lsp=\"function asyncFunction(): Promise<void>\">asyncFunction</data-lsp>();'Start'// 2\u79d2\u5f8c'End'`\n```", "```\ntypescript`// T\u304c\u578b\u5909\u6570function  <data-lsp lsp=\"function identity<T>(arg: T): T\">identity</data-lsp><<data-lsp lsp=\"(type parameter) T in identity<T>(arg: T): T\">T</data-lsp>>(<data-lsp lsp=\"(parameter) arg: T\">arg</data-lsp>:  <data-lsp lsp=\"(type parameter) T in identity<T>(arg: T): T\">T</data-lsp>):  <data-lsp lsp=\"(type parameter) T in identity<T>(arg: T): T\">T</data-lsp> {  return <data-lsp lsp=\"(parameter) arg: T\">arg</data-lsp>;}// \u578b\u5909\u6570T\u306bstring\u3092\u5272\u308a\u5f53\u3066\u308bconst  <data-lsp lsp=\"const output1: string\" style=\"border-bottom:solid 2px lightgrey\">output1</data-lsp>  =  <data-lsp lsp=\"function identity<string>(arg: string): string\">identity</data-lsp><string>(\"myString\");` `const output1: string// \u578b\u5909\u6570T\u306bnumber\u3092\u5272\u308a\u5f53\u3066\u308bconst  <data-lsp lsp=\"const output2: number\" style=\"border-bottom:solid 2px lightgrey\">output2</data-lsp>  =  <data-lsp lsp=\"function identity<number>(arg: number): number\">identity</data-lsp><number>(100);` `const output2: number`\n\n```", "```\ngreeter.tstypescript`export  function  <data-lsp lsp=\"function greet(name: string): string\">greet</data-lsp>(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string) {  return  `Hello, ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}!`;}`\n```", "```\ngreeter.tstypescript`export  function <data-lsp lsp=\"function greet(name: string): string\">greet</data-lsp>(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string) {  return  `Hello, ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}!`;}`\n```", "```\nmain.tstypescript`import { <data-lsp lsp=\"(alias) function greet(name: string): string\nimport greet\">greet</data-lsp> } from  \"./greeter\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(alias) greet(name: string): string\nimport greet\">greet</data-lsp>(\"TypeScript\"));'Hello, TypeScript!'`\n```", "```\nmain.tstypescript`import { <data-lsp lsp=\"(alias) function greet(name: string): string\nimport greet\">greet</data-lsp> } from  \"./greeter\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(alias) greet(name: string): string\nimport greet\">greet</data-lsp>(\"TypeScript\"));'Hello, TypeScript!'`\n```", "```\nmath.tstypescript`export  function  <data-lsp lsp=\"function square(x: number): number\">square</data-lsp>(<data-lsp lsp=\"(parameter) x: number\">x</data-lsp>:  number) {  return <data-lsp lsp=\"(parameter) x: number\">x</data-lsp> * <data-lsp lsp=\"(parameter) x: number\">x</data-lsp>;}export  function  <data-lsp lsp=\"function cube(x: number): number\">cube</data-lsp>(<data-lsp lsp=\"(parameter) x: number\">x</data-lsp>:  number) {  return <data-lsp lsp=\"(parameter) x: number\">x</data-lsp> * <data-lsp lsp=\"(parameter) x: number\">x</data-lsp> * <data-lsp lsp=\"(parameter) x: number\">x</data-lsp>;}`\n```", "```\nmath.tstypescript`export  function <data-lsp lsp=\"function square(x: number): number\">square</data-lsp>(<data-lsp lsp=\"(parameter) x: number\">x</data-lsp>:  number) {  return <data-lsp lsp=\"(parameter) x: number\">x</data-lsp> * <data-lsp lsp=\"(parameter) x: number\">x</data-lsp>;}export  function <data-lsp lsp=\"function cube(x: number): number\">cube</data-lsp>(<data-lsp lsp=\"(parameter) x: number\">x</data-lsp>:  number) {  return <data-lsp lsp=\"(parameter) x: number\">x</data-lsp> * <data-lsp lsp=\"(parameter) x: number\">x</data-lsp> * <data-lsp lsp=\"(parameter) x: number\">x</data-lsp>;}`\n```", "```\nmain.tstypescript`import { <data-lsp lsp=\"(alias) function square(x: number): number\nimport square\">square</data-lsp>, <data-lsp lsp=\"(alias) function cube(x: number): number\nimport cube\">cube</data-lsp> } from  \"./math\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(alias) square(x: number): number\nimport square\">square</data-lsp>(2));4<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(alias) cube(x: number): number\nimport cube\">cube</data-lsp>(2));8`\n```", "```\nmain.tstypescript`import { <data-lsp lsp=\"(alias) function square(x: number): number\nimport square\">square</data-lsp>, <data-lsp lsp=\"(alias) function cube(x: number): number\nimport cube\">cube</data-lsp> } from  \"./math\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(alias) square(x: number): number\nimport square\">square</data-lsp>(2));4<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(alias) cube(x: number): number\nimport cube\">cube</data-lsp>(2));8`\n```", "```\ngreeter.tstypescript`export  default  function  <data-lsp lsp=\"function greet(name: string): string\">greet</data-lsp>(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string) {  return  `Hello, ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}!`;}`\n```", "```\ngreeter.tstypescript`export  default  function <data-lsp lsp=\"function greet(name: string): string\">greet</data-lsp>(<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>:  string) {  return  `Hello, ${<data-lsp lsp=\"(parameter) name: string\">name</data-lsp>}!`;}`\n```", "```\nmain.tstypescript`import <data-lsp lsp=\"(alias) function greetFunction(name: string): string\nimport greetFunction\">greetFunction</data-lsp> from  \"./greeter\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(alias) greetFunction(name: string): string\nimport greetFunction\">greetFunction</data-lsp>(\"TypeScript\"));'Hello, TypeScript!'`\n```", "```\nmain.tstypescript`import <data-lsp lsp=\"(alias) function greetFunction(name: string): string\nimport greetFunction\">greetFunction</data-lsp> from  \"./greeter\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(alias) greetFunction(name: string): string\nimport greetFunction\">greetFunction</data-lsp>(\"TypeScript\"));'Hello, TypeScript!'`\n```", "```\nmath.tstypescript`export  function  <data-lsp lsp=\"function add(x: number, y: number): number\">add</data-lsp>(<data-lsp lsp=\"(parameter) x: number\">x</data-lsp>:  number, <data-lsp lsp=\"(parameter) y: number\">y</data-lsp>:  number) {  return <data-lsp lsp=\"(parameter) x: number\">x</data-lsp> + <data-lsp lsp=\"(parameter) y: number\">y</data-lsp>;}`\n```", "```\nmath.tstypescript`export  function <data-lsp lsp=\"function add(x: number, y: number): number\">add</data-lsp>(<data-lsp lsp=\"(parameter) x: number\">x</data-lsp>:  number, <data-lsp lsp=\"(parameter) y: number\">y</data-lsp>:  number) {  return <data-lsp lsp=\"(parameter) x: number\">x</data-lsp> + <data-lsp lsp=\"(parameter) y: number\">y</data-lsp>;}`\n```", "```\nindex.tstypescript`// \u518d\u30a8\u30af\u30b9\u30dd\u30fc\u30c8export { <data-lsp lsp=\"(alias) function add(x: number, y: number): number\nexport add\">add</data-lsp> } from  \"./math\";`\n```", "```\nindex.tstypescript`// \u518d\u30a8\u30af\u30b9\u30dd\u30fc\u30c8export { <data-lsp lsp=\"(alias) function add(x: number, y: number): number\nexport add\">add</data-lsp> } from  \"./math\";`\n```", "```\nmain.tstypescript`import { <data-lsp lsp=\"(alias) function add(x: number, y: number): number\nimport add\">add</data-lsp> } from  \"./index\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(alias) add(x: number, y: number): number\nimport add\">add</data-lsp>(2,  3));5`\n```", "```\nmain.tstypescript`import { <data-lsp lsp=\"(alias) function add(x: number, y: number): number\nimport add\">add</data-lsp> } from  \"./index\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(alias) add(x: number, y: number): number\nimport add\">add</data-lsp>(2,  3));5`\n```", "```\ntypes.tstypescript`export  type  <data-lsp lsp=\"type MyObject = {\n    name: string;\n    age: number;\n}\">MyObject</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number;};`\n```", "```\ntypes.tstypescript`export  type <data-lsp lsp=\"type MyObject = {\n    name: string;\n    age: number;\n}\">MyObject</data-lsp> = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number;};`\n```", "```\nmain.tstypescript`import  type { <data-lsp lsp=\"(alias) type MyObject = {\n    name: string;\n    age: number;\n}\nimport MyObject\">MyObject</data-lsp> } from  \"./types\";//     ^^^^\u578b\u30a4\u30f3\u30dd\u30fc\u30c8const  <data-lsp lsp=\"const obj: MyObject\">obj</data-lsp>:  <data-lsp lsp=\"(alias) type MyObject = {\n    name: string;\n    age: number;\n}\nimport MyObject\">MyObject</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"TypeScript\", <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  3,};`\n```", "```\nmain.tstypescript`import  type { <data-lsp lsp=\"(alias) type MyObject = {\n    name: string;\n    age: number;\n}\nimport MyObject\">MyObject</data-lsp> } from  \"./types\";//     ^^^^\u578b\u30a4\u30f3\u30dd\u30fc\u30c8const  <data-lsp lsp=\"const obj: MyObject\">obj</data-lsp>: <data-lsp lsp=\"(alias) type MyObject = {\n    name: string;\n    age: number;\n}\nimport MyObject\">MyObject</data-lsp> = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"TypeScript\", <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  3,};`\n```", "```\ntypescript`const  <data-lsp lsp=\"const object: {\n    name: string;\n    version: number;\n}\">object</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"TypeScript\", <data-lsp lsp=\"(property) version: number\">version</data-lsp>:  3.9,};type  <data-lsp lsp=\"type ObjectType = {\n    name: string;\n    version: number;\n}\" style=\"border-bottom:solid 2px lightgrey\">ObjectType</data-lsp>  =  typeof <data-lsp lsp=\"const object: {\n    name: string;\n    version: number;\n}\">object</data-lsp>;` `type ObjectType = {\n    name: string;\n    version: number;\n}`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type Point = {\n    x: number;\n    y: number;\n}\">Point</data-lsp>  = { <data-lsp lsp=\"(property) x: number\">x</data-lsp>:  number; <data-lsp lsp=\"(property) y: number\">y</data-lsp>:  number;};type  <data-lsp lsp=\"type Key = keyof Point\" style=\"border-bottom:solid 2px lightgrey\">Key</data-lsp>  =  keyof  <data-lsp lsp=\"type Point = {\n    x: number;\n    y: number;\n}\">Point</data-lsp>;` `type Key = keyof Pointconst  <data-lsp lsp=\"const key1: keyof Point\">key1</data-lsp>:  <data-lsp lsp=\"type Key = keyof Point\">Key</data-lsp>  =  \"x\"; // \u4ee3\u5165OKconst  <data-lsp lsp=\"const key2: keyof Point\">key2</data-lsp>:  <data-lsp lsp=\"type Key = keyof Point\">Key</data-lsp>  =  \"y\"; // \u4ee3\u5165OKconst  <data-err><data-lsp lsp=\"const key3: keyof Point\">key3</data-lsp></data-err>:  <data-lsp lsp=\"type Key = keyof Point\">Key</data-lsp>  =  \"z\"; // \u4ee3\u5165\u4e0d\u53efType '\"z\"' is not assignable to type 'keyof Point'.2322Type '\"z\"' is not assignable to type 'keyof Point'.`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type Person = {\n    name: string;\n    age?: number | undefined;\n}\">Person</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age?: number | undefined\">age</data-lsp>?:  number;};type  <data-lsp lsp=\"type RequiredPerson = {\n    name: string;\n    age: number;\n}\" style=\"border-bottom:solid 2px lightgrey\">RequiredPerson</data-lsp>  =  <data-lsp lsp=\"type Required<T> = { [P in keyof T]-?: T[P]; }\">Required</data-lsp><<data-lsp lsp=\"type Person = {\n    name: string;\n    age?: number | undefined;\n}\">Person</data-lsp>>;` `type RequiredPerson = {\n    name: string;\n    age: number;\n}// age\u304c\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u70b9\u306b\u6ce8\u76ee`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n}\">Person</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number;};type  <data-lsp lsp=\"type OptionalPerson = {\n    name?: string | undefined;\n    age?: number | undefined;\n}\" style=\"border-bottom:solid 2px lightgrey\">OptionalPerson</data-lsp>  =  <data-lsp lsp=\"type Partial<T> = { [P in keyof T]?: T[P] | undefined; }\">Partial</data-lsp><<data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n}\">Person</data-lsp>>;` `type OptionalPerson = {\n    name?: string | undefined;\n    age?: number | undefined;\n}`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n}\">Person</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number;};type  <data-lsp lsp=\"type ReadonlyPerson = {\n    readonly name: string;\n    readonly age: number;\n}\" style=\"border-bottom:solid 2px lightgrey\">ReadonlyPerson</data-lsp>  =  <data-lsp lsp=\"type Readonly<T> = { readonly [P in keyof T]: T[P]; }\">Readonly</data-lsp><<data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n}\">Person</data-lsp>>;` `type ReadonlyPerson = {\n    readonly name: string;\n    readonly age: number;\n}`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type ThreeLetterRecord = {\n    one: string;\n    two: string;\n    three: string;\n}\" style=\"border-bottom:solid 2px lightgrey\">ThreeLetterRecord</data-lsp>  =  <data-lsp lsp=\"type Record<K extends string | number | symbol, T> = { [P in K]: T; }\">Record</data-lsp><\"one\"  |  \"two\"  |  \"three\",  string>;` `type ThreeLetterRecord = {\n    one: string;\n    two: string;\n    three: string;\n}`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n    address: string;\n}\">Person</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number; <data-lsp lsp=\"(property) address: string\">address</data-lsp>:  string;};type  <data-lsp lsp=\"type PersonNameAndAge = {\n    name: string;\n    age: number;\n}\" style=\"border-bottom:solid 2px lightgrey\">PersonNameAndAge</data-lsp>  =  <data-lsp lsp=\"type Pick<T, K extends keyof T> = { [P in K]: T[P]; }\">Pick</data-lsp><<data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n    address: string;\n}\">Person</data-lsp>,  \"name\"  |  \"age\">;` `type PersonNameAndAge = {\n    name: string;\n    age: number;\n}`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n    address: string;\n}\">Person</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number; <data-lsp lsp=\"(property) address: string\">address</data-lsp>:  string;};type  <data-lsp lsp=\"type PersonWithoutAddress = {\n    name: string;\n    age: number;\n}\" style=\"border-bottom:solid 2px lightgrey\">PersonWithoutAddress</data-lsp>  =  <data-lsp lsp=\"type Omit<T, K extends string | number | symbol> = { [P in Exclude<keyof T, K>]: T[P]; }\">Omit</data-lsp><<data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n    address: string;\n}\">Person</data-lsp>,  \"address\">;` `type PersonWithoutAddress = {\n    name: string;\n    age: number;\n}`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type T1 = string | number | boolean\">T1</data-lsp>  =  number  |  string  |  boolean;type  <data-lsp lsp=\"type T2 = string | number\" style=\"border-bottom:solid 2px lightgrey\">T2</data-lsp>  =  <data-lsp lsp=\"type Exclude<T, U> = T extends U ? never : T\">Exclude</data-lsp><<data-lsp lsp=\"type T1 = string | number | boolean\">T1</data-lsp>,  boolean>;` `type T2 = string | number`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type T1 = string | number | boolean\">T1</data-lsp>  =  number  |  string  |  boolean;type  <data-lsp lsp=\"type T2 = string | boolean\">T2</data-lsp>  =  string  |  boolean;type  <data-lsp lsp=\"type T3 = string | boolean\" style=\"border-bottom:solid 2px lightgrey\">T3</data-lsp>  =  <data-lsp lsp=\"type Extract<T, U> = T extends U ? T : never\">Extract</data-lsp><<data-lsp lsp=\"type T1 = string | number | boolean\">T1</data-lsp>,  <data-lsp lsp=\"type T2 = string | boolean\">T2</data-lsp>>;` `type T3 = string | boolean`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type T1 = string | null | undefined\">T1</data-lsp>  =  string  |  null  |  undefined;type  <data-lsp lsp=\"type T2 = string\" style=\"border-bottom:solid 2px lightgrey\">T2</data-lsp>  =  <data-lsp lsp=\"type NonNullable<T> = T &amp; {}\">NonNullable</data-lsp><<data-lsp lsp=\"type T1 = string | null | undefined\">T1</data-lsp>>;` `type T2 = string`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n}\">Person</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number;};type  <data-lsp lsp=\"type ReadOnlyPerson = {\n    readonly name: string;\n    readonly age: number;\n}\" style=\"border-bottom:solid 2px lightgrey\">ReadOnlyPerson</data-lsp>  = { readonly [<data-lsp lsp=\"(type parameter) K\">K</data-lsp>  in  keyof  <data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n}\">Person</data-lsp>]:  <data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n}\">Person</data-lsp>[<data-lsp lsp=\"(type parameter) K\">K</data-lsp>] };` `type ReadOnlyPerson = {\n    readonly name: string;\n    readonly age: number;\n}`\n\n```", "```\ntypescript`type  <data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n}\">Person</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  string; <data-lsp lsp=\"(property) age: number\">age</data-lsp>:  number;};type  <data-lsp lsp=\"type Name = string\" style=\"border-bottom:solid 2px lightgrey\">Name</data-lsp>  =  <data-lsp lsp=\"type Person = {\n    name: string;\n    age: number;\n}\">Person</data-lsp>[\"name\"];` `type Name = string`\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```"]