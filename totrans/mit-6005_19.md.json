["```\npublic class HelloRunnable implements Runnable {\n    public void run() {\n        System.out.println(\"Hello from a thread!\");\n    }\n}\n// ... in the main method:\nnew Thread(new HelloRunnable()).start();\n```", "```\nnew Thread(new Runnable() {\n    public void run() {\n        System.out.println(\"Hello from a thread!\");\n    }\n}).start();\n```", "```\npublic class Moirai {\n    public static void main(String[] args) {\n        Thread clotho = new Thread(new Runnable() {\n            public void run() { System.out.println(\"spinning\"); };\n        });\n        clotho.start();\n        new Thread(new Runnable() {\n            public void run() { System.out.println(\"measuring\"); };\n        }).start();\n        new Thread(new Runnable() {\n            public void run() { System.out.println(\"cutting\"); };\n        });\n    }\n}\n```", "```\npublic class Parcae {\n    public static void main(String[] args) {\n        Thread nona = new Thread(new Runnable() {\n            public void run() { System.out.println(\"spinning\"); };\n        });\n        nona.run();\n        Runnable decima = new Runnable() {\n            public void run() { System.out.println(\"measuring\"); };\n        };\n        decima.run();\n        // ...\n    }\n}\n```", "```\n// suppose all the cash machines share a single bank account\nprivate static int balance = 0;\n\nprivate static void deposit() {\n    balance = balance + 1;\n}\nprivate static void withdraw() {\n    balance = balance - 1;\n}\n```", "```\ndeposit(); // put a dollar in\nwithdraw(); // take it back out\n```", "```\n// each ATM does a bunch of transactions that\n// modify balance, but leave it unchanged afterward\nprivate static void cashMachine() {\n    for (int i = 0; i < TRANSACTIONS_PER_MACHINE; ++i) {\n        deposit(); // put a dollar in\n        withdraw(); // take it back out\n    }\n}\n```", "```\n// version 1\nprivate static void deposit() { balance = balance + 1; }\nprivate static void withdraw() { balance = balance - 1; }\n\n// version 2\nprivate static void deposit() { balance += 1; }\nprivate static void withdraw() { balance -= 1; }\n\n// version 3\nprivate static void deposit() { ++balance; }\nprivate static void withdraw() { --balance; }\n```", "```\nprivate boolean ready = false;\nprivate int answer = 0;\n\n// computeAnswer runs in one thread\nprivate void computeAnswer() {\n    answer = 42;\n    ready = true;\n}\n\n// useAnswer runs in a different thread\nprivate void useAnswer() {\n    while (!ready) {\n        Thread.yield();\n    }\n    if (answer == 0) throw new RuntimeException(\"answer wasn't ready!\");\n}\n```", "```\nprivate void computeAnswer() {\n    boolean tmpr = ready;\n    int tmpa = answer;\n\n    tmpa = 42;\n    tmpr = true;\n\n    ready = tmpr;\n                   // <-- what happens if useAnswer() interleaves here?\n                   // ready is set, but answer isn't.\n    answer = tmpa;\n}\n```", "```\npublic class Moirai {\n    public static void main(String[] args) {\n        Thread clotho = new Thread(new Runnable() {\n            public void run() { System.out.println(\"spinning\"); };\n        });\n        clotho.start();\n        new Thread(new Runnable() {\n            public void run() { System.out.println(\"measuring\"); };\n        }).start();\n        new Thread(new Runnable() {\n            public void run() { System.out.println(\"cutting\"); };\n        });\n        // bug! never started\n    }\n}\n```", "```\npublic class Parcae {\n    public static void main(String[] args) {\n        Thread nona = new Thread(new Runnable() {\n            public void run() { System.out.println(\"spinning\"); };\n        });\n        nona.run(); // bug! called run instead of start\n        Runnable decima = new Runnable() {\n            public void run() { System.out.println(\"measuring\"); };\n        };\n        decima.run(); // bug? maybe meant to create a Thread?\n        // ...\n    }\n}\n```", "```\nprivate static int x = 1;\n\npublic static void methodA() {\n  x *= 2;\n  x *= 3;\n}\n\npublic static void methodB() {\n  x *= 5;\n}\n```", "```\nget-balance\nif balance >= 1 then withdraw 1\n```", "```\nprivate static void cashMachine() {\n    for (int i = 0; i < TRANSACTIONS_PER_MACHINE; ++i) {\n        deposit(); // put a dollar in\n        withdraw(); // take it back out\n        System.out.println(balance); // makes the bug disappear!\n    }\n}\n```"]