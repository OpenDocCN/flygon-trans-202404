- en: コマンドライン引数を処理する
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://jsprimer.net/use-case/nodecli/argument-parse/](https://jsprimer.net/use-case/nodecli/argument-parse/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: このユースケースで作成するCLIアプリケーションの目的は、コマンドライン引数として与えられたMarkdownファイルをHTMLへ変換することです。 このセクションでは`node`コマンドでスクリプトを実行する際に引数を渡し、コマンドライン引数としてパースするところまでを行います。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[](#process-object-and-commandline-args)*`process`オブジェクトとコマンドライン引数*'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*コマンドライン引数を扱う前に、まずは`process`オブジェクトについて触れておきます。 `process`オブジェクトはNode.js実行環境のグローバル変数のひとつです。
    `process`オブジェクトが提供するのは、現在のNode.jsの実行プロセスについて、情報の取得と操作をするAPIです。 詳細は[公式ドキュメント](https://nodejs.org/docs/latest-v20.x/api/process.html#process_process)を参照してください。'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: コマンドライン引数へのアクセスを提供するのは、`process`オブジェクトの`argv`プロパティで、文字列の配列になっています。 次のように`main.js`を変更し、`process.argv`をコンソールに出力しましょう。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: main.js
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: このスクリプトを次のようにコマンドライン引数をつけて実行してみましょう。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: このコマンドの実行結果は次のようになります。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 1番目と2番目の要素は常に`node`コマンドと実行されたスクリプトのファイルパスになります。 つまりアプリケーションがコマンドライン引数として使うのは、3番目以降の要素です。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[](#parse-args)*コマンドライン引数をパースする*'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*`process.argv`配列を使えばコマンドライン引数を取得できますが、取得できる情報にはアプリケーションに不要なものも含まれています。 また、文字列の配列として渡されるため、フラグのオンオフのような真偽値を受け取るときにも不便です。
    そのため、アプリケーションでコマンドライン引数を扱うときには、一度パースして扱いやすい値に整形するのが一般的です。'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 今回は[commander](https://github.com/tj/commander.js/)というライブラリを使ってコマンドライン引数をパースしてみましょう。
    文字列処理を自前で行うこともできますが、このような一般的な処理は既存のライブラリを使うと簡単に書けます。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[](#install-commander)*`commander`パッケージをインストールする*'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*commanderは[npm](https://www.npmjs.com/)の`npm install`コマンドを使ってインストールできます。 まだnpmの実行環境を用意できていなければ、先に「[アプリケーション開発の準備](../../setup-local-env/)」の章を参照してください。'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: npmでパッケージをインストールする前に、まずは`package.json`というファイルを作成します。 `package.json`とは、アプリケーションが依存するパッケージの種類やバージョンなどの情報を記録するJSON形式のファイルです。
    `package.json`ファイルのひな形は、`npm init`コマンドで生成できます。 通常は対話式のプロンプトによって情報を設定しますが、ここではすべてデフォルト値で`package.json`を作成する`--yes`オプションを付与します。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '`nodecli`のディレクトリ内で、`npm init --yes`コマンドを実行して`package.json`を作成しましょう。'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 生成された`package.json`ファイルは次のようになっています。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: package.json
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`package.json`ファイルが用意できたら、`npm install`コマンドを使って`commander`パッケージをインストールします。
    このコマンドの引数にはインストールするパッケージの名前とそのバージョンを`@`記号でつなげて指定できます。 バージョンを指定せずにインストールすれば、その時点での最新の安定版が自動的に選択されます。
    次のコマンドを実行して、commanderのバージョン9.0をインストールします。^([1](#fn_1))'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: インストールが完了すると、`package.json`ファイルは次のようになっています。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: package.json
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: また、`npm install`をすると同時に`package-lock.json`ファイルが生成されています。 このファイルはnpmがインストールしたパッケージの、実際のバージョンを記録するためのものです。
    先ほどcommanderのバージョンを`9.0`としましたが、実際にインストールされるのは`9.0.x`に一致する最新のバージョンです。 `package-lock.json`ファイルには実際にインストールされたバージョンが記録されています。
    これによって、再び`npm install`を実行したときに、異なるバージョンがインストールされるのを防ぎます。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[](#esmodule)*ECMAScriptモジュールを使う*'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*今回のユースケースでは、インストールした`commander`パッケージを利用するにあたって、基本文法で学んだ[ECMAScriptモジュール](../../../basic/module/)を使います。
    `commander`パッケージはECMAScriptモジュールに対応しているため、次のように`import`文を使って変数や関数などをインポートできます。'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ただし、ECMAScriptモジュールのパッケージをインポートするには、インポート元のファイルもECMAScriptモジュールでなければなりません。 なぜなら、[Node.js](https://nodejs.org/)は[CommonJSモジュール](https://nodejs.org/docs/latest/api/modules.html)という別のモジュール形式もサポートしており、CommonJSモジュール形式では`import`文は利用できないためです。
    そのため、これから実行するJavaScriptファイルがどちらの形式であるかをNode.jsに教える必要があります。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Node.jsはもっとも近い上位ディレクトリの `package.json` が持つ `type` フィールドの値によってJavaScriptファイルのモジュール形式を判別します。
    `type`フィールドが `module` であればECMAScriptモジュールとして、`type`フィールドが `commonjs` であればCommonJSモジュールとして扱われます。^([2](#fn_2))
    また、JavaScriptファイルの拡張子によって明示的に示すこともできます。拡張子が `.mjs` である場合はECMAScriptモジュールとして、`.cjs`
    である場合はCommonJSモジュールであると判別されます。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 今回は `main.js` を ECMAScriptモジュールとして判別させるために、次のように `package.json` に`type` フィールドを追加します。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: package.json
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[](#commonjs-module)*[コラム] CommonJSモジュール*'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*[CommonJSモジュール](https://nodejs.org/docs/latest/api/modules.html)とは、Node.js環境で利用されているJavaScriptのモジュール化の仕組みです。
    CommonJSモジュールは[ECMAScriptモジュール](../../../basic/module/)の仕様が策定されるより前からNode.jsで使われています。'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 現在はNode.jsでもECMAScriptモジュールがサポートされていますが、`fs` などの標準モジュールはCommonJSモジュールとして提供されています。
    また、サードパーティ製のライブラリや長く開発が続けられているプロジェクトのソースコードなどでも、CommonJSモジュールを利用する場面は少なくありません。
    そのため、この2つのモジュール形式が共存する場合には、開発者はモジュール形式間の相互運用性（互いを組み合わせた時の動作）に注意する必要があります。^([3](#fn_3))
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Node.jsはECMAScriptモジュールからCommonJSモジュールをインポートする方向の相互運用性をサポートしています。 たとえば、次のようにCommonJSモジュールで`exports`オブジェクトを使ってエクスポートされたオブジェクトは、ECMAScriptモジュールで`import`文を使ってインポートできます。
    Node.jsの標準モジュールはECMAScriptモジュールのJavaScriptファイルからでも利用できますが、それはこの相互運用性によるものです。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 一方で、CommonJSモジュールからECMAScriptモジュールをインポートする方向の相互運用性はサポートされていません。 もし既存のライブラリから提供されるモジュールがECMAScriptモジュールであれば、それを使うアプリケーションもECMAScriptモジュールで書かれている必要があります。
    複数のパッケージを利用しながらNode.jsアプリケーションを開発する際には、相互運用性に注意しておく必要があるでしょう。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[](#get-file-path)*コマンドライン引数からファイルパスを取得する*'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*先ほどインストールした`commander`パッケージを使って、コマンドライン引数として渡されたファイルパスを取得しましょう。 このCLIアプリケーションでは、処理の対象とするファイルパスを次のようなコマンドの形式で受け取ります。'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: commanderでコマンドライン引数をパースするためには、インポートした`program`オブジェクトの`parse`メソッドにコマンドライン引数を渡します。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`parse`メソッドを呼び出すと、コマンドライン引数をパースした結果を`program`オブジェクトから取り出せるようになります。 今回の例では、ファイルパスは`program.args`配列に格納されています。
    `program.args`配列には`--key=value`のようなオプションや`--flag`のようなフラグを取り除いた残りのコマンドライン引数が順番に格納されています。'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: それでは`main.js`を次のように変更し、コマンドライン引数で渡されたファイルパスを取得しましょう。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: main.js
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 次のコマンドを実行すると、`program.args`配列に格納された`./sample.md`文字列が取得されてコンソールに出力されます。 `./sample.md`は`process.argv`配列では3番目に存在していましたが、パース後の`program.args`配列では1番目になって扱いやすくなっています。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: このように、`process.argv`配列を直接扱うよりも、commanderのようなライブラリを使うことで宣言的にコマンドライン引数を定義して処理できます。
    次のセクションではコマンドライン引数から取得したファイルパスを元に、ファイルを読み込む処理を追加していきます。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[](#syntax-error-import-statement)*[エラー例] SyntaxError: Cannot use import statement
    outside a module*'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*「`import`文をECMAScriptモジュールの外で使うことはできません」というエラーが出ています。`main.js` の実行でこのエラーが出る場合は、Node.jsが`main.js`ファイルをECMAScriptモジュールだと判別できていないことを意味します。'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[ECMAScriptモジュールを使う](#esmodule)で述べたように、`package.json`の`type`フィールドを`module`に設定しましょう。'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[](#section-checklist)*このセクションのチェックリスト*'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**   `process.argv`配列に`node`コマンドのコマンドライン引数が格納されていることを確認した'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: npmを使ってパッケージをインストールする方法を理解した
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ECMAScriptモジュールを使ってパッケージを読み込めることを確認した
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: commanderを使ってコマンドライン引数をパースできることを確認した
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: コマンドライン引数で渡されたファイルパスを取得してコンソールに出力できた
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ¹. --saveオプションをつけてインストールしたのと同じ意味。npm 5.0.0からは--saveがデフォルトオプションとなりました。 [↩](#reffn_1
    "Jump back to footnote [1] in the text.")
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ². [package.json and file extensions](https://nodejs.org/api/packages.html#packagejson-and-file-extensions)
    [↩](#reffn_2 "Jump back to footnote [2] in the text.")
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ³. [Interoperability with CommonJS](https://nodejs.org/api/esm.html#interoperability-with-commonjs)
    [↩](#reffn_3 "Jump back to footnote [3] in the text.")********
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ³. [与 CommonJS 的互操作性](https://nodejs.org/api/esm.html#interoperability-with-commonjs)
    [↩](#reffn_3 "跳回文本中的脚注 [3]")********
