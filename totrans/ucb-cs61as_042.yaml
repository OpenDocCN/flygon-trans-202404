- en: Homework 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Type the following command at the terminal to copy the template file to the
    current directory (note the period at the end):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Or you can download the template [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw2.rkt).
  prefs: []
  type: TYPE_NORMAL
- en: Autograder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are working on the lab computers, the `grader` command will run the autograder.
    If you are working on your own personal machine, you should download [grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)
    and the [HW 2 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw2-tests.rkt).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Write a procedure `substitute` that takes three arguments: a sentence, an old
    word, and a new word. It should return a copy of the sentence, but with every
    occurrence of the old word replaced by the new word.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Type each of the following into Racket, and note the results. See if you can
    predict the results before letting Racket do the computation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`make-adder` is a function that returns another function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consider a function `g` for which the expression
  prefs: []
  type: TYPE_NORMAL
- en: '`((g) 1)`'
  prefs: []
  type: TYPE_NORMAL
- en: returns the value `3` when evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: Determine how many arguments `g` has. In one word, also describe as best you
    can the type of value returned by `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For each of the following expressions, what must `f` be in order for the evaluation
    of the expression to succeed, without causing an error? For each expression, give
    a definition of `f` such that evaluating the expression will not cause an error,
    and say what the expression's value will be, given your definition. To be clear,
    for number one, define `f1`, for number 2, define `f2`, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '`f1`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(f2)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(f3 3)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`((f4))`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(((f5)) 3)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Find the values of the following expressions, where `add1` is a primitive procedure
    that adds one to its argument, and `t` is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Work these out before trying them on the computer.
  prefs: []
  type: TYPE_NORMAL
- en: '`((t add1) 0)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`((t (t add1)) 0)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(((t t) add1) 0)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Find the values of the following expressions where `t` is defined as in Exercise
    5, and `s` is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Work these out before trying them on the computer
  prefs: []
  type: TYPE_NORMAL
- en: '`((t s) 0)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`((t (t s)) 0)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(((t t) s) 0)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write and test the `make-tester` procedure. Given a word `w` as its argument,
    `make-tester` returns a procedure of one argument `x` that returns `true` if `x`
    is equal to `w` and `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Complete SICP exercises [1.31a](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.31),
    [1.32a](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.32),
    [1.33](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.33),
    [1.40](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.40),
    [1.41](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.41),
    and [1.43](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.43).
    For some of these problems, you will need to read parts of the SICP text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some additional guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: For 1.31a, you should base your `product` function off of the `sum` function
    earlier in the text. It should take four arguments (`term`, `a`, `next`, and `b`).
    Find the `sum` function and figure out what each of these arguments does.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For 1.31a, the function to estimate pi should be called `estimate-pi` (see template).
    It should take in no arguments, and it should estimate pi using at least 100 terms
    of the formula given.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For 1.33, the predicate should be the last argument to `filtered-accumulate`
    (see template).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For 1.33, you should define functions `sum-sq-prime` and `prod-of-some-numbers`
    (see template).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For 1.40, don't worry about learning Newton's method. Simply complete `cubic`,
    which takes in three arguments (`a`, `b`, and `c`) and returns another procedure.
    This procedure should take an input `x` and evaluate the cubic shown in the problem
    at `x`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For 1.43, name your procedure `my-repeated` instead of `repeated` (see template).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Last week you wrote procedure `squares`, that squared each number in its argument
    sentence, and saw `pigl-sent`, that `pigl`ed each word in its argument sentence.
    Generalize this pattern to create a higher order procedure called `my-every` that
    applies an arbitrary procedure, given as an argument, to each word of an argument
    sentence.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the higher order functions, our simply-scheme library provides its own
    versions of the `every` function from the last exercise and the `keep` function
    shown in our lessons. Get familiar with these by working these examples out before
    trying them on the computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(every (lambda (letter) (word letter letter)) ''purple)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(every (lambda (n) (if (even? n) (word n n) n)) ''(781 5 76 909 24))`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(keep even? ''(781 5 76 909 24))`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(keep (lambda (letter) (member? letter ''aeiou)) ''bookkeeper)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(keep (lambda (letter) (member? letter ''aeiou)) ''syzygy)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(keep (lambda (letter) (member? letter ''aeiou)) ''(purple syzygy))`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(keep (lambda (wd) (member? ''e wd)) ''(purple syzygy))`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Submit Your Homework!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  prefs: []
  type: TYPE_NORMAL
