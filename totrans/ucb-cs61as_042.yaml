- en: Homework 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业2
- en: Template
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板
- en: 'Type the following command at the terminal to copy the template file to the
    current directory (note the period at the end):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端上输入以下命令将模板文件复制到当前目录（注意末尾的句点）：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Or you can download the template [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw2.rkt).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以在[这里](http://inst.eecs.berkeley.edu/~cs61as/templates/hw2.rkt)下载模板。
- en: Autograder
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动评分器
- en: If you are working on the lab computers, the `grader` command will run the autograder.
    If you are working on your own personal machine, you should download [grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)
    and the [HW 2 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw2-tests.rkt).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您在实验室计算机上工作，`grader`命令将运行自动评分器��如果您在自己的个人计算机上工作，您应该下载[grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)和[HW
    2 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw2-tests.rkt)。 '
- en: Exercise 1
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1
- en: 'Write a procedure `substitute` that takes three arguments: a sentence, an old
    word, and a new word. It should return a copy of the sentence, but with every
    occurrence of the old word replaced by the new word.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个过程`substitute`，它接受三个参数：一个句子，一个旧单词和一个新单词。它应返回句子的副本，但是将每个旧单词的出现替换为新单词。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Exercise 2
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2
- en: Type each of the following into Racket, and note the results. See if you can
    predict the results before letting Racket do the computation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容输入到Racket中，并注意结果。看看你能否在让Racket进行计算之前预测结果。
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`make-adder` is a function that returns another function.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`make-adder`是一个返回另一个函数的函数。'
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Exercise 3
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3
- en: Consider a function `g` for which the expression
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个函数`g`，对于表达式
- en: '`((g) 1)`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`((g) 1)`'
- en: returns the value `3` when evaluated.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估时返回值为`3`。
- en: Determine how many arguments `g` has. In one word, also describe as best you
    can the type of value returned by `g`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 确定`g`有多少个参数。用一个词描述`g`返回的值的类型。
- en: Exercise 4
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4
- en: For each of the following expressions, what must `f` be in order for the evaluation
    of the expression to succeed, without causing an error? For each expression, give
    a definition of `f` such that evaluating the expression will not cause an error,
    and say what the expression's value will be, given your definition. To be clear,
    for number one, define `f1`, for number 2, define `f2`, etc.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下每个表达式，为了使表达式的评估成功且不会引起错误，`f`必须是什么？对于每个表达式，给出一个`f`的定义，使得评估表达式不会引起错误，并说明根据你的定义，表达式的值是什么。明确地说，对于第一个，定义`f1`，对于第二个，定义`f2`，依此类推。
- en: '`f1`'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`f1`'
- en: '`(f2)`'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(f2)`'
- en: '`(f3 3)`'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(f3 3)`'
- en: '`((f4))`'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`((f4))`'
- en: '`(((f5)) 3)`'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(((f5)) 3)`'
- en: Exercise 5
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5
- en: 'Find the values of the following expressions, where `add1` is a primitive procedure
    that adds one to its argument, and `t` is defined as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 找出以下表达式的值，其中`add1`是一个将其参数加一的原始过程，`t`定义如练习5中所示：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Work these out before trying them on the computer.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机上尝试这些之前先解决它们。
- en: '`((t add1) 0)`'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`((t add1) 0)`'
- en: '`((t (t add1)) 0)`'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`((t (t add1)) 0)`'
- en: '`(((t t) add1) 0)`'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(((t t) add1) 0)`'
- en: Exercise 6
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习6
- en: 'Find the values of the following expressions where `t` is defined as in Exercise
    5, and `s` is defined as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 找出以下表达式的值，其中`t`的定义如练习5中所示，`s`定义如下：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Work these out before trying them on the computer
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机上尝试这些之前先解决它们
- en: '`((t s) 0)`'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`((t s) 0)`'
- en: '`((t (t s)) 0)`'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`((t (t s)) 0)`'
- en: '`(((t t) s) 0)`'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(((t t) s) 0)`'
- en: Exercise 7
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7
- en: Write and test the `make-tester` procedure. Given a word `w` as its argument,
    `make-tester` returns a procedure of one argument `x` that returns `true` if `x`
    is equal to `w` and `false` otherwise.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 编写并测试`make-tester`过程。给定一个单词`w`作为其参数，`make-tester`返回一个带有一个参数`x`的过程，如果`x`等于`w`则返回`true`，否则返回`false`。
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Exercise 8
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习8
- en: Complete SICP exercises [1.31a](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.31),
    [1.32a](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.32),
    [1.33](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.33),
    [1.40](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.40),
    [1.41](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.41),
    and [1.43](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.43).
    For some of these problems, you will need to read parts of the SICP text.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 完成SICP练习[1.31a](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.31)，[1.32a](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.32)，[1.33](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.33)，[1.40](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.40)，[1.41](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.41)和[1.43](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.43)。对于其中一些问题，您需要阅读SICP文本的部分。
- en: 'Some additional guidelines:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一些额外的指导方针：
- en: For 1.31a, you should base your `product` function off of the `sum` function
    earlier in the text. It should take four arguments (`term`, `a`, `next`, and `b`).
    Find the `sum` function and figure out what each of these arguments does.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于1.31a，你应该基于文本中较早的`sum`函数构建你的`product`函数。它应该接受四个参数（`term`、`a`、`next`和`b`）。找到`sum`函数并弄清楚每个参数的作用。
- en: For 1.31a, the function to estimate pi should be called `estimate-pi` (see template).
    It should take in no arguments, and it should estimate pi using at least 100 terms
    of the formula given.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于1.31a，估算π的函数应该被称为`estimate-pi`（参见模板）。它不应接受任何参数，并且应使用给定公式的至少100个项来估算π。
- en: For 1.33, the predicate should be the last argument to `filtered-accumulate`
    (see template).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于1.33，谓词应该是`filtered-accumulate`的最后一个参数（参见模板）。
- en: For 1.33, you should define functions `sum-sq-prime` and `prod-of-some-numbers`
    (see template).
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于1.33，你应该定义函数`sum-sq-prime`和`prod-of-some-numbers`（参见模板）。
- en: For 1.40, don't worry about learning Newton's method. Simply complete `cubic`,
    which takes in three arguments (`a`, `b`, and `c`) and returns another procedure.
    This procedure should take an input `x` and evaluate the cubic shown in the problem
    at `x`.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于1.40，不用担心学习牛顿法。只需完成`cubic`，它接受三个参数（`a`、`b`和`c`）并返回另一个过程。该过程应接受一个输入`x`，并在`x`处计算问题中显示的三次方程。
- en: For 1.43, name your procedure `my-repeated` instead of `repeated` (see template).
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于1.43，将你的过程命名为`my-repeated`而不是`repeated`（参见模板）。
- en: Exercise 9
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习9
- en: Last week you wrote procedure `squares`, that squared each number in its argument
    sentence, and saw `pigl-sent`, that `pigl`ed each word in its argument sentence.
    Generalize this pattern to create a higher order procedure called `my-every` that
    applies an arbitrary procedure, given as an argument, to each word of an argument
    sentence.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上周你写了一个名为`squares`的过程，它会将其参数句子中的每个数字平方，并看到了`pigl-sent`，它会将其参数句子中的每个单词进行`pigl`处理。将这种模式概括为创建一个名为`my-every`的高阶过程，该过程将作为参数给定的任意过程应用于参数句子中的每个单词。
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Exercise 10
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10
- en: 'Using the higher order functions, our simply-scheme library provides its own
    versions of the `every` function from the last exercise and the `keep` function
    shown in our lessons. Get familiar with these by working these examples out before
    trying them on the computer:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用高阶函数，我们的`simply-scheme`库提供了上一练习中的`every`函数和我们课程中展示的`keep`函数的自己版本。在尝试在计算机上运行之前，通过解决这些示例来熟悉它们：
- en: '`(every (lambda (letter) (word letter letter)) ''purple)`'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(every (lambda (letter) (word letter letter)) ''purple)`'
- en: '`(every (lambda (n) (if (even? n) (word n n) n)) ''(781 5 76 909 24))`'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(every (lambda (n) (if (even? n) (word n n) n)) ''(781 5 76 909 24))`'
- en: '`(keep even? ''(781 5 76 909 24))`'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(keep even? ''(781 5 76 909 24))`'
- en: '`(keep (lambda (letter) (member? letter ''aeiou)) ''bookkeeper)`'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(keep (lambda (letter) (member? letter ''aeiou)) ''bookkeeper)`'
- en: '`(keep (lambda (letter) (member? letter ''aeiou)) ''syzygy)`'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(keep (lambda (letter) (member? letter ''aeiou)) ''syzygy)`'
- en: '`(keep (lambda (letter) (member? letter ''aeiou)) ''(purple syzygy))`'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(keep (lambda (letter) (member? letter ''aeiou)) ''(purple syzygy))`'
- en: '`(keep (lambda (wd) (member? ''e wd)) ''(purple syzygy))`'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(keep (lambda (wd) (member? ''e wd)) ''(purple syzygy))`'
- en: Submit Your Homework!
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交你的作业！
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有关说明，请参阅[此指南](../submit.html)。它涵盖了基本的终端命令和作业提交。
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在提交作业时遇到任何问题，请不要犹豫向助教寻求帮助！
