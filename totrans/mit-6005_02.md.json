["```\nint a = 5;     // (1)\nif (a > 10) {  // (2)\n    int b = 2; // (3)\n} else {       // (4)\n    int b = 4; // (5)\n}              // (6)\nb *= 3;        // (7)\n```", "```\nfahrenheit = 212.0\ncelsius = (fahrenheit - 32) * 5/9\n```", "```\nclass Tortoise:\n    def __init__(self):\n        self.position = 0\n\n    def forward(self):\n        self.position += 1\n\npokey = Tortoise()\npokey.forward()\nprint pokey.position\n```", "```\npublic void forward() {\n    // self.position += 1 (Python)\n}\n```", "```\npublic class Tortoise {\n\n    private int position = 0;      // (1)\n    static int position = 0;       // (2)\n\n    public Tortoise() {\n        int position = 0;          // (3)\n        int self.position = 0;     // (4)\n        int this.position = 0;     // (5)\n        int Tortoise.position = 0; // (6)\n    }\n    // ...\n}\n```", "```\npublic class Tortoise {\n\n    private int position;          // (1)\n    static int position;           // (2)\n\n    public Tortoise() {\n        self.position = 0;         // (3)\n        this.position = 0;         // (4)\n        Tortoise.position = 0;     // (5)\n    }\n    // ...\n}\n```", "```\nString s = \"a\";\ns = s + \"b\";\n```", "```\nStringBuilder sb = new StringBuilder(\"a\");\nsb.append(\"b\");\n```", "```\nfinal int n = 5;\n```", "```\nlst = [ \"a\", \"b\", \"c\" ]\n```", "```\nmap = { \"apple\": 5, \"banana\": 7 }\n```", "```\nString[] arr = { \"a\", \"b\", \"c\" };\n```", "```\nArrays.asList(new String[] { \"a\", \"b\", \"c\" })\n```", "```\nArrays.asList(\"a\", \"b\", \"c\")\n```", "```\nList<String> cities;        // a List of Strings\nSet<Integer> numbers;       // a Set of Integers\nMap<String,Turtle> turtles; // a Map with String keys and Turtle values\n```", "```\nsequence.add(5);              // add 5 to the sequence\nint second = sequence.get(1); // get the second element\n```", "```\nList<String> firstNames = new ArrayList<String>();\nList<String> lastNames = new LinkedList<String>();\n```", "```\nList<String> firstNames = new ArrayList<>();\nList<String> lastNames = new LinkedList<>();\n```", "```\nSet<Integer> numbers = new HashSet<>();\n```", "```\nMap<String,Turtle> turtles = new HashMap<>();\n```", "```\nList<String> cities        = new ArrayList<>();\nSet<Integer> numbers       = new HashSet<>();\nMap<String,Turtle> turtles = new HashMap<>();\n```", "```\nfor city in cities:\n    print city\n\nfor num in numbers:\n    print num\n\nfor key in turtles:\n    print \"%s: %s\" % (key, turtles[key])\n```", "```\nfor (String city : cities) {\n    System.out.println(city);\n}\n\nfor (int num : numbers) {\n    System.out.println(num);\n}\n```", "```\nfor (String key : turtles.keySet()) {\n    System.out.println(key + \": \" + turtles.get(key));\n}\n```", "```\nfor (int ii = 0; ii < cities.size(); ii++) {\n    System.out.println(cities.get(ii));\n}\n```", "```\nMap<String, Double> treasures = new HashMap<>();\nString x = \"palm\";\ntreasures.put(\"beach\", 25.);\ntreasures.put(\"palm\", 50.);\ntreasures.put(\"cove\", 75.);\ntreasures.put(\"x\", 100.);\ntreasures.put(\"palm\", treasures.get(\"palm\") + treasures.size());\ntreasures.remove(\"beach\");\ndouble found = 0;\nfor (double treasure : treasures.values()) {\n    found += treasure;\n}\n```", "```\nMap<String, TreasureChest> treasures = new HashMap<>();\ntreasures.put(\"beach\", new TreasureChest(25));\nTreasureChest result = treasures.putIfAbsent(\"beach\", new TreasureChest(75));\n```", "```\nMap<String, String> translations = new HashMap<>();\ntranslations.put(\"green\", \"verde\");\n??? result = translations.replace(\"green\", \"verde\", \"ahdar\");\n```"]