- en: Lecture 18 - Calibration II
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Convocation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Exam: 9.00, August 8'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First milestone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Route finding is part of this milestone only so that you can do things that
    show your calibration to be correct. For milestone 2 you will have to do route
    finding on track graphs with edges missing, so choose an approach to route finding
    that generalizes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the demo you can use your preferred train and your preferred track, but only
    if they are working, and either may not be working. In that case we expect you
    to run your demo using another train and/or another track. Be prepared!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Calibration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constant Jerk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Third order curve for position, second order for velocity, linear acceleration.
    We usually go one better, and try to minimize jerk over the whole journey.
  prefs: []
  type: TYPE_NORMAL
- en: Minimize Jerk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Acceleration/Deceleration is continuous
  prefs: []
  type: TYPE_NORMAL
- en: The result is a fourth order curve in position, third order in velocity, which
    is what you try to achieve when you drive.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Is it Worth Having an Explicit Function?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can calculate position explicitly without having to do numerical integration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Euler integration is unstable because of accumulating error.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can calculate the parameters of a function with less measurement. How?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start at x = t = 0, which assumes that you get the same function regrardless
    of position on the track and time of day.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Check deceleration inverse of acceleration?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '&c.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The idea is that the person who programmed acceleration/deceleration into the
    train was lazy, so there's probably one basic function used over and over again
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Drawbacks
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You need to check that the functional form you have is the right one, or a right-enough
    one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For practical purposes small look-up tables may be perfectly adequate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finding Parameters for an Explicit Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are trying x(t) as a fourth order polynomial in t.
  prefs: []
  type: TYPE_NORMAL
- en: The command to change speed occurs at t1\. At t1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x(t1) = x1,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: v(t1) = v1, and
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a(t1) = 0.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The velocity change it complete at the unknown time t2\. At t2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x(t2) is unknown,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: v(t2) = v2, and
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a(t2) = 0.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easiest to express the polynomial in terms of y = ( t-t1 )/(t2 - t1).
    Why?
  prefs: []
  type: TYPE_NORMAL
- en: Then write
  prefs: []
  type: TYPE_NORMAL
- en: x(t) = (A/24) y^4 + (B/6) y^3 + (C/2) y^2 + D y + E
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: v(t) = [ (A/6) y^3 + (B/2) y^2 +C y + D ] / (t2 - t1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a(t) = [ (A/2) y^2 + B y + C ] / (t2 - t1)^2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and use the equations above to solve for the five parameters in terms of t1\.
    Then, you need only measure t1 to know the relevant kinematic functions.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed how to measure t1 in the second step.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Measured Values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You test the measured values by
  prefs: []
  type: TYPE_NORMAL
- en: driving the train around the track,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: predicting when it will arrive at a sensor,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: measuring when it actually arrives at the sensor, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: calculating the disagreement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you have the disagreement which is, by definition non-zero, but which
    may be measured as zero, you have to decide the cause:'
  prefs: []
  type: TYPE_NORMAL
- en: random error,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incorrect measurement,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incorrect parameter estimation,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incorrect implementation of a correct function, or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incorrect function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have fun.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Anthropomorphic Programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We all, even most programmers (!), have effective intuitions about human relations
  prefs: []
  type: TYPE_NORMAL
- en: We use them to `understand' pets, which means attributing to them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: goals
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: knowledge
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: capability
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: emotions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why not programs?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: apply them to intertask relationships
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks are independent entities
  prefs: []
  type: TYPE_NORMAL
- en: Understand them by thinking about them as if they have capabilities and goals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you are developing something like the train application you are defining
    roles and relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Servers and Attendant Tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why do servers need attendant tasks?
  prefs: []
  type: TYPE_NORMAL
- en: What happens if a server calls AwaitEvent?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1\. Proprietor with a Notifier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Proprietor `owns' a service, which usually means a resource.
  prefs: []
  type: TYPE_NORMAL
- en: Think of the owner at the counter of an old-fashioned store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store'' means where things are stored;'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: it's in the back and only the proprietor can access it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Many clients come to the front and are processed one by one.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment. The modern `store' is considered by many to be the most important innovation
    of the 20th century. (Yes, including the transistor, the computer, quantum mechanics,
    antibiotics, etc.) A whole lot of work that was previously done by store personnel
    is now done by the client. This is possible only because extensive codes of conduct
    have been internalized by clients. (That is, a large collection of new behaviour
    norms have been created and propagated.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Somebody has to sit out back waiting for the truck and bringing it to the proprietor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel is handling hardware in this example
  prefs: []
  type: TYPE_NORMAL
- en: Notifier Code for a UART
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Proprietor/Notifier Code for a UART
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Notifier is usually of higher priority than server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice the early reply in the proprietor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When, and how, do interrupts get turned on and/or cleared?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who coordinates hardware ownership?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have made the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: exhibit duality explicitly
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: easy to break into parts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: easy to extend
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Using a Courier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Simplest is best
  prefs: []
  type: TYPE_NORMAL
- en: Transmit Notifier Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Transmit Courier Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Transmit Proprietor Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This gets you through a bottleneck where no more than two events come too fast.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all the calls provide error returns. You can/should use them for
    error recovery
  prefs: []
  type: TYPE_NORMAL
- en: 'static error recovery: debugging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'dynamic error recovery: at run time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another possible arrangement for task creation
  prefs: []
  type: TYPE_NORMAL
- en: Server creates the courier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Couier creates the notifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another possible arrangement for initialization
  prefs: []
  type: TYPE_NORMAL
- en: Server Receives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Courier sends to its parentTid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifier sends to its parentTid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed gating
  prefs: []
  type: TYPE_NORMAL
- en: I am showing you collections of tasks implemented together because sets of related
    tasks is a level of organization above the individual task.
  prefs: []
  type: TYPE_NORMAL
- en: E.g., the decision to add a courier requires revision of code within the group,
    but not outside it.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
