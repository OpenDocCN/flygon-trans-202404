- en: Cascading calls
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 级联调用
- en: Cascading calls
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 级联调用
- en: A cascading call means that based on what call is happening another call should
    take place and possibly another one based on that.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 级联调用意味着基于正在发生的调用，应该进行另一个调用，可能还有一个基于那个调用的调用。
- en: Dependant calls
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖调用
- en: A dependant call means the calls needs to happen in order. Call 2 must happen
    after Call 1 has returned. It might even be possible that Call2 needs be specified
    using data from Call 1.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖调用意味着调用必须按顺序进行。调用 2 必须在调用 1 返回后发生。甚至可能需要使用调用 1 的数据来指定调用 2。
- en: 'Imagine you have the following scenario:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你有以下场景：
- en: A user needs to login first
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户需要先登录
- en: Then we can fetch their user details
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们可以获取他们的用户详细信息
- en: Then we can fetch their orders
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们可以获取他们的订单
- en: Promise approach
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 承诺方法
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Rxjs approach
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rxjs 方法
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I've simplied this one a bit in the Rxjs example but imagine instead of
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rxjs 示例中，我简化了这个例子，但请想象
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: it does the proper `ajax()` call like in [Operators and Ajax](operators-and-ajax.html)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它执行适当的 `ajax()` 调用，就像在 [运算符和 Ajax](operators-and-ajax.html) 中一样
- en: Semi dependant
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 半依赖
- en: We can fetch a users details
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以获取用户的详细信息
- en: Then we can fetch Orders and Messages in parallell.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们可以并行获取订单和消息。
- en: Promise approach
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 承诺方法
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Rxjs approach
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rxjs 方法
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: GOTCHAS
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 坑
- en: We are doing `switchMap()` instead of `flatMap()` so we can abandon an ajax
    call if necessary, this will make more sense in [Auto complete recipe](recipes.html)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `switchMap()` 而不是 `flatMap()`，这样我们就可以在必要时放弃一个 ajax 调用，这在 [自动完成配方](recipes.html)
    中会更有意义
