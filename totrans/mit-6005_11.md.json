["```\n class Wallet {\n        private int amount;\n\n        public void loanTo(Wallet that) {\n            // put all of this wallet's money into that wallet\n/*A*/       that.amount += this.amount;\n/*B*/       amount = 0;\n        }\n\n        public static void main(String[] args) {\n/*C*/       Wallet w = new Wallet();\n/*D*/       w.amount = 100;\n/*E*/       w.loanTo(w);\n        }\n    }\n\n    class Person {\n        private Wallet w;\n\n        public int getNetWorth() {\n/*F*/       return w.amount;\n        }\n\n        public boolean isBroke() {\n/*G*/       return Wallet.amount == 0;\n        }\n    }\n```", "```\nthat.amount += this.amount;\n```", "```\namount = 0;\n```", "```\nWallet w = new Wallet();\n```", "```\nw.amount = 100;\n```", "```\nw.loanTo(w);\n```", "```\nreturn w.amount;\n```", "```\nreturn Wallet.amount == 0;\n```", "```\n/** MyString represents an immutable sequence of characters. */\npublic class MyString { \n\n    //////////////////// Example of a creator operation ///////////////\n    /** @param b a boolean value\n     *  @return string representation of b, either \"true\" or \"false\" */\n    public static MyString valueOf(boolean b) { ... }\n\n    //////////////////// Examples of observer operations ///////////////\n    /** @return number of characters in this string */\n    public int length() { ... }\n\n    /** @param i character position (requires 0 <= i < string length)\n     *  @return character at position i */\n    public char charAt(int i) { ... }\n\n    //////////////////// Example of a producer operation /////////////// \n    /** Get the substring between start (inclusive) and end (exclusive).\n     *  @param start starting index\n     *  @param end ending index.  Requires 0 <= start <= end <= string length.\n     *  @return string consisting of charAt(start)...charAt(end-1) */\n    public MyString substring(int start, int end) { ... }\n}\n```", "```\nMyString s = MyString.valueOf(true);\nassertEquals(4, s.length());\nassertEquals('t', s.charAt(0));\nassertEquals('r', s.charAt(1));\nassertEquals('u', s.charAt(2));\nassertEquals('e', s.charAt(3));\n```", "```\nprivate char[] a;\n```", "```\npublic static MyString valueOf(boolean b) {\n    MyString s = new MyString();\n    s.a = b ? new char[] { 't', 'r', 'u', 'e' } \n            : new char[] { 'f', 'a', 'l', 's', 'e' };\n    return s;\n}\n\npublic int length() {\n    return a.length;\n}\n\npublic char charAt(int i) {\n    return a[i];\n}\n\npublic MyString substring(int start, int end) {\n    MyString that = new MyString();\n    that.a = new char[end - start];\n    System.arraycopy(this.a, start, that.a, 0, end - start);\n    return that;\n}\n```", "```\nprivate char[] a;\nprivate int start;\nprivate int end;\n```", "```\npublic static MyString valueOf(boolean b) {\n    MyString s = new MyString();\n    s.a = b ? new char[] { 't', 'r', 'u', 'e' } \n            : new char[] { 'f', 'a', 'l', 's', 'e' };\n    s.start = 0;\n    s.end = s.a.length;\n    return s;\n}\n\npublic int length() {\n    return end - start;\n}\n\npublic char charAt(int i) {\n  return a[start + i];\n}\n\npublic MyString substring(int start, int end) {\n    MyString that = new MyString();\n    that.a = this.a;\n    that.start = this.start + start;\n    that.end = this.start + end;\n    return that;\n}\n```", "```\n/**\n * Represents a family that lives in a household together.\n * A family always has at least one person in it.\n * Families are mutable.\n */\nclass Family {\n    // the people in the family, sorted from oldest to youngest, with no duplicates.\n    public List<Person> people;\n\n    /**\n     * @return a list containing all the members of the family, with no duplicates.\n     */\n    public List<Person> getMembers() {\n        return people;\n    }\n}\n```", "```\nvoid client1(Family f) {\n    // get youngest person in the family\n    Person baby = f.people.get(f.people.size()-1);\n    ...\n}\n```", "```\n/**\n * Represents a family that lives in a household together.\n * A family always has at least one person in it.\n * Families are mutable.\n */\nclass Family {\n    // the people in the family\n    public Set<Person> people;\n\n    /**\n     * @return a list containing all the members of the family, with no duplicates.\n     */\n    public List<Person> getMembers() {\n        return new ArrayList<>(people);\n    }\n}\n```", "```\n/**\n * Represents a family that lives in a\n * household together. A family always\n * has at least one person in it.\n * Families are mutable. */\nclass Family {\n    // the people in the family,\n    // sorted from oldest to youngest,\n    // with no duplicates.\n    public List<Person> people;\n\n    /** @return a list containing all\n     *  the members of the family,\n     *  with no duplicates. */\n    public List<Person> getMembers() {\n        return people;\n    }\n}\n```", "```\n/**\n * Represents a family that lives in a\n * household together. A family always\n * has at least one person in it.\n * Families are mutable. */\nclass Family {\n    // the people in the family\n    public Set<Person> people;\n\n    /**\n     * @return a list containing all\n     * the members of the family,\n     * with no duplicates. */\n    public List<Person> getMembers() {\n        return new ArrayList<>(people);\n    }\n}\n```", "```\nvoid client2(Family f) {\n    // get size of the family\n    int familySize = f.people.size();\n    ...\n}\n```", "```\n/**\n * Represents a family that lives in a\n * household together. A family always\n * has at least one person in it.\n * Families are mutable. */\nclass Family {\n    // the people in the family,\n    // sorted from oldest to youngest,\n    // with no duplicates.\n    public List<Person> people;\n\n    /** @return a list containing all\n     *  the members of the family,\n     *  with no duplicates. */\n    public List<Person> getMembers() {\n        return people;\n    }\n}\n```", "```\n/**\n * Represents a family that lives in a\n * household together. A family always\n * has at least one person in it.\n * Families are mutable. */\nclass Family {\n    // the people in the family\n    public Set<Person> people;\n\n    /**\n     * @return a list containing all\n     * the members of the family,\n     * with no duplicates. */\n    public List<Person> getMembers() {\n        return new ArrayList<>(people);\n    }\n}\n```", "```\nvoid client3(Family f) {\n    // get any person in the family\n    Person anybody = f.getMembers().get(0);\n    ...\n}\n```", "```\n/**\n * Represents a family that lives in a household together.\n * A family always has at least one person in it.\n * Families are mutable.\n */\n```", "```\npublic class Family {\n```", "```\n // the people in the family, sorted from oldest to youngest, with no duplicates.\n```", "```\n private List<Person> people;\n```", "```\n /**\n     * @return a list containing all the members of the family, with no duplicates.\n     */\n```", "```\n public List<Person> getMembers() {\n```", "```\n return people;\n```", "```\n }\n}\n```", "```\n// testing strategy for each operation of MyString:\n//\n// valueOf():\n//    true, false\n// length(): \n//    string len = 0, 1, n\n//    string = produced by valueOf(), produced by substring()\n// charAt(): \n//    string len = 1, n\n//    i = 0, middle, len-1\n//    string = produced by valueOf(), produced by substring()\n// substring():\n//    string len = 0, 1, n\n//    start = 0, middle, len\n//    end = 0, middle, len\n//    end-start = 0, n\n//    string = produced by valueOf(), produced by substring()\n```", "```\n@Test public void testValueOfTrue() {\n    MyString s = MyString.valueOf(true);\n    assertEquals(4, s.length());\n    assertEquals('t', s.charAt(0));\n    assertEquals('r', s.charAt(1));\n    assertEquals('u', s.charAt(2));\n    assertEquals('e', s.charAt(3));\n}\n\n@Test public void testValueOfFalse() {\n    MyString s = MyString.valueOf(false);\n    assertEquals(5, s.length());\n    assertEquals('f', s.charAt(0));\n    assertEquals('a', s.charAt(1));\n    assertEquals('l', s.charAt(2));\n    assertEquals('s', s.charAt(3));\n    assertEquals('e', s.charAt(4));\n}\n\n@Test public void testEndSubstring() {\n    MyString s = MyString.valueOf(true).substring(2, 4);\n    assertEquals(2, s.length());\n    assertEquals('u', s.charAt(0));\n    assertEquals('e', s.charAt(1));\n}\n\n@Test public void testMiddleSubstring() {\n    MyString s = MyString.valueOf(false).substring(1, 2);\n    assertEquals(1, s.length());\n    assertEquals('a', s.charAt(0));\n}\n\n@Test public void testSubstringIsWholeString() {\n    MyString s = MyString.valueOf(false).substring(0, 5);\n    assertEquals(5, s.length());\n    assertEquals('f', s.charAt(0));\n    assertEquals('a', s.charAt(1));\n    assertEquals('l', s.charAt(2));\n    assertEquals('s', s.charAt(3));\n    assertEquals('e', s.charAt(4));\n}\n\n@Test public void testSubstringOfEmptySubstring() {\n    MyString s = MyString.valueOf(false).substring(1, 1).substring(0, 0);\n    assertEquals(0, s.length());\n}\n```", "```\n/** Immutable datatype representing a student's progress through school. */\nclass Student {\n\n    /** make a freshman */\n    public Student() { ... }\n\n    /** @return a student promoted to the next year, i.e.\n           freshman returns a sophomore, \n           sophomore returns a junior,\n           junior returns a senior,\n           senior returns an alum,\n           alum stays an alum and can't be promoted further. */   \n    public Student promote() { ... }\n\n    /** @return number of years of school completed, i.e.\n           0 for a freshman, 4 for an alum */\n    public int getYears() { ... }\n\n}\n```"]