- en: 'Chapter 5: Imperative Programming'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The imperative is to define what is right and do it.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Barbara Jordan
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 5.1 A Computer that Knows You (Better than You Know Yourself?)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These days it seems that just about every website out there is trying to recommend
    something. Websites recommend books, movies, music, and activities. Some even
    recommend friends!
  prefs: []
  type: TYPE_NORMAL
- en: How does Netflix know what movies we’re likely to enjoy watching or Amazon know
    what we’ll like to read?
  prefs: []
  type: TYPE_NORMAL
- en: '![../Images/Alien6.PNG](../Images/Alien6.PNG)'
  prefs: []
  type: TYPE_IMG
- en: '*Netflix recommended the movie “Alien” to me.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer to this question lies in a broad and important subfield of computer
    science: *data mining*. Data mining focuses on extracting useful information from
    very large quantities of unstructured data.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will examine a simplified version of a fundamental data mining
    algorithm called *collaborative filtering (CF)*. Collaborative filtering is widely
    used in many successful recommendation systems, as well as many other application
    areas where there’s a lot of data to be studied (e.g., financial markets, geological
    data, biological data, web pages, etc.). Our goal in this chapter is to build
    a music recommender system that uses a basic version of the CF approach.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, our recommender system and our CF approach will necessarily be simplified.
    To build an industrial-strength recommender system is quite complicated. The system
    that won the Netflix prize (see [http://www.netflixprize.com](http://www.netflixprize.com)
    for more details) consists of several different sophisticated algorithms. See
    the paper “The BellKor Solution to the Netflix Grand Prize” by Yehuda Koren at
    [http://www.netflixprize.com/assets/GrandPrize2009_BPC_BellKor.pdf](http://www.netflixprize.com/assets/GrandPrize2009_BPC_BellKor.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: To motivate the idea behind collaborative filtering, let’s go back to the dark
    ages before the World Wide Web became pervasive. In those ancient times – perhaps
    before you were born – people discovered movies, books, restaurants, and music
    by asking for recommendations from people whom they knew to have tastes similar
    to their own.
  prefs: []
  type: TYPE_NORMAL
- en: 'Collaborative filtering systems work on this same fundamental principle–they
    find people who generally like the same things you do, and then recommend the
    things that they like that you might not have discovered yet. Actually, this is
    only one type of collaborative filtering called *user-based CF*. If you’re dying
    to learn more about different types of CF, good! Keep taking CS courses. Or for
    a more immediate gratification, read the Wikipedia page: [http://en.wikipedia.org/wiki/Collaborative_filtering](http://en.wikipedia.org/wiki/Collaborative_filtering)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s consider a simple example in which a system is trying to recommend music
    you might like. First, the system needs to know something about your tastes, so
    you have to give it some information about what you like. Let’s say you tell the
    system you like Lady Gaga, Katy Perry, Justin Bieber and Maroon 5.
  prefs: []
  type: TYPE_NORMAL
- en: '![../Images/Alien6.PNG](../Images/Alien6.PNG)'
  prefs: []
  type: TYPE_IMG
- en: '*I talked to your roommate and learned that those are your favorite groups,
    so don’t try to deny it!*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The system knows about the following additional five “stored” users (users
    for which we’ve already stored some data):'
  prefs: []
  type: TYPE_NORMAL
- en: April likes Maroon 5, The Rolling Stones and The Beatles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ben likes Lady Gaga, Adele, Kelly Clarkson, The Dixie Chicks and Lady Antebellum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cory likes Kelly Clarkson, Lady Gaga, Katy Perry, Justin Bieber and Lady Antebellum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dave likes The Beatles, Maroon 5, Eli Young Band and Scotty McCreery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edgar likes Adele, Maroon 5, Katy Perry, and Bruno Mars.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Determining a recommendation for you involves two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine which user (or users) have tastes most similar to yours.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose and rank artists that the similar user likes. These are your recommendations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Of course, there are many algorithms for performing each of the above steps,
    and many interesting problems that can arise in performing them, but again we
    will keep things relatively simple here. Our system will use the following simple
    CF algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: For each user, count the number of matching artists between your profile and
    the profile of that user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose the user with the highest number of matches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommend the artists who appear on their list and not on yours.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So in the above example, the system determines that Cory has the greatest overlap
    with you: He likes three of the same artists you like (Lady Gaga, Katy Perry and
    Justin Bieber) whereas none of the others have more than two groups in common
    with you. So, the recommendation system chooses Cory as the person whose tastes
    are most similar to yours. It also sees that Cory likes Lady Antebellum and Kelly
    Clarkson and therefore recommends that you check out these additional artists.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an admittedly simplified example and you can probably come up with
    a number of good questions about this approach. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: What if I already know that I don’t like Kelly Clarkson? How could the system
    use this information?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What if there are multiple people who tie for the best match with my tastes?
    Conversely, what if no one matches my tastes?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a real system, there are millions of users. How can the system efficiently
    find the best match?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of these answers are beyond the scope of this chapter, but we encourage
    you to think about how *you* might answer these questions as you read through
    the rest of this chapter. If you’re intrigued, great! This is exactly the kind
    of stuff you’ll learn as you continue your CS studies. But for now, back to the
    foundations for our music recommendation system.
  prefs: []
  type: TYPE_NORMAL
- en: '5.1.1 Our Goal: A Music Recommender System'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the rest of this chapter we will build a music recommender system that implements
    the basic collaborative filtering algorithm described above. The transcript below
    shows an example of an interaction with the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The system keeps track of users and their preferences. As more users rate more
    songs, the system can generate additional recommendations, both for new and existing
    users. So, the next time Christine uses the system, she’s likely to get some new
    recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: Before we introduce the techniques that we’ll use to implement the recommendation
    system, take a few moments to think about the steps involved in the program demonstrated
    above. What data do you need to gather and store? How do you need to process the
    data? What do you need to produce as output?
  prefs: []
  type: TYPE_NORMAL
- en: 'Although there are many ways to actually write the program, the underlying
    components are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to gather input from the user;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to repeat a task (e.g., asking for the user’s preferred artists,
    comparing against stored users’ preferences) many times;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to store and manipulate data in different ways (e.g., storing the
    user’s responses, manipulating the stored users’ preferences); and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to save data between program runs, and to load saved data (e.g.,
    loading the stored users’ preferences from a file, saving the current user’s preferences
    to a file).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throughout the rest of this chapter we will learn ways to perform each of the
    above tasks, ultimately resulting in a fully-functional music recommender system.
  prefs: []
  type: TYPE_NORMAL
- en: 5.2 Getting Input from the User
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first task that we have listed above is to get input from the user. Fortunately,
    this is a simple task thanks to Python’s built-in `input` function. (This function
    is called `raw_input` in Python 2.) Here’s an example of some code that uses the
    `input` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s how that code looks when it is run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The function `raw_input` takes one argument: a string that will be printed
    when the `raw_input` function is run (e.g., the string `''What is your name?''`
    in the example above). When Python sees the `raw_input` command, it prints that
    string and then waits for the user to type in her own string. The user types in
    a string and presses Return (or Enter). At that point, Python assigns the user’s
    input string to the variable appearing on the left-hand side of the = sign. In
    the example above, the string that the user typed in will be assigned to the variable
    `name`.'
  prefs: []
  type: TYPE_NORMAL
- en: Python’s `raw_input` function will always return a string. If you want that
    string to be converted into something else, like an integer or a floating point
    number (a number with a decimal point – also known as a “float”), that can be
    done using Python’s data conversion functions. In the example below, we take the
    user’s input string and convert it into a floating point number.
  prefs: []
  type: TYPE_NORMAL
- en: '[ch05_42.html](ch05_42.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the shell, this should appear as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../Images/Alien6.PNG](../Images/Alien6.PNG)'
  prefs: []
  type: TYPE_IMG
- en: '*Proving that watermelons don’t float!*'
  prefs: []
  type: TYPE_NORMAL
- en: Note that converting data from one type to another (e.g., from strings to floats)
    can be “risky.” In the example above, we converted the user’s input string “15”
    into the floating point number \(15.0\). However, had the user entered the string
    “watermelon”, Python’s attempt to convert that to a floating point number would
    have failed and resulted in an error message.
  prefs: []
  type: TYPE_NORMAL
- en: 5.3 Repeated Tasks–Loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next feature that our program needs is to perform some set of actions multiple
    times. For example, the recommender system needs to ask the user to enter a number
    of artists that they like. For the moment, let’s change the system slightly so
    that instead of allowing the user to enter as many artists as she likes, the system
    asks the user to enter exactly four artists. The algorithm that performs this
    data-collection looks something like:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat the following four times:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display a prompt to the user;
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtain the user’s input; and
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Record the user’s answer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![../Images/Alien6.PNG](../Images/Alien6.PNG)'
  prefs: []
  type: TYPE_IMG
- en: '*Actually, 42 times is just the right number of times for me!*'
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that we have a few lines of Python code that gather and store input
    from the user. Since we want to do this four times, we could just make four copies
    of that code, one for each time that we want to ask the user for an artist. For
    only four preferences, this wouldn’t be so bad. But imagine that we wanted to
    ask the user for 10 preferences? Or 42? The code would quickly become long and
    cumbersome. Furthermore, if we decided that we wanted to make a small change to
    the way that we ask the user for input, we’d have to make that change in 4, 10,
    or 42 places in our program. This would be very annoying for the programmer! Moreover,
    ultimately we might want to let the user herself specify how many artists she
    wants to enter, instead of fixing that value before the program runs. In that
    case, we simply wouldn’t know in advance how many copies of the code to place
    in our program.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already seen one way to perform repeated tasks in Chapter 3. In fact,
    we’ve also seen a second: list comprehensions. This chapter presents another way
    to perform these same repeated tasks: *iteration* or *loops*.'
  prefs: []
  type: TYPE_NORMAL
- en: Just as recursion allows a programmer to express self-similarity in a natural
    way, loops naturally express sequential repetition. It turns out that recursion
    and loops are often equally good choices for doing something repeatedly, but in
    many cases it’s much easier and more natural to use one rather than the other.
    More on that shortly!
  prefs: []
  type: TYPE_NORMAL
- en: 5.3.1 Recursion vs. Iteration at the Low Level
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![../Images/Alien6.PNG](../Images/Alien6.PNG)'
  prefs: []
  type: TYPE_IMG
- en: '*If you skipped Chapter 4, no worries– you might* jump *to Section 5.3.2*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate the difference between iteration and recursion, let’s travel
    backwards in time and revisit the recursive factorial function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In Chapter 4, we implemented this function in HMMM and saw that, at the machine
    level, the recursion uses a stack to keep track of the function calls and the
    values of the variables in each function call. In that chapter, we also looked
    at another very different implementation of the factorial function that was considerably
    simpler and did not use a stack. Here it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In contrast to the recursive version, this implementation uses a variable (`r13`
    in this example) to gradually “accumulate” the answer. Initially, `r13` is set
    to 1\. In lines 3–5, we multiply `r13` by the current value of `n` (stored in
    register `r1`), decrement `n` by 1, and jumps back to line 2 to test if we should
    do this again. We repeat this loop until the value of `n` reaches 0\. At that
    point, `r13` contains the product \(n \times (n-1) \times \dots \times 1\) and
    we’re done.
  prefs: []
  type: TYPE_NORMAL
- en: In some sense, this iterative approach is simpler than recursion because it
    just loops “round and round”, updating the value of a variable until it’s done.
    There’s no need to keep track (on the stack) of what “things were like” before
    the recursive call and reinstate those “things” (from the stack) when the recursion
    returns. Let’s now see how this works in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '5.3.2 Definite Iteration: `for` loops'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In many cases, we want to repeat a certain computation a specific number of
    times. Python’s `for` loop expresses this idea. Let’s take a look at how we can
    use a `for` loop to implement the iteration in the recommendation program to collect
    a fixed number of artists that the user likes.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, assume the user will enter three artists.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In Python 2, remember to use `raw_input` instead of `input`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `for` loop will repeat its “body”, lines 4–5, exactly 3 times. Let’s look
    closely at how this works. Line 3 above is the *header* of the loop, with five
    required parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The keyword `for`;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The name of a variable that will control the loop. In our case that variable
    is named `i`. It’s safest to use a new variable name, created just for this `for`
    loop, or one whose old value is no longer needed;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The keyword `in`;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A sequence such as a list or a string. In our case it is the list `[0, 1, 2]`;
    and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A colon. This is the end of the header and the start of the `for` loop body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we noted, lines 4–5 are called the *body* of the loop. The instructions in
    the loop body must be indented consistently within the loop header, just as statements
    within functions are. Note that line 7 above is *not* part of the loop body because
    it is not indented.
  prefs: []
  type: TYPE_NORMAL
- en: So what exactly is going on in this `for` loop? Our variable `i` will initially
    take the first value in the list, which is 0\. It will then perform the lines
    of code that are indented below the `for` loop. In our case, those are lines 4
    and 5\. Line 4 uses Python’s `raw_input` function (or `input` in Python 3) which
    prints the string
  prefs: []
  type: TYPE_NORMAL
- en: '`Enter an artist that you like:`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: and then pauses to let the user type in a response. Once the user has typed
    a response and pressed the ENTER ( or RETURN ) key, that response is placed in
    the variable named `next_artist`. So, `next_artist` will be a string that is the
    name of an artist. Line 5 uses Python’s `append` function to add that string to
    the list `artists`.
  prefs: []
  type: TYPE_NORMAL
- en: Python recognizes that this is the end of the body of the `for` loop because
    line 7 is not indented – that is, it’s at the same level of indentation as line
    3\. So, Python now goes back to line 3 and this time sets `i` to be 1\. Now, lines
    4 and 5 are performed again, resulting in the user being asked for another string
    and that string being appended to the end of the `artists` list.
  prefs: []
  type: TYPE_NORMAL
- en: Again, Python goes back up to line 3 and this time `i` takes the value 2\. Once
    again, Python executes lines 4 and 5 and we get another artist and add it to the
    `artists` list.
  prefs: []
  type: TYPE_NORMAL
- en: '![../Images/Alien6.PNG](../Images/Alien6.PNG)'
  prefs: []
  type: TYPE_IMG
- en: '*Four* for*s!*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, `i` has no more values to take since we told it to take values from
    the list `[0, 1, 2]`. So now the loop is done and Python continues computing at
    line 7.
  prefs: []
  type: TYPE_NORMAL
- en: 'How could we ask the user to respond to four examples instead of three? Easy!
    We could modify the loop header to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'What about 25 iterations? Well, we could replace the list `[0, 1, 2, 3]` with
    the list `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 22, 23, 24]` but who wants to type all that? (We certainly didn’t find
    it very much fun!) Instead, we can use the built-in `range` function (that we
    saw in Chapter 3) to automatically generate that list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![../Images/Alien6.PNG](../Images/Alien6.PNG)](../Images/Alien6.PNG)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Remember that* `range(25)` *does indeed generate that 25-element list from
    0 to 24.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Does the control variable have to be named `i`? No – any valid variable name
    can be used here. For clarity and to avoid confusion, you should generally avoid
    using a name that you have already used earlier in your function, although we
    often reuse variable names in loops.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, a word on style: In general, variable names like `i` are not very
    descriptive. However, a variable used in a loop is a very temporary variable –
    it serves the purpose of allowing us to loop and then once the loop is over we’re
    done with it. Therefore, it’s quite common to use short variable names in `for`
    loops, and the names `i`, `j`, and `k` are particularly popular.'
  prefs: []
  type: TYPE_NORMAL
- en: 5.3.3 How Is the Control Variable Used?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the example above, the control variable took on a new value at every iteration
    through the loop, but we never explicitly *used* the value of variable inside
    the body of the loop. Therefore, it didn’t matter what the list of elements in
    our for loop header was—these elements were ignored. We could have accomplished
    the same thing with any three-element list header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In both cases, we would have gone through the loop three times.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes the value of the control variable is important to the computation
    inside the `for` loop. For example, consider this iterative version of the factorial
    function. Here we’ve named the control variable `factor` to suggest its role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When we call `factorial(4)`, the loop becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: What happens here?
  prefs: []
  type: TYPE_NORMAL
- en: After the first time through the loop `answerSoFar` holds the result of its
    previous value (1) times the value of `factor` (1). When the loop completes its
    first iteration `answerSoFar` will be 1 (i.e., `1*1`).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: In the second iteration through the loop `answerSoFar` will again be assigned
    to hold the product of the previous value of `answerSoFar` times `factor`. Since
    `factor`‘s value is now 2, `answerSoFar` will equal 1*2, or 2, when this second
    loop iteration ends.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: After the third time through the loop, `answerSoFar` will be 2*3 or 6, and the
    fourth time through `answerSoFar` will become \(4*6\), or 24.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The loop repeats exactly 4 times because `range(1, 5)` has four elements: `[1,
    2, 3, 4]`.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now “unroll” this four-iteration loop to see what it does at each iteration.
    Calling `factorial(4)` becomes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 5.3.4 *Accumulating* Answers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Consider what happened to `answerSoFar` throughout the iterations above. It
    started with a value and it changed that value each time through the loop, so
    that when the loop completed the returned `answerSoFar` was the final answer.
    This technique of *accumulation* is very common, and the variable that “accumulates”
    the desired result is called an *accumulator*.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at another example. The `listDoubler` function below returns a new
    list in which each element is double the value of its corresponding element in
    the input list, `aList`. Which variable is the accumulator here?
  prefs: []
  type: TYPE_NORMAL
- en: '<textarea class="vizTitleText" id="vizTitleEditor" cols="60" rows="1" style="display:
    none;"><div class="vizTitleText" id="vizTitleViewer"/> <textarea class="vizDescriptionText"
    id="vizDescriptionEditor" cols="75" rows="2" style="display: none;"/> <div class="vizDescriptionText"
    id="vizDescriptionViewer"/> </div> <table border="0" class="visualizer"><tbody><tr><td
    class="vizLayoutTd" id="vizLayoutTdFirst"><div id="codeDisplayDiv" style="max-width:
    500px;"> <div id="pyCodeOutputDiv" style="max-width: 500px; max-height: 400px;"><table
    id="pyCodeOutput"><tbody><tr><td id="gutterTD" valign="top" rowspan="8"><svg id="leftCodeGutterSVG"
    style="height: 187px;"><polygon id="prevLineArrow" points="0,3 12,3 12,0 18,5
    12,10 12,7 0,7" fill="#c9e6ca" style="display: none;"/><polygon id="curLineArrow"
    points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#e93f34" transform="translate(0,
    4.7197265625)"/></svg> </td> <td class="lineNo" id="lineNo1">1</td> <td class="cod"
    id="v1__cod1">def listDoubler(aList):</td> </tr> <tr><td class="lineNo" id="lineNo2">2</td>
    <td class="cod" id="v1__cod2">    doubledList = []</td> </tr> <tr><td class="lineNo"
    id="lineNo3">3</td> <td class="cod" id="v1__cod3">    for elem in aList:</td>
    </tr> <tr><td class="lineNo" id="lineNo4">4</td> <td class="cod" id="v1__cod4">        # append the value 2*elem to doubledList</td>
    </tr> <tr><td class="lineNo" id="lineNo5">5</td> <td class="cod" id="v1__cod5">        doubledList.append(2*elem)</td>
    </tr> <tr><td class="lineNo" id="lineNo6">6</td> <td class="cod" id="v1__cod6">    return doubledList</td>
    </tr> <tr><td class="lineNo" id="lineNo7">7</td> <td class="cod" id="v1__cod7"/>
    </tr> <tr><td class="lineNo" id="lineNo8">8</td> <td class="cod" id="v1__cod8">print (listDoubler([20, 21, 22]))</td>
    </tr> </tbody> </table> </div> <div id="editCodeLinkDiv" style="display: none;"><a
    id="editBtn" href="#">Edit code</a></div> <div id="executionSlider" class="ui-slider
    ui-slider-horizontal ui-widget ui-widget-content ui-corner-all" style="width:
    480px; font-size: 0.9em;"></div> <div id="vcrControls"> <button id="jmpFirstInstr"
    type="button" disabled="disabled"><< First</button> <button id="jmpStepBack" type="button"
    disabled="disabled">< Back</button> <span id="curInstr">Step 1 of 12</span> <button
    id="jmpStepFwd" type="button">Forward ></button> <button id="jmpLastInstr" type="button">Last
    >></button> </div> <div id="errorOutput" style="display: none;"/> <div id="legendDiv"><svg
    id="prevLegendArrowSVG"><polygon points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#c9e6ca"/></svg>
    line that has just executed<p style="margin-top: 4px"><svg id="curLegendArrowSVG"><polygon
    points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#e93f34"/></svg> next line to
    execute</p> </div> <div id="stepAnnotationDiv"> <textarea class="annotationText"
    id="stepAnnotationEditor" cols="60" rows="3" style="display: none;"/> <div class="annotationText"
    id="stepAnnotationViewer"/> </div> <div id="annotateLinkDiv"><button id="annotateBtn"
    type="button" style="display: none;">Annotate this step</button></div> </div>
    <div id="htmlOutputDiv"/> <div id="progOutputs" style="display: none;"> Program
    output:<br/> <textarea id="pyStdout" cols="50" rows="10" wrap="off" readonly=""
    style="max-width: 500px;"/> </div> </td> </tr> <tr><td class="vizLayoutTd" id="vizLayoutTdSecond"><div
    id="dataViz"> <table id="stackHeapTable"> <tbody><tr> <td id="stack_td"> <div
    id="globals_area"> <div id="stackHeader">Frames</div> <div class="stackFrame highlightedStackFrame"
    id="v1__globals" style="display: none;"><div id="v1__globals_header" class="stackFrameHeader">Global
    variables</div> <table class="stackFrameVarTable" id="v1__global_table"/> </div>
    </div> <div id="stack"/> </td> <td id="heap_td"> <div id="heap"> <div id="heapHeader">Objects</div>
    </div> </td> </tr> </tbody> </table> </div> </td> </tr> </tbody> </table> </div>
    </div> <p class="cl_caption"><span class="cl_caption_text"> (ch05_ld)</span> </p>
    <script type="text/javascript"> var ch05_ld_trace = {"code": "def listDoubler(aList):\n
    doubledList = []\n for elem in aList:\n # append the value 2*elem to doubledList\n
    doubledList.append(2*elem)\n return doubledList\n\nprint (listDoubler([20, 21,
    22]))", "trace": [{"ordered_globals": [], "stdout": "", "func_name": "<module>",
    "stack_to_render": [], "globals": {}, "heap": {}, "line": 1, "event": "step_line"},
    {"ordered_globals": ["listDoubler"], "stdout": "", "func_name": "<module>", "stack_to_render":
    [], "globals": {"listDoubler": ["REF", 1]}, "heap": {"1": ["FUNCTION", "listDoubler(aList)",
    null]}, "line": 8, "event": "step_line"}, {"ordered_globals": ["listDoubler"],
    "stdout": "", "func_name": "listDoubler", "stack_to_render": [{"frame_id": 1,
    "encoded_locals": {"aList": ["REF", 2]}, "is_highlighted": true, "is_parent":
    false, "func_name": "listDoubler", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "listDoubler_f1", "ordered_varnames": ["aList"]}], "globals":
    {"listDoubler": ["REF", 1]}, "heap": {"1": ["FUNCTION", "listDoubler(aList)",
    null], "2": ["LIST", 20, 21, 22]}, "line": 1, "event": "call"}, {"ordered_globals":
    ["listDoubler"], "stdout": "", "func_name": "listDoubler", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"aList": ["REF", 2]}, "is_highlighted": true,
    "is_parent": false, "func_name": "listDoubler", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "listDoubler_f1", "ordered_varnames": ["aList"]}], "globals":
    {"listDoubler": ["REF", 1]}, "heap": {"1": ["FUNCTION", "listDoubler(aList)",
    null], "2": ["LIST", 20, 21, 22]}, "line": 2, "event": "step_line"}, {"ordered_globals":
    ["listDoubler"], "stdout": "", "func_name": "listDoubler", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"doubledList": ["REF", 3], "aList": ["REF",
    2]}, "is_highlighted": true, "is_parent": false, "func_name": "listDoubler", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "listDoubler_f1", "ordered_varnames":
    ["aList", "doubledList"]}], "globals": {"listDoubler": ["REF", 1]}, "heap": {"1":
    ["FUNCTION", "listDoubler(aList)", null], "2": ["LIST", 20, 21, 22], "3": ["LIST"]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["listDoubler"], "stdout":
    "", "func_name": "listDoubler", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"doubledList": ["REF", 3], "aList": ["REF", 2], "elem": 20}, "is_highlighted":
    true, "is_parent": false, "func_name": "listDoubler", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "listDoubler_f1", "ordered_varnames": ["aList", "doubledList",
    "elem"]}], "globals": {"listDoubler": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "listDoubler(aList)", null], "2": ["LIST", 20, 21, 22], "3": ["LIST"]}, "line":
    5, "event": "step_line"}, {"ordered_globals": ["listDoubler"], "stdout": "", "func_name":
    "listDoubler", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"doubledList":
    ["REF", 3], "aList": ["REF", 2], "elem": 20}, "is_highlighted": true, "is_parent":
    false, "func_name": "listDoubler", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "listDoubler_f1", "ordered_varnames": ["aList", "doubledList",
    "elem"]}], "globals": {"listDoubler": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "listDoubler(aList)", null], "2": ["LIST", 20, 21, 22], "3": ["LIST", 40]}, "line":
    3, "event": "step_line"}, {"ordered_globals": ["listDoubler"], "stdout": "", "func_name":
    "listDoubler", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"doubledList":
    ["REF", 3], "aList": ["REF", 2], "elem": 21}, "is_highlighted": true, "is_parent":
    false, "func_name": "listDoubler", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "listDoubler_f1", "ordered_varnames": ["aList", "doubledList",
    "elem"]}], "globals": {"listDoubler": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "listDoubler(aList)", null], "2": ["LIST", 20, 21, 22], "3": ["LIST", 40]}, "line":
    5, "event": "step_line"}, {"ordered_globals": ["listDoubler"], "stdout": "", "func_name":
    "listDoubler", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"doubledList":
    ["REF", 3], "aList": ["REF", 2], "elem": 21}, "is_highlighted": true, "is_parent":
    false, "func_name": "listDoubler", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "listDoubler_f1", "ordered_varnames": ["aList", "doubledList",
    "elem"]}], "globals": {"listDoubler": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "listDoubler(aList)", null], "2": ["LIST", 20, 21, 22], "3": ["LIST", 40, 42]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["listDoubler"], "stdout":
    "", "func_name": "listDoubler", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"doubledList": ["REF", 3], "aList": ["REF", 2], "elem": 22}, "is_highlighted":
    true, "is_parent": false, "func_name": "listDoubler", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "listDoubler_f1", "ordered_varnames": ["aList", "doubledList",
    "elem"]}], "globals": {"listDoubler": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "listDoubler(aList)", null], "2": ["LIST", 20, 21, 22], "3": ["LIST", 40, 42]},
    "line": 5, "event": "step_line"}, {"ordered_globals": ["listDoubler"], "stdout":
    "", "func_name": "listDoubler", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"doubledList": ["REF", 3], "aList": ["REF", 2], "elem": 22}, "is_highlighted":
    true, "is_parent": false, "func_name": "listDoubler", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "listDoubler_f1", "ordered_varnames": ["aList", "doubledList",
    "elem"]}], "globals": {"listDoubler": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "listDoubler(aList)", null], "2": ["LIST", 20, 21, 22], "3": ["LIST", 40, 42,
    44]}, "line": 3, "event": "step_line"}, {"ordered_globals": ["listDoubler"], "stdout":
    "", "func_name": "listDoubler", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"doubledList": ["REF", 3], "aList": ["REF", 2], "elem": 22}, "is_highlighted":
    true, "is_parent": false, "func_name": "listDoubler", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "listDoubler_f1", "ordered_varnames": ["aList", "doubledList",
    "elem"]}], "globals": {"listDoubler": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "listDoubler(aList)", null], "2": ["LIST", 20, 21, 22], "3": ["LIST", 40, 42,
    44]}, "line": 6, "event": "step_line"}, {"ordered_globals": ["listDoubler"], "stdout":
    "", "func_name": "listDoubler", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"__return__": ["REF", 3], "doubledList": ["REF", 3], "aList": ["REF", 2], "elem":
    22}, "is_highlighted": true, "is_parent": false, "func_name": "listDoubler", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "listDoubler_f1", "ordered_varnames":
    ["aList", "doubledList", "elem", "__return__"]}], "globals": {"listDoubler": ["REF",
    1]}, "heap": {"1": ["FUNCTION", "listDoubler(aList)", null], "2": ["LIST", 20,
    21, 22], "3": ["LIST", 40, 42, 44]}, "line": 6, "event": "return"}, {"ordered_globals":
    ["listDoubler"], "stdout": "[40, 42, 44]\n", "func_name": "<module>", "stack_to_render":
    [], "globals": {"listDoubler": ["REF", 1]}, "heap": {"1": ["FUNCTION", "listDoubler(aList)",
    null]}, "line": 8, "event": "return"}]}; var ch05_ld_vis; $(document).ready(function()
    { ch05_ld_vis = new ExecutionVisualizer(''ch05_ld'',ch05_ld_trace, {embeddedMode:
    true, verticalStack: true, heightChangeCallback: redrawAllVisualizerArrows, codeDivWidth:
    500 }); attachLoggers(ch05_ld_vis,''ch05_ld''); allVisualizers.push(ch05_ld_vis);
    }); $(document).ready(function() { $("#ch05_ld_tracecheck").click(function() {
    logBookEvent({''event'':''codelens'', ''act'': ''check'', ''div_id'':''ch05_ld''});
    }); }); if (allVisualizers === undefined) { var allVisualizers = []; } $(window).resize(function()
    { ch05_ld_vis.redrawConnectors(); }); </script> <p>In this case, the accumulator
    is the list <tt class="docutils literal"><span class="pre">doubledList</span></tt>
    rather than a number. It’s growing in length one element at a time instead of
    one factor at a time as in <tt class="docutils literal"><span class="pre">factorial</span></tt>.</p>
    <p>Let’s consider one more example where the loop control variable’s value is
    important to the functionality of a loop. Returning to our recommender program,
    let’s write a loop that calculates the number of matches between two lists. This
    function will be useful when we’re comparing the current user’s preferences to
    the stored preferences of other users to determine which stored user most closely
    matches the current user’s preferences. For this problem, we have two lists of
    artist/band names, for example:</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="gp">>>> </span><span class="n">userPrefs</span> <span class="go">[''Maroon
    5'', ''Lady Gaga'', ''Justin Bieber'']</span> <span class="gp">>>> </span><span
    class="n">storedUserPrefs</span> <span class="go">[''Maroon 5'', ''Kelly Clarkson'',
    ''Lady Gaga'', ''Bruno Mars'']</span> </pre> </div> </div> <p>Our first version
    of this function will implement the following algorithm:</p> <ul class="simple">
    <li>Initialize a counter to 0</li> <li>For each artist in the user’s preferences:</li>
    <li>If that artist is in the stored user’s preferences too, add one to count</li>
    </ul> <p>This simple algorithm is implemented with the following Python code:</p>
    <div class="highlight-python"><div class="highlight"><pre><span class="k">def</span>
    <span class="nf">numMatches</span><span class="p">(</span><span class="n">userPrefs</span><span
    class="p">,</span> <span class="n">storedUserPrefs</span><span class="p">):</span>
    <span class="sd">'''''' return the number of elements that match between</span>
    <span class="sd"> the lists userPrefs and storedUserPrefs ''''''</span> <span
    class="n">count</span> <span class="o">=</span> <span class="mi">0</span> <span
    class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span
    class="n">userPrefs</span><span class="p">:</span> <span class="k">if</span> <span
    class="n">item</span> <span class="ow">in</span> <span class="n">storedUsersPrefs</span><span
    class="p">:</span> <span class="n">count</span> <span class="o">+=</span> <span
    class="mi">1</span> <span class="k">return</span> <span class="n">count</span>
    </pre> </div> </div> <p>In this function we’ve used a shorthand notation to increment
    the value of <tt class="docutils literal"><span class="pre">count</span></tt>.</p>
    <div class="figure align-right" style="width: 150px"> <a class="reference internal
    image-reference" href="../Images/Alien6.PNG"><img alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG"
    style="width: 0px;"/></a> <p class="caption"><em>Similar shorthands include</em>
    <tt class="docutils literal"><span class="pre">-=,</span> <span class="pre">*=,</span></tt>
    and <tt class="docutils literal"><span class="pre">/=</span></tt></p> </div> <p>The
    line</p> <div class="highlight-python"><div class="highlight"><pre><span class="n">count</span>
    <span class="o">+=</span> <span class="mi">1</span> </pre> </div> </div> <p>is
    just shorthand for</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span
    class="o">+</span> <span class="mi">1</span> </pre> </div> </div> <p>Notice that
    the code above is actually not specific to our music recommender function, but
    in fact can be used to compare any two lists and return the number of matching
    elements between them. For this reason, it’s stylistically better to use generic
    list names for the parameters to this function – that is, we could replace the
    variable name <tt class="docutils literal"><span class="pre">userPrefs</span></tt>
    with a more general name such as <tt class="docutils literal"><span class="pre">listA</span></tt>
    and <tt class="docutils literal"><span class="pre">storedUserPrefs</span></tt>
    with <tt class="docutils literal"><span class="pre">listB</span></tt>.</p> <div
    class="highlight-python"><div class="highlight"><pre><span class="k">def</span>
    <span class="nf">numMatches</span><span class="p">(</span><span class="n">listA</span><span
    class="p">,</span> <span class="n">listB</span><span class="p">):</span> <span
    class="sd">'''''' return the number of elements that match between</span> <span
    class="sd"> listA and listB ''''''</span> <span class="n">count</span> <span class="o">=</span>
    <span class="mi">0</span> <span class="k">for</span> <span class="n">item</span>
    <span class="ow">in</span> <span class="n">listA</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">item</span> <span class="ow">in</span>
    <span class="n">listB</span><span class="p">:</span> <span class="n">count</span>
    <span class="o">+=</span> <span class="mi">1</span> <span class="k">return</span>
    <span class="n">count</span> </pre> </div> </div> <p>Finally, let’s complete the
    process of choosing the stored user with the highest number of matches to the
    current user. Let’s assume that each stored user is represented by a list of that
    user’s preferences and then we put all of those lists into one master list. Using
    the representation, the stored users’ preferences might look like this:</p> <p><tt
    class="docutils literal"><span class="pre">[[''Maroon</span> <span class="pre">5'',</span>
    <span class="pre">''The</span> <span class="pre">Rolling</span> <span class="pre">Stones'',</span>
    <span class="pre">''The</span> <span class="pre">Beatles''],</span></tt></p> <blockquote>
    <div><p><tt class="docutils literal"><span class="pre">[''Lady</span> <span class="pre">Gaga'',</span>
    <span class="pre">''Adele'',</span> <span class="pre">''Kelly</span> <span class="pre">Clarkson'',</span>
    <span class="pre">''The</span> <span class="pre">Dixie</span> <span class="pre">Chicks'',</span>
    <span class="pre">''Lady</span> <span class="pre">Antebellum''],</span></tt></p>
    <p><tt class="docutils literal"><span class="pre">[''Kelly</span> <span class="pre">Clarkson'',</span>
    <span class="pre">''Lady</span> <span class="pre">Gaga'',</span> <span class="pre">''Katy</span>
    <span class="pre">Perry'',</span> <span class="pre">''Justin</span> <span class="pre">Bieber'',</span>
    <span class="pre">''Lady</span> <span class="pre">Antebellum''],</span></tt></p>
    <p><tt class="docutils literal"><span class="pre">[''The</span> <span class="pre">Beatles'',</span>
    <span class="pre">''Maroon</span> <span class="pre">5'',</span> <span class="pre">''Eli</span>
    <span class="pre">Young</span> <span class="pre">Band'',</span> <span class="pre">''Scotty</span>
    <span class="pre">McCreery''],</span></tt></p> <p><tt class="docutils literal"><span
    class="pre">[''Adele'',</span> <span class="pre">''Maroon</span> <span class="pre">5'',</span>
    <span class="pre">''Katy</span> <span class="pre">Perry'',</span> <span class="pre">''Bruno</span>
    <span class="pre">Mars'']]</span></tt></p> </div> </blockquote> <p>Note that we
    have not included the names of the stored users, since we only care about their
    preferences for now. However, we can think about the stored users as having indices.
    In the list above, index 0 corresponds to the user who likes <tt class="docutils
    literal"><span class="pre">[''Maroon</span> <span class="pre">5'',</span> <span
    class="pre">''The</span> <span class="pre">Rolling</span> <span class="pre">Stones'',</span>
    <span class="pre">''The</span> <span class="pre">Beatles'']</span></tt>. There
    are four other users with indices 1, 2, 3, and 4\. Let’s will assume that this
    list does not contain the preferences of the current user.</p> <p>So, imagine
    that we want to calculate the <tt class="docutils literal"><span class="pre">index</span></tt>
    of the stored user with the best match to our current user. For example, if our
    current user likes <tt class="docutils literal"><span class="pre">[''Lady</span>
    <span class="pre">Gaga'',</span> <span class="pre">''Katy</span> <span class="pre">Perry'',</span>
    <span class="pre">''Justin</span> <span class="pre">Bieber'',</span> <span class="pre">''Maroon</span>
    <span class="pre">5'']</span></tt> then the stored user at index 2 in the stored
    user list above has the most matches in common – three matches, whereas all other
    stored users have fewer matches.</p> <p>The algorithm for finding the user with
    the best match to the current user is the following:</p> <ul class="simple"> <li>Initialize
    the maximum number of matches seen so far to <span class="math">\(0\)</span></li>
    <li>For each stored user:</li> <li>Count the number of matches between that stored
    user’s preferences and the current user’s preferences</li> <li>If that number
    of matches is greater than the maximum number of matches so far:</li> <li>Update
    the maximum number of matches seen so far</li> <li>Keep track of index of that
    user</li> <li>Return the index of the user with the maximum number of matches</li>
    </ul> <p>How could we express this in Python? A first attempt might begin like
    this:</p> <div class="highlight-python"><div class="highlight"><pre><span class="k">def</span>
    <span class="nf">findBestUser</span><span class="p">(</span><span class="n">userPrefs</span><span
    class="p">,</span> <span class="n">allUsersPrefs</span><span class="p">):</span>
    <span class="sd">'''''' Given a list of user artist preferences and a</span> <span
    class="sd"> list of lists representing all stored users''</span> <span class="sd">
    preferences, return the index of the stored</span> <span class="sd"> user with
    the most matches to the current user. ''''''</span> <span class="n">max_matches</span>
    <span class="o">=</span> <span class="mi">0</span> <span class="c"># no matches
    found yet!</span> <span class="n">best_index</span> <span class="o">=</span> <span
    class="mi">0</span> <span class="k">for</span> <span class="n">pref_list</span>
    <span class="ow">in</span> <span class="n">allUsersPrefs</span><span class="p">:</span>
    <span class="n">curr_matches</span> <span class="o">=</span> <span class="n">numMatches</span><span
    class="p">(</span><span class="n">userPrefs</span><span class="p">,</span> <span
    class="n">pref_list</span><span class="p">)</span> <span class="k">if</span> <span
    class="n">curr_matches</span> <span class="o">></span> <span class="n">max_matches</span><span
    class="p">:</span> <span class="c"># somehow get the index of pref_list??</span>
    </pre> </div> </div> <p>Note that we maintain a variable called <tt class="docutils
    literal"><span class="pre">max_matches</span></tt> that stores the maximum number
    of matches found so far. Initially it is set to 0, because we haven’t done any
    comparisons yet and have no matches. We also maintain a variable called <tt class="docutils
    literal"><span class="pre">best_index</span></tt> that stores the index of the
    list in the <tt class="docutils literal"><span class="pre">allUsersPrefs</span></tt>
    that has the highest number of matches. We’ve initialized this to 0 as well. Is
    this a good idea? It suggests that the list with index 0 has the best number of
    matches so far. In fact, we haven’t even looked at the list with index 0 at this
    point, so this may seem a bit weird. On the other hand, it doesn’t hurt to initialize
    this variable to 0 since we’re about to begin counting matches in the loop and
    the best solution will be at least 0.</p> <p>Notice that we reach a dead end in
    the last line of our function above. We have the element from the <tt class="docutils
    literal"><span class="pre">allPrefs</span></tt> list, but we have no way of getting
    the <em>index</em> that corresponds to it, and it’s that index that we’re committed
    to finding. Can you think of a way to solve this problem—before peeking at the
    solution below?</p> <p>Here’s our next attempt—this time, more successful:</p>
    <div class="highlight-python"><div class="highlight"><pre><span class="k">def</span>
    <span class="nf">findBestUser</span><span class="p">(</span><span class="n">userPrefs</span><span
    class="p">,</span> <span class="n">allUsersPrefs</span><span class="p">):</span>
    <span class="sd">'''''' Given a list of user artist preferences and a</span> <span
    class="sd"> list of lists represented all stored users''</span> <span class="sd">
    preferences, return the index of the stored</span> <span class="sd"> user with
    the most matches to the current user. ''''''</span> <span class="n">max_matches</span>
    <span class="o">=</span> <span class="mi">0</span> <span class="n">best_index</span>
    <span class="o">=</span> <span class="mi">0</span> <span class="k">for</span>
    <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span
    class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">allUsersPrefs</span><span
    class="p">)):</span> <span class="n">curr_matches</span> <span class="o">=</span>
    <span class="n">countMatches</span><span class="p">(</span><span class="n">userPrefs</span><span
    class="p">,</span> <span class="n">allPrefs</span><span class="p">[</span><span
    class="n">i</span><span class="p">])</span> <span class="k">if</span> <span class="n">curr_matches</span>
    <span class="o">></span> <span class="n">max_matches</span><span class="p">:</span>
    <span class="n">best_index</span> <span class="o">=</span> <span class="n">i</span>
    <span class="n">max_matches</span> <span class="o">=</span> <span class="n">curr_matches</span>
    <span class="k">return</span> <span class="n">best_index</span> </pre> </div>
    </div> <p>What’s the difference? Notice that now our <tt class="docutils literal"><span
    class="pre">for</span></tt> loop is iterating not over the lists in <tt class="docutils
    literal"><span class="pre">allUsersPrefs</span></tt> but rather over the indices
    of those lists. We do this using the <tt class="docutils literal"><span class="pre">range</span></tt>
    function to generate the list of all indices in <tt class="docutils literal"><span
    class="pre">allUsersPrefs</span></tt>. With this index variable, we can access
    the element in the list and we can store that index in our <tt class="docutils
    literal"><span class="pre">best_index</span></tt> variable.</p> </div> <div class="section"
    id="indefinite-iteration-while-loops"> <span id="index-5"/><h3 id="sigil_toc_id_83">5.3.5
    Indefinite Iteration: <tt class="docutils literal"><span class="pre">while</span></tt>
    Loops</h3> <p>In all of the examples above, we knew exactly how many times we
    wanted to loop. However, in many cases, we <em>can’t</em> know how many iterations
    we need — the number of iterations of the loop depends on some external factor
    out of our control.</p> <p>Let’s continue with our recommendation program. In
    the last section we collected a fixed number of preferred artists from the user.
    But in our original program we allowed the user to enter as many artists as they
    wished, whether that number was one or one thousand.</p> <p>Recall that <tt class="docutils
    literal"><span class="pre">for</span></tt> loops always run a definite number
    of times, so this situation calls for a different kind of loop: the <em>while</em>.
    A <tt class="docutils literal"><span class="pre">while</span></tt> loop runs as
    long as its boolean condition is true.</p> <div class="figure align-right" style="width:
    150px"> <img alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG"/> <p class="caption"><em>In
    other words, a</em> <tt class="docutils literal"><span class="pre">while</span></tt>
    <em>loop runs for a</em> <tt class="docutils literal"><span class="pre">while</span></tt>.</p>
    </div> <p>Let’s take a close look at the structure of a <tt class="docutils literal"><span
    class="pre">while</span></tt> loop that implements the new desired behavior for
    our recommender program</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="n">newPref</span> <span class="o">=</span> <span class="nb">input</span><span
    class="p">(</span><span class="s">"Please enter the name of an </span><span class="se">\</span>
    <span class="s">artist or band that you like: "</span> <span class="p">)</span>
    <span class="k">while</span> <span class="n">newPref</span> <span class="o">!=</span>
    <span class="s">''''</span><span class="p">:</span> <span class="n">prefs</span><span
    class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">newPref</span><span
    class="p">)</span> <span class="n">newPref</span> <span class="o">=</span> <span
    class="nb">input</span><span class="p">(</span><span class="s">"Please enter an
    artist or band </span><span class="se">\</span> <span class="s">that you like,
    or just press enter to see recommendations: "</span><span class="p">)</span> <span
    class="k">print</span><span class="p">(</span><span class="s">''Thanks for your
    input!''</span><span class="p">)</span> </pre> </div> </div> <p>In Python 2, remember
    to use <tt class="docutils literal"><span class="pre">raw_input</span></tt> rather
    than <tt class="docutils literal"><span class="pre">input</span></tt>.</p> <p>The
    <tt class="docutils literal"><span class="pre">while</span></tt> loop is similar
    to the <tt class="docutils literal"><span class="pre">for</span></tt> loop in
    that it consists of a loop header (line 4) and a loop body (lines 5-7). The loop
    header consists of the following three elements, in order:</p> <ul class="simple">
    <li>The keyword <tt class="docutils literal"><span class="pre">while</span></tt></li>
    <li>A boolean expression. In our example this expression is <tt class="docutils
    literal"><span class="pre">newPref</span> <span class="pre">!=</span> <span class="pre">''''</span></tt></li>
    <li>A colon</li> </ul> <p>As with <tt class="docutils literal"><span class="pre">for</span></tt>
    loops, the loop body must be indented under the loop header. Thus, line 9 in the
    above example is <em>not</em> inside the loop body. Note that both of the <tt
    class="docutils literal"><span class="pre">input</span></tt> statements are split
    over more than one line of text, but Python considers each really just one line
    because of the textbackslash symbols at the end of the lines.</p> <p>A <tt class="docutils
    literal"><span class="pre">while</span></tt> loop will execute as long as the
    Boolean expression in the header evaluates to <tt class="docutils literal"><span
    class="pre">True</span></tt>. In this case, the Boolean expression is <tt class="docutils
    literal"><span class="pre">newPref</span> <span class="pre">!=</span> <span class="pre">''''</span></tt>.
    Assuming that the user entered a non-empty string in line 1, the expression <tt
    class="docutils literal"><span class="pre">newPref</span> <span class="pre">!=</span>
    <span class="pre">''''</span></tt> will evaluate to <tt class="docutils literal"><span
    class="pre">True</span></tt> the first time it is evaluated. Thus, we enter the
    body of the <tt class="docutils literal"><span class="pre">for</span></tt> loop
    and execute lines 5–7\. If the user entered another non-empty string, then this
    Boolean will again evaluate to <tt class="docutils literal"><span class="pre">True</span></tt>.
    This will repeat until, eventually, the user enters no string – she just presses
    RETURN or ENTER. At this point, <tt class="docutils literal"><span class="pre">newPref</span></tt>
    is an empty string. Thus, when we return to evaluate the Boolean expression <tt
    class="docutils literal"><span class="pre">newPref</span> <span class="pre">!=</span>
    <span class="pre">''''</span></tt> in the <tt class="docutils literal"><span class="pre">while</span></tt>
    statement, it is now <tt class="docutils literal"><span class="pre">False</span></tt>
    and the loop terminates, causing execution to continue at line 9.</p> </div> <div
    class="section" id="for-loops-vs-while-loops"> <h3 id="sigil_toc_id_84">5.3.6
    <tt class="docutils literal"><span class="pre">for</span></tt> Loops vs. <tt class="docutils
    literal"><span class="pre">while</span></tt> Loops</h3> <div class="figure align-right"
    style="width: 150px"> <img alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG"/>
    <p class="caption"><em>But aliens don’t have thumbs!</em></p> </div> <p>Often
    it’s clear whether a computational problem calls for definite (<tt class="docutils
    literal"><span class="pre">for</span></tt>) or indefinite (<tt class="docutils
    literal"><span class="pre">while</span></tt>) iteration. One simple rule-of-thumb
    is that <tt class="docutils literal"><span class="pre">for</span></tt> loops are
    ideally suited to cases when you know exactly how many iterations of the loop
    will be conducted whereas <tt class="docutils literal"><span class="pre">while</span></tt>
    loops are ideal for cases when it’s less clear in advance how many times the loop
    must repeat.</p> <p>It is always possible to use a <tt class="docutils literal"><span
    class="pre">while</span></tt> loop to emulate the behavior of a <tt class="docutils
    literal"><span class="pre">for</span></tt> loop. For example, we could express
    the factorial function with a <tt class="docutils literal"><span class="pre">while</span></tt>
    loop as follows:</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span
    class="n">n</span><span class="p">):</span> <span class="n">answer</span> <span
    class="o">=</span> <span class="mi">1</span> <span class="k">while</span> <span
    class="n">n</span> <span class="o">></span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="n">answer</span>
    <span class="o">*</span> <span class="n">n</span> <span class="n">n</span> <span
    class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">answer</span> </pre> </div> </div>
    <div class="figure align-right" style="width: 150px"> <a class="reference internal
    image-reference" href="../Images/Alien6.PNG"><img alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG"
    style="width: 0px;"/></a> <p class="caption"><em>...that saves typing!</em></p>
    </div> <p>Here we’ve used <tt class="docutils literal"><span class="pre">answer</span></tt>
    instead of <tt class="docutils literal"><span class="pre">answerSoFar</span></tt>
    with the understanding that <tt class="docutils literal"><span class="pre">answer</span></tt>
    will not actually hold the value of the desired answer until the end of the loop–this
    is a common style for naming accumulator variables.</p> <p>Be careful! Sometimes
    when people try to use a <tt class="docutils literal"><span class="pre">while</span></tt>
    loop to perform a specific number of iterations their code ends up looking like
    this:</p> <div class="highlight-python"><div class="highlight"><pre><span class="k">def</span>
    <span class="nf">factorial</span><span class="p">(</span><span class="n">n</span><span
    class="p">):</span> <span class="n">answer</span> <span class="o">=</span> <span
    class="mi">1</span> <span class="k">while</span> <span class="n">n</span> <span
    class="o">></span> <span class="mi">0</span><span class="p">:</span> <span class="n">answer</span>
    <span class="o">=</span> <span class="n">answer</span> <span class="o">*</span>
    <span class="n">n</span> <span class="k">return</span> <span class="n">answer</span>
    </pre> </div> </div> <p>What happens when you run <tt class="docutils literal"><span
    class="pre">factorial(5)</span></tt> using the function above? The loop will run,
    but it will never stop!</p> <div class="figure align-right" style="width: 150px">
    <a class="reference internal image-reference" href="../Images/Alien6.PNG"><img
    alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG" style="width: 0px;"/></a>
    </div> <p>This <tt class="docutils literal"><span class="pre">while</span></tt>
    loop depends on the fact that <tt class="docutils literal"><span class="pre">n</span></tt>
    will eventually reach 0, but in the body of the loop we never change the value
    of <tt class="docutils literal"><span class="pre">n</span></tt> and we never get
    <tt class="docutils literal"><span class="pre">n!</span></tt> Python will happily
    continue multiplying <tt class="docutils literal"><span class="pre">answer</span>
    <span class="pre">*</span> <span class="pre">n</span></tt> forever–or at least
    until you get tired of waiting and hit Ctrl-C to stop the program.</p> <p>Go through
    the steps and see if you can spot the error in the following version:</p> <div
    id="ch05_fac"><div class="ExecutionVisualizer"><div id="vizHeader" style="display:
    none;"> <textarea class="vizTitleText" id="vizTitleEditor" cols="60" rows="1"
    style="display: none;"/> <div class="vizTitleText" id="vizTitleViewer"/> <textarea
    class="vizDescriptionText" id="vizDescriptionEditor" cols="75" rows="2" style="display:
    none;"/> <div class="vizDescriptionText" id="vizDescriptionViewer"/> </div> <table
    border="0" class="visualizer"><tbody><tr><td class="vizLayoutTd" id="vizLayoutTdFirst"><div
    id="codeDisplayDiv" style="max-width: 500px;"> <div id="pyCodeOutputDiv" style="max-width:
    500px; max-height: 400px;"><table id="pyCodeOutput"><tbody><tr><td id="gutterTD"
    valign="top" rowspan="8"><svg id="leftCodeGutterSVG" style="height: 187px;"><polygon
    id="prevLineArrow" points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#c9e6ca" style="display:
    none;"/><polygon id="curLineArrow" points="0,3 12,3 12,0 18,5 12,10 12,7 0,7"
    fill="#e93f34" transform="translate(0, 4.720703125)"/></svg> </td> <td class="lineNo"
    id="lineNo1">1</td> <td class="cod" id="v2__cod1">def factorial(n):</td> </tr>
    <tr><td class="lineNo" id="lineNo2">2</td> <td class="cod" id="v2__cod2">    answer = 1</td>
    </tr> <tr><td class="lineNo" id="lineNo3">3</td> <td class="cod" id="v2__cod3">    while n > 0:</td>
    </tr> <tr><td class="lineNo" id="lineNo4">4</td> <td class="cod" id="v2__cod4">        answer = answer * n</td>
    </tr> <tr><td class="lineNo" id="lineNo5">5</td> <td class="cod" id="v2__cod5">    n = n-1</td>
    </tr> <tr><td class="lineNo" id="lineNo6">6</td> <td class="cod" id="v2__cod6">    return answer</td>
    </tr> <tr><td class="lineNo" id="lineNo7">7</td> <td class="cod" id="v2__cod7"/>
    </tr> <tr><td class="lineNo" id="lineNo8">8</td> <td class="cod" id="v2__cod8">print (factorial(5))</td>
    </tr> </tbody> </table> </div> <div id="editCodeLinkDiv" style="display: none;"><a
    id="editBtn" href="#">Edit code</a></div> <div id="executionSlider" class="ui-slider
    ui-slider-horizontal ui-widget ui-widget-content ui-corner-all" style="width:
    480px; font-size: 0.9em;"></div> <div id="vcrControls"> <button id="jmpFirstInstr"
    type="button" disabled="disabled"><< First</button> <button id="jmpStepBack" type="button"
    disabled="disabled">< Back</button> <span id="curInstr">Step 1 of 498</span> <button
    id="jmpStepFwd" type="button">Forward ></button> <button id="jmpLastInstr" type="button">Last
    >></button> </div> <div id="errorOutput">(stopped after 500 steps to prevent possible infinite loop)</div>
    <div id="legendDiv"><svg id="prevLegendArrowSVG"><polygon points="0,3 12,3 12,0
    18,5 12,10 12,7 0,7" fill="#c9e6ca"/></svg> line that has just executed<p style="margin-top:
    4px"><svg id="curLegendArrowSVG"><polygon points="0,3 12,3 12,0 18,5 12,10 12,7
    0,7" fill="#e93f34"/></svg> next line to execute</p> </div> <div id="stepAnnotationDiv">
    <textarea class="annotationText" id="stepAnnotationEditor" cols="60" rows="3"
    style="display: none;"/> <div class="annotationText" id="stepAnnotationViewer"/>
    </div> <div id="annotateLinkDiv"><button id="annotateBtn" type="button" style="display:
    none;">Annotate this step</button></div> </div> <div id="htmlOutputDiv"/> <div
    id="progOutputs" style="display: none;"> Program output:<br/> <textarea id="pyStdout"
    cols="50" rows="10" wrap="off" readonly="" style="max-width: 500px;"/> </div>
    </td> </tr> <tr><td class="vizLayoutTd" id="vizLayoutTdSecond"><div id="dataViz">
    <table id="stackHeapTable"> <tbody><tr> <td id="stack_td"> <div id="globals_area">
    <div id="stackHeader">Frames</div> <div class="stackFrame highlightedStackFrame"
    id="v2__globals" style="display: none;"><div id="v2__globals_header" class="stackFrameHeader">Global
    variables</div> <table class="stackFrameVarTable" id="v2__global_table"/> </div>
    </div> <div id="stack"/> </td> <td id="heap_td"> <div id="heap"> <div id="heapHeader">Objects</div>
    </div> </td> </tr> </tbody> </table> </div> </td> </tr> </tbody> </table> </div>
    </div> <p class="cl_caption"><span class="cl_caption_text"> (ch05_fac)</span>
    </p> <script type="text/javascript"> var ch05_fac_trace = {"code": "def factorial(n):\n
    answer = 1\n while n > 0:\n answer = answer * n\n n = n-1\n return answer\n\nprint
    (factorial(5))", "trace": [{"ordered_globals": [], "stdout": "", "func_name":
    "<module>", "stack_to_render": [], "globals": {}, "heap": {}, "line": 1, "event":
    "step_line"}, {"ordered_globals": ["factorial"], "stdout": "", "func_name": "<module>",
    "stack_to_render": [], "globals": {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "factorial(n)", null]}, "line": 8, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n"]}], "globals": {"factorial": ["REF", 1]}, "heap": {"1":
    ["FUNCTION", "factorial(n)", null]}, "line": 1, "event": "call"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n"]}], "globals": {"factorial": ["REF", 1]}, "heap": {"1":
    ["FUNCTION", "factorial(n)", null]}, "line": 2, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 5, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 5, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 25, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 25, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 125, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 625, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 3125, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 15625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 15625, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 78125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 78125, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 390625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 390625, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1953125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1953125, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 9765625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 9765625, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 48828125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 48828125, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 244140625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 244140625, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1220703125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1220703125, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 6103515625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 6103515625, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 30517578125, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 30517578125, "n": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 152587890625, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 152587890625, "n": 5}, "is_highlighted": true, "is_parent": false,
    "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals": {"factorial":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event":
    "step_line"}, {"ordered_globals": ["factorial"], "stdout": "", "func_name": "factorial",
    "stack_to_render": [{"frame_id": 1, "encoded_locals": {"answer": 762939453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 762939453125, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 3814697265625, "n": 5}, "is_highlighted": true, "is_parent": false,
    "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals": {"factorial":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event":
    "step_line"}, {"ordered_globals": ["factorial"], "stdout": "", "func_name": "factorial",
    "stack_to_render": [{"frame_id": 1, "encoded_locals": {"answer": 3814697265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 19073486328125, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 19073486328125, "n": 5}, "is_highlighted": true, "is_parent": false,
    "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals": {"factorial":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event":
    "step_line"}, {"ordered_globals": ["factorial"], "stdout": "", "func_name": "factorial",
    "stack_to_render": [{"frame_id": 1, "encoded_locals": {"answer": 95367431640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 95367431640625, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 476837158203125, "n": 5}, "is_highlighted": true, "is_parent": false,
    "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals": {"factorial":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event":
    "step_line"}, {"ordered_globals": ["factorial"], "stdout": "", "func_name": "factorial",
    "stack_to_render": [{"frame_id": 1, "encoded_locals": {"answer": 476837158203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2384185791015625, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 2384185791015625, "n": 5}, "is_highlighted": true, "is_parent": false,
    "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals": {"factorial":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event":
    "step_line"}, {"ordered_globals": ["factorial"], "stdout": "", "func_name": "factorial",
    "stack_to_render": [{"frame_id": 1, "encoded_locals": {"answer": 11920928955078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 11920928955078125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 59604644775390625, "n": 5}, "is_highlighted": true, "is_parent": false,
    "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals": {"factorial":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event":
    "step_line"}, {"ordered_globals": ["factorial"], "stdout": "", "func_name": "factorial",
    "stack_to_render": [{"frame_id": 1, "encoded_locals": {"answer": 59604644775390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 298023223876953125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 298023223876953125, "n": 5}, "is_highlighted": true, "is_parent": false,
    "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals": {"factorial":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event":
    "step_line"}, {"ordered_globals": ["factorial"], "stdout": "", "func_name": "factorial",
    "stack_to_render": [{"frame_id": 1, "encoded_locals": {"answer": 1490116119384765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1490116119384765625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 7450580596923828125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 7450580596923828125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 37252902984619140625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 37252902984619140625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 186264514923095703125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 186264514923095703125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 931322574615478515625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 931322574615478515625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 4656612873077392578125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 4656612873077392578125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 23283064365386962890625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 23283064365386962890625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 116415321826934814453125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 116415321826934814453125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 582076609134674072265625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 582076609134674072265625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 2910383045673370361328125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 2910383045673370361328125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 14551915228366851806640625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 14551915228366851806640625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 72759576141834259033203125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 72759576141834259033203125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 363797880709171295166015625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 363797880709171295166015625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1818989403545856475830078125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1818989403545856475830078125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 9094947017729282379150390625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 9094947017729282379150390625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 45474735088646411895751953125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 45474735088646411895751953125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 227373675443232059478759765625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 227373675443232059478759765625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1136868377216160297393798828125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1136868377216160297393798828125, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 5684341886080801486968994140625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 5684341886080801486968994140625, "n": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 28421709430404007434844970703125, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 28421709430404007434844970703125, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 142108547152020037174224853515625, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 142108547152020037174224853515625, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 710542735760100185871124267578125, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 710542735760100185871124267578125, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 3552713678800500929355621337890625, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 3552713678800500929355621337890625, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 17763568394002504646778106689453125, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 17763568394002504646778106689453125, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 88817841970012523233890533447265625, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 88817841970012523233890533447265625, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 444089209850062616169452667236328125, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 444089209850062616169452667236328125, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 2220446049250313080847263336181640625, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 2220446049250313080847263336181640625, "n": 5}, "is_highlighted": true,
    "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 11102230246251565404236316680908203125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 11102230246251565404236316680908203125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 55511151231257827021181583404541015625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 55511151231257827021181583404541015625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 277555756156289135105907917022705078125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 277555756156289135105907917022705078125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1387778780781445675529539585113525390625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1387778780781445675529539585113525390625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 6938893903907228377647697925567626953125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 6938893903907228377647697925567626953125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 34694469519536141888238489627838134765625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 34694469519536141888238489627838134765625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 173472347597680709441192448139190673828125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 173472347597680709441192448139190673828125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 867361737988403547205962240695953369140625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 867361737988403547205962240695953369140625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 4336808689942017736029811203479766845703125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 4336808689942017736029811203479766845703125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 21684043449710088680149056017398834228515625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 21684043449710088680149056017398834228515625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 108420217248550443400745280086994171142578125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 108420217248550443400745280086994171142578125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 542101086242752217003726400434970855712890625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 542101086242752217003726400434970855712890625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 2710505431213761085018632002174854278564453125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 2710505431213761085018632002174854278564453125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 13552527156068805425093160010874271392822265625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 13552527156068805425093160010874271392822265625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 67762635780344027125465800054371356964111328125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 67762635780344027125465800054371356964111328125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 338813178901720135627329000271856784820556640625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 338813178901720135627329000271856784820556640625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1694065894508600678136645001359283924102783203125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1694065894508600678136645001359283924102783203125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 8470329472543003390683225006796419620513916015625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 8470329472543003390683225006796419620513916015625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 42351647362715016953416125033982098102569580078125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 42351647362715016953416125033982098102569580078125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 211758236813575084767080625169910490512847900390625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 211758236813575084767080625169910490512847900390625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1058791184067875423835403125849552452564239501953125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 1058791184067875423835403125849552452564239501953125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 5293955920339377119177015629247762262821197509765625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 5293955920339377119177015629247762262821197509765625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 26469779601696885595885078146238811314105987548828125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 26469779601696885595885078146238811314105987548828125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 132348898008484427979425390731194056570529937744140625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 132348898008484427979425390731194056570529937744140625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 661744490042422139897126953655970282852649688720703125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 661744490042422139897126953655970282852649688720703125, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 3308722450212110699485634768279851414263248443603515625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 3308722450212110699485634768279851414263248443603515625, "n": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "factorial", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "factorial_f1", "ordered_varnames": ["n", "answer"]}], "globals":
    {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION", "factorial(n)", null]},
    "line": 4, "event": "step_line"}, {"ordered_globals": ["factorial"], "stdout":
    "", "func_name": "factorial", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"answer": 16543612251060553497428173841399257071316242218017578125, "n": 5},
    "is_highlighted": true, "is_parent": false, "func_name": "factorial", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "factorial_f1", "ordered_varnames":
    ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 16543612251060553497428173841399257071316242218017578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 82718061255302767487140869206996285356581211090087890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 82718061255302767487140869206996285356581211090087890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 413590306276513837435704346034981426782906055450439453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 413590306276513837435704346034981426782906055450439453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2067951531382569187178521730174907133914530277252197265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2067951531382569187178521730174907133914530277252197265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 10339757656912845935892608650874535669572651386260986328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 10339757656912845935892608650874535669572651386260986328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 51698788284564229679463043254372678347863256931304931640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 51698788284564229679463043254372678347863256931304931640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 258493941422821148397315216271863391739316284656524658203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 258493941422821148397315216271863391739316284656524658203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1292469707114105741986576081359316958696581423282623291015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1292469707114105741986576081359316958696581423282623291015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 6462348535570528709932880406796584793482907116413116455078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 6462348535570528709932880406796584793482907116413116455078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 32311742677852643549664402033982923967414535582065582275390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 32311742677852643549664402033982923967414535582065582275390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 161558713389263217748322010169914619837072677910327911376953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 161558713389263217748322010169914619837072677910327911376953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 807793566946316088741610050849573099185363389551639556884765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 807793566946316088741610050849573099185363389551639556884765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4038967834731580443708050254247865495926816947758197784423828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4038967834731580443708050254247865495926816947758197784423828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 20194839173657902218540251271239327479634084738790988922119140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 20194839173657902218540251271239327479634084738790988922119140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 100974195868289511092701256356196637398170423693954944610595703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 100974195868289511092701256356196637398170423693954944610595703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 504870979341447555463506281780983186990852118469774723052978515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 504870979341447555463506281780983186990852118469774723052978515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2524354896707237777317531408904915934954260592348873615264892578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2524354896707237777317531408904915934954260592348873615264892578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 12621774483536188886587657044524579674771302961744368076324462890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 12621774483536188886587657044524579674771302961744368076324462890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 63108872417680944432938285222622898373856514808721840381622314453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 63108872417680944432938285222622898373856514808721840381622314453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 315544362088404722164691426113114491869282574043609201908111572265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 315544362088404722164691426113114491869282574043609201908111572265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1577721810442023610823457130565572459346412870218046009540557861328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1577721810442023610823457130565572459346412870218046009540557861328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 7888609052210118054117285652827862296732064351090230047702789306640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 7888609052210118054117285652827862296732064351090230047702789306640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 39443045261050590270586428264139311483660321755451150238513946533203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 39443045261050590270586428264139311483660321755451150238513946533203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 197215226305252951352932141320696557418301608777255751192569732666015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 197215226305252951352932141320696557418301608777255751192569732666015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 986076131526264756764660706603482787091508043886278755962848663330078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 986076131526264756764660706603482787091508043886278755962848663330078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4930380657631323783823303533017413935457540219431393779814243316650390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4930380657631323783823303533017413935457540219431393779814243316650390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 24651903288156618919116517665087069677287701097156968899071216583251953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 24651903288156618919116517665087069677287701097156968899071216583251953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 123259516440783094595582588325435348386438505485784844495356082916259765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 123259516440783094595582588325435348386438505485784844495356082916259765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 616297582203915472977912941627176741932192527428924222476780414581298828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 616297582203915472977912941627176741932192527428924222476780414581298828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3081487911019577364889564708135883709660962637144621112383902072906494140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3081487911019577364889564708135883709660962637144621112383902072906494140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 15407439555097886824447823540679418548304813185723105561919510364532470703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 15407439555097886824447823540679418548304813185723105561919510364532470703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 77037197775489434122239117703397092741524065928615527809597551822662353515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 77037197775489434122239117703397092741524065928615527809597551822662353515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 385185988877447170611195588516985463707620329643077639047987759113311767578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 385185988877447170611195588516985463707620329643077639047987759113311767578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1925929944387235853055977942584927318538101648215388195239938795566558837890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1925929944387235853055977942584927318538101648215388195239938795566558837890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 9629649721936179265279889712924636592690508241076940976199693977832794189453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 9629649721936179265279889712924636592690508241076940976199693977832794189453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 48148248609680896326399448564623182963452541205384704880998469889163970947265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 48148248609680896326399448564623182963452541205384704880998469889163970947265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 240741243048404481631997242823115914817262706026923524404992349445819854736328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 240741243048404481631997242823115914817262706026923524404992349445819854736328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1203706215242022408159986214115579574086313530134617622024961747229099273681640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1203706215242022408159986214115579574086313530134617622024961747229099273681640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 6018531076210112040799931070577897870431567650673088110124808736145496368408203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 6018531076210112040799931070577897870431567650673088110124808736145496368408203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 30092655381050560203999655352889489352157838253365440550624043680727481842041015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 30092655381050560203999655352889489352157838253365440550624043680727481842041015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 150463276905252801019998276764447446760789191266827202753120218403637409210205078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 150463276905252801019998276764447446760789191266827202753120218403637409210205078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 752316384526264005099991383822237233803945956334136013765601092018187046051025390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 752316384526264005099991383822237233803945956334136013765601092018187046051025390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3761581922631320025499956919111186169019729781670680068828005460090935230255126953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3761581922631320025499956919111186169019729781670680068828005460090935230255126953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 18807909613156600127499784595555930845098648908353400344140027300454676151275634765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 18807909613156600127499784595555930845098648908353400344140027300454676151275634765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 94039548065783000637498922977779654225493244541767001720700136502273380756378173828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 94039548065783000637498922977779654225493244541767001720700136502273380756378173828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 470197740328915003187494614888898271127466222708835008603500682511366903781890869140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 470197740328915003187494614888898271127466222708835008603500682511366903781890869140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2350988701644575015937473074444491355637331113544175043017503412556834518909454345703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2350988701644575015937473074444491355637331113544175043017503412556834518909454345703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 11754943508222875079687365372222456778186655567720875215087517062784172594547271728515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 11754943508222875079687365372222456778186655567720875215087517062784172594547271728515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 58774717541114375398436826861112283890933277838604376075437585313920862972736358642578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 58774717541114375398436826861112283890933277838604376075437585313920862972736358642578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 293873587705571876992184134305561419454666389193021880377187926569604314863681793212890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 293873587705571876992184134305561419454666389193021880377187926569604314863681793212890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1469367938527859384960920671527807097273331945965109401885939632848021574318408966064453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1469367938527859384960920671527807097273331945965109401885939632848021574318408966064453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 7346839692639296924804603357639035486366659729825547009429698164240107871592044830322265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 7346839692639296924804603357639035486366659729825547009429698164240107871592044830322265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 36734198463196484624023016788195177431833298649127735047148490821200539357960224151611328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 36734198463196484624023016788195177431833298649127735047148490821200539357960224151611328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 183670992315982423120115083940975887159166493245638675235742454106002696789801120758056640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 183670992315982423120115083940975887159166493245638675235742454106002696789801120758056640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 918354961579912115600575419704879435795832466228193376178712270530013483949005603790283203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 918354961579912115600575419704879435795832466228193376178712270530013483949005603790283203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4591774807899560578002877098524397178979162331140966880893561352650067419745028018951416015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4591774807899560578002877098524397178979162331140966880893561352650067419745028018951416015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 22958874039497802890014385492621985894895811655704834404467806763250337098725140094757080078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 22958874039497802890014385492621985894895811655704834404467806763250337098725140094757080078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 114794370197489014450071927463109929474479058278524172022339033816251685493625700473785400390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 114794370197489014450071927463109929474479058278524172022339033816251685493625700473785400390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 573971850987445072250359637315549647372395291392620860111695169081258427468128502368927001953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 573971850987445072250359637315549647372395291392620860111695169081258427468128502368927001953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2869859254937225361251798186577748236861976456963104300558475845406292137340642511844635009765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2869859254937225361251798186577748236861976456963104300558475845406292137340642511844635009765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 14349296274686126806258990932888741184309882284815521502792379227031460686703212559223175048828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 14349296274686126806258990932888741184309882284815521502792379227031460686703212559223175048828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 71746481373430634031294954664443705921549411424077607513961896135157303433516062796115875244140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 71746481373430634031294954664443705921549411424077607513961896135157303433516062796115875244140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 358732406867153170156474773322218529607747057120388037569809480675786517167580313980579376220703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 358732406867153170156474773322218529607747057120388037569809480675786517167580313980579376220703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1793662034335765850782373866611092648038735285601940187849047403378932585837901569902896881103515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1793662034335765850782373866611092648038735285601940187849047403378932585837901569902896881103515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 8968310171678829253911869333055463240193676428009700939245237016894662929189507849514484405517578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 8968310171678829253911869333055463240193676428009700939245237016894662929189507849514484405517578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 44841550858394146269559346665277316200968382140048504696226185084473314645947539247572422027587890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 44841550858394146269559346665277316200968382140048504696226185084473314645947539247572422027587890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 224207754291970731347796733326386581004841910700242523481130925422366573229737696237862110137939453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 224207754291970731347796733326386581004841910700242523481130925422366573229737696237862110137939453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1121038771459853656738983666631932905024209553501212617405654627111832866148688481189310550689697265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1121038771459853656738983666631932905024209553501212617405654627111832866148688481189310550689697265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 5605193857299268283694918333159664525121047767506063087028273135559164330743442405946552753448486328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 5605193857299268283694918333159664525121047767506063087028273135559164330743442405946552753448486328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 28025969286496341418474591665798322625605238837530315435141365677795821653717212029732763767242431640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 28025969286496341418474591665798322625605238837530315435141365677795821653717212029732763767242431640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 140129846432481707092372958328991613128026194187651577175706828388979108268586060148663818836212158203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 140129846432481707092372958328991613128026194187651577175706828388979108268586060148663818836212158203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 700649232162408535461864791644958065640130970938257885878534141944895541342930300743319094181060791015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 700649232162408535461864791644958065640130970938257885878534141944895541342930300743319094181060791015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3503246160812042677309323958224790328200654854691289429392670709724477706714651503716595470905303955078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3503246160812042677309323958224790328200654854691289429392670709724477706714651503716595470905303955078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 17516230804060213386546619791123951641003274273456447146963353548622388533573257518582977354526519775390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 17516230804060213386546619791123951641003274273456447146963353548622388533573257518582977354526519775390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 87581154020301066932733098955619758205016371367282235734816767743111942667866287592914886772632598876953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 87581154020301066932733098955619758205016371367282235734816767743111942667866287592914886772632598876953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 437905770101505334663665494778098791025081856836411178674083838715559713339331437964574433863162994384765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 437905770101505334663665494778098791025081856836411178674083838715559713339331437964574433863162994384765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2189528850507526673318327473890493955125409284182055893370419193577798566696657189822872169315814971923828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2189528850507526673318327473890493955125409284182055893370419193577798566696657189822872169315814971923828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 10947644252537633366591637369452469775627046420910279466852095967888992833483285949114360846579074859619140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 10947644252537633366591637369452469775627046420910279466852095967888992833483285949114360846579074859619140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 54738221262688166832958186847262348878135232104551397334260479839444964167416429745571804232895374298095703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 54738221262688166832958186847262348878135232104551397334260479839444964167416429745571804232895374298095703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 273691106313440834164790934236311744390676160522756986671302399197224820837082148727859021164476871490478515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 273691106313440834164790934236311744390676160522756986671302399197224820837082148727859021164476871490478515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1368455531567204170823954671181558721953380802613784933356511995986124104185410743639295105822384357452392578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1368455531567204170823954671181558721953380802613784933356511995986124104185410743639295105822384357452392578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 6842277657836020854119773355907793609766904013068924666782559979930620520927053718196475529111921787261962890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 6842277657836020854119773355907793609766904013068924666782559979930620520927053718196475529111921787261962890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 34211388289180104270598866779538968048834520065344623333912799899653102604635268590982377645559608936309814453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 34211388289180104270598866779538968048834520065344623333912799899653102604635268590982377645559608936309814453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 171056941445900521352994333897694840244172600326723116669563999498265513023176342954911888227798044681549072265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 171056941445900521352994333897694840244172600326723116669563999498265513023176342954911888227798044681549072265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 855284707229502606764971669488474201220863001633615583347819997491327565115881714774559441138990223407745361328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 855284707229502606764971669488474201220863001633615583347819997491327565115881714774559441138990223407745361328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4276423536147513033824858347442371006104315008168077916739099987456637825579408573872797205694951117038726806640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4276423536147513033824858347442371006104315008168077916739099987456637825579408573872797205694951117038726806640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 21382117680737565169124291737211855030521575040840389583695499937283189127897042869363986028474755585193634033203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 21382117680737565169124291737211855030521575040840389583695499937283189127897042869363986028474755585193634033203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 106910588403687825845621458686059275152607875204201947918477499686415945639485214346819930142373777925968170166015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 106910588403687825845621458686059275152607875204201947918477499686415945639485214346819930142373777925968170166015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 534552942018439129228107293430296375763039376021009739592387498432079728197426071734099650711868889629840850830078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 534552942018439129228107293430296375763039376021009739592387498432079728197426071734099650711868889629840850830078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2672764710092195646140536467151481878815196880105048697961937492160398640987130358670498253559344448149204254150390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2672764710092195646140536467151481878815196880105048697961937492160398640987130358670498253559344448149204254150390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 13363823550460978230702682335757409394075984400525243489809687460801993204935651793352491267796722240746021270751953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 13363823550460978230702682335757409394075984400525243489809687460801993204935651793352491267796722240746021270751953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 66819117752304891153513411678787046970379922002626217449048437304009966024678258966762456338983611203730106353759765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 66819117752304891153513411678787046970379922002626217449048437304009966024678258966762456338983611203730106353759765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 334095588761524455767567058393935234851899610013131087245242186520049830123391294833812281694918056018650531768798828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 334095588761524455767567058393935234851899610013131087245242186520049830123391294833812281694918056018650531768798828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1670477943807622278837835291969676174259498050065655436226210932600249150616956474169061408474590280093252658843994140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1670477943807622278837835291969676174259498050065655436226210932600249150616956474169061408474590280093252658843994140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 8352389719038111394189176459848380871297490250328277181131054663001245753084782370845307042372951400466263294219970703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 8352389719038111394189176459848380871297490250328277181131054663001245753084782370845307042372951400466263294219970703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 41761948595190556970945882299241904356487451251641385905655273315006228765423911854226535211864757002331316471099853515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 41761948595190556970945882299241904356487451251641385905655273315006228765423911854226535211864757002331316471099853515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 208809742975952784854729411496209521782437256258206929528276366575031143827119559271132676059323785011656582355499267578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 208809742975952784854729411496209521782437256258206929528276366575031143827119559271132676059323785011656582355499267578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1044048714879763924273647057481047608912186281291034647641381832875155719135597796355663380296618925058282911777496337890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1044048714879763924273647057481047608912186281291034647641381832875155719135597796355663380296618925058282911777496337890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 5220243574398819621368235287405238044560931406455173238206909164375778595677988981778316901483094625291414558887481689453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 5220243574398819621368235287405238044560931406455173238206909164375778595677988981778316901483094625291414558887481689453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 26101217871994098106841176437026190222804657032275866191034545821878892978389944908891584507415473126457072794437408447265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 26101217871994098106841176437026190222804657032275866191034545821878892978389944908891584507415473126457072794437408447265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 130506089359970490534205882185130951114023285161379330955172729109394464891949724544457922537077365632285363972187042236328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 130506089359970490534205882185130951114023285161379330955172729109394464891949724544457922537077365632285363972187042236328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 652530446799852452671029410925654755570116425806896654775863645546972324459748622722289612685386828161426819860935211181640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 652530446799852452671029410925654755570116425806896654775863645546972324459748622722289612685386828161426819860935211181640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3262652233999262263355147054628273777850582129034483273879318227734861622298743113611448063426934140807134099304676055908203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3262652233999262263355147054628273777850582129034483273879318227734861622298743113611448063426934140807134099304676055908203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 16313261169996311316775735273141368889252910645172416369396591138674308111493715568057240317134670704035670496523380279541015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 16313261169996311316775735273141368889252910645172416369396591138674308111493715568057240317134670704035670496523380279541015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 81566305849981556583878676365706844446264553225862081846982955693371540557468577840286201585673353520178352482616901397705078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 81566305849981556583878676365706844446264553225862081846982955693371540557468577840286201585673353520178352482616901397705078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 407831529249907782919393381828534222231322766129310409234914778466857702787342889201431007928366767600891762413084506988525390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 407831529249907782919393381828534222231322766129310409234914778466857702787342889201431007928366767600891762413084506988525390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2039157646249538914596966909142671111156613830646552046174573892334288513936714446007155039641833838004458812065422534942626953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2039157646249538914596966909142671111156613830646552046174573892334288513936714446007155039641833838004458812065422534942626953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 10195788231247694572984834545713355555783069153232760230872869461671442569683572230035775198209169190022294060327112674713134765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 10195788231247694572984834545713355555783069153232760230872869461671442569683572230035775198209169190022294060327112674713134765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 50978941156238472864924172728566777778915345766163801154364347308357212848417861150178875991045845950111470301635563373565673828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 50978941156238472864924172728566777778915345766163801154364347308357212848417861150178875991045845950111470301635563373565673828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 254894705781192364324620863642833888894576728830819005771821736541786064242089305750894379955229229750557351508177816867828369140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 254894705781192364324620863642833888894576728830819005771821736541786064242089305750894379955229229750557351508177816867828369140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1274473528905961821623104318214169444472883644154095028859108682708930321210446528754471899776146148752786757540889084339141845703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1274473528905961821623104318214169444472883644154095028859108682708930321210446528754471899776146148752786757540889084339141845703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 6372367644529809108115521591070847222364418220770475144295543413544651606052232643772359498880730743763933787704445421695709228515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 6372367644529809108115521591070847222364418220770475144295543413544651606052232643772359498880730743763933787704445421695709228515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 31861838222649045540577607955354236111822091103852375721477717067723258030261163218861797494403653718819668938522227108478546142578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 31861838222649045540577607955354236111822091103852375721477717067723258030261163218861797494403653718819668938522227108478546142578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 159309191113245227702888039776771180559110455519261878607388585338616290151305816094308987472018268594098344692611135542392730712890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 159309191113245227702888039776771180559110455519261878607388585338616290151305816094308987472018268594098344692611135542392730712890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 796545955566226138514440198883855902795552277596309393036942926693081450756529080471544937360091342970491723463055677711963653564453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 796545955566226138514440198883855902795552277596309393036942926693081450756529080471544937360091342970491723463055677711963653564453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3982729777831130692572200994419279513977761387981546965184714633465407253782645402357724686800456714852458617315278388559818267822265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3982729777831130692572200994419279513977761387981546965184714633465407253782645402357724686800456714852458617315278388559818267822265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 19913648889155653462861004972096397569888806939907734825923573167327036268913227011788623434002283574262293086576391942799091339111328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 19913648889155653462861004972096397569888806939907734825923573167327036268913227011788623434002283574262293086576391942799091339111328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 99568244445778267314305024860481987849444034699538674129617865836635181344566135058943117170011417871311465432881959713995456695556640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 99568244445778267314305024860481987849444034699538674129617865836635181344566135058943117170011417871311465432881959713995456695556640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 497841222228891336571525124302409939247220173497693370648089329183175906722830675294715585850057089356557327164409798569977283477783203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 497841222228891336571525124302409939247220173497693370648089329183175906722830675294715585850057089356557327164409798569977283477783203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2489206111144456682857625621512049696236100867488466853240446645915879533614153376473577929250285446782786635822048992849886417388916015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2489206111144456682857625621512049696236100867488466853240446645915879533614153376473577929250285446782786635822048992849886417388916015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 12446030555722283414288128107560248481180504337442334266202233229579397668070766882367889646251427233913933179110244964249432086944580078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 12446030555722283414288128107560248481180504337442334266202233229579397668070766882367889646251427233913933179110244964249432086944580078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 62230152778611417071440640537801242405902521687211671331011166147896988340353834411839448231257136169569665895551224821247160434722900390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 62230152778611417071440640537801242405902521687211671331011166147896988340353834411839448231257136169569665895551224821247160434722900390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 311150763893057085357203202689006212029512608436058356655055830739484941701769172059197241156285680847848329477756124106235802173614501953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 311150763893057085357203202689006212029512608436058356655055830739484941701769172059197241156285680847848329477756124106235802173614501953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1555753819465285426786016013445031060147563042180291783275279153697424708508845860295986205781428404239241647388780620531179010868072509765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1555753819465285426786016013445031060147563042180291783275279153697424708508845860295986205781428404239241647388780620531179010868072509765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 7778769097326427133930080067225155300737815210901458916376395768487123542544229301479931028907142021196208236943903102655895054340362548828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 7778769097326427133930080067225155300737815210901458916376395768487123542544229301479931028907142021196208236943903102655895054340362548828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 38893845486632135669650400336125776503689076054507294581881978842435617712721146507399655144535710105981041184719515513279475271701812744140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 38893845486632135669650400336125776503689076054507294581881978842435617712721146507399655144535710105981041184719515513279475271701812744140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 194469227433160678348252001680628882518445380272536472909409894212178088563605732536998275722678550529905205923597577566397376358509063720703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 194469227433160678348252001680628882518445380272536472909409894212178088563605732536998275722678550529905205923597577566397376358509063720703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 972346137165803391741260008403144412592226901362682364547049471060890442818028662684991378613392752649526029617987887831986881792545318603515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 972346137165803391741260008403144412592226901362682364547049471060890442818028662684991378613392752649526029617987887831986881792545318603515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4861730685829016958706300042015722062961134506813411822735247355304452214090143313424956893066963763247630148089939439159934408962726593017578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4861730685829016958706300042015722062961134506813411822735247355304452214090143313424956893066963763247630148089939439159934408962726593017578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 24308653429145084793531500210078610314805672534067059113676236776522261070450716567124784465334818816238150740449697195799672044813632965087890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 24308653429145084793531500210078610314805672534067059113676236776522261070450716567124784465334818816238150740449697195799672044813632965087890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 121543267145725423967657501050393051574028362670335295568381183882611305352253582835623922326674094081190753702248485978998360224068164825439453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 121543267145725423967657501050393051574028362670335295568381183882611305352253582835623922326674094081190753702248485978998360224068164825439453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 607716335728627119838287505251965257870141813351676477841905919413056526761267914178119611633370470405953768511242429894991801120340824127197265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 607716335728627119838287505251965257870141813351676477841905919413056526761267914178119611633370470405953768511242429894991801120340824127197265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3038581678643135599191437526259826289350709066758382389209529597065282633806339570890598058166852352029768842556212149474959005601704120635986328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3038581678643135599191437526259826289350709066758382389209529597065282633806339570890598058166852352029768842556212149474959005601704120635986328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 15192908393215677995957187631299131446753545333791911946047647985326413169031697854452990290834261760148844212781060747374795028008520603179931640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 15192908393215677995957187631299131446753545333791911946047647985326413169031697854452990290834261760148844212781060747374795028008520603179931640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 75964541966078389979785938156495657233767726668959559730238239926632065845158489272264951454171308800744221063905303736873975140042603015899658203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 75964541966078389979785938156495657233767726668959559730238239926632065845158489272264951454171308800744221063905303736873975140042603015899658203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 379822709830391949898929690782478286168838633344797798651191199633160329225792446361324757270856544003721105319526518684369875700213015079498291015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 379822709830391949898929690782478286168838633344797798651191199633160329225792446361324757270856544003721105319526518684369875700213015079498291015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1899113549151959749494648453912391430844193166723988993255955998165801646128962231806623786354282720018605526597632593421849378501065075397491455078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1899113549151959749494648453912391430844193166723988993255955998165801646128962231806623786354282720018605526597632593421849378501065075397491455078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 9495567745759798747473242269561957154220965833619944966279779990829008230644811159033118931771413600093027632988162967109246892505325376987457275390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 9495567745759798747473242269561957154220965833619944966279779990829008230644811159033118931771413600093027632988162967109246892505325376987457275390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 47477838728798993737366211347809785771104829168099724831398899954145041153224055795165594658857068000465138164940814835546234462526626884937286376953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 47477838728798993737366211347809785771104829168099724831398899954145041153224055795165594658857068000465138164940814835546234462526626884937286376953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 237389193643994968686831056739048928855524145840498624156994499770725205766120278975827973294285340002325690824704074177731172312633134424686431884765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 237389193643994968686831056739048928855524145840498624156994499770725205766120278975827973294285340002325690824704074177731172312633134424686431884765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1186945968219974843434155283695244644277620729202493120784972498853626028830601394879139866471426700011628454123520370888655861563165672123432159423828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1186945968219974843434155283695244644277620729202493120784972498853626028830601394879139866471426700011628454123520370888655861563165672123432159423828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 5934729841099874217170776418476223221388103646012465603924862494268130144153006974395699332357133500058142270617601854443279307815828360617160797119140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 5934729841099874217170776418476223221388103646012465603924862494268130144153006974395699332357133500058142270617601854443279307815828360617160797119140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 29673649205499371085853882092381116106940518230062328019624312471340650720765034871978496661785667500290711353088009272216396539079141803085803985595703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 29673649205499371085853882092381116106940518230062328019624312471340650720765034871978496661785667500290711353088009272216396539079141803085803985595703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 148368246027496855429269410461905580534702591150311640098121562356703253603825174359892483308928337501453556765440046361081982695395709015429019927978515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 148368246027496855429269410461905580534702591150311640098121562356703253603825174359892483308928337501453556765440046361081982695395709015429019927978515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 741841230137484277146347052309527902673512955751558200490607811783516268019125871799462416544641687507267783827200231805409913476978545077145099639892578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 741841230137484277146347052309527902673512955751558200490607811783516268019125871799462416544641687507267783827200231805409913476978545077145099639892578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3709206150687421385731735261547639513367564778757791002453039058917581340095629358997312082723208437536338919136001159027049567384892725385725498199462890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 3709206150687421385731735261547639513367564778757791002453039058917581340095629358997312082723208437536338919136001159027049567384892725385725498199462890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 18546030753437106928658676307738197566837823893788955012265195294587906700478146794986560413616042187681694595680005795135247836924463626928627490997314453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 18546030753437106928658676307738197566837823893788955012265195294587906700478146794986560413616042187681694595680005795135247836924463626928627490997314453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 92730153767185534643293381538690987834189119468944775061325976472939533502390733974932802068080210938408472978400028975676239184622318134643137454986572265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 92730153767185534643293381538690987834189119468944775061325976472939533502390733974932802068080210938408472978400028975676239184622318134643137454986572265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 463650768835927673216466907693454939170945597344723875306629882364697667511953669874664010340401054692042364892000144878381195923111590673215687274932861328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 463650768835927673216466907693454939170945597344723875306629882364697667511953669874664010340401054692042364892000144878381195923111590673215687274932861328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2318253844179638366082334538467274695854727986723619376533149411823488337559768349373320051702005273460211824460000724391905979615557953366078436374664306640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2318253844179638366082334538467274695854727986723619376533149411823488337559768349373320051702005273460211824460000724391905979615557953366078436374664306640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 11591269220898191830411672692336373479273639933618096882665747059117441687798841746866600258510026367301059122300003621959529898077789766830392181873321533203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 11591269220898191830411672692336373479273639933618096882665747059117441687798841746866600258510026367301059122300003621959529898077789766830392181873321533203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 57956346104490959152058363461681867396368199668090484413328735295587208438994208734333001292550131836505295611500018109797649490388948834151960909366607666015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 57956346104490959152058363461681867396368199668090484413328735295587208438994208734333001292550131836505295611500018109797649490388948834151960909366607666015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 289781730522454795760291817308409336981840998340452422066643676477936042194971043671665006462750659182526478057500090548988247451944744170759804546833038330078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 289781730522454795760291817308409336981840998340452422066643676477936042194971043671665006462750659182526478057500090548988247451944744170759804546833038330078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1448908652612273978801459086542046684909204991702262110333218382389680210974855218358325032313753295912632390287500452744941237259723720853799022734165191650390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1448908652612273978801459086542046684909204991702262110333218382389680210974855218358325032313753295912632390287500452744941237259723720853799022734165191650390625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 7244543263061369894007295432710233424546024958511310551666091911948401054874276091791625161568766479563161951437502263724706186298618604268995113670825958251953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 7244543263061369894007295432710233424546024958511310551666091911948401054874276091791625161568766479563161951437502263724706186298618604268995113670825958251953125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 36222716315306849470036477163551167122730124792556552758330459559742005274371380458958125807843832397815809757187511318623530931493093021344975568354129791259765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 36222716315306849470036477163551167122730124792556552758330459559742005274371380458958125807843832397815809757187511318623530931493093021344975568354129791259765625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 181113581576534247350182385817755835613650623962782763791652297798710026371856902294790629039219161989079048785937556593117654657465465106724877841770648956298828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 181113581576534247350182385817755835613650623962782763791652297798710026371856902294790629039219161989079048785937556593117654657465465106724877841770648956298828125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 905567907882671236750911929088779178068253119813913818958261488993550131859284511473953145196095809945395243929687782965588273287327325533624389208853244781494140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 905567907882671236750911929088779178068253119813913818958261488993550131859284511473953145196095809945395243929687782965588273287327325533624389208853244781494140625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4527839539413356183754559645443895890341265599069569094791307444967750659296422557369765725980479049726976219648438914827941366436636627668121946044266223907470703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 4527839539413356183754559645443895890341265599069569094791307444967750659296422557369765725980479049726976219648438914827941366436636627668121946044266223907470703125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 22639197697066780918772798227219479451706327995347845473956537224838753296482112786848828629902395248634881098242194574139706832183183138340609730221331119537353515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 22639197697066780918772798227219479451706327995347845473956537224838753296482112786848828629902395248634881098242194574139706832183183138340609730221331119537353515625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 113195988485333904593863991136097397258531639976739227369782686124193766482410563934244143149511976243174405491210972870698534160915915691703048651106655597686767578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 113195988485333904593863991136097397258531639976739227369782686124193766482410563934244143149511976243174405491210972870698534160915915691703048651106655597686767578125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 565979942426669522969319955680486986292658199883696136848913430620968832412052819671220715747559881215872027456054864353492670804579578458515243255533277988433837890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 565979942426669522969319955680486986292658199883696136848913430620968832412052819671220715747559881215872027456054864353492670804579578458515243255533277988433837890625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2829899712133347614846599778402434931463290999418480684244567153104844162060264098356103578737799406079360137280274321767463354022897892292576216277666389942169189453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 2829899712133347614846599778402434931463290999418480684244567153104844162060264098356103578737799406079360137280274321767463354022897892292576216277666389942169189453125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 14149498560666738074232998892012174657316454997092403421222835765524220810301320491780517893688997030396800686401371608837316770114489461462881081388331949710845947265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 14149498560666738074232998892012174657316454997092403421222835765524220810301320491780517893688997030396800686401371608837316770114489461462881081388331949710845947265625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 70747492803333690371164994460060873286582274985462017106114178827621104051506602458902589468444985151984003432006858044186583850572447307314405406941659748554229736328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 70747492803333690371164994460060873286582274985462017106114178827621104051506602458902589468444985151984003432006858044186583850572447307314405406941659748554229736328125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 353737464016668451855824972300304366432911374927310085530570894138105520257533012294512947342224925759920017160034290220932919252862236536572027034708298742771148681640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 353737464016668451855824972300304366432911374927310085530570894138105520257533012294512947342224925759920017160034290220932919252862236536572027034708298742771148681640625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1768687320083342259279124861501521832164556874636550427652854470690527601287665061472564736711124628799600085800171451104664596264311182682860135173541493713855743408203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 1768687320083342259279124861501521832164556874636550427652854470690527601287665061472564736711124628799600085800171451104664596264311182682860135173541493713855743408203125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 8843436600416711296395624307507609160822784373182752138264272353452638006438325307362823683555623143998000429000857255523322981321555913414300675867707468569278717041015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 8843436600416711296395624307507609160822784373182752138264272353452638006438325307362823683555623143998000429000857255523322981321555913414300675867707468569278717041015625,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 44217183002083556481978121537538045804113921865913760691321361767263190032191626536814118417778115719990002145004286277616614906607779567071503379338537342846393585205078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["factorial"], "stdout": "", "func_name": "factorial", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"answer": 44217183002083556481978121537538045804113921865913760691321361767263190032191626536814118417778115719990002145004286277616614906607779567071503379338537342846393585205078125,
    "n": 5}, "is_highlighted": true, "is_parent": false, "func_name": "factorial",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "factorial_f1",
    "ordered_varnames": ["n", "answer"]}], "globals": {"factorial": ["REF", 1]}, "heap":
    {"1": ["FUNCTION", "factorial(n)", null]}, "line": 4, "event": "step_line"}, {"exception_msg":
    "(stopped after 500 steps to prevent possible infinite loop)", "event": "instruction_limit_reached"}]};
    var ch05_fac_vis; $(document).ready(function() { ch05_fac_vis = new ExecutionVisualizer(''ch05_fac'',ch05_fac_trace,
    {embeddedMode: true, verticalStack: true, heightChangeCallback: redrawAllVisualizerArrows,
    codeDivWidth: 500 }); attachLoggers(ch05_fac_vis,''ch05_fac''); allVisualizers.push(ch05_fac_vis);
    }); $(document).ready(function() { $("#ch05_fac_tracecheck").click(function()
    { logBookEvent({''event'':''codelens'', ''act'': ''check'', ''div_id'':''ch05_fac''});
    }); }); if (allVisualizers === undefined) { var allVisualizers = []; } $(window).resize(function()
    { ch05_fac_vis.redrawConnectors(); }); </script> <p>This code will also run forever.
    But why? After all, we definitely do decrease <tt class="docutils literal"><span
    class="pre">n</span></tt>. This bug is more subtle. Remember that the <tt class="docutils
    literal"><span class="pre">while</span></tt> loop runs only the code in the body
    of the loop before repeating. Because the statement that subtracts 1 from <tt
    class="docutils literal"><span class="pre">n</span></tt> is not indented, it is
    not part of the <tt class="docutils literal"><span class="pre">while</span></tt>
    loop’s body. Again, the loop variable does not change within the loop, and it
    runs forever.</p> <div class="figure align-right" style="width: 150px"> <a class="reference
    internal image-reference" href="../Images/Alien6.PNG"><img alt="../Images/Alien6.PNG"
    src="../Images/Alien6.PNG" style="width: 0px;"/></a> <p class="caption"><em>The
    Apple Corporation’s address is</em> One Infinite Loop, Cupertino, CA</p> </div>
    <p id="index-6">A loop that never ends is called an <em>infinite loop</em> and
    it is a common programming bug. When using a <tt class="docutils literal"><span
    class="pre">while</span></tt> loop, remember to update your loop-control variable
    inside the loop. It’s an advantage of <tt class="docutils literal"><span class="pre">for</span></tt>
    loops that this updating is done automatically! In fact, the tendency to accidentally
    create infinite loops is so common that it leads us to an important takeaway message
    about the choice between <tt class="docutils literal"><span class="pre">for</span></tt>
    and <tt class="docutils literal"><span class="pre">while</span></tt> loops.</p>
    <p><strong>Takeaway message:</strong> <em>If you know in advance how many times
    you want to run a loop, use a</em> <tt class="docutils literal"><span class="pre">for</span></tt>
    <em>loop; if you don’t, use a</em> <tt class="docutils literal"><span class="pre">while</span></tt>
    <em>loop.</em></p> </div> <div class="section" id="creating-infinite-loops-on-purpose">
    <h3 id="sigil_toc_id_85">5.3.7 Creating Infinite Loops On Purpose</h3> <p>Sometimes
    infinite loops can come in handy. They’re not actually infinite, but the idea
    is that we will stop them when we are “done,” and we don’t have to decide what
    “done” means until later in the loop itself.</p> <div class="figure align-right"
    style="width: 150px"> <img alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG"/>
    <p class="caption"><em>I’m pro-crastination!</em></p> </div> <p>For example, consider
    a different version of the recommender loop above that gathers data from the user.</p>
    <div class="highlight-python"><div class="highlight"><pre><span class="n">numCorrect</span>
    <span class="o">=</span> <span class="mi">0</span> <span class="k">while</span>
    <span class="bp">True</span><span class="p">:</span> <span class="c"># run forever
    -- or at least as long as needed...</span> <span class="n">newPref</span> <span
    class="o">=</span> <span class="nb">input</span><span class="p">(</span><span
    class="s">"Please enter an artist or band that you like, </span><span class="se">\</span>
    <span class="s"> or just press enter to see recommendations: "</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">newPref</span><span class="p">:</span>
    <span class="n">prefs</span><span class="o">.</span><span class="n">append</span><span
    class="p">(</span><span class="n">newPref</span><span class="p">)</span> <span
    class="k">else</span><span class="p">:</span> <span class="k">break</span> <span
    class="k">print</span><span class="p">(</span><span class="s">''Thanks for your
    input!''</span><span class="p">)</span> </pre> </div> </div> <p>The body of the
    <tt class="docutils literal"><span class="pre">else</span></tt> statement contains
    one instruction: the <tt class="docutils literal"><span class="pre">break</span></tt>
    instruction. <tt class="docutils literal"><span class="pre">break</span></tt>
    will immediately halt the execution of the loop that it appears in, causing the
    code to jump to the next line immediately after the loop body. <tt class="docutils
    literal"><span class="pre">break</span></tt> can be used in any kind of loop,
    and its effect is always the same–if the code reaches a <tt class="docutils literal"><span
    class="pre">break</span></tt> statement, Python <em>immediately</em> exits the
    containing loop and proceeds with the next line after the loop. If you have one
    loop inside another loop (a perfectly OK thing to do, as you’ll see below), the
    <tt class="docutils literal"><span class="pre">break</span></tt> statement exits
    only the innermost loop.</p> <div class="figure align-right" style="width: 150px">
    <img alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG"/> <p class="caption"><em>Yes!
    I need a</em> <tt class="docutils literal"><span class="pre">break</span></tt>!</p>
    </div> <dl class="docutils"> <dt>You might ask, “Do we really need a</dt> <dd><tt
    class="docutils literal"><span class="pre">break</span></tt> ?”</dd> </dl> <p>After
    all, the loop above can be written with a more informative condition, as we saw
    above. Which approach is better? It’s a matter of style. Some prefer the “delayed
    decision” approach, writing loops that appear to run too long, only to break out
    of them from the inside; others prefer to put all of the conditions directly in
    the loop header. The advantage of the latter approach is that the condition helps
    clarify the context for the loop. The advantage of the former (in some cases anyway)
    is that it avoids the awkward double-input statement—there’s no need to ask the
    user to enter their initial response in a separate input statement before the
    loop begins.</p> </div> <div class="section" id="iteration-is-efficient"> <h3
    id="sigil_toc_id_86">5.3.8 Iteration Is Efficient</h3> <p>The heart of imperative
    programming is the ability to change the value of variables—one or more accumulators—until
    a desired result is reached. These in-place changes can be more efficient, because
    they save the overhead of recursive function calls. For example, on our aging
    computer, the Python code</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="n">counter</span> <span class="o">=</span> <span class="mi">0</span> <span
    class="k">while</span> <span class="n">counter</span> <span class="o"><</span>
    <span class="mi">10000</span><span class="p">:</span> <span class="n">counter</span>
    <span class="o">=</span> <span class="n">counter</span> <span class="o">+</span>
    <span class="mi">1</span> </pre> </div> </div> <p>ran in 2.6 milliseconds. The
    “equivalent” recursive program</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="k">def</span> <span class="nf">increment</span><span class="p">(</span><span
    class="n">value</span><span class="p">,</span> <span class="n">times</span><span
    class="p">):</span> <span class="k">if</span> <span class="n">times</span> <span
    class="o"><=</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span>
    <span class="n">value</span> <span class="k">return</span> <span class="n">increment</span><span
    class="p">(</span><span class="n">value</span> <span class="o">+</span> <span
    class="mi">1</span><span class="p">,</span> <span class="n">times</span> <span
    class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">counter</span>
    <span class="o">=</span> <span class="n">increment</span><span class="p">(</span><span
    class="mi">0</span><span class="p">,</span> <span class="mi">10000</span><span
    class="p">)</span> </pre> </div> </div> <p>ran more than an order of magnitude
    slower, in 38.3 milliseconds.</p> <p>Why the difference? Both versions evaluate
    10,000 boolean tests; both execute the same 10,000 additions. The difference comes
    from the overhead of building and removing the stack frames used to implement
    the function calls made recursively.</p> <p>Memory differences are even more dramatic:
    storing partial results on the stack can quickly exhaust even today’s huge memory
    stores.</p> </div> </div> <div class="section" id="references-and-mutable-vs-immutable-data">
    <h2 id="sigil_toc_id_87">5.4 References and Mutable vs. Immutable Data</h2> <p>At
    the beginning of this chapter we introduced the two key components of imperative
    programming: iteration and data mutation. We have already discussed iteration
    in some depth. Now we begin to explore the concept of data mutation.</p> <div
    class="section" id="assignment-by-reference"> <h3 id="sigil_toc_id_88">5.4.1 Assignment
    by <em>Reference</em></h3> <p>The assignment and re-assignment of values to one
    variable—the accumulator—characterizes imperative programming with loops. All
    of these assignments are efficient, but <strong>only if the size of the copied
    data is small!</strong> Floating-point values and typical integers are stored
    in a small space, often the size of one register (32 or 64 bits). They can be
    copied from place to place rapidly. For example, the assignment operation</p>
    <div class="highlight-python"><div class="highlight"><pre><span class="c"># suppose
    x refers to the value 42 right now</span> <span class="n">y</span> <span class="o">=</span>
    <span class="n">x</span> </pre> </div> </div> <p>runs extremely fast, probably
    best measured in nanoseconds, as suggested by the timings in the previous section.</p>
    <p>Lists, on the other hand, can grow very large. Consider this code:</p> <div
    class="highlight-python"><div class="highlight"><pre><span class="c"># suppose
    that list1 holds the value of</span> <span class="c"># list(range(1000042)) right
    now</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">list1</span>
    </pre> </div> </div> <p>This assignment makes <tt class="docutils literal"><span
    class="pre">list2</span></tt> refer to a 1,000,042-element list—a potentially
    expensive proposition, if it involved 1,000,042 individual integer assignments
    like the <tt class="docutils literal"><span class="pre">y</span> <span class="pre">=</span>
    <span class="pre">x</span></tt> example above. What’s more, there’s no guarantee
    the elements of <tt class="docutils literal"><span class="pre">list1</span></tt>
    aren’t lists themselvesldots .</p> <p>How does Python make <em>both</em> integer
    and list assignments efficient? It does so through a simple, single rule for all
    of its data types: <em>Assignments copy a single reference.</em></p> <p>Reference?
    It turns out that when you assign a piece of data (e.g., an integer) to a variable,
    what you are actually doing is storing the memory location of that piece of data
    in the variable. We say that the variable holds a <em>reference</em> to the piece
    of data. When we think of a variable, we typically think only of the data to which
    the variable refers but you can also obtain the reference (i.e., the memory location
    of that data) with Python’s built-in <tt class="docutils literal"><span class="pre">id()</span></tt>
    function:</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="gp">>>> </span><span class="n">x</span> <span class="o">=</span> <span
    class="mi">42</span> <span class="gp">>>> </span><span class="n">x</span> <span
    class="c"># Python will reply with x''s value</span> <span class="go">42</span>
    <span class="gp">>>> </span><span class="nb">id</span><span class="p">(</span><span
    class="n">x</span><span class="p">)</span> <span class="c"># asks for x''s reference
    (the memory location of its contents)</span> <span class="go">505494448 # this
    will be different on your machine!</span> </pre> </div> </div> <p>When we talk
    about a variable’s <em>value</em>, we mean the data to which the variable refers;
    when we talk about a variable’s <em>reference</em>, we mean the memory location
    of that data. For example, in the code above, the value of <tt class="docutils
    literal"><span class="pre">x</span></tt> is 42, and its reference is 505494448,
    which is the location of the value 42 in memory. By the way, the idea of the memory
    location of a piece of data should be very familiar to you from Chapter 4\. If
    you like, you can think of the variables that store the references as registers
    on the CPU. (This is not quite exactly correct, but a reasonable conceptual model.)
    Figure 5.1 illustrates this concept graphically.</p> <div class="figure align-center">
    <a class="reference internal image-reference" href="../Images/fivepointone.png"><img
    alt="../Images/fivepointone.png" src="../Images/fivepointone.png" style="width:
    750.0px;"/></a> <p class="caption">Figure 5.1: A depiction of how Python stores
    data. The boxes on the left are the variables, which you can think of as registers
    on the CPU, which store references to locations in memory. The actual data is
    stored in memory.</p> </div> <p>Python makes assignment efficient by <em>only
    copying the reference, and not the data</em>:</p> <div class="highlight-python"><div
    class="highlight"><pre><span class="gp">>>> </span><span class="n">x</span> <span
    class="o">=</span> <span class="mi">42</span> <span class="c"># this puts the
    value 42 in the next memory slot, 505494448 and then it gives x a copy</span>
    <span class="go"> # of that memory reference</span> <span class="gp">>>> </span><span
    class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="c">#
    copies the reference in x into y, so that x and y both refer to the same integer
    42 in memory</span> </pre> </div> </div> <div class="highlight-python"><div class="highlight"><pre><span
    class="gp">>>> </span><span class="nb">id</span><span class="p">(</span><span
    class="n">x</span><span class="p">)</span> <span class="c"># asks for x''s reference
    (the memory location of its contents)</span> <span class="go">505494448</span>
    <span class="gp">>>> </span><span class="nb">id</span><span class="p">(</span><span
    class="n">y</span><span class="p">)</span> <span class="c"># asks for y''s reference
    (the memory location of its contents)</span> <span class="go">505494448</span>
    </pre> </div> </div> <p>As you would expect, changes to <tt class="docutils literal"><span
    class="pre">x</span></tt> do not affect <tt class="docutils literal"><span class="pre">y</span></tt>:</p>
    <div class="highlight-python"><div class="highlight"><pre><span class="gp">>>>
    </span><span class="n">x</span> <span class="o">=</span> <span class="mi">43</span>
    <span class="c"># this puts 43 in the next memory slot,505494464</span> <span
    class="gp">>>> </span><span class="nb">id</span><span class="p">(</span><span
    class="n">x</span><span class="p">)</span> <span class="go">505494464 # x''s reference
    has changed</span> <span class="gp">>>> </span><span class="nb">id</span><span
    class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="go">505494448
    # but y''s has not</span> </pre> </div> </div> <p>The result of executing the
    above code is shown on the right in Figure 5.1.</p> <div class="figure align-center">
    <a class="reference internal image-reference" href="../Images/fivepointtwo.png"><img
    alt="../Images/fivepointtwo.png" src="../Images/fivepointtwo.png" style="width:
    750.0px;"/></a> <p class="caption">Figure 5.2: A box-and-arrow diagram abstraction
    of how Python stores list data. All of the elements in the list (and the list
    itself) are in memory, but we have abstracted away from the exact addresses of
    these elements.</p> </div> <p>Assignment happens the same way, regardless of the
    data types involved:</p> <div class="figure align-right" style="width: 150px">
    <a class="reference internal image-reference" href="../Images/Alien6.PNG"><img
    alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG" style="width: 0px;"/></a>
    <p class="caption"><em>It is possible to reprogram how assignment works for user-defined
    data types, but this is the default.</em></p> </div> <div class="highlight-python"><div
    class="highlight"><pre><span class="gp">>>> </span><span class="n">list1</span>
    <span class="o">=</span> <span class="p">[</span><span class="mi">42</span><span
    class="p">,</span><span class="mi">43</span><span class="p">]</span> <span class="c">#
    this will create the list [42,43] and give its location to list1</span> <span
    class="gp">>>> </span><span class="n">list2</span> <span class="o">=</span> <span
    class="n">list1</span> <span class="c"># give list2 that reference, as well</span>
    </pre> </div> </div> <div class="highlight-python"><div class="highlight"><pre><span
    class="gp">>>> </span><span class="n">list1</span> <span class="c"># the values
    of each are as expected</span> <span class="go">[42,43]</span> <span class="gp">>>>
    </span><span class="n">list2</span> <span class="go">[42,43]</span> </pre> </div>
    </div> <div class="highlight-python"><div class="highlight"><pre><span class="gp">>>>
    </span><span class="nb">id</span><span class="p">(</span><span class="n">list1</span><span
    class="p">)</span> <span class="c"># asks for list1''s reference (its memory location)</span>
    <span class="go">538664</span> <span class="gp">>>> </span><span class="nb">id</span><span
    class="p">(</span><span class="n">list2</span><span class="p">)</span> <span class="c">#
    asks for list2''s reference (its memory location)</span> <span class="go">538664</span>
    </pre> </div> </div> <p>As the data we store gets more complicated, it becomes
    cumbersome to try to actually represent what is happening in memory faithfully,
    so computer scientists often use a type of diagram called a box-and-arrow diagram
    to illustrate how references refer to memory. A box-and-arrow diagram for the
    above code is shown on the left in Figure 5.2\. In this figure, the list <tt class="docutils
    literal"><span class="pre">[42,</span> <span class="pre">43]</span></tt> exists
    in memory at the location referred to by both <tt class="docutils literal"><span
    class="pre">list1</span></tt> and <tt class="docutils literal"><span class="pre">list2</span></tt>,
    but instead of writing out the actual memory location, we indicate that <tt class="docutils
    literal"><span class="pre">list1</span></tt> and <tt class="docutils literal"><span
    class="pre">list2</span></tt> refer to the same data in memory using arrows. In
    fact, notice something interesting about Figure5.2: the elements in the list are
    also references to data in other locations in memory! This is a fundamental difference
    between integers and lists: a list refers to the memory location of a <em>collection</em>
    of potentially many elements, each of which has its own reference to the underlying
    data!</p> <p>As with integers, if an assignment is made involving a list, <em>one
    reference is copied</em>, as shown in the code below, and on the right in Figure
    5.2:</p> <div class="highlight-python"><div class="highlight"><pre><span class="gp">>>>
    </span><span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span
    class="mi">44</span><span class="p">]</span> <span class="c"># will create the
    list [44] and make list1 refer to it</span> <span class="gp">>>> </span><span
    class="nb">id</span><span class="p">(</span><span class="n">list1</span><span
    class="p">)</span> <span class="c"># list1''s reference has changed</span> <span
    class="go">541600</span> <span class="gp">>>> </span><span class="nb">id</span><span
    class="p">(</span><span class="n">list2</span><span class="p">)</span> <span class="c">#
    but list2''s has not</span> <span class="go">538664</span> </pre> </div> </div>
    <p>The assignment <tt class="docutils literal"><span class="pre">list2</span>
    <span class="pre">=</span> <span class="pre">list1</span></tt> caused both <tt
    class="docutils literal"><span class="pre">list1</span></tt> and <tt class="docutils
    literal"><span class="pre">list2</span></tt> to refer to the same list.</p> <p>This
    one-reference rule can have surprising repercussions. Consider this example, in
    which <tt class="docutils literal"><span class="pre">x</span></tt>, <tt class="docutils
    literal"><span class="pre">list1[0]</span></tt>, and <tt class="docutils literal"><span
    class="pre">list2[0]</span></tt> start out by holding the same reference to the
    value 42:</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="gp">>>> </span><span class="n">x</span> <span class="o">=</span> <span
    class="mi">42</span> <span class="c"># to get started</span> <span class="gp">>>>
    </span><span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span
    class="n">x</span><span class="p">]</span> <span class="c"># similar to before</span>
    <span class="gp">>>> </span><span class="n">list2</span> <span class="o">=</span>
    <span class="n">list1</span> <span class="c"># give list2 that reference, as well</span>
    <span class="gp">>>> </span><span class="nb">id</span><span class="p">(</span><span
    class="n">x</span><span class="p">)</span> <span class="c"># all refer to the
    same data</span> <span class="go">505494448</span> <span class="gp">>>> </span><span
    class="nb">id</span><span class="p">(</span><span class="n">list1</span><span
    class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="go">505494448</span>
    <span class="gp">>>> </span><span class="nb">id</span><span class="p">(</span><span
    class="n">list2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="go">505494448</span> </pre> </div> </div> <p>What happens when we
    change <tt class="docutils literal"><span class="pre">list1[0]</span></tt>?</p>
    <div class="highlight-python"><div class="highlight"><pre><span class="gp">>>>
    </span><span class="n">list1</span><span class="p">[</span><span class="mi">0</span><span
    class="p">]</span> <span class="o">=</span> <span class="mi">43</span> <span class="c">#
    this will change the reference held by the "zeroth" element of list1</span> <span
    class="gp">>>> </span><span class="n">list1</span><span class="p">[</span><span
    class="mi">0</span><span class="p">]</span> <span class="go">43 # not surprising
    at all</span> <span class="gp">>>> </span><span class="n">list2</span><span class="p">[</span><span
    class="mi">0</span><span class="p">]</span> <span class="go">43 # aha! list1 and
    list2 refer to the same list</span> <span class="gp">>>> </span><span class="n">x</span>
    <span class="go">42 # x is a distinct reference</span> </pre> </div> </div> <p>Let’s
    see</p> <div class="highlight-python"><div class="highlight"><pre><span class="gp">>>>
    </span><span class="nb">id</span><span class="p">(</span><span class="n">list1</span><span
    class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c">#
    indeed, the reference of that zeroth element has changed</span> <span class="go">505494464</span>
    <span class="gp">>>> </span><span class="nb">id</span><span class="p">(</span><span
    class="n">list2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="c"># list2''s zeroth element has changed too!</span> <span class="go">505494464</span>
    <span class="gp">>>> </span><span class="nb">id</span><span class="p">(</span><span
    class="n">x</span><span class="p">)</span> <span class="c"># x is still, happily,
    the same as before</span> <span class="go">505494448</span> </pre> </div> </div>
    <p>This example is illustrated in Figure 5.3 and codelens examples ‘ch05_ref1’
    and ‘ch05_ref2’.</p> <div id="ch05_ref1"><div class="ExecutionVisualizer"><div
    id="vizHeader" style="display: none;"> <textarea class="vizTitleText" id="vizTitleEditor"
    cols="60" rows="1" style="display: none;"/> <div class="vizTitleText" id="vizTitleViewer"/>
    <textarea class="vizDescriptionText" id="vizDescriptionEditor" cols="75" rows="2"
    style="display: none;"/> <div class="vizDescriptionText" id="vizDescriptionViewer"/>
    </div> <table border="0" class="visualizer"><tbody><tr><td class="vizLayoutTd"
    id="vizLayoutTdFirst"><div id="codeDisplayDiv" style="max-width: 500px;"> <div
    id="pyCodeOutputDiv" style="max-width: 500px; max-height: 400px;"><table id="pyCodeOutput"><tbody><tr><td
    id="gutterTD" valign="top" rowspan="3"><svg id="leftCodeGutterSVG" style="height:
    69px;"><polygon id="prevLineArrow" points="0,3 12,3 12,0 18,5 12,10 12,7 0,7"
    fill="#c9e6ca" style="display: none;"/><polygon id="curLineArrow" points="0,3
    12,3 12,0 18,5 12,10 12,7 0,7" fill="#e93f34" transform="translate(0, 5.361328125)"/></svg>
    </td> <td class="lineNo" id="lineNo1">1</td> <td class="cod" id="v3__cod1">x = 42</td>
    </tr> <tr><td class="lineNo" id="lineNo2">2</td> <td class="cod" id="v3__cod2">list1 = [x]</td>
    </tr> <tr><td class="lineNo" id="lineNo3">3</td> <td class="cod" id="v3__cod3">list2 = list1</td>
    </tr> </tbody> </table> </div> <div id="editCodeLinkDiv" style="display: none;"><a
    id="editBtn" href="#">Edit code</a></div> <div id="executionSlider" class="ui-slider
    ui-slider-horizontal ui-widget ui-widget-content ui-corner-all" style="width:
    480px; font-size: 0.9em;"></div> <div id="vcrControls"> <button id="jmpFirstInstr"
    type="button" disabled="disabled"><< First</button> <button id="jmpStepBack" type="button"
    disabled="disabled">< Back</button> <span id="curInstr">Step 1 of 3</span> <button
    id="jmpStepFwd" type="button">Forward ></button> <button id="jmpLastInstr" type="button">Last
    >></button> </div> <div id="errorOutput" style="display: none;"/> <div id="legendDiv"><svg
    id="prevLegendArrowSVG"><polygon points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#c9e6ca"/></svg>
    line that has just executed<p style="margin-top: 4px"><svg id="curLegendArrowSVG"><polygon
    points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#e93f34"/></svg> next line to
    execute</p> </div> <div id="stepAnnotationDiv"> <textarea class="annotationText"
    id="stepAnnotationEditor" cols="60" rows="3" style="display: none;"/> <div class="annotationText"
    id="stepAnnotationViewer"/> </div> <div id="annotateLinkDiv"><button id="annotateBtn"
    type="button" style="display: none;">Annotate this step</button></div> </div>
    <div id="htmlOutputDiv"/> <div id="progOutputs" style="display: none;"> Program
    output:<br/> <textarea id="pyStdout" cols="50" rows="10" wrap="off" readonly=""
    style="max-width: 500px;"/> </div> </td> </tr> <tr><td class="vizLayoutTd" id="vizLayoutTdSecond"><div
    id="dataViz"> <table id="stackHeapTable"> <tbody><tr> <td id="stack_td"> <div
    id="globals_area"> <div id="stackHeader">Frames</div> <div class="stackFrame highlightedStackFrame"
    id="v3__globals" style="display: none;"><div id="v3__globals_header" class="stackFrameHeader">Global
    variables</div> <table class="stackFrameVarTable" id="v3__global_table"/> </div>
    </div> <div id="stack"/> </td> <td id="heap_td"> <div id="heap"> <div id="heapHeader">Objects</div>
    </div> </td> </tr> </tbody> </table> </div> </td> </tr> </tbody> </table> </div>
    </div> <p class="cl_caption"><span class="cl_caption_text"> (ch05_ref1)</span>
    </p> <script type="text/javascript"> var ch05_ref1_trace = {"code": "x = 42\nlist1
    = [x]\nlist2 = list1", "trace": [{"ordered_globals": [], "stdout": "", "func_name":
    "<module>", "stack_to_render": [], "globals": {}, "heap": {}, "line": 1, "event":
    "step_line"}, {"ordered_globals": ["x"], "stdout": "", "func_name": "<module>",
    "stack_to_render": [], "globals": {"x": 42}, "heap": {}, "line": 2, "event": "step_line"},
    {"ordered_globals": ["x", "list1"], "stdout": "", "func_name": "<module>", "stack_to_render":
    [], "globals": {"x": 42, "list1": ["REF", 1]}, "heap": {"1": ["LIST", 42]}, "line":
    3, "event": "step_line"}, {"ordered_globals": ["x", "list1", "list2"], "stdout":
    "", "func_name": "<module>", "stack_to_render": [], "globals": {"x": 42, "list1":
    ["REF", 1], "list2": ["REF", 1]}, "heap": {"1": ["LIST", 42]}, "line": 3, "event":
    "return"}]}; var ch05_ref1_vis; $(document).ready(function() { ch05_ref1_vis =
    new ExecutionVisualizer(''ch05_ref1'',ch05_ref1_trace, {embeddedMode: true, verticalStack:
    true, heightChangeCallback: redrawAllVisualizerArrows, codeDivWidth: 500 }); attachLoggers(ch05_ref1_vis,''ch05_ref1'');
    allVisualizers.push(ch05_ref1_vis); }); $(document).ready(function() { $("#ch05_ref1_tracecheck").click(function()
    { logBookEvent({''event'':''codelens'', ''act'': ''check'', ''div_id'':''ch05_ref1''});
    }); }); if (allVisualizers === undefined) { var allVisualizers = []; } $(window).resize(function()
    { ch05_ref1_vis.redrawConnectors(); }); </script> <div id="ch05_ref2"><div class="ExecutionVisualizer"><div
    id="vizHeader" style="display: none;"> <textarea class="vizTitleText" id="vizTitleEditor"
    cols="60" rows="1" style="display: none;"/> <div class="vizTitleText" id="vizTitleViewer"/>
    <textarea class="vizDescriptionText" id="vizDescriptionEditor" cols="75" rows="2"
    style="display: none;"/> <div class="vizDescriptionText" id="vizDescriptionViewer"/>
    </div> <table border="0" class="visualizer"><tbody><tr><td class="vizLayoutTd"
    id="vizLayoutTdFirst"><div id="codeDisplayDiv" style="max-width: 500px;"> <div
    id="pyCodeOutputDiv" style="max-width: 500px; max-height: 400px;"><table id="pyCodeOutput"><tbody><tr><td
    id="gutterTD" valign="top" rowspan="4"><svg id="leftCodeGutterSVG" style="height:
    93px;"><polygon id="prevLineArrow" points="0,3 12,3 12,0 18,5 12,10 12,7 0,7"
    fill="#c9e6ca" style="display: none;"/><polygon id="curLineArrow" points="0,3
    12,3 12,0 18,5 12,10 12,7 0,7" fill="#e93f34" transform="translate(0, 5.359375)"/></svg>
    </td> <td class="lineNo" id="lineNo1">1</td> <td class="cod" id="v4__cod1">x = 42</td>
    </tr> <tr><td class="lineNo" id="lineNo2">2</td> <td class="cod" id="v4__cod2">list1 = [x]</td>
    </tr> <tr><td class="lineNo" id="lineNo3">3</td> <td class="cod" id="v4__cod3">list2 = list1</td>
    </tr> <tr><td class="lineNo" id="lineNo4">4</td> <td class="cod" id="v4__cod4">list1[0] = 43</td>
    </tr> </tbody> </table> </div> <div id="editCodeLinkDiv" style="display: none;"><a
    id="editBtn" href="#">Edit code</a></div> <div id="executionSlider" class="ui-slider
    ui-slider-horizontal ui-widget ui-widget-content ui-corner-all" style="width:
    480px; font-size: 0.9em;"></div> <div id="vcrControls"> <button id="jmpFirstInstr"
    type="button" disabled="disabled"><< First</button> <button id="jmpStepBack" type="button"
    disabled="disabled">< Back</button> <span id="curInstr">Step 1 of 4</span> <button
    id="jmpStepFwd" type="button">Forward ></button> <button id="jmpLastInstr" type="button">Last
    >></button> </div> <div id="errorOutput" style="display: none;"/> <div id="legendDiv"><svg
    id="prevLegendArrowSVG"><polygon points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#c9e6ca"/></svg>
    line that has just executed<p style="margin-top: 4px"><svg id="curLegendArrowSVG"><polygon
    points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#e93f34"/></svg> next line to
    execute</p> </div> <div id="stepAnnotationDiv"> <textarea class="annotationText"
    id="stepAnnotationEditor" cols="60" rows="3" style="display: none;"/> <div class="annotationText"
    id="stepAnnotationViewer"/> </div> <div id="annotateLinkDiv"><button id="annotateBtn"
    type="button" style="display: none;">Annotate this step</button></div> </div>
    <div id="htmlOutputDiv"/> <div id="progOutputs" style="display: none;"> Program
    output:<br/> <textarea id="pyStdout" cols="50" rows="10" wrap="off" readonly=""
    style="max-width: 500px;"/> </div> </td> </tr> <tr><td class="vizLayoutTd" id="vizLayoutTdSecond"><div
    id="dataViz"> <table id="stackHeapTable"> <tbody><tr> <td id="stack_td"> <div
    id="globals_area"> <div id="stackHeader">Frames</div> <div class="stackFrame highlightedStackFrame"
    id="v4__globals" style="display: none;"><div id="v4__globals_header" class="stackFrameHeader">Global
    variables</div> <table class="stackFrameVarTable" id="v4__global_table"/> </div>
    </div> <div id="stack"/> </td> <td id="heap_td"> <div id="heap"> <div id="heapHeader">Objects</div>
    </div> </td> </tr> </tbody> </table> </div> </td> </tr> </tbody> </table> </div>
    </div> <p class="cl_caption"><span class="cl_caption_text"> (ch05_ref2)</span>
    </p> <script type="text/javascript"> var ch05_ref2_trace = {"code": "x = 42\nlist1
    = [x]\nlist2 = list1\nlist1[0] = 43", "trace": [{"ordered_globals": [], "stdout":
    "", "func_name": "<module>", "stack_to_render": [], "globals": {}, "heap": {},
    "line": 1, "event": "step_line"}, {"ordered_globals": ["x"], "stdout": "", "func_name":
    "<module>", "stack_to_render": [], "globals": {"x": 42}, "heap": {}, "line": 2,
    "event": "step_line"}, {"ordered_globals": ["x", "list1"], "stdout": "", "func_name":
    "<module>", "stack_to_render": [], "globals": {"x": 42, "list1": ["REF", 1]},
    "heap": {"1": ["LIST", 42]}, "line": 3, "event": "step_line"}, {"ordered_globals":
    ["x", "list1", "list2"], "stdout": "", "func_name": "<module>", "stack_to_render":
    [], "globals": {"x": 42, "list1": ["REF", 1], "list2": ["REF", 1]}, "heap": {"1":
    ["LIST", 42]}, "line": 4, "event": "step_line"}, {"ordered_globals": ["x", "list1",
    "list2"], "stdout": "", "func_name": "<module>", "stack_to_render": [], "globals":
    {"x": 42, "list1": ["REF", 1], "list2": ["REF", 1]}, "heap": {"1": ["LIST", 43]},
    "line": 4, "event": "return"}]}; var ch05_ref2_vis; $(document).ready(function()
    { ch05_ref2_vis = new ExecutionVisualizer(''ch05_ref2'',ch05_ref2_trace, {embeddedMode:
    true, verticalStack: true, heightChangeCallback: redrawAllVisualizerArrows, codeDivWidth:
    500 }); attachLoggers(ch05_ref2_vis,''ch05_ref2''); allVisualizers.push(ch05_ref2_vis);
    }); $(document).ready(function() { $("#ch05_ref2_tracecheck").click(function()
    { logBookEvent({''event'':''codelens'', ''act'': ''check'', ''div_id'':''ch05_ref2''});
    }); }); if (allVisualizers === undefined) { var allVisualizers = []; } $(window).resize(function()
    { ch05_ref2_vis.redrawConnectors(); }); </script> <div class="figure align-center">
    <a class="reference internal image-reference" href="../Images/fig5point3.png"><img
    alt="../Images/fig5point3.png" src="../Images/fig5point3.png" style="width: 750.0px;"/></a>
    <p class="caption">Figure 5.3: A graphical illustration of what happens when you
    modify the elements in a list that is referenced by two variables.</p> </div>
    </div> <div class="section" id="mutable-data-types-can-be-changed-using-other-names">
    <span id="index-7"/><h3 id="sigil_toc_id_89">5.4.2 Mutable Data Types Can Be Changed
    Using Other Names!</h3> <p>Note that <tt class="docutils literal"><span class="pre">list2[0]</span></tt>
    has been changed in the above example, even though no assignment statements involving
    <tt class="docutils literal"><span class="pre">list2[0]</span></tt> were run!
    Because <tt class="docutils literal"><span class="pre">list2</span></tt> is really
    just another name for the exact same data as <tt class="docutils literal"><span
    class="pre">list1</span></tt>, we say that <tt class="docutils literal"><span
    class="pre">list2</span></tt> is an <em>alias</em> of <tt class="docutils literal"><span
    class="pre">list1</span></tt>. Note that aliases should be used with caution as
    they can be both powerful and dangerous, as we explore more below.</p> <p>Lists
    are an example of a <em>mutable</em> data type. They are mutable because their
    component parts (in this case, the elements of the list) can be modified. If you
    have two different variables that both refer to the same mutable piece of data
    – as we do with <tt class="docutils literal"><span class="pre">list1</span></tt>
    and <tt class="docutils literal"><span class="pre">list2</span></tt> above – changes
    that are made to the data’s components using one of those variables will also
    be seen when you use the other variable, since both variables refer to the same
    thing.</p> <div class="figure align-right" style="width: 150px"> <a class="reference
    internal image-reference" href="../Images/Alien6.PNG"><img alt="../Images/Alien6.PNG"
    src="../Images/Alien6.PNG" style="width: 0px;"/></a> <p class="caption"><em>Two
    images here—mutation can be good ... or bad.</em></p> </div> <p id="index-8">Data
    types that do not allow changes to their components are termed <em>immutable</em>.
    Integers, floating-point values, and booleans are examples of immutable types.
    This isn’t surprising, because they do not have any accessible component parts
    that could mutate anyway.</p> <div class="figure align-right" style="width: 150px">
    <img alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG"/> <p class="caption"><em>I
    love to talk. I guess that makes me immutable!</em></p> </div> <div class="figure
    align-right" style="width: 150px"> <a class="reference internal image-reference"
    href="../Images/Alien6.PNG"><img alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG"
    style="width: 0px;"/></a> <p class="caption"><em>Python lets you compute what
    bits make up these data types, but you can’t change—or even read—the individual
    bits themselves.</em></p> </div> <p>Types with component parts can also be immutable:
    for example, strings are an immutable type. If you try to change a piece of a
    string, Python will complain:</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="gp">>>> </span><span class="n">s</span> <span class="o">=</span> <span
    class="s">''immutable''</span> <span class="gp">>>> </span><span class="n">s</span><span
    class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span>
    <span class="s">'' ''</span> <span class="gt">Traceback (most recent call last):</span>
    File <span class="nb">"<stdin>"</span>, line <span class="m">1</span>, in <span
    class="n"><module></span> <span class="gr">TypeError</span>: <span class="n">''str''
    object does not support item assignment</span> </pre> </div> </div> <p>Keep in
    mind that, mutable or immutable, you can always use an assignment to make a variable
    refer to a different piece of data.</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="gp">>>> </span><span class="n">s</span> <span class="o">=</span> <span
    class="s">''immutable''</span> <span class="gp">>>> </span><span class="n">s</span>
    <span class="go">''immutable''</span> <span class="gp">>>> </span><span class="n">s</span>
    <span class="o">=</span> <span class="s">''mutable''</span> <span class="gp">>>>
    </span><span class="n">s</span> <span class="go">''mutable''</span> </pre> </div>
    </div> <p><strong>Takeaway Message</strong></p> <p>There are a few key ideas to
    keep in mind:</p> <blockquote> <div><ul class="simple"> <li>All Python variables
    have a value (the piece of data to which they refer) and a reference (the memory
    location of that piece of data).</li> <li>Python assignment copies only the reference.</li>
    <li>Mutable data types like lists allow assignment to component parts. Immutable
    data types like strings do not allow assignment to component parts.</li> <li>If
    you have two different variables that both refer to the same mutable piece of
    data, changes that are made to the data’s components using one of the variables
    will also be seen when you use the other variable.</li> <li>It is always possible
    to use an assignment statement to make a variable refer to a different piece of
    data.</li> </ul> </div> </blockquote> </div> </div> <div class="section" id="mutable-data-iteration-sorting-out-artists">
    <h2 id="sigil_toc_id_90">5.5 Mutable Data + Iteration: Sorting out Artists</h2>
    <p>Now that we have introduced the two fundamental concepts in imperative programming,
    we return to our recommendation example in order to motivate and illustrate the
    power of data mutation and iteration together. The example we will use is sorting
    a list of elements.</p> <div class="section" id="why-sort-running-time-matters">
    <h3 id="sigil_toc_id_91">5.5.1 Why Sort? Running Time Matters</h3> <p>Before we
    dive into the details of sorting, let’s establish (at least one reason) why it
    is useful to have data that is in sorted order. In short, sorted data makes data
    processing much faster.</p> <p>But how do we measure what is “fast” vs. what is
    “slow?” The key to analyzing how long a program takes to run is to count the number
    of operations that it will perform for a given size input. Computer Scientists
    rarely care how fast or slow programs are for very small input: they are almost
    always fast if the input is small. However, when processing large inputs (for
    example, millions of users who have each rated hundreds or even thousands of artists),
    speed becomes critical.</p> <div class="figure align-right" style="width: 150px">
    <a class="reference internal image-reference" href="../Images/Alien6.PNG"><img
    alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG" style="width: 0px;"/></a>
    <p class="caption"><em>In fact, if we were trying to build a system to handle
    millions of users, we would need to make many more optimizations and use fundamentally
    different algorithms, but that is beyond the scope of this chapter. Here we show
    you how to speed things up to handle slightly larger inputs.</em></p> </div> <p>So,
    let’s look at how long it takes to calculate the number of matches between two
    lists using the function from section 5.3.4, reproduced here:</p> <div class="highlight-python"><div
    class="highlight"><pre><span class="k">def</span> <span class="nf">numMatches</span><span
    class="p">(</span><span class="n">list1</span><span class="p">,</span> <span class="n">list2</span><span
    class="p">):</span> <span class="sd">'''''' return the number of elements that
    match between</span> <span class="sd"> list1 and list2 ''''''</span> <span class="n">count</span>
    <span class="o">=</span> <span class="mi">0</span> <span class="k">for</span>
    <span class="n">item</span> <span class="ow">in</span> <span class="n">list1</span><span
    class="p">:</span> <span class="k">if</span> <span class="n">item</span> <span
    class="ow">in</span> <span class="n">list2</span><span class="p">:</span> <span
    class="n">count</span> <span class="o">+=</span> <span class="mi">1</span> <span
    class="k">return</span> <span class="n">count</span> </pre> </div> </div> <p>Let’s
    say for the moment that each list has four elements in it. Take a moment to think
    about how many comparisons you think the program will make... then read on below.</p>
    <p>First, you take the first element of the first list, and ask if it is <tt class="docutils
    literal"><span class="pre">in</span></tt> the second list. The <tt class="docutils
    literal"><span class="pre">in</span></tt> command is a bit deceptive because it
    hides a significant number of comparisons. How does Python tell if an item is
    <tt class="docutils literal"><span class="pre">in</span></tt> a list? It has to
    compare that item to every item in the list! So in this case, the first item in
    the first list is compared to every item (i.e., four of them) in the second list
    to determine whether it is <tt class="docutils literal"><span class="pre">in</span></tt>
    that list.</p> <p id="index-9">“Wait!” you say. If the item is actually in the
    list, it doesn’t actually have to check all four, and can stop checking when it
    finds the item in question. This is exactly correct, but in fact it doesn’t matter
    in our analysis. For the purpose of an analysis like this, computer scientists
    are quite pessimistic. They rarely care what happens when things work out well–what
    they care about is what might possibly happen in the <em>worst case</em>. In this
    case, the worst case is when the item is not in the list and Python has to compare
    it to every item in the list to determine it’s not there. Since what we care about
    is this worst case behavior, we will perform our analysis as if we were dealing
    with the worst case.</p> <p>So, back to the analysis: For the first item in the
    list, Python made four comparisons to the items in the second list – commands
    that were hidden away in the <tt class="docutils literal"><span class="pre">in</span></tt>
    command. Now our program moves on to the second item in the first list, where
    it again makes four comparisons with the second list. Similarly, it makes four
    comparisons for each of the third and the fourth elements in the first list. For
    a total of <span class="math">\(4 + 4 + 4 + 4 = 4 * 4 = 16\)</span> .Again, this
    probably doesn’t sound like such a bad number. After all, your computer can make
    16 comparisons in <em>way</em> less than a second. But what if our lists were
    longer? What if the user had rated 100 artists and the comparison user had rated
    1000 (high, but not crazy)? Then the system would have to do 1000 comparisons
    (to the items in the second list) for each of the 100 items in the first list
    for a total of <span class="math">\(100 * 1000 = 10^5\)</span> comparisons. Still
    not huge, but hopefully you can see where this is going. In general, the matching
    algorithm we’ve written above takes <span class="math">\(N*M\)</span> comparisons,
    where <span class="math">\(N\)</span> is the size of the first list and <span
    class="math">\(M\)</span> is the size of the second list. For simplicity, we might
    just assume that the two lists will always be the same length, <span class="math">\(N\)</span>,
    in which case it makes <span class="math">\(N^2\)</span> comparisons.</p> <p>The
    good news is that we can do significantly better, but we have to make an assumption
    about the lists themselves. What if our lists were sorted alphabetically? How
    could that make our matching algorithm faster? The answer is that we can keep
    the lists “synchronized,” so to speak, and march through both lists at the same
    time, rather than pulling a single element out of the first list and comparing
    it to all of the elements in the second. For example, if you are looking at the
    first element of the first list and it is “Black Eyed Peas” and the first element
    of the second list is “Counting Crows” you know that the Black Eyed Peas do not
    appear in the second list, because C is already past B. So you can simply discard
    the Black Eyed Peas and move on to the next artist in the first list.</p> <div
    class="figure align-right" style="width: 150px"> <img alt="../Images/Alien6.PNG"
    src="../Images/Alien6.PNG"/> <p class="caption"><em>Discarding the “Black Eyed
    Peas” would save my hearing!</em></p> </div> <p>Here’s what the new algorithm
    looks like. Remember that it assumes the lists will be in sorted order (we’ll
    talk about how to sort lists later).</p> <ul class="simple"> <li>Initialize a
    counter to 0</li> <li>Set the current item in each list to be the first item in
    each list</li> <li>Repeat the following until you reach the end of one of the
    two lists:</li> <li>Compare the current items in each list.</li> <li>If they are
    equal, increment the counter and advance the current item of both lists to the
    next items in the lists.</li> <li>Else, if the current item in the first list
    is alphabetically before the current item in the second list, advance the current
    item in the first list.</li> <li>Else, advance the current item in the second
    list.</li> <li>The counter holds the number of matches.</li> </ul> <p>Before you
    look at the code below, ask yourself: “What kind of loop should I use here? A
    <tt class="docutils literal"><span class="pre">for</span></tt> loop or <tt class="docutils
    literal"><span class="pre">while</span></tt> loop?” When you think you’ve got
    an answer you’re happy with, read on.</p> <p>Here’s the corresponding Python code:</p>
    <div id="ch05_matches"><div class="ExecutionVisualizer"><div id="vizHeader" style="display:
    none;"> <textarea class="vizTitleText" id="vizTitleEditor" cols="60" rows="1"
    style="display: none;"/> <div class="vizTitleText" id="vizTitleViewer"/> <textarea
    class="vizDescriptionText" id="vizDescriptionEditor" cols="75" rows="2" style="display:
    none;"/> <div class="vizDescriptionText" id="vizDescriptionViewer"/> </div> <table
    border="0" class="visualizer"><tbody><tr><td class="vizLayoutTd" id="vizLayoutTdFirst"><div
    id="codeDisplayDiv" style="max-width: 500px;"> <div id="pyCodeOutputDiv" style="max-width:
    500px; max-height: 400px;"><table id="pyCodeOutput"><tbody><tr><td id="gutterTD"
    valign="top" rowspan="17"><svg id="leftCodeGutterSVG" style="height: 401px;"><polygon
    id="prevLineArrow" points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#c9e6ca" style="display:
    none;"/><polygon id="curLineArrow" points="0,3 12,3 12,0 18,5 12,10 12,7 0,7"
    fill="#e93f34" transform="translate(0, 5.359375)"/></svg> </td> <td class="lineNo"
    id="lineNo1">1</td> <td class="cod" id="v5__cod1">def numMatches( list1, list2 ):</td>
    </tr> <tr><td class="lineNo" id="lineNo2">2</td> <td class="cod" id="v5__cod2">    ''''''return the number of elements that match between two sorted lists''''''</td>
    </tr> <tr><td class="lineNo" id="lineNo3">3</td> <td class="cod" id="v5__cod3">    matches = 0</td>
    </tr> <tr><td class="lineNo" id="lineNo4">4</td> <td class="cod" id="v5__cod4">    i = 0</td>
    </tr> <tr><td class="lineNo" id="lineNo5">5</td> <td class="cod" id="v5__cod5">    j = 0</td>
    </tr> <tr><td class="lineNo" id="lineNo6">6</td> <td class="cod" id="v5__cod6">    while i < len(list1) and j < len(list2):</td>
    </tr> <tr><td class="lineNo" id="lineNo7">7</td> <td class="cod" id="v5__cod7">        if list1[i] == list2[j]:</td>
    </tr> <tr><td class="lineNo" id="lineNo8">8</td> <td class="cod" id="v5__cod8">            matches += 1</td>
    </tr> <tr><td class="lineNo" id="lineNo9">9</td> <td class="cod" id="v5__cod9">            i += 1</td>
    </tr> <tr><td class="lineNo" id="lineNo10">10</td> <td class="cod" id="v5__cod10">            j += 1</td>
    </tr> <tr><td class="lineNo" id="lineNo11">11</td> <td class="cod" id="v5__cod11">        elif list1[i] < list2[j]:</td>
    </tr> <tr><td class="lineNo" id="lineNo12">12</td> <td class="cod" id="v5__cod12">            i += 1</td>
    </tr> <tr><td class="lineNo" id="lineNo13">13</td> <td class="cod" id="v5__cod13">        else:</td>
    </tr> <tr><td class="lineNo" id="lineNo14">14</td> <td class="cod" id="v5__cod14">            j += 1</td>
    </tr> <tr><td class="lineNo" id="lineNo15">15</td> <td class="cod" id="v5__cod15">    return matches</td>
    </tr> <tr><td class="lineNo" id="lineNo16">16</td> <td class="cod" id="v5__cod16"/>
    </tr> <tr><td class="lineNo" id="lineNo17">17</td> <td class="cod" id="v5__cod17">print (numMatches([''a'', ''l'', ''i'', ''s'', ''o'', ''n''], [''a'', ''k'', ''h'', ''i'', ''l'']))</td>
    </tr> </tbody> </table> </div> <div id="editCodeLinkDiv" style="display: none;"><a
    id="editBtn" href="#">Edit code</a></div> <div id="executionSlider" class="ui-slider
    ui-slider-horizontal ui-widget ui-widget-content ui-corner-all" style="width:
    480px; font-size: 0.9em;"></div> <div id="vcrControls"> <button id="jmpFirstInstr"
    type="button" disabled="disabled"><< First</button> <button id="jmpStepBack" type="button"
    disabled="disabled">< Back</button> <span id="curInstr">Step 1 of 30</span> <button
    id="jmpStepFwd" type="button">Forward ></button> <button id="jmpLastInstr" type="button">Last
    >></button> </div> <div id="errorOutput" style="display: none;"/> <div id="legendDiv"><svg
    id="prevLegendArrowSVG"><polygon points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#c9e6ca"/></svg>
    line that has just executed<p style="margin-top: 4px"><svg id="curLegendArrowSVG"><polygon
    points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#e93f34"/></svg> next line to
    execute</p> </div> <div id="stepAnnotationDiv"> <textarea class="annotationText"
    id="stepAnnotationEditor" cols="60" rows="3" style="display: none;"/> <div class="annotationText"
    id="stepAnnotationViewer"/> </div> <div id="annotateLinkDiv"><button id="annotateBtn"
    type="button" style="display: none;">Annotate this step</button></div> </div>
    <div id="htmlOutputDiv"/> <div id="progOutputs" style="display: none;"> Program
    output:<br/> <textarea id="pyStdout" cols="50" rows="10" wrap="off" readonly=""
    style="max-width: 500px;"/> </div> </td> </tr> <tr><td class="vizLayoutTd" id="vizLayoutTdSecond"><div
    id="dataViz"> <table id="stackHeapTable"> <tbody><tr> <td id="stack_td"> <div
    id="globals_area"> <div id="stackHeader">Frames</div> <div class="stackFrame highlightedStackFrame"
    id="v5__globals" style="display: none;"><div id="v5__globals_header" class="stackFrameHeader">Global
    variables</div> <table class="stackFrameVarTable" id="v5__global_table"/> </div>
    </div> <div id="stack"/> </td> <td id="heap_td"> <div id="heap"> <div id="heapHeader">Objects</div>
    </div> </td> </tr> </tbody> </table> </div> </td> </tr> </tbody> </table> </div>
    </div> <p class="cl_caption"><span class="cl_caption_text"> (ch05_matches)</span>
    </p> <script type="text/javascript"> var ch05_matches_trace = {"code": "def numMatches(
    list1, list2 ):\n ''''''return the number of elements that match between two sorted
    lists''''''\n matches = 0\n i = 0\n j = 0\n while i < len(list1) and j < len(list2):\n
    if list1[i] == list2[j]:\n matches += 1\n i += 1\n j += 1\n elif list1[i] < list2[j]:\n
    i += 1\n else:\n j += 1\n return matches\n\nprint (numMatches([''a'', ''l'', ''i'',
    ''s'', ''o'', ''n''], [''a'', ''k'', ''h'', ''i'', ''l'']))", "trace": [{"ordered_globals":
    [], "stdout": "", "func_name": "<module>", "stack_to_render": [], "globals": {},
    "heap": {}, "line": 1, "event": "step_line"}, {"ordered_globals": ["numMatches"],
    "stdout": "", "func_name": "<module>", "stack_to_render": [], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null]}, "line":
    17, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout": "", "func_name":
    "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"list1":
    ["REF", 2], "list2": ["REF", 3]}, "is_highlighted": true, "is_parent": false,
    "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "numMatches_f1", "ordered_varnames": ["list1", "list2"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 1, "event": "call"}, {"ordered_globals": ["numMatches"], "stdout": "",
    "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted": true, "is_parent":
    false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2"]}],
    "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1,
    list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a",
    "k", "h", "i", "l"]}, "line": 3, "event": "step_line"}, {"ordered_globals": ["numMatches"],
    "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 0, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted": true,
    "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches"]}],
    "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1,
    list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a",
    "k", "h", "i", "l"]}, "line": 4, "event": "step_line"}, {"ordered_globals": ["numMatches"],
    "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 0, "i": 0, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1,
    list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a",
    "k", "h", "i", "l"]}, "line": 5, "event": "step_line"}, {"ordered_globals": ["numMatches"],
    "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 0, "i": 0, "j": 0, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 6, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 0, "i": 0, "j": 0, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 7, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 0, "i": 0, "j": 0, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 8, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 1, "i": 0, "j": 0, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 9, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 1, "i": 1, "j": 0, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 10, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 1, "i": 1, "j": 1, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 6, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 1, "i": 1, "j": 1, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 7, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 1, "i": 1, "j": 1, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 11, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 1, "i": 1, "j": 1, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 14, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 1, "i": 1, "j": 2, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 6, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 1, "i": 1, "j": 2, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 7, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 1, "i": 1, "j": 2, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 11, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 1, "i": 1, "j": 2, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 14, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 1, "i": 1, "j": 3, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 6, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 1, "i": 1, "j": 3, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 7, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 1, "i": 1, "j": 3, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 11, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 1, "i": 1, "j": 3, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 14, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 1, "i": 1, "j": 4, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 6, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 1, "i": 1, "j": 4, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 7, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 1, "i": 1, "j": 4, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 8, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 2, "i": 1, "j": 4, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 9, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 2, "i": 2, "j": 4, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 10, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 2, "i": 2, "j": 5, "list1": ["REF", 2], "list2": ["REF", 3]}, "is_highlighted":
    true, "is_parent": false, "func_name": "numMatches", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "numMatches_f1", "ordered_varnames": ["list1", "list2", "matches",
    "i", "j"]}], "globals": {"numMatches": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "numMatches(list1, list2)", null], "2": ["LIST", "a", "l", "i", "s", "o", "n"],
    "3": ["LIST", "a", "k", "h", "i", "l"]}, "line": 6, "event": "step_line"}, {"ordered_globals":
    ["numMatches"], "stdout": "", "func_name": "numMatches", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"matches": 2, "i": 2, "j": 5, "list1": ["REF", 2], "list2":
    ["REF", 3]}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1",
    "ordered_varnames": ["list1", "list2", "matches", "i", "j"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 15, "event": "step_line"}, {"ordered_globals": ["numMatches"], "stdout":
    "", "func_name": "numMatches", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"matches": 2, "j": 5, "list1": ["REF", 2], "list2": ["REF", 3], "i": 2, "__return__":
    2}, "is_highlighted": true, "is_parent": false, "func_name": "numMatches", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "numMatches_f1", "ordered_varnames":
    ["list1", "list2", "matches", "i", "j", "__return__"]}], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null], "2":
    ["LIST", "a", "l", "i", "s", "o", "n"], "3": ["LIST", "a", "k", "h", "i", "l"]},
    "line": 15, "event": "return"}, {"ordered_globals": ["numMatches"], "stdout":
    "2\n", "func_name": "<module>", "stack_to_render": [], "globals": {"numMatches":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "numMatches(list1, list2)", null]}, "line":
    17, "event": "return"}]}; var ch05_matches_vis; $(document).ready(function() {
    ch05_matches_vis = new ExecutionVisualizer(''ch05_matches'',ch05_matches_trace,
    {embeddedMode: true, verticalStack: true, heightChangeCallback: redrawAllVisualizerArrows,
    codeDivWidth: 500 }); attachLoggers(ch05_matches_vis,''ch05_matches''); allVisualizers.push(ch05_matches_vis);
    }); $(document).ready(function() { $("#ch05_matches_tracecheck").click(function()
    { logBookEvent({''event'':''codelens'', ''act'': ''check'', ''div_id'':''ch05_matches''});
    }); }); if (allVisualizers === undefined) { var allVisualizers = []; } $(window).resize(function()
    { ch05_matches_vis.redrawConnectors(); }); </script> <p>Using <tt class="docutils
    literal"><span class="pre">==</span></tt>, <tt class="docutils literal"><span
    class="pre">></span></tt>, <tt class="docutils literal"><span class="pre"><</span></tt>,
    etc. on strings is perfectly valid and these operators will compare strings alphabetically.
    Recall from section 4.2.3 that text is represented numerically. In this encoding
    all of the capital letters are mapped to consecutive numbers, with ‘A’ getting
    the lowest number and ‘Z’ getting the highest. The lower-case letters are also
    mapped to consecutive numbers, which are all higher than the number used for ‘Z’.
    It is these encodings that are used when strings are compared. This means that
    strings that start with capital letters will always come “alphabetically” before
    those that start with lower case letters. This issue is important to consider
    in our program (we haven’t yet), and we’ll discuss it below in Section 5.5.2.</p>
    <div class="figure align-right" style="width: 150px"> <img alt="../Images/Alien6.PNG"
    src="../Images/Alien6.PNG"/> <p class="caption"><em>Python 2 and earlier versions
    use ASCII encoding, while Python 3 uses a slightly different encoding called Unicode,
    but everything here applies to both encodings.</em></p> </div> <p>Now the question
    remains, is this approach really faster than the previous approach to comparing
    the elements in two lists? The answer is: definitely yes. Let’s again look at
    the number of comparisons that would need to be made to compare two lists with
    4 elements each. Imagine that none of the elements match and that the lists are
    exactly interleaved alphabetically. That is, first the element in list 1 is smaller,
    then the element in list 2 is smaller, and so on, as in the lists <tt class="docutils
    literal"><span class="pre">["Amy</span> <span class="pre">Winehouse",</span> <span
    class="pre">"Coldplay",</span>  <span class="pre">"Madonna",</span> <span class="pre">"Red</span>
    <span class="pre">Hot</span> <span class="pre">Chili</span> <span class="pre">Peppers"]</span></tt>
    and <tt class="docutils literal"><span class="pre">["Black</span> <span class="pre">Eyed</span>
    <span class="pre">Peas",</span> <span class="pre">"Dave</span> <span class="pre">Matthews</span>
    <span class="pre">Band",</span> <span class="pre">"Maroon</span> <span class="pre">5",</span>
    <span class="pre">"Stevie</span> <span class="pre">Nicks"]</span></tt></p> <p>With
    these two lists, the code above will never trigger on the first <tt class="docutils
    literal"><span class="pre">if</span></tt> condition–it will always increment either
    <tt class="docutils literal"><span class="pre">i</span></tt> or <tt class="docutils
    literal"><span class="pre">j</span></tt>, but not both. Furthermore, it will run
    out of elements in one list just before it runs out of elements in the second.
    Essentially it will look at all the elements in both lists.</p> <p>At first it
    might seem like we haven’t made any improvements. After all, aren’t we still looking
    at all the elements of both lists? Aha, but now there’s an important difference!
    Whereas before we were looking at all the elements in the second list <em>for
    each element in the first list</em>, here we are only looking at all the elements
    in the second list <em>once</em>. In other words, each time through the loop,
    either <tt class="docutils literal"><span class="pre">i</span></tt> or <tt class="docutils
    literal"><span class="pre">j</span></tt> is incremented, and they are never decremented.
    So either <tt class="docutils literal"><span class="pre">i</span></tt> or <tt
    class="docutils literal"><span class="pre">j</span></tt> will hit the end of the
    list after all of the elements of that list have been looked at and one fewer
    than the elements of the other list have been looked at. So in this example, this
    means we will make exactly 7 comparisons. In general, if the lists are both length
    <span class="math">\(N\)</span> , the number of comparisons this algorithm will
    make is <span class="math">\(N+N-1\)</span> or <span class="math">\(2N - 1\)</span>.
    So even for the case where one list has 100 elements and the second has 1000,
    this is only about 1100 comparisons, a significant improvement over the <span
    class="math">\(10^5\)</span> of the previous approach!</p> <p id="index-10">In
    technical terms, computer scientists call this second algorithm a <em>linear time
    algorithm</em> because the equation which describes the number of comparisons
    is linear. The first algorithm is called a <em>quadratic time algorithm</em> because
    its equation is quadratic.</p> </div> <div class="section" id="a-simple-sorting-algorithm-selection-sort">
    <h3 id="sigil_toc_id_92">5.5.2 A Simple Sorting Algorithm: Selection Sort</h3>
    <p>Now that we’ve motivated at least one reason to sort data (there are many others—you
    can probably think of several of them), let’s look at an algorithm for actually
    doing the sorting.</p> <p>Let’s consider the list of artists that the user likes
    that we collect by prompting the user at the start of the program. Recall that
    the code that gathers this list is the following:</p> <div class="highlight-python"><div
    class="highlight"><pre><span class="n">newPref</span> <span class="o">=</span>
    <span class="nb">input</span><span class="p">(</span><span class="s">"Plese enter
    the name of an artist </span><span class="se">\</span> <span class="s">or band
    that you like: "</span> <span class="p">)</span> <span class="k">while</span>
    <span class="n">newPref</span> <span class="o">!=</span> <span class="s">''''</span><span
    class="p">:</span> <span class="n">prefs</span><span class="o">.</span><span class="n">append</span><span
    class="p">(</span><span class="n">newPref</span><span class="p">)</span> <span
    class="n">newPref</span> <span class="o">=</span> <span class="nb">input</span><span
    class="p">(</span><span class="s">"Please enter an artist or band </span><span
    class="se">\</span> <span class="s">that you like, or just press enter to see
    recommendations: "</span><span class="p">)</span> <span class="k">print</span>
    <span class="p">(</span><span class="s">''Thanks for your input!''</span><span
    class="p">)</span> </pre> </div> </div> <p>Remember that in Python 2 you’ll need
    to use <tt class="docutils literal"><span class="pre">raw_input</span></tt> rather
    than <tt class="docutils literal"><span class="pre">input</span></tt>.</p> <p>The
    artists the user has entered are stored in the list <tt class="docutils literal"><span
    class="pre">prefs</span></tt>, but that list is entirely unsorted. We would like
    to sort this list alphabetically, and clean up the formatting of the text while
    we’re at it.</p> <div class="figure align-right" style="width: 150px"> <img alt="../Images/Alien6.PNG"
    src="../Images/Alien6.PNG"/> <p class="caption"><em>I don’t think this will work
    for LMFAO!</em></p> </div> <p>First, to make our lives easier, and to facilitate
    the matching process between user profiles, we will make a pass through the list
    to standardize the format of the artist names. In particular, we want to be sure
    that there is no leading (or trailing) whitespace, and that the artist or band
    names are in Title Case (i.e., the first letter of each word is capitalized, and
    the rest are lower case). Even though this format may fail for some bands , we’ll
    work with it because it gives us a standard representation that allows the strings
    to be sorted and compared without us having to worry about case issues getting
    in the way.</p> <div class="figure align-right" style="width: 150px"> <a class="reference
    internal image-reference" href="../Images/Alien6.PNG"><img alt="../Images/Alien6.PNG"
    src="../Images/Alien6.PNG" style="width: 0px;"/></a> <p class="caption"><em>Recall
    that all uppercase strings are considered “less than” lower case strings, and
    it would be confusing to the user to alphabetically sort ZZ Top before adele.</em></p>
    </div> <p>Because strings are immutable objects, we can’t actually change them,
    but rather we have to generate new strings with the formatting we desire. Here
    is the code that accomplishes this goal (note that we also build a new list, which
    is not strictly necessary):</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="n">standardPrefs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span>
    <span class="n">prefs</span><span class="p">:</span> <span class="n">standardPrefs</span><span
    class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">artist</span><span
    class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span
    class="n">title</span><span class="p">())</span> </pre> </div> </div> <p>The <tt
    class="docutils literal"><span class="pre">strip</span></tt> function returns
    a new string identical to <tt class="docutils literal"><span class="pre">artist</span></tt>,
    but without any leading or trailing whitespace. Then the <tt class="docutils literal"><span
    class="pre">title</span></tt> function returns that same string in Title Case.</p>
    <p>Now that our data is standardized, we can sort it from smallest (alphabetically
    first) to largest. Sorting is an important topic of study in computer science
    in its own right.</p> <div class="figure align-right" style="width: 150px"> <img
    alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG"/> <p class="caption"><em>I
    sort of knew that it was important!</em></p> </div> <p>Here we will discuss one
    sorting algorithm, but there’s much more to be said on the subject.</p> <p>To
    develop our algorithm, we start with small cases: what are the computational pieces
    that enable the rearrangement of a list?</p> <p>A two-element list is the smallest
    (non-trivial) case to consider: in the worst case, the two elements would need
    to swap places with each other.</p> <p>In fact, this idea of a <tt class="docutils
    literal"><span class="pre">swap</span></tt> is all we need! Imagine a large list
    that we’d like sorted in ascending order.</p> <ul class="simple"> <li>First, we
    could find the smallest element. Then, we could swap that smallest element with
    the first element of the list.</li> <li>Next, we would search for the second-smallest
    element, which is the smallest element of the rest of the list. Then, we could
    swap it into place as the second element of the overall list.</li> <li>We continue
    this swapping so that the third-smallest element takes the third place in the
    list, do the same for the fourth, ... and so on ... until we run out of elements.</li>
    </ul> <p id="index-11">This algorithm is called <em>selection sort</em> because
    it proceeds by repeatedly selecting the minimum remaining element and moving it
    to the next position in the list.</p> <p>What functions will we need to write
    selection sort? It seems we need only two:</p> <blockquote> <div><ul class="simple">
    <li><tt class="docutils literal"><span class="pre">index_of_min(aList,starting_index)</span></tt>,
    which will return the index of the smallest element in <tt class="docutils literal"><span
    class="pre">aList</span></tt>, starting from index <tt class="docutils literal"><span
    class="pre">starting_index</span></tt>.</li> <li><tt class="docutils literal"><span
    class="pre">swap(aList,i,j)</span></tt>, which will swap the values of <tt class="docutils
    literal"><span class="pre">aList[i]</span></tt> and <tt class="docutils literal"><span
    class="pre">aList[j]</span></tt></li> </ul> </div> </blockquote> <p>Here is the
    Python code for this algorithm:</p> <div id="ch05_selSort"><div class="ExecutionVisualizer"><div
    id="vizHeader" style="display: none;"> <textarea class="vizTitleText" id="vizTitleEditor"
    cols="60" rows="1" style="display: none;"/> <div class="vizTitleText" id="vizTitleViewer"/>
    <textarea class="vizDescriptionText" id="vizDescriptionEditor" cols="75" rows="2"
    style="display: none;"/> <div class="vizDescriptionText" id="vizDescriptionViewer"/>
    </div> <table border="0" class="visualizer"><tbody><tr><td class="vizLayoutTd"
    id="vizLayoutTdFirst"><div id="codeDisplayDiv" style="max-width: 500px;"> <div
    id="pyCodeOutputDiv" style="max-width: 500px; max-height: 400px;"><table id="pyCodeOutput"><tbody><tr><td
    id="gutterTD" valign="top" rowspan="29"><svg id="leftCodeGutterSVG" style="height:
    685px;"><polygon id="prevLineArrow" points="0,3 12,3 12,0 18,5 12,10 12,7 0,7"
    fill="#c9e6ca" style="display: none;"/><polygon id="curLineArrow" points="0,3
    12,3 12,0 18,5 12,10 12,7 0,7" fill="#e93f34" transform="translate(0, 5.359375)"/></svg>
    </td> <td class="lineNo" id="lineNo1">1</td> <td class="cod" id="v6__cod1">def selectionSort(listToSort):</td>
    </tr> <tr><td class="lineNo" id="lineNo2">2</td> <td class="cod" id="v6__cod2">    ''''''sorts aList iteratively and in-place''''''</td>
    </tr> <tr><td class="lineNo" id="lineNo3">3</td> <td class="cod" id="v6__cod3">    for starting_index in range(len(listToSort)):</td>
    </tr> <tr><td class="lineNo" id="lineNo4">4</td> <td class="cod" id="v6__cod4">        min_elem_index = index_of_min(listToSort, starting_index)</td>
    </tr> <tr><td class="lineNo" id="lineNo5">5</td> <td class="cod" id="v6__cod5">        swap(listToSort, starting_index, min_elem_index)</td>
    </tr> <tr><td class="lineNo" id="lineNo6">6</td> <td class="cod" id="v6__cod6">    return listToSort</td>
    </tr> <tr><td class="lineNo" id="lineNo7">7</td> <td class="cod" id="v6__cod7"/>
    </tr> <tr><td class="lineNo" id="lineNo8">8</td> <td class="cod" id="v6__cod8"># And here is index_of_min!:</td>
    </tr> <tr><td class="lineNo" id="lineNo9">9</td> <td class="cod" id="v6__cod9">def index_of_min(aList, start_index):</td>
    </tr> <tr><td class="lineNo" id="lineNo10">10</td> <td class="cod" id="v6__cod10">    ''''''returns the index of the min element at or after start_index''''''</td>
    </tr> <tr><td class="lineNo" id="lineNo11">11</td> <td class="cod" id="v6__cod11">    min_elem_index = start_index</td>
    </tr> <tr><td class="lineNo" id="lineNo12">12</td> <td class="cod" id="v6__cod12">    for i in range(start_index, len(aList)):</td>
    </tr> <tr><td class="lineNo" id="lineNo13">13</td> <td class="cod" id="v6__cod13">        if aList[i] < aList[min_elem_index]:</td>
    </tr> <tr><td class="lineNo" id="lineNo14">14</td> <td class="cod" id="v6__cod14">            min_elem_index = i</td>
    </tr> <tr><td class="lineNo" id="lineNo15">15</td> <td class="cod" id="v6__cod15">    return min_elem_index</td>
    </tr> <tr><td class="lineNo" id="lineNo16">16</td> <td class="cod" id="v6__cod16"/>
    </tr> <tr><td class="lineNo" id="lineNo17">17</td> <td class="cod" id="v6__cod17">#And swap:</td>
    </tr> <tr><td class="lineNo" id="lineNo18">18</td> <td class="cod" id="v6__cod18">def swap(aList, i, j):</td>
    </tr> <tr><td class="lineNo" id="lineNo19">19</td> <td class="cod" id="v6__cod19">    ''''''swaps the values of aList[i] and aList[j]''''''</td>
    </tr> <tr><td class="lineNo" id="lineNo20">20</td> <td class="cod" id="v6__cod20">    temp = aList[i]       # store the value of aList[i]</td>
    </tr> <tr><td class="lineNo" id="lineNo21">21</td> <td class="cod" id="v6__cod21">                          # for a moment</td>
    </tr> <tr><td class="lineNo" id="lineNo22">22</td> <td class="cod" id="v6__cod22">    aList[i] = aList[j]   # make aList[i] refer to</td>
    </tr> <tr><td class="lineNo" id="lineNo23">23</td> <td class="cod" id="v6__cod23">                          # the value of aList[j]</td>
    </tr> <tr><td class="lineNo" id="lineNo24">24</td> <td class="cod" id="v6__cod24">    aList[j] = temp       # make aList[j] refer to the</td>
    </tr> <tr><td class="lineNo" id="lineNo25">25</td> <td class="cod" id="v6__cod25">                          # stored value</td>
    </tr> <tr><td class="lineNo" id="lineNo26">26</td> <td class="cod" id="v6__cod26"/>
    </tr> <tr><td class="lineNo" id="lineNo27">27</td> <td class="cod" id="v6__cod27">listToSort = [2, 5, 4]</td>
    </tr> <tr><td class="lineNo" id="lineNo28">28</td> <td class="cod" id="v6__cod28">selectionSort(listToSort)</td>
    </tr> <tr><td class="lineNo" id="lineNo29">29</td> <td class="cod" id="v6__cod29">print (listToSort)</td>
    </tr> </tbody> </table> </div> <div id="editCodeLinkDiv" style="display: none;"><a
    id="editBtn" href="#">Edit code</a></div> <div id="executionSlider" class="ui-slider
    ui-slider-horizontal ui-widget ui-widget-content ui-corner-all" style="width:
    480px; font-size: 0.9em;"></div> <div id="vcrControls"> <button id="jmpFirstInstr"
    type="button" disabled="disabled"><< First</button> <button id="jmpStepBack" type="button"
    disabled="disabled">< Back</button> <span id="curInstr">Step 1 of 55</span> <button
    id="jmpStepFwd" type="button">Forward ></button> <button id="jmpLastInstr" type="button">Last
    >></button> </div> <div id="errorOutput" style="display: none;"/> <div id="legendDiv"><svg
    id="prevLegendArrowSVG"><polygon points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#c9e6ca"/></svg>
    line that has just executed<p style="margin-top: 4px"><svg id="curLegendArrowSVG"><polygon
    points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#e93f34"/></svg> next line to
    execute</p> </div> <div id="stepAnnotationDiv"> <textarea class="annotationText"
    id="stepAnnotationEditor" cols="60" rows="3" style="display: none;"/> <div class="annotationText"
    id="stepAnnotationViewer"/> </div> <div id="annotateLinkDiv"><button id="annotateBtn"
    type="button" style="display: none;">Annotate this step</button></div> </div>
    <div id="htmlOutputDiv"/> <div id="progOutputs" style="display: none;"> Program
    output:<br/> <textarea id="pyStdout" cols="50" rows="10" wrap="off" readonly=""
    style="max-width: 500px;"/> </div> </td> </tr> <tr><td class="vizLayoutTd" id="vizLayoutTdSecond"><div
    id="dataViz"> <table id="stackHeapTable"> <tbody><tr> <td id="stack_td"> <div
    id="globals_area"> <div id="stackHeader">Frames</div> <div class="stackFrame highlightedStackFrame"
    id="v6__globals" style="display: none;"><div id="v6__globals_header" class="stackFrameHeader">Global
    variables</div> <table class="stackFrameVarTable" id="v6__global_table"/> </div>
    </div> <div id="stack"/> </td> <td id="heap_td"> <div id="heap"> <div id="heapHeader">Objects</div>
    </div> </td> </tr> </tbody> </table> </div> </td> </tr> </tbody> </table> </div>
    </div> <p class="cl_caption"><span class="cl_caption_text"> (ch05_selSort)</span>
    </p> <script type="text/javascript"> var ch05_selSort_trace = {"code": "def selectionSort(listToSort):\n
    ''''''sorts aList iteratively and in-place''''''\n for starting_index in range(len(listToSort)):\n
    min_elem_index = index_of_min(listToSort, starting_index)\n swap(listToSort, starting_index,
    min_elem_index)\n return listToSort\n\n# And here is index_of_min!:\ndef index_of_min(aList,
    start_index):\n ''''''returns the index of the min element at or after start_index''''''\n
    min_elem_index = start_index\n for i in range(start_index, len(aList)):\n if aList[i]
    < aList[min_elem_index]:\n min_elem_index = i\n return min_elem_index\n\n#And
    swap:\ndef swap(aList, i, j):\n ''''''swaps the values of aList[i] and aList[j]''''''\n
    temp = aList[i] # store the value of aList[i]\n # for a moment\n aList[i] = aList[j]
    # make aList[i] refer to\n # the value of aList[j]\n aList[j] = temp # make aList[j]
    refer to the\n # stored value\n\nlistToSort = [2, 5, 4]\nselectionSort(listToSort)\nprint
    (listToSort)", "trace": [{"ordered_globals": [], "stdout": "", "func_name": "<module>",
    "stack_to_render": [], "globals": {}, "heap": {}, "line": 1, "event": "step_line"},
    {"ordered_globals": ["selectionSort"], "stdout": "", "func_name": "<module>",
    "stack_to_render": [], "globals": {"selectionSort": ["REF", 1]}, "heap": {"1":
    ["FUNCTION", "selectionSort(listToSort)", null]}, "line": 9, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min"], "stdout": "", "func_name":
    "<module>", "stack_to_render": [], "globals": {"index_of_min": ["REF", 2], "selectionSort":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2":
    ["FUNCTION", "index_of_min(aList, start_index)", null]}, "line": 18, "event":
    "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min", "swap"], "stdout":
    "", "func_name": "<module>", "stack_to_render": [], "globals": {"selectionSort":
    ["REF", 1], "index_of_min": ["REF", 2], "swap": ["REF", 3]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null]}, "line": 27, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "<module>", "stack_to_render": [], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 28, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "selectionSort", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"listToSort":
    ["REF", 4]}, "is_highlighted": true, "is_parent": false, "func_name": "selectionSort",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "selectionSort_f1",
    "ordered_varnames": ["listToSort"]}], "globals": {"swap": ["REF", 3], "selectionSort":
    ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1":
    ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList,
    start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST",
    2, 5, 4]}, "line": 1, "event": "call"}, {"ordered_globals": ["selectionSort",
    "index_of_min", "swap", "listToSort"], "stdout": "", "func_name": "selectionSort",
    "stack_to_render": [{"frame_id": 1, "encoded_locals": {"listToSort": ["REF", 4]},
    "is_highlighted": true, "is_parent": false, "func_name": "selectionSort", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "selectionSort_f1", "ordered_varnames":
    ["listToSort"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1],
    "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "selectionSort", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 0, "listToSort": ["REF",
    4]}, "is_highlighted": true, "is_parent": false, "func_name": "selectionSort",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "selectionSort_f1",
    "ordered_varnames": ["listToSort", "starting_index"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 4, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    0, "listToSort": ["REF", 4]}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index"]}, {"frame_id":
    2, "encoded_locals": {"aList": ["REF", 4], "start_index": 0}, "is_highlighted":
    true, "is_parent": false, "func_name": "index_of_min", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "index_of_min_f2", "ordered_varnames": ["aList", "start_index"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 9, "event": "call"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 0, "listToSort": ["REF", 4]}, "is_highlighted": false, "is_parent":
    false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index"]},
    {"frame_id": 2, "encoded_locals": {"aList": ["REF", 4], "start_index": 0}, "is_highlighted":
    true, "is_parent": false, "func_name": "index_of_min", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "index_of_min_f2", "ordered_varnames": ["aList", "start_index"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 11, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 0, "listToSort": ["REF", 4]}, "is_highlighted": false, "is_parent":
    false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index"]},
    {"frame_id": 2, "encoded_locals": {"aList": ["REF", 4], "min_elem_index": 0, "start_index":
    0}, "is_highlighted": true, "is_parent": false, "func_name": "index_of_min", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "index_of_min_f2", "ordered_varnames":
    ["aList", "start_index", "min_elem_index"]}], "globals": {"swap": ["REF", 3],
    "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 12, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    0, "listToSort": ["REF", 4]}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index"]}, {"frame_id":
    2, "encoded_locals": {"i": 0, "aList": ["REF", 4], "min_elem_index": 0, "start_index":
    0}, "is_highlighted": true, "is_parent": false, "func_name": "index_of_min", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "index_of_min_f2", "ordered_varnames":
    ["aList", "start_index", "min_elem_index", "i"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 13, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    0, "listToSort": ["REF", 4]}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index"]}, {"frame_id":
    2, "encoded_locals": {"i": 0, "aList": ["REF", 4], "min_elem_index": 0, "start_index":
    0}, "is_highlighted": true, "is_parent": false, "func_name": "index_of_min", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "index_of_min_f2", "ordered_varnames":
    ["aList", "start_index", "min_elem_index", "i"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 12, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    0, "listToSort": ["REF", 4]}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index"]}, {"frame_id":
    2, "encoded_locals": {"i": 1, "aList": ["REF", 4], "min_elem_index": 0, "start_index":
    0}, "is_highlighted": true, "is_parent": false, "func_name": "index_of_min", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "index_of_min_f2", "ordered_varnames":
    ["aList", "start_index", "min_elem_index", "i"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 13, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    0, "listToSort": ["REF", 4]}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index"]}, {"frame_id":
    2, "encoded_locals": {"i": 1, "aList": ["REF", 4], "min_elem_index": 0, "start_index":
    0}, "is_highlighted": true, "is_parent": false, "func_name": "index_of_min", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "index_of_min_f2", "ordered_varnames":
    ["aList", "start_index", "min_elem_index", "i"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 12, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    0, "listToSort": ["REF", 4]}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index"]}, {"frame_id":
    2, "encoded_locals": {"i": 2, "aList": ["REF", 4], "min_elem_index": 0, "start_index":
    0}, "is_highlighted": true, "is_parent": false, "func_name": "index_of_min", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "index_of_min_f2", "ordered_varnames":
    ["aList", "start_index", "min_elem_index", "i"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 13, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    0, "listToSort": ["REF", 4]}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index"]}, {"frame_id":
    2, "encoded_locals": {"i": 2, "aList": ["REF", 4], "min_elem_index": 0, "start_index":
    0}, "is_highlighted": true, "is_parent": false, "func_name": "index_of_min", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "index_of_min_f2", "ordered_varnames":
    ["aList", "start_index", "min_elem_index", "i"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 12, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    0, "listToSort": ["REF", 4]}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index"]}, {"frame_id":
    2, "encoded_locals": {"i": 2, "aList": ["REF", 4], "min_elem_index": 0, "start_index":
    0}, "is_highlighted": true, "is_parent": false, "func_name": "index_of_min", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "index_of_min_f2", "ordered_varnames":
    ["aList", "start_index", "min_elem_index", "i"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 15, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    0, "listToSort": ["REF", 4]}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index"]}, {"frame_id":
    2, "encoded_locals": {"i": 2, "__return__": 0, "aList": ["REF", 4], "min_elem_index":
    0, "start_index": 0}, "is_highlighted": true, "is_parent": false, "func_name":
    "index_of_min", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "index_of_min_f2", "ordered_varnames": ["aList", "start_index", "min_elem_index",
    "i", "__return__"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]},
    "line": 15, "event": "return"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "selectionSort", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 0, "listToSort": ["REF",
    4], "min_elem_index": 0}, "is_highlighted": true, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 5, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "swap", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 0, "listToSort": ["REF", 4], "min_elem_index": 0}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 3, "encoded_locals": {"i": 0, "j": 0, "aList":
    ["REF", 4]}, "is_highlighted": true, "is_parent": false, "func_name": "swap",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "swap_f3", "ordered_varnames":
    ["aList", "i", "j"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]},
    "line": 18, "event": "call"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "swap", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"starting_index": 0, "listToSort": ["REF", 4], "min_elem_index":
    0}, "is_highlighted": false, "is_parent": false, "func_name": "selectionSort",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "selectionSort_f1",
    "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]}, {"frame_id":
    3, "encoded_locals": {"i": 0, "j": 0, "aList": ["REF", 4]}, "is_highlighted":
    true, "is_parent": false, "func_name": "swap", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "swap_f3", "ordered_varnames": ["aList", "i", "j"]}], "globals":
    {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2],
    "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 20, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "swap", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 0, "listToSort": ["REF", 4], "min_elem_index": 0}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 3, "encoded_locals": {"i": 0, "j": 0, "aList":
    ["REF", 4], "temp": 2}, "is_highlighted": true, "is_parent": false, "func_name":
    "swap", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "swap_f3",
    "ordered_varnames": ["aList", "i", "j", "temp"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 22, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "swap", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    0, "listToSort": ["REF", 4], "min_elem_index": 0}, "is_highlighted": false, "is_parent":
    false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 3, "encoded_locals": {"i": 0, "j": 0, "aList":
    ["REF", 4], "temp": 2}, "is_highlighted": true, "is_parent": false, "func_name":
    "swap", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "swap_f3",
    "ordered_varnames": ["aList", "i", "j", "temp"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 5, 4]}, "line": 24, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "swap", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    0, "listToSort": ["REF", 4], "min_elem_index": 0}, "is_highlighted": false, "is_parent":
    false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 3, "encoded_locals": {"i": 0, "__return__": null,
    "j": 0, "aList": ["REF", 4], "temp": 2}, "is_highlighted": true, "is_parent":
    false, "func_name": "swap", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "swap_f3", "ordered_varnames": ["aList", "i", "j", "temp", "__return__"]}], "globals":
    {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2],
    "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 24, "event": "return"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "selectionSort", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 0, "listToSort": ["REF", 4], "min_elem_index": 0}, "is_highlighted":
    true, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "selectionSort", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 1, "listToSort": ["REF",
    4], "min_elem_index": 0}, "is_highlighted": true, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 4, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 1, "listToSort": ["REF", 4], "min_elem_index": 0}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 4, "encoded_locals": {"aList": ["REF", 4], "start_index":
    1}, "is_highlighted": true, "is_parent": false, "func_name": "index_of_min", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "index_of_min_f4", "ordered_varnames":
    ["aList", "start_index"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]},
    "line": 9, "event": "call"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "index_of_min", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 1, "listToSort": ["REF",
    4], "min_elem_index": 0}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]},
    {"frame_id": 4, "encoded_locals": {"aList": ["REF", 4], "start_index": 1}, "is_highlighted":
    true, "is_parent": false, "func_name": "index_of_min", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "index_of_min_f4", "ordered_varnames": ["aList", "start_index"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 11, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 1, "listToSort": ["REF", 4], "min_elem_index": 0}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 4, "encoded_locals": {"aList": ["REF", 4], "min_elem_index":
    1, "start_index": 1}, "is_highlighted": true, "is_parent": false, "func_name":
    "index_of_min", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "index_of_min_f4", "ordered_varnames": ["aList", "start_index", "min_elem_index"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 12, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 1, "listToSort": ["REF", 4], "min_elem_index": 0}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 4, "encoded_locals": {"i": 1, "aList": ["REF",
    4], "min_elem_index": 1, "start_index": 1}, "is_highlighted": true, "is_parent":
    false, "func_name": "index_of_min", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "index_of_min_f4", "ordered_varnames": ["aList", "start_index",
    "min_elem_index", "i"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]},
    "line": 13, "event": "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "index_of_min", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 1, "listToSort": ["REF",
    4], "min_elem_index": 0}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]},
    {"frame_id": 4, "encoded_locals": {"i": 1, "aList": ["REF", 4], "min_elem_index":
    1, "start_index": 1}, "is_highlighted": true, "is_parent": false, "func_name":
    "index_of_min", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "index_of_min_f4", "ordered_varnames": ["aList", "start_index", "min_elem_index",
    "i"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min":
    ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 12, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 1, "listToSort": ["REF", 4], "min_elem_index": 0}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 4, "encoded_locals": {"i": 2, "aList": ["REF",
    4], "min_elem_index": 1, "start_index": 1}, "is_highlighted": true, "is_parent":
    false, "func_name": "index_of_min", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "index_of_min_f4", "ordered_varnames": ["aList", "start_index",
    "min_elem_index", "i"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]},
    "line": 13, "event": "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "index_of_min", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 1, "listToSort": ["REF",
    4], "min_elem_index": 0}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]},
    {"frame_id": 4, "encoded_locals": {"i": 2, "aList": ["REF", 4], "min_elem_index":
    1, "start_index": 1}, "is_highlighted": true, "is_parent": false, "func_name":
    "index_of_min", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "index_of_min_f4", "ordered_varnames": ["aList", "start_index", "min_elem_index",
    "i"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min":
    ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 14, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 1, "listToSort": ["REF", 4], "min_elem_index": 0}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 4, "encoded_locals": {"i": 2, "aList": ["REF",
    4], "min_elem_index": 2, "start_index": 1}, "is_highlighted": true, "is_parent":
    false, "func_name": "index_of_min", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "index_of_min_f4", "ordered_varnames": ["aList", "start_index",
    "min_elem_index", "i"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]},
    "line": 12, "event": "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "index_of_min", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 1, "listToSort": ["REF",
    4], "min_elem_index": 0}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]},
    {"frame_id": 4, "encoded_locals": {"i": 2, "aList": ["REF", 4], "min_elem_index":
    2, "start_index": 1}, "is_highlighted": true, "is_parent": false, "func_name":
    "index_of_min", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "index_of_min_f4", "ordered_varnames": ["aList", "start_index", "min_elem_index",
    "i"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min":
    ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 15, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 1, "listToSort": ["REF", 4], "min_elem_index": 0}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 4, "encoded_locals": {"i": 2, "__return__": 2,
    "aList": ["REF", 4], "min_elem_index": 2, "start_index": 1}, "is_highlighted":
    true, "is_parent": false, "func_name": "index_of_min", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "index_of_min_f4", "ordered_varnames": ["aList", "start_index",
    "min_elem_index", "i", "__return__"]}], "globals": {"swap": ["REF", 3], "selectionSort":
    ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1":
    ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList,
    start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST",
    2, 5, 4]}, "line": 15, "event": "return"}, {"ordered_globals": ["selectionSort",
    "index_of_min", "swap", "listToSort"], "stdout": "", "func_name": "selectionSort",
    "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index": 1, "listToSort":
    ["REF", 4], "min_elem_index": 2}, "is_highlighted": true, "is_parent": false,
    "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]},
    "line": 5, "event": "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "swap", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"starting_index": 1, "listToSort": ["REF", 4], "min_elem_index":
    2}, "is_highlighted": false, "is_parent": false, "func_name": "selectionSort",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "selectionSort_f1",
    "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]}, {"frame_id":
    5, "encoded_locals": {"i": 1, "j": 2, "aList": ["REF", 4]}, "is_highlighted":
    true, "is_parent": false, "func_name": "swap", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "swap_f5", "ordered_varnames": ["aList", "i", "j"]}], "globals":
    {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2],
    "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 18, "event": "call"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "swap", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 1, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 5, "encoded_locals": {"i": 1, "j": 2, "aList":
    ["REF", 4]}, "is_highlighted": true, "is_parent": false, "func_name": "swap",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "swap_f5", "ordered_varnames":
    ["aList", "i", "j"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]},
    "line": 20, "event": "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "swap", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"starting_index": 1, "listToSort": ["REF", 4], "min_elem_index":
    2}, "is_highlighted": false, "is_parent": false, "func_name": "selectionSort",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "selectionSort_f1",
    "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]}, {"frame_id":
    5, "encoded_locals": {"i": 1, "j": 2, "aList": ["REF", 4], "temp": 5}, "is_highlighted":
    true, "is_parent": false, "func_name": "swap", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "swap_f5", "ordered_varnames": ["aList", "i", "j", "temp"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 5, 4]}, "line": 22, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "swap", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 1, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 5, "encoded_locals": {"i": 1, "j": 2, "aList":
    ["REF", 4], "temp": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "swap", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "swap_f5",
    "ordered_varnames": ["aList", "i", "j", "temp"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 4, 4]}, "line": 24, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "swap", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    1, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted": false, "is_parent":
    false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 5, "encoded_locals": {"i": 1, "__return__": null,
    "j": 2, "aList": ["REF", 4], "temp": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "swap", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "swap_f5", "ordered_varnames": ["aList", "i", "j", "temp", "__return__"]}], "globals":
    {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2],
    "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]}, "line": 24, "event": "return"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "selectionSort", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 1, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted":
    true, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "selectionSort", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 2, "listToSort": ["REF",
    4], "min_elem_index": 2}, "is_highlighted": true, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]}, "line": 4, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 2, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 6, "encoded_locals": {"aList": ["REF", 4], "start_index":
    2}, "is_highlighted": true, "is_parent": false, "func_name": "index_of_min", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "index_of_min_f6", "ordered_varnames":
    ["aList", "start_index"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]},
    "line": 9, "event": "call"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "index_of_min", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 2, "listToSort": ["REF",
    4], "min_elem_index": 2}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]},
    {"frame_id": 6, "encoded_locals": {"aList": ["REF", 4], "start_index": 2}, "is_highlighted":
    true, "is_parent": false, "func_name": "index_of_min", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "index_of_min_f6", "ordered_varnames": ["aList", "start_index"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]}, "line": 11, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 2, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 6, "encoded_locals": {"aList": ["REF", 4], "min_elem_index":
    2, "start_index": 2}, "is_highlighted": true, "is_parent": false, "func_name":
    "index_of_min", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "index_of_min_f6", "ordered_varnames": ["aList", "start_index", "min_elem_index"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]}, "line": 12, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 2, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 6, "encoded_locals": {"i": 2, "aList": ["REF",
    4], "min_elem_index": 2, "start_index": 2}, "is_highlighted": true, "is_parent":
    false, "func_name": "index_of_min", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "index_of_min_f6", "ordered_varnames": ["aList", "start_index",
    "min_elem_index", "i"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]},
    "line": 13, "event": "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "index_of_min", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 2, "listToSort": ["REF",
    4], "min_elem_index": 2}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]},
    {"frame_id": 6, "encoded_locals": {"i": 2, "aList": ["REF", 4], "min_elem_index":
    2, "start_index": 2}, "is_highlighted": true, "is_parent": false, "func_name":
    "index_of_min", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "index_of_min_f6", "ordered_varnames": ["aList", "start_index", "min_elem_index",
    "i"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min":
    ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]}, "line": 12, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "index_of_min", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 2, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 6, "encoded_locals": {"i": 2, "aList": ["REF",
    4], "min_elem_index": 2, "start_index": 2}, "is_highlighted": true, "is_parent":
    false, "func_name": "index_of_min", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "index_of_min_f6", "ordered_varnames": ["aList", "start_index",
    "min_elem_index", "i"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]},
    "line": 15, "event": "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "index_of_min", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 2, "listToSort": ["REF",
    4], "min_elem_index": 2}, "is_highlighted": false, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]},
    {"frame_id": 6, "encoded_locals": {"i": 2, "__return__": 2, "aList": ["REF", 4],
    "min_elem_index": 2, "start_index": 2}, "is_highlighted": true, "is_parent": false,
    "func_name": "index_of_min", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "index_of_min_f6", "ordered_varnames": ["aList", "start_index", "min_elem_index",
    "i", "__return__"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]},
    "line": 15, "event": "return"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "selectionSort", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 2, "listToSort": ["REF",
    4], "min_elem_index": 2}, "is_highlighted": true, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]}, "line": 5, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "swap", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 2, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 7, "encoded_locals": {"i": 2, "j": 2, "aList":
    ["REF", 4]}, "is_highlighted": true, "is_parent": false, "func_name": "swap",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "swap_f7", "ordered_varnames":
    ["aList", "i", "j"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]},
    "line": 18, "event": "call"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "swap", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"starting_index": 2, "listToSort": ["REF", 4], "min_elem_index":
    2}, "is_highlighted": false, "is_parent": false, "func_name": "selectionSort",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "selectionSort_f1",
    "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]}, {"frame_id":
    7, "encoded_locals": {"i": 2, "j": 2, "aList": ["REF", 4]}, "is_highlighted":
    true, "is_parent": false, "func_name": "swap", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "swap_f7", "ordered_varnames": ["aList", "i", "j"]}], "globals":
    {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2],
    "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]}, "line": 20, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "swap", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 2, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted":
    false, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 7, "encoded_locals": {"i": 2, "j": 2, "aList":
    ["REF", 4], "temp": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "swap", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "swap_f7",
    "ordered_varnames": ["aList", "i", "j", "temp"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 4, 5]}, "line": 22, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "swap", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    2, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted": false, "is_parent":
    false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 7, "encoded_locals": {"i": 2, "j": 2, "aList":
    ["REF", 4], "temp": 5}, "is_highlighted": true, "is_parent": false, "func_name":
    "swap", "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "swap_f7",
    "ordered_varnames": ["aList", "i", "j", "temp"]}], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 4, 5]}, "line": 24, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "", "func_name":
    "swap", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"starting_index":
    2, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted": false, "is_parent":
    false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}, {"frame_id": 7, "encoded_locals": {"i": 2, "__return__": null,
    "j": 2, "aList": ["REF", 4], "temp": 5}, "is_highlighted": true, "is_parent":
    false, "func_name": "swap", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "swap_f7", "ordered_varnames": ["aList", "i", "j", "temp", "__return__"]}], "globals":
    {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2],
    "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]}, "line": 24, "event": "return"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "selectionSort", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"starting_index": 2, "listToSort": ["REF", 4], "min_elem_index": 2}, "is_highlighted":
    true, "is_parent": false, "func_name": "selectionSort", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index",
    "min_elem_index"]}], "globals": {"swap": ["REF", 3], "selectionSort": ["REF",
    1], "index_of_min": ["REF", 2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION",
    "selectionSort(listToSort)", null], "2": ["FUNCTION", "index_of_min(aList, start_index)",
    null], "3": ["FUNCTION", "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]},
    "line": 3, "event": "step_line"}, {"ordered_globals": ["selectionSort", "index_of_min",
    "swap", "listToSort"], "stdout": "", "func_name": "selectionSort", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"starting_index": 2, "listToSort": ["REF",
    4], "min_elem_index": 2}, "is_highlighted": true, "is_parent": false, "func_name":
    "selectionSort", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "selectionSort_f1", "ordered_varnames": ["listToSort", "starting_index", "min_elem_index"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]}, "line": 6, "event": "step_line"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "selectionSort", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"__return__": ["REF", 4], "starting_index": 2, "listToSort": ["REF", 4], "min_elem_index":
    2}, "is_highlighted": true, "is_parent": false, "func_name": "selectionSort",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "selectionSort_f1",
    "ordered_varnames": ["listToSort", "starting_index", "min_elem_index", "__return__"]}],
    "globals": {"swap": ["REF", 3], "selectionSort": ["REF", 1], "index_of_min": ["REF",
    2], "listToSort": ["REF", 4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)",
    null], "2": ["FUNCTION", "index_of_min(aList, start_index)", null], "3": ["FUNCTION",
    "swap(aList, i, j)", null], "4": ["LIST", 2, 4, 5]}, "line": 6, "event": "return"},
    {"ordered_globals": ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout":
    "", "func_name": "<module>", "stack_to_render": [], "globals": {"swap": ["REF",
    3], "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 4, 5]}, "line": 29, "event": "step_line"}, {"ordered_globals":
    ["selectionSort", "index_of_min", "swap", "listToSort"], "stdout": "[2, 4, 5]\n",
    "func_name": "<module>", "stack_to_render": [], "globals": {"swap": ["REF", 3],
    "selectionSort": ["REF", 1], "index_of_min": ["REF", 2], "listToSort": ["REF",
    4]}, "heap": {"1": ["FUNCTION", "selectionSort(listToSort)", null], "2": ["FUNCTION",
    "index_of_min(aList, start_index)", null], "3": ["FUNCTION", "swap(aList, i, j)",
    null], "4": ["LIST", 2, 4, 5]}, "line": 29, "event": "return"}]}; var ch05_selSort_vis;
    $(document).ready(function() { ch05_selSort_vis = new ExecutionVisualizer(''ch05_selSort'',ch05_selSort_trace,
    {embeddedMode: true, verticalStack: true, heightChangeCallback: redrawAllVisualizerArrows,
    codeDivWidth: 500 }); attachLoggers(ch05_selSort_vis,''ch05_selSort''); allVisualizers.push(ch05_selSort_vis);
    }); $(document).ready(function() { $("#ch05_selSort_tracecheck").click(function()
    { logBookEvent({''event'':''codelens'', ''act'': ''check'', ''div_id'':''ch05_selSort''});
    }); }); if (allVisualizers === undefined) { var allVisualizers = []; } $(window).resize(function()
    { ch05_selSort_vis.redrawConnectors(); }); </script> <p>Notice that the code above
    does not return anything. But when we run it, we see that it works. After the
    call to <tt class="docutils literal"><span class="pre">selectionSort</span></tt>,
    our list is sorted!</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="gp">>>> </span><span class="n">standardPrefs</span> <span class="go">[''Maroon
    5'', ''Adele'', ''Lady Gaga'']</span> <span class="gp">>>> </span><span class="n">selectionSort</span><span
    class="p">(</span><span class="n">standardPrefs</span><span class="p">)</span>
    <span class="gp">>>> </span><span class="n">standardPrefs</span> <span class="go">[''Adele'',
    ''Lady Gaga'', ''Maroon 5'']</span> </pre> </div> </div> </div> <div class="section"
    id="why-selectionsort-works"> <h3 id="sigil_toc_id_93">5.5.3 Why <tt class="docutils
    literal"><span class="pre">selectionSort</span></tt> Works</h3> <p>Why does this
    code work? What is more, why does it work <em>even though</em> <tt class="docutils
    literal"><span class="pre">swap</span></tt> <em>does not have a</em> <tt class="docutils
    literal"><span class="pre">return</span></tt> <em>statement</em>? There are two
    key factors.</p> <p>First, lists are mutable. Thus, two (or more) variables can
    refer to the same list, and changes that are made to list elements using one variable
    will also be seen when you use the other variables. But where are the two variables
    referring to the same list? It seems that <tt class="docutils literal"><span class="pre">standardPrefs</span></tt>
    is the only variable referring to the original three-element list in the example
    above.</p> <p>This is the second factor: when inputs are passed into functions,
    the function parameters are assigned to each input just as if an assignment statement
    had been explicitly written, e.g.,</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="n">listToSort</span> <span class="o">=</span> <span class="n">standardPrefs</span>
    </pre> </div> </div> <p>occurs at the beginning of the call to <tt class="docutils
    literal"><span class="pre">selectionSort(standardPrefs)</span></tt>.</p> <p>As
    a result, as long as <tt class="docutils literal"><span class="pre">listToSort</span></tt>
    and <tt class="docutils literal"><span class="pre">standardPrefs</span></tt> refer
    to the same list, any changes that are made to <tt class="docutils literal"><span
    class="pre">listToSort</span></tt>‘s elements will affect <tt class="docutils
    literal"><span class="pre">standardPrefs</span></tt>‘s elements—because <tt class="docutils
    literal"><span class="pre">listToSort</span></tt>‘s elements and <tt class="docutils
    literal"><span class="pre">standardPrefs</span></tt>‘s elements are one and the
    same thing.</p> <p><strong>Takeaway message:</strong> <em>Passing inputs into
    a function is equivalent to assigning those inputs to the parameters of that function.
    Thus, the subtleties of mutable and immutable data types apply, just as they do
    in ordinary assignment.</em></p> <p>The left side of Figure 5.4 illustrates what
    is happening at the beginning of the first call to <tt class="docutils literal"><span
    class="pre">swap</span></tt>. <tt class="docutils literal"><span class="pre">swap</span></tt>‘s
    variables are displayed in red, while <tt class="docutils literal"><span class="pre">selectionSort</span></tt>‘s
    variables are displayed in black. Notice that <tt class="docutils literal"><span
    class="pre">swap</span></tt>‘s <tt class="docutils literal"><span class="pre">i</span></tt>
    and <tt class="docutils literal"><span class="pre">j</span></tt> refer to the
    index locations in the list <tt class="docutils literal"><span class="pre">aList</span></tt>
    (which is just another name for the list <tt class="docutils literal"><span class="pre">listToSort</span></tt>).</p>
    <div class="figure align-center"> <a class="reference internal image-reference"
    href="../Images/SwapBadFigure.png"><img alt="../Images/SwapBadFigure.png" src="../Images/SwapBadFigure.png"
    style="width: 750.0px;"/></a> <p class="caption">Figure 5.4: A graphical depiction
    of the variables in <tt class="docutils literal"><span class="pre">selectionSort</span></tt>
    and <tt class="docutils literal"><span class="pre">swap</span></tt> at the beginning
    and the end of the first call to <tt class="docutils literal"><span class="pre">swap</span></tt></p>
    </div> <p>The right side of Figure 5.4 shows how the variables look at the very
    end of the first call to <tt class="docutils literal"><span class="pre">swap</span></tt>.
    When swap finishes, its variables disappear. But notice that even when <tt class="docutils
    literal"><span class="pre">swap</span></tt>‘s <tt class="docutils literal"><span
    class="pre">aList</span></tt>, <tt class="docutils literal"><span class="pre">i</span></tt>,
    <tt class="docutils literal"><span class="pre">j</span></tt>, and <tt class="docutils
    literal"><span class="pre">temp</span></tt> are gone, the value of the list has
    been changed in memory. Because <tt class="docutils literal"><span class="pre">swap</span></tt>‘s
    <tt class="docutils literal"><span class="pre">aList</span></tt> and <tt class="docutils
    literal"><span class="pre">selectionSort</span></tt>‘s <tt class="docutils literal"><span
    class="pre">listToSort</span></tt> and the original <tt class="docutils literal"><span
    class="pre">standardPrefs</span></tt> are all references to the same collection
    of mutable elements, the effect of assignment statements on those elements will
    be shared among all of these names. After all, they all name the same list!</p>
    </div> <div class="section" id="a-swap-of-a-different-sort"> <h3 id="sigil_toc_id_94">5.5.4
    A Swap of a Different Sort</h3> <p>Consider a very minor modification to the <tt
    class="docutils literal"><span class="pre">swap</span></tt> and <tt class="docutils
    literal"><span class="pre">selectionSort</span></tt> functions that has a very
    major impact on the results:</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="k">def</span> <span class="nf">selectionSort</span><span class="p">(</span><span
    class="n">listToSort</span><span class="p">):</span> <span class="sd">''''''sorts
    listToSort iteratively and in-place''''''</span> <span class="k">for</span> <span
    class="n">starting_index</span> <span class="ow">in</span> <span class="nb">range</span><span
    class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">listToSort</span><span
    class="p">)):</span> <span class="n">min_elem_index</span> <span class="o">=</span>
    <span class="n">index_of_min</span><span class="p">(</span><span class="n">listToSort</span><span
    class="p">,</span> <span class="n">starting_index</span><span class="p">)</span>
    <span class="c"># now swap the elements!</span> <span class="n">swap</span><span
    class="p">(</span><span class="n">listToSort</span><span class="p">[</span><span
    class="n">starting_index</span><span class="p">],</span> <span class="n">listToSort</span><span
    class="p">[</span><span class="n">min_elem_index</span><span class="p">])</span>
    <span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span
    class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="sd">''''''swaps the values of a and b''''''</span> <span class="n">temp</span>
    <span class="o">=</span> <span class="n">a</span> <span class="n">a</span> <span
    class="o">=</span> <span class="n">b</span> <span class="n">b</span> <span class="o">=</span>
    <span class="n">temp</span> </pre> </div> </div> <p>The code looks almost the
    same, but now it does not work!</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="gp">>>> </span><span class="n">standardPrefs</span> <span class="c"># Assume
    this list is already populated with standardized user preferences</span> <span
    class="go">[''Maroon 5'', ''Adele'', ''Lady Gaga'']</span> <span class="gp">>>>
    </span><span class="n">selectionSort</span><span class="p">(</span><span class="n">standardPrefs</span><span
    class="p">)</span> <span class="gp">>>> </span><span class="n">standardPrefs</span>
    <span class="go">[''Maroon 5'', ''Adele'', ''Lady Gaga'']</span> </pre> </div>
    </div> <div class="figure align-center"> <a class="reference internal image-reference"
    href="../Images/SwapFigureBad.png"><img alt="../Images/SwapFigureBad.png" src="../Images/SwapFigureBad.png"
    style="width: 750.0px;"/></a> <p class="caption">Figure 5.5: A graphical depiction
    of the variables in <tt class="docutils literal"><span class="pre">selectionSort</span></tt>
    and the new (and faulty) <tt class="docutils literal"><span class="pre">swap</span></tt>
    at the beginning and the end of the first call to <tt class="docutils literal"><span
    class="pre">swap</span></tt></p> </div> <p>The variables <tt class="docutils literal"><span
    class="pre">a</span></tt> and <tt class="docutils literal"><span class="pre">b</span></tt>
    in <tt class="docutils literal"><span class="pre">swap</span></tt> indeed do get
    swapped, as the following before-and-after figure illustrates. But nothing happens
    to the elements of <tt class="docutils literal"><span class="pre">aList</span></tt>
    or, to say the same thing, nothing happens to the elements of <tt class="docutils
    literal"><span class="pre">standardPrefs</span></tt>.</p> <p>Figure 5.5 illustrates
    what is happening before and after the call to <tt class="docutils literal"><span
    class="pre">swap</span></tt>.</p> <p>What happened? This time, <tt class="docutils
    literal"><span class="pre">swap</span></tt> has only two parameters, <tt class="docutils
    literal"><span class="pre">a</span></tt> and <tt class="docutils literal"><span
    class="pre">b</span></tt>, whose references are copies of the references of <tt
    class="docutils literal"><span class="pre">listToSort[start_index]</span></tt>
    and <tt class="docutils literal"><span class="pre">listToSort[min_elem_index]</span></tt>,
    respectively. Keep in mind Python’s mechanism for assignment: <em>Assignments
    make a copy of a reference.</em></p> <p>Thus, when <tt class="docutils literal"><span
    class="pre">swap</span></tt> runs this time, its assignment statements are working
    on <em>copies</em> of references. All of the swapping happens just as specified,
    so that the values referred to by <tt class="docutils literal"><span class="pre">a</span></tt>
    and <tt class="docutils literal"><span class="pre">b</span></tt> are, indeed,
    reversed. But the references held within <tt class="docutils literal"><span class="pre">selectionSort</span></tt>‘s
    list <tt class="docutils literal"><span class="pre">listToSort</span></tt> have
    not changed. Thus, the value of <tt class="docutils literal"><span class="pre">listToSort</span></tt>
    does not change. Since the value of <tt class="docutils literal"><span class="pre">standardPrefs</span></tt>
    <em>is</em> the value of <tt class="docutils literal"><span class="pre">listToSort</span></tt>,
    nothing happens.</p> <p>As we mentioned at the start of this section, Selection
    Sort is just one of many sorting algorithms, some of which are faster than others
    (Selection Sort is not particularly fast, though it’s certainly not the slowest
    approach either). In practice, especially for now, you’ll probably just call Python’s
    built-in <tt class="docutils literal"><span class="pre">sort</span></tt> function
    for lists, which is efficient, and more importantly, correctly implemented.</p>
    <div class="highlight-python"><div class="highlight"><pre><span class="gp">>>>
    </span><span class="n">standardPrefs</span> <span class="c"># Assume this list
    is already populated with standardized user preferences</span> <span class="go">[''Maroon
    5'', ''Adele'', ''Lady Gaga'']</span> <span class="gp">>>> </span><span class="n">standardPrefs</span><span
    class="o">.</span><span class="n">sort</span><span class="p">()</span> <span class="gp">>>>
    </span><span class="n">standardPrefs</span> <span class="go">[''Adele'', ''Lady
    Gaga'', ''Maroon 5'']</span> </pre> </div> </div> <div class="figure align-center">
    <a class="reference internal image-reference" href="../Images/2Darray.png"><img
    alt="../Images/2Darray.png" src="../Images/2Darray.png" style="width: 750.0px;"/></a>
    <p class="caption">Figure 5.6: A graphical depiction of a 2D array. Following
    our model from above, the green box is stored in the CPU, and the rest of the
    data (including the references to other lists) is stored in memory.</p> </div>
    </div> <div class="section" id="d-arrays-and-nested-loops"> <h3 id="sigil_toc_id_95">5.5.5
    2D Arrays and Nested Loops</h3> <p>It turns out that you can store more than just
    numbers in lists: arbitrary data can be stored. We’ve already seen many examples
    in Chapter 2 where lists were used to store strings, numbers, and combinations
    of those data types. Lists of lists are not only possible, but powerful and common.</p>
    <p id="index-12">In an imperative context, lists are often called <em>arrays</em>,
    and in this section we examine another common array structure: arrays that store
    other arrays, often called <em>2D arrays</em>.</p> <div class="figure align-right"
    style="width: 150px"> <a class="reference internal image-reference" href="../Images/Alien6.PNG"><img
    alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG" style="width: 0px;"/></a>
    <p class="caption"><em>Our attorneys have advised us to note that technically,
    there are very subtle differences between “lists” and “arrays” – but the distinctions
    are too fine to worry about here.</em></p> </div> <p>The concept behind a 2D array
    is simple: it is just a list whose elements themselves are lists. For example,
    the code</p> <div class="highlight-python"><div class="highlight"><pre><span class="gp">>>>
    </span><span class="n">a2DList</span> <span class="o">=</span> <span class="p">[[</span><span
    class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>
    <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span
    class="p">],[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span
    class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span
    class="p">],</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span>
    <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span
    class="p">,</span> <span class="mi">12</span><span class="p">]]</span> </pre>
    </div> </div> <p>creates a list named <tt class="docutils literal"><span class="pre">a2DList</span></tt>
    where each of <tt class="docutils literal"><span class="pre">a2DList</span></tt>‘s
    elements is itself a list. Figure 5.6 illustrates this 2D array (list) graphically.
    In the figure the array name has been shortened to just <tt class="docutils literal"><span
    class="pre">A</span></tt> for conciseness.</p> <p>You can access the individual
    elements in the 2D array by using “nested” indices as shown below:</p> <div class="highlight-python"><div
    class="highlight"><pre><span class="gp">>>> </span><span class="n">a2DList</span><span
    class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c">#
    Get the first element of a2DList</span> <span class="go">[1, 2, 3, 4]</span> <span
    class="gp">>>> </span><span class="n">a2DList</span><span class="p">[</span><span
    class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="c"># Get the first element of a2DList[0]</span> <span class="go">1</span>
    <span class="gp">>>> </span><span class="n">a2DList</span><span class="p">[</span><span
    class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
    <span class="c"># Get the second element of a2DList[1]</span> <span class="go">6</span>
    </pre> </div> </div> <p>We can also ask questions about <tt class="docutils literal"><span
    class="pre">a2DList</span></tt>‘s height (the number of rows) and its width (the
    number of columns):</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="gp">>>> </span><span class="nb">len</span><span class="p">(</span><span
    class="n">a2DList</span><span class="p">)</span> <span class="c"># The number
    of elements (rows) in a2DList</span> <span class="go">3</span> <span class="gp">>>>
    </span><span class="nb">len</span><span class="p">(</span><span class="n">a2DList</span><span
    class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c">#
    The number of elements in a list in a2DList (i.e., the number of columns)</span>
    <span class="go">4</span> </pre> </div> </div> <p>Typically, arrays have equal-length
    rows, though “jagged” arrays are certainly possible.</p> <p>This 2D structure
    turns out to be a very powerful tool for representing data. In fact, we’ve already
    seen an example of this in our recommender program: the stored users’ preferences
    were represented by a list-of-lists, i.e., a 2D array. In this case, the array
    certainly was “jagged” as different stored users had rated different numbers of
    artists.</p> <p>Above we wrote some code to standardize the representation of
    one particular user’s preferences. But we might be unsure about the database—are
    those lists also standardized (and sorted)? If not, no problem. It’s easy to write
    code that quickly standardizes all the elements in all of the lists:</p> <div
    id="ch05_stand"><div class="ExecutionVisualizer"><div id="vizHeader" style="display:
    none;"> <textarea class="vizTitleText" id="vizTitleEditor" cols="60" rows="1"
    style="display: none;"/> <div class="vizTitleText" id="vizTitleViewer"/> <textarea
    class="vizDescriptionText" id="vizDescriptionEditor" cols="75" rows="2" style="display:
    none;"/> <div class="vizDescriptionText" id="vizDescriptionViewer"/> </div> <table
    border="0" class="visualizer"><tbody><tr><td class="vizLayoutTd" id="vizLayoutTdFirst"><div
    id="codeDisplayDiv" style="max-width: 500px;"> <div id="pyCodeOutputDiv" style="max-width:
    500px; max-height: 400px;"><table id="pyCodeOutput"><tbody><tr><td id="gutterTD"
    valign="top" rowspan="14"><svg id="leftCodeGutterSVG" style="height: 330px;"><polygon
    id="prevLineArrow" points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#c9e6ca" style="display:
    none;"/><polygon id="curLineArrow" points="0,3 12,3 12,0 18,5 12,10 12,7 0,7"
    fill="#e93f34" transform="translate(0, 5.361328125)"/></svg> </td> <td class="lineNo"
    id="lineNo1">1</td> <td class="cod" id="v7__cod1">def standardizeAll(storedPrefs):</td>
    </tr> <tr><td class="lineNo" id="lineNo2">2</td> <td class="cod" id="v7__cod2">    '''''' Returns a new list of lists of stored user preferences,</td>
    </tr> <tr><td class="lineNo" id="lineNo3">3</td> <td class="cod" id="v7__cod3">    with each artist string in Title Case,</td>
    </tr> <tr><td class="lineNo" id="lineNo4">4</td> <td class="cod" id="v7__cod4">    with leading and trailing whitespace removed.</td>
    </tr> <tr><td class="lineNo" id="lineNo5">5</td> <td class="cod" id="v7__cod5">    ''''''</td>
    </tr> <tr><td class="lineNo" id="lineNo6">6</td> <td class="cod" id="v7__cod6">    standardStoredPrefs = []</td>
    </tr> <tr><td class="lineNo" id="lineNo7">7</td> <td class="cod" id="v7__cod7">    for storedUser in storedPrefs:</td>
    </tr> <tr><td class="lineNo" id="lineNo8">8</td> <td class="cod" id="v7__cod8">        standardStoredUser = []</td>
    </tr> <tr><td class="lineNo" id="lineNo9">9</td> <td class="cod" id="v7__cod9">        for artist in storedUser:</td>
    </tr> <tr><td class="lineNo" id="lineNo10">10</td> <td class="cod" id="v7__cod10">            standardStoredUser.append(artist.strip().title())</td>
    </tr> <tr><td class="lineNo" id="lineNo11">11</td> <td class="cod" id="v7__cod11">        standardStoredPrefs.append(standardStoredUser)</td>
    </tr> <tr><td class="lineNo" id="lineNo12">12</td> <td class="cod" id="v7__cod12">    return standardStoredPrefs</td>
    </tr> <tr><td class="lineNo" id="lineNo13">13</td> <td class="cod" id="v7__cod13"/>
    </tr> <tr><td class="lineNo" id="lineNo14">14</td> <td class="cod" id="v7__cod14">print (standardizeAll([['' adele'', ''lAdY GAGA''], [''maROON 5'']]))</td>
    </tr> </tbody> </table> </div> <div id="editCodeLinkDiv" style="display: none;"><a
    id="editBtn" href="#">Edit code</a></div> <div id="executionSlider" class="ui-slider
    ui-slider-horizontal ui-widget ui-widget-content ui-corner-all" style="width:
    480px; font-size: 0.9em;"></div> <div id="vcrControls"> <button id="jmpFirstInstr"
    type="button" disabled="disabled"><< First</button> <button id="jmpStepBack" type="button"
    disabled="disabled">< Back</button> <span id="curInstr">Step 1 of 20</span> <button
    id="jmpStepFwd" type="button">Forward ></button> <button id="jmpLastInstr" type="button">Last
    >></button> </div> <div id="errorOutput" style="display: none;"/> <div id="legendDiv"><svg
    id="prevLegendArrowSVG"><polygon points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#c9e6ca"/></svg>
    line that has just executed<p style="margin-top: 4px"><svg id="curLegendArrowSVG"><polygon
    points="0,3 12,3 12,0 18,5 12,10 12,7 0,7" fill="#e93f34"/></svg> next line to
    execute</p> </div> <div id="stepAnnotationDiv"> <textarea class="annotationText"
    id="stepAnnotationEditor" cols="60" rows="3" style="display: none;"/> <div class="annotationText"
    id="stepAnnotationViewer"/> </div> <div id="annotateLinkDiv"><button id="annotateBtn"
    type="button" style="display: none;">Annotate this step</button></div> </div>
    <div id="htmlOutputDiv"/> <div id="progOutputs" style="display: none;"> Program
    output:<br/> <textarea id="pyStdout" cols="50" rows="10" wrap="off" readonly=""
    style="max-width: 500px;"/> </div> </td> </tr> <tr><td class="vizLayoutTd" id="vizLayoutTdSecond"><div
    id="dataViz"> <table id="stackHeapTable"> <tbody><tr> <td id="stack_td"> <div
    id="globals_area"> <div id="stackHeader">Frames</div> <div class="stackFrame highlightedStackFrame"
    id="v7__globals" style="display: none;"><div id="v7__globals_header" class="stackFrameHeader">Global
    variables</div> <table class="stackFrameVarTable" id="v7__global_table"/> </div>
    </div> <div id="stack"/> </td> <td id="heap_td"> <div id="heap"> <div id="heapHeader">Objects</div>
    </div> </td> </tr> </tbody> </table> </div> </td> </tr> </tbody> </table> </div>
    </div> <p class="cl_caption"><span class="cl_caption_text"> (ch05_stand)</span>
    </p> <script type="text/javascript"> var ch05_stand_trace = {"code": "def standardizeAll(storedPrefs):\n
    '''''' Returns a new list of lists of stored user preferences,\n with each artist
    string in Title Case,\n with leading and trailing whitespace removed.\n ''''''\n
    standardStoredPrefs = []\n for storedUser in storedPrefs:\n standardStoredUser
    = []\n for artist in storedUser:\n standardStoredUser.append(artist.strip().title())\n
    standardStoredPrefs.append(standardStoredUser)\n return standardStoredPrefs\n\nprint
    (standardizeAll([['' adele'', ''lAdY GAGA''], [''maROON 5'']]))", "trace": [{"ordered_globals":
    [], "stdout": "", "func_name": "<module>", "stack_to_render": [], "globals": {},
    "heap": {}, "line": 1, "event": "step_line"}, {"ordered_globals": ["standardizeAll"],
    "stdout": "", "func_name": "<module>", "stack_to_render": [], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null]},
    "line": 14, "event": "step_line"}, {"ordered_globals": ["standardizeAll"], "stdout":
    "", "func_name": "standardizeAll", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"storedPrefs": ["REF", 2]}, "is_highlighted": true, "is_parent": false, "func_name":
    "standardizeAll", "is_zombie": false, "parent_frame_id_list": [], "unique_hash":
    "standardizeAll_f1", "ordered_varnames": ["storedPrefs"]}], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null],
    "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"], "4":
    ["LIST", "maROON 5"]}, "line": 1, "event": "call"}, {"ordered_globals": ["standardizeAll"],
    "stdout": "", "func_name": "standardizeAll", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"storedPrefs": ["REF", 2]}, "is_highlighted": true, "is_parent":
    false, "func_name": "standardizeAll", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "standardizeAll_f1", "ordered_varnames": ["storedPrefs"]}],
    "globals": {"standardizeAll": ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)",
    null], "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"],
    "4": ["LIST", "maROON 5"]}, "line": 6, "event": "step_line"}, {"ordered_globals":
    ["standardizeAll"], "stdout": "", "func_name": "standardizeAll", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"storedPrefs": ["REF", 2], "standardStoredPrefs":
    ["REF", 5]}, "is_highlighted": true, "is_parent": false, "func_name": "standardizeAll",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "standardizeAll_f1",
    "ordered_varnames": ["storedPrefs", "standardStoredPrefs"]}], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null],
    "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"], "4":
    ["LIST", "maROON 5"], "5": ["LIST"]}, "line": 7, "event": "step_line"}, {"ordered_globals":
    ["standardizeAll"], "stdout": "", "func_name": "standardizeAll", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"storedPrefs": ["REF", 2], "standardStoredPrefs":
    ["REF", 5], "storedUser": ["REF", 3]}, "is_highlighted": true, "is_parent": false,
    "func_name": "standardizeAll", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "standardizeAll_f1", "ordered_varnames": ["storedPrefs", "standardStoredPrefs",
    "storedUser"]}], "globals": {"standardizeAll": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "standardizeAll(storedPrefs)", null], "2": ["LIST", ["REF", 3], ["REF", 4]], "3":
    ["LIST", " adele", "lAdY GAGA"], "4": ["LIST", "maROON 5"], "5": ["LIST"]}, "line":
    8, "event": "step_line"}, {"ordered_globals": ["standardizeAll"], "stdout": "",
    "func_name": "standardizeAll", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"standardStoredUser": ["REF", 6], "storedPrefs": ["REF", 2], "standardStoredPrefs":
    ["REF", 5], "storedUser": ["REF", 3]}, "is_highlighted": true, "is_parent": false,
    "func_name": "standardizeAll", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "standardizeAll_f1", "ordered_varnames": ["storedPrefs", "standardStoredPrefs",
    "storedUser", "standardStoredUser"]}], "globals": {"standardizeAll": ["REF", 1]},
    "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null], "2": ["LIST",
    ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"], "4": ["LIST", "maROON
    5"], "5": ["LIST"], "6": ["LIST"]}, "line": 9, "event": "step_line"}, {"ordered_globals":
    ["standardizeAll"], "stdout": "", "func_name": "standardizeAll", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"standardStoredUser": ["REF", 6], "storedPrefs":
    ["REF", 2], "standardStoredPrefs": ["REF", 5], "storedUser": ["REF", 3], "artist":
    " adele"}, "is_highlighted": true, "is_parent": false, "func_name": "standardizeAll",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "standardizeAll_f1",
    "ordered_varnames": ["storedPrefs", "standardStoredPrefs", "storedUser", "standardStoredUser",
    "artist"]}], "globals": {"standardizeAll": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "standardizeAll(storedPrefs)", null], "2": ["LIST", ["REF", 3], ["REF", 4]], "3":
    ["LIST", " adele", "lAdY GAGA"], "4": ["LIST", "maROON 5"], "5": ["LIST"], "6":
    ["LIST"]}, "line": 10, "event": "step_line"}, {"ordered_globals": ["standardizeAll"],
    "stdout": "", "func_name": "standardizeAll", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"standardStoredUser": ["REF", 6], "storedPrefs": ["REF",
    2], "standardStoredPrefs": ["REF", 5], "storedUser": ["REF", 3], "artist": " adele"},
    "is_highlighted": true, "is_parent": false, "func_name": "standardizeAll", "is_zombie":
    false, "parent_frame_id_list": [], "unique_hash": "standardizeAll_f1", "ordered_varnames":
    ["storedPrefs", "standardStoredPrefs", "storedUser", "standardStoredUser", "artist"]}],
    "globals": {"standardizeAll": ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)",
    null], "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"],
    "4": ["LIST", "maROON 5"], "5": ["LIST"], "6": ["LIST", "Adele"]}, "line": 9,
    "event": "step_line"}, {"ordered_globals": ["standardizeAll"], "stdout": "", "func_name":
    "standardizeAll", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"standardStoredUser":
    ["REF", 6], "storedPrefs": ["REF", 2], "standardStoredPrefs": ["REF", 5], "storedUser":
    ["REF", 3], "artist": "lAdY GAGA"}, "is_highlighted": true, "is_parent": false,
    "func_name": "standardizeAll", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "standardizeAll_f1", "ordered_varnames": ["storedPrefs", "standardStoredPrefs",
    "storedUser", "standardStoredUser", "artist"]}], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null],
    "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"], "4":
    ["LIST", "maROON 5"], "5": ["LIST"], "6": ["LIST", "Adele"]}, "line": 10, "event":
    "step_line"}, {"ordered_globals": ["standardizeAll"], "stdout": "", "func_name":
    "standardizeAll", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"standardStoredUser":
    ["REF", 6], "storedPrefs": ["REF", 2], "standardStoredPrefs": ["REF", 5], "storedUser":
    ["REF", 3], "artist": "lAdY GAGA"}, "is_highlighted": true, "is_parent": false,
    "func_name": "standardizeAll", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "standardizeAll_f1", "ordered_varnames": ["storedPrefs", "standardStoredPrefs",
    "storedUser", "standardStoredUser", "artist"]}], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null],
    "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"], "4":
    ["LIST", "maROON 5"], "5": ["LIST"], "6": ["LIST", "Adele", "Lady Gaga"]}, "line":
    9, "event": "step_line"}, {"ordered_globals": ["standardizeAll"], "stdout": "",
    "func_name": "standardizeAll", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"standardStoredUser": ["REF", 6], "storedPrefs": ["REF", 2], "standardStoredPrefs":
    ["REF", 5], "storedUser": ["REF", 3], "artist": "lAdY GAGA"}, "is_highlighted":
    true, "is_parent": false, "func_name": "standardizeAll", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "standardizeAll_f1", "ordered_varnames": ["storedPrefs", "standardStoredPrefs",
    "storedUser", "standardStoredUser", "artist"]}], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null],
    "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"], "4":
    ["LIST", "maROON 5"], "5": ["LIST"], "6": ["LIST", "Adele", "Lady Gaga"]}, "line":
    11, "event": "step_line"}, {"ordered_globals": ["standardizeAll"], "stdout": "",
    "func_name": "standardizeAll", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"standardStoredUser": ["REF", 6], "storedPrefs": ["REF", 2], "standardStoredPrefs":
    ["REF", 5], "storedUser": ["REF", 3], "artist": "lAdY GAGA"}, "is_highlighted":
    true, "is_parent": false, "func_name": "standardizeAll", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "standardizeAll_f1", "ordered_varnames": ["storedPrefs", "standardStoredPrefs",
    "storedUser", "standardStoredUser", "artist"]}], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null],
    "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"], "4":
    ["LIST", "maROON 5"], "5": ["LIST", ["REF", 6]], "6": ["LIST", "Adele", "Lady
    Gaga"]}, "line": 7, "event": "step_line"}, {"ordered_globals": ["standardizeAll"],
    "stdout": "", "func_name": "standardizeAll", "stack_to_render": [{"frame_id":
    1, "encoded_locals": {"standardStoredUser": ["REF", 6], "storedPrefs": ["REF",
    2], "standardStoredPrefs": ["REF", 5], "storedUser": ["REF", 4], "artist": "lAdY
    GAGA"}, "is_highlighted": true, "is_parent": false, "func_name": "standardizeAll",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "standardizeAll_f1",
    "ordered_varnames": ["storedPrefs", "standardStoredPrefs", "storedUser", "standardStoredUser",
    "artist"]}], "globals": {"standardizeAll": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "standardizeAll(storedPrefs)", null], "2": ["LIST", ["REF", 3], ["REF", 4]], "3":
    ["LIST", " adele", "lAdY GAGA"], "4": ["LIST", "maROON 5"], "5": ["LIST", ["REF",
    6]], "6": ["LIST", "Adele", "Lady Gaga"]}, "line": 8, "event": "step_line"}, {"ordered_globals":
    ["standardizeAll"], "stdout": "", "func_name": "standardizeAll", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"standardStoredUser": ["REF", 7], "storedPrefs":
    ["REF", 2], "standardStoredPrefs": ["REF", 5], "storedUser": ["REF", 4], "artist":
    "lAdY GAGA"}, "is_highlighted": true, "is_parent": false, "func_name": "standardizeAll",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "standardizeAll_f1",
    "ordered_varnames": ["storedPrefs", "standardStoredPrefs", "storedUser", "standardStoredUser",
    "artist"]}], "globals": {"standardizeAll": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "standardizeAll(storedPrefs)", null], "2": ["LIST", ["REF", 3], ["REF", 4]], "3":
    ["LIST", " adele", "lAdY GAGA"], "4": ["LIST", "maROON 5"], "5": ["LIST", ["REF",
    6]], "6": ["LIST", "Adele", "Lady Gaga"], "7": ["LIST"]}, "line": 9, "event":
    "step_line"}, {"ordered_globals": ["standardizeAll"], "stdout": "", "func_name":
    "standardizeAll", "stack_to_render": [{"frame_id": 1, "encoded_locals": {"standardStoredUser":
    ["REF", 7], "storedPrefs": ["REF", 2], "standardStoredPrefs": ["REF", 5], "storedUser":
    ["REF", 4], "artist": "maROON 5"}, "is_highlighted": true, "is_parent": false,
    "func_name": "standardizeAll", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "standardizeAll_f1", "ordered_varnames": ["storedPrefs", "standardStoredPrefs",
    "storedUser", "standardStoredUser", "artist"]}], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null],
    "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"], "4":
    ["LIST", "maROON 5"], "5": ["LIST", ["REF", 6]], "6": ["LIST", "Adele", "Lady
    Gaga"], "7": ["LIST"]}, "line": 10, "event": "step_line"}, {"ordered_globals":
    ["standardizeAll"], "stdout": "", "func_name": "standardizeAll", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"standardStoredUser": ["REF", 7], "storedPrefs":
    ["REF", 2], "standardStoredPrefs": ["REF", 5], "storedUser": ["REF", 4], "artist":
    "maROON 5"}, "is_highlighted": true, "is_parent": false, "func_name": "standardizeAll",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "standardizeAll_f1",
    "ordered_varnames": ["storedPrefs", "standardStoredPrefs", "storedUser", "standardStoredUser",
    "artist"]}], "globals": {"standardizeAll": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "standardizeAll(storedPrefs)", null], "2": ["LIST", ["REF", 3], ["REF", 4]], "3":
    ["LIST", " adele", "lAdY GAGA"], "4": ["LIST", "maROON 5"], "5": ["LIST", ["REF",
    6]], "6": ["LIST", "Adele", "Lady Gaga"], "7": ["LIST", "Maroon 5"]}, "line":
    9, "event": "step_line"}, {"ordered_globals": ["standardizeAll"], "stdout": "",
    "func_name": "standardizeAll", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"standardStoredUser": ["REF", 7], "storedPrefs": ["REF", 2], "standardStoredPrefs":
    ["REF", 5], "storedUser": ["REF", 4], "artist": "maROON 5"}, "is_highlighted":
    true, "is_parent": false, "func_name": "standardizeAll", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "standardizeAll_f1", "ordered_varnames": ["storedPrefs", "standardStoredPrefs",
    "storedUser", "standardStoredUser", "artist"]}], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null],
    "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"], "4":
    ["LIST", "maROON 5"], "5": ["LIST", ["REF", 6]], "6": ["LIST", "Adele", "Lady
    Gaga"], "7": ["LIST", "Maroon 5"]}, "line": 11, "event": "step_line"}, {"ordered_globals":
    ["standardizeAll"], "stdout": "", "func_name": "standardizeAll", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"standardStoredUser": ["REF", 7], "storedPrefs":
    ["REF", 2], "standardStoredPrefs": ["REF", 5], "storedUser": ["REF", 4], "artist":
    "maROON 5"}, "is_highlighted": true, "is_parent": false, "func_name": "standardizeAll",
    "is_zombie": false, "parent_frame_id_list": [], "unique_hash": "standardizeAll_f1",
    "ordered_varnames": ["storedPrefs", "standardStoredPrefs", "storedUser", "standardStoredUser",
    "artist"]}], "globals": {"standardizeAll": ["REF", 1]}, "heap": {"1": ["FUNCTION",
    "standardizeAll(storedPrefs)", null], "2": ["LIST", ["REF", 3], ["REF", 4]], "3":
    ["LIST", " adele", "lAdY GAGA"], "4": ["LIST", "maROON 5"], "5": ["LIST", ["REF",
    6], ["REF", 7]], "6": ["LIST", "Adele", "Lady Gaga"], "7": ["LIST", "Maroon 5"]},
    "line": 7, "event": "step_line"}, {"ordered_globals": ["standardizeAll"], "stdout":
    "", "func_name": "standardizeAll", "stack_to_render": [{"frame_id": 1, "encoded_locals":
    {"standardStoredUser": ["REF", 7], "storedPrefs": ["REF", 2], "standardStoredPrefs":
    ["REF", 5], "storedUser": ["REF", 4], "artist": "maROON 5"}, "is_highlighted":
    true, "is_parent": false, "func_name": "standardizeAll", "is_zombie": false, "parent_frame_id_list":
    [], "unique_hash": "standardizeAll_f1", "ordered_varnames": ["storedPrefs", "standardStoredPrefs",
    "storedUser", "standardStoredUser", "artist"]}], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null],
    "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"], "4":
    ["LIST", "maROON 5"], "5": ["LIST", ["REF", 6], ["REF", 7]], "6": ["LIST", "Adele",
    "Lady Gaga"], "7": ["LIST", "Maroon 5"]}, "line": 12, "event": "step_line"}, {"ordered_globals":
    ["standardizeAll"], "stdout": "", "func_name": "standardizeAll", "stack_to_render":
    [{"frame_id": 1, "encoded_locals": {"artist": "maROON 5", "standardStoredUser":
    ["REF", 7], "storedPrefs": ["REF", 2], "standardStoredPrefs": ["REF", 5], "__return__":
    ["REF", 5], "storedUser": ["REF", 4]}, "is_highlighted": true, "is_parent": false,
    "func_name": "standardizeAll", "is_zombie": false, "parent_frame_id_list": [],
    "unique_hash": "standardizeAll_f1", "ordered_varnames": ["storedPrefs", "standardStoredPrefs",
    "storedUser", "standardStoredUser", "artist", "__return__"]}], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null],
    "2": ["LIST", ["REF", 3], ["REF", 4]], "3": ["LIST", " adele", "lAdY GAGA"], "4":
    ["LIST", "maROON 5"], "5": ["LIST", ["REF", 6], ["REF", 7]], "6": ["LIST", "Adele",
    "Lady Gaga"], "7": ["LIST", "Maroon 5"]}, "line": 12, "event": "return"}, {"ordered_globals":
    ["standardizeAll"], "stdout": "[[''Adele'', ''Lady Gaga''], [''Maroon 5'']]\n",
    "func_name": "<module>", "stack_to_render": [], "globals": {"standardizeAll":
    ["REF", 1]}, "heap": {"1": ["FUNCTION", "standardizeAll(storedPrefs)", null]},
    "line": 14, "event": "return"}]}; var ch05_stand_vis; $(document).ready(function()
    { ch05_stand_vis = new ExecutionVisualizer(''ch05_stand'',ch05_stand_trace, {embeddedMode:
    true, verticalStack: true, heightChangeCallback: redrawAllVisualizerArrows, codeDivWidth:
    500 }); attachLoggers(ch05_stand_vis,''ch05_stand''); allVisualizers.push(ch05_stand_vis);
    }); $(document).ready(function() { $("#ch05_stand_tracecheck").click(function()
    { logBookEvent({''event'':''codelens'', ''act'': ''check'', ''div_id'':''ch05_stand''});
    }); }); if (allVisualizers === undefined) { var allVisualizers = []; } $(window).resize(function()
    { ch05_stand_vis.redrawConnectors(); }); </script> <p>In the above code, the outer
    loop controls the iteration over the individual users. That is, for each iteration
    of the outer loop, the variable <tt class="docutils literal"><span class="pre">storedUser</span></tt>
    is assigned a list containing the preferences of one of the users. The inner loop
    then iterates over the elements in that user’s list of preferences. In other words,
    <tt class="docutils literal"><span class="pre">artist</span></tt> is simply a
    string.</p> <p>We can also write the above code as follows:</p> <div class="highlight-python"><div
    class="highlight"><pre><span class="k">def</span> <span class="nf">standardizeAll</span><span
    class="p">(</span><span class="n">storedPrefs</span><span class="p">):</span>
    <span class="sd">'''''' Returns a new list of lists of stored user preferences,</span>
    <span class="sd"> with each artist string in Title Case,</span> <span class="sd">
    with leading and trailing whitespace removed.</span> <span class="sd"> ''''''</span>
    <span class="n">standardStoredPrefs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span>
    <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span
    class="p">(</span><span class="n">storedPrefs</span><span class="p">)):</span>
    <span class="n">standardStoredUser</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span>
    <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span
    class="p">(</span><span class="n">storedPrefs</span><span class="p">[</span><span
    class="n">i</span><span class="p">])):</span> <span class="n">standardStoredUser</span><span
    class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">storedPrefs</span><span
    class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span
    class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span
    class="o">.</span><span class="n">title</span><span class="p">())</span> <span
    class="n">standardStoredPrefs</span><span class="o">.</span><span class="n">append</span><span
    class="p">(</span><span class="n">standardStoredUser</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">standardStoredPrefs</span> </pre>
    </div> </div> <p>This code does the same thing, but we use the indexed version
    of the <tt class="docutils literal"><span class="pre">for</span></tt> loop instead
    of letting the <tt class="docutils literal"><span class="pre">for</span></tt>
    loop iterate directly over the elements in the list. Either construct is fine,
    but the latter makes the next example more clear.</p> <p>Because lists are mutable,
    we don’t actually have to create a whole new 2D array just to change the formatting
    of the strings in the array. Remember that strings themselves are not mutable,
    so we can’t directly change the strings stored in the list. However, we can change
    <em>which strings</em> are stored in the original list, as follows:</p> <div class="highlight-python"><div
    class="highlight"><pre><span class="k">def</span> <span class="nf">standardizeAll</span><span
    class="p">(</span><span class="n">storedPrefs</span><span class="p">):</span>
    <span class="sd">'''''' Mutates storedPrefs so that each string is in</span> <span
    class="sd"> Title Case, with leading and trailing whitespace removed.</span> <span
    class="sd"> Returns nothing.</span> <span class="sd"> ''''''</span> <span class="k">for</span>
    <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span
    class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">storedPrefs</span><span
    class="p">)):</span> <span class="k">for</span> <span class="n">j</span> <span
    class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span
    class="nb">len</span><span class="p">(</span><span class="n">storedPrefs</span><span
    class="p">[</span><span class="n">i</span><span class="p">])):</span> <span class="n">standardArtist</span>
    <span class="o">=</span> <span class="n">storedPrefs</span><span class="p">[</span><span
    class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span
    class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span
    class="n">title</span><span class="p">()</span> <span class="n">storedPrefs</span><span
    class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span
    class="p">]</span> <span class="o">=</span> <span class="n">standardArtist</span>
    </pre> </div> </div> <p>Notice that this code is slightly simpler than the code
    above, and avoids the overhead of creating a whole new list of lists.</p> </div>
    <div class="section" id="dictionaries"> <span id="index-13"/><h3 id="sigil_toc_id_96">5.5.6
    Dictionaries</h3> <p>So far we’ve looked at one type of mutable data: arrays.
    Of course, there are many others. In fact, in the next chapter you’ll learn how
    to create your own mutable data types. But more on that later. For now we will
    examine a built-in datatype called a <em>dictionary</em> that allows us to create
    mappings between pieces of data.</p> <div class="figure align-right" style="width:
    150px"> <img alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG"/> <p class="caption"><em>Have
    you ever looked up</em> <tt class="docutils literal"><span class="pre">dictionary</span></tt>
    <em>in a dictionary?</em></p> </div> <p>To motivate the need for a dictionary,
    let’s once again return to the recommender program. Until now, in our examples
    we have not been associating stored user’s names with their preferences. While
    we don’t need to store the user’s name with their examples in order to calculate
    the best matching user (assuming we know that the list of stored users does not
    contain the current user!), there are many advantages of doing so. For one, we
    can make sure that the user doesn’t get matched against themselves! Additionally,
    it might be nice in an extended version of the system to suggest possible “music
    friends” to the user, whose tastes they may want to track.</p> <p>So how will
    we associate user names with their preferences? One way would be to simply use
    lists. For example, we could have a convention where the first element in each
    user’s stored preferences is actually the name of the user herself. This approach
    works, but it is not very elegant and is likely to lead to mistakes. For example,
    what if another programmer working on this system forgets that this is the representation
    and starts treating user names as artist names? Perhaps not a tragedy, but incorrect
    behavior nonetheless. In short, elegant design is important!</p> <p id="index-14">What
    we need is a single place to store the mapping from user names to user preferences
    that we can pass around to all of the functions that need to know about it. This
    is where the dictionary comes in handy! A dictionary allows you to create mappings
    between pieces of (immutable) data (the <em>keys</em>) and other pieces of (any
    kind of) data (the <em>values</em>). Here’s an example of how they work:</p> <div
    class="highlight-python"><pre>>>> myDict = {} # creates a new empty dictionary
    # create an association between ''April'' her # list of preferred artists. # ''April''
    is the key and the list is the value >>> myDict[''April''] = [''Maroon 5'', ''The
    Rolling Stones'', ''The Beatles''] # Ditto for Ben and his list >>> myDict[''Ben'']
    = [''Lady Gaga'', ''Adele'', ''Kelly Clarkson'', ''The Dixie Chicks''] >>> myDict
    # display the mappings currently in the dictionary {''April'': [''Maroon 5'',
    ''The Rolling Stones'', ''The Beatles''], ''Ben'': [''Lady Gaga'', ''Adele'',
    ''Kelly Clarkson'', ''The Dixie Chicks'']} >>> myDict[''April''] # get the item
    mapped to ''April'' [''Maroon 5'', ''The Rolling Stones'', ''The Beatles''] >>>
    myDict[''f''] # get the item mapped to ''f''. Will cause an error because # mappings
    are one-way--''f'' is not # a valid key. Traceback (most recent call last): File
    "<pyshell\#14>", line 1, in <module> myDict[''f''] KeyError: ''f'' >>> myDict.has_key(''f'')
    # Check whether a key is in the # dictionary False >>> myDict.keys() # Get the
    keys in the dictionary dict_keys([April'', ''Ben'']) # Notice that this is a special
    kind of # object that you can iterate # over, but that''s not a list >>> myDict[1]
    = ''one'' # keys can be any immutable type >>> myDict[1.5] = [3, 5, 7] # values
    can also be mutable, and # we can mix types in the same # dictionary >>> myDict[[1,
    2]] = ''one'' # Keys cannot be mutable Traceback (most recent call last): File
    "<pyshell\#36>", line 1, in <module> myDict[[1, 2]] = ''one'' TypeError: list
    objects are unhashable # a shorthand way to create a dictionary >>> userPrefs
    = {''April'': [''Maroon 5'', ''The Rolling Stones'', ''The Beatles''], ''Ben'':
    [''Lady Gaga'', ''Adele'', ''Kelly Clarkson'', ''The Dixie Chicks'']} >>> userPrefs
    ''April'': [''Maroon 5'', ''The Rolling Stones'', ''The Beatles''], ''Ben'': [''Lady
    Gaga'', ''Adele'', ''Kelly Clarkson'', ''The Dixie Chicks'']</pre> </div> <p>The
    order in which the key-value pairs appear in Python’s output of <tt class="docutils
    literal"><span class="pre">userPrefs</span></tt> represents its internal representation
    of the data. They are not always in the same order.</p> <p>Now let’s look at how
    we can modify our recommender code to use a dictionary instead of a list of lists:</p>
    <div class="highlight-python"><div class="highlight"><pre><span class="k">def</span>
    <span class="nf">getBestUser</span><span class="p">(</span><span class="n">currUser</span><span
    class="p">,</span> <span class="n">prefs</span><span class="p">,</span> <span
    class="n">userMap</span><span class="p">):</span> <span class="sd">'''''' Gets
    recommendations for currUser based on the users in userMap (a dictionary)</span>
    <span class="sd"> and the current user''s preferences in prefs (a list) ''''''</span>
    <span class="n">users</span> <span class="o">=</span> <span class="n">userMap</span><span
    class="o">.</span><span class="n">keys</span><span class="p">()</span> <span class="n">bestuser</span>
    <span class="o">=</span> <span class="bp">None</span> <span class="n">bestscore</span>
    <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span
    class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span
    class="n">users</span><span class="p">:</span> <span class="n">score</span> <span
    class="o">=</span> <span class="n">numMatches</span><span class="p">(</span><span
    class="n">prefs</span><span class="p">,</span> <span class="n">userMap</span><span
    class="p">[</span><span class="n">user</span><span class="p">])</span> <span class="k">if</span>
    <span class="n">score</span> <span class="o">></span> <span class="n">bestscore</span>
    <span class="ow">and</span> <span class="n">currUser</span> <span class="o">!=</span>
    <span class="n">user</span><span class="p">:</span> <span class="n">bestscore</span>
    <span class="o">=</span> <span class="n">score</span> <span class="n">bestuser</span>
    <span class="o">=</span> <span class="n">user</span> <span class="k">return</span>
    <span class="n">bestuser</span> </pre> </div> </div> <p>Notice that dictionaries
    allow us to make sure we’re not matching a user to their own stored preferences!
    Pretty simple... and flexible too!</p> </div> </div> <div class="section" id="reading-and-writing-files">
    <h2 id="sigil_toc_id_97">5.6 Reading and Writing Files</h2> <p>We’ve almost got
    all the pieces we need to build our recommender program. The last major piece
    we are missing is the ability to read and write files, which we will need to load
    and store the preferences for the users the system already knows about.</p> <p>Fortunately,
    working with files is very simple in Python, and we illustrate file input and
    output (i.e., file I/O) through example. Imagine that our stored user preferences
    exist in a file named <tt class="docutils literal"><span class="pre">musicrec-store.txt</span></tt>.
    There is one line in the file for each user and the format of each line is the
    following:</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="n">username</span><span class="p">:</span><span class="n">artist1</span><span
    class="p">,</span><span class="n">artist2</span><span class="p">,</span><span
    class="o">...</span><span class="p">,</span><span class="n">artistN</span> </pre>
    </div> </div> <p>We can write the following code to read in and process all the
    lines from this file:</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="k">def</span> <span class="nf">loadUsers</span><span class="p">(</span><span
    class="n">fileName</span><span class="p">):</span> <span class="sd">'''''' Reads
    in a file of stored users'' preferences stored</span> <span class="sd"> in the
    file ''fileName''.</span> <span class="sd"> Returns a dictionary containing a
    mapping of user</span> <span class="sd"> names to a list of preferred artists</span>
    <span class="sd"> ''''''</span> <span class="nb">file</span> <span class="o">=</span>
    <span class="nb">open</span><span class="p">(</span><span class="n">fileName</span><span
    class="p">,</span> <span class="s">''r''</span><span class="p">)</span> <span
    class="n">userDict</span> <span class="o">=</span> <span class="p">{}</span> <span
    class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span
    class="nb">file</span><span class="p">:</span> <span class="c"># Read and parse
    a single line</span> <span class="p">[</span><span class="n">userName</span><span
    class="p">,</span> <span class="n">bands</span><span class="p">]</span> <span
    class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span
    class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span
    class="s">":"</span><span class="p">)</span> <span class="n">bandList</span> <span
    class="o">=</span> <span class="n">bands</span><span class="o">.</span><span class="n">split</span><span
    class="p">(</span><span class="s">","</span><span class="p">)</span> <span class="n">bandList</span><span
    class="o">.</span><span class="n">sort</span><span class="p">()</span> <span class="n">userDict</span><span
    class="p">[</span><span class="n">userName</span><span class="p">]</span> <span
    class="o">=</span> <span class="n">bandList</span> <span class="nb">file</span><span
    class="o">.</span><span class="n">close</span><span class="p">()</span> <span
    class="k">return</span> <span class="n">userDict</span> </pre> </div> </div> <p>When
    we call this function we would pass it the filename <tt class="docutils literal"><span
    class="pre">musicrec-store.txt</span></tt>.</p> <p>There are a few key pieces
    to this function. First, we have to open the file for reading. This task is accomplished
    with the line <tt class="docutils literal"><span class="pre">file</span> <span
    class="pre">=</span> <span class="pre">open(fileName,</span> <span class="pre">''r'')</span></tt>,
    which gives us a link to the contents of the file through <tt class="docutils
    literal"><span class="pre">file</span></tt>, but we can only read from this file
    (we cannot write to it). If we wanted to write to the file, we would specify <tt
    class="docutils literal"><span class="pre">''w''</span></tt> as the second argument
    to the <tt class="docutils literal"><span class="pre">open</span></tt> function;
    if we wanted to both read and write, we would pass <tt class="docutils literal"><span
    class="pre">''w+''</span></tt> as the second argument.</p> <p>Once we have our
    handle to the file’s contents (<tt class="docutils literal"><span class="pre">file</span></tt>)
    we can read lines from it using the <tt class="docutils literal"><span class="pre">for</span></tt>
    loop construct above. As the <tt class="docutils literal"><span class="pre">for</span></tt>
    loop iterates over <tt class="docutils literal"><span class="pre">file</span></tt>,
    what it is actually doing is pulling out one line at a time until there are no
    more lines, at which point the <tt class="docutils literal"><span class="pre">for</span></tt>
    loop ends.</p> <p>Finally, when we have read all the data out of the file and
    stored it in the dictionary in our program, we can close the file using <tt class="docutils
    literal"><span class="pre">file.close()</span></tt>.</p> <p>The function below
    shows the part of the code that writes the stored user preferences (including
    the current user) back to the file:</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="k">def</span> <span class="nf">saveUserPreferences</span><span class="p">(</span><span
    class="n">userName</span><span class="p">,</span> <span class="n">prefs</span><span
    class="p">,</span> <span class="n">userMap</span><span class="p">,</span> <span
    class="n">fileName</span><span class="p">):</span> <span class="sd">'''''' Writes
    all of the user preferences to the file.</span> <span class="sd"> Returns nothing.
    ''''''</span> <span class="n">userMap</span><span class="p">[</span><span class="n">userName</span><span
    class="p">]</span> <span class="o">=</span> <span class="n">prefs</span> <span
    class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span
    class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span
    class="s">"w"</span><span class="p">)</span> <span class="k">for</span> <span
    class="n">user</span> <span class="ow">in</span> <span class="n">userMap</span><span
    class="p">:</span> <span class="n">toSave</span> <span class="o">=</span> <span
    class="nb">str</span><span class="p">(</span><span class="n">user</span><span
    class="p">)</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span>
    <span class="s">","</span><span class="o">.</span><span class="n">join</span><span
    class="p">(</span><span class="n">userMap</span><span class="p">[</span><span
    class="n">user</span><span class="p">])</span> <span class="o">+</span> \ <span
    class="s">"</span><span class="se">\n</span><span class="s">"</span> <span class="nb">file</span><span
    class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">toSave</span><span
    class="p">)</span> <span class="nb">file</span><span class="o">.</span><span class="n">close</span><span
    class="p">()</span> </pre> </div> </div> </div> <div class="section" id="putting-it-all-together-program-design">
    <h2 id="sigil_toc_id_98">5.7 Putting It All Together: Program Design</h2> <p>Now
    that we’ve got all the tools, it’s time to construct the whole recommender program.
    However, as a disclaimer, large scale program design can at times feel more like
    an art than a science. Maybe more science than art! There are certainly guiding
    principles and theories, but you rarely “just get it right” on your first try,
    no matter how careful you are. So expect that in implementing any program of reasonable
    size, you’ll need to make a couple of revisions. Think of it like writing a paper—if
    you like writing papers.</p> <div class="figure align-right" style="width: 150px">
    <a class="reference internal image-reference" href="../Images/Alien6.PNG"><img
    alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG" style="width: 0px;"/></a>
    <p class="caption"><em>CS is at least as creative and precise as careful writing;
    don’t be afraid of creating—and redoing—several drafts!</em></p> </div> <p>The
    first step to program design is trying to figure out what data your program is
    responsible for and how that data comes into the program (input), gets manipulated
    (computation) and is output from the program (output). In fact, this task is so
    important that we had you do this at the beginning of the chapter.</p> <p>After
    identifying the data your program must keep track of, the next step is to decide
    what data structures you will use to keep track of this data. Do you need ints,
    lists, or dictionaries, or some other structure entirely? Take a moment to choose
    variable names and data types for each of the piece of data you identified at
    the beginning of the chapter (or that you identify now).</p> <p>Finally, now that
    you have identified our data and the computation that our program needs to perform,
    you are ready to start writing functions. We can start with any function we like–there’s
    no right order as long as we are able to test each function as we write it.</p>
    <p>Our complete program is given below in listing 5.1\. Let’s return to the idea
    of collaborative filtering and examine how this program implements the basic CF
    algorithm we described in section 5.1\. As we described there, the basic idea
    behind collaborative filtering is to try to make predictions about a user by looking
    at data from a number of other users. There are two basic steps to a CF algorithm:</p>
    <ul class="simple"> <li>Find the user (or users) most similar to the current user,</li>
    <li>Make predictions based on what they like.</li> </ul> <a class="reference internal
    image-reference" href="../Images/2Darray.png"><img alt="../Images/2Darray.png"
    class="align-center" src="../Images/2Darray.png" style="width: 600px;"/></a> <p>In
    the code in listing 5.1, these two steps are performed in helper functions called
    in <tt class="docutils literal"><span class="pre">getRecommendations</span></tt>.
    First, <tt class="docutils literal"><span class="pre">findBestUser</span></tt>
    finds and returns the user whose tastes are closest to the current user. Then
    <tt class="docutils literal"><span class="pre">drop</span></tt> returns a list
    of the artists who the best user likes who are not already in the current user’s
    list.</p> <p>Notice that even though the code is relatively short, we have chosen
    to separate the two stages of the algorithm into two separate functions for clarity.
    Generally it is a good idea for each semantic piece of your algorithm to have
    its own function. Notice also that <tt class="docutils literal"><span class="pre">findBestUser</span></tt>
    also relies on a helper function (<tt class="docutils literal"><span class="pre">numMatches</span></tt>),
    which again helps make the specific functionality of each piece of the code more
    clear.</p> <p>One more item that’s new in the code below is the last line:</p>
    <div class="highlight-python"><div class="highlight"><pre><span class="k">if</span>
    <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span
    class="p">:</span> <span class="n">main</span><span class="p">()</span> </pre>
    </div> </div> <p>You will notice that the function <tt class="docutils literal"><span
    class="pre">main</span></tt> implements the main control of the recommendation
    program. We could run our recommendation program by loading this code into the
    Python interpreter and then typing:</p> <div class="highlight-python"><div class="highlight"><pre><span
    class="gp">>>> </span><span class="n">main</span><span class="p">()</span> </pre>
    </div> </div> <p>However, to keep the user from having to type this extra command,
    we include the above line, which tells the program to automatically run the function
    <tt class="docutils literal"><span class="pre">main</span></tt> as soon as the
    code is loaded into the interpreter.</p> <p id="index-15">Finally, you’ll notice
    the variable <tt class="docutils literal"><span class="pre">PREF_FILE</span></tt>
    at the top of the program. This variable is known as a <em>global variable</em>
    because it is accessible to all of the functions in the program. By convention,
    global variable names are often ALL CAPS to distinguish them from local variables
    and parameters. Generally global variables should be avoided, but there are a
    few special cases such as this one where we want to avoid sprinkling a hard-coded
    value (in this case, the name of the file) throughout the program. Using a global
    variable for the filename makes it easy to change in the future.</p> <div class="highlight-python"><div
    class="highlight"><pre><span class="c"># A very simple music recommender system.</span>
    <span class="n">PREF_FILE</span> <span class="o">=</span> <span class="s">"musicrec-store.txt"</span>
    <span class="k">def</span> <span class="nf">loadUsers</span><span class="p">(</span><span
    class="n">fileName</span><span class="p">):</span> <span class="sd">'''''' Reads
    in a file of stored users'' preferences</span> <span class="sd"> stored in the
    file ''fileName''.</span> <span class="sd"> Returns a dictionary containing a
    mapping</span> <span class="sd"> of user names to a list preferred artists</span>
    <span class="sd"> ''''''</span> <span class="nb">file</span> <span class="o">=</span>
    <span class="nb">open</span><span class="p">(</span><span class="n">fileName</span><span
    class="p">,</span> <span class="s">''r''</span><span class="p">)</span> <span
    class="n">userDict</span> <span class="o">=</span> <span class="p">{}</span> <span
    class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span
    class="nb">file</span><span class="p">:</span> <span class="c"># Read and parse
    a single line</span> <span class="p">[</span><span class="n">userName</span><span
    class="p">,</span> <span class="n">bands</span><span class="p">]</span> <span
    class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span
    class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span
    class="s">":"</span><span class="p">)</span> <span class="n">bandList</span> <span
    class="o">=</span> <span class="n">bands</span><span class="o">.</span><span class="n">split</span><span
    class="p">(</span><span class="s">","</span><span class="p">)</span> <span class="n">bandList</span><span
    class="o">.</span><span class="n">sort</span><span class="p">()</span> <span class="n">userDict</span><span
    class="p">[</span><span class="n">userName</span><span class="p">]</span> <span
    class="o">=</span> <span class="n">bandList</span> <span class="nb">file</span><span
    class="o">.</span><span class="n">close</span><span class="p">()</span> <span
    class="k">return</span> <span class="n">userDict</span> <span class="k">def</span>
    <span class="nf">getPreferences</span><span class="p">(</span><span class="n">userName</span><span
    class="p">,</span> <span class="n">userMap</span><span class="p">):</span> <span
    class="sd">'''''' Returns a list of the uesr''s preferred artists.</span> <span
    class="sd"> If the system already knows about the user,</span> <span class="sd">
    it gets the preferences out of the userMap</span> <span class="sd"> dictionary
    and then asks the user if she has</span> <span class="sd"> additional preferences.
    If the user is new,</span> <span class="sd"> it simply asks the user for her preferences.
    ''''''</span> <span class="n">newPref</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">if</span> <span class="n">userName</span> <span class="ow">in</span>
    <span class="n">userMap</span><span class="p">:</span> <span class="n">prefs</span>
    <span class="o">=</span> <span class="n">userMap</span><span class="p">[</span><span
    class="n">userName</span><span class="p">]</span> <span class="k">print</span><span
    class="p">(</span><span class="s">"I see that you have used the system before."</span><span
    class="p">)</span> <span class="k">print</span><span class="p">(</span><span class="s">"Your
    music preferences include:"</span><span class="p">)</span> <span class="k">for</span>
    <span class="n">artist</span> <span class="ow">in</span> <span class="n">prefs</span><span
    class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="n">artist</span><span
    class="p">)</span> <span class="k">print</span><span class="p">(</span><span class="s">"Please
    enter another artist or band that you"</span><span class="p">)</span> <span class="k">print</span><span
    class="p">(</span><span class="s">"like, or just press enter"</span><span class="p">)</span>
    <span class="n">newPref</span> <span class="o">=</span> <span class="nb">input</span><span
    class="p">(</span><span class="s">"to see your recommendations: "</span><span
    class="p">)</span> <span class="k">else</span><span class="p">:</span> <span class="n">prefs</span>
    <span class="o">=</span> <span class="p">[]</span> <span class="k">print</span><span
    class="p">(</span><span class="s">"I see that you are a new user."</span><span
    class="p">)</span> <span class="k">print</span><span class="p">(</span><span class="s">"Please
    enter the name of an artist or band"</span><span class="p">)</span> <span class="n">newPref</span>
    <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span
    class="s">"that you like: "</span> <span class="p">)</span> <span class="k">while</span>
    <span class="n">newPref</span> <span class="o">!=</span> <span class="s">""</span><span
    class="p">:</span> <span class="n">prefs</span><span class="o">.</span><span class="n">append</span><span
    class="p">(</span><span class="n">newPref</span><span class="o">.</span><span
    class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">title</span><span
    class="p">())</span> <span class="k">print</span><span class="p">(</span><span
    class="s">"Please enter another artist or band that you"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"like, or
    just press enter"</span><span class="p">)</span> <span class="n">newPref</span>
    <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span
    class="s">"to see your recommendations: "</span><span class="p">)</span> <span
    class="c"># Always keep the lists in sorted order for ease of</span> <span class="c">#
    comparison</span> <span class="n">prefs</span><span class="o">.</span><span class="n">sort</span><span
    class="p">()</span> <span class="k">return</span> <span class="n">prefs</span>
    <span class="k">def</span> <span class="nf">getRecommendations</span><span class="p">(</span><span
    class="n">currUser</span><span class="p">,</span> <span class="n">prefs</span><span
    class="p">,</span> <span class="n">userMap</span><span class="p">):</span> <span
    class="sd">'''''' Gets recommendations for a user (currUser) based</span> <span
    class="sd"> on the users in userMap (a dictionary)</span> <span class="sd"> and
    the user''s preferences in pref (a list).</span> <span class="sd"> Returns a list
    of recommended artists. ''''''</span> <span class="n">bestUser</span> <span class="o">=</span>
    <span class="n">findBestUser</span><span class="p">(</span><span class="n">currUser</span><span
    class="p">,</span> <span class="n">prefs</span><span class="p">,</span> <span
    class="n">userMap</span><span class="p">)</span> <span class="n">recommendations</span>
    <span class="o">=</span> <span class="n">drop</span><span class="p">(</span><span
    class="n">prefs</span><span class="p">,</span> <span class="n">userMap</span><span
    class="p">[</span><span class="n">bestUser</span><span class="p">])</span> <span
    class="k">return</span> <span class="n">recommendations</span> <span class="k">def</span>
    <span class="nf">findBestUser</span><span class="p">(</span><span class="n">currUser</span><span
    class="p">,</span> <span class="n">prefs</span><span class="p">,</span> <span
    class="n">userMap</span><span class="p">):</span> <span class="sd">'''''' Find
    the user whose tastes are closest to the current</span> <span class="sd"> user.
    Return the best user''s name (a string) ''''''</span> <span class="n">users</span>
    <span class="o">=</span> <span class="n">userMap</span><span class="o">.</span><span
    class="n">keys</span><span class="p">()</span> <span class="n">bestUser</span>
    <span class="o">=</span> <span class="bp">None</span> <span class="n">bestScore</span>
    <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span
    class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span
    class="n">users</span><span class="p">:</span> <span class="n">score</span> <span
    class="o">=</span> <span class="n">numMatches</span><span class="p">(</span><span
    class="n">prefs</span><span class="p">,</span> <span class="n">userMap</span><span
    class="p">[</span><span class="n">user</span><span class="p">])</span> <span class="k">if</span>
    <span class="n">score</span> <span class="o">></span> <span class="n">bestScore</span>
    <span class="ow">and</span> <span class="n">currUser</span> <span class="o">!=</span>
    <span class="n">user</span><span class="p">:</span> <span class="n">bestScore</span>
    <span class="o">=</span> <span class="n">score</span> <span class="n">bestUser</span>
    <span class="o">=</span> <span class="n">user</span> <span class="k">return</span>
    <span class="n">bestUser</span> <span class="k">def</span> <span class="nf">drop</span><span
    class="p">(</span><span class="n">list1</span><span class="p">,</span> <span class="n">list2</span><span
    class="p">):</span> <span class="sd">'''''' Return a new list that contains only
    the elements in</span> <span class="sd"> list2 that were NOT in list1\. ''''''</span>
    <span class="n">list3</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span
    class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">while</span>
    <span class="n">i</span> <span class="o"><</span> <span class="nb">len</span><span
    class="p">(</span><span class="n">list1</span><span class="p">)</span> <span class="ow">and</span>
    <span class="n">j</span> <span class="o"><</span> <span class="nb">len</span><span
    class="p">(</span><span class="n">list2</span><span class="p">):</span> <span
    class="k">if</span> <span class="n">list1</span><span class="p">[</span><span
    class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">list2</span><span
    class="p">[</span><span class="n">j</span><span class="p">]:</span> <span class="n">i</span>
    <span class="o">+=</span> <span class="mi">1</span> <span class="n">j</span> <span
    class="o">+=</span> <span class="mi">1</span> <span class="k">elif</span> <span
    class="n">list1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="o"><</span> <span class="n">list2</span><span class="p">[</span><span
    class="n">j</span><span class="p">]:</span> <span class="n">i</span> <span class="o">+=</span>
    <span class="mi">1</span> <span class="k">else</span><span class="p">:</span>
    <span class="n">list3</span><span class="o">.</span><span class="n">append</span><span
    class="p">(</span><span class="n">list2</span><span class="p">[</span><span class="n">j</span><span
    class="p">])</span> <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">list3</span> <span class="k">def</span>
    <span class="nf">numMatches</span><span class="p">(</span> <span class="n">list1</span><span
    class="p">,</span> <span class="n">list2</span> <span class="p">):</span> <span
    class="sd">'''''' return the number of elements that match between</span> <span
    class="sd"> two sorted lists ''''''</span> <span class="n">matches</span> <span
    class="o">=</span> <span class="mi">0</span> <span class="n">i</span> <span class="o">=</span>
    <span class="mi">0</span> <span class="n">j</span> <span class="o">=</span> <span
    class="mi">0</span> <span class="k">while</span> <span class="n">i</span> <span
    class="o"><</span> <span class="nb">len</span><span class="p">(</span><span class="n">list1</span><span
    class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span
    class="o"><</span> <span class="nb">len</span><span class="p">(</span><span class="n">list2</span><span
    class="p">):</span> <span class="k">if</span> <span class="n">list1</span><span
    class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span>
    <span class="n">list2</span><span class="p">[</span><span class="n">j</span><span
    class="p">]:</span> <span class="n">matches</span> <span class="o">+=</span> <span
    class="mi">1</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span> <span
    class="k">elif</span> <span class="n">list1</span><span class="p">[</span><span
    class="n">i</span><span class="p">]</span> <span class="o"><</span> <span class="n">list2</span><span
    class="p">[</span><span class="n">j</span><span class="p">]:</span> <span class="n">i</span>
    <span class="o">+=</span> <span class="mi">1</span> <span class="k">else</span><span
    class="p">:</span> <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">matches</span> <span class="k">def</span>
    <span class="nf">saveUserPreferences</span><span class="p">(</span><span class="n">userName</span><span
    class="p">,</span> <span class="n">prefs</span><span class="p">,</span> <span
    class="n">userMap</span><span class="p">,</span> <span class="n">fileName</span><span
    class="p">):</span> <span class="sd">'''''' Writes all of the user preferences
    to the file.</span> <span class="sd"> Returns nothing. ''''''</span> <span class="n">userMap</span><span
    class="p">[</span><span class="n">userName</span><span class="p">]</span> <span
    class="o">=</span> <span class="n">prefs</span> <span class="nb">file</span> <span
    class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">fileName</span><span
    class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">for</span>
    <span class="n">user</span> <span class="ow">in</span> <span class="n">userMap</span><span
    class="p">:</span> <span class="n">toSave</span> <span class="o">=</span> <span
    class="nb">str</span><span class="p">(</span><span class="n">user</span><span
    class="p">)</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span>
    <span class="s">","</span><span class="o">.</span><span class="n">join</span><span
    class="p">(</span><span class="n">userMap</span><span class="p">[</span><span
    class="n">user</span><span class="p">])</span> <span class="o">+</span> \ <span
    class="s">"</span><span class="se">\n</span><span class="s">"</span> <span class="nb">file</span><span
    class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">toSave</span><span
    class="p">)</span> <span class="nb">file</span><span class="o">.</span><span class="n">close</span><span
    class="p">()</span> <span class="k">def</span> <span class="nf">main</span><span
    class="p">():</span> <span class="sd">'''''' The main recommendation function
    ''''''</span> <span class="n">userMap</span> <span class="o">=</span> <span class="n">loadUsers</span><span
    class="p">(</span><span class="n">PREF_FILE</span><span class="p">)</span> <span
    class="k">print</span><span class="p">(</span><span class="s">"Welcome to the
    music recommender system!"</span><span class="p">)</span> <span class="n">userName</span>
    <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span
    class="s">"Please enter your name: "</span><span class="p">)</span> <span class="k">print</span>
    <span class="p">(</span><span class="s">"Welcome,"</span><span class="p">,</span>
    <span class="n">userName</span><span class="p">)</span> <span class="n">prefs</span>
    <span class="o">=</span> <span class="n">getPreferences</span><span class="p">(</span><span
    class="n">userName</span><span class="p">,</span> <span class="n">userMap</span><span
    class="p">)</span> <span class="n">recs</span> <span class="o">=</span> <span
    class="n">getRecommendations</span><span class="p">(</span><span class="n">userName</span><span
    class="p">,</span> <span class="n">prefs</span><span class="p">,</span> <span
    class="n">userMap</span><span class="p">)</span> <span class="c"># Print the user''s
    recommendations</span> <span class="k">if</span> <span class="nb">len</span><span
    class="p">(</span><span class="n">recs</span><span class="p">)</span> <span class="o">==</span>
    <span class="mi">0</span><span class="p">:</span> <span class="k">print</span><span
    class="p">(</span><span class="s">"I''m sorry but I have no recommendations"</span><span
    class="p">)</span> <span class="k">print</span><span class="p">(</span><span class="s">"for
    you right now."</span><span class="p">)</span> <span class="k">else</span><span
    class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="n">userName</span><span
    class="p">,</span> <span class="s">"based on the users I currently"</span><span
    class="p">)</span> <span class="k">print</span><span class="p">(</span><span class="s">"know
    about, I believe you might like:"</span><span class="p">)</span> <span class="k">for</span>
    <span class="n">artist</span> <span class="ow">in</span> <span class="n">recs</span><span
    class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="n">artist</span><span
    class="p">)</span> <span class="k">print</span><span class="p">(</span><span class="s">"I
    hope you enjoy them! I will save your"</span><span class="p">)</span> <span class="k">print</span><span
    class="p">(</span><span class="s">"preferred artists and have new"</span><span
    class="p">)</span> <span class="k">print</span><span class="p">(</span><span class="s">"
    recommendations for you in the future"</span><span class="p">)</span> <span class="n">saveUserPreferences</span><span
    class="p">(</span><span class="n">userName</span><span class="p">,</span> <span
    class="n">prefs</span><span class="p">,</span> <span class="n">userMap</span><span
    class="p">,</span> <span class="n">PREF_FILE</span><span class="p">)</span> <span
    class="k">if</span> <span class="n">__name__</span> <span class="o">==</span>
    <span class="s">"__main__"</span><span class="p">:</span> <span class="n">main</span><span
    class="p">()</span> </pre> </div> </div> </div> <div class="section" id="conclusion">
    <h2 id="sigil_toc_id_99">5.8 Conclusion</h2> <p>We’ve covered a lot of ground
    in this chapter, ultimately resulting in a recommender program similar in spirit
    to ones that you undoubtedly use yourself.</p> <div class="figure align-right"
    style="width: 150px"> <img alt="../Images/Alien6.PNG" src="../Images/Alien6.PNG"/>
    <p class="caption"><em>Are there any recommender programs that recommend recommender
    programs?</em></p> </div> <p>We’ve also seen that there are often multiple different
    ways of doing the same thing. For example, recursion, <tt class="docutils literal"><span
    class="pre">for</span></tt> loops, and <tt class="docutils literal"><span class="pre">while</span></tt>
    loops all allow us to repeat a computational task. How do you determine which
    one to use? Some problems are inherently recursive. For example, the edit distance
    problem from Chapter 2 was very naturally suited for recursion because it can
    be solved using solutions to smaller versions of the same problem – the so-called
    “recursive substructure” problem. Other problems, like computing the factorial
    of a number, can be solved naturally – albeit differently – using recursion or
    loops. And then there are cases where loops seem like the best way to do business.
    The fact that there are choices like these to be made is part of what makes designing
    programs fun and challenging.</p> </div> </div> </div> </body></html></textarea>'
  prefs: []
  type: TYPE_NORMAL
