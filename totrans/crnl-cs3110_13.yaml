- en: 'Recitation 8: Functional stacks and queues, dictionaries, fractions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 讲：功能栈和队列、字典、分数
- en: Functional data structures
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能数据结构
- en: In this recitation, we look at examples of structures and signatures that implement
    data structures. We show that stacks and queues can be implemented efficiently
    in a functional style.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个讲座中，我们将看一些实现数据结构的结构和签名的例子。我们将展示堆栈和队列如何以函数式风格高效实现。
- en: 'What is a functional stack, or a functional queue? It is a data structure for
    which the operations do not *change* the data structure, but rather create a new
    data structure, with the appropriate modifications, instead of changing it in-place.
    In imperative languages, data operations generally support *destructive update*
    — “destructive” in the sense that after the update is done, the original data
    structure is gone. Functional abstractions support *nondestructive updates*: the
    original value is still around, unmodified, so code that was using it is unaffected.
    For efficiency, it is important to implement nondestructive updates not by creating
    an entirely new data structure, but by sharing as much as possible with the original
    data structure.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是功能栈，或者功能队列？它是一种数据结构，其操作不会改变数据结构，而是创建一个新的数据结构，具有适当的修改，而不是在原地更改它。在命令式语言中，数据操作通常支持*破坏性更新*
    —— “破坏性”是指更新完成后，原始数据结构消失了。函数抽象支持*非破坏性更新*：原始值仍然存在，未经修改，因此使用它的代码不受影响。为了效率，重要的是通过尽可能与原始数据结构共享来实现非破坏性更新，而不是创建全新的数据结构。
- en: Stacks
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 栈
- en: 'Recall a stack: a last-in first-out (LIFO) queue. Just like lists, the stack
    operations fundamentally do not care about the type of the values stored, so it
    is a naturally polymorphic data structure.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下栈：后进先出（LIFO）队列。就像列表一样，栈操作基本上不关心存储的值的类型，因此它是一种自然的多态数据结构。
- en: 'Here is a possible signature for functional stacks:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '这是功能栈的可能签名：  '
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This signature specifies a parameterized abstract type for stack. Notice the
    type variable `'a`. The signature also specifies the empty stack value, and functions
    to check if a stack is empty, and to perform push, pop and top operations on the
    stack. Moreover, we specify functions map and app to walk over the values of the
    stack.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此签名指定了堆栈的参数化抽象类型。注意类型变量`'a`。该签名还指定了空堆栈值，以及用于检查堆栈是否为空、执行推入、弹出和顶部操作的函数。此外，我们还指定了用于遍历堆栈值的
    map 和 app 函数。
- en: We also declare an exception `EmptyStack` to be raised by top and pop operations
    when the stack is empty.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还声明了一个名为 `EmptyStack` 的异常，在堆栈为空时由 top 和 pop 操作引发。
- en: Here is the simplest implementation of stacks that matches the above signature.
    It is implemented in terms of lists.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是符合上述签名的堆栈的最简实现。它是基于列表实现的。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Up until now, we have been defining exceptions solely in order to raise them
    and interrupt the executing program. Just like in Java, it is also possible to
    catch exceptions, which is termed 'handling an exception' in OCaml.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在定义异常，唯一的目的是为了引发它们并中断执行中的程序。就像在 Java 中一样，也可以捕获异常，这在 OCaml 中被称为“处理异常”。
- en: 'As an example, consider the following example. In the above code, we have implemented
    top and pop respectively as functions that return the first element of the list
    and the rest of the list. OCaml already defines functions to do just that, namely
    `List.hd` and `List.tl` (for head and tail). The function `hd` takes a list as
    argument and returns the first element of the list, or raises the exception `Failure`
    if the list is empty. Similarly for `tl`. One would like to simply be able to
    write in `Stack`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，考虑以下例子。在上述代码中，我们分别将 top 和 pop 实现为函数，这些函数返回列表的第一个元素和列表的其余部分。OCaml 已经定义了可以执行此操作的函数，即
    `List.hd` 和 `List.tl`（分别用于头和尾）。函数 `hd` 接受列表作为参数，并返回列表的第一个元素，如果列表为空，则引发异常 `Failure`。`tl`
    的情况类似。人们希望能够简单地在 `Stack` 中编写：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, if passed an empty stack, `top` and `pop` should raise the `EmptyStack`
    exception. As written above, the exception `Failure` would be raised. What we
    need to do is intercept (or handle) the exception, and raise the right one. Here''s
    one way to do it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果传递一个空栈，`top` 和 `pop` 应该引发 `EmptyStack` 异常。如上所写，将引发 `Failure` 异常。我们需要做的是拦截（或处理）异常，并引发正确的异常。以下是一种方法：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The syntax for handling exceptions is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 处理异常的语法如下：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: where `e` is the expression to evaluate, and if `e` raises an exception that
    matches `exn`, then expression `e'` is evaluated instead. The type of `e` and
    `e'` must be the same.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`e`是要评估的表达式，如果`e`引发与`exn`匹配的异常，那么将评估表达式`e'`。`e`和`e'`的类型必须相同。
- en: Queues
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 队列
- en: 'Let us write an example more interesting than stacks. After all, from the above,
    one can see that they are just lists. Consider the queue data structure, a first-in
    first-out data structure. Again, we consider functional queues. Here is a possible
    signature:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一个比栈更有趣的例子。毕竟，从上面可以看出，它们只是列表。考虑队列数据结构，一种先进先出的数据结构。同样，我们考虑函数式队列。这里是一个可能的签名：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The simplest possible implementation for queues is to represent a queue via
    two stacks: one stack A on which to enqueue elements, and one stack B from which
    to dequeue elements. When dequeuing, if stack B is empty, then we reverse stack
    A and consider it the new stack B.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 队列的最简单的可能实现是通过两个栈来表示一个队列：一个栈A用于入队元素，一个栈B用于出队元素。当出队时，如果栈B为空，则我们反转栈A并将其视为新的栈B。
- en: Here is an implementation for such queues. It uses the stack structure `Stack`,
    which is rebound to the name `S` inside the structure to avoid long identifier
    names.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这样的队列的一个实现。它使用了栈结构`Stack`，在结构内部重新绑定到名称`S`，以避免过长的标识符名称。
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We learned about folding last week. In the above implementation, the stack reversal
    could have been done using fold. However, since the Stack module does not specify
    a fold operation, and the implementation of the Stack as a list is hidden from
    the Queue module, we need something more. The Stack signature should specify a
    fold operation that will help its users to iterate over its elements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上周学习了折叠。在上面的实现中，可以使用折叠来执行栈反转。但是，由于Stack模块没有指定折叠操作，并且将Stack的实现隐藏在Queue模块中，所以我们需要更多。Stack签名应该指定一个折叠操作，以帮助其用户遍历其元素。
- en: Dictionaries
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典
- en: 'A very useful abstraction is a *dictionary*: a mapping from strings to other
    values. A more general dictionary that maps from one arbitrary key type to another
    is usually called a *map* or an *associative array*, although sometimes “dictionary”
    is used for these as well. In any case, the implementation techniques are similar.
    Here''s an interface for dictionaries:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常有用的抽象是*字典*：从字符串到其他值的映射。一个更通用的字典，将一个任意键类型映射到另一个键类型，通常称为*映射*或*关联数组*，尽管有时也使用“字典”这个词。无论如何，实现技术都是相似的。这里是字典的一个接口：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here is an implementation using *association lists* `[(key1, x1); ...; (keyn,
    xn)]`
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用*关联列表* `[(key1, x1); ...; (keyn, xn)]` 的实现
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here's another implementation using higher-order functions as dictionaries.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一种使用高阶函数作为字典的实现。
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This next implementation seems a little better for looking up values. Also note
    that the abstraction function does not need to specify what duplicate keys mean.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个实现似乎更适合查找值。还要注意，抽象函数不需要指定重复键的含义。
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here is another implementation of dictionaries. This one uses a binary tree
    to keep the data. The hope is that inserts or lookups will be proportional to
    log n, where n is the number of items in the tree.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是字典的另一个实现。这个实现使用二叉树来保持数据。希望插入或查找将与log n成比例，其中n是树中项目的数量。
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Fractions
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分数
- en: 'Another simple data type is a fraction, a ratio of two integers. Here is a
    possible interface:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种简单的数据类型是分数，两个整数的比例。这是一个可能的接口：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here's one implementation of fractions -- what can go wrong here?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是分数的一个实现--这里可能出什么问题？
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There are some weaknesses with this implementation. It would probably be better
    to check the denominator. Second, we're not reducing to smallest form. So we could
    overflow faster than we need to. And maybe we don't want to allow negative denominators.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实现存在一些弱点。最好检查分母。其次，我们没有化简到最简形式。因此，我们可能比需要更快地溢出。也许我们不想允许负分母。
- en: 'We should pick a representation invariant that describes how we''re going to
    represent legal fractions. Here is one choice:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该选择一个描述我们将如何表示合法分数的表示不变式。这里是一个选择：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
