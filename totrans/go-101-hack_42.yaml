- en: Processing JSON object
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理JSON对象
- en: Processing JSON object
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理JSON对象
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[JSON](http://www.json.org/) is a commonly used and powerful data-interchange
    format, and `Go` provides a built-in [json](https://golang.org/pkg/encoding/json/)
    package to handle it. Let'' see the following example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[JSON](http://www.json.org/)是一种常用且强大的数据交换格式，`Go`提供了内置的[json](https://golang.org/pkg/encoding/json/)包来处理它。让我们看下面的示例：'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And the execution result is shown as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 执行结果如下所示：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The [Marshal](https://golang.org/pkg/encoding/json/#Marshal) function is used
    to serialize an interface into a `JSON` object. In our example, it encodes a `People`
    struct:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Marshal](https://golang.org/pkg/encoding/json/#Marshal)函数用于将接口序列化为`JSON`对象。在我们的示例中，它对`People`结构进行编码：'
- en: '(1) The `Name` member is encoded as our expectation:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: (1) `Name`成员按我们的期望进行编码：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (2) Where is the `age` field? We can't find it in our result. The cause is only
    exported members of struct can be marshaled, so that means only the name whose
    first letter capitalized can be encoded into `JSON` object (In our example, you
    should use `Age` instead of `age`).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: (2) `age`字段在哪里？我们在结果中找不到它。原因是只有结构体的导出成员才能被编码，这意味着只有首字母大写的名称才能被编码为`JSON`对象（在我们的示例中，应该使用`Age`而不是`age`）。
- en: '(3) The name of `Career` field is `career`, not `Career`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: (3) `Career`字段的名称是`career`，而不是`Career`：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'That''s because the following tag: `json:"career"`, which tells the `Marshal`
    function to use `career` in the `JSON` object.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于以下标签：`json:"career"`，告诉`Marshal`函数在`JSON`对象中使用`career`。
- en: (4) We also can't see `Married` in the result although it has been exported,
    the magic behind is the `json:",omitempty"` tag which tells `Marshal` function
    no need to encode this member if it uses the default value.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: (4) 尽管`Married`已经被导出，但在结果中我们也看不到它，这背后的魔法是`json:",omitempty"`标签告诉`Marshal`函数如果使用默认值则不需要对该成员进行编码。
- en: 'There is another [Unmarshal](https://golang.org/pkg/encoding/json/#Unmarshal)
    function which is used to parse a `JSON` object. See the following example which
    extends from the above one:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个[Unmarshal](https://golang.org/pkg/encoding/json/#Unmarshal)函数，用于解析`JSON`对象。看下面的示例，它是基于上面的示例扩展的：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The running result is like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 运行结果如下：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can see the `JSON` object is decoded successfully.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`JSON`对象成功解码。
- en: 'Besides `Marshal` and `Unmarshal` functions, the `json` package also provides
    [Encoder](https://golang.org/pkg/encoding/json/#Encoder) and [Decoder](https://golang.org/pkg/encoding/json/#Decoder)
    structs which are used to process `JSON` object from stream. E.g., It is not uncommon
    to see code which handle `HTTP` likes this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`Marshal`和`Unmarshal`函数外，`json`包还提供了[Encoder](https://golang.org/pkg/encoding/json/#Encoder)和[Decoder](https://golang.org/pkg/encoding/json/#Decoder)结构体，用于处理来自流的`JSON`对象。例如，处理`HTTP`的代码通常如下：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Because the mechanism of both methods are similar, it is not necessary to overtalk
    `Encoder` and `Decoder` here.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这两种方法的机制相似，这里不必过多讨论`Encoder`和`Decoder`。
- en: 'References:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料：
- en: '[Package json](https://golang.org/pkg/encoding/json/);'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[Package json](https://golang.org/pkg/encoding/json/)；'
- en: '[The Go Programming Language](http://www.gopl.io/).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go语言编程](http://www.gopl.io/)。'
