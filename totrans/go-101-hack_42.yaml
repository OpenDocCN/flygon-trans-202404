- en: Processing JSON object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Processing JSON object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[JSON](http://www.json.org/) is a commonly used and powerful data-interchange
    format, and `Go` provides a built-in [json](https://golang.org/pkg/encoding/json/)
    package to handle it. Let'' see the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And the execution result is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The [Marshal](https://golang.org/pkg/encoding/json/#Marshal) function is used
    to serialize an interface into a `JSON` object. In our example, it encodes a `People`
    struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '(1) The `Name` member is encoded as our expectation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: (2) Where is the `age` field? We can't find it in our result. The cause is only
    exported members of struct can be marshaled, so that means only the name whose
    first letter capitalized can be encoded into `JSON` object (In our example, you
    should use `Age` instead of `age`).
  prefs: []
  type: TYPE_NORMAL
- en: '(3) The name of `Career` field is `career`, not `Career`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s because the following tag: `json:"career"`, which tells the `Marshal`
    function to use `career` in the `JSON` object.'
  prefs: []
  type: TYPE_NORMAL
- en: (4) We also can't see `Married` in the result although it has been exported,
    the magic behind is the `json:",omitempty"` tag which tells `Marshal` function
    no need to encode this member if it uses the default value.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is another [Unmarshal](https://golang.org/pkg/encoding/json/#Unmarshal)
    function which is used to parse a `JSON` object. See the following example which
    extends from the above one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The running result is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We can see the `JSON` object is decoded successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides `Marshal` and `Unmarshal` functions, the `json` package also provides
    [Encoder](https://golang.org/pkg/encoding/json/#Encoder) and [Decoder](https://golang.org/pkg/encoding/json/#Decoder)
    structs which are used to process `JSON` object from stream. E.g., It is not uncommon
    to see code which handle `HTTP` likes this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Because the mechanism of both methods are similar, it is not necessary to overtalk
    `Encoder` and `Decoder` here.
  prefs: []
  type: TYPE_NORMAL
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Package json](https://golang.org/pkg/encoding/json/);'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Go Programming Language](http://www.gopl.io/).'
  prefs: []
  type: TYPE_NORMAL
