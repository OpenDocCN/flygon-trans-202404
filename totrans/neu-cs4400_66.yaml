- en: Compilation and Partial EvaluationTuesday, February 28th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和部分求值星期二，2月28日
- en: 'Instead of interpreting an expression, which is performing a full evaluation,
    we can think about *compiling* it: translating it to a different language which
    we can later run more easily, more efficiently, on more platforms, etc. Another
    feature that is usually associated with compilation is that a lot more work was
    done at the compilation stage, making the actual running of the code faster.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与其解释一个表达式，即执行完整的评估，我们可以考虑 *编译* 它：将其转换为另一种我们可以更容易、更高效地运行的语言，更多地在更多平台上等等。通常与编译相关的另一个特性是在编译阶段做了更多的工作，使得实际运行代码更快。
- en: For example, translating an AST into one that has de-Bruijn indexes instead
    of identifier names is a form of compilation — not only is it translating one
    language into another, it does the work involved in name lookup before the program
    starts running.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将 AST 转换为具有 de-Bruijn 索引而不是标识符名称的 AST 是一种编译形式——它不仅将一种语言翻译成另一种语言，还在程序开始运行之前执行了名称查找所涉及的工作。
- en: 'This is something that we can experiment with now. An easy way to achieve this
    is to start with our evaluation function:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以尝试一下这个。实现这一点的简单方法是从我们的评估函数开始：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: and change it so it compiles a given expression to a Racket function. (This
    is, of course, just to demonstrate a conceptual point, it is only the tip of what
    compilers actually do…) This means that we need to turn it into a function that
    receives a TOY expression and compiles it. In other words, `eval` no longer consumes
    and environment argument which makes sense because the environment is a place
    to hold run-time values, so it is a data structure that is not part of the compiler
    (it is usually represented as the call stack).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其更改为将给定表达式编译为 Racket 函数。（当然，这只是为了演示一个概念上的点，它只是编译器实际执行的一部分……）这意味着我们需要将其转换为一个接收
    TOY 表达式并将其编译的函数。换句话说，`eval` 不再消耗环境参数，这是有道理的，因为环境是保存运行时值的地方，因此它是编译器的一部分，不是编译器的一部分（通常表示为调用堆栈）。
- en: 'So we split the two arguments into a compile-time and run-time, which can be
    done by simply currying the `eval` function — here this is done, and all calls
    to `eval` are also curried:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将两个参数分成了编译时和运行时，只需简单地对 `eval` 函数进行柯里化即可——在这里已经完成了此操作，并且所有对 `eval` 的调用也已经被柯里化：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also need to change the `eval` call in the main `run` function:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更改主要的 `run` 函数中的 `eval` 调用：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Not much has changed so far.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，几乎没有太大变化。
- en: 'Note that in the general case of a compiler we need to run a program several
    times, so we’d want to avoid parsing it over and over again. We can do that by
    keeping a single parsed AST of the input. Now we went one step further by making
    it possible to do more work ahead and keep the result of the first “stage” of
    eval around (except that “more work” is really not saying much at the moment):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在编译器的一般情况下，我们需要运行程序多次，所以我们希望避免一遍又一遍地解析它。我们可以通过保持输入的单个解析的 AST 来实现这一点。现在我们更进一步，使得可以提前做更多的工作并保留第一阶段的评估结果（尽管“更多工作”目前真的不是什么了不起的事）：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'At this point, even though our “compiler” is not much more than a slightly
    different representation of the same functionality, we rename `eval` to `compile`
    which is a more appropriate description of what we intend it to do (so we change
    the purpose statement too):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，即使我们的“编译器”不过是同一功能稍微不同的表示形式，我们将 `eval` 重命名为 `compile`，这是对我们打算做的更合适的描述（所以我们也更改了目的说明）：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Not much changed, still. We curried the `eval` function and renamed it to `compile`.
    But when we actually call compile almost nothing happens — all it does is create
    a Racket closure which will do the rest of the work. (And this closure closes
    over the given expression.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 没有太多变化，我们将 `eval` 函数改为柯里化，并将其重命名为 `compile`。但是当我们实际调用编译时，几乎什么都不会发生——它所做的就是创建一个
    Racket 闭包，它将完成其余的工作。（这个闭包会固定给定的表达式。）
- en: Running this “compiled” code is going to be very much like the previous usage
    of `eval`, except a little *slower*, because now every recursive call involves
    calling `compile` to generate a closure, which is then immediately used — so we
    just added some allocations at the recursive call points! (Actually, the extra
    cost is minimal because the Racket compiler will optimize away such immediate
    closure applications.)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个“编译”代码会非常类似于之前使用 `eval` 的用法，只是稍微 *慢 *一点，因为现在每个递归调用都涉及调用 `compile` 来生成一个闭包，然后立即使用它——所以我们只是在递归调用点添加了一些分配！（实际上，额外的成本很小，因为
    Racket 编译器将优化掉这种立即闭包应用。）
- en: Another way to see how this is not really a compiler yet is to consider *when*
    `compile` gets called. A proper compiler is something that does all of its work
    *before* running the code, which means that once it spits out the compiled code
    it shouldn’t be used again (except for compiling other code, of course). Our current
    code is not really a compiler since it breaks this feature. (For example, if GCC
    behaved this way, then it would “compile” files by producing code that invokes
    GCC to compile the next step, which, when run, invokes GCC again, etc.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 说明这不真的是一个编译器的另一种方法是考虑*何时*调用 `compile`。一个正确的编译器是在运行代码之前完成所有工作的东西，这意味着一旦它吐出编译后的代码，它就不应该再次使用（除了编译其他代码，当然）。我们当前的代码并不真的是一个编译器，因为它打破了这个特性。（例如，如果
    GCC 以这种方式行为，那么它将通过产生调用 GCC 来编译下一步的代码的代码来“编译”文件，然后在运行时再次调用 GCC，依此类推。）
- en: 'However, the conceptual change is substantial — we now have a function that
    does its work in two stages — the first part gets an expression and *can* do some
    compile-time work, and the second part does the run-time work, and includes anything
    inside the (lambda (env) …). The thing is that so far, the code does nothing at
    the compilation stage (remember: only creates a closure). But because we have
    two stages, we can now shift work from the second stage (the run-time) to the
    first (the compile-time).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，概念上的变化是重大的——我们现在有一个分两个阶段完成工作的函数——第一部分获取一个表达式并且*可以*在编译时进行一些工作，第二部分执行运行时的工作，并且包括（lambda
    (env) …）中的任何内容。问题是到目前为止，代码在编译阶段什么也没做（记住：只创建了一个闭包）。但是因为我们有两个阶段，我们现在可以将工作从第二阶段（运行时）转移到第一阶段（编译时）。
- en: 'For example, consider the following simple example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下简单示例：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can do the same thing here — separate `foo` it into two stages using currying,
    and modify `bar` appropriately:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里做同样的事情——使用柯里化将 `foo` 分成两个阶段，并适当修改 `bar`：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now instead of a simple multiplication, lets expand it a little, for example,
    do a case split on common cases where `x` is `0`, `1`, or `2`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，不再简单地进行乘法运算，让我们稍微扩展一下，例如，对 `x` 为 `0`、`1` 或 `2` 的常见情况进行案例分析：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is not much faster, since Racket already optimizes multiplication in a
    similar way.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这并没有快多少，因为 Racket 已经以类似的方式优化了乘法。
- en: 'Now comes the real magic: deciding what branch of the cond to take depends
    *only* on x, so we can `push` the lambda inside:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在真正的魔法来了：决定采取 cond 的哪个分支仅取决于 x，因此我们可以将 lambda 推进：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We just made an improvement — the comparisons for the common cases are now
    done as soon as (foo x) is called, they’re not delayed to when the resulting function
    is used. Now go back to the way this is used in `bar` and make it call `foo` once
    for the given `c`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚做了一点改进——对于常见情况的比较现在在调用 (foo x) 时立即进行，它们不会延迟到使用结果函数时。现在回到在 `bar` 中使用的方式，并让它根据给定的
    `c` 调用一次 `foo`：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now foo-c is generated once, and if `c` happens to be one of the three common
    cases (as in the last expression), we can avoid doing any multiplication. (And
    if we hit the default case, then we’re doing the same thing we did before.)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 foo-c 只生成一次，如果 `c` 恰好是三种常见情况之一（如最后一个表达式中所示），我们可以避免进行任何乘法运算。（如果我们遇到默认情况，则与之前执行的操作相同。）
- en: '[However, the result runs a little slower! The reason is that dealing with
    functions can have a higher cost when the compiler cannot “simplify closures away”
    — and this is what happens in the last version. The additional overhead is much
    higher than the multiplication we save (the Racket compiler inlines multiplications,
    so their cost is close to just executing a single machine-code instruction).]'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[然而，结果运行速度稍慢！原因是当编译器无法“简化闭包”时处理函数会产生更高的成本——这正是最后一个版本中发生的情况。额外的开销远高于我们节省的乘法（Racket
    编译器内联了乘法，因此它们的成本接近于执行单个机器码指令）。]'
- en: 'Here is another useful example that demonstrates this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是另一个有用的例子，演示了这一点：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '(Question: when can you do that?)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: （问题：你什么时候能做到这一点？）
- en: This is not unique to Racket, it can happen in any language. Racket (or any
    language with first class function values) only makes it easy to create a local
    function that is specialized for the flag.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是 Racket 特有的，它可以发生在任何语言中。Racket（或任何具有一级函数值的语言）只是使得创建一个专门用于标志的本地函数变得容易。
- en: '* * *'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
