- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this laboratory assignment, we will be exploring two key ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: The simulation of a world in which objects are characterized by a set of state
    variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of **message passing** as a programming technique for modularizing worlds
    in which objects interact.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object-oriented programming is becoming an extremely popular methodology for
    any application that involves interactions among computational entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: Operating systems (processes as objects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows systems (windows as objects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Games (asteroids, spaceships, gorillas as objects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing programs (shapes as objects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start, copy the necessary files for the project into your directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '| File Name | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1.`obj.scm` | The code for our object-oriented system. |'
  prefs: []
  type: TYPE_TB
- en: '| 2.`adv.scm` | The adventure game program. It contains the definitions of
    the object classes. |'
  prefs: []
  type: TYPE_TB
- en: '| 3.`tables.scm` | An ADT you''ll need for Questions A5 and B4. |'
  prefs: []
  type: TYPE_TB
- en: '| 4.`adv-world.scm` | The specific instances of the objects (i.e., people,
    places, and things) in the adventure game. |'
  prefs: []
  type: TYPE_TB
- en: '| 5.`small-world.scm` | A smaller, simplified world that you can use for debugging.
    |'
  prefs: []
  type: TYPE_TB
- en: To work on this project, you must load these files into STk in the exact order
    you see in the table above. Load either `adv-world.scm` OR `small-world.scm`,
    but NOT BOTH. The work you are asked to do refers to `adv-world.scm`; `small-world.scm`
    is provided in case you'd prefer to debug some of your procedures in a smaller
    world that may be less complicated to remember and also faster to load.
  prefs: []
  type: TYPE_NORMAL
- en: To load a Scheme file, e.g., `obj.scm`, type
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: into the interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: The reason the adventure game is divided into `adv.scm` and `adv-world.scm`
    is that when you make any changes to the class definitions in `adv.scm`, you may
    need to reload the entire world in order for your changed version to take effect.
    Having two files means that you don't also have to reload the first batch of procedures.
  prefs: []
  type: TYPE_NORMAL
- en: An Intro to the Program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this program there are three main classes: Person, Place, and Thing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples selected from `adv-world.scm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Having constructed this world, we can now interact with it by sending messages
    to objects. Here is a short example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can put objects in the different places, and the people can then take the
    objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can take objects away from other people, but the management is not responsible
    for the consequences... (Too bad this is a fantasy game, and there aren't really
    vending machines in Soda that stock Jolt.)
  prefs: []
  type: TYPE_NORMAL
