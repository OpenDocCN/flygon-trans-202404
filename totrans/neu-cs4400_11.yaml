- en: Simple ParsingTuesday, January 17th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单解析星期二，1 月 17 日
- en: 'On to an implementation of a “parser”:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 进入“解析器”的实现：
- en: Unrelated to what the syntax actually looks like, we want to parse it as soon
    as possible — converting the concrete syntax to an abstract syntax tree.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与语法实际看起来无关，我们希望尽快解析它 — 将具体语法转换为抽象语法树。
- en: 'No matter how we write our syntax:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们如何编写语法：
- en: '`3+4` (infix),'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3+4`（中缀），'
- en: '`3 4 +` (postfix),'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3 4 +`（后缀），'
- en: '`+(3,4)` (prefix with args in parens),'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+(3,4)`（带括号参数的前缀），'
- en: '`(+ 3 4)` (parenthesized prefix),'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(+ 3 4)`（带括号的前缀），'
- en: we always mean the same abstract thing — adding the number `3` and the number
    `4`. The essence of this is basically a tree structure with an addition operation
    as the root and two leaves holding the two numerals.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总是指的是同一个抽象的东西 — 加上数字`3`和数字`4`。这本质上是一个树形结构，其中加法操作是根，两个数字是叶子。
- en: With the right data definition, we can describe this in Racket as the expression
    `(Add (Num 3) (Num 4))` where `Add` and `Num` are constructors of a tree type
    for syntax, or in a C-like language, it could be something like `Add(Num(3),Num(4))`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过正确的数据定义，我们可以在 Racket 中将其描述为表达式`(Add (Num 3) (Num 4))`，其中`Add`和`Num`是用于语法的树类型的构造函数，或者在类似
    C 的语言中，它可能是类似`Add(Num(3),Num(4))`的东西。
- en: 'Similarly, the expression `(3-4)+7` will be described in Racket as the expression:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，表达式`(3-4)+7`在 Racket 中将被描述为表达式：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Important note: “expression” was used in two *different* ways in the above
    — each way corresponds to a different language, and the result of evaluating the
    second “expression” is a Racket value that *represents* the first expression.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：“表达式”在上面以两种*不同*的方式使用 —— 每种方式对应不同的语言，评估第二个“表达式”的结果是一个代表第一个表达式的 Racket 值。
- en: 'To define the data type and the necessary constructors we will use this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义数据类型和必要的构造函数，我们将使用这个：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note — Racket follows the tradition of Lisp which makes syntax issues almost
    negligible — the language we use is almost as if we are using the parse tree directly.
    Actually, it is a very simple syntax for parse trees, one that makes parsing extremely
    easy.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意 —— Racket 遵循 Lisp 的传统，使语法问题几乎可以忽略不计 —— 我们使用的语言几乎就像我们直接使用解析树一样。实际上，这是一种非常简单的解析树语法，使得解析变得极其容易。
- en: '[This has an interesting historical reason… Some Lisp history — *M-expressions*
    vs. *S-expressions*, and the fact that we write code that is isomorphic to an
    AST. Later we will see some of the advantages that we get by doing this. See also
    “*The Evolution of Lisp*”, section 3.5.1 (especially the last sentence).]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[这有一个有趣的历史原因... 一些 Lisp 历史 —— *M-表达式* vs. *S-表达式*，以及我们编写的代码与 AST 同构的事实。稍后我们将看到通过这样做我们获得的一些优势。另请参阅“*Lisp
    的演变*”，第 3.5.1 节（特别是最后一句）。]'
- en: 'To make things very simple, we will use the above fact through a double-level
    approach:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情变得非常简单，我们将通过双层方法利用上述事��：
- en: we first “parse” our language into an intermediate representation — a Racket
    list — this is mostly done by a modified version of Racket’s `read` function that
    uses curly `{}` braces instead of round `()` parens,
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们首先将我们的语言“解析”为一个中间表示 —— 一个 Racket 列表 —— 这主要是通过一个修改版的 Racket 的`read`函数完成的，该函数使用大括号`{}`代替圆括号`()`。
- en: then we write our own `parse` function that will parse the resulting list into
    an instance of the `AE` type — an abstract syntax tree (AST).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们编写自己的`parse`函数，将结果列表解析为`AE`类型的实例 —— 一棵抽象语法树（AST）。
- en: 'This is achieved by the following simple recursive function:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过以下简单的递归函数实现的：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This function is pretty simple, but as our languages grow, they will become
    more verbose and more difficult to write. So, instead, we use a new special form:
    `match`, which is matching a value and binds new identifiers to different parts
    (try it with “Check Syntax”). Re-writing the above code using `match`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数非常简单，但随着我们的语言增长，它们会变得更冗长，更难写。因此，我们使用一个新的特殊形式：`match`，它匹配一个值并将新标识符绑定到不同的部分（尝试使用“检查语法”）。使用`match`重新编写上述代码：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And finally, to make it more uniform, we will combine this with the function
    that parses a string into a sexpr so we can use strings to represent our programs:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了使其更加统一，我们将结合将字符串解析为 sexpr 的函数，以便我们可以使用字符串表示我们的程序：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
