- en: 'Reading 22: Queues and Message-Passing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第22篇阅读：队列和消息传递
- en: Software in 6.005
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.005的软件
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 免受错误的影响 | 易于理解 | 随时准备更改 |'
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 今天正确，未来也正确。 | 与未来的程序员清晰地沟通，包括未来的您。 | 设计以适应未来的变化而无需重写。 |'
- en: Objectives
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标
- en: After reading the notes and examining the code for this class, you should be
    able to use message passing (with synchronous queues) instead of shared memory
    for communication between threads.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完这节课的笔记并查看代码后，您应该能够使用消息传递（带同步队列）而不是共享内存来进行线程间通信。
- en: Two models for concurrency
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发的两种模型
- en: 'In our introduction to concurrency, we saw [two models for concurrent programming](../19-concurrency/#two_models_for_concurrent_programming):
    *shared memory* and *message passing*.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的并发简介中，我们看到[并发编程的两种模型](../19-concurrency/#two_models_for_concurrent_programming)：*共享内存*和*消息传递*。
- en: '![multiprocessor shared memory](../Images/af60d69115ee7ed53c010e71759de601.jpg)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![多处理器共享内存](../Images/af60d69115ee7ed53c010e71759de601.jpg)'
- en: In the **shared memory** model, concurrent modules interact by reading and writing
    shared mutable objects in memory. Creating multiple threads inside a single Java
    process is our primary example of shared-memory concurrency.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在**共享内存**模型中，并发模块通过在内存中读取和写入共享的可变对象来交互。在单个Java进程中创建多个线程是我们共享内存并发的主要示例。
- en: 'In the **message passing** model, concurrent modules interact by sending immutable
    messages to one another over a communication channel. We’ve had one example of
    message passing so far: the [client/server pattern](../21-sockets-networking/#clientserver_design_pattern),
    in which clients and servers are concurrent processes, often on different machines,
    and the communication channel is a [network socket](../21-sockets-networking/#network_sockets).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**消息传递**模型中，并发模块通过在通信通道上相互发送不可变消息来交互。到目前为止，我们只有一个消息传递的例子：[客户端/服务器模式](../21-sockets-networking/#clientserver_design_pattern)，其中客户端和服务器是并发进程，通常在不同的计算机上，通信通道是一个[网络套接字](../21-sockets-networking/#network_sockets)。
- en: '![network message passing](../Images/33b34e62a8cf01ce8863eb1ac8e9f06c.jpg)'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![网络消息传递](../Images/33b34e62a8cf01ce8863eb1ac8e9f06c.jpg)'
- en: The message passing model has several advantages over the shared memory model,
    which boil down to greater safety from bugs. In message-passing, concurrent modules
    interact *explicitly*, by passing messages through the communication channel,
    rather than *implicitly* through mutation of shared data. The implicit interaction
    of shared memory can too easily lead to *inadvertent* interaction, sharing and
    manipulating data in parts of the program that don’t know they’re concurrent and
    aren’t cooperating properly in the thread safety strategy. Message passing also
    shares only immutable objects (the messages) between modules, whereas shared memory
    *requires* sharing mutable objects, which we have already seen can be [a source
    of bugs](../09-immutability/#risks_of_mutation).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 消息传递模型相对于共享内存模型有几个优点，这些优点归结为对错误的更大安全性。在消息传递中，通过通过通信通道传递消息，而不是通过共享数据的突变来进行*显式*交互。共享内存的隐式交互太容易导致*无意的*交互，在程序的某些部分共享和操作数据，而这些部分并不知道它们是并发的，并且在线程安全策略中没有适当地合作。消息传递还仅在模块之间共享不可变对象（消息），而共享内存*需要*共享可变对象，我们已经看到这可能是[错误的来源](../09-immutability/#risks_of_mutation)。
- en: We’ll discuss in this reading how to implement message passing within a single
    process, as opposed to between processes over the network. We’ll use **blocking
    queues** (an existing threadsafe type) to implement message passing between threads
    within a process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇阅读中，我们将讨论如何在单个进程内实现消息传递，而不是在网络上的进程之间。我们将使用**阻塞队列**（一种现有的线程安全类型）来在进程内的线程之间实现消息传递。
- en: Message passing with threads
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带线程的消息传递
- en: 'We’ve previously talked about message passing between processes: [clients and
    servers communicating over network sockets](../21-sockets-networking/#network_sockets).
    We can also use message passing between threads within the same process, and this
    design is often preferable to a shared memory design with locks, which we’ll talk
    about in the next reading.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经讨论过进程之间的消息传递：[客户端和服务器通过网络套接字进行通信](../21-sockets-networking/#network_sockets)。我们也可以在同一个进程内的线程之间使用消息传递，这种设计通常比使用锁的共享内存设计更可取，关于锁我们将在下一篇阅读中讨论。
- en: 'Use a synchronized queue for message passing between threads. The queue serves
    the same function as the buffered network communication channel in client/server
    message passing. Java provides the [`BlockingQueue`](http://docs.oracle.com/javase/8/docs/api/?java/util/concurrent/BlockingQueue.html)
    interface for queues with blocking operations:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用同步队列进行线程之间的消息传递。队列的功能与客户端/服务器消息传递中的缓冲网络通信通道相同。Java为具有阻塞操作的队列提供了[`BlockingQueue`](http://docs.oracle.com/javase/8/docs/api/?java/util/concurrent/BlockingQueue.html)接口：
- en: 'In an ordinary [`Queue`](http://docs.oracle.com/javase/8/docs/api/?java/util/Queue.html):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在普通的[`Queue`](http://docs.oracle.com/javase/8/docs/api/?java/util/Queue.html)中：
- en: '`add(e)` adds element `e` to the end of the queue.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add(e)`将元素`e`添加到队列的末尾。'
- en: '`remove()` removes and returns the element at the head of the queue, or throws
    an exception if the queue is empty.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove()`移除并返回队列头部的元素，如果队列为空则抛出异常。'
- en: 'A [`BlockingQueue`](http://docs.oracle.com/javase/8/docs/api/?java/util/concurrent/BlockingQueue.html)
    extends this interface:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BlockingQueue`](http://docs.oracle.com/javase/8/docs/api/?java/util/concurrent/BlockingQueue.html)扩展了此接口：'
- en: additionally supports operations that wait for the queue to become non-empty
    when retrieving an element, and wait for space to become available in the queue
    when storing an element.
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此外，它支持在检索元素时等待队列变为非空，并在存储元素时等待队列中有可用空间。
- en: '**`put(e)`** *blocks* until it can add element `e` to the end of the queue
    (if the queue does not have a size bound, `put` will not block).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`put(e)`** *阻塞*，直到可以将元素`e`添加到队列的末尾（如果队列没有大小限制，`put`不会阻塞）。'
- en: '**`take()`** *blocks* until it can remove and return the element at the head
    of the queue, waiting until the queue is non-empty.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`take()`** *阻塞*，直到可以移除并返回队列头部的元素，等待直到队列非空。'
- en: When you are using a `BlockingQueue` for message passing between threads, make
    sure to use the `put()` and `take()` operations, not ~~`add()` and `remove()`~~.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在线程之间进行消息传递时使用`BlockingQueue`，请确保使用`put()`和`take()`操作，而不是 ~~`add()`和`remove()`~~。
- en: '![producer-consumer message passing](../Images/056fd631b9eadd61ee411efad1be4879.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![生产者-消费者消息传递](../Images/056fd631b9eadd61ee411efad1be4879.jpg)'
- en: Analogous to the client/server pattern for message passing over a network is
    the **producer-consumer design pattern** for message passing between threads.
    Producer threads and consumer threads share a synchronized queue. Producers put
    data or requests onto the queue, and consumers remove and process them. One or
    more producers and one or more consumers might all be adding and removing items
    from the same queue. This queue must be safe for concurrency.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与网络消息传递中的客户端/服务器模式类似的是，线程之间的消息传递的**生产者-消费者设计模式**。生产者线程和消费者线程共享一个同步队列。生产者将数据或请求放入队列，而消费者则移除并处理它们。一个或多个生产者和一个或多个消费者可能都在向同一个队列添加和移除项目。这个队列必须对并发操作是安全的。
- en: 'Java provides two implementations of `BlockingQueue`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Java提供了`BlockingQueue`的两种实现：
- en: '[`ArrayBlockingQueue`](http://docs.oracle.com/javase/8/docs/api/?java/util/concurrent/ArrayBlockingQueue.html)
    is a fixed-size queue that uses an array representation. `put`ting a new item
    on the queue will block if the queue is full.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ArrayBlockingQueue`](http://docs.oracle.com/javase/8/docs/api/?java/util/concurrent/ArrayBlockingQueue.html)是使用数组表示的固定大小队列。如果队列已满，则`put`新项目到队列将会阻塞。'
- en: '[`LinkedBlockingQueue`](http://docs.oracle.com/javase/8/docs/api/?java/util/concurrent/LinkedBlockingQueue.html)
    is a growable queue using a linked-list representation. If no maximum capacity
    is specified, the queue will never fill up, so `put` will never block.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LinkedBlockingQueue`](http://docs.oracle.com/javase/8/docs/api/?java/util/concurrent/LinkedBlockingQueue.html)是使用链表表示的可增长队列。如果没有指定最大容量，则队列永远不会填满，因此`put`永远不会阻塞。'
- en: Unlike the streams of bytes sent and received by sockets, these synchronized
    queues (like normal collections classes in Java) can hold objects of an arbitrary
    type. Instead of designing a wire protocol, we must choose or design a type for
    messages in the queue. **It must be an immutable type.** And just as we did with
    operations on a threadsafe ADT or messages in a wire protocol, we must design
    our messages here to prevent race conditions and enable clients to perform the
    atomic operations they need.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与通过套接字发送和接收的字节流不同，这些同步队列（与Java中的普通集合类一样）可以保存任意类型的对象。我们必须选择或设计队列中的消息类型，而不是设计一个线路协议。**它必须是不可变类型。**就像我们在线程安全的ADT或线路协议中的消息上所做的操作一样，我们必须在这里设计我们的消息，以防止竞态条件并使客户能够执行它们需要的原子操作。
- en: Bank account example
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 银行账户示例
- en: '![message passing model for bank accounts](../Images/0637abcca2bf9caaa9c7af280b8c1c88.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![银行账户消息传递模型](../Images/0637abcca2bf9caaa9c7af280b8c1c88.jpg)'
- en: Our first example of message passing was the [bank account example](../19-concurrency/#message_passing_example).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个消息传递示例是[银行账户示例](../19-concurrency/#message_passing_example)。
- en: Each cash machine and each account is its own module, and modules interact by
    sending messages to one another. Incoming messages arrive on a queue.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每个取款机和每个账户都是独立的模块，模块之间通过发送消息来进行交互。传入的消息会到达队列。
- en: 'We designed messages for `get-balance` and `withdraw`, and said that each cash
    machine checks the account balance before withdrawing to prevent overdrafts:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`get-balance`和`withdraw`设计了消息，并说每个取款机在取款之前都会检查账户余额，以防止透支：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But it is still possible to interleave messages from two cash machines so they
    are both fooled into thinking they can safely withdraw the last dollar from an
    account with only $1 in it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但是仍然有可能交错两个取款机的消息，使它们都被欺骗以为可以安全地从只有1美元的账户中提取最后1美元。
- en: 'We need to choose a better atomic operation: `withdraw-if-sufficient-funds`
    would be a better operation than just `withdraw`.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要选择一个更好的原子操作：`withdraw-if-sufficient-funds`比仅仅`withdraw`更好。
- en: Implementing message passing with queues
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用队列实现消息传递
- en: 'You can see all the code for this example on GitHub: [**squarer example**](https://github.com/mit6005/fa16-ex22-square).
    All the relevant parts are excerpted below.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上查看此示例的所有代码：[**平方器示例**](https://github.com/mit6005/fa16-ex22-square)。以下是所有相关部分的摘录。
- en: 'Here’s a message passing module for squaring integers:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于平方整数的消息传递模块：
- en: '[`SquareQueue.java` line 6](https://github.com/mit6005/fa16-ex22-square/blob/master/src/square/SquareQueue.java#L6-L46)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SquareQueue.java` 第 6 行](https://github.com/mit6005/fa16-ex22-square/blob/master/src/square/SquareQueue.java#L6-L46)'
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Incoming messages to the `Squarer` are integers; the squarer knows that its
    job is to square those numbers, so no further details are required.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 传入`Squarer`的消息是整数；平方器知道其任务是对这些数字进行平方，因此不需要进一步的细节。
- en: 'Outgoing messages are instances of `SquareResult`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 传出的消息是`SquareResult`的实例：
- en: '[`SquareQueue.java` line 48](https://github.com/mit6005/fa16-ex22-square/blob/master/src/square/SquareQueue.java#L48-L70)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SquareQueue.java` 第 48 行](https://github.com/mit6005/fa16-ex22-square/blob/master/src/square/SquareQueue.java#L48-L70)'
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We would probably add additional observers to `SquareResult` so clients can
    retrieve the input number and output result.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会为`SquareResult`添加额外的观察者，以便客户端可以检索输入数字和输出结果。
- en: 'Finally, here’s a main method that uses the squarer:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是一个使用平方器的主方法：
- en: '[`SquareQueue.java` line 77](https://github.com/mit6005/fa16-ex22-square/blob/master/src/square/SquareQueue.java#L77-L96)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SquareQueue.java` 第 77 行](https://github.com/mit6005/fa16-ex22-square/blob/master/src/square/SquareQueue.java#L77-L96)'
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It should not surprise us that this code has a very similar flavor to the code
    for implementing message passing with sockets.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码和使用套接字实现消息传递的代码非常相似，这并不奇怪。
- en: reading exercises
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Rep invariant
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表示不变式
- en: Write the rep invariant of `SquareResult`, as an expression that could be used
    in `checkRep()` below. Use the minimum number of characters you can without any
    method calls in your answer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 写出`SquareResult`的表示不变式，作为可以在下面的`checkRep()`中使用的表达式。在你的答案中使用最少数量的字符，不包含任何方法调用。
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (missing answer)Code review
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)代码审查
- en: The code above undergoes a code review and produces the following comments.
    Evaluate the comments.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码经过代码审查并产生以下评论。评估评论。
- en: (missing answer)(missing answer)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: (missing answer)(missing answer)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: (missing answer)(missing answer)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: Stopping
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止
- en: What if we want to shut down the `Squarer` so it is no longer waiting for new
    inputs? In the client/server model, if we want the client or server to stop listening
    for our messages, we close the socket. And if we want the client or server to
    stop altogether, we can quit that process. But here, the squarer is just another
    thread in the *same* process, and we can’t “close” a queue.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要关闭`Squarer`，使其不再等待新的输入，我们该怎么办？在客户端/服务器模型中，如果我们想要客户端或服务器停止监听我们的消息，我们关闭套接字。如果我们想要客户端或服务器停止运行，我们可以退出该进程。但在这里，`Squarer`只是同一进程中的另一个线程，我们无法“关闭”一个队列。
- en: 'One strategy is a *poison pill*: a special message on the queue that signals
    the consumer of that message to end its work. To shut down the squarer, since
    its input messages are merely integers, we would have to choose a magic poison
    integer (everyone knows the square of 0 is 0 right? no one will need to ask for
    the square of 0…) or use null (don’t use null). Instead, we might change the type
    of elements on the requests queue to an ADT:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一种策略是*毒丸*：队列中的特殊消息，表示该消息的消费者应该结束其工作。要关闭方阵器，由于其输入消息仅是整数，我们必须选择一个魔法毒丸整数（每个人都知道0的平方是0对吗？没有人会需要问0的平方…）或使用null（不要使用null）。相反，我们可能会将请求队列上的元素类型更改为ADT：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'with operations:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 带有操作：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: and when we want to stop the squarer, we enqueue a `StopRequest` where `shouldStop`
    returns `true`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要停止方阵器时，我们在队列中排队一个`StopRequest`，其中`shouldStop`返回`true`。
- en: 'For example, in `Squarer.start()`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在`Squarer.start()`中：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It is also possible to *interrupt* a thread by calling its `interrupt()` method.
    If the thread is blocked waiting, the method it’s blocked in will throw an `InterruptedException`
    (that’s why we have to try-catch that exception almost any time we call a blocking
    method). If the thread was not blocked, an *interrupted* flag will be set. The
    thread must check for this flag to see whether it should stop working. For example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过调用其`interrupt()`方法*中断*线程。如果线程被阻塞等待，那么它被阻塞的方法将抛出`InterruptedException`（这就是为什么我们几乎在调用阻塞方法时都必须尝试捕获该异常）。如果线程未被阻塞，则将设置一个*中断*标志。线程必须检查此标志以确定是否应停止工作。例如：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: reading exercises
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Implementing poison pills
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 实现毒丸
- en: 'Using the data type definition above:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述数据类型定义：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For each option below: is the snippet of code a correct outline for how you
    would implement this in Java that takes maximum advantage of static checking?'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下面的每个选项：代码片段是否是以最大程度利用静态检查的正确概要来实现这个Java的？
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: (missing answer)(missing answer)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: (missing answer)(missing answer)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: (missing answer)(missing answer)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Thread safety arguments with message passing
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用消息传递的线程安全性论证
- en: 'A thread safety argument with message passing might rely on:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 带有消息传递的线程安全性论证可能依赖于：
- en: '**Existing threadsafe data types** for the synchronized queue. This queue is
    definitely shared and definitely mutable, so we must ensure it is safe for concurrency.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**现有的线程安全数据类型**用于同步队列。该队列肯定是共享的，肯定是可变的，所以我们必须确保它对并发是安全的。'
- en: '**Immutability** of messages or data that might be accessible to multiple threads
    at the same time.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能同时由多个线程访问的消息或数据的**不可变性**。
- en: '**Confinement** of data to individual producer/consumer threads. Local variables
    used by one producer or consumer are not visible to other threads, which only
    communicate with one another using messages in the queue.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据的**限制**到各个生产者/消费者线程。由一个生产者或消费者使用的局部变量对其他线程不可见，这些线程只能使用队列中的消息进行通信。
- en: '**Confinement** of mutable messages or data that are sent over the queue but
    will only be accessible to one thread at a time. This argument must be carefully
    articulated and implemented. But if one module drops all references to some mutable
    data like a hot potato as soon as it puts them onto a queue to be delivered to
    another thread, only one thread will have access to those data at a time, precluding
    concurrent access.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可变消息或数据的**限制**，这些消息或数据通过队列发送，但一次只能由一个线程访问。这个论点必须仔细阐明和实现。但如果一个模块一旦将可变数据放入队列以便传递给另一个线程，就像热土豆一样立即放弃所有对这些数据的引用，那么一次只有一个线程会访问这些数据，从而排除了并发访问。
- en: In comparison to synchronization, message passing can make it easier for each
    module in a concurrent system to maintain its own thread safety invariants. We
    don’t have to reason about multiple threads accessing shared data if the data
    are instead transferred between modules using a threadsafe communication channel.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 与同步相比，消息传递可以使并发系统中的每个模块更容易地维护其自己的线程安全性不变式。如果数据而不是通过线程安全的通信通道在模块之间传输，我们不必考虑多个线程访问共享数据。
- en: reading exercises
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Message passing
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 消息传递
- en: 'Leif Noad just started a new job working for a stock trading company:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Leif Noad 刚刚开始在一家股票交易公司工作：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What are `TradeWorker`s?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是`TradeWorker`？
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Mistakes were made
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 错误发生了
- en: '[data:text/html,](data:text/html,)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据:text/html,](text/html,)'
- en: Suppose we have several `TradeWorker`s processing trades off the same shared
    queue.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有几个`TradeWorker`处理来自同一个共享队列的交易。
- en: Notice that we are *not using `BlockingQueue`!* Workers call `poll` to retrieve
    items from the queue.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们*没有使用`BlockingQueue`！*工作线程调用`poll`来从队列中检索项目。
- en: '[Javadoc for `Queue.poll()`](http://docs.oracle.com/javase/8/docs/api/java/util/Queue.html#poll--)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Queue.poll()`的Javadoc](http://docs.oracle.com/javase/8/docs/api/java/util/Queue.html#poll--)'
- en: Which of the following can happen?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪种情况可能发生？
- en: (missing answer)(missing answer)(missing answer)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: Rather than synchronize with locks, message passing systems synchronize on a
    shared communication channel, e.g. a stream or a queue.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 而不是使用锁进行同步，消息传递系统在共享通信通道上进行同步，例如流或队列。
- en: Threads communicating with blocking queues is a useful pattern for message passing
    within a single process.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单个进程内，线程之间使用阻塞队列进行通信是一种有用的模式。
