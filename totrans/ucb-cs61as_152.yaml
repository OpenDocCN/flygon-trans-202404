- en: Is Logic Programming Mathematical Logic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑编程是否是数学逻辑
- en: Is Logic Programming Mathematical Logic?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑编程是否是数学逻辑？
- en: 'The means of combination used in the query language may at first seem identical
    to the operations and, or, and not of mathematical logic, and the application
    of query-language rules is in fact accomplished through a legitimate method of
    inference. This identification of the query language with mathematical logic is
    not really valid, though, because the query language provides a control structure
    that interprets the logical statements procedurally. We can often take advantage
    of this control structure. For example, to find all of the supervisors of programmers
    we could formulate a query in either of two logically equivalent forms:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 查询语言中使用的组合方法一开始可能看起来与数学逻辑的操作和，或和非完全相同，而查询语言规则的应用实际上是通过一种合法的推理方法完成的。尽管如此，将查询语言与数学逻辑等同起来并不真正有效，因为查询语言提供了一种解释逻辑语句的控制结构。我们通常可以利用这种控制结构。例如，要查找所有程序员的监督者，我们可以以两种逻辑等价形式之一来制定查询：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: or
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If a company has many more supervisors than programmers (the usual case), it
    is better to use the first form rather than the second because the data base must
    be scanned for each intermediate result (frame) produced by the first clause of
    the and.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一家公司的主管比程序员多得多（通常情况下），最好使用第一种形式而不是第二种形式，因为必须对每个由第一个 and 子句产生的中间结果（帧）进行扫描。
- en: 'The aim of logic programming is to provide the programmer with techniques for
    decomposing a computational problem into two separate problems: "what" is to be
    computed, and "how" this should be computed. This is accomplished by selecting
    a subset of the statements of mathematical logic that is powerful enough to be
    able to describe anything one might want to compute, yet weak enough to have a
    controllable procedural interpretation. The intention here is that, on the one
    hand, a program specified in a logic programming language should be an effective
    program that can be carried out by a computer. Control ("how" to compute) is effected
    by using the order of evaluation of the language. We should be able to arrange
    the order of clauses and the order of subgoals within each clause so that the
    computation is done in an order deemed to be effective and efficient. At the same
    time, we should be able to view the result of the computation ("what" to compute)
    as a simple consequence of the laws of logic.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑编程的目标是为程序员提供将计算问题分解为两个单独问题的技术：“什么”应该计算以及“如何”计算。这是通过选择数学逻辑语句的子集来实现的，这些子集足够强大，可以描述任何人可能想要计算的东西，但足够弱以具有可控的过程性解释。这里的意图是，一方面，在逻辑编程语言中指定的程序应该是一种可以由计算机执行的有效程序。控制（“如何”计算）通过使用语言的评估顺序来实现。我们应该能够安排子句的顺序和每个子句中子目标的顺序，以便计算按照被认为是有效和高效的顺序进行。与此同时，我们应该能够将计算的结果（“什么”计算）视为逻辑法则的简单结果。
- en: 'Our query language can be regarded as just such a procedurally interpretable
    subset of mathematical logic. An assertion represents a simple fact (an atomic
    proposition). A rule represents the implication that the rule conclusion holds
    for those cases where the rule body holds. A rule has a natural procedural interpretation:
    To establish the conclusion of the rule, establish the body of the rule. Rules,
    therefore, specify computations. However, because rules can also be regarded as
    statements of mathematical logic, we can justify any "inference" accomplished
    by a logic program by asserting that the same result could be obtained by working
    entirely within mathematical logic.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的查询语言可以被视为数学逻辑的可过程解释子集。一个断言代表一个简单的事实（一个原子命题）。规则表示规则结论在规则体成立的情况下成立的蕴含关系。规则具有自然的过程性解释：要建立规则的结论，就要建立规则的体。因此，规则指定了计算。然而，由于规则也可以被视为数学逻辑的陈述，我们可以通过断言在数学逻辑中完全工作来证明逻辑程序实现的任何“推理”都是合理的。
- en: Infinite Loops
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无限循环
- en: A consequence of the procedural interpretation of logic programs is that it
    is possible to construct hopelessly inefficient programs for solving certain problems.
    An extreme case of inefficiency occurs when the system falls into infinite loops
    in making deductions. As a simple example, suppose we are setting up a data base
    of famous marriages, including
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑程序的过程性解释的一个结果是，可能构建出解决某些问题的无望低效程序。当系统陷入无限循环进行推断时，效率低下的极端情况发生。作为一个简单的例子，假设我们正在建立一个包括著名婚姻的数据库，其中包括
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we now ask
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在问
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: we will get no response, because the system doesn't know that if A is married
    to B, then B is married to A. So we assert the rule
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得不到任何响应，因为系统不知道如果A与B结婚，那么B也与A结婚。因此，我们断言这个规则。
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: and again query
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查询
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Unfortunately, this will drive the system into an infinite loop, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这将使系统陷入无限循环，如下所示：
- en: The system finds that the married rule is applicable; that is, the rule conclusion
    `(married ?x ?y)` successfully unifies with the query pattern `(married Mickey
    ?who)` to produce a frame in which `?x` is bound to Mickey and `?y` is bound to
    `?who`. So the interpreter proceeds to evaluate the rule body `(married ?y ?x)`
    in this frame -- in effect, to process the query `(married ?who Mickey)`.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统发现适用于结婚规则；也就是说，规则结论`(married ?x ?y)`成功地与查询模式`(married Mickey ?who)`统一，产生一个框架，其中`?x`绑定到Mickey，`?y`绑定到`?who`。因此，解释器继续在这个框架中评估规则主体`(married
    ?y ?x)` -- 实际上，处理查询`(married ?who Mickey)`。
- en: 'One answer appears directly as an assertion in the data base: `(married Minnie
    Mickey).`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个答案直接出现在数据库中作为断言：`(married Minnie Mickey).`
- en: The married rule is also applicable, so the interpreter again evaluates the
    rule body, which this time is equivalent to `(married Mickey ?who)`.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结婚规则也适用，因此解释器再次评估规则主体，这次等效于`(married Mickey ?who)`。
- en: The system is now in an infinite loop. Indeed, whether the system will find
    the simple answer `(married Minnie Mickey)` before it goes into the loop depends
    on implementation details concerning the order in which the system checks the
    items in the data base. This is a very simple example of the kinds of loops that
    can occur. Collections of interrelated rules can lead to loops that are much harder
    to anticipate, and the appearance of a loop can depend on the order of clauses
    in an `and` or on low-level details concerning the order in which the system processes
    queries.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 系统现在陷入无限循环。实际上，系统是否会在陷入循环之前找到简单答案`(married Minnie Mickey)`取决于关于系统检查数据库中项目顺序的实现细节。这是循环可能发生的种类的一个非常简单的例子。相关规则的集合可能导致更难以预料的循环，循环的出现可能取决于`and`子句中的顺序或关于系统处理查询的顺序的低级细节。
- en: Problems with `not`
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`not`存在的问题'
- en: 'Another quirk in the query system concerns `not`. Given the Microshaft data
    base introduced earlier, consider the following two queries:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 查询系统中的另一个怪癖涉及`not`。考虑前面介绍的Microshaft数据库，考虑以下两个查询：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These two queries do not produce the same result. The first query begins by
    finding all entries in the data base that match`(supervisor ?x ?y)`, and then
    filters the resulting frames by removing the ones in which the value of `?x` satisfies`(job
    ?x (computer programmer))`. The second query begins by filtering the incoming
    frames to remove those that can satisfy `(job ?x (computer programmer))`. Since
    the only incoming frame is empty, it checks the data base to see if there are
    any patterns that satisfy `(job ?x (computer programmer))`. Since there generally
    are entries of this form, the not clause filters out the empty frame and returns
    an empty stream of frames. Consequently, the entire compound query returns an
    empty stream.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个查询不会产生相同的结果。第一个查询首先找到与数据库中匹配`(supervisor ?x ?y)`的所有条目，然后通过删除`?x`的值满足`(job
    ?x (computer programmer))`的框架来过滤结果框架。第二个查询首先通过过滤传入的框架来删除可以满足`(job ?x (computer
    programmer))`的框架。由于唯一的传入框架为空，它检查数据库是否有任何满足`(job ?x (computer programmer))`的模式。由于通常存在这种形式的条目，`not`子句过滤掉空框架并返回一个空的框架流。因此，整个复合查询返回一个空的框架流。
- en: The trouble is that our implementation of not really is meant to serve as a
    filter on values for the variables. If a not clause is processed with a frame
    in which some of the variables remain unbound (as does `?x` in the example above),
    the system will produce unexpected results. Similar problems occur with the use
    of `lisp-value` -- the Lisp predicate can't work if some of its arguments are
    unbound.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 麻烦的是，我们对`not`的实现实际上是作为变量的值的过滤器。如果在处理`not`子句时，存在一些变量仍然未绑定（就像上面的示例中的`?x`一样），系统将产生意料之外的结果。类似的问题也会出现在使用`lisp-value`时——如果它的一些参数未绑定，Lisp谓词无法工作。
- en: There is also a much more serious way in which the `not` of the query language
    differs from the not of mathematical logic. In logic, we interpret the statement
    "not P" to mean that P is not true. In the query system, however, "not P" means
    that P is not deducible from the knowledge in the data base. For example, given
    the Microshaft data base, the system would happily deduce all sorts of not statements,
    such as that Ben Bitdiddle is not a baseball fan, that it is not raining outside,
    and that 2 + 2 is not 4.78 In other words, the not of logic programming languages
    reflects the so-called closed world assumption that all relevant information has
    been included in the data base.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 查询语言中的`not`与数学逻辑中的`not`有一种更严重的区别。在逻辑中，我们解释语句“not P”表示P不是真的。然而，在查询系统中，“not P”意味着从数据库的知识中无法推导出P。例如，给定Microshaft数据库，系统会愉快地推导出各种`not`语句，比如Ben
    Bitdiddle不是棒球迷，外面不下雨，以及2 + 2不等于4.78。换句话说，逻辑编程语言中的`not`反映了所谓的封闭世界假设，即所有相关信息都已包含在数据库中。
- en: Takeaways
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'In this subsection, you learned:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个小节中，你学到了：
- en: Logical programming is a procedurally interpretable subset of mathematical logic.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑编程是数学逻辑的一个可过程解释的子集。
- en: 'There are pitfalls: loops and `not`.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在一些陷阱：循环和`not`。
