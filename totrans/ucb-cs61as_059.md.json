["```\ninstall-htdp \n```", "```\n(define wave2 (beside wave-painter (flip-vert wave-painter)))\n(define wave4 (below wave2 wave2)) \n```", "```\n(define (flipped-pairs painter)\n  (let ((painter2 (beside painter (flip-vert painter))))\n    (below painter2 painter2))) \n```", "```\n(define wave4 (flipped-pairs wave)) \n```", "```\n(define (right-split painter n)\n  (if (= n 0)\n      painter\n      (let ((smaller (right-split painter (- n 1))))\n        (beside painter (below smaller smaller))))) \n```", "```\n(define (corner-split painter n)\n  (if (= n 0)\n      painter\n      (let ((up (up-split painter (- n 1)))\n            (right (right-split painter (- n 1))))\n        (let ((top-left (beside up up))\n              (bottom-right (below right right))\n              (corner (corner-split painter (- n 1))))\n          (beside (below painter top-left)\n                  (below bottom-right corner)))))) \n```", "```\n(define (square-limit painter n)\n  (let ((quarter (corner-split painter n)))\n    (let ((half (beside (flip-horiz quarter) quarter)))\n      (below (flip-vert half) half)))) \n```", "```\n(define (right-split painter n)\n  (if (= n 0)\n      painter\n      (let ((smaller (right-split painter (- n 1))))\n        (beside painter (below smaller smaller))))) \n```", "```\n(define (square-of-four tl tr bl br)\n  (lambda (painter)\n    (let ((top (beside (tl painter) (tr painter)))\n          (bottom (beside (bl painter) (br painter))))\n      (below bottom top)))) \n```", "```\n(define (flipped-pairs painter)\n  (let ((combine4 (square-of-four identity flip-vert\n                                  identity flip-vert)))\n    (combine4 painter))) \n```", "```\n(define (square-limit painter n)\n  (let ((combine4 (square-of-four flip-horiz identity\n                                  rotate180 flip-vert)))\n    (combine4 (corner-split painter n)))) \n```", "```\n(define right-split (split beside below))\n(define up-split (split below beside)) \n```", "```\n(define (frame-coord-map frame)\n  (lambda (v)\n    (add-vect\n     (origin-frame frame)\n     (add-vect (scale-vect (xcor-vect v)\n                           (edge1-frame frame))\n               (scale-vect (ycor-vect v)\n                           (edge2-frame frame)))))) \n```", "```\n((frame-coord-map a-frame) (make-vect 0 0)) \n```", "```\n(origin-frame a-frame) \n```", "```\n(define (make-frame origin edge1 edge2)\n  (list origin edge1 edge2))\n\n(define (make-frame-2 origin edge1 edge2)\n  (cons origin (cons edge1 edge2))) \n```", "```\n(define (segments->painter segment-list)\n  (lambda (frame)\n    (for-each\n     (lambda (segment)\n       (draw-line\n        ((frame-coord-map frame) (start-segment segment))\n        ((frame-coord-map frame) (end-segment segment))))\n     segment-list))) \n```", "```\n(define diag-painter\n  (segments->painter\n   (list (make-segment (make-vect 1 0) (make-vect 0 1))))) \n```", "```\nracket -it picture.rkt \n```", "```\n(cs) \n```", "```\n(x-painter full-frame) \n```", "```\n(define (transform-painter painter origin corner1 corner2)\n  (lambda (frame)\n    (let ((m (frame-coord-map frame)))\n      (let ((new-origin (m origin)))\n        (painter\n         (make-frame new-origin\n                     (sub-vect (m corner1) new-origin)\n                     (sub-vect (m corner2) new-origin))))))) \n```", "```\n(define (flip-vert painter)\n  (transform-painter painter\n                     (make-vect 0.0 1.0)   ; new origin\n                     (make-vect 1.0 1.0)   ; new end of edge1\n                     (make-vect 0.0 0.0))) ; new end of edge2 \n```", "```\n(define (shrink-to-upper-right painter)\n  (transform-painter painter\n                     (make-vect 0.5 0.5)\n                     (make-vect 1.0 0.5)\n                     (make-vect 0.5 1.0))) \n```", "```\n(define (rotate90 painter)\n  (transform-painter painter\n                     (make-vect 1.0 0.0)\n                     (make-vect 1.0 1.0)\n                     (make-vect 0.0 0.0))) \n```", "```\n(define (squash-inwards painter)\n  (transform-painter painter\n                     (make-vect 0.0 0.0)\n                     (make-vect 0.65 0.35)\n                     (make-vect 0.35 0.65))) \n```", "```\n(define (beside painter1 painter2)\n  (let ((split-point (make-vect 0.5 0.0)))\n    (let ((paint-left\n           (transform-painter painter1\n                              (make-vect 0.0 0.0)\n                              split-point\n                              (make-vect 0.0 1.0)))\n          (paint-right\n           (transform-painter painter2\n                              split-point\n                              (make-vect 1.0 0.0)\n                              (make-vect 0.5 1.0))))\n      (lambda (frame)\n        (paint-left frame)\n        (paint-right frame))))) \n```", "```\nsubmit proj2 \n```", "```\n(export \"filename.png\") \n```"]