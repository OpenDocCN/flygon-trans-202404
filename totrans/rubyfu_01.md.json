["```\nrequire 'io/console'\nrows, columns = $stdin.winsize\n# Try this now\nprint \"-\" * (columns/2) + \"\\n\" + (\"|\" + \" \" * (columns/2 -2) + \"|\\n\")* (rows / 2) + \"-\" * (columns/2) + \"\\n\" \n```", "```\nrequire 'readline'\nReadline.get_screen_size \n```", "```\n[ENV['LINES'].to_i, ENV['COLUMNS'].to_i] \n```", "```\n[`tput cols`.to_i , `tput lines`.to_i] \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n# \nrequire 'readline'\n\n# Prevent Ctrl+C for exiting\ntrap('INT', 'SIG_IGN')\n\n# List of commands\nCMDS = [ 'help', 'rubyfu', 'ls', 'pwd', 'exit' ].sort\n\ncompletion = proc { |line| CMDS.grep( /^#{Regexp.escape( line )}/ ) }\n\n# Console Settings\nReadline.completion_proc = completion        # Set completion process\nReadline.completion_append_character = ' '   # Make sure to add a space after completion\n\nwhile line = Readline.readline('-> ', true)\n  puts line unless line.nil? or line.squeeze.empty?\n  break if line =~ /^quit.*/i or line =~ /^exit.*/i\nend \n```", "```\nrequire 'readline'\n\n# Prevent Ctrl+C for exiting\ntrap('INT', 'SIG_IGN')\n\n# List of commands\nCMDS = [ 'help', 'rubyfu', 'ls', 'exit' ].sort\n\ncompletion = \n    proc do |str|\n      case \n      when Readline.line_buffer =~ /help.*/i\n    puts \"Available commands:\\n\" + \"#{CMDS.join(\"\\t\")}\"\n      when Readline.line_buffer =~ /rubyfu.*/i\n    puts \"Rubyfu, where Ruby goes evil!\"\n      when Readline.line_buffer =~ /ls.*/i\n    puts `ls`\n      when Readline.line_buffer =~ /exit.*/i\n    puts 'Exiting..'\n    exit 0\n      else\n    CMDS.grep( /^#{Regexp.escape(str)}/i ) unless str.nil?\n      end\n    end\n\nReadline.completion_proc = completion        # Set completion process\nReadline.completion_append_character = ' '   # Make sure to add a space after completion\n\nwhile line = Readline.readline('-> ', true)  # Start console with character -> and make add_hist = true\n  puts completion.call\n  break if line =~ /^quit.*/i or line =~ /^exit.*/i\nend \n```", "```\nclass String\n  def red; colorize(self, \"\\e[1m\\e[31m\"); end\n  def green; colorize(self, \"\\e[1m\\e[32m\"); end\n  def dark_green; colorize(self, \"\\e[32m\"); end\n  def yellow; colorize(self, \"\\e[1m\\e[33m\"); end\n  def blue; colorize(self, \"\\e[1m\\e[34m\"); end\n  def dark_blue; colorize(self, \"\\e[34m\"); end\n  def purple; colorize(self, \"\\e[35m\"); end\n  def dark_purple; colorize(self, \"\\e[1;35m\"); end\n  def cyan; colorize(self, \"\\e[1;36m\"); end\n  def dark_cyan; colorize(self, \"\\e[36m\"); end\n  def pure; colorize(self, \"\\e[0m\\e[28m\"); end\n  def bold; colorize(self, \"\\e[1m\"); end\n  def colorize(text, color_code) \"#{color_code}#{text}\\e[0m\" end\nend \n```", "```\nputs \"RubyFu\".red\nputs \"RubyFu\".green\nputs \"RubyFu\".yellow.bold \n```", "```\n\\033  [0;  31m\n ^     ^    ^    \n |     |    |\n |     |    |--------------------------------------- [The color number]\n |     |-------------------- [The modifier]            (ends with \"m\")\n |-- [Escaped character]           | 0 - normal                     \n     (you can use \"\\e\")            | 1 - bold\n                                   | 2 - normal again\n                                   | 3 - background color\n                                   | 4 - underline\n                                   | 5 - blinking \n```", "```\ngem install colorize \n```", "```\nrequire 'colorize' \n```", "```\n- Position the Cursor:\n  \\033[<L>;<C>H\n     Or\n  \\033[<L>;<C>f\n  puts the cursor at line L and column C.\n- Move the cursor up N lines:\n  \\033[<N>A\n- Move the cursor down N lines:\n  \\033[<N>B\n- Move the cursor forward N columns:\n  \\033[<N>C\n- Move the cursor backward N columns:\n  \\033[<N>D\n- Clear the screen, move to (0,0):\n  \\033[2J\n- Erase to end of line:\n  \\033[K\n- Save cursor position:\n  \\033[s\n- Restore cursor position:\n  \\033[u \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n(1..3).map do |num|\n  print \"\\rNumber: #{num}\"\n  sleep 0.5\n  print (\"\\033[1B\")    # Move cursor down 1 line \n\n  ('a'..'c').map do |char|\n    print \"\\rCharacter: #{char}\"\n    print  (\"\\e[K\")\n    sleep 0.5\n    print (\"\\033[1B\")    # Move cursor down 1 lines\n\n    ('A'..'C').map do |char1|\n      print \"\\rCapital letters: #{char1}\"\n      print  (\"\\e[K\")\n      sleep 0.3\n    end\n    print (\"\\033[1A\")    # Move curse up 1 line\n\n  end\n\n  print (\"\\033[1A\")    # Move curse up 1 line\nend\n\nprint (\"\\033[2B\")    # Move cursor down 2 lines\n\nputs \"\" \n```", "```\n# KING SABRI | @KINGSABRI\nclass String\n  def mv_up(n=1)\n    cursor(self, \"\\033[#{n}A\")\n  end\n\n  def mv_down(n=1)\n    cursor(self, \"\\033[#{n}B\")\n  end\n\n  def mv_fw(n=1)\n    cursor(self, \"\\033[#{n}C\")\n  end\n\n  def mv_bw(n=1)\n    cursor(self, \"\\033[#{n}D\")\n  end\n\n  def cls_upline\n    cursor(self, \"\\e[K\")\n  end\n\n  def cls\n    # cursor(self, \"\\033[2J\")\n    cursor(self, \"\\e[H\\e[2J\")\n  end\n\n  def save_position\n    cursor(self, \"\\033[s\")\n  end\n\n  def restore_position\n    cursor(self, \"\\033[u\")\n  end\n\n  def cursor(text, position)\n    \"\\r#{position}#{text}\"\n  end\nend \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n# Level 1\n(1..3).map do |num|\n  print \"\\rNumber: #{num}\"\n  sleep 0.7\n  # Level 2\n  ('a'..'c').map do |char|\n      print \"Characters: #{char}\".mv_down\n      sleep 0.5\n      # Level 3\n      ('A'..'C').map do |char1|\n          print \"Capital: #{char1}\".mv_down\n          sleep 0.2\n          print \"\".mv_up\n      end\n      print \"\".mv_up\n  end\n  sleep 0.7\nend\nprint \"\".mv_down 3 \n```", "```\n(1..10).each do |percent|\n  print \"#{percent*10}% complete\\r\"\n  sleep(0.5)\n  print  (\"\\e[K\") # Delete current line\nend\nputs \"Done!\" \n```", "```\n(1..5).to_a.reverse.each do |c|\n  print \"\\rI'll exit after #{c} second(s)\"\n  print \"\\e[K\"\n  sleep 1\nend \n```", "```\n(1..5).to_a.reverse.each do |c|\n  print \"I'll exit after #{c} second\".cls_upline\n  sleep 1\nend\nputs \n```", "```\n\"Rubyfu\".unpack(\"H*\")    #=> [\"527562796675\"] \n```", "```\n'\\x%02x' % \"A\".ord    #=> \"\\\\x41\" \n```", "```\n\"ABCD\".unpack('H*')[0].scan(/../).map {|h| '\\x'+h }.join    #=> \"\\\\x41\\\\x42\\\\x43\\\\x44\" \n```", "```\n\"ABCD\".unpack('C*').map { |c| '\\x%02x' % c }.join    #=> \"\\\\x41\\\\x42\\\\x43\\\\x44\" \n```", "```\n\"ABCD\".split(\"\").map {|h| '\\x'+h.unpack('H*')[0] }*\"\"    #=> \"\\\\x41\\\\x42\\\\x43\\\\x44\" \n```", "```\n\"ABCD\".split(\"\").map {|c|'\\x' + c.ord.to_s(16)}.join    #=> \"\\\\x41\\\\x42\\\\x43\\\\x44\" \n```", "```\n\"ABCD\".split(\"\").map {|c|'\\x' + c.ord.to_s(16)}*\"\"    #=> \"\\\\x41\\\\x42\\\\x43\\\\x44\" \n```", "```\n\"ABCD\".chars.map {|c| '\\x' + c.ord.to_s(16)}*\"\"    #=> \"\\\\x41\\\\x42\\\\x43\\\\x44\" \n```", "```\n\"ABCD\".each_byte.map {|b| b.to_s(16)}.join    #=> \"41424344\" \n```", "```\n\"ABCD\".each_char.map {|c| '\\x'+(c.unpack('H*')[0])}.join    #=> \"\\\\x41\\\\x42\\\\x43\\\\x44\" \n```", "```\n\"ABCD\".chars.map {|c| '\\x%x' % c.ord}.join    #=> \"\\\\x41\\\\x42\\\\x43\\\\x44\" \n```", "```\n[\"41424344\"].pack('H*')    #=> ABCD \n```", "```\n\"41424344\".scan(/../).map { |x| x.hex.chr }.join    #=> ABCD \n```", "```\n\"41424344\".scan(/../).map(&:hex).pack(\"C*\")    #=> ABCD \n```", "```\n>> ip = \"192.168.100.10\"\n=> \"192.168.100.10\"\n>> ip.split(\".\").map {|c| '\\x%02x' % c.to_i}.join \n=> \"\\\\xc0\\\\xa8\\\\x64\\\\x0a\" \n```", "```\nip.split(\".\").map(&:to_i).pack(\"C*\")    #=> \"\\xC0\\xA8d\\n\" \n```", "```\n\"Rubyfu\".reverse \n```", "```\n[0x77d6b141].pack('V') \n```", "```\n[0x77d6b141].pack('V').force_encoding(\"UTF-8\") \n```", "```\n\"Rubyfu\".each_char.map {|c| '\\u' + c.ord.to_s(16).rjust(4, '0')}.join \n```", "```\n\"Rubyfu\".unpack('U*').map{ |i| '\\u' + i.to_s(16).rjust(4, '0') }.join \n```", "```\n\"Rubyfu\".unpack('U*').map{ |i| \"\\\\u00%x\" % i }.join \n```", "```\n\"Rubyfu\".each_char.map {|c| '\\u' + c.ord.to_s(8).rjust(4, '0')}.join \n```", "```\n\"\\u{52 75 62 79 66 75}\" \n```", "```\n[\"RubyFu\"].pack('m0') \n```", "```\nrequire 'base64'\nBase64.encode64 \"RubyFu\" \n```", "```\n\"UnVieUZ1\".unpack('m0') \n```", "```\n Base64.decode64 \"UnVieUZ1\" \n```", "```\nrequire 'uri'\nputs URI.encode 'http://vulnerable.site/search.aspx?txt=\"><script>alert(/Rubyfu/.source)</script>' \n```", "```\nrequire 'uri'\nputs URI.decode \"http://vulnerable.site/search.aspx?txt=%22%3E%3Cscript%3Ealert(/Rubyfu/.source)%3C/script%3E\" \n```", "```\nputs URI.encode_www_form_component 'http://vulnerable.site/search.aspx?txt=\"><script>alert(/Rubyfu/.source)</script>' \n```", "```\nrequire 'cgi'\nCGI.escapeHTML('\"><script>alert(\"Rubyfu!\")</script>') \n```", "```\n&quot;&gt;&lt;script&gt;alert(&quot;Rubyfu!&quot;)&lt;/script&gt; \n```", "```\nrequire 'cgi'\nCGI.unescapeHTML(\"&quot;&gt;&lt;script&gt;alert(&quot;Rubyfu!&quot;)&lt;/script&gt;\") \n```", "```\n\"><script>alert(\"Rubyfu!\")</script> \n```", "```\n# SAML Request \nsaml = \"fZJNT%2BMwEIbvSPwHy%2Fd8tMvHympSdUGISuwS0cCBm%2BtMUwfbk%2FU4zfLvSVMq2Euv45n3fd7xzOb%2FrGE78KTRZXwSp5yBU1hpV2f8ubyLfvJ5fn42I2lNKxZd2Lon%2BNsBBTZMOhLjQ8Y77wRK0iSctEAiKLFa%2FH4Q0zgVrceACg1ny9uMy7rCdaM2%2Bs0BWrtppK2UAdeoVjW2ruq1bevGImcvR6zpHmtJ1MHSUZAuDKU0vY7Si2h6VU5%2BiMuJuLx65az4dPql3SHBKaz1oYnEfVkWUfG4KkeBna7A%2Fxm6M14j1gZihZazBRH4MODcoKPOgl%2BB32kFz08PGd%2BG0JJIkr7v46%2BhRCaEpod17DCRivYZCkmkd4N28B3wfNyrGKP5bws9DS6PKDz%2FMpsl36Tyz%2F%2Fax1jeFmi0emcLY7C%2F8SDD0Z7dobcynHbbV3QVbcZW0TlqQemNhoqzJD%2B4%2Fn8Yw7l8AA%3D%3D\"\n\nrequire 'cgi'\nrequire 'base64'\nrequire 'zlib'\n\ninflated = Base64::decode64(CGI.unescape(saml))\n# You don't need below code if it's not deflated/compressed\nzlib = Zlib::Inflate.new(-Zlib::MAX_WBITS)\nzlib.inflate(inflated) \n```", "```\n\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<samlp:AuthnRequest xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" ID=\\\"agdobjcfikneommfjamdclenjcpcjmgdgbmpgjmo\\\" Version=\\\"2.0\\\" IssueInstant=\\\"2007-04-26T13:51:56Z\\\" ProtocolBinding=\\\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\\\" ProviderName=\\\"google.com\\\" AssertionConsumerServiceURL=\\\"https://www.google.com/a/solweb.no/acs\\\" IsPassive=\\\"true\\\"><saml:Issuer xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">google.com</saml:Issuer><samlp:NameIDPolicy AllowCreate=\\\"true\\\" Format=\\\"urn:oasis:names:tc:SAML:2.0:nameid-format:unspecified\\\" /></samlp:AuthnRequest>\\r\\n\" \n```", "```\nmac = \"ads fs:ad fa:fs:fe: Wind00-0C-29-38-1D-61ows 1100:50:7F:E6:96:20dsfsad fas fa1 3c:77:e6:68:66:e9 f2\" \n```", "```\nmac_regex = /(?:[0-9A-F][0-9A-F][:\\-]){5}[0-9A-F][0-9A-F]/i\nmac.scan mac_regex \n```", "```\n[\"00-0C-29-38-1D-61\", \"00:50:7F:E6:96:20\", \"3c:77:e6:68:66:e9\"] \n```", "```\nip = \"ads fs:ad fa:fs:fe: Wind10.0.4.5ows 11192.168.0.15dsfsad fas fa1 20.555.1.700 f2\" \n```", "```\nipv4_regex = /(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/ \n```", "```\nip.scan ipv4_regex \n```", "```\n[[\"10\", \"0\", \"4\", \"5\"], [\"192\", \"168\", \"0\", \"15\"]] \n```", "```\n ipv6_regex = /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/ \n```", "```\nstring = \"text here http://foo1.example.org/bla1 and http://foo2.example.org/bla2 and here mailto:test@example.com and here also.\" \n```", "```\nstring.scan(/https?:\\/\\/[\\S]+/) \n```", "```\nrequire 'uri'\nURI.extract(string, [\"http\" , \"https\"]) \n```", "```\nrequire 'net/http'\nURI.extract(Net::HTTP.get(URI.parse(\"http://rubyfu.net\")), [\"http\", \"https\"]) \n```", "```\nrequire 'net/http'\nNet::HTTP.get(URI.parse(\"http://rubyfu.net\")).scan(/https?:\\/\\/[\\S]+/) \n```", "```\nemail_regex = /\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\\b/i \n```", "```\nrequire 'net/http'\nNet::HTTP.get(URI.parse(\"http://isemail.info/_system/is_email/test/?all\")).scan(email_regex).uniq \n```", "```\nstring = \"<!DOCTYPE html>\n<html>\n<head>\n<title>Page Title</title>\n</head>\n<body>\n\n<h1>This is a Heading</h1>\n<p>This is another <strong>contents</strong>.</p>\n\n</body>\n</html>\"\n\nputs string.gsub(/<.*?>/,'').strip \n```", "```\nPage Title\n\nThis is a Heading\nThis is another contents. \n```", "```\ndescription : AAAA\ninfo : BBBB\ninfo : CCCC\ninfo : DDDD\nsolution : EEEE\nsolution : FFFF\nreference : GGGG\nreference : HHHH\nsee_also : IIII\nsee_also : JJJJ \n```", "```\n#!/usr/bin/env ruby\n#\n# KING SABRI | @KINGSABRI\n# Usage:\n#   ruby noawk.rb file.txt\n#\n\nfile = File.read(ARGV[0]).split(\"\\n\")\ndef parser(file)\n  hash = {} # Datastore\n  splitter = file.map { |line| line.split(':', 2) }\n  splitter.each do |k, v|\n    k.strip! # remove leading and trailing whitespaces\n    v.strip! # remove leading and trailing whitespaces\n\n    if hash[k]      # if this key exists\n      hash[k] << v  # add this value to the key's array\n    else            # if not\n      hash[k] = [v] # create the new key and add an array contains this value\n    end\n  end\n\n  hash # return the hash\nend\n\nparser(file).each {|k, v| puts \"#{k}:\\t#{v.join(', ')}\"} \n```", "```\nruby -e 'h={};File.read(\"text.txt\").split(\"\\n\").map{|l|l.split(\":\", 2)}.map{|k, v|k.strip!;v.strip!; h[k] ? h[k] << v : h[k] = [v]};h.each {|k, v| puts \"#{k}:\\t#{v.join(\", \")}\"}' \n```", "```\npattern_create = ('Aa0'..'Zz9').to_a.join.each_char.first(500).join \n```", "```\npattern_create = ('Aa0'..'Zz9').to_a.join\npattern_create = pattern_create  * (30000 / 20280.to_f).ceil \n```", "```\npattern_offset = pattern_create.enum_for(:scan , '9Ak0').map {Regexp.last_match.begin(0)} \n```", "```\nputs (0..255).map {|b| ('\\x%02X' % b)} \n```", "```\n(32..126).map {|c| c.chr} \n```", "```\n(32..126).map &:chr \n```"]