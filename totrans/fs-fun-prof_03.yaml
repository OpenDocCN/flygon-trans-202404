- en: Installing and using F#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The F# compiler is a free and open source tool which is available for Windows,
    Mac and Linux (via Mono). Find out more about F# and how to install it at the
    [F# Foundation](http://fsharp.org/).
  prefs: []
  type: TYPE_NORMAL
- en: You can use it with an IDE (Visual Studio, MonoDevelop), or with your favorite
    editor (VS Code and Atom have especially good F# support using [Ionide](http://ionide.io/)),
    or simply as a standalone command line compiler.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to install anything, you can try the [.NET Fiddle](https://dotnetfiddle.net/)
    site, which is an interactive environment where you can explore F# in your web
    browser. You should be able to run most of the code on this site there.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the code examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have F# installed and running, you can follow along with the code samples.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to run the code examples on this site is to type the code into
    an `.FSX` script file, which you can then send to the F# interactive window for
    evaluation. Alternatively you can type the examples directly into the F# interactive
    console window. I would recommend the script file approach for anything other
    than one or two lines.
  prefs: []
  type: TYPE_NORMAL
- en: For the longer examples, the code is downloadable from this website -- the links
    will be in the post.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I would encourage you to play with and modify the examples. If you
    then get compiler errors, do check out the ["troubleshooting F#"](index5.html)
    page, which explains the most common problems, and how to fix them.
  prefs: []
  type: TYPE_NORMAL
- en: Projects and Solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: F# uses exactly the same "projects" and "solutions" model that C# does, so if
    you are familiar with that, you should be able to create an F# executable quite
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: To make a file that will be compiled as part of the project, rather than a script
    file, use the `.fs` extension. `.fsx` files will not be compiled.
  prefs: []
  type: TYPE_NORMAL
- en: 'An F# project does have some major differences from C# though:'
  prefs: []
  type: TYPE_NORMAL
- en: The F# files are organized *linearly*, not in a hierarchy of folders and subfolders.
    In fact, there is no "add new folder" option in an F# project! This is not generally
    a problem, because, unlike C#, an F# file contains more than one class. What might
    be a whole folder of classes in C# might easily be a single file in F#.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *order of the files in the project is very important*: a "later" F# file
    can use the public types defined in an "earlier" F# file, but not the other way
    around. Consequently, you cannot have any circular dependencies between files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can change the order of the files by right-clicking and doing "Move Up"
    or "Move Down". Similarly, when creating a new file, you can choose to "Add Above"
    or "Add Below" an existing file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shell scripts in F#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also use F# as a scripting language, rather than having to compile code
    into an EXE. This is done by using the FSI program, which is not only a console
    but can also be used to run scripts in the same way that you might use Python
    or Powershell.
  prefs: []
  type: TYPE_NORMAL
- en: This is very convenient when you want to quickly create some code without compiling
    it into a full blown application. The F# build automation system ["FAKE"](https://github.com/fsharp/FAKE)
    is an example of how useful this can be.
  prefs: []
  type: TYPE_NORMAL
- en: To see how you can do this yourself, here is a little example script that downloads
    a web page to a local file. First create an FSX script file -- call it "`ShellScriptExample.fsx`"
    -- and paste in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry about how the code works right now. It's pretty crude anyway, and
    a better example would add error handling, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run this script, open a command window in the same directory and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you play with the code on this site, you might want to experiment with creating
    some scripts at the same time.
  prefs: []
  type: TYPE_NORMAL
