- en: Heaps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆
- en: A *min-heap* is a complete binary tree that satisfies the min-heap property,
    which requires that every node is no bigger than its children. (*Max-heaps* are
    defined similarly).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*最小堆*是满足最小堆属性的完全二叉树，该属性要求每个节点都不大于其子节点。（*最大堆*类似地被定义）。'
- en: 'The heap abstraction is defined for any element type that is ordered. For simplicity,
    however, we will work specifically with heaps of `Int`s, described by the type
    `Heap`; we will discuss more general, polymorphic Heap types below. The following
    type signatures define our `Heap` interface:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 堆抽象被定义为任何有序的元素类型。但为了简单起见，我们将专门处理`Int`堆，由类型`Heap`描述；我们将在下面讨论更一般的、多态的堆类型。以下类型签名定义了我们的`Heap`接口：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Heaps as Arrays
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数组作为堆
- en: 'Heaps are often implemented as arrays. Recall the scheme (from Homework 2)
    for ordering nodes in a complete binary tree using breadth-first search:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 堆通常被实现为数组。回顾一下（来自第二次作业）使用广度优先搜索对节点进行排序的方案：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The nodes of a complete binary tree can be stored in breadth-first order in
    an array `a`...
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 完全二叉树的节点可以以广度优先顺序存储在数组`a`中...
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And then navigating the parent and child edges for a node stored in `a[i]`
    is easy:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后导航存储在`a[i]`中的节点的父节点和子节点边很容易：
- en: the parent is stored in `a[(i-1)//2]`,
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 父节点存储在`a[(i-1)//2]`，
- en: the left child (if any) is stored in `a[(2*i)+1]`, and
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左子节点（如果存在）存储在`a[(2*i)+1]`中，
- en: the right child (if any) is stored in `a[(2*i)+2]`.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右子节点（如果存在）存储在`a[(2*i)+2]`中。
- en: In imperative languages, retrieving an arbitrary element in an array takes *O(1)*
    time. In functional languages, purely functional arrays are often implemented
    in terms of balanced search trees, which typically provide *O(log n)* access to
    arbitrary elements.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令式语言中，检索数组中的任意元素需要*O(1)*时间。在函数式语言中，纯函数数组通常是基于平衡搜索树实现的，这些树通常提供对任意元素的*O(log
    n)*访问。
- en: Although we have not yet talked about how to implement balanced search trees,
    we will take as given an implementation of balanced search trees. In Elm, the
    [`Array`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Array) library
    is implemented with a data structure called [Relaxed Radix Trees](http://infoscience.epfl.ch/record/169879/files/RMTrees.pdf),
    which provides near constant-time performance in practice for getting and setting
    arbitrary indices.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们还没有讨论如何实现平衡搜索树，但我们将给出平衡搜索树的实现。在 Elm 中，[`Array`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Array)库是使用一种称为[宽松基数树](http://infoscience.epfl.ch/record/169879/files/RMTrees.pdf)的数据结构实现的，它在实践中提供了接近常数时间的性能，用于获取和设置任意索引。
- en: Internal Representation vs. External Interface
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内部表示 vs. 外部接口
- en: We will make use of the `Array` library (which we will qualify with an `A`)
    to implement the heap abstraction. If we choose to define and export
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用`Array`库（我们将使用`A`修饰）来实现堆抽象。如果我们选择定义和导出
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: then clients of our module will be able to see that we have implemented `Heap`s
    using `Array`s and will have access to the `Array` values that we will use to
    represent `Heap`s. If we wish to hide the representation from clients, we can
    instead define a *new* type
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们模块的客户端将能够看到我们使用数组实现了`Heap`，并且将可以访问我们用来表示`Heap`的`Array`值。如果我们希望将表示隐藏在客户端，我们可以定义一个*新*类型
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'and export only those functions that we want clients to use:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 并且仅导出我们希望客户端使用的那些函数：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Because none of these API functions "reveal" the underlying representation of
    the `Heap` type to the client (there are no functions of type `Heap -> A.Array
    Int`), clients will not be able to manipulate `Heap`s directly with `Array` operators.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这些 API 函数中没有一个“暴露”`Heap`类型的底层表示给客户端（没有类型为`Heap -> A.Array Int`的函数），客户端将无法直接使用`Array`操作符操纵`Heap`。
- en: Creating abstraction boundaries like this facilitate the software engineering
    process, by preventing clients from (intentionally or accidentally) violating
    invariants that the correctness of the module implementation depends on, as well
    as facilitating changes to the implementation by limiting and making explicit
    the boundaries between modules.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这样的抽象边界有助于软件工程过程，防止客户端（有意或无意地）违反模块实现的不变性，以及通过限制和明确模块之间的边界来促进实现的变更。
- en: 'To implement the `Heap` abstraction, we will use the following `Array` operators:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现`Heap`抽象，我们将使用以下`Array`操作符：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `A.push` function creates a new array that is the same as in the input array
    except that it contains an additional element at the end. For convenience, we
    will define an analagous function called `pop` that creates a new array with the
    last element removed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`A.push`函数创建一个新数组，该数组与输入数组相同，只是在末尾包含一个附加元素。 为了方便起见，我们将定义一个名为`pop`的类似函数，该函数创建一个删除了最后一个元素的新数组。'
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will start with the simple operators.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从简单的运算符开始。
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Notice that the definition of `isEmpty` uses pattern matching to, at once,
    deconstruct the argument value and bind the underlying array value to the variable
    `a`. This definition is equivalent to all of the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`isEmpty`的定义使用模式匹配来同时解构参数值并将底层数组值绑定到变量`a`。 这个定义等效于以下所有情况：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Because values of type `Heap` can only be constructed by the `WrapHeap` data
    constructor, we can use patterns in bindings (rather than `case` expressions)
    and be sure that there will be no run-time pattern-match errors.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`Heap`类型的值只能由`WrapHeap`数据构造函数构造，所以我们可以在绑定中使用模式（而不是`case`表达式），并确保不会有运行时模式匹配错误。
- en: The `findMin` implementation is also straightforward.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`findMin`的实现也很简单。'
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Insertion
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 插入
- en: Let's now look at the first non-trivial operator, inserting an `Int` into a
    `Heap`. The idea is to add the element to the next position in the complete binary
    tree (conveniently represented as the last element in the array) and then "bubble"
    or "percolate" the element up the tree until it is no longer bigger than its parent.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看第一个非平凡运算符，将`Int`插入`Heap`。 思想是将元素添加到完全二叉树中的下一个位置（方便地表示为数组中的最后一个元素），然后将元素"冒泡"或"渗透"到树中，直到它不再比其父节点大。
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we manipulate the underlying `Array` representations, we will make sure
    to always access elements within bounds. So we define an "unsafe" version of `get`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们操作底层的`Array`表示时，我们将确保始终在界限内访问元素。 因此，我们定义了`get`的"不安全"版本：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We also define a helper function to swap two elements in an `Array`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了一个辅助函数，用于交换`Array`中的两个元素：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `bubbleUp` function is defined to swap node `i` with its parent node `(i-1)//2`
    if the parent is larger and, if so, recursively traverses up the tree. We use
    the type alias `InternalHeap` to refer to `A.Array Int` within our implementation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`bubbleUp`函数被定义为如果父节点较大则交换节点`i`与其父节点`(i-1)//2`，如果是，则递归地遍历树。 在我们的实现中，我们使用类型别名`InternalHeap`来引用`A.Array
    Int`。'
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let's now consider the worst-case time cost of the insertion algorithm. The
    `insert` function computes the length of the `Array` representation (which runs
    in *O(1)* time, by looking at the documentation and implementation), `push`es
    an element on the end of it (which runs in worst-case *O(log n)* time) and calls
    `bubbleUp`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑插入算法的最坏情况时间成本。 `insert`函数计算`Array`表示的长度（通过查看文档和实现运行在*O(1)*时间内），在其末尾`push`一个元素（在最坏情况下运行在*O(log
    n)*时间内）并调用`bubbleUp`。
- en: The `bubbleUp` function makes use of `justGet` and `swap`. Because `A.get` runs
    in *O(log n)* time, so does the wrapper function `justGet`. The `swap` function
    makes several calls to `A.set` and `justGet`, each of which takes *O(log n)* time.
    Thus, `swap` takes *O(log n)* time. The `bubbleUp` function visits at most *O(log
    n)* elements because the index `i` is divided in half before each recursive call.
    Therefore, there are *O(log n)* calls to `bubbleUp`, each of which performs *O(log
    n)* work. So the running time of `bubbleUp`, and hence `insert`, is *O(log²n)*.
    In an imperative language, where array operations take worst-case *O(1)* time,
    the insertion algorithm runs in worst-case *O(log n)* time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`bubbleUp`函数利用`justGet`和`swap`。 因为`A.get`在*O(log n)*时间内运行，所以包装函数`justGet`也是如此。
    `swap`函数调用了多次`A.set`和`justGet`，每次调用需要*O(log n)*时间。 因此，`swap`需要*O(log n)*时间。 `bubbleUp`函数最多访问*O(log
    n)*个元素，因为索引`i`在每次递归调用之前都会减半。 因此，有*O(log n)*次对`bubbleUp`的调用，每次调用执行*O(log n)*工作。
    因此，`bubbleUp`的运行时间，因此`insert`的运行时间是*O(log²n)*。 在命令式语言中，其中数组操作最坏情况下需要*O(1)*时间，插入算法的最坏情况下运行时间为*O(log
    n)*。'
- en: Deletion
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除
- en: '**UPDATE**: The version of `deleteMin` [here](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/lectures/HeapsBuggy.html)
    is incorrect. Can you see why?'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新**：[这里](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/lectures/HeapsBuggy.html)的`deleteMin`版本是错误的。
    你能看出为什么吗？'
- en: To delete the minimum element, which is stored at index `0`, we first overwrite
    the root with the value currently stored in the last position (conveniently stored
    in the last element of the `Array`). We pop the last element because its value
    is now stored in the root and then "bubble" or "percolate" this value down as
    long as necessary. When recursively bubbling down, we choose the child tree whose
    root is smaller in order to maintain the heap order property.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除存储在索引 `0` 处的最小元素，我们首先用当前存储在最后位置的值（方便地存储在 `Array` 的最后一个元素中）覆盖根。我们弹出最后一个元素，因为它的值现在存储在根中，然后根据需要“冒泡”或“渗透”这个值。在递归冒泡时，我们选择根较小的子树，以保持堆顺序属性。
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For a given index `i`, the index of the left child is `j = 2*i + 1` and of the
    right child as `k = 2*i + 2`. If the value at index `i` is smaller than both children,
    the output array is unchanged. Otherwise, the value at index `i` is swapped with
    the smaller root among the two subtrees and `bubbleDown` recurses on that subtree.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于给定的索引 `i`，左子节点的索引是 `j = 2*i + 1`，右子节点的索引是 `k = 2*i + 2`。如果索引 `i` 处的值小于两个子节点，则输出数组不变。否则，索引
    `i` 处的值与两个子树中较小的根交换，并且 `bubbleDown` 在该子树上递归。
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The analysis of `bubbleDown` and `deleteMin` is similar to the insertion algorithm,
    resulting in a *O(log²n)* worst-case time cost.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对 `bubbleDown` 和 `deleteMin` 的分析类似于插入算法，导致最坏情况下的 *O(log²n)* 时间成本。
- en: Merging
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 合并
- en: There is a common algorithm, often called "heapify," for merging heaps that
    are represented as arrays. We will not go through this algorithm in this course,
    but you may curious to read about it if you have not seen it before.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个通用的算法，通常称为“堆化”，用于合并表示为数组的堆。我们不会在本课程中介绍这个算法，但如果您以前没有见过它，您可能会对它感兴趣。
- en: In our Elm implementation, we will pretend that we implement the `merge` function
    faithfully, but instead we will always trigger a run-time error.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Elm 实现中，我们将假装我们忠实地实现了 `merge` 函数，但实际上我们总是触发运行时错误。
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The [`Heaps.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Heaps.elm)
    file contains the implementation above.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Heaps.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Heaps.elm)
    文件包含上述实现。'
- en: Polymorphic Types for Heaps
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于堆的多态类型
- en: We defined the `Heap` type to store `Int`s, but the same abstraction exists
    for any kind of comparable values. And, of course, we don't want to duplicate
    the implementation for every different type of heap that we may want to work with.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了 `Heap` 类型来存储 `Int`，但相同的抽象存在于任何可比较值类型。当然，我们不想为我们可能想要使用的每种不同类型的堆重复实现。
- en: Recall that Elm provides the special polymorphic type variable `comparable`
    to describe such types. So we can generalize the heap abstraction as follows.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Elm 提供了特殊的多态类型变量 `comparable` 来描述这样的类型。因此我们可以将堆的抽象概括如下。
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The [`PolyHeaps.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/PolyHeaps.elm)
    file contains the modifications required to implement this more general interface.
    It is worth noting that compared to [`Heaps.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Heaps.elm),
    type signatures are changed but no value definitions are changed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PolyHeaps.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/PolyHeaps.elm)
    文件包含了实现此更通用接口所需的修改。值得注意的是，与 [`Heaps.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Heaps.elm)
    相比，类型签名已更改，但值定义未更改。'
- en: Haskell-style Type Classes
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Haskell 风格类型类
- en: We may want to define interfaces in terms of types that come with operators
    besides those specified in the `comparable` "type class." But Elm does not provide
    a way for the programmer to define an interface that describes a set of types.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能希望根据除 `comparable` “类型类” 中指定的操作符之外的类型定义接口。但是 Elm 不提供一种方式让程序员定义描述一组类型的接口。
- en: In Haskell, user-defined type classes can be used to specify the heap abstraction
    as follows.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Haskell 中，用户定义的类型类可以用以下方式来指定堆抽象。
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The second class definition says that a type `a` "is a" `Heap` if (1) `a` "is
    a" `Ord` and (2) the six functions specified can be defined for that type. Particular
    implementations are then defined to "implement" the `Heap` "interface".
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个类定义说明类型 `a` “是一个” `Heap` 如果 (1) `a` “是一个” `Ord` 并且 (2) 可以为该类型定义六个指定的函数。然后，具体的实现被定义为“实现”
    `Heap` “接口”。
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For simplicity, the definition above does not mention the Haskell `Eq` type
    class.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，上述定义没有提及 Haskell 的 `Eq` 类型类。
- en: ML-style Modules
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ML 风格模块
- en: In Standard ML and OCaml, *signatures* are used to describe *modules*, which
    are structures that contain values and types.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Standard ML 和 OCaml 中，*签名* 用来描述 *模块*，这些模块是包含值和类型的结构。
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: An implementation satisfies the `Heap` signature by defining a *functor* that
    takes a module as an argument and returns another module. Note that these ML functors
    are the not same thing as Haskell `Functor`s.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定义一个以模块为参数并返回另一个模块的 *函数* 来满足 `Heap` 签名的实现。请注意，这些 ML 函数子与 Haskell 的 `Functor`
    不是同一概念。
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
