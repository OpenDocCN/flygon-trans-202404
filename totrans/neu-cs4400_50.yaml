- en: Church NumeralsTuesday, February 14th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Church数周二，2月14日
- en: So far, it seems like it is impossible to do anything useful in this language,
    since all we have are functions and applications. We know how to write the identity
    function, but what about other values? For example, can you write code that evaluates
    to zero?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，似乎在这种语言中无法做任何有用的事情，因为我们只有函数和应用。我们知道如何编写恒等函数，但其他值呢？例如，您能写出计算为零的代码吗？
- en: What’s zero? I only know how to write functions!
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 零是什么？我只知道如何写函数！
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '(Turing Machine programmer: “What’s a function? — I only know how to write
    0s and 1s!”)'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （图灵机程序员：“什么是函数？ — 我只知道如何写0和1！”）
- en: 'The first thing we therefore need is to be able to *encode* numbers as functions.
    For zero, we will use a function of two arguments that simply returns its second
    value:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们首先需要能够将数字*编码*为函数。对于零，我们将使用一个简单返回其第二个值的两个参数的函数：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: or, more concisely
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，更简洁地说
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is the first step in an encoding that is known as *Church Numerals*: an
    encoding of natural numbers as functions. The number zero is encoded as a function
    that takes in a function and a second value, and applies the function zero times
    on the argument (which is really what the above definition is doing). Following
    this view, the number one is going to be a function of two arguments, that applies
    the first on the second one time:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是已知为*Church数*的编码的第一步：将自然数编码为函数。数字零被编码为一个接受函数和第二个值的函数，并在参数上零次应用函数（这实际上是上述定义在做什么）。根据这个观点，数字一将是一个两个参数的函数，将第一个参数应用于第二个一次：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and note that `1` is just like the identity function (as long as you give it
    a function as its first input, but this is always the case in Schlac). The next
    number on the list is two — which applies the first argument on the second one
    twice:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`1`就像恒等函数一样（只要您给它一个函数作为其第一个输入，但这在Schlac中始终如此）。列表中的下一个数字是二 — 它将第一个参数应用于第二个参数两次：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can go on doing this, but what we really want is a way to perform arbitrary
    arithmetic. The first requirement for that is an `add1` function that increments
    its input (an encoded natural number) by one. To do this, we write a function
    that expects an encoded number:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续这样做，但我们真正想要的是执行任意算术的方法。为此的第一个要求是一个`add1`函数，它将其输入（一个编码的自然数）增加一。为此，我们编写一个期望编码数字的函数：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'and this function is expected to return an encoded number, which is always
    a function of `f` and `x`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数预期返回一个编码的数字，它总是一个关于`f`和`x`的函数：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, in the body, we need to apply `f` on `x` n+1 times — but remember that
    `n` is a function that will do `n` applications of its first argument on its second:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在主体中，我们需要将`f`应用于`x` n+1次 — 但请记住，`n`是一个函数，将对其第一个参数在其第二个参数上进行`n`次应用：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'and all we have left to do now is to apply `f` one more time, yielding this
    definition for `add1`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需再次应用`f`，得到`add1`的这个定义：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Using this, we can define a few useful numbers:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个，我们可以定义一些有用的数字：
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is all nice theoretically, but how can we make sure that it is correct?
    Well, Schlac has a few additional special forms that translate Church numerals
    into Racket numbers. To try our definitions we use the `->nat` (read: to natural
    number):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上这一切都很好，但我们如何确保它是正确的呢？好吧，Schlac有一些额外的特殊形式，将Church数转换为Racket数。要尝试我们的定义，我们使用`->nat`（读作：转换为自然数）：
- en: '[PRE9]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can now verify that the identity function is really the same as the number
    1:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以验证恒等函数确实与数字1相同：
- en: '[PRE10]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can even write a test case, since Schlac contains the `test` special form,
    but we have to be careful in that — first of all, we cannot test whether functions
    are equal (why?) so we must use `->nat`, but
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以编写一个测试用例，因为Schlac包含`test`特殊形式，但我们必须小心 — 首先，我们不能测试函数是否相等（为什么？），所以我们必须使用`->nat`，但
- en: '[PRE11]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'will not work since `7` is undefined. To overcome this, Schlac has a `back-door`
    for primitive Racket values — just use a quote:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将不起作用，因为`7`未定义。为了克服这一点，Schlac为原始Racket值提供了一个`后门` — 只需使用引号：
- en: '[PRE12]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
