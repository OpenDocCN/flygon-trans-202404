["```\n(define (setup-environment)\n  (let ((initial-env\n         (extend-environment (primitive-procedure-names)\n                             (primitive-procedure-objects)\n                             the-empty-environment)))\n    (define-variable! 'true true initial-env)\n    (define-variable! 'false false initial-env)\n    initial-env))\n(define the-global-environment (setup-environment)) \n```", "```\n(define input-prompt \";;; M-Eval input:\")\n(define output-prompt \";;; M-Eval value:\")\n(define (driver-loop)\n  (prompt-for-input input-prompt)\n  (let ((input (read)))\n    (let ((output (mc-eval input the-global-environment)))\n      (announce-output output-prompt)\n      (user-print output)))\n  (driver-loop))\n(define (prompt-for-input string)\n  (newline) (newline) (display string) (newline))\n\n(define (announce-output string)\n  (newline) (display string) (newline)) \n```", "```\n(define (user-print object)\n  (if (compound-procedure? object)\n      (display (list 'compound-procedure\n                     (procedure-parameters object)\n                     (procedure-body object)\n                     '(procedure-env>))\n      (display object))) \n```", "```\n(define the-global-environment (setup-environment))\n(driver-loop)\n;;; M-Eval input:\n(define (append x y)\n  (if (null? x)\n      y\n      (cons (car x)\n            (append (cdr x) y))))\n;;; M-Eval value:\nok\n;;; M-Eval input:\n(append '(a b c) '(d e f))\n;;; M-Eval value:\n(a b c d e f) \n```", "```\n(define (factorial n)\n  (if (= n 1)\n      1\n      (* (factorial (- n 1)) n))) \n```"]