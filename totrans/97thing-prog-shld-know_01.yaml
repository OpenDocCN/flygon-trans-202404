- en: Act with Prudence
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以谨慎行事
- en: Act with Prudence
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以谨慎行事
- en: '*"Whatever you undertake, act with prudence and consider the consequences"
    Anon*'
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“无论你做什么，都要谨慎行事并考虑后果” 匿名*'
- en: No matter how comfortable a schedule looks at the beginning of an iteration,
    you can't avoid being under pressure some of the time. If you find yourself having
    to choose between "doing it right" and "doing it quick" it is often appealing
    to "do it quick" on the understanding that you'll come back and fix it later.
    When you make this promise to yourself, your team, and your customer, you mean
    it. But all too often the next iteration brings new problems and you become focused
    on them. This sort of deferred work is known as technical debt and it is not your
    friend. Specifically, Martin Fowler calls this deliberate technical debt in his
    [taxonomy of technical debt](http://martinfowler.com/bliki/TechnicalDebtQuadrant.html),
    which should not be confused with inadvertent technical debt.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无论迭代开始时的时间表看起来多么舒适，你都无法避免在某些时候承受压力。如果你发现自己不得不在“做正确”和“做快速”之间做出选择，通常会倾向于“做快速”，因为你会理解到之后会回来修复它。当你向自己、团队和客户做出这个承诺时，你是认真的。但往往下一个迭代会带来新的问题，你会专注于它们。这种推迟的工作被称为技术债务，它并不是你的朋友。具体来说，马丁·福勒在他的[技术债务分类](http://martinfowler.com/bliki/TechnicalDebtQuadrant.html)中称之为故意的技术债务，不应与无意的技术债务混淆。
- en: 'Technical debt is like a loan: You benefit from it in the short-term, but you
    have to pay interest on it until it is fully paid off. Shortcuts in the code make
    it harder to add features or refactor your code. They are breeding grounds for
    defects and brittle test cases. The longer you leave it, the worse it gets. By
    the time you get around to undertaking the original fix there may be a whole stack
    of not-quite-right design choices layered on top of the original problem making
    the code much harder to refactor and correct. In fact, it is often only when things
    have got so bad that you must fix it, that you actually do go back to fix it.
    And by then it is often so hard to fix that you really can''t afford the time
    or the risk.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务就像一笔贷款：你在短期内受益，但必须支付利息，直到完全偿还。代码中的捷径使添加功能或重构代码变得更加困难。它们是缺陷和脆弱测试用例的温床。你拖延得越久，情况就会变得越糟。当你开始着手原始修复时，可能会有一整堆不太正确的设计选择堆叠在原始问题之上，使代码变得更难重构和纠正。事实上，通常只有当事情变得如此糟糕以至于你必须修复它时，你才会真正回去修复它。而那时修复它通常是如此困难，以至于你无法承担时间或风险。
- en: There are times when you must incur technical debt to meet a deadline or implement
    a thin slice of a feature. Try not to be in this position, but if the situation
    absolutely demands it, then go ahead. But (and this is a big BUT) you must track
    technical debt and pay it back quickly or things go rapidly downhill. As soon
    as you make the decision to compromise, write a task card or log it in your issue
    tracking system to ensure that it does not get forgotten.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你必须承担技术债务来满足截止日期或实现一个功能的薄片。尽量不要陷入这种境地，但如果情况绝对要求，那就继续。但（这是一个很大的但）你必须跟踪技术债务并尽快偿还，否则情况会迅速恶化。一旦你做出妥协的决定，写下一个任务卡或在问题跟踪系统中记录下来，以确保不会被遗忘。
- en: If you schedule repayment of the debt in the next iteration, the cost will be
    minimal. Leaving the debt unpaid will accrue interest and that interest should
    be tracked to make the cost visible. This will emphasize the effect on business
    value of the project's technical debt and enables appropriate prioritization of
    the repayment. The choice of how to calculate and track the interest will depend
    on the particular project, but track it you must.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你安排在下一个迭代中偿还债务，成本将是最小的。不偿还债务将会产生利息，这些利息应该被跟踪以使成本可见。这将强调项目技术债务对业务价值的影响，并使偿还的优先级得到适当的确定。如何计算和跟踪利息的选择将取决于具体项目，但你必须跟踪它。
- en: Pay off technical debt as soon as possible. It would be imprudent to do otherwise.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尽快偿还技术债务是明智之举。否则会不明智。
- en: By [Seb Rose](http://programmer.97things.oreilly.com/wiki/index.php/Seb_Rose)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Seb Rose](http://programmer.97things.oreilly.com/wiki/index.php/Seb_Rose)
