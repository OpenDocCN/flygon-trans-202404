- en: Lecture 22 - Courier, Warehouse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Exam: 9.00, August 8 to 11.30, August 9.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the earliest that anybody is planning to start?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I now have back my document creation tools. Assignments will start to be more
    uptodate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Anthropomorphic Programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We all, even most programmers (!), have effective intuitions about human relations
  prefs: []
  type: TYPE_NORMAL
- en: We use them to `understand' pets, which means attributing to them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: goals
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: knowledge
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: capability
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: emotions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why not programs?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: apply them to intertask relationships
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks are independent entities
  prefs: []
  type: TYPE_NORMAL
- en: Understand them by thinking about them as if they have capabilities and goals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you are developing something like the train application you are defining
    roles and relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Servers and Attendant Tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why do servers need attendant tasks?
  prefs: []
  type: TYPE_NORMAL
- en: What happens if a server calls AwaitEvent?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1\. Proprietor with a Notifier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Proprietor `owns' a service, which usually means a resource.
  prefs: []
  type: TYPE_NORMAL
- en: Think of the owner at the counter of an old-fashioned store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store'' means where things are stored;'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: it's in the back and only the proprietor can access it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Many clients come to the front and are processed one by one.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment. The modern `store' is considered by many to be the most important innovation
    of the 20th century. (Yes, including the transistor, the computer, quantum mechanics,
    antibiotics, etc.) A whole lot of work that was previously done by store personnel
    is now done by the client. This is possible only because extensive codes of conduct
    have been internalized by clients. (That is, a large collection of new behaviour
    norms have been created and propagated.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Somebody has to sit out back waiting for the truck and bringing it to the proprietor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel is handling hardware in this example
  prefs: []
  type: TYPE_NORMAL
- en: Notifier Code for a UART
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Proprietor Code for a UART
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Notifier is usually of higher priority than server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice the early reply in the proprietor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When, and how, do interrupts get turned on and/or cleared?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who coordinates hardware ownership?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have made the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: exhibit duality explicitly
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: easy to break into parts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: easy to extend
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Using a Courier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Simplest is best
  prefs: []
  type: TYPE_NORMAL
- en: Transmit Notifier Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This omits flow control. Is it better to handle flow control in the notifier
    or in the server?
  prefs: []
  type: TYPE_NORMAL
- en: That is, where should the fifo be?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transmit Courier Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Transmit Proprietor Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This gets you through a bottleneck where no more than two events come too fast.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all the calls provide error returns. You can/should use them for
    error recovery
  prefs: []
  type: TYPE_NORMAL
- en: 'static error recovery: debugging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'dynamic error recovery: at run time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another possible arrangement for task creation
  prefs: []
  type: TYPE_NORMAL
- en: Server creates the courier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Couier creates the notifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another possible arrangement for initialization
  prefs: []
  type: TYPE_NORMAL
- en: Server Receives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Courier sends to its parentTid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifier sends to its parentTid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed gating
  prefs: []
  type: TYPE_NORMAL
- en: I am showing you collections of tasks implemented together because sets of related
    tasks is a level of organization above the individual task.
  prefs: []
  type: TYPE_NORMAL
- en: E.g., the decision to add a courier requires revision of code within the group,
    but not outside it.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Using a Warehouse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add a warehouse between the courier and the notifier.
  prefs: []
  type: TYPE_NORMAL
- en: Notifier Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Warehouse Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Transmit Courier Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Proprietor Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This structure clears up most problems when a burst of requests to the server
    would leave the notifier waiting in a long sendQ..
  prefs: []
  type: TYPE_NORMAL
- en: Warehouse and proprietor share the work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server's Tid is public; Warehouse's Tid is private.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This is far from the only way to share the work. For example,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server could be guarded by a receptionist (assistant) who ensures that another
    client request occurs only when the previous request is complete. Then the warehouse
    is unnecessary.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Handles bottlenecks of all sizes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give a precise and quantitative definition of `bottleneck'.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Server could be buffered on the other side
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Called a guard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What this amounts to is that a server should be lean and hungry
  prefs: []
  type: TYPE_NORMAL
- en: do as little as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: always be receive blocked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
