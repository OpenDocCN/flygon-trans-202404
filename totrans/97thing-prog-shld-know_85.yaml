- en: Two Heads Are Often Better than One
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一人得道，鸡犬升天。
- en: Two Heads Are Often Better than One
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一人得道，鸡犬升天。
- en: Programming requires deep thought, and deep thought requires solitude. So goes
    the programmer stereotype.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 编程需要深思熟虑，而深思熟虑需要独处。这就是程序员的刻板印象。
- en: This "lone wolf" approach to programming has been giving way to a more collaborative
    approach, which, I would argue, improves quality, productivity, and job satisfaction
    for programmers. This approach has developers working more closely with each other
    and also with non-developers — business and systems analysts, quality assurance
    professionals, and users.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这种“孤狼”式的编程方式正逐渐被更具协作性的方式所取代，我认为，这种方式可以提高程序员的质量、生产力和工作满意度。该方法使开发人员更加密切地与彼此合作，也与非开发人员
    —— 商业和系统分析员、质量保证专家和用户更密切地合作。
- en: What does this mean for developers? Being the expert technologist is no longer
    sufficient. You must become effective at working with others.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这对开发者意味着什么？成为专业技术人员已经不再足够。你必须擅长与他人合作。
- en: Collaboration is not about asking and answering questions or sitting in meetings.
    It's about rolling up your sleeves with someone else to jointly attack work.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 协作不是问问题和回答问题，也不是坐在会议上。它是与他人一起共同攻击工作。
- en: I'm a big fan of pair programming. You might call this "extreme collaboration."
    As a developer, my skills grow when I pair. If I am weaker than my pairing partner
    in the domain or technology, I clearly learn from his or her experience. When
    I am stronger in some aspect, I learn more about what I know and don't know by
    having to explain myself. Invariably, we both bring something to the table and
    learn from each other.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常喜欢双人编程。你可以把这叫做“极端协作”。作为一名开发者，我与伙伴一起工作时技能得到提升。如果我在领域或技术方面比我的伙伴弱，我显然会从他或她的经验中学到东西。当我在某个方面更强时，通过不得不解释自己，我更多地了解了自己所知道和不知道的东西。我们都带来了一些东西，并相互学习。
- en: When pairing, we each bring our collective programming experiences — domain
    as well as technical — to the problem at hand and can bring unique insight and
    experience into writing software effectively and efficiently. Even in cases of
    extreme imbalance in domain or technical knowledge, the more experienced participant
    invariably learns something from the other — perhaps a new keyboard shortcut,
    or exposure to a new tool or library. For the less-experienced member of the pair,
    this is a great way to get up to speed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在双人编程时，我们各自带着我们的集体编程经验 —— 包括领域和技术 —— 解决手头的问题，可以为编写软件带来独特的见解和经验。即使在领域或技术知识极不平衡的情况下，经验丰富的参与者总会从另一方那里学到一些东西
    —— 也许是一个新的键盘快捷键，或者是接触到一个新的工具或库。对于较不经验的一方来说，这是快速学习的好方法。
- en: Pair programming is popular with, though not exclusive to, proponents of agile
    software development. Some who object to pairing suggest "Why should I pay two
    programmers to do the work of one?" My response is that, indeed, you should not.
    I argue that pairing increases quality, understanding of the domain and technology,
    techniques (like IDE tricks), and mitigates the impact of lottery risk (one of
    your expert developers wins the lottery and quits the next day).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**双人编程**（Pair programming）虽然不是敏捷软件开发倡导者的专利，但却备受欢迎。一些反对双人编程的人可能会问：“为什么我要花两个程序员的工资来做一个人的工作呢？”我的回答是，确实不应该。我认为双人编程可以提高质量，增进对领域和技术的理解，掌握技巧（比如
    IDE 技巧），减轻彩票风险的影响（你的一位专业开发者中彩并在第二天辞职）。'
- en: What is the long-term value of learning a new keyboard shortcut? How do we measure
    the overall quality improvement to the product resulting from pairing? How do
    we measure the impact of your partner not letting you pursue a dead-end approach
    to solving a difficult problem? One study cites an increase of 40% in effectiveness
    and speed (J T Nosek, "The Case for Collaborative Programming," *Communications
    of the ACM*, March 1998). What is the value of mitigating your "lottery risk?"
    Most of these gains are difficult to measure.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 学习一个新的键盘快捷键的长期价值是什么？我们如何衡量与双人编程相关的产品整体质量改进？如何衡量你的伙伴不让你走死胡同的方法对解决难题的影响？一项研究引用了有效性和速度提高了
    40% 的数据（J T Nosek，《合作编程的理由》，《ACM 通讯》1998 年 3 月）。减轻你的“彩票风险”的价值是多少？这些收益大多难以衡量。
- en: Who should pair with whom? If you're new to the team, it's important to find
    a team member who is knowledgeable. Just as important find someone who has good
    interpersonal and coaching skills. If you don't have much domain experience, pair
    with a team member who is an expert in the domain.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 谁应该与谁搭档？如果你是团队的新成员，找到一个有经验的团队成员非常重要。同样重要的是找到一个具有良好人际关系和教练技能的人。如果你在领域经验不多，就与该领域的专家搭档。
- en: 'If you are not convinced, experiment: collaborate with your colleagues. Pair
    on an interesting, gnarly problem. See how it feels. Try it a few times.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不确定，那就试试：与你的同事合作。搭档解决一个有趣的、棘手的问题。感受一下。试试几次。
- en: By [Adrian Wible](http://programmer.97things.oreilly.com/wiki/index.php/Adrian_Wible)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[阿德里安·威布尔](http://programmer.97things.oreilly.com/wiki/index.php/Adrian_Wible)
