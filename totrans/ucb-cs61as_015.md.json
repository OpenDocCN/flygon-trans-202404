["```\n(if [test]\n    [then]\n    [else]) \n```", "```\n-> (if #t\n       'foo\n       'baz)\n'foo\n-> (if #f\n       'foo\n       'baz)\n'baz\n-> (if (= 1 1)\n       'foobar\n       (/ 1 0))\n'foobar \n```", "```\n(define (roman-value letter)\n  (if (equal? letter 'i)\n      1\n      (if (equal? letter 'v)\n          5\n          (if (equal? letter 'x)\n              10\n              (if (equal? letter 'l)\n                  50\n                  (if (equal? letter 'c)\n                      100\n                      (if (equal? letter 'd)\n                          500\n                          (if (equal? letter 'm)\n                              1000\n                              'huh?)))))))) \n```", "```\n(define (roman-value letter)\n  (cond ((equal? letter 'i) 1)\n        ((equal? letter 'v) 5)\n        ((equal? letter 'x) 10)\n        ((equal? letter 'l) 50)\n        ((equal? letter 'c) 100)\n        ((equal? letter 'd) 500)\n        ((equal? letter 'm) 1000)\n        (else 'huh?))) \n```", "```\n(cond ([test1] [then1])\n      ([test2] [then2])\n      ...\n      ([testn] [thenn])\n      (else [else])) \n```", "```\n(and (/ 1 0) #f #t)\n(or #f (/ 1 0) #t)\n```", "```\n(define (new-if test then else)\n  (if test \n      then \n      else)) \n```", "```\n(new-if (= 1 1) 'foo (/ 1 0)) \n```", "```\n(define (what-am-i age)\n  (if (> age 21)\n      '(i am a grownup)\n      '(i am a child))) \n```", "```\n(define (what-am-i age)\n  (se '(i am a) (if (> age 21)\n                    'grownup\n                    'child))) \n```", "```\n(equal? argument (or 'yes 'no))` \n```", "```\n(equal? argument 'yes) \n```", "```\n(or (equal? argument 'yes) (equal? argument 'no)) \n```", "```\n(define (even? number)\n  (if (not (odd? number))\n      #t\n      #f)) \n```", "```\n(define (even? number)\n  (not (odd? number))) \n```", "```\n-> (indef-article 'beetle)\n'(a beetle)\n-> (indef-article 'apple)\n'(an apple)\n```"]