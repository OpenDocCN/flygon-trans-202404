- en: 'Lecture 9: Modules'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九讲：模块
- en: We've been building very small programs. When a program is small enough, we
    can keep all of the details of the program in our heads at once. Real application
    programs are 100 to 10000 times larger than any program you have likely written
    or worked on; they are simply too large and complex to hold all their details
    in our heads. They are also written by multiple authors because otherwise it would
    take too long. To build large software systems requires techniques we haven't
    talked about so far.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在构建非常小的程序。当一个程序足够小，我们可以一次性记住程序的所有细节。真实的应用程序比你可能编写或参与开发的任何程序大100到10000倍；它们太大且太复杂，无法一次性记住所有细节。它们也是由多个作者编写的，否则将会花费太长时间。构建大型软件系统需要我们迄今为止尚未讨论的技术。
- en: 'One key solution to managing complexity of large software is *modular programming*:
    the code is composed of many different code modules that are developed separately.
    This allows different developers to take on discrete pieces of the system and
    design and implement them without having to understand all the rest. However,
    to build large programs out of modules effectively, we need to be able to write
    code modules that we can convince ourselves are correct *in isolation* from the
    rest of the program. Rather than have to think about every other part of the program
    when developing a code module, we need to be able to use *local reasoning*: that
    is, reasoning about just the module and the contract it needs to satisfy with
    respect to the rest of the program. If everyone has done their job, separately
    developed code modules can be plugged together to form a working program without
    every developer needing to understand everything done by every other developer
    in the team. This is the idea of *modular programming*.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 管理大型软件复杂性的一个关键解决方案是*模块化编程*：代码由许多不同的代码模块组成，这些模块是分开开发的。这使得不同的开发人员可以负责系统的离散部分，并设计和实现它们，而无需理解所有其他部分。然而，要有效地从模块构建大型程序，我们需要能够编写我们可以确信*在与程序的其余部分隔离*时是正确的代码模块。与其在开发代码模块时必须考虑程序的每一部分，我们需要能够使用*局部推理*：即仅仅考虑模块和它需要满足的与程序的其余部分相关的合同。如果每个人都做好了自己的工作，分开开发的代码模块可以被连接在一起形成一个可运行的程序，而不需要每个开发人员都理解团队中每个其他开发人员所做的一切。这就是*模块化编程*的理念。
- en: '![](../Images/21395bda729201367258f73d35938460.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/21395bda729201367258f73d35938460.jpg)'
- en: Therefore, to build large programs that work, we must use *abstraction* to make
    it manageable to think about the program. Abstraction is simply the removal of
    detail. A well-written program has the property that we can think about its components
    (such as functions) abstractly, without concerning ourselves with all the details
    of how those components are implemented.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要构建可运行的大型程序，我们必须使用*抽象*来使得思考程序变得可管理。抽象简单来说就是去除细节。一个写得很好的程序具有这样的特性，我们可以抽象地思考它的组件（比如函数），而不必关心这些组件是如何实现的所有细节。
- en: Modules are abstracted by giving *specifications* of what they are supposed
    to do. A good module specification is clear, understandable, and give just enough
    information about what the module does for clients to successfully use it. This
    abstraction makes the programmer's job much easier; it is helpful even when there
    is only one programmer working on a moderately large program, and it is crucial
    when there is more than one programmer.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 模块通过给出它们应该做什么的*规范*来进行抽象。一个好的模块规范是清晰的、可理解的，并提供足够的关于模块做什么的信息，以便客户成功使用它。这种抽象使程序员的工作变得更容易；即使只有一个程序员在开发一个中等规模的程序，这也是有帮助的，而当有多个程序员时则至关重要。
- en: Languages often contain mechanisms that support modules directly. OCaml is one,
    as we will see shortly. In general, a module specification is known as an *interface*,
    which provides information to clients about the module's functionality while hiding
    the *implementation*. Object-oriented languages support modular programming with
    *classes*. The Java `interface` construct is one example of a mechanism for specifying
    the interface to a class (but by no means the only one). A Java `interface` informs
    clients of the available functionality in any class that implements it without
    revealing the details of the implementation. But even just the public methods
    of a class constitute an interface in the more general sense—an abstract description
    of what the module can do.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 语言通常包含直接支持模块的机制。OCaml就是其中之一，我们很快就会看到。一般来说，模块规范称为*接口*，它向客户提供有关模块功能的信息，同时隐藏*实现*。面向对象的语言支持使用*类*进行模块化编程。Java的`interface`构造是指定类接口的机制之一（但绝非唯一的机制）。Java的`interface`向客户端提供了任何实现它的类可用功能的信息，而不会透露实现的细节。但即使是类的公共方法也构成了更一般意义上的接口——模块能做什么的抽象描述。
- en: Once we have defined a module and its interface, developers working with the
    module take on distinct roles. It is likely that most developers are *clients*
    of the module who understand the interface but do not need to understand the implementation
    of the module. A developer who works on the module implementation is an *implementer*.
    The module interface is a *contract between the client and the implementer, defining
    the responsibilities of both*. Contracts are very important because they help
    us isolate the source of the problem when something goes wrong.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了一个模块及其接口，与该模块一起工作的开发人员承担了不同的角色。大多数开发人员可能是模块的*客户*，他们理解接口但不需要理解模块的实现。负责模块实现的开发人员是*实现者*。模块接口是客户和实现者之间的*合同，定义了双方的责任*。合同非常重要，因为当出现问题时，它们帮助我们隔离问题的根源。
- en: It is good practice to involve both clients and implementers in the design of
    a module's interface. Interfaces designed solely by one or the other can be seriously
    deficient, because each side may have its own view of what the final product should
    look like, and these may not align. So mutual agreement on the contract is essential.
    It is also important to think hard about global module structure and interfaces
    *early*, even before any coding is done, because changing an interface becomes
    more and more difficult as the development proceeds and more of the code comes
    to depend on it. Finally, it is important to be completely unambiguous in the
    specification. In OCaml, the *signature* is part of writing an unambiguous specification,
    but is by no means the whole story. While beyond the scope of this course, Interface
    Description (or Definition) Languages (IDL's) are used to specify interfaces in
    a language-indpendent way so that different modules do not even necessarily need
    to be implemented in the same language.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 将客户和实现者都纳入模块接口设计是一个很好的实践。仅由其中一方设计的接口可能存在严重缺陷，因为双方可能对最终产品的外观有不同看法，而这些观点可能不一致。因此，对合同的相互同意至关重要。在全局模块结构和接口方面**提前**进行深思熟虑也很重要，甚至在进行任何编码之前，因为随着开发的进行和更多的代码依赖于接口，改变接口变得越来越困难。最后，在规范中完全明确也很重要。在OCaml中，*签名*
    是编写明确规范的一部分，但绝不是全部。虽然超出了本课程的范围，但接口描述（或定义）语言（IDL）用于以语言无关的方式指定接口，以便不同的模块甚至不需要用相同的语言实现。
- en: In modular programming, modules are used only through their declared interfaces,
    which the language may help enforce. This is true even when the client and the
    implementer are the same person. Modules decouple the system design and implementation
    problem into separate tasks that can be carried out largely independently. When
    a module is used only through its interface, the implementer has the flexibility
    to change the module as long as the module still satisfies its interface. The
    interface ensures that the module is *loosely coupled* to its clients. Loose coupling
    gives implementers and clients the freedom to work on their code mostly independently,
    and it also means that changes in one code module are less likely to require changes
    to others.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块化编程中，模块仅通过其声明的接口使用，语言可能有助于强制执行。即使客户端和实现者是同一个人，这也是正确的。模块将系统设计和实现问题解耦为可以基本独立进行的任务。当模块仅通过其接口使用时，实现者有灵活性更改模块，只要模块仍然满足其接口。接口确保模块与其客户端*松耦合*。松耦合使实现者和客户端能够基本独立地工作，这也意味着一个代码模块的更改不太可能需要更改其他模块。
- en: Abstraction mechanisms
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象机制
- en: 'We will be concerned with two kinds of abstraction:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将关注两种抽象：
- en: '*Abstraction by parameterization.* Rather than write code that mentions specific
    values on which computation is to occur, we write functions. Functions describe
    a computation that works on all acceptable values of the appropriate types. Thus,
    the detail of what specific values are to be used is removed. Parameterized types
    are another example of abstraction by parameterization, although there the parameters
    are types rather than values.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过参数化进行抽象*。与其编写提及计算要发生的特定值的代码，我们编写函数。函数描述了在适当类型的所有可接受值上运行的计算。因此，具体值的细节被移除。参数化类型是通过参数化进行抽象的另一个例子，尽管在那里参数是类型而不是值。'
- en: '*Abstraction by specification*. A well-designed specification removes unnecessary
    detail about the actual type or value being specified. The specification serves
    as a contract between the implementer and the user (client), making the job of
    both parties simpler and making the code more extensible and maintainable. This
    idea is also known as *information hiding* or *encapsulation* in the object-oriented
    world.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过规范进行抽象*。一个设计良好的规范消除了关于实际类型或值的不必要细节。规范充当实现者和用户（客户端）之间的契约，使双方的工作更简单，使代码更具可扩展性和可维护性。这个想法在面向对象的世界中也被称为*信息隐藏*或*封装*。'
- en: Modules
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块
- en: 'Modules in OCaml are implemented by `module` declarations that have the following
    syntax:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在OCaml中，模块由具有以下语法的`module`声明实现：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The module name *ModuleName* must begin with an upper case letter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 模块名*ModuleName*必须以大写字母开头。
- en: Modules partition the namespace, so that any symbol `x` that is bound in the
    implementation of a module named `Module` must be referenced by the qualifed name
    `Module.x` outside the implementation of the module (unless the namespace has
    been exposed using `open`).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 模块将命名空间划分，因此在名为`Module`的模块的实现中绑定的任何符号`x`在模块的实现之外必须通过限定名称`Module.x`引用（除非命名空间已经使用`open`暴露）。
- en: The implementation of a module can contain `type` definitions, `exception` definitions,
    `let` definitions, `open` statements to open the namespaces of other modules,
    `include` statements to include the contents of other modules, and `signature`
    definitions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的实现可以包含`type`定义、`exception`定义、`let`定义、`open`语句以打开其他模块的命名空间、`include`语句以包含其他模块的内容以及`signature`定义。
- en: Like structures, modules (and signatures discussed below) are not first-class
    objects in OCaml. This is in contrast to functions which are first-class objects.
    Modules cannot be passed as arguments to a function nor returned as results of
    a function.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 像结构一样，OCaml中的模块（以及下面讨论的签名）不是一等对象。这与函数是一等对象的情况形成对比。模块不能作为参数传递给函数，也不能作为函数的结果返回。
- en: Signatures
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 签名
- en: To successfully develop large programs, we need more than the ability to group
    related operations together in a module. We need to be able to use the compiler
    to enforce the separation between different modules, which prevents bad things
    from happening. Signatures are the mechanism that enforces this separation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功开发大型程序，我们需要的不仅仅是能够将相关操作组合在一个模块中的能力。我们需要能够使用编译器强制执行不同模块之间的分离，以防止发生不良事件。签名是强制执行这种分离的机制。
- en: 'Signature declarations that have the following syntax:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 签名声明具有以下语法：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By convention, the signature name *SIGNAME* is all in capital letters. The definitions
    of a signature declare a set of types and values that any module implementing
    it must provide. The definitions of a signature may be `type` definitions, `val`
    definitions to define the type signature of a name, and `exception` definitions
    to specify exceptions that module can raise.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，签名名称*SIGNAME*全部使用大写字母。签名的定义声明了任何实现它的模块必须提供的一组类型和值。签名的定义可以是`type`定义，`val`定义来定义名称的类型签名，以及`exception`定义来指定模块可以引发的异常。
- en: 'A module that implements a particular signature specifies the name of that
    signature in its definition, after the module name and separated by a <cod>: as
    with types. The signature must be defined before the module is defined.</cod>'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 实现特定签名的模块在其定义中指定该签名的名称，在模块名称之后用<cod>分隔。签名必须在模块定义之前定义。
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A module that implements a signature must specify concrete types for the abstract
    types in the signature and provide all the declarations in the signature. Only
    the abstract types are accessible outside the module, unless the signature exposes
    the definition. Only declarations in the signature are accessible outside of the
    module (for instance functions defined in the implementation but not in the signature
    are not accessible).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 实现签名的模块必须为签名中的抽象类型指定具体类型，并提供签名中的所有声明。除非签名公开定义，否则只有抽象类型在模块外部可访问。只有签名中的声明在模块外部可访问（例如，在实现中定义但不在签名中定义的函数是不可访问的）。
- en: 'For example, here is a signature for a simple set data abstraction, together
    with two implementations of that interface using lists:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是一个简单集合数据抽象的签名，以及使用列表实现该接口的两个实现：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here is another example for a stack abstraction.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个栈抽象的示例。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finally, here is an example for polynomials.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里是多项式的一个示例。
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
