- en: StlcPropProperties of STLC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Require Import Maps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Require Import Types.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Require Import Stlc.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Require Import Smallstep.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Module STLCProp.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Import STLC.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Canonical Forms
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw for the simple calculus in the [Types](Types.html) chapter, the
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: first step in establishing basic properties of reduction and types
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is to identify the possible *canonical forms* (i.e., well-typed
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: closed values) belonging to each type.  For Bool, these are the boolean
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: values ttrue and tfalse.  For arrow types, the canonical forms
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: are lambda-abstractions.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Progress
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *progress* theorem tells us that closed, well-typed
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'terms are not stuck: either a well-typed term is a value, or it'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: can take a reduction step.  The proof is a relatively
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: straightforward extension of the progress proof we saw in the
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Types](Types.html) chapter.  We''ll give the proof in English first, then'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the formal version.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Proof*: By induction on the derivation of ⊢ t ∈ T.'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The last rule of the derivation cannot be T_Var, since a variable is never well
    typed in an empty context.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The T_True, T_False, and T_Abs cases are trivial, since in each of these cases
    we can see by inspecting the rule that t is a value.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the last rule of the derivation is T_App, then t has the form t[1] t[2] for
    some t[1] and t[2], where ⊢ t[1] ∈ T[2] → T and ⊢ t[2] ∈ T[2] for some type T[2].
    By the induction hypothesis, either t[1] is a value or it can take a reduction
    step.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If t[1] is a value, then consider t[2], which by the other induction hypothesis
    must also either be a value or take a step.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Suppose t[2] is a value. Since t[1] is a value with an arrow type, it must be
    a lambda abstraction; hence t[1] t[2] can take a step by ST_AppAbs.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, t[2] can take a step, and hence so can t[1] t[2] by ST_App2.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If t[1] can take a step, then so can t[1] t[2] by ST_App1.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the last rule of the derivation is T_If, then t = if t[1] then t[2] else
    t[3], where t[1] has type Bool. By the IH, t[1] either is a value or takes a step.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If t[1] is a value, then since it has type Bool it must be either true or false.
    If it is true, then t steps to t[2]; otherwise it steps to t[3].
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, t[1] takes a step, and therefore so does t (by ST_If).
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Exercise: 3 stars, advanced (progress_from_term_ind)'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Show that progress can also be proved by induction on terms
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: instead of induction on typing derivations.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ☐
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Free Occurrences
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A variable x *appears free in* a term *t* if t contains some
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: occurrence of x that is not under an abstraction labeled x.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: y appears free, but x does not, in \x:T→U. x y
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: both x and y appear free in (λx:T→U. x y) x
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: no variables appear free in \x:T→U. \y:T. x y
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Formally:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The *free variables* of a term are just the variables that appear
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: free in it.  A term with no free variables is said to be
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*closed*.'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: An *open* term is one that is not closed (or not known to be
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: closed).
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Exercise: 1 starM (afi)'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the space below, write out the rules of the appears_free_in
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: relation in informal inference-rule notation.  (Use whatever
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: notational conventions you like — the point of the exercise is
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你喜欢的符号约定 —— 这个练习的重点是
- en: just for you to think a bit about the meaning of each rule.)
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只是为了让你思考一下每个规则的意义。)
- en: Although this is a rather low-level, technical definition,
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管这是一个相当低级别、技术性的定义，
- en: understanding it is crucial to understanding substitution and its
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 理解它对于理解替换及其
- en: properties, which are really the crux of the lambda-calculus.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 性质，这实际上是 lambda 演算的关键。
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ☐
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Lemma free_in_context : ∀x t T Γ,'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 free_in_context：∀x t T Γ，
- en: appears_free_in x t →
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: appear_free_in x t →
- en: Γ ⊢ t ∈ T →
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Γ ⊢ t ∈ T →
- en: ∃T', Γ x = Some T'.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ∃T'，Γ x = Some T'。
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Proof.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明。
- en: intros x t T Γ H H[0]. generalize dependent Γ.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 x t T Γ H H[0]。推广 Γ。
- en: generalize dependent T.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 推广对 T 的依赖。
- en: induction H;
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对 H 进行归纳；
- en: intros; try solve [inversion H[0]; eauto].
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 引入；尝试解决 [inversion H[0]; eauto]。
- en: '- (* afi_abs *)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* afi_abs *)'
- en: inversion H[1]; subst.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对 H[1] 进行反演；代入。
- en: apply IHappears_free_in in H[7].
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将 IHappears_free_in 应用于 H[7]。
- en: rewrite [update_neq](Maps.html#update_neq) in H[7]; assumption.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H[7] 中使用 [update_neq](Maps.html#update_neq) 进行重写；假设成立。
- en: Qed.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完毕。
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Corollary typable_empty__closed : ∀t T,'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 推论 typable_empty__closed：∀t T，
- en: empty ⊢ t ∈ T  →
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 空 ⊢ t ∈ T →
- en: closed t.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 闭合的 t。
- en: Proof.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: (* 此处填写 *) 已承认。
- en: ☐
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Sometimes, when we have a proof Γ ⊢ t : T, we will need to'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '有时，当我们有一个证明 Γ ⊢ t : T 时，我们将需要'
- en: replace Γ by a different context Γ'.  When is it safe
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用 Γ' 替换不同的上下文 Γ。什么时候是安全的
- en: to do this?  Intuitively, it must at least be the case that
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 做这个？直觉上，至少必须是这样的情况
- en: Γ' assigns the same types as Γ to all the variables
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ' 将所有变量分配给与 Γ 相同的类型
- en: that appear free in t. In fact, this is the only condition that
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 出现在 t 中的自由变量。事实上，这是唯一的条件
- en: is needed.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是必要的。
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Proof*: By induction on the derivation of'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*证明*：对推导进行归纳'
- en: Γ ⊢ t ∈ T.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ ⊢ t ∈ T。
- en: If the last rule in the derivation was T_Var, then t = x and Γ x = T. By assumption,
    Γ' x = T as well, and hence Γ' ⊢ t ∈ T by T_Var.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果推导中的最后一个规则是 T_Var，则 t = x 且 Γ x = T。根据假设，Γ' x = T，因此根据 T_Var，Γ' ⊢ t ∈ T。
- en: If the last rule was T_Abs, then t = \y:T[11]. t[12], with T = T[11] → T[12]
    and Γ, y:T[11] ⊢ t[12] ∈ T[12]. The induction hypothesis is that, for any context
    Γ'', if Γ, y:T[11] and Γ'' assign the same types to all the free variables in
    t[12], then t[12] has type T[12] under Γ''. Let Γ' be a context which agrees with
    Γ on the free variables in t; we must show Γ' ⊢ \y:T[11]. t[12] ∈ T[11] → T[12].
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果最后一个规则是 T_Abs，则 t = \y:T[11]. t[12]，其中 T = T[11] → T[12] 且 Γ, y:T[11] ⊢ t[12]
    ∈ T[12]。归纳假设是，对于任何上下文 Γ''，如果 Γ, y:T[11] 和 Γ'' 将 t[12] 中的所有自由变量分配给相同的类型，则 t[12]
    在 Γ'' 下具有类型 T[12]。让 Γ' 是一个与 t 中的自由变量在 Γ 上一致的上下文；我们必须证明 Γ' ⊢ \y:T[11]. t[12] ∈
    T[11] → T[12]。
- en: By T_Abs, it suffices to show that Γ', y:T[11] ⊢ t[12] ∈ T[12]. By the IH (setting
    Γ'' = Γ', y:T[11]), it suffices to show that Γ, y:T[11] and Γ', y:T[11] agree
    on all the variables that appear free in t[12].
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据 T_Abs，我们只需证明 Γ', y:T[11] ⊢ t[12] ∈ T[12]。根据 IH（设置 Γ'' = Γ', y:T[11]），我们只需证明
    Γ, y:T[11] 和 Γ', y:T[11] 在出现在 t[12] 中的所有变量上达成一致。
- en: Any variable occurring free in t[12] must be either y or some other variable.
    Γ, y:T[11] and Γ', y:T[11] clearly agree on y. Otherwise, note that any variable
    other than y that occurs free in t[12] also occurs free in t = \y:T[11]. t[12],
    and by assumption Γ and Γ' agree on all such variables; hence so do Γ, y:T[11]
    and Γ', y:T[11].
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何在 t[12] 中出现的自由变量必须是 y 或其他某个变量。Γ, y:T[11] 和 Γ', y:T[11] 显然在 y 上达成一致。否则，注意到在
    t[12] 中出现的除了 y 之外的任何变量也在 t = \y:T[11] 中出现，且根据假设 Γ 和 Γ' 在所有这些变量上达成一致；因此 Γ, y:T[11]
    和 Γ', y:T[11] 也是如此。
- en: If the last rule was T_App, then t = t[1] t[2], with Γ ⊢ t[1] ∈ T[2] → T and
    Γ ⊢ t[2] ∈ T[2]. One induction hypothesis states that for all contexts Γ', if
    Γ' agrees with Γ on the free variables in t[1], then t[1] has type T[2] → T under
    Γ'; there is a similar IH for t[2]. We must show that t[1] t[2] also has type
    T under Γ', given the assumption that Γ' agrees with Γ on all the free variables
    in t[1] t[2]. By T_App, it suffices to show that t[1] and t[2] each have the same
    type under Γ' as under Γ. But all free variables in t[1] are also free in t[1]
    t[2], and similarly for t[2]; hence the desired result follows from the induction
    hypotheses.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果最后一个规则是 T_App，则 t = t[1] t[2]，其中 Γ ⊢ t[1] ∈ T[2] → T 和 Γ ⊢ t[2] ∈ T[2]。一个归纳假设陈述对于所有上下文
    Γ'，如果 Γ' 在 t[1] 的自由变量上与 Γ 一致，则 t[1] 在 Γ' 下有类型 T[2] → T；t[2] 也有类似的 IH。我们必须证明 t[1]
    t[2] 在 Γ' 下也具有类型 T，假设 Γ' 在 t[1] t[2] 的所有自由变量上与 Γ 一致。根据 T_App，我们只需证明 t[1] 和 t[2]
    在 Γ' 下与在 Γ 下具有相同的类型。但是 t[1] 中的所有自由变量在 t[1] t[2] 中也是自由的，t[2] 也是如此；因此，所需的结果由归纳假设得出。
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we come to the conceptual heart of the proof that reduction
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们来到了归约证明的概念核心
- en: preserves types — namely, the observation that *substitution*
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保持类型——即 *替换* 的观察
- en: preserves types.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保持类型。
- en: 'Formally, the so-called *substitution lemma* says this:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 形式上，所谓的*替换引理*如下所述：
- en: Suppose we have a term t with a free variable x, and suppose
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设我们有一个带有自由变量 x 的项 t，并假设
- en: we've assigned a type T to t under the assumption that x has
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在假设 x 具有类型 T 的情况下为 t 分配了类型 T。
- en: some type U.  Also, suppose that we have some other term v and
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些类型 U。另外，假设我们有另一个项 v 并且
- en: that we've shown that v has type U.  Then, since v satisfies
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经证明 v 具有类型 U。然后，由于 v 满足
- en: the assumption we made about x when typing t, we can
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在对 t 进行类型时所做的假设，我们可以
- en: substitute v for each of the occurrences of x in t and
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 替换 v 到 t 中 x 的每个出现并
- en: obtain a new term that still has type T.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 获得一个仍然具有类型 T 的新项。
- en: '*Lemma*: If Γ,x:U ⊢ t ∈ T and ⊢ v ∈ U, then Γ ⊢ [x:=v]t ∈ T.'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*引理*：如果 Γ, x:U ⊢ t ∈ T 并且 ⊢ v ∈ U，则 Γ ⊢ [x:=v]t ∈ T。'
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: One technical subtlety in the statement of the lemma is that
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了一个技术细微之处在引理的陈述中，即
- en: we assign v the type U in the *empty* context — in other
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在*空*上下文中为 v 分配类型 — 其他
- en: words, we assume v is closed.  This assumption considerably
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 换句话说，我们假设 v 是封闭的。这个假设极大地
- en: simplifies the T_Abs case of the proof (compared to assuming
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化了证明的 T_Abs 情况（与假设相比
- en: Γ ⊢ v ∈ U, which would be the other reasonable assumption
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ ⊢ v ∈ U，这将是另一个合理的假设
- en: at this point) because the context invariance lemma then tells us
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一点上）因为上下文不变性引理告诉我们
- en: that v has type U in any context at all — we don't have to
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: v 在任何上下���中都具有类型 U — 我们不必
- en: worry about free variables in v clashing with the variable being
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 担心 v 中的自由变量与正在
- en: introduced into the context by T_Abs.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由 T_Abs 引入到上下文中。
- en: The substitution lemma can be viewed as a kind of commutation
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 替换引理可以看作是一种交换
- en: property.  Intuitively, it says that substitution and typing can
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 属性。直观地说，它表示替换和类型可以
- en: 'be done in either order: we can either assign types to the terms'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以按任何顺序执行：我们可以先为项分配类型
- en: t and v separately (under suitable contexts) and then combine
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分别为 t 和 v 分配类型（在适当的上下文中），然后组合
- en: them using substitution, or we can substitute first and then
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用替换，或者我们可以先替换然后
- en: assign a type to [x:=v] t — the result is the same either
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [x:=v] t 分配一个类型 — 结果无论是
- en: way.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方式。
- en: '*Proof*: We show, by induction on t, that for all T and'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*证明*：我们通过对 t 进行归纳，证明对于所有的 T 和'
- en: Γ, if Γ,x:U ⊢ t ∈ T and ⊢ v ∈ U, then Γ ⊢ [x:=v]t ∈ T.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ, 如果 Γ, x:U ⊢ t ∈ T 并且 ⊢ v ∈ U，则 Γ ⊢ [x:=v]t ∈ T。
- en: If t is a variable there are two cases to consider, depending on whether t is
    x or some other variable.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 t 是一个变量，有两种情况要考虑，取决于 t 是否为 x 或其他变量。
- en: 'If t = x, then from the fact that Γ, x:U ⊢ x ∈ T we conclude that U = T. We
    must show that [x:=v]x = v has type T under Γ, given the assumption that v has
    type U = T under the empty context. This follows from context invariance: if a
    closed term has type T in the empty context, it has that type in any context.'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 t = x，则由于 Γ, x:U ⊢ x ∈ T，我们得出 U = T。我们必须展示 [x:=v]x = v 具有类型 T 在 Γ 下，假设 v
    在空上下文中具有类型 U = T。这可以从上下文不变性得出：如果一个封闭项在空上下文中具有类型 T，则在任何上下文中都具有该类型。
- en: If t is some variable y that is not equal to x, then we need only note that
    y has the same type under Γ, x:U as under Γ.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 t 是一个不等于 x 的变量 y，那么我们只需要注意到在 Γ, x:U 下，y 与在 Γ 下的类型相同。
- en: If t is an abstraction \y:T[11]. t[12], then the IH tells us, for all Γ' and
    T', that if Γ',x:U ⊢ t[12] ∈ T' and ⊢ v ∈ U, then Γ' ⊢ [x:=v]t[12] ∈ T'.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 t 是一个抽象 \y:T[11]. t[12]，那么 IH 告诉我们，对于所有的 Γ' 和 T'，如果 Γ', x:U ⊢ t[12] ∈ T'
    并且 ⊢ v ∈ U，则 Γ' ⊢ [x:=v]t[12] ∈ T'。
- en: The substitution in the conclusion behaves differently depending on whether
    x and y are the same variable.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结论中的替换行为取决于 x 和 y 是否为相同变量。
- en: 'First, suppose x = y. Then, by the definition of substitution, [x:=v]t = t,
    so we just need to show Γ ⊢ t ∈ T. But we know Γ,x:U ⊢ t : T, and, since y does
    not appear free in \y:T[11]. t[12], the context invariance lemma yields Γ ⊢ t
    ∈ T.'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '首先，假设 x = y。然后，根据替换的定义，[x:=v]t = t，所以我们只需要展示 Γ ⊢ t ∈ T。但我们知道 Γ, x:U ⊢ t : T，并且，由于
    y 在 \y:T[11]. t[12] 中不自由出现，上下文不变性引理得出 Γ ⊢ t ∈ T。'
- en: Second, suppose x ≠ y. We know Γ,x:U,y:T[11] ⊢ t[12] ∈ T[12] by inversion of
    the typing relation, from which Γ,y:T[11],x:U ⊢ t[12] ∈ T[12] follows by the context
    invariance lemma, so the IH applies, giving us Γ,y:T[11] ⊢ [x:=v]t[12] ∈ T[12].
    By T_Abs, Γ ⊢ \y:T[11]. [x:=v]t[12] ∈ T[11]→T[12], and by the definition of substitution
    (noting that x ≠ y), Γ ⊢ \y:T[11]. [x:=v]t[12] ∈ T[11]→T[12] as required.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其次，假设 x ≠ y。我们知道 Γ, x:U, y:T[11] ⊢ t[12] ∈ T[12] 通过对类型关系进行反演，从中 Γ, y:T[11],
    x:U ⊢ t[12] ∈ T[12] 通过上下文不变性引理得出，因此 IH 适用，给出了 Γ, y:T[11] ⊢ [x:=v]t[12] ∈ T[12]。通过
    T_Abs， Γ ⊢ \y:T[11]. [x:=v]t[12] ∈ T[11]→T[12]，并通过替换的定义（注意 x ≠ y）， Γ ⊢ \y:T[11].
    [x:=v]t[12] ∈ T[11]→T[12] 如所需。
- en: If t is an application t[1] t[2], the result follows straightforwardly from
    the definition of substitution and the induction hypotheses.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果t是一个应用t[1] t[2]，结果直接由替换的定义和归纳假设得出。
- en: The remaining cases are similar to the application case.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩下的情况与应用情况类似。
- en: '*Technical note*: This proof is a rare case where an'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*技术说明*：这个证明是一个罕见的情况，其中'
- en: induction on terms, rather than typing derivations, yields a
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对项进行归纳，而不是类型推导，得到一个
- en: simpler argument.  The reason for this is that the assumption
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更简单的论点。原因是假设
- en: update Γ x U ⊢ t ∈ T is not completely generic, in the
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新Γ x U ⊢ t ∈ T并不是完全通用的，在
- en: sense that one of the "slots" in the typing relation — namely the
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 意味着类型关系中的一个“槽” — 即
- en: context — is not just a variable, and this means that Coq's
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上下文-不仅仅是一个变量，这意味��Coq的
- en: native induction tactic does not give us the induction hypothesis
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本地归纳策略不会给我们归纳假设
- en: that we want.  It is possible to work around this, but the needed
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们想要的。可以解决这个问题，但需要
- en: generalization is a little tricky.  The term t, on the other
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 泛化有点棘手。另一方面的项t
- en: hand, is completely generic.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 手，是完全通用的。
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Main Theorem
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主定理
- en: 'We now have the tools we need to prove preservation: if a closed'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们有了证明保持性所需的工具：如果一个封闭
- en: term t has type T and takes a step to t', then t'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 项t具有类型T并且步骤到t'，那么t'
- en: is also a closed term with type T.  In other words, the small-step
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也是一个具有类型T的封闭项。换句话说，小步
- en: reduction relation preserves types.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缩减关系保持类型。
- en: '[PRE17]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Proof*: By induction on the derivation of ⊢ t ∈ T.'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*证明*：通过对 ⊢ t ∈ T 的推导进行归纳。'
- en: We can immediately rule out T_Var, T_Abs, T_True, and T_False as the final rules
    in the derivation, since in each of these cases t cannot take a step.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以立即排除T_Var、T_Abs、T_True和T_False作为推导中的最终规则，因为在这些情况下t无法进行步骤。
- en: If the last rule in the derivation is T_App, then t = t[1] t[2]. There are three
    cases to consider, one for each rule that could be used to show that t[1] t[2]
    takes a step to t'.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果推导中的最后一个规则是T_App，则t = t[1] t[2]。有三种情况需要考虑，每种情况对应一个用于显示t[1] t[2]步骤到t'的规则。
- en: If t[1] t[2] takes a step by ST_App1, with t[1] stepping to t[1]', then by the
    IH t[1]' has the same type as t[1], and hence t[1]' t[2] has the same type as
    t[1] t[2].
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果t[1] t[2]通过ST_App1步骤，其中t[1]步骤到t[1]'，那么根据IH，t[1]'与t[1]具有相同类型，因此t[1]' t[2]与t[1]
    t[2]具有相同类型。
- en: The ST_App2 case is similar.
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ST_App2情况类似。
- en: If t[1] t[2] takes a step by ST_AppAbs, then t[1] = \x:T[11].t12 and t[1] t[2]
    steps to [x:=t[2]]t[12]; the desired result now follows from the fact that substitution
    preserves types.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果t[1] t[2]通过ST_AppAbs步骤，则t[1] = \x:T[11].t12，t[1] t[2]步骤到[x:=t[2]]t[12]；现在所需的结果由于替换保持类型的事实而得出。
- en: If the last rule in the derivation is T_If, then t = if t[1] then t[2] else
    t[3], and there are again three cases depending on how t steps.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果推导中的最后一个规则是T_If，则t = if t[1] then t[2] else t[3]，并且根据t的步骤有三种情况。
- en: If t steps to t[2] or t[3], the result is immediate, since t[2] and t[3] have
    the same type as t.
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果t步骤到t[2]或t[3]，结果是显而易见的，因为t[2]和t[3]与t具有相同的类型。
- en: Otherwise, t steps by ST_If, and the desired conclusion follows directly from
    the induction hypothesis.
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，通过ST_If，t步骤，所需结论直接由归纳假设得出。
- en: '[PRE18]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Exercise: 2 stars, recommendedM (subject_expansion_stlc)'
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2星，推荐M（subject_expansion_stlc）
- en: An exercise in the [Types](Types.html) chapter asked about the *subject expansion*
    property for the simple language of arithmetic and
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[类型](Types.html)章节中的一个练习询问算术简单语言的*主题扩展*属性'
- en: boolean expressions.  Does this property hold for STLC?  That is,
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔表达式。STLC是否满足这个属性？也就是说，
- en: is it always the case that, if t ⇒ t' and has_type t' T,
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果t ⇒ t'并且has_type t' T，
- en: then empty ⊢ t ∈ T?  If so, prove it.  If not, give a
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后empty ⊢ t ∈ T？如果是这样，请证明。如果不是，请给出一个
- en: counter-example not involving conditionals.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不涉及条件的反例。
- en: (* FILL IN HERE *)
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (* 在这里填写 *)
- en: ☐
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: '[PRE19]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Definition stuck (t:tm) : Prop :='
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 定义卡住（t:tm）：Prop =
- en: (normal_form step) t ∧ ¬ value t.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: （normal_form step）t ∧ ¬ value t。
- en: 'Corollary soundness : ∀t t'' T,'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 推论正确性：∀t t' T，
- en: empty ⊢ t ∈ T →
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: empty ⊢ t ∈ T →
- en: t ⇒* t' →
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: t ⇒* t' →
- en: ~(stuck t').
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: ~(卡住t')。
- en: Proof.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明。
- en: intros t t' T Hhas_type Hmulti. unfold [stuck](StlcProp.html#STLCProp.stuck).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: intros t t' T Hhas_type Hmulti. 展开[卡住](StlcProp.html#STLCProp.stuck)。
- en: intros [Hnf Hnot_val]. unfold [normal_form](Smallstep.html#normal_form) in Hnf.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: intros [Hnf Hnot_val]。在Hnf中展开[normal_form](Smallstep.html#normal_form)。
- en: induction Hmulti.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 对Hmulti进行归纳。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *) 已承认。
- en: '[PRE20]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Uniqueness of Types
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型的唯一性
- en: 'Exercise: 3 starsM (types_unique)'
  id: totrans-195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：3星M（types_unique）
- en: 'Another nice property of the STLC is that types are unique: a'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: STLC 的另一个好处是类型是唯一的：
- en: given term (in a given context) has at most one type.  Formalize this statement
    and prove it.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定术语（在给定上下文中）最多只有一个类型。形式化这个陈述并证明它。
- en: '[PRE21]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: ☐
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: '[PRE22]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: (* FILL IN HERE *)
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *)
- en: '[PRE23]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: End STLCProp.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 结束 STLCProp。
- en: '[PRE24]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Module STLCArith.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 STLCArith。
- en: Import STLC.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 STLC。
- en: '[PRE25]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Inductive ty : Type :='
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '归纳定义 ty : Type :='
- en: '| TArrow : ty → ty → ty'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '| TArrow : ty → ty → ty'
- en: '| TNat   : ty.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '| TNat   : ty.'
- en: '[PRE26]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Inductive tm : Type :='
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '归纳定义 tm : Type :='
- en: '| tvar : id → tm'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '| tvar : id → tm'
- en: '| tapp : tm → tm → tm'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '| tapp : tm → tm → tm'
- en: '| tabs : id → ty → tm → tm'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '| tabs : id → ty → tm → tm'
- en: '| tnat  : nat → tm'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '| tnat  : nat → tm'
- en: '| tsucc : tm → tm'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '| tsucc : tm → tm'
- en: '| tpred : tm → tm'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '| tpred : tm → tm'
- en: '| tmult : tm → tm → tm'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '| tmult : tm → tm → tm'
- en: '| tif0  : tm → tm → tm → tm.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '| tif0  : tm → tm → tm → tm.'
- en: '[PRE27]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: (* FILL IN HERE *)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写 *)
- en: '[PRE28]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: End STLCArith.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 结束 STLCArith。
- en: '[PRE29]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
