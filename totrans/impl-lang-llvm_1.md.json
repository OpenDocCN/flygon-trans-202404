["```\n# Compute the x'th fibonacci number.\ndef fib(x)\n  if x < 3 then\n    1\n  else\n    fib(x-1)+fib(x-2)\n\n# This expression will compute the 40th number.\nfib(40) \n```", "```\nextern sin(arg);\nextern cos(arg);\nextern atan2(arg1 arg2);\n\natan2(sin(.4), cos(42)) \n```", "```\n// The lexer returns tokens [0-255] if it is an unknown character, otherwise one\n// of these for known things.\nenum Token {\n  tok_eof = -1,\n\n  // commands\n  tok_def = -2, tok_extern = -3,\n\n  // primary\n  tok_identifier = -4, tok_number = -5,\n};\n\nstatic std::string IdentifierStr;  // Filled in if tok_identifier\nstatic double NumVal;              // Filled in if tok_number \n```", "```\n/// gettok - Return the next token from standard input.\nstatic int gettok() {\n  static int LastChar = ' ';\n\n  // Skip any whitespace.\n  while (isspace(LastChar))\n    LastChar = getchar(); \n```", "```\nif (isalpha(LastChar)) { // identifier: [a-zA-Z][a-zA-Z0-9]*\n  IdentifierStr = LastChar;\n  while (isalnum((LastChar = getchar())))\n    IdentifierStr += LastChar;\n\n  if (IdentifierStr == \"def\") return tok_def;\n  if (IdentifierStr == \"extern\") return tok_extern;\n  return tok_identifier;\n} \n```", "```\nif (isdigit(LastChar) || LastChar == '.') {   // Number: [0-9.]+\n  std::string NumStr;\n  do {\n    NumStr += LastChar;\n    LastChar = getchar();\n  } while (isdigit(LastChar) || LastChar == '.');\n\n  NumVal = strtod(NumStr.c_str(), 0);\n  return tok_number;\n} \n```", "```\nif (LastChar == '#') {\n  // Comment until end of line.\n  do LastChar = getchar();\n  while (LastChar != EOF && LastChar != '\\n' && LastChar != '\\r');\n\n  if (LastChar != EOF)\n    return gettok();\n} \n```", "```\n // Check for end of file.  Don't eat the EOF.\n  if (LastChar == EOF)\n    return tok_eof;\n\n  // Otherwise, just return the character as its ascii value.\n  int ThisChar = LastChar;\n  LastChar = getchar();\n  return ThisChar;\n} \n```"]