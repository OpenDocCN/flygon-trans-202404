- en: Locks and Condition Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lecture Notes for CS 140
  prefs: []
  type: TYPE_NORMAL
- en: Spring 2014
  prefs: []
  type: TYPE_NORMAL
- en: John Ousterhout
  prefs: []
  type: TYPE_NORMAL
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    Sections 5.2-5.4.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Needed: higher-level synchronization mechanism that provides'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mutual exclusion: easy to create critical sections'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scheduling: block thread until some desired event occurs'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Locks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Lock*: an object that can only be owned by a single thread at any given time.
    Basic operations on a lock:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'acquire: mark the lock as owned by the current thread; if some other thread
    already owns the lock then first wait until the lock is free. Lock typically includes
    a queue to keep track of multiple waiting threads.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'release: mark the lock as free (it must currently be owned by the calling thread).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Too much milk solution with locks (using Pintos APIs):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A more complex example: producer/consumer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Producers add characters to a buffer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Consumers remove characters from the buffer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Characters will be removed in the same order added
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Version 1:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Version 2 (handle empty/full cases):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Condition Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Synchronization mechanisms need more than just mutual exclusion; also need a
    way to wait for another thread to do something (e.g., wait for a character to
    be added to the buffer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Condition variables*: used to wait for a particular condition to become true
    (e.g. characters in buffer).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'wait(condition, lock): release lock, put thread to sleep until condition is
    signaled; when thread wakes up again, re-acquire lock before returning.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'signal(condition, lock): if any threads are waiting on condition, wake up one
    of them. Caller must hold lock, which must be the same as the lock used in the
    wait call.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'broadcast(condition, lock): same as signal, except wake up all waiting threads.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: after signal, signaling thread keeps lock, waking thread goes on the
    queue waiting for the lock.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Warning: when a thread wakes up after cond_wait there is no guarantee that
    the desired condition still exists: another thread might have snuck in.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Producer/Consumer, version 3 (with condition variables):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Monitors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When locks and condition variables are used together like this, the result
    is called a *monitor* :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A collection of procedures manipulating a shared data structure.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One lock that must be held whenever accessing the shared data (typically each
    procedure acquires the lock at the very beginning and releases the lock before
    returning).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One or more condition variables used for waiting.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other synchronization mechanisms besides locks and condition variables.
    Be sure to read about semaphores in the book or in the Pintos documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
