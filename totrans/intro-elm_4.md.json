["```\ntoFullName person =\n  person.firstName ++ \" \" ++ person.lastName\n\nfullName =\n  toFullName { fistName = \"Hermann\", lastName = \"Hesse\" } \n```", "```\n-- TYPE MISMATCH ---------------------------------------------------------------\n\nThe argument to function `toFullName` is causing a mismatch.\n\n6\u2502   toFullName { fistName = \"Hermann\", lastName = \"Hesse\" }\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nFunction `toFullName` is expecting the argument to be:\n\n    { \u2026, firstName : \u2026 }\n\nBut it is:\n\n    { \u2026, fistName : \u2026 }\n\nHint: I compared the record fields and found some potential typos.\n\n    firstName <-> fistName \n```", "```\n---- elm repl 0.18.0 -----------------------------------------------------------\n :help for help, :exit to exit, more at <https://github.com/elm-lang/elm-repl>\n--------------------------------------------------------------------------------\n> \n```", "```\n> \"hello\"\n\"hello\" : String\n\n> not True\nFalse : Bool\n\n> round 3.1415\n3 : Int \n```", "```\n> [ \"Alice\", \"Bob\" ]\n[ \"Alice\", \"Bob\" ] : List String\n\n> [ 1.0, 8.6, 42.1 ]\n[ 1.0, 8.6, 42.1 ] : List Float\n\n> []\n[] : List a \n```", "```\n> import String\n> String.length\n<function> : String -> Int \n```", "```\n> String.length \"Supercalifragilisticexpialidocious\"\n34 : Int \n```", "```\n> String.length [1,2,3]\n-- error!\n\n> String.length True\n-- error! \n```", "```\n> \\n -> n / 2\n<function> : Float -> Float \n```", "```\n> (\\n -> n / 2) 128\n64 : Float \n```", "```\n> oneHundredAndTwentyEight = 128.0\n128 : Float\n\n> half = \\n -> n / 2\n<function> : Float -> Float\n\n> half oneHundredAndTwentyEight\n64 : Float \n```", "```\n> half n = n / 2\n<function> : Float -> Float \n```", "```\n> half = \\n -> n / 2\n<function> : Float -> Float \n```", "```\n> divide x y = x / y\n<function> : Float -> Float -> Float\n\n> divide 3 2\n1.5 : Float \n```", "```\n> divide x y = x / y\n<function> : Float -> Float -> Float\n\n> divide x = \\y -> x / y\n<function> : Float -> Float -> Float\n\n> divide = \\x -> (\\y -> x / y)\n<function> : Float -> Float -> Float \n```", "```\n divide 3 2\n  (divide 3) 2                 -- Step 1 - Add the implicit parentheses\n  ((\\x -> (\\y -> x / y)) 3) 2  -- Step 2 - Expand `divide`\n  (\\y -> 3 / y) 2              -- Step 3 - Replace x with 3\n  3 / 2                        -- Step 4 - Replace y with 2\n  1.5                          -- Step 5 - Do the math \n```", "```\n> (\\y -> 3 / y)\n<function> : Float -> Float \n```", "```\n> (\\x -> (\\y -> x / y))\n<function> : Float -> Float -> Float \n```", "```\n> import String\n> String.repeat\n<function> : Int -> String -> String \n```", "```\n> divide 128\n<function> : Float -> Float\n\n> String.repeat 3\n<function> : String -> String \n```", "```\nhalf : Float -> Float\nhalf n =\n  n / 2\n\ndivide : Float -> Float -> Float\ndivide x y =\n  x / y\n\naskVegeta : Int -> String\naskVegeta powerLevel =\n  if powerLevel > 9000 then\n    \"It's over 9000!!!\"\n\n  else\n    \"It is \" ++ toString powerLevel ++ \".\" \n```", "```\nhasBio : { name : String, bio : String, pic : String } -> Bool\nhasBio user =\n  String.length user.bio > 0 \n```", "```\ntype alias User =\n  { name : String\n  , bio : String\n  , pic : String\n  } \n```", "```\nhasBio : User -> Bool\nhasBio user =\n  String.length user.bio > 0 \n```", "```\naddBio : String -> User -> User\naddBio bio user =\n  { user | bio = bio } \n```", "```\n> User : String -> String -> String -> User \n> ```", "```\n> > type alias User = { name : String, bio : String, pic : String }\n> \n> > User \"Tom\" \"Friendly Carpenter\" \"http://example.com/tom.jpg\"\n> { name = \"Tom\", bio = \"Friendly Carpenter\", pic = \"http://example.com/tom.jpg\" } : User \n> ```", "```\n> type Visibility = All | Active | Completed\n\n> All\nAll : Visibility\n\n> Active\nActive : Visibility\n\n> Completed\nCompleted : Visibility \n```", "```\ntype alias Task = { task : String, complete : Bool }\n\nbuy : Task\nbuy =\n  { task = \"Buy milk\", complete = True }\n\ndrink : Task\ndrink =\n  { task = \"Drink milk\", complete = False }\n\ntasks : List Task\ntasks =\n  [ buy, drink ]\n\n-- keep : Visibility -> List Task -> List Task\n\n-- keep All tasks == [buy,drink]\n-- keep Active tasks == [drink]\n-- keep Complete tasks == [buy] \n```", "```\nkeep : Visibility -> List Task -> List Task\nkeep visibility tasks =\n  case visibility of\n    All ->\n      tasks\n\n    Active ->\n      List.filter (\\task -> not task.complete) tasks\n\n    Completed ->\n      List.filter (\\task -> task.complete) tasks \n```", "```\n> type User = Anonymous | Named String\n\n> Anonymous\nAnonymous : User\n\n> Named\n<function> : String -> User\n\n> Named \"AzureDiamond\"\nNamed \"AzureDiamond\" : User\n\n> Named \"abraham-lincoln\"\nNamed \"abraham-lincoln\" : User \n```", "```\n Anonymous\n  Named \"AzureDiamond\"\n  Named \"abraham-lincoln\"\n  Named \"catface420\"\n  Named \"Tom\"\n  ... \n```", "```\nuserPhoto : User -> String\nuserPhoto user =\n  case user of\n    Anonymous ->\n      \"anon.png\"\n\n    Named name ->\n      \"users/\" ++ name ++ \".png\" \n```", "```\nactiveUsers : List User\nactiveUsers =\n  [ Anonymous, Named \"catface420\", Named \"AzureDiamond\", Anonymous ]\n\nphotos : List String\nphotos =\n  List.map userPhoto activeUsers\n\n-- [ \"anon.png\", \"users/catface420.png\", \"users/AzureDiamond.png\", \"anon.png\" ] \n```", "```\ntype alias LogsInfo =\n  { logs : List String\n  }\n\ntype alias TimeInfo =\n  { events : List (Time, Float)\n  , yAxis : String\n  }\n\ntype alias ScatterInfo =\n  { points : List (Float, Float)\n  , xAxis : String\n  , yAxis : String\n  }\n\n-- viewLogs : LogsInfo -> Html msg\n-- viewTime : TimeInfo -> Html msg\n-- viewScatter : ScatterInfo -> Html msg \n```", "```\n> type Widget = Logs LogsInfo | TimePlot TimeInfo | ScatterPlot ScatterInfo\n\n> Logs\n<function> : LogsInfo -> Widget\n\n> TimePlot\n<function> : TimeInfo -> Widget\n\n> ScatterPlot\n<function> : ScatterInfo -> Widget \n```", "```\nview : Widget -> Html msg\nview widget =\n  case widget of\n    Logs info ->\n      viewLogs info\n\n    TimePlot info ->\n      viewTime info\n\n    ScatterPlot info ->\n      viewScatter info \n```", "```\n> type IntList = Empty | Node Int IntList\n\n> Empty\nEmpty : IntList\n\n> Node\n<function> : Int -> IntList -> IntList\n\n> Node 42 Empty\nNode 42 Empty : IntList\n\n> Node 64 (Node 128 Empty)\nNode 64 (Node 128 Empty) : IntList \n```", "```\nsum : IntList -> Int\nsum numbers =\n  case numbers of\n    Empty ->\n      0\n\n    Node n remainingNumbers ->\n      n + sum remainingNumbers \n```", "```\n sum (Node 1 (Node 2 (Node 3 Empty)))\n  1 + sum (Node 2 (Node 3 Empty))\n  1 + (2 + sum (Node 3 Empty))\n  1 + (2 + (3 + sum Empty))\n  1 + (2 + (3 + 0))\n  1 + (2 + 3)\n  1 + 5\n  6 \n```", "```\n> type List a = Empty | Node a (List a)\n\n> Empty\nEmpty : List a\n\n> Node\n<function> : a -> List a -> List a\n\n> Node \"hi\" Empty\nNode \"hi\" Empty : List String\n\n> Node 1.618 (Node 6.283 Empty)\nNode 1.618 (Node 6.283 Empty) : List Float \n```", "```\n> type Tree a = Empty | Node a (Tree a) (Tree a)\n\n> Node\n<function> : a -> Tree a -> Tree a -> Tree a\n\n> Node \"hi\" Empty Empty\nNode \"hi\" Empty Empty : Tree String \n```", "```\ntype Boolean\n    = T\n    | F\n    | Not Boolean\n    | And Boolean Boolean\n    | Or Boolean Boolean\n\ntrue = Or T F\nfalse = And T (Not T) \n```"]