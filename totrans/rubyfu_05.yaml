- en: Module 0x5 | Exploitation Kung Fu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Module 0x5 | Exploitation Kung Fu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Skeleton exploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's really a good thing to have a skeleton exploit to edit and use quickly
    during your exploitation process.
  prefs: []
  type: TYPE_NORMAL
- en: Network base
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To execute it
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notice that some services has to receive from it and some does not.
  prefs: []
  type: TYPE_NORMAL
- en: File base
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating a simple exploit file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To execute it
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fuzzer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fuzzers usually used for general or precisely applications functions. In this
    part we'll show how to fuzz most known services using ruby. Remember, Fuzzing
    is an **Art of Hitting Things**, it's not about the tools.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fuzzer Types**'
  prefs: []
  type: TYPE_NORMAL
- en: Mutation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metadata/File format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FTP Fuzzer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The general idea of fuzzing FTP service is to test all commands buffer sizes.
    However, not the case isn't the same all the time, for example, testing username
    and password buffers. In addition, the same technique could be applied for many
    services even customized services.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I was thinking of making it a bit more elegant to give myself a chance to inspect
    and configure each command separately.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that, this script can be used for other protocols (IMAP, POP3, etc) since
    it deals with socket!.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Calling Windows APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Calling Windows APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due playing with MS-Windows Exploitation development, I was using some **C**
    applications that calling Windows APIs and I wanted to give it a try and take
    it step by step.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest example came to my mind is calling the *MessageBoxA* function.
    If we take a look at the [MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/ms645505.aspx)
    of *MessageBoxA* function, we'll find at very beginning the function description
    and its arguments and returns. At the Requirements section, we'll find the required
    DLL to call *MessageBoxA* function which is *User32.dll* library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let's do it,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](MessageBoxA1.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Source and explaination](http://www.rubytips.org/2008/05/13/accessing-windows-api-from-ruby-using-win32api-library/)'
  prefs: []
  type: TYPE_NORMAL
- en: That's was really easy! but, `Win32API` is going to be deprecated or it's already
    deprecated at the moment you read this part. Ruby have moved all dealing with
    C, dll functions to `Fiddle` class which is a wrapper of `libffi` C library which
    provides a portable interface to allow languages to call code from another language.
  prefs: []
  type: TYPE_NORMAL
- en: If we build our MessageBoxA script again using `Fiddle` it will be like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[Source](https://gist.github.com/Youka/3ebbdfd03454afa7d0c4)'
  prefs: []
  type: TYPE_NORMAL
- en: As you can the script is getting much bigger but, important thing to mention
    is, Using `Win32API` is going to be a real pain for bigger or more complicated
    tasks, in another hand `Fiddle` is more elegant and readable than `Win32API`
  prefs: []
  type: TYPE_NORMAL
- en: At that point, I was wondering if I can write something like an old frind application
    call [*arwin*](http://www.vividmachines.com/shellcode/arwin.c) which finds a Function
    location in a Windows library. With the help of MSDN [LoadLibrary](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684175(v=vs.85.aspx)
    and [GetProcAddress](https://msdn.microsoft.com/en-us/library/windows/desktop/ms683212(v=vs.85.aspx)
    documentations let's do it.
  prefs: []
  type: TYPE_NORMAL
- en: '**arwin.rb**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Results
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](Arwin1.png)'
  prefs: []
  type: TYPE_IMG
- en: Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code Design Pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metasploit uses **Facade** design pattern which encapsulates/simplifies the
    complex part of the framework by implementing it as interfaces which makes development
    really easy and elegant. I found that the [Wikipedia](https://en.wikipedia.org/wiki/Facade_pattern#Ruby)
    example of facades is descent to be presented
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the above code, the developer who wants to use the **Computer
    framework** don't have to deal with the complex codebase (classes, methods and
    calculations) directly. Instead, he will use a simple interface class called **`ComputerFacade`**
    which instantiate(as objects) all classes once you call it.
  prefs: []
  type: TYPE_NORMAL
- en: Another exist example in ruby language itself is `open-uri` standard library,
    which encapsulates `net/http` and `uri` libraries and makes theme looks like opening
    ordinary file. To see how `open-uri` makes things easy, We'll write a code that
    send get request to *Ruby.net* and get the response with both regular and `open-uri`
    way
  prefs: []
  type: TYPE_NORMAL
- en: '**regular way**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**facade way**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: More about Facade
  prefs: []
  type: TYPE_NORMAL
- en: '[Practicingruby | Structural Design Patterns](https://practicingruby.com/articles/structural-design-patterns)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Wikipedia| Facade Pattern#Ruby](https://en.wikipedia.org/wiki/Facade_pattern#Ruby)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sourcemaking | Facade Design Pattern](https://sourcemaking.com/design_patterns/facade)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit Structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](MSF-struct.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in figure above, Metasploit libraries are working as interface
    serves all modules, interfaces, tools and plugins. That's exactly represents what
    we've explained in **Code Design Pattern**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Absolute module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a very basic structure of a general module.
  prefs: []
  type: TYPE_NORMAL
- en: I'll Add some comments for explanation purpose.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The result is
  prefs: []
  type: TYPE_NORMAL
- en: '![](msf_template1.png)'
  prefs: []
  type: TYPE_IMG
- en: Load Metasploit module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To load/reload the Metasploit module you're working on, you can put the script
    in your user's Metasploit path or in the Metasploit framework path
  prefs: []
  type: TYPE_NORMAL
- en: User's Metasploit path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Metasploit framework path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To make Metasploit load/reload the script use one of the following ways
  prefs: []
  type: TYPE_NORMAL
- en: Exit from msfconsole then run it again
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use `reload_all` to reload all modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your module is previously loaded and you made changes on it just use `reload`
    but you have to be using the module, in another work `use [YOUR MODULE]`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note:** It''s really important to know the official Metasploit development
    documentation **(** [http://www.rubydoc.info/github/rapid7/metasploit-framework/](http://www.rubydoc.info/github/rapid7/metasploit-framework/)
    **)**'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Auxiliary module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Auxiliary module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scanner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Basic Scanner modules
  prefs: []
  type: TYPE_NORMAL
- en: WordPress XML-RPC Massive Brute Force
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: WordPress CMS framework support XML-RPC service to interact with almost all
    functions in the framework. Some functions require authentication. The main issues
    lies in the you can authenticate many times within the same request. WordPress
    accepts about 1788 lines of XML request which allows us to send tremendous number
    of login tries in a single request. So how awesome is this? Let me explain.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you have to brute force one user with 6000 passwords? How many
    requests you have to send in the normal brute force technique? It's 6000 requests.
    Using our module will need to 4 requests only of you use the default CHUNKSIZE
    which is 1500 password per request!!!. NO MULTI-THREADING even you use multi-threading
    in the traditional brute force technique you'll send 6000 request a few of its
    are parallel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: So from above you can understand how the XML request will be build. Now How
    the reply will be? To simplify this we'll test a single user once with wrong password
    another with correct password to understand the response behavior
  prefs: []
  type: TYPE_NORMAL
- en: '**wrong password response**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We noticed the following
  prefs: []
  type: TYPE_NORMAL
- en: '`<name>faultCode</name>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<int>403</int>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<string>Incorrect username or password.</string>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually we rely one the string response '*Incorrect username or password.*',
    but what if the WordPress language wasn't English? so the best thing is the integer
    response which is `403`
  prefs: []
  type: TYPE_NORMAL
- en: '**correct password response**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We noticed that long reply with the result of called method `wp.getUsersBlogs`
  prefs: []
  type: TYPE_NORMAL
- en: Awesome, right?
  prefs: []
  type: TYPE_NORMAL
- en: The tricky part is just begun! Since we will be sending thousands of passwords
    in one request and the reply will be rally huge XML files, how we'll find the
    position of the correct credentials? The answer is, by using the powerful ruby
    iteration methods, particularly `each_with_index` method.
  prefs: []
  type: TYPE_NORMAL
- en: Enough talking, show me the code!
  prefs: []
  type: TYPE_NORMAL
- en: What do we want?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create Auxiliary module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deal with Web Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deal with WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe The module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let people know we created this module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add references about the vulnerability that we exploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options to set the target URI, port, user, pass list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read username and password lists as arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build/Generate XML file takes a user and iterate around the passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check if target is running WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check if target enabling RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup the HTTP with XML POST request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parse XML request and response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find the exact correct credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check if we got blocked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing the result and find which password is correct
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check if the module has been written correctly (msftidy.rb)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create Auxiliary module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deal with Web Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deal with WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe The module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let people know we created this module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add references about the vulnerability that we exploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options to set the target URI, port, user, pass list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Read username and password lists as arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Build/Generate XML file takes a user and iterate around the passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Check if target is running WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check if target enabling RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Setup the HTTP with XML POST request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Parse XML request and response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find the exact correct credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check if we got blocked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing the result and find which password is correct
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping up
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Check if the module has been written correctly (msftidy.rb)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**Run it**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Exploit module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploit module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remote Exploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FTP exploit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our example will be a very simple vulnerable FTP server called ability server.
  prefs: []
  type: TYPE_NORMAL
- en: What do we want?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create Exploit module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit FTP Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set exploit rank
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe The module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let people know we created this module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add references about the vulnerability that we exploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose a default payload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the Bad characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set Disclosure Date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targets and it's return address (EIP offset)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options to set the target IP, port. Also username and password if required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the target if vulnerable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send the exploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check if the module has been written correctly (msftidy.rb)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create Exploit module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit FTP Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put a rank for the module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Describe The module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let people know we created this module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add references about the vulnerability that we exploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose a default payload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the Bad characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set Disclosure Date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targets and it's return address (EIP offset)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options to set the target IP, port. Also username and password if required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Check the target if vulnerable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Send the exploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Check if the module has been written correctly (msftidy.rb)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Meterpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meterpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the official [wiki](https://github.com/rapid7/metasploit-framework/wiki/Meterpreter),
    The Meterpreter is an advanced payload that has been part of Metasploit since
    2004\. Originally written by Matt "skape" Miller, dozens of contributors have
    provided additional code, and the payload continues to be frequently updated as
    part of Metasploit development.
  prefs: []
  type: TYPE_NORMAL
- en: Meterpreter is a payload framework that provides APIs to interact with by writing
    scripts and plugins that increase its capabilities. You can find Meterpreter scripts
    in `metasploit-framework/scripts/meterpreter` those scripts that you use in post
    exploitation using **run** (e.g. getuid, getsystem, migrate, scraper, etc). Meterpreter
    source code is located in `metasploit-framework/lib/rex/post/meterpreter`.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, you can't imagine the power of Meterpreter until you read its [wishlist
    and features](https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Wishlist)
    not just use it.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, let's to get a Meterpreter shell on a victim machine to start
    practicing it inline then we can write some scripts
  prefs: []
  type: TYPE_NORMAL
- en: Once you get the Meterpreter shell type `irb` to be dropped into ruby's IRB.
    Most of required modules will be loaded already. Then type `require 'irb/completion'`
    to support auto-completion for the IRB console, just like the follows
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If you would like to use `Pry` instead of `irb` then type `pry` and make the
    console more readable. Personally, I'd prefer `pry`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, you've been dropped to the IRB console with an instance variable
    called `client` of the running Meterpreter.
  prefs: []
  type: TYPE_NORMAL
- en: Try this as a start
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: To list all associated methods with `client` instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will return an array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Let's to check some of the interesting methods there.
  prefs: []
  type: TYPE_NORMAL
- en: Victim's IP address and port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Victim's computer information and plat form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Get the current exploit datastore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Returns a hash contains all the exploit information that result to this Meterpreter
    session
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: API and Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meterpreter API and Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meterpreter extensions are located in `metasploit-framework/lib/rex/post/meterpreter`.
    It's highly recommended to browse and open the files to understand the code and
    it's style.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extension ClientCore : `core`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Path**'
  prefs: []
  type: TYPE_NORMAL
- en: '`metasploit-framework/lib/rex/post/meterpreter/client_core.rb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '**use** method is used to load meterpreter extensions which is used in the
    meterpreter console (ex. `use sniffer`, `use mimikatz`, etc )'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: to list all loadable extensions in meterpreter console use `use -l` command.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: From IRB console of the meterpreter, let's try to use *sniffer* extension
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it returns a `nil` because the *sniffer* extension hasn't yet
    loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try to load the extension
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As you can see it returns a `nil` because the method *use* is available in the
    `core` extension not in the meterpreter `client` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load extension: `load sniffer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: To check all *sniffer* extension methods, go to `metasploit-framework/lib/rex/post/meterpreter/extensions/sniffer/sniffer.rb`
  prefs: []
  type: TYPE_NORMAL
- en: also, from IRB, get all methods as we know
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: which returns an array of all available methods
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Getting available interfaces: `sniffer_interfaces`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: which returns array of hashes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Extension Stdapi::Fs : `fs`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Path**'
  prefs: []
  type: TYPE_NORMAL
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/stdapi.rb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/fs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Dir class: `dir.rb`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the extensions available for `fs` is **Dir** located in `metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/fs/dir.rb`.
    Let's to use some of its methods which we can know from `client.fs.dir.methods`
    or from source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get current directory: `pwd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: List all files and directories in the current directory `ls`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the current directory: `cd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new directory: `mkdir`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'File class: `file.rb`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Discover **File** class, let's begin with a simple search. Try to download and
    download files.
  prefs: []
  type: TYPE_NORMAL
- en: Search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Extension Stdapi::Fs : `sys`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Path**'
  prefs: []
  type: TYPE_NORMAL
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/stdapi.rb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/sys`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Config class: `config.rb`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Get User ID: `getuid`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get system information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check if current process is running as SYSTEM user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enables all possible privileges: `getpriv`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Process class: `process.rb`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Get the current Process ID: `getpid`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get all exist processes with its details (pid, ppid, name, path, session, user,
    arch): `ps`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Extension Stdapi::Fs : `net`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Path**'
  prefs: []
  type: TYPE_NORMAL
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/stdapi.rb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/net`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the current victim interfaces: `ifconfig` or `ipconfig`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get network stat: `netstat`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the ARP table: `arp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Routes: `route`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get Proxy settings: `getproxy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see how easy to get familiar with meterpreter API. there are other
    extensions you can play with
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: You can add more about those too in Rubyfu!
  prefs: []
  type: TYPE_NORMAL
- en: Meterpreter Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meterpreter Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the Meterpreter scripting is planned to be removed and replaced with POST
    module, we'll put a skeleton Meterpreter script only.
  prefs: []
  type: TYPE_NORMAL
- en: You can locate you new Meterpreter script in
  prefs: []
  type: TYPE_NORMAL
- en: The framework it-self `metasploit-framework/scripts/meterpreter` or,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In your Metasploit user's path `~/.msf/scripts/meterpreter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Absolute Meterpreter Script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The script is directly quoted from the Metasploit samples
  prefs: []
  type: TYPE_NORMAL
- en: Run Process migration on multiple meterpreter sessions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From `msfconsole` and after getting all metherpreter sessions, go to `post/windows/manage/migrate`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** make sure you''ve the sufficient privileges to migrate to the designated
    processe'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Then create a file with `rc` extension including the `<ruby> </ruby>` tages
  prefs: []
  type: TYPE_NORMAL
- en: '**mass-mirgation.rc**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Now, from msfconsole,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Result will be similar to
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Railgun API Extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Railgun API Extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quoting from [Railgun presentation in DefCon20](https://www.defcon.org/images/defcon-20/dc-20-presentations/Maloney/DEFCON-20-Maloney-Railgun.pdf),
    **Railgun** is an extension to the Meterpreter stdapi, allows arbitrary loading
    of DLLs. Since Windows API DLLs are always at known paths, we can always load
    them.
  prefs: []
  type: TYPE_NORMAL
- en: The ultimate benefit of using Railgun is getting the ability of dynamically
    access to the entire windows API on the system. By calling APIs from user process,
    we can impersonate user, anything become possible.
  prefs: []
  type: TYPE_NORMAL
- en: Railgun is used as POST exploitation API so knowing it well opens a lot of new
    possibillities to the post exploitation phase.
  prefs: []
  type: TYPE_NORMAL
- en: '**Path**'
  prefs: []
  type: TYPE_NORMAL
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/railgun`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All defined DLLs are located in `metasploit-framework/tree/master/lib/rex/post/meterpreter/extensions/stdapi/railgun/def`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an extension, we'll test it as the same as we were testing previous extensions,
    buy tripping the Meterpreter console to `irb` console. We'll have instantiated
    object called `client` or `session` as we know previously.
  prefs: []
  type: TYPE_NORMAL
- en: To list all loaded DLL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To list all available function and its parameters for specific DLL (say `user32`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let's start using it,
  prefs: []
  type: TYPE_NORMAL
- en: Popping-up a message box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Results
  prefs: []
  type: TYPE_NORMAL
- en: '![](msf_meter_railgun1.png)'
  prefs: []
  type: TYPE_IMG
- en: Lock Windows Screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: metasm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasm is a cross-architecture assembler, disassembler, linker, and debugger.
    It is written in such a way that it is easy to add support for new architectures.
    For now, the following architectures are in:'
  prefs: []
  type: TYPE_NORMAL
- en: Intel Ia32.txt (16 and 32bits)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intel X86_64.txt (*aka* Ia32 64bits, X64, AMD64)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sh4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports low and high-level debugging support (Ia32 only for now) under Windows,
    Linux and remote (via a gdbserver). Metasm is included in Metasploit by default.
  prefs: []
  type: TYPE_NORMAL
- en: Install Metasm gem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: More about installation [here](https://github.com/jjyg/metasm/blob/master/doc/install_notes.txt).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Converting Assembly to Op-code - metasm-shell.rb
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find metasm-shell in ruby gems default path after installation. In my
    case, it's located in `/var/lib/gems/2.1.0/gems/metasm-1.0.2/samples`
  prefs: []
  type: TYPE_NORMAL
- en: Run it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: as you can see you are now in the shell's prompt
  prefs: []
  type: TYPE_NORMAL
- en: Find assembly op-code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: More usage will be added for this awesome library.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
