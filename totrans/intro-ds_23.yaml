- en: '[Map](data_mining_map.htm) > [Data Science](data_mining.htm) > [Predicting
    the Future](predicting_the_future.htm) > [Modeling](modeling.htm) > [Classification](classification.htm)
    > Support Vector Machine'
  prefs: []
  type: TYPE_NORMAL
- en: Support Vector Machine - Classification (SVM)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Support Vector Machine (SVM) performs classification by finding the hyperplane
    that maximizes the margin between the two classes. The vectors (cases) that define
    the hyperplane are the support vectors.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1bec6ef0896b95237b5b7da064cd00f9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Algorithm**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define an optimal hyperplane: maximize margin'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extend the above definition for non-linearly separable problems: have a penalty
    term for misclassifications.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Map data to high dimensional space where it is easier to classify with linear
    decision surfaces: reformulate problem so that data is mapped implicitly to this
    space.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To define an optimal hyperplane we need to maximize the width of the margin
    (*w*).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4970023fb7ebafefa571ff623863c57f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/1c7865d0695943d060e561902f9cba78.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We find *w* and *b* by solving the following objective function using Quadratic
    Programming.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d11423f3a8a03bf188463946bca7d7fd.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The beauty of SVM is that if the data is linearly separable, there is a unique
    global minimum value. An ideal SVM analysis should produce a hyperplane that completely
    separates the vectors (cases) into two non-overlapping classes. However, perfect
    separation may not be possible, or it may result in a model with so many cases
    that the model does not classify correctly. In this situation SVM finds the hyperplane
    that maximizes the margin and minimizes the misclassifications.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/63798d99aad62f32ebdaf535ed95c213.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The algorithm tries to maintain the slack variable to zero while maximizing
    margin. However, it does not minimize the number of misclassifications (NP-complete
    problem) but the sum of distances from the margin hyperplanes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0f4a7002b5c925c5b9787324f18decc6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The simplest way to separate two groups of data is with a straight line (1 dimension),
    flat plane (2 dimensions) or an N-dimensional hyperplane. However, there are situations
    where a nonlinear region can separate the groups more efficiently. SVM handles
    this by using a kernel function (nonlinear) to map the data into a different space
    where a hyperplane (linear) cannot be used to do the separation. It means a non-linear
    function is learned by a linear learning machine in a high-dimensional feature
    space while the capacity of the system is controlled by a parameter that does
    not depend on the dimensionality of the space. This is called *kernel trick* which
    means the kernel function transform the data into a higher dimensional feature
    space to make it possible to perform the linear separation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bba183eb04e3e1b4f1fa3044b5315e3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/60fe7ea51c737afd1a92f666b76298e3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Map data into new space, then take the inner product of the new vectors. The
    image of the inner product of the data is the inner product of the images of the
    data. Two kernel functions are shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f69b6077b58740153155aa22a67586e5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '| [Exercise](svm_exercise.htm) | [![](../Images/a890baab528b0ca069f7f2599c0c5e39.jpg)](datasets/Svm.txt)
    |  |'
  prefs: []
  type: TYPE_TB
