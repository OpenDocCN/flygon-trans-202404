["```\n(: eval : AE -> Number);; consumes an AE and computes the corresponding number\n```", "```\n(equal? 3 (eval (parse \"3\")))(equal? 7 (eval (parse \"{+ 3 4}\")))(equal? 6 (eval (parse \"{+ {- 3 4} 7}\")))\n```", "```\n(test (eval (parse \"3\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  => 3)(test (eval (parse \"{+ 3 4}\"))\u00a0 \u00a0 \u00a0  => 7)(test (eval (parse \"{+ {- 3 4} 7}\")) => 6)\n```", "```\n(test (parse \"{+ {- 3 4} 7}\")\u00a0 \u00a0 \u00a0 => (Add (Sub (Num 3) (Num 4)) (Num 7)))\n```", "```\n(: eval : AE -> Number)(define (eval expr)\u00a0 (cases expr\u00a0 \u00a0 [(Num n)\u00a0  ... n ...]\u00a0 \u00a0 [(Add l r) ... (eval l) ... (eval r) ...]\u00a0 \u00a0 [(Sub l r) ... (eval l) ... (eval r) ...]))\n```", "```\n(: eval : AE -> Number)(define (eval expr)\u00a0 (cases expr\u00a0 \u00a0 [(Num n)\u00a0  n]\u00a0 \u00a0 [(Add l r) (+ (eval l) (eval r))]\u00a0 \u00a0 [(Sub l r) (- (eval l) (eval r))]))\n```", "```\n(: run : String -> Number);; evaluate an AE program contained in a string(define (run str)\u00a0 (eval (parse str)))\n```", "```\n(test (run \"3\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  => 3)(test (run \"{+ 3 4}\")\u00a0 \u00a0 \u00a0  => 7)(test (run \"{+ {- 3 4} 7}\") => 6)\n```", "```\n[\u25b6](ae.rkt \"ae.rkt\")#lang pl#| BNF for the AE language:\u00a0  <AE> ::= <num>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | { + <AE> <AE> }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | { - <AE> <AE> }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | { * <AE> <AE> }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | { / <AE> <AE> }|#;; AE abstract syntax trees(define-type AE\u00a0 [Num Number]\u00a0 [Add AE AE]\u00a0 [Sub AE AE]\u00a0 [Mul AE AE]\u00a0 [Div AE AE])(: parse-sexpr : Sexpr -> AE);; parses s-expressions into AEs(define (parse-sexpr sexpr)\u00a0 (match sexpr\u00a0 \u00a0 [(number: n) (Num n)]\u00a0 \u00a0 [(list '+ lhs rhs) (Add (parse-sexpr lhs) (parse-sexpr rhs))]\u00a0 \u00a0 [(list '- lhs rhs) (Sub (parse-sexpr lhs) (parse-sexpr rhs))]\u00a0 \u00a0 [(list '* lhs rhs) (Mul (parse-sexpr lhs) (parse-sexpr rhs))]\u00a0 \u00a0 [(list '/ lhs rhs) (Div (parse-sexpr lhs) (parse-sexpr rhs))]\u00a0 \u00a0 [else (error 'parse-sexpr \"bad syntax in ~s\" sexpr)]))(: parse : String -> AE);; parses a string containing an AE expression to an AE AST(define (parse str)\u00a0 (parse-sexpr (string->sexpr str)))(: eval : AE -> Number);; consumes an AE and computes the corresponding number(define (eval expr)\u00a0 (cases expr\u00a0 \u00a0 [(Num n)\u00a0  n]\u00a0 \u00a0 [(Add l r) (+ (eval l) (eval r))]\u00a0 \u00a0 [(Sub l r) (- (eval l) (eval r))]\u00a0 \u00a0 [(Mul l r) (* (eval l) (eval r))]\u00a0 \u00a0 [(Div l r) (/ (eval l) (eval r))]))(: run : String -> Number);; evaluate an AE program contained in a string(define (run str)\u00a0 (eval (parse str)));; tests(test (run \"3\") => 3)(test (run \"{+ 3 4}\") => 7)(test (run \"{+ {- 3 4} 7}\") => 6)\n```"]