["```\n# Lab 5 Logistic Regression Classifier\nimport tensorflow as tf\ntf.set_random_seed(777)  # for reproducibility\n\nx_data = [[1, 2],\n          [2, 3],\n          [3, 1],\n          [4, 3],\n          [5, 3],\n          [6, 2]]\ny_data = [[0],\n          [0],\n          [0],\n          [1],\n          [1],\n          [1]]\n\n# placeholders for a tensor that will be always fed.\nX = tf.placeholder(tf.float32, shape=[None, 2])\nY = tf.placeholder(tf.float32, shape=[None, 1])\n\nW = tf.Variable(tf.random_normal([2, 1]), name='weight')\nb = tf.Variable(tf.random_normal([1]), name='bias')\n\n# Hypothesis using sigmoid: tf.div(1., 1\\. + tf.exp(tf.matmul(X, W)))\nhypothesis = tf.sigmoid(tf.matmul(X, W) + b)\n\n# cost/loss function\ncost = -tf.reduce_mean(Y * tf.log(hypothesis) + (1 - Y) *\n                       tf.log(1 - hypothesis))\n\ntrain = tf.train.GradientDescentOptimizer(learning_rate=0.01).minimize(cost)\n\n# Accuracy computation\n# True if hypothesis>0.5 else False\npredicted = tf.cast(hypothesis > 0.5, dtype=tf.float32)\naccuracy = tf.reduce_mean(tf.cast(tf.equal(predicted, Y), dtype=tf.float32))\n\n# Launch graph\nwith tf.Session() as sess:\n    # Initialize TensorFlow variables\n    sess.run(tf.global_variables_initializer())\n\n    for step in range(10001):\n        cost_val, _ = sess.run([cost, train], feed_dict={X: x_data, Y: y_data})\n        if step % 200 == 0:\n            print(step, cost_val)\n\n    # Accuracy report\n    h, c, a = sess.run([hypothesis, predicted, accuracy],\n                       feed_dict={X: x_data, Y: y_data})\n    print(\"\\nHypothesis: \", h, \"\\nCorrect (Y): \", c, \"\\nAccuracy: \", a)\n\n'''\n0 1.73078\n200 0.571512\n400 0.507414\n600 0.471824\n800 0.447585\n...\n9200 0.159066\n9400 0.15656\n9600 0.154132\n9800 0.151778\n10000 0.149496\n\nHypothesis:  [[ 0.03074029]\n [ 0.15884677]\n [ 0.30486736]\n [ 0.78138196]\n [ 0.93957496]\n [ 0.98016882]]\nCorrect (Y):  [[ 0.]\n [ 0.]\n [ 0.]\n [ 1.]\n [ 1.]\n [ 1.]]\nAccuracy:  1.0\n''' \n```"]