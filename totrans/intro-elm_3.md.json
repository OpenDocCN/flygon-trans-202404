["```\nimport Html exposing (..)\n\n-- MODEL\n\ntype alias Model = { ... }\n\n-- UPDATE\n\ntype Msg = Reset | ...\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    Reset -> ...\n    ...\n\n-- VIEW\n\nview : Model -> Html Msg\nview model =\n  ... \n```", "```\nimport Html exposing (Html, button, div, text)\nimport Html.Events exposing (onClick)\n\nmain =\n  Html.beginnerProgram { model = model, view = view, update = update }\n\n-- MODEL\n\ntype alias Model = Int\n\nmodel : Model\nmodel =\n  0\n\n-- UPDATE\n\ntype Msg = Increment | Decrement\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    Increment ->\n      model + 1\n\n    Decrement ->\n      model - 1\n\n-- VIEW\n\nview : Model -> Html Msg\nview model =\n  div []\n    [ button [ onClick Decrement ] [ text \"-\" ]\n    , div [] [ text (toString model) ]\n    , button [ onClick Increment ] [ text \"+\" ]\n    ] \n```", "```\ntype alias Model = Int \n```", "```\ntype Msg = Increment | Decrement \n```", "```\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    Increment ->\n      model + 1\n\n    Decrement ->\n      model - 1 \n```", "```\nview : Model -> Html Msg\nview model =\n  div []\n    [ button [ onClick Decrement ] [ text \"-\" ]\n    , div [] [ text (toString model) ]\n    , button [ onClick Increment ] [ text \"+\" ]\n    ] \n```", "```\nimport Html exposing (Html, Attribute, div, input, text)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onInput)\n\nmain =\n  Html.beginnerProgram { model = model, view = view, update = update }\n\n-- MODEL\n\ntype alias Model =\n  { content : String\n  }\n\nmodel : Model\nmodel =\n  { content = \"\" }\n\n-- UPDATE\n\ntype Msg\n  = Change String\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    Change newContent ->\n      { model | content = newContent }\n\n-- VIEW\n\nview : Model -> Html Msg\nview model =\n  div []\n    [ input [ placeholder \"Text to reverse\", onInput Change ] []\n    , div [] [ text (String.reverse model.content) ]\n    ] \n```", "```\ntype alias Model =\n  { content : String\n  } \n```", "```\ntype Msg\n  = Change String \n```", "```\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    Change newContent ->\n      { model | content = newContent } \n```", "```\nview : Model -> Html Msg\nview model =\n  div []\n    [ input [ placeholder \"Text to reverse\", onInput Change ] []\n    , div [] [ text (String.reverse model.content) ]\n    ] \n```", "```\nChange : String -> Msg \n```", "```\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onInput)\n\nmain =\n  Html.beginnerProgram { model = model, view = view, update = update }\n\n-- MODEL\n\ntype alias Model =\n  { name : String\n  , password : String\n  , passwordAgain : String\n  }\n\nmodel : Model\nmodel =\n  Model \"\" \"\" \"\"\n\n-- UPDATE\n\ntype Msg\n    = Name String\n    | Password String\n    | PasswordAgain String\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    Name name ->\n      { model | name = name }\n\n    Password password ->\n      { model | password = password }\n\n    PasswordAgain password ->\n      { model | passwordAgain = password }\n\n-- VIEW\n\nview : Model -> Html Msg\nview model =\n  div []\n    [ input [ type_ \"text\", placeholder \"Name\", onInput Name ] []\n    , input [ type_ \"password\", placeholder \"Password\", onInput Password ] []\n    , input [ type_ \"password\", placeholder \"Re-enter Password\", onInput PasswordAgain ] []\n    , viewValidation model\n    ]\n\nviewValidation : Model -> Html msg\nviewValidation model =\n  let\n    (color, message) =\n      if model.password == model.passwordAgain then\n        (\"green\", \"OK\")\n      else\n        (\"red\", \"Passwords do not match!\")\n  in\n    div [ style [(\"color\", color)] ] [ text message ] \n```", "```\ntype alias Model =\n  { name : String\n  , password : String\n  , passwordAgain : String\n  } \n```", "```\ntype Msg\n    = Name String\n    | Password String\n    | PasswordAgain String \n```", "```\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    Name name ->\n      { model | name = name }\n\n    Password password ->\n      { model | password = password }\n\n    PasswordAgain password ->\n      { model | passwordAgain = password } \n```", "```\nview : Model -> Html Msg\nview model =\n  div []\n    [ input [ type_ \"text\", placeholder \"Name\", onInput Name ] []\n    , input [ type_ \"password\", placeholder \"Password\", onInput Password ] []\n    , input [ type_ \"password\", placeholder \"Re-enter Password\", onInput PasswordAgain ] []\n    , viewValidation model\n    ] \n```", "```\nviewValidation : Model -> Html msg\nviewValidation model =\n  let\n    (color, message) =\n      if model.password == model.passwordAgain then\n        (\"green\", \"OK\")\n      else\n        (\"red\", \"Passwords do not match!\")\n  in\n    div [ style [(\"color\", color)] ] [ text message ] \n```", "```\n-- MODEL\n\ntype alias Model =\n  { ...\n  }\n\n-- UPDATE\n\ntype Msg = Submit | ...\n\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n  ...\n\n-- VIEW\n\nview : Model -> Html Msg\nview model =\n  ...\n\n-- SUBSCRIPTIONS\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n  ...\n\n-- INIT\n\ninit : (Model, Cmd Msg)\ninit =\n  ... \n```", "```\ntype alias Model =\n  { dieFace : Int\n  } \n```", "```\nview : Model -> Html Msg\nview model =\n  div []\n    [ h1 [] [ text (toString model.dieFace) ]\n    , button [ onClick Roll ] [ text \"Roll\" ]\n    ] \n```", "```\ntype Msg = Roll\n\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n  case msg of\n    Roll ->\n      (model, Cmd.none) \n```", "```\ninit : (Model, Cmd Msg)\ninit =\n  (Model 1, Cmd.none) \n```", "```\ntype Msg\n  = Roll\n  | NewFace Int \n```", "```\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n  case msg of\n    Roll ->\n      (model, Random.generate NewFace (Random.int 1 6))\n\n    NewFace newFace ->\n      (Model newFace, Cmd.none) \n```", "```\nRandom.generate : (a -> msg) -> Random.Generator a -> Cmd msg \n```", "```\nRandom.int : Int -> Int -> Random.Generator Int \n```", "```\n-- MODEL\n\ntype alias Model =\n  { topic : String\n  , gifUrl : String\n  }\n\ninit : (Model, Cmd Msg)\ninit =\n  (Model \"cats\" \"waiting.gif\", Cmd.none)\n\n-- UPDATE\n\ntype Msg = MorePlease\n\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n  case msg of\n    MorePlease ->\n      (model, Cmd.none)\n\n-- VIEW\n\nview : Model -> Html Msg\nview model =\n  div []\n    [ h2 [] [text model.topic]\n    , img [src model.gifUrl] []\n    , button [ onClick MorePlease ] [ text \"More Please!\" ]\n    ] \n```", "```\ntype Msg\n  = MorePlease\n  | NewGif (Result Http.Error String) \n```", "```\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n  case msg of\n    MorePlease ->\n      (model, getRandomGif model.topic)\n\n    NewGif (Ok newUrl) ->\n      ( { model | gifUrl = newUrl }, Cmd.none)\n\n    NewGif (Err _) ->\n      (model, Cmd.none) \n```", "```\ngetRandomGif : String -> Cmd Msg\ngetRandomGif topic =\n  let\n    url =\n      \"https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=\" ++ topic\n\n    request =\n      Http.get url decodeGifUrl\n  in\n    Http.send NewGif request\n\ndecodeGifUrl : Decode.Decoder String\ndecodeGifUrl =\n  Decode.at [\"data\", \"image_url\"] Decode.string \n```", "```\nimport Html exposing (Html)\nimport Svg exposing (..)\nimport Svg.Attributes exposing (..)\nimport Time exposing (Time, second)\n\nmain =\n  Html.program\n    { init = init\n    , view = view\n    , update = update\n    , subscriptions = subscriptions\n    }\n\n-- MODEL\n\ntype alias Model = Time\n\ninit : (Model, Cmd Msg)\ninit =\n  (0, Cmd.none)\n\n-- UPDATE\n\ntype Msg\n  = Tick Time\n\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n  case msg of\n    Tick newTime ->\n      (newTime, Cmd.none)\n\n-- SUBSCRIPTIONS\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n  Time.every second Tick\n\n-- VIEW\n\nview : Model -> Html Msg\nview model =\n  let\n    angle =\n      turns (Time.inMinutes model)\n\n    handX =\n      toString (50 + 40 * cos angle)\n\n    handY =\n      toString (50 + 40 * sin angle)\n  in\n    svg [ viewBox \"0 0 100 100\", width \"300px\" ]\n      [ circle [ cx \"50\", cy \"50\", r \"45\", fill \"#0B79CE\" ] []\n      , line [ x1 \"50\", y1 \"50\", x2 handX, y2 handY, stroke \"#023963\" ] []\n      ] \n```", "```\nTime.every : Time -> (Time -> msg) -> Sub msg \n```", "```\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\nimport WebSocket\n\nmain =\n  Html.program\n    { init = init\n    , view = view\n    , update = update\n    , subscriptions = subscriptions\n    }\n\n-- MODEL\n\ntype alias Model =\n  { input : String\n  , messages : List String\n  }\n\ninit : (Model, Cmd Msg)\ninit =\n  (Model \"\" [], Cmd.none)\n\n-- UPDATE\n\ntype Msg\n  = Input String\n  | Send\n  | NewMessage String\n\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg {input, messages} =\n  case msg of\n    Input newInput ->\n      (Model newInput messages, Cmd.none)\n\n    Send ->\n      (Model \"\" messages, WebSocket.send \"ws://echo.websocket.org\" input)\n\n    NewMessage str ->\n      (Model input (str :: messages), Cmd.none)\n\n-- SUBSCRIPTIONS\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n  WebSocket.listen \"ws://echo.websocket.org\" NewMessage\n\n-- VIEW\n\nview : Model -> Html Msg\nview model =\n  div []\n    [ div [] (List.map viewMessage model.messages)\n    , input [onInput Input] []\n    , button [onClick Send] [text \"Send\"]\n    ]\n\nviewMessage : String -> Html msg\nviewMessage msg =\n  div [] [ text msg ] \n```"]