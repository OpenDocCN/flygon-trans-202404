["```\n(define (make-tree datum children)\n  (cons datum children))\n(define (datum node)\n  (car node))\n(define (children node)\n  (cdr node)) \n```", "```\n(define (leaf? node)\n  (null? (children node))) \n```", "```\n(define (treemap fn tree)\n   (make-tree (fn (datum tree))\n              (map (lambda (t) (treemap fn t))\n                   (children tree) ))) \n```", "```\n(define (treemap fn tree)\n    (make-tree (fn (datum tree))\n               (forest-map fn (children tree)))) \n```", "```\n(define (forest-map fn forest)\n    (if (null? forest)\n        '()\n        (cons  (treemap fn (car forest))\n               (forest-map fn (cdr forest))))) \n```", "```\n(define (count-leaves tree)\n  (if (leaf? tree)\n      1\n      (count-leaves-in-forest (children tree)))) \n```", "```\n(define (count-leaves-in-forest forest)\n  (if (null? forest)\n      0\n      (+ (count-leaves (car forest))\n         (count-leaves-in-forest (cdr forest))))) \n```", "```\n(define (depth-first-search tree)\n    (print (datum tree))\n    (for-each depth-first-search (children tree))) \n```", "```\n(define (breadth-first-search tree)\n    (bfs-iter (list tree)))\n\n(define (bfs-iter queue)\n    (if (null? queue)\n        'done\n        (let ((task (car queue)))\n            (print (datum task))\n            (bfs-iter (append (cdr queue) (children task)))))) \n```"]