- en: 让我们实战吧
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们实战吧
- en: 本章主要介绍一些开发中的小例子，小问题，小技巧。
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 本章主要介绍一些开发中的小例子，小问题，小技巧。
- en: 正确关闭服务器的姿势
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正确关闭服务器的姿势
- en: 1.正确关闭服务器的姿势
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.正确关闭服务器的姿势
- en: 有时候，服务器的进程因为某种原因被关闭或者自己手动关闭，无法保证内存里的数据正确入库或者仍有cb函数没有执行，这个时候，我们就要确保一切都正确的被执行完毕后，再关闭服务器。
  id: totrans-4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 有时候，服务器的进程因为某种原因被关闭或者自己手动关闭，无法保证内存里的数据正确入库或者仍有cb函数没有执行，这个时候，我们就要确保一切都正确的被执行完毕后，再关闭服务器。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 自动收集rpc函数
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动收集rpc函数
- en: 2.自动收集rpc函数
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.自动收集rpc函数
- en: 服务器可被客户端调用的函数，不会有多少就去写多少到字典中, 所以需要自动去收集可被调用函数,这样就方便许多。
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 服务器可被客户端调用的函数，不会有多少就去写多少到字典中, 所以需要自动去收集可被调用函数,这样就方便许多。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 和数据库的那些事
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 和数据库的那些事
- en: 3.和数据库的那些事
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.和数据库的那些事
- en: 在开发中,数据库是必不可少的, 因此这节主要来说一下常用的两种类型数据库,mysql和redis的简单使用
  id: totrans-13
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 在开发中,数据库是必不可少的, 因此这节主要来说一下常用的两种类型数据库,mysql和redis的简单使用
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 跟多线程搞一些事情
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟多线程搞一些事情
- en: 跟多线程搞一些事情
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跟多线程搞一些事情
- en: 至今我仍然坚信，单线程仍然是最有效率的方式，比如nginx就是个很好的例子，在python中尤其。但是tornado依然提供了多线程方式来给开发者。这里给出一个例子，并做出简单的解释。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 至今我仍然坚信，单线程仍然是最有效率的方式，比如nginx就是个很好的例子，在python中尤其。但是tornado依然提供了多线程方式来给开发者。这里给出一个例子，并做出简单的解释。
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 线程库用的是futures里提供的，比较简单，没有安装的童鞋，可以用pip install futures 来进行安装. 上面的例子用的是最简单的http请求，tcp中也是同样一个道理，只需要讲self.write和finish替换成自己写socket的函数就可以了。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 线程库用的是futures里提供的，比较简单，没有安装的童鞋，可以用pip install futures 来进行安装. 上面的例子用的是最简单的http请求，tcp中也是同样一个道理，只需要讲self.write和finish替换成自己写socket的函数就可以了。
- en: 另外由于GIL的限制，多线程并不能达到利用多核的目的，因此还是要使用传统的多进程来实现，或者也可以使用比较流行的协程提高效率。最理想的情况就是netty那样的模型，但是因为python线程的问题，因此可以将线程替换为stackless中的微进程，每一条连接分配一个stackless，这样也可以达到一个目的。现成的有人将stackless与twisted在一起使用，具体效果没有测试过。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另外由于GIL的限制，多线程并不能达到利用多核的目的，因此还是要使用传统的多进程来实现，或者也可以使用比较流行的协程提高效率。最理想的情况就是netty那样的模型，但是因为python线程的问题，因此可以将线程替换为stackless中的微进程，每一条连接分配一个stackless，这样也可以达到一个目的。现成的有人将stackless与twisted在一起使用，具体效果没有测试过。
- en: tornado和celery很配呦
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tornado和celery很配呦
- en: tornado和celery很配呦
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tornado和celery很配呦
- en: Celery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。它是一个专注于实时处理的任务队列，同时也支持任务调度。在我们日常的开发中，或多或少都会用到，一些比较耗时的异步任务，一些定时的任务都可以用celery去做。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Celery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。它是一个专注于实时处理的任务队列，同时也支持任务调度。在我们日常的开发中，或多或少都会用到，一些比较耗时的异步任务，一些定时的任务都可以用celery去做。
- en: 在tornado中如果想使用celery，首先要安装celery的python api。使用pip install celery就可以了，非常方便。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在tornado中如果想使用celery，首先要安装celery的python api。使用pip install celery就可以了，非常方便。
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 监控你的api
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控你的api
- en: 监控你的api
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控你的api
- en: influxdb grafana
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: influxdb grafana
