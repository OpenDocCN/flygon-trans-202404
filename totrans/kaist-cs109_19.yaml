- en: Testing with Junit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have talked before about [incremental testing](tutorial-incremental-testing.html)
    of our functions. We will now create more systematic tests for our objects and
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: To use JUnit, you must have installed it as explained in the [installation instructions](project-install.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[JUnit](http://junit.org) is a Java library that allows us to write test suites.
    A test suite is a class that contains an arbitrary number of tests, checking the
    correctness of our code.'
  prefs: []
  type: TYPE_NORMAL
- en: A simple test suite
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s start with a simple example ([test1.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/test1.kt)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We compile this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now check the contents of the classes directory, you''ll find a new
    file AdditionTest.class there. We can run the test suite as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The output shows that everything went alright, all tests were passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate what it looks like when tests fail, I will change the second
    assertion in the test like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Again I compile and run the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Checking that exceptions are thrown
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To check that our code correctly handles input where we need to throw an exception,
    we need to write tests where we indicate that an exception is actually expected.
    This is done using an annotation on the test ([test2.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/test2.kt)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If we change 1/0 to 1/1, so that no exception will be thrown, the test suite
    correctly detects the error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Testing our own classes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For the [polynomial calculator project](project-polynomials.html), I have written
    a class Polynomial implemented in [polynomial.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polynomial.kt).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now write a test suite for the Polynomial class. This is much better
    than testing it interactively, because when a test fails, you can modify your
    code and run all tests again. If you ever need to add features to your classes
    or change them in any way, it is very useful to have access to all the tests you
    used previously: You can run them again to make sure that you have not broken
    anything.'
  prefs: []
  type: TYPE_NORMAL
- en: It is a good habit to create test suites for all interesting classes that your
    write. You can use the test suite to have confidence that the class you implemented
    is correct. And even more useful, it gives you confidence that when you make a
    change, you do not break some part of the class by mistake.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a test suite for the Polynomial class. Note that it simply uses the
    Polynomial class for its tests ([polytest.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polytest.kt)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the test suite, we of course first have to compile the Polynomial class,
    then the PolynomialTest class, and finally we can run the test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When you make changes to the Polynomial class, you can run the test suite after
    each change to make sure everything is still working.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with the test suite
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can take this one step further. We can think about a test suite as an executable
    specification of the correct behavior of the class that we want to create. So
    instead of writing code first and later testing it using the test suite, we first
    write down a list of tests that our code must satisfy to be correct. Then we start
    implementing the methods of the object one by one. After each change, a few more
    tests will pass correctly. When all tests are passed, we are done with the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to our Polynomial object and assume that it is not already given
    to us: We should implement it from scratch.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This time we start with the test suite [polytest.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polytest.kt).
    Here we immediately encounter a problem: Since PolynomialTest uses the Polynomial
    object, it is impossible to compile polytest.kt without a Polynomial class.'
  prefs: []
  type: TYPE_NORMAL
- en: So what we will do is to create an empty framework for the Polynomial class
    that shows all the methods and their types. Using this framework, we can not only
    compile the test suite, but we now also have a full documentation of the methods
    that we plan to implement.
  prefs: []
  type: TYPE_NORMAL
- en: 'So the first version of my Polynomial class looks like this ([polynomial1.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polynomial1.kt)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve defined all the public methods of the class that I plan to implement,
    including the types of arguments and the result type. Each method is defined to
    return TODO(). This code can already be compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we can compile the test suite without any errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We run our test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Of course all tests fail, because our class does not do anything yet. In particular,
    if you try to call the function TODO, it raises a NotImplementedError. (TODO is
    a special function with result type Nothing. Since Nothing is a subtype of every
    Kotlin type, it is legal to write TODO() instead of any type. However, there is
    no object of type Nothing, and so the function must throw an exception.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are set up to build our Polynomial class. I start by adding a constructor,
    implement degree and coeff, and write a toString method ([polynomial2.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polynomial2.kt)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We compile the new Polynomial class and run the test suite again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The first test has now passed: We can correctly construct Polynomial objects.
    There are only six failed tests left. I can continue to implement missing methods,
    running the test suite after each update of my code. Bit by bit I construct a
    correct and fully implemented class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we do not need to compile the test suite again: It is sufficient
    to compile it using the empty Polynomial framework at the beginning! (Of course
    you may discover later that you want to add some more tests, and if you modify
    polytest.kt, you do of course have to compile it again.)'
  prefs: []
  type: TYPE_NORMAL
