- en: Testing with Junit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Junit 进行测试
- en: We have talked before about [incremental testing](tutorial-incremental-testing.html)
    of our functions. We will now create more systematic tests for our objects and
    methods.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经讨论过对函数进行[增量测试](tutorial-incremental-testing.html)。现在我们将为我们的对象和方法创建更系统化的测试。
- en: To use JUnit, you must have installed it as explained in the [installation instructions](project-install.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 JUnit，您必须按照[安装说明](project-install.html)中所述安装它。
- en: '[JUnit](http://junit.org) is a Java library that allows us to write test suites.
    A test suite is a class that contains an arbitrary number of tests, checking the
    correctness of our code.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[JUnit](http://junit.org) 是一个允许我们编写测试套件的 Java 库。测试套件是一个包含任意数量测试的类，检查我们代码的正确性。'
- en: A simple test suite
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一个简单的测试套件
- en: 'Let''s start with a simple example ([test1.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/test1.kt)):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的例子开始（[test1.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/test1.kt)）：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We compile this class:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编译这个类：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you now check the contents of the classes directory, you''ll find a new
    file AdditionTest.class there. We can run the test suite as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在检查 classes 目录的内容，您会在那里找到一个新文件 AdditionTest.class。我们可以按以下方式运行测试套件：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The output shows that everything went alright, all tests were passed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果显示一切都顺利进行，所有测试都通过了。
- en: 'To demonstrate what it looks like when tests fail, I will change the second
    assertion in the test like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示测试失败的情况，我将更改测试中的第二个断言如下：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Again I compile and run the test:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 再次编译并运行测试：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Checking that exceptions are thrown
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查异常是否被抛出
- en: 'To check that our code correctly handles input where we need to throw an exception,
    we need to write tests where we indicate that an exception is actually expected.
    This is done using an annotation on the test ([test2.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/test2.kt)):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查我们的代码是否正确处理需要抛出异常的输入，我们需要编写一些测试，指示实际上期望抛出异常。这是通过在测试上进行注解完成的（[test2.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/test2.kt)）：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is the output:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we change 1/0 to 1/1, so that no exception will be thrown, the test suite
    correctly detects the error:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将 1/0 更改为 1/1，以便不会抛出异常，测试套件将正确检测到错误。
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Testing our own classes
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试我们自己的类
- en: For the [polynomial calculator project](project-polynomials.html), I have written
    a class Polynomial implemented in [polynomial.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polynomial.kt).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[多项式计算器项目](project-polynomials.html)，我已经编写了一个在[polynomial.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polynomial.kt)中实现的类
    Polynomial。
- en: 'We will now write a test suite for the Polynomial class. This is much better
    than testing it interactively, because when a test fails, you can modify your
    code and run all tests again. If you ever need to add features to your classes
    or change them in any way, it is very useful to have access to all the tests you
    used previously: You can run them again to make sure that you have not broken
    anything.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将为 Polynomial 类编写一个测试套件。这比进行交互式测试要好得多，因为当测试失败时，您可以修改代码并重新运行所有测试。如果您需要向您的类添加功能或以任何方式更改它们，拥有您以前使用的所有测试非常有用：您可以再次运行它们以确保您没有破坏任何内容。
- en: It is a good habit to create test suites for all interesting classes that your
    write. You can use the test suite to have confidence that the class you implemented
    is correct. And even more useful, it gives you confidence that when you make a
    change, you do not break some part of the class by mistake.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建测试套件以对所有有趣的类进行测试是一个好习惯。您可以使用测试套件来确保您实现的类是正确的。更重要的是，它让您相信，当您进行更改时，您不会意外地破坏类的某些部分。
- en: 'Here is a test suite for the Polynomial class. Note that it simply uses the
    Polynomial class for its tests ([polytest.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polytest.kt)):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Polynomial 类的一个测试套件。请注意，它仅使用 Polynomial 类进行测试（[polytest.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polytest.kt)）：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To run the test suite, we of course first have to compile the Polynomial class,
    then the PolynomialTest class, and finally we can run the test suite:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行测试套件，我们当然首先必须编译 Polynomial 类，然后编译 PolynomialTest 类，最后我们可以运行测试套件：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When you make changes to the Polynomial class, you can run the test suite after
    each change to make sure everything is still working.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当你对多项式类进行更改时，你可以在每次更改后运行测试套件，以确保一切仍然正常。
- en: Starting with the test suite
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从测试套件开始
- en: We can take this one step further. We can think about a test suite as an executable
    specification of the correct behavior of the class that we want to create. So
    instead of writing code first and later testing it using the test suite, we first
    write down a list of tests that our code must satisfy to be correct. Then we start
    implementing the methods of the object one by one. After each change, a few more
    tests will pass correctly. When all tests are passed, we are done with the implementation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以再进一步。我们可以将测试套件视为我们要创建的类的正确行为的可执行规范。因此，我们不是先编写代码，然后使用测试套件进行测试，而是首先列出我们的代码必须满足的测试列表以确保正确。然后我们逐个实现对象的方法。每次更改后，几个测试将正确通过。当所有测试都通过时，我们就完成了实现。
- en: 'Let''s go back to our Polynomial object and assume that it is not already given
    to us: We should implement it from scratch.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的多项式对象，并假设它还没有给出：我们应该从头开始实现它。
- en: 'This time we start with the test suite [polytest.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polytest.kt).
    Here we immediately encounter a problem: Since PolynomialTest uses the Polynomial
    object, it is impossible to compile polytest.kt without a Polynomial class.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们从测试套件 [polytest.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polytest.kt)
    开始。在这里，我们立即遇到一个问题：由于 PolynomialTest 使用 Polynomial 对象，因此在没有 Polynomial 类的情况下无法编译
    polytest.kt。
- en: So what we will do is to create an empty framework for the Polynomial class
    that shows all the methods and their types. Using this framework, we can not only
    compile the test suite, but we now also have a full documentation of the methods
    that we plan to implement.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将创建一个空的 Polynomial 类框架，显示所有方法及其类型。使用这个框架，我们不仅可以编译测试套件，而且现在还有了我们计划实现的方法的完整文档。
- en: 'So the first version of my Polynomial class looks like this ([polynomial1.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polynomial1.kt)):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我的多项式类的第一个版本看起来像这样 ([polynomial1.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polynomial1.kt))：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'I''ve defined all the public methods of the class that I plan to implement,
    including the types of arguments and the result type. Each method is defined to
    return TODO(). This code can already be compiled:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经定义了我计划实现的类的所有公共方法，包括参数类型和结果类型。每个方法都定义为返回 TODO()。这段代码已经可以编译：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And now we can compile the test suite without any errors:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编译测试套件而不会出现任何错误：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We run our test suite:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行我们的测试套件：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Of course all tests fail, because our class does not do anything yet. In particular,
    if you try to call the function TODO, it raises a NotImplementedError. (TODO is
    a special function with result type Nothing. Since Nothing is a subtype of every
    Kotlin type, it is legal to write TODO() instead of any type. However, there is
    no object of type Nothing, and so the function must throw an exception.)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，所有测试都失败，因为我们的类还没有做任何事情。特别是，如果尝试调用函数 TODO，它会引发 NotImplementedError。（TODO 是一个具有结果类型
    Nothing 的特殊函数。由于 Nothing 是每种 Kotlin 类型的子类型，因此可以写成 TODO() 而不是任何类型。但是，没有 Nothing
    类型的对象，因此该函数必须引发异常。）
- en: 'Now we are set up to build our Polynomial class. I start by adding a constructor,
    implement degree and coeff, and write a toString method ([polynomial2.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polynomial2.kt)):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好构建我们的多项式类。我首先添加一个构造函数，实现 degree 和 coeff，并编写一个 toString 方法 ([polynomial2.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/60-junit/polynomial2.kt))：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We compile the new Polynomial class and run the test suite again:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编译新的 Polynomial 类并再次运行测试套件：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The first test has now passed: We can correctly construct Polynomial objects.
    There are only six failed tests left. I can continue to implement missing methods,
    running the test suite after each update of my code. Bit by bit I construct a
    correct and fully implemented class.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个测试现在已经通过：我们可以正确构造多项式对象。只剩下六个失败的测试。我可以继续实现缺失的方法，在每次更新代码后运行测试套件。逐步构建一个正确且完全实现的类。
- en: 'Note that we do not need to compile the test suite again: It is sufficient
    to compile it using the empty Polynomial framework at the beginning! (Of course
    you may discover later that you want to add some more tests, and if you modify
    polytest.kt, you do of course have to compile it again.)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不需要再次编译测试套件：只需在开始时使用空的 Polynomial 框架进行编译即可！（当然，您可能会发现后来���要添加一些更多的测试，如果修改了
    polytest.kt，则当然必须再次编译。）
