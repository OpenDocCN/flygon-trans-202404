- en: '[ES2015] Map/Set'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[ES2015] Map/Set'
- en: 原文：[https://jsprimer.net/basic/map-and-set/](https://jsprimer.net/basic/map-and-set/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/basic/map-and-set/](https://jsprimer.net/basic/map-and-set/)
- en: JavaScriptでデータの集まり（コレクション）を扱うビルトインオブジェクトは、ObjectやArrayだけではありません。 この章では、ES2015で導入されたマップ型のコレクションである`Map`と、セット型のコレクションである`Set`について学びます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptでデータの集まり（コレクション）を扱うビルトインオブジェクトは、ObjectやArrayだけではありません。 この章では、ES2015で導入されたマップ型のコレクションである`Map`と、セット型のコレクションである`Set`について学びます。
- en: '[](#map)*Map*'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#map)*Map*'
- en: '*[Map](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Map)はマップ型のコレクションを扱うためのビルトインオブジェクトです。
    マップとは、キーと値の組み合わせからなる抽象データ型です。 他のプログラミング言語の文脈では辞書やハッシュマップ、連想配列などと呼ばれることもあります。'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*[Map](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Map)はマップ型のコレクションを扱うためのビルトインオブジェクトです。
    マップとは、キーと値の組み合わせからなる抽象データ型です。 他のプログラミング言語の文脈では辞書やハッシュマップ、連想配列などと呼ばれることもあります。'
- en: '[](#map-new)*マップの作成と初期化*'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#map-new)*マップの作成と初期化*'
- en: '*`Map`オブジェクトを`new`することで、新しいマップを作成できます。 作成されたばかりのマップは何も持っていません。 そのため、マップが持つ要素の数を返す`size`プロパティは`0`を返します。'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Map`オブジェクトを`new`することで、新しいマップを作成できます。 作成されたばかりのマップは何も持っていません。 そのため、マップが持つ要素の数を返す`size`プロパティは`0`を返します。'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`Map`オブジェクトを`new`で初期化するときに、コンストラクタに初期値を渡せます。 コンストラクタ引数として渡せるのは**エントリー**の配列です。
    エントリーとは、1つのキーと値の組み合わせを`[キー, 値]`という形式の配列で表現したものです。'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map`オブジェクトを`new`で初期化するときに、コンストラクタに初期値を渡せます。 コンストラクタ引数として渡せるのは**エントリー**の配列です。
    エントリーとは、1つのキーと値の組み合わせを`[キー, 値]`という形式の配列で表現したものです。'
- en: 次のコードでは、Mapに初期値となるエントリー（配列）の配列を渡しています。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、Mapに初期値となるエントリー（配列）の配列を渡しています。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[](#map-read-and-write)*要素の追加と取り出し*'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#map-read-and-write)*要素の追加と取り出し*'
- en: '*`Map`には新しい要素を`set`メソッドで追加でき、追加した要素を`get`メソッドで取り出せます。'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Map`には新しい要素を`set`メソッドで追加でき、追加した要素を`get`メソッドで取り出せます。'
- en: '`set`メソッドは特定のキーと値を持つ要素をマップに追加します。 ただし、同じキーで複数回`set`メソッドを呼び出した際は、後から追加された値で上書きされます。'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`set`メソッドは特定のキーと値を持つ要素をマップに追加します。 ただし、同じキーで複数回`set`メソッドを呼び出した際は、後から追加された値で上書きされます。'
- en: '`get`メソッドは特定のキーにひもづいた値を取り出します。 また、特定のキーにひもづいた値を持っているかを確認する`has`メソッドがあります。'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`get`メソッドは特定のキーにひもづいた値を取り出します。 また、特定のキーにひもづいた値を持っているかを確認する`has`メソッドがあります。'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`delete`メソッドはマップから要素を削除します。 `delete`メソッドに渡されたキーと、そのキーにひもづいた値がマップから削除されます。 また、マップが持つすべての要素を削除するための`clear`メソッドがあります。'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete`メソッドはマップから要素を削除します。 `delete`メソッドに渡されたキーと、そのキーにひもづいた値がマップから削除されます。 また、マップが持つすべての要素を削除するための`clear`メソッドがあります。'
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[](#map-iteration)*マップの反復処理*'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#map-iteration)*マップの反復処理*'
- en: '*マップが持つ要素を列挙するメソッドとして、`forEach`、`keys`、`values`、`entries`があります。'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*マップが持つ要素を列挙するメソッドとして、`forEach`、`keys`、`values`、`entries`があります。'
- en: '`forEach`メソッドはマップが持つすべての要素を、マップへの挿入順に反復処理します。 コールバック関数には引数として値、キー、マップの3つが渡されます。
    配列の`forEach`メソッドと似ていますが、インデックスの代わりにキーが渡されます。 配列はインデックスにより要素を特定しますが、マップはキーにより要素を特定するためです。'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`forEach`メソッドはマップが持つすべての要素を、マップへの挿入順に反復処理します。 コールバック関数には引数として値、キー、マップの3つが渡されます。
    配列の`forEach`メソッドと似ていますが、インデックスの代わりにキーが渡されます。 配列はインデックスにより要素を特定しますが、マップはキーにより要素を特定するためです。'
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`keys`メソッドはマップが持つすべての要素のキーを挿入順に並べた**Iterator**オブジェクトを返します。 同様に、`values`メソッドはマップが持つすべての要素の値を挿入順に並べたIteratorオブジェクトを返します。
    これらの返り値はIteratorオブジェクトであって配列ではありません。 そのため、次の例のように`for...of`文で反復処理を行ったり、`Array.from`メソッドに渡して配列に変換して使ったりします。'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`keys`メソッドはマップが持つすべての要素のキーを挿入順に並べた**Iterator**オブジェクトを返します。 同様に、`values`メソッドはマップが持つすべての要素の値を挿入順に並べたIteratorオブジェクトを返します。
    これらの返り値はIteratorオブジェクトであって配列ではありません。 そのため、次の例のように`for...of`文で反復処理を行ったり、`Array.from`メソッドに渡して配列に変換して使ったりします。'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`entries`メソッドはマップが持つすべての要素をエントリーとして挿入順に並べたIteratorオブジェクトを返します。 先述のとおりエントリーは`[キー,
    値]`の配列です。 そのため、配列の分割代入を使うとエントリーからキーと値を簡単に取り出せます。'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`entries`メソッドはマップが持つすべての要素をエントリーとして挿入順に並べたIteratorオブジェクトを返します。 先述のとおりエントリーは`[キー,
    値]`の配列です。 そのため、配列の分割代入を使うとエントリーからキーと値を簡単に取り出せます。'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: また、マップ自身もiterableなオブジェクトなので、`for...of`文で反復処理できます。 マップを`for...of`文で反復したときは、すべての要素をエントリーとして挿入順に反復処理します。
    つまり、`entries`メソッドの返り値を反復処理するときと同じ結果が得られます。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: また、マップ自身もiterableなオブジェクトなので、`for...of`文で反復処理できます。 マップを`for...of`文で反復したときは、すべての要素をエントリーとして挿入順に反復処理します。
    つまり、`entries`メソッドの返り値を反復処理するときと同じ結果が得られます。
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[](#object-and-map)*マップとしてのObjectとMap*'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#object-and-map)*マップとしてのObjectとMap*'
- en: '*ES2015で`Map`が導入されるまで、JavaScriptにおいてマップ型を実現するために`Object`が利用されてきました。 何かをキーにして値にアクセスするという点で、`Map`と`Object`はよく似ています。
    ただし、マップとしての`Object`にはいくつかの問題があります。'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*ES2015で`Map`が導入されるまで、JavaScriptにおいてマップ型を実現するために`Object`が利用されてきました。 何かをキーにして値にアクセスするという点で、`Map`と`Object`はよく似ています。
    ただし、マップとしての`Object`にはいくつかの問題があります。'
- en: '`Object`の`prototype`オブジェクトから継承されたプロパティによって、意図しないマッピングを生じる危険性がある'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object`の`prototype`オブジェクトから継承されたプロパティによって、意図しないマッピングを生じる危険性がある'
- en: また、プロパティとしてデータを持つため、キーとして使えるのは文字列か`Symbol`に限られる
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: また、プロパティとしてデータを持つため、キーとして使えるのは文字列か`Symbol`に限られる
- en: '`Object`には`prototype`オブジェクトがあるため、いくつかのプロパティは初期化されたときから存在します。 `Object`をマップとして使うと、そのプロパティと同じ名前のキーを使おうとしたときに問題となります
    （詳細は「[オブジェクト](../object/)」の章の「[プロパティの存在を確認する](../object/#confirm-property)」を参照）。'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object`には`prototype`オブジェクトがあるため、いくつかのプロパティは初期化されたときから存在します。 `Object`をマップとして使うと、そのプロパティと同じ名前のキーを使おうとしたときに問題となります
    （詳細は「[オブジェクト](../object/)」の章の「[プロパティの存在を確認する](../object/#confirm-property)」を参照）。'
- en: たとえば`constructor`という文字列は`Object.prototype.constructor`プロパティと衝突してしまいます。 そのため`constructor`のような文字列をオブジェクトのキーに使うことで意図しないマッピングを生じる危険性があります。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: たとえば`constructor`という文字列は`Object.prototype.constructor`プロパティと衝突してしまいます。 そのため`constructor`のような文字列をオブジェクトのキーに使うことで意図しないマッピングを生じる危険性があります。
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: このマップとして使うオブジェクトの問題は、`Object`のインスタンスを`Object.create(null)`のように初期化して作ることで回避されてきました
    （詳細は「[プロトタイプオブジェクト](../prototype-object/)」の章の「[`Object.prototype`を継承しないオブジェクト](../prototype-object/#not-inherit-object)」を参照）。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: このマップとして使うオブジェクトの問題は、`Object`のインスタンスを`Object.create(null)`のように初期化して作ることで回避されてきました
    （詳細は「[プロトタイプオブジェクト](../prototype-object/)」の章の「[`Object.prototype`を継承しないオブジェクト](../prototype-object/#not-inherit-object)」を参照）。
- en: ES2015では、これらの問題を根本的に解決する`Map`が導入されました。 `Map`はプロパティとは異なる仕組みでデータを格納します。 そのため、`Map`のプロトタイプが持つメソッドやプロパティとキーが衝突することはありません。
    また、`Map`ではマップのキーとしてあらゆるオブジェクトを使えます。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: ES2015では、これらの問題を根本的に解決する`Map`が導入されました。 `Map`はプロパティとは異なる仕組みでデータを格納します。 そのため、`Map`のプロトタイプが持つメソッドやプロパティとキーが衝突することはありません。
    また、`Map`ではマップのキーとしてあらゆるオブジェクトを使えます。
- en: ほかにも`Map`には次のような利点があります。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: ほかにも`Map`には次のような利点があります。
- en: マップのサイズを簡単に知ることができる
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: マップのサイズを簡単に知ることができる
- en: マップが持つ要素を簡単に列挙できる
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: マップが持つ要素を簡単に列挙できる
- en: オブジェクトをキーにすると参照ごとに違うマッピングができる
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: オブジェクトをキーにすると参照ごとに違うマッピングができる
- en: たとえばショッピングカートのような仕組みを作るとき、次のように`Map`を使って商品のオブジェクトと注文数をマッピングできます。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: たとえばショッピングカートのような仕組みを作るとき、次のように`Map`を使って商品のオブジェクトと注文数をマッピングできます。
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`Object`をマップとして使うときに起きる多くの問題は、`Map`オブジェクトを使うことで解決しますが、 常に`Map`が`Object`の代わりになるわけではありません。
    マップとしての`Object`には次のような利点があります。'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object`をマップとして使うときに起きる多くの問題は、`Map`オブジェクトを使うことで解決しますが、 常に`Map`が`Object`の代わりになるわけではありません。
    マップとしての`Object`には次のような利点があります。'
- en: リテラル表現があるため作成しやすい
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: リテラル表現があるため作成しやすい
- en: 規定のJSON表現があるため、`JSON.stringify`関数を使ってJSONに変換するのが簡単
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 規定のJSON表現があるため、`JSON.stringify`関数を使ってJSONに変換するのが簡単
- en: ネイティブAPI・外部ライブラリを問わず、多くの関数がマップとして`Object`を渡される設計になっている
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ネイティブAPI・外部ライブラリを問わず、多くの関数がマップとして`Object`を渡される設計になっている
- en: 次の例では、ログインフォームのsubmitイベントを受け取ったあと、サーバーにPOSTリクエストを送信しています。 サーバーにJSON文字列を送るために、`JSON.stringify`関数を使います。
    そのため、`Object`のマップを作ってフォームの入力内容を持たせています。 このような簡易なマップにおいては、`Object`を使うほうが適切でしょう。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 次の例では、ログインフォームのsubmitイベントを受け取ったあと、サーバーにPOSTリクエストを送信しています。 サーバーにJSON文字列を送るために、`JSON.stringify`関数を使います。
    そのため、`Object`のマップを作ってフォームの入力内容を持たせています。 このような簡易なマップにおいては、`Object`を使うほうが適切でしょう。
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[](#weakmap)*WeakMap*'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#weakmap)*WeakMap*'
- en: '*[WeakMap](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)は、`Map`と同じくマップを扱うためのビルトインオブジェクトです。
    `Map`と違う点は、キーを**弱い参照**（Weak Reference）で持つことです。'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*[WeakMap](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)は、`Map`と同じくマップを扱うためのビルトインオブジェクトです。
    `Map`と違う点は、キーを**弱い参照**（Weak Reference）で持つことです。'
- en: '[弱い参照](https://ja.wikipedia.org/wiki/%E5%BC%B1%E3%81%84%E5%8F%82%E7%85%A7)とは、ガベージコレクション（GC）によるオブジェクトの解放を妨げないための特殊な参照です。
    本来、GCによりメモリから解放できるオブジェクトは、どこからも参照されていないものだけです。 弱い参照は例外的に、該当するオブジェクトへの弱い参照があったとしても、GCはそのオブジェクトを解放できます。'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[弱い参照](https://ja.wikipedia.org/wiki/%E5%BC%B1%E3%81%84%E5%8F%82%E7%85%A7)とは、ガベージコレクション（GC）によるオブジェクトの解放を妨げないための特殊な参照です。
    本来、GCによりメモリから解放できるオブジェクトは、どこからも参照されていないものだけです。 弱い参照は例外的に、該当するオブジェクトへの弱い参照があったとしても、GCはそのオブジェクトを解放できます。'
- en: そのため、弱い参照は不要になったオブジェクトを参照し続けて発生してしまうメモリリークを防ぐために使われます。 `WeakMap`では不要になったキーとそれにひもづいた値が自動的に削除されるため、メモリリークを引き起こす心配がありません。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: そのため、弱い参照は不要になったオブジェクトを参照し続けて発生してしまうメモリリークを防ぐために使われます。 `WeakMap`では不要になったキーとそれにひもづいた値が自動的に削除されるため、メモリリークを引き起こす心配がありません。
- en: 次のコードでは、最初に`obj`には`{}`を設定し、`WeakMap`ではその`obj`をキーにして値（`"value"`）を設定しています。 次に`obj`に別の値（ここでは`null`）を代入すると、`obj`が元々参照していた`{}`という値はどこからも参照されなくなります。
    このとき`WeakMap`は`{}`への弱い参照を持っていますが、弱い参照はGCを妨げないため、`{}`は不要になった値としてGCによりメモリから解放されます。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、最初に`obj`には`{}`を設定し、`WeakMap`ではその`obj`をキーにして値（`"value"`）を設定しています。 次に`obj`に別の値（ここでは`null`）を代入すると、`obj`が元々参照していた`{}`という値はどこからも参照されなくなります。
    このとき`WeakMap`は`{}`への弱い参照を持っていますが、弱い参照はGCを妨げないため、`{}`は不要になった値としてGCによりメモリから解放されます。
- en: 同時に、`WeakMap`は解放されたオブジェクト（`{}`）をキーにしてひもづいていた値（`"value"`）を破棄できます。 ただし、どのタイミングで実際にメモリから解放するかは、JavaScriptエンジンの実装に依存します。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 同時に、`WeakMap`は解放されたオブジェクト（`{}`）をキーにしてひもづいていた値（`"value"`）を破棄できます。 ただし、どのタイミングで実際にメモリから解放するかは、JavaScriptエンジンの実装に依存します。
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`WeakMap`は`Map`と似ていますがiterableではありません。 そのため、キーを列挙する`keys`メソッドや、データの数を返す`size`プロパティなどは存在しません。
    また、キーを弱い参照で持つ特性上、キーとして使えるのは参照型のオブジェクトと`Symbol`^([es2023](#fn_es2023))だけです。'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`WeakMap`は`Map`と似ていますがiterableではありません。 そのため、キーを列挙する`keys`メソッドや、データの数を返す`size`プロパティなどは存在しません。
    また、キーを弱い参照で持つ特性上、キーとして使えるのは参照型のオブジェクトと`Symbol`^([es2023](#fn_es2023))だけです。'
- en: '`WeakMap`の主な使い方のひとつは、クラスにプライベートの値を格納することです。 `this` （クラスインスタンス） を `WeakMap`
    のキーにすることで、インスタンスの外からはアクセスできない値を保持できます。 また、クラスインスタンスが参照されなくなったときには自動的に解放されます。'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`WeakMap`の主な使い方のひとつは、クラスにプライベートの値を格納することです。 `this` （クラスインスタンス） を `WeakMap`
    のキーにすることで、インスタンスの外からはアクセスできない値を保持できます。 また、クラスインスタンスが参照されなくなったときには自動的に解放されます。'
- en: 次のコードでは、オブジェクトが発火するイベントのリスナー関数（イベントリスナー）を `WeakMap` で管理しています。 イベントリスナーとは、イベントが発生したときに呼び出される関数のことです。
    このマップを`Map`で実装してしまうと、明示的に削除されるまでイベントリスナーはメモリ上に残り続けます。 ここで`WeakMap`を使うと、`addListener`
    メソッドに渡された`listener`は `EventEmitter` インスタンスが参照されなくなった際、自動的に解放されます。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、オブジェクトが発火するイベントのリスナー関数（イベントリスナー）を `WeakMap` で管理しています。 イベントリスナーとは、イベントが発生したときに呼び出される関数のことです。
    このマップを`Map`で実装してしまうと、明示的に削除されるまでイベントリスナーはメモリ上に残り続けます。 ここで`WeakMap`を使うと、`addListener`
    メソッドに渡された`listener`は `EventEmitter` インスタンスが参照されなくなった際、自動的に解放されます。
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: また、あるオブジェクトから計算した結果を一時的に保存する用途でもよく使われます。 次の例ではHTML要素の高さを計算した結果を保存して、2回目以降に同じ計算をしないようにしています。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: また、あるオブジェクトから計算した結果を一時的に保存する用途でもよく使われます。 次の例ではHTML要素の高さを計算した結果を保存して、2回目以降に同じ計算をしないようにしています。
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[](#key-and-nan)*[コラム] キーの等価性とNaN*'
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#key-and-nan)*[コラム] キーの等価性とNaN*'
- en: '*`Map`に値をセットする際のキーにはあらゆるオブジェクトが使えます。 このときのマップが特定のキーをすでに持っているか、つまり挿入と上書きの判定は基本的に`===`演算子と同じです。'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Map`に値をセットする際のキーにはあらゆるオブジェクトが使えます。 このときのマップが特定のキーをすでに持っているか、つまり挿入と上書きの判定は基本的に`===`演算子と同じです。'
- en: ただし、キーが`NaN`の扱いだけが例外的に違います。`Map`におけるキーの比較では、`NaN`同士は常に等価であるとみなされます。 この挙動は[Same-value-zero](https://developer.mozilla.org/ja/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality)アルゴリズムと呼ばれます。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ただし、キーが`NaN`の扱いだけが例外的に違います。`Map`におけるキーの比較では、`NaN`同士は常に等価であるとみなされます。 この挙動は[Same-value-zero](https://developer.mozilla.org/ja/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality)アルゴリズムと呼ばれます。
- en: 次のコードでは、`NaN`同士の`===`の比較結果が`false`になるのに対して、`Map`のキーでは`NaN`同士の比較結果が一致していることがわかります。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、`NaN`同士の`===`の比較結果が`false`になるのに対して、`Map`のキーでは`NaN`同士の比較結果が一致していることがわかります。
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[](#set)*Set*'
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#set)*Set*'
- en: '*[Set](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Set)はセット型のコレクションを扱うためのビルトインオブジェクトです。
    セットとは、重複する値がないことを保証したコレクションのことを言います。 `Set`は追加した値を列挙できるので、値が重複しないことを保証する配列のようなものとしてよく使われます。
    ただし、配列と違って要素は順序を持たず、インデックスによるアクセスはできません。'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*[Set](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Set)はセット型のコレクションを扱うためのビルトインオブジェクトです。
    セットとは、重複する値がないことを保証したコレクションのことを言います。 `Set`は追加した値を列挙できるので、値が重複しないことを保証する配列のようなものとしてよく使われます。
    ただし、配列と違って要素は順序を持たず、インデックスによるアクセスはできません。'
- en: '[](#set-new)*セットの作成と初期化*'
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#set-new)*セットの作成と初期化*'
- en: '*`Set`オブジェクトを`new`することで、新しいセットを作れます。 作成されたばかりのセットは何も持っていません。 そのため、セットが持つ要素の数を返す`size`プロパティは0を返します。'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Set`オブジェクトを`new`することで、新しいセットを作れます。 作成されたばかりのセットは何も持っていません。 そのため、セットが持つ要素の数を返す`size`プロパティは0を返します。'
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`Set`オブジェクトを`new`で初期化するときに、コンストラクタに初期値を渡せます。 コンストラクタ引数として渡せるのはiterableオブジェクトです。'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set`オブジェクトを`new`で初期化するときに、コンストラクタに初期値を渡せます。 コンストラクタ引数として渡せるのはiterableオブジェクトです。'
- en: 次のコードではiterableオブジェクトである配列を初期値として渡しています。 また、`Set`では重複する同じ値を持たないことを保証するため、同じ値は1つのみ格納されます。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードではiterableオブジェクトである配列を初期値として渡しています。 また、`Set`では重複する同じ値を持たないことを保証するため、同じ値は1つのみ格納されます。
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[](#set-read-and-write)*値の追加と取り出し*'
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#set-read-and-write)**値の追加と取り出し**'
- en: '*作成したセットに値を追加するには、`add`メソッドを使います。 先述のとおり、セットは重複する値を持たないことが保証されます。 そのため、すでにセットが持っている値を`add`メソッドに渡した際は無視されます。'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*作成したセットに値を追加するには、`add`メソッドを使います。 先述のとおり、セットは重複する値を持たないことが保証されます。 そのため、すでにセットが持っている値を`add`メソッドに渡した際は無視されます。'
- en: また、セットが特定の値を持っているかどうかを確認する`has`メソッドがあります。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: また、セットが特定の値を持っているかどうかを確認する`has`メソッドがあります。
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: セットから値を削除するには、`delete`メソッドを使います。 `delete`メソッドに渡された値がセットから削除されます。 また、セットが持つすべての値を削除するための`clear`メソッドがあります。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: セットから値を削除するには、`delete`メソッドを使います。 `delete`メソッドに渡された値がセットから削除されます。 また、セットが持つすべての値を削除するための`clear`メソッドがあります。
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[](#set-iteration)*セットの反復処理*'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#set-iteration)**セットの反復処理**'
- en: '*セットが持つ値を反復処理するには、`forEach`メソッドが利用できます。 `forEach`メソッドではセットが持つすべての要素を、セットへの挿入順に反復します。'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*セットが持つ値を反復処理するには、`forEach`メソッドが利用できます。 `forEach`メソッドではセットが持つすべての要素を、セットへの挿入順に反復します。'
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: セットからIteratorオブジェクトを作成するメソッドとして`keys`、`values`、`entries`があります。 これらは`Map`との類似性のために存在しますが、セットにはマップにおけるキー相当のものがありません。
    そのため、`keys`メソッドは`values`メソッドのエイリアスになっており、セットが持つすべての値を挿入順に列挙するIteratorオブジェクトを返します。
    また、`entries`メソッドは`[値, 値]`という形のエントリーを挿入順に列挙するIteratorオブジェクトを返します。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: セットからIteratorオブジェクトを作成するメソッドとして`keys`、`values`、`entries`があります。 これらは**Map**との類似性のために存在しますが、セットには**Map**におけるキー相当のものがありません。
    そのため、`keys`メソッドは`values`メソッドのエイリアスになっており、セットが持つすべての値を挿入順に列挙するIteratorオブジェクトを返します。
    また、`entries`メソッドは`[値, 値]`という形のエントリーを挿入順に列挙するIteratorオブジェクトを返します。
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`Set`オブジェクト自身もiterableなオブジェクトであるため`for...of`文で反復処理できます。 `for...of`文で`Set`オブジェクトを反復処理したときも、セットへの挿入順に値が取り出されます。
    `keys`、`values`、`entries`メソッドはどれも取得できる情報は同じであるため、基本的には`Set`オブジェクト自体を反復処理することで代用できます。'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set`オブジェクト自身もiterableなオブジェクトであるため`for...of`文で反復処理できます。 `for...of`文で`Set`オブジェクトを反復処理したときも、セットへの挿入順に値が取り出されます。
    `keys`、`values`、`entries`メソッドはどれも取得できる情報は同じであるため、基本的には`Set`オブジェクト自体を反復処理することで代用できます。'
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[](#weakset)*WeakSet*'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#weakset)**WeakSet**'
- en: '*[WeakSet](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakSet)は弱い参照で値を持つセットです。
    `WeakSet`は`Set`と似ていますが、iterableではないので追加した値を反復処理できません。 つまり、`WeakSet`は値の追加と削除、存在確認以外のことができません。
    データの格納ではなく、データの一意性を確認することに特化したセットと言えるでしょう。'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*[WeakSet](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakSet)*は弱い参照で値を持つセットです。
    `WeakSet`は`Set`と似ていますが、iterableではないので追加した値を反復処理できません。 つまり、`WeakSet`は値の追加と削除、存在確認以外のことができません。
    データの格納ではなく、データの一意性を確認することに特化したセットと言えるでしょう。'
- en: また、弱い参照で値を持つ特性上、`WeakSet`の値として使えるのは参照型のオブジェクトと`Symbol`^([es2023](#fn_es2023))だけです。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: また、弱い参照で値を持つ特性上、**WeakSet**の値として使えるのは参照型のオブジェクトと**Symbol**^([es2023](#fn_es2023))だけです。
- en: '[](#conclusion)*まとめ*'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)**まとめ**'
- en: '*この章ではMapとSetについて学びました。'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: この章では**Map**と**Set**について学びました。
- en: '`Map`はキーと値の組み合わせからなるコレクションを扱うビルトインオブジェクト'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Map`はキーと値の組み合わせからなるコレクションを扱うビルトインオブジェクト'
- en: '`Map`のキーはプロトタイプオブジェクトのプロパティと名前が衝突しないため意図しないマッピングを避けられる'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Map**のキーはプロトタイプオブジェクトのプロパティと名前が衝突しないため意図しないマッピングを避けられる'
- en: '`WeakMap`はキーを弱い参照で持つ`Map`と同様のビルトインオブジェクト'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WeakMap`はキーを弱い参照で持つ`Map`と同様のビルトインオブジェクト'
- en: '`Set`は重複する値がないことを保証した順序を持たないコレクションを扱うビルトインオブジェクト'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set`は重複する値がないことを保証した順序を持たないコレクションを扱うビルトインオブジェクト'
- en: '`WeakSet`は値を弱い参照で持つ`Set`と同様のビルトインオブジェクト'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WeakSet`は値を弱い参照で持つ`Set`と同様のビルトインオブジェクト'
- en: ^(es2023). ES2023でSymbolも扱えるように仕様が変更されています。 [↩](#reffn_es2023 "Jump back to
    footnote [es2023] in the text.")*************
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ^(es2023). ES2023で**Symbol**も扱えるように仕様が変更されています。 [↩](#reffn_es2023 "Jump back
    to footnote [es2023] in the text.")*************
