["```\n>>> val a = 3\n>>> a / 0\njava.lang.ArithmeticException: / by zero\n>>> val s = \"abc\"\n>>> s.toInt()\njava.lang.NumberFormatException: For input string: \"abc\"\n>>> java.io.File(\"test.txt\").forEachLine { println(it) }\njava.io.FileNotFoundException: test.txt (No such file or directory)\n>>> val s = Array<Int>(100000000) { 0 }\njava.lang.OutOfMemoryError: Java heap space\n\n```", "```\nimport org.otfried.cs109.readString\n\nval str = readString(\"Enter a number> \")\n\ntry {\n  val x = str.toInt()\n  println(\"You said: $x\")\n} \ncatch (e: NumberFormatException) {\n  println(\"'$str' is not a number\")\n}\n\n```", "```\n$ kts catch1.kts\nEnter a number> 17\nYou said: 17\n$ kts catch1.kts\nEnter a number> abc\n'abc' is not a number\n\n```", "```\nfun test(s: String): Int = (s.toDouble() * 100).toInt()\n\nfun show(s: String) {\n  try {\n    println(test(s))\n  }\n  catch (e: NumberFormatException) {\n    println(\"Incorrect input\")\n  }\n}\n\n```", "```\n>>> :load catch2.kts\n>>> show(\"123.456\")\n12345\n>>> show(\"123a456\")\nIncorrect input\n\n```", "```\nimport org.otfried.cs109.readString\n\nfun f(n: Int) {\n  println(\"Starting f($n) ... \")\n  g(n)\n  println(\"Ending f($n) ... \")\n}\n\nfun g(n: Int) {\n  println(\"Starting g($n) ... \")\n  val m = 100 / n\n  println(\"The result is $m\")\n  println(\"Ending g($n) ... \")\n}\n\nfun main() {\n  while (true) {\n    val s = readString(\"Enter a number> \")\n    if (s == \"\")\n      return\n    try {\n      println(\"Beginning of try block\")\n      val n = s.toInt()\n      f(n)\n      println(\"End of try block\")\n    }\n    catch (e: NumberFormatException) {\n      println(\"Please enter a number!\")\n    }\n    catch (e: ArithmeticException) {\n      println(\"I can't handle this value!\")\n    }\n  }\n}\n\nmain()\n\n```", "```\n$ kts except1.kts \nEnter a number> 25\nBeginning of try block\nStarting f(25) ... \nStarting g(25) ... \nThe result is 4\nEnding g(25) ... \nEnding f(25) ... \nEnd of try block\nEnter a number> 0\nBeginning of try block\nStarting f(0) ... \nStarting g(0) ... \nI can't handle this value!\nEnter a number> abc\nBeginning of try block\nPlease enter a number!\nEnter a number>\n\n```", "```\nimport org.otfried.cs109.readString\n\nfun f(n: Int) {\n  println(\"Starting f($n) ... \")\n  g(n)\n  println(\"Ending f($n) ... \")\n}\n\nfun g(n: Int) {\n  println(\"Starting g($n) ... \")\n  if (n < 0)\n    throw IllegalArgumentException()\n  println(\"The value is $n\")\n  println(\"Ending g($n) ... \")\n}\n\nfun main() {\n  while (true) {\n    val s = readString(\"Enter a number> \")\n    if (s == \"\")\n      return\n    try {\n      println(\"Beginning of try block\")\n      val n = s.toInt()\n      f(n)\n      println(\"End of try block\")\n    }\n    catch (e: NumberFormatException) {\n      println(\"Please enter a number!\")\n    }\n    catch (e: IllegalArgumentException) {\n      println(\"I can't handle this value!\")\n    }\n  }\n}\n\nmain()\n\n```", "```\n$ kts except2.kts \nEnter a number> 25\nBeginning of try block\nStarting f(25) ... \nStarting g(25) ... \nThe value is 25\nEnding g(25) ... \nEnding f(25) ... \nEnd of try block\nEnter a number> abc\nBeginning of try block\nPlease enter a number!\nEnter a number> -17\nBeginning of try block\nStarting f(-17) ... \nStarting g(-17) ... \nI can't handle this value!\n\n```", "```\nfun main() {\n  while (true) {\n    val s = readString(\"Enter a number> \")\n    if (s == \"\")\n      return\n    try {\n      println(\"Beginning of try block\")\n      val n = s.toInt()\n      f(n)\n      println(\"End of try block\")\n    }\n    catch (e: NumberFormatException) {\n      println(\"Please enter a number!\")\n    }\n    catch (e: IllegalArgumentException) {\n      e.printStackTrace()\n    }\n  }\n}\n\n```", "```\n$ kts except3.kts \nEnter a number> 35\nBeginning of try block\nStarting f(35) ... \nStarting g(35) ... \nThe value is 35\nEnding g(35) ... \nEnding f(35) ... \nEnd of try block\nEnter a number> -17\nBeginning of try block\nStarting f(-17) ... \nStarting g(-17) ... \njava.lang.IllegalArgumentException\n\tat Except3.g(except3.kts:16)\n\tat Except3.f(except3.kts:9)\n\tat Except3.main(except3.kts:29)\n\tat Except3.<init>(except3.kts:41)\n        ... many omitted lines ...\nEnter a number> abc\nBeginning of try block\nPlease enter a number!\nEnter a number> \n\n```", "```\nassert(condition)\n\n```", "```\n  ... code A computing string s ...\n  assert(s.nonEmpty(), \"s is empty!\")\n  ... code B using string s ...\n\n```", "```\nval fd = java.io.File(\"project.txt\")\n\ntry {\n  fd.forEachLine {\n    println(\"${it.length} $it\")\n  }\n} \ncatch (e: java.io.FileNotFoundException) {\n  println(\"Project file does not exist!\")\n}\ncatch (e: java.io.IOException) {\n  println(\"Error reading project file!\")\n}\n\n```"]