- en: 配列から型を生成する
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配列から型を生成する
- en: 原文：[https://typescriptbook.jp/tips/generates-type-from-array](https://typescriptbook.jp/tips/generates-type-from-array)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tips/generates-type-from-array](https://typescriptbook.jp/tips/generates-type-from-array)
- en: 単位のように振る舞うことを期待されて定義されたコレクションは少なくないでしょう。今回はコレクションでも主に配列に焦点を当てそれらから型を生成する方法の紹介です。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 単位のように振る舞うことを期待されて定義されたコレクションは少なくないでしょう。今回はコレクションでも主に配列に焦点を当てそれらから型を生成する方法の紹介です。
- en: 通貨の配列から通貨の型を作りたい[​](#通貨の配列から通貨の型を作りたい "通貨の配列から通貨の型を作りたい への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通貨の配列から通貨の型を作りたい[​](#通貨の配列から通貨の型を作りたい "通貨の配列から通貨の型を作りたい への直接リンク")
- en: 国際的な外貨を使うことができるサービスを開発していたとします。サポートしている通貨を配列で保持しているとし次のようになっているとします。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 国際的な外貨を使うことができるサービスを開発していたとします。サポートしている通貨を配列で保持しているとし次のようになっているとします。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: このようなとき、このJavaScriptの資産をできるだけ変更せずに貨幣の型 (ユニオン型) を作ることができれば今後便利そうです。つまり次のようなユニオン型です。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: このようなとき、このJavaScriptの資産をできるだけ変更せずに貨幣の
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`typeof`[​](#typeof "typeof への直接リンク")'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`typeof`[​](#typeof "typeof への直接リンク")'
- en: これはJavaScriptの`typeof`ではなくTypeScriptの`typeof`です。`typeof`はTypeScriptがその変数をどのような型であるかと認識しているかかを教えてくれます。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: これはJavaScriptの`typeof`ではなくTypeScriptの`typeof`です。`typeof`はTypeScriptがその変数をどのような型であるかと認識しているかかを教えてくれます。
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'ts`const  <data-lsp lsp="const currencies: string[]">currencies</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"];type <data-lsp lsp="type Currency
    = string[]" style="border-bottom:solid 2px lightgrey">Currency</data-lsp> =  typeof
    <data-lsp lsp="const currencies: string[]">currencies</data-lsp>;` `type Currency
    = string[]`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`const  <data-lsp lsp="const currencies: string[]">currencies</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"];type <data-lsp lsp="type Currency
    = string[]" style="border-bottom:solid 2px lightgrey">Currency</data-lsp> =  typeof
    <data-lsp lsp="const currencies: string[]">currencies</data-lsp>;` `type Currency
    = string[]`'
- en: 予想されている方が多かったかもしれませんが`string[]`型と出てしまいました。ではこれをどうすれば`string`ではなく定数値で取得できるでしょうか。それは定数値で取得したいオブジェクトに`as
    const`をつけると取得できます。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 予想されている方が多かったかもしれませんが`string[]`型と出てしまいました。ではこれをどうすれば`string`ではなく定数値で取得できるでしょうか。それは定数値で取得したいオブジェクトに`as
    const`をつけると取得できます。
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'ts`const  <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"] as  <data-lsp lsp="type const
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]">const</data-lsp>;type <data-lsp lsp="type Currency
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]" style="border-bottom:solid 2px lightgrey">Currency</data-lsp>
    =  typeof <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>;`
    `type Currency = readonly ["CNY", "EUR", "GBP", "JPY", "KRW", "USD"]`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`const  <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"] as  <data-lsp lsp="type const
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]">const</data-lsp>;type <data-lsp lsp="type Currency
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]" style="border-bottom:solid 2px lightgrey">Currency</data-lsp>
    =  typeof <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>;`
    `type Currency = readonly ["CNY", "EUR", "GBP", "JPY", "KRW", "USD"]`'
- en: 定数 (リテラル型) は取れましたが依然配列のままです。これをユニオン型で取るためには考え方を逆転させる必要があります。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 定数 (リテラル型) は取れましたが依然配列のままです。これをユニオン型で取るためには考え方を逆転させる必要があります。
- en: 何番目のリテラル型が欲しいか[​](#何番目のリテラル型が欲しいか "何番目のリテラル型が欲しいか への直接リンク")
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 何番目のリテラル型が欲しいか[​](#何番目のリテラル型が欲しいか "何番目のリテラル型が欲しいか への直接リンク")
- en: たとえば`'GBP'`が欲しいとします。`'GBP'`は2番目なので`currencies`の2番目の型を取れば希望のリテラル型が取れます。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: たとえば`'GBP'`が欲しいとします。`'GBP'`は2番目なので`currencies`の2番目の型を取れば希望のリテラル型が取れます。
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'ts`const  <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"] as  <data-lsp lsp="type const
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]">const</data-lsp>;type <data-lsp lsp="type Currency
    = &quot;GBP&quot;" style="border-bottom:solid 2px lightgrey">Currency</data-lsp>
    = (typeof <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>)[2];`
    `type Currency = "GBP"`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`const  <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"] as  <data-lsp lsp="type const
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]">const</data-lsp>;type <data-lsp lsp="type Currency
    = &quot;GBP&quot;" style="border-bottom:solid 2px lightgrey">Currency</data-lsp>
    = (typeof <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>)[2];`
    `type Currency = "GBP"`'
- en: '`''GBP''`を取ることができました。'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`''GBP''`を取ることができました。'
- en: すべてのリテラル型が欲しい[​](#すべてのリテラル型が欲しい "すべてのリテラル型が欲しい への直接リンク")
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: すべてのリテラル型が欲しい[​](#すべてのリテラル型が欲しい "すべてのリテラル型が欲しい への直接リンク")
- en: 本題です。まさか次のようにするわけには行かないのでもっと賢い方法を考える必要があります。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本題です。まさか次のようにするわけには行かないのでもっと賢い方法を考える必要があります。
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: そこで思いつくのは`typeof`をしているときのインデックスです。実はこれもリテラル型であり`currencies`の`2`のリテラル型を取ることを意味しています。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: そこで思いつくのは`typeof`をしているときのインデックスです。実はこれもリテラル型であり`currencies`の`2`のリテラル型を取ることを意味しています。
- en: 配列はnumber型のインデックスに要素を代入しているオブジェクトなのでこのリテラル型のインデックスの代わりに`number`を使うことによって
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 配列はnumber型のインデックスに要素を代入しているオブジェクトなのでこのリテラル型のインデックスの代わりに`number`を使うことによって
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'ts`const  <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"] as  <data-lsp lsp="type const
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]">const</data-lsp>;type <data-lsp lsp="type Currency
    = &quot;CNY&quot; | &quot;EUR&quot; | &quot;GBP&quot; | &quot;JPY&quot; | &quot;KRW&quot;
    | &quot;USD&quot;" style="border-bottom:solid 2px lightgrey">Currency</data-lsp>
    = (typeof <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">currencies</data-lsp>)[number];`
    `type Currency = "CNY" | "EUR" | "GBP" | "JPY" | "KRW" | "USD"`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`const  <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot;]">货币</data-lsp>  =
    ["CNY",  "EUR",  "GBP",  "JPY",  "KRW",  "USD"] as  <data-lsp lsp="type const
    = readonly [&quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;,
    &quot;KRW&quot;, &quot;USD&quot;]">const</data-lsp>;type <data-lsp lsp="type Currency
    = &quot;CNY&quot; | &quot;EUR&quot; | &quot;GBP&quot; | &quot;JPY&quot; | &quot;KRW&quot;
    | &quot;USD&quot;" style="border-bottom:solid 2px lightgrey">货币类型</data-lsp> =
    (typeof <data-lsp lsp="const currencies: readonly [&quot;CNY&quot;, &quot;EUR&quot;,
    &quot;GBP&quot;, &quot;JPY&quot;, &quot;KRW&quot;, &quot;USD&quot]">货币</data-lsp>)[number];`
    `type 货币类型 = "CNY" | "EUR" | "GBP" | "JPY" | "KRW" | "USD"`'
- en: と希望のユニオン型を取得できます。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: と希望のユニオン型を取得できます。
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
