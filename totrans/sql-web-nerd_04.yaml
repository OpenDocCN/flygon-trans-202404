- en: '| [![Traffic on the 405\.  Los Angeles, California.  View from the Getty Center.](../Images/d16d608950fdcc8f69f6e45ae8885bf1.jpg)](/http://philip.greenspun.com/images/pcd0222/los-angeles-traffic-44.tcl)
    |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| [![405号高速公路上的交通。加利福尼亚州洛杉矶。从盖蒂中心眺望。](../Images/d16d608950fdcc8f69f6e45ae8885bf1.jpg)](/http://philip.greenspun.com/images/pcd0222/los-angeles-traffic-44.tcl)
    |'
- en: Queries
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询
- en: part of [SQL for Web Nerds](index.html) by [Philip Greenspun](http://philip.greenspun.com/)
    | [![Cactus Garden overlooking the city. Getty Center.  Los Angeles, California.](../Images/6cc283cf7205bc1de17df078ca486221.jpg)](/http://philip.greenspun.com/images/pcd0222/getty-center-cactus-garden-7.tcl)
    |
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 部分来自[Web极客的SQL](index.html)的内容，作者是[菲利普·格林斯潘](http://philip.greenspun.com/) |
    [![俯瞰城市的仙人掌花园。盖蒂中心。加利福尼亚州洛杉矶。](../Images/6cc283cf7205bc1de17df078ca486221.jpg)](/http://philip.greenspun.com/images/pcd0222/getty-center-cactus-garden-7.tcl)
    |
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'If you start up SQL*Plus, you can start browsing around immediately with the
    SELECT statement. You don''t even need to define a table; Oracle provides the
    built-in `dual` table for times when you''re interested in a constant or a function:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您启动SQL*Plus，可以立即开始浏览SELECT语句。您甚至不需要定义表；Oracle为您提供了内置的`dual`表，用于在您对常量或函数感兴趣时：
- en: '[PRE0]'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '... or to test your knowledge of three-valued logic (see the "Data Modeling"
    chapter):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '... 或测试您对三值逻辑的了解（请参阅“数据建模”章节）：'
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (any expression involving NULL evaluates to NULL).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: （任何涉及NULL的表达式都会评估为NULL）。
- en: 'There is nothing magic about the `dual` table for these purposes; you can compute
    functions using the `bboard` table instead of `dual`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些目的，`dual`表并没有什么神奇之处；你可以使用`bboard`表而不是`dual`表来计算函数：
- en: '[PRE2]'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: but not everyone wants 55010 copies of the same result. The `dual` table is
    predefined during Oracle installation and, though it is just a plain old table,
    it is guaranteed to contain only one row because no user will have sufficient
    privileges to insert or delete rows from `dual`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但并不是每个人都想要55010份相同结果的副本。`dual`表在Oracle安装期间预定义，虽然它只是一个普通的表，但它保证只包含一行，因为没有用户具有足够的权限向`dual`表插入或删除行。
- en: Getting beyond Hello World
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 超越Hello World
- en: To get beyond Hello World, pick a table of interest. As we saw in the introduction,
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要超越Hello World，选择一个感兴趣的表。正如我们在介绍中看到的，
- en: '[PRE3]'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: would retrieve all the information from every row of the `users` table. That's
    good for toy systems but in any production system, you'd be better off starting
    with
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将从`users`表的每一行检索所有信息。这对于玩具系统来说很好，但在任何生产系统中，最好从
- en: '[PRE4]'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You don''t really want to look at 7352 rows of data, but you would like to
    see what''s in the users table, start off by asking SQL*Plus to query Oracle''s
    data dictionary and figure out what columns are available in the `users` table:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您实际上不想查看7352行数据，但您想看看用户表中的内容，首先请SQL*Plus查询Oracle的数据字典，并找出`users`表中有哪些列：
- en: '[PRE5]'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The data dictionary is simply a set of built-in tables that Oracle uses to store
    information about the objects (tables, triggers, etc.) that have been defined.
    Thus SQL*Plus isn't performing any black magic when you type `describe`; it is
    simply querying `user_tab_columns`, a view of some of the tables in Oracle's data
    dictionary. You could do the same explicitly, but it is a little cumbersome.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 数据字典只是Oracle用来存储有关已定义对象（表、触发器等）信息的一组内置表。因此，当您键入`describe`时，SQL*Plus并没有执行任何黑魔法；它只是查询`user_tab_columns`，这是Oracle数据字典中一些表的视图。您可以显式执行相同操作，但有点繁琐。
- en: '[PRE6]'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here we've had to make sure to put the table name ("USERS") in all-uppercase.
    Oracle is case-insensitive for table and column names in queries but the data
    dictionary records names in uppercase. Now that we know the names of the columns
    in the table, it will be easy to explore.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们必须确保将表名（"USERS"）全部大写。Oracle在查询中对表和列名不区分大小写，但数据字典记录名称为大写。现在我们知道表中列的名称，探索将会很容易。
- en: Simple Queries from One Table
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 来自单表的简单查询
- en: 'A simple query from one table has the following structure:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从单表进行简单查询的结构如下：
- en: the select list (which columns in our report)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: select列表（我们报告中的哪些列）
- en: the name of the table
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表的名称
- en: the where clauses (which rows we want to see)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: where子句（我们想要查看哪些行）
- en: the order by clauses (how we want the rows arranged)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: order by子句（我们希望如何排列行）
- en: 'Let''s see some examples. First, let''s see how many users from MIT are registered
    on our site:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些例子。首先，让我们看看有多少来自MIT的用户在我们的网站上注册了：
- en: '[PRE7]'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `email like ''%mit.edu''` says "every row where the email column ends in
    ''mit.edu''". The percent sign is Oracle''s wildcard character for "zero or more
    characters". Underscore is the wildcard for "exactly one character":'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`email like ''%mit.edu''` 表示“每一行的电子邮件列都以 ''mit.edu'' 结尾”。百分号是 Oracle 的通配符，表示“零个或多个字符”。下划线是表示“正好一个字符”的通配符：'
- en: '[PRE8]'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Suppose that we notice in the above report some similar email addresses. It
    is perhaps time to try out the ORDER BY clause:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在上面的报告中注意到一些相似的电子邮件地址。也许是时候尝试使用 ORDER BY 子句了：
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now we can see that this users table was generated by grinding over pre-ArsDigita
    Community Systems postings starting from 1995\. In those bad old days, users typed
    their email address and name with each posting. Due to typos and people intentionally
    choosing to use different addresses at various times, we can see that we'll have
    to build some sort of application to help human beings merge some of the rows
    in the users table (e.g., all three occurrences of "philg" are in fact the same
    person (me)).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到，这个用户表是通过从 1995 年开始对预先生成的 ArsDigita Community Systems 帖子进行处理而生成的。在那些糟糕的旧日子里，用户在每次发布帖子时都要输入他们的电子邮件地址和姓名。由于拼写错误和人们故意选择在不同时间使用不同地址，我们可以看到我们将不得不构建某种应用程序来帮助人类合并用户表中的一些行（例如，“philg”的所有三个出现实际上是同一个人（我））。
- en: Restricting results
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制结果
- en: 'Suppose that you were featured on Yahoo in September 1998 and want to see how
    many users signed up during that month:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您在 1998 年 9 月被 Yahoo 特别介绍，并想查看当月有多少用户注册：
- en: '[PRE10]'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We''ve combined two restrictions in the WHERE clause with an AND. We can add
    another restriction with another AND:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 WHERE 子句中结合了��个限制条件，并使用 AND 添加了另一个限制条件：
- en: '[PRE11]'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE11]'
- en: OR and NOT are also available within the WHERE clause. For example, the following
    query will tell us how many classified ads we have that either have no expiration
    date or whose expiration date is later than the current date/time.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: OR 和 NOT 也可以在 WHERE 子句中使用。例如，以下查询将告诉我们有多少个分类广告没有到期日期，或者到期日期晚于当前日期/时间。
- en: '[PRE12]'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Subqueries
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子查询
- en: 'You can query one table, restricting the rows returned based on information
    from another table. For example, to find users who have posted at least one classified
    ad:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查询一个表，根据另一个表中的信息限制返回的行。例如，查找至少发布过一条分类广告的用户：
- en: '[PRE13]'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Conceptually, for each row in the `users` table Oracle is running the subquery
    against `classified_ads` to see how many ads are associated with that particular
    user ID. Keep in mind that this is only *conceptually*; the Oracle SQL parser
    may elect to execute this query in a more efficient manner.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，对于 `users` 表中的每一行，Oracle 都会针对 `classified_ads` 运行子查询，以查看与该特定用户 ID 关联的广告数量。请记住，这仅仅是
    *概念上*；Oracle SQL 解析器可能选择以更有效的方式执行此查询。
- en: 'Another way to describe the same result set is using EXISTS:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 描述相同结果集的另一种方法是使用 EXISTS：
- en: '[PRE14]'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This may be more efficient for Oracle to execute since it hasn't been instructed
    to actually count the number of classified ads for each user, but only to check
    and see if any are present. Think of EXISTS as a Boolean function that
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能对 Oracle 执行更有效，因为它没有被指示实际计算每个用户的分类广告数量，而只是检查是否存在任何广告。将 EXISTS 视为一个布尔函数
- en: takes a SQL query as its only parameter
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以其唯一参数为 SQL 查询
- en: returns TRUE if the query returns any rows at all, regardless of the contents
    of those rows (this is why we can use the constant 1 as the select list for the
    subquery)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果查询返回任何行，无论这些行的内容如何，都返回 TRUE（这就是为什么我们可以在子查询的选择列表中使用常量 1）
- en: JOIN
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JOIN
- en: 'A professional SQL programmer would be unlikely to query for users who''d posted
    classified ads in the preceding manner. The SQL programmer knows that, inevitably,
    the publisher will want information from the classified ad table along with the
    information from the users table. For example, we might want to see the users
    and, for each user, the sequence of ad postings:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个专业的 SQL 程序员不太可能以前述方式查询已发布分类广告的用户。SQL 程序员知道，不可避免地，发布者将希望从分类广告表中获取信息以及用户表中的信息。例如，我们可能想要查看用户以及每个用户的广告发布顺序：
- en: '[PRE15]'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Because of the JOIN restriction, `where users.user_id = classified_ads.user_id`,
    we only see those users who have posted at least one classified ad, i.e., for
    whom a matching row may be found in the `classified_ads` table. This has the same
    effect as the subquery above.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JOIN 限制，`where users.user_id = classified_ads.user_id`，我们只看到那些至少发布过一条分类广告的用户，即在
    `classified_ads` 表中可能找到匹配行的用户。这与上面的子查询具有相同的效果。
- en: The `order by users.email, posted` is key to making sure that the rows are lumped
    together by user and then printed in order of ascending posting time.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`order by users.email, posted`是确保行按用户分组，然后按发布时间升序打印的关键。'
- en: OUTER JOIN
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外连接
- en: Suppose that we want an alphabetical list of all of our users, with classified
    ad posting dates for those users who have posted classifieds. We can't do a simple
    JOIN because that will exclude users who haven't posted any ads. What we need
    is an OUTER JOIN, where Oracle will "stick in NULLs" if it can't find a corresponding
    row in the `classified_ads` table.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要所有用户的按字母顺序排列的列表，对于那些已发布分类广告的用户，还要显示发布日期。我们不能简单地进行JOIN，因为这将排除未发布任何广告的用户。我们需要的是一个外连接，其中Oracle将在无法在`classified_ads`表中找到对应行时“插入NULL”。
- en: '[PRE16]'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The plus sign after `classified_ads.user_id` is our instruction to Oracle to
    "add NULL rows if you can't meet this JOIN constraint".
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`classified_ads.user_id`后面的加号是我们对Oracle的指示，即“如果无法满足此JOIN约束，则添加NULL行”。'
- en: Extending a simple query into a JOIN
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将简单查询扩展为JOIN
- en: 'Suppose that you have a query from one table returning almost everything that
    you need, except for one column that''s in another table. Here''s a way to develop
    the JOIN without risking breaking your application:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个来自一张表的查询几乎返回您所需的所有内容，除了另一张表中的一列。以下是一种开发JOIN的方法，而不会危及破坏您的应用程序：
- en: add the new table to your FROM clause
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新表添加到您的FROM子句中
- en: add a WHERE constraint to prevent Oracle from building a Cartesian product
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个WHERE约束以防止Oracle构建笛卡尔积
- en: hunt for ambiguous column names in the SELECT list and other portions of the
    query; prefix these with table names if necessary
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SELECT列表和查询的其他部分中寻找模糊的列名；如果需要，用表名作为前缀
- en: test that you've not broken anything in your zeal to add additional info
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试一下，确保在添加额外信息时没有破坏任何内容
- en: add a new column to the SELECT list
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SELECT列表中添加一个新列
- en: 'Here''s an example from Problem Set 2 of a course that we give at MIT (see
    [http://www.photo.net/teaching/psets/ps2/ps2.adp](http://www.photo.net/teaching/psets/ps2/ps2.adp)).
    Students build a conference room reservation system. They generally define two
    tables: `rooms` and `reservations`. The top level page is supposed to show a user
    what reservations he or she is current holding:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在麻省理工学院开设的课程的第2个问题集的一个示例（参见[http://www.photo.net/teaching/psets/ps2/ps2.adp](http://www.photo.net/teaching/psets/ps2/ps2.adp)）。学生们构建一个会议室预订系统。他们通常定义两个表：`rooms`和`reservations`。顶层页面应该向用户显示他或她当前持有的预订：
- en: '[PRE17]'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This produces an unacceptable page because the rooms are referred to by an ID
    number rather than by name. The name information is in the `rooms` table, so we'll
    have to turn this into a JOIN.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成一个不可接受的页面，因为房间是通过ID号而不是名称引用的。名称信息在`rooms`表中，所以我们必须将其转换为JOIN。
- en: 'Step 1: add the new table to the FROM clause'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第1步：将新表添加到FROM子句中
- en: '[PRE18]'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We're in a world of hurt because Oracle is now going to join every row in `rooms`
    with every row in `reservations` where the `user_id` matches that of the logged-in
    user.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们陷入了���境，因为Oracle现在将会将`rooms`中的每一行与`reservations`中的每一行进行连接，其中`user_id`与已登录用户的匹配。
- en: 'Step 2: add a constraint to the WHERE clause'
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第2步：向WHERE子句添加约束
- en: '[PRE19]'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Step 3: look for ambiguously defined columns'
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第3步：查找定义模糊的列
- en: Both `reservations` and `rooms` contain columns called "room_id". So we need
    to prefix the `room_id` column in the SELECT list with "reservations.". Note that
    we don't have to prefix `start_time` and `end_time` because these columns are
    only present in `reservations`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`reservations`和`rooms`都包含名为“room_id”的列。因此，我们需要在SELECT列表中的`room_id`列前加上“reservations.”。请注意，我们不必在`reservations`中加上`start_time`和`end_time`，因为这些列只存在于`reservations`中。'
- en: '[PRE20]'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Step 4: test'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第4步：测试
- en: Test the query to make sure that you haven't broken anything. You should get
    back the same rows with the same columns as before.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 测试查询，确保没有破坏任何内容。你应该得到与之前相同的行和列。
- en: 'Step 5: add a new column to the SELECT list'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第5步：在SELECT列表中添加一个新列
- en: 'We''re finally ready to do what we set out to do: add `room_name` to the list
    of columns for which we''re querying.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于准备好做我们设定的事情了：将`room_name`添加到我们查询的列列表中。
- en: '[PRE21]'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Reference
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考
- en: Oracle8 Server SQL Reference, [SELECT command section](http://www.oradoc.com/keyword/select)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle8 Server SQL参考，[SELECT命令部分](http://www.oradoc.com/keyword/select)
- en: 'Next: [complex queries](complex-queries.html)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来：[复杂查询](complex-queries.html)
- en: '* * *'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[philg@mit.edu](http://philip.greenspun.com/)[Add a comment](/comments/add?page_id=3460)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[philg@mit.edu](http://philip.greenspun.com/)[添加评论](/comments/add?page_id=3460)'
