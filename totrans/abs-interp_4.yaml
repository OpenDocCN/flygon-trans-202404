- en: 4  Examples of abstract-interpretation-based static analyses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 4.1  Numerical Analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Contrary to dataflow analyses on lattices satisfying the ascending/descending
    chain condition in the seventies, the generalization to precise static analyses
    using numerical domains such as intervals [[21](#CousotCousot76-1-ISOP)], octagons
    [[83](#Mine01-pado2)] or polyhedra are in infinite abstract domains whence required
    the introduction of new widening-based iteration convergence acceleration methods
    to become effective.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2  Interval analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The analysis of the interval in which the values of variables do range [[21](#CousotCousot76-1-ISOP),[22](#CousotCousot77-1-POPL)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.3  Octagonal analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The analysis of the octagon in which the values of pairs of variables do range
    (that is the determination of constraints of the form +/-*x*+/-*y* ≤ *c* where
    *x* and *y* are variables and *c* a rational constant automatically discovered
    by the analysis) [[83](#Mine01-pado2),[84](#Mine02-sas),[85](#Mine-HOSC06)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.4  Polyhedral analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The analysis of the polyhedron in which the values of tuples of variables do
    range. This abstract interpretation can be used for the automatic discovery of
    invariant linear inequalities among numerical variables of a program [[44](#CousotHalbwachs78-1-POPL)].Delay
    analysis in synchronous programs [[64](#Halbwachs93-1)], safety analysis of reactive
    systems [[65](#Halbwachs94-1)], quantitative time properties of synchronous programs,
    and linear hybrid systems [[66](#HalbwachsProyRoumanoff97-1)] are among the many
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 4.5  Congruence analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The analysis of the congruence invariants satisfied by the values of one [[62](#Granger89-1)]
    or several numerical variables [[84](#Mine02-sas)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.6  Roundoff error analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The analysis of the origin of roundoff errors in floating point computations
    [[60](#GoubaultMartelPutot02-ESOP),[77](#Martel-VMCAI05)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.7  Symbolic analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The analysis of symbolic properties of programs, usually as opposed to numerical
    program properties e.g. heap reachability analysis [[23](#CousotCousot77-2),[24](#CousotCousot77-3)].
    Also understood as the symbolic representation of abstract domains, which is almost
    always the case, since abstract properties cannot generally be simplistically
    represented as the set of concrete values which have this property (except in
    enumerative model-checking [[10](#ClarkeGrumbergPeled99-1)]).
  prefs: []
  type: TYPE_NORMAL
- en: 4.8  Strictness and comportment analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Strictness analysis determines whether a parameter in a lazy language is always
    evaluated in a procedure call or this call does not terminate. This information
    is useful to replace a call-by-need by a more efficient call by value [[91](#Mycroft80-1)].
    Introduced by Alan Mycroft [[92](#Mycroft81-1)], this analysis was at the origin
    of the use of abstract interpretation in the functional language community [[1](#AbramskyHankin87-1),[73](#JonesNielson95-1)].
    Strictness analysis [[8](#BurnHankinAbramsky86-1),[95](#Nielson-POPL87)] can be
    embedded in the lattice of comportment analyses [[33](#CousotCousot94-1-ICCL)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.9  Mode inference/groundness/sharing analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The necessity of optimizing Prolog implementations, in particular the occur
    checks during unification, is at the origin of the use of abstract interpretation
    for the static analysis of Prolog [[80](#Mellish86-1),[45](#DebrayWarren86-2),[107](#Sondergaard86-1),[75](#MannilaUkkonen87-1),[76](#MarriottSondergaard88-1),[90](#MuthukumarHermenegildo89-1),[7](#Bruynooghe91-1),[12](#CortesiFile91-1),[2](#BarbutiEtAl93-1)],
    [[29](#CousotCousot92-2-JLP)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.10  Aliasing and pointer analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The static analysis of imperative programs must take accesses and side effects
    through aliases and pointers into account [[23](#CousotCousot77-2)]. The profuse
    literature on pointer analysis is surveyed in [[46](#Deutsch95-1),[68](#Hind-PASTE01)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.11  Escape analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Escape analysis is a static analysis that determines whether the lifetime of
    data exceeds its static scope [[96](#ParkGoldberg-PLDI92),[47](#Deutsch97-1)],
    [[4](#Blanchet-TOPLAS03)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.12  Heap analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Heap analysis consists in overapproximating the sets of sequences of graphs
    representing the memory heap at all time instants during execution. Applications
    range from *memory leak detection* to *shape analysis* that is the determination
    of the shape of data structures allocated on the heap [[103](#SagivRepsWilhelm00-CC),[102](#RinetzkyEtAl-POPL05)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.13  Concurrency analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The static analysis of concurrent programs from shared-memory [[28](#CousotCousot84-1-BiermannGuihoKodratoff)]
    to [a]synchronous communication [[27](#CousotCousot80-1-ICALP)], a vast and difficult
    subject, with few analyses that do scale up.
  prefs: []
  type: TYPE_NORMAL
- en: 4.14  Mobility analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The analysis of dynamically allocated mobile processes (such as the pi-calculus).
    This involves the overapproximation of the set of sequences of graphs representing
    the process allocations and communications at all time instants during execution
    [[109](#Venet98-1),[51](#Feret-SAS01)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.15  Control flow analysis (CFA)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Control flow analysis aims at determining the possible flows of computation
    in higher-order functional languages [[70](#Jones-ICALP81),[106](#Shivers-Signot04)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.16  Probabilistic analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The static analysis of probabilistic programs [[86](#Monniaux-SAS-00),[88](#Monniaux_POPL01),[89](#Monniaux_ESOP01)],
    [[48](#DiPierroHankinWiklicky-JLC05)].
  prefs: []
  type: TYPE_NORMAL
- en: 4.17  WCET analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The static determination of the worst-case execution time [[49](#FerdinandHeckmannEtAL01-EMSOFT)]
    which involves the analysis of the cache behavior [[50](#FerdinandEtAl-SCP99)],
    the pipelines, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 4.18  Hardware analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The static analysis of hardware formal descriptions such as asynchronous circuits
    [[108](#ThompsonMycroft-SAS04)].
  prefs: []
  type: TYPE_NORMAL
