- en: '24Processing Programs: A First Look at Interpretation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理程序：首次查看解释
- en: '|     [24.1 Representing Arithmetic](#%28part._dt-for-arith%29) |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|     [24.1 表示算术](#%28part._dt-for-arith%29) |'
- en: '|     [24.2 Writing an Interpreter](#%28part._.Writing_an_.Interpreter%29)
    |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|     [24.2 撰写解释器](#%28part._.Writing_an_.Interpreter%29) |'
- en: '|     [24.3 A First Taste of “Semantics”](#%28part._.A_.First_.Taste_of__.Semantics_%29)
    |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|     [24.3 “语义学”的第一次尝试](#%28part._.A_.First_.Taste_of__.Semantics_%29) |'
- en: '|     [24.4 Desugaring: Growing the Language Without Enlarging It](#%28part._first-desugar%29)
    |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|     [24.4 去糖化：扩展语言而不扩大其规模](#%28part._first-desugar%29) |'
- en: '|       [24.4.1 Extension: Binary Subtraction](#%28part._.Extension__.Binary_.Subtraction%29)
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|       [24.4.1 扩展：二元减法](#%28part._.Extension__.Binary_.Subtraction%29) |'
- en: '|       [24.4.2 Extension: Unary Negation](#%28part._.Extension__.Unary_.Negation%29)
    |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|       [24.4.2 扩展：一元取反](#%28part._.Extension__.Unary_.Negation%29) |'
- en: '|     [24.5 A Three-Stage Pipeline](#%28part._.A_.Three-.Stage_.Pipeline%29)
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|     [24.5 三阶段管道](#%28part._.A_.Three-.Stage_.Pipeline%29) |'
- en: 'Now we’re ready to write an evaluator—<wbr>a program that turns programs into
    answers—<wbr>in the form of an interpreter, for our arithmetic language.The term
    “evaluate” means “to reduce to a value”. We choose arithmetic first for three
    reasons: (a) you already know how it works, so we can focus on the mechanics of
    writing evaluators; (b) it’s contained in every language we will encounter later,
    so we can build upwards and outwards from it; and (c) it’s (surprisingly) sophisticated
    enough to convey some important points.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好编写一个评估器——<wbr>一个将程序转换为答案的程序——<wbr>以解释器的形式，用于我们的算术语言。“评估”一词的含义是“将其简化为一个值”。我们首先选择算术有三个原因：（a）你已经知道它是如何工作的，因此我们可以专注于编写评估器的机制；（b）它包含在我们后来会遇到的每种语言中，因此我们可以从中构建并向外扩展；以及（c）它（令人惊讶地）足够复杂，以传达一些重要观点。
- en: 24.1Representing Arithmetic
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示算术
- en: Let’s first agree on how we will represent arithmetic expressions. Let’s say
    we want to support only two operations—<wbr>addition and multiplication—<wbr>in
    addition to primitive numbers. We need to represent arithmetic expressions. What
    are the rules that govern the nesting of arithmetic expressions? We’re actually
    free to nest any expression inside another.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先就如何表示算术表达式达成一致。假设我们只想支持两种操作——<wbr>加法和乘法——<wbr>除了原始数字。我们需要表示算术表达式。规定了什么样的规则来嵌套算术表达式？实际上，我们可以自由地将任何表达式嵌套在另一个表达式中。
- en: Do Now!
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就做吧！
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Why did we not include division? What impact does it have on the remarks above?
  id: totrans-13
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为什么我们没有包括除法？这对上述评论有何影响？
- en: 'We’ve ignored division because it forces us into a discussion of what expressions
    we might consider legal: clearly the representation of 1/2 ought to be legal;
    the representation of 1/0 is much more debatable; and that of 1/(1-1) seems even
    more controversial. We’d like to sidestep this controversy for now and return
    to it later [REF].Thus, we want a representation for numbers and arbitrarily nestable
    addition and multiplication. Here’s one we can use:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们忽略了除法，因为它迫使我们讨论哪些表达式我们可能认为是合法的：显然，1/2 的表示应该是合法的；1/0 的表示则更具争议；而 1/(1-1) 的表示似乎更具争议性。我们想暂时回避这个争议，并以后再回到它
    [REF]。因此，我们想要一个表示数字和任意可嵌套的加法和乘法的表示。下面是一个我们可以使用的：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 24.2Writing an Interpreter
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 撰写解释器
- en: Now let’s write an interpreter for this arithmetic language. First, we should
    think about what its type is. It clearly consumes a ArithC value. What does it
    produce? Well, an interpreter evaluates—<wbr>and what kind of value might arithmetic
    expressions reduce to? Numbers, of course. So the interpreter is going to be a
    function from arithmetic expressions to numbers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为这个算术语言编写一个解释器。首先，我们应该考虑它的类型是什么。它显然消耗一个 ArithC 值。它产生什么？嗯，一个解释器进行评估——算术表达式可能归约为什么样的值？当然是数字。因此，解释器将是一个从算术表达式到数字的函数。
- en: Exercise
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write your examples for the interpreter.
  id: totrans-20
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为你的解释器编写例子。
- en: Because we have a recursive datatype, it is natural to structure our interpreter
    as a recursive function over it. Here’s a first template:Templates are explained
    in detail in [How to Design Programs](http://www.htdp.org/).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们有一个递归数据类型，将我们的解释器构建为它的递归函数是很自然的。这是一个第一个模板：模板的详细说明见 [How to Design Programs](http://www.htdp.org/)。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You’re probably tempted to jump straight to code, which you can:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会直接跳到代码，你可以：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: which works just fine, passing its test.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它运行得非常顺利，通过了测试。
- en: Do Now!
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就做吧！
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Do you spot the errors?
  id: totrans-28
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你发现了错误吗？
- en: 'Instead, let’s expand the template out a step:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们将模板扩展出一步：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and now we can fill in the blanks:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以填写空白处了：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Later on ([Functions Anywhere](Interpreting_Functions.html#%28part._higher-order-functions%29)),
    we’re going to wish we had returned a more complex datatype than just numbers.
    But for now, this will do.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 后面（[随处可用的函数](Interpreting_Functions.html#%28part._higher-order-functions%29)），我们将希望我们返回的数据类型比仅仅是数字更复杂一些。但是现在，这就够了。
- en: 'Congratulations: you’ve written your first interpreter! I know, it’s very nearly
    an anticlimax. But they’ll get harder—<wbr>much harder—<wbr>pretty soon, I promise.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜：你已经写下了你的第一个解释器！我知道，这几乎是一个令人失望的结局。但它们很快会变得更难——<wbr>非常困难——<wbr>我保证。
- en: 24.3A First Taste of “Semantics”
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 24.3A “语义”初尝试
- en: 'I just slipped something by you:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚才在你面前溜走了一些东西：
- en: Do Now!
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就去做！
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What is the “meaning” of addition and multiplication in this new language?
  id: totrans-39
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这种新语言中，加法和乘法的“含义”是什么？
- en: That’s a pretty abstract question, isn’t it. Let’s make it concrete. I’ll pose
    the problem as follows.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当抽象的问题，不是吗？让我们把它具体化。我将问题提出如下。
- en: Which of these is the same?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些哪个是相同的？
- en: 1 + 2
  id: totrans-42
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 + 2
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-44
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 1 + 2
  id: totrans-45
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 + 2
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ’1’ + ’2’
  id: totrans-48
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ’1’ + ’2’
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ’1’ + ’2’
  id: totrans-51
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ’1’ + ’2’
- en: 'What we’re driving at is that there are many kinds of addition in computer
    science:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要讨论的是，在计算机科学中有许多种类的加法：
- en: 'First of all, there are many different kinds of numbers: fixed-width (e.g.,
    32-bit) integers, signed fixed-width (e.g., 31-bits plus a sign-bit) integers,
    arbitrary precision integers; in some languages, rationals; various formats of
    fixed- and floating-point numbers; in some languages, complex numbers; and so
    on. After the numbers have been chosen, addition may support only some combinations
    of them.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，有许多不同类型的数字：固定宽度（例如，32 位）整数，带符号的固定宽度（例如，31 位加一个符号位）整数，任意精度整数；在某些语言中，有理数；各种格式的固定和浮点数；在某些语言中，复数；等等。在选择了数字之后，加法可能仅支持其中的一些组合。
- en: In addition, some languages permit the addition of datatypes such as matrices.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，一些语言允许添加诸如矩阵之类的数据类型。
- en: Furthermore, many languages support “addition” of strings (we use scare-quotes
    because we don’t really mean the mathematical concept of addition, but rather
    the operation performed by an operator with the syntax +). In some languages this
    always means concatenation; in some others, it can result in numeric results (or
    numbers stored in strings).
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，许多语言支持对字符串的“加法”（我们用引号括起来是因为我们并不真正指的是数学概念中的加法，而是指由具有语法+的运算符执行的操作）。在某些语言中，这总是意味着连接；在其他一些语言中，它可能会产生数值结果（或存储在字符串中的数字）。
- en: These are all different “meanings for addition”. Semantics is the mapping of
    syntax (e.g., +) to meaning (e.g., some or all of the above).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是不同的“加法含义”。语义是将语法（例如，+）映射到含义（例如，上述某些或全部）的过程。
- en: 'Returning to our interpreter, what semantics do we have? We’ve adopted whatever
    semantics Pyret provides, because we map + to Pyret’s +. In fact that’s not even
    quite true: Pyret may, for all we know, also enable + to apply to strings (which
    in fact it does), so we’ve chosen the restriction of Pyret’s semantics to numbers.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的解释器，我们有什么语义？我们采用了 Pyret 提供的任何语义，因为我们将 + 映射到 Pyret 的 +。事实上，这甚至不完全正确：Pyret
    可能（据我们所知）也使 + 适用于字符串（实际上确实是这样），所以我们选择了 Pyret 语义仅适用于数字的限制。
- en: Exercise
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In what way have we restricted + to apply only to numbers? Where exactly is
    this restriction?
  id: totrans-60
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们是以何种方式限制了 + 只适用于数字？这种限制究竟在哪里？
- en: If we wanted a different semantics, we’d have to implement it explicitly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要不同的语义，我们将不得不明确地实现它。
- en: Exercise
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What all would you have to change so that the number had signed 32-bit arithmetic?
  id: totrans-64
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果我们想让数字具有带符号的 32 位算术，我们需要更改什么？
- en: In general, we have to be careful about too readily borrowing from the host
    language. We’ll return to this topic later [REF]. However, because we have lots
    of interesting things to study already, we will adopt Pyret’s numbers as our numbers
    for now.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们必须谨慎从宿主语言中借鉴。我们稍后会回到这个话题[REF]。但是，由于我们已经有了很多有趣的东西要研究，所以我们暂时将 Pyret 的数字作为我们的数字。
- en: '24.4Desugaring: Growing the Language Without Enlarging It'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 24.4去糖化：扩展语言而不扩大它
- en: 'We’ve picked a very restricted first language, so there are many ways we can
    grow it. Some, such as representing data structures and functions, will clearly
    force us to add new features to the interpreter itself. Others, such as adding
    more of arithmetic itself, can possibly be done without disturbing the core language
    and hence its interpreter: this is known as adding syntactic sugar, or “sugar”
    for short. Let’s investigate.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了一个非常受限的第一语言，所以我们有很多方法可以扩展它。有些方法，比如表示数据结构和函数，显然会迫使我们向解释器本身添加新功能。其他方法，比如增加更多的算术本身，可能可以在不干扰核心语言及其解释器的情况下完成：这被称为添加语法糖，或简称为“糖”。让我们来研究一下。
- en: '24.4.1Extension: Binary Subtraction'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 24.4.1扩展：二进制减法
- en: 'First, we’ll add subtraction. Because our language already has numbers, addition,
    and multiplication, it’s easy to define subtraction: \(a - b = a + -1 \times b\).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加减法。因为我们的语言已经有了数字、加法和乘法，所以很容易定义减法：\(a - b = a + -1 \times b\)。
- en: 'Okay, that was easy! But now we should turn this into concrete code. To do
    so, we face a decision: where does this new subtraction operator reside? It is
    tempting, and perhaps seems natural, to just add one more case to our existing
    ArithC datatype.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这很容易！但现在我们应该将其转化为具体的代码。为此，我们面临一个决定：这个新的减法运算符应该放在哪里？将其添加到现有的ArithC数据类型中似乎很诱人，也许似乎很自然。
- en: Do Now!
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What are the negative consequences of modifying ArithC?
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 修改ArithC的负面后果是什么？
- en: 'This creates a few problems:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这带来了一些问题：
- en: The first, obvious, one is that we now have to modify all programs that process
    ArithC. So far that’s only our interpreter, which is pretty simple, but in a more
    complex implementation, there could be many programs built around the datatype—<wbr>a
    type-checker, compiler, etc.—<wbr>which must all be changed, creating a heavy
    burden.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个，显而易见的问题是，我们现在必须修改所有处理ArithC的程序。到目前为止，只有我们的解释器，它相当简单，但在更复杂的实现中，可能会有许多围绕数据类型构建的程序—<wbr>类型检查器、编译器等—<wbr>都必须进行更改，造成沉重的负担。
- en: Second, we were trying to add new constructs that we can define in terms of
    existing ones; it feels slightly self-defeating to do this in a way that isn’t
    modular.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，我们试图添加可以根据现有构造定义的新构造；以一种不模块化的方式做这件事似乎有点自我打击。
- en: Third, and most subtly, there’s something conceptually unnecessary about modifying
    ArithC. That’s because ArithC represents a perfectly good core language. Atop
    this, we might want to include any number of additional operations that make the
    user’s life more convenient, but there’s no need to put these in the core. Rather,
    it’s wise to record conceptually different ideas in distinct datatypes, rather
    than shoehorn them into one. The separation can look a little unwieldy sometimes,
    but it makes the program much easier for future developers to read and maintain.
    Besides, for different purposes you might want to layer on different extensions,
    and separating the core from the surface enables that.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三，最微妙的是，修改ArithC有一些概念上的不必要性。这是因为ArithC代表了一个非常好的核心语言。在此基础上，我们可能想要包含任意数量的额外操作，使用户的生活更方便，但没有必要将这些操作放在核心中。相反，明智的做法是将概念上不同的想法记录在不同的数据类型中，而不是将它们硬塞到一个数据类型中。有时分离看起来可能有点笨拙，但这使得未来开发人员更容易阅读和维护程序。此外，出于不同的目的，您可能希望添加不同的扩展，将核心与表面分离使这成为可能。
- en: Therefore, we’ll define a new datatype to reflect our intended surface syntax
    terms:<arith-dt> ::=
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将定义一个新的数据类型来反映我们打算的表面语法术语：<arith-dt> ::=
- en: '|   data ArithExt: |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '|   数据 ArithExt: |'
- en: '|     &#124; numExt (n :: Number) |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '|     &#124; numExt (n :: Number) |'
- en: '|     &#124; plusExt (l :: ArithExt, r :: ArithExt) |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '|     &#124; plusExt (l :: ArithExt, r :: ArithExt) |'
- en: '|     &#124; multExt (l :: ArithExt, r :: ArithExt) |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '|     &#124; multExt (l :: ArithExt, r :: ArithExt) |'
- en: '|     &#124; bminusExt (l :: ArithExt, r :: ArithExt) |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '|     &#124; bminusExt (l :: ArithExt, r :: ArithExt) |'
- en: '|     [<uminus-dt>](#%28elem._uminus-dt%29) |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '|     [<uminus-dt>](#%28elem._uminus-dt%29) |'
- en: '|   end |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '|   end |'
- en: This looks almost exactly like ArithC, other than the added case, which follows
    the familiar recursive pattern. Note that the children of each node refer to ArithExt,
    not ArithC.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎与ArithC完全相同，除了添加的情况外，后者遵循熟悉的递归模式。请注意，每个节点的子节点都指向ArithExt，而不是ArithC。
- en: Do Now!
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What happens if the children are declared to be ArithC rather than ArithExt?
  id: totrans-89
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果将子节点声明为ArithC而不是ArithExt会发生什么？
- en: If we did this, then we would be able to use sugar only at the top-level, not
    in any sub-expressions.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们这样做，那么我们只能在顶层使用语法糖，而不能在任何子表达式中使用。
- en: Given this datatype, we should do two things. First, we should modify our parser
    to also parse - expressions, and always construct ArithExt terms (rather than
    any ArithC ones). Second, we should implement a desugar function that translates
    ArithExt values into ArithC ones.Desugaring is the act of removing syntactic sugar.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这个数据类型，我们应该做两件事。首先，我们应该修改我们的解析器以解析 - 表达式，并始终构造 ArithExt 项（而不是任何 ArithC 项）。其次，我们应该实现一个
    desugar 函数，将 ArithExt 值转换为 ArithC 值。去糖化是去除语法糖的行为。
- en: Let’s write the obvious part of desugar:<main> ::=
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写 desugar 的明显部分：<main> ::=
- en: '|   fun desugar(s :: ArithExt) -> ArithC: |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '|   fun desugar(s :: ArithExt) -> ArithC: |'
- en: '|     cases (ArithExt) s: |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '|     cases (ArithExt) s: |'
- en: '|       &#124; numExt(n) => numC(n) |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '|       &#124; numExt(n) => numC(n) |'
- en: '|       &#124; plusExt(l, r) => plusC(desugar(l), desugar(r)) |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '|       &#124; plusExt(l, r) => plusC(desugar(l), desugar(r)) |'
- en: '|       &#124; multExt(l, r) => multC(desugar(l), desugar(r)) |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '|       &#124; multExt(l, r) => multC(desugar(l), desugar(r)) |'
- en: '|       [<bminus>](#%28elem._bminus%29) |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '|       [<bminus>](#%28elem._bminus%29) |'
- en: '|       [<uminus>](#%28elem._uminus%29) |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '|       [<uminus>](#%28elem._uminus%29) |'
- en: '|     end |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '|     end |'
- en: '|   end |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '|   end |'
- en: Now let’s convert the mathematical description of subtraction above into code:<bminus>
    ::=
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将上面的减法的数学描述转换为代码：<bminus> ::=
- en: '|   &#124; bminusExt(l, r) => |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '|   &#124; bminusExt(l, r) => |'
- en: '|     plusC(desugar(l), multC(numC(-1), desugar(r))) |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '|     plusC(desugar(l), multC(numC(-1), desugar(r))) |'
- en: Do Now!
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It’s a common mistake to forget the recursive calls to desugar on l and r. What
    happens when you forget them? Try for yourself and see.
  id: totrans-107
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 忘记在 l 和 r 上递归调用 desugar 是一个常见的错误。当你忘记它们时会发生什么？自己尝试一下看看。
- en: '24.4.2Extension: Unary Negation'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 24.4.2扩展：一元否定
- en: 'Now let’s consider another extension, which is a little more interesting: unary
    negation. This forces you to do a little more work in the parser because, depending
    on your surface syntax, you may need to look ahead to determine whether you’re
    in the unary or binary case. But that’s not even the interesting part!'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑另一个扩展，这个扩展有点更有趣：一元否定。这会迫使你在解析器中做更多工作，因为根据你的表面语法，你可能需要向前查看以确定你是在一元还是二元情况下。但这甚至不是有趣的部分！
- en: Exercise
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Modify parse to handle unary subtraction.
  id: totrans-112
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 修改解析器以处理一元减法。
- en: 'There are many ways we can desugar unary negation. We can define it naturally
    as \(-b = 0 - b\), or we could abstract over the desugaring of binary subtraction
    with this expansion: \(-b = 0 + -1 \times b\).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有许多方法去去糖化一元否定。我们可以自然地定义它为 \(-b = 0 - b\)，或者我们可以通过这个展开来抽象化二元减法的去糖化：\(-b =
    0 + -1 \times b\)。
- en: Do Now!
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Which one do you prefer? Why?
  id: totrans-116
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你更喜欢哪一个？为什么？
- en: It’s tempting to pick the first expansion, because it’s much simpler. Imagine
    we’ve extended the ArithExt datatype with a representation of unary negation:<uminus-dt>
    ::=
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 选择第一个展开是很诱人的，因为它更简单。想象一下，我们已经用一元否定的表示扩展了 ArithExt 数据类型：<uminus-dt> ::=
- en: '|   &#124; uminusExt (e :: ArithExtU) |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '|   &#124; uminusExt (e :: ArithExtU) |'
- en: Now the implementation in desugar is straightforward:<uminus> ::=
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 desugar 中的实现很简单：<uminus> ::=
- en: '|   &#124; uminusExt(e) => desugar(bminusExt(numExt(0), e)) |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '|   &#124; uminusExt(e) => desugar(bminusExt(numExt(0), e)) |'
- en: 'Let’s make sure the types match up. Observe that e is a ArithExt term, so it
    is valid to use as an argument to bminusExt, and the entire term can legally be
    passed to desugar. It is therefore important to not desugar e but rather embed
    it directly in the generated term. This embedding of an input term in another
    one and recursively calling desugar is a common pattern in desugaring tools; it
    is called a macro (specifically, the “macro” here is this definition of uminusExt).However,
    there are two problems with the definition above:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们确保类型匹配。注意 e 是一个 ArithExt 项，因此可以作为参数传递给 bminusExt，并且整个项可以合法地传递给 desugar。因此，重要的是不要去糖化
    e，而是直接嵌入到生成的项中。在去糖化工具中嵌入一个输入项到另一个项并递归调用 desugar 是一个常见的模式；这被称为宏（具体来说，在这里“宏”是 uminusExt
    的定义）。然而，上面的定义有两个问题： '
- en: 'The first is that the recursion is generative, which forces us to take extra
    care.If you haven’t heard of generative recursion before, read the section on
    it in [How to Design Programs](http://www.htdp.org/). Essentially, in generative
    recursion the sub-problem is a computed function of the input, rather than a structural
    piece of it. This is an especially simple case of generative recursion, because
    the “function” is simple: it’s just the bminusExt constructor. We might be tempted
    to fix this by using a different rewrite:<uminus/alt> ::='
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一点是递归是生成的，这迫使我们额外小心。如果你以前没有听说过生成递归，请阅读[如何设计程序](http://www.htdp.org/)中关于它的章节。基本上，在生成递归中，子问题是输入的计算函数，而不是其结构的一部分。这是生成递归的一个特别简单的情况，因为“函数”很简单：它只是
    bminusExt 构造器。我们可能会想通过使用不同的重写来修复这个问题：<uminus/alt> ::=
- en: '|   &#124; uminusExt(e) => bminusExt(numExt(0), desugar(e)) |'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '|   &#124; uminusExt(e) => bminusExt(numExt(0), desugar(e)) |'
- en: which does indeed eliminate the generativity.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确实消除了生成性。
- en: Do Now!
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在动手！
- en: ''
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unfortunately, this desugaring transformation won’t work at all! Do you see
    why? If you don’t, try to run it.
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不幸的是，这种展开转换根本行不通！你明白为什么吗？如果不明白，试着运行一下。
- en: The second is that we are implicitly depending on exactly what bminusExt means;
    if its meaning changes, so will that of uminusExt, even if we don’t want it to.
    In contrast, defining a functional abstraction that consumes two terms and generates
    one representing the addition of the first to -1 times the second, and using this
    to define the desugaring of both uminusExt and bminusExt, is a little more fault-tolerant.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二点是，我们在隐含地依赖于 bminusExt 的确切含义；如果其含义发生变化，uminusExt 的含义也将发生变化，即使我们不希望如此。相比之下，定义一个函数抽象，它接受两个项并生成一个表示第一个项加上第二个项乘以-1的结果，并使用这个函数来定义
    uminusExt 和 bminusExt 的展开，会更加容错。
- en: You might say that the meaning of subtraction is never going to change, so why
    bother? Yes and no. Yes, it’s meaning is unlikely to change; but no, its implementation
    might. For instance, the developer may decide to log all uses of binary subtraction.
    In the first expansion all uses of unary negation would also get logged, but they
    would not in the second expansion.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会说减法的含义永远不会改变，所以为什么要费心呢？是的和不是。是的，它的含义不太可能改变；但不是，它的实现可能会改变。例如，开发人员可能决定记录所有二元减法的用法。在第一个展开中，所有一元否定的用法也将被记录，但在第二个展开中不会。
- en: Fortunately, in this particular case we have a much simpler option, which is
    to define \(-b = -1 \times b\). This expansion works with the primitives we have,
    and follows structural recursion. The reason we took the above detour, however,
    is to alert you to these problems, and warn that you might not always be so fortunate.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在这种特殊情况下，我们有一个更简单的选择，即定义 \(-b = -1 \times b\)。这种展开使用我们拥有的基本操作，并且遵循结构递归。然而，我们之前走这条弯路的原因是提醒您这些问题，并警告您可能并不总是这么幸运。
- en: 24.5A Three-Stage Pipeline
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 24.5A 三阶段流水线
- en: This concludes our first look at the standard pipeline we’re going to use. We
    will first parse programs to convert them to abstract syntax; we will then desugar
    them to eliminate unnecessary constructs. From now on, we will usually focus just
    on the resulting core language, which will be subject to not only interpretation
    but also type-checking and other actions.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们第一次看到的标准流水线，我们将使用它。我们将首先解析程序以将其转换为抽象语法；然后，我们将对其进行解糖以消除不必要的结构。从现在开始，我们通常只关注结果核心语言，它不仅将受到解释，还将受到类型检查和其他操作的影响。
