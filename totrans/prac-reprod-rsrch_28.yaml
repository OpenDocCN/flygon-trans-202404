- en: 'Reproducible Computational Science on High Performance Computers: A View from
    Neutron Transport'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高性能计算上的可重现计算科学：中子输运视角
- en: 'Reproducible Computational Science on High Performance Computers:'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高性能计算上的可重现计算科学：
- en: Rachel Slaybaugh
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rachel Slaybaugh
- en: 'My name is Rachel Slaybaugh and I am an Assistant Professor in the Nuclear
    Engineering Department at the University of California, Berkeley. I study computational
    methods for neutron transport: numerical methods for solving the Boltzmann equation
    applied to neutral particle interactions. The methods I study are both deterministic
    (e.g. finite difference, etc.) and stochastic (Monte Carlo). I develop these algorithms
    for reactor design and analysis, radiation shielding, and nuclear nonproliferation
    applications. Much of my work has an emphasis on high performance computing. (Tagline:
    intersection of applied math and computational science, informed by nuclear engineering)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我叫Rachel Slaybaugh，是加州大学伯克利分校核工程系的助理教授。我研究中子输运的计算方法：应用于中性粒子相互作用的玻尔兹曼方程的数值方法。我研究的方法既有确定性的（如有限差分等），也有随机的（蒙特卡洛）。我为反应堆设计和分析、辐射屏蔽和核不扩散应用开发这些算法。我的许多工作都强调高性能计算。（标语：应用数学和计算科学的交叉点，受核工程启发）
- en: Workflow
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作流程
- en: '![Diagram](slaybaugh.png) I tend to think of my workflow for code development
    as having three fundamental steps: (1) idea generation and refinement, (2) idea
    implementation and testing, and (3) large scale testing and publication.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '![图表](slaybaugh.png) 我倾向于将我的代码开发工作流程看作具有三个基本步骤：（1）思路生成和完善，（2）思路实施和测试，以及（3）大规模测试和发布。'
- en: '**Step 1**: The starting point of a new project is the development of an algorithm.
    This comes from a combination of reviewing literature, discussion with colleagues,
    familiarity with challenges in the field, and so on. As I refine an idea, I find
    I need to review more literature; as I research the literature, I refine the idea.
    The algorithm development tends to be collaborative as it is based on discussions
    with others, but the literature review tends to be independent. I like to write
    notes while reading papers in one large LaTeX document and keep that document
    in a repository with all of my other notes and reviews so all of my notes on a
    given topic are in one place and I only have one place to look for things I have
    researched in the past.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一步**：新项目的起点是算法的开发。这来自于文献回顾、与同事讨论、熟悉领域挑战等的结合。随着思路的完善，我发现需要回顾更多文献；随着研究文献，我完善思路。算法开发往往是协作的，因为它基于与他人的讨论，但文献回顾往往是独立的。我喜欢在阅读论文时写笔记，将这些笔记保存在一个大型的LaTeX文档中，并将该文档与我所有其他的笔记和评论一起存储在一个仓库中，这样我在一个地方就可以找到关于某个主题的所有笔记，并且只需在一个地方查找我过去研究过的内容。'
- en: Next, I implement a simplified version of the algorithm to make sure that it
    works at all. For example, I would implement a 0D or 1D version (as opposed to
    3D) of a method quickly and simply in Python to use for testing. In this step
    there can be iteration between the algorithm idea and the test code, informed
    by additional literature review as necessary. Once satisfied with the experiments
    with the simple code, the algorithm is considered "final" (though of course it
    can be adjusted later if needed). I am not sure that this part of the workflow
    is reproducible in the sense that the process could be exactly replicated, but
    version controlling everything makes it possible to recover intermediate steps,
    which in some ways allows the idea refinement to be traced.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我会实现算法的简化版本，以确保它能正常工作。例如，我会在Python中快速简单地实现一个0D或1D版本（而不是3D）的方法用于测试。在这一步中，算法思路和测试代码之间可以进行迭代，必要时可以根据额外的文献回顾进行调整。一旦对简化代码的实验满意，算法就被认为是“最终的”（尽管当然可以在需要时进行调整）。我不确定工作流程的这一部分是否可重现，即过程是否可以完全复制，但对所有内容进行版本控制使得可以恢复中间步骤，从某种程度上允许追踪思路的完善过程。
- en: '**Step 2**: Once there is a finalized algorithm, it gets implemented in the
    "real" code that has multiple developers and is written in a compiled language
    like C++. The repository for the code is typically private because, as mentioned,
    these codes are not completely open. It is often the case that only one or a very
    few people are working on this idea, so we make a branch and do the development
    there. I add unit tests to a testing framework associated with the code as I go
    (for example GoogleTest); the tests reside in the same repository as the main
    code. As the code approaches completion, I use small "system" test problems to
    investigate basic system functionality: does the code get the correct answer for
    analytical/known solutions? what does basic performance look like? etc. The small
    tests are also version controlled--either in the same repository as the source
    code or in a separate one.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2**：一旦确定了最终算法，就会在“真实”的代码中实现它，这些代码由多个开发人员编写，使用像 C++ 这样的编译语言编写。代码的存储库通常是私有的，因为如前所述，这些代码并不完全开放。通常情况下，只有一个或很少几个人在开发这个想法，所以我们会创建一个分支并在那里进行开发。我会在与主要代码相同的存储库中随着代码的编写逐步向与代码相关联的测试框架（例如
    GoogleTest）添加单元测试。随着代码接近完成，我会使用小的“系统”测试问题来调查基本系统功能：代码对分析/已知解的回答是否正确？基本性能如何？等等。这些小测试也是版本控制的--要么在与源代码相同的存储库中，要么在单独的存储库中。'
- en: Once the unit tests are deemed sufficient and, combined with the small tests,
    everything indicates that code is correct, I finalize documentation. Throughout
    development I typically use [Doxygen](http://www.stack.nl/~dimitri/doxygen/) to
    comment the code. Doxygen automatically generates documentation from source code
    comments when those comments are made using particular, simple annotations. Doxygen
    works for languages like C++, Python, Java, and others. Using Doxygen is useful
    for creating an application program interface quickly and easily. However, some
    extra work is often required to get the theory down and provide clearer directions
    for using the new algorithm. All of that is written in LaTeX for incorporation
    into the user and/or theory manual. The documentation LaTeX files are version
    controlled, often in a separate documentation directory. At this point the code
    will be reviewed and merged into the main code base. Once the code is finalized,
    the unit test and small test results should all be reproducible by the other developers--the
    people who have access to the developer repository.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦单元测试被认为足够，并且结合小测试，一切都表明代码是正确的，我会完成文档。在整个开发过程中，我通常使用 [Doxygen](http://www.stack.nl/~dimitri/doxygen/)
    对代码进行注释。当使用特定的简单注释时，Doxygen 会自动从源代码注释中生成文档。Doxygen 适用于像 C++、Python、Java 等语言。使用
    Doxygen 可以快速轻松地创建应用程序接口。但是，通常需要一些额外的工作来理清理论并提供更清晰的使用新算法的说明。所有这些都写在 LaTeX 中，以便纳入用户和/或理论手册。文档的
    LaTeX 文件是版本控制的，通常位于单独的文档目录中。此时，代码将被审核并合并到主代码库中。一旦代码完成，其他开发人员--即可以访问开发者存储库的人--应该能够重现所有单元测试和小测试的结果。
- en: '**Step 3**: Once there is "finalized" code, it is time to do the real demonstration
    testing for publication. This involves running large test problems that demonstrate
    performance of the new algorithm for problems of interest as well as comparison
    to benchmarks to demonstrate correctness. The literature review, algorithm description,
    and results of the large (and sometimes small) tests will go in a final LaTeX
    document for journal submission. Recording of work for journal publication will
    also be version controlled, typically in a public GitHub repository. The idea
    is that, beyond the text writeup, the large test input files will be in the same
    repository as any scripts required to process data and generate plots, all with
    corresponding directions. Thus if you have access to the code and the repository
    with tests, scripts, and results, you can rerun all the calculations and process
    the data.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3**：一旦有了“最终”代码，就是进行真正的演示测试以供发布的时候了。这涉及运行大型测试问题，展示新算法对感兴趣的问题的性能以及与基准的比较以证明正确性。文献综述、算法描述以及大型（有时是小型）测试的结果将会放在最终的
    LaTeX 文档中以供期刊提交。用于期刊发表的工作记录也将进行版本控制，通常在一个公共的 GitHub 存储库中。这样做的目的是，除了文字描述之外，大型测试输入文件将与任何处理数据并生成图表所需的脚本放在同一个存储库中，而且还有相应的说明。因此，如果您可以访问代码和包含测试、脚本和结果的存储库，那么您可以重新运行所有计算并处理数据。'
- en: Pain points
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 痛点
- en: 'There are a few pain points: An annoying one is getting the documentation right.
    It seems like just using Doxygen is not enough. To get something that really is
    user-manual quality you have to write a lot of things twice, just slightly differently.
    I try to reuse as much as I can, but if things are replicated there is the challenge
    of maintaining consistency.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个痛点：一个令人烦恼的问题是如何正确撰写文档。似乎仅仅使用Doxygen还不够。要得到真正的用户手册质量，你必须写很多东西两次，只是稍微有些不同。我尽量重复利用，但如果事情被重复，就会面临保持一致性的挑战。
- en: A tough one is ensuring that the version of what is released in the end is actually
    reproducible. This requires the extra step of documenting which version of the
    code was used (the results should not change in the future, but it is better to
    have the version clearly written just in case). In principle one can figure this
    out from the repositories, but if everything isn't stored together that becomes
    more challenging. Providing directions about how to run everything and which versions
    of third party libraries were used is also some extra work.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个棘手的问题是确保最终发布的版本实际上是可重现的。这需要额外的步骤来记录使用了哪个版本的代码（结果在未来不应该发生变化，但最好清楚地写出版本以防万一）。原则上，人们可以从仓库中找到这一点，但如果所有内容都没有存储在一起，这将变得更加困难。提供有关如何运行所有内容以及使用了哪些第三方库的版本的说明也需要额外的工作。
- en: A final pain point is re-implementing the algorithm from the simple case to
    the complex case, since the simple code is never really used for anything. However,
    this is a pretty small issue since the toy code didn't take long to develop.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个痛点是从简单情况重新实现算法到复杂情况，因为简单代码实际上从未被用于任何事情。然而，这是一个相当小的问题，因为玩具代码不需要很长时间来开发。
- en: Key benefits
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键好处
- en: The largest benefit of this approach is having confidence in the validity of
    the data that you publish. For me that confidence starts with implementing the
    methods and their tests at the same time. I think everyone should have a unit
    testing system; it is difficult for me to see how one could have confidence in
    the correctness of their software without one. I get very nervous about using
    code that I write if I haven't written tests to go with it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的最大好处在于对所发布数据的有效性有信心。对我来说，这种信心始于同时实施方法及其测试。我认为每个人都应该有一个单元测试系统；如果没有这个系统，很难相信软件的正确性。如果没有编写相应的测试，我使用自己编写的代码时会非常紧张。
- en: Having an up-to-date application programming interface is also very useful.
    When I'm interfacing or working with a piece of code I wrote a long time ago I
    would not otherwise remember what it did or how to use it. It is also helpful
    when interfacing with parts of the program other people wrote. This extends to
    proper documentation. I personally can't remember many things. I must write them
    down for future reference. Keeping a user and theory manual means not only that
    users and other developers will know what the code does and why, it means next
    week I will also know what the code does and why.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有最新的应用程序接口也非常有用。当我与我以前写的一段时间前的代码进行交互或工作时，否则我不会记得它是用来做什么的，或者如何使用它。当与其他人编写的程序的部分进行交互时，这也很有帮助。这也延伸到正确的文档上。我个人记不住很多东西。我必须写下来以供将来参考。保持用户和理论手册意味着不仅用户和其他开发人员会知道代码做什么以及为什么，而且下周我也会知道代码做什么以及为什么。
- en: I also find that having little bits of experimental code, the low-dimension
    test pieces I write at the beginning, are useful to have on hand. This does not
    particularly impact reproducibility, but it is useful to have chunks of code to
    start with when playing around with new ideas. Similarly, having a repository
    with literature review notes is good for remembering past research, speeds up
    writing papers and documentation, and provides a place to start looking the next
    time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我也发现，拥有一些实验性代码小片段，即我在开始阶段编写的低维度测试片段，对手头工作很有用。这并不特别影响可重现性，但当尝试新想法时，拥有一些代码块作为起点是很有用的。同样地，拥有一份包含文献综述笔记的仓库对于记忆过去的研究、加速撰写论文和文档，以及提供下次查找的起点都很有帮助。
- en: Key tools
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键工具
- en: They key tools I use are Doxygen, git (for version control), LaTeX, and plotting
    and data manipulation tools (usually in Python).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的关键工具包括 Doxygen、git（用于版本控制）、LaTeX，以及绘图和数据处理工具（通常是Python）。
- en: Questions
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: What does "reproducibility" mean to you?
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 对于你来说，“可重现性”是什么意思？
- en: The first way I think of reproducibility is "can I/my lab reproduce the results
    in my paper exactly?" After that, "can an independent researcher, given that they
    have legal access to the required data and software, reproduce the results?" Nuclear
    engineering data and codes are often controlled, so for many projects only researchers
    within my field will have access to the required data and software. Fortunately,
    such non-open-source codes are typically available at no cost to researchers through
    a simple licensing process.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我对可重复性的第一种想法是“我/我的实验室能否精确重现我论文中的结果？”之后是，“一个独立的研究人员，只要他们有合法获取所需数据和软件的权限，能否重现结果？”核工程数据和代码通常受到控制，因此对于许多项目，只有我领域内的研究人员才能获取所需的数据和软件。幸运的是，这些非开源代码通常可以通过简单的许可过程免费提供给研究人员。
- en: Why do you think that reproducibility in your domain is important?
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你认为在你的领域中可重复性为何重要？
- en: The codes that we write are often used to investigate new nuclear systems and
    make long-term policy or design decisions based on the results. They are also
    used to study existing nuclear systems. This is important stuff; the codes need
    to be right and the results need to be verifiable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的代码经常用于研究新的核系统，并根据结果做出长期政策或设计决策。它们也用于研究现有的核系统。这是重要的事情；代码需要正确，结果需要可验证。
- en: How or where did you learn about reproducibility?
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你是如何或从何处了解到可重复性的？
- en: 'Mentors: my PhD advisers valued reproducible practices and insisted that we
    used them'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导师：我的博士导师重视可重复性实践，并坚持我们使用这些实践。
- en: 'Student groups: the Hacker Within'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学生团体：Hacker Within
- en: 'Practice: taking on a project that used good practices was how I really learned
    many of these skills'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实践：承担一个使用良好实践的项目是我真正学会许多这些技能的方式。
- en: 'Community exposure: spending time with others who value reproducible practices'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社区曝光：与重视可重复性实践的其他人共度时光。
- en: 'Self-study: looking up things I saw people do that looked helpful'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自学：查找我看到的看起来有帮助的事情。
- en: What do you see as the major challenges to doing reproducible research in your
    domain, and do you have any suggestions?
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你认为在你领域进行可重复研究的主要挑战是什么，你有什么建议吗？
- en: 'The biggest challenge is legal: only some people can access the codes and data
    required. A secondary challenge is access: some of the work I do requires high-performance
    computing that is not readily available to many.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的挑战是法律问题：只有一些人可以访问所需的代码和数据。次要挑战是访问问题：我做的一些工作需要高性能计算，这对许多人来说并不容易获得。
- en: What do you view as the major incentives for doing reproducible research?
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你认为进行可重复研究的主要动机是什么？
- en: '*Ethical mandate*: I want my work to be right and for others to be able to
    know that it is right.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*道德要求*：我希望我的工作是正确的，让其他人知道它是正确的。'
- en: '*Impact*: My ideas and products might then be adopted and built upon.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*影响*：我的想法和产品可能会被采纳并进一步发展。'
- en: Are there any best practices that you'd recommend for researchers in your field?
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在你的领域，你会推荐哪些最佳实践？
- en: Testing, testing, testing.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 测试，测试，测试。
- en: Would you recommend any specific resources for learning more about reproducibility?
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你会推荐哪些特定资源来了解更多关于可重复性的知识吗？
- en: Software Carpentry; the new Scopatz-Huff book.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程；新的Scopatz-Huff书。
