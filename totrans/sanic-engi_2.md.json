["```\n.\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 blueprints.py\n\u251c\u2500\u2500 config.py\n\u251c\u2500\u2500 exceptions.py\n\u251c\u2500\u2500 log.py\n\u251c\u2500\u2500 request.py\n\u251c\u2500\u2500 response.py\n\u251c\u2500\u2500 router.py\n\u251c\u2500\u2500 sanic.py\n\u251c\u2500\u2500 server.py\n\u2514\u2500\u2500 utils.py \n```", "```\n from sanic_0_1_2.src import Sanic\nfrom sanic_0_1_2.src.response import json\n\napp = Sanic(__name__)\n\n@app.route(\"/\")\nasync def test(request):\n    return json({\"test\": True})\n\napp.run(host=\"0.0.0.0\", port=8000) \n```", "```\ngit clone https://github.com/howie6879/sanic_annotation\ncd sanic_annotation/sanic_0_1_2/examples/ \n```", "```\n# \u6b64\u5904\u5c06\u8def\u7531 / \u4e0e\u89c6\u56fe\u51fd\u6570 test \u5173\u8054\u8d77\u6765\n@app.route(\"/\")\nasync def test(request):\n    return json({\"test\": True}) \n```", "```\n[Route(handler=<function test at 0x10a0f6488>, methods=None, pattern=re.compile('^/$'), parameters=[])] \n```", "```\n try:\n    serve(\n        host=host,\n        port=port,\n        debug=debug,\n        # \u670d\u52a1\u5f00\u59cb\u540e\u542f\u52a8\u7684\u51fd\u6570\n        after_start=after_start,\n        # \u5728\u670d\u52a1\u5173\u95ed\u524d\u542f\u52a8\u7684\u51fd\u6570\n        before_stop=before_stop,\n        # Sanic(__name__).handle_request()\n        request_handler=self.handle_request,\n        # \u9ed8\u8ba4\u8bfb\u53d6Config\n        request_timeout=self.config.REQUEST_TIMEOUT,\n        request_max_size=self.config.REQUEST_MAX_SIZE,\n    )\nexcept:\n    pass \n```", "```\n from sanic_0_1_2.src import Sanic\n# \u5f15\u5165Blueprint\nfrom sanic_0_1_2.src import Blueprint\nfrom sanic_0_1_2.src.response import json, text\n\napp = Sanic(__name__)\nblueprint = Blueprint('name', url_prefix='/my_blueprint')\nblueprint2 = Blueprint('name2', url_prefix='/my_blueprint2')\n\n@blueprint.route('/foo')\nasync def foo(request):\n    return json({'msg': 'hi from blueprint'})\n\n@blueprint2.route('/foo')\nasync def foo2(request):\n    return json({'msg': 'hi from blueprint2'})\n\napp.register_blueprint(blueprint)\napp.register_blueprint(blueprint2)\n\napp.run(host=\"0.0.0.0\", port=8000, debug=True) \n```", "```\n blueprint = Blueprint('name', url_prefix='/my_blueprint')\nblueprint2 = Blueprint('name2', url_prefix='/my_blueprint2') \n```", "```\n# \u751f\u6210\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u5230self.deferred_functions\u5217\u8868\u91cc \u5305\u542b\u4e09\u4e2a\u53c2\u6570 handler(foo), uri, methods\n@blueprint.route('/foo')\nasync def foo(request):\n    return json({'msg': 'hi from blueprint'})\n\n@blueprint2.route('/foo')\nasync def foo2(request):\n    return json({'msg': 'hi from blueprint2'})\n\n# \u4e0a\u4e00\u4e2a\u4f8b\u5b50\u8bf4\u8fc7\u8fd9\u4e2a\u51fd\u6570\uff0cSanic().register_blueprint() \u6ce8\u518c\u84dd\u56fe\napp.register_blueprint(blueprint)\napp.register_blueprint(blueprint2) \n```", "```\n #!/usr/bin/env\n# -*-coding:utf-8-*-\n# script: 01.py\n__author__ = 'howie'\nfrom functools import wraps\ndef decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"%s was called\" % func.__name__)\n        func(*args, **kwargs)\n    return wrapper\n@decorator\ndef hello(name=\"howie\"):\n    print(\"Hello %s!\" % name)\nhello() \n```", "```\noutputs:\nhello was called\nHello howie! \n```", "```\n#!/usr/bin/env\n# -*-coding:utf-8-*-\n# script: 02-1.py\n__author__ = 'howie'\ndef decorator(func):\n    print(\"%s was called\" % func.__name__)\n    func()\ndef hello(name=\"howie\"):\n    print(\"Hello %s!\" % name)\ndecorator(hello) \n```", "```\n#!/usr/bin/env\n# -*-coding:utf-8-*-\n# script: 02-2.py\n__author__ = 'howie'\ndef decorator(func):\n    print(\"%s was called\" % func.__name__)\n    func()\n@decorator\ndef hello(name=\"howie\"):\n    print(\"Hello %s!\" % name)\nhello \n```", "```\noutputs: shell\nhello was called\nHello howie! \n```", "```\n#!/usr/bin/env\n# -*-coding:utf-8-*-\n# script: 02-3.py\n__author__ = 'howie'\ndef decorator(func):\n    print(\"%s was called\" % func.__name__)\n    return func\n@decorator\ndef hello(name=\"howie\"):\n    print(\"Hello %s!\" % name)\nhello() \n```", "```\n#!/usr/bin/env\n# -*-coding:utf-8-*-\n# script: 02-4.py\n__author__ = 'howie'\ndef decorator(func):\n    print(\"%s was called\" % func.__name__)\n    func()\n    return bye\ndef bye():\n    print(\"bye~\")\n@decorator\ndef hello(name=\"howie\"):\n    print(\"Hello %s!\" % name)\nhello() \n```", "```\n#!/usr/bin/env\n# -*-coding:utf-8-*-\n# script: 02-5.py\n__author__ = 'howie'\ndef decorator(func):\n    def wrapper():\n      print(\"%s was called\" % func.__name__)\n      func()\n      print(\"bye~\")\n    return wrapper\n@decorator\ndef hello(name=\"howie\"):\n    print(\"Hello %s!\" % name)\nhello() \n```", "```\noutputs: shell\nhello was called\nHello howie!\nbye~ \n```", "```\n#!/usr/bin/env\n# -*-coding:utf-8-*-\n# script: 02-6.py\n__author__ = 'howie'\ndef decorator(func):\n    def wrapper():\n      print(\"%s was called\" % func.__name__)\n      func()\n      print(\"bye~\")\n    return wrapper\n@decorator\ndef hello(name=\"howie\"):\n    print(\"Hello %s!\" % name)\nhello()\nprint(hello.__name__) \n```", "```\noutputs: shell\nhello was called\nHello howie!\nbye~\nwrapper \n```", "```\n#!/usr/bin/env\n# -*-coding:utf-8-*-\n# script: 02-7.py\n__author__ = 'howie'\nfrom functools import wraps\ndef decorator(func):\n    @wraps(func)\n    def wrapper():\n      print(\"%s was called\" % func.__name__)\n      func()\n      print(\"bye~\")\n    return wrapper\n@decorator\ndef hello(name=\"howie\"):\n    print(\"Hello %s!\" % name)\nhello()\nprint(hello.__name__) \n```", "```\noutputs: shell\nhello was called\nHello howie!\nbye~\nhello \n```", "```\n#!/usr/bin/env\n# -*-coding:utf-8-*-\n# script: 01.py\n__author__ = 'howie'\nfrom functools import wraps\ndef decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"%s was called\" % func.__name__)\n        func(*args, **kwargs)\n    return wrapper\n@decorator\ndef hello(name=\"howie\"):\n    print(\"Hello %s!\" % name)\nhello('world') \n```"]