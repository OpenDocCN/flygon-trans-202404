- en: Chapter 2\. Exporting Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章\. 导出模型
- en: Before delving into model serving, it is necessary to discuss the topic of exporting
    models. As discussed previously, data scientists define models, and engineers
    implement model serving. Hence, the ability to export models from data science
    tools is now important.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入讨论模型服务之前，有必要讨论导出模型的主题。正如之前讨论的，数据科学家定义模型，工程师实现模型服务。因此，从数据科学工具导出模型的能力现在很重要。
- en: 'For this book, I will use two different examples: Predictive Model Markup Language
    (PMML) and TensorFlow. Let’s look at the ways in which you can export models using
    these tools.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，我将使用两个不同的示例：预测模型标记语言（PMML）和TensorFlow。让我们看看如何使用这些工具导出模型。
- en: TensorFlow
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow
- en: To facilitate easier implementation of model scoring, TensorFlow supports export
    of the trained models, which Java APIs can use to implement scoring. TensorFlow
    Java APIs are not doing the actual processing; they are just thin [Java Native
    Interface (JNI)](https://en.wikipedia.org/wiki/Java_Native_Interface) wrappers
    on top of the actual TensorFlow C++ code. Consequently, their usage requires “linking”
    the TensorFlow C++ executable to your Java application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易实现模型评分，TensorFlow支持导出经过训练的模型，Java API可以使用这些模型来实现评分。TensorFlow Java API并不执行实际处理；它们只是实际TensorFlow
    C++代码的薄[Java本机接口（JNI）](https://en.wikipedia.org/wiki/Java_Native_Interface)包装器。因此，它们的使用需要将TensorFlow
    C++可执行文件“链接”到您的Java应用程序。
- en: 'TensorFlow currently supports two types of model export: [export of the execution
    graph](https://www.tensorflow.org/api_docs/python/tf/train/Saver), which can be
    optimized for inference, and a new [SavedModel](http://bit.ly/tensorflow-savedmodel-github)
    format, introduced this year.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow目前支持两种模型导出类型：[执行图的导出](https://www.tensorflow.org/api_docs/python/tf/train/Saver)，可用于推理优化，以及今年推出的新的[SavedModel](http://bit.ly/tensorflow-savedmodel-github)格式。
- en: Exporting the Execution Graph
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出执行图
- en: Exporting the execution graph is a “standard” TensorFlow approach to save the
    model. Let’s take a look at an example of adding an execution graph export to
    a multiclass classification problem implementation using [Keras](http://bit.ly/keras-tutorial)
    with a TensorFlow backend applied to an open source [wine quality dataset](https://archive.ics.uci.edu/ml/datasets/wine+quality)
    ([complete code](http://bit.ly/keras-complete)).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 导出执行图是保存模型的“标准”TensorFlow方法。让我们看一个示例，如何将执行图导出到应用于开源[葡萄酒质量数据集](https://archive.ics.uci.edu/ml/datasets/wine+quality)的[Keras](http://bit.ly/keras-tutorial)与TensorFlow后端应用的多类分类问题实现中（[完整代码](http://bit.ly/keras-complete)）。
- en: Example 2-1\. Exporting an execution graph from a Keras model
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-1\. 从Keras模型导出执行图
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Example 2-1](#exporting_an_execution_graph_from_a_kera) is adapted from a
    [Keras machine learning example](http://bit.ly/keras-tutorial) to demonstrate
    how to export a TensorFlow graph. To do this, it is necessary to explicitly set
    the TensorFlow session for Keras execution. The TensorFlow execution graph is
    tied to the execution session, so the session is required to gain access to the
    graph.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2-1](#exporting_an_execution_graph_from_a_kera)改编自[Keras机器学习示例](http://bit.ly/keras-tutorial)，演示如何导出TensorFlow图。为此，需要明确设置Keras执行的TensorFlow会话。TensorFlow执行图与执行会话绑定，因此需要会话才能访问图形。'
- en: 'The actual graph export implementation involves the following steps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 实际图形导出实现涉及以下步骤：
- en: Save initial graph.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存初始图形。
- en: Freeze the graph (this means merging the graph definition with parameters).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 冻结图形（这意味着将图形定义与参数合并）。
- en: Optimize the graph for serving (remove elements that do not affect serving).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优化图形以进行服务（删除不影响服务的元素）。
- en: Save the optimized graph.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存优化后的图形。
- en: The saved graph is an optimized graph stored using the binary Google protocol
    buffer (protobuf) format, which contains only portions of the overall graph and
    data relevant for model serving (the portions of the graph implementing learning
    and intermediate calculations are dropped).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 保存的图形是使用二进制Google协议缓冲区（protobuf）格式存储的优化图形，其中仅包含对模型服务相关的部分图形和数据（实现学习和中间计算的部分图形被删除）。
- en: After the model is exported, you can use it for scoring. [Example 2-2](#serving_the_model_created_from_the_execu)
    uses the TensorFlow Java APIs to load and score the model ([full code available
    here](http://bit.ly/winemodelserving-scala)).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 导出模型后，您可以用它进行评分。[示例 2-2](#serving_the_model_created_from_the_execu)使用TensorFlow
    Java API加载和评分模型（[完整代码在此处可用](http://bit.ly/winemodelserving-scala)）。
- en: Example 2-2\. Serving the model created from the execution graph of the Keras
    model
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-2\. 为从 Keras 模型的执行图创建的模型提供服务
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this simple code, the constructor uses the `readGraph` method to read the
    execution graph and create a TensorFlow session with this graph attached to it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的代码中，构造函数使用`readGraph`方法读取执行图，并创建一个附加了该图的 TensorFlow 会话。
- en: The score method takes an input record containing wine quality observations
    and converts it to a tensor format, which is used as an input to the running graph.
    Because the exported graph does not provide any information about names and shapes
    of either inputs or outputs (the execution signature), when using this approach,
    it is necessary to know which variable(s) (i.e., input parameter) your flow accepts
    (feed) and which tensor(s) (and their shape) to fetch as a result. After the result
    is received (in the form of a tensor), its value is extracted.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: score 方法接受包含葡萄酒质量观察结果的输入记录，并将其转换为张量格式，该格式用作运行图的输入。由于导出的图不提供有关输入或输出的名称和形状（执行签名）的任何信息，因此在使用此方法时，必须知道您的流接受（提供）哪些变量（即输入参数）以及要获取的哪些张量（及其形状）作为结果。在接收到结果（以张量形式）后，提取其值。
- en: The execution is orchestrated by the main method in the `WineModelServing` object.
    This method first creates an instance of the `WineModelServing` class and then
    reads the list of input records and for each record invokes a serve method on
    the `WineModelServing` class instance.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 执行由`WineModelServing`对象中的主方法编排。该方法首先创建`WineModelServing`类的一个实例，然后读取输入记录列表，并对每个记录在`WineModelServing`类实例上调用`serve`方法。
- en: To run this code, in addition to the TensorFlow Java library, you must also
    have the TensorFlow C++ implementation library (*.dll* or *.so*) installed on
    the machine that will run the code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这段代码，除了需要 TensorFlow Java 库外，还必须在运行代码的机器上安装 TensorFlow C++ 实现库（*.dll* 或 *.so*）。
- en: 'Advantages of execution graph export include the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 执行图导出的优点包括以下内容：
- en: Due to the optimizations, the exported graph has a relatively small size.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于优化，导出的图具有相对较小的大小。
- en: The model is self-contained in a single file, which makes it easy to transport
    it as a binary blob, for instance, using a Kafka topic.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该模型是自包含的单个文件，这使得将其作为二进制 blob 进行传输变得容易，例如，使用 Kafka 主题。
- en: A disadvantage is that the user of the model must know explicitly both input
    and output (and their shape and type) of the model to use the graph correctly;
    however, this is typically not a serious problem.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点是模型的用户必须明确知道模型的输入和输出（以及它们的形状和类型）才能正确使用图；然而，这通常不是一个严重的问题。
- en: Exporting the Saved Model
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出 Saved Model
- en: 'TensorFlow *SavedModel* is a new export format, introduced in 2017, in which
    the model is exported as a directory with the following structure:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow *SavedModel* 是一种新的导出格式，于2017年推出，其中模型被导出为具有以下结构的目录：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'where:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '`assets` is a subfolder containing auxiliary files such as vocabularies, etc.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assets` 是一个包含辅助文件（如词汇表等）的子文件夹。'
- en: '`assets.extra` is a subfolder where higher-level libraries and users can add
    their own assets that coexist with the model but are not loaded by the graph.
    It is not managed by the SavedModel libraries.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assets.extra` 是一个子文件夹，高级库和用户可以在其中添加自己的资产，这些资产与模型共存但不会被图加载。它不受 SavedModel 库管理。'
- en: '`variables` is a subfolder containing output from the [TensorFlow Saver](http://bit.ly/tensorflow-saver):
    both variables index and data.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variables` 是一个包含来自[TensorFlow Saver](http://bit.ly/tensorflow-saver)的输出的子文件夹：变量索引和数据。'
- en: '`saved_model.pb` contains graph and MetaGraph definitions in binary protocol
    buffer format.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`saved_model.pb` 以二进制协议缓冲区格式包含图和 MetaGraph 定义。'
- en: 'The advantages of the [SavedModel](https://www.tensorflow.org/api_docs/python/tf/saved_model)
    format are:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[SavedModel](https://www.tensorflow.org/api_docs/python/tf/saved_model) 格式的优点包括：'
- en: You can add multiple graphs sharing a single set of variables and assets to
    a single SavedModel. Each graph is associated with a specific set of tags to allow
    identification during a load or restore operation.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以将多个共享单一变量和资产的图添加到单个 SavedModel 中。每个图都与一组特定的标签相关联，以允许在加载或恢复操作期间进行识别。
- en: Support for SignatureDefs. The definition of graph inputs and outputs (including
    shape and type for each of them) is called a Signature. SavedModel uses [SignatureDefs](http://bit.ly/tensorflow-signature-defs)
    to allow generic support for signatures that might need to be saved with the graphs.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 SignatureDefs。图输入和输出的定义（包括每个输入和输出的形状和类型）称为 Signature。SavedModel 使用 [SignatureDefs](http://bit.ly/tensorflow-signature-defs)
    允许通用支持可能需要与图一起保存的签名。
- en: Support for assets. In some cases, TensorFlow operations depend on external
    files for initialization, for example, vocabularies. SavedModel exports these
    additional files in the assets directory.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持资产。在某些情况下，TensorFlow 操作依赖于外部文件进行初始化，例如，词汇表。SavedModel 将这些附加文件导出到资产目录中。
- en: 'Here is a Python code snippet ([complete code available here](http://bit.ly/tensorflow-winequalityclass-savedmodel))
    that shows you how to save a trained model in a saved model format:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 Python 代码片段（[完整代码在此处可用](http://bit.ly/tensorflow-winequalityclass-savedmodel)），展示了如何以保存的模型格式保存训练好的模型：
- en: Example 2-3\. Exporting saved model from a Keras model
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-3\. 从 Keras 模型中导出保存的模型
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By replacing the export execution graph in [Example 2-1](#exporting_an_execution_graph_from_a_kera)
    with this code, it is possible to get a saved model from your multiclass classification
    problem.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过用这段代码替换 [示例 2-1](#exporting_an_execution_graph_from_a_kera) 中的导出执行图，可以从你的多分类问题中获得一个保存的模型。
- en: After you export the model into a directory, you can use it for serving. [Example 2-4](#serving_a_model_based_on_the_saved_model)
    ([complete code available here](http://bit.ly/lightbend-ts-wine)) takes advantage
    of the TensorFlow Java APIs to load and score with the model.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将模型导出到目录后，可以用于提供服务。[示例 2-4](#serving_a_model_based_on_the_saved_model)（[完整代码在此处可用](http://bit.ly/lightbend-ts-wine)）利用
    TensorFlow Java API 加载并对模型进行评分。
- en: Example 2-4\. Serving a model based on the saved model from a Keras model
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-4\. 基于从 Keras 模型中保存的模型提供模型
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Compare this code with the code in [Example 2-2](#serving_the_model_created_from_the_execu).
    Although the main structure is the same, there are two significant differences:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码与 [示例 2-2](#serving_the_model_created_from_the_execu) 中的代码进行比较。虽然主要结构相同，但有两个重要的区别：
- en: Reading the graph is more involved. The saved model contains not just the graph
    itself, but the entire bundle (directory), and then obtains the graph from the
    bundle. Additionally, it is possible to extract the method signature (as a protobuf
    definition) and parse it to get inputs and output for your method of execution.
    Keep in mind that, in general, the graph read from the bundle can contain multiple
    signatures, so it is necessary to pick the appropriate signature by name. This
    name is defined during model saving (*winedata*, defined in [Example 2-3](#exporting_saved_model_from_a_keras_model)).
    In the code, because I know that there is only one signature, I just took the
    first element of the array.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取图表更加复杂。保存的模型不仅包含图表本身，还包含整个捆绑包（目录），然后从捆绑包中获取图表。此外，还可以提取方法签名（作为 protobuf 定义）并解析它以获取执行方法的输入和输出。请记住，通常情况下，从捆绑包中读取的图表可以包含多个签名，因此需要按名称选择适当的签名。这个名称在模型保存时定义（*winedata*，在
    [示例 2-3](#exporting_saved_model_from_a_keras_model) 中定义）。在代码中，因为我知道只有一个签名，所以我只取了数组的第一个元素。
- en: In the implementation method, instead of hardcoding names of inputs and outputs,
    I rely on the signature definition.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实现方法中，我不是硬编码输入和输出的名称，而是依赖于签名定义。
- en: Warning
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: When saving parameter names, TensorFlow uses the convention *name:column*. For
    example, in our case the inputs name, *dense_1_input*, with a single column (0)
    is represented as *dense_1_input:0*. The Java APIs do not support this notation,
    so the code splits the name at “:” and returns only the first substring.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存参数名称时，TensorFlow 使用 *name:column* 的约定。例如，在我们的情况下，输入名称 *dense_1_input*，带有单列（0），表示为
    *dense_1_input:0*。Java API 不支持此表示法，因此代码在“:”处拆分名称并仅返回第一个子字符串。
- en: Additionally, there is currently [work underway](https://github.com/jpmml/jpmml-tensorflow)
    to convert TensorFlow exported models (in the saved models format) to PMML. When
    this work is complete, developers will have additional choices for building scoring
    solutions for models exported from TensorFlow.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，目前正在进行 [工作](https://github.com/jpmml/jpmml-tensorflow) 将 TensorFlow 导出的模型（以保存模型格式）转换为
    PMML。完成这项工作后，开发人员将有额外的选择来构建从 TensorFlow 导出的模型的评分解决方案。
- en: PMML
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PMML
- en: In our next example, [Random Forest Classifier](https://en.wikipedia.org/wiki/Random_forest),
    using the same wine quality dataset that was used in the multiclass classification
    with the TensorFlow example, we show how to use [JPMML/SparkML](https://github.com/jpmml/jpmml-sparkml)
    for exporting models from SparkML machine learning. The code looks as shown in
    [Example 2-5](#random_forest_classifier_using_sparkml) ([complete code available
    here](http://bit.ly/wine-quality-random-forest)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个示例中，使用与 TensorFlow 示例中的多类别分类相同的葡萄酒质量数据集，我们展示了如何使用[JPMML/SparkML](https://github.com/jpmml/jpmml-sparkml)导出
    SparkML 机器学习模型的[随机森林分类器](https://en.wikipedia.org/wiki/Random_forest)。代码如[示例 2-5](#random_forest_classifier_using_sparkml)所示（[完整代码在此处可用](http://bit.ly/wine-quality-random-forest)）。
- en: Example 2-5\. Random Forest Classifier using SparkML with PMML export
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-5. 使用带有 PMML 导出的 SparkML 的随机森林分类器
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The bulk of the code defines the machine learning pipeline, which contains
    the following components:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的大部分定义了机器学习管道，其中包含以下组件：
- en: '[Vector assembler](http://bit.ly/2gcnBQq)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[向量装配器](http://bit.ly/2gcnBQq)'
- en: A transformer that combines a given list of columns into a single vector column.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定列的列表组合成单个向量列的转换器。
- en: '[Label indexer](http://bit.ly/2yFAxpr)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[标签索引器](http://bit.ly/2yFAxpr)'
- en: This encodes a string column of labels to a column of label indices.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将字符串标签列编码为标签索引列。
- en: '[Classifier](http://bit.ly/2zgdGh2)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[分类器](http://bit.ly/2zgdGh2)'
- en: A Random Forest classifier is used here, which belongs to a popular family of
    classification and regression methods.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用了随机森林分类器，它属于流行的分类和回归方法家族。
- en: '[Label converter](http://bit.ly/2xzgkl6)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[标签转换器](http://bit.ly/2xzgkl6)'
- en: This maps a column of label indices back to a column containing the original
    labels as strings.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将标签索引列映射回包含原始标签的字符串列。
- en: After the pipeline is built, it is trained, and then the PMML exporter uses
    a data frame schema and the pipeline definition to export the complete pipeline,
    with parameters, in PMML format.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 构建管道后，对其进行训练，然后 PMML 导出器使用数据帧模式和管道定义将完整管道及其参数以 PMML 格式导出。
- en: After you export the model, you can use it for scoring. [Example 2-6](#serving_pmml_model)
    uses the [JPMML evaluator library](https://github.com/jpmml/jpmml-evaluator) to
    load and score the model ([complete code available here](http://bit.ly/randomforest-wine-complete-example)).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 导出模型后，您可以用于评分。[示例 2-6](#serving_pmml_model)使用[JPMML 评估器库](https://github.com/jpmml/jpmml-evaluator)加载和评分模型（[完整代码在此处可用](http://bit.ly/randomforest-wine-complete-example)）。
- en: Example 2-6\. Serving PMML model
  id: totrans-68
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-6. 服务 PMML 模型
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this simple example, the constructor calls the `readPMML` method to read
    the PMML model and then invokes the optimize method. We use the optimized PMML
    ([optimizers](http://bit.ly/optimizers-gl-topic) change default generation to
    allow for more efficient execution) representation that is returned to create
    the evaluator.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的示例中，构造函数调用`readPMML`方法读取 PMML 模型，然后调用 optimize 方法。我们使用优化的 PMML（[优化器](http://bit.ly/optimizers-gl-topic)更改默认生成以实现更高效的执行）表示，该表示用于创建评估器。
- en: The score method takes an input record containing quality observations and converts
    them to the format acceptable by evaluator. Then, data is passed to the evaluator
    to produce a score. Finally, an actual value is extracted from the result.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: score 方法接受包含质量观察结果的输入记录，并将它们转换为评估器可接受的格式。然后，将数据传递给评估器以生成评分。最后，从结果中提取实际值。
- en: The execution is orchestrated by the main method in the `WineQualityRandomForestClassifier`
    object. This method first creates an instance of the `WineQualityRandomForestClassifier`
    class and then reads the list of input records and invokes the serve method in
    the `WineQualityRandomForestClassifier` class instance on each record.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 执行由`WineQualityRandomForestClassifier`对象中的主方法编排。该方法首先创建`WineQualityRandomForestClassifier`类的一个实例，然后读取输入记录列表，并在每条记录上调用`WineQualityRandomForestClassifier`类实例中的
    serve 方法。
- en: Now that we know how to export models, let’s discuss how you can use these models
    for actual model scoring.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何导出模型了，让我们讨论如何将这些模型用于实际模型评分。
