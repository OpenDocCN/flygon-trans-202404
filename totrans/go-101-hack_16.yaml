- en: copy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: copy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'The definition of built-in `copy` function is [here](https://golang.org/pkg/builtin/#copy):'
  prefs: []
  type: TYPE_NORMAL
- en: func copy(dst, src []Type) int
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The copy built-in function copies elements from a source slice into a destination
    slice. (As a special case, it also will copy bytes from a string to a slice of
    bytes.) The source and destination may overlap. Copy returns the number of elements
    copied, which will be the minimum of len(src) and len(dst).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let''s see a basic example in which source and destination slices aren''t overlapped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above example, the destination slice''s length is `3`, and the source
    slice''s length can be `2`, `3`, `4`. Check the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can make sure the number of copied elements is indeed the minimum length
    of source and destination slices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check the overlapped case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Through the output, we can see no matter the source slice is ahead of destination
    or not, the result is always as expected. You can think the implementation is
    like this: the data from source slice are copied to a temporary place first, then
    the elements are copied from temporary to destination slice.'
  prefs: []
  type: TYPE_NORMAL
- en: '`copy` requires the source and destination slices are the same type, and an
    exception is the source is string while the destination is `[]byte`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[copy() behavior when overlapping](https://groups.google.com/forum/#!msg/Golang-Nuts/HI6RI18S8L0/v6xevVPeS9EJ).'
  prefs: []
  type: TYPE_NORMAL
