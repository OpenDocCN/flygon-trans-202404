- en: CS for All
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Christine Alvarado (UC San Diego), Zachary Dodds (Harvey Mudd), Geoff Kuenning
    (Harvey Mudd), Ran Libeskind-Hadas (Harvey Mudd)
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.cs.hmc.edu/csforall/index.html](https://www.cs.hmc.edu/csforall/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '![CS5](../Images/CS5.PNG)'
  prefs: []
  type: TYPE_IMG
- en: To The Reader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Welcome! This book (and course) takes a unique approach to “Intro CS.” In a
    nutshell, our objective is to provide an introduction to *computer science* as
    an intellectually rich and vibrant field rather than focusing exclusively on *computer
    programming*. While programming is certainly an important and pervasive element
    of our approach, we emphasize concepts and problem-solving over syntax and programming
    language features.
  prefs: []
  type: TYPE_NORMAL
- en: '[![../Images/Alien2.PNG](../Images/Alien2.PNG)](../Images/Alien2.PNG)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Our name is Mudd!*'
  prefs: []
  type: TYPE_NORMAL
- en: This book is a companion to the course “CS for All” developed at Harvey Mudd
    College. At Mudd, this course is taken by almost every first-year student—irrespective
    of the student’s ultimate major—as part of our core curriculum. Thus, it serves
    as a first computing course for future CS majors and a first and last computing
    course for many other students. The course also enrolls a significant number of
    students from the other Claremont Colleges, many of whom are not planning to major
    in the sciences or engineering. At other schools, versions of this course have
    also been taught to students with varying backgrounds and interests.
  prefs: []
  type: TYPE_NORMAL
- en: The emphasis on problem-solving and big ideas is evident beginning in the introductory
    chapter, where we describe a very simple programming language for controlling
    the virtual “Picobot” robot. The syntax takes ten minutes to master but the computational
    problems posed here are deep and intriguing.
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the book follows in the same spirit. We use the Python language
    due to the simplicity of its syntax and the rich set of tools and packages that
    allow a novice programmer to write useful programs. Our introduction to programming
    with Python in Chapter 2 uses only a limited subset of the language’s syntax in
    the spirit of a functional programming language. In this approach, students master
    recursion early and find that they can write interesting programs with surprisingly
    little code. Chapter 3 takes another step in functional programming, introducing
    the concept of higher-order functions.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4 addresses the question “How does my computer do all this?” We examine
    the inner-workings of a computer, from digital logic through the organization
    of a machine and programming the machine in its native machine and assembly language.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the computer has been demystified and students have a physical representation
    of what happens “under the hood,” we move on in Chapter 5 to explore more complex
    ideas in computation and, concomitantly, concepts such as references and mutability,
    and constructs including loops, arrays, and dictionaries. We explain these concepts
    and constructs using the physical model of the computer introduced in the previous
    chapter. In our experience, students find these concepts are much easier to comprehend
    when there is an underlying physical model.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 explores some of the key ideas in object-oriented programming and
    design. The objective here is *not* to train industrial-strength programmers but
    rather to explain the rationale for the object-oriented paradigm and allow students
    to exercise some key concepts. Finally, Chapter 7 examines the “hardness” of problems—providing
    a gentle but mathematically sound treatment of some of the ideas in complexity
    and computability and ultimately proving that there are many computational problems
    that are impossible to solve on a computer. Rather than using formal models of
    computation (e.g., Turing Machines), we use Python as our model.
  prefs: []
  type: TYPE_NORMAL
- en: This book is intended to be used with the substantial resources that we have
    developed for the course, which are available on the Web at [https://www.cs.hmc.edu/twiki/bin/view/ModularCS1](https://www.cs.hmc.edu/twiki/bin/view/ModularCS1).
    These resources include complete lecture slides, a rich collection of weekly assignments,
    some accompanying software, documentation, and papers that have been published
    about the course.
  prefs: []
  type: TYPE_NORMAL
- en: '[![../Images/Alien2.PNG](../Images/Alien2.PNG)](../Images/Alien2.PNG)'
  prefs: []
  type: TYPE_NORMAL
- en: '*New! Improved! With many “marginally” useful comments!*'
  prefs: []
  type: TYPE_NORMAL
- en: We have kept this book relatively short and have endeavored to make it fun and
    readable. The content of this book is an accurate reflection of the content of
    the course rather than an intimidating encyclopedic tome that can’t possibly be
    covered in a single semester. We have written this book in the belief that a student
    can read all of it comfortably as the course proceeds. In an effort to keep the
    book short (and hopefully sweet), we have *not* included the exercises and programming
    assignments in the text but rather have posted these on the course Web site.
  prefs: []
  type: TYPE_NORMAL
- en: We wish you happy reading and happy computing!
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The authors gratefully acknowledge support from the National Science Foundation
    under CPATH grant 0939149 for supporting many aspects of the development of the
    “CS For All” course. This book benefitted significantly from feedback from many
    Harvey Mudd students over the past several years. Professor Dan Hyde at Bucknell
    University provided detailed comments that have substantially improved this book.
    In addition, Professor Richard Zaccone at Bucknell University, Professors David
    Naumann and Dan Duchamp at the Stevens Institute of Technology, Dr. Dave Sullivan
    at Boston University, Mr. Eran Segev, and several anonymous reviewers have provided
    many valuable comments and suggestions. While we’ve tried hard to be accurate
    and correct, all errors in this text are solely the responsibility of the authors.
    Finally, the authors thank Professors Brad Miller and David Ranum at Luther College
    who developed the Runestone Interactive ebook tools, Harvey Mudd students Akhil
    Bagaria, Alison Kingman, and Sarah Trisorus for “runestoning” our manuscript,
    and Mr. Tim Buchheim for system administration support.
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Chapter 1: Introduction](Introduction/Introduction.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.1 What is Computer Science?](Introduction/Introduction.html#what-is-computer-science)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.1.1 Data](Introduction/Introduction.html#data)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.1.2 Algorithms](Introduction/Introduction.html#algorithms)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.1.3 Programming](Introduction/Introduction.html#programming)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.1.4 Abstraction](Introduction/Introduction.html#abstraction)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.1.5 Problem Solving and Creativity](Introduction/Introduction.html#problem-solving-and-creativity)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.2 PicoBot](Introduction/Introduction.html#picobot)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.2.1 The Roomba Problem](Introduction/Introduction.html#the-roomba-problem)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.2.2 The Environment](Introduction/Introduction.html#the-environment)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.2.3 State](Introduction/Introduction.html#state)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.2.4 Think locally, act globally](Introduction/Introduction.html#think-locally-act-globally)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.2.5 Whatever](Introduction/Introduction.html#whatever)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.2.6 Algorithms and Rules](Introduction/Introduction.html#algorithms-and-rules)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.2.7 The Picobot challenge](Introduction/Introduction.html#the-picobot-challenge)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.2.8 A-Maze Your Friends!](Introduction/Introduction.html#a-maze-your-friends)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.2.9 Uncomputable environments](Introduction/Introduction.html#uncomputable-environments)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional Programming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Chapter 2 : Functional Programming](FunctionalProgramming/functionalprogramming.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.1 Humans, Chimpanzees, and Spell Checkers](FunctionalProgramming/functionalprogramming.html#humans-chimpanzees-and-spell-checkers)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.2 Getting Started in Python](FunctionalProgramming/functionalprogramming.html#getting-started-in-python)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.2.1 Naming Things](FunctionalProgramming/functionalprogramming.html#naming-things)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.2.2 What’s in a Name?](FunctionalProgramming/functionalprogramming.html#what-s-in-a-name)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.3 More Data: From Numbers to Strings](FunctionalProgramming/functionalprogramming.html#more-data-from-numbers-to-strings)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.3.1 A Short Note on Length](FunctionalProgramming/functionalprogramming.html#a-short-note-on-length)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.3.2 Indexing](FunctionalProgramming/functionalprogramming.html#indexing)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.3.3 Slicing](FunctionalProgramming/functionalprogramming.html#slicing)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.3.4 String Arithmetic](FunctionalProgramming/functionalprogramming.html#string-arithmetic)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.4 Lists](FunctionalProgramming/functionalprogramming.html#lists)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.4.1 Some Good News!](FunctionalProgramming/functionalprogramming.html#some-good-news)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.5 Functioning in Python](FunctionalProgramming/functionalprogramming.html#functioning-in-python)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.5.1 A Short Comment on Docstrings](FunctionalProgramming/functionalprogramming.html#a-short-comment-on-docstrings)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.5.2 An Equally Short Comment on Comments](FunctionalProgramming/functionalprogramming.html#an-equally-short-comment-on-comments)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.5.3 Functions Can Have More Than One Line](FunctionalProgramming/functionalprogramming.html#functions-can-have-more-than-one-line)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.5.4 Functions Can Have Multiple Arguments](FunctionalProgramming/functionalprogramming.html#functions-can-have-multiple-arguments)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.5.5 Why Write Functions?](FunctionalProgramming/functionalprogramming.html#why-write-functions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.6 Making Decisions](FunctionalProgramming/functionalprogramming.html#making-decisions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.6.1 A second example](FunctionalProgramming/functionalprogramming.html#a-second-example)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.6.2 Indentation](FunctionalProgramming/functionalprogramming.html#indentation)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.6.3 Multiple Conditions](FunctionalProgramming/functionalprogramming.html#multiple-conditions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.7 Recursion!](FunctionalProgramming/functionalprogramming.html#recursion)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.8 Recursion, Revealed](FunctionalProgramming/functionalprogramming.html#recursion-revealed)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.8.1 Functions that Call Functions](FunctionalProgramming/functionalprogramming.html#functions-that-call-functions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.8.2 Recursion, Revealed, Really!](FunctionalProgramming/functionalprogramming.html#recursion-revealed-really)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.9 Building Recursion Muscles](FunctionalProgramming/functionalprogramming.html#building-recursion-muscles)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.10 Use It Or Lose It](FunctionalProgramming/functionalprogramming.html#use-it-or-lose-it)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.11 Edit distance!](FunctionalProgramming/functionalprogramming.html#edit-distance)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.12 Conclusion](FunctionalProgramming/functionalprogramming.html#conclusion)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3: Functional Programming, Part Deux](FunctionalProgrammingDeux/functionalprogrammingdeux.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.1 Cryptography and Prime Numbers](FunctionalProgrammingDeux/functionalprogrammingdeux.html#cryptography-and-prime-numbers)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.2 First-Class Functions](FunctionalProgrammingDeux/functionalprogrammingdeux.html#first-class-functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.3 Generating Primes](FunctionalProgrammingDeux/functionalprogrammingdeux.html#generating-primes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.4 Filtering](FunctionalProgrammingDeux/functionalprogrammingdeux.html#filtering)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.5 Lambda](FunctionalProgrammingDeux/functionalprogrammingdeux.html#lambda)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.6 Putting Google on the Map!](FunctionalProgrammingDeux/functionalprogrammingdeux.html#putting-google-on-the-map)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.6.1 Map](FunctionalProgrammingDeux/functionalprogrammingdeux.html#map)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.6.2 Reduce](FunctionalProgrammingDeux/functionalprogrammingdeux.html#reduce)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.6.3 Composition and MapReduce](FunctionalProgrammingDeux/functionalprogrammingdeux.html#composition-and-mapreduce)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.7: Functions as Results](FunctionalProgrammingDeux/functionalprogrammingdeux.html#functions-as-results)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.7.1: Python Does Calculus!](FunctionalProgrammingDeux/functionalprogrammingdeux.html#python-does-calculus)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.7.2: Higher Derivatives](FunctionalProgrammingDeux/functionalprogrammingdeux.html#higher-derivatives)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.8: RSA Cryptography Revisited](FunctionalProgrammingDeux/functionalprogrammingdeux.html#rsa-cryptography-revisited)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.9: Conclusion](FunctionalProgrammingDeux/functionalprogrammingdeux.html#conclusion)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Computer Organization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Chapter 4: Computer Organization](ComputerOrganization/ComputerOrganization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.1 Introduction to Computer Organization](ComputerOrganization/ComputerOrganization.html#introduction-to-computer-organization)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.2 Representing Information](ComputerOrganization/ComputerOrganization.html#representing-information)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.2.1 Integers](ComputerOrganization/ComputerOrganization.html#integers)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.2.2 Arithmetic](ComputerOrganization/ComputerOrganization.html#arithmetic)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.2.3 Letters and Strings](ComputerOrganization/ComputerOrganization.html#letters-and-strings)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.2.4 Structured Information](ComputerOrganization/ComputerOrganization.html#structured-information)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.3 Logic Circuitry](ComputerOrganization/ComputerOrganization.html#logic-circuitry)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.3.1 Boolean Algebra](ComputerOrganization/ComputerOrganization.html#boolean-algebra)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.3.2 Making Other Boolean Functions](ComputerOrganization/ComputerOrganization.html#making-other-boolean-functions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.3.3 Logic Using Electrical Circuits](ComputerOrganization/ComputerOrganization.html#logic-using-electrical-circuits)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.3.4 Computing With Logic](ComputerOrganization/ComputerOrganization.html#computing-with-logic)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.3.5 Memory](ComputerOrganization/ComputerOrganization.html#memory)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.4 Building a Complete Computer](ComputerOrganization/ComputerOrganization.html#building-a-complete-computer)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.4.1 The von Neumann Architecture](ComputerOrganization/ComputerOrganization.html#the-von-neumann-architecture)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.5 Hmmm](ComputerOrganization/ComputerOrganization.html#hmmm)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.5.1 A Simple Hmmm Program](ComputerOrganization/ComputerOrganization.html#a-simple-hmmm-program)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Does It Work?](ComputerOrganization/ComputerOrganization.html#how-does-it-work)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Trying It Out](ComputerOrganization/ComputerOrganization.html#trying-it-out)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.5.2 Looping](ComputerOrganization/ComputerOrganization.html#looping)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.5.3 Functions](ComputerOrganization/ComputerOrganization.html#functions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.5.4 Recursion](ComputerOrganization/ComputerOrganization.html#recursion)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stacks](ComputerOrganization/ComputerOrganization.html#stacks)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Saving Precious Possessions](ComputerOrganization/ComputerOrganization.html#saving-precious-possessions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.5.5 The Complete Hmmm Instruction Set](ComputerOrganization/ComputerOrganization.html#the-complete-hmmm-instruction-set)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.5.6 A Few Last Words](ComputerOrganization/ComputerOrganization.html#a-few-last-words)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4.6 Conclusion](ComputerOrganization/ComputerOrganization.html#conclusion)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Imperative Programming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Chapter 5: Imperative Programming](ImperativeProgramming/imperativeprogramming.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.1 A Computer that Knows You (Better than You Know Yourself?)](ImperativeProgramming/imperativeprogramming.html#a-computer-that-knows-you-better-than-you-know-yourself)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.1.1 Our Goal: A Music Recommender System](ImperativeProgramming/imperativeprogramming.html#our-goal-a-music-recommender-system)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.2 Getting Input from the User](ImperativeProgramming/imperativeprogramming.html#getting-input-from-the-user)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.3 Repeated Tasks–Loops](ImperativeProgramming/imperativeprogramming.html#repeated-tasks-loops)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.3.1 Recursion vs. Iteration at the Low Level](ImperativeProgramming/imperativeprogramming.html#recursion-vs-iteration-at-the-low-level)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.3.2 Definite Iteration: `for` loops](ImperativeProgramming/imperativeprogramming.html#definite-iteration-for-loops)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.3.3 How Is the Control Variable Used?](ImperativeProgramming/imperativeprogramming.html#how-is-the-control-variable-used)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.3.4 *Accumulating* Answers](ImperativeProgramming/imperativeprogramming.html#accumulating-answers)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.3.5 Indefinite Iteration: `while` Loops](ImperativeProgramming/imperativeprogramming.html#indefinite-iteration-while-loops)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.3.6 `for` Loops vs. `while` Loops](ImperativeProgramming/imperativeprogramming.html#for-loops-vs-while-loops)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.3.7 Creating Infinite Loops On Purpose](ImperativeProgramming/imperativeprogramming.html#creating-infinite-loops-on-purpose)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.3.8 Iteration Is Efficient](ImperativeProgramming/imperativeprogramming.html#iteration-is-efficient)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.4 References and Mutable vs. Immutable Data](ImperativeProgramming/imperativeprogramming.html#references-and-mutable-vs-immutable-data)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.4.1 Assignment by *Reference*](ImperativeProgramming/imperativeprogramming.html#assignment-by-reference)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.4.2 Mutable Data Types Can Be Changed Using Other Names!](ImperativeProgramming/imperativeprogramming.html#mutable-data-types-can-be-changed-using-other-names)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.5 Mutable Data + Iteration: Sorting out Artists](ImperativeProgramming/imperativeprogramming.html#mutable-data-iteration-sorting-out-artists)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.5.1 Why Sort? Running Time Matters](ImperativeProgramming/imperativeprogramming.html#why-sort-running-time-matters)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.5.2 A Simple Sorting Algorithm: Selection Sort](ImperativeProgramming/imperativeprogramming.html#a-simple-sorting-algorithm-selection-sort)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.5.3 Why `selectionSort` Works](ImperativeProgramming/imperativeprogramming.html#why-selectionsort-works)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.5.4 A Swap of a Different Sort](ImperativeProgramming/imperativeprogramming.html#a-swap-of-a-different-sort)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.5.5 2D Arrays and Nested Loops](ImperativeProgramming/imperativeprogramming.html#d-arrays-and-nested-loops)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.5.6 Dictionaries](ImperativeProgramming/imperativeprogramming.html#dictionaries)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.6 Reading and Writing Files](ImperativeProgramming/imperativeprogramming.html#reading-and-writing-files)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.7 Putting It All Together: Program Design](ImperativeProgramming/imperativeprogramming.html#putting-it-all-together-program-design)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5.8 Conclusion](ImperativeProgramming/imperativeprogramming.html#conclusion)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Object-Oriented Programming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Chapter 6: Fun and Games with OOPs: Object-Oriented Programs](OOPs/oops.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6.1 Introduction](OOPs/oops.html#introduction)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6.2 Thinking Objectively](OOPs/oops.html#thinking-objectively)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6.3 The Rational Solution](OOPs/oops.html#the-rational-solution)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6.4 Overloading](OOPs/oops.html#overloading)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6.5 Printing an Object](OOPs/oops.html#printing-an-object)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6.6 A Few More Words on the Subject of Objects](OOPs/oops.html#a-few-more-words-on-the-subject-of-objects)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6.7 Getting Graphical with OOPs](OOPs/oops.html#getting-graphical-with-oops)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6.8 Robot and Zombies, Finally!](OOPs/oops.html#robot-and-zombies-finally)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6.9 Conclusion](OOPs/oops.html#conclusion)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Problem “Hardness”
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Chapter 7: How Hard is the Problem?](HowHardIsThisProblem/HowHardIsThisProblem.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7.1 The Never-ending Program](HowHardIsThisProblem/HowHardIsThisProblem.html#the-never-ending-program)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7.2 Three Kinds of Problems: Easy, Hard, and Impossible.](HowHardIsThisProblem/HowHardIsThisProblem.html#three-kinds-of-problems-easy-hard-and-impossible)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7.2.1 Easy Problems](HowHardIsThisProblem/HowHardIsThisProblem.html#easy-problems)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7.2.2 Hard Problems](HowHardIsThisProblem/HowHardIsThisProblem.html#hard-problems)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7.3 Impossible Problems!](HowHardIsThisProblem/HowHardIsThisProblem.html#impossible-problems)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7.3.1 “Small” Infinities](HowHardIsThisProblem/HowHardIsThisProblem.html#small-infinities)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Larger” Infinities](HowHardIsThisProblem/HowHardIsThisProblem.html#larger-infinities)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7.3.2 Uncomputable Functions](HowHardIsThisProblem/HowHardIsThisProblem.html#uncomputable-functions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7.4 An Uncomputable Problem](HowHardIsThisProblem/HowHardIsThisProblem.html#an-uncomputable-problem)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7.4.1 The Halting Problem](HowHardIsThisProblem/HowHardIsThisProblem.html#the-halting-problem)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7.5 Conclusion](HowHardIsThisProblem/HowHardIsThisProblem.html#conclusion)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Indices and tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[*Index*](genindex.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Search Page*](search.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
