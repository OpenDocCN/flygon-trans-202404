- en: 3A First Look at Interpretation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3A 对解释的第一次观察
- en: Now that we have a representation of programs, there are many ways in which
    we might want to manipulate them. We might want to display a program in an attractive
    way (“pretty-print”), convert into code in some other format (“compilation”),
    ask whether it obeys certain properties (“verification”), and so on. For now,
    we’re going to focus on asking what value it corresponds to (“evaluation”—<wbr>the
    reduction of programs to values).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了程序的表示，有很多我们可能想要操作它们的方式。我们可能想要以一种吸引人的方式显示程序（“漂亮打印”），转换成其他格式的代码（“编译”），询问它是否遵循某些属性（“验证”），等等。现在，我们将专注于询问它对应什么值（“求值”—<wbr>将程序缩减为值）。
- en: 'Let’s write an evaluator, in the form of an interpreter, for our arithmetic
    language. We choose arithmetic first for three reasons: (a) you already know how
    it works, so we can focus on the mechanics of writing evaluators; (b) it’s contained
    in every language we will encounter later, so we can build upwards and outwards
    from it; and (c) it’s at once both small and big enough to illustrate many points
    we’d like to get across.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个求值器，以解释器的形式，为我们的算术语言。我们选择算术首先有三个原因：(a) 你已经知道它如何工作，所以我们可以专注于编写求值器的机制；(b)
    它包含在我们后面会遇到的每种语言中，所以我们可以从中向上和向外构建；(c) 它既小又大，足以说明我们想要传达的许多观点。
- en: 3.1Representing Arithmetic
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1表示算术
- en: Let’s first agree on how we will represent arithmetic expressions. Let’s say
    we want to support only two operations—<wbr>addition and multiplication—<wbr>in
    addition to primitive numbers. We need to represent arithmetic expressions. What
    are the rules that govern nesting of arithmetic expressions? We’re actually free
    to nest any expression inside another.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先就我们将如何表示算术表达式达成一致。假设我们只想支持两种操作——<wbr>加法和乘法——<wbr>除了原始数字。我们需要表示算术表达式。规定了嵌套算术表达式的规则是什么？实际上，我们可以在另一个表达式内嵌套任何表达式。
- en: Do Now!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在做！
- en: Why did we not include division? What impact does it have on the remarks above?
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为什么我们没有包括除法？它对上述评论有什么影响？
- en: 'We’ve ignored division because it forces us into a discussion of what expressions
    we might consider legal: clearly the representation of 1/2 ought to be legal;
    the representation of 1/0 is much more debatable; and that of 1/(1-1) seems even
    more controversial. We’d like to sidestep this controversy for now and return
    to it later [REF].Thus, we want a representation for numbers and arbitrarily nestable
    addition and multiplication. Here’s one we can use:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们忽略了除法，因为它迫使我们讨论哪些表达式我们可能认为是合法的：显然表示1/2应该是合法的；表示1/0则更具有争议；而1/(1-1)的表示似乎更加有争议。我们希望暂时避开这种争议并稍后返回
    [REF]。因此，我们想要一个数字的表示以及任意嵌套的加法和乘法。这是我们可以使用的一个：
- en: '| (define-type ArithC |'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (定义类型 ArithC |'
- en: '|   [numC (n : number)] |'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [numC (n : number)] |'
- en: '|   [plusC (l : ArithC) (r : ArithC)] |'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [plusC (l : ArithC) (r : ArithC)] |'
- en: '|   [multC (l : ArithC) (r : ArithC)]) |'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [multC (l : ArithC) (r : ArithC)]) |'
- en: 3.2Writing an Interpreter
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2编写一个解释器
- en: Now let’s write an interpreter for this arithmetic language. First, we should
    think about what its type is. It clearly consumes a ArithC value. What does it
    produce? Well, an interpreter evaluates—<wbr>and what kind of value might arithmetic
    expressions reduce to? Numbers, of course. So the interpreter is going to be a
    function from arithmetic expressions to numbers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为这个算术语言编写一个解释器。首先，我们应该考虑它的类型是什么。它显然消耗了一个 ArithC 值。它会产生什么？嗯，一个解释器会进行求值——<wbr>算术表达式可能会缩减为什么样的值？当然是数字。所以解释器将是一个从算术表达式到数字的函数。
- en: Exercise
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: Write your test cases for the interpreter.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为解释器编写你的测试案例。
- en: 'Because we have a recursive datatype, it is natural to structure our interpreter
    as a recursive function over it. Here’s a first template:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们有一个递归数据类型，所以将解释器构造为对其的递归函数是很自然的。这是一个初步的模板：
- en: Templates are explained in great detail in How to Design Programs.
  id: totrans-17
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 模板在《如何设计程序》中有详细解释。
- en: '| (define (interp [a : ArithC]) : number |'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (定义 (interp [a : ArithC]) : number |'
- en: '|   (type-case ArithC a |'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (类型-案例 ArithC a |'
- en: '|     [numC (n) n] |'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [numC (n) n] |'
- en: '|     [plusC (l r) ...] |'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [plusC (l r) ...] |'
- en: '|     [multC (l r) ...])) |'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [multC (l r) ...])) |'
- en: 'You’re probably tempted to jump straight to code, which you can:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想直接跳到代码，这样你就可以了：
- en: '| (define (interp [a : ArithC]) : number |'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (定义 (interp [a : ArithC]) : number |'
- en: '|   (type-case ArithC a |'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (类型-案例 ArithC a |'
- en: '|     [numC (n) n] |'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [numC (n) n] |'
- en: '|     [plusC (l r) (+ l r)] |'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [plusC (l r) (+ l r)] |'
- en: '|     [multC (l r) (* l r)])) |'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [multC (l r) (* l r)])) |'
- en: Do Now!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在做！
- en: Do you spot the errors?
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你发现错误了吗？
- en: 'Instead, let’s expand the template out a step:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们将模板展开一步：
- en: '| (define (interp [a : ArithC]) : number |'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (interp [a : ArithC]) : number |'
- en: '|   (type-case ArithC a |'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (type-case ArithC a |'
- en: '|     [numC (n) n] |'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [numC (n) n] |'
- en: '|     [plusC (l r) ... (interp l) ... (interp r) ...] |'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [plusC (l r) ... (interp l) ... (interp r) ...] |'
- en: '|     [multC (l r) ... (interp l) ... (interp r) ...])) |'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [multC (l r) ... (interp l) ... (interp r) ...])) |'
- en: 'and now we can fill in the blanks:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以填写空白处：
- en: '| (define (interp [a : ArithC]) : number |'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (interp [a : ArithC]) : number |'
- en: '|   (type-case ArithC a |'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (type-case ArithC a |'
- en: '|     [numC (n) n] |'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [numC (n) n] |'
- en: '|     [plusC (l r) (+ (interp l) (interp r))] |'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [plusC (l r) (+ (interp l) (interp r))] |'
- en: '|     [multC (l r) (* (interp l) (interp r))])) |'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [multC (l r) (* (interp l) (interp r))])) |'
- en: Later on [REF], we’re going to wish we had returned a more complex datatype
    than just numbers. But for now, this will do.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 后面 [REF]，我们会希望我们返回的不仅仅是数字这样的简单数据类型。但是现在，这样就够了。
- en: 'Congratulations: you’ve written your first interpreter! I know, it’s very nearly
    an anticlimax. But they’ll get harder—<wbr>much harder—<wbr>pretty soon, I promise.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜：你已经写出了你的第一个解释器！我知道，这几乎是一个反高潮。但它们会变得更难—<wbr>更难—<wbr>很快，我保证。
- en: 3.3Did You Notice?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3你有没有注意到？
- en: 'I just slipped something by you:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚刚在你身边溜了一下：
- en: Do Now!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就做！
- en: What is the “meaning” of addition and multiplication in this new language?
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这种新语言中，加法和乘法的“含义”是什么？
- en: 'That’s a pretty abstract question, isn’t it. Let’s make it concrete. There
    are many kinds of addition in computer science:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常抽象的问题，不是吗。让我们具体化一下。在计算机科学中有许多种类的加法：
- en: 'First of all, there’s many different kinds of numbers: fixed-width (e.g., 32-bit)
    integers, signed fixed-width (e.g., 31-bits plus a sign-bit) integers, arbitrary
    precision integers; in some languages, rationals; various formats of fixed- and
    floating-point numbers; in some languages, complex numbers; and so on. After the
    numbers have been chosen, addition may support only some combinations of them.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，有许多不同类型的数字：固定宽度（例如，32位）整数，带符号的固定宽度（例如，31位加上一个符号位）整数，任意精度整数；在一些语言中，有理数；各种格式的定点和浮点数；在一些语言中，复数；等等。在选择了数字之后，加法可能仅支持其中的一些组合。
- en: In addition, some languages permit the addition of datatypes such as matrices.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，一些语言允许添加诸如矩阵之类的数据类型。
- en: Furthermore, many languages support “addition” of strings (we use scare-quotes
    because we don’t really mean the mathematical concept of addition, but rather
    the operation performed by an operator with the syntax +). In some languages this
    always means concatenation; in some others, it can result in numeric results (or
    numbers stored in strings).
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，许多语言支持字符串的“加法”（我们用引号是因为我们并不真正指的是数学概念上的加法，而是由具有语法 + 的运算符执行的操作）。在一些语言中，这总是意味着连接；在另一些语言中，它可能导致数字结果（或存储在字符串中的数字）。
- en: These are all different meanings for addition. Semantics is the mapping of syntax
    (e.g., +) to meaning (e.g., some or all of the above).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是加法的不同含义。语义是将语法（例如，+）映射到含义（例如，上述某些或全部）的过程。
- en: 'This brings us to our first game of:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这带我们来到我们的第一个游戏：
- en: Which of these is the same?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些中哪些是相同的？
- en: 1 + 2
  id: totrans-56
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 + 2
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-58
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 1 + 2
  id: totrans-59
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 + 2
- en: ''
  id: totrans-60
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ’1’ + ’2’
  id: totrans-62
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ’1’ + ’2’
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-64
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ’1’ + ’2’
  id: totrans-65
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ’1’ + ’2’
- en: 'Now return to the question above. What semantics do we have? We’ve adopted
    whatever semantics Racket provides, because we map + to Racket’s +. In fact that’s
    not even quite true: Racket may, for all we know, also enable + to apply to strings,
    so we’ve chosen the restriction of Racket’s semantics to numbers (though in fact
    Racket’s + doesn’t tolerate strings).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到上面的问题。我们有什么样的语义？我们采用了 Racket 提供的任何语义，因为我们将 + 映射到 Racket 的 +。事实上，这甚至不完全正确：Racket
    可能也允许 + 适用于字符串，所以我们选择了 Racket 语义对数字的限制（尽管事实上 Racket 的 + 不容忍字符串）。
- en: If we wanted a different semantics, we’d have to implement it explicitly.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要不同的语义，我们必须显式实现它。
- en: Exercise
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: What all would you have to change so that the number had signed- 32-bit arithmetic?
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了使数字具有带符号的32位算术，你需要改变什么？
- en: In general, we have to be careful about too readily borrowing from the host
    language. We’ll return to this topic later [REF].
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们必须谨慎地从���主语言中借鉴。我们稍后会回到这个话题 [REF]。
- en: 3.4Growing the Language
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4扩展语言
- en: We’ve picked a very restricted first language, so there are many ways we can
    grow it. Some, such as representing data structures and functions, will clearly
    force us to add new features to the interpreter itself (assuming we don’t want
    to use Gödel numbering). Others, such as adding more of arithmetic itself, can
    be done without disturbing the core language and hence its interpreter. We’ll
    examine this next ([A First Taste of Desugaring](first-desugar.html)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了一种非常受限制的首选语言，所以我们可以通过许多方式来扩展它。有些方式，比如表示数据结构和函数，显然会迫使我们向解释器本身添加新功能（假设我们不想使用哥德尔编号）。另一些方式，比如增加更多的算术本身，可以在不干扰核心语言及其解释器的情况下完成。我们将在接下来进行审查（[第一次深化的味道](first-desugar.html)）。
