- en: Parameterized Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Parameterized Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Exercise 1: Sets of example data'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You have a list of pairs (word, count) that apply to the text file `mobydick_summary.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will create six tests from these samples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of creating six tests manually, we will use the **test parametrization
    in pytest**. Edit the file `test_parameterized.py` and add the following decorator
    to the test function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Add two arguments `word` and `number` to the function header and remove the
    assignment below.
  prefs: []
  type: TYPE_NORMAL
- en: Run the test and make sure all six tests pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2: Write another parameterized test'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The function **get_top_words()** calculates the most frequent words in a text
    corpus. It should produce the following top five results for the book **mobydick_full.txt**:'
  prefs: []
  type: TYPE_NORMAL
- en: '| position | word |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1. | of |'
  prefs: []
  type: TYPE_TB
- en: '| 2. | the |'
  prefs: []
  type: TYPE_TB
- en: '| 3. | is |'
  prefs: []
  type: TYPE_TB
- en: '| 4. | sea |'
  prefs: []
  type: TYPE_TB
- en: '| 5. | ship |'
  prefs: []
  type: TYPE_TB
- en: Write one parameterized test that checks these five positions.
  prefs: []
  type: TYPE_NORMAL
