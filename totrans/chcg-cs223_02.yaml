- en: Introduction to ML in Elm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Elm 中的 ML 入门
- en: We will be using [Elm v0.14](http://elm-lang.org/blog/announce/0.14.elm). If
    there are minor language revisions released throughout the quarter, we will decide
    whether or not to upgrade. You should [get Elm up and running as soon as possible](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/assignments/HW0.html)
    to make sure that you have a working development environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 [Elm v0.14](http://elm-lang.org/blog/announce/0.14.elm)。如果在本季度发布了较小的语言修订版，我们将决定是否升级。您应该尽快
    [启动 Elm](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/assignments/HW0.html)
    ，以确保您拥有可用的开发环境。
- en: Let's jump in with some examples at the REPL (read-eval-print loop).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一些 REPL（读取-求值-打印循环）中的示例来开始。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Basic Values
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本值
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Numeric literals without a decimal point are described by the type variable
    `number`, which describes both `Int`s and `Float`s.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 没有小数点的数字文字由类型变量`number`描述，该类型描述了`Int`和`Float`。
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: One way to read the last line above is "for every type `number` such that `number`
    = `Int` or `number` = `Float`, 3 has type `number`." In other words, "3 has type
    `Int` and `Float`" and depending on how the expression is used, the Elm type checker
    will choose to *instantiate* the type variable `number` with one of these types.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读上面的最后一行的一种方法是“对于每一种类型`number`，使得`number`=`Int`或`number`=`Float`，3都有类型`number`。”换句话说，“3具有类型`Int`和`Float`”，根据表达式的使用方式，Elm
    类型检查器将选择将类型变量`number`实例化为其中一个类型。
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you are familiar with Haskell, think of `number` as a type class that is
    "baked in" to the language. Elm does not have general support for type classes,
    but it does have a few special purpose type classes like `number`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉 Haskell，请将`number`看作是“内置”到语言中的类型类。Elm 没有对类型类的普遍支持，但它确实有一些特殊用途的类型类，比如`number`。
- en: Tuples
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组
- en: Tuples package two or more expressions into a single expression. The type of
    a tuple records the number of components and each of their types.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 元组将两个或多个表达式封装成一个单个表达式。元组的类型记录了组件的数量和每个组件的类型。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Lone expressions prefer to remain alone:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 孤立的表达式更喜欢保持孤立：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Functions
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数
- en: Like in most functional languages, all functions take exactly one argument and
    return exactly one value.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数函数式语言一样，所有函数都接受一个参数并返回一个值。
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Multiple arguments in *uncurried* style:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*非柯里化*风格中的多参数：'
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Multiple arguments in *curried* style:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*柯里化*风格中的多参数：'
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Partial application* of curried functions:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*柯里化函数*的部分应用：'
- en: '[PRE9]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'What if we wanted to restrict our `plus` function to `Int`s rather than arbitrary
    `number`s? We need some way to "cast" a `number` to an `Int`. Although the [`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)
    library does not provide such a `toInt` function, we can define something to help
    ourselves:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将我们的`plus`函数限制为`Int`而不是任意的`number`，我们需要一种方法将`number`“转换”为`Int`。虽然 [`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)
    库没有提供这样的`toInt`函数，但我们可以定义一些东西来帮助自己：
- en: '[PRE10]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This doesn't quite have the type `number -> Int` we sought... but on second
    thought, we don't really need a casting function of that type. Why not?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不完全满足我们所寻求的类型`number -> Int`... 但仔细考虑后，我们实际上并不真正需要那种类型的转换函数。为什么不呢？
- en: '[PRE11]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Type Annotations
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型注释
- en: Elm, like most ML dialects, automatically infers most types. Nevertheless, it
    is often good practice to manually declare type annotations for "top-level" definitions
    (we will see "local" definitions shortly).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Elm，像大多数 ML 方言一样，自动推断大多数类型。然而，手动声明“顶层”定义的类型注释通常是一个好的实践（我们很快会看到“局部”定义）。
- en: In an Elm source file (e.g. [`IntroML.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/IntroML.elm)),
    a top-level definition can be preceded by a type annotation. The type checker
    will check whether the implementation actually satisfies the type you've declared.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Elm 源文件中（例如 [`IntroML.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/IntroML.elm)），顶层定义可以在类型注释之前。类型检查器将检查实现是否实际满足您声明的类型。
- en: '[PRE12]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice that by using an explicit annotation for `plusInt`, we avoid the need
    to use the roundabout `toInt` function from before. In fact, we can refactor the
    definition as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通过对`plusInt`使用显式注释，我们避免了之前需要使用绕道的`toInt`函数的需要。事实上，我们可以重构定义如下：
- en: '[PRE13]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This version really emphasizes the fact that our *implementation* of `plusInt`
    is more general than the API (i.e. type) exposed to *clients* of the function.
    Designing software is full of decisions like this one.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本真正强调了我们的`plusInt`的*实现*比向函数的*客户端*公开的 API（即类型）更一般化的事实。设计软件充满了这样的决策。
- en: Importing Modules
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入模块
- en: Now that we've started putting definitions in source files, how do we import
    them from the REPL and from other files? Notice that the file [`IntroML.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/IntroML.elm)
    defines a module of the same name, which can be imported in several ways.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经开始将定义放入源文件中了，那么我们如何从REPL和其他文件中导入它们呢？请注意，文件[`IntroML.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/IntroML.elm)定义了同名模块，可以通过几种方式导入。
- en: The following `import` will require all imported definitions to be qualified
    for use.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`import`将要求对所有导入的定义进行限定以供使用。
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Another option is to specify which definitions to import and use with qualification.
    No other definitions from `IntroML` will be accessible, even with qualification.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是指定要导入和使用的定义并进行限定。即使使用了限定，也不会访问`IntroML`中的其他定义。
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: But, you can import the same module again to allow qualified access to other
    members.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您可以重新导入相同的模块以允许对其他成员进行限定访问。
- en: '[PRE16]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice the use of the `\` character to enter a multi-line expression in the
    REPL. If, instead, the two `import` expressions are entered sequentially in the
    REPL, then the more recent one seems to take precedence. This will not be the
    case in source files, however. This will turn out to be useful when working with
    `List`s soon.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在REPL中输入多行表达式时使用`\`字符。如果相反，在REPL中依次输入两个`import`表达式，则似乎最近的一个会优先。但是，在源文件中，情况并非如此。很快在处理`List`时，这将会变得有用。
- en: You can also import all definitions for use without qualification.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以导入所有定义以供无限制使用。
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Finally, you can also define an abbreviation for the imported module.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您还可以为导入的模块定义一个缩写。
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Whew, that was a lot of choices! This kind of flexibility will come in handy,
    because it can be hard to remember where functions are defined when importing
    many modules. Furthermore, many modules will define functions with popular names,
    such as `map` and `foldr`, so qualified access will be needed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 啊，选择真是太多了！这种灵活性会派上用场，因为在导入许多模块时很难记住函数的定义位置。此外，许多模块将定义具有流行名称的函数，例如`map`和`foldr`，因此需要限定访问。
- en: You may have noticed that we had started to use some library functions without
    any `import`s. That's because [`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics),
    as well as a few other very common libraries such as [`Maybe`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Maybe),
    are opened [by default](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我们开始使用一些库函数而没有任何`import`。这是因为[`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)以及其他一些非常常见的库，例如[`Maybe`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Maybe)，是默认打开的。
- en: Conditionals
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 条件
- en: Conditional expressions must return the same type of value on both branches.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 条件表达式必须在两个分支上返回相同类型的值。
- en: '[PRE19]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There's a handy syntax for multi-way if-expressions, which makes writing nested
    conditionals very neat.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个方便的语法用于多路if表达式，这使得编写嵌套条件非常整洁。
- en: '[PRE20]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)
    defines `otherwise` to be a synonym for `True`, which can improve readability
    in multi-way conditionals.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)将`otherwise`定义为`True`的同义词，这可以提高多路条件语句的可读性。'
- en: '[PRE21]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Although multi-way conditionals are great, they do introduce one potential pitfall
    compared to writing out nested conditionals. What happens if *none* of the predicates
    (a.k.a. "guards" or "where-clauses") evaluates to `True`?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管多路条件很棒，但与编写嵌套条件相比，它们确实引入了一个潜在的陷阱。如果*没有*谓词（也称为“保护”或“where子句”）的计算结果为`True`会发生什么？
- en: '[PRE22]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Ah, a run-time error. Notice that this same expression cannot be written with
    conditionals because they always require an `else` branch to be specified. No
    need to fret too much, just make sure you are handling all cases in a multi-way
    conditional, because the type checker will not help you with this kind of error.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 啊，运行时错误。请注意，由于条件始终需要指定`else`分支，因此无法使用条件来编写相同的表达式。不必过分担心，只需确保在多路条件中处理了所有情况，因为类型检查器不会帮助您处理这种错误。
- en: What about if *multiple* predicates evaluate to `True`?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*多个*谓词的计算结果为`True`呢？
- en: '[PRE23]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As expected, each of the predicates is tested in top-down order, and the first
    one satisfied wins. Again, notice that the type checker doesn't complain that
    the second clause will *never* evaluate at run-time. Although this is pretty easy
    to see in this case, in general identifying unreachable code is undecidable.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的是，每个谓词都是按自上而下的顺序进行测试的，满足条件的第一个谓词获胜。再次注意，类型检查器不会抱怨第二个子句在运行时永远*不会*被评估。虽然在这种情况下很容易看出，但通常情况下识别不可达代码是不可决定的。
- en: 'One more thing to know about conditionals: whitespace matters. Make sure that
    all of your patterns are aligned, and you''ll do just fine.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关于条件语句还有一件事要知道：空白很重要。确保所有模式都对齐，你就会做得很好。
- en: Polymorphic Types
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多态类型
- en: Type variables are identifiers that start with a lower case letter and are often
    a single character.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 类型变量是以小写字母开头并且通常是单个字符的标识符。
- en: '[PRE24]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As with the `number` type discussed above, this function type should be read
    as having an implicit "forall" at the beginning that "defines" the scope of the
    type variable: "for all types `a`, `choose` has type `Bool -> a -> a -> a`.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与上面讨论的`number`类型一样，应该将此函数类型解读为在类型变量的“定义”范围内具有一个隐式的“forall”：“对于所有类型`a`，`choose`具有类型`Bool
    -> a -> a -> a`。
- en: When calling a polymorphic function such as `choose`, Elm (like other ML dialects)
    will automatically *instantiate* the type variables with type arguments appropriately
    based on the value arguments.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用诸如`choose`之类的多态函数时，Elm（像其他ML方言一样）将根据值参数自动*实例化*类型变量为适当的类型参数。
- en: '[PRE25]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'These function calls can be thought of as taking type arguments (one for each
    type universally quantified type variable for the function) that are automatically
    inferred by the type checker. If the syntax of Elm were to allow explicit type
    instantiations, the above expressions might look something like:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数调用可以被认为是接受类型参数（对于函数的每个全称量化类型变量一个）的，这些参数由类型检查器自动推断。如果Elm的语法允许显式类型实例化，则上述表达式可能看起来像：
- en: '[PRE26]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Imagine that polymorphic types in Elm required an explicit forall quantifier.
    The result of instantiating a polymorphic type with a type argument `T` is obtained
    by *substituting* bound occurrences of the type variable with `T`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，在Elm中，多态类型需要显式的forall量词。使用类型参数`T`实例化多态类型的结果是通过*替换*类型变量的绑定出现来获得的。
- en: '[PRE27]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Just as the particular choices of program variables does not matter, neither
    do the particular choices of type variables. So polymorphic types are equivalent
    up to renaming. For example, `choose` can be annotated with polymorphic types
    that choose a different variable name than `a`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 就像程序变量的特定选择并不重要一样，类型变量的特定选择也不重要。因此，多态类型在重命名方面是等价的。例如，`choose`可以被注释为选择不同于`a`的变量名的多态类型。
- en: '[PRE28]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: All of these types are equivalent. After typechecking your function, however,
    Elm may choose to overrule your choice of type variables.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些类型都是等价的。然而，在类型检查函数后，Elm可能会选择推翻您对类型变量的选择。
- en: '[PRE29]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: What happens if `choose` is annotated as follows?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`choose`被注释如下会发生什么？
- en: '[PRE30]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `choose` function typechecks with this annotation, but this type is more
    restrictive than the earlier ones. Remember that `number`, as discussed earlier,
    can only be instantiated with the types `Int` and `Float`. This special handling
    of the particular variable `number` — as opposed to other identifiers — is the
    way that Elm shoehorns a limited form of type classes into the language. It's
    a pretty interesting design choice!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该注释下的`choose`函数通过了类型检查，但是此类型比先前的类型更为限制。请记住，如前所述，`number`只能被实例化为`Int`和`Float`类型。Elm对特定变量`number`的特殊处理——而不是其他标识符——是Elm将有限形式的类型类强行加入语言的方式。这是一个非常有趣的设计选择！
- en: While we are on the subject, there is another special purpose type variable
    called `comparable` that is used to describe types that are, well, comparable
    using an ordering relation. See [`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)
    for more info.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论时，还有另一个特殊的目的类型变量称为`comparable`，它用于描述可以使用排序关系进行比较的类型。有关更多信息，请参见[`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)。
- en: '[PRE31]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Digression: Bug Hunting'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 闲聊：Bug 猎取
- en: 'Take note that there seems to be an [open compiler bug](https://github.com/elm-lang/elm-compiler/issues/694)
    where polymorphic types may be printed incorrectly. Consider:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，似乎存在一个[开放的编译器错误](https://github.com/elm-lang/elm-compiler/issues/694)，其中多态类型可能被错误打印。考虑：
- en: '[PRE32]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The types inferred for `id1` and `id2` are what we expect, but not so for `id3`
    and `id4`. The purported types for the latter two are correct, but they seem unnecessarily
    restrictive, reusing the (bound) type variable `b` rather than choosing different
    variables for arguments `c` and `d`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`id1`和`id2`推断出的类型与我们的预期相符，但对于`id3`和`id4`却不是。后两者的推断类型是正确的，但它们似乎不必要地受限，重新使用了（绑定的）类型变量`b`，而不是为参数`c`和`d`选择不同的变量。
- en: As a way to investigate the issue a bit, we can put the following annotated
    definition in [`IntroML.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/IntroML.elm)
    to see what the compiler says.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 作为调查问题的一种方式，我们可以将以下带注释的定义放在[`IntroML.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/IntroML.elm)中，以查看编译器的反馈。
- en: '[PRE33]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Lo and behold, `id5` typechecks with the suitably general type that we ascribed,
    but the type displayed in the REPL is not equivalent modulo renaming:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 瞧，`id5`通过了类型检查，具有我们归因的合适的通用类型，但在 REPL 中显示的类型在重命名上不等效：
- en: '[PRE34]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can do a bit more investigating to try to determine whether the bug manifests
    itself in the type *assigned* to `id5` or only in the type that is *printed* for
    `id5`. The following interaction suggests the latter, more benign bug:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进行更深入的调查，试图确定 bug 是否表现在为`id5`分配的类型中，或者只表现在为`id5`打印的类型中。以下交互显示了后者，更为温和的 bug：
- en: '[PRE35]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Cool, maybe we have some potential for investigative journalism... or not. In
    any case, bugs even in mature software are a fact of life, so we can't expect
    the compiler to be perfect yet. That said, the language and tools are already
    quite robust (thanks to the community!), which we will make quite good use of
    in this course.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷，也许我们有一些潜力进行调查性新闻报道... 或者没有。无论如何，即使在成熟软件中也会出现 bug，所以我们不能期望编译器现在就完美无缺。话虽如此，语言和工具已经相当健壮（感谢社区！），我们在本课程中将充分利用它们。
- en: When we come across bugs like this, we can help each other troubleshoot issues
    on Piazza (the "`elm`" tag seems like a reasonable choice); carefully look for
    known open issues in the [compiler](https://github.com/elm-lang/elm-compiler/issues),
    [REPL](https://github.com/elm-lang/elm-repl/issues), [standard libraries](https://github.com/elm-lang/elm-package/issues/),
    and [reactor](https://github.com/elm-lang/elm-reactor/issues); look for relevant
    discussions on the [Elm mailing list](https://groups.google.com/forum/#!forum/elm-discuss);
    and write constructive, clear bug reports to submit to the language community.
    You may even catch the bug and decide to become an Elm contributor!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们遇到这样的 bug 时，我们可以在 Piazza 上相互帮助排查问题（“`elm`”标签似乎是一个合理的选择）；仔细查找[编译器](https://github.com/elm-lang/elm-compiler/issues)、[REPL](https://github.com/elm-lang/elm-repl/issues)、[标准库](https://github.com/elm-lang/elm-package/issues/)和[反应器](https://github.com/elm-lang/elm-reactor/issues)中已知的未解决问题；在[Elm
    邮件列表](https://groups.google.com/forum/#!forum/elm-discuss)上寻找相关讨论；并撰写建设性、清晰的错误报告提交给语言社区。你甚至可能会发现
    bug 并决定成为 Elm 的贡献者！
- en: Lists
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表
- en: 'Without further ado, lists. Notice the `import` to bring the "cons" operator
    into scope:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 不用多说了，列表。注意`import`将“cons”操作符引入范围：
- en: '[PRE36]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: There isn't currently a way to import *all* infix operators from a module for
    unqualified use, nor is there support for qualified operators, but there are [proposals](https://groups.google.com/forum/#!searchin/elm-discuss/operator/elm-discuss/1BSng3MWIq0/ZGaFp4PoabQJ)
    for such features.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还没有一种方法可以从模块中导入*所有*中缀操作符以供未限定使用，也没有支持限定操作符的支持，但是有[提案](https://groups.google.com/forum/#!searchin/elm-discuss/operator/elm-discuss/1BSng3MWIq0/ZGaFp4PoabQJ)支持这些特性。
- en: For those keeping score, the list syntax above is part OCaml (`(::)` for cons
    rather than `(:)`) and part Haskell (`,` to separate elements rather than `;`).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些在此记分的人，上面的列表语法部分是 OCaml（`(::)`代替`(:)`作为 cons，而不是`;`）和部分 Haskell（`,`用于分隔元素，而不是`;`）的组合。
- en: 'There''s syntactic shorthand for numeric ranges:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 数值范围的语法简写：
- en: '[PRE37]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`String`s are not lists of `Char`s like they are in Haskell:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`String`不像在 Haskell 中那样是`Char`的列表：'
- en: '[PRE38]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Pattern matching to destruct lists:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 模式匹配以解构列表：
- en: '[PRE39]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Multiple cases on a single line:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一行上的多个 case：
- en: '[PRE40]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Non-exhaustive patterns:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 不完全模式：
- en: '[PRE41]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: As with multi-way conditionals, whitespace matters for pattern matching. Make
    sure your `cases` line up nicely.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 和多路条件语句一样，模式匹配时空白字符很重要。确保你的`cases`排列得整齐。
- en: Higher-Order Functions
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高阶函数
- en: 'The classics:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 经典之作：
- en: '[PRE42]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following emphasizes that the lambda above is *eta-expanded*:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下强调了上述 lambda 是*η-展开*的：
- en: '[PRE43]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The *eta-reduced* version is nicer:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*η-缩减*版本更好：'
- en: '[PRE44]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Datatypes
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据类型
- en: Lists are a built-in *inductive datatype*. You can define your own datatypes
    (or "disjoint sums" or "sums-of-products"). Each type constructor is defined with
    one or more data constructors, each of which is defined to "hold" zero or more
    values.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是一种内置的*归纳数据类型*。您可以定义自己的数据类型（或“不相交和”或“乘积和”）。每个类型构造函数都定义了一个或多个数据构造函数，每个数据构造函数都定义为“持有”零个或多个值。
- en: '[PRE45]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Non-nullary data constructors are themselves functions:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 非空构造数据本身就是函数：
- en: '[PRE46]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Use datatypes to simulate "heterogeneous" lists of values:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据类型模拟值的“异构”列表：
- en: '[PRE47]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Pattern matching is the (only) way to "use," or "destruct," constructed values:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 模式匹配是“使用”或“解构”构造值的（唯一）方法：
- en: '[PRE48]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: As before, be careful with non-exhaustive and redundant patterns.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 与以往一样，要小心处理非穷尽和冗余模式。
- en: Types for Errors
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误类型
- en: Our "head" function `hd` above fails with a run-time error when its argument
    is non-empty. Another way to deal with error cases is to track them explicitly,
    by introducing data values that are used explicitly to represent the error, or
    the lack of a meaningful answer.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面的“head”函数`hd`在其参数非空时会导致运行时错误。处理错误情况的另一种方法是明确跟踪它们，通过引入用于明确表示错误或缺乏有意义答案的数据值。
- en: For example, the type
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，类型
- en: '[PRE49]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'describes two kinds of values: ones labeled `YesInt` that *do* come bundled
    with an `Int`, and ones labeled `NoInt` that do *not* come bundled with any other
    data. In other words, the latter can be used to encode when there is no meaningful
    `Int` to return:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 描述了两种值：标记为`YesInt`的值*包含*一个`Int`，以及标记为`NoInt`的值，不*包含*任何其他数据。换句话说，后者可用于编码当没有有意义的`Int`可返回时：
- en: '[PRE50]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Ah, much better than a run-time error!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 啊，比运行时错误好多了！
- en: This `MaybeInt` type is defined to work only with `Int`s, but the same pattern
    — the presence or absence of a meaningful result — will emerge with all different
    types of values.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此`MaybeInt`类型仅定义为与`Int`一起使用，但相同模式 —— 有意义结果的存在或不存在 —— 将出现在所有不同类型的值中。
- en: 'Polymorphic datatypes to the rescue:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 多态数据类型来拯救：
- en: '[PRE51]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: As when calling polymorphic functions, type variables for type constructors
    like `MaybeData` get instantiated to particular type arguments in order to match
    the kinds of values it is being used with.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 与调用多态函数时一样，类型变量对于像`MaybeData`这样的类型构造函数会被实例化为特定类型参数，以匹配它所使用的值的种类。
- en: 'Polymorphic datatypes and polymorphic functions make a formidable duo:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 多态数据类型和多态函数组成了一个强大的二人组：
- en: '[PRE52]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '"For every type `a`, `NoData` has type `a`." Cool, `NoData` is a polymorphic
    *constant* and its type may be instantiated, or specialized, depending on how
    it is used.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种类型`a`，`NoData`都有类型`a`。酷，`NoData`是一个多态*常量*，其类型可以根据使用方式进行实例化或特化。
- en: 'The `MaybeData` pattern is so common that there''s a library called [`Maybe`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Maybe)
    that provides the following type, which is like ours but with different names:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`MaybeData`模式非常常见，有一个名为[`Maybe`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Maybe)的库提供了以下类型，与我们的类型类似但名称不同：'
- en: '[PRE53]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: There's also a related library and type called [`Result`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Result)
    that generalizes the `Maybe` pattern. Check them out, and also see [`IntroML.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/IntroML.elm)
    for a couple simple examples.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个相关的库和类型叫做[`Result`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Result)，它概括了`Maybe`模式。查看它们，还可以查看[`IntroML.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/IntroML.elm)以获取一些简单示例。
- en: Infix Operators
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中缀运算符
- en: There are a bunch of really useful infix operators in [Basics](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics),
    so take a look around. Make sure to visit `(<|)`, `(|>)`, `(<<)`, and `(>>)`,
    which can be used to write elegant chains of function applications.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Basics](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)中有一堆非常有用的中缀运算符，所以四处看看。确保访问`(<|)`、`(|>)`、`(<<)`和`(>>)`，它们可用于编写优雅的函数应用链。
- en: Let-Expressions
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Let-Expressions
- en: So far we have worked only with top-level definitions. Elm's `let`-expressions
    allow the definition of variables that are "local" to the enclosing scope. As
    with other language features, whitespace matters so make sure equations are aligned.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只使用顶层定义。Elm的`let`表达式允许定义变量，这些变量是“局部”于封闭范围的。与其他语言特性一样，空格很重要，因此确保等式对齐。
- en: '[PRE54]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'No need to write so many `let`s and `in`s:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要写那么多`let`和`in`：
- en: '[PRE55]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Too many local variables can sometimes obscure meaning (just as too few variables
    can). In this case, the "pipelined" definition
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 太多的本地变量有时会使含义变得模糊（就像太少的变量一样）。在这种情况下，“管道化”定义
- en: '[PRE56]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: and, better yet, the definition by function composition
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，更好的是，通过函数组合的定义方式
- en: '[PRE57]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: are, arguably, more readable.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，更易读。
- en: Reading
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: Required
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 必需的
- en: '[Syntax Reference](http://elm-lang.org/learn/Syntax.elm)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[语法参考](http://elm-lang.org/learn/Syntax.elm)'
- en: 'Libraries: [`Basics`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics),
    [`Maybe`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Maybe), [`List`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/List)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库：[`基础`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Basics)，[`可能性`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Maybe)，[`列表`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/List)
- en: Recommended
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 推荐的
- en: Look through some of the [Elm Examples](http://elm-lang.org/Examples.elm)
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览一些 [Elm 示例](http://elm-lang.org/Examples.elm)
- en: Look through more of the [Standard Libraries](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/)
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览更多的 [标准库](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/)
- en: Additional
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 额外的
- en: If you would like to see the syntax and features of two other ML dialects, Standard
    ML and OCaml, take a look at [this](http://www.mpi-sws.org/~rossberg/sml-vs-ocaml.html)
    and [this](http://adam.chlipala.net/mlcomp/).
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想看看另外两种 ML 方言的语法和特性，可以看看[这个](http://www.mpi-sws.org/~rossberg/sml-vs-ocaml.html)和[这个](http://adam.chlipala.net/mlcomp/)。
