- en: Lecture 11 - Hardware Interrupts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next week's classes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: context switch from programming to listening
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assignment 2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: due date
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'performance:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: there is a 40-bit clock that counts cycles
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: respect the exact CPU conditions
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: measure a few times and average
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Servers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is a server?
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: a task that provides service to a client task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tasks requesting service, clients, must know the Tid of the server
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a task that owns a resource and provides synchronized access to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: above,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a task'' owns the interface'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: other tasks may do the work
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How are servers implemented?
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Receive is the key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receive a request
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reply the response
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sender (client, task that is making the request) blocks until the response is
    available. That is, sender, in effect, is running at the priority of the server
    between the request and its reponse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server priority should be set according to the importance of the service it
    supplies.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: But client priority should be considered by the server. For example,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One set of instructions for higher priority client
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One set of instructions for lower priority client
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Name Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why Do We Need a Name Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Names | constant across applications & executions | interface | Associated
    with a set of services (an API) |'
  prefs: []
  type: TYPE_TB
- en: '| Task Ids | vary across applications & executions | implementation | Associated
    with a particular set of instructions and data (an execution) |'
  prefs: []
  type: TYPE_TB
- en: Possible to have multiple names per task, but
  prefs: []
  type: TYPE_NORMAL
- en: not possible to have several tasks per name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name Server Implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose whether to block or Reply.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Hardware Interrupts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is a Hardware Interrupt?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the CPU
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Test interrupt signal before fetching the next instruction
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: actually AND of INT and the IRQ bit in the CPSR
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If asserted, change mode to IRQ
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable interrupt in CPSR
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute instruction at 0x18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Interrupt Control Unit (ICU)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Several interrupts may be present when an interrupt occurs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One is chosen, by a priority mechanism
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Put in a special place
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Software can choose to ignore priority mechanism in ICU
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearing one interrupt may just expose another one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Peripheral Hardware
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Several interrupts may be present
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ORed in peripheral hardware
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ORed in glue hardware
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Rare that there is a priority mechanism
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearing one interrupt can expose another one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When two interrupts are present
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: May have been two present when interrupt processing started
  prefs: []
  type: TYPE_NORMAL
- en: in which case interrupt occurring now is known to be of lower priority
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May have occurred since interrupt processing started
  prefs: []
  type: TYPE_NORMAL
- en: in which case interrupt occurring now may be of higher priority
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens next?
  prefs: []
  type: TYPE_NORMAL
- en: Kernel executes with interrupts disabled
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Context switch into user task turns on interrupts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before fetching the first user task instruction test interrupt signal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If asserted, re-initiate interrupt processing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Context Switches for Interrupts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Difference from Software Interrupts
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: It is impossible to predict where they occur
  prefs: []
  type: TYPE_NORMAL
- en: You may have made some assumptions about when they occur
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assymmetry between User Task and Kernel
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Scratch Registers must be saved
  prefs: []
  type: TYPE_NORMAL
- en: including the IP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two Link Registers
  prefs: []
  type: TYPE_NORMAL
- en: One to return from interrupt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the registers of the interrupt handling code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To return to the interrupted task in the right place
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One to move to the caller's stack frame
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the registers of the interrupted task
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To return to whatever started in interrupted task
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Helpful Features of the ICU
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Several places where you can read state
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Several places where you can block interrupt flow
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Trigger hardware interrupt from software
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What makes interrupts hard is that you are doing two semi-hard things at once
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Making the hardware produce the interrupt
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Responding to the interrupt
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This allows you to separate them in developing/debugging
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware in the Trains Lab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 32-bit Timer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Base address: `0x80810080`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Three registers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Offset | Function | R/W | Bits | Comments |'
  prefs: []
  type: TYPE_TB
- en: '| 0x0 | Timer3Load | R/W | 32: <Load/Reload Value> |  |'
  prefs: []
  type: TYPE_TB
- en: '| 0x4 | Timer3Value | R | 32:<Current value> | Set when Load is written, even
    when counting |'
  prefs: []
  type: TYPE_TB
- en: '| 0x8 | Timer3Control | R/W | 3:xxx<CLKSEL>xx<MODE><ENABLE> | <CLKSEL>: 0,
    2KHz clock; 1, 508KHz <MODE>: 1, count continuously; 0, count once'
  prefs: []
  type: TYPE_NORMAL
- en: '<ENABLE>: Clock turned on'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 0xc | Timer3Clear | W | 32: | Writing anything clears the interrupt |'
  prefs: []
  type: TYPE_TB
- en: Interrupt Control Unit (ICU)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The actual device is the ARM PL190
  prefs: []
  type: TYPE_NORMAL
- en: The logic in this design is completely asynchronous, so it functions when the
    CPU clock is turned off.
  prefs: []
  type: TYPE_NORMAL
- en: Important (= essential) for low power operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All input signals are
  prefs: []
  type: TYPE_NORMAL
- en: active high
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: level sensitive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base addresses
  prefs: []
  type: TYPE_NORMAL
- en: 'VIC1: `0x800B0000`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VIC2: `0``x800C0000`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Operation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: VIC powers up with
  prefs: []
  type: TYPE_NORMAL
- en: all vectored interrupts disabled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: all interrupts masked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: all interrupts giving IRQ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Procedure
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialization
  prefs: []
  type: TYPE_NORMAL
- en: leave protection off
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: enable in VICxIntEnable when you are ready to handle the interrupt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On an interrupt
  prefs: []
  type: TYPE_NORMAL
- en: Read VICxIRQStatus
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose which interrupt you wish to handle
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the interrupt source in the device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For debugging
  prefs: []
  type: TYPE_NORMAL
- en: Use VICxSoftInt and VICxSoftIntClear to turn interrupt sources off and on in
    software
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hardware Definitions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '**Registers for Basic Operation**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Register Name | Offset | R/W | Description |'
  prefs: []
  type: TYPE_TB
- en: '| VICxIRQStatus | 0x00 | RO | One bit for each interrupt source1 if interrupt
    is asserted and enabled |'
  prefs: []
  type: TYPE_TB
- en: '| VICxFIQStatus | 0x04 | RO | As above for FIQ |'
  prefs: []
  type: TYPE_TB
- en: '| VICxRawIntr | 0x08 | RO | As above but not masked |'
  prefs: []
  type: TYPE_TB
- en: '| VICxIntSelect | 0x0c | R/W | 0: IRQ, 1: FIQ |'
  prefs: []
  type: TYPE_TB
- en: '| VICxIntEnable | 0x10 | R/W | 0: Masked, 1: Enabled |'
  prefs: []
  type: TYPE_TB
- en: '| VICxIntEnClear | 0x14 | WO | Clears bits in VICxIntEnable |'
  prefs: []
  type: TYPE_TB
- en: '| VICxSoftInt | 0x18 | R/W | Asserts interrupt from software |'
  prefs: []
  type: TYPE_TB
- en: '| VICxSoftIntClear | 0x1c | WO | Clears interrupt from software |'
  prefs: []
  type: TYPE_TB
- en: '| VICxProtection | 0x20 | R/W | Bit 0 enables protection from user mode access
    |'
  prefs: []
  type: TYPE_TB
- en: '| VICxVectAddr | 0x30 | R/W | Enables priority hardwareSee documentation. |'
  prefs: []
  type: TYPE_TB
- en: Helpful Features of the ICU
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Several places where you can read state
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Several places where you can block interrupt flow
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Trigger hardware interrupt from softwareonce
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What makes interrupts hard is that you are doing two semi-hard things at once
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Making the hardware produce the interrupt
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to the interrupt
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Software interrupt generation allows you to separate them in developing/debugging
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Non-vectored Operation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Initialization
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Enable interrupt in device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable interrupt in ICU
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable interrupt in CPU, usually by MOVS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Interrupt occurs
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: AND of IRQ and NOT( IRQ disabled ) is checked before each instruction fetch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If set IRQ exception is taken in place of next instruction fetch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Possibly zero instructions of active task are executed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that this case works
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Context switch into kernel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Context switch novelties
  prefs:
  - PREF_IND
  - PREF_H5
  type: TYPE_NORMAL
- en: Difference from Software Interrupts
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is impossible to predict where they occur
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You may inadvertently have made some assumptions about when they occur
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scratch Registers must be saved
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: r0-3
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IP -- used only very occasionally by gcc
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two Link Registers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One to return from interrupt
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One to return from the interrupted task to whatever called it
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Turn off interrupt in device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Should turn off interrupt in ICU
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What about IRQ?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You are now ready to process the interrupt in the kernel
  prefs: []
  type: TYPE_NORMAL
- en: Vectored Operation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Procedure
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Initialization
  prefs: []
  type: TYPE_NORMAL
- en: Write kernel entry point into VICxDefVectAddr
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If desired write special entry point into VICxVectAddry
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When ready to accept interrupts write source and enable into VICxVectCntl
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When an interrupt occurs
  prefs: []
  type: TYPE_NORMAL
- en: Read VICxVectAddr to find address
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move result to PC
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When service is complete write VICxVectAddr to rerun priority hardware
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Register Name | Offset | R/W | Description |'
  prefs: []
  type: TYPE_TB
- en: '| VICxVectAddr | 0x030 | R/W | Read: address of vector for highest priority
    interruptWrite: service complete, enable priority hardware |'
  prefs: []
  type: TYPE_TB
- en: '| VICxDefVectAddr | 0x034 | R/W | Default vector address |'
  prefs: []
  type: TYPE_TB
- en: '| VICxVectAddry | 0x100+4y | R/W | Vector address for interrupt y |'
  prefs: []
  type: TYPE_TB
- en: '| VICxVectCntly | 0x200+4y | R/W | Control register for interrupt yBit[0-4]:
    interrupt source for interrupt yBit[5]: enable vectored interrupt y |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
