["```\nString s = \"a\";\ns = s.concat(\"b\"); // s+=\"b\" and s=s+\"b\" also mean the same thing\n```", "```\nStringBuilder sb = new StringBuilder(\"a\");\nsb.append(\"b\");\n```", "```\nString t = s;\nt = t + \"c\";\n\nStringBuilder tb = sb;\ntb.append(\"c\");\n```", "```\nString s = \"\";\nfor (int i = 0; i < n; ++i) {\n    s = s + n;\n}\n```", "```\nStringBuilder sb = new StringBuilder();\nfor (int i = 0; i < n; ++i) {\n  sb.append(String.valueOf(i));\n}\nString s = sb.toString();\n```", "```\n/** @return the sum of the numbers in the list */\npublic static int sum(List<Integer> list) {\n    int sum = 0;\n    for (int x : list)\n        sum += x;\n    return sum;\n}\n```", "```\n/** @return the sum of the absolute values of the numbers in the list */\npublic static int sumAbsolute(List<Integer> list) {\n    // let's reuse sum(), because DRY, so first we take absolute values\n    for (int i = 0; i < list.size(); ++i)\n        list.set(i, Math.abs(list.get(i)));\n    return sum(list);\n}\n```", "```\n// meanwhile, somewhere else in the code...\npublic static void main(String[] args) {\n    // ...\n    List<Integer> myData = Arrays.asList(-5, -3, -2);\n    System.out.println(sumAbsolute(myData));\n    System.out.println(sum(myData));\n}\n```", "```\n/** @return the first day of spring this year */\npublic static Date startOfSpring() {\n    return askGroundhog();\n}\n```", "```\n// somewhere else in the code...\npublic static void partyPlanning() {\n    Date partyDate = startOfSpring();\n    // ...\n}\n```", "```\n/** @return the first day of spring this year */\npublic static Date startOfSpring() {\n    if (groundhogAnswer == null) groundhogAnswer = askGroundhog();\n    return groundhogAnswer;\n}\nprivate static Date groundhogAnswer = null;\n```", "```\n// somewhere else in the code...\npublic static void partyPlanning() {\n    // let's have a party one month after spring starts!\n    Date partyDate = startOfSpring();\n    partyDate.setMonth(partyDate.getMonth() + 1);\n    // ... uh-oh. what just happened?\n}\n```", "```\n return new Date(groundhogAnswer.getTime());\n```", "```\nstatic void sort(List<String> lst)\n  *requires*: nothing\n  *effects*:  puts lst in sorted order, i.e. lst[i] <= lst[j]\n              for all 0 <= i < j < lst.size()\n```", "```\nstatic List<String> toLowerCase(List<String> lst)\n  *requires*: nothing\n  *effects*:  returns a new list t where t[i] = lst[i].toLowerCase()\n```", "```\nList<String> lst = ...;\n**for (String str : lst) {**\n    System.out.println(str);\n**}** \n```", "```\nList<String> lst = ...;\n**Iterator iter = lst.iterator();**\n**while (iter.hasNext()) {**\n    **String str = iter.next();**\n    System.out.println(str);\n**}** \n```", "```\n/**\n * A MyIterator is a mutable object that iterates over\n * the elements of an ArrayList<String>, from first to last.\n * This is just an example to show how an iterator works.\n * In practice, you should use the ArrayList's own iterator\n * object, returned by its iterator() method.\n */\npublic class MyIterator {\n\n    private final ArrayList<String> list;\n    private int index;\n    // list[index] is the next element that will be returned\n    //   by next()\n    // index == list.size() means no more elements to return\n\n    /**\n     * Make an iterator.\n     * @param list list to iterate over\n     */\n    public MyIterator(ArrayList<String> list) {\n        this.list = list;\n        this.index = 0;\n    }\n\n    /**\n     * Test whether the iterator has more elements to return.\n     * @return true if next() will return another element,\n     *         false if all elements have been returned\n     */\n    public boolean hasNext() {\n        return index < list.size();\n    }\n\n    /**\n     * Get the next element of the list.\n     * Requires: hasNext() returns true.\n     * Modifies: this iterator to advance it to the element \n     *           following the returned element.\n     * @return next element of the list\n     */\n    public String next() {\n        final String element = list.get(index);\n        ++index;\n        return element;\n    }\n}\n```", "```\npublic class MyIterator {\n\n    private final ArrayList<String> list;\n    private int index;\n\n    ...\n\n    /**\n     * Get the next element of the list.\n     * Requires: hasNext() returns true.\n     * Modifies: this iterator to advance it to the element \n     *           following the returned element.\n     * @return next element of the list\n     */\n    public String next() {\n        final String element = list.get(index);\n        ++index;\n        return element;\n    }\n}\n```", "```\n/**\n * Drop all subjects that are from Course 6\\. \n * Modifies subjects list by removing subjects that start with \"6.\"\n * \n * @param subjects list of MIT subject numbers\n */\npublic static void dropCourse6(ArrayList<String> subjects)\n```", "```\n// Testing strategy:\n//   subjects.size: 0, 1, n\n//   contents: no 6.xx, one 6.xx, all 6.xx\n//   position: 6.xx at start, 6.xx in middle, 6.xx at end\n\n// Test cases:\n//   [] => []\n//   [\"8.03\"] => [\"8.03\"]\n//   [\"14.03\", \"9.00\", \"21L.005\"] => [\"14.03\", \"9.00\", \"21L.005\"]\n//   [\"2.001\", \"6.01\", \"18.03\"] => [\"2.001\", \"18.03\"]\n//   [\"6.045\", \"6.005\", \"6.813\"] => [] \n```", "```\npublic static void dropCourse6(ArrayList<String> subjects) {\n    MyIterator iter = new MyIterator(subjects);\n    while (iter.hasNext()) {\n        String subject = iter.next();\n        if (subject.startsWith(\"6.\")) {\n            subjects.remove(subject);\n        }\n    }\n}\n```", "```\n// dropCourse6([\"6.045\", \"6.005\", \"6.813\"])\n//   expected [], actual [\"6.005\"] \n```", "```\nfor (String subject : subjects) {\n    if (subject.startsWith(\"6.\")) {\n        subjects.remove(subject);\n    }\n}\n```", "```\nIterator iter = subjects.iterator();\nwhile (iter.hasNext()) {\n    String subject = iter.next();\n    if (subject.startsWith(\"6.\")) {\n        **iter.remove();**\n    }\n} \n```", "```\n/**\n * @param username username of person to look up\n * @return the 9-digit MIT identifier for username.\n * @throws NoSuchUserException if nobody with username is in MIT's database\n */\npublic static char[] getMitId(String username) throws NoSuchUserException {        \n    // ... look up username in MIT's database and return the 9-digit ID\n}\n```", "```\nchar[] id = getMitId(\"bitdiddle\");\nSystem.out.println(id);\n```", "```\nchar[] id = getMitId(\"bitdiddle\");\nfor (int i = 0; i < 5; ++i) {\n    id[i] = '*';\n}\nSystem.out.println(id);\n```", "```\nprivate static Map<String, char[]> cache = new HashMap<String, char[]>();\n\npublic static char[] getMitId(String username) throws NoSuchUserException {        \n    // see if it's in the cache already\n    if (cache.containsKey(username)) {\n        return cache.get(username);\n    }\n\n    // ... look up username in MIT's database ...\n\n    // store it in the cache for future lookups\n    cache.put(username, id);\n    return id;\n}\n```", "```\npublic static char[] getMitId(String username) throws NoSuchUserException \n  *requires*: nothing\n  *effects*: returns an array containing the 9-digit MIT identifier of username,\n             or throws NoSuchUserException if nobody with username is in MIT\u2019s\n             database. **Caller may never modify the returned array.**\n```", "```\npublic static char[] getMitId(String username) throws NoSuchUserException \n  *requires*: nothing\n  *effects*: returns **a new array** containing the 9-digit MIT identifier of username,\n             or throws NoSuchUserException if nobody with username is in MIT\u2019s\n             database.\n```", "```\npublic static **String** getMitId(String username) throws NoSuchUserException \n  *requires*: nothing\n  *effects*: returns the 9-digit MIT identifier of username, or throws\n             NoSuchUserException if nobody with username is in MIT\u2019s database.\n```"]