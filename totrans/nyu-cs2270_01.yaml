- en: Notes for September 9 class -- Introduction to Shaders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**3D Coordinate system**'
  prefs: []
  type: TYPE_NORMAL
- en: 'WebGL exists in a 3D world:'
  prefs: []
  type: TYPE_NORMAL
- en: x goes to the right
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: y goes up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: z goes forward (out of the screen)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is called a *right hand coordinate system*.
  prefs: []
  type: TYPE_NORMAL
- en: For now we are going to be doing all of our work starting with the x,y plane.
    Specifically we will be working with a square that extends from -1 â†’ +1 in both
    x and y.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cb3ca0f30b4aa1e72175d16318b333e7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Square as a triangle strip**'
  prefs: []
  type: TYPE_NORMAL
- en: Our geometry will be a square.
  prefs: []
  type: TYPE_NORMAL
- en: In WebGL everything is made of triangles, so we will need two triangles.
  prefs: []
  type: TYPE_NORMAL
- en: We define these as a *triangle strip*.
  prefs: []
  type: TYPE_NORMAL
- en: In a triangle strip, every three successive vertices makes a new triangle, so
    we will need to specify a total of four vertices, as in the figure to the right.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/a59986d9ce1ace17e14057fe8da01e42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Z-buffer algorithm**'
  prefs: []
  type: TYPE_NORMAL
- en: The GPU (Graphics Processing Unit) renders using a "Z-buffer algorithm"
  prefs: []
  type: TYPE_NORMAL
- en: 'For each animation frame, this algorithm consists of two successive steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For each vertex:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The GPU runs a *vertex shader* to:'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Find which pixel of the image contains this vertex;
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up "varying" values to be interpolated.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For each triangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The GPU interpolates from vertices to pixels.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For each pixel:'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The GPU runs a *fragment shader* to:'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Compute color;
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: If this is the nearest fragment at the pixel, replace color and depth at this
    pixel in the image.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/852b36a744c9d9a18d793344c9a8ace8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Vector3 object**'
  prefs: []
  type: TYPE_NORMAL
- en: One data structure that will be very useful is a vector of length 3, which we
    can use to represent x,y,z coordinates, as seen in the figure to the right.
  prefs: []
  type: TYPE_NORMAL
- en: In Javascript we can define this object via a constructor, which contains all
    of its properties that can change per instance, as well as a prototype, which
    contains properties that do not change from one instance to another (such as functions
    to do such operations as setting values).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07cbbf0168a13a7271c4c5b743cc5fb2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Vector3 object will grow in capability as the semester progresses, but to
    the right is a starter version.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the x,y and z properties, which change from instance to intance, are
    defined in the constructor itself.
  prefs: []
  type: TYPE_NORMAL
- en: The set property, which will be the same function for all instances, is defined
    in the prototype.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Uniform variables**'
  prefs: []
  type: TYPE_NORMAL
- en: GLSL (for "GL Shading Language") is the C-like language that is used for shaders
    on the GPU. One of its key constructs is a *uniform variable*.
  prefs: []
  type: TYPE_NORMAL
- en: Uniform variables on the GPU have the same value at every pixel. They can (and
    often do) change over time.
  prefs: []
  type: TYPE_NORMAL
- en: By convention, a uniform variable name starts with the letter 'u'.
  prefs: []
  type: TYPE_NORMAL
- en: 'For your assignment, I have create some useful uniform variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Vertex shaders**'
  prefs: []
  type: TYPE_NORMAL
- en: A *vertex shader* is a program that you (the application programmer/artist)
    writes which gets run on the GPU at every vertex. It is written in the special
    purpose language GLSL.
  prefs: []
  type: TYPE_NORMAL
- en: To the right is a very simple vertex shader program. An "attribute" is a constant
    value that is passed in from the CPU. In this case, it is `aPosition`, the x,y,z
    position of each vertex in the scene. wIt is of type `vec3`, which means that
    it consists of three GLSL floating point numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: One of the most powerful things that a vertex shader can do is set "varying"
    variables. These values are then interpolated by the GPU across the pixels of
    any triangles that use this vertex. That interpolated value will then be available
    to fragment shaders at each pixel.
  prefs: []
  type: TYPE_NORMAL
- en: For example, "varying" variable `vPosition` is set by this vertex shader. By
    convention, the names of varying variables start with the letter 'v'.
  prefs: []
  type: TYPE_NORMAL
- en: 'This vertex shader does two things:'
  prefs: []
  type: TYPE_NORMAL
- en: By setting `gl_Position`, it determines at which pixel of the image this vertex
    will appear.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It sets varying variable `vPosition` to equal the attribute position `aPosition`
    for this vertex.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fragment shaders**'
  prefs: []
  type: TYPE_NORMAL
- en: A *fragment shader* is a program that you (the application programmer) writes
    which is run at every pixel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because pieces of different triangles can be visible at each pixel (eg: when
    triangles are very small, or pixels where an edge of one triangle partly obscures
    another triangle), in general we are really defining the colors of fragments of
    pixels, which is why these are called fragment shaders.'
  prefs: []
  type: TYPE_NORMAL
- en: Since our vertex shader has set a value for `vPosition`, any fragment shader
    we write will be able to make use of this variable, whose values will now have
    been interpolated down to the pixel level.
  prefs: []
  type: TYPE_NORMAL
- en: '**Guides to WebGL**'
  prefs: []
  type: TYPE_NORMAL
- en: There are many guides on-line to WebGL. I find this [Tutorial on WebGL Fundamentals](http://webglfundamentals.org)
    to be particularly clear and easy to follow for people who are new to WebGL.
  prefs: []
  type: TYPE_NORMAL
- en: I also find this [Quick Reference Card](https://www.khronos.org/files/webgl/webgl-reference-card-1_0.pdf)
    to be very useful when writing WebGL shaders. I think you will find the list of
    built-in functions on the last page to be particularly useful.
  prefs: []
  type: TYPE_NORMAL
- en: '**Assignment 1**'
  prefs: []
  type: TYPE_NORMAL
- en: Your assignment for this week is to start with [the code in this zip file](code1.zip),
    which we went over in class, and replace the fragment shader in index.html with
    your own fascinating and wonderful and original fragment shader.
  prefs: []
  type: TYPE_NORMAL
- en: '***Important:*** Create something of your own. Don''t just make a minor variation
    of what I did in class. Have fun with it.'
  prefs: []
  type: TYPE_NORMAL
- en: Your homework is due before the start of next week's class.
  prefs: []
  type: TYPE_NORMAL
