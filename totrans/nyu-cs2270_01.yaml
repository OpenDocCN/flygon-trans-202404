- en: Notes for September 9 class -- Introduction to Shaders
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9 月 9 日课程笔记 -- 着色器简介
- en: '**3D Coordinate system**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**3D 坐标系**'
- en: 'WebGL exists in a 3D world:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: WebGL 存在于 3D 世界中：
- en: x goes to the right
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x 向右移动
- en: y goes up
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: y 向上
- en: z goes forward (out of the screen)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: z 向前（屏幕外）
- en: This is called a *right hand coordinate system*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为*右手坐标系*。
- en: For now we are going to be doing all of our work starting with the x,y plane.
    Specifically we will be working with a square that extends from -1 → +1 in both
    x and y.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将从 x、y 平面开始进行所有工作。 具体来说，我们将使用从 -1 → +1 的正方形的 x 和 y。
- en: '![](../Images/cb3ca0f30b4aa1e72175d16318b333e7.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cb3ca0f30b4aa1e72175d16318b333e7.jpg)'
- en: '**Square as a triangle strip**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**正方形作为三角带**'
- en: Our geometry will be a square.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的几何图形将是一个正方形。
- en: In WebGL everything is made of triangles, so we will need two triangles.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WebGL 中，一切都由三角形组成，因此我们将需要两个三角形。
- en: We define these as a *triangle strip*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些定义为 *三角带*。
- en: In a triangle strip, every three successive vertices makes a new triangle, so
    we will need to specify a total of four vertices, as in the figure to the right.
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在三角带中，每三个连续的顶点构成一个新的三角形，因此我们需要指定总共四个顶点，如右图所示。
- en: '![](../Images/a59986d9ce1ace17e14057fe8da01e42.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a59986d9ce1ace17e14057fe8da01e42.jpg)'
- en: '**Z-buffer algorithm**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Z 缓冲算法**'
- en: The GPU (Graphics Processing Unit) renders using a "Z-buffer algorithm"
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: GPU（图形处理单元）使用 "Z 缓冲算法" 进行渲染。
- en: 'For each animation frame, this algorithm consists of two successive steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个动画帧，此算法由两个连续步骤组成：
- en: 'For each vertex:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个顶点：
- en: 'The GPU runs a *vertex shader* to:'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: GPU 运行 *顶点着色器* 以：
- en: ''
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Find which pixel of the image contains this vertex;
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找出包含此顶点的图像的像素；
- en: Set up "varying" values to be interpolated.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置要插值的 "varying" 值。
- en: 'For each triangle:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个三角形：
- en: The GPU interpolates from vertices to pixels.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: GPU 从顶点到像素进行插值。
- en: 'For each pixel:'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于每个像素：
- en: ''
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The GPU runs a *fragment shader* to:'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: GPU 运行 *片段着色器* 以：
- en: ''
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Compute color;
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算颜色；
- en: If this is the nearest fragment at the pixel, replace color and depth at this
    pixel in the image.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果这是像素上最近的片段，请替换图像中此像素的颜色和深度。
- en: '![](../Images/852b36a744c9d9a18d793344c9a8ace8.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/852b36a744c9d9a18d793344c9a8ace8.jpg)'
- en: '**Vector3 object**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Vector3 对象**'
- en: One data structure that will be very useful is a vector of length 3, which we
    can use to represent x,y,z coordinates, as seen in the figure to the right.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常有用的数据结构是长度为 3 的向量，我们可以使用它来表示 x、y、z 坐标，如右图所示。
- en: In Javascript we can define this object via a constructor, which contains all
    of its properties that can change per instance, as well as a prototype, which
    contains properties that do not change from one instance to another (such as functions
    to do such operations as setting values).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Javascript 中，我们可以通过构造函数定义此对象，该构造函数包含每个实例可以更改的所有属性，以及原型，该原型包含从一个实例到另一个实例不会更改的属性（例如设置值的函数等）。
- en: '![](../Images/07cbbf0168a13a7271c4c5b743cc5fb2.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/07cbbf0168a13a7271c4c5b743cc5fb2.jpg)'
- en: The Vector3 object will grow in capability as the semester progresses, but to
    the right is a starter version.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Vector3 对象将随着学期的进展而增加功能，但右侧是一个起始版本。
- en: Note that the x,y and z properties, which change from instance to intance, are
    defined in the constructor itself.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，x、y 和 z 属性是在构造函数中定义的，这些属性从实例到实例会改变。
- en: The set property, which will be the same function for all instances, is defined
    in the prototype.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: set 属性，这将是所有实例的相同函数，定义在原型中。
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Uniform variables**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Uniform 变量**'
- en: GLSL (for "GL Shading Language") is the C-like language that is used for shaders
    on the GPU. One of its key constructs is a *uniform variable*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: GLSL（"GL 着色语言"）是用于 GPU 上着色器的类似 C 的语言。 其中一个关键构造是 *uniform 变量*。
- en: Uniform variables on the GPU have the same value at every pixel. They can (and
    often do) change over time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: GPU 上的 uniform 变量在每个像素处具有相同的值。 它们可以（并且经常）随时间改变。
- en: By convention, a uniform variable name starts with the letter 'u'.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，uniform 变量名以字母 'u' 开头。
- en: 'For your assignment, I have create some useful uniform variables:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您的作业，我已经创建了一些有用的 uniform 变量：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Vertex shaders**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**顶点着色器**'
- en: A *vertex shader* is a program that you (the application programmer/artist)
    writes which gets run on the GPU at every vertex. It is written in the special
    purpose language GLSL.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*顶点着色器* 是您（应用程序员/艺术家）编写的在 GPU 上在每个顶点运行的程序。 它是用特殊用途语言 GLSL 编写的。'
- en: To the right is a very simple vertex shader program. An "attribute" is a constant
    value that is passed in from the CPU. In this case, it is `aPosition`, the x,y,z
    position of each vertex in the scene. wIt is of type `vec3`, which means that
    it consists of three GLSL floating point numbers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧是一个非常简单的顶点着色器程序。"属性"是从 CPU 传入的常量值。在这种情况下，它是`aPosition`，场景中每个顶点的x、y、z位置。它是`vec3`类型，这意味着它由三个
    GLSL 浮点数组成。
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: One of the most powerful things that a vertex shader can do is set "varying"
    variables. These values are then interpolated by the GPU across the pixels of
    any triangles that use this vertex. That interpolated value will then be available
    to fragment shaders at each pixel.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 顶点着色器最强大的功能之一是设置“varying”变量。然后 GPU 会在使用这个顶点的任何三角形的像素上对这些值进行插值。这个插值值将在每个像素处供片段着色器使用。
- en: For example, "varying" variable `vPosition` is set by this vertex shader. By
    convention, the names of varying variables start with the letter 'v'.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，“varying”变量`vPosition`是由这个顶点着色器设置的。按照惯例，变量的名称以字母'v'开头。
- en: 'This vertex shader does two things:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个顶点着色器做了两件事：
- en: By setting `gl_Position`, it determines at which pixel of the image this vertex
    will appear.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过设置`gl_Position`，它确定了这个顶点将出现在图像的哪个像素上。
- en: It sets varying variable `vPosition` to equal the attribute position `aPosition`
    for this vertex.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将varying变量`vPosition`设置为等于此顶点的属性位置`aPosition`。
- en: '**Fragment shaders**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**片段着色器**'
- en: A *fragment shader* is a program that you (the application programmer) writes
    which is run at every pixel.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*片段着色器*是您（应用程序员）编写的在每个像素处运行的程序。'
- en: 'Because pieces of different triangles can be visible at each pixel (eg: when
    triangles are very small, or pixels where an edge of one triangle partly obscures
    another triangle), in general we are really defining the colors of fragments of
    pixels, which is why these are called fragment shaders.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因为不同三角形的片段可以在每个像素处可见（例如：当三角形非常小，或者像素在一个三角形的边缘部分遮挡另一个三角形时），通常我们实际上是在定义像素片段的颜色，这就是为什么这些被称为片段着色器。
- en: Since our vertex shader has set a value for `vPosition`, any fragment shader
    we write will be able to make use of this variable, whose values will now have
    been interpolated down to the pixel level.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的顶点着色器为`vPosition`设置了一个值，我们编写的任何片段着色器都将能够利用这个变量，其值现在已经被插值到像素级别。
- en: '**Guides to WebGL**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**WebGL 指南**'
- en: There are many guides on-line to WebGL. I find this [Tutorial on WebGL Fundamentals](http://webglfundamentals.org)
    to be particularly clear and easy to follow for people who are new to WebGL.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多关于 WebGL 的在线指南。我发现这个[WebGL 基础教程](http://webglfundamentals.org)对于新手来说非常清晰易懂。
- en: I also find this [Quick Reference Card](https://www.khronos.org/files/webgl/webgl-reference-card-1_0.pdf)
    to be very useful when writing WebGL shaders. I think you will find the list of
    built-in functions on the last page to be particularly useful.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我还发现这个[快速参考卡](https://www.khronos.org/files/webgl/webgl-reference-card-1_0.pdf)在编写
    WebGL 着色器时非常有用。我认为你会发现最后一页的内置函数列表特别有用。
- en: '**Assignment 1**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**作业 1**'
- en: Your assignment for this week is to start with [the code in this zip file](code1.zip),
    which we went over in class, and replace the fragment shader in index.html with
    your own fascinating and wonderful and original fragment shader.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本周的作业是从[这个 zip 文件中的代码](code1.zip)开始，我们在课堂上讨论过，然后用您自己的迷人、精彩和原创的片段着色器替换 index.html
    中的片段着色器。
- en: '***Important:*** Create something of your own. Don''t just make a minor variation
    of what I did in class. Have fun with it.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '***重要提示：*** 创造属于你自己的东西。不要只是对我在课堂上所做的进行微小变化。玩得开心。'
- en: Your homework is due before the start of next week's class.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你的作业要在下周课程开始之前完成。
