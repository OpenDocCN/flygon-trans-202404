- en: 関数とthis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 関数とthis
- en: 原文：[https://jsprimer.net/basic/function-this/](https://jsprimer.net/basic/function-this/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/basic/function-this/](https://jsprimer.net/basic/function-this/)
- en: この章では`this`という特殊な動作をするキーワードについて見ていきます。 基本的にはメソッドの中で利用しますが、`this`は読み取り専用のグローバル変数のようなものでどこにでも書けます。
    加えて、`this`の参照先（評価結果）は条件によって異なります。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: この章では`this`という特殊な動作をするキーワードについて見ていきます。 基本的にはメソッドの中で利用しますが、`this`は読み取り専用のグローバル変数のようなものでどこにでも書けます。
    加えて、`this`の参照先（評価結果）は条件によって異なります。
- en: '`this`の参照先は主に次の条件によって変化します。'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`this`の参照先は主に次の条件によって変化します。'
- en: 実行コンテキストにおける`this`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 実行コンテキストにおける`this`
- en: コンストラクタにおける`this`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: コンストラクタにおける`this`
- en: 関数とメソッドにおける`this`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 関数とメソッドにおける`this`
- en: Arrow Functionにおける`this`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arrow Functionにおける`this`
- en: コンストラクタにおける`this`は、次の章である「[クラス](../class/)」で扱います。 この章ではさまざまな条件での`this`について扱いますが、`this`が実際に使われるのはメソッドにおいてです。
    そのため、あらゆる条件下での`this`の動きをすべて覚える必要はありません。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: コンストラクタにおける`this`は、次の章である「[クラス](../class/)」で扱います。 この章ではさまざまな条件での`this`について扱いますが、`this`が実際に使われるのはメソッドにおいてです。
    そのため、あらゆる条件下での`this`の動きをすべて覚える必要はありません。
- en: この章では、さまざまな条件下で変わる`this`の参照先と関数やArrow Functionとの関係を見ていきます。 また、実際にどのような状況で問題が発生するかを知り、`this`の動きを予測可能にするにはどのようにするかを見ていきます。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: この章では、さまざまな条件下で変わる`this`の参照先と関数やArrow Functionとの関係を見ていきます。 また、実際にどのような状況で問題が発生するかを知り、`this`の動きを予測可能にするにはどのようにするかを見ていきます。
- en: '[](#execution-context-this)*実行コンテキストと`this`*'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#execution-context-this)*実行コンテキストと`this`*'
- en: '*最初に「[JavaScriptとは](../introduction/)」の章において、JavaScriptには実行コンテキストとして"Script"と"Module"があるという話をしました。
    どの実行コンテキストでJavaScriptのコードを評価するかは、実行環境によってやり方が異なります。 この章では、ブラウザの`script`要素と`type`属性を使い、それぞれの実行コンテキストを明示しながら`this`の動きを見ていきます。'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初に「[JavaScriptとは](../introduction/)」の章において、JavaScriptには実行コンテキストとして"Script"と"Module"があるという話をしました。
    どの実行コンテキストでJavaScriptのコードを評価するかは、��行環境によってやり方が異なります。 この章では、ブラウザの`script`要素と`type`属性を使い、それぞれの実行コンテキストを明示しながら`this`の動きを見ていきます。'
- en: トップレベル（もっとも外側のスコープ）にある`this`は、実行コンテキストによって値が異なります。 実行コンテキストの違いは意識しにくい部分であり、トップレベルで`this`を使うと混乱を生むことになります。
    そのため、コードのトップレベルにおいては`this`を使うべきではありませんが、それぞれの実行コンテキストにおける動作を紹介します。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: トップレベル（もっとも外側のスコープ）にある`this`は、実行コンテキストによって値が異なります。 実行コンテキストの違いは意識しにくい部分であり、トップレベルで`this`を使うと混乱を生むことになります。
    そのため、コードのトップレベルにおいては`this`を使うべきではありませんが、それぞれの実行コンテキストにおける動作を紹介します。
- en: '[](#script-this)*スクリプトにおける`this`*'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#script-this)*スクリプトにおける`this`*'
- en: '*実行コンテキストが"Script"である場合、トップレベルのスコープに書かれた`this`はグローバルオブジェクトを参照します。 グローバルオブジェクトは、実行環境ごとに異なるものが定義されています。
    ブラウザのグローバルオブジェクトは`window`オブジェクト、Node.jsのグローバルオブジェクトは`global`オブジェクトとなります。'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*実行コンテキストが"Script"である場合、トップレベルのスコープに書かれた`this`はグローバルオブジェクトを参照します。 グローバルオブジェクトは、実行環境ごとに異なるものが定義されています。
    ブラウザのグローバルオブジェクトは`window`オブジェクト、Node.jsのグローバルオブジェクトは`global`オブジェクトとなります。'
- en: ブラウザでは、`script`要素の`type`属性を指定していない場合は、実行コンテキストが"Script"として実行されます。 この`script`要素の直下に書いた`this`はグローバルオブジェクトである`window`オブジェクトとなります。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ブラウザでは、`script`要素の`type`属性を指定していない場合は、実行コンテキストが"Script"として実行されます。 この`script`要素の直下に書いた`this`はグローバルオブジェクトである`window`オブジェクトとなります。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[](#module-this)*モジュールにおける`this`*'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#module-this)*モジュールにおける`this`*'
- en: '*実行コンテキストが"Module"である場合、そのトップレベルのスコープに書かれた`this`は常に`undefined`となります。'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*実行コンテキストが"Module"である場合、そのトップレベルのスコープに書かれた`this`は常に`undefined`となります。'
- en: ブラウザで、`script`要素に`type="module"`属性がついた場合は、実行コンテキストが"Module"として実行されます。 この`script`要素の直下に書いた`this`は`undefined`となります。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ブラウザで、`script`要素に`type="module"`属性がついた場合は、実行コンテキストが"Module"として実行されます。 この`script`要素の直下に書いた`this`は`undefined`となります。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: このように、トップレベルのスコープの`this`は実行コンテキストによって`undefined`となる場合があります。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: このように、トップレベルのスコープの`this`は実行コンテキストによって`undefined`となる場合があります。
- en: 単純にグローバルオブジェクトを参照したい場合は、`this`ではなく`globalThis`を使います。 `globalThis`は実行環境のグローバルオブジェクトを参照するためにES2020で導入されました。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 単純にグローバルオブジェクトを参照したい場合は、`this`ではなく`globalThis`を使います。 `globalThis`は実行環境のグローバルオブジェクトを参照するためにES2020で導入されました。
- en: 実行環境のグローバルオブジェクトは、ブラウザでは`window`、Node.jsでは`global`のように名前が異なります。 そのため同じコードで、異なるグローバルオブジェクトを参照するには、コード上で分岐する必要がありました。
    ES2020ではこの問題を解決するために、実行環境のグローバルオブジェクトを参照する`globalThis`が導入されました。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 実行環境のグローバルオブジェクトは、ブラウザでは`window`、Node.jsでは`global`のように名前が異なります。 そのため同じコードで、異なるグローバルオブジェクトを参照するには、コード上で分岐する必要がありました。
    ES2020ではこの問題を解決するために、実行環境のグローバルオブジェクトを参照する`globalThis`が導入されました。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[](#function-and-method-this)*関数とメソッドにおける`this`*'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#function-and-method-this)*関数とメソッドにおける`this`*'
- en: '***関数**を定義する方法として、`function`キーワードによる関数宣言と関数式、Arrow Functionなどがあります。 `this`が参照先を決めるルールは、Arrow
    Functionとそれ以外の関数定義の方法で異なります。'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '***関数**を定義する方法として、`function`キーワードによる関数宣言と関数式、Arrow Functionなどがあります。 `this`が参照先を決めるルールは、Arrow
    Functionとそれ以外の関数定義の方法で異なります。'
- en: そのため、まずは関数定義の種類について振り返ってから、それぞれの`this`について見ていきます。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: そのため、まずは関数定義の種類について振り返ってから、それぞれの`this`について見ていきます。
- en: '[](#type-of-function)*関数の種類*'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#type-of-function)*関数の種類*'
- en: '*「[関数と宣言](../function-declaration/)」の章で詳しく紹介していますが、関数の定義方法と呼び出し方について改めて振り返ってみましょう。
    **関数**を定義する場合には、次の3つの方法を利用します。'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*「[関数と宣言](../function-declaration/)」の章で詳しく紹介していますが、関数の定義方法と呼び出し方について改めて振り返ってみましょう。
    **関数**を定義する場合には、次の3つの方法を利用します。'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: それぞれ定義した関数は`関数名()`と書くことで呼び出せます。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: それぞれ定義した関数は`関数名()`と書くことで呼び出せます。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[](#type-of-method)*メソッドの種類*'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#type-of-method)*メソッドの種類*'
- en: '*JavaScriptではオブジェクトのプロパティが関数である場合にそれを**メソッド**と呼びます。 一般的にはメソッドも含めたものを**関数**と言い、関数宣言などとプロパティである関数を区別する場合に**メソッド**と呼びます。'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScriptではオブジェクトのプロパティが関数である場合にそれを**メソッド**と呼びます。 一般的にはメソッドも含めたものを**関数**と言い、関数宣言などとプロパティである関数を区別する場合に**メソッド**と呼びます。'
- en: メソッドを定義する場合には、オブジェクトのプロパティに関数式を定義するだけです。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: メソッドを定義する場合には、オブジェクトのプロパティに関数式を定義するだけです。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: これに加えてメソッドには短縮記法があります。 オブジェクトリテラルの中で `メソッド名(){ /*メソッドの処理*/ }`と書くことで、メソッドを定義できます。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: これに加えてメソッドには短縮記法があります。 オブジェクトリテラルの中で `メソッド名(){ /*メソッドの処理*/ }`と書くことで、メソッドを定義できます。
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: これらのメソッドは、`オブジェクト名.メソッド名()`と書くことで呼び出せます。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: これらのメソッドは、`オブジェクト名.メソッド名()`と書くことで呼び出せます。
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 関数定義とメソッドの定義についてまとめると、次のようになります。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 関数定義とメソッドの定義についてまとめると、次のようになります。
- en: '| 名前 | 関数 | メソッド |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 名前 | 関数 | メソッド |'
- en: '| --- | --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 関数宣言(`function fn(){}`) | ✔ | x |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 関数宣言(`function fn(){}`) | ✔ | x |'
- en: '| 関数式(`const fn = function(){}`) | ✔ | ✔ |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 関数式(`const fn = function(){}`) | ✔ | ✔ |'
- en: '| Arrow Function(`const fn = () => {}`) | ✔ | ✔ |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| Arrow Function(`const fn = () => {}`) | ✔ | ✔ |'
- en: '| メソッドの短縮記法(`const obj = { method(){} }`) | x | ✔ |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| メソッドの短縮記法(`const obj = { method(){} }`) | x | ✔ |'
- en: 最初に書いたように`this`の挙動は、Arrow Functionの関数定義とそれ以外（`function`キーワードやメソッドの短縮記法）の関数定義で異なります。
    そのため、まずは**Arrow Function以外**の関数やメソッドにおける`this`を見ていきます。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最初に書いたように`this`の挙動は、Arrow Functionの関数定義とそれ以外（`function`キーワードやメソッドの短縮記法）の関数定義で異なります。
    そのため、まずは**Arrow Function以外**の関数やメソッドにおける`this`を見ていきます。
- en: '[](#function-without-arrow-function-this)*Arrow Function以外の関数における`this`*'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#function-without-arrow-function-this)*Arrow Function以外の関数における`this`*'
- en: '*Arrow Function以外の関数（メソッドも含む）における`this`は、実行時に決まる値となります。 言い方を変えると`this`は関数に渡される暗黙的な引数のようなもので、その渡される値は関数を実行するときに決まります。'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*Arrow Function以外の関数（メソッドも含む）における`this`は、実行時に決まる値となります。 言い方を変えると`this`は関数に渡される暗黙的な引数のようなもので、その渡される値は関数を実行するときに決まります。'
- en: 次のコードは疑似的なものです。 関数の中に書かれた`this`は、関数の呼び出し元から暗黙的に渡される値を参照することになります。 このルールはArrow
    Function以外の関数やメソッドで共通した仕組みとなります。Arrow Functionで定義した関数やメソッドはこのルールとは別の仕組みとなります。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードは疑似的なものです。 関数の中に書かれた`this`は、関数の呼び出し元から暗黙的に渡される値を参照することになります。 このルールはArrow
    Function以外の関数やメソッドで共通した仕組みとなります。Arrow Functionで定義した関数やメソッドはこのルールとは別の仕組みとなります。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 関数における`this`の基本的な参照先（暗黙的に関数に渡す`this`の値）は**ベースオブジェクト**となります。 ベースオブジェクトとは「メソッドを呼ぶ際に、そのメソッドのドット演算子またはブラケット演算子のひとつ左にあるオブジェクト」のことを言います。
    ベースオブジェクトがない場合の`this`は`undefined`となります。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 関数における`this`の基本的な参照先（暗黙的に関数に渡す`this`の値）は**ベースオブジェクト**となります。 ベースオブジェクトとは「メソッドを呼ぶ際に、そのメソッドのドット演算子またはブラケット演算子のひとつ左にあるオブジェクト」のことを言います。
    ベースオブジェクトがない場合の`this`は`undefined`となります。
- en: たとえば、`fn()`のように関数を呼び出したとき、この`fn`関数呼び出しのベースオブジェクトはないため、`this`は`undefined`となります。
    一方、`obj.method()`のようにメソッドを呼び出したとき、この`obj.method`メソッド呼び出しのベースオブジェクトは`obj`オブジェクトとなり、`this`は`obj`となります。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: たとえば、`fn()`のように関数を呼び出したとき、この`fn`関数呼び出しのベースオブジェクトはないため、`this`は`undefined`となります。
    一方、`obj.method()`のようにメソッドを呼び出したとき、この`obj.method`メソッド呼び出しのベースオブジェクトは`obj`オブジェクトとなり、`this`は`obj`となります。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`this`は関数の定義ではなく呼び出し方で参照する値が異なります。これは、後述する「`this`が問題となるパターン」で詳しく紹介します。 Arrow
    Function以外の関数では、関数の定義だけを見て`this`の値が何かということは決定できない点に注意が必要です。'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`this`は関数の定義ではなく呼び出し方で参照する値が異なります。これは、後述する「`this`が問題となるパターン」で詳しく紹介します。 Arrow
    Function以外の関数では、関数の定義だけを見て`this`の値が何かということは決定できない点に注意が必要です。'
- en: '[](#function-declaration-expression-this)*関数宣言や関数式における`this`*'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#function-declaration-expression-this)*関数宣言や関数式における`this`*'
- en: '*まずは、関数宣言や関数式の場合を見ていきます。'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*まずは、関数宣言や関数式の場合を見ていきます。'
- en: 次の例では、関数宣言で関数`fn1`、関数式で関数`fn2`を定義し、それぞれの関数内で`this`を返します。 定義したそれぞれの関数を`fn1()`と`fn2()`のようにただの関数として呼び出しています。
    このとき、ベースオブジェクトはないため、`this`は`undefined`となります。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 次の例では、関数宣言で関数`fn1`、関数式で関数`fn2`を定義し、それぞれの関数内で`this`を返します。 定義したそれぞれの関数を`fn1()`と`fn2()`のようにただの関数として呼び出しています。
    このとき、ベースオブジェクトはないため、`this`は`undefined`となります。
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: これは、関数の中に関数を定義して呼び出す場合も同じです。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: これは、関数の中に関数を定義して呼び出す場合も同じです。
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: この書籍では注釈がないコードはstrict modeとして扱いますが、コード例に`"use strict";`と改めてstrict modeを明示しています（詳細は「[JavaScriptとは](../introduction/)」の[strict
    mode](../introduction/#strict-mode)を参照）。 なぜなら、strict modeではない状況で`this`が`undefined`の場合は、`this`がグローバルオブジェクトを参照するように変換される問題があるためです。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: この書籍では注釈がないコードはstrict modeとして扱いますが、コード例に`"use strict";`と改めてstrict modeを明示しています（詳細は「[JavaScriptとは](../introduction/)」の[strict
    mode](../introduction/#strict-mode)を参照）。 なぜなら、strict modeではない状況で`this`が`undefined`の場合は、`this`がグローバルオブジェクトを参照するように変換される問題があるためです。
- en: strict modeは、このような意図しにくい動作を防止するために導入されています。 しかしながら、strict modeのメソッド以外の関数における`this`は`undefined`となるため使い道がありません。
    そのため、メソッド以外で`this`を使う必要はありません。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: strict modeは、このような意図しにくい動作を防止するために導入されています。 しかしながら、strict modeのメソッド以外の関数における`this`は`undefined`となるため使い道がありません。
    そのため、メソッド以外で`this`を使う必要はありません。
- en: '[](#method-this)*メソッド呼び出しにおける`this`*'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#method-this)*メソッド呼び出しにおける`this`*'
- en: '*次に、メソッドの場合を見ていきます。 メソッドの場合は、そのメソッドが何かしらのオブジェクトに所属しています。 なぜなら、JavaScriptではオブジェクトのプロパティとして指定される関数のことをメソッドと呼ぶためです。'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*次に、メソッドの場合を見ていきます。 メソッドの場合は、そのメソッドが何かしらのオブジェクトに所属しています。 なぜなら、JavaScriptではオブジェクトのプロパティとして指定される関数のことをメソッドと呼ぶためです。'
- en: 次の例では`method1`と`method2`はそれぞれメソッドとして呼び出されています。 このとき、それぞれのベースオブジェクトは`obj`となり、`this`は`obj`となります。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 次の例では`method1`と`method2`はそれぞれメソッドとして呼び出されています。 このとき、それぞれのベースオブジェクトは`obj`となり、`this`は`obj`となります。
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: これを利用すれば、メソッドの中から同じオブジェクトに所属する別のプロパティを`this`で参照できます。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: これを利用すれば、メソッドの中から同じオブジェクトに所属する別のプロパティを`this`で参照できます。
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: このようにメソッドが所属するオブジェクトのプロパティを、`オブジェクト名.プロパティ名`の代わりに`this.プロパティ名`で参照できます。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: このようにメソッドが所属するオブジェクトのプロパティを、`オブジェクト名.プロパティ名`の代わりに`this.プロパティ名`で参照できます。
- en: オブジェクトは何重にもネストできますが、`this`はベースオブジェクトを参照するというルールは同じです。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトは何重にもネストできますが、`this`はベースオブジェクトを参照するというルールは同じです。
- en: 次のコードを見てみると、ネストしたオブジェクトにおいてメソッド内の`this`がベースオブジェクトである`obj3`を参照していることがわかります。 このときのベースオブジェクトはドットでつないだ一番左の`obj1`ではなく、メソッドから見てひとつ左の`obj3`となります。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードを見てみると、ネストしたオブジェクトにおいてメソッド内の`this`がベースオブジェクトである`obj3`を参照していることがわかります。 このときのベースオブジェクトはドットでつないだ一番左の`obj1`ではなく、メソッドから見てひとつ左の`obj3`となります。
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[](#this-problem)*`this`が問題となるパターン*'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#this-problem)*`this`が問題となるパターン*'
- en: '*`this`はその関数（メソッドも含む）呼び出しのベースオブジェクトを参照することがわかりました。 `this`は所属するオブジェクトを直接書く代わりとして利用できますが、一方`this`にはいろいろな問題があります。'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*`this`はその関数（メソッドも含む）呼び出しのベースオブジェクトを参照することがわかりました。 `this`は所属するオブジェクトを直接書く代わりとして利用できますが、一方`this`にはいろいろな問題があります。'
- en: この問題の原因は`this`がどの値を参照するかは関数の呼び出し時に決まるという性質に由来します。 この`this`の性質が問題となるパターンの代表的な2つの例とそれぞれの対策について見ていきます。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: この問題の原因は`this`がどの値を参照するかは関数の呼び出し時に決まるという性質に由来します。 この`this`の性質が問題となるパターンの代表的な2つの例とそれぞれの対策について見ていきます。
- en: '[](#assign-this-function)*問題: `this`を含むメソッドを変数に代入した場合*'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#assign-this-function)*問題: `this`を含むメソッドを変数に代入した場合*'
- en: '*JavaScriptではメソッドとして定義したものが、後からただの関数として呼び出されることがあります。 なぜなら、メソッドは関数を値に持つプロパティのことで、プロパティは変数に代入し直すことができるためです。'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScriptではメソッドとして定義したものが、後からただの関数として呼び出されることがあります。 なぜなら、メソッドは関数を値に持つプロパティのことで、プロパティは変数に代入し直すことができるためです。'
- en: そのため、メソッドとして定義した関数も、別の変数に代入してただの関数として呼び出されることがあります。 この場合には、メソッドとして定義した関数であっても、実行時にはただの関数であるためベースオブジェクトが変わっています。
    これは`this`が定義した時点ではなく実行したときに決まるという性質そのものです。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: そのため、メソッドとして定義した関数も、別の変数に代入してただの関数として呼び出されることがあります。 この場合には、メソッドとして定義した関数であっても、実行時にはただの関数であるためベースオブジェクトが変わっています。
    これは`this`が定義した時点ではなく実行したときに決まるという性質そのものです。
- en: 具体的に、`this`が実行時に変わる例を見ていきます。 次の例では、`person.sayName`メソッドを変数`say`に代入してから実行しています。
    このときの`say`関数（`sayName`メソッドを参照）のベースオブジェクトはありません。 そのため、`this`は`undefined`となり、`undefined.fullName`は参照できずに例外を投げます。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 具体的に、`this`が実行時に変わる例を見ていきます。 次の例では、`person.sayName`メソッドを変数`say`に代入してから実行しています。
    このときの`say`関数（`sayName`メソッドを参照）のベースオブジェクトはありません。 そのため、`this`は`undefined`となり、`undefined.fullName`は参照できずに例外を投げます。
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 結果的には、次のようなコードが実行されているのと同じです。 次のコードでは、`undefined.fullName`を参照しようとして例外が発生しています。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: このように、Arrow Function以外の関数において、`this`は定義したときではなく実行したときに決定されます。 そのため、関数に`this`を含んでいる場合、その関数は意図した呼ばれ方がされないと間違った結果が発生するという問題があります。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: この問題の対処法としては大きく分けて2つあります。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 1つはメソッドとして定義されている関数はメソッドとして呼ぶということです。 メソッドをわざわざただの関数として呼ばなければそもそもこの問題は発生しません。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: もう1つは、`this`の値を指定して関数を呼べるメソッドで関数を実行する方法です。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[](#call-apply-bind)*対処法: call、apply、bindメソッド*'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*関数やメソッドの`this`を明示的に指定して関数を実行する方法もあります。 `Function`（関数オブジェクト）には`call`、`apply`、`bind`といった明示的に`this`を指定して関数を実行するメソッドが用意されています。'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '`call`メソッドは第一引数に`this`としたい値を指定し、残りの引数には呼び出す関数の引数を指定します。 暗黙的に渡される`this`の値を明示的に渡せるメソッドと言えます。'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 次の例では`this`に`person`オブジェクトを指定した状態で`say`関数を呼び出しています。 `call`メソッドの第二引数で指定した値が、`say`関数の仮引数`message`に入ります。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`apply`メソッドは第一引数に`this`とする値を指定し、第二引数に関数の引数を配列として渡します。'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 次の例では`this`に`person`オブジェクトを指定した状態で`say`関数を呼び出しています。 `apply`メソッドの第二引数で指定した配列は、自動的に展開されて`say`関数の仮引数`message`に入ります。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`call`メソッドと`apply`メソッドの違いは、関数の引数への値の渡し方が異なるだけです。 また、どちらのメソッドも`this`の値が不要な場合は`null`を渡すのが一般的です。'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 最後に`bind`メソッドについてです。 名前のとおり`this`の値を束縛（bind）した新しい関数を作成します。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 次の例では`this`を`person`オブジェクトに束縛した`say`関数をラップした関数を作っています。 `bind`メソッドの第二引数以降に値を渡すことで、束縛した関数の引数も束縛できます。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: この`bind`メソッドをただの関数で表現すると次のように書けます。 `bind`は`this`や引数を束縛した関数を作るメソッドだということがわかります。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: このように`call`、`apply`、`bind`メソッドを使うことで`this`を明示的に指定した状態で関数を呼び出せます。 しかし、毎回関数を呼び出すたびにこれらのメソッドを使うのは、関数を呼び出すための関数が必要になってしまい手間がかかります。
    そのため、基本的には「メソッドとして定義されている関数はメソッドとして呼ぶこと」でこの問題を回避するほうがよいでしょう。 その中で、どうしても`this`を固定したい場合には`call`、`apply`、`bind`メソッドを利用します。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[](#callback-and-this)*問題: コールバック関数と`this`*'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*コールバック関数の中で`this`を参照すると問題となる場合があります。 この問題は、メソッドの中でArrayの`map`メソッドなどのコールバック関数を扱う場合に発生しやすいです。'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 具体的に、コールバック関数における`this`が問題となっている例を見てみましょう。 次のコードでは`prefixArray`メソッドの中で`map`メソッドを使っています。
    このとき、`map`メソッドのコールバック関数の中で、`Prefixer`オブジェクトを参照するつもりで`this`を参照しています。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: しかし、このコールバック関数における`this`は`undefined`となり、`undefined.prefix`は参照できないためTypeErrorの例外が発生します。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: なぜコールバック関数の中の`this`が`undefined`となるのかを見ていきます。 Arrayの`map`メソッドにはコールバック関数として、その場で定義した無名関数を渡していることに注目してください。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: このとき、Arrayの`map`メソッドに渡しているコールバック関数は`callback()`のようにただの関数として呼び出されます。 つまり、コールバック関数として呼び出すとき、この関数にはベースオブジェクトはありません。
    そのため`callback`関数の`this`は`undefined`となります。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 先ほどの例では無名関数をコールバック関数として直接メソッドに渡していますが、一度`callback`変数に入れてから渡しても結果は同じです。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[](#substitute-this)*対処法: `this`を一時変数へ代入する*'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*コールバック関数内での`this`の参照先が変わる問題への対処法として、`this`を別の変数に代入し、その`this`の参照先を保持するという方法があります。'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '`this`は関数の呼び出し元で変化し、その参照先は呼び出し元におけるベースオブジェクトです。 `prefixArray`メソッドの呼び出しにおいては、`this`は`Prefixer`オブジェクトです。
    しかし、コールバック関数は改めて関数として呼び出されるため`this`が`undefined`となってしまうのが問題でした。'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: そのため、最初の`prefixArray`メソッド呼び出しにおける`this`の参照先を一時変数として保存することでこの問題を回避できます。 次のコードでは、`prefixArray`メソッドの`this`を`that`変数に保持しています。
    コールバック関数からは`this`の代わりに`that`変数を参照することで、コールバック関数からも`prefixArray`メソッド呼び出しと同じ`this`を参照できます。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: もちろんFunctionの`call`メソッドなどで明示的に`this`を渡して関数を呼び出すこともできます。 また、Arrayの`map`メソッドなどは`this`となる値を引数として渡せる仕組みを持っています。
    そのため、次のように第二引数に`this`となる値を渡すことでも解決できます。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: しかし、これらの解決方法はコールバック関数において`this`が変わることを意識して書く必要があります。 そもそもメソッド呼び出しとその中でのコールバック関数における`this`が変わってしまうのが問題でした。
    ES2015では`this`を変えずにコールバック関数を定義する方法として、Arrow Functionが導入されました。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[](#arrow-function-callback)*対処法: Arrow Functionでコールバック関数を扱う*'
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[](#arrow-function-callback)*対処法: Arrow Functionでコールバック関数を扱う*'
- en: '*通常の関数やメソッドは呼び出し時に暗黙的に`this`の値を受け取り、関数内の`this`はその値を参照します。 一方、Arrow Functionはこの暗黙的な`this`の値を受け取りません。
    そのためArrow Function内の`this`は、スコープチェーンの仕組みと同様に外側の関数（この場合は`prefixArray`メソッド）を探索します。
    これにより、Arrow Functionで定義したコールバック関数は呼び出し方には関係なく、常に外側の関数の`this`をそのまま利用します。'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*通常の関数やメソッドは呼び出し時に暗黙的に`this`の値を受け取り、関数内の`this`はその値を参照します。 一方、Arrow Functionはこの暗黙的な`this`の値を受け取りません。
    そのためArrow Function内の`this`は、スコープチェーンの仕組みと同様に外側の関数（この場合は`prefixArray`メソッド）を探索します。
    これにより、Arrow Functionで定義したコールバック関数は呼び出し方には関係なく、常に外側の関数の`this`をそのまま利用します。'
- en: Arrow Functionを使うことで、先ほどのコードは次のように書けます。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Arrow Functionを使うことで、先ほどのコードは次のように書けます。
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: このように、Arrow Functionでのコールバック関数における`this`は簡潔です。 コールバック関数内での`this`の対処法として`this`を代入する方法を紹介しましたが、
    ES2015からはArrow Functionを使うのがもっとも簡潔です。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: このように、Arrow Functionでのコールバック関数における`this`は簡潔です。 コールバック関数内での`this`の対処法として`this`を代入する方法を紹介しましたが、
    ES2015からはArrow Functionを使うのがもっとも簡潔です。
- en: このArrow Functionと`this`の関係についてより詳しく見ていきます。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: このArrow Functionと`this`の関係についてより詳しく見ていきます。
- en: '[](#arrow-function-this)*Arrow Functionと`this`*'
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#arrow-function-this)*Arrow Functionと`this`*'
- en: '*Arrow Functionで定義された関数やメソッドにおける`this`がどの値を参照するかは関数の定義時（静的）に決まります。 一方、Arrow
    Functionではない関数においては、`this`は呼び出し元に依存するため関数の実行時（動的）に決まります。'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*Arrow Functionで定義された関数やメソッドにおける`this`がどの値を参照するかは関数の定義時（静的）に決まります。 一方、Arrow
    Functionではない関数においては、`this`は呼び出し元に依存するため関数の実行時（動的）に決まります。'
- en: Arrow Functionとそれ以外の関数で大きく違うことは、Arrow Functionは`this`を暗黙的な引数として受けつけないということです。
    そのため、Arrow Function内には`this`が定義されていません。このときの`this`は外側のスコープ（関数）の`this`を参照します。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Arrow Functionとそれ以外の関数で大きく違うことは、Arrow Functionは`this`を暗黙的な引数として受けつけないということです。
    そのため、Arrow Function内には`this`が定義されていません。このときの`this`は外側のスコープ（関数）の`this`を参照します。
- en: これは、変数におけるスコープチェーンの仕組みと同様で、そのスコープに`this`が定義されていない場合には外側のスコープを探索します。 そのため、Arrow
    Function内の`this`の参照で、常に外側のスコープ（関数）へと`this`の定義を探索しに行きます（詳細は[スコープチェーン](../function-scope/##scope-chain%7D)を参照）。
    また、`this`はECMAScriptのキーワードであるため、ユーザーは`this`という変数を定義できません。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: これは、変数におけるスコープチェーンの仕組みと同様で、そのスコープに`this`が定義されていない場合には外側のスコープを探索します。 そのため、Arrow
    Function内の`this`の参照で、常に外側のスコープ（関数）へと`this`の定義を探索しに行きます（詳細は[スコープチェーン](../function-scope/##scope-chain%7D)を参照）。
    また、`this`はECMAScriptのキーワードであるため、ユーザーは`this`という変数を定義できません。
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: これにより、通常の変数のように`this`がどの値を参照するかは静的（定義時）に決定されます（詳細は[静的スコープ](../function-scope/#static-scope)を参照）。
    つまり、Arrow Functionにおける`this`は「Arrow Function自身の外側のスコープに定義されたもっとも近い関数の`this`の値」となります。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: これにより、通常の変数のように`this`がどの値を参照するかは静的（定義時）に決定されます（詳細は[静的スコープ](../function-scope/#static-scope)を参照）。
    つまり、Arrow Functionにおける`this`は「Arrow Function自身の外側のスコープに定義されたもっと近い関数の`this`の値」となります。
- en: 具体的なArrow Functionにおける`this`の動きを見ていきましょう。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 具体的なArrow Functionにおける`this`の動きを見ていきましょう。
- en: まずは、関数式のArrow Functionを見ていきます。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: まずは、関数式のArrow Functionを見ていきます。
- en: 次の例では、関数式で定義したArrow Functionの中の`this`をコンソールに出力しています。 このとき、`fn`の外側には関数がないため、「自身より外側のスコープに定義されたもっとも近い関数」の条件にあてはまるものはありません。
    このときの`this`はトップレベルに書かれた`this`と同じ値になります。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 次の例では、関数式で定義したArrow Functionの中の`this`をコンソールに出力しています。 このとき、`fn`の外側には関数がないため、「自身より外側のスコープに定義されたもっとも近い関数」の条件にあてはまるものはありません。
    このときの`this`はトップレベルに書かれた`this`と同じ値になります。
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: トップレベルに書かれた`this`の値は[実行コンテキスト](#execution-context-this)によって異なることを紹介しました。 `this`の値は、実行コンテキストが"Script"ならばグローバルオブジェクトとなり、"Module"ならば`undefined`となります。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: トップレベルに書かれた`this`の値は[実行コンテキスト](#execution-context-this)によって異なることを紹介しました。 `this`の値は、実行コンテキストが"Script"ならばグローバルオブジェクトとなり、"Module"ならば`undefined`となります。
- en: 次の例のように、Arrow Functionを包むように通常の関数が定義されている場合はどうでしょうか。 Arrow Functionにおける`this`は「自身の外側のスコープにあるもっとも近い関数の`this`の値」となるのは同じです。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 次の例のように、Arrow Functionを包むように通常の関数が定義されている場合はどうでしょうか。 Arrow Functionにおける`this`は「自身の外側のスコープにあるもっと近い関数の`this`の値」となるのは同じです。
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: つまり、このArrow Functionにおける`this`は`outer`関数で`this`を参照した場合と同じ値になります。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: つまり、このArrow Functionにおける`this`は`outer`関数で`this`を参照した場合と同じ値になります。
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[](#method-callback-arrow-function)*メソッドとコールバック関数とArrow Function*'
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#method-callback-arrow-function)*メソッドとコールバック関数とArrow Function*'
- en: '*メソッド内におけるコールバック関数はArrow Functionをより活用できるパターンです。 `function`キーワードでコールバック関数を定義すると、`this`の値はコールバック関数の呼ばれ方を意識する必要があります。
    なぜなら、`function`キーワードで定義した関数における`this`は呼び出し方によって変わるためです。'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*メソッド内におけるコールバック関数はArrow Functionをより活用できるパターンです。 `function`キーワードでコールバック関数を定義すると、`this`の値はコールバック関数の呼ばれ方を意識する必要があります。
    なぜなら、`function`キーワードで定義した関数における`this`は呼び出し方によって変わるためです。'
- en: コールバック関数側から見ると、どのように呼ばれるかによって変わってしまう`this`を使うことはできません。 そのため、コールバック関数の外側のスコープで`this`を一時変数に代入し、それを使うという回避方法を取っていました。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: コールバック関数側から見ると、どのように呼ばれるかによって変わってしまう`this`を使うことはできません。 そのため、コールバック関数の外側のスコープで`this`を一時変数に代入し、それを使うという回避方法を取っていました。
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 一方、Arrow Functionでコールバック関数を定義した場合は、1つ外側の関数の`this`を参照します。 このときのArrow Functionで定義したコールバック関数における`this`は呼び出し方によって変化しません。
    そのため、`this`を一時変数に代入するなどの回避方法は必要ありません。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一方、Arrow Functionでコールバック関数を定義した場合は、1つ外側の関数の`this`を参照します。 このときのArrow Functionで定義したコールバック関数における`this`は呼び出し方によって変化しません。
    そのため、`this`を一時変数に代入するなどの回避方法は必要ありません。
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: このArrow Functionにおける`this`は呼び出し方の影響を受けません。 つまり、コールバック関数がどのように呼ばれるかという実装についてを考えることなく`this`を扱えます。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: このArrow Functionにおける`this`は呼び出し方の影響を受けません。 つまり、コールバック関数がどのように呼ばれるかという実装についてを考えることなく`this`を扱えます。
- en: '[PRE37]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[](#not-bind-arrow-function)*Arrow Functionは`this`をbindできない*'
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#not-bind-arrow-function)*Arrow Functionは`this`をbindできない*'
- en: '*Arrow Functionで定義した関数では`call`、`apply`、`bind`を使った`this`の指定は単に無視されます。 これは、Arrow
    Functionは`this`を持てないためです。'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*Arrow Functionで定義した関数では`call`、`apply`、`bind`を使った`this`の指定は単に無視されます。 これは、Arrow
    Functionは`this`を持てないためです。'
- en: 次のようにArrow Functionで定義した関数に対して`call`で`this`を指定しても、`this`の参照先が代わっていないことがわかります。
    同様に`apply`や`bind`メソッドを使った場合も`this`の参照先は変わりません。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 次のようにArrow Functionで定義した関数に対して`call`で`this`を指定しても、`this`の参照先が代わっていないことがわかります。
    同様に`apply`や`bind`メソッドを使った場合��`this`の参照先は変わりません。
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 最初に述べたように`function`キーワードで定義した関数では呼び出し時に、ベースオブジェクトが`this`の値として暗黙的な引数のように渡されます。
    一方、Arrow Functionの関数は呼び出し時に`this`を受け取らず、`this`の参照先は定義時に静的に決定されます。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最初に述べたように`function`キーワードで定義した関数では呼び出し時に、ベースオブジェクトが`this`の値として暗黙的な引数のように渡されます。
    一方、Arrow Functionの関数は呼び出し時に`this`を受け取らず、`this`の参照先は定義時に静的に決定されます。
- en: また、`this`が変わらないのはあくまでArrow Functionで定義した関数だけで、Arrow Functionの`this`が参照する「自身の外側のスコープにあるもっとも近い関数の`this`の値」は`call`メソッドで変更できます。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`this`只在箭头函数中定义的函数中保持不变，箭头函数中`this`引用的是“最接近其外部作用域的函数的`this`值”，可以通过`call`方法进行更改。
- en: '[PRE39]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[](#conclusion)*まとめ*'
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)*总结*'
- en: '*`this`は状況によって異なる値を参照する性質を持ったキーワードであることを紹介しました。 その`this`の評価結果をまとめると次の表のようになります。'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*介绍了`this`是一个根据情况引用不同值的关键字。 总结`this`的评估结果如下表所示。'
- en: '| 実行コンテキスト | strict mode | コード | `this`の評価結果 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 执行上下文 | 严格模式 | 代码 | `this`的评估结果 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Script | ＊ | `this` | globalThis |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| Script | ＊ | `this` | globalThis |'
- en: '| Script | ＊ | `const fn = () => this` | globalThis |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| Script | ＊ | `const fn = () => this` | globalThis |'
- en: '| Script | NO | `const fn = function(){ return this; }` | globalThis |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| Script | NO | `const fn = function(){ return this; }` | globalThis |'
- en: '| Script | YES | `const fn = function(){ return this; }` | undefined |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| Script | YES | `const fn = function(){ return this; }` | undefined |'
- en: '| Script | ＊ | `const obj = { method: () => { return this; } }` | globalThis
    |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| Script | ＊ | `const obj = { method: () => { return this; } }` | globalThis
    |'
- en: '| Module | YES | `this` | undefined |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| Module | YES | `this` | undefined |'
- en: '| Module | YES | `const fn = () => this` | undefined |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| Module | YES | `const fn = () => this` | undefined |'
- en: '| Module | YES | `const fn = function(){ return this; }` | undefined |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| Module | YES | `const fn = function(){ return this; }` | undefined |'
- en: '| Module | YES | `const obj = { method: () => { return this; } }` | undefined
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| Module | YES | `const obj = { method: () => { return this; } }` | undefined
    |'
- en: '| ＊ | ＊ | `const obj = { method(){ return this; } }` | `obj` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| ＊ | ＊ | `const obj = { method(){ return this; } }` | `obj` |'
- en: '| ＊ | ＊ | `const obj = { method: function(){ return this; } }` | `obj` |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| ＊ | ＊ | `const obj = { method: function(){ return this; } }` | `obj` |'
- en: ＊はどの場合でも`this`の評価結果に影響しないということを示しています。
  id: totrans-177
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ＊表示在任何情况下都不会影响`this`的评估结果。
- en: 実際にブラウザで実行した結果は[What is `this` value in JavaScript](https://azu.github.io/what-is-this/)というサイトで確認できます。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 实际在浏览器中运行的结果可以在[JavaScript中的`this`值是什么](https://azu.github.io/what-is-this/)网站上查看。
- en: '`this`はオブジェクト指向プログラミングの文脈でJavaScriptに導入されました。 メソッド以外においても`this`は評価できますが、実行コンテキストやstrict
    modeなどによって結果が異なり、混乱の元となります。 そのため、メソッドではない通常の関数においては`this`を使うべきではありません。^([1](#fn_1))'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`this`是在JavaScript中引入的面向对象编程的概念。 除了方法之外，`this`也可以在其他情况下进行评估，但由于执行上下文和严格模式等因素，结果会有所不同，导致混淆。
    因此，在非方法函数中不应使用`this`。^([1](#fn_1))'
- en: また、メソッドにおいても`this`は呼び出し方によって異なる値となり、それにより発生する問題と対処法について紹介しました。 コールバック関数における`this`はArrow
    Functionを使うことでわかりやすく解決できます。 この背景にはArrow Functionで定義した関数は`this`を持たないという性質があります。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在方法中，`this`根据调用方式而有不同的值，介绍了由此产生的问题和解决方法。 通过使用箭头函数可以更清晰地解决回调函数中的`this`问题。
    这背后的原因是通过箭头函数定义的函数不具有`this`属性。
- en: ¹. ES2015の仕様編集者であるAllen Wirfs-Brock氏もただの関数においては`this`を使うべきではないと述べている。[https://twitter.com/awbjs/status/938272440085446657](https://twitter.com/awbjs/status/938272440085446657);
    [↩](#reffn_1 "Jump back to footnote [1] in the text.")*******************
  id: totrans-181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. ES2015的规范编辑者Allen Wirfs-Brock先生也指出，在普通函数中不应该使用`this`。[https://twitter.com/awbjs/status/938272440085446657](https://twitter.com/awbjs/status/938272440085446657);
    [↩](#reffn_1 "跳回文中的脚注 [1]")*******************
