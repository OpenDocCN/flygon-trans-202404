- en: Implementing The AE LanguageTuesday, January 17th
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Back to our `eval` — this will be its (obvious) type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'which leads to some obvious test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'which from now on we will write using the new `test` form that the `#lang pl`
    language provides:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we’re testing *only* at the interface level — only running whole
    functions. For example, you could think about a test like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: but the details of parsing and of the constructor names are things that nobody
    outside of our evaluator cares about — so we’re not testing them. In fact, we
    shouldn’t even mention `parse` in these tests, since it is not part of the public
    interface of our users; they only care about using it as a compiler-like black
    box. (This is sometimes called “integration tests”.) We’ll address this shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like everything else, the structure of the recursive `eval` code follows the
    recursive structure of its input. In HtDP terms, our template is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this case, filling in the gaps is very simple
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We now further combine `eval` and `parse` into a single `run` function that
    evaluates an AE string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This function becomes the single public entry point into our code, and the
    only thing that should be used in tests that verify our interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting *full* code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: (Note that the tests are done with a `test` form, which we mentioned above.)
  prefs: []
  type: TYPE_NORMAL
- en: For anyone who thinks that Racket is a bad choice, this is a good point to think
    how much code would be needed in some other language to do the same as above.
  prefs: []
  type: TYPE_NORMAL
