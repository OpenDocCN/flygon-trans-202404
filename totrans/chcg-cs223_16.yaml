- en: A Few Words on Amortized Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摊销分析的几句话
- en: See Chapter 5.1 of the Okasaki textbook for a summary of two approaches to amortized
    analysis, the banker's method and the physicist's method. Here, we will say just
    a few extra words about the accounting for the [`FastQueue`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/FastQueue.elm)
    implementation from before.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅Okasaki教科书第5.1节，了解两种摊销分析方法的概要，即银行家方法和物理学家方法。在这里，我们将就以前的[`FastQueue`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/FastQueue.elm)实现的会计做一些额外的说明。
- en: Recall that when evaluating the running times of functions, we often use symbolic
    constants instead of concrete units (such as seconds) in order to abstract away
    from low-level, incidental, and variable characteristics of an execution environment.
    And because Big-Oh analysis, furthermore, abstracts away the particular constants
    of a function, symbolic constants (such as *k*) are often replaced by particular
    small constants (such as *1*).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，当评估函数的运行时间时，我们通常使用符号常量而不是具体单位（例如秒），以便从执行环境的低级，偶然和可变特性中抽象出来。而且因为大O分析进一步抽象了函数的特定常量，因此符号常量（例如*k*）经常被特定的小常量（例如*1*）所取代。
- en: Once comfortable with such reasoning, we can often jump directly to saying things
    like "the amortized cost of `enqueue` is *2*" and "the amortized cost of `dequeue`
    is *1*". In the meantime, let us spend the extra effort to explicitly account
    for the actual (symbolic) costs of operations before reducing them to their asymptotic
    characteristics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦对这种推理感到舒适，我们通常可以直接说像是"**enqueue**的摊销成本为*2*"和"**dequeue**的摊销成本为*1*"。与此同时，让我们额外花费精力明确计算操作的实际（符号）成本，然后再将其降低到它们的渐近特性。
- en: 'To avoid confusion with the notation *c* for credits from the textbook, here
    we will use the metavariable *k* to range over constants. Let the following constants
    stand for actual costs of the various operations on a `Queue` that contains *m*
    elements in the `back` list:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为避免与教科书中代表学分的符号*c*混淆，在这里我们将使用元变量*k*来表示常量的范围。让以下常量代表在包含*m*个元素的`back`列表中`Queue`上各种操作的实际成本：
- en: '*k[1]* is the cost of `enqueue`;'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*k[1]*是**enqueue**的成本；'
- en: '*k[2]* is the cost of `peek`;'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*k[2]*是**peek**的成本；'
- en: '*k[3]* is the cost of `dequeue` when `List.reverse` is not called (the cheap
    case); and'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当**List.reverse**未被调用时，*k[3]*是**dequeue**的成本（廉价情况）；而
- en: '*k[4]m + k[5] = m + k[6]* is the cost of `dequeue` when `List.reverse` is called
    (the expensive case). Notice that this actual cost is linear in the size of the
    `back` list.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*k[4]m + k[5] = m + k[6]*是**dequeue**的成本，当**List.reverse**被调用时（昂贵的情况）。请注意，该实际成本与`back`列表的大小成线性关系。'
- en: We now revisit the amortized analyses from the textbook using these symbolic
    constants rather than concrete costs, such as *1* and *2*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在使用这些符号常量重新审视教科书中的摊销分析，而不是具体的成本，例如*1*和*2*。
- en: 'Using the banker''s method (*a[i] = t[i] + c[i] - c[i]*):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用银行家方法（*a[i] = t[i] + c[i] - c[i]*）：
- en: '`enqueue`: *k[1] + 1 - 0 = k[1] + 1*'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**enqueue**：*k[1] + 1 - 0 = k[1] + 1*'
- en: '`peek`: *k[2] + 0 - 0 = k[2]*'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**peek**：*k[2] + 0 - 0 = k[2]*'
- en: '`dequeue` (cheap): *k[3] + 0 - 0 = k[3]*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dequeue**（廉价的）：*k[3] + 0 - 0 = k[3]*'
- en: '`dequeue` (expensive): *(m + k[6]) + 0 - m = k[6]*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dequeue**（昂贵的）：*(m + k[6]) + 0 - m = k[6]*'
- en: Thus, all of the operations run in *O(1)* amortized time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，所有操作都以*O(1)*的摊销时间运行。
- en: 'Using the physicist''s method (*a[i] = t[i] + Φ(d[i]) - Φ(d[i]-1*)):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用物理学家方法（*a[i] = t[i] + Φ(d[i]) - Φ(d[i]-1*)：
- en: '`enqueue`: *k[1] + (m+1) - m = k[1] + 1*'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**enqueue**：*k[1] + (m+1) - m = k[1] + 1*'
- en: '`peek`: *k[2] + m - m = k[2]*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**peek**：*k[2] + m - m = k[2]*'
- en: '`dequeue` (cheap): *k[3] + m - m = k[3]*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dequeue**（廉价的）：*k[3] + m - m = k[3]*'
- en: '`dequeue` (expensive): *(m + k[6]) + 0 - m = k[6]*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dequeue**（昂贵的）：*(m + k[6]) + 0 - m = k[6]*'
- en: Thus, all of the operations run in *O(1)* amortized time.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，所有操作都以*O(1)*的摊销时间运行。
- en: Reading
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: Required
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 需要
- en: Okasaki, Chapter 5.1 and 5.6
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Okasaki，第5.1节和第5.6节
