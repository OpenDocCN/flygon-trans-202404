["```\n2, 1\n3, 10, 5, 16, 8, 4, 2, 1\n4, 2, 1\n2n, 2n-1 , ... , 4, 2, 1\n5, 16, 8, 4, 2, 1\n7, 22, 11, 34, 17, 52, 26, 13, 40, ...? (where does this stop?)\n\n```", "```\n// Java\nint n = 3;\nwhile (n != 1) {\n    System.out.println(n);\n    if (n % 2 == 0) {\n        n = n / 2;\n    } else {\n        n = 3 * n + 1;\n    }\n}\nSystem.out.println(n);\n```", "```\n# Python\nn = 3\nwhile n != 1:\n    print(n)\n    if n % 2 == 0:\n        n = n / 2\n    else:\n        n = 3 * n + 1\n\nprint(n)\n```", "```\n \"5\" * \"6\"\n```", "```\nint n = 5;\nif (n) {\n  n = n + 1;\n}\n```", "```\nint big = 200000; // 200,000\nbig = big * big;  // big should be 4 billion now\n```", "```\ndouble probability = 1/5;\n```", "```\nint sum = 0;\nint n = 0;\nint average = sum/n;\n```", "```\ndouble sum = 7;\ndouble n = 0;\ndouble average = sum/n;\n```", "```\nint[] a = new int[100];\n```", "```\nint[] a = new int[100];  // <==== DANGER WILL ROBINSON\nint i = 0;\nint n = 3;\nwhile (n != 1) {\n    a[i] = n;\n    i++;  // very common shorthand for i=i+1\n    if (n % 2 == 0) {\n        n = n / 2;\n    } else {\n        n = 3 * n + 1;\n    }\n}\na[i] = n;\ni++;\n```", "```\nList<Integer> list = new ArrayList<Integer>();\n```", "```\nList<Integer> list = new ArrayList<Integer>();\nint n = 3;\nwhile (n != 1) {\n    list.add(n);\n    if (n % 2 == 0) {\n        n = n / 2;\n    } else {\n        n = 3 * n + 1;\n    }\n}\nlist.add(n);\n```", "```\n// find the maximum point of a hailstone sequence stored in list\nint max = 0;\nfor (int x : list) {\n    max = Math.max(x, max);\n}\n```", "```\npublic class Hailstone {\n    /**\n     * Compute a hailstone sequence.\n     * @param n  Starting number for sequence.  Assumes n > 0.\n     * @return hailstone sequence starting with n and ending with 1.\n     */\n    public static List<Integer> hailstoneSequence(int n) {\n        List<Integer> list = new ArrayList<Integer>();\n        while (n != 1) {\n            list.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        list.add(n);\n        return list;\n    }\n}\n```", "```\nHailstone.hailstoneSequence(83)\n```", "```\nfinal int n = 5;\n```", "```\npublic static List<Integer> hailstoneSequence(final int n) { \n    final List<Integer> list = new ArrayList<Integer>();\n```"]