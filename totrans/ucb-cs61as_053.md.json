["```\n-> (cons 3 4)\n(3 . 4) ;; notice how there is a period between 3 and 4\n-> (car (cons 3 4))\n3\n-> (cdr (cons 3 4))\n4 \n```", "```\n-> (cons 'hello 'world)\n(hello . world)\n-> (define greeting (cons 'hello 'world))\ngreeting ;; store the pair into a variable called greeting\n-> (car greeting)\nhello\n-> (cdr greeting)\nworld \n```", "```\n-> (cons (cons 1 2) 4)\n((1 . 2) . 4) \n```", "```\n(define z (cons (cons 1 2) 4))\n```", "```\n-> (cons 1 '())\n(1) \n```", "```\n-> (cons 1 (cons 2 '())) \n```", "```\n(1 ~~. (~~2 ~~. ())~~)\n(1 2)\n```", "```\n(cons 4 5)\n(cons (cons 2 (cons 4 5)) (cons 6 7))\n(cons 3 (cons (cons 1 4) (cons 5 '())))\n(cons 1 (cons 2 (cons 3 '()))) \n```", "```\n(car (cons 4 5))\n(car (cdr (car (cons (cons (cons 4 5) (cons 6 7)) (cons 1 (cons 2 3))))))\n(cdr (cdr (cdr (cons 1 (cons 2 (cons 3 '())))))) \n```", "```\n-> (cons 5 (cons 6 (cons 7 (cons 8 '()))))\n(5 6 7 8)\n-> (list 5 6 7 8) ;; this is identical to the expression above!\n(5 6 7 8)\n\n-> (list 'hello 'world 5 #t)\n(hello world 5 #t) \n```", "```\n-> (define list1 (list 1 2 3 4))\nlist1 ;; the last pair of list1 is (4 . ())\n-> (define list2 (list 5 6 7 8))\nlist2 ;; the last pair of list2 is (8 . ())\n-> (define list3 (list 9 10 11 12))\nlist3\n-> (append list1 list2 list3) ;; we take the cdr of list1's last pair, which is the empty list '(), and point it to list2\\. then, we take the cdr of list2's last pair, which is also '(), and point it to list3.\n(1 2 3 4 5 6 7 8 9 10 11 12) \n```"]