["```\nsong-list = [list: lver, so, wnkkhs]\n```", "```\ncheck:\n  song-list.length() is 3\n  song-list.first is lver\nend\n```", "```\noldest-song([list: lver, so, wnkkhs]) is lvar\noldest-song([list:       so, wnkkhs]) is wnkkhs\noldest-song([list:           wnkkhs]) is wnkkhs\noldest-song([list:                 ]) is ???\n```", "```\nfun oldest-song(sl :: List<ITunesSong>) -> ITunesSong:\n  cases (List) sl:\n    | empty => raise(\"not defined for empty song lists\")\n    | link(f, r) =>\n      cases (List) r:\n        | empty => f\n        | else =>\n          osr = oldest-song(r)\n          if osr.year < f.year:\n            osr\n          else:\n            f\n          end\n      end\n  end\nend\n```", "```\nfun oldest-song-age(sl :: List<ITunesSong>) -> Number:\n  os = oldest-song(sl)\n  song-age(os)\nwhere:\n  oldest-song-age(song-list) is 71\nend\n```", "```\nsong-set = [set: lver, so, wnkkhs]\n```", "```\ncheck:\n  song-set2 = [set: so, wnkkhs, lver]\n  song-set is song-set2\nend\n```", "```\ncheck:\n  song-set3 = [set: lver, so, wnkkhs, so, so, lver, so]\n  song-set is song-set3\n  set-size(song-set3) is 3\nend\n```", "```\nfun an-elt(s :: Set):\n  cases (Pick) set-pick(s):\n    | pick-none => error(\"empty set\")\n    | pick-some(e, r) => e\n  end\nend\n```", "```\nfun my-set-size(shadow s :: Set) -> Number:\n  cases (Pick) s.pick():\n    | pick-none => 0\n    | pick-some(e, r) =>\n      1 + my-set-size(r)\n  end\nend\n```"]