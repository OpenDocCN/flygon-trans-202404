["```\ntry {\n    console.log(\"try\u7bc0:\u3053\u306e\u884c\u306f\u5b9f\u884c\u3055\u308c\u307e\u3059\");\n    // \u672a\u5b9a\u7fa9\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066ReferenceError\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\n    undefinedFunction();\n    // \u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u305f\u3081\u3001\u3053\u306e\u884c\u306f\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\n} catch (error) {\n    // \u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u3042\u3068\u306f\u3053\u306e\u30d6\u30ed\u30c3\u30af\u304c\u5b9f\u884c\u3055\u308c\u308b\n    console.log(\"catch\u7bc0:\u3053\u306e\u884c\u306f\u5b9f\u884c\u3055\u308c\u307e\u3059\");\n    console.log(error instanceof ReferenceError); // => true\n    console.log(error.message); // => \"undefinedFunction is not defined\"\n} finally {\n    // \u3053\u306e\u30d6\u30ed\u30c3\u30af\u306f\u4f8b\u5916\u306e\u767a\u751f\u306b\u95a2\u4fc2\u306a\u304f\u5fc5\u305a\u5b9f\u884c\u3055\u308c\u308b\n    console.log(\"finally\u7bc0:\u3053\u306e\u884c\u306f\u5b9f\u884c\u3055\u308c\u307e\u3059\");\n} \n```", "```\n// catch\u7bc0\u306e\u307f\ntry {\n    undefinedFunction();\n} catch (error) {\n    console.error(error);\n}\n// finally\u7bc0\u306e\u307f\ntry {\n    undefinedFunction();\n} finally {\n    console.log(\"\u3053\u306e\u884c\u306f\u5b9f\u884c\u3055\u308c\u307e\u3059\");\n}\n// finally\u7bc0\u306e\u307f\u3067\u306f\u4f8b\u5916\u304c\u30ad\u30e3\u30c3\u30c1\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u3053\u306e\u884c\u306f\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093 \n```", "```\ntry {\n    // \u4f8b\u5916\u3092\u6295\u3052\u308b\n    throw new Error(\"\u4f8b\u5916\u304c\u6295\u3052\u3089\u308c\u307e\u3057\u305f\");\n} catch (error) {\n    // catch\u7bc0\u306e\u30b9\u30b3\u30fc\u30d7\u3067error\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\n    console.log(error.message); // => \"\u4f8b\u5916\u304c\u6295\u3052\u3089\u308c\u307e\u3057\u305f\"\n} \n```", "```\n// \u6e21\u3055\u308c\u305f\u6570\u5024\u304c0\u4ee5\u4e0a\u3067\u306f\u306a\u3044\u5834\u5408\u306b\u4f8b\u5916\u3092\u6295\u3052\u308b\u95a2\u6570\nfunction assertPositiveNumber(num) {\n    if (num < 0) {\n        throw new Error(`${num} is not positive.`);\n    }\n}\n\ntry {\n    // 0\u672a\u6e80\u306e\u5024\u3092\u6e21\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u95a2\u6570\u304c\u4f8b\u5916\u3092\u6295\u3052\u308b\n    assertPositiveNumber(-1);\n} catch (error) {\n    console.log(error instanceof Error); // => true\n    console.log(error.message); // => \"-1 is not positive.\"\n} \n```", "```\n// \u6587\u5b57\u5217\u3092\u4f8b\u5916\u3068\u3057\u3066\u6295\u3052\u308b\u30a2\u30f3\u30c1\u30d1\u30bf\u30fc\u30f3\u306e\u4f8b\ntry {\n    throw \"\u4f8b\u5916\u304c\u6295\u3052\u3089\u308c\u307e\u3057\u305f\";\n} catch (error) {\n    // catch\u7bc0\u306e\u4f8b\u5916\u8b58\u5225\u5b50\u306f\u3001\u6295\u3052\u3089\u308c\u305f\u5024\u3092\u53c2\u7167\u3059\u308b\n    console.log(error); // => \"\u4f8b\u5916\u304c\u6295\u3052\u3089\u308c\u307e\u3057\u305f\"\n} \n```", "```\ntry {\n    // \u5b58\u5728\u3057\u306a\u3044\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\n    console.log(x);\n} catch (error) {\n    console.log(error instanceof ReferenceError); // => true\n    console.log(error.name); // => \"ReferenceError\"\n    console.log(error.message); // \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\n} \n```", "```\n// JavaScript\u3068\u3057\u3066\u6b63\u3057\u304f\u306a\u3044\u69cb\u6587\u3092\u30d1\u30fc\u30b9\u3059\u308b\u3068SyntaxError\u304c\u767a\u751f\u3059\u308b\nfoo! bar! \n```", "```\ntry {\n    // eval\u95a2\u6570\u306f\u6e21\u3057\u305f\u6587\u5b57\u5217\u3092JavaScript\u3068\u3057\u3066\u5b9f\u884c\u3059\u308b\u95a2\u6570\n    // \u6b63\u3057\u304f\u306a\u3044\u69cb\u6587\u3092\u30d1\u30fc\u30b9\u3055\u305b\u3001SyntaxError\u3092\u5b9f\u884c\u6642\u306b\u767a\u751f\u3055\u305b\u308b\n    eval(\"foo! bar!\");\n} catch (error) {\n    console.log(error instanceof SyntaxError); // => true\n    console.log(error.name); // => \"SyntaxError\"\n    console.log(error.message); // \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\n} \n```", "```\ntry {\n    // \u95a2\u6570\u3067\u306f\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u95a2\u6570\u3068\u3057\u3066\u547c\u3073\u51fa\u3059\n    const fn = {};\n    fn();\n} catch (error) {\n    console.log(error instanceof TypeError); // => true\n    console.log(error.name); // => \"TypeError\"\n    console.log(error.message); // \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\n} \n```", "```\n// \u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3059\u308b\u95a2\u6570\nfunction reverseString(str) {\n    if (typeof str !== \"string\") {\n        throw new TypeError(`${str} is not a string`);\n    }\n    return Array.from(str).reverse().join(\"\");\n}\n\ntry {\n    // \u6570\u5024\u3092\u6e21\u3059\n    reverseString(100);\n} catch (error) {\n    console.log(error instanceof TypeError); // => true\n    console.log(error.name); // => \"TypeError\"\n    console.log(error.message); // => \"100 is not a string\"\n} \n```", "```\nfunction fn() {\n    // \u5b58\u5728\u3057\u306a\u3044\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\n    x++;\n}\nfn(); \n```", "```\nfunction fn() {\n    console.log(\"\u30e1\u30c3\u30bb\u30fc\u30b8\");\n    console.error(\"\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\");\n}\n\nfn(); \n```", "```\nfunction somethingWork() {\n    throw new Error(\"\u672c\u6765\u306e\u30a8\u30e9\u30fc\");\n}\n\ntry {\n    somethingWork();\n} catch (error) {\n    // `error` \u304c\u6301\u3063\u3066\u3044\u305f\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u304c\u5931\u308f\u308c\u308b\u305f\u3081\u3001\u5b9f\u969b\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u6240\u304c\u308f\u304b\u3089\u306a\u304f\u306a\u308b \n    throw new Error(\"somethingWork\u95a2\u6570\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\");\n} \n```", "```\n// \u6570\u5024\u306e\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308a\u6570\u5024\u3092\u8fd4\u3059\u95a2\u6570\n// 'text' \u306a\u3069\u6570\u5024\u306b\u306f\u306a\u3089\u306a\u3044\u6587\u5b57\u5217\u3092\u6e21\u3055\u308c\u305f\u5834\u5408\u306f\u4f8b\u5916\u3092\u6295\u3052\u3089\u308c\u308b\nfunction safeParseInt(numStr) {\n    const num = Number.parseInt(numStr, 10);\n    if (Number.isNaN(num)) {\n        throw new Error(`${numStr} is not a numeric`);\n    }\n    return num;\n}\n\n// \u6570\u5b57\u306e\u6587\u5b57\u5217\u3092\u4e8c\u3064\u53d7\u3051\u53d6\u308a\u3001\u5408\u8a08\u3092\u8fd4\u3059\u95a2\u6570\nfunction sumNumStrings(a, b) {\n    try {\n        const aNumber = safeParseInt(a);\n        const bNumber = safeParseInt(b);\n        return aNumber + bNumber;\n    } catch (e) {\n        throw new Error(\"Failed to sum a and b\", { cause: e });\n    }\n}\n\ntry {\n    // \u6570\u5024\u306b\u306a\u3089\u306a\u3044\u6587\u5b57\u5217 'string' \u3092\u6e21\u3057\u3066\u3044\u308b\u306e\u3067\u4f8b\u5916\u304c\u6295\u3052\u3089\u308c\u308b\n    sumNumStrings(\"string\", \"2\");\n} catch (err) {\n    console.error(err);\n} \n```"]