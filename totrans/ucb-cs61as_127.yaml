- en: Apply
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用
- en: '`apply`'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`apply`'
- en: '`Apply` takes two arguments, a procedure and a list of arguments to which the
    procedure should be applied. `Apply` classifies procedures into two kinds: It
    calls `apply-primitive-procedure` to apply primitives; it applies compound procedures
    by sequentially evaluating the expressions that make up the body of the procedure.
    The environment for the evaluation of the body of a compound procedure is constructed
    by extending the base environment carried by the procedure to include a frame
    that binds the parameters of the procedure to the arguments to which the procedure
    is to be applied. Here is the definition of `apply`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`Apply`接受两个参数，一个过程和应该应用该过程的参数列表。`Apply`将过程分类为两种：它调用`apply-primitive-procedure`来应用原始过程；它通过顺序评估组成过程体的表达式来应用复合过程。用于评估复合过程体的环境是通过扩展过程携带的基本环境构造的，以包括一个框架，该框架将过程的参数绑定到应该应用过程的参数上。这是`apply`的定义：'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will go through the procedures used in the definition, one-by-one.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐一介绍定义中使用的步骤。
- en: Representing Procedures
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示过程
- en: 'To handle primitives, we assume that we have available the following procedures:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理原始过程，我们假设我们可以使用以下过程：
- en: '`(apply-primitive-procedure proc args)`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(apply-primitive-procedure proc args)`'
- en: applies the given primitive procedure to the argument values in the list 'args'
    and returns the result of the application.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将给定的原始过程应用于列表'args'中的参数值，并返回应用的结果。
- en: '`(primitive-procedure? proc)`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(primitive-procedure? proc)`'
- en: tests whether `proc` is a primitive procedure.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试`proc`是否是原始过程。
- en: 'Compound procedures are constructed from parameters, procedure bodies, and
    environments using the constructor `make-procedure`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 复合过程是使用构造函数`make-procedure`从参数、过程体和环境构造的：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Primitive Procedures
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始过程
- en: At this point, or maybe for a long time, you may wonder how primitive procedures
    are represented in Scheme. There is actually no right way to represent the primitive
    procedures, as long as `apply` can identify and apply them by using the procedures
    `primitive-procedure?` and `apply-primitive- procedure`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，或许很长时间以来，您可能想知道如何在Scheme中表示原始过程。实际上，表示原始过程没有正确的方式，只要`apply`可以使用`primitive-procedure?`和`apply-primitive-
    procedure`识别和应用它们即可。
- en: People who created Scheme decided to represent a primitive procedure as a list
    which begins with the symbol `primitive` and contains a procedure in the underlying
    Lisp that implements that primitive.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Scheme的人决定将原始过程表示为以符号`primitive`开头并包含实现该原始过程的基础Lisp中的过程的列表。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To apply a primitive procedure, we simply apply the implementation procedure
    to the arguments, using the underlying Lisp system:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用原始过程，我们只需将实现过程应用于参数，使用底层的Lisp系统：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Operations on Environments
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境操作
- en: 'For sure, the evaluator needs operations for manipulating environments. What
    is an environment again? It is a sequence of frames, where each frame is a table
    of bindings that associate variables with their corresponding values. We use the
    following operations for manipulating environments:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，评估器需要操作以操作环境。环境是什么？它是一系列框架，其中每个框架都是一个将变量与其对应值关联的绑定表。我们使用以下操作来操作环境：
- en: '`(lookup-variable-value <var> <env>)`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(lookup-variable-value <var> <env>)`'
- en: returns the value that is bound to the symbol `in the environment <env>, or
    signals an error if the variable is unbound.</env>`
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回绑定到符号`in the environment <env>的值，如果变量未绑定，则发出错误信号。</env>`
- en: '`(extend-environment <variables> <values> <base-env>)`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(extend-environment <variables> <values> <base-env>)`'
- en: returns a new environment, consisting of a new frame in which the symbols in
    the list <variables>are bound to the corresponding elements in the list <values>,
    where the enclosing environment is the environment <base-env>.</base-env></values></variables>
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回一个新的环境，由一个新的框架组成，在该框架中，列表<variables>中的符号绑定到列表<values>中的相应元素，其中封闭环境是环境<base-env>。</base-env></values></variables>
- en: '`(define-variable! <var> <value> <env>)`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(define-variable! <var> <value> <env>)`'
- en: adds to the first frame in the environment <env>a new binding that associates
    the variable `with the value <value>.</value>`</env>
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向环境<env>中的第一个框架添加一个新绑定，将变量`与值<value>关联。</value>`</env>
- en: '`(set-variable-value! <var> <value> <env>)`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(set-variable-value! <var> <value> <env>)`'
- en: changes the binding of the variable `in the environment <env>so that the variable
    is now bound to the value <value>, or signals an error if the variable is unbound.</value></env>`
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改变量`在环境<env>中的绑定，使变量现在绑定到值<value>，或者如果变量未绑定，则发出错误信号。</value></env>`
- en: To implement these operations we represent an environment as a list of frames.
    The enclosing environment of an environment is the `cdr` of the list. The empty
    environment is simply the empty list.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这些操作，我们将环境表示为框架列表。环境的封闭环境是列表的`cdr`。空环境就是空列表。
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Each frame of an environment is represented as a pair of lists: a list of the
    variables bound in that frame and a list of the associated values.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 环境的每个框架都表示为两个列表的对：绑定在该框架中的变量列表和关联值列表。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To extend an environment by a new frame that associates variables with values,
    we make a frame consisting of the list of variables and the list of values, and
    we adjoin this to the environment. We signal an error if the number of variables
    does not match the number of values.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过一个新的框架扩展环境，将变量与值关联起来，我们创建一个由变量列表和值列表组成的框架，并将其附加到环境中。如果变量的数量与值的数量不匹配，我们会发出错误信号。
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To look up a variable in an environment, we scan the list of variables in the
    first frame. If we find the desired variable, we return the corresponding element
    in the list of values. If we do not find the variable in the current frame, we
    search the enclosing environment, and so on. If we reach the empty environment,
    we signal an "unbound variable" error.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要在环境中查找变量，我们扫描第一个框架中的变量列表。如果找到所需的变量，我们返回值列表中对应的元素。如果在当前框架中找不到变量，我们就搜索封闭环境，依此类推。如果到达空环境，我们会发出“未绑定变量”错误信号。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To set a variable to a new value in a specified environment, we scan for the
    variable, just as in `lookup-variable-value`, and change the corresponding value
    when we find it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要在指定的环境中将变量设置为新值，我们会像在`lookup-variable-value`中一样扫描变量，并在找到时更改相应的值。
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To define a variable, we search the first frame for a binding for the variable,
    and change the binding if it exists (just as in `set-va``riable- value!`). If
    no such binding exists, we adjoin one to the first frame.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个变量，我们在第一个框架中搜索变量的绑定，并在存在时更改绑定（就像在`set-variable-value!`中一样）。如果不存在这样的绑定，我们就在第一个框架中添加一个。
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`apply` Revisited'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新审视`apply`
- en: Let's look at the definition of `apply` again. Does it make sense this time?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看一下`apply`的定义。这次有没有更清晰的理解？
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Takeaways
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this subsection, you learned the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，您学到了以下内容：
- en: How `apply` is defined
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`apply`的定义方式'
- en: How primitive procedures are defined and applied
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何定义和应用原始过程
- en: How the operations on environments are defined
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何定义环境操作
- en: What's Next?
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: We are going to learn how the evaluator runs as a program.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习评估器如何作为一个程序运行。
