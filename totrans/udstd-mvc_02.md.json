["```\ncsv1_model = AddressBookCSV(\"file1.csv\")\nxml_model = AddressBookXML(\"file.xml\")\ncsv2_model = AddressBookCSV(\"file2.csv\")\n\naddress_book = AddressBook([csv1_model, xml_model, csv2_model]) \n```", "```\nclass AddressBookCSV(Model):\n    def __init__(self, filename):\n        super(AddressBookCSV, self).__init__()\n        self._filename = filename\n\n    def num_entries(self):\n        try:\n            return len(open(self._filename, \"r\").readlines())\n        except:\n            return 0\n\n    def get_entry(self, entry_number):\n        try:\n            with open(self._filename, \"r\") as f:\n                line = f.readlines()[entry_number]\n                name, phone = line.split(',')\n                return { 'name' : name.strip(), 'phone' : phone.strip()}\n        except:\n            raise IndexError(\"Invalid entry %d\" % entry_number)\n\n    def append_entry(self, name, phone):\n        with open(self._filename, \"a\") as f:\n            f.write('{},{}\\n'.format(name, phone))\n\n        self.notify_listeners() \n```", "```\nclass AddressBook(Model):\n    def __init__(self, sub_models):\n        super(AddressBook, self).__init__()\n\n        self._sub_models = sub_models\n\n        for m in self._sub_models:\n            m.register(self)\n\n    def num_entries(self):\n        return sum([m.num_entries() for m in self._sub_models])\n\n    def get_entry(self, entry_number):\n\n        accumulated = itertools.accumulate(\n            [m.num_entries() for m in self._sub_models])\n\n        source_idx = [x <= entry_number for x in accumulated].index(False)\n\n        return self._sub_models[source_idx].get_entry(\n                               entry_number - accumulated[source_idx])\n\n    def append_entry(self, name, phone):\n        self._sub_models[-1].append_entry(name, phone)\n\n    def notify(self):\n        self.notify_listeners() \n```", "```\ntree_view = QTreeView()\nmodel = MyModel()\npipe_model = QSortFilterProxyModel()\npipe_model.setSourceModel(model)\ntree_view.setModel(pipe_model) \n```", "```\nclass Engine(BaseModel):\n   def __init__(self): \n       super(Engine, self).__init__()  \n       self._rpm = 0 \n\n   def setRpm(self, rpm):\n       if rpm != self._rpm:\n           self._rpm = rpm\n           self._notifyListeners()\n\n   def rpm(self):\n       return self._rpm \n```", "```\nclass Engine(BaseModel):\n  # <proper adaptations to init method>\n\n  def dialColor(self):\n     if self._rpm > 8000:\n        return Qt.red\n     else:\n        return Qt.green \n```", "```\nclass Dial(View):\n   def notify(self):\n       self.setValue(self._model.rpm())\n       palette = QtGui.Qpalette()\n\n       color = Qt.green\n       if self._model.rpm() > 8000:\n           color = Qt.red\n\n       palette.setColor(QtGui.Qpalette.Button, color)\n       self.setPalette(palette) \n```", "```\nclass Engine(BaseModel):\n   <...>\n   def isOverRpmLimit(self):\n       return self._rpm > 8000 \n```", "```\nclass Dial(View):\n   def notify(self):\n       <...>\n       color = Qt.red if self._model.isOverRpmLimit() else Qt.green\n\n       palette.setColor(QtGui.QPalette.Button, color)\n       self.setPalette(palette) \n```", "```\nclass DialEngine(BaseModel):\n def __init__(self, engine):\n   super(DialEngine, self).__init__()\n   self._dial_color = Qt.green\n   self._engine = engine\n   self._engine.register(self) \n```", "```\nclass DialEngine(BaseModel):\n    # ...\n    def dialColor(self):\n        return self._dial_color \n```", "```\nclass DialEngine(BaseModel):\n    # ...\n    def setRpm(self, rpm):\n        self._engine.setRpm(rpm)\n\n    def rpm(self):\n        return self._engine.rpm() \n```", "```\nclass DialEngine(BaseModel):\n    # ...\n    def notify(self):\n        if self._engine.isOverRpmLimit():  \n          self._dial_color = Qt.red\n        else: \n          self._dial_color = Qt.green\n\n        self._notifyListeners() \n```", "```\nclass DialEngine(BaseModel):\n    # ...\n    def setRpm(self, rpm):\n        self._engine.setRpm(rpm)\n\n        if self._engine.isOverRpmLimit():  \n            self._dial_color = Qt.red\n        else: \n            self._dial_color = Qt.green \n```", "```\nclass DialViewModel(BaseModel):\n  def __init__(self, engine):\n  super(DialViewModel, self).__init__()\n     self._dial_color = Qt.green\n     self._engine = engine\n     self._engine.register(self)\n\n  def color(self):\n     return self._dial_color\n\n  def notify(self):\n     if self._engine.isOverRpmLimit():\n        self._dial_color = Qt.red\n     else:\n        self._dial_color = Qt.green\n     self._notifyListeners() \n```", "```\nclass Dial(QtGui.QDial):\n  # <....>\n  def setModels(self, model, view_model):\n     if self._model:\n        self._model.unregister(self)\n     if self._view_model:\n        self._view_model.unregister(self)\n\n     self._model = model\n     self._view_model = view_model\n\n     self._controller.setModel(model)\n     self._model.register(self)\n     self._view_model.register(self)\n\n  def notify(self):\n     self.setValue(self._model.rpm())  \n     palette = QtGui.QPalette() \n     palette.setColor(QtGui.Qpalette.Button,self._view_model.color())\n     self.setPalette(palette) \n```", "```\nclass Model(object):\n    def get_password(self):\n        if self._password is None:\n            password, ok = QtGui.QInputDialog.getText(\n                None, \n                \"Please input your password\", \n                \"Password:\", \n                QtGui.QLineEdit.Password)                                                \n\n            if ok:\n                self._password = password\n\n        return self._password    \n\n    def clear_password(self):\n        self._password = None \n```", "```\nclass ModelController(Model):\n    def __init__(self):\n        self._value = 0\n\n    def button_pressed(self):\n        self._value += 1\n        self.notify_listeners() \n```", "```\nfrom traits.api import *\nfrom traitsui.api import *\n\nclass ModelController(HasStrictTraits):\n    value = Int(0)\n    increment_btn = Button()\n\n    traits_view = View(\n        Item(\"value\"),\n        UItem(\"increment_btn\", label=\"Increment\"),\n        )\n\n    def _increment_btn_fired(self):\n        self.value += 1\n\nmc = ModelController()\nmc.configure_traits() \n```", "```\nclass ValueModel(Model):\n    def __init__(self, sub_model):\n        self._sub_model = sub_model\n\n    def set_value(self, value):\n        # do potentially complex logic on self._sub_model\n        # to appropriately manipulate the passed value\n        # This method triggers a self.value_changed notification.\n\n    def value(self):\n        # do potentially complex logic on self._sub_model\n        # to extract a single value \n```", "```\nclass NameValueModel(Model):\n    def __init__(self, customer):\n        self._customer = customer\n\n    def set_value(self, value):\n        self._customer.name = value\n        self.notify_observers()\n\n    def value(self):\n        return self._customer.name\n\nclass SurnameValueModel(Model):\n    def __init__(self, customer):\n        self._customer = customer\n\n    def set_value(self, value):\n        self._customer.surname = value\n        self.notify_observers()\n\n    def value(self):\n        return self._customer.surname \n```", "```\nfrom django.db import models\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30) \n```", "```\nperson = Person(first_name=\"A.\", last_name=\"Einstein\")\nperson.save()\n\nperson.first_name = \"Albert\"\nperson.save()\n\nanother_person = Person.objects.get(last_name=\"Galilei\") \n```", "```\nservice Calculator {\n   i32 add(1:i32 num1, 2:i32 num2),\n} \n```", "```\nclass Client(Iface):\n  def __init__(self, iprot, oprot=None):\n    self._iprot = self._oprot = iprot\n    if oprot is not None:\n      self._oprot = oprot\n    self._seqid = 0\n\n  def add(self, num1, num2):\n    \"\"\"\n    Parameters:\n     - num1\n     - num2\n    \"\"\"\n    self.send_add(num1, num2)\n    return self.recv_add()\n\n  def send_add(self, num1, num2):\n    self._oprot.writeMessageBegin('add', TMessageType.CALL, self._seqid)\n    args = add_args()\n    args.num1 = num1\n    args.num2 = num2\n    args.write(self._oprot)\n    self._oprot.writeMessageEnd()\n    self._oprot.trans.flush()\n\n  def recv_add(self):\n    iprot = self._iprot\n    (fname, mtype, rseqid) = iprot.readMessageBegin()\n    if mtype == TMessageType.EXCEPTION:\n      x = TApplicationException()\n      x.read(iprot)\n      iprot.readMessageEnd()\n      raise x\n    result = add_result()\n    result.read(iprot)\n    iprot.readMessageEnd()\n    if result.success is not None:\n      return result.success\n    raise TApplicationException(TApplicationException.MISSING_RESULT, \n                                \"add failed: unknown result\") \n```", "```\nresult = client.add(3, 4) \n```", "```\nvar album = new Backbone.Collection;\n\nalbum.on(\"add\", \n         function(song) {\n            alert(\"Song added callback executed.\");\n         }\n);\n\nalbum.add([\n  {name: \"Mozart collection\"},\n]); \n```", "```\nclass Movie(Model):\n    def __init__(self, filename):\n        self._filename = filename\n        self._thumbnail = _extract_thumbnail(filename)\n        self._length = _extract_length(filename)\n        self._name = _extract_name(filename)\n\n    # Metadata\n    def thumbnail(self):\n        return self._thumbnail\n\n    # <similar getters for the remaining metadata>\n\n    # Data\n    def contents(self):\n        # <...> \n```", "```\nclass Customer(Model):\n    def __init__(self):\n        self._changes = { \n            \"name\": [],\n            \"surname\": [],\n            \"address\": []\n        }\n        self._name = None\n        self._surname = None\n        self._address = None\n\n    def set_name(self, name):\n        old_name = self._name\n        self._name = name\n        self._changes[\"name\"].append((old_name, name))\n        self.notify_listeners()\n\n    # <similar code for set_surname/set_address\n\n    def changes(self, property_name):\n        return self._changes[property_name]\n\n    def clear_changes():\n        for changes in self._changes.values():\n            del changes[:] \n```", "```\nc = Customer()\nc.set_name(\"Rob\")\nc.set_name(\"Robert\") \n```", "```\nclass Customer(Model):\n    def __init__(self):\n        self._changes = []\n        # <...>\n\n    def set_name(self, name):\n        # <...>\n        self._changes.append((\"name\", old_name, name))\n        # <...>\n\n    def changes(self):\n        return self._changes \n```", "```\nclass Customer(Model):\n    de f __init__(self):\n        self._last_change = None\n        # <...>\n\n    def set_name(self, name):\n        # <...>\n        self._last_change = (\"name\", old_name, name)\n        # <...>\n\n    def last_change(self):\n        return self._last_change \n```", "```\nclass Connection(Model):\n    def set_host(self, host):\n        self._host = host\n        self.notify_listeners()\n\n    def set_port(self, port):\n        self._port = port\n        self.notify_listeners()\n\n    def set_host_and_port(self, host, port):\n        self._host = host\n        self._port = port\n        self.notify_listeners() \n```", "```\nclass BookCollection(Model):\n    def add_book(self, book):\n        self.add_books([book])\n\n    def add_books(books):\n        self._books.extend(books)\n        self.notify_listeners() \n```", "```\nclass View():\n    def notify(self, name, old_value, new_value):\n        # ... \n```", "```\nclass View():\n    def notify(self, change_info):\n        # ... \n```", "```\n[model addObserver:destination\n       forKeyPath:@\"my_property\"\n       options:NSKeyValueChangeNewKey\n       context:nil]; \n```", "```\nclass Article(models.Model):\n    title = models.CharField(max_length=200)\n    text = models.CharField() \n```", "```\ndef modify_article(request, article_id):\n    article = get_object_or_404(Article, pk=article_id)\n\n    # These changes do not trigger any notification. The model is passive.\n    article.title = request.POST[\"title\"]\n    article.text = request.POST[\"text\"]\n\n    # Persist the replaced data.\n    article.save()\n\n    template = Template(\"<html><body>\"\n                        \"<h1>{{ article.title }}</h1>\"\n                        \"<p>{{ article.text }}</p>\"\n                        \"</body></html>\")\n    context = { \"article\" : article }\n    html_doc = template.render(context)\n\n    return HttpResponse(html_doc) \n```", "```\nclass Controller():\n    def perform_operation(self):\n        model = self.model\n\n        # None of these setters trigger notification.\n        model.set_name(\"Enrico\")\n        model.set_surname(\"Fermi\")\n        model.set_nationality(\"Italian\")\n\n        # Views are notified of the changes here.\n        model.notify_listeners() \n```", "```\nvoid print_sum(float x, float y) {\n    std::cout << \"The sum is \" << x + y << std::endl;\n}\n\nvoid main() {\n    boost::signals2::signal<void (float, float)> sig;\n\n    sig.connect(&print_sum);\n\n    // emit\n    sig(5., 3.);\n} \n```", "```\nclass Model : public QObject\n{\n    Q_OBJECT\n\npublic:\n    Model() { value = 0; }\n    int value() const { return value; }\n\npublic slots:\n    void setValue(int new_value) {\n        if (new_value != value) {\n            value = new_value;\n            emit valueChanged(new_value);\n        }\n    }\n\nsignals:\n    void valueChanged(int new_value);\n\nprivate:\n    int value;\n}; \n```", "```\nModel *model1 = new Model()\nModel *model2 = new Model()\nQObject::connect(model1, SIGNAL(valueChanged(int)), model2, SLOT(setValue(int)))\nmodel1->setValue(42) \n```", "```\n     representation for its data. \n    ```", "```\ndef extractor(model):\n    return str(model.get_value())\n\nview = View(model, extractor) \n```", "```\nclass View:\n    # <...>\n    def notify(self):\n        value = self.extractor(self.model)\n        self.set_value(value) \n```", "```\nclass Person(object):\n    def __init__(self, name=\"\", surname=\"\", age=0):\n        self._name = name\n        self._surname = surname\n        self._age = age\n\n    def visual_proxy(self, read_only=False):\n        view = QWidget()\n        layout = QGridLayout()\n        for row, attr in enumerate([\"name\", \"surname\", \"age\"]):\n            layout.addWidget(QLabel(attr), row, 0)\n            layout.addWidget(self.visual_proxy_attribute(attr, read_only), row, 1)\n        view.setLayout(layout)\n        return view\n\n    def visual_proxy_attribute(self, attribute, read_only=False):\n        method = getattr(self, \"_create_{}_view\".format(attribute))\n        return method(read_only)\n\n    def _update_name(self, name):\n        self._name = name\n\n    def _update_surname(self, surname):\n        self._surname = surname\n\n    def _update_age(self, age):\n        self._age = age\n\n    def _create_name_view(self, read_only):\n        if read_only:\n            widget = QLabel(self._name)\n        else:\n            widget = QLineEdit()\n            widget.setText(self._name)\n            widget.textChanged.connect(self._update_name)\n\n        return widget\n\n    def _create_surname_view(self, read_only):\n        if read_only:\n            widget = QLabel(self._surname)\n        else:\n            widget = QLineEdit()\n            widget.setText(self._surname)\n            widget.textChanged.connect(self._update_surname)\n\n        return widget\n\n    def _create_age_view(self, read_only):\n        if read_only:\n            widget = QLabel(str(self._age))\n        else:\n            widget = QSpinBox()\n            widget.setValue(self._age)\n            widget.valueChanged.connect(self._update_age)\n\n        return widget\n\n    def __str__(self):\n        return \"Name: {}\\nSurname: {}\\nAge: {}\".format(self._name, self._surname, self._age) \n```", "```\nperson = Person(name=\"John\", surname=\"Smith\", age=18)\nview = person.visual_proxy()\nview.show() \n```", "```\nclass Person(HasTraits):\n   name = Str\n   surname = Str\n   age = Range(0, 100) \n```", "```\nperson = Person()\nui = person.edit_traits() \n```", "```\nclass DataDialog(QDialog):\n    def __init__(self, parent=None, flags=0):\n        super(DataDialog, self).__init__(parent, flags)\n        self._line_edits = {}\n        self._data_fields = [\"name\", \"surname\", \"age\"]\n\n        layout = QGridLayout()\n        for row, field in enumerate(self._data_fields):\n            layout.addWidget(QLabel(field), row, 0)\n\n            line_edit = QLineEdit()\n            layout.addWidget(line_edit, row, 1)\n\n            self._line_edits[field] = line_edit\n\n        ok = QPushButton(\"Ok\")\n        cancel = QPushButton(\"Cancel\")\n        self.connect(ok, SIGNAL(\"clicked()\"), self.accept)\n        self.connect(cancel, SIGNAL(\"clicked()\"), self.reject)\n        layout.addWidget(cancel, len(self._data_fields), 0)\n        layout.addWidget(ok, len(self._data_fields), 1)\n\n        self.setLayout(layout) \n```", "```\nclass DataDialog(QDialog):\n    # <...>\n    def set_content(self, data):\n        for field in self._data_fields:\n            line_edit = self._line_edits[field]\n            if field in data:\n                line_edit.setText(data[field])\n\n    def get_content(self):\n        data = {}\n        for field in self._data_fields:\n            line_edit = self._line_edits[field]\n            data[field] = line_edit.text()\n\n        return data \n```", "```\ndata = {\"name\": \"Albert\",\n        \"surname\": \"Einstein\",\n        }\n\ndata_dialog = DataDialog()\ndata_dialog.set_content(data)\n\nif data_dialog.exec_() == QDialog.Accepted:\n    print(\"Dialog Accepted. Content:\")\n    print(data_dialog.get_content())\nelse:\n    print(\"Dialog Canceled.\") \n```", "```\n def notify(self):\n        if not self.isVisible():\n            self.needs_update = True\n            return\n\n        self.refresh_from_model()\n\n    def showEvent(event):\n        if self.needs_update:\n            self.refresh_from_model()\n            self.needs_update = False\n\n        super().showEvent(event) \n```", "```\nimport sys\nfrom PySide import QtGui, QtCore\napp = QtGui.QApplication(sys.argv)\n\nclass EventFilter(QtCore.QObject):\n    def eventFilter(self, receiver, event):\n        print(type(receiver), type(event))\n        return False\n\nevent_filter = EventFilter()\nbutton = QtGui.QPushButton(\"hello\")\nbutton.installEventFilter(event_filter)\nbutton.show()\n\napp.exec_() \n```", "```\nmenubar = self.menuBar()\ntoolbar = self.addToolBar('Toolbar')\nfile_menu = menubar.addMenu('&File')\n\nquit_action = QAction(QtGui.QIcon('quit.png'), '&Quit', self)        \nquit_action.setShortcut('Ctrl+Q')\nquit_action.triggered.connect(qApp.quit)\n\nfile_menu.addAction(quit_action)\ntoolbar.addAction(quit_action) \n```", "```\nclass Engine(BaseModel):\n   def __init__(self):\n       super(Engine, self).__init__()\n       self._rpm = 0\n\n   def setRpm(self, rpm):\n       if rpm < 0:\n           raise ValueError(\"Invalid rpm value\")\n\n       if rpm != self._rpm:\n           self._rpm = rpm\n           self._notifyListeners()\n\n   def rpm(self):\n       return self._rpm \n```", "```\nclass Dial(QtGui.QDial):\n   def __init__(self, *args, **kwargs):\n       super(Dial, self).__init__(*args, **kwargs)\n       self._controller = None\n       self.setRange(0, 10000)\n\n   def setRpmValue(self, rpm_value):\n       self.setValue(rpm_value)\n\n   def setController(self, controller):\n       self._controller = controller\n       self.connect(self, QtCore.SIGNAL(\"valueChanged(int)\"),\n                          self._controller.changeRpm) \n```", "```\nclass Slider(QtGui.QSlider):\n   def __init__(self, *args, **kwargs):\n       super(Slider, self).__init__(*args, **kwargs)\n       self._controller = None\n       self.connect(self, QtCore.SIGNAL(\"valueChanged(int)\"),\n                          self._valueChanged)\n       self.setRange(0,10)\n\n   def setRpmValue(self, rpm_value):\n       self.setValue(rpm_value/1000)\n\n   def setController(self, controller):\n       self._controller = controller\n\n   def _valueChanged(self, value):\n       if self._controller:\n           self._controller.changeRpm(value*1000) \n```", "```\nclass Controller(object):\n   def __init__(self):\n       self._views = []\n       self._model = None\n\n   def setModel(self, model):\n       self._model = model\n       model.register(self)\n\n   def addView(self, view):\n       view.setController(self)\n       self._views.append(view)\n\n   def changeRpm(self, rpm):\n       if self._model:\n           self._model.setRpm(rpm)\n\n   def notify(self):\n       for view in self._views:\n           view.setRpmValue(self._model.rpm()) \n```", "```\nclass Controller(object):\n   def __init__(self, model, slider, dial):\n       self._slider = slider\n       self._dial = dial\n       self.connect(self._slider, QtCore.SIGNAL(\"valueChanged(int)\"),\n                          self._sliderChanged)\n       self.connect(self._dial, QtCore.SIGNAL(\"valueChanged(int)\"),\n                          self._dialChanged)\n       self._model = model\n       model.register(self)\n\n   def changeRpm(self, rpm):\n       if self._model:\n           self._model.setRpm(rpm)\n\n   def notify(self):\n       for view in self._views:\n           view.setRpmValue(self._model.rpm()) \n```", "```\nclass DialController(object):\n   def __init__(self):\n       self._view = None\n       self._model = None\n\n   def setModel(self, model):\n       self._model = model\n       self._model.register(self)\n\n   def setView(self, view):\n       self._view = view\n       self._view.setRange(0,10000)\n       self._view.connect(self._view, \n                          QtCore.SIGNAL(\"valueChanged(int)\"),\n                          self.changeRpm)\n\n   def changeRpm(self, rpm):\n       if self._model:\n           self._model.setRpm(rpm)\n\n   def notify(self):\n       if self._view:\n           self._view.setValue(self._model.rpm()) \n```", "```\nclass SliderController(object):\n   def __init__(self):\n       self._view = None\n       self._model = None\n\n   def setModel(self, model):\n       self._model = model\n       self._model.register(self)\n\n   def setView(self, view):\n       self._view = view\n       self._view.setRange(0,10)\n       self._view.connect(self._view, \n                          QtCore.SIGNAL(\"valueChanged(int)\"),\n                          self.changeRpm)\n\n   def changeRpm(self, rpm):\n       if self._model:\n           self._model.setRpm(rpm*1000)\n\n   def notify(self):\n       self._view.setValue(self._model.rpm()/1000) \n```", "```\ndial = QtGui.QDial(container)\ndial_controller = DialController()\ndial_controller.setView(dial)\ndial_controller.setModel(engine)\n\nslider = QtGui.QSlider(container)\nslider_controller = SliderController()\nslider_controller.setView(slider)\nslider_controller.setModel(engine) \n```", "```\ndirectory = QDirModel()\ntable = QTreeView()\ntree.setModel(directory)\ntree.setRootIndex(directory.index(\"/\") \n```"]