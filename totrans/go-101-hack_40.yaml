- en: Select operation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Select operation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '`Go`''s `select` operation looks similar to `switch`, but it''s dedicated to
    poll send and receive operations channels. Check the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The running result is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `select` operation will check which `case` branch can be run, that means
    the send or receive action can be executed successfully. If more than one `case`
    are ready now, the `select` will randomly choose one to execute. If no `case`
    is ready, but there is a `default` branch, then the `default` block will be executed,
    else the `select` operation will block. In the above example, if the `main` goroutine
    doesn't sleep (`time.Sleep(time.Second)`), the other `2 func` goroutines won't
    obtain the opportunity to run, so only `default` block in `select` statement will
    be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `select` statement won''t process `nil` channel, so if a channel used for
    receive operation is closed, you should mark its value as `nil`, then it will
    be kicked out of the selection list. So a common pattern of selection on multiple
    receive channels looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Go Programming Language Specification](https://golang.org/ref/spec);'
  prefs: []
  type: TYPE_NORMAL
- en: '[breaking out of a select statement when all channels are closed](http://stackoverflow.com/questions/13666253/breaking-out-of-a-select-statement-when-all-channels-are-closed);'
  prefs: []
  type: TYPE_NORMAL
- en: '[Curious Channels](http://dave.cheney.net/2013/04/30/curious-channels).'
  prefs: []
  type: TYPE_NORMAL
