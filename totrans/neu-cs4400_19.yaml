- en: Evaluation of `with`Tuesday, January 24th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估 `with`Tuesday, January 24th
- en: Now, to make this work, we will need to do some substitutions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了使这个工作，我们需要进行一些替换。
- en: 'We basically want to say that to evaluate:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上想说，要评估：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'we need to evaluate `WAE2` with id substituted by `WAE1`. Formally:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要用 `WAE1` 替换 `WAE2` 中的 id 并进行评估。形式上：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There is a more common syntax for substitution (quick: what do I mean by this
    use of “syntax”?):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 替换的常见语法（快速：我所说的“语法”是什么意思？）有一个更常见的语法：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Side-note: this syntax originates with logicians who used `[x/v]e`, and later
    there was a convention that mimicked the more natural order of arguments to a
    function with `e[x->v]`, and eventually both of these got combined into `e[v/x]`
    which is a little confusing in that the left-to-right order of the arguments is
    not the same as for the `subst` function.'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 旁注：这种语法起源于使用 `[x/v]e` 的逻辑学家，后来出现了一种模仿函数参数更自然顺序的惯例，即 `e[x->v]`，最终这两者被合并为 `e[v/x]`，这有点令人困惑，因为参数的从左到右顺序与
    `subst` 函数的顺序不同。
- en: Now all we need is an exact definition of substitution.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所需要的就是替换的确切定义。
- en: Note that substitution is not the same as evaluation, it’s only a part of the
    evaluation process. In the previous examples, when we evaluated the expression
    we did substitutions as well as the usual arithmetic operations that were already
    part of the AE evaluator. In this last definition there is still a missing evaluation
    step, see if you can find it.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，替换不同于评估，它仅是评估过程的一部分。在前面的例子中，当我们评估表达式时，我们除了常规的算术运算外，还进行了替换，而这些算术运算已经是 AE
    评估器的一部分。在这个最后的定义中，仍然缺少一个评估步骤，请看看你能否找到它。
- en: 'So let us try to define substitution now:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在让我们试着定义替换：
- en: 'Substitution (take 1): `e[v/i]`'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 替换（第一次尝试）：`e[v/i]`
- en: To substitute an identifier `i` in an expression `e` with an expression `v`,
    replace all identifiers in `e` that have the same name `i` by the expression `v`.
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要将表达式 `e` 中的标识符 `i` 替换为表达式 `v`，请用表达式 `v` 替换 `e` 中所有与名称 `i` 相同的标识符。
- en: 'This seems to work with simple expressions, for example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎适用于简单的表达式，例如：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'however, we crash with an invalid syntax if we try:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们尝试这样做，我们就会崩溃，并出现无效的语法：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: — we got to an invalid expression.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: — 我们得到了一个无效的表达式。
- en: 'To fix this, we need to distinguish normal occurrences of identifiers, and
    ones that are used as new bindings. We need a few new terms for this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，我们需要区分标识符的常规出现和用作新绑定的出现。我们需要一些新术语来解决这个问题：
- en: 'Binding Instance: a binding instance of an identifier is one that is used to
    name it in a new binding. In our `<WAE>` syntax, binding instances are only the
    `<id>` position of the `with` form.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绑定实例：标识符的绑定实例是指在新绑定中用于命名它的实例。在我们的 `<WAE>` 语法中，绑定实例仅为 `with` 表单的 `<id>` 位置。
- en: 'Scope: the scope of a binding instance is the region of program text in which
    instances of the identifier refer to the value bound in the binding instance.
    (Note that this definition actually relies on a definition of substitution, because
    that is what is used to specify how identifiers refer to values.)'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 范围：绑定实例的范围是程序文本的区域，在该区域内标识符的实例指的是绑定实例中绑定的值。（请注意，这个定义实际上依赖于替换的定义，因为它用于指定标识符如何指代值。）
- en: 'Bound Instance (or Bound Occurrence): an instance of an identifier is bound
    if it is contained within the scope of a binding instance of its name.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绑定实例（或绑定出现）：如果标识符的实例包含在其名称的绑定实例的范围内，则该实例被绑定。
- en: 'Free Instance (or Free Occurrence): An identifier that is not contained in
    any binding instance of its name is said to be free.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自由实例（或自由出现）：不包含其名称的任何绑定实例的标识符称为自由的。
- en: 'Using this we can say that the problem with the previous definition of substitution
    is that it failed to distinguish between bound instances (which should be substituted)
    and binding instances (which should not). So we try to fix this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个我们可以说前面定义的替换的问题在于它未能区分绑定实例（应替换）和绑定实例（不应替换）。所以我们尝试修复这个问题：
- en: 'Substitution (take 2): `e[v/i]`'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 替换（第二次尝试）：`e[v/i]`
- en: To substitute an identifier `i` in an expression `e` with an expression `v`,
    replace all instances of `i` that are not themselves binding instances with the
    expression `v`.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要将表达式 `e` 中的标识符 `i` 替换为表达式 `v`，请用表达式 `v` 替换 `e` 中不是绑定实例本身的所有 `i` 的实例。
- en: 'First of all, check the previous examples:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，检查前面的例子：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: still work, and
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然起作用，并且
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'also works. However, if we try this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以起作用。但是，如果我们尝试这样做：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'we get:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'but we want that to be `8`: the inner `x` should be bound by the closest `with`
    that binds it.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that the new definition of substitution that we have respects
    binding instances, but it fails to deal with their scope. In the above example,
    we want the inner `with` to *shadow* the outer `with`’s binding for `x`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Substitution (take 3): `e[v/i]`'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To substitute an identifier `i` in an expression `e` with an expression `v`,
    replace all instances of `i` that are not themselves binding instances, and that
    are not in any nested scope, with the expression `v`.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This avoids bad substitution above, but it is now doing things too carefully:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: becomes
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: which is an error because `x` is unbound (and there is reasonable no rule that
    we can specify to evaluate it).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that our substitution halts at every new scope, in this case,
    it stopped at the new `y` scope, but it shouldn’t have because it uses a different
    name. In fact, that last definition of substitution cannot handle any nested scope.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Revise again:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Substitution (take 4): `e[v/i]`'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To substitute an identifier `i` in an expression `e` with an expression `v`,
    replace all instances of `i` that are not themselves binding instances, and that
    are not in any nested scope of `i`, with the expression `v`.
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'which, finally, is a good definition. This is just a little too mechanical.
    Notice that we actually refer to all instances of `i` that are not in a scope
    of a binding instance of `i`, which simply means all *free occurrences* of `i`
    — free in `e` (why? — remember the definition of “free”?):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Substitution (take 4b): `e[v/i]`'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To substitute an identifier `i` in an expression `e` with an expression `v`,
    replace all instances of `i` that are free in `e` with the expression `v`.
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Based on this we can finally write the code for it:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: … and this is just the same as writing a formal “paper version” of the substitution
    rule.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'We still have bugs: but we’ll need some more work to get to them.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Before we find the bugs, we need to see when and how substitution is used in
    the evaluation process.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: To modify our evaluator, we will need rules to deal with the new syntax pieces
    — `with` expressions and identifiers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'When we see an expression that looks like:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'we continue by *evaluating* `E1` to get a value `V1`, we then substitute the
    identifier `x` with the expression `V1` in `E2`, and continue by evaluating this
    new expression. In other words, we have the following evaluation rule:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: So we know what to do with `with` expressions. How about identifiers? The main
    feature of `subst`, as said in the purpose statement, is that it leaves no free
    instances of the substituted variable around. This means that if the initial expression
    is valid (did not contain any free variables), then when we go from
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: to
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: the result is an expression that has *no* free instances of `x`. So we don’t
    need to handle identifiers in the evaluator — substitutions make them all go away.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now extend the formal definition of AE to that of WAE:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you’re paying close attention, you might catch a potential problem in this
    definition: we’re substituting `eval(E1)` for `x` in `E2` — an operation that
    requires a WAE expression, but `eval(E1)` is a number. (Look at the type of the
    `eval` definition we had for AE, then look at the above definition of `subst`.)
    This seems like being overly pedantic, but we it will require some resolution
    when we get to the code. The above rules are easily coded as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细观察，您可能会在这个定义中发现一个潜在问题：我们正在将`eval(E1)`替换为`x`在`E2`中 — 一个需要WAE表达式的操作，但`eval(E1)`是一个数字。（查看我们为AE定义的`eval`定义的类型，然后查看上面的`subst`定义。）这似乎过于迂腐，但当我们到达代码时，它将需要一些解决方案。上述规则可以轻松编码如下：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Note the `Num` expression in the marked line: evaluating the named expression
    gives us back a number — we need to convert this number into a syntax to be able
    to use it with `subst`. The solution is to use `Num` to convert the resulting
    number into a numeral (the syntax of a number). It’s not an elegant solution,
    but it will do for now.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意标记行中的`Num`表达式：评估命名表达式会给我们一个数字 — 我们需要将这个数字转换为语法以便能够与`subst`一起使用。解决方案是使用`Num`将结果数字转换为数字（数字的语法）。这不是一个优雅的解决方案，但现在可以使用。
- en: Finally, here are a few test cases. We use a new `test` special form which is
    part of the course plugin. The way to use `test` is with two expressions and an
    `=>` arrow — DrRacket evaluates both, and nothing will happen if the results are
    equal. If the results are different, you will get a warning line, but evaluation
    will continue so you can try additional tests. You can also use an `=error>` arrow
    to test an error message — use it with some text from the expected error, `?`
    stands for any single character, and `*` is a sequence of zero or more characters.
    (When you use `test` in your homework, the handin server will abort when tests
    fail.) We expect these tests to succeed (make sure that you understand *why* they
    should succeed).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里有几个测试案例。我们使用一个新的`test`特殊形式，这是课程插件的一部分。使用`test`的方式是用两个表达式和一个`=>`箭头 — DrRacket评估两者，如果结果相等，则不会发生任何事情。如果结果不同，您将收到一个警告行，但评估将继续，这样您可以尝试其他测试。您还可以使用`=error>`箭头来测试错误消息
    — 使用来自预期错误的一些文本，`?`代表任何单个字符，`*`代表零个或多个字符的序列。（当您在作业中使用`test`时，当测试失败时，交付服务器将中止。）我们期望这些测试能成功（确保您明白*为什么*它们应该成功）。
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Putting this all together, we get the following code; trying to run this code
    will raise an unexpected error…
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些内容放在一起，我们得到以下代码；尝试运行此代码将引发意外错误…
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '* * *'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Oops, this program still has problems that were caught by the tests — we encounter
    unexpected free identifier errors. What’s the problem now? In expressions like:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕，这个程序仍然存在问题，被测试捕捉到 — 我们遇到了意外的自由标识符错误。现在问题是什么？在这样的表达式中：
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'we forgot to substitute `x` in the expression that `y` is bound to. We need
    to the recursive substitute in both the with’s body expression as well as its
    named expression:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们忘记了在`y`绑定的表达式中替换`x`。我们需要在`with`的主体表达式以及其命名表达式中进行递归替换：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And *still* we have a problem… Now it’s
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 而*仍然*我们有问题…现在是
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'that halts with an error, but we want it to evaluate to `5`! Carefully trying
    out our substitution code reveals the problem: when we substitute `5` for the
    outer `x`, we don’t go inside the inner `with` because it has the same name —
    but we *do* need to go into its named expression. We need to substitute in the
    named expression even if the identifier is the *same* one we’re substituting:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 它以错误终止，但我们希望它评估为`5`！仔细尝试我们的替换代码揭示了问题：当我们将`5`替换为外部`x`时，我们不进入内部`with`因为它有相同的名称
    — 但我们*需要*进入其命名表达式。即使标识符是*相同*的，我们也需要在命名表达式中进行替换：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The complete (and, finally, correct) version of the code is now:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 完整（最终，正确的）代码版本现在是：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '* * *'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Reminder:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒：
- en: 'We started doing substitution, with a `let`-like form: `with`.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们开始进行替换，使用一个类似`let`的形式：`with`。
- en: 'Reasons for using bindings:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用绑定的原因：
- en: Avoid writing expressions twice.
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免重复编写表达式。
- en: More expressive language (can express identity).
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更具表现力的语言（可以表达身份）。
- en: 'Duplicating is bad! (“DRY”: *Don’t Repeat Yourself*.)'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制是不好的！（“DRY”：*不要重复自己*。）
- en: Avoids *static* redundancy.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免*静态*冗余。
- en: Avoid redundant computations.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免冗余计算。
- en: More than *just* an optimization when it avoids exponential resources.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当避免指数资源时，不仅仅是一种优化。
- en: Avoids *dynamic* redundancy.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免*动态*冗余。
- en: 'BNF:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BNF：
- en: '[PRE25]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note that we had to introduce two new rules: one for introducing an identifier,
    and one for using it.'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我们不得不引入两个新规则：一个用于引入标识符，一个用于使用标识符。
- en: 'Type definition:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型定义：
- en: '[PRE26]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Parser:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析器：
- en: '[PRE27]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We need to define substitution. Terms:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要定义替换。术语：
- en: Binding Instance.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绑定实例。
- en: Scope.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作用域。
- en: Bound Instance.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绑定实例。
- en: Free Instance.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自由实例。
- en: 'After lots of attempts:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经过多次尝试后：
- en: e[v/i] — To substitute an identifier `i` in an expression `e` with an expression
    `v`, replace all instances of `i` that are free in `e` with the expression `v`.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: e[v/i] — 将表达式`e`中的标识符`i`替换为表达式`v`，用表达式`v`替换`e`中所有自由的`i`实例。
- en: 'Implemented the code, and again, needed to fix a few bugs:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了代码，然后又需要修复一些错误：
- en: '[PRE28]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '(Note that the bugs that we fixed clarify the exact way that our scopes work:
    in `{with {x 2} {with {x {+ x 2}} x}}`, the scope of the first `x` is the `{+
    x 2}` expression.)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （请注意，我们修复的错误澄清了我们作用域工作的确切方式：在`{with {x 2} {with {x {+ x 2}} x}}`中，第一个`x`的作用域是`{+
    x 2}`表达式。）
- en: 'We then extended the AE evaluation rules:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们扩展了AE评估规则：
- en: '[PRE29]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: and noted the possible type problem.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并注意可能的类型问题。
- en: 'The above translated into a Racket definition for an `eval` function (with
    a hack to avoid the type issue):'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述内容被翻译为一个Racket定义的`eval`函数（通过一个小技巧来避免类型问题）：
- en: '[PRE30]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
