["```\n import torch\nfrom torch.autograd import Variable\n\nx_data = Variable(torch.Tensor([[1.0], [2.0], [3.0]]))\ny_data = Variable(torch.Tensor([[2.0], [4.0], [6.0]]))\n\nclass Model(torch.nn.Module):\n\n    def __init__(self):\n        \"\"\"\n        In the constructor we instantiate two nn.Linear module\n        \"\"\"\n        super(Model, self).__init__()\n        self.linear = torch.nn.Linear(1, 1)  # One in and one out\n\n    def forward(self, x):\n        \"\"\"\n        In the forward function we accept a Variable of input data and we must return\n        a Variable of output data. We can use Modules defined in the constructor as\n        well as arbitrary operators on Variables.\n        \"\"\"\n        y_pred = self.linear(x)\n        return y_pred\n\n# our model\nmodel = Model()\n\n# Construct our loss function and an Optimizer. The call to model.parameters()\n# in the SGD constructor will contain the learnable parameters of the two\n# nn.Linear modules which are members of the model.\ncriterion = torch.nn.MSELoss(size_average=False)\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\n# Training loop\nfor epoch in range(500):\n        # Forward pass: Compute predicted y by passing x to the model\n    y_pred = model(x_data)\n\n    # Compute and print loss\n    loss = criterion(y_pred, y_data)\n    print(epoch, loss.data[0])\n\n    # Zero gradients, perform a backward pass, and update the weights.\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n\n# After training\nhour_var = Variable(torch.Tensor([[4.0]]))\ny_pred = model(hour_var)\nprint(\"predict (after training)\",  4, model(hour_var).data[0][0]) \n```"]