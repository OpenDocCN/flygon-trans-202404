- en: Jestでテストを書こう
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/tutorials/jest](https://typescriptbook.jp/tutorials/jest)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: このチュートリアルでは、テストフレームワーク「Jest」を使い、ユニットテストをTypeScriptで書くことを学びます。
  prefs: []
  type: TYPE_NORMAL
- en: 本章で学べること[​](#本章で学べること "本章で学べること への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 本章では、簡単な関数のテストをJestで書くことを目標に、次のことを学びます。
  prefs: []
  type: TYPE_NORMAL
- en: Jestを使ってTypeScriptの関数をテストする方法
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jestの導入方法
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jestでのテストの書き方
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: テストの実行方法
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 結果の見方
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 本章の目的はJestを完全に理解することではありません。むしろ、Jestがどういったものなのか、その雰囲気を実際に体験することに主眼を置いています。そのため、内容はかなり最低限のものとなりますが、逆に言えば少しの時間でJestを試してみれるシンプルな内容にまとまってますから、ぜひ手を動かしてみてください。
  prefs: []
  type: TYPE_NORMAL
- en: Jestとは[​](#jestとは "Jestとは への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JestはJavaScriptのテストフレームワークです。TypeScriptでテストを書くこともできます。Jestは、フロントエンドライブラリのReactやVueなどのテストだけでなく、Node.js向けのパッケージのテストも行えます。要するに、JavaScriptやTypeScriptで書かれたコードであれば、そのほとんどはJestでテストが行えます。
  prefs: []
  type: TYPE_NORMAL
- en: このチュートリアルに必要なもの[​](#このチュートリアルに必要なもの "このチュートリアルに必要なもの への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: このチュートリアルで必要なものは次のとおりです。
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v16以上
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yarn v1系 (このチュートリアルはv1.22.19で動作確認しています)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.jsの導入については、[開発環境の準備](/tutorials/setup)をご覧ください。
  prefs: []
  type: TYPE_NORMAL
- en: パッケージ管理ツールとしてYarnを利用します。最初にインストールをしておきましょう。すでにインストール済みの方はここのステップはスキップして大丈夫です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: プロジェクトを作成する[​](#プロジェクトを作成する "プロジェクトを作成する への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: まず、このチュートリアルに使うプロジェクトを作成します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: プロジェクトルートにpackage.jsonを作ってください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: package.jsonの内容は次のようにします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: TypeScriptのインストール[​](#typescriptのインストール "TypeScriptのインストール への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: プロジェクトにTypeScriptをインストールします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 次に、tsconfig.jsonを生成します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Jestをインストールする[​](#jestをインストールする "Jestをインストールする への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jestをプロジェクトにインストールしましょう。インストールが必要なパッケージは、次の3つです。
  prefs: []
  type: TYPE_NORMAL
- en: jest
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ts-jest
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '@types/jest'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: これらのインストールは次のコマンドで、一度にインストールできます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`jest`はJest本体です。JavaScriptだけのプロジェクトであれば、このパッケージを入れるだけでテストが始められます。`ts-jest`は、JestをTypeScriptに対応させるためのものです。`ts-jest`を入れると、TypeScriptで書いたテストコードを、コンパイルの手間なしにそのまま実行できるようになります。`@types/jest`はJestのAPIの型定義ファイルです。TypeScriptの型情報を付与されるので、テストコードの型チェックが行えるようになります。'
  prefs: []
  type: TYPE_NORMAL
- en: Jestの設定ファイルを作る[​](#jestの設定ファイルを作る "Jestの設定ファイルを作る への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JestはそのままではTypeScriptを直接テストできません。なので、ここではJestでTypeScriptコードがテストできるように設定を加えます。
  prefs: []
  type: TYPE_NORMAL
- en: 次のコマンドを実行すると、Jestの設定ファイル`jest.config.js`が生成されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 生成された`jest.config.js`の内容は次のようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: この`@type`のコメントはエディターに型情報を与えるためのものです。これを書いておくことで、エディター上で入力補完が効くようになります。
  prefs: []
  type: TYPE_NORMAL
- en: チェックポイント[​](#チェックポイント "チェックポイント への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここまでに作成したファイルに漏れがないか確認しましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Jestが動くかを確認する[​](#jestが動くかを確認する "Jestが動くかを確認する への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここでは、実際のテストコードを書く前に、Jestでテストコードが実行できる状態になっているかを、動作確認用のテストファイルを作って確かめます。
  prefs: []
  type: TYPE_NORMAL
- en: Jestで実行できるテストファイルには命名規則があります。ファイル名が`.test.ts`または`.spec.ts`で終わるものが、テストファイルになります。動作確認用のファイルとして、`check.test.ts`を作ってください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`check.test.ts`の内容は次のようにします。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: ファイルを保存したら、`jest`コマンドを実行してみてください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: すると、次のような結果が出るはずです。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bdac84b6f7355986c11b24f13383ca70.png)'
  prefs: []
  type: TYPE_IMG
- en: 結果に`check.test.ts`が「PASS」と表示されていれば、テストファイルが実行されていることになります。
  prefs: []
  type: TYPE_NORMAL
- en: 問題なく実行されていることが確認できたら、`check.test.ts`は削除してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: このチュートリアルでテストする関数[​](#このチュートリアルでテストする関数 "このチュートリアルでテストする関数 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここからは、TypeScriptのテスト対象コードを書いて、それをテストしていきます。
  prefs: []
  type: TYPE_NORMAL
- en: 具体的には、次のような簡単な関数のテストを書くことを例に進めていきます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: この`isZero`関数は、数値がゼロかどうかを判定するものです。
  prefs: []
  type: TYPE_NORMAL
- en: テスト対象のファイルを作る[​](#テスト対象のファイルを作る "テスト対象のファイルを作る への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: まず、この関数を書いたファイルを作ります。ファイル名は`isZero.ts`にしてください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: このファイルを作ると、プロジェクトのファイル構成は次のようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`isZero.ts`の内容は次のようにします。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: このままでは`isZero`関数はテストできません。Jestでテストできるようにするには、関数をエクスポートする必要があります。関数をエクスポートするために、`function`の前に`export`キーワードを追加してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: テストコードを書く[​](#テストコードを書く "テストコードを書く への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 上の`isZero`関数をテストするコードを書きます。
  prefs: []
  type: TYPE_NORMAL
- en: Jestではテストコードはテスト対象と別のファイルに書きます。テストファイルを作りましょう。ファイル名は、テストしたいファイル名に、`.test.ts`をつけたものにします。テスト対象ファイルが`isZero.ts`なので、ここでは`isZero.test.ts`というファイル名にします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: このファイルを作ると、プロジェクトのファイル構成は次のようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: テスト対象の関数をテストコードで扱うには、まず関数をインポートする必要があります。`import`文を使って、`isZero`関数を読み込みましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 次に、1つ目のテストケースを追加します。このテストケースは、`isZero`関数に`0`を渡したら`true`が返るかをチェックするものです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Jestでは`expect`関数とマッチャーを使い、結果が期待する値になっているかを記述します。マッチャーは、`expect`関数の戻り値に生えているメソッドです。上の例では、`toBe`がマッチャーになります。このメソッドの引数には期待値を書きます。上のテストケースでは、`true`が期待値なので、`toBe(true)`と記述しています。
  prefs: []
  type: TYPE_NORMAL
- en: '`toBe`マッチャーは、JavaScriptの厳密等価比較(`===`)と同じです。したがって、`expect(result).toBe(true)`は内部的に`result
    === true`かを評価します。もし、この評価が真なら、テストは合格します。逆に、偽ならテストは不合格となります。'
  prefs: []
  type: TYPE_NORMAL
- en: マッチャーは、`toBe`以外にもさまざまなものがあります。このチュートリアルでは細かく解説しないので、詳しく知りたい方は、[公式ドキュメントのリファレンス](https://jestjs.io/ja/docs/expect)をご覧ください。
  prefs: []
  type: TYPE_NORMAL
- en: テストを実行する[​](#テストを実行する "テストを実行する への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1つ目のテストケースができたので、Jestでテストを実行してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: テスト結果は次のように表示されていれば、テストの実行ができています。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3d3089db01fb51193bdfd98b3c188715.png)'
  prefs: []
  type: TYPE_IMG
- en: テストケースを追加する[​](#テストケースを追加する "テストケースを追加する への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: さらにテストケースを追加してみましょう。今度は、`isZero`関数に`1`を渡して、戻り値が`false`になるかをチェックするケースを追加します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: テストケースを追加したら、再びJestを実行し、テストコードを走らせます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 今度は次のような結果になるはずです。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d865a436ba77eb45bb9a482e619de710.png)'
  prefs: []
  type: TYPE_IMG
- en: 以上でJestを体験してみるチュートリアルは完了です。
  prefs: []
  type: TYPE_NORMAL
