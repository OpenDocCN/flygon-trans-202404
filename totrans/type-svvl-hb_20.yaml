- en: Jestでテストを書こう
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jestでテストを書こう
- en: 原文：[https://typescriptbook.jp/tutorials/jest](https://typescriptbook.jp/tutorials/jest)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tutorials/jest](https://typescriptbook.jp/tutorials/jest)
- en: このチュートリアルでは、テストフレームワーク「Jest」を使い、ユニットテストをTypeScriptで書くことを学びます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: このチュートリアルでは、テストフレームワーク「Jest」を使い、ユニットテストをTypeScriptで書くことを学びます。
- en: 本章で学べること[​](#本章で学べること "本章で学べること への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本章で学べること[​](#本章で学べること "本章で学べること への直接リンク")
- en: 本章では、簡単な関数のテストをJestで書くことを目標に、次のことを学びます。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章では、簡単な関数のテストをJestで書くことを目標に、次のことを学びます。
- en: Jestを使ってTypeScriptの関数をテストする方法
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jestを使ってTypeScriptの関数をテストする方法
- en: Jestの導入方法
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jestの導入方法
- en: Jestでのテストの書き方
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jestでのテストの書き方
- en: テストの実行方法
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: テストの実行方法
- en: 結果の見方
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 結果の見方
- en: 本章の目的はJestを完全に理解することではありません。むしろ、Jestがどういったものなのか、その雰囲気を実際に体験することに主眼を置いています。そのため、内容はかなり最低限のものとなりますが、逆に言えば少しの時間でJestを試してみれるシンプルな内容にまとまってますから、ぜひ手を動かしてみてください。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章の目的はJestを完全に理解することではありません。むしろ、Jestがどういったものなのか、その雰囲気を実際に体験することに主眼を置いています。そのため、内容はかなり最低限のものとなりますが、逆に言えば少しの時間でJestを試してみれるシンプルな内容にまとまってますから、ぜひ手を動かしてみてください。
- en: Jestとは[​](#jestとは "Jestとは への直接リンク")
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jestとは[​](#jestとは "Jestとは への直接リンク")
- en: JestはJavaScriptのテストフレームワークです。TypeScriptでテストを書くこともできます。Jestは、フロントエンドライブラリのReactやVueなどのテストだけでなく、Node.js向けのパッケージのテストも行えます。要するに、JavaScriptやTypeScriptで書かれたコードであれば、そのほとんどはJestでテストが行えます。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: JestはJavaScriptのテストフレームワークです。TypeScriptでテストを書くこともできます。Jestは、フロントエンドライブラリのReactやVueなどのテストだけでなく、Node.js向けのパッケージのテストも行えます。要するに、JavaScriptやTypeScriptで書かれたコードであれば、そのほとんどはJestでテストが行えます。
- en: このチュートリアルに必要なもの[​](#このチュートリアルに必要なもの "このチュートリアルに必要なもの への直接リンク")
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: この���ュートリアルに��要なもの[​](#このチュートリアルに必要なもの "このチュートリアルに必要なもの への直接リンク")
- en: このチュートリアルで必要なものは次のとおりです。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: このチュートリアルで必要なものは次のとおりです。
- en: Node.js v16以上
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js v16以上
- en: Yarn v1系 (このチュートリアルはv1.22.19で動作確認しています)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yarn v1系 (このチュートリアルはv1.22.19で動作確認しています)
- en: Node.jsの導入については、[開発環境の準備](/tutorials/setup)をご覧ください。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Node.jsの導入については、[開発環境の準備](/tutorials/setup)をご覧ください。
- en: パッケージ管理ツールとしてYarnを利用します。最初にインストールをしておきましょう。すでにインストール済みの方はここのステップはスキップして大丈夫です。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: パッケージ管理ツールとしてYarnを利用します。最初にインストールをしておきましょう。すでにインストール済みの方はここのステップはスキップして大丈夫です。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: プロジェクトを作成する[​](#プロジェクトを作成する "プロジェクトを作成する への直接リンク")
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: プロジェクトを作成する[​](#プロジェクトを作成する "プロジェクトを作成する への直接リンク")
- en: まず、このチュートリアルに使うプロジェクトを作成します。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: まず、このチュートリアルに使うプロジェクトを作成します。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: プロジェクトルートにpackage.jsonを作ってください。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: プロジェクトルートにpackage.jsonを作ってください。
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: package.jsonの内容は次のようにします。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: package.jsonの内容は次のようにします。
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: TypeScriptのインストール[​](#typescriptのインストール "TypeScriptのインストール への直接リンク")
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TypeScriptのインストール[​](#typescriptのインストール "TypeScriptのインストール への直接リンク")
- en: プロジェクトにTypeScriptをインストールします。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: プロジェクトにTypeScriptをインストールします。
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 次に、tsconfig.jsonを生成します。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 次に、tsconfig.jsonを生成します。
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Jestをインストールする[​](#jestをインストールする "Jestをインストールする への直接リンク")
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jestをインストールする[​](#jestをインストールする "Jestをインストールする への直接リンク")
- en: Jestをプロジェクトにインストールしましょう。インストールが必要なパッケージは、次の3つです。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Jestをプロジェクトにインストールしましょう。インストールが必要なパッケージは、次の3つです。
- en: jest
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: jest
- en: ts-jest
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ts-jest
- en: '@types/jest'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '@types/jest'
- en: これらのインストールは次のコマンドで、一度にインストールできます。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: これらのインストールは次のコマンドで、一度にインストールできます。
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`jest`はJest本体です。JavaScriptだけのプロジェクトであれば、このパッケージを入れるだけでテストが始められます。`ts-jest`は、JestをTypeScriptに対応させるためのものです。`ts-jest`を入れると、TypeScriptで書いたテストコードを、コンパイルの手間なしにそのまま実行できるようになります。`@types/jest`はJestのAPIの型定義ファイルです。TypeScriptの型情報を付与されるので、テストコードの型チェックが行えるようになります。'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`jest`はJest本体です。JavaScriptだけのプロジェクトであれば、このパッケージを入れるだけでテストが始められます。`ts-jest`は、JestをTypeScriptに対応させるためのものです。`ts-jest`を入れると、TypeScriptで書いたテストコードを、コンパイルの手間なしにそのまま実行できるようになります。`@types/jest`はJestのAPIの型定義ファイルです。TypeScriptの型情報を付与されるので、テストコードの型チェックが行えるようになります。'
- en: Jestの設定ファイルを作る[​](#jestの設定ファイルを作る "Jestの設定ファイルを作る への直接リンク")
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jestの設定ファイルを作る[​](#jestの設定ファイルを作る "Jestの設定ファイルを作る への直接リンク")
- en: JestはそのままではTypeScriptを直接テストできません。なので、ここではJestでTypeScriptコードがテストできるように設定を加えます。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: JestはそのままではTypeScriptを直接テストできません。なので、ここではJestでTypeScriptコードがテストできるように設定を加えます。
- en: 次のコマンドを実行すると、Jestの設定ファイル`jest.config.js`が生成されます。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコマンドを実行すると、Jestの設定ファイル`jest.config.js`が生成されます。
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 生成された`jest.config.js`の内容は次のようになります。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 生成された`jest.config.js`の内容は次のようになります。
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: この`@type`のコメントはエディターに型情報を与えるためのものです。これを書いておくことで、エディター上で入力補完が効くようになります。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: この`@type`のコメントはエディターに型情報を与えるためのものです。これを書いておくことで、エディター上で入力補完が効くようになります。
- en: チェックポイント[​](#チェックポイント "チェックポイント への直接リンク")
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: チェックポイント[​](#チェックポイント "チェックポイント への直接リンク")
- en: ここまでに作成したファイルに漏れがないか確認しましょう。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ここまでに作成したファイルに漏れがないか確認しましょう。
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Jestが動くかを確認する[​](#jestが動くかを確認する "Jestが動くかを確認する への直接リンク")
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jestが動くかを確認する[​](#jestが動くかを確認する "Jestが動くかを確認する への直接リンク")
- en: ここでは、実際のテストコードを書く前に、Jestでテストコードが実行できる状態になっているかを、動作確認用のテストファイルを作って確かめます。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ここでは、実際のテストコードを書く前に、Jestでテストコードが実行できる状態になっているかを、動作確認用のテストファイルを作って確かめます。
- en: Jestで実行できるテストファイルには命名規則があります。ファイル名が`.test.ts`または`.spec.ts`で終わるものが、テストファイルになります。動作確認用のファイルとして、`check.test.ts`を作ってください。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Jestで実行できるテストファイルには命名規則があります。ファイル名が`.test.ts`または`.spec.ts`で終わるものが、テストファイルになります。動作確認用のファイルとして、`check.test.ts`を作ってください。
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`check.test.ts`の内容は次のようにします。'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`check.test.ts`の内容は次のようにします。'
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: ファイルを保存したら、`jest`コマンドを実行してみてください。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ファイルを保存したら、`jest`コマンドを実行してみてください。
- en: '[PRE24]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: すると、次のような結果が出るはずです。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: すると、次のような結果が出るはずです。
- en: '![](../Images/bdac84b6f7355986c11b24f13383ca70.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bdac84b6f7355986c11b24f13383ca70.png)'
- en: 結果に`check.test.ts`が「PASS」と表示されていれば、テストファイルが実行されていることになります。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 結果に`check.test.ts`が「PASS」と表示されていれば、テストファイルが実行されていることになります。
- en: 問題なく実行されていることが確認できたら、`check.test.ts`は削除してください。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 問題なく実行されていることが確認できたら、`check.test.ts`は削除してください。
- en: '[PRE26]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: このチュートリアルでテストする関数[​](#このチュートリアルでテストする関数 "このチュートリアルでテストする関数 への直接リンク")
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: このチュートリアルでテストする関数[​](#このチュートリアルでテストする関数 "このチュートリアルでテストする関数 への直接リンク")
- en: ここからは、TypeScriptのテスト対象コードを書いて、それをテストしていきます。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ここからは、TypeScriptのテスト対象コードを書いて、それをテストしていきます。
- en: 具体的には、次のような簡単な関数のテストを書くことを例に進めていきます。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 具体的には、次のような簡単な関数のテストを書くことを例に進めていきます。
- en: '[PRE28]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: この`isZero`関数は、数値がゼロかどうかを判定するものです。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: この`isZero`関数は、数値がゼロかどうかを判定するものです。
- en: テスト対象のファイルを作る[​](#テスト対象のファイルを作る "テスト対象のファイルを作る への直接リンク")
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: テスト対象のファイルを作る[​](#テスト対象のファイルを作る "テスト対象のファイルを作る への直接リンク")
- en: まず、この関数を書いたファイルを作ります。ファイル名は`isZero.ts`にしてください。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: まず、この関数を書いたファイルを作ります。ファイル名は`isZero.ts`にしてください。
- en: '[PRE30]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: このファイルを作ると、プロジェクトのファイル構成は次のようになります。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: このファイルを作ると、プロジェクトのファイル構成は次のようになります。
- en: '[PRE32]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`isZero.ts`の内容は次のようにします。'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`isZero.ts`の内容は次のようにします。'
- en: '[PRE34]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: このままでは`isZero`関数はテストできません。Jestでテストできるようにするには、関数をエクスポートする必要があります。関数をエクスポートするために、`function`の前に`export`キーワードを追加してください。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: このままでは`isZero`関数はテストできません。Jestでテストできるようにするには、関数をエクスポートする必要があります。関数をエクポートするために、`function`の前に`export`キーワードを追加してください。
- en: '[PRE36]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: テストコードを書く[​](#テストコードを書く "テストコードを書く への直接リンク")
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: テストコードを書く[​](#テストコードを書く "テストコードを書く への直接リンク")
- en: 上の`isZero`関数をテストするコードを書きます。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上の`isZero`関数をテストするコードを書きます。
- en: Jestではテストコードはテスト対象と別のファイルに書きます。テストファイルを作りましょう。ファイル名は、テストしたいファイル名に、`.test.ts`をつけたものにします。テスト対象ファイルが`isZero.ts`なので、ここでは`isZero.test.ts`というファイル名にします。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Jestではテストコードはテスト対象と別のファイルに書きます。テストファイルを作りましょう。ファイル名は、テストしたいファイル名に、`.test.ts`をつけたものにします。テスト対象ファイルが`isZero.ts`なので、ここでは`isZero.test.ts`というファイル名��します。
- en: '[PRE38]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: このファイルを作ると、プロジェクトのファイル構成は次のようになります。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: このファイルを作ると、プロジェクトのファイル構成は次のようになります。
- en: '[PRE40]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: テスト対象の関数をテストコードで扱うには、まず関数をインポートする必要があります。`import`文を使って、`isZero`関数を読み込みましょう。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: テスト対象の関数をテストコードで扱うには、まず関数をインポートする必要があります。`import`文を使って、`isZero`関数を読み込みましょう。
- en: '[PRE42]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 次に、1つ目のテストケースを追加します。このテストケースは、`isZero`関数に`0`を渡したら`true`が返るかをチェックするものです。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 次に、1つ目のテストケースを追加します。このテストケースは、`isZero`関数に`0`を渡したら`true`が返るかをチェックするものです。
- en: '[PRE44]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Jestでは`expect`関数とマッチャーを使い、結果が期待する値になっているかを記述します。マッチャーは、`expect`関数の戻り値に生えているメソッドです。上の例では、`toBe`がマッチャーになります。このメソッドの引数には期待値を書きます。上のテストケースでは、`true`が期待値なので、`toBe(true)`と記述しています。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Jestでは`expect`関数とマッチャーを使い、結果が期待する値になっているかを記述します。マッチャーは、`expect`関数の戻り値に生えているメソッドです。上の例では、`toBe`がマッチャーになります。このメソッドの引数には期待値を書きます。上のテストケースでは、`true`が期待値なので、`toBe(true)`と記述しています。
- en: '`toBe`マッチャーは、JavaScriptの厳密等価比較(`===`)と同じです。したがって、`expect(result).toBe(true)`は内部的に`result
    === true`かを評価します。もし、この評価が真なら、テストは合格します。逆に、偽ならテストは不合格となります。'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`toBe`マッチャーは、JavaScriptの厳密等価比較(`===`)と同じです。したがって、`expect(result).toBe(true)`は内部的に`result
    === true`かを評価します。もし、この評価が真なら、テストは合格します。逆に、偽ならテストは不合格となります。'
- en: マッチャーは、`toBe`以外にもさまざまなものがあります。このチュートリアルでは細かく解説しないので、詳しく知りたい方は、[公式ドキュメントのリファレンス](https://jestjs.io/ja/docs/expect)をご覧ください。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: マッチャーは、`toBe`以外にもさまざまなものがあります。このチュートリアルでは細かく解説しないので、詳しく知りたい方は、[公式ドキュメントのリファレンス](https://jestjs.io/ja/docs/expect)をご覧ください。
- en: テストを実行する[​](#テストを実行する "テストを実行する への直接リンク")
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: テストを実行する[​](#テストを実行する "テストを実行する への直接リンク")
- en: 1つ目のテストケースができたので、Jestでテストを実行してみましょう。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 1つ目のテストケースができたので、Jestでテストを実行してみましょう。
- en: '[PRE46]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: テスト結果は次のように表示されていれば、テストの実行ができています。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: テスト結果は次のように表示されていれば、テストの実行ができています。
- en: '![](../Images/3d3089db01fb51193bdfd98b3c188715.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3d3089db01fb51193bdfd98b3c188715.png)'
- en: テストケースを追加する[​](#テストケースを追加する "テストケースを追加する への直接リンク")
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: テストケースを追加する[​](#テストケースを追加する "テストケースを追加する への直接リンク")
- en: さらにテストケースを追加してみましょう。今度は、`isZero`関数に`1`を渡して、戻り値が`false`になるかをチェックするケースを追加します。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: さらにテストケースを追加してみましょう。今度は、`isZero`関数に`1`を渡して、戻り値が`false`になるかをチェックするケースを追加します。
- en: '[PRE48]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: テストケースを追加したら、再びJestを実行し、テストコードを走らせます。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: テストケースを追加したら、再びJestを実行し、テストコードを走らせます。
- en: '[PRE50]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 今度は次のような結果になるはずです。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 今度は次のような結果になるはずです。
- en: '![](../Images/d865a436ba77eb45bb9a482e619de710.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d865a436ba77eb45bb9a482e619de710.png)'
- en: 以上でJestを体験してみるチュートリアルは完了です。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以上でJestを体験してみるチュートリアルは完了です。
