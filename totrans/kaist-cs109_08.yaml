- en: Arrays and two-dimensional arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Arrays are the most fundamental data type to store many elements, and are implemented
    directly by the virtual machine (by contrast, (mutable) lists are implemented
    in a library, using an array to store the elements).
  prefs: []
  type: TYPE_NORMAL
- en: You can think of an array as a mutable list of fixed size—that is, you cannot
    add or remove elements. Once created, the size of an array stays the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like lists, arrays can be created by listing the elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'They support most of the methods available for mutable lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that printing an array directly does not list the elements nicely as happens
    for List or MutableList.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you want to create a large array, or an array whose size you have somehow
    computed, you cannot list the initial elements. Instead, you provide the number
    of elements, and a piece of code that computes the value of the element. This
    piece of code can make use of the magic variable it which gives the index of the
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There is usually no good reason to use an array instead of a (mutable) list.
    However, the args variable that provides the command line arguments to a Kotlin
    script, is actually an array, of type Array<String>.
  prefs: []
  type: TYPE_NORMAL
- en: Two-dimensional arrays
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another opportunity to use arrays is when you need a two-dimensional storage
    area, for instance to represent a board in a game. A two-dimensional array uses
    two indices, often called row and column, to acces \(m \times n\) elements. It
    is implemented by making one array for each row (these arrays are indexed by the
    column number), and then one array (indexed by the row number) to store the rows.
    (One could do the same with lists, but that would waste quite a bit of storage.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example creates a two-dimensional array with 5 rows and 8 columns,
    filled with zeroes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The type of b is Array<Array<Int>>. We access its elements using row and column
    number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Since b itself is the array storing the rows, we can get the number of rows
    as b.size. The number of columns is the length of each element of b, for instance
    b[0].size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You will need to write a function to display the board nicely. For debugging,
    something like the following will be good enough:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
