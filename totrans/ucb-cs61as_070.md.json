["```\ncp ~cs61as/autograder/templates/hw5.rkt . \n```", "```\n(define x (list 1 2 3))\n(define y (list 4 5 6)) \n```", "```\n(append x y)\n(cons x y)\n(list x y) \n```", "```\n(define (make-mobile left right)\n    (list left right)) \n```", "```\n(define (make-branch len structure)\n    (list len structure)) \n```", "```\n(define (make-mobile left right) (cons left right))\n(define (make-branch len structure)\n  (cons len structure)) \n```", "```\n> (square-tree (list 1 (list 2 (list 3 4) 5) (list 6 7)))\n(1 (4 (9 16) 25) (36 49)) \n```", "```\n(define (accumulate-n op init seqs)\n  (if (null? (car seqs))\n      '()\n      (cons (accumulate op init <??>)\n            (accumulate-n op init <??>)))) \n```", "```\n(define (dot-product v w)\n    (accumulate + 0 (map * v w))) \n```", "```\n(define (matrix-*-vector m v)\n  (map <??> m))\n\n(define (transpose mat)\n  (accumulate-n <??> <??> mat))\n\n(define (matrix-*-matrix m n)\n  (let ((cols (transpose n)))\n    (map <??> m))) \n```", "```\n(define (fold-left op initial sequence)\n    (define (iter result rest)\n        (if (null? rest)\n            result\n            (iter (op result (car rest))\n                  (cdr rest))))\n    (iter initial sequence)) \n```", "```\n(fold-right / 1 (list 1 2 3))\n(fold-left / 1 (list 1 2 3))\n(fold-right list nil (list 1 2 3))\n(fold-left list nil (list 1 2 3)) \n```", "```\n(equal? '(this is a list) '(this is a list)) \n```", "```\n(equal? '(this is a list) '(this (is a) list)) \n```", "```\n(define (subsets s)\n  (if (null? s)\n      (list nil)\n      (let ((rest (subsets (cdr s))))\n        (append rest (map <??> rest))))) \n```", "```\ncalc: foo\nfoo\ncalc: (first foo)\nf\ncalc: (first (butfirst hello))\ne \n```", "```\n> (define pairup (regroup '((1 2) (3 4) ...)))\n> (pairup '(the rain in spain stays mainly on the plain))\n((the rain) (in spain) (stays mainly) (on the)) \n```"]