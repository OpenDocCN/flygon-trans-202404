- en: Chapter 2 - Document Nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 2.1  *document*  node overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *HTMLDocument* constructor (which inherits from *document*) when instantiated
    represents specifically a *DOCUMENT_NODE* (i.e. *window.document*) in the DOM.
    To verify this we can simply ask which constructor was used in the creation of
    the *document* node object.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/qRAzL](http://jsfiddle.net/domenlightenment/qRAzL)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The code above concludes that the *HTMLDocument* constructor function constructs
    the *window.document* node object and that this node is a *DOCUMENT_NODE* object.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both *Document* and *HTMLDocument* constructors are typically instantiated by
    the browser when you load an HTML document. However, using *document.implementation.createHTMLDocument()*
    its possible to create your own HTML document outside of the one currently loaded
    into the browser. In addtion to *createHTMLDocument()* its also possible to create
    a document object which has yet to be setup as an HTML document using *createDocument()*.
    Typically the use of theses methods are associated with programatically providing
    an HTML document to an iframe.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 *HTMLDocument* properties and methods (including inherited)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get accurate information pertaining to the available properties and methods
    on an *HTMLDocument* node its best to ignore the specification and to ask the
    browser what is available. Examine the arrays created in the code below detailing
    the properties and methods available from an *HTMLDocument* node (a.k.a. *window.document*)
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/jprPe](http://jsfiddle.net/domenlightenment/jprPe)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The available properties are many even if the inherited properties were not
    considered. Below I've hand pick a list of noteworthy properties and methods for
    the context of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '*doctype*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*documentElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*implementation*.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*activeElement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*body*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*head*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*title*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*lastModified*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*referrer*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*URL*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*defaultview*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*compatMode*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ownerDocument*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*hasFocus()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *HTMLDocument* node object is used to access (typically inherit) a great
    deal of the methods and properties available for working with the DOM (i.e. *document.querySelectorAll()*).
    You will be seeing many of these properties not discussed in this chapter discussed
    in the appropriate chapter's following this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Getting general HTML document information (title, url, referrer, lastModified,
    compatMode)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *document* object provides access to some general information about the
    HTML document/DOM being loaded. In the code below I use the *document.title*,
    *document.URL*, *document.referrer*, *document.lastModified*, and *document.compatMode*
    properties to gain some general information about the *document*. Based on the
    property name the returned values should be obvious.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/pX8Le](http://jsfiddle.net/domenlightenment/pX8Le)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 2.4 *document* child nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Document* nodes can contain one *DocumentType* node object and one *Element*
    node object. This should not be a surprise since HTML documents typically contain
    only one doctype (e.g. *<!DOCTYPE html>*) and one element (e.g. *<html lang="en">*).
    Thus if you ask for the children (e.g. *document.childNodes*) of the *Document*
    object you will get an array containing at the very least the documents doctype/DTD
    and *<html lang="en">* element. The code below showcases that *window.document*
    is a type of node object (i.e *Document*) with child nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/UasKc](http://jsfiddle.net/domenlightenment/UasKc)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't confuse the *window.document* object created from *HTMLDocument* constructor
    with the *Document* object. Just remember *window.document* is the starting point
    for the DOM interface. That is why *document.childNodes* contains child nodes.
  prefs: []
  type: TYPE_NORMAL
- en: If a comment node (not discussed in this book) is made outside of the *<html
    lang="en">* element then it will become a child node of the *window.document*.
    However having comment nodes outside of the <html> element can cause some buggy
    results in IE and also is a violation of the DOM specification.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 *document* provides shortcuts to *<!DOCTYPE>*, *<html lang="en">*, *<head>*,
    and *<body>*
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the properties listed below we can get a shortcut reference to the following
    nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*document.doctype* refers to *<!DOCTYPE>Â *'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*document.documentElement* refers to *<html lang="en">*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*document.head* refers to *<head>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*document.body* refers to *<body>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is demonstrated in the code below.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/XsSTM](http://jsfiddle.net/domenlightenment/XsSTM)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*### Notes'
  prefs: []
  type: TYPE_NORMAL
- en: The doctype or DTD is a *nodeType* of 10 or *DOCUMENT_TYPE_NODE* and should
    not be confused with the *DOCUMENT_NODE* (aka *window.document* constructed from
    *HTMLDocument()*). The doctype is constructed from the *DocumentType()* constructor.
  prefs: []
  type: TYPE_NORMAL
- en: In Safari, Chrome, and Opera the *document.doctype* does not appear in the *document.childNodes*
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 2.6 Detecting DOM specifications/features using *document.implementation.hasFeature()*
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Its possible using *document.implementation.hasFeature()* to ask (boolean) the
    current document what feature and level the browser has implemented/supports.
    For example we can ask if the browser has implemented the core DOM level 3 specification
    by passing the name of the feature and the version to the *hasFeature()* method.
    In the code below I ask if the browser has implemented the Core 2.0 & 3.0 specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/TYYZ6](http://jsfiddle.net/domenlightenment/TYYZ6)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**The following table defines the features ([spec calls these modules](http://www.w3.org/TR/DOM-Level-2-Core/introduction.html#ID-Conformance))
    and versions that you can pass the *hasFeature()* method.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature | Supported Versions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Core | 1.0, 2.0, 3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| XML | 1.0, 2.0, 3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| HTML | 1.0, 2.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Views | 2.0 |'
  prefs: []
  type: TYPE_TB
- en: '| StyleSheets | 2.0 |'
  prefs: []
  type: TYPE_TB
- en: '| CSS | 2.0 |'
  prefs: []
  type: TYPE_TB
- en: '| CSS2 | 2.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Events | 2.0, 3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| UIEvents | 2.0, 3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| MouseEvents | 2.0, 3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| MutationEvents | 2.0, 3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| HTMLEvents | 2.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Range | 2.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Traversal | 2.0 |'
  prefs: []
  type: TYPE_TB
- en: '| LS (Loading and saving between files and DOM trees synchronously) | 3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| LS-Asnc (Loading and saving between files and DOM trees asynchronously) |
    3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Validation | 3.0 |'
  prefs: []
  type: TYPE_TB
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't trust *hasFeature()* alone you should also use [capability detection](http://dev.opera.com/articles/view/using-capability-detection/)
    in addition to *hasFeature()*.
  prefs: []
  type: TYPE_NORMAL
- en: Using the *isSupported* method implementation information can be gathered for
    a specific/selected node only (i.e. *element.isSupported(feature,version*).
  prefs: []
  type: TYPE_NORMAL
- en: You can determince online what a user agent supports by visiting [http://www.w3.org/2003/02/06-dom-support.html](http://www.w3.org/2003/02/06-dom-support.html).
    Here you will find a table indicating what the browser loading the url claims
    to implement.
  prefs: []
  type: TYPE_NORMAL
- en: 2.7 Get a reference to the focus/active node in the *document*
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *document.activeElement* we can quickly get a reference to the node
    in the document that is focused/active. In the code below, on page load, I am
    setting the focus of the document to the *<textarea>* node and then gaining a
    reference to that node using the *activeElement* property.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/N9npb](http://jsfiddle.net/domenlightenment/N9npb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The focused/active element returns elements that have the ability to be focused.
    If you visit a web page in a browser and start hitting the tab key you will see
    focus shifting from element to element in that page that can get focused. Don't
    confuse the selection of nodes (highlight sections of the HTML page with mouse)
    with elements that get focus for the purpose of inputting something with keystrokes,
    spacebar, or mouse.
  prefs: []
  type: TYPE_NORMAL
- en: 2.8 Determing if the *document* or any node inside of the *document* has focus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the document.hasFocus() method its possible to know if the user currently
    is focused on the window that has the HTML document loaded. In the code below
    you see that if we execute the code and then focus another window, tabe, or application
    all together the *getFocus()* will return false.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/JkE3d](http://jsfiddle.net/domenlightenment/JkE3d)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '***## 2.9 *document.defaultview* is a shortcut to the head/global object'
  prefs: []
  type: TYPE_NORMAL
- en: You should be aware that the *defaultView* property is a shortcut to the JavaScript
    head object or what some refer to as the global object. The head object in a web
    browser is the *window* object and *defaultView* will point to this object in
    a JavaScript browser enviroment. The code below demonstrates the value of *defaultView*
    in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/QqK6Q](http://jsfiddle.net/domenlightenment/QqK6Q)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you are dealing with a DOM that is headless or an JavaScript enviroment that
    is not running in a web browser (i.e. [node.js](http://nodejs.org/)) this property
    can get you access to the head object scope.
  prefs: []
  type: TYPE_NORMAL
- en: 2.9 Getting a reference to the *Document* from an *element* using *ownerDocument*
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *ownerDocument* property when called on a node returns a reference to the
    *Document* the node is contained within. In the code below I get a reference to
    the *Document* of the *<body>* in the HTML document and the *Document* node for
    the *<body>* element contained inside of the iframe.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: N/A'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If *ownerDocument* is called on the *Document* node the value returned is *null*.******
  prefs: []
  type: TYPE_NORMAL
