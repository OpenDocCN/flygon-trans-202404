- en: 5From Tables to Lists
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从表格到列表
- en: '|     [5.1 Basic Statistical Questions](#%28part._table-stat-qs%29) |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|     [5.1 基本统计问题](#%28part._table-stat-qs%29) |'
- en: '|     [5.2 Extracting a Column from a Table](#%28part._.Extracting_a_.Column_from_a_.Table%29)
    |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|     [5.2 从表中提取列](#%28part._.Extracting_a_.Column_from_a_.Table%29) |'
- en: '|     [5.3 Understanding Lists](#%28part._.Understanding_.Lists%29) |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|     [5.3 理解列表](#%28part._.Understanding_.Lists%29) |'
- en: '|       [5.3.1 Lists as Anonymous Data](#%28part._lists-generic-data%29) |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|       [5.3.1 列表作为匿名数据](#%28part._lists-generic-data%29) |'
- en: '|       [5.3.2 Creating Literal Lists](#%28part._.Creating_.Literal_.Lists%29)
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|       [5.3.2 创建文字列表](#%28part._.Creating_.Literal_.Lists%29) |'
- en: '|     [5.4 Operating on Lists](#%28part._.Operating_on_.Lists%29) |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|     [5.4 列表操作](#%28part._.Operating_on_.Lists%29) |'
- en: '|       [5.4.1 Built-In Operations on Lists](#%28part._.Built-.In_.Operations_on_.Lists%29)
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|       [5.4.1 列表的内置操作](#%28part._.Built-.In_.Operations_on_.Lists%29) |'
- en: '|       [5.4.2 Combining Lists and Tables](#%28part._.Combining_.Lists_and_.Tables%29)
    |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|       [5.4.2 列表与表的组合](#%28part._.Combining_.Lists_and_.Tables%29) |'
- en: Previously [[Introduction to Tabular Data](intro-tabular-data.html)] we began
    to process collective data in the form of tables. Though we saw several powerful
    operations that let us quickly and easily ask sophisticated questions about our
    data, they all had two things in commmon. First, all were operations by rows.
    None of the operations asked questions about an entire column at a time. Second,
    all the operations not only consumed but also produced tables. However, we already
    know [[Basic Data and Expressions](basic-data-expr.html)] there are many other
    kinds of data, and sometimes we will want to compute one of them. We will now
    see how to achieve both of these things, introducing an important new type of
    data in the process.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 之前[[介绍表格数据](intro-tabular-data.html)]，我们开始处理表格形式的集体数据。虽然我们看到了几个强大的操作，让我们能够快速轻松地对数据提出复杂的问题，但它们都有两个共同点。首先，所有的操作都是按行进行的。没有任何一个操作是针对整个列提出的问题。其次，所有的操作不仅消耗，而且产生表格。然而，我们已经知道[[基本数据和表达式](basic-data-expr.html)]，还有许多其他类型的数据，有时我们会想要计算其中的一个。我们现在将看到如何实现这两个目标，并在此过程中介绍一个重要的新数据类型。
- en: 5.1Basic Statistical Questions
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.1基本统计问题
- en: 'There are many more questions we might want to ask of our data. For instance:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还想问很多其他问题。例如：
- en: The most-played song in a playlist, which translates to the maximum value in
    a column of play counts.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放次数列中播放次数最多的歌曲，这相当于播放次数列中的最大值。
- en: The largest file in a filesystem, which translates to the maximum value in a
    column of file sizes.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统中最大的文件，这相当于文件大小列中的最大值。
- en: The shortest person in a table of people, which translates to the smallest value
    in a column of heights.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人员表中最矮的人，这相当于身高列中的最小值。
- en: The most-played song in a playlist, which translates to the smallest value in
    a column of play counts.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放列表中播放次数最多的歌曲，这相当于播放次数列中最小值的情况。
- en: The number of songs in a playlist. (This is arguably a question about all the
    columns combined, not any one specific column, since they all have the same number
    of entries.)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放列表中的歌曲数量。（这可能是关于所有列合并的问题，而不是任何一个特定列的问题，因为它们都具有相同数量的条目。）
- en: All the distinct entries in the play-counts column. (This, naturally, is a question
    about a specific column, because the number of distinct entries will differ depending
    on the column.)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放次数列中的所有不同条目。（显然，这是关于特定列的问题，因为不同条目的数量会根据列而异。）
- en: The number of distinct entries in the play-counts column.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放次数列中不同条目的数量。
- en: The average in a column of wages.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 薪水列中的平均值。
- en: Other statistics (the median, mode, standard deviation, etc.) in a column of
    heights.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身高列中的其他统计数据（中位数、众数、标准差等）。
- en: 'Notice the kinds of operations that we are talking about: computing the maximum,
    minimum, average, median, and other basic statistics.Pyret has several built-in
    [statistics functions](http://www.pyret.org/docs/latest/statistics.html).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们谈论的操作类型：计算最大值、最小值、平均值、中位数和其他基本统计数据。Pyret有几个内置的[统计函数](http://www.pyret.org/docs/latest/statistics.html)。
- en: Do Now!
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就行动！
- en: ''
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Think about whether and how you would express these questions with the operations
    you have already seen.
  id: totrans-24
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 想想你是否以及如何使用已经学过的操作来表达这些问题。
- en: 5.2Extracting a Column from a Table
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.2从表中提取列
- en: 'Hopefully you found select attractive, because it gives us a column in isolation:
    e.g.,'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得select很有吸引力，因为它使我们能够单独获得一列：例如，
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But in the end we’re still stuck with a column in a table, and none of the other
    operations let us compute the answers we’re looking for. Therefore, there is no
    (straightforward) way to express these questions at all, because they require
    us to be perform a computation looking at the values of a table relative to one
    another, rather than in isolation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但最终我们仍然卡在表格的一列上，并且其他操作都无法计算我们正在寻找的答案。因此，根本没有（直接的）方法来表达这些问题，因为它们要求我们执行一个计算，查看表格值相对于彼此而言，而不是孤立地。
- en: In principle, we could have a collection of operations on a single column. In
    some languages that focus solely on tables, such as [SQL](https://en.wikipedia.org/wiki/SQL),
    this is what you’ll find. However, in Pyret we have many more kinds of data than
    just columns (as we’ll soon see [REF], we can even create our own!), so it makes
    sense to leave the gentle cocoon of tables sooner or later. An extracted column
    is a more basic kind of datum called a list, which can be used to represent other
    data in programs (as we see in [REF] and elsewhere), without the bother of having
    to create a table every single time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，我们可以在单个列上拥有一系列操作。在一些专注于表格的语言中，比如[SQL](https://en.wikipedia.org/wiki/SQL)，这就是你会找到的。然而，在
    Pyret 中，我们拥有比列更多的数据类型（正如我们很快会看到的[REF]，我们甚至可以创建自己的！），所以迟早要离开表格的温柔茧。提取的列是一种更基本的数据类型，称为列表，它可以用来表示程序中的其他数据（正如我们在[REF]和其他地方看到的），而无需每次都创建表格。
- en: 'Therefore, we introduce one more operation, extract, which takes a column name
    and gives just the content of that one column:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们引入了另一种操作，提取（extract），它接受一个列名，并只给出该列的内容：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And now we can answer the critical question—<wbr>what is the difference between
    select and extract—<wbr>by saying that while select produces a table, extract
    produces a list.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以回答关键问题——<wbr>选择和提取之间的区别是什么——<wbr>可以说选择生成一个表格，而提取生成一个列表。
- en: 5.3Understanding Lists
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.3 理解列表
- en: 'A list has much in common with a single-column table:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 列表与单列表格有很多共同之处：
- en: The elements have an order, so it makes sense to talk about the “first”, “second”,
    “last”—<wbr>and so on—<wbr>element of a list.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素有一个顺序，因此谈论列表的“第一个”、“第二个”、“最后一个”——<wbr>等等——<wbr>元素是有意义的。
- en: All elements of a list are expected to have the same type.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预期列表的所有元素都具有相同的类型。
- en: The crucial difference is that a list does not have a “column name”; it is anonymous.
    That is, by itself a list does not describe what it represents; this interpretation
    is done by our program.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关键区别在于列表没有“列名”；它是匿名的。也就是说，一个列表本身并不描述它代表什么；这个解释是由我们的程序完成的。
- en: 5.3.1Lists as Anonymous Data
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3.1 匿名数据列表
- en: 'This might sound rather abstract—<wbr>and it is—<wbr>but this isn’t actually
    a new idea in our programming experience. Consider a value like 3 or -1: what
    is it? It’s the same sort of thing: an anonymous value that does not describe
    what it represents; the interpretation is done by our program. In one setting
    3 may represent an age, in another a play count; in one setting -1 may be a temperature,
    in another the average of several temperatures. Similarly with a string: Is "project"
    a noun (an activity that one or more people perform) or a verb (as when we display
    something on a screen)? Likewise with images and so on. In fact, tables have been
    the exception so far in having description built into the data rather than being
    provided by a program!'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来可能相当抽象——<wbr>确实如此——<wbr>但这实际上并不是我们编程经验中的新概念。考虑一个值，比如 3 或 -1：它是什么？这是同样类型的东西：一个匿名值，不描述它代表什么；解释是由我们的程序完成的。在一个环境中，3
    可能代表一个年龄，在另一个环境中代表一个播放计数；在一个环境中，-1 可能是一个温度，在另一个环境中是几个温度的平均值。字符串也是如此："project"
    是名词（一个或多个人执行的活动）还是动词（当我们在屏幕上显示某些内容时）？图片也是如此。事实上，到目前为止，表格在数据中具有描述的情况是一个例外，而不是由程序提供！
- en: This genericity is both a virtue and a problem. Because, like other anonymous
    data, a list does not provide any interpretation of its use, if we are not careful
    we can accidentally mis-interpret the values. On the other hand, it means we can
    use the same datum in several different contexts, and one operation can be used
    in many settings.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种泛化既是一种优点，也是一个问题。因为，像其他匿名数据一样，列表不提供其用途的任何解释，如果我们不小心，我们可能会错误地解释这些值。另一方面，这意味着我们可以在几个不同的上下文中使用相同的数据，并且一个操作可以在许多环境中使用。
- en: Indeed, if we look at the list of questions we asked earlier, we see that there
    are several common operations—<wbr>maximum, minimum, average, and so on—<wbr>that
    can be asked of a list of values without regard for what the list represents (heights,
    ages, playcounts). In fact, some are specific to numbers (like average) while
    some (like maximum) can be asked of any type on which we can perform a comparison
    (like strings).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，如果我们回顾一下之前提出的问题列表，我们会发现有几个常见操作——<wbr>最大值、最小值、平均值等等——<wbr>可以针对一个值列表进行询问，而不考虑列表代表的是什么（高度、年龄、播放次数）。事实上，一些操作是特定于数字的（例如平均值），而一些（例如最大值）可以针对我们可以进行比较的任何类型（例如字符串）进行询问。
- en: 5.3.2Creating Literal Lists
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3.2 创建文字列表
- en: 'We have already seen how we can create lists from a table, using extract. As
    you might expect, however, we can also create lists directly:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何从表格中创建列表，使用 extract。然而，正如你所预料的，我们也可以直接创建列表：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Of course, lists are values so we can name them using variables—<wbr>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，列表是值，所以我们可以使用变量来命名它们——<wbr>
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: —<wbr>pass them to functions (as we will soon see), and so on.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: —<wbr>将它们传递给函数（我们很快就会看到），等等。
- en: Do Now!
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就做！
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Based on these examples, can you figure out how to create an empty list?
  id: totrans-50
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 根据这些示例，你能想出如何创建一个空列表吗？
- en: 'As you might have guessed, it’s [list: ] (the space isn’t necessary, but it’s
    a useful visual reminder of the void).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经猜到的那样，它是 [list:] （空格不是必需的，但它是一个有用的视觉提醒，表示空值）。
- en: 5.4Operating on Lists
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.4 对列表进行操作
- en: 5.4.1Built-In Operations on Lists
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.4.1 列表上的内置操作
- en: 'Pyret handily provides a useful set of operations we can already perform on
    lists. As you might have guessed, we can already compute all the answers we’ve
    asked for above:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Pyret 巧妙地提供了一组我们已经可以在列表上执行的有用操作。正如你可能已经猜到的那样，我们已经可以计算出我们之前提出的所有答案：
- en: list-max computes the maximum element of a list.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: list-max 计算列表的最大元素。
- en: list-min computes the minimum element of a list.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: list-min 计算列表的最小元素。
- en: list-avg computes the average of a list.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: list-avg 计算列表的平均值。
- en: list-distinct computes the distinct elements a list.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: list-distinct 计算列表的不同元素。
- en: list-std-dev computes the standard deviation of the values in list.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: list-std-dev 计算列表中值的标准差。
- en: 'Thus:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 5.4.2Combining Lists and Tables
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.4.2 合并列表和表格
- en: 'Note that the questions we originally asked were slightly different: we didn’t
    ask for the tallest height but the tallest person, or likewise the most most-played
    song. Because we’ve stripped the heights and counts of their surrounding context,
    we can no longer tell which person or song these values correspond to. For that,
    we have to go back to the table.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们最初提出的问题略有不同：我们并没有询问最高的高度，而是最高的人，或者类似地最常播放的歌曲。因为我们剥离了高度和计数的上下文，所以无法确定这些值对应哪个人或歌曲。为此，我们必须回到表格。
- en: Do Now!
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就做！
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Do you see how we can use the values above, like most-played-count or shortest-height,
    to obtain the corresponding songs or people?
  id: totrans-66
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你看到我们如何使用上面的值，比如最常播放次数或最短高度，来获取相应的歌曲或人了吗？
- en: 'The key is to write a query over the corresponding table that refers to this
    value. For instance:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是编写一个查询，涉及到此值的相应表格。例如：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There’s a reason we are careful to always use the plural—<wbr>people, songs—<wbr>rather
    than the singular. This is because we cannot be sure there is only one person
    or one song with this height or play count. That is, there is a single biggest
    or smallest value in the list, because the value has no other information about
    it (so the same height coming from two different people, or the same play count
    coming from two different songs, looks the same in the list). But when put back
    in the context of the original table, the other values may be different.In short,
    our overall answer is computed quite simply:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们小心翼翼地始终使用复数——<wbr>人、歌曲——<wbr>而不是单数，有其原因。这是因为我们无法确定只有一个人或一个歌曲具有这个高度或播放次数。也就是说，列表中有一个最大值或最小值，因为该值没有其他信息（因此来自两个不同人的相同高度，或者来自两首不同歌曲的相同播放次数，在列表中看起来是相同的）。但是当重新放回到原始表格的上下文中时，其他值可能会不同。简而言之，我们的整体答案非常简单地计算出来：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: and
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Exercise
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Implement all the other statistical questions posed in [Basic Statistical Questions](#%28part._table-stat-qs%29).
  id: totrans-75
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 实现 [基本统计问题](#%28part._table-stat-qs%29) 中提出的所有其他统计问题。
- en: Until now we’ve only seen how to use built-in functions over lists. Next [[Processing
    Lists](processing-lists.html)], we will study how to create our own functions
    that process lists. Once we learn that, these list processing functions will remain
    powerful but will no longer seem quite so magical, because we’ll be able to build
    them for ourselves!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只看到了如何使用列表上的内置函数。接下来[[处理列表](processing-lists.html)]，我们将学习如何创建自己的函数来处理列表。一旦我们学会了，这些列表处理函数将会变得强大，但不再显得那么神奇，因为我们将能够自己构建它们！
