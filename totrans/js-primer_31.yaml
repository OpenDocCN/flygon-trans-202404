- en: Date
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://jsprimer.net/basic/date/](https://jsprimer.net/basic/date/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: この章では、JavaScriptで日付や時刻を扱うための[Date](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date)について学びます。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#date-object)*Dateオブジェクト*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*`Date`オブジェクトは`String`や`Array`などと同じく、ECMAScriptで定義されたビルトインオブジェクトです。'
  prefs: []
  type: TYPE_NORMAL
- en: '`Date`オブジェクトをインスタンス化することで、ある特定の時刻を表すオブジェクトが得られます。 `Date`における「時刻」は、UTC（協定世界時）の1970年1月1日0時0分0秒を基準とした相対的なミリ秒として保持されます。
    このミリ秒の値のことを、本章では「時刻値」と呼びます。 `Date`オブジェクトのインスタンスはそれぞれがひとつの時刻値を持ち、その時刻値を元に日付や時・分などを扱うメソッドを提供します。'
  prefs: []
  type: TYPE_NORMAL
- en: '[](#create-instance)*インスタンスの作成*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`Date`オブジェクトのインスタンスは、常にnew演算子を使って作成します。 `Date`オブジェクトのインスタンス作成には、大きく分けて2つの種類があります。
    1つは現在の時刻をインスタンス化するもの、もう1つは任意の時刻をインスタンス化するものです。'
  prefs: []
  type: TYPE_NORMAL
- en: '[](#instance-current-time)*現在の時刻をインスタンス化する*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*`Date`をnewするときにコンストラクタ引数を何も渡さない場合、作成されるインスタンスは現在の時刻を表すものになります。 `Date`オブジェクトのインスタンスではなく現在の時刻の時刻値だけが欲しい場合には、`Date.now`メソッドの返り値を使います。
    作成したインスタンスが持つ時刻値は、`getTime`メソッドで取得できます。 また、`toISOString`メソッドを使うと、その時刻をUTCにおける[ISO
    8601](https://ja.wikipedia.org/wiki/ISO_8601)形式の文字列に変換できます。 ISO 8601とは国際規格となっている文字列の形式で、`2006-01-02T15:04:05.999+09:00`のように時刻とタイムゾーン情報を表現します。
    人間が見てもわかりやすい文字列であるため、広く利用されています。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[](#instance-any-time)*任意の時刻をインスタンス化する*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*コンストラクタ引数を渡すことで、任意の時刻を表すインスタンスを作成できます。 `Date`のコンストラクタ関数は渡すデータ型や引数によって時刻の指定方法が変わります。
    `Date`は次の3種類を引数としてサポートしています。'
  prefs: []
  type: TYPE_NORMAL
- en: 時刻値を渡すもの
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 時刻を示す文字列を渡すもの
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 時刻の部分（年・月・日など）をそれぞれ数値で渡すもの
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1つめは、コンストラクタ関数にミリ秒を表す数値型の引数を渡したときに適用されます。 渡した数値をUTCの1970年1月1日0時0分0秒を基準とした時刻値として扱います。
    この方法は基準となる時刻とタイムゾーンが固定されているため、実行環境のタイムゾーンによる違いが起きないので安全です。 そのため、他の2つの方法と違ってタイムゾーンを考慮する必要がありません。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 2つめは、文字列型の引数を渡したときに適用されます。 [RFC2822](https://www.rfc-editor.org/rfc/rfc2822#section-3.3)や[ISO
    8601](https://ja.wikipedia.org/wiki/ISO_8601)の形式に従った文字列を渡すと、 その文字列をパースして得られる時刻値を使って、`Date`のインスタンスを作成します。
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、ISO 8601形式の文字列を渡して`Date`のインスタンスを作成します。 タイムゾーンを含む文字列の場合は、そのタイムゾーンにおける時刻として時刻値を計算します。
    文字列からタイムゾーンが読み取れない場合は、実行環境のタイムゾーンによって時刻値を計算するため注意が必要です。 また、ISO 8601形式以外の文字列のパースは、ブラウザごとに異なる結果を返す可能性があるため注意しましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 3つめは、時刻を次のように、年・月・日などの部分ごとの数値で指定する方法です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: コンストラクタ関数に2つ以上の引数を渡すと、この方法で`Date`インスタンスが作成されます。 月内の日を表す第三引数（`day`）から後ろの引数は省略可能です。
    省略した場合のそれぞれの引数の初期値は`0`ですが、日（`day`）を表す第三引数だけは`1`がデフォルト値となります。 また、月（`month`）を表す第二引数は`0`が1月に対応し、`0`から`11`までの数値で月を指定することにも注意しましょう。
  prefs: []
  type: TYPE_NORMAL
- en: 先述した2つの方法と違い、この方法はタイムゾーンを指定できません。 渡した数値は常にローカルのタイムゾーンにおける時刻とみなされます。
  prefs: []
  type: TYPE_NORMAL
- en: 結果が実行環境に依存してしまうため、基本的にこの方法は使うべきではありません。
  prefs: []
  type: TYPE_NORMAL
- en: 時刻を部分ごとに指定したい場合は、[Date.UTC](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC)メソッドを使うとよいでしょう。
    渡す引数の形式は同じですが、`Date.UTC`メソッドは渡された数値をUTCにおける時刻として扱い、その時刻値を返します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: なお、どのオーバーロードにも当てはまらない引数や、時刻としてパースできない文字列を渡した際にも、`Date`のインスタンスは作成されます。 ただし、このインスタンスが持つ時刻は不正であるため、`getTime`メソッドは`NaN`を返し、`toString`メソッドは`Invalid
    Date`という文字列を返します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[](#instance-method)*Dateのインスタンスメソッド*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`Date`オブジェクトのインスタンスは多くのメソッドを持っていますが、 ほとんどは`getHours`と`setHours`のような、時刻の各部分を取得・更新するためのメソッドです。'
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードは、日付を決まった形式の文字列に変換しています。 `getMonth`メソッドや`setMonth`メソッドのように月を数値で扱うメソッドは、0から11の数値で指定することに注意しましょう。ある`Date`のインスタンスの時刻が何月かを表示するには、`getMonth`メソッドの返り値に1を足す必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`getTimezoneOffset`メソッドは、実行環境のタイムゾーンのUTC**からの**オフセット値を**分**単位の数値で返します。 たとえばAsia/TokyoタイムゾーンはUTC+9時間なのでオフセット値は-9時間となり、`getTimezoneOffset`メソッドの返り値は`-540`です。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[](#usecase)*現実のユースケースとDate*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*ここまで`Date`オブジェクトとインスタンスメソッドについて述べましたが、 多くのユースケースにおいては機能が不十分です。 たとえば次のような場合に、`Date`では直感的に記述できません。'
  prefs: []
  type: TYPE_NORMAL
- en: 任意の書式の文字列から時刻に変換するメソッドがない
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 「時刻を1時間進める」のように時刻を前後にずらす操作を提供するメソッドがない
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 任意のタイムゾーンにおける時刻を計算するメソッドがない
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YYYY/MM/DD HH:mm`のようなフォーマットに基づいた文字列への変換を提供するメソッドがない'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: そのため、JavaScriptにおける日付・時刻の処理は、標準のDateではなくライブラリを使うことが一般的になっています。 代表的なライブラリとしては、[Day.js](https://day.js.org/)、[date-fns](https://date-fns.org/)、[js-joda](https://github.com/js-joda/js-joda)、[moment.js](https://momentjs.com/)の後継である[Luxon](https://github.com/moment/luxon/)などがあります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[](#conclusion)*まとめ*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*この章では、Dateオブジェクトについて学びました。'
  prefs: []
  type: TYPE_NORMAL
- en: '`Date`オブジェクトのインスタンスはある特定の時刻を表すビルトインオブジェクト'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Date`における「時刻」は、UTC（協定世界時）の1970年1月1日0時0分0秒を基準とした相対的なミリ秒として保持されている'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Date`コンストラクタで任意の時間を表す`Date`インスタンスを作成できる'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Date`インスタンスメソッドにはさまざまなものがあるが、現実のユースケースでは機能が不十分になりやすい'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ビルトインオブジェクトの`Date`のみではなく、ライブラリも合わせて利用するのが一般的*******
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
