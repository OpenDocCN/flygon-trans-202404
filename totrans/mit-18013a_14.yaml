- en: 'Chapter 13: Solving Equations'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章：解方程
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: 'We construct four iterative methods for solving an equation f(x) = 0\. They
    are: Newton''s method, in which we go from the old point to the new by finding
    where the linear approximation to f at the old is zero; poor man''s Newton which
    is the same except we approximate the slope in the linear approximation, and two
    interpolative methods.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构造了四种迭代方法来解方程f(x) = 0。它们是：牛顿法，在这种方法中，我们通过找到旧点处f的线性近似为零的位置来从旧点到新点；穷人的牛顿方法与之相同，只是我们在线性近似中近似斜率，并且还有两种插值方法。
- en: We also raise the problem of solving two simultaneous equations in two dimensions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提出了在二维空间中解两个联立方程的问题。
- en: Topics
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题
- en: 13.0  [Solving an Equation in One Variable](section00.html)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 13.0  [解一个变量的方程](section00.html)
- en: 13.1  [Newton's Method](section01.html)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 13.1  [牛顿法](section01.html)
- en: 13.2  [Poor Man's Newton](section02.html)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 13.2  [穷人的牛顿法](section02.html)
- en: 13.3  [Another Linear Method](section03.html)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 13.3  [另一种线性方法](section03.html)
- en: 13.4  [Divide and Conquer](section04.html)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 13.4  [分而治之](section04.html)
- en: 13.5  [Solving Two General Equations in Two Variables](section05.html)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 13.5  [解两个含两个变量的一般方程](section05.html)
- en: 13.1 Newton's Method
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.1 牛顿法
- en: This method, as just noted, consists of iterating the process of setting the
    linear approximation of f to 0 to improve guesses at the solution to f = 0.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如刚才提到的，这种方法包括迭代过程，将f的线性近似设置为0以改进对f = 0解的猜测。
- en: The linear approximation to f(x) at argument x[0] which we will call fLx[0](x)
    can be described by the equation
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里称为fLx[0](x)的自变量x[0]的f(x)的线性近似可以用以下方程描述
- en: '![](../Images/afba12a50ec71feb1cad851bb401cc5e.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../Images/afba12a50ec71feb1cad851bb401cc5e.jpg)'
- en: if we set fLx[0](x) = 0, and solve for x, we obtain
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们设置fLx[0](x) = 0，并解出x，我们得到
- en: '![](../Images/0ab38ba8ac2495b0bc3b917221736763.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../Images/0ab38ba8ac2495b0bc3b917221736763.jpg)'
- en: and so we obtain ![](../Images/b829afb3cfcb13e73c5de68936e4bc55.jpg), and in
    general can define
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此我们得到![](../Images/b829afb3cfcb13e73c5de68936e4bc55.jpg)，一般可以定义
- en: '![](../Images/7cfb2fc6bd37f08ba247a068d8173e56.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../Images/7cfb2fc6bd37f08ba247a068d8173e56.jpg)'
- en: In the applet that follows you can enter a standard function, choose the number
    (nb points) of iterations that can be shown, adjust x[0] with the second slider,
    and look at each iteration with the first slider. You will see the function and
    the effects of the iterations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在随后的小程序中，您可以输入一个标准函数，选择可以显示的迭代次数（nb points），用第二个滑块调整x[0]，并使用第一个滑块查看每次迭代。您将看到函数和迭代的效果。
- en: You will notice that with this method you may arrive at a nearby 0, or a far
    away one, depending a bit on luck.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，使用这种方法，你可能会得到一个附近的0，或者一个远离的0，这取决于一点运气。
- en: <applet code="NewtonsMethod" codebase="../applets/" archive="newtonsMethod.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <applet code="NewtonsMethod" codebase="../applets/" archive="newtonsMethod.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
- en: In� the old days the tedium of performing the steps of finding the x[j]'s was
    so formidable that it could not be safely inflicted on students.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，找到x[j]的步骤的繁琐程度是如此可怕，以至于不能安全地施加在学生身上。
- en: Now, with a spreadsheet, we can set this up and do it with even a messy function
    f, in approximately a minute.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，借助电子表格，我们可以在大约一分钟内设置并执行此操作，即使是混乱的函数f。
- en: '**To do so put your initial guess, x[0] in one box say a2, put "= f(a2)" in
    b2, and "= f ''(a2)" in c2\. Then put "= a2-b2/c2" in a3 and copy a3, b2 and c2
    down as far as you like.** (Of course you have to spell out what f and f '' are
    in doing this.)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**要做到这一点，将您的初始猜测x[0]放在一个框中，比如a2，将“= f(a2)”放在b2中，并将“= f ''(a2)”放在c2中。然后在a3中放入“=
    a2-b2/c2”，并将a3、b2和c2复制到您喜欢的任何地方。**（当然，在执行此操作时，您必须解释f和f''是什么。）'
- en: That's all there is to it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。
- en: If column b goes to zero, the entries in column a will have converged to an
    answer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果b列趋近于零，则a列中的条目将收敛到一个答案。
- en: If you want to change your initial guess you need only enter something else
    in a2; to solve a different equation you need only change b2 and c2 and copy them
    down.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要更改您的初始猜测，您只需要在a2中输入其他内容；要解不同的方程，您只需要更改b2和c2并将它们复制下来。
- en: This raises some interesting questions; namely, **can we say anything about
    when this method will work and when it will not?**
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这提出了一些有趣的问题；也就是说，**我们能不能说出这种方法何时起作用，何时不起作用？**
- en: First you should realize that many functions have more than one argument for
    which their values are 0\. Thus you may not get the solution you want.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您应该意识到许多函数有不止一个参数，使它们的值为0。因此，您可能得不到您想要的解。
- en: Also, if the function f has no zero, like x² + 1, you will never get anywhere.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果函数f没有零点，比如x² + 1，你永远也找不到解。
- en: 'Here is another problem: if your initial guess, ![](../Images/12100f1af3bef133bce92a6485c249b4.jpg)
    (or any subsequent ![](../Images/543c49b83b1b8e09fff0fe530ea475a9.jpg)) is near
    a critical point of f (at which f '' = 0) the quantity ![](../Images/9b25376f1f0270396ead00afd096ecc8.jpg)
    may become huge at that argument, and you may be led to looking at arguments very
    far from what you are looking for.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有另一个问题：如果你的初始猜测，![](../Images/12100f1af3bef133bce92a6485c249b4.jpg)（或任何后续的![](../Images/543c49b83b1b8e09fff0fe530ea475a9.jpg)）接近f的临界点（在该点f'
    = 0），那么在该参数处，数量![](../Images/9b25376f1f0270396ead00afd096ecc8.jpg)可能会变得巨大，导致你看到与你寻找的目标非常远的参数。
- en: And if f is implicitly defined you may find that some new guess x[j] in which
    f is not even defined, and the iteration will dead end.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果f是隐式定义的，你可能会发现在某个新的猜测x[j]中，f甚至没有定义，迭代会陷入死胡同。
- en: '**Can we say anything positive about the use of the method?**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们能对这种方法的使用说些什么积极的吗？**'
- en: Yes! **If f goes from negative to positive at the true solution x, and f ' is
    increasing between x and your guess x[0], which is greater than x,** then the
    method will always converge. Similar statements hold when f goes from positive
    to negative, and under many other circumstances.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！**如果f在真解x处从负变为正，且f'在x和您的猜测x[0]之间是增加的，而且大于x**，那么该方法将始终收敛。类似的情况也适用于f从正变为负，以及许多其他情况。
- en: '**Why is this?**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么会这样？**'
- en: If f ' is increasing, then the tangent line to f at x[0]�will go under the f
    curve at between x and x[0], so that the linear approximation, whose curve it
    is, will hit zero between x and x[0], and the same thing will be true in each
    iteration. Thus the x's will march off toward the true solution without hope of
    escape and will eventually get there.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果f'是增加的，那么f在x[0]处的切线将在x和x[0]之间低于f曲线，使得线性近似，即其曲线，将在x和x[0]之间达到零，而在每次迭代中也是如此。因此，x将朝着真解不断前进，无法逃脱，并最终到达那里。
- en: Another virtue of the method is that as one gets closer to the solution, the
    differentiable function will tend to look more and more like its linear approximation
    between the current guess and the true solution. Thus the method tends to converge
    very rapidly once that current guess is near a solution.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的另一个优点是，随着接近解，可微函数将越来越像当前猜测和真解���间的线性近似。因此，一旦当前猜测接近解，该方法就会非常快速地收敛。
- en: '**Exercises:**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**'
- en: '**Set up a spread sheet to apply it to the following functions:**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**建立一个电子表格来应用到以下函数：**'
- en: '**13.1     ** **exp(x) - 27**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**13.1     ** **exp(x) - 27**'
- en: '**13.2     ** **sin (x) - 0.1**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**13.2     ** **sin (x) - 0.1**'
- en: '**13.3     ** **x²**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**13.3     ** **x²**'
- en: '**13.4     ** **tan x**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**13.4     ** **tan x**'
- en: '**13.5     ** **x^(1/3)**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**13.5     ** **x^(1/3)**'
- en: '**13.6     ** **x^(1/3) - 1**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**13.6     ** **x^(1/3) - 1**'
- en: 13.2 Poor Man's Newton
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.2 穷人牛顿法
- en: To apply Newton's method as just described, it is necessary to differentiate
    the function f at each successive guess. This is not difficult, but requires a
    small amount of effort.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用刚才描述的牛顿法，需要在每次猜测时对函数f进行微分。这并不困难，但需要一点努力。
- en: We can instead apply what is essentially the same method, using an approximation
    to ![](../Images/692df5ffd88e9948b550b37b7e5e7e5b.jpg) of the form ![](../Images/da80df7b47af623e9e7d7b6f427f7dc6.jpg)
    for some d. We then have to decide what to use for d, but with a spreadsheet we
    can pick a small value to begin with and let it slowly go to zero as we iterate.
    If we wanted to be fancier, we could use a symmetric approximation to the derivative![](../Images/7fbf6eb2e5aef315062d1b076e291be1.jpg).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用本质上相同的方法，使用形式为![](../Images/692df5ffd88e9948b550b37b7e5e7e5b.jpg)的近似值来代替![](../Images/da80df7b47af623e9e7d7b6f427f7dc6.jpg)，其中d为某个值。然后我们需要决定使用什么值作为d，但是通过电子表格，我们可以选择一个小值作为起始值，并在迭代过程中让它慢慢趋近于零。如果我们想更加精细，我们可以使用对称的导数近似![](../Images/7fbf6eb2e5aef315062d1b076e291be1.jpg)。
- en: '**How do we do all this?**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们如何做到这一切？**'
- en: In box e2 we can put our initial value of d, say 10^(-3); then we can put "=
    e2*9/10" in e3 and copy it down, so that d will slowly decline to 0\. (Why slowly
    like this? If you go too fast round-off error might ruin you before you find your
    solution.) The iteration here is
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在e2单元格中，我们可以放入我们的初始值d，比如10^(-3)；然后在e3中放入"= e2*9/10"，并向下复制，这样d将慢慢减小到0。（为什么要这样慢慢减小？如果你进行得太快，舍入误差可能会在找到解之前毁掉你。）这里的迭代是
- en: '![](../Images/2c221d9e90e6e1e384d3fdecb3062ac9.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c221d9e90e6e1e384d3fdecb3062ac9.jpg)'
- en: We can therefore put our guess in f2, put "= e2+f2"in g2, set h2 to "= f(f2)",
    copy it into i2� and then set f3 to "= f2-e2*h2/(i2-h2)", and copy g2, h2, i2
    and e3 and f3 down, and we are done.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将我们的猜测放在 f2 中，将 "= e2+f2" 放入 g2，将 h2 设置为 "= f(f2)"，将其复制到 i2 中，然后将 f3
    设置为 "= f2-e2*h2/(i2-h2)"，并复制 g2、h2、i2 和 e3 和 f3 下去，我们就完成了。
- en: '**Exercise 13.7 Do this for each of the functions in the exercises of the section
    13.1\. Do you find a difference between the results here and with the regular
    Newton''s method? If so, what?**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 13.7 对于 13.1 节的练习中的每个函数都这样做。你在这里和常规牛顿法的结果之间发现了差异吗？如果有，是什么？**'
- en: 13.3 Another Linear Method
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.3 另一种线性方法
- en: Another easy method to apply is to pick two arguments, x[0] and x[0'] that you
    hope are near the solution you want, evaluate the function at them and assume
    that the straight line defined by the two values and arguments is reasonable approximation
    to f. You can then find where that straight line meets the x axis, and use it
    to replace one of the two initial values.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种简单的应用方法是选择两个参数，x[0] 和 x[0']，希望它们接近你想要的解，评估函数在它们处的值，并假设由这两个值和参数定义的直线是对 f 的合理近似。然后，你可以找到这条直线与
    x 轴相交的地方，并将其用于替换两个初始值中的一个。
- en: In doing this there are two cases; one in which the value of f has the same
    sign at both points. This means that their straight line will not meet the x axis
    between your guesses, and then you might as well use the new point to replace
    the one of the two others furthest from it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行这个过程时有两种情况；一种情况是 f 在两个点处具有相同的符号。这意味着它们的直线不会在你的猜测之间与 x 轴相交，然后你可以用新点来替换其中距离它最远的两个点之一。
- en: If, on the other hand, the values of f at your two arguments have the opposite
    sign, you should replace the old argument at which f has the same sign as it has
    at the new one, so that the values of f will have the opposite sign on the next
    turn as well.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你的两个参数处的 f 的值具有相反的符号，则应该替换旧参数，在这个参数处 f 的符号与在新参数处的符号相同，这样在下一次也会是如此。
- en: This method has the advantage over Newton's that once you find arguments whose
    values of f have the opposite sign, you must home in on a solution between those
    arguments. (A solution being a point at which f changes sign; for a continuous
    f this is a point at which f is 0; functions like tan x change signs at arguments
    at which they are infinite (or more properly, undefined) as well as those at which
    they are 0.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法优于牛顿法的地方在于，一旦你找到值的 f 具有相反符号的参数，你必须在这些参数之间逐渐逼近一个解。（解是一个使 f 改变符号的点；对于连续的 f，这是一个使
    f 为 0 的点；像 tan x 这样的函数在它们为无穷大（或更正确地说，未定义）的参数处改变符号，以及在它们为 0 的参数处。）
- en: It has the disadvantage that there are functions for which the true derivative
    between your guesses is far from a straight line, and you gain very little in
    each iteration. It can then be painfully slow to converge.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 它的缺点是存在一些函数，其在你的猜测之间的真导数远非直线，每次迭代获得的收益非常少。因此，它可能收敛得非常慢。
- en: The equation used for finding x[i + 1]�given the two values x[i] and say x[i']
    that you use to compute it is
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 用于找到 x[i + 1] 的方程，给定你用来计算它的两个值 x[i] 和 x[i'] 是
- en: '![](../Images/331eb50f4f7f38f7849fe2da6c5d1ca5.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/331eb50f4f7f38f7849fe2da6c5d1ca5.jpg)'
- en: If you compare this with the previous method, this corresponds to approximating
    the derivative in Newton's method by using values at the previous two guesses,
    rather than by the last guess and it plus d, as in Poor Man's Newton.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将这与之前的方法进行比较，这相当于用前两个猜测的值近似牛顿法中的导数，而不是像“穷人的牛顿法”中一样，用最后一个猜测及其加上 d 的值。
- en: 'This equation can be solved and we can find a new x[i] easily as before. With
    a small amount of effort we can figure out which of the old arguments to discard;
    the following setup does it:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方程可以解决，我们可以像以前一样轻松地找到一个新的 x[i]。通过少量的努力，我们可以弄清楚要丢弃的旧参数中的哪一个；以下设置可以做到：
- en: In s2 and t2 put your initial guesses. In u2 put "= f(s2)"' and copy that into
    v2.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 s2 和 t2 中放入你的初始猜测。在 u2 中放入 "= f(s2)"，并将其复制到 v2 中。
- en: Now put "= s2 -(s2-t2)*u2/(u2-v2)"in s3, and "= if(abs(s3-t2)<abs(s3-s2),t2,s2)"
    in w2\. (This puts the old argument closer to the new one in w2.)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 s3 中放入 "= s2 -(s2-t2)*u2/(u2-v2)"，在 w2 中放入 "= if(abs(s3-t2)<abs(s3-s2),t2,s2)"。（这将把旧参数放在
    w2 中更接近新参数。）
- en: Copy s3 and u2 down, and now put "= if(u2*v2>0,w2,if(u2*u3>0,t2,s2))" in t3
    and copy t3, w2, and v2 down.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 复制 s3 和 u2，现在在 t3 中放入 "= if(u2*v2>0,w2,if(u2*u3>0,t2,s2))"，并将 t3、w2 和 v2 复制下来。
- en: This last horrible instruction makes t3 hold the nearer old argument to s3 if
    u2 and v2 had the same sign, and otherwise puts the old argument whose value of
    f has the opposite sign to u3 in t3\.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可怕的最后一条指令使得如果u2和v2具有相同的符号，t3将保持更接近旧参数的值，否则将旧参数的值f相反的替换到u3中。
- en: '**Exercise 13.8 How does this scheme compare to the others on your examples?
    Try it on the various examples of the previous exercises.**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 13.8 这种方案与你之前的例子相比如何？在之前练习的各种例子上试一试吧。**'
- en: 13.4 Divide and Conquer
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.4 分而治之
- en: The last previous method uses a straight line approximation to get a new argument
    between old ones, once the values of f at the old arguments have the opposite
    sign. This is usually a smart thing to do, unless the endpoints of the interval
    between which your solution is trapped (in columns s and t above) converge very
    slowly.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个方法使用直线逼近来获得两个旧参数之间的新参数，一旦旧参数的值f具有相反的符号。这通常是一个聪明的做法，除非区间的端点（在上面的列s和t中）收敛得非常慢。
- en: To avoid that possibility we can, **once the function f has opposite sign at
    two points, say a and b, evaluate it at the middle point, and replace one end
    by the middle.**
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种可能性，我们可以一旦函数f在两点a和b处具有相反的符号，就在中点评估它，并将一个端点替换为中点。
- en: This will cut the size of the interval in which the solution must lie in half.
    This is slow convergence compared to the best of Newton's algorithm or the variants
    discussed above, but it is steady and effective and will always give a definite
    improvement in accuracy in a fixed number of steps.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使解必须位于的区间的大小减半。与牛顿算法的最佳部分或上述变体相比，这是较慢的收敛，但它是稳定且有效的，并且在固定数量的步骤中总是会明显提高准确性。
- en: Since 2 to the tenth power is a bit more than one thousand, (it's 1024) the
    size of the interval goes down by a factor of at least 1000 for every ten iterations,
    and so if it starts at something like 1, after 35 or so steps you will have the
    answer to ten decimal places.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于2的十次方略大于一千（是1024），所以每十次迭代间隔的大小至少减少了1000倍，因此如果它从1开始，大约经过35步你将得到十位小数的答案。
- en: '**How does the algorithm go?**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**算法是怎么进行的？**'
- en: We start with two arguments, a and b and suppose we assume a < b. We evaluate
    f(a) and f(b), and also ![](../Images/b1319cf0018c8f6d6007a7f8559604e1.jpg). Then
    if the last of these and the first has the same sign you replace a by ![](../Images/892847552d2b6a7b393feb1ecb53165d.jpg)
    and keep b, while otherwise you keep a and replace b by ![](../Images/892847552d2b6a7b393feb1ecb53165d.jpg).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从两个参数a和b开始，并假设我们假定a < b。我们评估f(a)和f(b)，还有![](../Images/b1319cf0018c8f6d6007a7f8559604e1.jpg)。然后，如果这些中的最后一个和第一个具有相同的符号，您将替换a为![](../Images/892847552d2b6a7b393feb1ecb53165d.jpg)，保留b，否则保留a并将b替换为![](../Images/892847552d2b6a7b393feb1ecb53165d.jpg)。
- en: '**In a spreadsheet you can put your initial guesses in aa2 and ab2 put "= aa2/2+ab2/2"
    in ac2 and put "= f(aa2)" in ad2 and copy that to ae2 and af2\. You can then put
    "= if(ae2*af2>0, aa2,ac2)" in aa3, and "= if(ae2*af2>0,ac2,ab2)" in ab3, copy
    down and you are done.**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**在电子表格中，您可以将您的初始猜测放在aa2和ab2中，在ac2中放置“= aa2/2+ab2/2”，在ad2中放置“= f(aa2)”并将其复制到ae2和af2。然后您可以在aa3中放置“=
    if(ae2*af2>0, aa2,ac2)”，在ab3中放置“= if(ae2*af2>0,ac2,ab2)”，然后向下复制即可完成。**'
- en: Unless there is an error lurking somewhere, or you started with ad2 and ae2
    having the same sign, this will shorten the initial a to b by a factor of at least
    10^(-10) interval after 35 or so steps.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 除非有错误潜伏，或者你以ad2和ae2具有相同的符号开始，否则在大约35步之后，这将使初始的a到b的间隔缩短至少10^(-10)倍。
- en: '**Exercise 13.9 Compare performance of this algorithm with the previous ones
    on the same examples. Any comments?**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 13.9 将此算法的性能与以前的算法在相同的示例上进行比较。有什么评论吗？**'
- en: 13.5 Solving Two General Equations in Two Variables
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.5 求解两个一般的二元方程
- en: One nice feature of Newton's Method (and of Poor Man's Newton as well) is that
    it can easily be generalized to two or even three dimensions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 牛顿法（以及贫穷人的牛顿方法）的一个很好的特点是它可以轻松地推广到二维甚至三维。
- en: That is, suppose we have two standard functions, f and g of two variables, x
    and y. Each of the equations, f(x, y) = 0, and g(x, y) = 0 will typically be satisfied
    on curves, just as similar linear equations are satisfied on straight lines. And
    suppose we seek simultaneous solutions to both equations, which will then be at
    the intersections, if any, of these curves.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，假设我们有两个标准函数f和g，它们是两个变量x和y的函数。每个方程，f(x, y) = 0和g(x, y) = 0通常在曲线上满足，就像类似的线性方程在直线上满足一样。假设我们寻找这两个方程的同时解，那么它们将在这些曲线的交点上满足，如果有的话。
- en: If we could solve either of the equations for x say, in terms of y, we could
    find a parametric representations of the curve solutions to it (with y as parameter),
    and use the divide and conquer method of the last section on the other function,
    cutting the parameter interval in half at each step as in one dimension.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能够解出其中任一方程以 y 为自变量的 x 的表示式，我们可以找到一个曲线解的参数表示（以 y 为参数），并且在另一个函数上使用上一节的分而治之方法，每次将参数区间减半，就像在一维中一样。
- en: This is a slow and steady method that can be implemented fairly easily. But
    it assumes we can obtain a parametric representation of one or the other curve.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种缓慢而稳定的方法，可以相当容易地实现。但它假设我们可以获得一个或另一个曲线的参数表示。
- en: We can always try Newton's method, which is fairly easy to implement in general.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总是可以尝试牛顿法，这在一般情况下相当容易实现。
- en: To use Newton's method, we **compute the gradients of f and g at some initial
    point, and find a new point at which the linear approximations to f and g defined
    by the gradients at the initial point are both 0.** We then iterate this step.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用牛顿法，我们**在某个初始点计算 f 和 g 的梯度，并找到一个新点，在该点上由初始点的梯度定义的 f 和 g 的线性近似都为 0**。然后我们迭代这一步。
- en: To implement this method takes roughly three times the work of using Newton's
    method in one dimension. On the other hand three times almost nothing is still
    small.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这种方法大致需要牛顿法在一维中所需工作的三倍。另一方面，三倍几乎等于零，仍然是很小的。
- en: This method suffers from the same problems as Newton's method suffers from in
    one dimension.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法遭受与牛顿法在一维中遭受的相同问题。
- en: We may wander far from where we want to be in the xy plane, especially if we
    come to a point at which the gradients are small.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会远离我们在 xy 平面上想要的地方，特别是如果我们来到一个梯度很小的点。
- en: And of course two random curves need not intersect at all, so there may not
    even be a solution, or there could be many of them.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，两条随机曲线可能根本不相交，所以可能根本没有解决方案，或者可能有许多解决方案。
- en: But again if we can start near a solution, under the right circumstances the
    method does very well indeed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我们能够在接近解的地方开始，再加上合适的情况，这个方法的效果会非常好。
- en: '**How do we set it up?**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们如何设置它？**'
- en: First you pick initial guesses of x[0] and y[0]; on the spreadsheet, enter them
    in the first two columns (say). Then you need a column to enter f(x, y) and one
    for g(x, y); and one each for the x and y derivatives of f and g (four derivatives
    all together).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您选择 x[0] 和 y[0] 的初始猜测；在电子表格中，将它们输入到前两列中（假设）。然后您需要一列输入 f(x, y) 和一列输入 g(x,
    y)；以及一个分别用于 f 和 g 的 x 和 y 导数的列（一共四个导数）。
- en: You now have all the information you need to compute x[1] and y[1]. Once you
    have done this you need only copy everything down say 30 rows, and you can see
    what happens. If f and g go to zero, which means that x[i] and y[i] both converge,
    you will have a solution.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经拥有了计算 x[1] 和 y[1] 所需的所有信息。一旦您完成了这一步，您只需要复制所有内容，比如说 30 行，然后您就可以看到会发生什么。如果
    f 和 g 都趋近于零，这意味着 x[i] 和 y[i] 都收敛，那么您将得到一个解决方案。
- en: '**So how do we iterate?**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**那么我们如何迭代？**'
- en: We must solve the two linear equations in x and y that state that the linear
    approximations to f and to g defined at (x[0], y[0]) both are 0\.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须解出关于 x 和 y 的两个线性方程，这两个方程陈述了在 (x[0], y[0]) 处由初始点的梯度定义的 f 和 g 的线性近似都为 0。
- en: What are these equations? They are
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方程是什么？它们是
- en: '![](../Images/d31d52d15472d751e9db095e3ce32157.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d31d52d15472d751e9db095e3ce32157.jpg)'
- en: '**And what are the solutions?**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**解是什么？**'
- en: We can use[Cramer's (ratio of determinant) rule](../chapter32/section04.html#CramersRule)
    to tell us that the solutions are
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用[克拉默法则（行列式比的法则）](../chapter32/section04.html#CramersRule)来告诉我们解是什么。
- en: '![](../Images/e742caef3f945ec9f96c10c8e6b20e7e.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e742caef3f945ec9f96c10c8e6b20e7e.jpg)'
- en: and
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 并且
- en: '![](../Images/17a9277af60947f98c2b7d89561974de.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/17a9277af60947f98c2b7d89561974de.jpg)'
- en: Of course all further iterations are identical to this one with the new guesses.
    Thus after entering these formulae once, copying them down is all that is necessary
    to apply the method.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，所有进一步的迭代都与这个新猜测的迭代相同。因此，一旦输入了这些公式，只需复制它们就足以应用该方法。
- en: '**Exercise 13.10 Try this method on a spreadsheet with the following function:
    f(x, y) = exp(x * y) - y² , g(x, y) = cos(x + y).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 13.10 在以下函数的电子表格中尝试此方法：f(x, y) = exp(x * y) - y² , g(x, y) = cos(x + y)。'
- en: Find three solutions for which both variables are positive. How many such solutions
    are there?**
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 找出三个解，使得两个变量都是正的。有多少这样的解呢？**
- en: The same approach can be implemented in three dimensions, though the amount
    of work required on a spreadsheet starts to be slightly tedious.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的方法可以在三维中实现，尽管在电子表格上所需的工作量开始变得稍微繁琐。
- en: You have to enter three variables, three functions, their nine partial derivatives
    and of course Cramer's rule now involves the ratio of two three by three determinants
    each, now three times.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你必须输入三个变量，三个函数，它们的九个偏导数，当然克莱姆法则现在涉及到两个三乘三行列式的比值，现在是三倍。
- en: You could do it, though if you ever really wanted to, and actually find the
    solution to three arbitrary non-linear equations in three variables, with reasonable
    luck.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想要的话，你可以做到，而且实际上找到三个任意非线性方程在三个变量中的解，有合理的运气的话。
- en: <applet code="NewtonsMethodTwoVariables" codebase="../applets/" archive="newtonsMethodTwoVariables.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <applet code="NewtonsMethodTwoVariables" codebase="../applets/" archive="newtonsMethodTwoVariables.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
