- en: 'Chapter 8: Introducing Classes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introducing Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript provides support for classes. Classes serve as a foundational component
    in many object oriented languages. Loosely defined, a class is a collection of
    data and functions that (usually) operate on that data. The data may or may not
    be accessible outside of the class where its defined. Similarly, class functions
    may or many not be available outside of their containing class. You get to make
    these decisions.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of a classes as defining a template of functionality. That's the
    "data and functions" part. At runtime, we create *instances* of classes and we
    normally call them "objects." We often think in terms of "passing messages" or
    "invoking functions" on objects^([1](#fn_1)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Developers use classes to model people, places, business entities and concepts
    - all kinds of things. Here''s a simple example that begins to model a bus that
    might be used for public transportation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Use the keyword `class` followed by the name of the class.
  prefs: []
  type: TYPE_NORMAL
- en: Public transportation authorities typically assign route numbers to busses.
    The `Bus` class models the route number in a `private` field called `myRouteNumber`.
  prefs: []
  type: TYPE_NORMAL
- en: The `constructor` is a function that runs when client code instantiates an instance
    of the Bus object. As you can see, constructors can take parameters and in this
    instance, the constructor initializes the Bus' route number.
  prefs: []
  type: TYPE_NORMAL
- en: Our business rules dictate that busses must know how to "say" their name. A
    function, `SayRoute`, meets the requirement by listing the bus's route number
    out to the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'TypeScript introduces a bit of new lingo to describe classes^([2](#fn_2)):'
  prefs: []
  type: TYPE_NORMAL
- en: We generically call myRouteNumber, the constructor and SayRoute *class members*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: myRouteNumber is a *property*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*constructor* is a special function that runs every time code creates a new
    instance of Bus. It runs only once per object instantiation but every time you
    create a new Bus object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SayRoute is a *method*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Classes do nothing by themselves. They are much like cookie cutter templates
    - you can tell what the cookie is going to look like but you have no cookie until
    you have cookie dough. We create new objects as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The above code declares two instances of the `Bus` object, "myBeloved148" (a
    super express) and "theDreaded164" (a super local). It then invokes the `SayRoute`
    method on each instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we create a new object using the `new` keyword, we''re *instantiating*
    the object. Some people like to say "newing it up" instead. Here''s a video showing
    the basics:'
  prefs: []
  type: TYPE_NORMAL
- en: Protecting Your Class Data and Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You no doubt noticed a complimentary pair of descriptors, `private` and `public`.
    The Bus class declares a *private* member, myRouteNumber. Private members (i.e.
    properties and methods) may only be referenced or invoked within the object itself.
    Public members and methods may be referenced both within the class itself, but
    also by client code. This means that the following code will not compile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As with every other part of the language, good TypeScript IDEs provide intellisense
    to help you locate and use public and private methods properly. Here''s a short
    video demonstrating that point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/embed/QOvFFz1lRJM](https://www.youtube.com/embed/QOvFFz1lRJM)'
  prefs: []
  type: TYPE_NORMAL
- en: '(If you can''t see the video, [try accessing it here](https://youtu.be/QOvFFz1lRJM)
    or type this URL into your web browser: [https://youtu.be/QOvFFz1lRJM](https://youtu.be/QOvFFz1lRJM)).'
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript classes go much deeper than this. The next chapter takes that dive.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ¹. These phrases, "passing messages" or "invoking functions" pretty much mean
    the same thing. It can be helpful at times to view objects as living, breathing
    entities. This paradigm lends itself to the "passing messages" concept. [↩](#reffn_1
    "Jump back to footnote [1] in the text.")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ². It's probably more accurate to say that it borrows the lingo from other languages.
    [↩](#reffn_2 "Jump back to footnote [2] in the text.")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
