- en: 'Chapter 8: Introducing Classes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：介绍类
- en: Introducing Classes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍类
- en: TypeScript provides support for classes. Classes serve as a foundational component
    in many object oriented languages. Loosely defined, a class is a collection of
    data and functions that (usually) operate on that data. The data may or may not
    be accessible outside of the class where its defined. Similarly, class functions
    may or many not be available outside of their containing class. You get to make
    these decisions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript提供了对类的支持。类在许多面向对象的语言中作为基础组件。宽泛地定义，类是一组数据和函数，这些函数（通常）操作这些数据。数据可能在定义它的类之外可访问，也可能不可访问。同样，类函数可能在其包含类之外可用，也可能不可用。您可以做出这些决定。
- en: You can think of a classes as defining a template of functionality. That's the
    "data and functions" part. At runtime, we create *instances* of classes and we
    normally call them "objects." We often think in terms of "passing messages" or
    "invoking functions" on objects^([1](#fn_1)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将类视为定义功能模板。这就是“数据和函数”部分。在运行时，我们创建类的*实例*，通常称为“对象”。我们经常以“传递消息”或“在对象上调用函数”来思考。
- en: 'Developers use classes to model people, places, business entities and concepts
    - all kinds of things. Here''s a simple example that begins to model a bus that
    might be used for public transportation:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员使用类来模拟人员、地点、业务实体和概念 - 各种各样的事物。这里有一个简单的示例，开始模拟可能用于公共交通的公交车：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Use the keyword `class` followed by the name of the class.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用关键字`class`后跟类名。
- en: Public transportation authorities typically assign route numbers to busses.
    The `Bus` class models the route number in a `private` field called `myRouteNumber`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 公共交通管理部门通常为公交车分配路线编号。`Bus`类模拟了一个名为`myRouteNumber`的`private`字段来表示路线编号。
- en: The `constructor` is a function that runs when client code instantiates an instance
    of the Bus object. As you can see, constructors can take parameters and in this
    instance, the constructor initializes the Bus' route number.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor`是一个函数，当客户端代码实例化Bus对象时运行。如您所见，构造函数可以接受参数，在这种情况下，构造函数初始化了Bus的路线编号。'
- en: Our business rules dictate that busses must know how to "say" their name. A
    function, `SayRoute`, meets the requirement by listing the bus's route number
    out to the console.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的业务规则规定公交车必须知道如何“说”它们的名字。一个名为`SayRoute`的函数通过在控制台上列出公交车的路线号来满足要求。
- en: 'TypeScript introduces a bit of new lingo to describe classes^([2](#fn_2)):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript引入了一些新术语来描述类^([2](#fn_2))：
- en: We generically call myRouteNumber, the constructor and SayRoute *class members*.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通常将myRouteNumber、构造函数和SayRoute称为*类成员*。
- en: myRouteNumber is a *property*.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: myRouteNumber是一个*属性*。
- en: '*constructor* is a special function that runs every time code creates a new
    instance of Bus. It runs only once per object instantiation but every time you
    create a new Bus object.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*constructor*是一个特殊函数，每次代码创建Bus的新实例时都会运行。它每个对象实例化只运行一次，但每次创建新的Bus对象时都会运行。'
- en: SayRoute is a *method*.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SayRoute是一个*方法*。
- en: 'Classes do nothing by themselves. They are much like cookie cutter templates
    - you can tell what the cookie is going to look like but you have no cookie until
    you have cookie dough. We create new objects as shown:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 类本身什么也不做。它们很像饼干模板 - 你可以知道饼干会是什么样子，但在有了饼干面团之前你没有饼干。我们创建新对象如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above code declares two instances of the `Bus` object, "myBeloved148" (a
    super express) and "theDreaded164" (a super local). It then invokes the `SayRoute`
    method on each instance.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码声明了`Bus`对象的两个实例，“myBeloved148”（超级快车）和“theDreaded164”（超级本地）。然后在每个实例上调用了`SayRoute`方法。
- en: 'When we create a new object using the `new` keyword, we''re *instantiating*
    the object. Some people like to say "newing it up" instead. Here''s a video showing
    the basics:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`new`关键字创建一个新对象时，我们正在*实例化*对象。有些人喜欢说“newing it up”。这里有一个展示基础知识的视频：
- en: Protecting Your Class Data and Methods
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护您的类数据和方法
- en: 'You no doubt noticed a complimentary pair of descriptors, `private` and `public`.
    The Bus class declares a *private* member, myRouteNumber. Private members (i.e.
    properties and methods) may only be referenced or invoked within the object itself.
    Public members and methods may be referenced both within the class itself, but
    also by client code. This means that the following code will not compile:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您无疑注意到了一对互补的描述符，`private`和`public`。Bus类声明了一个*private*成员，myRouteNumber。私有成员（即属性和方法）只能在对象内部引用或调用。公共成员和方法可以在类内部引用，也可以被客户端代码引用。这意味着以下代码将无法编译：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As with every other part of the language, good TypeScript IDEs provide intellisense
    to help you locate and use public and private methods properly. Here''s a short
    video demonstrating that point:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 就像语言的其他部分一样，优秀的 TypeScript IDE 提供智能提示来帮助您正确定位和使用公共和私有方法。这里有一个简短的视频演示了这一点：
- en: '[https://www.youtube.com/embed/QOvFFz1lRJM](https://www.youtube.com/embed/QOvFFz1lRJM)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/QOvFFz1lRJM](https://www.youtube.com/embed/QOvFFz1lRJM)'
- en: '(If you can''t see the video, [try accessing it here](https://youtu.be/QOvFFz1lRJM)
    or type this URL into your web browser: [https://youtu.be/QOvFFz1lRJM](https://youtu.be/QOvFFz1lRJM)).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: （如果您无法观看视频，请[在此处尝试访问](https://youtu.be/QOvFFz1lRJM)或将此URL键入您的网络浏览器中：[https://youtu.be/QOvFFz1lRJM](https://youtu.be/QOvFFz1lRJM)）。
- en: TypeScript classes go much deeper than this. The next chapter takes that dive.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 类的深入程度远不止于此。下一章会深入探讨这一点。
- en: '* * *'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ¹. These phrases, "passing messages" or "invoking functions" pretty much mean
    the same thing. It can be helpful at times to view objects as living, breathing
    entities. This paradigm lends itself to the "passing messages" concept. [↩](#reffn_1
    "Jump back to footnote [1] in the text.")
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. 这些短语，“传递消息”或“调用函数”基本上意思相同。有时将对象视为活生生的实体可能会有所帮助。这种范式很适合“传递消息”的概念。[↩](#reffn_1
    "返回文本中的脚注[1]")
- en: ². It's probably more accurate to say that it borrows the lingo from other languages.
    [↩](#reffn_2 "Jump back to footnote [2] in the text.")
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ². 更准确地说，它可能是从其他语言借鉴了术语。[↩](#reffn_2 "返回文本中的脚注[2]")
