- en: Rust Cookbook
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rust Cookbook
- en: Rust Cookbook
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rust Cookbook
- en: Numbers
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字
- en: Convert a number to a string
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将数字转换为字符串
- en: Let's say you have an integer you want to turn into a string.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个整数，想要将其转换为字符串。
- en: 'In C++ you might do one of the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，你可能会执行以下操作之一：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All of these have issues. Some are extensions to the standard, others may not
    be thread safe, some may break if `value` was changed to another type, e.g. `long
    long`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都有问题。有些是标准的扩展，其他的可能不是线程安全的，有些可能在将value更改为另一种类型（例如long long）时出现问题。
- en: 'Rust makes it far easier because numeric primitives implement a trait called
    ToString. The ToString trait has a to_string() function. So to convert the number
    to string is as simple as this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Rust使得这个过程变得更加容易，因为数值基元实现了一个名为ToString的特质。ToString特质有一个to_string()函数。所以将数字转换为字符串就像这样简单：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The same is true for a floating point number:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数也是如此：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Convert a number to a string with precision / padding
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将数字转换为带精度/填充的字符串
- en: 'In C you would add precision of padding using printf operations:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在C中，你会使用printf操作添加精度或填充：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In C++ you could use the C way (and to be honest it''s easier than what is
    written below), or you can set padding and precision through an ostream:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，你可以使用C的方式（老实说，这比下面写的更容易），或者你可以通过ostream设置填充和精度：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In Rust you can use format!() [[https://doc.rust-lang.org/std/fmt/](https://doc.rust-lang.org/std/fmt/)]
    for this purpose and it is similar to printf / sprintf:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rust中，你可以使用format!() [[https://doc.rust-lang.org/std/fmt/](https://doc.rust-lang.org/std/fmt/)]
    来实现这个目的，它类似于printf / sprintf：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Output
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Convert a number to a localized string
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将数字转换为本地化字符串
- en: Some locales will use dots or commas for separators. Some languages will use
    dots or commas for the decimal place. In order to format these strings we need
    to make use of the locale.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一些语言环境会使用点号或逗号作为分隔符。一些语言将使用点号或逗号作为小数点。为了格式化这些字符串，我们需要利用语言环境。
- en: TODO
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Convert a string to a number
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将字符串转换为数字
- en: In C / C++ a number might be converted from a string to a number in a number
    of ways
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在C / C++中，可以以多种方式将数字从字符串转换为数字
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: TODO
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: 'In Rust we have a &str containing a number:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rust中，我们有一个包含数字的&str：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Any type that implements a trait called FromStr can take its type from a string.
    All the standard primitive types implement FromStr so we can simply say this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 任何实现了名为FromStr的特质的类型都可以从字符串中获取其类型。所有标准的基本类型都实现了FromStr，所以我们可以简单地这样说：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note the unwrap() at the end - the FromStr::from_str() returns the value inside
    a Result<valueu0002c error="" class="hljs-meta">, to allow for the possibility
    that the string cannot be parsed. Production code should test for errors before
    calling unwrap() or it will panic.</valueu0002c>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意末尾的unwrap() - FromStr::from_str()返回Result<valueu0002c error="" class="hljs-meta">中的值，以允许字符串无法解析的可能性。生产代码应该在调用unwrap()之前测试错误，否则会发生panic。</valueu0002c>
- en: 'Another way to get the string is to call parse() on the &str or String itself.
    In this case, you use a slightly odd looking syntax nicknamed ''turbofish'' which
    looks like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 获取字符串的另一种方式是在&str或String本身上调用parse()。在这种情况下，你使用的是一个稍微奇怪的语法，被昵称为“涡轮鱼”，看起来像这样：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The string's implementation of parse() is a generic that works with any type
    implementing `FromStr`. So calling `parse::<i32>` is equivalent to calling `i32::from_str()`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串的parse()实现是一个泛型，可以与任何实现了FromStr的类型一起使用。因此，调用parse::<i32>等同于调用i32::from_str()。
- en: Note one immediate advantage of Rust is it uses string slices. That means you
    could have a long string with many numbers separated by delimiters and parse numbers
    straight out of the middle of it without constructing intermediate copies.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Rust的一个立即优势是它使用字符串切片。这意味着你可以有一个由分隔符分隔的长字符串，并且直接从其中间解析出数字，而不构造中间副本。
- en: Converting between numeric types
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在不同数值类型之间转换
- en: Converting between numeric types is as easy as using the "as" keyword.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同数值类型之间转换就像使用"as"关键字一样容易。
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The result in i is the integer part of f.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 结果中的i是f的整数部分。
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Strings
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串
- en: Rust comes with some very powerful functions that are attached to every &str
    and String type. These mostly correspond to what you may be used to on the std::string
    class and in boost string algorithms.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Rust附带了一些非常强大的函数，它们附加在每个&str和String类型上。这些基本上对应于你可能在std::string类和boost字符串算法中习惯的内容。
- en: Most find / match / trim / split string operations in Rust are efficient because
    they neither modify the existing string, nor return a duplicate to you. Instead
    they return slices, i.e. a pointer and a length into your existing string to denote
    the range that is the result.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Rust 中的查找 / 匹配 / 剪切 / 拆分字符串操作都很高效，因为它们既不修改现有字符串，也不将副本返回给您。相反，它们返回切片，即指向现有字符串的指针和长度，以表示结果的范围。
- en: It is only operations that modify the string contents themselves such as creating
    upper or lowercase versions that will return a new copy of a string.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 仅修改字符串内容本身的操作才会返回字符串的新副本，例如创建大写或小写版本。
- en: Trimming a string
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修剪字符串
- en: Spaces, tabs and other Unicode characters defined as whitespace can be trimmed
    from a string.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从字符串中修剪空格、制表符和其他 Unicode 中定义的空白字符。
- en: All strings have access to the following functions
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所有字符串都可以访问以下函数
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note the signatures of these functions - they are not mutable. The functions
    return a slice of the string that excludes the leading and / or trailing whitespace
    removed. In other words it is not duplicating the string, nor is it modifying
    the existing string. Instead it is just telling you what the trimmed range is
    within the &str you're already looking at.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这些函数的签名 - 它们是不可变的。函数返回一个字符串的切片，该切片不包括删除的前导和 / 或尾随空白。换句话说，它不是复制字符串，也不是修改现有字符串。相反，它只是告诉您在您已经查看的
    &str 中修剪的范围是什么。
- en: So
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Yields:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Also be aware that trim_left() and and trim_right() above are affected by the
    directionality of the string.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，上面的 `trim_left()` 和 `trim_right()` 受到字符串方向性的影响。
- en: Most strings read from left-to-right, but strings in Arabic or Hebrew are read
    right-to-left and will start with a control character that sets their base direction
    right-to-left. If that character is present, trim_left() actually trims from the
    right and trim_right() trims from the left.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数字符串从左到右读取，但阿拉伯语或希伯来语中的字符串从右到左读取，并且将以设置其基本方向为从右到左的控制字符开头。如果存在该字符，则 `trim_left()`
    实际上会从右侧修剪，而 `trim_right()` 会从左侧修剪。
- en: Get the length of a string
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取字符串的长度
- en: Every &str and String has a len() function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 &str 和 String 都有一个 len() 函数。
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that len() is the length in bytes. If you want the number of characters
    you need to call message.chars().count(), e.g.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，len() 是以字节为单位的长度。如果要获取字符数，需要调用 message.chars().count()，例如
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Splitting a string
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拆分字符串
- en: 'String slices and String have a variety of `split` methods that return an iterable
    collection of slices on a string:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串切片和字符串具有各种 `split` 方法，返回字符串的可迭代切片集合：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The standard `split()` takes a string pattern for the delimiter and returns
    a `std::str::Split` struct that is an double-ended iterator representation of
    the matching result. We could call the iterator directly if we so wished but the
    `collect()` method above puts the values of the iterator into a `Vec<&str>`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 `split()` 接受字符串模式作为分隔符，并返回一个 `std::str::Split` 结构体，该结构体是匹配结果的双端迭代器表示。如果愿意，我们可以直接调用迭代器，但是上面的
    `collect()` 方法将迭代器的值放入 `Vec<&str>` 中。
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: A string can also be split on an index, e.g.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以根据索引拆分字符串，例如
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that index is the *byte index*! The function will panic if the index is
    in the centre of a UTF-8 codepoint.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意索引是 *字节索引*！如果索引位于 UTF-8 代码点的中心，则函数将会崩溃。
- en: Another useful function is `split_whitespace` that splits on tabs, spaces, newlines
    and other Unicode whitespace. Any amount of whitespace is treated as a single
    delimiter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的函数是 `split_whitespace`，它在制表符、空格、换行符和其他 Unicode 空白上拆分。任何数量的空白都被视为单个分隔符。
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Yields the output.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 产生输出。
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tokenizing a string
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对字符串进行标记化
- en: TODO
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Joining strings together
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将字符串连接在一起
- en: TODO
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Getting a substring
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取子字符串
- en: TODO
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Converting a string between upper and lower case
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在大写和小写之间转换字符串
- en: 'Strings have these functions for converting between upper and lower case:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串具有以下用于在大写和小写之间转换的函数：
- en: '[PRE23]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: These functions will return a new String that contains the upper or lower case
    version of the input. Upper and lower case are defined by Unicode rules. Languages
    that have no upper or lowercase strings may return the same characters.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数将返回一个包含输入的大写或小写版本的新字符串。大写和小写由 Unicode 规则定义。没有大写或小写字符串的语言可能会返回相同的字符。
- en: Doing a case insensitive compare
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行不区分大小写的比较
- en: TODO
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Using regular expression matches
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用正则表达式匹配
- en: TODO
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Date and Time
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期和时间
- en: Get the current date and time
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取当前日期和时间
- en: TODO time_rs
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项 time_rs
- en: UTC
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 世界协调时间
- en: TODO explain what UTC is and why maintaining time in UTC is vital Epochs etc.
    TODO preamble about what an epoch is, the Unix epoch and other epochs
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: TODO 解释 UTC 是什么以及为什么在 UTC 中维护时间是至关重要的时代等。TODO 前言关于什么是时代，Unix 时代和其他时代
- en: Setting a timer
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置计时器
- en: TODO setting a timer
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: TODO 设置计时器
- en: System time vs UTC
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 系统时间 vs UTC
- en: TODO the reason timers might be set in system uptime vs timers being set in
    UTC. Answer because users and NTP can change the UTC time wherease system time
    is relative to bootup. So setting a timer to run 10s from now will always work
    against system time where setting a timer to run 10s from now in UTC could fail
    if the OS sets time back by an hour.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: TODO 设置计时器可能设置在系统正常运行时间上，也可能设置在 UTC 时间上的原因。答案是因为用户和 NTP 可以更改 UTC 时间，而系统时间是相对于启动的。因此，设置一个计时器在系统时间上运行
    10 秒将始终有效，而在 UTC 中运行 10 秒的计时器可能会失败，如果操作系统将时间向后调整一个小时的话。
- en: Formatting a date as a string
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将日期格式化为字符串
- en: TODO standard date formatting UTC TODO example
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: TODO 标准日期格式化 UTC TODO 示例
- en: Parsing a date from a string
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从字符串中解析日期
- en: TODO parsing a date from a string's TODO example
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: TODO 从字符串中解析日期的 TODO 示例
- en: Performing date / time arithmetic
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行日期/时间运算
- en: Collections
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合
- en: Creating a static array
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建静态数组
- en: 'An array primitive consists of a type and a length. e.g. a 16 kilobyte array
    of bytes can be created and zeroed like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 数组原语由类型和长度组成。例如，可以像这样创建并将 16 千字节的字节数组归零：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The variable specifies the type and length and the assignment operator assigns
    0 to every element.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 变量指定类型和长度，赋值运算符将 0 分配给每个元素。
- en: 'The type, length and values can be initialized implicitly in-place like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '类型、长度和值可以像这样隐式地就地初始化： '
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is an array of 5 &str values. The compiler will complain if we try to
    mix types in the array. We could also declare the array and manipulate it:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含 5 个 &str 值的数组。如果我们尝试在数组中混合类型，编译器将会抱怨。我们也可以声明数组并对其进行操作：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note in this case we declared the array, each element received an empty value.
    Then our code programmatically set the new element value. The latter form would
    obviously be useful for arrays that change. The latter would be useful for arrays
    which do not.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这种情况下，我们声明了数组，每个元素都获得了一个空值。然后我们的代码以编程方式设置了新元素的值。后一种形式显然对于会变化的数组是有用的。后者对于不变的数组是有用的。
- en: Creating a dynamic vector
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建动态向量
- en: A vector is a linear array of values. Unlike an array which has a fixed length,
    a vector can grow or shrink over time.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 向量是一组值的线性数组。与长度固定的数组不同，向量可以随时间增长或缩小。
- en: 'A vector can be created using the vec! macro like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 vec! 宏创建一个向量，如下所示：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This creates a mutable Vec and prepopulates it with 5 values. Note how the vec!
    macro can use square brackets for its arguments. We could have used round brackets
    and it would have meant the same.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个可变的 Vec，并使用 5 个值进行预填充。请注意，vec! 宏可以使用方括号作为其参数。我们也可以使用圆括号，它的意思是一样的。
- en: A new Vec can also be made using Vec::new() or Vec::with_capacity(size)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 Vec::new() 或 Vec::with_capacity(size) 创建一个新的 Vec
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: It is strongly recommended you use Vec::with_capacity() to create a vector with
    enough capacity for maximum number of elements you expect the vector to contain.
    It prevents the runtime from having to reallocate and copy data if you keep exceeding
    the existing capacity. It also significantly reduces heap fragmentation.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议您使用 Vec::with_capacity() 创建一个容量足够的向量，以容纳您预期的最大元素数量。如果您不断超出现有容量，它会阻止运行时重新分配和复制数据。它还会显著减少堆碎片化。
- en: Removing values from a vector
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从向量中移除值
- en: Sometimes you want to strip out values from a list which match some predicate.
    In which case there is a handy function for that purpose. TODO `.retain`
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您想要从匹配某些条件的列表中剥离值。在这种情况下，有一个方便的函数可用于此目的。TODO `.retain`
- en: Sorting a vector
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对向量进行排序
- en: 'A vector can be sorted by the natural sort order of the elements it contains:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按照其包含的元素的自然排序顺序对向量进行排序：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Sorting is done using the Ord trait and calling Ord::cmp() on the elements to
    compare them to each other.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 排序是使用 Ord trait 进行的，并在元素上调用 Ord::cmp() 进行彼此比较。
- en: Comparison can also be done through a closure and Vec::sort_by()
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过闭包和 Vec::sort_by() 进行比较
- en: TODO `.sort_by` TODO `.sort_by_key`
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: TODO `.sort_by` TODO `.sort_by_key`
- en: Stripping out duplicates from a vector
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从向量中剥离重复项
- en: Assuming your vec is sorted, you can strip out consecutive duplicate entries
    using dedup(). This function won't work and the result will be undefined if your
    vector is not sorted. TODO .dedup
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的 vec 已经排序，您可以使用 dedup() 剥离连续重复的条目。如果您的向量没有排序，此函数将无法正常工作，结果将是未定义的。TODO .dedup
- en: Creating a linked list
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建链表
- en: A linked list is more suitable than a vector when items are likely to be inserted
    or removed from either end or from points within the list.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当预计会从列表的两端或列表内部的点插入或删除项目时，链表比向量更适合。
- en: '`std::collections::LinkedList`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::collections::LinkedList`'
- en: Creating a hash set
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建哈希集
- en: A hash set is a unique collection of objects. It is particularly useful for
    removing duplicates that might occur in the input. `std::collections::HashSet`
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希集是一组唯一对象。它特别适用于消除输入中可能出现的重复项。`std::collections::HashSet`
- en: Creating a hash map
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建哈希映射
- en: A hash map consists of a key and a value. It is used for look up operations
    `std::collections::HashMap`
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希映射由键和值组成。用于查找操作 `std::collections::HashMap`
- en: Iterating collections
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代集合
- en: TODO
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Iterator adaptors
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代器适配器
- en: TODO
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: An adaptor turns the iterator into a new value
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器将迭代器转换为一个新值
- en: '`.enum` `.map(X)` `.take(N)` `.filter(X)`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`.enum` `.map(X)` `.take(N)` `.filter(X)`'
- en: Consuming iterators
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消费迭代器
- en: A consumer is a convenience way of iterating a collection and producing a value
    or a set of values from the result.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 消费者是一种方便的方式，可以从结果中迭代集合并产生一个值或一组值。
- en: '`.collect()`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`.collect()`'
- en: '`.find()` will return the first matching element that matches the closure predicate.
    TODO'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`.find()` 将返回与闭包谓词匹配的第一个匹配元素。待办事项'
- en: '`.fold()` is a way of doing calculations on the collection. It takes a base
    value, and then calls a closure to accumulate the value upon the result of the
    last value. TODO Processing collections'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`.fold()` 是在集合上执行计算的一种方式。它接受一个基础值，然后调用一个闭包来根据上一个值的结果累积值。待办事项 处理集合'
- en: Localization
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化
- en: Unicode considerations
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unicode 注意事项
- en: TODO
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Externalizing strings
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外部化字符串
- en: TODO
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Building strings from parameters
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从参数构建字符串
- en: TODO
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Creating a localization file
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建本地化文件
- en: TODO
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Logging
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录
- en: Files and streams
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件和流
- en: 'Rust comes with two standard modules:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 自带两个标准模块：
- en: std::io contains various stream related traits and other functionality.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: std::io 包含各种与流相关的特性和其他功能。
- en: std::fs contains filesystem related functionality including the implementation
    of IO traits to work with files.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: std::fs 包含与文件系统相关的功能，包括实现 IO 特性以处理文件。
- en: Creating a directory
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建目录
- en: A directory can be created with `std::fs::DirBuilder`, e.g.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `std::fs::DirBuilder` 创建目录，例如
- en: '[PRE30]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: File paths
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件路径
- en: Windows and Unix systems have different notation for path separators and a number
    of other differences. e.g. Windows has drive letters, long paths, and network
    paths called UNCs.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 和 Unix 系统对路径分隔符有不同的表示法，以及许多其他差异。例如，Windows 有驱动器号、长路径和称为 UNCs 的网络路径。
- en: Rust provides a PathBuf struct for manipulating paths and a Path which acts
    like a slice and can be the full path or just a portion of one.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 提供了 PathBuf 结构体来操纵路径，以及 Path，它像一个切片，可以是完整路径或部分路径。
- en: TODO simple example of a path being created
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项 简单示例，创建路径
- en: TODO simple example of a Path slice in actively
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项 简单示例，Path 切片的实际应用
- en: TODO simple example of relative path made absolute
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项 简单示例，将相对路径转换为绝对路径
- en: Windows has a bunch of path prefixes so std::path::Prefix provides a way to
    accessing those.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 有一堆路径前缀，因此 std::path::Prefix 提供了一种访问这些前缀的方式。
- en: TODO example of a path being made from a drive letter and path
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项 从驱动器号和路径创建路径的示例
- en: Opening a file
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开文件
- en: 'A `File` is a reference to an open file on the filesystem. When the struct
    goes out of scope the file is closed. There are static functions for creating
    or opening a file:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`File` 是对文件系统上打开的文件的引用。当结构体超出范围时，文件将关闭。有用于创建或打开文件的静态函数：'
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note that File::open() opens a file read-only by default. To open a file read-write,
    there is an OpenOptions struct that has methods to set the behaviour of the open
    file - read, write, create, append and truncate.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 File::open() 默认只读打开文件。要以读写模式打开文件，有一个 OpenOptions 结构体，其中有方法来设置打开文件的行为 - 读取、写入、创建、追加和截断。
- en: e.g. to open a file with read/write access, creating it if it does not already
    exist.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以读/写访问权限打开文件，如果文件不存在则创建它。
- en: '[PRE32]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Writing to a file
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写入文件
- en: TODO simple example of opening file to write
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项 简单示例，打开文件进行写入
- en: Reading lines from a file
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从文件中读取行
- en: TODO simple example of opening file text mode, printing contents
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项 简单示例，以文本模式打开文件，打印内容
- en: Threading
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程
- en: Rust actively enforces thread safety in your code. If you attempt to pass around
    data which is not marked thread safe (i.e. implements the Sync trait), you will
    get a compile error. If you use code which is implicitly not thread safe such
    as Rc<> you will get a compile error.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: This enforcement means that Rust protects against data race conditions, however
    be aware it cannot protect against other forms of race conditions or deadlocks,
    e.g. thread 1 waits for resource B (held by thread 2) while thread 2 waits for
    resource A (held by thread 1).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Creating a thread
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating a thread is simple with a closure.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: TODO
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Waiting for a thread to complete
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TODO
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Using atomic reference counting
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rust provides two reference counting types. Type Rc<> is for code residing on
    the same thread and so the reference counting is not atomic. Type Arc<> is for
    code that runs on different threads and the reference counting is atomic.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: An Arc<> can only hold a Sync derived object. Whenever you clone an Arc<> or
    its lifetime ends, the counter is atomically incremented or decremented. The last
    decrement to zero causes the object to be deleted.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: TODO example
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Locking a shared resource
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Message passing is a preferable way to prevent threads from sharing state but
    its not always possible.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Therefore Rust allows you to create a mutex and lock access to shared data.
    The guard that locks / unlocks the mutex protects the data and when the guard
    goes out of scope, the data is returned.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: This style of guard is called TODO
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Data race protection
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rust can guarantee that protection from data races, i.e. more than one thread
    accessing / writing to the same data at the same time.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: However even Rust cannot protect against the more general problem of race conditions.
    e.g. if two threads lock each other's data, then the code will deadlock. This
    is a problem that no language can solve.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Waiting for multiple threads to finish
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TODO
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Sending data to a thread
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any struct that implements the Send trait is treated safe to send to another
    thread. Of course that applies to
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Receiving data from a thread
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A thread can receive messages and block until it receives one. Thus it is easy
    to create a worker thread of some kind.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: TODO
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Networking
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Connecting to a server
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TODO
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Listening to a socket
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TODO
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with C
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using libc functions and types
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calling a C library
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generating a dynamic library
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calling Win32 functions
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Common design patterns
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Singleton
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A singleton has one instance ever in your application. TODO
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Factory
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TODO
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Observer
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TODO
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Facade
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TODO
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Flyweight
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TODO
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Adapter
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An adapter is where we present a different interface to a client calling the
    adapter than the interface the code is implemented in. This might be done to make
    some legacy code conform to a new interface, or to manage / hide complexity which
    might leak out into the client.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: As Rust is a relatively new language you are most likely to use an adapter pattern
    to wrap some existing code in C. A common use for the adapter in C++ is to wrap
    up a C library in RAII classes or similar.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Rust 是一种相对较新的语言，你很可能会使用适配器模式来封装一些现有的 C 代码。在 C++ 中，适配器的常见用途是将 C 库封装在 RAII
    类或类似的结构中。
- en: TODO
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
