- en: Exercises for Both Partners
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 双方练习
- en: Instructions
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 说明
- en: The first two exercises in this part should be done by both partners! You may
    work in pairs, as long as both partners fully understand the exercise and the
    concepts it covers. (There should still only be one solution that both partners
    agree on.) The remaining exercises will have numbers such as "A3", which translates
    to "Exercise 3 for Partner A".
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分的前两个练习应由双方合作完成！只要双方完全理解练习和所涵盖的概念，就可以成对工作。 （仍然应只有一个解决方案，双方都同意。）剩余的练习将有诸如“A3”之类的数字，这对应于“合作伙伴A的练习3”。
- en: The project is split into two major parts. After both partners have completed
    their exercises for part 1, combine your work and make sure that either partner
    understands the others' work. Since part 2 of the project depends on working code
    from part 1, combine your code for `adv.scm` and `adv-world.scm` carefully.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 项目分为两个主要部分。 在双方都完成了第1部分的练习后，将您的工作合并在一起，并确保其中一个合作伙伴了解另一个人的工作。 由于项目的第2部分取决于第1部分的工作代码，请小心地组合您的`adv.scm`和`adv-world.scm`的代码。
- en: Question 1
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1
- en: Instantiate a new Person object to represent yourself. Put yourself in a new
    place called `dormitory` (or wherever you live) and connect it to campus so that
    it is a reachable place. Create a place called `kirin`, north of `soda`. (It's
    actually on Solano Avenue.) Put a thing called `potstickers` there. Then give
    the necessary commands to move your character to `kirin`, take the `potstickers`,
    then move yourself to where `Brian` is, put down the `potstickers`, and have `Brian`
    take them. Then go back to the lab and get back to work. (There is no truth to
    the rumor that you'll get an A in the course for doing this in real life!) All
    this is just to ensure that you know how to speak the language of the adventure
    program.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化一个新的Person对象来代表你自己。 把自己放在一个叫做`dormitory`（或者你住在哪里）的新地方，并将其连接到校园，以便可以到达。 创建一个叫做`kirin`的地方，位于`soda`的北面。
    （实际上它在Solano大道上。）在那里放一个叫做`potstickers`的东西。 然后给出必要的命令，将您的角色移动到`kirin`，拿起`potstickers`，然后将自己移动到`Brian`所在的地方，放下`potstickers`，并让`Brian`拿走。
    然后回到实验室，继续工作。 （有传言说你在现实生活中这样做会得到这门课的A！）所有这些只是为了确保您知道如何讲冒险程序的语言。
- en: '**List all messages that are sent during this episode.** It''s a good idea
    to see if you can work this out in your head, at least for some of the actions
    that take place, but you can also trace the `ask` procedure to get a complete
    list. You don''t have to hand in this listing of messages. (**You must turn in
    a transcript of the episode without the tracing.**) The purpose of this exercise
    is to familiarize you with the ways in which the different objects send messages
    back and forth as they do their work.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**列出在此情节中发送的所有消息。** 在脑海中尝试解决这个问题是个好主意，至少对于一些发生的动作来说是这样，但是您也可以跟踪`ask`过程以获取完整的列表。
    您不必提交此消息列表。 （**您必须提交一份不包含跟踪的情节转录。**）此练习的目的是使您熟悉不同对象在执行工作时如何互相发送消息的方式。'
- en: '[Tip: we have provided a `move-loop` procedure that you may find useful as
    an aid in debugging your work. You can use it to move a person repeatedly.]'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示：我们提供了一个`move-loop`过程，您可能会发现它作为调试工作的辅助工具。 您可以使用它来重复移动一个人。]'
- en: Question 2
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题2
- en: 'It is very important that you think about and understand the kinds of objects
    involved in the adventure game. Please answer the following questions:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 很重要的是，您考虑并理解参与冒险游戏的对象的类型。 请回答以下问题：
- en: '**a)** What kind of thing is the value of variable `Brian`? **Hint:** What
    is returned by STk in the following situation:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**a)** 变量`Brian`的值是什么类型的东西？ **提示：**在以下情况下STk返回什么：'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**b)** List all the messages that a Place understands. (You might want to maintain
    such a list for your own use, for every type of object, to help in the debugging
    effort.)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**b)** 列出地点了解的所有消息。 （您可能希望为自己的每种对象类型维护这样的列表，以帮助调试工作。）'
- en: '**c)** We have been defining a variable to hold each object in our world. For
    example, we defined `bagel` by saying:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**c)** 我们一直在定义一个变量来保存我们世界中的每个对象。 例如，我们说：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is just for convenience. Every object does not have to have a top-level
    definition. Every object DOES have to be constructed and connected to the world.
    For instance, suppose we did this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是为了方便起见。 并非每个对象都必须具有顶层定义。 每个对象都必须构建并连接到世界。 例如，假设我们这样做了：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What is returned by the following expressions and why?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表达式返回什么以及为什么？
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**d)** The implication of all this is that there can be multiple names for
    objects. One name is the value of the object''s internal `name` variable. In addition,
    we can define a variable at the top-level to refer to an object. Moreover, one
    object can have a private name for another object. For example, `Brian` has a
    variable `place` which is currently bound to the object that represents People''s
    Park. Some examples to think about:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**d)** 所有这一切的含义是对象可以有多个名称。一个名称是对象内部`name`变量的值。此外，我们可以在顶层定义一个变量来引用一个对象。此外，一个对象可以有另一个对象的私有名称。例如，`Brian`有一个变量`place`，它当前绑定到代表人民公园的对象。一些需要思考的例子：'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Okay. Suppose we type the following into STk:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。假设我们在STk中输入以下内容：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Which of the following is correct? Why?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪个是正确的？为什么？
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: or
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: or
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What is returned by `(computer 'name)`? Why?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`(computer ''name)`返回什么？为什么？'
- en: '**e)** We have provided a definition of the Thing class that does not use the
    object-oriented programming syntax described in the handout. Translate it into
    the new notation.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**e)** 我们提供了一个不使用手册中描述的面向对象编程语法的Thing类的定义。将其翻译成新的符号。'
- en: '**f)** Sometimes it''s inconvenient to debug an object interactively because
    its methods return objects and we want to see the names of the objects. You can
    create auxiliary procedures for interactive use (as opposed to use inside object
    methods) that provide the desired information in printable form. For example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**f)** 有时候以交互方式调试一个对象是不方便的，因为它的方法返回对象，而我们想要看到对象的名称。你可以创建辅助程序供交互使用（与对象方法内部使用相对），以便以可打印形式提供所需信息。例如：'
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Write a procedure `whereis` that takes a person as its argument and returns
    the name of the place where that person is. Write a procedure `owner` that takes
    a thing as its argument and returns the name of the person who owns it. (Make
    sure it works for things that aren't owned by anyone.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`whereis`的过程，它以一个人作为参数，并返回该人所在地的名称。编写一个名为`owner`的过程，它以一个物品作为参数，并返回拥有它的人的名称。（确保它适用于没有任何所有者的物品。）
- en: Procedures like this can be very helpful in debugging the later parts of the
    project, so feel free to write more of them for your own use. Now it's time for
    you to make your first modifications to the adventure game. This is where you
    split the work individually.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 类似这样的过程在调试项目的后期非常有帮助，所以请随意为自己编写更多。现在是时候对冒险游戏进行第一次修改了。这是你们分工的时候了。
