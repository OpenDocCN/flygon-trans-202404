- en: Send and receive operations on channel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Send and receive operations on channel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '`Go`''s built-in `channel` type provides a handy method for communicating and
    synchronizing: The producer pushes data into channel and the consumer pulls data
    from it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The send operation on channel is simple, as long as the filled-in stuff is
    a valid expression and matches the channel''s type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Take the following code as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Receive operation on channel pulls the value from the channel, and you can
    save it or discard it if you don''t care what you have got. Check the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The running result is `2`, and that's because the first value (`1`) is left
    out in `<-ch` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Compared to its send sibling, the receive operation is a little tricky: in
    assignment and initialization, there will be another return value which indicates
    whether this communication is successful or not. And the idiom of this variable''s
    name is `ok`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The value of `ok` is `true` if the value received was delivered by a successful
    send operation to the channel, or `false` if it is a zero value generated because
    the channel is closed and empty. That means although the channel is closed, as
    long as there is still data in the channel, the receive operation can of course
    get things from it. See the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The executing result is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see after `func` goroutine executes closing channel operation, the value
    of `v` got from channel is the zero value of integer type: `0`, and `ok` is `false`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Go Programming Language Specification](https://golang.org/ref/spec).'
  prefs: []
  type: TYPE_NORMAL
