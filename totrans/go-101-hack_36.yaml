- en: Send and receive operations on channel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在通道上进行发送和接收操作
- en: Send and receive operations on channel
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在通道上进行发送和接收操作
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`Go`''s built-in `channel` type provides a handy method for communicating and
    synchronizing: The producer pushes data into channel and the consumer pulls data
    from it.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`Go`内置的`channel`类型提供了一种便利的通信和同步方法：生产者将数据推入通道，而消费者从中拉取数据。'
- en: 'The send operation on channel is simple, as long as the filled-in stuff is
    a valid expression and matches the channel''s type:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通道上的发送操作很简单，只要填入的东西是一个有效的表达式并且与通道的类型匹配即可：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Take the following code as an example:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下代码为例：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Receive operation on channel pulls the value from the channel, and you can
    save it or discard it if you don''t care what you have got. Check the following
    example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在通道上的接收操作会从通道中拉取值，如果你不在乎得到了什么，可以保存或丢弃它。请看以下示例：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The running result is `2`, and that's because the first value (`1`) is left
    out in `<-ch` statement.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 运行结果为`2`，这是因为在`<-ch`语句中第一个值(`1`)被忽略了。
- en: 'Compared to its send sibling, the receive operation is a little tricky: in
    assignment and initialization, there will be another return value which indicates
    whether this communication is successful or not. And the idiom of this variable''s
    name is `ok`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与其发送操作相比，接收操作有点棘手：在赋值和初始化中，会有另一个返回值，它表示这次通信是否成功。而这个变量的惯用命名是`ok`：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The value of `ok` is `true` if the value received was delivered by a successful
    send operation to the channel, or `false` if it is a zero value generated because
    the channel is closed and empty. That means although the channel is closed, as
    long as there is still data in the channel, the receive operation can of course
    get things from it. See the following code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果接收到的值是通过成功的发送操作传递到通道的，`ok`的值为`true`，或者如果它是因为通道关闭并且为空而生成的零值，则为`false`。这意味着尽管通道已关闭，只要通道中仍有数据，接收操作当然可以从中获取东西。看以下代码：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The executing result is like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 执行结果如下：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can see after `func` goroutine executes closing channel operation, the value
    of `v` got from channel is the zero value of integer type: `0`, and `ok` is `false`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，当`func`协程执行关闭通道操作后，从通道获取的`v`的值是整数类型的零值：`0`，而`ok`是`false`。
- en: 'Reference:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：
- en: '[The Go Programming Language Specification](https://golang.org/ref/spec).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go 语言规范](https://golang.org/ref/spec)。'
