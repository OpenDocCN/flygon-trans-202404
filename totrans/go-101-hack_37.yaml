- en: Channel types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Channel types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'When declaring variables of channel type, the most common instances are like
    this (`T` is any valid type):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'But you may also see examples as follows :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'What the hell are the differences among these `3` definitions? The distinctions
    are here:'
  prefs: []
  type: TYPE_NORMAL
- en: '(1) `chan T`: The channel can receive and send `T` type data;'
  prefs: []
  type: TYPE_NORMAL
- en: '(2) `<-chan T`: The channel is **read-only**, which means you can **only receive**
    `T` type data from this channel;'
  prefs: []
  type: TYPE_NORMAL
- en: '(2) `chan<- T`: The channel is **write-only**, which means you can **only send**
    `T` type data to this channel.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The mnemonics is correlating them with channel operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`<-chan T` is similar to `v := <-ch`, so it is a receive-only channel, and
    it is the same as `chan<- T` and `ch <- v`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Restricting a channel type (read-only or write-only) can let compiler do strict
    checks for you. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The compilation generates following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, the `<-` operator associates with the **leftmost** `chan` possible,
    i.e., `chan<- chan int` and `chan (<-chan int)` aren''t equal: the previous is
    same as `chan<- (chan int)`, which defines a **write-only** channel whose data
    type is a channel who can receive and send `int` data; while `chan (<-chan int)`
    defines a **write-and-read** channel whose data type is a channel who can only
    receive `int` data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Channel types](https://nanxiao.gitbooks.io/golang-101-hacks/content/posts/unbuffered-and-buffered-channels.html);'
  prefs: []
  type: TYPE_NORMAL
- en: '[How to understand "<-chan" in declaration?](https://groups.google.com/forum/#!topic/golang-nuts/ul_K7S3EtOk).'
  prefs: []
  type: TYPE_NORMAL
